
VibeCheck.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00019710  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b18  080199e0  080199e0  0001a9e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801a4f8  0801a4f8  0001b4f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801a500  0801a500  0001b500  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0801a504  0801a504  0001b504  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000002cc  24000000  0801a508  0001c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000059b0  240002cc  0801a7d4  0001c2cc  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24005c7c  0801a7d4  0001cc7c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0001c2cc  2**0
                  CONTENTS, READONLY
 10 .debug_info   00033eff  00000000  00000000  0001c2fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00006769  00000000  00000000  000501f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000026b0  00000000  00000000  00056968  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001e0d  00000000  00000000  00059018  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0000ac48  00000000  00000000  0005ae25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0003b120  00000000  00000000  00065a6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001718a0  00000000  00000000  000a0b8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  0021242d  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000bb10  00000000  00000000  00212470  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000072  00000000  00000000  0021df80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240002cc 	.word	0x240002cc
 80002ec:	00000000 	.word	0x00000000
 80002f0:	080199c8 	.word	0x080199c8

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240002d0 	.word	0x240002d0
 800030c:	080199c8 	.word	0x080199c8

08000310 <strcmp>:
 8000310:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000314:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000318:	2a01      	cmp	r2, #1
 800031a:	bf28      	it	cs
 800031c:	429a      	cmpcs	r2, r3
 800031e:	d0f7      	beq.n	8000310 <strcmp>
 8000320:	1ad0      	subs	r0, r2, r3
 8000322:	4770      	bx	lr
	...

08000330 <memchr>:
 8000330:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000334:	2a10      	cmp	r2, #16
 8000336:	db2b      	blt.n	8000390 <memchr+0x60>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	d008      	beq.n	8000350 <memchr+0x20>
 800033e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000342:	3a01      	subs	r2, #1
 8000344:	428b      	cmp	r3, r1
 8000346:	d02d      	beq.n	80003a4 <memchr+0x74>
 8000348:	f010 0f07 	tst.w	r0, #7
 800034c:	b342      	cbz	r2, 80003a0 <memchr+0x70>
 800034e:	d1f6      	bne.n	800033e <memchr+0xe>
 8000350:	b4f0      	push	{r4, r5, r6, r7}
 8000352:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000356:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800035a:	f022 0407 	bic.w	r4, r2, #7
 800035e:	f07f 0700 	mvns.w	r7, #0
 8000362:	2300      	movs	r3, #0
 8000364:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000368:	3c08      	subs	r4, #8
 800036a:	ea85 0501 	eor.w	r5, r5, r1
 800036e:	ea86 0601 	eor.w	r6, r6, r1
 8000372:	fa85 f547 	uadd8	r5, r5, r7
 8000376:	faa3 f587 	sel	r5, r3, r7
 800037a:	fa86 f647 	uadd8	r6, r6, r7
 800037e:	faa5 f687 	sel	r6, r5, r7
 8000382:	b98e      	cbnz	r6, 80003a8 <memchr+0x78>
 8000384:	d1ee      	bne.n	8000364 <memchr+0x34>
 8000386:	bcf0      	pop	{r4, r5, r6, r7}
 8000388:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800038c:	f002 0207 	and.w	r2, r2, #7
 8000390:	b132      	cbz	r2, 80003a0 <memchr+0x70>
 8000392:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000396:	3a01      	subs	r2, #1
 8000398:	ea83 0301 	eor.w	r3, r3, r1
 800039c:	b113      	cbz	r3, 80003a4 <memchr+0x74>
 800039e:	d1f8      	bne.n	8000392 <memchr+0x62>
 80003a0:	2000      	movs	r0, #0
 80003a2:	4770      	bx	lr
 80003a4:	3801      	subs	r0, #1
 80003a6:	4770      	bx	lr
 80003a8:	2d00      	cmp	r5, #0
 80003aa:	bf06      	itte	eq
 80003ac:	4635      	moveq	r5, r6
 80003ae:	3803      	subeq	r0, #3
 80003b0:	3807      	subne	r0, #7
 80003b2:	f015 0f01 	tst.w	r5, #1
 80003b6:	d107      	bne.n	80003c8 <memchr+0x98>
 80003b8:	3001      	adds	r0, #1
 80003ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80003be:	bf02      	ittt	eq
 80003c0:	3001      	addeq	r0, #1
 80003c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003c6:	3001      	addeq	r0, #1
 80003c8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ca:	3801      	subs	r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	bf00      	nop

080003d0 <strlen>:
 80003d0:	4603      	mov	r3, r0
 80003d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003d6:	2a00      	cmp	r2, #0
 80003d8:	d1fb      	bne.n	80003d2 <strlen+0x2>
 80003da:	1a18      	subs	r0, r3, r0
 80003dc:	3801      	subs	r0, #1
 80003de:	4770      	bx	lr

080003e0 <__aeabi_drsub>:
 80003e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80003e4:	e002      	b.n	80003ec <__adddf3>
 80003e6:	bf00      	nop

080003e8 <__aeabi_dsub>:
 80003e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080003ec <__adddf3>:
 80003ec:	b530      	push	{r4, r5, lr}
 80003ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	bf1f      	itttt	ne
 8000402:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000406:	ea55 0c02 	orrsne.w	ip, r5, r2
 800040a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800040e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000412:	f000 80e2 	beq.w	80005da <__adddf3+0x1ee>
 8000416:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800041a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800041e:	bfb8      	it	lt
 8000420:	426d      	neglt	r5, r5
 8000422:	dd0c      	ble.n	800043e <__adddf3+0x52>
 8000424:	442c      	add	r4, r5
 8000426:	ea80 0202 	eor.w	r2, r0, r2
 800042a:	ea81 0303 	eor.w	r3, r1, r3
 800042e:	ea82 0000 	eor.w	r0, r2, r0
 8000432:	ea83 0101 	eor.w	r1, r3, r1
 8000436:	ea80 0202 	eor.w	r2, r0, r2
 800043a:	ea81 0303 	eor.w	r3, r1, r3
 800043e:	2d36      	cmp	r5, #54	@ 0x36
 8000440:	bf88      	it	hi
 8000442:	bd30      	pophi	{r4, r5, pc}
 8000444:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000448:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800044c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000450:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000454:	d002      	beq.n	800045c <__adddf3+0x70>
 8000456:	4240      	negs	r0, r0
 8000458:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800045c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000460:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000464:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000468:	d002      	beq.n	8000470 <__adddf3+0x84>
 800046a:	4252      	negs	r2, r2
 800046c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000470:	ea94 0f05 	teq	r4, r5
 8000474:	f000 80a7 	beq.w	80005c6 <__adddf3+0x1da>
 8000478:	f1a4 0401 	sub.w	r4, r4, #1
 800047c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000480:	db0d      	blt.n	800049e <__adddf3+0xb2>
 8000482:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000486:	fa22 f205 	lsr.w	r2, r2, r5
 800048a:	1880      	adds	r0, r0, r2
 800048c:	f141 0100 	adc.w	r1, r1, #0
 8000490:	fa03 f20e 	lsl.w	r2, r3, lr
 8000494:	1880      	adds	r0, r0, r2
 8000496:	fa43 f305 	asr.w	r3, r3, r5
 800049a:	4159      	adcs	r1, r3
 800049c:	e00e      	b.n	80004bc <__adddf3+0xd0>
 800049e:	f1a5 0520 	sub.w	r5, r5, #32
 80004a2:	f10e 0e20 	add.w	lr, lr, #32
 80004a6:	2a01      	cmp	r2, #1
 80004a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004ac:	bf28      	it	cs
 80004ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004b2:	fa43 f305 	asr.w	r3, r3, r5
 80004b6:	18c0      	adds	r0, r0, r3
 80004b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004c0:	d507      	bpl.n	80004d2 <__adddf3+0xe6>
 80004c2:	f04f 0e00 	mov.w	lr, #0
 80004c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80004ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80004d2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80004d6:	d31b      	bcc.n	8000510 <__adddf3+0x124>
 80004d8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80004dc:	d30c      	bcc.n	80004f8 <__adddf3+0x10c>
 80004de:	0849      	lsrs	r1, r1, #1
 80004e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004e8:	f104 0401 	add.w	r4, r4, #1
 80004ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004f0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004f4:	f080 809a 	bcs.w	800062c <__adddf3+0x240>
 80004f8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004fc:	bf08      	it	eq
 80004fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000502:	f150 0000 	adcs.w	r0, r0, #0
 8000506:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800050a:	ea41 0105 	orr.w	r1, r1, r5
 800050e:	bd30      	pop	{r4, r5, pc}
 8000510:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000514:	4140      	adcs	r0, r0
 8000516:	eb41 0101 	adc.w	r1, r1, r1
 800051a:	3c01      	subs	r4, #1
 800051c:	bf28      	it	cs
 800051e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000522:	d2e9      	bcs.n	80004f8 <__adddf3+0x10c>
 8000524:	f091 0f00 	teq	r1, #0
 8000528:	bf04      	itt	eq
 800052a:	4601      	moveq	r1, r0
 800052c:	2000      	moveq	r0, #0
 800052e:	fab1 f381 	clz	r3, r1
 8000532:	bf08      	it	eq
 8000534:	3320      	addeq	r3, #32
 8000536:	f1a3 030b 	sub.w	r3, r3, #11
 800053a:	f1b3 0220 	subs.w	r2, r3, #32
 800053e:	da0c      	bge.n	800055a <__adddf3+0x16e>
 8000540:	320c      	adds	r2, #12
 8000542:	dd08      	ble.n	8000556 <__adddf3+0x16a>
 8000544:	f102 0c14 	add.w	ip, r2, #20
 8000548:	f1c2 020c 	rsb	r2, r2, #12
 800054c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000550:	fa21 f102 	lsr.w	r1, r1, r2
 8000554:	e00c      	b.n	8000570 <__adddf3+0x184>
 8000556:	f102 0214 	add.w	r2, r2, #20
 800055a:	bfd8      	it	le
 800055c:	f1c2 0c20 	rsble	ip, r2, #32
 8000560:	fa01 f102 	lsl.w	r1, r1, r2
 8000564:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000568:	bfdc      	itt	le
 800056a:	ea41 010c 	orrle.w	r1, r1, ip
 800056e:	4090      	lslle	r0, r2
 8000570:	1ae4      	subs	r4, r4, r3
 8000572:	bfa2      	ittt	ge
 8000574:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000578:	4329      	orrge	r1, r5
 800057a:	bd30      	popge	{r4, r5, pc}
 800057c:	ea6f 0404 	mvn.w	r4, r4
 8000580:	3c1f      	subs	r4, #31
 8000582:	da1c      	bge.n	80005be <__adddf3+0x1d2>
 8000584:	340c      	adds	r4, #12
 8000586:	dc0e      	bgt.n	80005a6 <__adddf3+0x1ba>
 8000588:	f104 0414 	add.w	r4, r4, #20
 800058c:	f1c4 0220 	rsb	r2, r4, #32
 8000590:	fa20 f004 	lsr.w	r0, r0, r4
 8000594:	fa01 f302 	lsl.w	r3, r1, r2
 8000598:	ea40 0003 	orr.w	r0, r0, r3
 800059c:	fa21 f304 	lsr.w	r3, r1, r4
 80005a0:	ea45 0103 	orr.w	r1, r5, r3
 80005a4:	bd30      	pop	{r4, r5, pc}
 80005a6:	f1c4 040c 	rsb	r4, r4, #12
 80005aa:	f1c4 0220 	rsb	r2, r4, #32
 80005ae:	fa20 f002 	lsr.w	r0, r0, r2
 80005b2:	fa01 f304 	lsl.w	r3, r1, r4
 80005b6:	ea40 0003 	orr.w	r0, r0, r3
 80005ba:	4629      	mov	r1, r5
 80005bc:	bd30      	pop	{r4, r5, pc}
 80005be:	fa21 f004 	lsr.w	r0, r1, r4
 80005c2:	4629      	mov	r1, r5
 80005c4:	bd30      	pop	{r4, r5, pc}
 80005c6:	f094 0f00 	teq	r4, #0
 80005ca:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80005ce:	bf06      	itte	eq
 80005d0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80005d4:	3401      	addeq	r4, #1
 80005d6:	3d01      	subne	r5, #1
 80005d8:	e74e      	b.n	8000478 <__adddf3+0x8c>
 80005da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005de:	bf18      	it	ne
 80005e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005e4:	d029      	beq.n	800063a <__adddf3+0x24e>
 80005e6:	ea94 0f05 	teq	r4, r5
 80005ea:	bf08      	it	eq
 80005ec:	ea90 0f02 	teqeq	r0, r2
 80005f0:	d005      	beq.n	80005fe <__adddf3+0x212>
 80005f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005f6:	bf04      	itt	eq
 80005f8:	4619      	moveq	r1, r3
 80005fa:	4610      	moveq	r0, r2
 80005fc:	bd30      	pop	{r4, r5, pc}
 80005fe:	ea91 0f03 	teq	r1, r3
 8000602:	bf1e      	ittt	ne
 8000604:	2100      	movne	r1, #0
 8000606:	2000      	movne	r0, #0
 8000608:	bd30      	popne	{r4, r5, pc}
 800060a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800060e:	d105      	bne.n	800061c <__adddf3+0x230>
 8000610:	0040      	lsls	r0, r0, #1
 8000612:	4149      	adcs	r1, r1
 8000614:	bf28      	it	cs
 8000616:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800061a:	bd30      	pop	{r4, r5, pc}
 800061c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000620:	bf3c      	itt	cc
 8000622:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000626:	bd30      	popcc	{r4, r5, pc}
 8000628:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800062c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000630:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000634:	f04f 0000 	mov.w	r0, #0
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800063e:	bf1a      	itte	ne
 8000640:	4619      	movne	r1, r3
 8000642:	4610      	movne	r0, r2
 8000644:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000648:	bf1c      	itt	ne
 800064a:	460b      	movne	r3, r1
 800064c:	4602      	movne	r2, r0
 800064e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000652:	bf06      	itte	eq
 8000654:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000658:	ea91 0f03 	teqeq	r1, r3
 800065c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000660:	bd30      	pop	{r4, r5, pc}
 8000662:	bf00      	nop

08000664 <__aeabi_ui2d>:
 8000664:	f090 0f00 	teq	r0, #0
 8000668:	bf04      	itt	eq
 800066a:	2100      	moveq	r1, #0
 800066c:	4770      	bxeq	lr
 800066e:	b530      	push	{r4, r5, lr}
 8000670:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000674:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000678:	f04f 0500 	mov.w	r5, #0
 800067c:	f04f 0100 	mov.w	r1, #0
 8000680:	e750      	b.n	8000524 <__adddf3+0x138>
 8000682:	bf00      	nop

08000684 <__aeabi_i2d>:
 8000684:	f090 0f00 	teq	r0, #0
 8000688:	bf04      	itt	eq
 800068a:	2100      	moveq	r1, #0
 800068c:	4770      	bxeq	lr
 800068e:	b530      	push	{r4, r5, lr}
 8000690:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000694:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000698:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800069c:	bf48      	it	mi
 800069e:	4240      	negmi	r0, r0
 80006a0:	f04f 0100 	mov.w	r1, #0
 80006a4:	e73e      	b.n	8000524 <__adddf3+0x138>
 80006a6:	bf00      	nop

080006a8 <__aeabi_f2d>:
 80006a8:	0042      	lsls	r2, r0, #1
 80006aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80006b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006b6:	bf1f      	itttt	ne
 80006b8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80006bc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80006c0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80006c4:	4770      	bxne	lr
 80006c6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80006ca:	bf08      	it	eq
 80006cc:	4770      	bxeq	lr
 80006ce:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80006d2:	bf04      	itt	eq
 80006d4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80006d8:	4770      	bxeq	lr
 80006da:	b530      	push	{r4, r5, lr}
 80006dc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80006e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006e8:	e71c      	b.n	8000524 <__adddf3+0x138>
 80006ea:	bf00      	nop

080006ec <__aeabi_ul2d>:
 80006ec:	ea50 0201 	orrs.w	r2, r0, r1
 80006f0:	bf08      	it	eq
 80006f2:	4770      	bxeq	lr
 80006f4:	b530      	push	{r4, r5, lr}
 80006f6:	f04f 0500 	mov.w	r5, #0
 80006fa:	e00a      	b.n	8000712 <__aeabi_l2d+0x16>

080006fc <__aeabi_l2d>:
 80006fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000700:	bf08      	it	eq
 8000702:	4770      	bxeq	lr
 8000704:	b530      	push	{r4, r5, lr}
 8000706:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800070a:	d502      	bpl.n	8000712 <__aeabi_l2d+0x16>
 800070c:	4240      	negs	r0, r0
 800070e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000712:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000716:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800071a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800071e:	f43f aed8 	beq.w	80004d2 <__adddf3+0xe6>
 8000722:	f04f 0203 	mov.w	r2, #3
 8000726:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800072a:	bf18      	it	ne
 800072c:	3203      	addne	r2, #3
 800072e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000732:	bf18      	it	ne
 8000734:	3203      	addne	r2, #3
 8000736:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800073a:	f1c2 0320 	rsb	r3, r2, #32
 800073e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000742:	fa20 f002 	lsr.w	r0, r0, r2
 8000746:	fa01 fe03 	lsl.w	lr, r1, r3
 800074a:	ea40 000e 	orr.w	r0, r0, lr
 800074e:	fa21 f102 	lsr.w	r1, r1, r2
 8000752:	4414      	add	r4, r2
 8000754:	e6bd      	b.n	80004d2 <__adddf3+0xe6>
 8000756:	bf00      	nop

08000758 <__aeabi_uldivmod>:
 8000758:	b953      	cbnz	r3, 8000770 <__aeabi_uldivmod+0x18>
 800075a:	b94a      	cbnz	r2, 8000770 <__aeabi_uldivmod+0x18>
 800075c:	2900      	cmp	r1, #0
 800075e:	bf08      	it	eq
 8000760:	2800      	cmpeq	r0, #0
 8000762:	bf1c      	itt	ne
 8000764:	f04f 31ff 	movne.w	r1, #4294967295
 8000768:	f04f 30ff 	movne.w	r0, #4294967295
 800076c:	f000 b9a2 	b.w	8000ab4 <__aeabi_idiv0>
 8000770:	f1ad 0c08 	sub.w	ip, sp, #8
 8000774:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000778:	f000 f83e 	bl	80007f8 <__udivmoddi4>
 800077c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000780:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000784:	b004      	add	sp, #16
 8000786:	4770      	bx	lr

08000788 <__aeabi_d2lz>:
 8000788:	b508      	push	{r3, lr}
 800078a:	4602      	mov	r2, r0
 800078c:	460b      	mov	r3, r1
 800078e:	ec43 2b17 	vmov	d7, r2, r3
 8000792:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000796:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800079a:	d403      	bmi.n	80007a4 <__aeabi_d2lz+0x1c>
 800079c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80007a0:	f000 b80a 	b.w	80007b8 <__aeabi_d2ulz>
 80007a4:	eeb1 7b47 	vneg.f64	d7, d7
 80007a8:	ec51 0b17 	vmov	r0, r1, d7
 80007ac:	f000 f804 	bl	80007b8 <__aeabi_d2ulz>
 80007b0:	4240      	negs	r0, r0
 80007b2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007b6:	bd08      	pop	{r3, pc}

080007b8 <__aeabi_d2ulz>:
 80007b8:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 80007e8 <__aeabi_d2ulz+0x30>
 80007bc:	ec41 0b17 	vmov	d7, r0, r1
 80007c0:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 80007f0 <__aeabi_d2ulz+0x38>
 80007c4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80007c8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80007cc:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80007d0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80007d4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80007d8:	ee16 1a10 	vmov	r1, s12
 80007dc:	ee17 0a90 	vmov	r0, s15
 80007e0:	4770      	bx	lr
 80007e2:	bf00      	nop
 80007e4:	f3af 8000 	nop.w
 80007e8:	00000000 	.word	0x00000000
 80007ec:	3df00000 	.word	0x3df00000
 80007f0:	00000000 	.word	0x00000000
 80007f4:	41f00000 	.word	0x41f00000

080007f8 <__udivmoddi4>:
 80007f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007fc:	9d08      	ldr	r5, [sp, #32]
 80007fe:	460c      	mov	r4, r1
 8000800:	2b00      	cmp	r3, #0
 8000802:	d14e      	bne.n	80008a2 <__udivmoddi4+0xaa>
 8000804:	4694      	mov	ip, r2
 8000806:	458c      	cmp	ip, r1
 8000808:	4686      	mov	lr, r0
 800080a:	fab2 f282 	clz	r2, r2
 800080e:	d962      	bls.n	80008d6 <__udivmoddi4+0xde>
 8000810:	b14a      	cbz	r2, 8000826 <__udivmoddi4+0x2e>
 8000812:	f1c2 0320 	rsb	r3, r2, #32
 8000816:	4091      	lsls	r1, r2
 8000818:	fa20 f303 	lsr.w	r3, r0, r3
 800081c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000820:	4319      	orrs	r1, r3
 8000822:	fa00 fe02 	lsl.w	lr, r0, r2
 8000826:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800082a:	fa1f f68c 	uxth.w	r6, ip
 800082e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000832:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000836:	fb07 1114 	mls	r1, r7, r4, r1
 800083a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800083e:	fb04 f106 	mul.w	r1, r4, r6
 8000842:	4299      	cmp	r1, r3
 8000844:	d90a      	bls.n	800085c <__udivmoddi4+0x64>
 8000846:	eb1c 0303 	adds.w	r3, ip, r3
 800084a:	f104 30ff 	add.w	r0, r4, #4294967295
 800084e:	f080 8112 	bcs.w	8000a76 <__udivmoddi4+0x27e>
 8000852:	4299      	cmp	r1, r3
 8000854:	f240 810f 	bls.w	8000a76 <__udivmoddi4+0x27e>
 8000858:	3c02      	subs	r4, #2
 800085a:	4463      	add	r3, ip
 800085c:	1a59      	subs	r1, r3, r1
 800085e:	fa1f f38e 	uxth.w	r3, lr
 8000862:	fbb1 f0f7 	udiv	r0, r1, r7
 8000866:	fb07 1110 	mls	r1, r7, r0, r1
 800086a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800086e:	fb00 f606 	mul.w	r6, r0, r6
 8000872:	429e      	cmp	r6, r3
 8000874:	d90a      	bls.n	800088c <__udivmoddi4+0x94>
 8000876:	eb1c 0303 	adds.w	r3, ip, r3
 800087a:	f100 31ff 	add.w	r1, r0, #4294967295
 800087e:	f080 80fc 	bcs.w	8000a7a <__udivmoddi4+0x282>
 8000882:	429e      	cmp	r6, r3
 8000884:	f240 80f9 	bls.w	8000a7a <__udivmoddi4+0x282>
 8000888:	4463      	add	r3, ip
 800088a:	3802      	subs	r0, #2
 800088c:	1b9b      	subs	r3, r3, r6
 800088e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000892:	2100      	movs	r1, #0
 8000894:	b11d      	cbz	r5, 800089e <__udivmoddi4+0xa6>
 8000896:	40d3      	lsrs	r3, r2
 8000898:	2200      	movs	r2, #0
 800089a:	e9c5 3200 	strd	r3, r2, [r5]
 800089e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008a2:	428b      	cmp	r3, r1
 80008a4:	d905      	bls.n	80008b2 <__udivmoddi4+0xba>
 80008a6:	b10d      	cbz	r5, 80008ac <__udivmoddi4+0xb4>
 80008a8:	e9c5 0100 	strd	r0, r1, [r5]
 80008ac:	2100      	movs	r1, #0
 80008ae:	4608      	mov	r0, r1
 80008b0:	e7f5      	b.n	800089e <__udivmoddi4+0xa6>
 80008b2:	fab3 f183 	clz	r1, r3
 80008b6:	2900      	cmp	r1, #0
 80008b8:	d146      	bne.n	8000948 <__udivmoddi4+0x150>
 80008ba:	42a3      	cmp	r3, r4
 80008bc:	d302      	bcc.n	80008c4 <__udivmoddi4+0xcc>
 80008be:	4290      	cmp	r0, r2
 80008c0:	f0c0 80f0 	bcc.w	8000aa4 <__udivmoddi4+0x2ac>
 80008c4:	1a86      	subs	r6, r0, r2
 80008c6:	eb64 0303 	sbc.w	r3, r4, r3
 80008ca:	2001      	movs	r0, #1
 80008cc:	2d00      	cmp	r5, #0
 80008ce:	d0e6      	beq.n	800089e <__udivmoddi4+0xa6>
 80008d0:	e9c5 6300 	strd	r6, r3, [r5]
 80008d4:	e7e3      	b.n	800089e <__udivmoddi4+0xa6>
 80008d6:	2a00      	cmp	r2, #0
 80008d8:	f040 8090 	bne.w	80009fc <__udivmoddi4+0x204>
 80008dc:	eba1 040c 	sub.w	r4, r1, ip
 80008e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80008e4:	fa1f f78c 	uxth.w	r7, ip
 80008e8:	2101      	movs	r1, #1
 80008ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80008ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80008f2:	fb08 4416 	mls	r4, r8, r6, r4
 80008f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80008fa:	fb07 f006 	mul.w	r0, r7, r6
 80008fe:	4298      	cmp	r0, r3
 8000900:	d908      	bls.n	8000914 <__udivmoddi4+0x11c>
 8000902:	eb1c 0303 	adds.w	r3, ip, r3
 8000906:	f106 34ff 	add.w	r4, r6, #4294967295
 800090a:	d202      	bcs.n	8000912 <__udivmoddi4+0x11a>
 800090c:	4298      	cmp	r0, r3
 800090e:	f200 80cd 	bhi.w	8000aac <__udivmoddi4+0x2b4>
 8000912:	4626      	mov	r6, r4
 8000914:	1a1c      	subs	r4, r3, r0
 8000916:	fa1f f38e 	uxth.w	r3, lr
 800091a:	fbb4 f0f8 	udiv	r0, r4, r8
 800091e:	fb08 4410 	mls	r4, r8, r0, r4
 8000922:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000926:	fb00 f707 	mul.w	r7, r0, r7
 800092a:	429f      	cmp	r7, r3
 800092c:	d908      	bls.n	8000940 <__udivmoddi4+0x148>
 800092e:	eb1c 0303 	adds.w	r3, ip, r3
 8000932:	f100 34ff 	add.w	r4, r0, #4294967295
 8000936:	d202      	bcs.n	800093e <__udivmoddi4+0x146>
 8000938:	429f      	cmp	r7, r3
 800093a:	f200 80b0 	bhi.w	8000a9e <__udivmoddi4+0x2a6>
 800093e:	4620      	mov	r0, r4
 8000940:	1bdb      	subs	r3, r3, r7
 8000942:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000946:	e7a5      	b.n	8000894 <__udivmoddi4+0x9c>
 8000948:	f1c1 0620 	rsb	r6, r1, #32
 800094c:	408b      	lsls	r3, r1
 800094e:	fa22 f706 	lsr.w	r7, r2, r6
 8000952:	431f      	orrs	r7, r3
 8000954:	fa20 fc06 	lsr.w	ip, r0, r6
 8000958:	fa04 f301 	lsl.w	r3, r4, r1
 800095c:	ea43 030c 	orr.w	r3, r3, ip
 8000960:	40f4      	lsrs	r4, r6
 8000962:	fa00 f801 	lsl.w	r8, r0, r1
 8000966:	0c38      	lsrs	r0, r7, #16
 8000968:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800096c:	fbb4 fef0 	udiv	lr, r4, r0
 8000970:	fa1f fc87 	uxth.w	ip, r7
 8000974:	fb00 441e 	mls	r4, r0, lr, r4
 8000978:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800097c:	fb0e f90c 	mul.w	r9, lr, ip
 8000980:	45a1      	cmp	r9, r4
 8000982:	fa02 f201 	lsl.w	r2, r2, r1
 8000986:	d90a      	bls.n	800099e <__udivmoddi4+0x1a6>
 8000988:	193c      	adds	r4, r7, r4
 800098a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800098e:	f080 8084 	bcs.w	8000a9a <__udivmoddi4+0x2a2>
 8000992:	45a1      	cmp	r9, r4
 8000994:	f240 8081 	bls.w	8000a9a <__udivmoddi4+0x2a2>
 8000998:	f1ae 0e02 	sub.w	lr, lr, #2
 800099c:	443c      	add	r4, r7
 800099e:	eba4 0409 	sub.w	r4, r4, r9
 80009a2:	fa1f f983 	uxth.w	r9, r3
 80009a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80009aa:	fb00 4413 	mls	r4, r0, r3, r4
 80009ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80009b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80009b6:	45a4      	cmp	ip, r4
 80009b8:	d907      	bls.n	80009ca <__udivmoddi4+0x1d2>
 80009ba:	193c      	adds	r4, r7, r4
 80009bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80009c0:	d267      	bcs.n	8000a92 <__udivmoddi4+0x29a>
 80009c2:	45a4      	cmp	ip, r4
 80009c4:	d965      	bls.n	8000a92 <__udivmoddi4+0x29a>
 80009c6:	3b02      	subs	r3, #2
 80009c8:	443c      	add	r4, r7
 80009ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80009ce:	fba0 9302 	umull	r9, r3, r0, r2
 80009d2:	eba4 040c 	sub.w	r4, r4, ip
 80009d6:	429c      	cmp	r4, r3
 80009d8:	46ce      	mov	lr, r9
 80009da:	469c      	mov	ip, r3
 80009dc:	d351      	bcc.n	8000a82 <__udivmoddi4+0x28a>
 80009de:	d04e      	beq.n	8000a7e <__udivmoddi4+0x286>
 80009e0:	b155      	cbz	r5, 80009f8 <__udivmoddi4+0x200>
 80009e2:	ebb8 030e 	subs.w	r3, r8, lr
 80009e6:	eb64 040c 	sbc.w	r4, r4, ip
 80009ea:	fa04 f606 	lsl.w	r6, r4, r6
 80009ee:	40cb      	lsrs	r3, r1
 80009f0:	431e      	orrs	r6, r3
 80009f2:	40cc      	lsrs	r4, r1
 80009f4:	e9c5 6400 	strd	r6, r4, [r5]
 80009f8:	2100      	movs	r1, #0
 80009fa:	e750      	b.n	800089e <__udivmoddi4+0xa6>
 80009fc:	f1c2 0320 	rsb	r3, r2, #32
 8000a00:	fa20 f103 	lsr.w	r1, r0, r3
 8000a04:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a08:	fa24 f303 	lsr.w	r3, r4, r3
 8000a0c:	4094      	lsls	r4, r2
 8000a0e:	430c      	orrs	r4, r1
 8000a10:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a14:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a18:	fa1f f78c 	uxth.w	r7, ip
 8000a1c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a20:	fb08 3110 	mls	r1, r8, r0, r3
 8000a24:	0c23      	lsrs	r3, r4, #16
 8000a26:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a2a:	fb00 f107 	mul.w	r1, r0, r7
 8000a2e:	4299      	cmp	r1, r3
 8000a30:	d908      	bls.n	8000a44 <__udivmoddi4+0x24c>
 8000a32:	eb1c 0303 	adds.w	r3, ip, r3
 8000a36:	f100 36ff 	add.w	r6, r0, #4294967295
 8000a3a:	d22c      	bcs.n	8000a96 <__udivmoddi4+0x29e>
 8000a3c:	4299      	cmp	r1, r3
 8000a3e:	d92a      	bls.n	8000a96 <__udivmoddi4+0x29e>
 8000a40:	3802      	subs	r0, #2
 8000a42:	4463      	add	r3, ip
 8000a44:	1a5b      	subs	r3, r3, r1
 8000a46:	b2a4      	uxth	r4, r4
 8000a48:	fbb3 f1f8 	udiv	r1, r3, r8
 8000a4c:	fb08 3311 	mls	r3, r8, r1, r3
 8000a50:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a54:	fb01 f307 	mul.w	r3, r1, r7
 8000a58:	42a3      	cmp	r3, r4
 8000a5a:	d908      	bls.n	8000a6e <__udivmoddi4+0x276>
 8000a5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000a60:	f101 36ff 	add.w	r6, r1, #4294967295
 8000a64:	d213      	bcs.n	8000a8e <__udivmoddi4+0x296>
 8000a66:	42a3      	cmp	r3, r4
 8000a68:	d911      	bls.n	8000a8e <__udivmoddi4+0x296>
 8000a6a:	3902      	subs	r1, #2
 8000a6c:	4464      	add	r4, ip
 8000a6e:	1ae4      	subs	r4, r4, r3
 8000a70:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000a74:	e739      	b.n	80008ea <__udivmoddi4+0xf2>
 8000a76:	4604      	mov	r4, r0
 8000a78:	e6f0      	b.n	800085c <__udivmoddi4+0x64>
 8000a7a:	4608      	mov	r0, r1
 8000a7c:	e706      	b.n	800088c <__udivmoddi4+0x94>
 8000a7e:	45c8      	cmp	r8, r9
 8000a80:	d2ae      	bcs.n	80009e0 <__udivmoddi4+0x1e8>
 8000a82:	ebb9 0e02 	subs.w	lr, r9, r2
 8000a86:	eb63 0c07 	sbc.w	ip, r3, r7
 8000a8a:	3801      	subs	r0, #1
 8000a8c:	e7a8      	b.n	80009e0 <__udivmoddi4+0x1e8>
 8000a8e:	4631      	mov	r1, r6
 8000a90:	e7ed      	b.n	8000a6e <__udivmoddi4+0x276>
 8000a92:	4603      	mov	r3, r0
 8000a94:	e799      	b.n	80009ca <__udivmoddi4+0x1d2>
 8000a96:	4630      	mov	r0, r6
 8000a98:	e7d4      	b.n	8000a44 <__udivmoddi4+0x24c>
 8000a9a:	46d6      	mov	lr, sl
 8000a9c:	e77f      	b.n	800099e <__udivmoddi4+0x1a6>
 8000a9e:	4463      	add	r3, ip
 8000aa0:	3802      	subs	r0, #2
 8000aa2:	e74d      	b.n	8000940 <__udivmoddi4+0x148>
 8000aa4:	4606      	mov	r6, r0
 8000aa6:	4623      	mov	r3, r4
 8000aa8:	4608      	mov	r0, r1
 8000aaa:	e70f      	b.n	80008cc <__udivmoddi4+0xd4>
 8000aac:	3e02      	subs	r6, #2
 8000aae:	4463      	add	r3, ip
 8000ab0:	e730      	b.n	8000914 <__udivmoddi4+0x11c>
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_idiv0>:
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <HAL_TIM_PeriodElapsedCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
	VibeCheckStrobe_PeriodElapsedUpdate(&vc.strobe);
 8000ac0:	4803      	ldr	r0, [pc, #12]	@ (8000ad0 <HAL_TIM_PeriodElapsedCallback+0x18>)
 8000ac2:	f002 fdd6 	bl	8003672 <VibeCheckStrobe_PeriodElapsedUpdate>
}
 8000ac6:	bf00      	nop
 8000ac8:	3708      	adds	r7, #8
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	24002d34 	.word	0x24002d34

08000ad4 <HAL_DAC_ConvHalfCpltCallbackCh1>:

void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b082      	sub	sp, #8
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
	VibeCheckWaveGen_DMAHalfCpltCallback(&vc.wavegen);
 8000adc:	4803      	ldr	r0, [pc, #12]	@ (8000aec <HAL_DAC_ConvHalfCpltCallbackCh1+0x18>)
 8000ade:	f003 fbe9 	bl	80042b4 <VibeCheckWaveGen_DMAHalfCpltCallback>
}
 8000ae2:	bf00      	nop
 8000ae4:	3708      	adds	r7, #8
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	24002d54 	.word	0x24002d54

08000af0 <HAL_DAC_ConvCpltCallbackCh1>:

void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b082      	sub	sp, #8
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
	VibeCheckWaveGen_DMACpltCallback(&vc.wavegen);
 8000af8:	4803      	ldr	r0, [pc, #12]	@ (8000b08 <HAL_DAC_ConvCpltCallbackCh1+0x18>)
 8000afa:	f003 fbf7 	bl	80042ec <VibeCheckWaveGen_DMACpltCallback>
}
 8000afe:	bf00      	nop
 8000b00:	3708      	adds	r7, #8
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	24002d54 	.word	0x24002d54

08000b0c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000b10:	f000 feb4 	bl	800187c <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b14:	f003 fee6 	bl	80048e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b18:	f000 f834 	bl	8000b84 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000b1c:	f000 f8a2 	bl	8000c64 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b20:	f000 fd9e 	bl	8001660 <MX_GPIO_Init>
  MX_DMA_Init();
 8000b24:	f000 fd74 	bl	8001610 <MX_DMA_Init>
  MX_DAC1_Init();
 8000b28:	f000 f9b2 	bl	8000e90 <MX_DAC1_Init>
  MX_I2C2_Init();
 8000b2c:	f000 f9ec 	bl	8000f08 <MX_I2C2_Init>
  MX_SPI2_Init();
 8000b30:	f000 fa2a 	bl	8000f88 <MX_SPI2_Init>
  MX_SPI3_Init();
 8000b34:	f000 fa7e 	bl	8001034 <MX_SPI3_Init>
  MX_SPI4_Init();
 8000b38:	f000 fad2 	bl	80010e0 <MX_SPI4_Init>
  MX_TIM4_Init();
 8000b3c:	f000 fc56 	bl	80013ec <MX_TIM4_Init>
  MX_TIM3_Init();
 8000b40:	f000 fbc6 	bl	80012d0 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000b44:	f000 fd18 	bl	8001578 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8000b48:	f000 fb20 	bl	800118c <MX_TIM1_Init>
  MX_TIM2_Init();
 8000b4c:	f000 fb72 	bl	8001234 <MX_TIM2_Init>
  MX_ADC1_Init();
 8000b50:	f000 f8b8 	bl	8000cc4 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000b54:	f000 f932 	bl	8000dbc <MX_ADC2_Init>
  MX_UART7_Init();
 8000b58:	f000 fcc0 	bl	80014dc <MX_UART7_Init>
  MX_USB_DEVICE_Init();
 8000b5c:	f013 fb62 	bl	8014224 <MX_USB_DEVICE_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  VibeCheck_Init(&vc, &htim3, &htim1, &hdac1);
 8000b60:	4b04      	ldr	r3, [pc, #16]	@ (8000b74 <main+0x68>)
 8000b62:	4a05      	ldr	r2, [pc, #20]	@ (8000b78 <main+0x6c>)
 8000b64:	4905      	ldr	r1, [pc, #20]	@ (8000b7c <main+0x70>)
 8000b66:	4806      	ldr	r0, [pc, #24]	@ (8000b80 <main+0x74>)
 8000b68:	f001 fd3a 	bl	80025e0 <VibeCheck_Init>

  while (1)
  {

	  VibeCheck_Loop(&vc);
 8000b6c:	4804      	ldr	r0, [pc, #16]	@ (8000b80 <main+0x74>)
 8000b6e:	f001 fe0b 	bl	8002788 <VibeCheck_Loop>
 8000b72:	e7fb      	b.n	8000b6c <main+0x60>
 8000b74:	240003c8 	.word	0x240003c8
 8000b78:	240006b8 	.word	0x240006b8
 8000b7c:	24000750 	.word	0x24000750
 8000b80:	24000910 	.word	0x24000910

08000b84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b09c      	sub	sp, #112	@ 0x70
 8000b88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b8a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b8e:	224c      	movs	r2, #76	@ 0x4c
 8000b90:	2100      	movs	r1, #0
 8000b92:	4618      	mov	r0, r3
 8000b94:	f015 fb7d 	bl	8016292 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b98:	1d3b      	adds	r3, r7, #4
 8000b9a:	2220      	movs	r2, #32
 8000b9c:	2100      	movs	r1, #0
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f015 fb77 	bl	8016292 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000ba4:	2002      	movs	r0, #2
 8000ba6:	f009 fd87 	bl	800a6b8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000baa:	2300      	movs	r3, #0
 8000bac:	603b      	str	r3, [r7, #0]
 8000bae:	4b2c      	ldr	r3, [pc, #176]	@ (8000c60 <SystemClock_Config+0xdc>)
 8000bb0:	699b      	ldr	r3, [r3, #24]
 8000bb2:	4a2b      	ldr	r2, [pc, #172]	@ (8000c60 <SystemClock_Config+0xdc>)
 8000bb4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000bb8:	6193      	str	r3, [r2, #24]
 8000bba:	4b29      	ldr	r3, [pc, #164]	@ (8000c60 <SystemClock_Config+0xdc>)
 8000bbc:	699b      	ldr	r3, [r3, #24]
 8000bbe:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000bc2:	603b      	str	r3, [r7, #0]
 8000bc4:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000bc6:	bf00      	nop
 8000bc8:	4b25      	ldr	r3, [pc, #148]	@ (8000c60 <SystemClock_Config+0xdc>)
 8000bca:	699b      	ldr	r3, [r3, #24]
 8000bcc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000bd0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000bd4:	d1f8      	bne.n	8000bc8 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000bd6:	2321      	movs	r3, #33	@ 0x21
 8000bd8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000bda:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000bde:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000be0:	2301      	movs	r3, #1
 8000be2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000be4:	2302      	movs	r3, #2
 8000be6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000be8:	2302      	movs	r3, #2
 8000bea:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000bec:	2302      	movs	r3, #2
 8000bee:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000bf0:	2328      	movs	r3, #40	@ 0x28
 8000bf2:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000bf4:	2301      	movs	r3, #1
 8000bf6:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000bf8:	2302      	movs	r3, #2
 8000bfa:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000bfc:	2302      	movs	r3, #2
 8000bfe:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000c00:	230c      	movs	r3, #12
 8000c02:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000c04:	2300      	movs	r3, #0
 8000c06:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c0c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c10:	4618      	mov	r0, r3
 8000c12:	f009 fd9b 	bl	800a74c <HAL_RCC_OscConfig>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d001      	beq.n	8000c20 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000c1c:	f000 fe5a 	bl	80018d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c20:	233f      	movs	r3, #63	@ 0x3f
 8000c22:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c24:	2303      	movs	r3, #3
 8000c26:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000c2c:	2308      	movs	r3, #8
 8000c2e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000c30:	2340      	movs	r3, #64	@ 0x40
 8000c32:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000c34:	2340      	movs	r3, #64	@ 0x40
 8000c36:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000c38:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c3c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000c3e:	2340      	movs	r3, #64	@ 0x40
 8000c40:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000c42:	1d3b      	adds	r3, r7, #4
 8000c44:	2103      	movs	r1, #3
 8000c46:	4618      	mov	r0, r3
 8000c48:	f00a f95a 	bl	800af00 <HAL_RCC_ClockConfig>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d001      	beq.n	8000c56 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000c52:	f000 fe3f 	bl	80018d4 <Error_Handler>
  }
}
 8000c56:	bf00      	nop
 8000c58:	3770      	adds	r7, #112	@ 0x70
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	58024800 	.word	0x58024800

08000c64 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b0ae      	sub	sp, #184	@ 0xb8
 8000c68:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c6a:	463b      	mov	r3, r7
 8000c6c:	22b8      	movs	r2, #184	@ 0xb8
 8000c6e:	2100      	movs	r1, #0
 8000c70:	4618      	mov	r0, r3
 8000c72:	f015 fb0e 	bl	8016292 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000c76:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000c7a:	f04f 0300 	mov.w	r3, #0
 8000c7e:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 8000c82:	2302      	movs	r3, #2
 8000c84:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 16;
 8000c86:	2310      	movs	r3, #16
 8000c88:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000c8a:	2302      	movs	r3, #2
 8000c8c:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000c8e:	2302      	movs	r3, #2
 8000c90:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000c92:	2302      	movs	r3, #2
 8000c94:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000c96:	23c0      	movs	r3, #192	@ 0xc0
 8000c98:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ca8:	463b      	mov	r3, r7
 8000caa:	4618      	mov	r0, r3
 8000cac:	f00a fcb4 	bl	800b618 <HAL_RCCEx_PeriphCLKConfig>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8000cb6:	f000 fe0d 	bl	80018d4 <Error_Handler>
  }
}
 8000cba:	bf00      	nop
 8000cbc:	37b8      	adds	r7, #184	@ 0xb8
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
	...

08000cc4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b08c      	sub	sp, #48	@ 0x30
 8000cc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000cca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cce:	2200      	movs	r2, #0
 8000cd0:	601a      	str	r2, [r3, #0]
 8000cd2:	605a      	str	r2, [r3, #4]
 8000cd4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000cd6:	463b      	mov	r3, r7
 8000cd8:	2224      	movs	r2, #36	@ 0x24
 8000cda:	2100      	movs	r1, #0
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f015 fad8 	bl	8016292 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000ce2:	4b32      	ldr	r3, [pc, #200]	@ (8000dac <MX_ADC1_Init+0xe8>)
 8000ce4:	4a32      	ldr	r2, [pc, #200]	@ (8000db0 <MX_ADC1_Init+0xec>)
 8000ce6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000ce8:	4b30      	ldr	r3, [pc, #192]	@ (8000dac <MX_ADC1_Init+0xe8>)
 8000cea:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000cee:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000cf0:	4b2e      	ldr	r3, [pc, #184]	@ (8000dac <MX_ADC1_Init+0xe8>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000cf6:	4b2d      	ldr	r3, [pc, #180]	@ (8000dac <MX_ADC1_Init+0xe8>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000cfc:	4b2b      	ldr	r3, [pc, #172]	@ (8000dac <MX_ADC1_Init+0xe8>)
 8000cfe:	2204      	movs	r2, #4
 8000d00:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000d02:	4b2a      	ldr	r3, [pc, #168]	@ (8000dac <MX_ADC1_Init+0xe8>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000d08:	4b28      	ldr	r3, [pc, #160]	@ (8000dac <MX_ADC1_Init+0xe8>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000d0e:	4b27      	ldr	r3, [pc, #156]	@ (8000dac <MX_ADC1_Init+0xe8>)
 8000d10:	2201      	movs	r2, #1
 8000d12:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d14:	4b25      	ldr	r3, [pc, #148]	@ (8000dac <MX_ADC1_Init+0xe8>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d1c:	4b23      	ldr	r3, [pc, #140]	@ (8000dac <MX_ADC1_Init+0xe8>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d22:	4b22      	ldr	r3, [pc, #136]	@ (8000dac <MX_ADC1_Init+0xe8>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000d28:	4b20      	ldr	r3, [pc, #128]	@ (8000dac <MX_ADC1_Init+0xe8>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000d2e:	4b1f      	ldr	r3, [pc, #124]	@ (8000dac <MX_ADC1_Init+0xe8>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000d34:	4b1d      	ldr	r3, [pc, #116]	@ (8000dac <MX_ADC1_Init+0xe8>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 8000d3a:	4b1c      	ldr	r3, [pc, #112]	@ (8000dac <MX_ADC1_Init+0xe8>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc1.Init.Oversampling.Ratio = 1;
 8000d42:	4b1a      	ldr	r3, [pc, #104]	@ (8000dac <MX_ADC1_Init+0xe8>)
 8000d44:	2201      	movs	r2, #1
 8000d46:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d48:	4818      	ldr	r0, [pc, #96]	@ (8000dac <MX_ADC1_Init+0xe8>)
 8000d4a:	f004 f8c7 	bl	8004edc <HAL_ADC_Init>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d001      	beq.n	8000d58 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000d54:	f000 fdbe 	bl	80018d4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000d5c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d60:	4619      	mov	r1, r3
 8000d62:	4812      	ldr	r0, [pc, #72]	@ (8000dac <MX_ADC1_Init+0xe8>)
 8000d64:	f005 f906 	bl	8005f74 <HAL_ADCEx_MultiModeConfigChannel>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d001      	beq.n	8000d72 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8000d6e:	f000 fdb1 	bl	80018d4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000d72:	4b10      	ldr	r3, [pc, #64]	@ (8000db4 <MX_ADC1_Init+0xf0>)
 8000d74:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d76:	2306      	movs	r3, #6
 8000d78:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8000d7e:	4b0e      	ldr	r3, [pc, #56]	@ (8000db8 <MX_ADC1_Init+0xf4>)
 8000d80:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000d82:	2304      	movs	r3, #4
 8000d84:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000d86:	2300      	movs	r3, #0
 8000d88:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d90:	463b      	mov	r3, r7
 8000d92:	4619      	mov	r1, r3
 8000d94:	4805      	ldr	r0, [pc, #20]	@ (8000dac <MX_ADC1_Init+0xe8>)
 8000d96:	f004 faa9 	bl	80052ec <HAL_ADC_ConfigChannel>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d001      	beq.n	8000da4 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 8000da0:	f000 fd98 	bl	80018d4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000da4:	bf00      	nop
 8000da6:	3730      	adds	r7, #48	@ 0x30
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	240002e8 	.word	0x240002e8
 8000db0:	40022000 	.word	0x40022000
 8000db4:	10c00010 	.word	0x10c00010
 8000db8:	47ff0000 	.word	0x47ff0000

08000dbc <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b08a      	sub	sp, #40	@ 0x28
 8000dc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000dc2:	1d3b      	adds	r3, r7, #4
 8000dc4:	2224      	movs	r2, #36	@ 0x24
 8000dc6:	2100      	movs	r1, #0
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f015 fa62 	bl	8016292 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000dce:	4b2c      	ldr	r3, [pc, #176]	@ (8000e80 <MX_ADC2_Init+0xc4>)
 8000dd0:	4a2c      	ldr	r2, [pc, #176]	@ (8000e84 <MX_ADC2_Init+0xc8>)
 8000dd2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000dd4:	4b2a      	ldr	r3, [pc, #168]	@ (8000e80 <MX_ADC2_Init+0xc4>)
 8000dd6:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000dda:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 8000ddc:	4b28      	ldr	r3, [pc, #160]	@ (8000e80 <MX_ADC2_Init+0xc4>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000de2:	4b27      	ldr	r3, [pc, #156]	@ (8000e80 <MX_ADC2_Init+0xc4>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000de8:	4b25      	ldr	r3, [pc, #148]	@ (8000e80 <MX_ADC2_Init+0xc4>)
 8000dea:	2204      	movs	r2, #4
 8000dec:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000dee:	4b24      	ldr	r3, [pc, #144]	@ (8000e80 <MX_ADC2_Init+0xc4>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000df4:	4b22      	ldr	r3, [pc, #136]	@ (8000e80 <MX_ADC2_Init+0xc4>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 8000dfa:	4b21      	ldr	r3, [pc, #132]	@ (8000e80 <MX_ADC2_Init+0xc4>)
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000e00:	4b1f      	ldr	r3, [pc, #124]	@ (8000e80 <MX_ADC2_Init+0xc4>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e08:	4b1d      	ldr	r3, [pc, #116]	@ (8000e80 <MX_ADC2_Init+0xc4>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e0e:	4b1c      	ldr	r3, [pc, #112]	@ (8000e80 <MX_ADC2_Init+0xc4>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000e14:	4b1a      	ldr	r3, [pc, #104]	@ (8000e80 <MX_ADC2_Init+0xc4>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000e1a:	4b19      	ldr	r3, [pc, #100]	@ (8000e80 <MX_ADC2_Init+0xc4>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000e20:	4b17      	ldr	r3, [pc, #92]	@ (8000e80 <MX_ADC2_Init+0xc4>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc2.Init.OversamplingMode = DISABLE;
 8000e26:	4b16      	ldr	r3, [pc, #88]	@ (8000e80 <MX_ADC2_Init+0xc4>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc2.Init.Oversampling.Ratio = 1;
 8000e2e:	4b14      	ldr	r3, [pc, #80]	@ (8000e80 <MX_ADC2_Init+0xc4>)
 8000e30:	2201      	movs	r2, #1
 8000e32:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000e34:	4812      	ldr	r0, [pc, #72]	@ (8000e80 <MX_ADC2_Init+0xc4>)
 8000e36:	f004 f851 	bl	8004edc <HAL_ADC_Init>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d001      	beq.n	8000e44 <MX_ADC2_Init+0x88>
  {
    Error_Handler();
 8000e40:	f000 fd48 	bl	80018d4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000e44:	4b10      	ldr	r3, [pc, #64]	@ (8000e88 <MX_ADC2_Init+0xcc>)
 8000e46:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e48:	2306      	movs	r3, #6
 8000e4a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8000e50:	4b0e      	ldr	r3, [pc, #56]	@ (8000e8c <MX_ADC2_Init+0xd0>)
 8000e52:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000e54:	2304      	movs	r3, #4
 8000e56:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000e62:	1d3b      	adds	r3, r7, #4
 8000e64:	4619      	mov	r1, r3
 8000e66:	4806      	ldr	r0, [pc, #24]	@ (8000e80 <MX_ADC2_Init+0xc4>)
 8000e68:	f004 fa40 	bl	80052ec <HAL_ADC_ConfigChannel>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d001      	beq.n	8000e76 <MX_ADC2_Init+0xba>
  {
    Error_Handler();
 8000e72:	f000 fd2f 	bl	80018d4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000e76:	bf00      	nop
 8000e78:	3728      	adds	r7, #40	@ 0x28
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	24000358 	.word	0x24000358
 8000e84:	40022100 	.word	0x40022100
 8000e88:	0c900008 	.word	0x0c900008
 8000e8c:	47ff0000 	.word	0x47ff0000

08000e90 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b08a      	sub	sp, #40	@ 0x28
 8000e94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000e96:	1d3b      	adds	r3, r7, #4
 8000e98:	2224      	movs	r2, #36	@ 0x24
 8000e9a:	2100      	movs	r1, #0
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f015 f9f8 	bl	8016292 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000ea2:	4b17      	ldr	r3, [pc, #92]	@ (8000f00 <MX_DAC1_Init+0x70>)
 8000ea4:	4a17      	ldr	r2, [pc, #92]	@ (8000f04 <MX_DAC1_Init+0x74>)
 8000ea6:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000ea8:	4815      	ldr	r0, [pc, #84]	@ (8000f00 <MX_DAC1_Init+0x70>)
 8000eaa:	f005 facd 	bl	8006448 <HAL_DAC_Init>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d001      	beq.n	8000eb8 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000eb4:	f000 fd0e 	bl	80018d4 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T1_TRGO;
 8000ebc:	2306      	movs	r3, #6
 8000ebe:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8000ec0:	2302      	movs	r3, #2
 8000ec2:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000ecc:	1d3b      	adds	r3, r7, #4
 8000ece:	2200      	movs	r2, #0
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	480b      	ldr	r0, [pc, #44]	@ (8000f00 <MX_DAC1_Init+0x70>)
 8000ed4:	f005 fba4 	bl	8006620 <HAL_DAC_ConfigChannel>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d001      	beq.n	8000ee2 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000ede:	f000 fcf9 	bl	80018d4 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000ee2:	1d3b      	adds	r3, r7, #4
 8000ee4:	2210      	movs	r2, #16
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	4805      	ldr	r0, [pc, #20]	@ (8000f00 <MX_DAC1_Init+0x70>)
 8000eea:	f005 fb99 	bl	8006620 <HAL_DAC_ConfigChannel>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d001      	beq.n	8000ef8 <MX_DAC1_Init+0x68>
  {
    Error_Handler();
 8000ef4:	f000 fcee 	bl	80018d4 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000ef8:	bf00      	nop
 8000efa:	3728      	adds	r7, #40	@ 0x28
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	240003c8 	.word	0x240003c8
 8000f04:	40007400 	.word	0x40007400

08000f08 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000f0c:	4b1b      	ldr	r3, [pc, #108]	@ (8000f7c <MX_I2C2_Init+0x74>)
 8000f0e:	4a1c      	ldr	r2, [pc, #112]	@ (8000f80 <MX_I2C2_Init+0x78>)
 8000f10:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x307075B1;
 8000f12:	4b1a      	ldr	r3, [pc, #104]	@ (8000f7c <MX_I2C2_Init+0x74>)
 8000f14:	4a1b      	ldr	r2, [pc, #108]	@ (8000f84 <MX_I2C2_Init+0x7c>)
 8000f16:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000f18:	4b18      	ldr	r3, [pc, #96]	@ (8000f7c <MX_I2C2_Init+0x74>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f1e:	4b17      	ldr	r3, [pc, #92]	@ (8000f7c <MX_I2C2_Init+0x74>)
 8000f20:	2201      	movs	r2, #1
 8000f22:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f24:	4b15      	ldr	r3, [pc, #84]	@ (8000f7c <MX_I2C2_Init+0x74>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000f2a:	4b14      	ldr	r3, [pc, #80]	@ (8000f7c <MX_I2C2_Init+0x74>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000f30:	4b12      	ldr	r3, [pc, #72]	@ (8000f7c <MX_I2C2_Init+0x74>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f36:	4b11      	ldr	r3, [pc, #68]	@ (8000f7c <MX_I2C2_Init+0x74>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f3c:	4b0f      	ldr	r3, [pc, #60]	@ (8000f7c <MX_I2C2_Init+0x74>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000f42:	480e      	ldr	r0, [pc, #56]	@ (8000f7c <MX_I2C2_Init+0x74>)
 8000f44:	f007 ffe6 	bl	8008f14 <HAL_I2C_Init>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d001      	beq.n	8000f52 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000f4e:	f000 fcc1 	bl	80018d4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f52:	2100      	movs	r1, #0
 8000f54:	4809      	ldr	r0, [pc, #36]	@ (8000f7c <MX_I2C2_Init+0x74>)
 8000f56:	f008 f879 	bl	800904c <HAL_I2CEx_ConfigAnalogFilter>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d001      	beq.n	8000f64 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000f60:	f000 fcb8 	bl	80018d4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000f64:	2100      	movs	r1, #0
 8000f66:	4805      	ldr	r0, [pc, #20]	@ (8000f7c <MX_I2C2_Init+0x74>)
 8000f68:	f008 f8bb 	bl	80090e2 <HAL_I2CEx_ConfigDigitalFilter>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d001      	beq.n	8000f76 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000f72:	f000 fcaf 	bl	80018d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000f76:	bf00      	nop
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	240004cc 	.word	0x240004cc
 8000f80:	40005800 	.word	0x40005800
 8000f84:	307075b1 	.word	0x307075b1

08000f88 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000f8c:	4b27      	ldr	r3, [pc, #156]	@ (800102c <MX_SPI2_Init+0xa4>)
 8000f8e:	4a28      	ldr	r2, [pc, #160]	@ (8001030 <MX_SPI2_Init+0xa8>)
 8000f90:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000f92:	4b26      	ldr	r3, [pc, #152]	@ (800102c <MX_SPI2_Init+0xa4>)
 8000f94:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000f98:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000f9a:	4b24      	ldr	r3, [pc, #144]	@ (800102c <MX_SPI2_Init+0xa4>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8000fa0:	4b22      	ldr	r3, [pc, #136]	@ (800102c <MX_SPI2_Init+0xa4>)
 8000fa2:	2203      	movs	r2, #3
 8000fa4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000fa6:	4b21      	ldr	r3, [pc, #132]	@ (800102c <MX_SPI2_Init+0xa4>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000fac:	4b1f      	ldr	r3, [pc, #124]	@ (800102c <MX_SPI2_Init+0xa4>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000fb2:	4b1e      	ldr	r3, [pc, #120]	@ (800102c <MX_SPI2_Init+0xa4>)
 8000fb4:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000fb8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000fba:	4b1c      	ldr	r3, [pc, #112]	@ (800102c <MX_SPI2_Init+0xa4>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000fc0:	4b1a      	ldr	r3, [pc, #104]	@ (800102c <MX_SPI2_Init+0xa4>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000fc6:	4b19      	ldr	r3, [pc, #100]	@ (800102c <MX_SPI2_Init+0xa4>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000fcc:	4b17      	ldr	r3, [pc, #92]	@ (800102c <MX_SPI2_Init+0xa4>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8000fd2:	4b16      	ldr	r3, [pc, #88]	@ (800102c <MX_SPI2_Init+0xa4>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000fd8:	4b14      	ldr	r3, [pc, #80]	@ (800102c <MX_SPI2_Init+0xa4>)
 8000fda:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000fde:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000fe0:	4b12      	ldr	r3, [pc, #72]	@ (800102c <MX_SPI2_Init+0xa4>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000fe6:	4b11      	ldr	r3, [pc, #68]	@ (800102c <MX_SPI2_Init+0xa4>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000fec:	4b0f      	ldr	r3, [pc, #60]	@ (800102c <MX_SPI2_Init+0xa4>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000ff2:	4b0e      	ldr	r3, [pc, #56]	@ (800102c <MX_SPI2_Init+0xa4>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000ff8:	4b0c      	ldr	r3, [pc, #48]	@ (800102c <MX_SPI2_Init+0xa4>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000ffe:	4b0b      	ldr	r3, [pc, #44]	@ (800102c <MX_SPI2_Init+0xa4>)
 8001000:	2200      	movs	r2, #0
 8001002:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001004:	4b09      	ldr	r3, [pc, #36]	@ (800102c <MX_SPI2_Init+0xa4>)
 8001006:	2200      	movs	r2, #0
 8001008:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800100a:	4b08      	ldr	r3, [pc, #32]	@ (800102c <MX_SPI2_Init+0xa4>)
 800100c:	2200      	movs	r2, #0
 800100e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001010:	4b06      	ldr	r3, [pc, #24]	@ (800102c <MX_SPI2_Init+0xa4>)
 8001012:	2200      	movs	r2, #0
 8001014:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001016:	4805      	ldr	r0, [pc, #20]	@ (800102c <MX_SPI2_Init+0xa4>)
 8001018:	f00c fee4 	bl	800dde4 <HAL_SPI_Init>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d001      	beq.n	8001026 <MX_SPI2_Init+0x9e>
  {
    Error_Handler();
 8001022:	f000 fc57 	bl	80018d4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001026:	bf00      	nop
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	24000520 	.word	0x24000520
 8001030:	40003800 	.word	0x40003800

08001034 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001038:	4b27      	ldr	r3, [pc, #156]	@ (80010d8 <MX_SPI3_Init+0xa4>)
 800103a:	4a28      	ldr	r2, [pc, #160]	@ (80010dc <MX_SPI3_Init+0xa8>)
 800103c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800103e:	4b26      	ldr	r3, [pc, #152]	@ (80010d8 <MX_SPI3_Init+0xa4>)
 8001040:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001044:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001046:	4b24      	ldr	r3, [pc, #144]	@ (80010d8 <MX_SPI3_Init+0xa4>)
 8001048:	2200      	movs	r2, #0
 800104a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 800104c:	4b22      	ldr	r3, [pc, #136]	@ (80010d8 <MX_SPI3_Init+0xa4>)
 800104e:	2203      	movs	r2, #3
 8001050:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001052:	4b21      	ldr	r3, [pc, #132]	@ (80010d8 <MX_SPI3_Init+0xa4>)
 8001054:	2200      	movs	r2, #0
 8001056:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001058:	4b1f      	ldr	r3, [pc, #124]	@ (80010d8 <MX_SPI3_Init+0xa4>)
 800105a:	2200      	movs	r2, #0
 800105c:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800105e:	4b1e      	ldr	r3, [pc, #120]	@ (80010d8 <MX_SPI3_Init+0xa4>)
 8001060:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001064:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001066:	4b1c      	ldr	r3, [pc, #112]	@ (80010d8 <MX_SPI3_Init+0xa4>)
 8001068:	2200      	movs	r2, #0
 800106a:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800106c:	4b1a      	ldr	r3, [pc, #104]	@ (80010d8 <MX_SPI3_Init+0xa4>)
 800106e:	2200      	movs	r2, #0
 8001070:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001072:	4b19      	ldr	r3, [pc, #100]	@ (80010d8 <MX_SPI3_Init+0xa4>)
 8001074:	2200      	movs	r2, #0
 8001076:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001078:	4b17      	ldr	r3, [pc, #92]	@ (80010d8 <MX_SPI3_Init+0xa4>)
 800107a:	2200      	movs	r2, #0
 800107c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 800107e:	4b16      	ldr	r3, [pc, #88]	@ (80010d8 <MX_SPI3_Init+0xa4>)
 8001080:	2200      	movs	r2, #0
 8001082:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001084:	4b14      	ldr	r3, [pc, #80]	@ (80010d8 <MX_SPI3_Init+0xa4>)
 8001086:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800108a:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800108c:	4b12      	ldr	r3, [pc, #72]	@ (80010d8 <MX_SPI3_Init+0xa4>)
 800108e:	2200      	movs	r2, #0
 8001090:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001092:	4b11      	ldr	r3, [pc, #68]	@ (80010d8 <MX_SPI3_Init+0xa4>)
 8001094:	2200      	movs	r2, #0
 8001096:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001098:	4b0f      	ldr	r3, [pc, #60]	@ (80010d8 <MX_SPI3_Init+0xa4>)
 800109a:	2200      	movs	r2, #0
 800109c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800109e:	4b0e      	ldr	r3, [pc, #56]	@ (80010d8 <MX_SPI3_Init+0xa4>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80010a4:	4b0c      	ldr	r3, [pc, #48]	@ (80010d8 <MX_SPI3_Init+0xa4>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80010aa:	4b0b      	ldr	r3, [pc, #44]	@ (80010d8 <MX_SPI3_Init+0xa4>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80010b0:	4b09      	ldr	r3, [pc, #36]	@ (80010d8 <MX_SPI3_Init+0xa4>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80010b6:	4b08      	ldr	r3, [pc, #32]	@ (80010d8 <MX_SPI3_Init+0xa4>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80010bc:	4b06      	ldr	r3, [pc, #24]	@ (80010d8 <MX_SPI3_Init+0xa4>)
 80010be:	2200      	movs	r2, #0
 80010c0:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80010c2:	4805      	ldr	r0, [pc, #20]	@ (80010d8 <MX_SPI3_Init+0xa4>)
 80010c4:	f00c fe8e 	bl	800dde4 <HAL_SPI_Init>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <MX_SPI3_Init+0x9e>
  {
    Error_Handler();
 80010ce:	f000 fc01 	bl	80018d4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80010d2:	bf00      	nop
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	240005a8 	.word	0x240005a8
 80010dc:	40003c00 	.word	0x40003c00

080010e0 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 80010e4:	4b27      	ldr	r3, [pc, #156]	@ (8001184 <MX_SPI4_Init+0xa4>)
 80010e6:	4a28      	ldr	r2, [pc, #160]	@ (8001188 <MX_SPI4_Init+0xa8>)
 80010e8:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 80010ea:	4b26      	ldr	r3, [pc, #152]	@ (8001184 <MX_SPI4_Init+0xa4>)
 80010ec:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80010f0:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 80010f2:	4b24      	ldr	r3, [pc, #144]	@ (8001184 <MX_SPI4_Init+0xa4>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_4BIT;
 80010f8:	4b22      	ldr	r3, [pc, #136]	@ (8001184 <MX_SPI4_Init+0xa4>)
 80010fa:	2203      	movs	r2, #3
 80010fc:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010fe:	4b21      	ldr	r3, [pc, #132]	@ (8001184 <MX_SPI4_Init+0xa4>)
 8001100:	2200      	movs	r2, #0
 8001102:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001104:	4b1f      	ldr	r3, [pc, #124]	@ (8001184 <MX_SPI4_Init+0xa4>)
 8001106:	2200      	movs	r2, #0
 8001108:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 800110a:	4b1e      	ldr	r3, [pc, #120]	@ (8001184 <MX_SPI4_Init+0xa4>)
 800110c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001110:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001112:	4b1c      	ldr	r3, [pc, #112]	@ (8001184 <MX_SPI4_Init+0xa4>)
 8001114:	2200      	movs	r2, #0
 8001116:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001118:	4b1a      	ldr	r3, [pc, #104]	@ (8001184 <MX_SPI4_Init+0xa4>)
 800111a:	2200      	movs	r2, #0
 800111c:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 800111e:	4b19      	ldr	r3, [pc, #100]	@ (8001184 <MX_SPI4_Init+0xa4>)
 8001120:	2200      	movs	r2, #0
 8001122:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001124:	4b17      	ldr	r3, [pc, #92]	@ (8001184 <MX_SPI4_Init+0xa4>)
 8001126:	2200      	movs	r2, #0
 8001128:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 800112a:	4b16      	ldr	r3, [pc, #88]	@ (8001184 <MX_SPI4_Init+0xa4>)
 800112c:	2200      	movs	r2, #0
 800112e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001130:	4b14      	ldr	r3, [pc, #80]	@ (8001184 <MX_SPI4_Init+0xa4>)
 8001132:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001136:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001138:	4b12      	ldr	r3, [pc, #72]	@ (8001184 <MX_SPI4_Init+0xa4>)
 800113a:	2200      	movs	r2, #0
 800113c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800113e:	4b11      	ldr	r3, [pc, #68]	@ (8001184 <MX_SPI4_Init+0xa4>)
 8001140:	2200      	movs	r2, #0
 8001142:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001144:	4b0f      	ldr	r3, [pc, #60]	@ (8001184 <MX_SPI4_Init+0xa4>)
 8001146:	2200      	movs	r2, #0
 8001148:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800114a:	4b0e      	ldr	r3, [pc, #56]	@ (8001184 <MX_SPI4_Init+0xa4>)
 800114c:	2200      	movs	r2, #0
 800114e:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001150:	4b0c      	ldr	r3, [pc, #48]	@ (8001184 <MX_SPI4_Init+0xa4>)
 8001152:	2200      	movs	r2, #0
 8001154:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001156:	4b0b      	ldr	r3, [pc, #44]	@ (8001184 <MX_SPI4_Init+0xa4>)
 8001158:	2200      	movs	r2, #0
 800115a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800115c:	4b09      	ldr	r3, [pc, #36]	@ (8001184 <MX_SPI4_Init+0xa4>)
 800115e:	2200      	movs	r2, #0
 8001160:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001162:	4b08      	ldr	r3, [pc, #32]	@ (8001184 <MX_SPI4_Init+0xa4>)
 8001164:	2200      	movs	r2, #0
 8001166:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001168:	4b06      	ldr	r3, [pc, #24]	@ (8001184 <MX_SPI4_Init+0xa4>)
 800116a:	2200      	movs	r2, #0
 800116c:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 800116e:	4805      	ldr	r0, [pc, #20]	@ (8001184 <MX_SPI4_Init+0xa4>)
 8001170:	f00c fe38 	bl	800dde4 <HAL_SPI_Init>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <MX_SPI4_Init+0x9e>
  {
    Error_Handler();
 800117a:	f000 fbab 	bl	80018d4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 800117e:	bf00      	nop
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	24000630 	.word	0x24000630
 8001188:	40013400 	.word	0x40013400

0800118c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b088      	sub	sp, #32
 8001190:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001192:	f107 0310 	add.w	r3, r7, #16
 8001196:	2200      	movs	r2, #0
 8001198:	601a      	str	r2, [r3, #0]
 800119a:	605a      	str	r2, [r3, #4]
 800119c:	609a      	str	r2, [r3, #8]
 800119e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011a0:	1d3b      	adds	r3, r7, #4
 80011a2:	2200      	movs	r2, #0
 80011a4:	601a      	str	r2, [r3, #0]
 80011a6:	605a      	str	r2, [r3, #4]
 80011a8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80011aa:	4b20      	ldr	r3, [pc, #128]	@ (800122c <MX_TIM1_Init+0xa0>)
 80011ac:	4a20      	ldr	r2, [pc, #128]	@ (8001230 <MX_TIM1_Init+0xa4>)
 80011ae:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80011b0:	4b1e      	ldr	r3, [pc, #120]	@ (800122c <MX_TIM1_Init+0xa0>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011b6:	4b1d      	ldr	r3, [pc, #116]	@ (800122c <MX_TIM1_Init+0xa0>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80011bc:	4b1b      	ldr	r3, [pc, #108]	@ (800122c <MX_TIM1_Init+0xa0>)
 80011be:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80011c2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011c4:	4b19      	ldr	r3, [pc, #100]	@ (800122c <MX_TIM1_Init+0xa0>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80011ca:	4b18      	ldr	r3, [pc, #96]	@ (800122c <MX_TIM1_Init+0xa0>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011d0:	4b16      	ldr	r3, [pc, #88]	@ (800122c <MX_TIM1_Init+0xa0>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80011d6:	4815      	ldr	r0, [pc, #84]	@ (800122c <MX_TIM1_Init+0xa0>)
 80011d8:	f00c ff43 	bl	800e062 <HAL_TIM_Base_Init>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80011e2:	f000 fb77 	bl	80018d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011e6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011ea:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80011ec:	f107 0310 	add.w	r3, r7, #16
 80011f0:	4619      	mov	r1, r3
 80011f2:	480e      	ldr	r0, [pc, #56]	@ (800122c <MX_TIM1_Init+0xa0>)
 80011f4:	f00d fcc0 	bl	800eb78 <HAL_TIM_ConfigClockSource>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d001      	beq.n	8001202 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80011fe:	f000 fb69 	bl	80018d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001202:	2320      	movs	r3, #32
 8001204:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001206:	2300      	movs	r3, #0
 8001208:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800120a:	2300      	movs	r3, #0
 800120c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800120e:	1d3b      	adds	r3, r7, #4
 8001210:	4619      	mov	r1, r3
 8001212:	4806      	ldr	r0, [pc, #24]	@ (800122c <MX_TIM1_Init+0xa0>)
 8001214:	f00e fa1c 	bl	800f650 <HAL_TIMEx_MasterConfigSynchronization>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d001      	beq.n	8001222 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800121e:	f000 fb59 	bl	80018d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001222:	bf00      	nop
 8001224:	3720      	adds	r7, #32
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	240006b8 	.word	0x240006b8
 8001230:	40010000 	.word	0x40010000

08001234 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b088      	sub	sp, #32
 8001238:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800123a:	f107 0310 	add.w	r3, r7, #16
 800123e:	2200      	movs	r2, #0
 8001240:	601a      	str	r2, [r3, #0]
 8001242:	605a      	str	r2, [r3, #4]
 8001244:	609a      	str	r2, [r3, #8]
 8001246:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001248:	1d3b      	adds	r3, r7, #4
 800124a:	2200      	movs	r2, #0
 800124c:	601a      	str	r2, [r3, #0]
 800124e:	605a      	str	r2, [r3, #4]
 8001250:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001252:	4b1e      	ldr	r3, [pc, #120]	@ (80012cc <MX_TIM2_Init+0x98>)
 8001254:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001258:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800125a:	4b1c      	ldr	r3, [pc, #112]	@ (80012cc <MX_TIM2_Init+0x98>)
 800125c:	2200      	movs	r2, #0
 800125e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001260:	4b1a      	ldr	r3, [pc, #104]	@ (80012cc <MX_TIM2_Init+0x98>)
 8001262:	2200      	movs	r2, #0
 8001264:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001266:	4b19      	ldr	r3, [pc, #100]	@ (80012cc <MX_TIM2_Init+0x98>)
 8001268:	f04f 32ff 	mov.w	r2, #4294967295
 800126c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800126e:	4b17      	ldr	r3, [pc, #92]	@ (80012cc <MX_TIM2_Init+0x98>)
 8001270:	2200      	movs	r2, #0
 8001272:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001274:	4b15      	ldr	r3, [pc, #84]	@ (80012cc <MX_TIM2_Init+0x98>)
 8001276:	2200      	movs	r2, #0
 8001278:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800127a:	4814      	ldr	r0, [pc, #80]	@ (80012cc <MX_TIM2_Init+0x98>)
 800127c:	f00c fef1 	bl	800e062 <HAL_TIM_Base_Init>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001286:	f000 fb25 	bl	80018d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800128a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800128e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001290:	f107 0310 	add.w	r3, r7, #16
 8001294:	4619      	mov	r1, r3
 8001296:	480d      	ldr	r0, [pc, #52]	@ (80012cc <MX_TIM2_Init+0x98>)
 8001298:	f00d fc6e 	bl	800eb78 <HAL_TIM_ConfigClockSource>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d001      	beq.n	80012a6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80012a2:	f000 fb17 	bl	80018d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80012a6:	2320      	movs	r3, #32
 80012a8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012aa:	2300      	movs	r3, #0
 80012ac:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012ae:	1d3b      	adds	r3, r7, #4
 80012b0:	4619      	mov	r1, r3
 80012b2:	4806      	ldr	r0, [pc, #24]	@ (80012cc <MX_TIM2_Init+0x98>)
 80012b4:	f00e f9cc 	bl	800f650 <HAL_TIMEx_MasterConfigSynchronization>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80012be:	f000 fb09 	bl	80018d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80012c2:	bf00      	nop
 80012c4:	3720      	adds	r7, #32
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	24000704 	.word	0x24000704

080012d0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b08e      	sub	sp, #56	@ 0x38
 80012d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012d6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80012da:	2200      	movs	r2, #0
 80012dc:	601a      	str	r2, [r3, #0]
 80012de:	605a      	str	r2, [r3, #4]
 80012e0:	609a      	str	r2, [r3, #8]
 80012e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012e4:	f107 031c 	add.w	r3, r7, #28
 80012e8:	2200      	movs	r2, #0
 80012ea:	601a      	str	r2, [r3, #0]
 80012ec:	605a      	str	r2, [r3, #4]
 80012ee:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012f0:	463b      	mov	r3, r7
 80012f2:	2200      	movs	r2, #0
 80012f4:	601a      	str	r2, [r3, #0]
 80012f6:	605a      	str	r2, [r3, #4]
 80012f8:	609a      	str	r2, [r3, #8]
 80012fa:	60da      	str	r2, [r3, #12]
 80012fc:	611a      	str	r2, [r3, #16]
 80012fe:	615a      	str	r2, [r3, #20]
 8001300:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001302:	4b38      	ldr	r3, [pc, #224]	@ (80013e4 <MX_TIM3_Init+0x114>)
 8001304:	4a38      	ldr	r2, [pc, #224]	@ (80013e8 <MX_TIM3_Init+0x118>)
 8001306:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001308:	4b36      	ldr	r3, [pc, #216]	@ (80013e4 <MX_TIM3_Init+0x114>)
 800130a:	2200      	movs	r2, #0
 800130c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800130e:	4b35      	ldr	r3, [pc, #212]	@ (80013e4 <MX_TIM3_Init+0x114>)
 8001310:	2200      	movs	r2, #0
 8001312:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001314:	4b33      	ldr	r3, [pc, #204]	@ (80013e4 <MX_TIM3_Init+0x114>)
 8001316:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800131a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800131c:	4b31      	ldr	r3, [pc, #196]	@ (80013e4 <MX_TIM3_Init+0x114>)
 800131e:	2200      	movs	r2, #0
 8001320:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001322:	4b30      	ldr	r3, [pc, #192]	@ (80013e4 <MX_TIM3_Init+0x114>)
 8001324:	2200      	movs	r2, #0
 8001326:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001328:	482e      	ldr	r0, [pc, #184]	@ (80013e4 <MX_TIM3_Init+0x114>)
 800132a:	f00c fe9a 	bl	800e062 <HAL_TIM_Base_Init>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001334:	f000 face 	bl	80018d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001338:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800133c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800133e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001342:	4619      	mov	r1, r3
 8001344:	4827      	ldr	r0, [pc, #156]	@ (80013e4 <MX_TIM3_Init+0x114>)
 8001346:	f00d fc17 	bl	800eb78 <HAL_TIM_ConfigClockSource>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d001      	beq.n	8001354 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001350:	f000 fac0 	bl	80018d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001354:	4823      	ldr	r0, [pc, #140]	@ (80013e4 <MX_TIM3_Init+0x114>)
 8001356:	f00c ffdf 	bl	800e318 <HAL_TIM_PWM_Init>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d001      	beq.n	8001364 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001360:	f000 fab8 	bl	80018d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001364:	2300      	movs	r3, #0
 8001366:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001368:	2300      	movs	r3, #0
 800136a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800136c:	f107 031c 	add.w	r3, r7, #28
 8001370:	4619      	mov	r1, r3
 8001372:	481c      	ldr	r0, [pc, #112]	@ (80013e4 <MX_TIM3_Init+0x114>)
 8001374:	f00e f96c 	bl	800f650 <HAL_TIMEx_MasterConfigSynchronization>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d001      	beq.n	8001382 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800137e:	f000 faa9 	bl	80018d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001382:	2360      	movs	r3, #96	@ 0x60
 8001384:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001386:	2300      	movs	r3, #0
 8001388:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800138a:	2300      	movs	r3, #0
 800138c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800138e:	2300      	movs	r3, #0
 8001390:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001392:	463b      	mov	r3, r7
 8001394:	2200      	movs	r2, #0
 8001396:	4619      	mov	r1, r3
 8001398:	4812      	ldr	r0, [pc, #72]	@ (80013e4 <MX_TIM3_Init+0x114>)
 800139a:	f00d fad9 	bl	800e950 <HAL_TIM_PWM_ConfigChannel>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80013a4:	f000 fa96 	bl	80018d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80013a8:	463b      	mov	r3, r7
 80013aa:	2204      	movs	r2, #4
 80013ac:	4619      	mov	r1, r3
 80013ae:	480d      	ldr	r0, [pc, #52]	@ (80013e4 <MX_TIM3_Init+0x114>)
 80013b0:	f00d face 	bl	800e950 <HAL_TIM_PWM_ConfigChannel>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d001      	beq.n	80013be <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 80013ba:	f000 fa8b 	bl	80018d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80013be:	463b      	mov	r3, r7
 80013c0:	2208      	movs	r2, #8
 80013c2:	4619      	mov	r1, r3
 80013c4:	4807      	ldr	r0, [pc, #28]	@ (80013e4 <MX_TIM3_Init+0x114>)
 80013c6:	f00d fac3 	bl	800e950 <HAL_TIM_PWM_ConfigChannel>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d001      	beq.n	80013d4 <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 80013d0:	f000 fa80 	bl	80018d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80013d4:	4803      	ldr	r0, [pc, #12]	@ (80013e4 <MX_TIM3_Init+0x114>)
 80013d6:	f000 fe4d 	bl	8002074 <HAL_TIM_MspPostInit>

}
 80013da:	bf00      	nop
 80013dc:	3738      	adds	r7, #56	@ 0x38
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	24000750 	.word	0x24000750
 80013e8:	40000400 	.word	0x40000400

080013ec <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b08e      	sub	sp, #56	@ 0x38
 80013f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013f2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80013f6:	2200      	movs	r2, #0
 80013f8:	601a      	str	r2, [r3, #0]
 80013fa:	605a      	str	r2, [r3, #4]
 80013fc:	609a      	str	r2, [r3, #8]
 80013fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001400:	f107 031c 	add.w	r3, r7, #28
 8001404:	2200      	movs	r2, #0
 8001406:	601a      	str	r2, [r3, #0]
 8001408:	605a      	str	r2, [r3, #4]
 800140a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800140c:	463b      	mov	r3, r7
 800140e:	2200      	movs	r2, #0
 8001410:	601a      	str	r2, [r3, #0]
 8001412:	605a      	str	r2, [r3, #4]
 8001414:	609a      	str	r2, [r3, #8]
 8001416:	60da      	str	r2, [r3, #12]
 8001418:	611a      	str	r2, [r3, #16]
 800141a:	615a      	str	r2, [r3, #20]
 800141c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800141e:	4b2d      	ldr	r3, [pc, #180]	@ (80014d4 <MX_TIM4_Init+0xe8>)
 8001420:	4a2d      	ldr	r2, [pc, #180]	@ (80014d8 <MX_TIM4_Init+0xec>)
 8001422:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001424:	4b2b      	ldr	r3, [pc, #172]	@ (80014d4 <MX_TIM4_Init+0xe8>)
 8001426:	2200      	movs	r2, #0
 8001428:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800142a:	4b2a      	ldr	r3, [pc, #168]	@ (80014d4 <MX_TIM4_Init+0xe8>)
 800142c:	2200      	movs	r2, #0
 800142e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001430:	4b28      	ldr	r3, [pc, #160]	@ (80014d4 <MX_TIM4_Init+0xe8>)
 8001432:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001436:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001438:	4b26      	ldr	r3, [pc, #152]	@ (80014d4 <MX_TIM4_Init+0xe8>)
 800143a:	2200      	movs	r2, #0
 800143c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800143e:	4b25      	ldr	r3, [pc, #148]	@ (80014d4 <MX_TIM4_Init+0xe8>)
 8001440:	2200      	movs	r2, #0
 8001442:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001444:	4823      	ldr	r0, [pc, #140]	@ (80014d4 <MX_TIM4_Init+0xe8>)
 8001446:	f00c fe0c 	bl	800e062 <HAL_TIM_Base_Init>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d001      	beq.n	8001454 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8001450:	f000 fa40 	bl	80018d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001454:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001458:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800145a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800145e:	4619      	mov	r1, r3
 8001460:	481c      	ldr	r0, [pc, #112]	@ (80014d4 <MX_TIM4_Init+0xe8>)
 8001462:	f00d fb89 	bl	800eb78 <HAL_TIM_ConfigClockSource>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d001      	beq.n	8001470 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 800146c:	f000 fa32 	bl	80018d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001470:	4818      	ldr	r0, [pc, #96]	@ (80014d4 <MX_TIM4_Init+0xe8>)
 8001472:	f00c ff51 	bl	800e318 <HAL_TIM_PWM_Init>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d001      	beq.n	8001480 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 800147c:	f000 fa2a 	bl	80018d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001480:	2300      	movs	r3, #0
 8001482:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001484:	2300      	movs	r3, #0
 8001486:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001488:	f107 031c 	add.w	r3, r7, #28
 800148c:	4619      	mov	r1, r3
 800148e:	4811      	ldr	r0, [pc, #68]	@ (80014d4 <MX_TIM4_Init+0xe8>)
 8001490:	f00e f8de 	bl	800f650 <HAL_TIMEx_MasterConfigSynchronization>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d001      	beq.n	800149e <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 800149a:	f000 fa1b 	bl	80018d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800149e:	2360      	movs	r3, #96	@ 0x60
 80014a0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80014a2:	2300      	movs	r3, #0
 80014a4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014a6:	2300      	movs	r3, #0
 80014a8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014aa:	2300      	movs	r3, #0
 80014ac:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014ae:	463b      	mov	r3, r7
 80014b0:	2200      	movs	r2, #0
 80014b2:	4619      	mov	r1, r3
 80014b4:	4807      	ldr	r0, [pc, #28]	@ (80014d4 <MX_TIM4_Init+0xe8>)
 80014b6:	f00d fa4b 	bl	800e950 <HAL_TIM_PWM_ConfigChannel>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d001      	beq.n	80014c4 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 80014c0:	f000 fa08 	bl	80018d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80014c4:	4803      	ldr	r0, [pc, #12]	@ (80014d4 <MX_TIM4_Init+0xe8>)
 80014c6:	f000 fdd5 	bl	8002074 <HAL_TIM_MspPostInit>

}
 80014ca:	bf00      	nop
 80014cc:	3738      	adds	r7, #56	@ 0x38
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	2400079c 	.word	0x2400079c
 80014d8:	40000800 	.word	0x40000800

080014dc <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 80014e0:	4b23      	ldr	r3, [pc, #140]	@ (8001570 <MX_UART7_Init+0x94>)
 80014e2:	4a24      	ldr	r2, [pc, #144]	@ (8001574 <MX_UART7_Init+0x98>)
 80014e4:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 80014e6:	4b22      	ldr	r3, [pc, #136]	@ (8001570 <MX_UART7_Init+0x94>)
 80014e8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80014ec:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 80014ee:	4b20      	ldr	r3, [pc, #128]	@ (8001570 <MX_UART7_Init+0x94>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 80014f4:	4b1e      	ldr	r3, [pc, #120]	@ (8001570 <MX_UART7_Init+0x94>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 80014fa:	4b1d      	ldr	r3, [pc, #116]	@ (8001570 <MX_UART7_Init+0x94>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8001500:	4b1b      	ldr	r3, [pc, #108]	@ (8001570 <MX_UART7_Init+0x94>)
 8001502:	220c      	movs	r2, #12
 8001504:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8001506:	4b1a      	ldr	r3, [pc, #104]	@ (8001570 <MX_UART7_Init+0x94>)
 8001508:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800150c:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 800150e:	4b18      	ldr	r3, [pc, #96]	@ (8001570 <MX_UART7_Init+0x94>)
 8001510:	2200      	movs	r2, #0
 8001512:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001514:	4b16      	ldr	r3, [pc, #88]	@ (8001570 <MX_UART7_Init+0x94>)
 8001516:	2200      	movs	r2, #0
 8001518:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800151a:	4b15      	ldr	r3, [pc, #84]	@ (8001570 <MX_UART7_Init+0x94>)
 800151c:	2200      	movs	r2, #0
 800151e:	625a      	str	r2, [r3, #36]	@ 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001520:	4b13      	ldr	r3, [pc, #76]	@ (8001570 <MX_UART7_Init+0x94>)
 8001522:	2200      	movs	r2, #0
 8001524:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8001526:	4812      	ldr	r0, [pc, #72]	@ (8001570 <MX_UART7_Init+0x94>)
 8001528:	f00e f94c 	bl	800f7c4 <HAL_UART_Init>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d001      	beq.n	8001536 <MX_UART7_Init+0x5a>
  {
    Error_Handler();
 8001532:	f000 f9cf 	bl	80018d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001536:	2100      	movs	r1, #0
 8001538:	480d      	ldr	r0, [pc, #52]	@ (8001570 <MX_UART7_Init+0x94>)
 800153a:	f00f fa58 	bl	80109ee <HAL_UARTEx_SetTxFifoThreshold>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d001      	beq.n	8001548 <MX_UART7_Init+0x6c>
  {
    Error_Handler();
 8001544:	f000 f9c6 	bl	80018d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001548:	2100      	movs	r1, #0
 800154a:	4809      	ldr	r0, [pc, #36]	@ (8001570 <MX_UART7_Init+0x94>)
 800154c:	f00f fa8d 	bl	8010a6a <HAL_UARTEx_SetRxFifoThreshold>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d001      	beq.n	800155a <MX_UART7_Init+0x7e>
  {
    Error_Handler();
 8001556:	f000 f9bd 	bl	80018d4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 800155a:	4805      	ldr	r0, [pc, #20]	@ (8001570 <MX_UART7_Init+0x94>)
 800155c:	f00f fa0e 	bl	801097c <HAL_UARTEx_DisableFifoMode>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d001      	beq.n	800156a <MX_UART7_Init+0x8e>
  {
    Error_Handler();
 8001566:	f000 f9b5 	bl	80018d4 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 800156a:	bf00      	nop
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	240007e8 	.word	0x240007e8
 8001574:	40007800 	.word	0x40007800

08001578 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800157c:	4b22      	ldr	r3, [pc, #136]	@ (8001608 <MX_USART1_UART_Init+0x90>)
 800157e:	4a23      	ldr	r2, [pc, #140]	@ (800160c <MX_USART1_UART_Init+0x94>)
 8001580:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001582:	4b21      	ldr	r3, [pc, #132]	@ (8001608 <MX_USART1_UART_Init+0x90>)
 8001584:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001588:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800158a:	4b1f      	ldr	r3, [pc, #124]	@ (8001608 <MX_USART1_UART_Init+0x90>)
 800158c:	2200      	movs	r2, #0
 800158e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001590:	4b1d      	ldr	r3, [pc, #116]	@ (8001608 <MX_USART1_UART_Init+0x90>)
 8001592:	2200      	movs	r2, #0
 8001594:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001596:	4b1c      	ldr	r3, [pc, #112]	@ (8001608 <MX_USART1_UART_Init+0x90>)
 8001598:	2200      	movs	r2, #0
 800159a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800159c:	4b1a      	ldr	r3, [pc, #104]	@ (8001608 <MX_USART1_UART_Init+0x90>)
 800159e:	220c      	movs	r2, #12
 80015a0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015a2:	4b19      	ldr	r3, [pc, #100]	@ (8001608 <MX_USART1_UART_Init+0x90>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80015a8:	4b17      	ldr	r3, [pc, #92]	@ (8001608 <MX_USART1_UART_Init+0x90>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015ae:	4b16      	ldr	r3, [pc, #88]	@ (8001608 <MX_USART1_UART_Init+0x90>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80015b4:	4b14      	ldr	r3, [pc, #80]	@ (8001608 <MX_USART1_UART_Init+0x90>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015ba:	4b13      	ldr	r3, [pc, #76]	@ (8001608 <MX_USART1_UART_Init+0x90>)
 80015bc:	2200      	movs	r2, #0
 80015be:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80015c0:	4811      	ldr	r0, [pc, #68]	@ (8001608 <MX_USART1_UART_Init+0x90>)
 80015c2:	f00e f8ff 	bl	800f7c4 <HAL_UART_Init>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d001      	beq.n	80015d0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80015cc:	f000 f982 	bl	80018d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015d0:	2100      	movs	r1, #0
 80015d2:	480d      	ldr	r0, [pc, #52]	@ (8001608 <MX_USART1_UART_Init+0x90>)
 80015d4:	f00f fa0b 	bl	80109ee <HAL_UARTEx_SetTxFifoThreshold>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d001      	beq.n	80015e2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80015de:	f000 f979 	bl	80018d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015e2:	2100      	movs	r1, #0
 80015e4:	4808      	ldr	r0, [pc, #32]	@ (8001608 <MX_USART1_UART_Init+0x90>)
 80015e6:	f00f fa40 	bl	8010a6a <HAL_UARTEx_SetRxFifoThreshold>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d001      	beq.n	80015f4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80015f0:	f000 f970 	bl	80018d4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80015f4:	4804      	ldr	r0, [pc, #16]	@ (8001608 <MX_USART1_UART_Init+0x90>)
 80015f6:	f00f f9c1 	bl	801097c <HAL_UARTEx_DisableFifoMode>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d001      	beq.n	8001604 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001600:	f000 f968 	bl	80018d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001604:	bf00      	nop
 8001606:	bd80      	pop	{r7, pc}
 8001608:	2400087c 	.word	0x2400087c
 800160c:	40011000 	.word	0x40011000

08001610 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001616:	4b11      	ldr	r3, [pc, #68]	@ (800165c <MX_DMA_Init+0x4c>)
 8001618:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800161c:	4a0f      	ldr	r2, [pc, #60]	@ (800165c <MX_DMA_Init+0x4c>)
 800161e:	f043 0301 	orr.w	r3, r3, #1
 8001622:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001626:	4b0d      	ldr	r3, [pc, #52]	@ (800165c <MX_DMA_Init+0x4c>)
 8001628:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800162c:	f003 0301 	and.w	r3, r3, #1
 8001630:	607b      	str	r3, [r7, #4]
 8001632:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001634:	2200      	movs	r2, #0
 8001636:	2100      	movs	r1, #0
 8001638:	200b      	movs	r0, #11
 800163a:	f004 fe58 	bl	80062ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800163e:	200b      	movs	r0, #11
 8001640:	f004 fe6f 	bl	8006322 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001644:	2200      	movs	r2, #0
 8001646:	2100      	movs	r1, #0
 8001648:	200c      	movs	r0, #12
 800164a:	f004 fe50 	bl	80062ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800164e:	200c      	movs	r0, #12
 8001650:	f004 fe67 	bl	8006322 <HAL_NVIC_EnableIRQ>

}
 8001654:	bf00      	nop
 8001656:	3708      	adds	r7, #8
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}
 800165c:	58024400 	.word	0x58024400

08001660 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b08c      	sub	sp, #48	@ 0x30
 8001664:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001666:	f107 031c 	add.w	r3, r7, #28
 800166a:	2200      	movs	r2, #0
 800166c:	601a      	str	r2, [r3, #0]
 800166e:	605a      	str	r2, [r3, #4]
 8001670:	609a      	str	r2, [r3, #8]
 8001672:	60da      	str	r2, [r3, #12]
 8001674:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001676:	4b7b      	ldr	r3, [pc, #492]	@ (8001864 <MX_GPIO_Init+0x204>)
 8001678:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800167c:	4a79      	ldr	r2, [pc, #484]	@ (8001864 <MX_GPIO_Init+0x204>)
 800167e:	f043 0310 	orr.w	r3, r3, #16
 8001682:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001686:	4b77      	ldr	r3, [pc, #476]	@ (8001864 <MX_GPIO_Init+0x204>)
 8001688:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800168c:	f003 0310 	and.w	r3, r3, #16
 8001690:	61bb      	str	r3, [r7, #24]
 8001692:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001694:	4b73      	ldr	r3, [pc, #460]	@ (8001864 <MX_GPIO_Init+0x204>)
 8001696:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800169a:	4a72      	ldr	r2, [pc, #456]	@ (8001864 <MX_GPIO_Init+0x204>)
 800169c:	f043 0304 	orr.w	r3, r3, #4
 80016a0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80016a4:	4b6f      	ldr	r3, [pc, #444]	@ (8001864 <MX_GPIO_Init+0x204>)
 80016a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016aa:	f003 0304 	and.w	r3, r3, #4
 80016ae:	617b      	str	r3, [r7, #20]
 80016b0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80016b2:	4b6c      	ldr	r3, [pc, #432]	@ (8001864 <MX_GPIO_Init+0x204>)
 80016b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016b8:	4a6a      	ldr	r2, [pc, #424]	@ (8001864 <MX_GPIO_Init+0x204>)
 80016ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80016be:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80016c2:	4b68      	ldr	r3, [pc, #416]	@ (8001864 <MX_GPIO_Init+0x204>)
 80016c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80016cc:	613b      	str	r3, [r7, #16]
 80016ce:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016d0:	4b64      	ldr	r3, [pc, #400]	@ (8001864 <MX_GPIO_Init+0x204>)
 80016d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016d6:	4a63      	ldr	r2, [pc, #396]	@ (8001864 <MX_GPIO_Init+0x204>)
 80016d8:	f043 0301 	orr.w	r3, r3, #1
 80016dc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80016e0:	4b60      	ldr	r3, [pc, #384]	@ (8001864 <MX_GPIO_Init+0x204>)
 80016e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016e6:	f003 0301 	and.w	r3, r3, #1
 80016ea:	60fb      	str	r3, [r7, #12]
 80016ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016ee:	4b5d      	ldr	r3, [pc, #372]	@ (8001864 <MX_GPIO_Init+0x204>)
 80016f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016f4:	4a5b      	ldr	r2, [pc, #364]	@ (8001864 <MX_GPIO_Init+0x204>)
 80016f6:	f043 0302 	orr.w	r3, r3, #2
 80016fa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80016fe:	4b59      	ldr	r3, [pc, #356]	@ (8001864 <MX_GPIO_Init+0x204>)
 8001700:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001704:	f003 0302 	and.w	r3, r3, #2
 8001708:	60bb      	str	r3, [r7, #8]
 800170a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800170c:	4b55      	ldr	r3, [pc, #340]	@ (8001864 <MX_GPIO_Init+0x204>)
 800170e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001712:	4a54      	ldr	r2, [pc, #336]	@ (8001864 <MX_GPIO_Init+0x204>)
 8001714:	f043 0308 	orr.w	r3, r3, #8
 8001718:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800171c:	4b51      	ldr	r3, [pc, #324]	@ (8001864 <MX_GPIO_Init+0x204>)
 800171e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001722:	f003 0308 	and.w	r3, r3, #8
 8001726:	607b      	str	r3, [r7, #4]
 8001728:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI4_CS_GPIO_Port, SPI4_CS_Pin, GPIO_PIN_RESET);
 800172a:	2200      	movs	r2, #0
 800172c:	2110      	movs	r1, #16
 800172e:	484e      	ldr	r0, [pc, #312]	@ (8001868 <MX_GPIO_Init+0x208>)
 8001730:	f007 fbd6 	bl	8008ee0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIO_TIMING2_GPIO_Port, GPIO_TIMING2_Pin, GPIO_PIN_RESET);
 8001734:	2200      	movs	r2, #0
 8001736:	2104      	movs	r1, #4
 8001738:	484c      	ldr	r0, [pc, #304]	@ (800186c <MX_GPIO_Init+0x20c>)
 800173a:	f007 fbd1 	bl	8008ee0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIO_TIMING1_GPIO_Port, GPIO_TIMING1_Pin, GPIO_PIN_RESET);
 800173e:	2200      	movs	r2, #0
 8001740:	2101      	movs	r1, #1
 8001742:	484b      	ldr	r0, [pc, #300]	@ (8001870 <MX_GPIO_Init+0x210>)
 8001744:	f007 fbcc 	bl	8008ee0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MUTE_INDICATOR_Pin|MUTE_SIGNAL_Pin, GPIO_PIN_SET);
 8001748:	2201      	movs	r2, #1
 800174a:	210a      	movs	r1, #10
 800174c:	4848      	ldr	r0, [pc, #288]	@ (8001870 <MX_GPIO_Init+0x210>)
 800174e:	f007 fbc7 	bl	8008ee0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ACCEL_NCS1_Pin|RECORD_INDICATOR_Pin, GPIO_PIN_RESET);
 8001752:	2200      	movs	r2, #0
 8001754:	f44f 5188 	mov.w	r1, #4352	@ 0x1100
 8001758:	4846      	ldr	r0, [pc, #280]	@ (8001874 <MX_GPIO_Init+0x214>)
 800175a:	f007 fbc1 	bl	8008ee0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 800175e:	2200      	movs	r2, #0
 8001760:	2101      	movs	r1, #1
 8001762:	4845      	ldr	r0, [pc, #276]	@ (8001878 <MX_GPIO_Init+0x218>)
 8001764:	f007 fbbc 	bl	8008ee0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI4_INT1_Pin */
  GPIO_InitStruct.Pin = SPI4_INT1_Pin;
 8001768:	2308      	movs	r3, #8
 800176a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800176c:	2300      	movs	r3, #0
 800176e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001770:	2300      	movs	r3, #0
 8001772:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(SPI4_INT1_GPIO_Port, &GPIO_InitStruct);
 8001774:	f107 031c 	add.w	r3, r7, #28
 8001778:	4619      	mov	r1, r3
 800177a:	483b      	ldr	r0, [pc, #236]	@ (8001868 <MX_GPIO_Init+0x208>)
 800177c:	f007 f9f0 	bl	8008b60 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI4_CS_Pin */
  GPIO_InitStruct.Pin = SPI4_CS_Pin;
 8001780:	2310      	movs	r3, #16
 8001782:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001784:	2301      	movs	r3, #1
 8001786:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001788:	2300      	movs	r3, #0
 800178a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800178c:	2300      	movs	r3, #0
 800178e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(SPI4_CS_GPIO_Port, &GPIO_InitStruct);
 8001790:	f107 031c 	add.w	r3, r7, #28
 8001794:	4619      	mov	r1, r3
 8001796:	4834      	ldr	r0, [pc, #208]	@ (8001868 <MX_GPIO_Init+0x208>)
 8001798:	f007 f9e2 	bl	8008b60 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 DAC_EXT_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_13|DAC_EXT_Pin;
 800179c:	f44f 5308 	mov.w	r3, #8704	@ 0x2200
 80017a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017a2:	2300      	movs	r3, #0
 80017a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a6:	2300      	movs	r3, #0
 80017a8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017aa:	f107 031c 	add.w	r3, r7, #28
 80017ae:	4619      	mov	r1, r3
 80017b0:	482e      	ldr	r0, [pc, #184]	@ (800186c <MX_GPIO_Init+0x20c>)
 80017b2:	f007 f9d5 	bl	8008b60 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_TIMING2_Pin */
  GPIO_InitStruct.Pin = GPIO_TIMING2_Pin;
 80017b6:	2304      	movs	r3, #4
 80017b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017ba:	2301      	movs	r3, #1
 80017bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017be:	2300      	movs	r3, #0
 80017c0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017c2:	2300      	movs	r3, #0
 80017c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIO_TIMING2_GPIO_Port, &GPIO_InitStruct);
 80017c6:	f107 031c 	add.w	r3, r7, #28
 80017ca:	4619      	mov	r1, r3
 80017cc:	4827      	ldr	r0, [pc, #156]	@ (800186c <MX_GPIO_Init+0x20c>)
 80017ce:	f007 f9c7 	bl	8008b60 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_TIMING1_Pin MUTE_INDICATOR_Pin MUTE_SIGNAL_Pin */
  GPIO_InitStruct.Pin = GPIO_TIMING1_Pin|MUTE_INDICATOR_Pin|MUTE_SIGNAL_Pin;
 80017d2:	230b      	movs	r3, #11
 80017d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017d6:	2301      	movs	r3, #1
 80017d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017da:	2300      	movs	r3, #0
 80017dc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017de:	2300      	movs	r3, #0
 80017e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017e2:	f107 031c 	add.w	r3, r7, #28
 80017e6:	4619      	mov	r1, r3
 80017e8:	4821      	ldr	r0, [pc, #132]	@ (8001870 <MX_GPIO_Init+0x210>)
 80017ea:	f007 f9b9 	bl	8008b60 <HAL_GPIO_Init>

  /*Configure GPIO pins : MUTE_BUTTON_Pin BIG_RED_BUTTON_Pin */
  GPIO_InitStruct.Pin = MUTE_BUTTON_Pin|BIG_RED_BUTTON_Pin;
 80017ee:	f248 0304 	movw	r3, #32772	@ 0x8004
 80017f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017f4:	2300      	movs	r3, #0
 80017f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f8:	2300      	movs	r3, #0
 80017fa:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017fc:	f107 031c 	add.w	r3, r7, #28
 8001800:	4619      	mov	r1, r3
 8001802:	481b      	ldr	r0, [pc, #108]	@ (8001870 <MX_GPIO_Init+0x210>)
 8001804:	f007 f9ac 	bl	8008b60 <HAL_GPIO_Init>

  /*Configure GPIO pins : ACCEL_NCS1_Pin RECORD_INDICATOR_Pin */
  GPIO_InitStruct.Pin = ACCEL_NCS1_Pin|RECORD_INDICATOR_Pin;
 8001808:	f44f 5388 	mov.w	r3, #4352	@ 0x1100
 800180c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800180e:	2301      	movs	r3, #1
 8001810:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001812:	2300      	movs	r3, #0
 8001814:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001816:	2300      	movs	r3, #0
 8001818:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800181a:	f107 031c 	add.w	r3, r7, #28
 800181e:	4619      	mov	r1, r3
 8001820:	4814      	ldr	r0, [pc, #80]	@ (8001874 <MX_GPIO_Init+0x214>)
 8001822:	f007 f99d 	bl	8008b60 <HAL_GPIO_Init>

  /*Configure GPIO pins : ACCEL_INTA1_Pin ACCEL_INTB1_Pin SPI3_INT1_Pin SPI3_INT2_Pin */
  GPIO_InitStruct.Pin = ACCEL_INTA1_Pin|ACCEL_INTB1_Pin|SPI3_INT1_Pin|SPI3_INT2_Pin;
 8001826:	f240 3306 	movw	r3, #774	@ 0x306
 800182a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800182c:	2300      	movs	r3, #0
 800182e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001830:	2300      	movs	r3, #0
 8001832:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001834:	f107 031c 	add.w	r3, r7, #28
 8001838:	4619      	mov	r1, r3
 800183a:	480f      	ldr	r0, [pc, #60]	@ (8001878 <MX_GPIO_Init+0x218>)
 800183c:	f007 f990 	bl	8008b60 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI3_CS_Pin */
  GPIO_InitStruct.Pin = SPI3_CS_Pin;
 8001840:	2301      	movs	r3, #1
 8001842:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001844:	2301      	movs	r3, #1
 8001846:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001848:	2300      	movs	r3, #0
 800184a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800184c:	2300      	movs	r3, #0
 800184e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(SPI3_CS_GPIO_Port, &GPIO_InitStruct);
 8001850:	f107 031c 	add.w	r3, r7, #28
 8001854:	4619      	mov	r1, r3
 8001856:	4808      	ldr	r0, [pc, #32]	@ (8001878 <MX_GPIO_Init+0x218>)
 8001858:	f007 f982 	bl	8008b60 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800185c:	bf00      	nop
 800185e:	3730      	adds	r7, #48	@ 0x30
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}
 8001864:	58024400 	.word	0x58024400
 8001868:	58021000 	.word	0x58021000
 800186c:	58020800 	.word	0x58020800
 8001870:	58020000 	.word	0x58020000
 8001874:	58020400 	.word	0x58020400
 8001878:	58020c00 	.word	0x58020c00

0800187c <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b084      	sub	sp, #16
 8001880:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001882:	463b      	mov	r3, r7
 8001884:	2200      	movs	r2, #0
 8001886:	601a      	str	r2, [r3, #0]
 8001888:	605a      	str	r2, [r3, #4]
 800188a:	609a      	str	r2, [r3, #8]
 800188c:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800188e:	f004 fd63 	bl	8006358 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001892:	2301      	movs	r3, #1
 8001894:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001896:	2300      	movs	r3, #0
 8001898:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 800189a:	2300      	movs	r3, #0
 800189c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800189e:	231f      	movs	r3, #31
 80018a0:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80018a2:	2387      	movs	r3, #135	@ 0x87
 80018a4:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80018a6:	2300      	movs	r3, #0
 80018a8:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80018aa:	2300      	movs	r3, #0
 80018ac:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80018ae:	2301      	movs	r3, #1
 80018b0:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80018b2:	2301      	movs	r3, #1
 80018b4:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80018b6:	2300      	movs	r3, #0
 80018b8:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80018ba:	2300      	movs	r3, #0
 80018bc:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80018be:	463b      	mov	r3, r7
 80018c0:	4618      	mov	r0, r3
 80018c2:	f004 fd81 	bl	80063c8 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80018c6:	2004      	movs	r0, #4
 80018c8:	f004 fd5e 	bl	8006388 <HAL_MPU_Enable>

}
 80018cc:	bf00      	nop
 80018ce:	3710      	adds	r7, #16
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}

080018d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018d8:	b672      	cpsid	i
}
 80018da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018dc:	bf00      	nop
 80018de:	e7fd      	b.n	80018dc <Error_Handler+0x8>

080018e0 <Sequencer_Init>:
 */

#include "sequencer.h"

void Sequencer_Init(Sequencer* sequencer)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b083      	sub	sp, #12
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
	sequencer->sequence_time_array = NULL;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2200      	movs	r2, #0
 80018ec:	601a      	str	r2, [r3, #0]
	sequencer->sequence_len = 0;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2200      	movs	r2, #0
 80018f2:	605a      	str	r2, [r3, #4]
	sequencer->sequence_index = 0;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2200      	movs	r2, #0
 80018f8:	609a      	str	r2, [r3, #8]
	sequencer->time = 0;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2200      	movs	r2, #0
 80018fe:	60da      	str	r2, [r3, #12]

	sequencer->is_running = 0;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2200      	movs	r2, #0
 8001904:	741a      	strb	r2, [r3, #16]
	sequencer->is_looping = 0;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2200      	movs	r2, #0
 800190a:	745a      	strb	r2, [r3, #17]
}
 800190c:	bf00      	nop
 800190e:	370c      	adds	r7, #12
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr

08001918 <Sequencer_SetSequence>:

void Sequencer_SetSequence(Sequencer* sequencer, const uint32_t* sequence_time_array, const uint32_t sequence_len, uint8_t is_looping)
{
 8001918:	b480      	push	{r7}
 800191a:	b085      	sub	sp, #20
 800191c:	af00      	add	r7, sp, #0
 800191e:	60f8      	str	r0, [r7, #12]
 8001920:	60b9      	str	r1, [r7, #8]
 8001922:	607a      	str	r2, [r7, #4]
 8001924:	70fb      	strb	r3, [r7, #3]
	sequencer->sequence_time_array = sequence_time_array;
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	68ba      	ldr	r2, [r7, #8]
 800192a:	601a      	str	r2, [r3, #0]
	sequencer->sequence_len = sequence_len;
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	687a      	ldr	r2, [r7, #4]
 8001930:	605a      	str	r2, [r3, #4]
	sequencer->is_looping = is_looping;
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	78fa      	ldrb	r2, [r7, #3]
 8001936:	745a      	strb	r2, [r3, #17]
}
 8001938:	bf00      	nop
 800193a:	3714      	adds	r7, #20
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr

08001944 <Sequencer_Update>:

uint32_t Sequencer_Update(Sequencer* sequencer, uint32_t time, uint32_t* index)
{
 8001944:	b480      	push	{r7}
 8001946:	b085      	sub	sp, #20
 8001948:	af00      	add	r7, sp, #0
 800194a:	60f8      	str	r0, [r7, #12]
 800194c:	60b9      	str	r1, [r7, #8]
 800194e:	607a      	str	r2, [r7, #4]
	/*
	 * each element in the time array says how long to hold that step for
	 */

	if (sequencer->is_running && sequencer->sequence_time_array != NULL)
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	7c1b      	ldrb	r3, [r3, #16]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d030      	beq.n	80019ba <Sequencer_Update+0x76>
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d02c      	beq.n	80019ba <Sequencer_Update+0x76>
	{
		if (time > sequencer->time)
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	68db      	ldr	r3, [r3, #12]
 8001964:	68ba      	ldr	r2, [r7, #8]
 8001966:	429a      	cmp	r2, r3
 8001968:	d927      	bls.n	80019ba <Sequencer_Update+0x76>
		{
			*index = sequencer->sequence_index;
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	689a      	ldr	r2, [r3, #8]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	601a      	str	r2, [r3, #0]
			sequencer->time += sequencer->sequence_time_array[sequencer->sequence_index];
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	68da      	ldr	r2, [r3, #12]
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	6819      	ldr	r1, [r3, #0]
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	689b      	ldr	r3, [r3, #8]
 800197e:	009b      	lsls	r3, r3, #2
 8001980:	440b      	add	r3, r1
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	441a      	add	r2, r3
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	60da      	str	r2, [r3, #12]
			sequencer->sequence_index++;
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	689b      	ldr	r3, [r3, #8]
 800198e:	1c5a      	adds	r2, r3, #1
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	609a      	str	r2, [r3, #8]

			if (sequencer->sequence_index == sequencer->sequence_len)  /* reached the end of the sequence */
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	689a      	ldr	r2, [r3, #8]
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	429a      	cmp	r2, r3
 800199e:	d10a      	bne.n	80019b6 <Sequencer_Update+0x72>
			{
				if (sequencer->is_looping)
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	7c5b      	ldrb	r3, [r3, #17]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d003      	beq.n	80019b0 <Sequencer_Update+0x6c>
					sequencer->sequence_index = 0;
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	2200      	movs	r2, #0
 80019ac:	609a      	str	r2, [r3, #8]
 80019ae:	e002      	b.n	80019b6 <Sequencer_Update+0x72>
				else
					sequencer->is_running = 0;
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	2200      	movs	r2, #0
 80019b4:	741a      	strb	r2, [r3, #16]
			}

			return 1;
 80019b6:	2301      	movs	r3, #1
 80019b8:	e000      	b.n	80019bc <Sequencer_Update+0x78>
		}
	}

	return 0;
 80019ba:	2300      	movs	r3, #0
}
 80019bc:	4618      	mov	r0, r3
 80019be:	3714      	adds	r7, #20
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr

080019c8 <Sequencer_Start>:

void Sequencer_Start(Sequencer* sequencer, uint32_t time)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b083      	sub	sp, #12
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
 80019d0:	6039      	str	r1, [r7, #0]
	sequencer->time = time;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	683a      	ldr	r2, [r7, #0]
 80019d6:	60da      	str	r2, [r3, #12]
	sequencer->sequence_index = 0;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2200      	movs	r2, #0
 80019dc:	609a      	str	r2, [r3, #8]
	sequencer->is_running = 1;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2201      	movs	r2, #1
 80019e2:	741a      	strb	r2, [r3, #16]
}
 80019e4:	bf00      	nop
 80019e6:	370c      	adds	r7, #12
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr

080019f0 <Sequencer_Stop>:

void Sequencer_Stop(Sequencer* sequencer)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b083      	sub	sp, #12
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
	sequencer->is_running = 0;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2200      	movs	r2, #0
 80019fc:	741a      	strb	r2, [r3, #16]
}
 80019fe:	bf00      	nop
 8001a00:	370c      	adds	r7, #12
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr
	...

08001a0c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b083      	sub	sp, #12
 8001a10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a12:	4b0a      	ldr	r3, [pc, #40]	@ (8001a3c <HAL_MspInit+0x30>)
 8001a14:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001a18:	4a08      	ldr	r2, [pc, #32]	@ (8001a3c <HAL_MspInit+0x30>)
 8001a1a:	f043 0302 	orr.w	r3, r3, #2
 8001a1e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001a22:	4b06      	ldr	r3, [pc, #24]	@ (8001a3c <HAL_MspInit+0x30>)
 8001a24:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001a28:	f003 0302 	and.w	r3, r3, #2
 8001a2c:	607b      	str	r3, [r7, #4]
 8001a2e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a30:	bf00      	nop
 8001a32:	370c      	adds	r7, #12
 8001a34:	46bd      	mov	sp, r7
 8001a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3a:	4770      	bx	lr
 8001a3c:	58024400 	.word	0x58024400

08001a40 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b08c      	sub	sp, #48	@ 0x30
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a48:	f107 031c 	add.w	r3, r7, #28
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	601a      	str	r2, [r3, #0]
 8001a50:	605a      	str	r2, [r3, #4]
 8001a52:	609a      	str	r2, [r3, #8]
 8001a54:	60da      	str	r2, [r3, #12]
 8001a56:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a39      	ldr	r2, [pc, #228]	@ (8001b44 <HAL_ADC_MspInit+0x104>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d133      	bne.n	8001aca <HAL_ADC_MspInit+0x8a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001a62:	4b39      	ldr	r3, [pc, #228]	@ (8001b48 <HAL_ADC_MspInit+0x108>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	3301      	adds	r3, #1
 8001a68:	4a37      	ldr	r2, [pc, #220]	@ (8001b48 <HAL_ADC_MspInit+0x108>)
 8001a6a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001a6c:	4b36      	ldr	r3, [pc, #216]	@ (8001b48 <HAL_ADC_MspInit+0x108>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	2b01      	cmp	r3, #1
 8001a72:	d10e      	bne.n	8001a92 <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001a74:	4b35      	ldr	r3, [pc, #212]	@ (8001b4c <HAL_ADC_MspInit+0x10c>)
 8001a76:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001a7a:	4a34      	ldr	r2, [pc, #208]	@ (8001b4c <HAL_ADC_MspInit+0x10c>)
 8001a7c:	f043 0320 	orr.w	r3, r3, #32
 8001a80:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001a84:	4b31      	ldr	r3, [pc, #196]	@ (8001b4c <HAL_ADC_MspInit+0x10c>)
 8001a86:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001a8a:	f003 0320 	and.w	r3, r3, #32
 8001a8e:	61bb      	str	r3, [r7, #24]
 8001a90:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a92:	4b2e      	ldr	r3, [pc, #184]	@ (8001b4c <HAL_ADC_MspInit+0x10c>)
 8001a94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a98:	4a2c      	ldr	r2, [pc, #176]	@ (8001b4c <HAL_ADC_MspInit+0x10c>)
 8001a9a:	f043 0304 	orr.w	r3, r3, #4
 8001a9e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001aa2:	4b2a      	ldr	r3, [pc, #168]	@ (8001b4c <HAL_ADC_MspInit+0x10c>)
 8001aa4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001aa8:	f003 0304 	and.w	r3, r3, #4
 8001aac:	617b      	str	r3, [r7, #20]
 8001aae:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001ab0:	2330      	movs	r3, #48	@ 0x30
 8001ab2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ab4:	2303      	movs	r3, #3
 8001ab6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001abc:	f107 031c 	add.w	r3, r7, #28
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	4823      	ldr	r0, [pc, #140]	@ (8001b50 <HAL_ADC_MspInit+0x110>)
 8001ac4:	f007 f84c 	bl	8008b60 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001ac8:	e037      	b.n	8001b3a <HAL_ADC_MspInit+0xfa>
  else if(hadc->Instance==ADC2)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4a21      	ldr	r2, [pc, #132]	@ (8001b54 <HAL_ADC_MspInit+0x114>)
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d132      	bne.n	8001b3a <HAL_ADC_MspInit+0xfa>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001ad4:	4b1c      	ldr	r3, [pc, #112]	@ (8001b48 <HAL_ADC_MspInit+0x108>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	3301      	adds	r3, #1
 8001ada:	4a1b      	ldr	r2, [pc, #108]	@ (8001b48 <HAL_ADC_MspInit+0x108>)
 8001adc:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001ade:	4b1a      	ldr	r3, [pc, #104]	@ (8001b48 <HAL_ADC_MspInit+0x108>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	2b01      	cmp	r3, #1
 8001ae4:	d10e      	bne.n	8001b04 <HAL_ADC_MspInit+0xc4>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001ae6:	4b19      	ldr	r3, [pc, #100]	@ (8001b4c <HAL_ADC_MspInit+0x10c>)
 8001ae8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001aec:	4a17      	ldr	r2, [pc, #92]	@ (8001b4c <HAL_ADC_MspInit+0x10c>)
 8001aee:	f043 0320 	orr.w	r3, r3, #32
 8001af2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001af6:	4b15      	ldr	r3, [pc, #84]	@ (8001b4c <HAL_ADC_MspInit+0x10c>)
 8001af8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001afc:	f003 0320 	and.w	r3, r3, #32
 8001b00:	613b      	str	r3, [r7, #16]
 8001b02:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b04:	4b11      	ldr	r3, [pc, #68]	@ (8001b4c <HAL_ADC_MspInit+0x10c>)
 8001b06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b0a:	4a10      	ldr	r2, [pc, #64]	@ (8001b4c <HAL_ADC_MspInit+0x10c>)
 8001b0c:	f043 0301 	orr.w	r3, r3, #1
 8001b10:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001b14:	4b0d      	ldr	r3, [pc, #52]	@ (8001b4c <HAL_ADC_MspInit+0x10c>)
 8001b16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b1a:	f003 0301 	and.w	r3, r3, #1
 8001b1e:	60fb      	str	r3, [r7, #12]
 8001b20:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001b22:	23c0      	movs	r3, #192	@ 0xc0
 8001b24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b26:	2303      	movs	r3, #3
 8001b28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b2e:	f107 031c 	add.w	r3, r7, #28
 8001b32:	4619      	mov	r1, r3
 8001b34:	4808      	ldr	r0, [pc, #32]	@ (8001b58 <HAL_ADC_MspInit+0x118>)
 8001b36:	f007 f813 	bl	8008b60 <HAL_GPIO_Init>
}
 8001b3a:	bf00      	nop
 8001b3c:	3730      	adds	r7, #48	@ 0x30
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	40022000 	.word	0x40022000
 8001b48:	24003f40 	.word	0x24003f40
 8001b4c:	58024400 	.word	0x58024400
 8001b50:	58020800 	.word	0x58020800
 8001b54:	40022100 	.word	0x40022100
 8001b58:	58020000 	.word	0x58020000

08001b5c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b08a      	sub	sp, #40	@ 0x28
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b64:	f107 0314 	add.w	r3, r7, #20
 8001b68:	2200      	movs	r2, #0
 8001b6a:	601a      	str	r2, [r3, #0]
 8001b6c:	605a      	str	r2, [r3, #4]
 8001b6e:	609a      	str	r2, [r3, #8]
 8001b70:	60da      	str	r2, [r3, #12]
 8001b72:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a48      	ldr	r2, [pc, #288]	@ (8001c9c <HAL_DAC_MspInit+0x140>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	f040 808a 	bne.w	8001c94 <HAL_DAC_MspInit+0x138>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8001b80:	4b47      	ldr	r3, [pc, #284]	@ (8001ca0 <HAL_DAC_MspInit+0x144>)
 8001b82:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001b86:	4a46      	ldr	r2, [pc, #280]	@ (8001ca0 <HAL_DAC_MspInit+0x144>)
 8001b88:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001b8c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001b90:	4b43      	ldr	r3, [pc, #268]	@ (8001ca0 <HAL_DAC_MspInit+0x144>)
 8001b92:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001b96:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001b9a:	613b      	str	r3, [r7, #16]
 8001b9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b9e:	4b40      	ldr	r3, [pc, #256]	@ (8001ca0 <HAL_DAC_MspInit+0x144>)
 8001ba0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ba4:	4a3e      	ldr	r2, [pc, #248]	@ (8001ca0 <HAL_DAC_MspInit+0x144>)
 8001ba6:	f043 0301 	orr.w	r3, r3, #1
 8001baa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001bae:	4b3c      	ldr	r3, [pc, #240]	@ (8001ca0 <HAL_DAC_MspInit+0x144>)
 8001bb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001bb4:	f003 0301 	and.w	r3, r3, #1
 8001bb8:	60fb      	str	r3, [r7, #12]
 8001bba:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001bbc:	2330      	movs	r3, #48	@ 0x30
 8001bbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001bc0:	2303      	movs	r3, #3
 8001bc2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bc8:	f107 0314 	add.w	r3, r7, #20
 8001bcc:	4619      	mov	r1, r3
 8001bce:	4835      	ldr	r0, [pc, #212]	@ (8001ca4 <HAL_DAC_MspInit+0x148>)
 8001bd0:	f006 ffc6 	bl	8008b60 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Stream0;
 8001bd4:	4b34      	ldr	r3, [pc, #208]	@ (8001ca8 <HAL_DAC_MspInit+0x14c>)
 8001bd6:	4a35      	ldr	r2, [pc, #212]	@ (8001cac <HAL_DAC_MspInit+0x150>)
 8001bd8:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 8001bda:	4b33      	ldr	r3, [pc, #204]	@ (8001ca8 <HAL_DAC_MspInit+0x14c>)
 8001bdc:	2243      	movs	r2, #67	@ 0x43
 8001bde:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001be0:	4b31      	ldr	r3, [pc, #196]	@ (8001ca8 <HAL_DAC_MspInit+0x14c>)
 8001be2:	2240      	movs	r2, #64	@ 0x40
 8001be4:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001be6:	4b30      	ldr	r3, [pc, #192]	@ (8001ca8 <HAL_DAC_MspInit+0x14c>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001bec:	4b2e      	ldr	r3, [pc, #184]	@ (8001ca8 <HAL_DAC_MspInit+0x14c>)
 8001bee:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001bf2:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001bf4:	4b2c      	ldr	r3, [pc, #176]	@ (8001ca8 <HAL_DAC_MspInit+0x14c>)
 8001bf6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001bfa:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001bfc:	4b2a      	ldr	r3, [pc, #168]	@ (8001ca8 <HAL_DAC_MspInit+0x14c>)
 8001bfe:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001c02:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8001c04:	4b28      	ldr	r3, [pc, #160]	@ (8001ca8 <HAL_DAC_MspInit+0x14c>)
 8001c06:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001c0a:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001c0c:	4b26      	ldr	r3, [pc, #152]	@ (8001ca8 <HAL_DAC_MspInit+0x14c>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c12:	4b25      	ldr	r3, [pc, #148]	@ (8001ca8 <HAL_DAC_MspInit+0x14c>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8001c18:	4823      	ldr	r0, [pc, #140]	@ (8001ca8 <HAL_DAC_MspInit+0x14c>)
 8001c1a:	f004 fecd 	bl	80069b8 <HAL_DMA_Init>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d001      	beq.n	8001c28 <HAL_DAC_MspInit+0xcc>
    {
      Error_Handler();
 8001c24:	f7ff fe56 	bl	80018d4 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	4a1f      	ldr	r2, [pc, #124]	@ (8001ca8 <HAL_DAC_MspInit+0x14c>)
 8001c2c:	609a      	str	r2, [r3, #8]
 8001c2e:	4a1e      	ldr	r2, [pc, #120]	@ (8001ca8 <HAL_DAC_MspInit+0x14c>)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6393      	str	r3, [r2, #56]	@ 0x38

    /* DAC1_CH2 Init */
    hdma_dac1_ch2.Instance = DMA1_Stream1;
 8001c34:	4b1e      	ldr	r3, [pc, #120]	@ (8001cb0 <HAL_DAC_MspInit+0x154>)
 8001c36:	4a1f      	ldr	r2, [pc, #124]	@ (8001cb4 <HAL_DAC_MspInit+0x158>)
 8001c38:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch2.Init.Request = DMA_REQUEST_DAC2;
 8001c3a:	4b1d      	ldr	r3, [pc, #116]	@ (8001cb0 <HAL_DAC_MspInit+0x154>)
 8001c3c:	2244      	movs	r2, #68	@ 0x44
 8001c3e:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001c40:	4b1b      	ldr	r3, [pc, #108]	@ (8001cb0 <HAL_DAC_MspInit+0x154>)
 8001c42:	2240      	movs	r2, #64	@ 0x40
 8001c44:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c46:	4b1a      	ldr	r3, [pc, #104]	@ (8001cb0 <HAL_DAC_MspInit+0x154>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8001c4c:	4b18      	ldr	r3, [pc, #96]	@ (8001cb0 <HAL_DAC_MspInit+0x154>)
 8001c4e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001c52:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001c54:	4b16      	ldr	r3, [pc, #88]	@ (8001cb0 <HAL_DAC_MspInit+0x154>)
 8001c56:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001c5a:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001c5c:	4b14      	ldr	r3, [pc, #80]	@ (8001cb0 <HAL_DAC_MspInit+0x154>)
 8001c5e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001c62:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch2.Init.Mode = DMA_CIRCULAR;
 8001c64:	4b12      	ldr	r3, [pc, #72]	@ (8001cb0 <HAL_DAC_MspInit+0x154>)
 8001c66:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001c6a:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8001c6c:	4b10      	ldr	r3, [pc, #64]	@ (8001cb0 <HAL_DAC_MspInit+0x154>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c72:	4b0f      	ldr	r3, [pc, #60]	@ (8001cb0 <HAL_DAC_MspInit+0x154>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch2) != HAL_OK)
 8001c78:	480d      	ldr	r0, [pc, #52]	@ (8001cb0 <HAL_DAC_MspInit+0x154>)
 8001c7a:	f004 fe9d 	bl	80069b8 <HAL_DMA_Init>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d001      	beq.n	8001c88 <HAL_DAC_MspInit+0x12c>
    {
      Error_Handler();
 8001c84:	f7ff fe26 	bl	80018d4 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle2,hdma_dac1_ch2);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	4a09      	ldr	r2, [pc, #36]	@ (8001cb0 <HAL_DAC_MspInit+0x154>)
 8001c8c:	60da      	str	r2, [r3, #12]
 8001c8e:	4a08      	ldr	r2, [pc, #32]	@ (8001cb0 <HAL_DAC_MspInit+0x154>)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END DAC1_MspInit 1 */

  }

}
 8001c94:	bf00      	nop
 8001c96:	3728      	adds	r7, #40	@ 0x28
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	40007400 	.word	0x40007400
 8001ca0:	58024400 	.word	0x58024400
 8001ca4:	58020000 	.word	0x58020000
 8001ca8:	240003dc 	.word	0x240003dc
 8001cac:	40020010 	.word	0x40020010
 8001cb0:	24000454 	.word	0x24000454
 8001cb4:	40020028 	.word	0x40020028

08001cb8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b0b8      	sub	sp, #224	@ 0xe0
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cc0:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	601a      	str	r2, [r3, #0]
 8001cc8:	605a      	str	r2, [r3, #4]
 8001cca:	609a      	str	r2, [r3, #8]
 8001ccc:	60da      	str	r2, [r3, #12]
 8001cce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001cd0:	f107 0310 	add.w	r3, r7, #16
 8001cd4:	22b8      	movs	r2, #184	@ 0xb8
 8001cd6:	2100      	movs	r1, #0
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f014 fada 	bl	8016292 <memset>
  if(hi2c->Instance==I2C2)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4a27      	ldr	r2, [pc, #156]	@ (8001d80 <HAL_I2C_MspInit+0xc8>)
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d146      	bne.n	8001d76 <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001ce8:	f04f 0208 	mov.w	r2, #8
 8001cec:	f04f 0300 	mov.w	r3, #0
 8001cf0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001cfa:	f107 0310 	add.w	r3, r7, #16
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f009 fc8a 	bl	800b618 <HAL_RCCEx_PeriphCLKConfig>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d001      	beq.n	8001d0e <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8001d0a:	f7ff fde3 	bl	80018d4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d0e:	4b1d      	ldr	r3, [pc, #116]	@ (8001d84 <HAL_I2C_MspInit+0xcc>)
 8001d10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d14:	4a1b      	ldr	r2, [pc, #108]	@ (8001d84 <HAL_I2C_MspInit+0xcc>)
 8001d16:	f043 0302 	orr.w	r3, r3, #2
 8001d1a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001d1e:	4b19      	ldr	r3, [pc, #100]	@ (8001d84 <HAL_I2C_MspInit+0xcc>)
 8001d20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d24:	f003 0302 	and.w	r3, r3, #2
 8001d28:	60fb      	str	r3, [r7, #12]
 8001d2a:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001d2c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001d30:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d34:	2312      	movs	r3, #18
 8001d36:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d40:	2300      	movs	r3, #0
 8001d42:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001d46:	2304      	movs	r3, #4
 8001d48:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d4c:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8001d50:	4619      	mov	r1, r3
 8001d52:	480d      	ldr	r0, [pc, #52]	@ (8001d88 <HAL_I2C_MspInit+0xd0>)
 8001d54:	f006 ff04 	bl	8008b60 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001d58:	4b0a      	ldr	r3, [pc, #40]	@ (8001d84 <HAL_I2C_MspInit+0xcc>)
 8001d5a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001d5e:	4a09      	ldr	r2, [pc, #36]	@ (8001d84 <HAL_I2C_MspInit+0xcc>)
 8001d60:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001d64:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001d68:	4b06      	ldr	r3, [pc, #24]	@ (8001d84 <HAL_I2C_MspInit+0xcc>)
 8001d6a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001d6e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d72:	60bb      	str	r3, [r7, #8]
 8001d74:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 8001d76:	bf00      	nop
 8001d78:	37e0      	adds	r7, #224	@ 0xe0
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	40005800 	.word	0x40005800
 8001d84:	58024400 	.word	0x58024400
 8001d88:	58020400 	.word	0x58020400

08001d8c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b0bc      	sub	sp, #240	@ 0xf0
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d94:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001d98:	2200      	movs	r2, #0
 8001d9a:	601a      	str	r2, [r3, #0]
 8001d9c:	605a      	str	r2, [r3, #4]
 8001d9e:	609a      	str	r2, [r3, #8]
 8001da0:	60da      	str	r2, [r3, #12]
 8001da2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001da4:	f107 0320 	add.w	r3, r7, #32
 8001da8:	22b8      	movs	r2, #184	@ 0xb8
 8001daa:	2100      	movs	r1, #0
 8001dac:	4618      	mov	r0, r3
 8001dae:	f014 fa70 	bl	8016292 <memset>
  if(hspi->Instance==SPI2)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a72      	ldr	r2, [pc, #456]	@ (8001f80 <HAL_SPI_MspInit+0x1f4>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d146      	bne.n	8001e4a <HAL_SPI_MspInit+0xbe>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8001dbc:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001dc0:	f04f 0300 	mov.w	r3, #0
 8001dc4:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001dcc:	f107 0320 	add.w	r3, r7, #32
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f009 fc21 	bl	800b618 <HAL_RCCEx_PeriphCLKConfig>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d001      	beq.n	8001de0 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8001ddc:	f7ff fd7a 	bl	80018d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001de0:	4b68      	ldr	r3, [pc, #416]	@ (8001f84 <HAL_SPI_MspInit+0x1f8>)
 8001de2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001de6:	4a67      	ldr	r2, [pc, #412]	@ (8001f84 <HAL_SPI_MspInit+0x1f8>)
 8001de8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001dec:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001df0:	4b64      	ldr	r3, [pc, #400]	@ (8001f84 <HAL_SPI_MspInit+0x1f8>)
 8001df2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001df6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001dfa:	61fb      	str	r3, [r7, #28]
 8001dfc:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dfe:	4b61      	ldr	r3, [pc, #388]	@ (8001f84 <HAL_SPI_MspInit+0x1f8>)
 8001e00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e04:	4a5f      	ldr	r2, [pc, #380]	@ (8001f84 <HAL_SPI_MspInit+0x1f8>)
 8001e06:	f043 0302 	orr.w	r3, r3, #2
 8001e0a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e0e:	4b5d      	ldr	r3, [pc, #372]	@ (8001f84 <HAL_SPI_MspInit+0x1f8>)
 8001e10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e14:	f003 0302 	and.w	r3, r3, #2
 8001e18:	61bb      	str	r3, [r7, #24]
 8001e1a:	69bb      	ldr	r3, [r7, #24]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = ACCEL_SCK1_Pin|ACCEL_MISO1_Pin|ACCEL_MOSI1_Pin;
 8001e1c:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8001e20:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e24:	2302      	movs	r3, #2
 8001e26:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e30:	2300      	movs	r3, #0
 8001e32:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001e36:	2305      	movs	r3, #5
 8001e38:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e3c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001e40:	4619      	mov	r1, r3
 8001e42:	4851      	ldr	r0, [pc, #324]	@ (8001f88 <HAL_SPI_MspInit+0x1fc>)
 8001e44:	f006 fe8c 	bl	8008b60 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 8001e48:	e096      	b.n	8001f78 <HAL_SPI_MspInit+0x1ec>
  else if(hspi->Instance==SPI3)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a4f      	ldr	r2, [pc, #316]	@ (8001f8c <HAL_SPI_MspInit+0x200>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d146      	bne.n	8001ee2 <HAL_SPI_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8001e54:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001e58:	f04f 0300 	mov.w	r3, #0
 8001e5c:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001e60:	2300      	movs	r3, #0
 8001e62:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e64:	f107 0320 	add.w	r3, r7, #32
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f009 fbd5 	bl	800b618 <HAL_RCCEx_PeriphCLKConfig>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d001      	beq.n	8001e78 <HAL_SPI_MspInit+0xec>
      Error_Handler();
 8001e74:	f7ff fd2e 	bl	80018d4 <Error_Handler>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001e78:	4b42      	ldr	r3, [pc, #264]	@ (8001f84 <HAL_SPI_MspInit+0x1f8>)
 8001e7a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001e7e:	4a41      	ldr	r2, [pc, #260]	@ (8001f84 <HAL_SPI_MspInit+0x1f8>)
 8001e80:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001e84:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001e88:	4b3e      	ldr	r3, [pc, #248]	@ (8001f84 <HAL_SPI_MspInit+0x1f8>)
 8001e8a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001e8e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001e92:	617b      	str	r3, [r7, #20]
 8001e94:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e96:	4b3b      	ldr	r3, [pc, #236]	@ (8001f84 <HAL_SPI_MspInit+0x1f8>)
 8001e98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e9c:	4a39      	ldr	r2, [pc, #228]	@ (8001f84 <HAL_SPI_MspInit+0x1f8>)
 8001e9e:	f043 0304 	orr.w	r3, r3, #4
 8001ea2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001ea6:	4b37      	ldr	r3, [pc, #220]	@ (8001f84 <HAL_SPI_MspInit+0x1f8>)
 8001ea8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001eac:	f003 0304 	and.w	r3, r3, #4
 8001eb0:	613b      	str	r3, [r7, #16]
 8001eb2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001eb4:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001eb8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ebc:	2302      	movs	r3, #2
 8001ebe:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001ece:	2306      	movs	r3, #6
 8001ed0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ed4:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001ed8:	4619      	mov	r1, r3
 8001eda:	482d      	ldr	r0, [pc, #180]	@ (8001f90 <HAL_SPI_MspInit+0x204>)
 8001edc:	f006 fe40 	bl	8008b60 <HAL_GPIO_Init>
}
 8001ee0:	e04a      	b.n	8001f78 <HAL_SPI_MspInit+0x1ec>
  else if(hspi->Instance==SPI4)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a2b      	ldr	r2, [pc, #172]	@ (8001f94 <HAL_SPI_MspInit+0x208>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d145      	bne.n	8001f78 <HAL_SPI_MspInit+0x1ec>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 8001eec:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001ef0:	f04f 0300 	mov.w	r3, #0
 8001ef4:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001efe:	f107 0320 	add.w	r3, r7, #32
 8001f02:	4618      	mov	r0, r3
 8001f04:	f009 fb88 	bl	800b618 <HAL_RCCEx_PeriphCLKConfig>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d001      	beq.n	8001f12 <HAL_SPI_MspInit+0x186>
      Error_Handler();
 8001f0e:	f7ff fce1 	bl	80018d4 <Error_Handler>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8001f12:	4b1c      	ldr	r3, [pc, #112]	@ (8001f84 <HAL_SPI_MspInit+0x1f8>)
 8001f14:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001f18:	4a1a      	ldr	r2, [pc, #104]	@ (8001f84 <HAL_SPI_MspInit+0x1f8>)
 8001f1a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001f1e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001f22:	4b18      	ldr	r3, [pc, #96]	@ (8001f84 <HAL_SPI_MspInit+0x1f8>)
 8001f24:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001f28:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001f2c:	60fb      	str	r3, [r7, #12]
 8001f2e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001f30:	4b14      	ldr	r3, [pc, #80]	@ (8001f84 <HAL_SPI_MspInit+0x1f8>)
 8001f32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f36:	4a13      	ldr	r2, [pc, #76]	@ (8001f84 <HAL_SPI_MspInit+0x1f8>)
 8001f38:	f043 0310 	orr.w	r3, r3, #16
 8001f3c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001f40:	4b10      	ldr	r3, [pc, #64]	@ (8001f84 <HAL_SPI_MspInit+0x1f8>)
 8001f42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f46:	f003 0310 	and.w	r3, r3, #16
 8001f4a:	60bb      	str	r3, [r7, #8]
 8001f4c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8001f4e:	2364      	movs	r3, #100	@ 0x64
 8001f50:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f54:	2302      	movs	r3, #2
 8001f56:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f60:	2300      	movs	r3, #0
 8001f62:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8001f66:	2305      	movs	r3, #5
 8001f68:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f6c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001f70:	4619      	mov	r1, r3
 8001f72:	4809      	ldr	r0, [pc, #36]	@ (8001f98 <HAL_SPI_MspInit+0x20c>)
 8001f74:	f006 fdf4 	bl	8008b60 <HAL_GPIO_Init>
}
 8001f78:	bf00      	nop
 8001f7a:	37f0      	adds	r7, #240	@ 0xf0
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}
 8001f80:	40003800 	.word	0x40003800
 8001f84:	58024400 	.word	0x58024400
 8001f88:	58020400 	.word	0x58020400
 8001f8c:	40003c00 	.word	0x40003c00
 8001f90:	58020800 	.word	0x58020800
 8001f94:	40013400 	.word	0x40013400
 8001f98:	58021000 	.word	0x58021000

08001f9c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b086      	sub	sp, #24
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a2e      	ldr	r2, [pc, #184]	@ (8002064 <HAL_TIM_Base_MspInit+0xc8>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d10f      	bne.n	8001fce <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001fae:	4b2e      	ldr	r3, [pc, #184]	@ (8002068 <HAL_TIM_Base_MspInit+0xcc>)
 8001fb0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001fb4:	4a2c      	ldr	r2, [pc, #176]	@ (8002068 <HAL_TIM_Base_MspInit+0xcc>)
 8001fb6:	f043 0301 	orr.w	r3, r3, #1
 8001fba:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001fbe:	4b2a      	ldr	r3, [pc, #168]	@ (8002068 <HAL_TIM_Base_MspInit+0xcc>)
 8001fc0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001fc4:	f003 0301 	and.w	r3, r3, #1
 8001fc8:	617b      	str	r3, [r7, #20]
 8001fca:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001fcc:	e045      	b.n	800205a <HAL_TIM_Base_MspInit+0xbe>
  else if(htim_base->Instance==TIM2)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001fd6:	d10f      	bne.n	8001ff8 <HAL_TIM_Base_MspInit+0x5c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001fd8:	4b23      	ldr	r3, [pc, #140]	@ (8002068 <HAL_TIM_Base_MspInit+0xcc>)
 8001fda:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001fde:	4a22      	ldr	r2, [pc, #136]	@ (8002068 <HAL_TIM_Base_MspInit+0xcc>)
 8001fe0:	f043 0301 	orr.w	r3, r3, #1
 8001fe4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001fe8:	4b1f      	ldr	r3, [pc, #124]	@ (8002068 <HAL_TIM_Base_MspInit+0xcc>)
 8001fea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001fee:	f003 0301 	and.w	r3, r3, #1
 8001ff2:	613b      	str	r3, [r7, #16]
 8001ff4:	693b      	ldr	r3, [r7, #16]
}
 8001ff6:	e030      	b.n	800205a <HAL_TIM_Base_MspInit+0xbe>
  else if(htim_base->Instance==TIM3)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a1b      	ldr	r2, [pc, #108]	@ (800206c <HAL_TIM_Base_MspInit+0xd0>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d117      	bne.n	8002032 <HAL_TIM_Base_MspInit+0x96>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002002:	4b19      	ldr	r3, [pc, #100]	@ (8002068 <HAL_TIM_Base_MspInit+0xcc>)
 8002004:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002008:	4a17      	ldr	r2, [pc, #92]	@ (8002068 <HAL_TIM_Base_MspInit+0xcc>)
 800200a:	f043 0302 	orr.w	r3, r3, #2
 800200e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002012:	4b15      	ldr	r3, [pc, #84]	@ (8002068 <HAL_TIM_Base_MspInit+0xcc>)
 8002014:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002018:	f003 0302 	and.w	r3, r3, #2
 800201c:	60fb      	str	r3, [r7, #12]
 800201e:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002020:	2200      	movs	r2, #0
 8002022:	2100      	movs	r1, #0
 8002024:	201d      	movs	r0, #29
 8002026:	f004 f962 	bl	80062ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800202a:	201d      	movs	r0, #29
 800202c:	f004 f979 	bl	8006322 <HAL_NVIC_EnableIRQ>
}
 8002030:	e013      	b.n	800205a <HAL_TIM_Base_MspInit+0xbe>
  else if(htim_base->Instance==TIM4)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4a0e      	ldr	r2, [pc, #56]	@ (8002070 <HAL_TIM_Base_MspInit+0xd4>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d10e      	bne.n	800205a <HAL_TIM_Base_MspInit+0xbe>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800203c:	4b0a      	ldr	r3, [pc, #40]	@ (8002068 <HAL_TIM_Base_MspInit+0xcc>)
 800203e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002042:	4a09      	ldr	r2, [pc, #36]	@ (8002068 <HAL_TIM_Base_MspInit+0xcc>)
 8002044:	f043 0304 	orr.w	r3, r3, #4
 8002048:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800204c:	4b06      	ldr	r3, [pc, #24]	@ (8002068 <HAL_TIM_Base_MspInit+0xcc>)
 800204e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002052:	f003 0304 	and.w	r3, r3, #4
 8002056:	60bb      	str	r3, [r7, #8]
 8002058:	68bb      	ldr	r3, [r7, #8]
}
 800205a:	bf00      	nop
 800205c:	3718      	adds	r7, #24
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	40010000 	.word	0x40010000
 8002068:	58024400 	.word	0x58024400
 800206c:	40000400 	.word	0x40000400
 8002070:	40000800 	.word	0x40000800

08002074 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b08a      	sub	sp, #40	@ 0x28
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800207c:	f107 0314 	add.w	r3, r7, #20
 8002080:	2200      	movs	r2, #0
 8002082:	601a      	str	r2, [r3, #0]
 8002084:	605a      	str	r2, [r3, #4]
 8002086:	609a      	str	r2, [r3, #8]
 8002088:	60da      	str	r2, [r3, #12]
 800208a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a26      	ldr	r2, [pc, #152]	@ (800212c <HAL_TIM_MspPostInit+0xb8>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d120      	bne.n	80020d8 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002096:	4b26      	ldr	r3, [pc, #152]	@ (8002130 <HAL_TIM_MspPostInit+0xbc>)
 8002098:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800209c:	4a24      	ldr	r2, [pc, #144]	@ (8002130 <HAL_TIM_MspPostInit+0xbc>)
 800209e:	f043 0304 	orr.w	r3, r3, #4
 80020a2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80020a6:	4b22      	ldr	r3, [pc, #136]	@ (8002130 <HAL_TIM_MspPostInit+0xbc>)
 80020a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020ac:	f003 0304 	and.w	r3, r3, #4
 80020b0:	613b      	str	r3, [r7, #16]
 80020b2:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = LED_STROBE_1_Pin|LED_STROBE_2_Pin|LED_STROBE_3_Pin;
 80020b4:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 80020b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ba:	2302      	movs	r3, #2
 80020bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020be:	2300      	movs	r3, #0
 80020c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020c2:	2300      	movs	r3, #0
 80020c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80020c6:	2302      	movs	r3, #2
 80020c8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020ca:	f107 0314 	add.w	r3, r7, #20
 80020ce:	4619      	mov	r1, r3
 80020d0:	4818      	ldr	r0, [pc, #96]	@ (8002134 <HAL_TIM_MspPostInit+0xc0>)
 80020d2:	f006 fd45 	bl	8008b60 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80020d6:	e024      	b.n	8002122 <HAL_TIM_MspPostInit+0xae>
  else if(htim->Instance==TIM4)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a16      	ldr	r2, [pc, #88]	@ (8002138 <HAL_TIM_MspPostInit+0xc4>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d11f      	bne.n	8002122 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80020e2:	4b13      	ldr	r3, [pc, #76]	@ (8002130 <HAL_TIM_MspPostInit+0xbc>)
 80020e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020e8:	4a11      	ldr	r2, [pc, #68]	@ (8002130 <HAL_TIM_MspPostInit+0xbc>)
 80020ea:	f043 0308 	orr.w	r3, r3, #8
 80020ee:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80020f2:	4b0f      	ldr	r3, [pc, #60]	@ (8002130 <HAL_TIM_MspPostInit+0xbc>)
 80020f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020f8:	f003 0308 	and.w	r3, r3, #8
 80020fc:	60fb      	str	r3, [r7, #12]
 80020fe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LED_ACCEL_Pin;
 8002100:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002104:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002106:	2302      	movs	r3, #2
 8002108:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800210a:	2300      	movs	r3, #0
 800210c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800210e:	2300      	movs	r3, #0
 8002110:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002112:	2302      	movs	r3, #2
 8002114:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(LED_ACCEL_GPIO_Port, &GPIO_InitStruct);
 8002116:	f107 0314 	add.w	r3, r7, #20
 800211a:	4619      	mov	r1, r3
 800211c:	4807      	ldr	r0, [pc, #28]	@ (800213c <HAL_TIM_MspPostInit+0xc8>)
 800211e:	f006 fd1f 	bl	8008b60 <HAL_GPIO_Init>
}
 8002122:	bf00      	nop
 8002124:	3728      	adds	r7, #40	@ 0x28
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop
 800212c:	40000400 	.word	0x40000400
 8002130:	58024400 	.word	0x58024400
 8002134:	58020800 	.word	0x58020800
 8002138:	40000800 	.word	0x40000800
 800213c:	58020c00 	.word	0x58020c00

08002140 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b0ba      	sub	sp, #232	@ 0xe8
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002148:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800214c:	2200      	movs	r2, #0
 800214e:	601a      	str	r2, [r3, #0]
 8002150:	605a      	str	r2, [r3, #4]
 8002152:	609a      	str	r2, [r3, #8]
 8002154:	60da      	str	r2, [r3, #12]
 8002156:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002158:	f107 0318 	add.w	r3, r7, #24
 800215c:	22b8      	movs	r2, #184	@ 0xb8
 800215e:	2100      	movs	r1, #0
 8002160:	4618      	mov	r0, r3
 8002162:	f014 f896 	bl	8016292 <memset>
  if(huart->Instance==UART7)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a4d      	ldr	r2, [pc, #308]	@ (80022a0 <HAL_UART_MspInit+0x160>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d147      	bne.n	8002200 <HAL_UART_MspInit+0xc0>

  /* USER CODE END UART7_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8002170:	f04f 0202 	mov.w	r2, #2
 8002174:	f04f 0300 	mov.w	r3, #0
 8002178:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800217c:	2300      	movs	r3, #0
 800217e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002182:	f107 0318 	add.w	r3, r7, #24
 8002186:	4618      	mov	r0, r3
 8002188:	f009 fa46 	bl	800b618 <HAL_RCCEx_PeriphCLKConfig>
 800218c:	4603      	mov	r3, r0
 800218e:	2b00      	cmp	r3, #0
 8002190:	d001      	beq.n	8002196 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8002192:	f7ff fb9f 	bl	80018d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8002196:	4b43      	ldr	r3, [pc, #268]	@ (80022a4 <HAL_UART_MspInit+0x164>)
 8002198:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800219c:	4a41      	ldr	r2, [pc, #260]	@ (80022a4 <HAL_UART_MspInit+0x164>)
 800219e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80021a2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80021a6:	4b3f      	ldr	r3, [pc, #252]	@ (80022a4 <HAL_UART_MspInit+0x164>)
 80021a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80021ac:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80021b0:	617b      	str	r3, [r7, #20]
 80021b2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80021b4:	4b3b      	ldr	r3, [pc, #236]	@ (80022a4 <HAL_UART_MspInit+0x164>)
 80021b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80021ba:	4a3a      	ldr	r2, [pc, #232]	@ (80022a4 <HAL_UART_MspInit+0x164>)
 80021bc:	f043 0310 	orr.w	r3, r3, #16
 80021c0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80021c4:	4b37      	ldr	r3, [pc, #220]	@ (80022a4 <HAL_UART_MspInit+0x164>)
 80021c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80021ca:	f003 0310 	and.w	r3, r3, #16
 80021ce:	613b      	str	r3, [r7, #16]
 80021d0:	693b      	ldr	r3, [r7, #16]
    PE7     ------> UART7_RX
    PE8     ------> UART7_TX
    PE9     ------> UART7_RTS
    PE10     ------> UART7_CTS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 80021d2:	f44f 63f0 	mov.w	r3, #1920	@ 0x780
 80021d6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021da:	2302      	movs	r3, #2
 80021dc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e0:	2300      	movs	r3, #0
 80021e2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021e6:	2300      	movs	r3, #0
 80021e8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 80021ec:	2307      	movs	r3, #7
 80021ee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80021f2:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80021f6:	4619      	mov	r1, r3
 80021f8:	482b      	ldr	r0, [pc, #172]	@ (80022a8 <HAL_UART_MspInit+0x168>)
 80021fa:	f006 fcb1 	bl	8008b60 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80021fe:	e04a      	b.n	8002296 <HAL_UART_MspInit+0x156>
  else if(huart->Instance==USART1)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a29      	ldr	r2, [pc, #164]	@ (80022ac <HAL_UART_MspInit+0x16c>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d145      	bne.n	8002296 <HAL_UART_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800220a:	f04f 0201 	mov.w	r2, #1
 800220e:	f04f 0300 	mov.w	r3, #0
 8002212:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8002216:	2300      	movs	r3, #0
 8002218:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800221c:	f107 0318 	add.w	r3, r7, #24
 8002220:	4618      	mov	r0, r3
 8002222:	f009 f9f9 	bl	800b618 <HAL_RCCEx_PeriphCLKConfig>
 8002226:	4603      	mov	r3, r0
 8002228:	2b00      	cmp	r3, #0
 800222a:	d001      	beq.n	8002230 <HAL_UART_MspInit+0xf0>
      Error_Handler();
 800222c:	f7ff fb52 	bl	80018d4 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002230:	4b1c      	ldr	r3, [pc, #112]	@ (80022a4 <HAL_UART_MspInit+0x164>)
 8002232:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002236:	4a1b      	ldr	r2, [pc, #108]	@ (80022a4 <HAL_UART_MspInit+0x164>)
 8002238:	f043 0310 	orr.w	r3, r3, #16
 800223c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002240:	4b18      	ldr	r3, [pc, #96]	@ (80022a4 <HAL_UART_MspInit+0x164>)
 8002242:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002246:	f003 0310 	and.w	r3, r3, #16
 800224a:	60fb      	str	r3, [r7, #12]
 800224c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800224e:	4b15      	ldr	r3, [pc, #84]	@ (80022a4 <HAL_UART_MspInit+0x164>)
 8002250:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002254:	4a13      	ldr	r2, [pc, #76]	@ (80022a4 <HAL_UART_MspInit+0x164>)
 8002256:	f043 0302 	orr.w	r3, r3, #2
 800225a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800225e:	4b11      	ldr	r3, [pc, #68]	@ (80022a4 <HAL_UART_MspInit+0x164>)
 8002260:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002264:	f003 0302 	and.w	r3, r3, #2
 8002268:	60bb      	str	r3, [r7, #8]
 800226a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 800226c:	23c0      	movs	r3, #192	@ 0xc0
 800226e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002272:	2302      	movs	r3, #2
 8002274:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002278:	2300      	movs	r3, #0
 800227a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800227e:	2300      	movs	r3, #0
 8002280:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002284:	2307      	movs	r3, #7
 8002286:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800228a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800228e:	4619      	mov	r1, r3
 8002290:	4807      	ldr	r0, [pc, #28]	@ (80022b0 <HAL_UART_MspInit+0x170>)
 8002292:	f006 fc65 	bl	8008b60 <HAL_GPIO_Init>
}
 8002296:	bf00      	nop
 8002298:	37e8      	adds	r7, #232	@ 0xe8
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}
 800229e:	bf00      	nop
 80022a0:	40007800 	.word	0x40007800
 80022a4:	58024400 	.word	0x58024400
 80022a8:	58021000 	.word	0x58021000
 80022ac:	40011000 	.word	0x40011000
 80022b0:	58020400 	.word	0x58020400

080022b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022b4:	b480      	push	{r7}
 80022b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80022b8:	bf00      	nop
 80022ba:	e7fd      	b.n	80022b8 <NMI_Handler+0x4>

080022bc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022bc:	b480      	push	{r7}
 80022be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022c0:	bf00      	nop
 80022c2:	e7fd      	b.n	80022c0 <HardFault_Handler+0x4>

080022c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022c4:	b480      	push	{r7}
 80022c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022c8:	bf00      	nop
 80022ca:	e7fd      	b.n	80022c8 <MemManage_Handler+0x4>

080022cc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022cc:	b480      	push	{r7}
 80022ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022d0:	bf00      	nop
 80022d2:	e7fd      	b.n	80022d0 <BusFault_Handler+0x4>

080022d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022d4:	b480      	push	{r7}
 80022d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022d8:	bf00      	nop
 80022da:	e7fd      	b.n	80022d8 <UsageFault_Handler+0x4>

080022dc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80022dc:	b480      	push	{r7}
 80022de:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80022e0:	bf00      	nop
 80022e2:	46bd      	mov	sp, r7
 80022e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e8:	4770      	bx	lr

080022ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022ea:	b480      	push	{r7}
 80022ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022ee:	bf00      	nop
 80022f0:	46bd      	mov	sp, r7
 80022f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f6:	4770      	bx	lr

080022f8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80022f8:	b480      	push	{r7}
 80022fa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80022fc:	bf00      	nop
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr

08002306 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002306:	b580      	push	{r7, lr}
 8002308:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800230a:	f002 fb5d 	bl	80049c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800230e:	bf00      	nop
 8002310:	bd80      	pop	{r7, pc}
	...

08002314 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8002318:	4802      	ldr	r0, [pc, #8]	@ (8002324 <DMA1_Stream0_IRQHandler+0x10>)
 800231a:	f005 f90f 	bl	800753c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800231e:	bf00      	nop
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop
 8002324:	240003dc 	.word	0x240003dc

08002328 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch2);
 800232c:	4802      	ldr	r0, [pc, #8]	@ (8002338 <DMA1_Stream1_IRQHandler+0x10>)
 800232e:	f005 f905 	bl	800753c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002332:	bf00      	nop
 8002334:	bd80      	pop	{r7, pc}
 8002336:	bf00      	nop
 8002338:	24000454 	.word	0x24000454

0800233c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002340:	4802      	ldr	r0, [pc, #8]	@ (800234c <TIM3_IRQHandler+0x10>)
 8002342:	f00c f9fd 	bl	800e740 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002346:	bf00      	nop
 8002348:	bd80      	pop	{r7, pc}
 800234a:	bf00      	nop
 800234c:	24000750 	.word	0x24000750

08002350 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8002354:	4802      	ldr	r0, [pc, #8]	@ (8002360 <OTG_HS_IRQHandler+0x10>)
 8002356:	f007 f851 	bl	80093fc <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 800235a:	bf00      	nop
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	2400542c 	.word	0x2400542c

08002364 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002364:	b480      	push	{r7}
 8002366:	af00      	add	r7, sp, #0
  return 1;
 8002368:	2301      	movs	r3, #1
}
 800236a:	4618      	mov	r0, r3
 800236c:	46bd      	mov	sp, r7
 800236e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002372:	4770      	bx	lr

08002374 <_kill>:

int _kill(int pid, int sig)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b082      	sub	sp, #8
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
 800237c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800237e:	f013 fff9 	bl	8016374 <__errno>
 8002382:	4603      	mov	r3, r0
 8002384:	2216      	movs	r2, #22
 8002386:	601a      	str	r2, [r3, #0]
  return -1;
 8002388:	f04f 33ff 	mov.w	r3, #4294967295
}
 800238c:	4618      	mov	r0, r3
 800238e:	3708      	adds	r7, #8
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}

08002394 <_exit>:

void _exit (int status)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b082      	sub	sp, #8
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800239c:	f04f 31ff 	mov.w	r1, #4294967295
 80023a0:	6878      	ldr	r0, [r7, #4]
 80023a2:	f7ff ffe7 	bl	8002374 <_kill>
  while (1) {}    /* Make sure we hang here */
 80023a6:	bf00      	nop
 80023a8:	e7fd      	b.n	80023a6 <_exit+0x12>

080023aa <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80023aa:	b580      	push	{r7, lr}
 80023ac:	b086      	sub	sp, #24
 80023ae:	af00      	add	r7, sp, #0
 80023b0:	60f8      	str	r0, [r7, #12]
 80023b2:	60b9      	str	r1, [r7, #8]
 80023b4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023b6:	2300      	movs	r3, #0
 80023b8:	617b      	str	r3, [r7, #20]
 80023ba:	e00a      	b.n	80023d2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80023bc:	f3af 8000 	nop.w
 80023c0:	4601      	mov	r1, r0
 80023c2:	68bb      	ldr	r3, [r7, #8]
 80023c4:	1c5a      	adds	r2, r3, #1
 80023c6:	60ba      	str	r2, [r7, #8]
 80023c8:	b2ca      	uxtb	r2, r1
 80023ca:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	3301      	adds	r3, #1
 80023d0:	617b      	str	r3, [r7, #20]
 80023d2:	697a      	ldr	r2, [r7, #20]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	429a      	cmp	r2, r3
 80023d8:	dbf0      	blt.n	80023bc <_read+0x12>
  }

  return len;
 80023da:	687b      	ldr	r3, [r7, #4]
}
 80023dc:	4618      	mov	r0, r3
 80023de:	3718      	adds	r7, #24
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}

080023e4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b086      	sub	sp, #24
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	60f8      	str	r0, [r7, #12]
 80023ec:	60b9      	str	r1, [r7, #8]
 80023ee:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023f0:	2300      	movs	r3, #0
 80023f2:	617b      	str	r3, [r7, #20]
 80023f4:	e009      	b.n	800240a <_write+0x26>
  {
    __io_putchar(*ptr++);
 80023f6:	68bb      	ldr	r3, [r7, #8]
 80023f8:	1c5a      	adds	r2, r3, #1
 80023fa:	60ba      	str	r2, [r7, #8]
 80023fc:	781b      	ldrb	r3, [r3, #0]
 80023fe:	4618      	mov	r0, r3
 8002400:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	3301      	adds	r3, #1
 8002408:	617b      	str	r3, [r7, #20]
 800240a:	697a      	ldr	r2, [r7, #20]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	429a      	cmp	r2, r3
 8002410:	dbf1      	blt.n	80023f6 <_write+0x12>
  }
  return len;
 8002412:	687b      	ldr	r3, [r7, #4]
}
 8002414:	4618      	mov	r0, r3
 8002416:	3718      	adds	r7, #24
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}

0800241c <_close>:

int _close(int file)
{
 800241c:	b480      	push	{r7}
 800241e:	b083      	sub	sp, #12
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002424:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002428:	4618      	mov	r0, r3
 800242a:	370c      	adds	r7, #12
 800242c:	46bd      	mov	sp, r7
 800242e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002432:	4770      	bx	lr

08002434 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002434:	b480      	push	{r7}
 8002436:	b083      	sub	sp, #12
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
 800243c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002444:	605a      	str	r2, [r3, #4]
  return 0;
 8002446:	2300      	movs	r3, #0
}
 8002448:	4618      	mov	r0, r3
 800244a:	370c      	adds	r7, #12
 800244c:	46bd      	mov	sp, r7
 800244e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002452:	4770      	bx	lr

08002454 <_isatty>:

int _isatty(int file)
{
 8002454:	b480      	push	{r7}
 8002456:	b083      	sub	sp, #12
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800245c:	2301      	movs	r3, #1
}
 800245e:	4618      	mov	r0, r3
 8002460:	370c      	adds	r7, #12
 8002462:	46bd      	mov	sp, r7
 8002464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002468:	4770      	bx	lr

0800246a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800246a:	b480      	push	{r7}
 800246c:	b085      	sub	sp, #20
 800246e:	af00      	add	r7, sp, #0
 8002470:	60f8      	str	r0, [r7, #12]
 8002472:	60b9      	str	r1, [r7, #8]
 8002474:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002476:	2300      	movs	r3, #0
}
 8002478:	4618      	mov	r0, r3
 800247a:	3714      	adds	r7, #20
 800247c:	46bd      	mov	sp, r7
 800247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002482:	4770      	bx	lr

08002484 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b086      	sub	sp, #24
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800248c:	4a14      	ldr	r2, [pc, #80]	@ (80024e0 <_sbrk+0x5c>)
 800248e:	4b15      	ldr	r3, [pc, #84]	@ (80024e4 <_sbrk+0x60>)
 8002490:	1ad3      	subs	r3, r2, r3
 8002492:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002498:	4b13      	ldr	r3, [pc, #76]	@ (80024e8 <_sbrk+0x64>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d102      	bne.n	80024a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80024a0:	4b11      	ldr	r3, [pc, #68]	@ (80024e8 <_sbrk+0x64>)
 80024a2:	4a12      	ldr	r2, [pc, #72]	@ (80024ec <_sbrk+0x68>)
 80024a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80024a6:	4b10      	ldr	r3, [pc, #64]	@ (80024e8 <_sbrk+0x64>)
 80024a8:	681a      	ldr	r2, [r3, #0]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	4413      	add	r3, r2
 80024ae:	693a      	ldr	r2, [r7, #16]
 80024b0:	429a      	cmp	r2, r3
 80024b2:	d207      	bcs.n	80024c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80024b4:	f013 ff5e 	bl	8016374 <__errno>
 80024b8:	4603      	mov	r3, r0
 80024ba:	220c      	movs	r2, #12
 80024bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80024be:	f04f 33ff 	mov.w	r3, #4294967295
 80024c2:	e009      	b.n	80024d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80024c4:	4b08      	ldr	r3, [pc, #32]	@ (80024e8 <_sbrk+0x64>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80024ca:	4b07      	ldr	r3, [pc, #28]	@ (80024e8 <_sbrk+0x64>)
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	4413      	add	r3, r2
 80024d2:	4a05      	ldr	r2, [pc, #20]	@ (80024e8 <_sbrk+0x64>)
 80024d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80024d6:	68fb      	ldr	r3, [r7, #12]
}
 80024d8:	4618      	mov	r0, r3
 80024da:	3718      	adds	r7, #24
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd80      	pop	{r7, pc}
 80024e0:	24050000 	.word	0x24050000
 80024e4:	00000400 	.word	0x00000400
 80024e8:	24003f44 	.word	0x24003f44
 80024ec:	24005c80 	.word	0x24005c80

080024f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80024f0:	b480      	push	{r7}
 80024f2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80024f4:	4b32      	ldr	r3, [pc, #200]	@ (80025c0 <SystemInit+0xd0>)
 80024f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024fa:	4a31      	ldr	r2, [pc, #196]	@ (80025c0 <SystemInit+0xd0>)
 80024fc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002500:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002504:	4b2f      	ldr	r3, [pc, #188]	@ (80025c4 <SystemInit+0xd4>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f003 030f 	and.w	r3, r3, #15
 800250c:	2b06      	cmp	r3, #6
 800250e:	d807      	bhi.n	8002520 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002510:	4b2c      	ldr	r3, [pc, #176]	@ (80025c4 <SystemInit+0xd4>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f023 030f 	bic.w	r3, r3, #15
 8002518:	4a2a      	ldr	r2, [pc, #168]	@ (80025c4 <SystemInit+0xd4>)
 800251a:	f043 0307 	orr.w	r3, r3, #7
 800251e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002520:	4b29      	ldr	r3, [pc, #164]	@ (80025c8 <SystemInit+0xd8>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a28      	ldr	r2, [pc, #160]	@ (80025c8 <SystemInit+0xd8>)
 8002526:	f043 0301 	orr.w	r3, r3, #1
 800252a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800252c:	4b26      	ldr	r3, [pc, #152]	@ (80025c8 <SystemInit+0xd8>)
 800252e:	2200      	movs	r2, #0
 8002530:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002532:	4b25      	ldr	r3, [pc, #148]	@ (80025c8 <SystemInit+0xd8>)
 8002534:	681a      	ldr	r2, [r3, #0]
 8002536:	4924      	ldr	r1, [pc, #144]	@ (80025c8 <SystemInit+0xd8>)
 8002538:	4b24      	ldr	r3, [pc, #144]	@ (80025cc <SystemInit+0xdc>)
 800253a:	4013      	ands	r3, r2
 800253c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800253e:	4b21      	ldr	r3, [pc, #132]	@ (80025c4 <SystemInit+0xd4>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f003 0308 	and.w	r3, r3, #8
 8002546:	2b00      	cmp	r3, #0
 8002548:	d007      	beq.n	800255a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800254a:	4b1e      	ldr	r3, [pc, #120]	@ (80025c4 <SystemInit+0xd4>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f023 030f 	bic.w	r3, r3, #15
 8002552:	4a1c      	ldr	r2, [pc, #112]	@ (80025c4 <SystemInit+0xd4>)
 8002554:	f043 0307 	orr.w	r3, r3, #7
 8002558:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800255a:	4b1b      	ldr	r3, [pc, #108]	@ (80025c8 <SystemInit+0xd8>)
 800255c:	2200      	movs	r2, #0
 800255e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002560:	4b19      	ldr	r3, [pc, #100]	@ (80025c8 <SystemInit+0xd8>)
 8002562:	2200      	movs	r2, #0
 8002564:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002566:	4b18      	ldr	r3, [pc, #96]	@ (80025c8 <SystemInit+0xd8>)
 8002568:	2200      	movs	r2, #0
 800256a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800256c:	4b16      	ldr	r3, [pc, #88]	@ (80025c8 <SystemInit+0xd8>)
 800256e:	4a18      	ldr	r2, [pc, #96]	@ (80025d0 <SystemInit+0xe0>)
 8002570:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002572:	4b15      	ldr	r3, [pc, #84]	@ (80025c8 <SystemInit+0xd8>)
 8002574:	4a17      	ldr	r2, [pc, #92]	@ (80025d4 <SystemInit+0xe4>)
 8002576:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002578:	4b13      	ldr	r3, [pc, #76]	@ (80025c8 <SystemInit+0xd8>)
 800257a:	4a17      	ldr	r2, [pc, #92]	@ (80025d8 <SystemInit+0xe8>)
 800257c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800257e:	4b12      	ldr	r3, [pc, #72]	@ (80025c8 <SystemInit+0xd8>)
 8002580:	2200      	movs	r2, #0
 8002582:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002584:	4b10      	ldr	r3, [pc, #64]	@ (80025c8 <SystemInit+0xd8>)
 8002586:	4a14      	ldr	r2, [pc, #80]	@ (80025d8 <SystemInit+0xe8>)
 8002588:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800258a:	4b0f      	ldr	r3, [pc, #60]	@ (80025c8 <SystemInit+0xd8>)
 800258c:	2200      	movs	r2, #0
 800258e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002590:	4b0d      	ldr	r3, [pc, #52]	@ (80025c8 <SystemInit+0xd8>)
 8002592:	4a11      	ldr	r2, [pc, #68]	@ (80025d8 <SystemInit+0xe8>)
 8002594:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002596:	4b0c      	ldr	r3, [pc, #48]	@ (80025c8 <SystemInit+0xd8>)
 8002598:	2200      	movs	r2, #0
 800259a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800259c:	4b0a      	ldr	r3, [pc, #40]	@ (80025c8 <SystemInit+0xd8>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a09      	ldr	r2, [pc, #36]	@ (80025c8 <SystemInit+0xd8>)
 80025a2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80025a6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80025a8:	4b07      	ldr	r3, [pc, #28]	@ (80025c8 <SystemInit+0xd8>)
 80025aa:	2200      	movs	r2, #0
 80025ac:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80025ae:	4b0b      	ldr	r3, [pc, #44]	@ (80025dc <SystemInit+0xec>)
 80025b0:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80025b4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80025b6:	bf00      	nop
 80025b8:	46bd      	mov	sp, r7
 80025ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025be:	4770      	bx	lr
 80025c0:	e000ed00 	.word	0xe000ed00
 80025c4:	52002000 	.word	0x52002000
 80025c8:	58024400 	.word	0x58024400
 80025cc:	eaf6ed7f 	.word	0xeaf6ed7f
 80025d0:	02020200 	.word	0x02020200
 80025d4:	01ff0000 	.word	0x01ff0000
 80025d8:	01010280 	.word	0x01010280
 80025dc:	52004000 	.word	0x52004000

080025e0 <VibeCheck_Init>:

void VibeCheck_Init(VibeCheck* vc,
		TIM_HandleTypeDef* htim_strobe,
		TIM_HandleTypeDef* htim_wavegen,
		DAC_HandleTypeDef* hdac_wavegen)
{
 80025e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025e2:	b0cf      	sub	sp, #316	@ 0x13c
 80025e4:	af10      	add	r7, sp, #64	@ 0x40
 80025e6:	60f8      	str	r0, [r7, #12]
 80025e8:	60b9      	str	r1, [r7, #8]
 80025ea:	607a      	str	r2, [r7, #4]
 80025ec:	603b      	str	r3, [r7, #0]
	VibeCheckShell_Init(&vc->shell);  /* the shell is linked to the USB middle-ware in usbd_cdc_if.c */
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	4618      	mov	r0, r3
 80025f2:	f000 faf9 	bl	8002be8 <VibeCheckShell_Init>

	VibeCheckShell_InputHandler strobe_cmd = {
 80025f6:	4a5c      	ldr	r2, [pc, #368]	@ (8002768 <VibeCheck_Init+0x188>)
 80025f8:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 80025fc:	6810      	ldr	r0, [r2, #0]
 80025fe:	6018      	str	r0, [r3, #0]
 8002600:	8891      	ldrh	r1, [r2, #4]
 8002602:	7992      	ldrb	r2, [r2, #6]
 8002604:	8099      	strh	r1, [r3, #4]
 8002606:	719a      	strb	r2, [r3, #6]
 8002608:	f107 03b7 	add.w	r3, r7, #183	@ 0xb7
 800260c:	2239      	movs	r2, #57	@ 0x39
 800260e:	2100      	movs	r1, #0
 8002610:	4618      	mov	r0, r3
 8002612:	f013 fe3e 	bl	8016292 <memset>
 8002616:	4b55      	ldr	r3, [pc, #340]	@ (800276c <VibeCheck_Init+0x18c>)
 8002618:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
			.name = "strobe",
			.execute = VibeCheckStrobeCMD_Execute,
			.obj = &vc->strobe
 800261c:	68fa      	ldr	r2, [r7, #12]
 800261e:	f242 4324 	movw	r3, #9252	@ 0x2424
 8002622:	4413      	add	r3, r2
	VibeCheckShell_InputHandler strobe_cmd = {
 8002624:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
	};

	VibeCheckShell_InputHandler wavegen_cmd = {
 8002628:	4a51      	ldr	r2, [pc, #324]	@ (8002770 <VibeCheck_Init+0x190>)
 800262a:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800262e:	6810      	ldr	r0, [r2, #0]
 8002630:	6851      	ldr	r1, [r2, #4]
 8002632:	c303      	stmia	r3!, {r0, r1}
 8002634:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8002638:	2238      	movs	r2, #56	@ 0x38
 800263a:	2100      	movs	r1, #0
 800263c:	4618      	mov	r0, r3
 800263e:	f013 fe28 	bl	8016292 <memset>
 8002642:	4b4c      	ldr	r3, [pc, #304]	@ (8002774 <VibeCheck_Init+0x194>)
 8002644:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
			.name = "wavegen",
			.execute = VibeCheckWaveGenCMD_Execute,
			.obj = &vc->wavegen
 8002648:	68fa      	ldr	r2, [r7, #12]
 800264a:	f242 4344 	movw	r3, #9284	@ 0x2444
 800264e:	4413      	add	r3, r2
	VibeCheckShell_InputHandler wavegen_cmd = {
 8002650:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
	};

	VibeCheckShell_InputHandler accel_cmd = {
 8002654:	4a48      	ldr	r2, [pc, #288]	@ (8002778 <VibeCheck_Init+0x198>)
 8002656:	f107 0320 	add.w	r3, r7, #32
 800265a:	6810      	ldr	r0, [r2, #0]
 800265c:	6018      	str	r0, [r3, #0]
 800265e:	8892      	ldrh	r2, [r2, #4]
 8002660:	809a      	strh	r2, [r3, #4]
 8002662:	f107 0326 	add.w	r3, r7, #38	@ 0x26
 8002666:	223a      	movs	r2, #58	@ 0x3a
 8002668:	2100      	movs	r1, #0
 800266a:	4618      	mov	r0, r3
 800266c:	f013 fe11 	bl	8016292 <memset>
 8002670:	4b42      	ldr	r3, [pc, #264]	@ (800277c <VibeCheck_Init+0x19c>)
 8002672:	663b      	str	r3, [r7, #96]	@ 0x60
			.name = "accel",
			.execute = VibeCheckAccelCMD_Execute,
			.obj = &vc->accel
 8002674:	68fa      	ldr	r2, [r7, #12]
 8002676:	f243 4390 	movw	r3, #13456	@ 0x3490
 800267a:	4413      	add	r3, r2
	VibeCheckShell_InputHandler accel_cmd = {
 800267c:	667b      	str	r3, [r7, #100]	@ 0x64
	};

	VibeCheckShell_RegisterInputHandler(&vc->shell, strobe_cmd);
 800267e:	68fe      	ldr	r6, [r7, #12]
 8002680:	466d      	mov	r5, sp
 8002682:	f107 04bc 	add.w	r4, r7, #188	@ 0xbc
 8002686:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002688:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800268a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800268c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800268e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002690:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002692:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8002696:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800269a:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 800269e:	cb0e      	ldmia	r3, {r1, r2, r3}
 80026a0:	4630      	mov	r0, r6
 80026a2:	f000 fbcf 	bl	8002e44 <VibeCheckShell_RegisterInputHandler>
	VibeCheckShell_RegisterInputHandler(&vc->shell, wavegen_cmd);
 80026a6:	68fe      	ldr	r6, [r7, #12]
 80026a8:	466d      	mov	r5, sp
 80026aa:	f107 0474 	add.w	r4, r7, #116	@ 0x74
 80026ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026ba:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80026be:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80026c2:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80026c6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80026c8:	4630      	mov	r0, r6
 80026ca:	f000 fbbb 	bl	8002e44 <VibeCheckShell_RegisterInputHandler>
	VibeCheckShell_RegisterInputHandler(&vc->shell, accel_cmd);
 80026ce:	68fe      	ldr	r6, [r7, #12]
 80026d0:	466d      	mov	r5, sp
 80026d2:	f107 042c 	add.w	r4, r7, #44	@ 0x2c
 80026d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026e2:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80026e6:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80026ea:	f107 0320 	add.w	r3, r7, #32
 80026ee:	cb0e      	ldmia	r3, {r1, r2, r3}
 80026f0:	4630      	mov	r0, r6
 80026f2:	f000 fba7 	bl	8002e44 <VibeCheckShell_RegisterInputHandler>

	VibeCheckShell_OutputHandler wavegen_sender = {
 80026f6:	4b22      	ldr	r3, [pc, #136]	@ (8002780 <VibeCheck_Init+0x1a0>)
 80026f8:	61bb      	str	r3, [r7, #24]
			.execute = VibeCheckWaveGenSender_Execute,
			.obj = &vc->wavegen
 80026fa:	68fa      	ldr	r2, [r7, #12]
 80026fc:	f242 4344 	movw	r3, #9284	@ 0x2444
 8002700:	4413      	add	r3, r2
	VibeCheckShell_OutputHandler wavegen_sender = {
 8002702:	61fb      	str	r3, [r7, #28]
	};

	VibeCheckShell_OutputHandler accel_sender = {
 8002704:	4b1f      	ldr	r3, [pc, #124]	@ (8002784 <VibeCheck_Init+0x1a4>)
 8002706:	613b      	str	r3, [r7, #16]
			.execute = VibeCheckAccelSender_Execute,
			.obj = &vc->accel
 8002708:	68fa      	ldr	r2, [r7, #12]
 800270a:	f243 4390 	movw	r3, #13456	@ 0x3490
 800270e:	4413      	add	r3, r2
	VibeCheckShell_OutputHandler accel_sender = {
 8002710:	617b      	str	r3, [r7, #20]
	};

	VibeCheckShell_RegisterOutputHandler(&vc->shell, wavegen_sender);
 8002712:	68f8      	ldr	r0, [r7, #12]
 8002714:	f107 0318 	add.w	r3, r7, #24
 8002718:	e893 0006 	ldmia.w	r3, {r1, r2}
 800271c:	f000 fbc4 	bl	8002ea8 <VibeCheckShell_RegisterOutputHandler>
	VibeCheckShell_RegisterOutputHandler(&vc->shell, accel_sender);
 8002720:	68f8      	ldr	r0, [r7, #12]
 8002722:	f107 0310 	add.w	r3, r7, #16
 8002726:	e893 0006 	ldmia.w	r3, {r1, r2}
 800272a:	f000 fbbd 	bl	8002ea8 <VibeCheckShell_RegisterOutputHandler>

	VibeCheckStrobe_Init(&vc->strobe, htim_strobe);
 800272e:	68fa      	ldr	r2, [r7, #12]
 8002730:	f242 4324 	movw	r3, #9252	@ 0x2424
 8002734:	4413      	add	r3, r2
 8002736:	68b9      	ldr	r1, [r7, #8]
 8002738:	4618      	mov	r0, r3
 800273a:	f000 fded 	bl	8003318 <VibeCheckStrobe_Init>
	VibeCheckWaveGen_Init(&vc->wavegen, hdac_wavegen, htim_wavegen);
 800273e:	68fa      	ldr	r2, [r7, #12]
 8002740:	f242 4344 	movw	r3, #9284	@ 0x2444
 8002744:	4413      	add	r3, r2
 8002746:	687a      	ldr	r2, [r7, #4]
 8002748:	6839      	ldr	r1, [r7, #0]
 800274a:	4618      	mov	r0, r3
 800274c:	f001 fb36 	bl	8003dbc <VibeCheckWaveGen_Init>
	VibeCheckAccel_Init(&vc->accel);
 8002750:	68fa      	ldr	r2, [r7, #12]
 8002752:	f243 4390 	movw	r3, #13456	@ 0x3490
 8002756:	4413      	add	r3, r2
 8002758:	4618      	mov	r0, r3
 800275a:	f000 f843 	bl	80027e4 <VibeCheckAccel_Init>
}
 800275e:	bf00      	nop
 8002760:	37fc      	adds	r7, #252	@ 0xfc
 8002762:	46bd      	mov	sp, r7
 8002764:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002766:	bf00      	nop
 8002768:	080199e0 	.word	0x080199e0
 800276c:	080038b9 	.word	0x080038b9
 8002770:	080199e8 	.word	0x080199e8
 8002774:	080046bd 	.word	0x080046bd
 8002778:	080199f0 	.word	0x080199f0
 800277c:	08002a65 	.word	0x08002a65
 8002780:	08004819 	.word	0x08004819
 8002784:	08002b1d 	.word	0x08002b1d

08002788 <VibeCheck_Loop>:

void VibeCheck_Loop(VibeCheck* vc)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b086      	sub	sp, #24
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
	VibeCheckWaveGen_Update(&vc->wavegen);
 8002790:	687a      	ldr	r2, [r7, #4]
 8002792:	f242 4344 	movw	r3, #9284	@ 0x2444
 8002796:	4413      	add	r3, r2
 8002798:	4618      	mov	r0, r3
 800279a:	f001 fbaf 	bl	8003efc <VibeCheckWaveGen_Update>
	VibeCheckAccel_Update(&vc->accel);
 800279e:	687a      	ldr	r2, [r7, #4]
 80027a0:	f243 4390 	movw	r3, #13456	@ 0x3490
 80027a4:	4413      	add	r3, r2
 80027a6:	4618      	mov	r0, r3
 80027a8:	f000 f836 	bl	8002818 <VibeCheckAccel_Update>

	VibeCheckShell_Status shell_status = VibeCheckShell_Update(&vc->shell);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	4618      	mov	r0, r3
 80027b0:	f000 fa54 	bl	8002c5c <VibeCheckShell_Update>
 80027b4:	4603      	mov	r3, r0
 80027b6:	617b      	str	r3, [r7, #20]

	char* usb_tx;
	uint32_t usb_tx_len;
	if (VibeCheckShell_GetOutput(&vc->shell, &usb_tx, &usb_tx_len))
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	f107 020c 	add.w	r2, r7, #12
 80027be:	f107 0110 	add.w	r1, r7, #16
 80027c2:	4618      	mov	r0, r3
 80027c4:	f000 fbe6 	bl	8002f94 <VibeCheckShell_GetOutput>
 80027c8:	4603      	mov	r3, r0
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d006      	beq.n	80027dc <VibeCheck_Loop+0x54>
	{
		CDC_Transmit_HS((uint8_t*)usb_tx, usb_tx_len);
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	68fa      	ldr	r2, [r7, #12]
 80027d2:	b292      	uxth	r2, r2
 80027d4:	4611      	mov	r1, r2
 80027d6:	4618      	mov	r0, r3
 80027d8:	f011 fdec 	bl	80143b4 <CDC_Transmit_HS>
	}
}
 80027dc:	bf00      	nop
 80027de:	3718      	adds	r7, #24
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bd80      	pop	{r7, pc}

080027e4 <VibeCheckAccel_Init>:
 */

#include "vibecheck_accel.h"

void VibeCheckAccel_Init(VibeCheckAccel* accel)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b083      	sub	sp, #12
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
	accel->data_ind = 0;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2200      	movs	r2, #0
 80027f0:	f8c3 2190 	str.w	r2, [r3, #400]	@ 0x190
	accel->data_ready = 0;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2200      	movs	r2, #0
 80027f8:	f8c3 2194 	str.w	r2, [r3, #404]	@ 0x194
	accel->time_prev_update = 0;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2200      	movs	r2, #0
 8002800:	f8c3 2198 	str.w	r2, [r3, #408]	@ 0x198
	accel->generate_fake_data = 0;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2200      	movs	r2, #0
 8002808:	f8c3 219c 	str.w	r2, [r3, #412]	@ 0x19c
}
 800280c:	bf00      	nop
 800280e:	370c      	adds	r7, #12
 8002810:	46bd      	mov	sp, r7
 8002812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002816:	4770      	bx	lr

08002818 <VibeCheckAccel_Update>:

void VibeCheckAccel_Update(VibeCheckAccel* accel)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b086      	sub	sp, #24
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
	uint32_t time = HAL_GetTick();
 8002820:	f002 f8e6 	bl	80049f0 <HAL_GetTick>
 8002824:	6178      	str	r0, [r7, #20]
	if (time - accel->time_prev_update > VC_ACCEL_UPDATE_INTERVAL_MS)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	f8d3 3198 	ldr.w	r3, [r3, #408]	@ 0x198
 800282c:	697a      	ldr	r2, [r7, #20]
 800282e:	1ad3      	subs	r3, r2, r3
 8002830:	2b0a      	cmp	r3, #10
 8002832:	d95e      	bls.n	80028f2 <VibeCheckAccel_Update+0xda>
	{
		/* TODO: check if accelerometers have been plugged/unplugged */

		if (accel->generate_fake_data)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	f8d3 319c 	ldr.w	r3, [r3, #412]	@ 0x19c
 800283a:	2b00      	cmp	r3, #0
 800283c:	d055      	beq.n	80028ea <VibeCheckAccel_Update+0xd2>
		{
			float val1 = sinf(2.0f * 3.14159f * time);
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	ee07 3a90 	vmov	s15, r3
 8002844:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002848:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 80028fc <VibeCheckAccel_Update+0xe4>
 800284c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002850:	eeb0 0a67 	vmov.f32	s0, s15
 8002854:	f016 fa80 	bl	8018d58 <sinf>
 8002858:	ed87 0a04 	vstr	s0, [r7, #16]
			float val2 = sinf(2.0f * 3.14159f * time + 3.14159f / 3.0f);
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	ee07 3a90 	vmov	s15, r3
 8002862:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002866:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 80028fc <VibeCheckAccel_Update+0xe4>
 800286a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800286e:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 8002900 <VibeCheckAccel_Update+0xe8>
 8002872:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002876:	eeb0 0a67 	vmov.f32	s0, s15
 800287a:	f016 fa6d 	bl	8018d58 <sinf>
 800287e:	ed87 0a03 	vstr	s0, [r7, #12]
			float val3 = sinf(2.0f * 3.14159f * time + 2.0f * 3.14159f / 3.0f);
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	ee07 3a90 	vmov	s15, r3
 8002888:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800288c:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 80028fc <VibeCheckAccel_Update+0xe4>
 8002890:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002894:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8002904 <VibeCheckAccel_Update+0xec>
 8002898:	ee77 7a87 	vadd.f32	s15, s15, s14
 800289c:	eeb0 0a67 	vmov.f32	s0, s15
 80028a0:	f016 fa5a 	bl	8018d58 <sinf>
 80028a4:	ed87 0a02 	vstr	s0, [r7, #8]

			VibeCheckAccel_AddData(accel, 1, time, val1, val2, val3);
 80028a8:	ed97 1a02 	vldr	s2, [r7, #8]
 80028ac:	edd7 0a03 	vldr	s1, [r7, #12]
 80028b0:	ed97 0a04 	vldr	s0, [r7, #16]
 80028b4:	697a      	ldr	r2, [r7, #20]
 80028b6:	2101      	movs	r1, #1
 80028b8:	6878      	ldr	r0, [r7, #4]
 80028ba:	f000 f825 	bl	8002908 <VibeCheckAccel_AddData>
			VibeCheckAccel_AddData(accel, 2, time, val3, val1, val2);
 80028be:	ed97 1a03 	vldr	s2, [r7, #12]
 80028c2:	edd7 0a04 	vldr	s1, [r7, #16]
 80028c6:	ed97 0a02 	vldr	s0, [r7, #8]
 80028ca:	697a      	ldr	r2, [r7, #20]
 80028cc:	2102      	movs	r1, #2
 80028ce:	6878      	ldr	r0, [r7, #4]
 80028d0:	f000 f81a 	bl	8002908 <VibeCheckAccel_AddData>
			VibeCheckAccel_AddData(accel, 3, time, val2, val3, val1);
 80028d4:	ed97 1a04 	vldr	s2, [r7, #16]
 80028d8:	edd7 0a02 	vldr	s1, [r7, #8]
 80028dc:	ed97 0a03 	vldr	s0, [r7, #12]
 80028e0:	697a      	ldr	r2, [r7, #20]
 80028e2:	2103      	movs	r1, #3
 80028e4:	6878      	ldr	r0, [r7, #4]
 80028e6:	f000 f80f 	bl	8002908 <VibeCheckAccel_AddData>
		}

		accel->time_prev_update = time;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	697a      	ldr	r2, [r7, #20]
 80028ee:	f8c3 2198 	str.w	r2, [r3, #408]	@ 0x198
	}
}
 80028f2:	bf00      	nop
 80028f4:	3718      	adds	r7, #24
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}
 80028fa:	bf00      	nop
 80028fc:	40c90fd0 	.word	0x40c90fd0
 8002900:	3f860a8b 	.word	0x3f860a8b
 8002904:	40060a8b 	.word	0x40060a8b

08002908 <VibeCheckAccel_AddData>:

void VibeCheckAccel_AddData(VibeCheckAccel* accel, uint8_t id, uint32_t time, float x, float y, float z)
{
 8002908:	b480      	push	{r7}
 800290a:	b087      	sub	sp, #28
 800290c:	af00      	add	r7, sp, #0
 800290e:	6178      	str	r0, [r7, #20]
 8002910:	460b      	mov	r3, r1
 8002912:	60fa      	str	r2, [r7, #12]
 8002914:	ed87 0a02 	vstr	s0, [r7, #8]
 8002918:	edc7 0a01 	vstr	s1, [r7, #4]
 800291c:	ed87 1a00 	vstr	s2, [r7]
 8002920:	74fb      	strb	r3, [r7, #19]
	accel->data[accel->data_ind].id = id;
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	f8d3 2190 	ldr.w	r2, [r3, #400]	@ 0x190
 8002928:	6979      	ldr	r1, [r7, #20]
 800292a:	4613      	mov	r3, r2
 800292c:	009b      	lsls	r3, r3, #2
 800292e:	4413      	add	r3, r2
 8002930:	009b      	lsls	r3, r3, #2
 8002932:	440b      	add	r3, r1
 8002934:	7cfa      	ldrb	r2, [r7, #19]
 8002936:	701a      	strb	r2, [r3, #0]
	accel->data[accel->data_ind].time = time;
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	f8d3 2190 	ldr.w	r2, [r3, #400]	@ 0x190
 800293e:	6979      	ldr	r1, [r7, #20]
 8002940:	4613      	mov	r3, r2
 8002942:	009b      	lsls	r3, r3, #2
 8002944:	4413      	add	r3, r2
 8002946:	009b      	lsls	r3, r3, #2
 8002948:	440b      	add	r3, r1
 800294a:	3304      	adds	r3, #4
 800294c:	68fa      	ldr	r2, [r7, #12]
 800294e:	601a      	str	r2, [r3, #0]
	accel->data[accel->data_ind].x = x;
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	f8d3 2190 	ldr.w	r2, [r3, #400]	@ 0x190
 8002956:	6979      	ldr	r1, [r7, #20]
 8002958:	4613      	mov	r3, r2
 800295a:	009b      	lsls	r3, r3, #2
 800295c:	4413      	add	r3, r2
 800295e:	009b      	lsls	r3, r3, #2
 8002960:	440b      	add	r3, r1
 8002962:	3308      	adds	r3, #8
 8002964:	68ba      	ldr	r2, [r7, #8]
 8002966:	601a      	str	r2, [r3, #0]
	accel->data[accel->data_ind].y = y;
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	f8d3 2190 	ldr.w	r2, [r3, #400]	@ 0x190
 800296e:	6979      	ldr	r1, [r7, #20]
 8002970:	4613      	mov	r3, r2
 8002972:	009b      	lsls	r3, r3, #2
 8002974:	4413      	add	r3, r2
 8002976:	009b      	lsls	r3, r3, #2
 8002978:	440b      	add	r3, r1
 800297a:	330c      	adds	r3, #12
 800297c:	687a      	ldr	r2, [r7, #4]
 800297e:	601a      	str	r2, [r3, #0]
	accel->data[accel->data_ind].z = z;
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	f8d3 2190 	ldr.w	r2, [r3, #400]	@ 0x190
 8002986:	6979      	ldr	r1, [r7, #20]
 8002988:	4613      	mov	r3, r2
 800298a:	009b      	lsls	r3, r3, #2
 800298c:	4413      	add	r3, r2
 800298e:	009b      	lsls	r3, r3, #2
 8002990:	440b      	add	r3, r1
 8002992:	3310      	adds	r3, #16
 8002994:	683a      	ldr	r2, [r7, #0]
 8002996:	601a      	str	r2, [r3, #0]

	accel->data_ind++;
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	f8d3 3190 	ldr.w	r3, [r3, #400]	@ 0x190
 800299e:	1c5a      	adds	r2, r3, #1
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	f8c3 2190 	str.w	r2, [r3, #400]	@ 0x190
	if (accel->data_ind == VC_ACCEL_DATA_PER_PACKET)
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	f8d3 3190 	ldr.w	r3, [r3, #400]	@ 0x190
 80029ac:	2b0a      	cmp	r3, #10
 80029ae:	d104      	bne.n	80029ba <VibeCheckAccel_AddData+0xb2>
	{
		accel->data_ready = 1;
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	2201      	movs	r2, #1
 80029b4:	f8c3 2194 	str.w	r2, [r3, #404]	@ 0x194
	else if (accel->data_ind == 2 * VC_ACCEL_DATA_PER_PACKET)
	{
		accel->data_ind = 0;
		accel->data_ready = 1;
	}
}
 80029b8:	e00c      	b.n	80029d4 <VibeCheckAccel_AddData+0xcc>
	else if (accel->data_ind == 2 * VC_ACCEL_DATA_PER_PACKET)
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	f8d3 3190 	ldr.w	r3, [r3, #400]	@ 0x190
 80029c0:	2b14      	cmp	r3, #20
 80029c2:	d107      	bne.n	80029d4 <VibeCheckAccel_AddData+0xcc>
		accel->data_ind = 0;
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	2200      	movs	r2, #0
 80029c8:	f8c3 2190 	str.w	r2, [r3, #400]	@ 0x190
		accel->data_ready = 1;
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	2201      	movs	r2, #1
 80029d0:	f8c3 2194 	str.w	r2, [r3, #404]	@ 0x194
}
 80029d4:	bf00      	nop
 80029d6:	371c      	adds	r7, #28
 80029d8:	46bd      	mov	sp, r7
 80029da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029de:	4770      	bx	lr

080029e0 <VibeCheckAccel_StartFakeData>:

void VibeCheckAccel_StartFakeData(VibeCheckAccel* accel)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b083      	sub	sp, #12
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
	accel->generate_fake_data = 1;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2201      	movs	r2, #1
 80029ec:	f8c3 219c 	str.w	r2, [r3, #412]	@ 0x19c
}
 80029f0:	bf00      	nop
 80029f2:	370c      	adds	r7, #12
 80029f4:	46bd      	mov	sp, r7
 80029f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fa:	4770      	bx	lr

080029fc <VibeCheckAccel_StopFakeData>:

void VibeCheckAccel_StopFakeData(VibeCheckAccel* accel)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b083      	sub	sp, #12
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
	accel->generate_fake_data = 0;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2200      	movs	r2, #0
 8002a08:	f8c3 219c 	str.w	r2, [r3, #412]	@ 0x19c
}
 8002a0c:	bf00      	nop
 8002a0e:	370c      	adds	r7, #12
 8002a10:	46bd      	mov	sp, r7
 8002a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a16:	4770      	bx	lr

08002a18 <VibeCheckAccel_GetDataReady>:

uint32_t VibeCheckAccel_GetDataReady(VibeCheckAccel* accel, VibeCheckAccel_Data** data)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b083      	sub	sp, #12
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
 8002a20:	6039      	str	r1, [r7, #0]
	if (accel->data_ready)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	f8d3 3194 	ldr.w	r3, [r3, #404]	@ 0x194
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d013      	beq.n	8002a54 <VibeCheckAccel_GetDataReady+0x3c>
	{
		accel->data_ready = 0;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2200      	movs	r2, #0
 8002a30:	f8c3 2194 	str.w	r2, [r3, #404]	@ 0x194
		if (accel->data_ind < VC_ACCEL_DATA_PER_PACKET)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	f8d3 3190 	ldr.w	r3, [r3, #400]	@ 0x190
 8002a3a:	2b09      	cmp	r3, #9
 8002a3c:	d805      	bhi.n	8002a4a <VibeCheckAccel_GetDataReady+0x32>
		{
			/* ready to send the second half */
			*data = &accel->data[VC_ACCEL_DATA_PER_PACKET];
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	f103 02c8 	add.w	r2, r3, #200	@ 0xc8
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	601a      	str	r2, [r3, #0]
 8002a48:	e002      	b.n	8002a50 <VibeCheckAccel_GetDataReady+0x38>
		}
		else
		{
			/* ready to send the first half */
			*data = &accel->data[0];
 8002a4a:	687a      	ldr	r2, [r7, #4]
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	601a      	str	r2, [r3, #0]
		}
		return 1;
 8002a50:	2301      	movs	r3, #1
 8002a52:	e000      	b.n	8002a56 <VibeCheckAccel_GetDataReady+0x3e>
	}
	return 0;
 8002a54:	2300      	movs	r3, #0
}
 8002a56:	4618      	mov	r0, r3
 8002a58:	370c      	adds	r7, #12
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a60:	4770      	bx	lr
	...

08002a64 <VibeCheckAccelCMD_Execute>:
 */

#include "vibecheck_accel_handler.h"

uint32_t VibeCheckAccelCMD_Execute(void* obj, VibeCheckShell* shell)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b094      	sub	sp, #80	@ 0x50
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
 8002a6c:	6039      	str	r1, [r7, #0]
	VibeCheckAccel* accel = (VibeCheckAccel*)obj;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	64fb      	str	r3, [r7, #76]	@ 0x4c

	char str[VC_SHELL_MAX_TOKEN_LEN];
	if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 8002a72:	f107 030c 	add.w	r3, r7, #12
 8002a76:	2240      	movs	r2, #64	@ 0x40
 8002a78:	4619      	mov	r1, r3
 8002a7a:	6838      	ldr	r0, [r7, #0]
 8002a7c:	f000 fb06 	bl	800308c <VibeCheckShell_GetNextString>
 8002a80:	4603      	mov	r3, r0
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d03c      	beq.n	8002b00 <VibeCheckAccelCMD_Execute+0x9c>
	{
		if (!strcmp(str, "fakedata"))
 8002a86:	f107 030c 	add.w	r3, r7, #12
 8002a8a:	4920      	ldr	r1, [pc, #128]	@ (8002b0c <VibeCheckAccelCMD_Execute+0xa8>)
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f7fd fc3f 	bl	8000310 <strcmp>
 8002a92:	4603      	mov	r3, r0
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d133      	bne.n	8002b00 <VibeCheckAccelCMD_Execute+0x9c>
		{
			if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 8002a98:	f107 030c 	add.w	r3, r7, #12
 8002a9c:	2240      	movs	r2, #64	@ 0x40
 8002a9e:	4619      	mov	r1, r3
 8002aa0:	6838      	ldr	r0, [r7, #0]
 8002aa2:	f000 faf3 	bl	800308c <VibeCheckShell_GetNextString>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d029      	beq.n	8002b00 <VibeCheckAccelCMD_Execute+0x9c>
			{
				if (!strcmp(str, "start"))
 8002aac:	f107 030c 	add.w	r3, r7, #12
 8002ab0:	4917      	ldr	r1, [pc, #92]	@ (8002b10 <VibeCheckAccelCMD_Execute+0xac>)
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f7fd fc2c 	bl	8000310 <strcmp>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d10b      	bne.n	8002ad6 <VibeCheckAccelCMD_Execute+0x72>
				{
					VibeCheckAccel_StartFakeData(accel);
 8002abe:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8002ac0:	f7ff ff8e 	bl	80029e0 <VibeCheckAccel_StartFakeData>
					VibeCheckShell_PutOutputString(shell, "ack");
 8002ac4:	4913      	ldr	r1, [pc, #76]	@ (8002b14 <VibeCheckAccelCMD_Execute+0xb0>)
 8002ac6:	6838      	ldr	r0, [r7, #0]
 8002ac8:	f000 fb9a 	bl	8003200 <VibeCheckShell_PutOutputString>
					VibeCheckShell_PutOutputDelimiter(shell);
 8002acc:	6838      	ldr	r0, [r7, #0]
 8002ace:	f000 fc15 	bl	80032fc <VibeCheckShell_PutOutputDelimiter>
					return 1;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e015      	b.n	8002b02 <VibeCheckAccelCMD_Execute+0x9e>
				}
				else if (!strcmp(str, "stop"))
 8002ad6:	f107 030c 	add.w	r3, r7, #12
 8002ada:	490f      	ldr	r1, [pc, #60]	@ (8002b18 <VibeCheckAccelCMD_Execute+0xb4>)
 8002adc:	4618      	mov	r0, r3
 8002ade:	f7fd fc17 	bl	8000310 <strcmp>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d10b      	bne.n	8002b00 <VibeCheckAccelCMD_Execute+0x9c>
				{
					VibeCheckAccel_StopFakeData(accel);
 8002ae8:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8002aea:	f7ff ff87 	bl	80029fc <VibeCheckAccel_StopFakeData>
					VibeCheckShell_PutOutputString(shell, "ack");
 8002aee:	4909      	ldr	r1, [pc, #36]	@ (8002b14 <VibeCheckAccelCMD_Execute+0xb0>)
 8002af0:	6838      	ldr	r0, [r7, #0]
 8002af2:	f000 fb85 	bl	8003200 <VibeCheckShell_PutOutputString>
					VibeCheckShell_PutOutputDelimiter(shell);
 8002af6:	6838      	ldr	r0, [r7, #0]
 8002af8:	f000 fc00 	bl	80032fc <VibeCheckShell_PutOutputDelimiter>
					return 1;
 8002afc:	2301      	movs	r3, #1
 8002afe:	e000      	b.n	8002b02 <VibeCheckAccelCMD_Execute+0x9e>
				}
			}
		}
	}

	return 0;
 8002b00:	2300      	movs	r3, #0
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	3750      	adds	r7, #80	@ 0x50
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}
 8002b0a:	bf00      	nop
 8002b0c:	080199f8 	.word	0x080199f8
 8002b10:	08019a04 	.word	0x08019a04
 8002b14:	08019a0c 	.word	0x08019a0c
 8002b18:	08019a10 	.word	0x08019a10

08002b1c <VibeCheckAccelSender_Execute>:


uint32_t VibeCheckAccelSender_Execute(void* obj, VibeCheckShell* shell)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b086      	sub	sp, #24
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
 8002b24:	6039      	str	r1, [r7, #0]
	VibeCheckAccel* accel = (VibeCheckAccel*)obj;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	613b      	str	r3, [r7, #16]

	VibeCheckAccel_Data* data;
	if (VibeCheckAccel_GetDataReady(accel, &data))
 8002b2a:	f107 030c 	add.w	r3, r7, #12
 8002b2e:	4619      	mov	r1, r3
 8002b30:	6938      	ldr	r0, [r7, #16]
 8002b32:	f7ff ff71 	bl	8002a18 <VibeCheckAccel_GetDataReady>
 8002b36:	4603      	mov	r3, r0
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d04e      	beq.n	8002bda <VibeCheckAccelSender_Execute+0xbe>
	{
		VibeCheckShell_PutOutputString(shell, "data");
 8002b3c:	4929      	ldr	r1, [pc, #164]	@ (8002be4 <VibeCheckAccelSender_Execute+0xc8>)
 8002b3e:	6838      	ldr	r0, [r7, #0]
 8002b40:	f000 fb5e 	bl	8003200 <VibeCheckShell_PutOutputString>
		VibeCheckShell_PutOutputSeparator(shell);
 8002b44:	6838      	ldr	r0, [r7, #0]
 8002b46:	f000 fbcb 	bl	80032e0 <VibeCheckShell_PutOutputSeparator>
		VibeCheckShell_PutOutputInt(shell, VC_ACCEL_DATA_PER_PACKET);
 8002b4a:	210a      	movs	r1, #10
 8002b4c:	6838      	ldr	r0, [r7, #0]
 8002b4e:	f000 fb91 	bl	8003274 <VibeCheckShell_PutOutputInt>

		uint32_t data_written = 0;
 8002b52:	2300      	movs	r3, #0
 8002b54:	617b      	str	r3, [r7, #20]
		while (data_written < VC_ACCEL_DATA_PER_PACKET)
 8002b56:	e038      	b.n	8002bca <VibeCheckAccelSender_Execute+0xae>
		{
			VibeCheckShell_PutOutputSeparator(shell);
 8002b58:	6838      	ldr	r0, [r7, #0]
 8002b5a:	f000 fbc1 	bl	80032e0 <VibeCheckShell_PutOutputSeparator>
			VibeCheckShell_PutOutputInt(shell, data->id);
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	781b      	ldrb	r3, [r3, #0]
 8002b62:	4619      	mov	r1, r3
 8002b64:	6838      	ldr	r0, [r7, #0]
 8002b66:	f000 fb85 	bl	8003274 <VibeCheckShell_PutOutputInt>
			VibeCheckShell_PutOutputSeparator(shell);
 8002b6a:	6838      	ldr	r0, [r7, #0]
 8002b6c:	f000 fbb8 	bl	80032e0 <VibeCheckShell_PutOutputSeparator>
			VibeCheckShell_PutOutputInt(shell, data->time);
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	4619      	mov	r1, r3
 8002b76:	6838      	ldr	r0, [r7, #0]
 8002b78:	f000 fb7c 	bl	8003274 <VibeCheckShell_PutOutputInt>
			VibeCheckShell_PutOutputSeparator(shell);
 8002b7c:	6838      	ldr	r0, [r7, #0]
 8002b7e:	f000 fbaf 	bl	80032e0 <VibeCheckShell_PutOutputSeparator>
			VibeCheckShell_PutOutputFloat(shell, data->x);
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	edd3 7a02 	vldr	s15, [r3, #8]
 8002b88:	eeb0 0a67 	vmov.f32	s0, s15
 8002b8c:	6838      	ldr	r0, [r7, #0]
 8002b8e:	f000 fb89 	bl	80032a4 <VibeCheckShell_PutOutputFloat>
			VibeCheckShell_PutOutputSeparator(shell);
 8002b92:	6838      	ldr	r0, [r7, #0]
 8002b94:	f000 fba4 	bl	80032e0 <VibeCheckShell_PutOutputSeparator>
			VibeCheckShell_PutOutputFloat(shell, data->y);
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	edd3 7a03 	vldr	s15, [r3, #12]
 8002b9e:	eeb0 0a67 	vmov.f32	s0, s15
 8002ba2:	6838      	ldr	r0, [r7, #0]
 8002ba4:	f000 fb7e 	bl	80032a4 <VibeCheckShell_PutOutputFloat>
			VibeCheckShell_PutOutputSeparator(shell);
 8002ba8:	6838      	ldr	r0, [r7, #0]
 8002baa:	f000 fb99 	bl	80032e0 <VibeCheckShell_PutOutputSeparator>
			VibeCheckShell_PutOutputFloat(shell, data->z);
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	edd3 7a04 	vldr	s15, [r3, #16]
 8002bb4:	eeb0 0a67 	vmov.f32	s0, s15
 8002bb8:	6838      	ldr	r0, [r7, #0]
 8002bba:	f000 fb73 	bl	80032a4 <VibeCheckShell_PutOutputFloat>

			data++;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	3314      	adds	r3, #20
 8002bc2:	60fb      	str	r3, [r7, #12]
			data_written++;
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	3301      	adds	r3, #1
 8002bc8:	617b      	str	r3, [r7, #20]
		while (data_written < VC_ACCEL_DATA_PER_PACKET)
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	2b09      	cmp	r3, #9
 8002bce:	d9c3      	bls.n	8002b58 <VibeCheckAccelSender_Execute+0x3c>
		}

		VibeCheckShell_PutOutputDelimiter(shell);
 8002bd0:	6838      	ldr	r0, [r7, #0]
 8002bd2:	f000 fb93 	bl	80032fc <VibeCheckShell_PutOutputDelimiter>

		return 1;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e000      	b.n	8002bdc <VibeCheckAccelSender_Execute+0xc0>
	}
	else
	{
		return 0;
 8002bda:	2300      	movs	r3, #0
	}
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	3718      	adds	r7, #24
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}
 8002be4:	08019a18 	.word	0x08019a18

08002be8 <VibeCheckShell_Init>:

#include "vibecheck_shell.h"


void VibeCheckShell_Init(VibeCheckShell* shell)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b083      	sub	sp, #12
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
	shell->input_head = 0;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
	shell->input_tail = 0;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804
	shell->input_count = 0;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2200      	movs	r2, #0
 8002c04:	f8c3 2808 	str.w	r2, [r3, #2056]	@ 0x808
	shell->input_delimiter_count = 0;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	f8c3 280c 	str.w	r2, [r3, #2060]	@ 0x80c

	shell->output_head = 0;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002c16:	461a      	mov	r2, r3
 8002c18:	2300      	movs	r3, #0
 8002c1a:	6113      	str	r3, [r2, #16]
	shell->output_tail = 0;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002c22:	461a      	mov	r2, r3
 8002c24:	2300      	movs	r3, #0
 8002c26:	6153      	str	r3, [r2, #20]
	shell->output_count = 0;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002c2e:	461a      	mov	r2, r3
 8002c30:	2300      	movs	r3, #0
 8002c32:	6193      	str	r3, [r2, #24]

	shell->ih_count = 0;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002c3a:	461a      	mov	r2, r3
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	f8c2 321c 	str.w	r3, [r2, #540]	@ 0x21c
	shell->oh_count = 0;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002c48:	461a      	mov	r2, r3
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	f8c2 3420 	str.w	r3, [r2, #1056]	@ 0x420
}
 8002c50:	bf00      	nop
 8002c52:	370c      	adds	r7, #12
 8002c54:	46bd      	mov	sp, r7
 8002c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5a:	4770      	bx	lr

08002c5c <VibeCheckShell_Update>:

VibeCheckShell_Status VibeCheckShell_Update(VibeCheckShell* shell)
{
 8002c5c:	b590      	push	{r4, r7, lr}
 8002c5e:	b099      	sub	sp, #100	@ 0x64
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]

	VibeCheckShell_Status status = {
 8002c64:	2300      	movs	r3, #0
 8002c66:	64fb      	str	r3, [r7, #76]	@ 0x4c
			.ibuf_status = VC_SHELL_INPUT_BUFFER_OK,
			.obuf_status = VC_SHELL_OUTPUT_BUFFER_OK
	};

	/* check if character buffer overflow */
	if (shell->input_count >= VC_SHELL_IO_BUF_LEN)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
 8002c6e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002c72:	d302      	bcc.n	8002c7a <VibeCheckShell_Update+0x1e>
		status.ibuf_status = VC_SHELL_INPUT_BUFFER_OVERFLOW;
 8002c74:	2301      	movs	r3, #1
 8002c76:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e


	/* handle the inputs */
	if (shell->input_delimiter_count)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	f8d3 380c 	ldr.w	r3, [r3, #2060]	@ 0x80c
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	f000 8092 	beq.w	8002daa <VibeCheckShell_Update+0x14e>
		status.ihandl_status = VC_SHELL_INPUT_PROCESSED;
 8002c86:	2301      	movs	r3, #1
 8002c88:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c

	while (shell->input_delimiter_count)
 8002c8c:	e08d      	b.n	8002daa <VibeCheckShell_Update+0x14e>
	{
		/* look for a handler */
		char ih_name[VC_SHELL_MAX_TOKEN_LEN];
		if (VibeCheckShell_GetNextString(shell, ih_name, VC_SHELL_MAX_TOKEN_LEN))
 8002c8e:	f107 030c 	add.w	r3, r7, #12
 8002c92:	2240      	movs	r2, #64	@ 0x40
 8002c94:	4619      	mov	r1, r3
 8002c96:	6878      	ldr	r0, [r7, #4]
 8002c98:	f000 f9f8 	bl	800308c <VibeCheckShell_GetNextString>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d04d      	beq.n	8002d3e <VibeCheckShell_Update+0xe2>
		{
			for (uint32_t i = 0; i < shell->ih_count; i++)
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002ca6:	e041      	b.n	8002d2c <VibeCheckShell_Update+0xd0>
			{
				if (!strcmp(shell->input_handlers[i].name, ih_name))
 8002ca8:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8002caa:	4613      	mov	r3, r2
 8002cac:	00db      	lsls	r3, r3, #3
 8002cae:	4413      	add	r3, r2
 8002cb0:	00db      	lsls	r3, r3, #3
 8002cb2:	f241 0218 	movw	r2, #4120	@ 0x1018
 8002cb6:	441a      	add	r2, r3
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	4413      	add	r3, r2
 8002cbc:	3304      	adds	r3, #4
 8002cbe:	f107 020c 	add.w	r2, r7, #12
 8002cc2:	4611      	mov	r1, r2
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f7fd fb23 	bl	8000310 <strcmp>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d11e      	bne.n	8002d0e <VibeCheckShell_Update+0xb2>
				{
					/* found a handler for this input */
					if (!shell->input_handlers[i].execute(shell->input_handlers[i].obj, shell))
 8002cd0:	6879      	ldr	r1, [r7, #4]
 8002cd2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8002cd4:	4613      	mov	r3, r2
 8002cd6:	00db      	lsls	r3, r3, #3
 8002cd8:	4413      	add	r3, r2
 8002cda:	00db      	lsls	r3, r3, #3
 8002cdc:	18ca      	adds	r2, r1, r3
 8002cde:	f241 035c 	movw	r3, #4188	@ 0x105c
 8002ce2:	4413      	add	r3, r2
 8002ce4:	681c      	ldr	r4, [r3, #0]
 8002ce6:	6879      	ldr	r1, [r7, #4]
 8002ce8:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8002cea:	4613      	mov	r3, r2
 8002cec:	00db      	lsls	r3, r3, #3
 8002cee:	4413      	add	r3, r2
 8002cf0:	00db      	lsls	r3, r3, #3
 8002cf2:	440b      	add	r3, r1
 8002cf4:	f503 5383 	add.w	r3, r3, #4192	@ 0x1060
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	6879      	ldr	r1, [r7, #4]
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	47a0      	blx	r4
 8002d00:	4603      	mov	r3, r0
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d11f      	bne.n	8002d46 <VibeCheckShell_Update+0xea>
						status.ihandl_status = VC_SHELL_INPUT_ERROR_EXECUTING;
 8002d06:	2303      	movs	r3, #3
 8002d08:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
					break;
 8002d0c:	e01b      	b.n	8002d46 <VibeCheckShell_Update+0xea>
				}

				if (i == shell->ih_count - 1)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002d14:	f8d3 321c 	ldr.w	r3, [r3, #540]	@ 0x21c
 8002d18:	3b01      	subs	r3, #1
 8002d1a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8002d1c:	429a      	cmp	r2, r3
 8002d1e:	d102      	bne.n	8002d26 <VibeCheckShell_Update+0xca>
					status.ihandl_status = VC_SHELL_INPUT_ERROR_NO_HANDLER;
 8002d20:	2302      	movs	r3, #2
 8002d22:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
			for (uint32_t i = 0; i < shell->ih_count; i++)
 8002d26:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002d28:	3301      	adds	r3, #1
 8002d2a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002d32:	f8d3 321c 	ldr.w	r3, [r3, #540]	@ 0x21c
 8002d36:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8002d38:	429a      	cmp	r2, r3
 8002d3a:	d3b5      	bcc.n	8002ca8 <VibeCheckShell_Update+0x4c>
 8002d3c:	e004      	b.n	8002d48 <VibeCheckShell_Update+0xec>
			}
		}
		else
		{
			/* couldn't get a string from the input for handler name */
			status.ihandl_status = VC_SHELL_INPUT_ERROR_NO_HANDLER;
 8002d3e:	2302      	movs	r3, #2
 8002d40:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
 8002d44:	e000      	b.n	8002d48 <VibeCheckShell_Update+0xec>
					break;
 8002d46:	bf00      	nop
		}

		/* clean up the remainder of the previous message */
		while (1)
		{
			char x = shell->input[shell->input_tail];
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 8002d4e:	687a      	ldr	r2, [r7, #4]
 8002d50:	5cd3      	ldrb	r3, [r2, r3]
 8002d52:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

			shell->input_count--;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
 8002d5c:	1e5a      	subs	r2, r3, #1
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	f8c3 2808 	str.w	r2, [r3, #2056]	@ 0x808
			shell->input_tail++;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 8002d6a:	1c5a      	adds	r2, r3, #1
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804
			if (shell->input_tail == VC_SHELL_IO_BUF_LEN)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 8002d78:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002d7c:	d103      	bne.n	8002d86 <VibeCheckShell_Update+0x12a>
				shell->input_tail = 0;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2200      	movs	r2, #0
 8002d82:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804

			if(strchr(VC_SHELL_DELIMITER, x) != NULL)
 8002d86:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8002d8a:	4619      	mov	r1, r3
 8002d8c:	482c      	ldr	r0, [pc, #176]	@ (8002e40 <VibeCheckShell_Update+0x1e4>)
 8002d8e:	f013 fa88 	bl	80162a2 <strchr>
 8002d92:	4603      	mov	r3, r0
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d100      	bne.n	8002d9a <VibeCheckShell_Update+0x13e>
		{
 8002d98:	e7d6      	b.n	8002d48 <VibeCheckShell_Update+0xec>
				break;  /* found the delimiter */
 8002d9a:	bf00      	nop
		}


		shell->input_delimiter_count--;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	f8d3 380c 	ldr.w	r3, [r3, #2060]	@ 0x80c
 8002da2:	1e5a      	subs	r2, r3, #1
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	f8c3 280c 	str.w	r2, [r3, #2060]	@ 0x80c
	while (shell->input_delimiter_count)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	f8d3 380c 	ldr.w	r3, [r3, #2060]	@ 0x80c
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	f47f af6c 	bne.w	8002c8e <VibeCheckShell_Update+0x32>
	}


	/* handle the outputs */
	for (uint32_t i = 0; i < shell->oh_count; i++)
 8002db6:	2300      	movs	r3, #0
 8002db8:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002dba:	e018      	b.n	8002dee <VibeCheckShell_Update+0x192>
	{
		if (shell->output_handlers[i].execute(shell->output_handlers[i].obj, shell))
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002dc0:	f202 4244 	addw	r2, r2, #1092	@ 0x444
 8002dc4:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
 8002dc8:	6879      	ldr	r1, [r7, #4]
 8002dca:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002dcc:	f203 4344 	addw	r3, r3, #1092	@ 0x444
 8002dd0:	00db      	lsls	r3, r3, #3
 8002dd2:	440b      	add	r3, r1
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	6879      	ldr	r1, [r7, #4]
 8002dd8:	4618      	mov	r0, r3
 8002dda:	4790      	blx	r2
 8002ddc:	4603      	mov	r3, r0
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d002      	beq.n	8002de8 <VibeCheckShell_Update+0x18c>
		{
			status.ohandl_status = VC_SHELL_OUTPUT_PROCESSED;
 8002de2:	2301      	movs	r3, #1
 8002de4:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
	for (uint32_t i = 0; i < shell->oh_count; i++)
 8002de8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002dea:	3301      	adds	r3, #1
 8002dec:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002df4:	f8d3 3420 	ldr.w	r3, [r3, #1056]	@ 0x420
 8002df8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002dfa:	429a      	cmp	r2, r3
 8002dfc:	d3de      	bcc.n	8002dbc <VibeCheckShell_Update+0x160>
		}
	}

	/* check if character buffer overflow */
	if (shell->output_count >= VC_SHELL_IO_BUF_LEN)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002e04:	699b      	ldr	r3, [r3, #24]
 8002e06:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002e0a:	d302      	bcc.n	8002e12 <VibeCheckShell_Update+0x1b6>
		status.obuf_status = VC_SHELL_OUTPUT_BUFFER_OVERFLOW;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f


	return status;
 8002e12:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002e14:	653b      	str	r3, [r7, #80]	@ 0x50
 8002e16:	2300      	movs	r3, #0
 8002e18:	f897 2050 	ldrb.w	r2, [r7, #80]	@ 0x50
 8002e1c:	f362 0307 	bfi	r3, r2, #0, #8
 8002e20:	f897 2051 	ldrb.w	r2, [r7, #81]	@ 0x51
 8002e24:	f362 230f 	bfi	r3, r2, #8, #8
 8002e28:	f897 2052 	ldrb.w	r2, [r7, #82]	@ 0x52
 8002e2c:	f362 4317 	bfi	r3, r2, #16, #8
 8002e30:	f897 2053 	ldrb.w	r2, [r7, #83]	@ 0x53
 8002e34:	f362 631f 	bfi	r3, r2, #24, #8
}
 8002e38:	4618      	mov	r0, r3
 8002e3a:	3764      	adds	r7, #100	@ 0x64
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bd90      	pop	{r4, r7, pc}
 8002e40:	08019a20 	.word	0x08019a20

08002e44 <VibeCheckShell_RegisterInputHandler>:

void VibeCheckShell_RegisterInputHandler(VibeCheckShell* shell, VibeCheckShell_InputHandler handler)
{
 8002e44:	b084      	sub	sp, #16
 8002e46:	b580      	push	{r7, lr}
 8002e48:	b082      	sub	sp, #8
 8002e4a:	af00      	add	r7, sp, #0
 8002e4c:	6078      	str	r0, [r7, #4]
 8002e4e:	f107 0014 	add.w	r0, r7, #20
 8002e52:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	if (shell->ih_count < VC_SHELL_MAX_NUM_HANDLERS)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002e5c:	f8d3 321c 	ldr.w	r3, [r3, #540]	@ 0x21c
 8002e60:	2b3f      	cmp	r3, #63	@ 0x3f
 8002e62:	d81a      	bhi.n	8002e9a <VibeCheckShell_RegisterInputHandler+0x56>
		shell->input_handlers[shell->ih_count++] = handler;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002e6a:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8002e6e:	1c53      	adds	r3, r2, #1
 8002e70:	6879      	ldr	r1, [r7, #4]
 8002e72:	f501 5100 	add.w	r1, r1, #8192	@ 0x2000
 8002e76:	f8c1 321c 	str.w	r3, [r1, #540]	@ 0x21c
 8002e7a:	6879      	ldr	r1, [r7, #4]
 8002e7c:	4613      	mov	r3, r2
 8002e7e:	00db      	lsls	r3, r3, #3
 8002e80:	4413      	add	r3, r2
 8002e82:	00db      	lsls	r3, r3, #3
 8002e84:	18ca      	adds	r2, r1, r3
 8002e86:	f241 0318 	movw	r3, #4120	@ 0x1018
 8002e8a:	4413      	add	r3, r2
 8002e8c:	3304      	adds	r3, #4
 8002e8e:	f107 0114 	add.w	r1, r7, #20
 8002e92:	2248      	movs	r2, #72	@ 0x48
 8002e94:	4618      	mov	r0, r3
 8002e96:	f013 fa9a 	bl	80163ce <memcpy>
}
 8002e9a:	bf00      	nop
 8002e9c:	3708      	adds	r7, #8
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002ea4:	b004      	add	sp, #16
 8002ea6:	4770      	bx	lr

08002ea8 <VibeCheckShell_RegisterOutputHandler>:

void VibeCheckShell_RegisterOutputHandler(VibeCheckShell* shell, VibeCheckShell_OutputHandler handler)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b085      	sub	sp, #20
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	60f8      	str	r0, [r7, #12]
 8002eb0:	1d3b      	adds	r3, r7, #4
 8002eb2:	e883 0006 	stmia.w	r3, {r1, r2}
	if (shell->oh_count < VC_SHELL_MAX_NUM_HANDLERS)
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002ebc:	f8d3 3420 	ldr.w	r3, [r3, #1056]	@ 0x420
 8002ec0:	2b3f      	cmp	r3, #63	@ 0x3f
 8002ec2:	d814      	bhi.n	8002eee <VibeCheckShell_RegisterOutputHandler+0x46>
		shell->output_handlers[shell->oh_count++] = handler;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002eca:	f8d3 3420 	ldr.w	r3, [r3, #1056]	@ 0x420
 8002ece:	1c5a      	adds	r2, r3, #1
 8002ed0:	68f9      	ldr	r1, [r7, #12]
 8002ed2:	f501 5100 	add.w	r1, r1, #8192	@ 0x2000
 8002ed6:	f8c1 2420 	str.w	r2, [r1, #1056]	@ 0x420
 8002eda:	68fa      	ldr	r2, [r7, #12]
 8002edc:	f203 4344 	addw	r3, r3, #1092	@ 0x444
 8002ee0:	00db      	lsls	r3, r3, #3
 8002ee2:	4413      	add	r3, r2
 8002ee4:	1d3a      	adds	r2, r7, #4
 8002ee6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002eea:	e883 0003 	stmia.w	r3, {r0, r1}
}
 8002eee:	bf00      	nop
 8002ef0:	3714      	adds	r7, #20
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef8:	4770      	bx	lr
	...

08002efc <VibeCheckShell_PutInput>:

void VibeCheckShell_PutInput(VibeCheckShell* shell, char* input, uint32_t input_max_len)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b086      	sub	sp, #24
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	60f8      	str	r0, [r7, #12]
 8002f04:	60b9      	str	r1, [r7, #8]
 8002f06:	607a      	str	r2, [r7, #4]
	/* add to the input buffer */
	for (uint32_t i = 0; i < input_max_len; i++)
 8002f08:	2300      	movs	r3, #0
 8002f0a:	617b      	str	r3, [r7, #20]
 8002f0c:	e035      	b.n	8002f7a <VibeCheckShell_PutInput+0x7e>
	{
		if (*input)
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	781b      	ldrb	r3, [r3, #0]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d036      	beq.n	8002f84 <VibeCheckShell_PutInput+0x88>
		{
			shell->input[shell->input_head++] = *input;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 8002f1c:	1c59      	adds	r1, r3, #1
 8002f1e:	68fa      	ldr	r2, [r7, #12]
 8002f20:	f8c2 1800 	str.w	r1, [r2, #2048]	@ 0x800
 8002f24:	68ba      	ldr	r2, [r7, #8]
 8002f26:	7811      	ldrb	r1, [r2, #0]
 8002f28:	68fa      	ldr	r2, [r7, #12]
 8002f2a:	54d1      	strb	r1, [r2, r3]
			if (shell->input_head == VC_SHELL_IO_BUF_LEN)
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 8002f32:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002f36:	d103      	bne.n	8002f40 <VibeCheckShell_PutInput+0x44>
					shell->input_head = 0;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
			shell->input_count++;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
 8002f46:	1c5a      	adds	r2, r3, #1
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	f8c3 2808 	str.w	r2, [r3, #2056]	@ 0x808

			if (strchr(VC_SHELL_DELIMITER, *input) != NULL)
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	781b      	ldrb	r3, [r3, #0]
 8002f52:	4619      	mov	r1, r3
 8002f54:	480e      	ldr	r0, [pc, #56]	@ (8002f90 <VibeCheckShell_PutInput+0x94>)
 8002f56:	f013 f9a4 	bl	80162a2 <strchr>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d006      	beq.n	8002f6e <VibeCheckShell_PutInput+0x72>
				shell->input_delimiter_count++;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	f8d3 380c 	ldr.w	r3, [r3, #2060]	@ 0x80c
 8002f66:	1c5a      	adds	r2, r3, #1
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	f8c3 280c 	str.w	r2, [r3, #2060]	@ 0x80c

			input++;
 8002f6e:	68bb      	ldr	r3, [r7, #8]
 8002f70:	3301      	adds	r3, #1
 8002f72:	60bb      	str	r3, [r7, #8]
	for (uint32_t i = 0; i < input_max_len; i++)
 8002f74:	697b      	ldr	r3, [r7, #20]
 8002f76:	3301      	adds	r3, #1
 8002f78:	617b      	str	r3, [r7, #20]
 8002f7a:	697a      	ldr	r2, [r7, #20]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	429a      	cmp	r2, r3
 8002f80:	d3c5      	bcc.n	8002f0e <VibeCheckShell_PutInput+0x12>
		}
		else
			break;
	}
}
 8002f82:	e000      	b.n	8002f86 <VibeCheckShell_PutInput+0x8a>
			break;
 8002f84:	bf00      	nop
}
 8002f86:	bf00      	nop
 8002f88:	3718      	adds	r7, #24
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}
 8002f8e:	bf00      	nop
 8002f90:	08019a20 	.word	0x08019a20

08002f94 <VibeCheckShell_GetOutput>:


uint32_t VibeCheckShell_GetOutput(VibeCheckShell* shell, char** output, uint32_t* len)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b085      	sub	sp, #20
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	60f8      	str	r0, [r7, #12]
 8002f9c:	60b9      	str	r1, [r7, #8]
 8002f9e:	607a      	str	r2, [r7, #4]
	/* returns true if there is stuff in the output buffer we haven't yet sent */
	if (shell->output_head == shell->output_tail)
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002fa6:	691a      	ldr	r2, [r3, #16]
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002fae:	695b      	ldr	r3, [r3, #20]
 8002fb0:	429a      	cmp	r2, r3
 8002fb2:	d101      	bne.n	8002fb8 <VibeCheckShell_GetOutput+0x24>
		return 0;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	e062      	b.n	800307e <VibeCheckShell_GetOutput+0xea>

	if (shell->output_head > shell->output_tail)
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002fbe:	691a      	ldr	r2, [r3, #16]
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002fc6:	695b      	ldr	r3, [r3, #20]
 8002fc8:	429a      	cmp	r2, r3
 8002fca:	d930      	bls.n	800302e <VibeCheckShell_GetOutput+0x9a>
	{
		/* the output doesn't wrap so send it 'normally' */
		*output = &shell->output[shell->output_tail];
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002fd2:	695b      	ldr	r3, [r3, #20]
 8002fd4:	f503 6301 	add.w	r3, r3, #2064	@ 0x810
 8002fd8:	68fa      	ldr	r2, [r7, #12]
 8002fda:	441a      	add	r2, r3
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	601a      	str	r2, [r3, #0]
		*len = shell->output_head - shell->output_tail;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002fe6:	691a      	ldr	r2, [r3, #16]
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002fee:	695b      	ldr	r3, [r3, #20]
 8002ff0:	1ad2      	subs	r2, r2, r3
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	601a      	str	r2, [r3, #0]
		shell->output_count -= shell->output_head - shell->output_tail;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002ffc:	699a      	ldr	r2, [r3, #24]
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003004:	6959      	ldr	r1, [r3, #20]
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800300c:	691b      	ldr	r3, [r3, #16]
 800300e:	1acb      	subs	r3, r1, r3
 8003010:	4413      	add	r3, r2
 8003012:	68fa      	ldr	r2, [r7, #12]
 8003014:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003018:	6193      	str	r3, [r2, #24]
		shell->output_tail = shell->output_head;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003020:	691b      	ldr	r3, [r3, #16]
 8003022:	68fa      	ldr	r2, [r7, #12]
 8003024:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003028:	6153      	str	r3, [r2, #20]
		return 1;
 800302a:	2301      	movs	r3, #1
 800302c:	e027      	b.n	800307e <VibeCheckShell_GetOutput+0xea>
	}
	else
	{
		/* the output wraps: only return up to the end of the buffer region so our output is contiguous in memory */
		*output = &shell->output[shell->output_tail];
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003034:	695b      	ldr	r3, [r3, #20]
 8003036:	f503 6301 	add.w	r3, r3, #2064	@ 0x810
 800303a:	68fa      	ldr	r2, [r7, #12]
 800303c:	441a      	add	r2, r3
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	601a      	str	r2, [r3, #0]
		*len = VC_SHELL_IO_BUF_LEN - shell->output_tail;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003048:	695b      	ldr	r3, [r3, #20]
 800304a:	f5c3 6200 	rsb	r2, r3, #2048	@ 0x800
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	601a      	str	r2, [r3, #0]
		shell->output_count -= VC_SHELL_IO_BUF_LEN - shell->output_tail;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003058:	699a      	ldr	r2, [r3, #24]
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003060:	695b      	ldr	r3, [r3, #20]
 8003062:	4413      	add	r3, r2
 8003064:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 8003068:	68fa      	ldr	r2, [r7, #12]
 800306a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800306e:	6193      	str	r3, [r2, #24]
		shell->output_tail = 0;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003076:	461a      	mov	r2, r3
 8003078:	2300      	movs	r3, #0
 800307a:	6153      	str	r3, [r2, #20]
		return 1;
 800307c:	2301      	movs	r3, #1
	}

}
 800307e:	4618      	mov	r0, r3
 8003080:	3714      	adds	r7, #20
 8003082:	46bd      	mov	sp, r7
 8003084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003088:	4770      	bx	lr
	...

0800308c <VibeCheckShell_GetNextString>:


/* these return true if they successfully get the next token */
uint32_t VibeCheckShell_GetNextString(VibeCheckShell* shell, char* next, uint32_t max_len)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b086      	sub	sp, #24
 8003090:	af00      	add	r7, sp, #0
 8003092:	60f8      	str	r0, [r7, #12]
 8003094:	60b9      	str	r1, [r7, #8]
 8003096:	607a      	str	r2, [r7, #4]

	for (uint32_t i = 0; i < max_len; )
 8003098:	2300      	movs	r3, #0
 800309a:	617b      	str	r3, [r7, #20]
 800309c:	e057      	b.n	800314e <VibeCheckShell_GetNextString+0xc2>
	{

		char x = shell->input[shell->input_tail];
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 80030a4:	68fa      	ldr	r2, [r7, #12]
 80030a6:	5cd3      	ldrb	r3, [r2, r3]
 80030a8:	74fb      	strb	r3, [r7, #19]

		if (strchr(VC_SHELL_DELIMITER, x) != NULL)
 80030aa:	7cfb      	ldrb	r3, [r7, #19]
 80030ac:	4619      	mov	r1, r3
 80030ae:	482c      	ldr	r0, [pc, #176]	@ (8003160 <VibeCheckShell_GetNextString+0xd4>)
 80030b0:	f013 f8f7 	bl	80162a2 <strchr>
 80030b4:	4603      	mov	r3, r0
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d009      	beq.n	80030ce <VibeCheckShell_GetNextString+0x42>
		{
			/* this is a delimiter */
			if (i)  /* we have something in the token so return it */
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d004      	beq.n	80030ca <VibeCheckShell_GetNextString+0x3e>
			{
				*next = '\0';
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	2200      	movs	r2, #0
 80030c4:	701a      	strb	r2, [r3, #0]
				return 1;
 80030c6:	2301      	movs	r3, #1
 80030c8:	e046      	b.n	8003158 <VibeCheckShell_GetNextString+0xcc>
			}
			else
				return 0;  /* don't go any further than the delimiter */
 80030ca:	2300      	movs	r3, #0
 80030cc:	e044      	b.n	8003158 <VibeCheckShell_GetNextString+0xcc>
		}
		else
		{
			shell->input_count--;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
 80030d4:	1e5a      	subs	r2, r3, #1
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	f8c3 2808 	str.w	r2, [r3, #2056]	@ 0x808
			shell->input_tail++;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 80030e2:	1c5a      	adds	r2, r3, #1
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804
			if (shell->input_tail == VC_SHELL_IO_BUF_LEN)
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 80030f0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80030f4:	d103      	bne.n	80030fe <VibeCheckShell_GetNextString+0x72>
				shell->input_tail = 0;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	2200      	movs	r2, #0
 80030fa:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804

			if (strchr(VC_SHELL_INPUT_SEPARATORS, x) != NULL)
 80030fe:	7cfb      	ldrb	r3, [r7, #19]
 8003100:	4619      	mov	r1, r3
 8003102:	4818      	ldr	r0, [pc, #96]	@ (8003164 <VibeCheckShell_GetNextString+0xd8>)
 8003104:	f013 f8cd 	bl	80162a2 <strchr>
 8003108:	4603      	mov	r3, r0
 800310a:	2b00      	cmp	r3, #0
 800310c:	d007      	beq.n	800311e <VibeCheckShell_GetNextString+0x92>
			{
				/* this is a separator */
				if (i) /* if we have something in the token return it, otherwise just continue in order to skip leading separators */
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d01c      	beq.n	800314e <VibeCheckShell_GetNextString+0xc2>
				{
					*next = '\0';
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	2200      	movs	r2, #0
 8003118:	701a      	strb	r2, [r3, #0]
					return 1;
 800311a:	2301      	movs	r3, #1
 800311c:	e01c      	b.n	8003158 <VibeCheckShell_GetNextString+0xcc>
				}
			}
			else
			{
				/* this is a character */
				*(next++) = tolower(x);  /* turn to all lower case letters */
 800311e:	7cfb      	ldrb	r3, [r7, #19]
 8003120:	74bb      	strb	r3, [r7, #18]
 8003122:	7cbb      	ldrb	r3, [r7, #18]
 8003124:	3301      	adds	r3, #1
 8003126:	4a10      	ldr	r2, [pc, #64]	@ (8003168 <VibeCheckShell_GetNextString+0xdc>)
 8003128:	4413      	add	r3, r2
 800312a:	781b      	ldrb	r3, [r3, #0]
 800312c:	f003 0303 	and.w	r3, r3, #3
 8003130:	2b01      	cmp	r3, #1
 8003132:	d103      	bne.n	800313c <VibeCheckShell_GetNextString+0xb0>
 8003134:	7cbb      	ldrb	r3, [r7, #18]
 8003136:	f103 0220 	add.w	r2, r3, #32
 800313a:	e000      	b.n	800313e <VibeCheckShell_GetNextString+0xb2>
 800313c:	7cba      	ldrb	r2, [r7, #18]
 800313e:	68bb      	ldr	r3, [r7, #8]
 8003140:	1c59      	adds	r1, r3, #1
 8003142:	60b9      	str	r1, [r7, #8]
 8003144:	b2d2      	uxtb	r2, r2
 8003146:	701a      	strb	r2, [r3, #0]
				i++;
 8003148:	697b      	ldr	r3, [r7, #20]
 800314a:	3301      	adds	r3, #1
 800314c:	617b      	str	r3, [r7, #20]
	for (uint32_t i = 0; i < max_len; )
 800314e:	697a      	ldr	r2, [r7, #20]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	429a      	cmp	r2, r3
 8003154:	d3a3      	bcc.n	800309e <VibeCheckShell_GetNextString+0x12>
			}
		}
	}

	return 0;
 8003156:	2300      	movs	r3, #0
}
 8003158:	4618      	mov	r0, r3
 800315a:	3718      	adds	r7, #24
 800315c:	46bd      	mov	sp, r7
 800315e:	bd80      	pop	{r7, pc}
 8003160:	08019a20 	.word	0x08019a20
 8003164:	08019a24 	.word	0x08019a24
 8003168:	08019e10 	.word	0x08019e10

0800316c <VibeCheckShell_GetNextFloat>:
	return 0;
}


uint32_t VibeCheckShell_GetNextFloat(VibeCheckShell* shell, float* next)
{
 800316c:	b590      	push	{r4, r7, lr}
 800316e:	b099      	sub	sp, #100	@ 0x64
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
 8003174:	6039      	str	r1, [r7, #0]
	char str[VC_SHELL_MAX_TOKEN_LEN];
	if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 8003176:	f107 031c 	add.w	r3, r7, #28
 800317a:	2240      	movs	r2, #64	@ 0x40
 800317c:	4619      	mov	r1, r3
 800317e:	6878      	ldr	r0, [r7, #4]
 8003180:	f7ff ff84 	bl	800308c <VibeCheckShell_GetNextString>
 8003184:	4603      	mov	r3, r0
 8003186:	2b00      	cmp	r3, #0
 8003188:	d033      	beq.n	80031f2 <VibeCheckShell_GetNextFloat+0x86>
	{
		char valid[] = ".-0123456789";
 800318a:	4b1c      	ldr	r3, [pc, #112]	@ (80031fc <VibeCheckShell_GetNextFloat+0x90>)
 800318c:	f107 040c 	add.w	r4, r7, #12
 8003190:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003192:	c407      	stmia	r4!, {r0, r1, r2}
 8003194:	7023      	strb	r3, [r4, #0]
		for (uint32_t i = 0; i < strlen(str); i++)
 8003196:	2300      	movs	r3, #0
 8003198:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800319a:	e013      	b.n	80031c4 <VibeCheckShell_GetNextFloat+0x58>
			if (strchr(valid, str[i]) == NULL)
 800319c:	f107 021c 	add.w	r2, r7, #28
 80031a0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80031a2:	4413      	add	r3, r2
 80031a4:	781b      	ldrb	r3, [r3, #0]
 80031a6:	461a      	mov	r2, r3
 80031a8:	f107 030c 	add.w	r3, r7, #12
 80031ac:	4611      	mov	r1, r2
 80031ae:	4618      	mov	r0, r3
 80031b0:	f013 f877 	bl	80162a2 <strchr>
 80031b4:	4603      	mov	r3, r0
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d101      	bne.n	80031be <VibeCheckShell_GetNextFloat+0x52>
				return 0;  /* next token contains non-numeric characters */
 80031ba:	2300      	movs	r3, #0
 80031bc:	e01a      	b.n	80031f4 <VibeCheckShell_GetNextFloat+0x88>
		for (uint32_t i = 0; i < strlen(str); i++)
 80031be:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80031c0:	3301      	adds	r3, #1
 80031c2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80031c4:	f107 031c 	add.w	r3, r7, #28
 80031c8:	4618      	mov	r0, r3
 80031ca:	f7fd f901 	bl	80003d0 <strlen>
 80031ce:	4602      	mov	r2, r0
 80031d0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d3e2      	bcc.n	800319c <VibeCheckShell_GetNextFloat+0x30>
		*next = atof(str);
 80031d6:	f107 031c 	add.w	r3, r7, #28
 80031da:	4618      	mov	r0, r3
 80031dc:	f011 fd3e 	bl	8014c5c <atof>
 80031e0:	eeb0 7b40 	vmov.f64	d7, d0
 80031e4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	edc3 7a00 	vstr	s15, [r3]
		return 1;
 80031ee:	2301      	movs	r3, #1
 80031f0:	e000      	b.n	80031f4 <VibeCheckShell_GetNextFloat+0x88>
	}

	return 0;
 80031f2:	2300      	movs	r3, #0
}
 80031f4:	4618      	mov	r0, r3
 80031f6:	3764      	adds	r7, #100	@ 0x64
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bd90      	pop	{r4, r7, pc}
 80031fc:	08019a34 	.word	0x08019a34

08003200 <VibeCheckShell_PutOutputString>:



/* add things to the output */
void VibeCheckShell_PutOutputString(VibeCheckShell* shell, char* str)
{
 8003200:	b480      	push	{r7}
 8003202:	b083      	sub	sp, #12
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
 8003208:	6039      	str	r1, [r7, #0]
	while (*str)
 800320a:	e027      	b.n	800325c <VibeCheckShell_PutOutputString+0x5c>
	{
		shell->output[shell->output_head++] = *(str++);
 800320c:	683a      	ldr	r2, [r7, #0]
 800320e:	1c53      	adds	r3, r2, #1
 8003210:	603b      	str	r3, [r7, #0]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003218:	691b      	ldr	r3, [r3, #16]
 800321a:	1c59      	adds	r1, r3, #1
 800321c:	6878      	ldr	r0, [r7, #4]
 800321e:	f500 5080 	add.w	r0, r0, #4096	@ 0x1000
 8003222:	6101      	str	r1, [r0, #16]
 8003224:	7811      	ldrb	r1, [r2, #0]
 8003226:	687a      	ldr	r2, [r7, #4]
 8003228:	4413      	add	r3, r2
 800322a:	460a      	mov	r2, r1
 800322c:	f883 2810 	strb.w	r2, [r3, #2064]	@ 0x810
		shell->output_count++;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003236:	699b      	ldr	r3, [r3, #24]
 8003238:	3301      	adds	r3, #1
 800323a:	687a      	ldr	r2, [r7, #4]
 800323c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003240:	6193      	str	r3, [r2, #24]
		if (shell->output_head == VC_SHELL_IO_BUF_LEN)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003248:	691b      	ldr	r3, [r3, #16]
 800324a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800324e:	d105      	bne.n	800325c <VibeCheckShell_PutOutputString+0x5c>
			shell->output_head = 0;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003256:	461a      	mov	r2, r3
 8003258:	2300      	movs	r3, #0
 800325a:	6113      	str	r3, [r2, #16]
	while (*str)
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	781b      	ldrb	r3, [r3, #0]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d1d3      	bne.n	800320c <VibeCheckShell_PutOutputString+0xc>
	}
}
 8003264:	bf00      	nop
 8003266:	bf00      	nop
 8003268:	370c      	adds	r7, #12
 800326a:	46bd      	mov	sp, r7
 800326c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003270:	4770      	bx	lr
	...

08003274 <VibeCheckShell_PutOutputInt>:

void VibeCheckShell_PutOutputInt(VibeCheckShell* shell, uint32_t val)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b092      	sub	sp, #72	@ 0x48
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
 800327c:	6039      	str	r1, [r7, #0]
	char str[VC_SHELL_MAX_TOKEN_LEN];
	sprintf(str, "%ld", val);
 800327e:	f107 0308 	add.w	r3, r7, #8
 8003282:	683a      	ldr	r2, [r7, #0]
 8003284:	4906      	ldr	r1, [pc, #24]	@ (80032a0 <VibeCheckShell_PutOutputInt+0x2c>)
 8003286:	4618      	mov	r0, r3
 8003288:	f012 ffa0 	bl	80161cc <siprintf>
	VibeCheckShell_PutOutputString(shell, str);
 800328c:	f107 0308 	add.w	r3, r7, #8
 8003290:	4619      	mov	r1, r3
 8003292:	6878      	ldr	r0, [r7, #4]
 8003294:	f7ff ffb4 	bl	8003200 <VibeCheckShell_PutOutputString>
}
 8003298:	bf00      	nop
 800329a:	3748      	adds	r7, #72	@ 0x48
 800329c:	46bd      	mov	sp, r7
 800329e:	bd80      	pop	{r7, pc}
 80032a0:	08019a44 	.word	0x08019a44

080032a4 <VibeCheckShell_PutOutputFloat>:

void VibeCheckShell_PutOutputFloat(VibeCheckShell* shell, float val)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b092      	sub	sp, #72	@ 0x48
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
 80032ac:	ed87 0a00 	vstr	s0, [r7]
	char str[VC_SHELL_MAX_TOKEN_LEN];
	sprintf(str, "%f", val);
 80032b0:	edd7 7a00 	vldr	s15, [r7]
 80032b4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80032b8:	f107 0008 	add.w	r0, r7, #8
 80032bc:	ec53 2b17 	vmov	r2, r3, d7
 80032c0:	4906      	ldr	r1, [pc, #24]	@ (80032dc <VibeCheckShell_PutOutputFloat+0x38>)
 80032c2:	f012 ff83 	bl	80161cc <siprintf>
	VibeCheckShell_PutOutputString(shell, str);
 80032c6:	f107 0308 	add.w	r3, r7, #8
 80032ca:	4619      	mov	r1, r3
 80032cc:	6878      	ldr	r0, [r7, #4]
 80032ce:	f7ff ff97 	bl	8003200 <VibeCheckShell_PutOutputString>
}
 80032d2:	bf00      	nop
 80032d4:	3748      	adds	r7, #72	@ 0x48
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}
 80032da:	bf00      	nop
 80032dc:	08019a48 	.word	0x08019a48

080032e0 <VibeCheckShell_PutOutputSeparator>:

void VibeCheckShell_PutOutputSeparator(VibeCheckShell* shell)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b082      	sub	sp, #8
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
	VibeCheckShell_PutOutputString(shell, VC_SHELL_OUTPUT_SEPARATOR);
 80032e8:	4903      	ldr	r1, [pc, #12]	@ (80032f8 <VibeCheckShell_PutOutputSeparator+0x18>)
 80032ea:	6878      	ldr	r0, [r7, #4]
 80032ec:	f7ff ff88 	bl	8003200 <VibeCheckShell_PutOutputString>
}
 80032f0:	bf00      	nop
 80032f2:	3708      	adds	r7, #8
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}
 80032f8:	08019a4c 	.word	0x08019a4c

080032fc <VibeCheckShell_PutOutputDelimiter>:

void VibeCheckShell_PutOutputDelimiter(VibeCheckShell* shell)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b082      	sub	sp, #8
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
	VibeCheckShell_PutOutputString(shell, VC_SHELL_DELIMITER);
 8003304:	4903      	ldr	r1, [pc, #12]	@ (8003314 <VibeCheckShell_PutOutputDelimiter+0x18>)
 8003306:	6878      	ldr	r0, [r7, #4]
 8003308:	f7ff ff7a 	bl	8003200 <VibeCheckShell_PutOutputString>
}
 800330c:	bf00      	nop
 800330e:	3708      	adds	r7, #8
 8003310:	46bd      	mov	sp, r7
 8003312:	bd80      	pop	{r7, pc}
 8003314:	08019a20 	.word	0x08019a20

08003318 <VibeCheckStrobe_Init>:

#include "vibecheck_strobe.h"


void VibeCheckStrobe_Init(VibeCheckStrobe* strobe, TIM_HandleTypeDef* htim)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b082      	sub	sp, #8
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
 8003320:	6039      	str	r1, [r7, #0]
	strobe->htim = htim;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	683a      	ldr	r2, [r7, #0]
 8003326:	601a      	str	r2, [r3, #0]
	strobe->freq_hz = VC_STROBE_MIN_FREQ_HZ;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800332e:	605a      	str	r2, [r3, #4]
	strobe->exposure_ms = 1.0f;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8003336:	609a      	str	r2, [r3, #8]
	strobe->phase_deg = 0.0f;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	f04f 0200 	mov.w	r2, #0
 800333e:	60da      	str	r2, [r3, #12]

	/* set up the timer registers */
	strobe->htim->Instance->PSC = VC_STROBE_TIM_PSC - 1;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f640 125f 	movw	r2, #2399	@ 0x95f
 800334a:	629a      	str	r2, [r3, #40]	@ 0x28

	VibeCheckStrobe_SetFrequency(strobe, strobe->freq_hz);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	edd3 7a01 	vldr	s15, [r3, #4]
 8003352:	eeb0 0a67 	vmov.f32	s0, s15
 8003356:	6878      	ldr	r0, [r7, #4]
 8003358:	f000 f84a 	bl	80033f0 <VibeCheckStrobe_SetFrequency>
	VibeCheckStrobe_SetExposure(strobe, strobe->exposure_ms);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	edd3 7a02 	vldr	s15, [r3, #8]
 8003362:	eeb0 0a67 	vmov.f32	s0, s15
 8003366:	6878      	ldr	r0, [r7, #4]
 8003368:	f000 f928 	bl	80035bc <VibeCheckStrobe_SetExposure>

}
 800336c:	bf00      	nop
 800336e:	3708      	adds	r7, #8
 8003370:	46bd      	mov	sp, r7
 8003372:	bd80      	pop	{r7, pc}

08003374 <VibeCheckStrobe_Start>:

void VibeCheckStrobe_Start(VibeCheckStrobe* strobe)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b082      	sub	sp, #8
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
	/* start the timers with interrupts when period completes */
	HAL_TIM_Base_Start_IT(strobe->htim);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4618      	mov	r0, r3
 8003382:	f00a ff43 	bl	800e20c <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start(strobe->htim, TIM_CHANNEL_1);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	2100      	movs	r1, #0
 800338c:	4618      	mov	r0, r3
 800338e:	f00b f825 	bl	800e3dc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(strobe->htim, TIM_CHANNEL_2);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	2104      	movs	r1, #4
 8003398:	4618      	mov	r0, r3
 800339a:	f00b f81f 	bl	800e3dc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(strobe->htim, TIM_CHANNEL_3);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	2108      	movs	r1, #8
 80033a4:	4618      	mov	r0, r3
 80033a6:	f00b f819 	bl	800e3dc <HAL_TIM_PWM_Start>
}
 80033aa:	bf00      	nop
 80033ac:	3708      	adds	r7, #8
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}

080033b2 <VibeCheckStrobe_Stop>:

void VibeCheckStrobe_Stop(VibeCheckStrobe* strobe)
{
 80033b2:	b580      	push	{r7, lr}
 80033b4:	b082      	sub	sp, #8
 80033b6:	af00      	add	r7, sp, #0
 80033b8:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Start_IT(strobe->htim);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4618      	mov	r0, r3
 80033c0:	f00a ff24 	bl	800e20c <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Stop(strobe->htim, TIM_CHANNEL_1);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	2100      	movs	r1, #0
 80033ca:	4618      	mov	r0, r3
 80033cc:	f00b f922 	bl	800e614 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(strobe->htim, TIM_CHANNEL_2);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	2104      	movs	r1, #4
 80033d6:	4618      	mov	r0, r3
 80033d8:	f00b f91c 	bl	800e614 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(strobe->htim, TIM_CHANNEL_3);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	2108      	movs	r1, #8
 80033e2:	4618      	mov	r0, r3
 80033e4:	f00b f916 	bl	800e614 <HAL_TIM_PWM_Stop>
}
 80033e8:	bf00      	nop
 80033ea:	3708      	adds	r7, #8
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bd80      	pop	{r7, pc}

080033f0 <VibeCheckStrobe_SetFrequency>:

void VibeCheckStrobe_SetFrequency(VibeCheckStrobe* strobe, float freq_hz)
{
 80033f0:	b480      	push	{r7}
 80033f2:	b083      	sub	sp, #12
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
 80033f8:	ed87 0a00 	vstr	s0, [r7]
	if (freq_hz < VC_STROBE_MIN_FREQ_HZ)
 80033fc:	edd7 7a00 	vldr	s15, [r7]
 8003400:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8003404:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003408:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800340c:	d502      	bpl.n	8003414 <VibeCheckStrobe_SetFrequency+0x24>
		freq_hz = VC_STROBE_MIN_FREQ_HZ;
 800340e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8003412:	603b      	str	r3, [r7, #0]
	if (freq_hz > VC_STROBE_MAX_FREQ_HZ)
 8003414:	edd7 7a00 	vldr	s15, [r7]
 8003418:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8003484 <VibeCheckStrobe_SetFrequency+0x94>
 800341c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003420:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003424:	dd01      	ble.n	800342a <VibeCheckStrobe_SetFrequency+0x3a>
		freq_hz = VC_STROBE_MAX_FREQ_HZ;
 8003426:	4b18      	ldr	r3, [pc, #96]	@ (8003488 <VibeCheckStrobe_SetFrequency+0x98>)
 8003428:	603b      	str	r3, [r7, #0]

	strobe->arr_steady = VC_STROBE_TIM_COUNTS_PER_SECOND / freq_hz - 1;
 800342a:	eddf 6a18 	vldr	s13, [pc, #96]	@ 800348c <VibeCheckStrobe_SetFrequency+0x9c>
 800342e:	ed97 7a00 	vldr	s14, [r7]
 8003432:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003436:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800343a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800343e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003442:	ee17 2a90 	vmov	r2, s15
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	611a      	str	r2, [r3, #16]
	strobe->freq_hz = VC_STROBE_TIM_COUNTS_PER_SECOND / ((float)strobe->arr_steady + 1.0f);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	691b      	ldr	r3, [r3, #16]
 800344e:	ee07 3a90 	vmov	s15, r3
 8003452:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003456:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800345a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800345e:	eddf 6a0b 	vldr	s13, [pc, #44]	@ 800348c <VibeCheckStrobe_SetFrequency+0x9c>
 8003462:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	edc3 7a01 	vstr	s15, [r3, #4]
	strobe->htim->Instance->ARR = strobe->arr_steady;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	687a      	ldr	r2, [r7, #4]
 8003474:	6912      	ldr	r2, [r2, #16]
 8003476:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8003478:	bf00      	nop
 800347a:	370c      	adds	r7, #12
 800347c:	46bd      	mov	sp, r7
 800347e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003482:	4770      	bx	lr
 8003484:	447a0000 	.word	0x447a0000
 8003488:	447a0000 	.word	0x447a0000
 800348c:	47c35000 	.word	0x47c35000

08003490 <VibeCheckStrobe_GetFrequency>:

float VibeCheckStrobe_GetFrequency(VibeCheckStrobe* strobe)
{
 8003490:	b480      	push	{r7}
 8003492:	b083      	sub	sp, #12
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
	return strobe->freq_hz;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	ee07 3a90 	vmov	s15, r3
}
 80034a0:	eeb0 0a67 	vmov.f32	s0, s15
 80034a4:	370c      	adds	r7, #12
 80034a6:	46bd      	mov	sp, r7
 80034a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ac:	4770      	bx	lr
	...

080034b0 <VibeCheckStrobe_SetPhase>:

void VibeCheckStrobe_SetPhase(VibeCheckStrobe* strobe, float phase_deg)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b085      	sub	sp, #20
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
 80034b8:	ed87 0a00 	vstr	s0, [r7]
	 * To shift the phase, update ARR for a single period and then put it back
	 * The most reliable way would probably by with DMA into the ARR register, but this seems more complicated
	 * Instead let's try with an interrupt at the end of each period, and some struct variables to keep track of the phase update sequence
	 */

	if (phase_deg < VC_STROBE_MIN_PHASE_DEG)
 80034bc:	edd7 7a00 	vldr	s15, [r7]
 80034c0:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8003588 <VibeCheckStrobe_SetPhase+0xd8>
 80034c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80034c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034cc:	d501      	bpl.n	80034d2 <VibeCheckStrobe_SetPhase+0x22>
		phase_deg = VC_STROBE_MIN_PHASE_DEG;
 80034ce:	4b2f      	ldr	r3, [pc, #188]	@ (800358c <VibeCheckStrobe_SetPhase+0xdc>)
 80034d0:	603b      	str	r3, [r7, #0]
	if (phase_deg > VC_STROBE_MAX_PHASE_DEG)
 80034d2:	edd7 7a00 	vldr	s15, [r7]
 80034d6:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 8003590 <VibeCheckStrobe_SetPhase+0xe0>
 80034da:	eef4 7ac7 	vcmpe.f32	s15, s14
 80034de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034e2:	dd01      	ble.n	80034e8 <VibeCheckStrobe_SetPhase+0x38>
		phase_deg = VC_STROBE_MAX_PHASE_DEG;
 80034e4:	4b2b      	ldr	r3, [pc, #172]	@ (8003594 <VibeCheckStrobe_SetPhase+0xe4>)
 80034e6:	603b      	str	r3, [r7, #0]


	/* TODO: need to test if this works */
	float deg_shift = phase_deg - strobe->phase_deg;  /* how many degrees we want to shift the phase */
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	edd3 7a03 	vldr	s15, [r3, #12]
 80034ee:	ed97 7a00 	vldr	s14, [r7]
 80034f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80034f6:	edc7 7a03 	vstr	s15, [r7, #12]
	int32_t arr_shift = deg_shift / 360.0f * strobe->arr_steady;  /* how much we need to alter the ARR for a single period to achieve the target phase shift */
 80034fa:	edd7 7a03 	vldr	s15, [r7, #12]
 80034fe:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8003598 <VibeCheckStrobe_SetPhase+0xe8>
 8003502:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	691b      	ldr	r3, [r3, #16]
 800350a:	ee07 3a90 	vmov	s15, r3
 800350e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003512:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003516:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800351a:	ee17 3a90 	vmov	r3, s15
 800351e:	60bb      	str	r3, [r7, #8]

	if (arr_shift && !strobe->phase_change_pending && !strobe->revert_arr_pending)
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d029      	beq.n	800357a <VibeCheckStrobe_SetPhase+0xca>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	699b      	ldr	r3, [r3, #24]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d125      	bne.n	800357a <VibeCheckStrobe_SetPhase+0xca>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	69db      	ldr	r3, [r3, #28]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d121      	bne.n	800357a <VibeCheckStrobe_SetPhase+0xca>
	{
		strobe->phase_deg += (float)arr_shift / (float)strobe->arr_steady * 360.0f;  /* calculate the actual phase shift accounting for rounding error */
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	ed93 7a03 	vldr	s14, [r3, #12]
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	ee07 3a90 	vmov	s15, r3
 8003542:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	691b      	ldr	r3, [r3, #16]
 800354a:	ee07 3a90 	vmov	s15, r3
 800354e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003552:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8003556:	eddf 6a10 	vldr	s13, [pc, #64]	@ 8003598 <VibeCheckStrobe_SetPhase+0xe8>
 800355a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800355e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	edc3 7a03 	vstr	s15, [r3, #12]
		strobe->arr_phase = strobe->arr_steady + arr_shift;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	691a      	ldr	r2, [r3, #16]
 800356c:	68bb      	ldr	r3, [r7, #8]
 800356e:	441a      	add	r2, r3
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	615a      	str	r2, [r3, #20]
		strobe->phase_change_pending = 1;  /* set the flag to enact the phase shift on the ARR interrupt */
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2201      	movs	r2, #1
 8003578:	619a      	str	r2, [r3, #24]
	}
}
 800357a:	bf00      	nop
 800357c:	3714      	adds	r7, #20
 800357e:	46bd      	mov	sp, r7
 8003580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003584:	4770      	bx	lr
 8003586:	bf00      	nop
 8003588:	c3340000 	.word	0xc3340000
 800358c:	c3340000 	.word	0xc3340000
 8003590:	43340000 	.word	0x43340000
 8003594:	43340000 	.word	0x43340000
 8003598:	43b40000 	.word	0x43b40000

0800359c <VibeCheckStrobe_GetPhase>:

float VibeCheckStrobe_GetPhase(VibeCheckStrobe* strobe)
{
 800359c:	b480      	push	{r7}
 800359e:	b083      	sub	sp, #12
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
	return strobe->phase_deg;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	68db      	ldr	r3, [r3, #12]
 80035a8:	ee07 3a90 	vmov	s15, r3
}
 80035ac:	eeb0 0a67 	vmov.f32	s0, s15
 80035b0:	370c      	adds	r7, #12
 80035b2:	46bd      	mov	sp, r7
 80035b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b8:	4770      	bx	lr
	...

080035bc <VibeCheckStrobe_SetExposure>:

void VibeCheckStrobe_SetExposure(VibeCheckStrobe* strobe, float exposure_ms)
{
 80035bc:	b480      	push	{r7}
 80035be:	b085      	sub	sp, #20
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
 80035c4:	ed87 0a00 	vstr	s0, [r7]

	uint32_t ccr_val = exposure_ms * 0.001f * VC_STROBE_TIM_COUNTS_PER_SECOND;
 80035c8:	edd7 7a00 	vldr	s15, [r7]
 80035cc:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 8003648 <VibeCheckStrobe_SetExposure+0x8c>
 80035d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80035d4:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 800364c <VibeCheckStrobe_SetExposure+0x90>
 80035d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80035dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80035e0:	ee17 3a90 	vmov	r3, s15
 80035e4:	60fb      	str	r3, [r7, #12]
	if (ccr_val > strobe->htim->Instance->ARR)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035ee:	68fa      	ldr	r2, [r7, #12]
 80035f0:	429a      	cmp	r2, r3
 80035f2:	d904      	bls.n	80035fe <VibeCheckStrobe_SetExposure+0x42>
		ccr_val = strobe->htim->Instance->ARR;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035fc:	60fb      	str	r3, [r7, #12]
	strobe->exposure_ms = (float)ccr_val / (float)VC_STROBE_TIM_COUNTS_PER_SECOND * 1000.0f;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	ee07 3a90 	vmov	s15, r3
 8003604:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003608:	eddf 6a10 	vldr	s13, [pc, #64]	@ 800364c <VibeCheckStrobe_SetExposure+0x90>
 800360c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003610:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8003650 <VibeCheckStrobe_SetExposure+0x94>
 8003614:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	edc3 7a02 	vstr	s15, [r3, #8]
	strobe->htim->Instance->CCR1 = ccr_val;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	68fa      	ldr	r2, [r7, #12]
 8003626:	635a      	str	r2, [r3, #52]	@ 0x34
	strobe->htim->Instance->CCR2 = ccr_val;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	68fa      	ldr	r2, [r7, #12]
 8003630:	639a      	str	r2, [r3, #56]	@ 0x38
	strobe->htim->Instance->CCR3 = ccr_val;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	68fa      	ldr	r2, [r7, #12]
 800363a:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800363c:	bf00      	nop
 800363e:	3714      	adds	r7, #20
 8003640:	46bd      	mov	sp, r7
 8003642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003646:	4770      	bx	lr
 8003648:	3a83126f 	.word	0x3a83126f
 800364c:	47c35000 	.word	0x47c35000
 8003650:	447a0000 	.word	0x447a0000

08003654 <VibeCheckStrobe_GetExposure>:

float VibeCheckStrobe_GetExposure(VibeCheckStrobe* strobe)
{
 8003654:	b480      	push	{r7}
 8003656:	b083      	sub	sp, #12
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
	return strobe->exposure_ms;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	689b      	ldr	r3, [r3, #8]
 8003660:	ee07 3a90 	vmov	s15, r3
}
 8003664:	eeb0 0a67 	vmov.f32	s0, s15
 8003668:	370c      	adds	r7, #12
 800366a:	46bd      	mov	sp, r7
 800366c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003670:	4770      	bx	lr

08003672 <VibeCheckStrobe_PeriodElapsedUpdate>:


/* use an interrupt to make sure this is called each period */
void VibeCheckStrobe_PeriodElapsedUpdate(VibeCheckStrobe* strobe)
{
 8003672:	b480      	push	{r7}
 8003674:	b083      	sub	sp, #12
 8003676:	af00      	add	r7, sp, #0
 8003678:	6078      	str	r0, [r7, #4]
	if (strobe->revert_arr_pending)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	69db      	ldr	r3, [r3, #28]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d008      	beq.n	8003694 <VibeCheckStrobe_PeriodElapsedUpdate+0x22>
	{
		strobe->htim->Instance->ARR = strobe->arr_steady;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	687a      	ldr	r2, [r7, #4]
 800368a:	6912      	ldr	r2, [r2, #16]
 800368c:	62da      	str	r2, [r3, #44]	@ 0x2c
		strobe->revert_arr_pending = 0;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2200      	movs	r2, #0
 8003692:	61da      	str	r2, [r3, #28]
	}

	if (strobe->phase_change_pending)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	699b      	ldr	r3, [r3, #24]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d00b      	beq.n	80036b4 <VibeCheckStrobe_PeriodElapsedUpdate+0x42>
	{
		strobe->htim->Instance->ARR = strobe->arr_phase;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	687a      	ldr	r2, [r7, #4]
 80036a4:	6952      	ldr	r2, [r2, #20]
 80036a6:	62da      	str	r2, [r3, #44]	@ 0x2c
		strobe->revert_arr_pending = 1;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2201      	movs	r2, #1
 80036ac:	61da      	str	r2, [r3, #28]
		strobe->phase_change_pending = 0;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2200      	movs	r2, #0
 80036b2:	619a      	str	r2, [r3, #24]
	}
}
 80036b4:	bf00      	nop
 80036b6:	370c      	adds	r7, #12
 80036b8:	46bd      	mov	sp, r7
 80036ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036be:	4770      	bx	lr

080036c0 <VibeCheckStrobeCMD_Set>:
*/



static uint32_t VibeCheckStrobeCMD_Set(VibeCheckStrobe* strobe, VibeCheckShell* shell)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b096      	sub	sp, #88	@ 0x58
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
 80036c8:	6039      	str	r1, [r7, #0]
	char str[VC_SHELL_MAX_TOKEN_LEN];
	if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 80036ca:	f107 0318 	add.w	r3, r7, #24
 80036ce:	2240      	movs	r2, #64	@ 0x40
 80036d0:	4619      	mov	r1, r3
 80036d2:	6838      	ldr	r0, [r7, #0]
 80036d4:	f7ff fcda 	bl	800308c <VibeCheckShell_GetNextString>
 80036d8:	4603      	mov	r3, r0
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d065      	beq.n	80037aa <VibeCheckStrobeCMD_Set+0xea>
	{
		if (!strcmp(str, "frequency"))
 80036de:	f107 0318 	add.w	r3, r7, #24
 80036e2:	4934      	ldr	r1, [pc, #208]	@ (80037b4 <VibeCheckStrobeCMD_Set+0xf4>)
 80036e4:	4618      	mov	r0, r3
 80036e6:	f7fc fe13 	bl	8000310 <strcmp>
 80036ea:	4603      	mov	r3, r0
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d118      	bne.n	8003722 <VibeCheckStrobeCMD_Set+0x62>
		{
			float val;
			if (VibeCheckShell_GetNextFloat(shell, &val))
 80036f0:	f107 0314 	add.w	r3, r7, #20
 80036f4:	4619      	mov	r1, r3
 80036f6:	6838      	ldr	r0, [r7, #0]
 80036f8:	f7ff fd38 	bl	800316c <VibeCheckShell_GetNextFloat>
 80036fc:	4603      	mov	r3, r0
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d053      	beq.n	80037aa <VibeCheckStrobeCMD_Set+0xea>
			{
				VibeCheckStrobe_SetFrequency(strobe, val);
 8003702:	edd7 7a05 	vldr	s15, [r7, #20]
 8003706:	eeb0 0a67 	vmov.f32	s0, s15
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	f7ff fe70 	bl	80033f0 <VibeCheckStrobe_SetFrequency>
				VibeCheckShell_PutOutputString(shell, "ack");
 8003710:	4929      	ldr	r1, [pc, #164]	@ (80037b8 <VibeCheckStrobeCMD_Set+0xf8>)
 8003712:	6838      	ldr	r0, [r7, #0]
 8003714:	f7ff fd74 	bl	8003200 <VibeCheckShell_PutOutputString>
				VibeCheckShell_PutOutputDelimiter(shell);
 8003718:	6838      	ldr	r0, [r7, #0]
 800371a:	f7ff fdef 	bl	80032fc <VibeCheckShell_PutOutputDelimiter>
				return 1;
 800371e:	2301      	movs	r3, #1
 8003720:	e044      	b.n	80037ac <VibeCheckStrobeCMD_Set+0xec>
			}
		}
		else if (!strcmp(str, "phase"))
 8003722:	f107 0318 	add.w	r3, r7, #24
 8003726:	4925      	ldr	r1, [pc, #148]	@ (80037bc <VibeCheckStrobeCMD_Set+0xfc>)
 8003728:	4618      	mov	r0, r3
 800372a:	f7fc fdf1 	bl	8000310 <strcmp>
 800372e:	4603      	mov	r3, r0
 8003730:	2b00      	cmp	r3, #0
 8003732:	d118      	bne.n	8003766 <VibeCheckStrobeCMD_Set+0xa6>
		{
			float val;
			if (VibeCheckShell_GetNextFloat(shell, &val))
 8003734:	f107 0310 	add.w	r3, r7, #16
 8003738:	4619      	mov	r1, r3
 800373a:	6838      	ldr	r0, [r7, #0]
 800373c:	f7ff fd16 	bl	800316c <VibeCheckShell_GetNextFloat>
 8003740:	4603      	mov	r3, r0
 8003742:	2b00      	cmp	r3, #0
 8003744:	d031      	beq.n	80037aa <VibeCheckStrobeCMD_Set+0xea>
			{
				VibeCheckStrobe_SetPhase(strobe, val);
 8003746:	edd7 7a04 	vldr	s15, [r7, #16]
 800374a:	eeb0 0a67 	vmov.f32	s0, s15
 800374e:	6878      	ldr	r0, [r7, #4]
 8003750:	f7ff feae 	bl	80034b0 <VibeCheckStrobe_SetPhase>
				VibeCheckShell_PutOutputString(shell, "ack");
 8003754:	4918      	ldr	r1, [pc, #96]	@ (80037b8 <VibeCheckStrobeCMD_Set+0xf8>)
 8003756:	6838      	ldr	r0, [r7, #0]
 8003758:	f7ff fd52 	bl	8003200 <VibeCheckShell_PutOutputString>
				VibeCheckShell_PutOutputDelimiter(shell);
 800375c:	6838      	ldr	r0, [r7, #0]
 800375e:	f7ff fdcd 	bl	80032fc <VibeCheckShell_PutOutputDelimiter>
				return 1;
 8003762:	2301      	movs	r3, #1
 8003764:	e022      	b.n	80037ac <VibeCheckStrobeCMD_Set+0xec>
			}
		}
		else if (!strcmp(str, "exposure"))
 8003766:	f107 0318 	add.w	r3, r7, #24
 800376a:	4915      	ldr	r1, [pc, #84]	@ (80037c0 <VibeCheckStrobeCMD_Set+0x100>)
 800376c:	4618      	mov	r0, r3
 800376e:	f7fc fdcf 	bl	8000310 <strcmp>
 8003772:	4603      	mov	r3, r0
 8003774:	2b00      	cmp	r3, #0
 8003776:	d118      	bne.n	80037aa <VibeCheckStrobeCMD_Set+0xea>
		{
			float val;
			if (VibeCheckShell_GetNextFloat(shell, &val))
 8003778:	f107 030c 	add.w	r3, r7, #12
 800377c:	4619      	mov	r1, r3
 800377e:	6838      	ldr	r0, [r7, #0]
 8003780:	f7ff fcf4 	bl	800316c <VibeCheckShell_GetNextFloat>
 8003784:	4603      	mov	r3, r0
 8003786:	2b00      	cmp	r3, #0
 8003788:	d00f      	beq.n	80037aa <VibeCheckStrobeCMD_Set+0xea>
			{
				VibeCheckStrobe_SetExposure(strobe, val);
 800378a:	edd7 7a03 	vldr	s15, [r7, #12]
 800378e:	eeb0 0a67 	vmov.f32	s0, s15
 8003792:	6878      	ldr	r0, [r7, #4]
 8003794:	f7ff ff12 	bl	80035bc <VibeCheckStrobe_SetExposure>
				VibeCheckShell_PutOutputString(shell, "ack");
 8003798:	4907      	ldr	r1, [pc, #28]	@ (80037b8 <VibeCheckStrobeCMD_Set+0xf8>)
 800379a:	6838      	ldr	r0, [r7, #0]
 800379c:	f7ff fd30 	bl	8003200 <VibeCheckShell_PutOutputString>
				VibeCheckShell_PutOutputDelimiter(shell);
 80037a0:	6838      	ldr	r0, [r7, #0]
 80037a2:	f7ff fdab 	bl	80032fc <VibeCheckShell_PutOutputDelimiter>
				return 1;
 80037a6:	2301      	movs	r3, #1
 80037a8:	e000      	b.n	80037ac <VibeCheckStrobeCMD_Set+0xec>
			}
		}
	}

	return 0;
 80037aa:	2300      	movs	r3, #0
}
 80037ac:	4618      	mov	r0, r3
 80037ae:	3758      	adds	r7, #88	@ 0x58
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bd80      	pop	{r7, pc}
 80037b4:	08019a50 	.word	0x08019a50
 80037b8:	08019a5c 	.word	0x08019a5c
 80037bc:	08019a60 	.word	0x08019a60
 80037c0:	08019a68 	.word	0x08019a68

080037c4 <VibeCheckStrobeCMD_Get>:

static uint32_t VibeCheckStrobeCMD_Get(VibeCheckStrobe* strobe, VibeCheckShell* shell)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b092      	sub	sp, #72	@ 0x48
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
 80037cc:	6039      	str	r1, [r7, #0]
	char str[VC_SHELL_MAX_TOKEN_LEN];
	if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 80037ce:	f107 0308 	add.w	r3, r7, #8
 80037d2:	2240      	movs	r2, #64	@ 0x40
 80037d4:	4619      	mov	r1, r3
 80037d6:	6838      	ldr	r0, [r7, #0]
 80037d8:	f7ff fc58 	bl	800308c <VibeCheckShell_GetNextString>
 80037dc:	4603      	mov	r3, r0
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d05c      	beq.n	800389c <VibeCheckStrobeCMD_Get+0xd8>
	{
		if (!strcmp(str, "frequency"))
 80037e2:	f107 0308 	add.w	r3, r7, #8
 80037e6:	4930      	ldr	r1, [pc, #192]	@ (80038a8 <VibeCheckStrobeCMD_Get+0xe4>)
 80037e8:	4618      	mov	r0, r3
 80037ea:	f7fc fd91 	bl	8000310 <strcmp>
 80037ee:	4603      	mov	r3, r0
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d115      	bne.n	8003820 <VibeCheckStrobeCMD_Get+0x5c>
		{
			VibeCheckShell_PutOutputString(shell, "ack");
 80037f4:	492d      	ldr	r1, [pc, #180]	@ (80038ac <VibeCheckStrobeCMD_Get+0xe8>)
 80037f6:	6838      	ldr	r0, [r7, #0]
 80037f8:	f7ff fd02 	bl	8003200 <VibeCheckShell_PutOutputString>
			VibeCheckShell_PutOutputSeparator(shell);
 80037fc:	6838      	ldr	r0, [r7, #0]
 80037fe:	f7ff fd6f 	bl	80032e0 <VibeCheckShell_PutOutputSeparator>
			VibeCheckShell_PutOutputFloat(shell, VibeCheckStrobe_GetFrequency(strobe));
 8003802:	6878      	ldr	r0, [r7, #4]
 8003804:	f7ff fe44 	bl	8003490 <VibeCheckStrobe_GetFrequency>
 8003808:	eef0 7a40 	vmov.f32	s15, s0
 800380c:	eeb0 0a67 	vmov.f32	s0, s15
 8003810:	6838      	ldr	r0, [r7, #0]
 8003812:	f7ff fd47 	bl	80032a4 <VibeCheckShell_PutOutputFloat>
			VibeCheckShell_PutOutputDelimiter(shell);
 8003816:	6838      	ldr	r0, [r7, #0]
 8003818:	f7ff fd70 	bl	80032fc <VibeCheckShell_PutOutputDelimiter>
			return 1;
 800381c:	2301      	movs	r3, #1
 800381e:	e03e      	b.n	800389e <VibeCheckStrobeCMD_Get+0xda>
		}
		else if (!strcmp(str, "phase"))
 8003820:	f107 0308 	add.w	r3, r7, #8
 8003824:	4922      	ldr	r1, [pc, #136]	@ (80038b0 <VibeCheckStrobeCMD_Get+0xec>)
 8003826:	4618      	mov	r0, r3
 8003828:	f7fc fd72 	bl	8000310 <strcmp>
 800382c:	4603      	mov	r3, r0
 800382e:	2b00      	cmp	r3, #0
 8003830:	d115      	bne.n	800385e <VibeCheckStrobeCMD_Get+0x9a>
		{
			VibeCheckShell_PutOutputString(shell, "ack");
 8003832:	491e      	ldr	r1, [pc, #120]	@ (80038ac <VibeCheckStrobeCMD_Get+0xe8>)
 8003834:	6838      	ldr	r0, [r7, #0]
 8003836:	f7ff fce3 	bl	8003200 <VibeCheckShell_PutOutputString>
			VibeCheckShell_PutOutputSeparator(shell);
 800383a:	6838      	ldr	r0, [r7, #0]
 800383c:	f7ff fd50 	bl	80032e0 <VibeCheckShell_PutOutputSeparator>
			VibeCheckShell_PutOutputFloat(shell, VibeCheckStrobe_GetPhase(strobe));
 8003840:	6878      	ldr	r0, [r7, #4]
 8003842:	f7ff feab 	bl	800359c <VibeCheckStrobe_GetPhase>
 8003846:	eef0 7a40 	vmov.f32	s15, s0
 800384a:	eeb0 0a67 	vmov.f32	s0, s15
 800384e:	6838      	ldr	r0, [r7, #0]
 8003850:	f7ff fd28 	bl	80032a4 <VibeCheckShell_PutOutputFloat>
			VibeCheckShell_PutOutputDelimiter(shell);
 8003854:	6838      	ldr	r0, [r7, #0]
 8003856:	f7ff fd51 	bl	80032fc <VibeCheckShell_PutOutputDelimiter>
			return 1;
 800385a:	2301      	movs	r3, #1
 800385c:	e01f      	b.n	800389e <VibeCheckStrobeCMD_Get+0xda>
		}
		else if (!strcmp(str, "exposure"))
 800385e:	f107 0308 	add.w	r3, r7, #8
 8003862:	4914      	ldr	r1, [pc, #80]	@ (80038b4 <VibeCheckStrobeCMD_Get+0xf0>)
 8003864:	4618      	mov	r0, r3
 8003866:	f7fc fd53 	bl	8000310 <strcmp>
 800386a:	4603      	mov	r3, r0
 800386c:	2b00      	cmp	r3, #0
 800386e:	d115      	bne.n	800389c <VibeCheckStrobeCMD_Get+0xd8>
		{
			VibeCheckShell_PutOutputString(shell, "ack");
 8003870:	490e      	ldr	r1, [pc, #56]	@ (80038ac <VibeCheckStrobeCMD_Get+0xe8>)
 8003872:	6838      	ldr	r0, [r7, #0]
 8003874:	f7ff fcc4 	bl	8003200 <VibeCheckShell_PutOutputString>
			VibeCheckShell_PutOutputSeparator(shell);
 8003878:	6838      	ldr	r0, [r7, #0]
 800387a:	f7ff fd31 	bl	80032e0 <VibeCheckShell_PutOutputSeparator>
			VibeCheckShell_PutOutputFloat(shell, VibeCheckStrobe_GetExposure(strobe));
 800387e:	6878      	ldr	r0, [r7, #4]
 8003880:	f7ff fee8 	bl	8003654 <VibeCheckStrobe_GetExposure>
 8003884:	eef0 7a40 	vmov.f32	s15, s0
 8003888:	eeb0 0a67 	vmov.f32	s0, s15
 800388c:	6838      	ldr	r0, [r7, #0]
 800388e:	f7ff fd09 	bl	80032a4 <VibeCheckShell_PutOutputFloat>
			VibeCheckShell_PutOutputDelimiter(shell);
 8003892:	6838      	ldr	r0, [r7, #0]
 8003894:	f7ff fd32 	bl	80032fc <VibeCheckShell_PutOutputDelimiter>
			return 1;
 8003898:	2301      	movs	r3, #1
 800389a:	e000      	b.n	800389e <VibeCheckStrobeCMD_Get+0xda>
		}
	}

	return 0;
 800389c:	2300      	movs	r3, #0
}
 800389e:	4618      	mov	r0, r3
 80038a0:	3748      	adds	r7, #72	@ 0x48
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}
 80038a6:	bf00      	nop
 80038a8:	08019a50 	.word	0x08019a50
 80038ac:	08019a5c 	.word	0x08019a5c
 80038b0:	08019a60 	.word	0x08019a60
 80038b4:	08019a68 	.word	0x08019a68

080038b8 <VibeCheckStrobeCMD_Execute>:

uint32_t VibeCheckStrobeCMD_Execute(void* obj, VibeCheckShell* shell)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b094      	sub	sp, #80	@ 0x50
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
 80038c0:	6039      	str	r1, [r7, #0]
	VibeCheckStrobe* strobe = (VibeCheckStrobe*)obj;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	64fb      	str	r3, [r7, #76]	@ 0x4c

	char str[VC_SHELL_MAX_TOKEN_LEN];
	if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 80038c6:	f107 030c 	add.w	r3, r7, #12
 80038ca:	2240      	movs	r2, #64	@ 0x40
 80038cc:	4619      	mov	r1, r3
 80038ce:	6838      	ldr	r0, [r7, #0]
 80038d0:	f7ff fbdc 	bl	800308c <VibeCheckShell_GetNextString>
 80038d4:	4603      	mov	r3, r0
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d04d      	beq.n	8003976 <VibeCheckStrobeCMD_Execute+0xbe>
	{
		if (!strcmp(str, "start"))
 80038da:	f107 030c 	add.w	r3, r7, #12
 80038de:	4928      	ldr	r1, [pc, #160]	@ (8003980 <VibeCheckStrobeCMD_Execute+0xc8>)
 80038e0:	4618      	mov	r0, r3
 80038e2:	f7fc fd15 	bl	8000310 <strcmp>
 80038e6:	4603      	mov	r3, r0
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d10b      	bne.n	8003904 <VibeCheckStrobeCMD_Execute+0x4c>
		{
			VibeCheckStrobe_Start(strobe);
 80038ec:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80038ee:	f7ff fd41 	bl	8003374 <VibeCheckStrobe_Start>
			VibeCheckShell_PutOutputString(shell, "ack");
 80038f2:	4924      	ldr	r1, [pc, #144]	@ (8003984 <VibeCheckStrobeCMD_Execute+0xcc>)
 80038f4:	6838      	ldr	r0, [r7, #0]
 80038f6:	f7ff fc83 	bl	8003200 <VibeCheckShell_PutOutputString>
			VibeCheckShell_PutOutputDelimiter(shell);
 80038fa:	6838      	ldr	r0, [r7, #0]
 80038fc:	f7ff fcfe 	bl	80032fc <VibeCheckShell_PutOutputDelimiter>
			return 1;
 8003900:	2301      	movs	r3, #1
 8003902:	e039      	b.n	8003978 <VibeCheckStrobeCMD_Execute+0xc0>
		}
		else if (!strcmp(str, "stop"))
 8003904:	f107 030c 	add.w	r3, r7, #12
 8003908:	491f      	ldr	r1, [pc, #124]	@ (8003988 <VibeCheckStrobeCMD_Execute+0xd0>)
 800390a:	4618      	mov	r0, r3
 800390c:	f7fc fd00 	bl	8000310 <strcmp>
 8003910:	4603      	mov	r3, r0
 8003912:	2b00      	cmp	r3, #0
 8003914:	d10b      	bne.n	800392e <VibeCheckStrobeCMD_Execute+0x76>
		{
			VibeCheckStrobe_Stop(strobe);
 8003916:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8003918:	f7ff fd4b 	bl	80033b2 <VibeCheckStrobe_Stop>
			VibeCheckShell_PutOutputString(shell, "ack");
 800391c:	4919      	ldr	r1, [pc, #100]	@ (8003984 <VibeCheckStrobeCMD_Execute+0xcc>)
 800391e:	6838      	ldr	r0, [r7, #0]
 8003920:	f7ff fc6e 	bl	8003200 <VibeCheckShell_PutOutputString>
			VibeCheckShell_PutOutputDelimiter(shell);
 8003924:	6838      	ldr	r0, [r7, #0]
 8003926:	f7ff fce9 	bl	80032fc <VibeCheckShell_PutOutputDelimiter>
			return 1;
 800392a:	2301      	movs	r3, #1
 800392c:	e024      	b.n	8003978 <VibeCheckStrobeCMD_Execute+0xc0>
		}
		else if (!strcmp(str, "set"))
 800392e:	f107 030c 	add.w	r3, r7, #12
 8003932:	4916      	ldr	r1, [pc, #88]	@ (800398c <VibeCheckStrobeCMD_Execute+0xd4>)
 8003934:	4618      	mov	r0, r3
 8003936:	f7fc fceb 	bl	8000310 <strcmp>
 800393a:	4603      	mov	r3, r0
 800393c:	2b00      	cmp	r3, #0
 800393e:	d108      	bne.n	8003952 <VibeCheckStrobeCMD_Execute+0x9a>
		{
			if (VibeCheckStrobeCMD_Set(strobe, shell))
 8003940:	6839      	ldr	r1, [r7, #0]
 8003942:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8003944:	f7ff febc 	bl	80036c0 <VibeCheckStrobeCMD_Set>
 8003948:	4603      	mov	r3, r0
 800394a:	2b00      	cmp	r3, #0
 800394c:	d013      	beq.n	8003976 <VibeCheckStrobeCMD_Execute+0xbe>
			{
				return 1;
 800394e:	2301      	movs	r3, #1
 8003950:	e012      	b.n	8003978 <VibeCheckStrobeCMD_Execute+0xc0>
			}
		}
		else if (!strcmp(str, "get"))
 8003952:	f107 030c 	add.w	r3, r7, #12
 8003956:	490e      	ldr	r1, [pc, #56]	@ (8003990 <VibeCheckStrobeCMD_Execute+0xd8>)
 8003958:	4618      	mov	r0, r3
 800395a:	f7fc fcd9 	bl	8000310 <strcmp>
 800395e:	4603      	mov	r3, r0
 8003960:	2b00      	cmp	r3, #0
 8003962:	d108      	bne.n	8003976 <VibeCheckStrobeCMD_Execute+0xbe>
		{
			if (VibeCheckStrobeCMD_Get(strobe, shell))
 8003964:	6839      	ldr	r1, [r7, #0]
 8003966:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8003968:	f7ff ff2c 	bl	80037c4 <VibeCheckStrobeCMD_Get>
 800396c:	4603      	mov	r3, r0
 800396e:	2b00      	cmp	r3, #0
 8003970:	d001      	beq.n	8003976 <VibeCheckStrobeCMD_Execute+0xbe>
			{
				return 1;
 8003972:	2301      	movs	r3, #1
 8003974:	e000      	b.n	8003978 <VibeCheckStrobeCMD_Execute+0xc0>
			}
		}
	}

	return 0;
 8003976:	2300      	movs	r3, #0
}
 8003978:	4618      	mov	r0, r3
 800397a:	3750      	adds	r7, #80	@ 0x50
 800397c:	46bd      	mov	sp, r7
 800397e:	bd80      	pop	{r7, pc}
 8003980:	08019a74 	.word	0x08019a74
 8003984:	08019a5c 	.word	0x08019a5c
 8003988:	08019a7c 	.word	0x08019a7c
 800398c:	08019a84 	.word	0x08019a84
 8003990:	08019a88 	.word	0x08019a88
 8003994:	00000000 	.word	0x00000000

08003998 <ComputeSineWave>:

static const uint32_t demo_times1[] = {150,    150, 150,    150, 300,    150,    150,    300,    300,    300,    300,           300,   150,    150, 300,    150,       150, 300,    300,    150,   150,    300,        150,   150,    300,    300,    300,    300,        300,    150,   300,    150,   150,    150,    300,    150,    300,    150,    75,     75,   75,   75,  150,    150,    600};
static const float demo_freqs1[] =    {58.27,  185, 233.08, 185, 277.18, 233.08, 277.18, 369.99, 349.23, 277.18, 233.08,        0,     233.08, 185, 277.18, 233.08, 277.18, 369.99, 349.23, 51.91, 277.18, 233.08,     77.78, 311.13, 277.18, 233.08, 207.65, 0,          369.99, 415.3, 369.99, 415.3, 369.99,   0,    369.99, 466.16, 369.99, 466.16, 369.99, 0,  369.99, 0,   369.99,   0,   46.25};

static void ComputeSineWave(uint32_t* buf, uint32_t len, float amplitude)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	ed2d 8b02 	vpush	{d8}
 800399e:	b086      	sub	sp, #24
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	60f8      	str	r0, [r7, #12]
 80039a4:	60b9      	str	r1, [r7, #8]
 80039a6:	ed87 0a01 	vstr	s0, [r7, #4]
	for (uint32_t i = 0; i < len; i++)
 80039aa:	2300      	movs	r3, #0
 80039ac:	617b      	str	r3, [r7, #20]
 80039ae:	e032      	b.n	8003a16 <ComputeSineWave+0x7e>
		*buf++ = 0.5f * VC_WAVE_DAC_FULL_SCALE * (1.0f + amplitude * sin((float)i * 2.0f * 3.14159f / (float)len));
 80039b0:	edd7 7a01 	vldr	s15, [r7, #4]
 80039b4:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	ee07 3a90 	vmov	s15, r3
 80039be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039c2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80039c6:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 8003a38 <ComputeSineWave+0xa0>
 80039ca:	ee67 6a87 	vmul.f32	s13, s15, s14
 80039ce:	68bb      	ldr	r3, [r7, #8]
 80039d0:	ee07 3a90 	vmov	s15, r3
 80039d4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80039d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80039dc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80039e0:	eeb0 0b47 	vmov.f64	d0, d7
 80039e4:	f015 f940 	bl	8018c68 <sin>
 80039e8:	eeb0 7b40 	vmov.f64	d7, d0
 80039ec:	ee28 7b07 	vmul.f64	d7, d8, d7
 80039f0:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 80039f4:	ee37 7b06 	vadd.f64	d7, d7, d6
 80039f8:	ed9f 6b0d 	vldr	d6, [pc, #52]	@ 8003a30 <ComputeSineWave+0x98>
 80039fc:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	1d1a      	adds	r2, r3, #4
 8003a04:	60fa      	str	r2, [r7, #12]
 8003a06:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8003a0a:	ee17 2a90 	vmov	r2, s15
 8003a0e:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < len; i++)
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	3301      	adds	r3, #1
 8003a14:	617b      	str	r3, [r7, #20]
 8003a16:	697a      	ldr	r2, [r7, #20]
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	429a      	cmp	r2, r3
 8003a1c:	d3c8      	bcc.n	80039b0 <ComputeSineWave+0x18>
}
 8003a1e:	bf00      	nop
 8003a20:	bf00      	nop
 8003a22:	3718      	adds	r7, #24
 8003a24:	46bd      	mov	sp, r7
 8003a26:	ecbd 8b02 	vpop	{d8}
 8003a2a:	bd80      	pop	{r7, pc}
 8003a2c:	f3af 8000 	nop.w
 8003a30:	00000000 	.word	0x00000000
 8003a34:	409ffe00 	.word	0x409ffe00
 8003a38:	40490fd0 	.word	0x40490fd0

08003a3c <ComputeSquareWave>:

static void ComputeSquareWave(uint32_t* buf, uint32_t len, float amplitude)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b087      	sub	sp, #28
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	60f8      	str	r0, [r7, #12]
 8003a44:	60b9      	str	r1, [r7, #8]
 8003a46:	ed87 0a01 	vstr	s0, [r7, #4]
	for (uint32_t i = 0; i < len; i++)
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	617b      	str	r3, [r7, #20]
 8003a4e:	e02c      	b.n	8003aaa <ComputeSquareWave+0x6e>
		if (i < len / 2)
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	085b      	lsrs	r3, r3, #1
 8003a54:	697a      	ldr	r2, [r7, #20]
 8003a56:	429a      	cmp	r2, r3
 8003a58:	d212      	bcs.n	8003a80 <ComputeSquareWave+0x44>
			*buf++ = 0.5f * VC_WAVE_DAC_FULL_SCALE * (1 + amplitude);
 8003a5a:	edd7 7a01 	vldr	s15, [r7, #4]
 8003a5e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003a62:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003a66:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8003ac0 <ComputeSquareWave+0x84>
 8003a6a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	1d1a      	adds	r2, r3, #4
 8003a72:	60fa      	str	r2, [r7, #12]
 8003a74:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a78:	ee17 2a90 	vmov	r2, s15
 8003a7c:	601a      	str	r2, [r3, #0]
 8003a7e:	e011      	b.n	8003aa4 <ComputeSquareWave+0x68>
		else
			*buf++ = 0.5f * VC_WAVE_DAC_FULL_SCALE * (1 - amplitude);
 8003a80:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003a84:	edd7 7a01 	vldr	s15, [r7, #4]
 8003a88:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003a8c:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8003ac0 <ComputeSquareWave+0x84>
 8003a90:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	1d1a      	adds	r2, r3, #4
 8003a98:	60fa      	str	r2, [r7, #12]
 8003a9a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a9e:	ee17 2a90 	vmov	r2, s15
 8003aa2:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < len; i++)
 8003aa4:	697b      	ldr	r3, [r7, #20]
 8003aa6:	3301      	adds	r3, #1
 8003aa8:	617b      	str	r3, [r7, #20]
 8003aaa:	697a      	ldr	r2, [r7, #20]
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	429a      	cmp	r2, r3
 8003ab0:	d3ce      	bcc.n	8003a50 <ComputeSquareWave+0x14>
}
 8003ab2:	bf00      	nop
 8003ab4:	bf00      	nop
 8003ab6:	371c      	adds	r7, #28
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abe:	4770      	bx	lr
 8003ac0:	44fff000 	.word	0x44fff000

08003ac4 <ComputeSawWave>:

static void ComputeSawWave(uint32_t* buf, uint32_t len, float amplitude)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b087      	sub	sp, #28
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	60f8      	str	r0, [r7, #12]
 8003acc:	60b9      	str	r1, [r7, #8]
 8003ace:	ed87 0a01 	vstr	s0, [r7, #4]
	for (uint32_t i = 0; i < len; i++)
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	617b      	str	r3, [r7, #20]
 8003ad6:	e052      	b.n	8003b7e <ComputeSawWave+0xba>
		if (i < len / 2)
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	085b      	lsrs	r3, r3, #1
 8003adc:	697a      	ldr	r2, [r7, #20]
 8003ade:	429a      	cmp	r2, r3
 8003ae0:	d222      	bcs.n	8003b28 <ComputeSawWave+0x64>
			*buf++ = 0.5f * VC_WAVE_DAC_FULL_SCALE * (1 + 2 * (float)i * amplitude / (float)len);
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	ee07 3a90 	vmov	s15, r3
 8003ae8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003aec:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8003af0:	edd7 7a01 	vldr	s15, [r7, #4]
 8003af4:	ee67 6a27 	vmul.f32	s13, s14, s15
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	ee07 3a90 	vmov	s15, r3
 8003afe:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003b02:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003b06:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003b0a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003b0e:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8003b94 <ComputeSawWave+0xd0>
 8003b12:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	1d1a      	adds	r2, r3, #4
 8003b1a:	60fa      	str	r2, [r7, #12]
 8003b1c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b20:	ee17 2a90 	vmov	r2, s15
 8003b24:	601a      	str	r2, [r3, #0]
 8003b26:	e027      	b.n	8003b78 <ComputeSawWave+0xb4>
		else
			*buf++ = 0.5f * VC_WAVE_DAC_FULL_SCALE * (1 - 2 * amplitude + 2 * (float)i * amplitude / (float)len);
 8003b28:	edd7 7a01 	vldr	s15, [r7, #4]
 8003b2c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003b30:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003b34:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003b38:	697b      	ldr	r3, [r7, #20]
 8003b3a:	ee07 3a90 	vmov	s15, r3
 8003b3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b42:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8003b46:	edd7 7a01 	vldr	s15, [r7, #4]
 8003b4a:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	ee07 3a90 	vmov	s15, r3
 8003b54:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b58:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8003b5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b60:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8003b94 <ComputeSawWave+0xd0>
 8003b64:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	1d1a      	adds	r2, r3, #4
 8003b6c:	60fa      	str	r2, [r7, #12]
 8003b6e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b72:	ee17 2a90 	vmov	r2, s15
 8003b76:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < len; i++)
 8003b78:	697b      	ldr	r3, [r7, #20]
 8003b7a:	3301      	adds	r3, #1
 8003b7c:	617b      	str	r3, [r7, #20]
 8003b7e:	697a      	ldr	r2, [r7, #20]
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	429a      	cmp	r2, r3
 8003b84:	d3a8      	bcc.n	8003ad8 <ComputeSawWave+0x14>
}
 8003b86:	bf00      	nop
 8003b88:	bf00      	nop
 8003b8a:	371c      	adds	r7, #28
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b92:	4770      	bx	lr
 8003b94:	44fff000 	.word	0x44fff000

08003b98 <ComputeTriangleWave>:

static void ComputeTriangleWave(uint32_t* buf, uint32_t len, float amplitude)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b087      	sub	sp, #28
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	60f8      	str	r0, [r7, #12]
 8003ba0:	60b9      	str	r1, [r7, #8]
 8003ba2:	ed87 0a01 	vstr	s0, [r7, #4]
	for (uint32_t i = 0; i < len; i++)
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	617b      	str	r3, [r7, #20]
 8003baa:	e082      	b.n	8003cb2 <ComputeTriangleWave+0x11a>
		if (i < len / 4)
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	089b      	lsrs	r3, r3, #2
 8003bb0:	697a      	ldr	r2, [r7, #20]
 8003bb2:	429a      	cmp	r2, r3
 8003bb4:	d221      	bcs.n	8003bfa <ComputeTriangleWave+0x62>
			*buf++ = 0.5f * VC_WAVE_DAC_FULL_SCALE * (1 + 4 * i * amplitude / (float)len);
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	009b      	lsls	r3, r3, #2
 8003bba:	ee07 3a90 	vmov	s15, r3
 8003bbe:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003bc2:	edd7 7a01 	vldr	s15, [r7, #4]
 8003bc6:	ee67 6a27 	vmul.f32	s13, s14, s15
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	ee07 3a90 	vmov	s15, r3
 8003bd0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003bd4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003bd8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003bdc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003be0:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 8003ccc <ComputeTriangleWave+0x134>
 8003be4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	1d1a      	adds	r2, r3, #4
 8003bec:	60fa      	str	r2, [r7, #12]
 8003bee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003bf2:	ee17 2a90 	vmov	r2, s15
 8003bf6:	601a      	str	r2, [r3, #0]
 8003bf8:	e058      	b.n	8003cac <ComputeTriangleWave+0x114>
		else if (i < 3 * len / 4)
 8003bfa:	68ba      	ldr	r2, [r7, #8]
 8003bfc:	4613      	mov	r3, r2
 8003bfe:	005b      	lsls	r3, r3, #1
 8003c00:	4413      	add	r3, r2
 8003c02:	089b      	lsrs	r3, r3, #2
 8003c04:	697a      	ldr	r2, [r7, #20]
 8003c06:	429a      	cmp	r2, r3
 8003c08:	d227      	bcs.n	8003c5a <ComputeTriangleWave+0xc2>
			*buf++ = 0.5f * VC_WAVE_DAC_FULL_SCALE * (1 + 2 * amplitude - 4 * i * amplitude / (float)len);
 8003c0a:	edd7 7a01 	vldr	s15, [r7, #4]
 8003c0e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003c12:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003c16:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	009b      	lsls	r3, r3, #2
 8003c1e:	ee07 3a90 	vmov	s15, r3
 8003c22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c26:	edd7 7a01 	vldr	s15, [r7, #4]
 8003c2a:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8003c2e:	68bb      	ldr	r3, [r7, #8]
 8003c30:	ee07 3a90 	vmov	s15, r3
 8003c34:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c38:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8003c3c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003c40:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8003ccc <ComputeTriangleWave+0x134>
 8003c44:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	1d1a      	adds	r2, r3, #4
 8003c4c:	60fa      	str	r2, [r7, #12]
 8003c4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c52:	ee17 2a90 	vmov	r2, s15
 8003c56:	601a      	str	r2, [r3, #0]
 8003c58:	e028      	b.n	8003cac <ComputeTriangleWave+0x114>
		else
			*buf++ = 0.5f * VC_WAVE_DAC_FULL_SCALE * (1 - 4 * amplitude + 4 * i * amplitude / (float)len);
 8003c5a:	edd7 7a01 	vldr	s15, [r7, #4]
 8003c5e:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8003c62:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003c66:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003c6a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003c6e:	697b      	ldr	r3, [r7, #20]
 8003c70:	009b      	lsls	r3, r3, #2
 8003c72:	ee07 3a90 	vmov	s15, r3
 8003c76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c7a:	edd7 7a01 	vldr	s15, [r7, #4]
 8003c7e:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8003c82:	68bb      	ldr	r3, [r7, #8]
 8003c84:	ee07 3a90 	vmov	s15, r3
 8003c88:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c8c:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8003c90:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c94:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8003ccc <ComputeTriangleWave+0x134>
 8003c98:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	1d1a      	adds	r2, r3, #4
 8003ca0:	60fa      	str	r2, [r7, #12]
 8003ca2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ca6:	ee17 2a90 	vmov	r2, s15
 8003caa:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < len; i++)
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	3301      	adds	r3, #1
 8003cb0:	617b      	str	r3, [r7, #20]
 8003cb2:	697a      	ldr	r2, [r7, #20]
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	429a      	cmp	r2, r3
 8003cb8:	f4ff af78 	bcc.w	8003bac <ComputeTriangleWave+0x14>
}
 8003cbc:	bf00      	nop
 8003cbe:	bf00      	nop
 8003cc0:	371c      	adds	r7, #28
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc8:	4770      	bx	lr
 8003cca:	bf00      	nop
 8003ccc:	44fff000 	.word	0x44fff000

08003cd0 <ComputeNullWave>:

static void ComputeNullWave(uint32_t* buf, uint32_t len)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b085      	sub	sp, #20
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
 8003cd8:	6039      	str	r1, [r7, #0]
	for (uint32_t i = 0; i < len; i++)
 8003cda:	2300      	movs	r3, #0
 8003cdc:	60fb      	str	r3, [r7, #12]
 8003cde:	e008      	b.n	8003cf2 <ComputeNullWave+0x22>
		*buf++ = 0.5f * VC_WAVE_DAC_FULL_SCALE;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	1d1a      	adds	r2, r3, #4
 8003ce4:	607a      	str	r2, [r7, #4]
 8003ce6:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8003cea:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < len; i++)
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	3301      	adds	r3, #1
 8003cf0:	60fb      	str	r3, [r7, #12]
 8003cf2:	68fa      	ldr	r2, [r7, #12]
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	429a      	cmp	r2, r3
 8003cf8:	d3f2      	bcc.n	8003ce0 <ComputeNullWave+0x10>
}
 8003cfa:	bf00      	nop
 8003cfc:	bf00      	nop
 8003cfe:	3714      	adds	r7, #20
 8003d00:	46bd      	mov	sp, r7
 8003d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d06:	4770      	bx	lr

08003d08 <VibeCheckWaveGen_RecomputeWave>:




static void VibeCheckWaveGen_RecomputeWave(VibeCheckWaveGen* wavegen, uint32_t* buf)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b082      	sub	sp, #8
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
 8003d10:	6039      	str	r1, [r7, #0]
	if (wavegen->is_running)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003d18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d044      	beq.n	8003da8 <VibeCheckWaveGen_RecomputeWave+0xa0>
	{
		switch (wavegen->waveform)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003d24:	7e1b      	ldrb	r3, [r3, #24]
 8003d26:	2b03      	cmp	r3, #3
 8003d28:	d844      	bhi.n	8003db4 <VibeCheckWaveGen_RecomputeWave+0xac>
 8003d2a:	a201      	add	r2, pc, #4	@ (adr r2, 8003d30 <VibeCheckWaveGen_RecomputeWave+0x28>)
 8003d2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d30:	08003d41 	.word	0x08003d41
 8003d34:	08003d5b 	.word	0x08003d5b
 8003d38:	08003d75 	.word	0x08003d75
 8003d3c:	08003d8f 	.word	0x08003d8f
		{
		case VC_WAVE_SINE:
			ComputeSineWave(buf, VC_WAVE_BUF_LEN, wavegen->amplitude);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003d46:	edd3 7a08 	vldr	s15, [r3, #32]
 8003d4a:	eeb0 0a67 	vmov.f32	s0, s15
 8003d4e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003d52:	6838      	ldr	r0, [r7, #0]
 8003d54:	f7ff fe20 	bl	8003998 <ComputeSineWave>
			break;
 8003d58:	e02c      	b.n	8003db4 <VibeCheckWaveGen_RecomputeWave+0xac>
		case VC_WAVE_SQUARE:
			ComputeSquareWave(buf, VC_WAVE_BUF_LEN, wavegen->amplitude);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003d60:	edd3 7a08 	vldr	s15, [r3, #32]
 8003d64:	eeb0 0a67 	vmov.f32	s0, s15
 8003d68:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003d6c:	6838      	ldr	r0, [r7, #0]
 8003d6e:	f7ff fe65 	bl	8003a3c <ComputeSquareWave>
			break;
 8003d72:	e01f      	b.n	8003db4 <VibeCheckWaveGen_RecomputeWave+0xac>
		case VC_WAVE_SAW:
			ComputeSawWave(buf, VC_WAVE_BUF_LEN, wavegen->amplitude);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003d7a:	edd3 7a08 	vldr	s15, [r3, #32]
 8003d7e:	eeb0 0a67 	vmov.f32	s0, s15
 8003d82:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003d86:	6838      	ldr	r0, [r7, #0]
 8003d88:	f7ff fe9c 	bl	8003ac4 <ComputeSawWave>
			break;
 8003d8c:	e012      	b.n	8003db4 <VibeCheckWaveGen_RecomputeWave+0xac>
		case VC_WAVE_TRIANGLE:
			ComputeTriangleWave(buf, VC_WAVE_BUF_LEN, wavegen->amplitude);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003d94:	edd3 7a08 	vldr	s15, [r3, #32]
 8003d98:	eeb0 0a67 	vmov.f32	s0, s15
 8003d9c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003da0:	6838      	ldr	r0, [r7, #0]
 8003da2:	f7ff fef9 	bl	8003b98 <ComputeTriangleWave>
			break;
 8003da6:	e005      	b.n	8003db4 <VibeCheckWaveGen_RecomputeWave+0xac>
		}
	}
	else
	{
		ComputeNullWave(buf, VC_WAVE_BUF_LEN);
 8003da8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003dac:	6838      	ldr	r0, [r7, #0]
 8003dae:	f7ff ff8f 	bl	8003cd0 <ComputeNullWave>
	}
}
 8003db2:	e7ff      	b.n	8003db4 <VibeCheckWaveGen_RecomputeWave+0xac>
 8003db4:	bf00      	nop
 8003db6:	3708      	adds	r7, #8
 8003db8:	46bd      	mov	sp, r7
 8003dba:	bd80      	pop	{r7, pc}

08003dbc <VibeCheckWaveGen_Init>:


void VibeCheckWaveGen_Init(VibeCheckWaveGen* wavegen, DAC_HandleTypeDef *hdac, TIM_HandleTypeDef* htim)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b086      	sub	sp, #24
 8003dc0:	af02      	add	r7, sp, #8
 8003dc2:	60f8      	str	r0, [r7, #12]
 8003dc4:	60b9      	str	r1, [r7, #8]
 8003dc6:	607a      	str	r2, [r7, #4]
	wavegen->hdac = hdac;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	68ba      	ldr	r2, [r7, #8]
 8003dcc:	605a      	str	r2, [r3, #4]
	wavegen->htim = htim;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	687a      	ldr	r2, [r7, #4]
 8003dd2:	601a      	str	r2, [r3, #0]
	wavegen->freq_hz = 440.0f;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003dda:	461a      	mov	r2, r3
 8003ddc:	4b44      	ldr	r3, [pc, #272]	@ (8003ef0 <VibeCheckWaveGen_Init+0x134>)
 8003dde:	61d3      	str	r3, [r2, #28]
	wavegen->amplitude = 0.001f;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003de6:	461a      	mov	r2, r3
 8003de8:	4b42      	ldr	r3, [pc, #264]	@ (8003ef4 <VibeCheckWaveGen_Init+0x138>)
 8003dea:	6213      	str	r3, [r2, #32]
	wavegen->waveform = VC_WAVE_SINE;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003df2:	2200      	movs	r2, #0
 8003df4:	761a      	strb	r2, [r3, #24]

	wavegen->is_running = 0;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003dfc:	461a      	mov	r2, r3
 8003dfe:	2300      	movs	r3, #0
 8003e00:	6253      	str	r3, [r2, #36]	@ 0x24
	wavegen->is_muted = 0;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003e08:	461a      	mov	r2, r3
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	6293      	str	r3, [r2, #40]	@ 0x28
	wavegen->mute_button_flag = 0;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003e14:	461a      	mov	r2, r3
 8003e16:	2300      	movs	r3, #0
 8003e18:	62d3      	str	r3, [r2, #44]	@ 0x2c
	wavegen->time_prev_button_press = 0;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003e20:	461a      	mov	r2, r3
 8003e22:	2300      	movs	r3, #0
 8003e24:	6313      	str	r3, [r2, #48]	@ 0x30

	wavegen->wave_ping_compute_pending = 0;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003e2c:	461a      	mov	r2, r3
 8003e2e:	2300      	movs	r3, #0
 8003e30:	6093      	str	r3, [r2, #8]
	wavegen->wave_pong_compute_pending = 0;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003e38:	461a      	mov	r2, r3
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	60d3      	str	r3, [r2, #12]
	wavegen->wave_ping_compute_ready = 0;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003e44:	461a      	mov	r2, r3
 8003e46:	2300      	movs	r3, #0
 8003e48:	6113      	str	r3, [r2, #16]
	wavegen->wave_pong_compute_ready = 0;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003e50:	461a      	mov	r2, r3
 8003e52:	2300      	movs	r3, #0
 8003e54:	6153      	str	r3, [r2, #20]

	wavegen->demo_num = 0;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003e5c:	461a      	mov	r2, r3
 8003e5e:	2300      	movs	r3, #0
 8003e60:	6353      	str	r3, [r2, #52]	@ 0x34

	/* set up timer registers */
	wavegen->htim->Instance->PSC = VC_WAVE_TIM_PSC - 1;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	220b      	movs	r2, #11
 8003e6a:	629a      	str	r2, [r3, #40]	@ 0x28
	VibeCheckWaveGen_SetFrequency(wavegen, wavegen->freq_hz);
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003e72:	edd3 7a07 	vldr	s15, [r3, #28]
 8003e76:	eeb0 0a67 	vmov.f32	s0, s15
 8003e7a:	68f8      	ldr	r0, [r7, #12]
 8003e7c:	f000 f920 	bl	80040c0 <VibeCheckWaveGen_SetFrequency>

	/* compute the initial wave (set the DAC to the midpoint to avoid noise) */
	VibeCheckWaveGen_RecomputeWave(wavegen, &wavegen->wave[0]);
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	3308      	adds	r3, #8
 8003e84:	4619      	mov	r1, r3
 8003e86:	68f8      	ldr	r0, [r7, #12]
 8003e88:	f7ff ff3e 	bl	8003d08 <VibeCheckWaveGen_RecomputeWave>
	VibeCheckWaveGen_RecomputeWave(wavegen, &wavegen->wave[VC_WAVE_BUF_LEN]);
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	f603 0308 	addw	r3, r3, #2056	@ 0x808
 8003e92:	4619      	mov	r1, r3
 8003e94:	68f8      	ldr	r0, [r7, #12]
 8003e96:	f7ff ff37 	bl	8003d08 <VibeCheckWaveGen_RecomputeWave>

	/* start the DAC */
	HAL_DAC_Start_DMA(wavegen->hdac, DAC_CHANNEL_1, wavegen->wave, VC_WAVE_BUF_LEN, DAC_ALIGN_12B_R);
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	6858      	ldr	r0, [r3, #4]
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	f103 0208 	add.w	r2, r3, #8
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	9300      	str	r3, [sp, #0]
 8003ea8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003eac:	2100      	movs	r1, #0
 8003eae:	f002 faed 	bl	800648c <HAL_DAC_Start_DMA>
	HAL_DAC_Start_DMA(wavegen->hdac, DAC_CHANNEL_2, wavegen->wave, VC_WAVE_BUF_LEN, DAC_ALIGN_12B_R);
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	6858      	ldr	r0, [r3, #4]
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	f103 0208 	add.w	r2, r3, #8
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	9300      	str	r3, [sp, #0]
 8003ec0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003ec4:	2110      	movs	r1, #16
 8003ec6:	f002 fae1 	bl	800648c <HAL_DAC_Start_DMA>
	HAL_TIM_Base_Start(wavegen->htim);
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4618      	mov	r0, r3
 8003ed0:	f00a f91e 	bl	800e110 <HAL_TIM_Base_Start>

	/* un-mute the output and turn off the mute LED*/
	HAL_GPIO_WritePin(MUTE_SIGNAL_GPIO_Port, MUTE_SIGNAL_Pin, GPIO_PIN_RESET);
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	2108      	movs	r1, #8
 8003ed8:	4807      	ldr	r0, [pc, #28]	@ (8003ef8 <VibeCheckWaveGen_Init+0x13c>)
 8003eda:	f005 f801 	bl	8008ee0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MUTE_INDICATOR_GPIO_Port, MUTE_INDICATOR_Pin, GPIO_PIN_RESET);
 8003ede:	2200      	movs	r2, #0
 8003ee0:	2102      	movs	r1, #2
 8003ee2:	4805      	ldr	r0, [pc, #20]	@ (8003ef8 <VibeCheckWaveGen_Init+0x13c>)
 8003ee4:	f004 fffc 	bl	8008ee0 <HAL_GPIO_WritePin>
}
 8003ee8:	bf00      	nop
 8003eea:	3710      	adds	r7, #16
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bd80      	pop	{r7, pc}
 8003ef0:	43dc0000 	.word	0x43dc0000
 8003ef4:	3a83126f 	.word	0x3a83126f
 8003ef8:	58020000 	.word	0x58020000

08003efc <VibeCheckWaveGen_Update>:

void VibeCheckWaveGen_Update(VibeCheckWaveGen* wavegen)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b084      	sub	sp, #16
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
	/* call in the main loop */

	/* check the mute button */
	uint32_t time = HAL_GetTick();
 8003f04:	f000 fd74 	bl	80049f0 <HAL_GetTick>
 8003f08:	60f8      	str	r0, [r7, #12]
	if (time - wavegen->time_prev_button_press > VC_WAVE_BUTTON_DEBOUNCE_MS && HAL_GPIO_ReadPin(MUTE_BUTTON_GPIO_Port, MUTE_BUTTON_Pin))
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003f10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f12:	68fa      	ldr	r2, [r7, #12]
 8003f14:	1ad3      	subs	r3, r2, r3
 8003f16:	2bfa      	cmp	r3, #250	@ 0xfa
 8003f18:	d939      	bls.n	8003f8e <VibeCheckWaveGen_Update+0x92>
 8003f1a:	2104      	movs	r1, #4
 8003f1c:	4843      	ldr	r0, [pc, #268]	@ (800402c <VibeCheckWaveGen_Update+0x130>)
 8003f1e:	f004 ffc7 	bl	8008eb0 <HAL_GPIO_ReadPin>
 8003f22:	4603      	mov	r3, r0
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d032      	beq.n	8003f8e <VibeCheckWaveGen_Update+0x92>

		/*
		 * the line driver seems to have some kind of slow start built in so no
		 * need to worry about pops when muting via the hardware pin
		 */
		if (wavegen->is_muted)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003f2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d010      	beq.n	8003f56 <VibeCheckWaveGen_Update+0x5a>
		{
			wavegen->is_muted = 0;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003f3a:	461a      	mov	r2, r3
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	6293      	str	r3, [r2, #40]	@ 0x28
			HAL_GPIO_WritePin(MUTE_SIGNAL_GPIO_Port, MUTE_SIGNAL_Pin, GPIO_PIN_RESET);  /* un-mute the output */
 8003f40:	2200      	movs	r2, #0
 8003f42:	2108      	movs	r1, #8
 8003f44:	4839      	ldr	r0, [pc, #228]	@ (800402c <VibeCheckWaveGen_Update+0x130>)
 8003f46:	f004 ffcb 	bl	8008ee0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MUTE_INDICATOR_GPIO_Port, MUTE_INDICATOR_Pin, GPIO_PIN_RESET);  /* turn off the LED */
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	2102      	movs	r1, #2
 8003f4e:	4837      	ldr	r0, [pc, #220]	@ (800402c <VibeCheckWaveGen_Update+0x130>)
 8003f50:	f004 ffc6 	bl	8008ee0 <HAL_GPIO_WritePin>
 8003f54:	e00f      	b.n	8003f76 <VibeCheckWaveGen_Update+0x7a>
		}
		else
		{
			wavegen->is_muted = 1;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003f5c:	461a      	mov	r2, r3
 8003f5e:	2301      	movs	r3, #1
 8003f60:	6293      	str	r3, [r2, #40]	@ 0x28
			HAL_GPIO_WritePin(MUTE_SIGNAL_GPIO_Port, MUTE_SIGNAL_Pin, GPIO_PIN_SET);  /* mute the output */
 8003f62:	2201      	movs	r2, #1
 8003f64:	2108      	movs	r1, #8
 8003f66:	4831      	ldr	r0, [pc, #196]	@ (800402c <VibeCheckWaveGen_Update+0x130>)
 8003f68:	f004 ffba 	bl	8008ee0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MUTE_INDICATOR_GPIO_Port, MUTE_INDICATOR_Pin, GPIO_PIN_SET);  /* turn on the LED */
 8003f6c:	2201      	movs	r2, #1
 8003f6e:	2102      	movs	r1, #2
 8003f70:	482e      	ldr	r0, [pc, #184]	@ (800402c <VibeCheckWaveGen_Update+0x130>)
 8003f72:	f004 ffb5 	bl	8008ee0 <HAL_GPIO_WritePin>
		}

		wavegen->mute_button_flag = 1;  /* can alert the shell via this flag when we press the mute button */
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003f7c:	461a      	mov	r2, r3
 8003f7e:	2301      	movs	r3, #1
 8003f80:	62d3      	str	r3, [r2, #44]	@ 0x2c
		wavegen->time_prev_button_press = time;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003f88:	461a      	mov	r2, r3
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	6313      	str	r3, [r2, #48]	@ 0x30
	}

	/*
	 * to make a smooth transition between waves when a parameter is changed, change the two halves of the double buffer separately
	 */
	if (wavegen->wave_ping_compute_ready)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003f94:	691b      	ldr	r3, [r3, #16]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d00b      	beq.n	8003fb2 <VibeCheckWaveGen_Update+0xb6>
	{
		VibeCheckWaveGen_RecomputeWave(wavegen, &wavegen->wave[0]);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	3308      	adds	r3, #8
 8003f9e:	4619      	mov	r1, r3
 8003fa0:	6878      	ldr	r0, [r7, #4]
 8003fa2:	f7ff feb1 	bl	8003d08 <VibeCheckWaveGen_RecomputeWave>
		wavegen->wave_ping_compute_ready = 0;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003fac:	461a      	mov	r2, r3
 8003fae:	2300      	movs	r3, #0
 8003fb0:	6113      	str	r3, [r2, #16]
	}
	if (wavegen->wave_pong_compute_ready)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003fb8:	695b      	ldr	r3, [r3, #20]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d00c      	beq.n	8003fd8 <VibeCheckWaveGen_Update+0xdc>
	{
		VibeCheckWaveGen_RecomputeWave(wavegen, &wavegen->wave[VC_WAVE_BUF_LEN]);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	f603 0308 	addw	r3, r3, #2056	@ 0x808
 8003fc4:	4619      	mov	r1, r3
 8003fc6:	6878      	ldr	r0, [r7, #4]
 8003fc8:	f7ff fe9e 	bl	8003d08 <VibeCheckWaveGen_RecomputeWave>
		wavegen->wave_pong_compute_ready = 0;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003fd2:	461a      	mov	r2, r3
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	6153      	str	r3, [r2, #20]

	/*
	 * update the sequencer
	 */
	uint32_t seq_index;
	if (Sequencer_Update(&wavegen->sequencer, time, &seq_index))
 8003fd8:	687a      	ldr	r2, [r7, #4]
 8003fda:	f241 0338 	movw	r3, #4152	@ 0x1038
 8003fde:	4413      	add	r3, r2
 8003fe0:	f107 0208 	add.w	r2, r7, #8
 8003fe4:	68f9      	ldr	r1, [r7, #12]
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	f7fd fcac 	bl	8001944 <Sequencer_Update>
 8003fec:	4603      	mov	r3, r0
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d017      	beq.n	8004022 <VibeCheckWaveGen_Update+0x126>
	{
		VibeCheckWaveGen_SetFrequency(wavegen, wavegen->demo_num ? demo_freqs1[seq_index] : demo_freqs0[seq_index]);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003ff8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d006      	beq.n	800400c <VibeCheckWaveGen_Update+0x110>
 8003ffe:	68bb      	ldr	r3, [r7, #8]
 8004000:	4a0b      	ldr	r2, [pc, #44]	@ (8004030 <VibeCheckWaveGen_Update+0x134>)
 8004002:	009b      	lsls	r3, r3, #2
 8004004:	4413      	add	r3, r2
 8004006:	edd3 7a00 	vldr	s15, [r3]
 800400a:	e005      	b.n	8004018 <VibeCheckWaveGen_Update+0x11c>
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	4a09      	ldr	r2, [pc, #36]	@ (8004034 <VibeCheckWaveGen_Update+0x138>)
 8004010:	009b      	lsls	r3, r3, #2
 8004012:	4413      	add	r3, r2
 8004014:	edd3 7a00 	vldr	s15, [r3]
 8004018:	eeb0 0a67 	vmov.f32	s0, s15
 800401c:	6878      	ldr	r0, [r7, #4]
 800401e:	f000 f84f 	bl	80040c0 <VibeCheckWaveGen_SetFrequency>
	}

}
 8004022:	bf00      	nop
 8004024:	3710      	adds	r7, #16
 8004026:	46bd      	mov	sp, r7
 8004028:	bd80      	pop	{r7, pc}
 800402a:	bf00      	nop
 800402c:	58020000 	.word	0x58020000
 8004030:	08019cd8 	.word	0x08019cd8
 8004034:	08019bbc 	.word	0x08019bbc

08004038 <VibeCheckWaveGen_Start>:

void VibeCheckWaveGen_Start(VibeCheckWaveGen* wavegen)
{
 8004038:	b480      	push	{r7}
 800403a:	b083      	sub	sp, #12
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
	if (!wavegen->is_running)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004046:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004048:	2b00      	cmp	r3, #0
 800404a:	d111      	bne.n	8004070 <VibeCheckWaveGen_Start+0x38>
	{
		wavegen->is_running = 1;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004052:	461a      	mov	r2, r3
 8004054:	2301      	movs	r3, #1
 8004056:	6253      	str	r3, [r2, #36]	@ 0x24
		wavegen->wave_ping_compute_pending = 1;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800405e:	461a      	mov	r2, r3
 8004060:	2301      	movs	r3, #1
 8004062:	6093      	str	r3, [r2, #8]
		wavegen->wave_pong_compute_pending = 1;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800406a:	461a      	mov	r2, r3
 800406c:	2301      	movs	r3, #1
 800406e:	60d3      	str	r3, [r2, #12]
	}

}
 8004070:	bf00      	nop
 8004072:	370c      	adds	r7, #12
 8004074:	46bd      	mov	sp, r7
 8004076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407a:	4770      	bx	lr

0800407c <VibeCheckWaveGen_Stop>:

void VibeCheckWaveGen_Stop(VibeCheckWaveGen* wavegen)
{
 800407c:	b480      	push	{r7}
 800407e:	b083      	sub	sp, #12
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
	if (wavegen->is_running)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800408a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800408c:	2b00      	cmp	r3, #0
 800408e:	d011      	beq.n	80040b4 <VibeCheckWaveGen_Stop+0x38>
	{
		wavegen->is_running = 0;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004096:	461a      	mov	r2, r3
 8004098:	2300      	movs	r3, #0
 800409a:	6253      	str	r3, [r2, #36]	@ 0x24
		wavegen->wave_ping_compute_pending = 1;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80040a2:	461a      	mov	r2, r3
 80040a4:	2301      	movs	r3, #1
 80040a6:	6093      	str	r3, [r2, #8]
		wavegen->wave_pong_compute_pending = 1;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80040ae:	461a      	mov	r2, r3
 80040b0:	2301      	movs	r3, #1
 80040b2:	60d3      	str	r3, [r2, #12]
	}
}
 80040b4:	bf00      	nop
 80040b6:	370c      	adds	r7, #12
 80040b8:	46bd      	mov	sp, r7
 80040ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040be:	4770      	bx	lr

080040c0 <VibeCheckWaveGen_SetFrequency>:

void VibeCheckWaveGen_SetFrequency(VibeCheckWaveGen* wavegen, float freq_hz)
{
 80040c0:	b480      	push	{r7}
 80040c2:	b085      	sub	sp, #20
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
 80040c8:	ed87 0a00 	vstr	s0, [r7]
	if (freq_hz < VC_WAVE_MIN_FREQ_HZ)
 80040cc:	edd7 7a00 	vldr	s15, [r7]
 80040d0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80040d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040d8:	d502      	bpl.n	80040e0 <VibeCheckWaveGen_SetFrequency+0x20>
		freq_hz = VC_WAVE_MIN_FREQ_HZ;
 80040da:	f04f 0300 	mov.w	r3, #0
 80040de:	603b      	str	r3, [r7, #0]
	if (freq_hz > VC_WAVE_MAX_FREQ_HZ)
 80040e0:	edd7 7a00 	vldr	s15, [r7]
 80040e4:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 8004160 <VibeCheckWaveGen_SetFrequency+0xa0>
 80040e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80040ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040f0:	dd01      	ble.n	80040f6 <VibeCheckWaveGen_SetFrequency+0x36>
		freq_hz = VC_WAVE_MAX_FREQ_HZ;
 80040f2:	4b1c      	ldr	r3, [pc, #112]	@ (8004164 <VibeCheckWaveGen_SetFrequency+0xa4>)
 80040f4:	603b      	str	r3, [r7, #0]

	uint32_t arr = VC_WAVE_TIM_COUNTS_PER_SECOND / (VC_WAVE_BUF_LEN * freq_hz) - 1;
 80040f6:	edd7 7a00 	vldr	s15, [r7]
 80040fa:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8004168 <VibeCheckWaveGen_SetFrequency+0xa8>
 80040fe:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004102:	eddf 6a1a 	vldr	s13, [pc, #104]	@ 800416c <VibeCheckWaveGen_SetFrequency+0xac>
 8004106:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800410a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800410e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004112:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004116:	ee17 3a90 	vmov	r3, s15
 800411a:	60fb      	str	r3, [r7, #12]
	wavegen->freq_hz = VC_WAVE_TIM_COUNTS_PER_SECOND / ((float)arr + 1.0f) / VC_WAVE_BUF_LEN;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	ee07 3a90 	vmov	s15, r3
 8004122:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004126:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800412a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800412e:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 800416c <VibeCheckWaveGen_SetFrequency+0xac>
 8004132:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004136:	eddf 6a0c 	vldr	s13, [pc, #48]	@ 8004168 <VibeCheckWaveGen_SetFrequency+0xa8>
 800413a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004144:	edc3 7a07 	vstr	s15, [r3, #28]
	wavegen->htim->Instance->ARR = arr;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	68fa      	ldr	r2, [r7, #12]
 8004150:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8004152:	bf00      	nop
 8004154:	3714      	adds	r7, #20
 8004156:	46bd      	mov	sp, r7
 8004158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415c:	4770      	bx	lr
 800415e:	bf00      	nop
 8004160:	46989600 	.word	0x46989600
 8004164:	46989600 	.word	0x46989600
 8004168:	44000000 	.word	0x44000000
 800416c:	4b989680 	.word	0x4b989680

08004170 <VibeCheckWaveGen_GetFrequency>:

float VibeCheckWaveGen_GetFrequency(VibeCheckWaveGen* wavegen)
{
 8004170:	b480      	push	{r7}
 8004172:	b083      	sub	sp, #12
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
	return wavegen->freq_hz;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800417e:	69db      	ldr	r3, [r3, #28]
 8004180:	ee07 3a90 	vmov	s15, r3
}
 8004184:	eeb0 0a67 	vmov.f32	s0, s15
 8004188:	370c      	adds	r7, #12
 800418a:	46bd      	mov	sp, r7
 800418c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004190:	4770      	bx	lr

08004192 <VibeCheckWaveGen_SetAmplitude>:

void VibeCheckWaveGen_SetAmplitude(VibeCheckWaveGen* wavegen, float amplitude)
{
 8004192:	b480      	push	{r7}
 8004194:	b083      	sub	sp, #12
 8004196:	af00      	add	r7, sp, #0
 8004198:	6078      	str	r0, [r7, #4]
 800419a:	ed87 0a00 	vstr	s0, [r7]
	if (amplitude < 0.0f)
 800419e:	edd7 7a00 	vldr	s15, [r7]
 80041a2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80041a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041aa:	d502      	bpl.n	80041b2 <VibeCheckWaveGen_SetAmplitude+0x20>
		amplitude = 0.0f;
 80041ac:	f04f 0300 	mov.w	r3, #0
 80041b0:	603b      	str	r3, [r7, #0]
	if (amplitude > 1.0f)
 80041b2:	edd7 7a00 	vldr	s15, [r7]
 80041b6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80041ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80041be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041c2:	dd02      	ble.n	80041ca <VibeCheckWaveGen_SetAmplitude+0x38>
		amplitude = 1.0f;
 80041c4:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80041c8:	603b      	str	r3, [r7, #0]

	wavegen->amplitude = amplitude;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80041d0:	461a      	mov	r2, r3
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	6213      	str	r3, [r2, #32]
	wavegen->wave_ping_compute_pending = 1;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80041dc:	461a      	mov	r2, r3
 80041de:	2301      	movs	r3, #1
 80041e0:	6093      	str	r3, [r2, #8]
	wavegen->wave_pong_compute_pending = 1;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80041e8:	461a      	mov	r2, r3
 80041ea:	2301      	movs	r3, #1
 80041ec:	60d3      	str	r3, [r2, #12]
}
 80041ee:	bf00      	nop
 80041f0:	370c      	adds	r7, #12
 80041f2:	46bd      	mov	sp, r7
 80041f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f8:	4770      	bx	lr

080041fa <VibeCheckWaveGen_GetAmplitude>:

float VibeCheckWaveGen_GetAmplitude(VibeCheckWaveGen* wavegen)
{
 80041fa:	b480      	push	{r7}
 80041fc:	b083      	sub	sp, #12
 80041fe:	af00      	add	r7, sp, #0
 8004200:	6078      	str	r0, [r7, #4]
	return wavegen->amplitude;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004208:	6a1b      	ldr	r3, [r3, #32]
 800420a:	ee07 3a90 	vmov	s15, r3
}
 800420e:	eeb0 0a67 	vmov.f32	s0, s15
 8004212:	370c      	adds	r7, #12
 8004214:	46bd      	mov	sp, r7
 8004216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421a:	4770      	bx	lr

0800421c <VibeCheckWaveGen_SetWaveform>:

void VibeCheckWaveGen_SetWaveform(VibeCheckWaveGen* wavegen, VibeCheckWaveGen_Waveform waveform)
{
 800421c:	b480      	push	{r7}
 800421e:	b083      	sub	sp, #12
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
 8004224:	460b      	mov	r3, r1
 8004226:	70fb      	strb	r3, [r7, #3]
	wavegen->waveform = waveform;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800422e:	461a      	mov	r2, r3
 8004230:	78fb      	ldrb	r3, [r7, #3]
 8004232:	7613      	strb	r3, [r2, #24]
	wavegen->wave_ping_compute_pending = 1;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800423a:	461a      	mov	r2, r3
 800423c:	2301      	movs	r3, #1
 800423e:	6093      	str	r3, [r2, #8]
	wavegen->wave_pong_compute_pending = 1;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004246:	461a      	mov	r2, r3
 8004248:	2301      	movs	r3, #1
 800424a:	60d3      	str	r3, [r2, #12]
}
 800424c:	bf00      	nop
 800424e:	370c      	adds	r7, #12
 8004250:	46bd      	mov	sp, r7
 8004252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004256:	4770      	bx	lr

08004258 <VibeCheckWaveGen_GetWaveform>:

VibeCheckWaveGen_Waveform VibeCheckWaveGen_GetWaveform(VibeCheckWaveGen* wavegen)
{
 8004258:	b480      	push	{r7}
 800425a:	b083      	sub	sp, #12
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
	return wavegen->waveform;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004266:	7e1b      	ldrb	r3, [r3, #24]
}
 8004268:	4618      	mov	r0, r3
 800426a:	370c      	adds	r7, #12
 800426c:	46bd      	mov	sp, r7
 800426e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004272:	4770      	bx	lr

08004274 <VibeCheckWaveGen_WasMuteButtonPressed>:

uint32_t VibeCheckWaveGen_WasMuteButtonPressed(VibeCheckWaveGen* wavegen, uint32_t* is_muted)
{
 8004274:	b480      	push	{r7}
 8004276:	b083      	sub	sp, #12
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
 800427c:	6039      	str	r1, [r7, #0]
	if (wavegen->mute_button_flag)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004284:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004286:	2b00      	cmp	r3, #0
 8004288:	d00d      	beq.n	80042a6 <VibeCheckWaveGen_WasMuteButtonPressed+0x32>
	{
		wavegen->mute_button_flag = 0;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004290:	461a      	mov	r2, r3
 8004292:	2300      	movs	r3, #0
 8004294:	62d3      	str	r3, [r2, #44]	@ 0x2c
		*is_muted = wavegen->is_muted;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800429c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	601a      	str	r2, [r3, #0]
		return 1;
 80042a2:	2301      	movs	r3, #1
 80042a4:	e000      	b.n	80042a8 <VibeCheckWaveGen_WasMuteButtonPressed+0x34>
	}

	return 0;
 80042a6:	2300      	movs	r3, #0
}
 80042a8:	4618      	mov	r0, r3
 80042aa:	370c      	adds	r7, #12
 80042ac:	46bd      	mov	sp, r7
 80042ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b2:	4770      	bx	lr

080042b4 <VibeCheckWaveGen_DMAHalfCpltCallback>:


/* keeps track of which end of the double buffer to compute when updating the wave */
void VibeCheckWaveGen_DMAHalfCpltCallback(VibeCheckWaveGen* wavegen)
{
 80042b4:	b480      	push	{r7}
 80042b6:	b083      	sub	sp, #12
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
	if (wavegen->wave_ping_compute_pending)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80042c2:	689b      	ldr	r3, [r3, #8]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d00b      	beq.n	80042e0 <VibeCheckWaveGen_DMAHalfCpltCallback+0x2c>
	{
		wavegen->wave_ping_compute_pending = 0;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80042ce:	461a      	mov	r2, r3
 80042d0:	2300      	movs	r3, #0
 80042d2:	6093      	str	r3, [r2, #8]
		wavegen->wave_ping_compute_ready = 1;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80042da:	461a      	mov	r2, r3
 80042dc:	2301      	movs	r3, #1
 80042de:	6113      	str	r3, [r2, #16]
	}
}
 80042e0:	bf00      	nop
 80042e2:	370c      	adds	r7, #12
 80042e4:	46bd      	mov	sp, r7
 80042e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ea:	4770      	bx	lr

080042ec <VibeCheckWaveGen_DMACpltCallback>:

void VibeCheckWaveGen_DMACpltCallback(VibeCheckWaveGen* wavegen)
{
 80042ec:	b480      	push	{r7}
 80042ee:	b083      	sub	sp, #12
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
	if (wavegen->wave_pong_compute_pending)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80042fa:	68db      	ldr	r3, [r3, #12]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d00b      	beq.n	8004318 <VibeCheckWaveGen_DMACpltCallback+0x2c>
	{
		wavegen->wave_pong_compute_pending = 0;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004306:	461a      	mov	r2, r3
 8004308:	2300      	movs	r3, #0
 800430a:	60d3      	str	r3, [r2, #12]
		wavegen->wave_pong_compute_ready = 1;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004312:	461a      	mov	r2, r3
 8004314:	2301      	movs	r3, #1
 8004316:	6153      	str	r3, [r2, #20]
	}
}
 8004318:	bf00      	nop
 800431a:	370c      	adds	r7, #12
 800431c:	46bd      	mov	sp, r7
 800431e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004322:	4770      	bx	lr

08004324 <VibeCheckWaveGen_StartDemo>:



void VibeCheckWaveGen_StartDemo(VibeCheckWaveGen* wavegen)
{
 8004324:	b590      	push	{r4, r7, lr}
 8004326:	b083      	sub	sp, #12
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
	Sequencer_Init(&wavegen->sequencer);
 800432c:	687a      	ldr	r2, [r7, #4]
 800432e:	f241 0338 	movw	r3, #4152	@ 0x1038
 8004332:	4413      	add	r3, r2
 8004334:	4618      	mov	r0, r3
 8004336:	f7fd fad3 	bl	80018e0 <Sequencer_Init>
	if (wavegen->demo_num)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004340:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004342:	2b00      	cmp	r3, #0
 8004344:	d009      	beq.n	800435a <VibeCheckWaveGen_StartDemo+0x36>
		Sequencer_SetSequence(&wavegen->sequencer, demo_times0, sizeof(demo_times0) / sizeof(demo_times0[0]), 1);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	f241 0038 	movw	r0, #4152	@ 0x1038
 800434c:	4418      	add	r0, r3
 800434e:	2301      	movs	r3, #1
 8004350:	221a      	movs	r2, #26
 8004352:	4916      	ldr	r1, [pc, #88]	@ (80043ac <VibeCheckWaveGen_StartDemo+0x88>)
 8004354:	f7fd fae0 	bl	8001918 <Sequencer_SetSequence>
 8004358:	e008      	b.n	800436c <VibeCheckWaveGen_StartDemo+0x48>
	else
		Sequencer_SetSequence(&wavegen->sequencer, demo_times1, sizeof(demo_times1) / sizeof(demo_times1[0]), 1);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	f241 0038 	movw	r0, #4152	@ 0x1038
 8004360:	4418      	add	r0, r3
 8004362:	2301      	movs	r3, #1
 8004364:	222d      	movs	r2, #45	@ 0x2d
 8004366:	4912      	ldr	r1, [pc, #72]	@ (80043b0 <VibeCheckWaveGen_StartDemo+0x8c>)
 8004368:	f7fd fad6 	bl	8001918 <Sequencer_SetSequence>
	wavegen->demo_num = !wavegen->demo_num;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004372:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004374:	2b00      	cmp	r3, #0
 8004376:	bf0c      	ite	eq
 8004378:	2301      	moveq	r3, #1
 800437a:	2300      	movne	r3, #0
 800437c:	b2db      	uxtb	r3, r3
 800437e:	461a      	mov	r2, r3
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004386:	635a      	str	r2, [r3, #52]	@ 0x34
	Sequencer_Start(&wavegen->sequencer, HAL_GetTick());
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	f241 0438 	movw	r4, #4152	@ 0x1038
 800438e:	441c      	add	r4, r3
 8004390:	f000 fb2e 	bl	80049f0 <HAL_GetTick>
 8004394:	4603      	mov	r3, r0
 8004396:	4619      	mov	r1, r3
 8004398:	4620      	mov	r0, r4
 800439a:	f7fd fb15 	bl	80019c8 <Sequencer_Start>
	VibeCheckWaveGen_Start(wavegen);
 800439e:	6878      	ldr	r0, [r7, #4]
 80043a0:	f7ff fe4a 	bl	8004038 <VibeCheckWaveGen_Start>
}
 80043a4:	bf00      	nop
 80043a6:	370c      	adds	r7, #12
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bd90      	pop	{r4, r7, pc}
 80043ac:	08019b54 	.word	0x08019b54
 80043b0:	08019c24 	.word	0x08019c24

080043b4 <VibeCheckWaveGen_StopDemo>:

void VibeCheckWaveGen_StopDemo(VibeCheckWaveGen* wavegen)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b082      	sub	sp, #8
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
	VibeCheckWaveGen_Stop(wavegen);
 80043bc:	6878      	ldr	r0, [r7, #4]
 80043be:	f7ff fe5d 	bl	800407c <VibeCheckWaveGen_Stop>
	Sequencer_Stop(&wavegen->sequencer);
 80043c2:	687a      	ldr	r2, [r7, #4]
 80043c4:	f241 0338 	movw	r3, #4152	@ 0x1038
 80043c8:	4413      	add	r3, r2
 80043ca:	4618      	mov	r0, r3
 80043cc:	f7fd fb10 	bl	80019f0 <Sequencer_Stop>
}
 80043d0:	bf00      	nop
 80043d2:	3708      	adds	r7, #8
 80043d4:	46bd      	mov	sp, r7
 80043d6:	bd80      	pop	{r7, pc}

080043d8 <VibeCheckWaveGenCMD_Set>:
*/



static uint32_t VibeCheckWaveGenCMD_Set(VibeCheckWaveGen* wavegen, VibeCheckShell* shell)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b094      	sub	sp, #80	@ 0x50
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
 80043e0:	6039      	str	r1, [r7, #0]
	char str[VC_SHELL_MAX_TOKEN_LEN];
	if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 80043e2:	f107 0310 	add.w	r3, r7, #16
 80043e6:	2240      	movs	r2, #64	@ 0x40
 80043e8:	4619      	mov	r1, r3
 80043ea:	6838      	ldr	r0, [r7, #0]
 80043ec:	f7fe fe4e 	bl	800308c <VibeCheckShell_GetNextString>
 80043f0:	4603      	mov	r3, r0
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	f000 80b0 	beq.w	8004558 <VibeCheckWaveGenCMD_Set+0x180>
	{
		if (!strcmp(str, "frequency"))
 80043f8:	f107 0310 	add.w	r3, r7, #16
 80043fc:	4959      	ldr	r1, [pc, #356]	@ (8004564 <VibeCheckWaveGenCMD_Set+0x18c>)
 80043fe:	4618      	mov	r0, r3
 8004400:	f7fb ff86 	bl	8000310 <strcmp>
 8004404:	4603      	mov	r3, r0
 8004406:	2b00      	cmp	r3, #0
 8004408:	d119      	bne.n	800443e <VibeCheckWaveGenCMD_Set+0x66>
		{
			float val;
			if (VibeCheckShell_GetNextFloat(shell, &val))
 800440a:	f107 030c 	add.w	r3, r7, #12
 800440e:	4619      	mov	r1, r3
 8004410:	6838      	ldr	r0, [r7, #0]
 8004412:	f7fe feab 	bl	800316c <VibeCheckShell_GetNextFloat>
 8004416:	4603      	mov	r3, r0
 8004418:	2b00      	cmp	r3, #0
 800441a:	f000 809d 	beq.w	8004558 <VibeCheckWaveGenCMD_Set+0x180>
			{
				VibeCheckWaveGen_SetFrequency(wavegen, val);
 800441e:	edd7 7a03 	vldr	s15, [r7, #12]
 8004422:	eeb0 0a67 	vmov.f32	s0, s15
 8004426:	6878      	ldr	r0, [r7, #4]
 8004428:	f7ff fe4a 	bl	80040c0 <VibeCheckWaveGen_SetFrequency>
				VibeCheckShell_PutOutputString(shell, "ack");
 800442c:	494e      	ldr	r1, [pc, #312]	@ (8004568 <VibeCheckWaveGenCMD_Set+0x190>)
 800442e:	6838      	ldr	r0, [r7, #0]
 8004430:	f7fe fee6 	bl	8003200 <VibeCheckShell_PutOutputString>
				VibeCheckShell_PutOutputDelimiter(shell);
 8004434:	6838      	ldr	r0, [r7, #0]
 8004436:	f7fe ff61 	bl	80032fc <VibeCheckShell_PutOutputDelimiter>
				return 1;
 800443a:	2301      	movs	r3, #1
 800443c:	e08d      	b.n	800455a <VibeCheckWaveGenCMD_Set+0x182>
			}
		}
		else if (!strcmp(str, "amplitude"))
 800443e:	f107 0310 	add.w	r3, r7, #16
 8004442:	494a      	ldr	r1, [pc, #296]	@ (800456c <VibeCheckWaveGenCMD_Set+0x194>)
 8004444:	4618      	mov	r0, r3
 8004446:	f7fb ff63 	bl	8000310 <strcmp>
 800444a:	4603      	mov	r3, r0
 800444c:	2b00      	cmp	r3, #0
 800444e:	d118      	bne.n	8004482 <VibeCheckWaveGenCMD_Set+0xaa>
		{
			float val;
			if (VibeCheckShell_GetNextFloat(shell, &val))
 8004450:	f107 0308 	add.w	r3, r7, #8
 8004454:	4619      	mov	r1, r3
 8004456:	6838      	ldr	r0, [r7, #0]
 8004458:	f7fe fe88 	bl	800316c <VibeCheckShell_GetNextFloat>
 800445c:	4603      	mov	r3, r0
 800445e:	2b00      	cmp	r3, #0
 8004460:	d07a      	beq.n	8004558 <VibeCheckWaveGenCMD_Set+0x180>
			{
				VibeCheckWaveGen_SetAmplitude(wavegen, val);
 8004462:	edd7 7a02 	vldr	s15, [r7, #8]
 8004466:	eeb0 0a67 	vmov.f32	s0, s15
 800446a:	6878      	ldr	r0, [r7, #4]
 800446c:	f7ff fe91 	bl	8004192 <VibeCheckWaveGen_SetAmplitude>
				VibeCheckShell_PutOutputString(shell, "ack");
 8004470:	493d      	ldr	r1, [pc, #244]	@ (8004568 <VibeCheckWaveGenCMD_Set+0x190>)
 8004472:	6838      	ldr	r0, [r7, #0]
 8004474:	f7fe fec4 	bl	8003200 <VibeCheckShell_PutOutputString>
				VibeCheckShell_PutOutputDelimiter(shell);
 8004478:	6838      	ldr	r0, [r7, #0]
 800447a:	f7fe ff3f 	bl	80032fc <VibeCheckShell_PutOutputDelimiter>
				return 1;
 800447e:	2301      	movs	r3, #1
 8004480:	e06b      	b.n	800455a <VibeCheckWaveGenCMD_Set+0x182>
			}
		}
		else if (!strcmp(str, "waveform"))
 8004482:	f107 0310 	add.w	r3, r7, #16
 8004486:	493a      	ldr	r1, [pc, #232]	@ (8004570 <VibeCheckWaveGenCMD_Set+0x198>)
 8004488:	4618      	mov	r0, r3
 800448a:	f7fb ff41 	bl	8000310 <strcmp>
 800448e:	4603      	mov	r3, r0
 8004490:	2b00      	cmp	r3, #0
 8004492:	d161      	bne.n	8004558 <VibeCheckWaveGenCMD_Set+0x180>
		{
			if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 8004494:	f107 0310 	add.w	r3, r7, #16
 8004498:	2240      	movs	r2, #64	@ 0x40
 800449a:	4619      	mov	r1, r3
 800449c:	6838      	ldr	r0, [r7, #0]
 800449e:	f7fe fdf5 	bl	800308c <VibeCheckShell_GetNextString>
 80044a2:	4603      	mov	r3, r0
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d057      	beq.n	8004558 <VibeCheckWaveGenCMD_Set+0x180>
			{
				if (!strcmp(str, "sine"))
 80044a8:	f107 0310 	add.w	r3, r7, #16
 80044ac:	4931      	ldr	r1, [pc, #196]	@ (8004574 <VibeCheckWaveGenCMD_Set+0x19c>)
 80044ae:	4618      	mov	r0, r3
 80044b0:	f7fb ff2e 	bl	8000310 <strcmp>
 80044b4:	4603      	mov	r3, r0
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d10c      	bne.n	80044d4 <VibeCheckWaveGenCMD_Set+0xfc>
				{
					VibeCheckWaveGen_SetWaveform(wavegen, VC_WAVE_SINE);
 80044ba:	2100      	movs	r1, #0
 80044bc:	6878      	ldr	r0, [r7, #4]
 80044be:	f7ff fead 	bl	800421c <VibeCheckWaveGen_SetWaveform>
					VibeCheckShell_PutOutputString(shell, "ack");
 80044c2:	4929      	ldr	r1, [pc, #164]	@ (8004568 <VibeCheckWaveGenCMD_Set+0x190>)
 80044c4:	6838      	ldr	r0, [r7, #0]
 80044c6:	f7fe fe9b 	bl	8003200 <VibeCheckShell_PutOutputString>
					VibeCheckShell_PutOutputDelimiter(shell);
 80044ca:	6838      	ldr	r0, [r7, #0]
 80044cc:	f7fe ff16 	bl	80032fc <VibeCheckShell_PutOutputDelimiter>
					return 1;
 80044d0:	2301      	movs	r3, #1
 80044d2:	e042      	b.n	800455a <VibeCheckWaveGenCMD_Set+0x182>
				}
				else if (!strcmp(str, "square"))
 80044d4:	f107 0310 	add.w	r3, r7, #16
 80044d8:	4927      	ldr	r1, [pc, #156]	@ (8004578 <VibeCheckWaveGenCMD_Set+0x1a0>)
 80044da:	4618      	mov	r0, r3
 80044dc:	f7fb ff18 	bl	8000310 <strcmp>
 80044e0:	4603      	mov	r3, r0
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d10c      	bne.n	8004500 <VibeCheckWaveGenCMD_Set+0x128>
				{
					VibeCheckWaveGen_SetWaveform(wavegen, VC_WAVE_SQUARE);
 80044e6:	2101      	movs	r1, #1
 80044e8:	6878      	ldr	r0, [r7, #4]
 80044ea:	f7ff fe97 	bl	800421c <VibeCheckWaveGen_SetWaveform>
					VibeCheckShell_PutOutputString(shell, "ack");
 80044ee:	491e      	ldr	r1, [pc, #120]	@ (8004568 <VibeCheckWaveGenCMD_Set+0x190>)
 80044f0:	6838      	ldr	r0, [r7, #0]
 80044f2:	f7fe fe85 	bl	8003200 <VibeCheckShell_PutOutputString>
					VibeCheckShell_PutOutputDelimiter(shell);
 80044f6:	6838      	ldr	r0, [r7, #0]
 80044f8:	f7fe ff00 	bl	80032fc <VibeCheckShell_PutOutputDelimiter>
					return 1;
 80044fc:	2301      	movs	r3, #1
 80044fe:	e02c      	b.n	800455a <VibeCheckWaveGenCMD_Set+0x182>
				}
				else if (!strcmp(str, "saw"))
 8004500:	f107 0310 	add.w	r3, r7, #16
 8004504:	491d      	ldr	r1, [pc, #116]	@ (800457c <VibeCheckWaveGenCMD_Set+0x1a4>)
 8004506:	4618      	mov	r0, r3
 8004508:	f7fb ff02 	bl	8000310 <strcmp>
 800450c:	4603      	mov	r3, r0
 800450e:	2b00      	cmp	r3, #0
 8004510:	d10c      	bne.n	800452c <VibeCheckWaveGenCMD_Set+0x154>
				{
					VibeCheckWaveGen_SetWaveform(wavegen, VC_WAVE_SAW);
 8004512:	2102      	movs	r1, #2
 8004514:	6878      	ldr	r0, [r7, #4]
 8004516:	f7ff fe81 	bl	800421c <VibeCheckWaveGen_SetWaveform>
					VibeCheckShell_PutOutputString(shell, "ack");
 800451a:	4913      	ldr	r1, [pc, #76]	@ (8004568 <VibeCheckWaveGenCMD_Set+0x190>)
 800451c:	6838      	ldr	r0, [r7, #0]
 800451e:	f7fe fe6f 	bl	8003200 <VibeCheckShell_PutOutputString>
					VibeCheckShell_PutOutputDelimiter(shell);
 8004522:	6838      	ldr	r0, [r7, #0]
 8004524:	f7fe feea 	bl	80032fc <VibeCheckShell_PutOutputDelimiter>
					return 1;
 8004528:	2301      	movs	r3, #1
 800452a:	e016      	b.n	800455a <VibeCheckWaveGenCMD_Set+0x182>
				}
				else if (!strcmp(str, "triangle"))
 800452c:	f107 0310 	add.w	r3, r7, #16
 8004530:	4913      	ldr	r1, [pc, #76]	@ (8004580 <VibeCheckWaveGenCMD_Set+0x1a8>)
 8004532:	4618      	mov	r0, r3
 8004534:	f7fb feec 	bl	8000310 <strcmp>
 8004538:	4603      	mov	r3, r0
 800453a:	2b00      	cmp	r3, #0
 800453c:	d10c      	bne.n	8004558 <VibeCheckWaveGenCMD_Set+0x180>
				{
					VibeCheckWaveGen_SetWaveform(wavegen, VC_WAVE_TRIANGLE);
 800453e:	2103      	movs	r1, #3
 8004540:	6878      	ldr	r0, [r7, #4]
 8004542:	f7ff fe6b 	bl	800421c <VibeCheckWaveGen_SetWaveform>
					VibeCheckShell_PutOutputString(shell, "ack");
 8004546:	4908      	ldr	r1, [pc, #32]	@ (8004568 <VibeCheckWaveGenCMD_Set+0x190>)
 8004548:	6838      	ldr	r0, [r7, #0]
 800454a:	f7fe fe59 	bl	8003200 <VibeCheckShell_PutOutputString>
					VibeCheckShell_PutOutputDelimiter(shell);
 800454e:	6838      	ldr	r0, [r7, #0]
 8004550:	f7fe fed4 	bl	80032fc <VibeCheckShell_PutOutputDelimiter>
					return 1;
 8004554:	2301      	movs	r3, #1
 8004556:	e000      	b.n	800455a <VibeCheckWaveGenCMD_Set+0x182>
				}
			}
		}
	}

	return 0;
 8004558:	2300      	movs	r3, #0
}
 800455a:	4618      	mov	r0, r3
 800455c:	3750      	adds	r7, #80	@ 0x50
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}
 8004562:	bf00      	nop
 8004564:	08019a8c 	.word	0x08019a8c
 8004568:	08019a98 	.word	0x08019a98
 800456c:	08019a9c 	.word	0x08019a9c
 8004570:	08019aa8 	.word	0x08019aa8
 8004574:	08019ab4 	.word	0x08019ab4
 8004578:	08019abc 	.word	0x08019abc
 800457c:	08019ac4 	.word	0x08019ac4
 8004580:	08019ac8 	.word	0x08019ac8

08004584 <VibeCheckWaveGenCMD_Get>:

static uint32_t VibeCheckWaveGenCMD_Get(VibeCheckWaveGen* wavegen, VibeCheckShell* shell)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b092      	sub	sp, #72	@ 0x48
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
 800458c:	6039      	str	r1, [r7, #0]
	char str[VC_SHELL_MAX_TOKEN_LEN];
	if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 800458e:	f107 0308 	add.w	r3, r7, #8
 8004592:	2240      	movs	r2, #64	@ 0x40
 8004594:	4619      	mov	r1, r3
 8004596:	6838      	ldr	r0, [r7, #0]
 8004598:	f7fe fd78 	bl	800308c <VibeCheckShell_GetNextString>
 800459c:	4603      	mov	r3, r0
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d077      	beq.n	8004692 <VibeCheckWaveGenCMD_Get+0x10e>
	{
		if (!strcmp(str, "frequency"))
 80045a2:	f107 0308 	add.w	r3, r7, #8
 80045a6:	493d      	ldr	r1, [pc, #244]	@ (800469c <VibeCheckWaveGenCMD_Get+0x118>)
 80045a8:	4618      	mov	r0, r3
 80045aa:	f7fb feb1 	bl	8000310 <strcmp>
 80045ae:	4603      	mov	r3, r0
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d115      	bne.n	80045e0 <VibeCheckWaveGenCMD_Get+0x5c>
		{
			VibeCheckShell_PutOutputString(shell, "ack");
 80045b4:	493a      	ldr	r1, [pc, #232]	@ (80046a0 <VibeCheckWaveGenCMD_Get+0x11c>)
 80045b6:	6838      	ldr	r0, [r7, #0]
 80045b8:	f7fe fe22 	bl	8003200 <VibeCheckShell_PutOutputString>
			VibeCheckShell_PutOutputSeparator(shell);
 80045bc:	6838      	ldr	r0, [r7, #0]
 80045be:	f7fe fe8f 	bl	80032e0 <VibeCheckShell_PutOutputSeparator>
			VibeCheckShell_PutOutputFloat(shell, VibeCheckWaveGen_GetFrequency(wavegen));
 80045c2:	6878      	ldr	r0, [r7, #4]
 80045c4:	f7ff fdd4 	bl	8004170 <VibeCheckWaveGen_GetFrequency>
 80045c8:	eef0 7a40 	vmov.f32	s15, s0
 80045cc:	eeb0 0a67 	vmov.f32	s0, s15
 80045d0:	6838      	ldr	r0, [r7, #0]
 80045d2:	f7fe fe67 	bl	80032a4 <VibeCheckShell_PutOutputFloat>
			VibeCheckShell_PutOutputDelimiter(shell);
 80045d6:	6838      	ldr	r0, [r7, #0]
 80045d8:	f7fe fe90 	bl	80032fc <VibeCheckShell_PutOutputDelimiter>
			return 1;
 80045dc:	2301      	movs	r3, #1
 80045de:	e059      	b.n	8004694 <VibeCheckWaveGenCMD_Get+0x110>
		}
		else if (!strcmp(str, "amplitude"))
 80045e0:	f107 0308 	add.w	r3, r7, #8
 80045e4:	492f      	ldr	r1, [pc, #188]	@ (80046a4 <VibeCheckWaveGenCMD_Get+0x120>)
 80045e6:	4618      	mov	r0, r3
 80045e8:	f7fb fe92 	bl	8000310 <strcmp>
 80045ec:	4603      	mov	r3, r0
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d115      	bne.n	800461e <VibeCheckWaveGenCMD_Get+0x9a>
		{
			VibeCheckShell_PutOutputString(shell, "ack");
 80045f2:	492b      	ldr	r1, [pc, #172]	@ (80046a0 <VibeCheckWaveGenCMD_Get+0x11c>)
 80045f4:	6838      	ldr	r0, [r7, #0]
 80045f6:	f7fe fe03 	bl	8003200 <VibeCheckShell_PutOutputString>
			VibeCheckShell_PutOutputSeparator(shell);
 80045fa:	6838      	ldr	r0, [r7, #0]
 80045fc:	f7fe fe70 	bl	80032e0 <VibeCheckShell_PutOutputSeparator>
			VibeCheckShell_PutOutputFloat(shell, VibeCheckWaveGen_GetAmplitude(wavegen));
 8004600:	6878      	ldr	r0, [r7, #4]
 8004602:	f7ff fdfa 	bl	80041fa <VibeCheckWaveGen_GetAmplitude>
 8004606:	eef0 7a40 	vmov.f32	s15, s0
 800460a:	eeb0 0a67 	vmov.f32	s0, s15
 800460e:	6838      	ldr	r0, [r7, #0]
 8004610:	f7fe fe48 	bl	80032a4 <VibeCheckShell_PutOutputFloat>
			VibeCheckShell_PutOutputDelimiter(shell);
 8004614:	6838      	ldr	r0, [r7, #0]
 8004616:	f7fe fe71 	bl	80032fc <VibeCheckShell_PutOutputDelimiter>
			return 1;
 800461a:	2301      	movs	r3, #1
 800461c:	e03a      	b.n	8004694 <VibeCheckWaveGenCMD_Get+0x110>
		}
		else if (!strcmp(str, "waveform"))
 800461e:	f107 0308 	add.w	r3, r7, #8
 8004622:	4921      	ldr	r1, [pc, #132]	@ (80046a8 <VibeCheckWaveGenCMD_Get+0x124>)
 8004624:	4618      	mov	r0, r3
 8004626:	f7fb fe73 	bl	8000310 <strcmp>
 800462a:	4603      	mov	r3, r0
 800462c:	2b00      	cmp	r3, #0
 800462e:	d130      	bne.n	8004692 <VibeCheckWaveGenCMD_Get+0x10e>
		{
			VibeCheckShell_PutOutputString(shell, "ack");
 8004630:	491b      	ldr	r1, [pc, #108]	@ (80046a0 <VibeCheckWaveGenCMD_Get+0x11c>)
 8004632:	6838      	ldr	r0, [r7, #0]
 8004634:	f7fe fde4 	bl	8003200 <VibeCheckShell_PutOutputString>
			VibeCheckShell_PutOutputSeparator(shell);
 8004638:	6838      	ldr	r0, [r7, #0]
 800463a:	f7fe fe51 	bl	80032e0 <VibeCheckShell_PutOutputSeparator>
			switch (VibeCheckWaveGen_GetWaveform(wavegen))
 800463e:	6878      	ldr	r0, [r7, #4]
 8004640:	f7ff fe0a 	bl	8004258 <VibeCheckWaveGen_GetWaveform>
 8004644:	4603      	mov	r3, r0
 8004646:	2b03      	cmp	r3, #3
 8004648:	d81e      	bhi.n	8004688 <VibeCheckWaveGenCMD_Get+0x104>
 800464a:	a201      	add	r2, pc, #4	@ (adr r2, 8004650 <VibeCheckWaveGenCMD_Get+0xcc>)
 800464c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004650:	08004661 	.word	0x08004661
 8004654:	0800466b 	.word	0x0800466b
 8004658:	08004675 	.word	0x08004675
 800465c:	0800467f 	.word	0x0800467f
			{
			case VC_WAVE_SINE:
				VibeCheckShell_PutOutputString(shell, "sine");
 8004660:	4912      	ldr	r1, [pc, #72]	@ (80046ac <VibeCheckWaveGenCMD_Get+0x128>)
 8004662:	6838      	ldr	r0, [r7, #0]
 8004664:	f7fe fdcc 	bl	8003200 <VibeCheckShell_PutOutputString>
				break;
 8004668:	e00e      	b.n	8004688 <VibeCheckWaveGenCMD_Get+0x104>
			case VC_WAVE_SQUARE:
				VibeCheckShell_PutOutputString(shell, "square");
 800466a:	4911      	ldr	r1, [pc, #68]	@ (80046b0 <VibeCheckWaveGenCMD_Get+0x12c>)
 800466c:	6838      	ldr	r0, [r7, #0]
 800466e:	f7fe fdc7 	bl	8003200 <VibeCheckShell_PutOutputString>
				break;
 8004672:	e009      	b.n	8004688 <VibeCheckWaveGenCMD_Get+0x104>
			case VC_WAVE_SAW:
				VibeCheckShell_PutOutputString(shell, "saw");
 8004674:	490f      	ldr	r1, [pc, #60]	@ (80046b4 <VibeCheckWaveGenCMD_Get+0x130>)
 8004676:	6838      	ldr	r0, [r7, #0]
 8004678:	f7fe fdc2 	bl	8003200 <VibeCheckShell_PutOutputString>
				break;
 800467c:	e004      	b.n	8004688 <VibeCheckWaveGenCMD_Get+0x104>
			case VC_WAVE_TRIANGLE:
				VibeCheckShell_PutOutputString(shell, "triangle");
 800467e:	490e      	ldr	r1, [pc, #56]	@ (80046b8 <VibeCheckWaveGenCMD_Get+0x134>)
 8004680:	6838      	ldr	r0, [r7, #0]
 8004682:	f7fe fdbd 	bl	8003200 <VibeCheckShell_PutOutputString>
				break;
 8004686:	bf00      	nop
			}
			VibeCheckShell_PutOutputDelimiter(shell);
 8004688:	6838      	ldr	r0, [r7, #0]
 800468a:	f7fe fe37 	bl	80032fc <VibeCheckShell_PutOutputDelimiter>
			return 1;
 800468e:	2301      	movs	r3, #1
 8004690:	e000      	b.n	8004694 <VibeCheckWaveGenCMD_Get+0x110>
		}
	}

	return 0;
 8004692:	2300      	movs	r3, #0
}
 8004694:	4618      	mov	r0, r3
 8004696:	3748      	adds	r7, #72	@ 0x48
 8004698:	46bd      	mov	sp, r7
 800469a:	bd80      	pop	{r7, pc}
 800469c:	08019a8c 	.word	0x08019a8c
 80046a0:	08019a98 	.word	0x08019a98
 80046a4:	08019a9c 	.word	0x08019a9c
 80046a8:	08019aa8 	.word	0x08019aa8
 80046ac:	08019ab4 	.word	0x08019ab4
 80046b0:	08019abc 	.word	0x08019abc
 80046b4:	08019ac4 	.word	0x08019ac4
 80046b8:	08019ac8 	.word	0x08019ac8

080046bc <VibeCheckWaveGenCMD_Execute>:


uint32_t VibeCheckWaveGenCMD_Execute(void* obj, VibeCheckShell* shell)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b094      	sub	sp, #80	@ 0x50
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
 80046c4:	6039      	str	r1, [r7, #0]
	VibeCheckWaveGen* wavegen = (VibeCheckWaveGen*)obj;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	64fb      	str	r3, [r7, #76]	@ 0x4c

	char str[VC_SHELL_MAX_TOKEN_LEN];
	if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 80046ca:	f107 030c 	add.w	r3, r7, #12
 80046ce:	2240      	movs	r2, #64	@ 0x40
 80046d0:	4619      	mov	r1, r3
 80046d2:	6838      	ldr	r0, [r7, #0]
 80046d4:	f7fe fcda 	bl	800308c <VibeCheckShell_GetNextString>
 80046d8:	4603      	mov	r3, r0
 80046da:	2b00      	cmp	r3, #0
 80046dc:	f000 808b 	beq.w	80047f6 <VibeCheckWaveGenCMD_Execute+0x13a>
	{
		if (!strcmp(str, "start"))
 80046e0:	f107 030c 	add.w	r3, r7, #12
 80046e4:	4946      	ldr	r1, [pc, #280]	@ (8004800 <VibeCheckWaveGenCMD_Execute+0x144>)
 80046e6:	4618      	mov	r0, r3
 80046e8:	f7fb fe12 	bl	8000310 <strcmp>
 80046ec:	4603      	mov	r3, r0
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d10b      	bne.n	800470a <VibeCheckWaveGenCMD_Execute+0x4e>
		{
			VibeCheckWaveGen_Start(wavegen);
 80046f2:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80046f4:	f7ff fca0 	bl	8004038 <VibeCheckWaveGen_Start>
			VibeCheckShell_PutOutputString(shell, "ack");
 80046f8:	4942      	ldr	r1, [pc, #264]	@ (8004804 <VibeCheckWaveGenCMD_Execute+0x148>)
 80046fa:	6838      	ldr	r0, [r7, #0]
 80046fc:	f7fe fd80 	bl	8003200 <VibeCheckShell_PutOutputString>
			VibeCheckShell_PutOutputDelimiter(shell);
 8004700:	6838      	ldr	r0, [r7, #0]
 8004702:	f7fe fdfb 	bl	80032fc <VibeCheckShell_PutOutputDelimiter>
			return 1;
 8004706:	2301      	movs	r3, #1
 8004708:	e076      	b.n	80047f8 <VibeCheckWaveGenCMD_Execute+0x13c>
		}
		else if (!strcmp(str, "stop"))
 800470a:	f107 030c 	add.w	r3, r7, #12
 800470e:	493e      	ldr	r1, [pc, #248]	@ (8004808 <VibeCheckWaveGenCMD_Execute+0x14c>)
 8004710:	4618      	mov	r0, r3
 8004712:	f7fb fdfd 	bl	8000310 <strcmp>
 8004716:	4603      	mov	r3, r0
 8004718:	2b00      	cmp	r3, #0
 800471a:	d10b      	bne.n	8004734 <VibeCheckWaveGenCMD_Execute+0x78>
		{
			VibeCheckWaveGen_Stop(wavegen);
 800471c:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800471e:	f7ff fcad 	bl	800407c <VibeCheckWaveGen_Stop>
			VibeCheckShell_PutOutputString(shell, "ack");
 8004722:	4938      	ldr	r1, [pc, #224]	@ (8004804 <VibeCheckWaveGenCMD_Execute+0x148>)
 8004724:	6838      	ldr	r0, [r7, #0]
 8004726:	f7fe fd6b 	bl	8003200 <VibeCheckShell_PutOutputString>
			VibeCheckShell_PutOutputDelimiter(shell);
 800472a:	6838      	ldr	r0, [r7, #0]
 800472c:	f7fe fde6 	bl	80032fc <VibeCheckShell_PutOutputDelimiter>
			return 1;
 8004730:	2301      	movs	r3, #1
 8004732:	e061      	b.n	80047f8 <VibeCheckWaveGenCMD_Execute+0x13c>
		}
		else if (!strcmp(str, "set"))
 8004734:	f107 030c 	add.w	r3, r7, #12
 8004738:	4934      	ldr	r1, [pc, #208]	@ (800480c <VibeCheckWaveGenCMD_Execute+0x150>)
 800473a:	4618      	mov	r0, r3
 800473c:	f7fb fde8 	bl	8000310 <strcmp>
 8004740:	4603      	mov	r3, r0
 8004742:	2b00      	cmp	r3, #0
 8004744:	d108      	bne.n	8004758 <VibeCheckWaveGenCMD_Execute+0x9c>
		{
			if (VibeCheckWaveGenCMD_Set(wavegen, shell))
 8004746:	6839      	ldr	r1, [r7, #0]
 8004748:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800474a:	f7ff fe45 	bl	80043d8 <VibeCheckWaveGenCMD_Set>
 800474e:	4603      	mov	r3, r0
 8004750:	2b00      	cmp	r3, #0
 8004752:	d050      	beq.n	80047f6 <VibeCheckWaveGenCMD_Execute+0x13a>
			{
				return 1;
 8004754:	2301      	movs	r3, #1
 8004756:	e04f      	b.n	80047f8 <VibeCheckWaveGenCMD_Execute+0x13c>
			}
		}
		else if (!strcmp(str, "get"))
 8004758:	f107 030c 	add.w	r3, r7, #12
 800475c:	492c      	ldr	r1, [pc, #176]	@ (8004810 <VibeCheckWaveGenCMD_Execute+0x154>)
 800475e:	4618      	mov	r0, r3
 8004760:	f7fb fdd6 	bl	8000310 <strcmp>
 8004764:	4603      	mov	r3, r0
 8004766:	2b00      	cmp	r3, #0
 8004768:	d108      	bne.n	800477c <VibeCheckWaveGenCMD_Execute+0xc0>
		{
			if (VibeCheckWaveGenCMD_Get(wavegen, shell))
 800476a:	6839      	ldr	r1, [r7, #0]
 800476c:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800476e:	f7ff ff09 	bl	8004584 <VibeCheckWaveGenCMD_Get>
 8004772:	4603      	mov	r3, r0
 8004774:	2b00      	cmp	r3, #0
 8004776:	d03e      	beq.n	80047f6 <VibeCheckWaveGenCMD_Execute+0x13a>
			{
				return 1;
 8004778:	2301      	movs	r3, #1
 800477a:	e03d      	b.n	80047f8 <VibeCheckWaveGenCMD_Execute+0x13c>
			}
		}
		else if (!strcmp(str, "demo"))
 800477c:	f107 030c 	add.w	r3, r7, #12
 8004780:	4924      	ldr	r1, [pc, #144]	@ (8004814 <VibeCheckWaveGenCMD_Execute+0x158>)
 8004782:	4618      	mov	r0, r3
 8004784:	f7fb fdc4 	bl	8000310 <strcmp>
 8004788:	4603      	mov	r3, r0
 800478a:	2b00      	cmp	r3, #0
 800478c:	d133      	bne.n	80047f6 <VibeCheckWaveGenCMD_Execute+0x13a>
		{
			if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 800478e:	f107 030c 	add.w	r3, r7, #12
 8004792:	2240      	movs	r2, #64	@ 0x40
 8004794:	4619      	mov	r1, r3
 8004796:	6838      	ldr	r0, [r7, #0]
 8004798:	f7fe fc78 	bl	800308c <VibeCheckShell_GetNextString>
 800479c:	4603      	mov	r3, r0
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d029      	beq.n	80047f6 <VibeCheckWaveGenCMD_Execute+0x13a>
			{
				if (!strcmp(str, "start"))
 80047a2:	f107 030c 	add.w	r3, r7, #12
 80047a6:	4916      	ldr	r1, [pc, #88]	@ (8004800 <VibeCheckWaveGenCMD_Execute+0x144>)
 80047a8:	4618      	mov	r0, r3
 80047aa:	f7fb fdb1 	bl	8000310 <strcmp>
 80047ae:	4603      	mov	r3, r0
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d10b      	bne.n	80047cc <VibeCheckWaveGenCMD_Execute+0x110>
				{
					VibeCheckWaveGen_StartDemo(wavegen);
 80047b4:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80047b6:	f7ff fdb5 	bl	8004324 <VibeCheckWaveGen_StartDemo>
					VibeCheckShell_PutOutputString(shell, "ack");
 80047ba:	4912      	ldr	r1, [pc, #72]	@ (8004804 <VibeCheckWaveGenCMD_Execute+0x148>)
 80047bc:	6838      	ldr	r0, [r7, #0]
 80047be:	f7fe fd1f 	bl	8003200 <VibeCheckShell_PutOutputString>
					VibeCheckShell_PutOutputDelimiter(shell);
 80047c2:	6838      	ldr	r0, [r7, #0]
 80047c4:	f7fe fd9a 	bl	80032fc <VibeCheckShell_PutOutputDelimiter>
					return 1;
 80047c8:	2301      	movs	r3, #1
 80047ca:	e015      	b.n	80047f8 <VibeCheckWaveGenCMD_Execute+0x13c>
				}
				else if (!strcmp(str, "stop"))
 80047cc:	f107 030c 	add.w	r3, r7, #12
 80047d0:	490d      	ldr	r1, [pc, #52]	@ (8004808 <VibeCheckWaveGenCMD_Execute+0x14c>)
 80047d2:	4618      	mov	r0, r3
 80047d4:	f7fb fd9c 	bl	8000310 <strcmp>
 80047d8:	4603      	mov	r3, r0
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d10b      	bne.n	80047f6 <VibeCheckWaveGenCMD_Execute+0x13a>
				{
					VibeCheckWaveGen_StopDemo(wavegen);
 80047de:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80047e0:	f7ff fde8 	bl	80043b4 <VibeCheckWaveGen_StopDemo>
					VibeCheckShell_PutOutputString(shell, "ack");
 80047e4:	4907      	ldr	r1, [pc, #28]	@ (8004804 <VibeCheckWaveGenCMD_Execute+0x148>)
 80047e6:	6838      	ldr	r0, [r7, #0]
 80047e8:	f7fe fd0a 	bl	8003200 <VibeCheckShell_PutOutputString>
					VibeCheckShell_PutOutputDelimiter(shell);
 80047ec:	6838      	ldr	r0, [r7, #0]
 80047ee:	f7fe fd85 	bl	80032fc <VibeCheckShell_PutOutputDelimiter>
					return 1;
 80047f2:	2301      	movs	r3, #1
 80047f4:	e000      	b.n	80047f8 <VibeCheckWaveGenCMD_Execute+0x13c>
				}
			}
		}
	}

	return 0;
 80047f6:	2300      	movs	r3, #0
}
 80047f8:	4618      	mov	r0, r3
 80047fa:	3750      	adds	r7, #80	@ 0x50
 80047fc:	46bd      	mov	sp, r7
 80047fe:	bd80      	pop	{r7, pc}
 8004800:	08019ad4 	.word	0x08019ad4
 8004804:	08019a98 	.word	0x08019a98
 8004808:	08019adc 	.word	0x08019adc
 800480c:	08019ae4 	.word	0x08019ae4
 8004810:	08019ae8 	.word	0x08019ae8
 8004814:	08019aec 	.word	0x08019aec

08004818 <VibeCheckWaveGenSender_Execute>:


uint32_t VibeCheckWaveGenSender_Execute(void* obj, VibeCheckShell* shell)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b084      	sub	sp, #16
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
 8004820:	6039      	str	r1, [r7, #0]
	/* this will send a message to the host when the mute button is pressed */

	VibeCheckWaveGen* wavegen = (VibeCheckWaveGen*)obj;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	60fb      	str	r3, [r7, #12]

	uint32_t is_muted;
	if (VibeCheckWaveGen_WasMuteButtonPressed(wavegen, &is_muted))
 8004826:	f107 0308 	add.w	r3, r7, #8
 800482a:	4619      	mov	r1, r3
 800482c:	68f8      	ldr	r0, [r7, #12]
 800482e:	f7ff fd21 	bl	8004274 <VibeCheckWaveGen_WasMuteButtonPressed>
 8004832:	4603      	mov	r3, r0
 8004834:	2b00      	cmp	r3, #0
 8004836:	d01e      	beq.n	8004876 <VibeCheckWaveGenSender_Execute+0x5e>
	{
		VibeCheckShell_PutOutputString(shell, "msg");
 8004838:	4911      	ldr	r1, [pc, #68]	@ (8004880 <VibeCheckWaveGenSender_Execute+0x68>)
 800483a:	6838      	ldr	r0, [r7, #0]
 800483c:	f7fe fce0 	bl	8003200 <VibeCheckShell_PutOutputString>
		VibeCheckShell_PutOutputSeparator(shell);
 8004840:	6838      	ldr	r0, [r7, #0]
 8004842:	f7fe fd4d 	bl	80032e0 <VibeCheckShell_PutOutputSeparator>
		VibeCheckShell_PutOutputString(shell, "wavegen");  /* TODO: this name should really be kept in a single place */
 8004846:	490f      	ldr	r1, [pc, #60]	@ (8004884 <VibeCheckWaveGenSender_Execute+0x6c>)
 8004848:	6838      	ldr	r0, [r7, #0]
 800484a:	f7fe fcd9 	bl	8003200 <VibeCheckShell_PutOutputString>
		VibeCheckShell_PutOutputSeparator(shell);
 800484e:	6838      	ldr	r0, [r7, #0]
 8004850:	f7fe fd46 	bl	80032e0 <VibeCheckShell_PutOutputSeparator>

		if (is_muted)
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d004      	beq.n	8004864 <VibeCheckWaveGenSender_Execute+0x4c>
			VibeCheckShell_PutOutputString(shell, "muted");
 800485a:	490b      	ldr	r1, [pc, #44]	@ (8004888 <VibeCheckWaveGenSender_Execute+0x70>)
 800485c:	6838      	ldr	r0, [r7, #0]
 800485e:	f7fe fccf 	bl	8003200 <VibeCheckShell_PutOutputString>
 8004862:	e003      	b.n	800486c <VibeCheckWaveGenSender_Execute+0x54>
		else
			VibeCheckShell_PutOutputString(shell, "unmuted");
 8004864:	4909      	ldr	r1, [pc, #36]	@ (800488c <VibeCheckWaveGenSender_Execute+0x74>)
 8004866:	6838      	ldr	r0, [r7, #0]
 8004868:	f7fe fcca 	bl	8003200 <VibeCheckShell_PutOutputString>

		VibeCheckShell_PutOutputDelimiter(shell);
 800486c:	6838      	ldr	r0, [r7, #0]
 800486e:	f7fe fd45 	bl	80032fc <VibeCheckShell_PutOutputDelimiter>

		return 1;
 8004872:	2301      	movs	r3, #1
 8004874:	e000      	b.n	8004878 <VibeCheckWaveGenSender_Execute+0x60>
	}

	return 0;
 8004876:	2300      	movs	r3, #0
}
 8004878:	4618      	mov	r0, r3
 800487a:	3710      	adds	r7, #16
 800487c:	46bd      	mov	sp, r7
 800487e:	bd80      	pop	{r7, pc}
 8004880:	08019af4 	.word	0x08019af4
 8004884:	08019af8 	.word	0x08019af8
 8004888:	08019b00 	.word	0x08019b00
 800488c:	08019b08 	.word	0x08019b08

08004890 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8004890:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80048c8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8004894:	f7fd fe2c 	bl	80024f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004898:	480c      	ldr	r0, [pc, #48]	@ (80048cc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800489a:	490d      	ldr	r1, [pc, #52]	@ (80048d0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800489c:	4a0d      	ldr	r2, [pc, #52]	@ (80048d4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800489e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80048a0:	e002      	b.n	80048a8 <LoopCopyDataInit>

080048a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80048a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80048a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80048a6:	3304      	adds	r3, #4

080048a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80048a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80048aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80048ac:	d3f9      	bcc.n	80048a2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80048ae:	4a0a      	ldr	r2, [pc, #40]	@ (80048d8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80048b0:	4c0a      	ldr	r4, [pc, #40]	@ (80048dc <LoopFillZerobss+0x22>)
  movs r3, #0
 80048b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80048b4:	e001      	b.n	80048ba <LoopFillZerobss>

080048b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80048b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80048b8:	3204      	adds	r2, #4

080048ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80048ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80048bc:	d3fb      	bcc.n	80048b6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80048be:	f011 fd5f 	bl	8016380 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80048c2:	f7fc f923 	bl	8000b0c <main>
  bx  lr
 80048c6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80048c8:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80048cc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80048d0:	240002cc 	.word	0x240002cc
  ldr r2, =_sidata
 80048d4:	0801a508 	.word	0x0801a508
  ldr r2, =_sbss
 80048d8:	240002cc 	.word	0x240002cc
  ldr r4, =_ebss
 80048dc:	24005c7c 	.word	0x24005c7c

080048e0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80048e0:	e7fe      	b.n	80048e0 <ADC3_IRQHandler>
	...

080048e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b082      	sub	sp, #8
 80048e8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80048ea:	2003      	movs	r0, #3
 80048ec:	f001 fcf4 	bl	80062d8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80048f0:	f006 fcbc 	bl	800b26c <HAL_RCC_GetSysClockFreq>
 80048f4:	4602      	mov	r2, r0
 80048f6:	4b15      	ldr	r3, [pc, #84]	@ (800494c <HAL_Init+0x68>)
 80048f8:	699b      	ldr	r3, [r3, #24]
 80048fa:	0a1b      	lsrs	r3, r3, #8
 80048fc:	f003 030f 	and.w	r3, r3, #15
 8004900:	4913      	ldr	r1, [pc, #76]	@ (8004950 <HAL_Init+0x6c>)
 8004902:	5ccb      	ldrb	r3, [r1, r3]
 8004904:	f003 031f 	and.w	r3, r3, #31
 8004908:	fa22 f303 	lsr.w	r3, r2, r3
 800490c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800490e:	4b0f      	ldr	r3, [pc, #60]	@ (800494c <HAL_Init+0x68>)
 8004910:	699b      	ldr	r3, [r3, #24]
 8004912:	f003 030f 	and.w	r3, r3, #15
 8004916:	4a0e      	ldr	r2, [pc, #56]	@ (8004950 <HAL_Init+0x6c>)
 8004918:	5cd3      	ldrb	r3, [r2, r3]
 800491a:	f003 031f 	and.w	r3, r3, #31
 800491e:	687a      	ldr	r2, [r7, #4]
 8004920:	fa22 f303 	lsr.w	r3, r2, r3
 8004924:	4a0b      	ldr	r2, [pc, #44]	@ (8004954 <HAL_Init+0x70>)
 8004926:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004928:	4a0b      	ldr	r2, [pc, #44]	@ (8004958 <HAL_Init+0x74>)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800492e:	200f      	movs	r0, #15
 8004930:	f000 f814 	bl	800495c <HAL_InitTick>
 8004934:	4603      	mov	r3, r0
 8004936:	2b00      	cmp	r3, #0
 8004938:	d001      	beq.n	800493e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800493a:	2301      	movs	r3, #1
 800493c:	e002      	b.n	8004944 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800493e:	f7fd f865 	bl	8001a0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004942:	2300      	movs	r3, #0
}
 8004944:	4618      	mov	r0, r3
 8004946:	3708      	adds	r7, #8
 8004948:	46bd      	mov	sp, r7
 800494a:	bd80      	pop	{r7, pc}
 800494c:	58024400 	.word	0x58024400
 8004950:	08019b44 	.word	0x08019b44
 8004954:	24000004 	.word	0x24000004
 8004958:	24000000 	.word	0x24000000

0800495c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b082      	sub	sp, #8
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8004964:	4b15      	ldr	r3, [pc, #84]	@ (80049bc <HAL_InitTick+0x60>)
 8004966:	781b      	ldrb	r3, [r3, #0]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d101      	bne.n	8004970 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800496c:	2301      	movs	r3, #1
 800496e:	e021      	b.n	80049b4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8004970:	4b13      	ldr	r3, [pc, #76]	@ (80049c0 <HAL_InitTick+0x64>)
 8004972:	681a      	ldr	r2, [r3, #0]
 8004974:	4b11      	ldr	r3, [pc, #68]	@ (80049bc <HAL_InitTick+0x60>)
 8004976:	781b      	ldrb	r3, [r3, #0]
 8004978:	4619      	mov	r1, r3
 800497a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800497e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004982:	fbb2 f3f3 	udiv	r3, r2, r3
 8004986:	4618      	mov	r0, r3
 8004988:	f001 fcd9 	bl	800633e <HAL_SYSTICK_Config>
 800498c:	4603      	mov	r3, r0
 800498e:	2b00      	cmp	r3, #0
 8004990:	d001      	beq.n	8004996 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8004992:	2301      	movs	r3, #1
 8004994:	e00e      	b.n	80049b4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2b0f      	cmp	r3, #15
 800499a:	d80a      	bhi.n	80049b2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800499c:	2200      	movs	r2, #0
 800499e:	6879      	ldr	r1, [r7, #4]
 80049a0:	f04f 30ff 	mov.w	r0, #4294967295
 80049a4:	f001 fca3 	bl	80062ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80049a8:	4a06      	ldr	r2, [pc, #24]	@ (80049c4 <HAL_InitTick+0x68>)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80049ae:	2300      	movs	r3, #0
 80049b0:	e000      	b.n	80049b4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80049b2:	2301      	movs	r3, #1
}
 80049b4:	4618      	mov	r0, r3
 80049b6:	3708      	adds	r7, #8
 80049b8:	46bd      	mov	sp, r7
 80049ba:	bd80      	pop	{r7, pc}
 80049bc:	2400000c 	.word	0x2400000c
 80049c0:	24000000 	.word	0x24000000
 80049c4:	24000008 	.word	0x24000008

080049c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80049c8:	b480      	push	{r7}
 80049ca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80049cc:	4b06      	ldr	r3, [pc, #24]	@ (80049e8 <HAL_IncTick+0x20>)
 80049ce:	781b      	ldrb	r3, [r3, #0]
 80049d0:	461a      	mov	r2, r3
 80049d2:	4b06      	ldr	r3, [pc, #24]	@ (80049ec <HAL_IncTick+0x24>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4413      	add	r3, r2
 80049d8:	4a04      	ldr	r2, [pc, #16]	@ (80049ec <HAL_IncTick+0x24>)
 80049da:	6013      	str	r3, [r2, #0]
}
 80049dc:	bf00      	nop
 80049de:	46bd      	mov	sp, r7
 80049e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e4:	4770      	bx	lr
 80049e6:	bf00      	nop
 80049e8:	2400000c 	.word	0x2400000c
 80049ec:	24003f48 	.word	0x24003f48

080049f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80049f0:	b480      	push	{r7}
 80049f2:	af00      	add	r7, sp, #0
  return uwTick;
 80049f4:	4b03      	ldr	r3, [pc, #12]	@ (8004a04 <HAL_GetTick+0x14>)
 80049f6:	681b      	ldr	r3, [r3, #0]
}
 80049f8:	4618      	mov	r0, r3
 80049fa:	46bd      	mov	sp, r7
 80049fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a00:	4770      	bx	lr
 8004a02:	bf00      	nop
 8004a04:	24003f48 	.word	0x24003f48

08004a08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b084      	sub	sp, #16
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004a10:	f7ff ffee 	bl	80049f0 <HAL_GetTick>
 8004a14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a20:	d005      	beq.n	8004a2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004a22:	4b0a      	ldr	r3, [pc, #40]	@ (8004a4c <HAL_Delay+0x44>)
 8004a24:	781b      	ldrb	r3, [r3, #0]
 8004a26:	461a      	mov	r2, r3
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	4413      	add	r3, r2
 8004a2c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004a2e:	bf00      	nop
 8004a30:	f7ff ffde 	bl	80049f0 <HAL_GetTick>
 8004a34:	4602      	mov	r2, r0
 8004a36:	68bb      	ldr	r3, [r7, #8]
 8004a38:	1ad3      	subs	r3, r2, r3
 8004a3a:	68fa      	ldr	r2, [r7, #12]
 8004a3c:	429a      	cmp	r2, r3
 8004a3e:	d8f7      	bhi.n	8004a30 <HAL_Delay+0x28>
  {
  }
}
 8004a40:	bf00      	nop
 8004a42:	bf00      	nop
 8004a44:	3710      	adds	r7, #16
 8004a46:	46bd      	mov	sp, r7
 8004a48:	bd80      	pop	{r7, pc}
 8004a4a:	bf00      	nop
 8004a4c:	2400000c 	.word	0x2400000c

08004a50 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8004a50:	b480      	push	{r7}
 8004a52:	b083      	sub	sp, #12
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
 8004a58:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	689b      	ldr	r3, [r3, #8]
 8004a5e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	431a      	orrs	r2, r3
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	609a      	str	r2, [r3, #8]
}
 8004a6a:	bf00      	nop
 8004a6c:	370c      	adds	r7, #12
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a74:	4770      	bx	lr

08004a76 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8004a76:	b480      	push	{r7}
 8004a78:	b083      	sub	sp, #12
 8004a7a:	af00      	add	r7, sp, #0
 8004a7c:	6078      	str	r0, [r7, #4]
 8004a7e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	689b      	ldr	r3, [r3, #8]
 8004a84:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	431a      	orrs	r2, r3
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	609a      	str	r2, [r3, #8]
}
 8004a90:	bf00      	nop
 8004a92:	370c      	adds	r7, #12
 8004a94:	46bd      	mov	sp, r7
 8004a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9a:	4770      	bx	lr

08004a9c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	b083      	sub	sp, #12
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	689b      	ldr	r3, [r3, #8]
 8004aa8:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8004aac:	4618      	mov	r0, r3
 8004aae:	370c      	adds	r7, #12
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab6:	4770      	bx	lr

08004ab8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8004ab8:	b480      	push	{r7}
 8004aba:	b087      	sub	sp, #28
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	60f8      	str	r0, [r7, #12]
 8004ac0:	60b9      	str	r1, [r7, #8]
 8004ac2:	607a      	str	r2, [r7, #4]
 8004ac4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	3360      	adds	r3, #96	@ 0x60
 8004aca:	461a      	mov	r2, r3
 8004acc:	68bb      	ldr	r3, [r7, #8]
 8004ace:	009b      	lsls	r3, r3, #2
 8004ad0:	4413      	add	r3, r2
 8004ad2:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	4a10      	ldr	r2, [pc, #64]	@ (8004b18 <LL_ADC_SetOffset+0x60>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d10b      	bne.n	8004af4 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8004adc:	697b      	ldr	r3, [r7, #20]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004aee:	697b      	ldr	r3, [r7, #20]
 8004af0:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8004af2:	e00b      	b.n	8004b0c <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8004af4:	697b      	ldr	r3, [r7, #20]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	430b      	orrs	r3, r1
 8004b06:	431a      	orrs	r2, r3
 8004b08:	697b      	ldr	r3, [r7, #20]
 8004b0a:	601a      	str	r2, [r3, #0]
}
 8004b0c:	bf00      	nop
 8004b0e:	371c      	adds	r7, #28
 8004b10:	46bd      	mov	sp, r7
 8004b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b16:	4770      	bx	lr
 8004b18:	58026000 	.word	0x58026000

08004b1c <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	b085      	sub	sp, #20
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
 8004b24:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	3360      	adds	r3, #96	@ 0x60
 8004b2a:	461a      	mov	r2, r3
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	009b      	lsls	r3, r3, #2
 8004b30:	4413      	add	r3, r2
 8004b32:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	3714      	adds	r7, #20
 8004b40:	46bd      	mov	sp, r7
 8004b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b46:	4770      	bx	lr

08004b48 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b085      	sub	sp, #20
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	60f8      	str	r0, [r7, #12]
 8004b50:	60b9      	str	r1, [r7, #8]
 8004b52:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	691b      	ldr	r3, [r3, #16]
 8004b58:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	f003 031f 	and.w	r3, r3, #31
 8004b62:	6879      	ldr	r1, [r7, #4]
 8004b64:	fa01 f303 	lsl.w	r3, r1, r3
 8004b68:	431a      	orrs	r2, r3
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	611a      	str	r2, [r3, #16]
}
 8004b6e:	bf00      	nop
 8004b70:	3714      	adds	r7, #20
 8004b72:	46bd      	mov	sp, r7
 8004b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b78:	4770      	bx	lr
	...

08004b7c <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	b087      	sub	sp, #28
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	60f8      	str	r0, [r7, #12]
 8004b84:	60b9      	str	r1, [r7, #8]
 8004b86:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	4a0c      	ldr	r2, [pc, #48]	@ (8004bbc <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d00e      	beq.n	8004bae <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	3360      	adds	r3, #96	@ 0x60
 8004b94:	461a      	mov	r2, r3
 8004b96:	68bb      	ldr	r3, [r7, #8]
 8004b98:	009b      	lsls	r3, r3, #2
 8004b9a:	4413      	add	r3, r2
 8004b9c:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8004b9e:	697b      	ldr	r3, [r7, #20]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	431a      	orrs	r2, r3
 8004baa:	697b      	ldr	r3, [r7, #20]
 8004bac:	601a      	str	r2, [r3, #0]
  }
}
 8004bae:	bf00      	nop
 8004bb0:	371c      	adds	r7, #28
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb8:	4770      	bx	lr
 8004bba:	bf00      	nop
 8004bbc:	58026000 	.word	0x58026000

08004bc0 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8004bc0:	b480      	push	{r7}
 8004bc2:	b087      	sub	sp, #28
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	60f8      	str	r0, [r7, #12]
 8004bc8:	60b9      	str	r1, [r7, #8]
 8004bca:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	4a0c      	ldr	r2, [pc, #48]	@ (8004c00 <LL_ADC_SetOffsetSaturation+0x40>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d10e      	bne.n	8004bf2 <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	3360      	adds	r3, #96	@ 0x60
 8004bd8:	461a      	mov	r2, r3
 8004bda:	68bb      	ldr	r3, [r7, #8]
 8004bdc:	009b      	lsls	r3, r3, #2
 8004bde:	4413      	add	r3, r2
 8004be0:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8004be2:	697b      	ldr	r3, [r7, #20]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	431a      	orrs	r2, r3
 8004bee:	697b      	ldr	r3, [r7, #20]
 8004bf0:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 8004bf2:	bf00      	nop
 8004bf4:	371c      	adds	r7, #28
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfc:	4770      	bx	lr
 8004bfe:	bf00      	nop
 8004c00:	58026000 	.word	0x58026000

08004c04 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8004c04:	b480      	push	{r7}
 8004c06:	b087      	sub	sp, #28
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	60f8      	str	r0, [r7, #12]
 8004c0c:	60b9      	str	r1, [r7, #8]
 8004c0e:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	4a0c      	ldr	r2, [pc, #48]	@ (8004c44 <LL_ADC_SetOffsetSign+0x40>)
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d10e      	bne.n	8004c36 <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	3360      	adds	r3, #96	@ 0x60
 8004c1c:	461a      	mov	r2, r3
 8004c1e:	68bb      	ldr	r3, [r7, #8]
 8004c20:	009b      	lsls	r3, r3, #2
 8004c22:	4413      	add	r3, r2
 8004c24:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8004c26:	697b      	ldr	r3, [r7, #20]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	431a      	orrs	r2, r3
 8004c32:	697b      	ldr	r3, [r7, #20]
 8004c34:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 8004c36:	bf00      	nop
 8004c38:	371c      	adds	r7, #28
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c40:	4770      	bx	lr
 8004c42:	bf00      	nop
 8004c44:	58026000 	.word	0x58026000

08004c48 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8004c48:	b480      	push	{r7}
 8004c4a:	b087      	sub	sp, #28
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	60f8      	str	r0, [r7, #12]
 8004c50:	60b9      	str	r1, [r7, #8]
 8004c52:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	3360      	adds	r3, #96	@ 0x60
 8004c58:	461a      	mov	r2, r3
 8004c5a:	68bb      	ldr	r3, [r7, #8]
 8004c5c:	009b      	lsls	r3, r3, #2
 8004c5e:	4413      	add	r3, r2
 8004c60:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	4a0c      	ldr	r2, [pc, #48]	@ (8004c98 <LL_ADC_SetOffsetState+0x50>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d108      	bne.n	8004c7c <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 8004c6a:	697b      	ldr	r3, [r7, #20]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	431a      	orrs	r2, r3
 8004c76:	697b      	ldr	r3, [r7, #20]
 8004c78:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 8004c7a:	e007      	b.n	8004c8c <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8004c7c:	697b      	ldr	r3, [r7, #20]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	431a      	orrs	r2, r3
 8004c88:	697b      	ldr	r3, [r7, #20]
 8004c8a:	601a      	str	r2, [r3, #0]
}
 8004c8c:	bf00      	nop
 8004c8e:	371c      	adds	r7, #28
 8004c90:	46bd      	mov	sp, r7
 8004c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c96:	4770      	bx	lr
 8004c98:	58026000 	.word	0x58026000

08004c9c <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	b087      	sub	sp, #28
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	60f8      	str	r0, [r7, #12]
 8004ca4:	60b9      	str	r1, [r7, #8]
 8004ca6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	3330      	adds	r3, #48	@ 0x30
 8004cac:	461a      	mov	r2, r3
 8004cae:	68bb      	ldr	r3, [r7, #8]
 8004cb0:	0a1b      	lsrs	r3, r3, #8
 8004cb2:	009b      	lsls	r3, r3, #2
 8004cb4:	f003 030c 	and.w	r3, r3, #12
 8004cb8:	4413      	add	r3, r2
 8004cba:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004cbc:	697b      	ldr	r3, [r7, #20]
 8004cbe:	681a      	ldr	r2, [r3, #0]
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	f003 031f 	and.w	r3, r3, #31
 8004cc6:	211f      	movs	r1, #31
 8004cc8:	fa01 f303 	lsl.w	r3, r1, r3
 8004ccc:	43db      	mvns	r3, r3
 8004cce:	401a      	ands	r2, r3
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	0e9b      	lsrs	r3, r3, #26
 8004cd4:	f003 011f 	and.w	r1, r3, #31
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	f003 031f 	and.w	r3, r3, #31
 8004cde:	fa01 f303 	lsl.w	r3, r1, r3
 8004ce2:	431a      	orrs	r2, r3
 8004ce4:	697b      	ldr	r3, [r7, #20]
 8004ce6:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8004ce8:	bf00      	nop
 8004cea:	371c      	adds	r7, #28
 8004cec:	46bd      	mov	sp, r7
 8004cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf2:	4770      	bx	lr

08004cf4 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	b087      	sub	sp, #28
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	60f8      	str	r0, [r7, #12]
 8004cfc:	60b9      	str	r1, [r7, #8]
 8004cfe:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	3314      	adds	r3, #20
 8004d04:	461a      	mov	r2, r3
 8004d06:	68bb      	ldr	r3, [r7, #8]
 8004d08:	0e5b      	lsrs	r3, r3, #25
 8004d0a:	009b      	lsls	r3, r3, #2
 8004d0c:	f003 0304 	and.w	r3, r3, #4
 8004d10:	4413      	add	r3, r2
 8004d12:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004d14:	697b      	ldr	r3, [r7, #20]
 8004d16:	681a      	ldr	r2, [r3, #0]
 8004d18:	68bb      	ldr	r3, [r7, #8]
 8004d1a:	0d1b      	lsrs	r3, r3, #20
 8004d1c:	f003 031f 	and.w	r3, r3, #31
 8004d20:	2107      	movs	r1, #7
 8004d22:	fa01 f303 	lsl.w	r3, r1, r3
 8004d26:	43db      	mvns	r3, r3
 8004d28:	401a      	ands	r2, r3
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	0d1b      	lsrs	r3, r3, #20
 8004d2e:	f003 031f 	and.w	r3, r3, #31
 8004d32:	6879      	ldr	r1, [r7, #4]
 8004d34:	fa01 f303 	lsl.w	r3, r1, r3
 8004d38:	431a      	orrs	r2, r3
 8004d3a:	697b      	ldr	r3, [r7, #20]
 8004d3c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8004d3e:	bf00      	nop
 8004d40:	371c      	adds	r7, #28
 8004d42:	46bd      	mov	sp, r7
 8004d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d48:	4770      	bx	lr
	...

08004d4c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004d4c:	b480      	push	{r7}
 8004d4e:	b085      	sub	sp, #20
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	60f8      	str	r0, [r7, #12]
 8004d54:	60b9      	str	r1, [r7, #8]
 8004d56:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	4a1a      	ldr	r2, [pc, #104]	@ (8004dc4 <LL_ADC_SetChannelSingleDiff+0x78>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d115      	bne.n	8004d8c <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8004d66:	68bb      	ldr	r3, [r7, #8]
 8004d68:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004d6c:	43db      	mvns	r3, r3
 8004d6e:	401a      	ands	r2, r3
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	f003 0318 	and.w	r3, r3, #24
 8004d76:	4914      	ldr	r1, [pc, #80]	@ (8004dc8 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8004d78:	40d9      	lsrs	r1, r3
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	400b      	ands	r3, r1
 8004d7e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004d82:	431a      	orrs	r2, r3
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8004d8a:	e014      	b.n	8004db6 <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8004d92:	68bb      	ldr	r3, [r7, #8]
 8004d94:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004d98:	43db      	mvns	r3, r3
 8004d9a:	401a      	ands	r2, r3
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	f003 0318 	and.w	r3, r3, #24
 8004da2:	4909      	ldr	r1, [pc, #36]	@ (8004dc8 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8004da4:	40d9      	lsrs	r1, r3
 8004da6:	68bb      	ldr	r3, [r7, #8]
 8004da8:	400b      	ands	r3, r1
 8004daa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004dae:	431a      	orrs	r2, r3
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
}
 8004db6:	bf00      	nop
 8004db8:	3714      	adds	r7, #20
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc0:	4770      	bx	lr
 8004dc2:	bf00      	nop
 8004dc4:	58026000 	.word	0x58026000
 8004dc8:	000fffff 	.word	0x000fffff

08004dcc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004dcc:	b480      	push	{r7}
 8004dce:	b083      	sub	sp, #12
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	689a      	ldr	r2, [r3, #8]
 8004dd8:	4b04      	ldr	r3, [pc, #16]	@ (8004dec <LL_ADC_DisableDeepPowerDown+0x20>)
 8004dda:	4013      	ands	r3, r2
 8004ddc:	687a      	ldr	r2, [r7, #4]
 8004dde:	6093      	str	r3, [r2, #8]
}
 8004de0:	bf00      	nop
 8004de2:	370c      	adds	r7, #12
 8004de4:	46bd      	mov	sp, r7
 8004de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dea:	4770      	bx	lr
 8004dec:	5fffffc0 	.word	0x5fffffc0

08004df0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8004df0:	b480      	push	{r7}
 8004df2:	b083      	sub	sp, #12
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	689b      	ldr	r3, [r3, #8]
 8004dfc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004e00:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004e04:	d101      	bne.n	8004e0a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8004e06:	2301      	movs	r3, #1
 8004e08:	e000      	b.n	8004e0c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8004e0a:	2300      	movs	r3, #0
}
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	370c      	adds	r7, #12
 8004e10:	46bd      	mov	sp, r7
 8004e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e16:	4770      	bx	lr

08004e18 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004e18:	b480      	push	{r7}
 8004e1a:	b083      	sub	sp, #12
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	689a      	ldr	r2, [r3, #8]
 8004e24:	4b05      	ldr	r3, [pc, #20]	@ (8004e3c <LL_ADC_EnableInternalRegulator+0x24>)
 8004e26:	4013      	ands	r3, r2
 8004e28:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004e30:	bf00      	nop
 8004e32:	370c      	adds	r7, #12
 8004e34:	46bd      	mov	sp, r7
 8004e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3a:	4770      	bx	lr
 8004e3c:	6fffffc0 	.word	0x6fffffc0

08004e40 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8004e40:	b480      	push	{r7}
 8004e42:	b083      	sub	sp, #12
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	689b      	ldr	r3, [r3, #8]
 8004e4c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e50:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004e54:	d101      	bne.n	8004e5a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004e56:	2301      	movs	r3, #1
 8004e58:	e000      	b.n	8004e5c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8004e5a:	2300      	movs	r3, #0
}
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	370c      	adds	r7, #12
 8004e60:	46bd      	mov	sp, r7
 8004e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e66:	4770      	bx	lr

08004e68 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8004e68:	b480      	push	{r7}
 8004e6a:	b083      	sub	sp, #12
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	689b      	ldr	r3, [r3, #8]
 8004e74:	f003 0301 	and.w	r3, r3, #1
 8004e78:	2b01      	cmp	r3, #1
 8004e7a:	d101      	bne.n	8004e80 <LL_ADC_IsEnabled+0x18>
 8004e7c:	2301      	movs	r3, #1
 8004e7e:	e000      	b.n	8004e82 <LL_ADC_IsEnabled+0x1a>
 8004e80:	2300      	movs	r3, #0
}
 8004e82:	4618      	mov	r0, r3
 8004e84:	370c      	adds	r7, #12
 8004e86:	46bd      	mov	sp, r7
 8004e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8c:	4770      	bx	lr

08004e8e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004e8e:	b480      	push	{r7}
 8004e90:	b083      	sub	sp, #12
 8004e92:	af00      	add	r7, sp, #0
 8004e94:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	689b      	ldr	r3, [r3, #8]
 8004e9a:	f003 0304 	and.w	r3, r3, #4
 8004e9e:	2b04      	cmp	r3, #4
 8004ea0:	d101      	bne.n	8004ea6 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	e000      	b.n	8004ea8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004ea6:	2300      	movs	r3, #0
}
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	370c      	adds	r7, #12
 8004eac:	46bd      	mov	sp, r7
 8004eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb2:	4770      	bx	lr

08004eb4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004eb4:	b480      	push	{r7}
 8004eb6:	b083      	sub	sp, #12
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	689b      	ldr	r3, [r3, #8]
 8004ec0:	f003 0308 	and.w	r3, r3, #8
 8004ec4:	2b08      	cmp	r3, #8
 8004ec6:	d101      	bne.n	8004ecc <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004ec8:	2301      	movs	r3, #1
 8004eca:	e000      	b.n	8004ece <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004ecc:	2300      	movs	r3, #0
}
 8004ece:	4618      	mov	r0, r3
 8004ed0:	370c      	adds	r7, #12
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed8:	4770      	bx	lr
	...

08004edc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004edc:	b590      	push	{r4, r7, lr}
 8004ede:	b089      	sub	sp, #36	@ 0x24
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8004ee8:	2300      	movs	r3, #0
 8004eea:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d101      	bne.n	8004ef6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	e1ee      	b.n	80052d4 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	691b      	ldr	r3, [r3, #16]
 8004efa:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d109      	bne.n	8004f18 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004f04:	6878      	ldr	r0, [r7, #4]
 8004f06:	f7fc fd9b 	bl	8001a40 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2200      	movs	r2, #0
 8004f14:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	f7ff ff67 	bl	8004df0 <LL_ADC_IsDeepPowerDownEnabled>
 8004f22:	4603      	mov	r3, r0
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d004      	beq.n	8004f32 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	f7ff ff4d 	bl	8004dcc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4618      	mov	r0, r3
 8004f38:	f7ff ff82 	bl	8004e40 <LL_ADC_IsInternalRegulatorEnabled>
 8004f3c:	4603      	mov	r3, r0
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d114      	bne.n	8004f6c <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4618      	mov	r0, r3
 8004f48:	f7ff ff66 	bl	8004e18 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004f4c:	4b8e      	ldr	r3, [pc, #568]	@ (8005188 <HAL_ADC_Init+0x2ac>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	099b      	lsrs	r3, r3, #6
 8004f52:	4a8e      	ldr	r2, [pc, #568]	@ (800518c <HAL_ADC_Init+0x2b0>)
 8004f54:	fba2 2303 	umull	r2, r3, r2, r3
 8004f58:	099b      	lsrs	r3, r3, #6
 8004f5a:	3301      	adds	r3, #1
 8004f5c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004f5e:	e002      	b.n	8004f66 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8004f60:	68bb      	ldr	r3, [r7, #8]
 8004f62:	3b01      	subs	r3, #1
 8004f64:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004f66:	68bb      	ldr	r3, [r7, #8]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d1f9      	bne.n	8004f60 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4618      	mov	r0, r3
 8004f72:	f7ff ff65 	bl	8004e40 <LL_ADC_IsInternalRegulatorEnabled>
 8004f76:	4603      	mov	r3, r0
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d10d      	bne.n	8004f98 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f80:	f043 0210 	orr.w	r2, r3, #16
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004f8c:	f043 0201 	orr.w	r2, r3, #1
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	665a      	str	r2, [r3, #100]	@ 0x64

    tmp_hal_status = HAL_ERROR;
 8004f94:	2301      	movs	r3, #1
 8004f96:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	f7ff ff76 	bl	8004e8e <LL_ADC_REG_IsConversionOngoing>
 8004fa2:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004fa8:	f003 0310 	and.w	r3, r3, #16
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	f040 8188 	bne.w	80052c2 <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8004fb2:	697b      	ldr	r3, [r7, #20]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	f040 8184 	bne.w	80052c2 <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004fbe:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8004fc2:	f043 0202 	orr.w	r2, r3, #2
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	4618      	mov	r0, r3
 8004fd0:	f7ff ff4a 	bl	8004e68 <LL_ADC_IsEnabled>
 8004fd4:	4603      	mov	r3, r0
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d136      	bne.n	8005048 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4a6c      	ldr	r2, [pc, #432]	@ (8005190 <HAL_ADC_Init+0x2b4>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d004      	beq.n	8004fee <HAL_ADC_Init+0x112>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4a6a      	ldr	r2, [pc, #424]	@ (8005194 <HAL_ADC_Init+0x2b8>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d10e      	bne.n	800500c <HAL_ADC_Init+0x130>
 8004fee:	4868      	ldr	r0, [pc, #416]	@ (8005190 <HAL_ADC_Init+0x2b4>)
 8004ff0:	f7ff ff3a 	bl	8004e68 <LL_ADC_IsEnabled>
 8004ff4:	4604      	mov	r4, r0
 8004ff6:	4867      	ldr	r0, [pc, #412]	@ (8005194 <HAL_ADC_Init+0x2b8>)
 8004ff8:	f7ff ff36 	bl	8004e68 <LL_ADC_IsEnabled>
 8004ffc:	4603      	mov	r3, r0
 8004ffe:	4323      	orrs	r3, r4
 8005000:	2b00      	cmp	r3, #0
 8005002:	bf0c      	ite	eq
 8005004:	2301      	moveq	r3, #1
 8005006:	2300      	movne	r3, #0
 8005008:	b2db      	uxtb	r3, r3
 800500a:	e008      	b.n	800501e <HAL_ADC_Init+0x142>
 800500c:	4862      	ldr	r0, [pc, #392]	@ (8005198 <HAL_ADC_Init+0x2bc>)
 800500e:	f7ff ff2b 	bl	8004e68 <LL_ADC_IsEnabled>
 8005012:	4603      	mov	r3, r0
 8005014:	2b00      	cmp	r3, #0
 8005016:	bf0c      	ite	eq
 8005018:	2301      	moveq	r3, #1
 800501a:	2300      	movne	r3, #0
 800501c:	b2db      	uxtb	r3, r3
 800501e:	2b00      	cmp	r3, #0
 8005020:	d012      	beq.n	8005048 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4a5a      	ldr	r2, [pc, #360]	@ (8005190 <HAL_ADC_Init+0x2b4>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d004      	beq.n	8005036 <HAL_ADC_Init+0x15a>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4a58      	ldr	r2, [pc, #352]	@ (8005194 <HAL_ADC_Init+0x2b8>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d101      	bne.n	800503a <HAL_ADC_Init+0x15e>
 8005036:	4a59      	ldr	r2, [pc, #356]	@ (800519c <HAL_ADC_Init+0x2c0>)
 8005038:	e000      	b.n	800503c <HAL_ADC_Init+0x160>
 800503a:	4a59      	ldr	r2, [pc, #356]	@ (80051a0 <HAL_ADC_Init+0x2c4>)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	685b      	ldr	r3, [r3, #4]
 8005040:	4619      	mov	r1, r3
 8005042:	4610      	mov	r0, r2
 8005044:	f7ff fd04 	bl	8004a50 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4a52      	ldr	r2, [pc, #328]	@ (8005198 <HAL_ADC_Init+0x2bc>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d129      	bne.n	80050a6 <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	7e5b      	ldrb	r3, [r3, #25]
 8005056:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800505c:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 8005062:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	689b      	ldr	r3, [r3, #8]
 8005068:	2b08      	cmp	r3, #8
 800506a:	d013      	beq.n	8005094 <HAL_ADC_Init+0x1b8>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	689b      	ldr	r3, [r3, #8]
 8005070:	2b0c      	cmp	r3, #12
 8005072:	d00d      	beq.n	8005090 <HAL_ADC_Init+0x1b4>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	689b      	ldr	r3, [r3, #8]
 8005078:	2b1c      	cmp	r3, #28
 800507a:	d007      	beq.n	800508c <HAL_ADC_Init+0x1b0>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	689b      	ldr	r3, [r3, #8]
 8005080:	2b18      	cmp	r3, #24
 8005082:	d101      	bne.n	8005088 <HAL_ADC_Init+0x1ac>
 8005084:	2318      	movs	r3, #24
 8005086:	e006      	b.n	8005096 <HAL_ADC_Init+0x1ba>
 8005088:	2300      	movs	r3, #0
 800508a:	e004      	b.n	8005096 <HAL_ADC_Init+0x1ba>
 800508c:	2310      	movs	r3, #16
 800508e:	e002      	b.n	8005096 <HAL_ADC_Init+0x1ba>
 8005090:	2308      	movs	r3, #8
 8005092:	e000      	b.n	8005096 <HAL_ADC_Init+0x1ba>
 8005094:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 8005096:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800509e:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80050a0:	4313      	orrs	r3, r2
 80050a2:	61bb      	str	r3, [r7, #24]
 80050a4:	e00e      	b.n	80050c4 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	7e5b      	ldrb	r3, [r3, #25]
 80050aa:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80050b0:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80050b6:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	f893 3020 	ldrb.w	r3, [r3, #32]
 80050be:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80050c0:	4313      	orrs	r3, r2
 80050c2:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80050ca:	2b01      	cmp	r3, #1
 80050cc:	d106      	bne.n	80050dc <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050d2:	3b01      	subs	r3, #1
 80050d4:	045b      	lsls	r3, r3, #17
 80050d6:	69ba      	ldr	r2, [r7, #24]
 80050d8:	4313      	orrs	r3, r2
 80050da:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d009      	beq.n	80050f8 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050e8:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050f0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80050f2:	69ba      	ldr	r2, [r7, #24]
 80050f4:	4313      	orrs	r3, r2
 80050f6:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	4a26      	ldr	r2, [pc, #152]	@ (8005198 <HAL_ADC_Init+0x2bc>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d115      	bne.n	800512e <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	68da      	ldr	r2, [r3, #12]
 8005108:	4b26      	ldr	r3, [pc, #152]	@ (80051a4 <HAL_ADC_Init+0x2c8>)
 800510a:	4013      	ands	r3, r2
 800510c:	687a      	ldr	r2, [r7, #4]
 800510e:	6812      	ldr	r2, [r2, #0]
 8005110:	69b9      	ldr	r1, [r7, #24]
 8005112:	430b      	orrs	r3, r1
 8005114:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	691b      	ldr	r3, [r3, #16]
 800511c:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	430a      	orrs	r2, r1
 800512a:	611a      	str	r2, [r3, #16]
 800512c:	e009      	b.n	8005142 <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	68da      	ldr	r2, [r3, #12]
 8005134:	4b1c      	ldr	r3, [pc, #112]	@ (80051a8 <HAL_ADC_Init+0x2cc>)
 8005136:	4013      	ands	r3, r2
 8005138:	687a      	ldr	r2, [r7, #4]
 800513a:	6812      	ldr	r2, [r2, #0]
 800513c:	69b9      	ldr	r1, [r7, #24]
 800513e:	430b      	orrs	r3, r1
 8005140:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4618      	mov	r0, r3
 8005148:	f7ff fea1 	bl	8004e8e <LL_ADC_REG_IsConversionOngoing>
 800514c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	4618      	mov	r0, r3
 8005154:	f7ff feae 	bl	8004eb4 <LL_ADC_INJ_IsConversionOngoing>
 8005158:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800515a:	693b      	ldr	r3, [r7, #16]
 800515c:	2b00      	cmp	r3, #0
 800515e:	f040 808e 	bne.w	800527e <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	2b00      	cmp	r3, #0
 8005166:	f040 808a 	bne.w	800527e <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	4a0a      	ldr	r2, [pc, #40]	@ (8005198 <HAL_ADC_Init+0x2bc>)
 8005170:	4293      	cmp	r3, r2
 8005172:	d11b      	bne.n	80051ac <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	7e1b      	ldrb	r3, [r3, #24]
 8005178:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005180:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 8005182:	4313      	orrs	r3, r2
 8005184:	61bb      	str	r3, [r7, #24]
 8005186:	e018      	b.n	80051ba <HAL_ADC_Init+0x2de>
 8005188:	24000000 	.word	0x24000000
 800518c:	053e2d63 	.word	0x053e2d63
 8005190:	40022000 	.word	0x40022000
 8005194:	40022100 	.word	0x40022100
 8005198:	58026000 	.word	0x58026000
 800519c:	40022300 	.word	0x40022300
 80051a0:	58026300 	.word	0x58026300
 80051a4:	fff04007 	.word	0xfff04007
 80051a8:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	7e1b      	ldrb	r3, [r3, #24]
 80051b0:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        tmpCFGR = (
 80051b6:	4313      	orrs	r3, r2
 80051b8:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	68da      	ldr	r2, [r3, #12]
 80051c0:	4b46      	ldr	r3, [pc, #280]	@ (80052dc <HAL_ADC_Init+0x400>)
 80051c2:	4013      	ands	r3, r2
 80051c4:	687a      	ldr	r2, [r7, #4]
 80051c6:	6812      	ldr	r2, [r2, #0]
 80051c8:	69b9      	ldr	r1, [r7, #24]
 80051ca:	430b      	orrs	r3, r1
 80051cc:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80051d4:	2b01      	cmp	r3, #1
 80051d6:	d137      	bne.n	8005248 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051dc:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	4a3f      	ldr	r2, [pc, #252]	@ (80052e0 <HAL_ADC_Init+0x404>)
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d116      	bne.n	8005216 <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	691a      	ldr	r2, [r3, #16]
 80051ee:	4b3d      	ldr	r3, [pc, #244]	@ (80052e4 <HAL_ADC_Init+0x408>)
 80051f0:	4013      	ands	r3, r2
 80051f2:	687a      	ldr	r2, [r7, #4]
 80051f4:	6c91      	ldr	r1, [r2, #72]	@ 0x48
 80051f6:	687a      	ldr	r2, [r7, #4]
 80051f8:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80051fa:	4311      	orrs	r1, r2
 80051fc:	687a      	ldr	r2, [r7, #4]
 80051fe:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005200:	4311      	orrs	r1, r2
 8005202:	687a      	ldr	r2, [r7, #4]
 8005204:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8005206:	430a      	orrs	r2, r1
 8005208:	431a      	orrs	r2, r3
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f042 0201 	orr.w	r2, r2, #1
 8005212:	611a      	str	r2, [r3, #16]
 8005214:	e020      	b.n	8005258 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	691a      	ldr	r2, [r3, #16]
 800521c:	4b32      	ldr	r3, [pc, #200]	@ (80052e8 <HAL_ADC_Init+0x40c>)
 800521e:	4013      	ands	r3, r2
 8005220:	687a      	ldr	r2, [r7, #4]
 8005222:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005224:	3a01      	subs	r2, #1
 8005226:	0411      	lsls	r1, r2, #16
 8005228:	687a      	ldr	r2, [r7, #4]
 800522a:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800522c:	4311      	orrs	r1, r2
 800522e:	687a      	ldr	r2, [r7, #4]
 8005230:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005232:	4311      	orrs	r1, r2
 8005234:	687a      	ldr	r2, [r7, #4]
 8005236:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8005238:	430a      	orrs	r2, r1
 800523a:	431a      	orrs	r2, r3
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f042 0201 	orr.w	r2, r2, #1
 8005244:	611a      	str	r2, [r3, #16]
 8005246:	e007      	b.n	8005258 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	691a      	ldr	r2, [r3, #16]
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f022 0201 	bic.w	r2, r2, #1
 8005256:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	691b      	ldr	r3, [r3, #16]
 800525e:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	430a      	orrs	r2, r1
 800526c:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4a1b      	ldr	r2, [pc, #108]	@ (80052e0 <HAL_ADC_Init+0x404>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d002      	beq.n	800527e <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8005278:	6878      	ldr	r0, [r7, #4]
 800527a:	f000 fd67 	bl	8005d4c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	691b      	ldr	r3, [r3, #16]
 8005282:	2b01      	cmp	r3, #1
 8005284:	d10c      	bne.n	80052a0 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800528c:	f023 010f 	bic.w	r1, r3, #15
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	69db      	ldr	r3, [r3, #28]
 8005294:	1e5a      	subs	r2, r3, #1
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	430a      	orrs	r2, r1
 800529c:	631a      	str	r2, [r3, #48]	@ 0x30
 800529e:	e007      	b.n	80052b0 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f022 020f 	bic.w	r2, r2, #15
 80052ae:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80052b4:	f023 0303 	bic.w	r3, r3, #3
 80052b8:	f043 0201 	orr.w	r2, r3, #1
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	661a      	str	r2, [r3, #96]	@ 0x60
 80052c0:	e007      	b.n	80052d2 <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80052c6:	f043 0210 	orr.w	r2, r3, #16
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80052ce:	2301      	movs	r3, #1
 80052d0:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80052d2:	7ffb      	ldrb	r3, [r7, #31]
}
 80052d4:	4618      	mov	r0, r3
 80052d6:	3724      	adds	r7, #36	@ 0x24
 80052d8:	46bd      	mov	sp, r7
 80052da:	bd90      	pop	{r4, r7, pc}
 80052dc:	ffffbffc 	.word	0xffffbffc
 80052e0:	58026000 	.word	0x58026000
 80052e4:	fc00f81f 	.word	0xfc00f81f
 80052e8:	fc00f81e 	.word	0xfc00f81e

080052ec <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80052ec:	b590      	push	{r4, r7, lr}
 80052ee:	b0b9      	sub	sp, #228	@ 0xe4
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
 80052f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80052f6:	2300      	movs	r3, #0
 80052f8:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80052fc:	2300      	movs	r3, #0
 80052fe:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005306:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	68db      	ldr	r3, [r3, #12]
 800530c:	4aab      	ldr	r2, [pc, #684]	@ (80055bc <HAL_ADC_ConfigChannel+0x2d0>)
 800530e:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005316:	2b01      	cmp	r3, #1
 8005318:	d102      	bne.n	8005320 <HAL_ADC_ConfigChannel+0x34>
 800531a:	2302      	movs	r3, #2
 800531c:	f000 bcfe 	b.w	8005d1c <HAL_ADC_ConfigChannel+0xa30>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2201      	movs	r2, #1
 8005324:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	4618      	mov	r0, r3
 800532e:	f7ff fdae 	bl	8004e8e <LL_ADC_REG_IsConversionOngoing>
 8005332:	4603      	mov	r3, r0
 8005334:	2b00      	cmp	r3, #0
 8005336:	f040 84e2 	bne.w	8005cfe <HAL_ADC_ConfigChannel+0xa12>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	2b00      	cmp	r3, #0
 8005340:	db38      	blt.n	80053b4 <HAL_ADC_ConfigChannel+0xc8>
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	4a9e      	ldr	r2, [pc, #632]	@ (80055c0 <HAL_ADC_ConfigChannel+0x2d4>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d033      	beq.n	80053b4 <HAL_ADC_ConfigChannel+0xc8>
      {
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005354:	2b00      	cmp	r3, #0
 8005356:	d108      	bne.n	800536a <HAL_ADC_ConfigChannel+0x7e>
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	0e9b      	lsrs	r3, r3, #26
 800535e:	f003 031f 	and.w	r3, r3, #31
 8005362:	2201      	movs	r2, #1
 8005364:	fa02 f303 	lsl.w	r3, r2, r3
 8005368:	e01d      	b.n	80053a6 <HAL_ADC_ConfigChannel+0xba>
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005372:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005376:	fa93 f3a3 	rbit	r3, r3
 800537a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800537e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005382:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8005386:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800538a:	2b00      	cmp	r3, #0
 800538c:	d101      	bne.n	8005392 <HAL_ADC_ConfigChannel+0xa6>
  {
    return 32U;
 800538e:	2320      	movs	r3, #32
 8005390:	e004      	b.n	800539c <HAL_ADC_ConfigChannel+0xb0>
  }
  return __builtin_clz(value);
 8005392:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005396:	fab3 f383 	clz	r3, r3
 800539a:	b2db      	uxtb	r3, r3
 800539c:	f003 031f 	and.w	r3, r3, #31
 80053a0:	2201      	movs	r2, #1
 80053a2:	fa02 f303 	lsl.w	r3, r2, r3
 80053a6:	687a      	ldr	r2, [r7, #4]
 80053a8:	6812      	ldr	r2, [r2, #0]
 80053aa:	69d1      	ldr	r1, [r2, #28]
 80053ac:	687a      	ldr	r2, [r7, #4]
 80053ae:	6812      	ldr	r2, [r2, #0]
 80053b0:	430b      	orrs	r3, r1
 80053b2:	61d3      	str	r3, [r2, #28]
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6818      	ldr	r0, [r3, #0]
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	6859      	ldr	r1, [r3, #4]
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	461a      	mov	r2, r3
 80053c2:	f7ff fc6b 	bl	8004c9c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	4618      	mov	r0, r3
 80053cc:	f7ff fd5f 	bl	8004e8e <LL_ADC_REG_IsConversionOngoing>
 80053d0:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	4618      	mov	r0, r3
 80053da:	f7ff fd6b 	bl	8004eb4 <LL_ADC_INJ_IsConversionOngoing>
 80053de:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80053e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	f040 8270 	bne.w	80058cc <HAL_ADC_ConfigChannel+0x5e0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80053ec:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	f040 826b 	bne.w	80058cc <HAL_ADC_ConfigChannel+0x5e0>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6818      	ldr	r0, [r3, #0]
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	6819      	ldr	r1, [r3, #0]
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	689b      	ldr	r3, [r3, #8]
 8005402:	461a      	mov	r2, r3
 8005404:	f7ff fc76 	bl	8004cf4 <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	4a6c      	ldr	r2, [pc, #432]	@ (80055c0 <HAL_ADC_ConfigChannel+0x2d4>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d10d      	bne.n	800542e <HAL_ADC_ConfigChannel+0x142>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	695a      	ldr	r2, [r3, #20]
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	68db      	ldr	r3, [r3, #12]
 800541c:	08db      	lsrs	r3, r3, #3
 800541e:	f003 0303 	and.w	r3, r3, #3
 8005422:	005b      	lsls	r3, r3, #1
 8005424:	fa02 f303 	lsl.w	r3, r2, r3
 8005428:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800542c:	e032      	b.n	8005494 <HAL_ADC_ConfigChannel+0x1a8>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800542e:	4b65      	ldr	r3, [pc, #404]	@ (80055c4 <HAL_ADC_ConfigChannel+0x2d8>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8005436:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800543a:	d10b      	bne.n	8005454 <HAL_ADC_ConfigChannel+0x168>
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	695a      	ldr	r2, [r3, #20]
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	68db      	ldr	r3, [r3, #12]
 8005446:	089b      	lsrs	r3, r3, #2
 8005448:	f003 0307 	and.w	r3, r3, #7
 800544c:	005b      	lsls	r3, r3, #1
 800544e:	fa02 f303 	lsl.w	r3, r2, r3
 8005452:	e01d      	b.n	8005490 <HAL_ADC_ConfigChannel+0x1a4>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	68db      	ldr	r3, [r3, #12]
 800545a:	f003 0310 	and.w	r3, r3, #16
 800545e:	2b00      	cmp	r3, #0
 8005460:	d10b      	bne.n	800547a <HAL_ADC_ConfigChannel+0x18e>
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	695a      	ldr	r2, [r3, #20]
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	68db      	ldr	r3, [r3, #12]
 800546c:	089b      	lsrs	r3, r3, #2
 800546e:	f003 0307 	and.w	r3, r3, #7
 8005472:	005b      	lsls	r3, r3, #1
 8005474:	fa02 f303 	lsl.w	r3, r2, r3
 8005478:	e00a      	b.n	8005490 <HAL_ADC_ConfigChannel+0x1a4>
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	695a      	ldr	r2, [r3, #20]
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	68db      	ldr	r3, [r3, #12]
 8005484:	089b      	lsrs	r3, r3, #2
 8005486:	f003 0304 	and.w	r3, r3, #4
 800548a:	005b      	lsls	r3, r3, #1
 800548c:	fa02 f303 	lsl.w	r3, r2, r3
 8005490:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	691b      	ldr	r3, [r3, #16]
 8005498:	2b04      	cmp	r3, #4
 800549a:	d048      	beq.n	800552e <HAL_ADC_ConfigChannel+0x242>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6818      	ldr	r0, [r3, #0]
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	6919      	ldr	r1, [r3, #16]
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	681a      	ldr	r2, [r3, #0]
 80054a8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80054ac:	f7ff fb04 	bl	8004ab8 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4a42      	ldr	r2, [pc, #264]	@ (80055c0 <HAL_ADC_ConfigChannel+0x2d4>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d119      	bne.n	80054ee <HAL_ADC_ConfigChannel+0x202>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6818      	ldr	r0, [r3, #0]
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	6919      	ldr	r1, [r3, #16]
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	69db      	ldr	r3, [r3, #28]
 80054c6:	461a      	mov	r2, r3
 80054c8:	f7ff fb9c 	bl	8004c04 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6818      	ldr	r0, [r3, #0]
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	6919      	ldr	r1, [r3, #16]
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80054da:	2b01      	cmp	r3, #1
 80054dc:	d102      	bne.n	80054e4 <HAL_ADC_ConfigChannel+0x1f8>
 80054de:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80054e2:	e000      	b.n	80054e6 <HAL_ADC_ConfigChannel+0x1fa>
 80054e4:	2300      	movs	r3, #0
 80054e6:	461a      	mov	r2, r3
 80054e8:	f7ff fb6a 	bl	8004bc0 <LL_ADC_SetOffsetSaturation>
 80054ec:	e1ee      	b.n	80058cc <HAL_ADC_ConfigChannel+0x5e0>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6818      	ldr	r0, [r3, #0]
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	6919      	ldr	r1, [r3, #16]
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80054fc:	2b01      	cmp	r3, #1
 80054fe:	d102      	bne.n	8005506 <HAL_ADC_ConfigChannel+0x21a>
 8005500:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005504:	e000      	b.n	8005508 <HAL_ADC_ConfigChannel+0x21c>
 8005506:	2300      	movs	r3, #0
 8005508:	461a      	mov	r2, r3
 800550a:	f7ff fb37 	bl	8004b7c <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6818      	ldr	r0, [r3, #0]
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	6919      	ldr	r1, [r3, #16]
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	7e1b      	ldrb	r3, [r3, #24]
 800551a:	2b01      	cmp	r3, #1
 800551c:	d102      	bne.n	8005524 <HAL_ADC_ConfigChannel+0x238>
 800551e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005522:	e000      	b.n	8005526 <HAL_ADC_ConfigChannel+0x23a>
 8005524:	2300      	movs	r3, #0
 8005526:	461a      	mov	r2, r3
 8005528:	f7ff fb0e 	bl	8004b48 <LL_ADC_SetDataRightShift>
 800552c:	e1ce      	b.n	80058cc <HAL_ADC_ConfigChannel+0x5e0>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4a23      	ldr	r2, [pc, #140]	@ (80055c0 <HAL_ADC_ConfigChannel+0x2d4>)
 8005534:	4293      	cmp	r3, r2
 8005536:	f040 8181 	bne.w	800583c <HAL_ADC_ConfigChannel+0x550>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	2100      	movs	r1, #0
 8005540:	4618      	mov	r0, r3
 8005542:	f7ff faeb 	bl	8004b1c <LL_ADC_GetOffsetChannel>
 8005546:	4603      	mov	r3, r0
 8005548:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800554c:	2b00      	cmp	r3, #0
 800554e:	d10a      	bne.n	8005566 <HAL_ADC_ConfigChannel+0x27a>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	2100      	movs	r1, #0
 8005556:	4618      	mov	r0, r3
 8005558:	f7ff fae0 	bl	8004b1c <LL_ADC_GetOffsetChannel>
 800555c:	4603      	mov	r3, r0
 800555e:	0e9b      	lsrs	r3, r3, #26
 8005560:	f003 021f 	and.w	r2, r3, #31
 8005564:	e01e      	b.n	80055a4 <HAL_ADC_ConfigChannel+0x2b8>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	2100      	movs	r1, #0
 800556c:	4618      	mov	r0, r3
 800556e:	f7ff fad5 	bl	8004b1c <LL_ADC_GetOffsetChannel>
 8005572:	4603      	mov	r3, r0
 8005574:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005578:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800557c:	fa93 f3a3 	rbit	r3, r3
 8005580:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  return result;
 8005584:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005588:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  if (value == 0U)
 800558c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8005590:	2b00      	cmp	r3, #0
 8005592:	d101      	bne.n	8005598 <HAL_ADC_ConfigChannel+0x2ac>
    return 32U;
 8005594:	2320      	movs	r3, #32
 8005596:	e004      	b.n	80055a2 <HAL_ADC_ConfigChannel+0x2b6>
  return __builtin_clz(value);
 8005598:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800559c:	fab3 f383 	clz	r3, r3
 80055a0:	b2db      	uxtb	r3, r3
 80055a2:	461a      	mov	r2, r3
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d10b      	bne.n	80055c8 <HAL_ADC_ConfigChannel+0x2dc>
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	0e9b      	lsrs	r3, r3, #26
 80055b6:	f003 031f 	and.w	r3, r3, #31
 80055ba:	e01e      	b.n	80055fa <HAL_ADC_ConfigChannel+0x30e>
 80055bc:	47ff0000 	.word	0x47ff0000
 80055c0:	58026000 	.word	0x58026000
 80055c4:	5c001000 	.word	0x5c001000
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80055d4:	fa93 f3a3 	rbit	r3, r3
 80055d8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 80055dc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80055e0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 80055e4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d101      	bne.n	80055f0 <HAL_ADC_ConfigChannel+0x304>
    return 32U;
 80055ec:	2320      	movs	r3, #32
 80055ee:	e004      	b.n	80055fa <HAL_ADC_ConfigChannel+0x30e>
  return __builtin_clz(value);
 80055f0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80055f4:	fab3 f383 	clz	r3, r3
 80055f8:	b2db      	uxtb	r3, r3
 80055fa:	429a      	cmp	r2, r3
 80055fc:	d106      	bne.n	800560c <HAL_ADC_ConfigChannel+0x320>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	2200      	movs	r2, #0
 8005604:	2100      	movs	r1, #0
 8005606:	4618      	mov	r0, r3
 8005608:	f7ff fb1e 	bl	8004c48 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	2101      	movs	r1, #1
 8005612:	4618      	mov	r0, r3
 8005614:	f7ff fa82 	bl	8004b1c <LL_ADC_GetOffsetChannel>
 8005618:	4603      	mov	r3, r0
 800561a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800561e:	2b00      	cmp	r3, #0
 8005620:	d10a      	bne.n	8005638 <HAL_ADC_ConfigChannel+0x34c>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	2101      	movs	r1, #1
 8005628:	4618      	mov	r0, r3
 800562a:	f7ff fa77 	bl	8004b1c <LL_ADC_GetOffsetChannel>
 800562e:	4603      	mov	r3, r0
 8005630:	0e9b      	lsrs	r3, r3, #26
 8005632:	f003 021f 	and.w	r2, r3, #31
 8005636:	e01e      	b.n	8005676 <HAL_ADC_ConfigChannel+0x38a>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	2101      	movs	r1, #1
 800563e:	4618      	mov	r0, r3
 8005640:	f7ff fa6c 	bl	8004b1c <LL_ADC_GetOffsetChannel>
 8005644:	4603      	mov	r3, r0
 8005646:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800564a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800564e:	fa93 f3a3 	rbit	r3, r3
 8005652:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8005656:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800565a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 800565e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005662:	2b00      	cmp	r3, #0
 8005664:	d101      	bne.n	800566a <HAL_ADC_ConfigChannel+0x37e>
    return 32U;
 8005666:	2320      	movs	r3, #32
 8005668:	e004      	b.n	8005674 <HAL_ADC_ConfigChannel+0x388>
  return __builtin_clz(value);
 800566a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800566e:	fab3 f383 	clz	r3, r3
 8005672:	b2db      	uxtb	r3, r3
 8005674:	461a      	mov	r2, r3
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800567e:	2b00      	cmp	r3, #0
 8005680:	d105      	bne.n	800568e <HAL_ADC_ConfigChannel+0x3a2>
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	0e9b      	lsrs	r3, r3, #26
 8005688:	f003 031f 	and.w	r3, r3, #31
 800568c:	e018      	b.n	80056c0 <HAL_ADC_ConfigChannel+0x3d4>
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005696:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800569a:	fa93 f3a3 	rbit	r3, r3
 800569e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 80056a2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80056a6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 80056aa:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d101      	bne.n	80056b6 <HAL_ADC_ConfigChannel+0x3ca>
    return 32U;
 80056b2:	2320      	movs	r3, #32
 80056b4:	e004      	b.n	80056c0 <HAL_ADC_ConfigChannel+0x3d4>
  return __builtin_clz(value);
 80056b6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80056ba:	fab3 f383 	clz	r3, r3
 80056be:	b2db      	uxtb	r3, r3
 80056c0:	429a      	cmp	r2, r3
 80056c2:	d106      	bne.n	80056d2 <HAL_ADC_ConfigChannel+0x3e6>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	2200      	movs	r2, #0
 80056ca:	2101      	movs	r1, #1
 80056cc:	4618      	mov	r0, r3
 80056ce:	f7ff fabb 	bl	8004c48 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	2102      	movs	r1, #2
 80056d8:	4618      	mov	r0, r3
 80056da:	f7ff fa1f 	bl	8004b1c <LL_ADC_GetOffsetChannel>
 80056de:	4603      	mov	r3, r0
 80056e0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d10a      	bne.n	80056fe <HAL_ADC_ConfigChannel+0x412>
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	2102      	movs	r1, #2
 80056ee:	4618      	mov	r0, r3
 80056f0:	f7ff fa14 	bl	8004b1c <LL_ADC_GetOffsetChannel>
 80056f4:	4603      	mov	r3, r0
 80056f6:	0e9b      	lsrs	r3, r3, #26
 80056f8:	f003 021f 	and.w	r2, r3, #31
 80056fc:	e01e      	b.n	800573c <HAL_ADC_ConfigChannel+0x450>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	2102      	movs	r1, #2
 8005704:	4618      	mov	r0, r3
 8005706:	f7ff fa09 	bl	8004b1c <LL_ADC_GetOffsetChannel>
 800570a:	4603      	mov	r3, r0
 800570c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005710:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005714:	fa93 f3a3 	rbit	r3, r3
 8005718:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 800571c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005720:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8005724:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005728:	2b00      	cmp	r3, #0
 800572a:	d101      	bne.n	8005730 <HAL_ADC_ConfigChannel+0x444>
    return 32U;
 800572c:	2320      	movs	r3, #32
 800572e:	e004      	b.n	800573a <HAL_ADC_ConfigChannel+0x44e>
  return __builtin_clz(value);
 8005730:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005734:	fab3 f383 	clz	r3, r3
 8005738:	b2db      	uxtb	r3, r3
 800573a:	461a      	mov	r2, r3
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005744:	2b00      	cmp	r3, #0
 8005746:	d105      	bne.n	8005754 <HAL_ADC_ConfigChannel+0x468>
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	0e9b      	lsrs	r3, r3, #26
 800574e:	f003 031f 	and.w	r3, r3, #31
 8005752:	e014      	b.n	800577e <HAL_ADC_ConfigChannel+0x492>
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800575a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800575c:	fa93 f3a3 	rbit	r3, r3
 8005760:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8005762:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005764:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8005768:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800576c:	2b00      	cmp	r3, #0
 800576e:	d101      	bne.n	8005774 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8005770:	2320      	movs	r3, #32
 8005772:	e004      	b.n	800577e <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8005774:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005778:	fab3 f383 	clz	r3, r3
 800577c:	b2db      	uxtb	r3, r3
 800577e:	429a      	cmp	r2, r3
 8005780:	d106      	bne.n	8005790 <HAL_ADC_ConfigChannel+0x4a4>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	2200      	movs	r2, #0
 8005788:	2102      	movs	r1, #2
 800578a:	4618      	mov	r0, r3
 800578c:	f7ff fa5c 	bl	8004c48 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	2103      	movs	r1, #3
 8005796:	4618      	mov	r0, r3
 8005798:	f7ff f9c0 	bl	8004b1c <LL_ADC_GetOffsetChannel>
 800579c:	4603      	mov	r3, r0
 800579e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d10a      	bne.n	80057bc <HAL_ADC_ConfigChannel+0x4d0>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	2103      	movs	r1, #3
 80057ac:	4618      	mov	r0, r3
 80057ae:	f7ff f9b5 	bl	8004b1c <LL_ADC_GetOffsetChannel>
 80057b2:	4603      	mov	r3, r0
 80057b4:	0e9b      	lsrs	r3, r3, #26
 80057b6:	f003 021f 	and.w	r2, r3, #31
 80057ba:	e017      	b.n	80057ec <HAL_ADC_ConfigChannel+0x500>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	2103      	movs	r1, #3
 80057c2:	4618      	mov	r0, r3
 80057c4:	f7ff f9aa 	bl	8004b1c <LL_ADC_GetOffsetChannel>
 80057c8:	4603      	mov	r3, r0
 80057ca:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057cc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80057ce:	fa93 f3a3 	rbit	r3, r3
 80057d2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80057d4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80057d6:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 80057d8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d101      	bne.n	80057e2 <HAL_ADC_ConfigChannel+0x4f6>
    return 32U;
 80057de:	2320      	movs	r3, #32
 80057e0:	e003      	b.n	80057ea <HAL_ADC_ConfigChannel+0x4fe>
  return __builtin_clz(value);
 80057e2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80057e4:	fab3 f383 	clz	r3, r3
 80057e8:	b2db      	uxtb	r3, r3
 80057ea:	461a      	mov	r2, r3
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d105      	bne.n	8005804 <HAL_ADC_ConfigChannel+0x518>
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	0e9b      	lsrs	r3, r3, #26
 80057fe:	f003 031f 	and.w	r3, r3, #31
 8005802:	e011      	b.n	8005828 <HAL_ADC_ConfigChannel+0x53c>
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800580a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800580c:	fa93 f3a3 	rbit	r3, r3
 8005810:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8005812:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005814:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8005816:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005818:	2b00      	cmp	r3, #0
 800581a:	d101      	bne.n	8005820 <HAL_ADC_ConfigChannel+0x534>
    return 32U;
 800581c:	2320      	movs	r3, #32
 800581e:	e003      	b.n	8005828 <HAL_ADC_ConfigChannel+0x53c>
  return __builtin_clz(value);
 8005820:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005822:	fab3 f383 	clz	r3, r3
 8005826:	b2db      	uxtb	r3, r3
 8005828:	429a      	cmp	r2, r3
 800582a:	d14f      	bne.n	80058cc <HAL_ADC_ConfigChannel+0x5e0>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	2200      	movs	r2, #0
 8005832:	2103      	movs	r1, #3
 8005834:	4618      	mov	r0, r3
 8005836:	f7ff fa07 	bl	8004c48 <LL_ADC_SetOffsetState>
 800583a:	e047      	b.n	80058cc <HAL_ADC_ConfigChannel+0x5e0>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005842:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	069b      	lsls	r3, r3, #26
 800584c:	429a      	cmp	r2, r3
 800584e:	d107      	bne.n	8005860 <HAL_ADC_ConfigChannel+0x574>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800585e:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005866:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	069b      	lsls	r3, r3, #26
 8005870:	429a      	cmp	r2, r3
 8005872:	d107      	bne.n	8005884 <HAL_ADC_ConfigChannel+0x598>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8005882:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800588a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	069b      	lsls	r3, r3, #26
 8005894:	429a      	cmp	r2, r3
 8005896:	d107      	bne.n	80058a8 <HAL_ADC_ConfigChannel+0x5bc>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80058a6:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80058ae:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	069b      	lsls	r3, r3, #26
 80058b8:	429a      	cmp	r2, r3
 80058ba:	d107      	bne.n	80058cc <HAL_ADC_ConfigChannel+0x5e0>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80058ca:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	4618      	mov	r0, r3
 80058d2:	f7ff fac9 	bl	8004e68 <LL_ADC_IsEnabled>
 80058d6:	4603      	mov	r3, r0
 80058d8:	2b00      	cmp	r3, #0
 80058da:	f040 8219 	bne.w	8005d10 <HAL_ADC_ConfigChannel+0xa24>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6818      	ldr	r0, [r3, #0]
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	6819      	ldr	r1, [r3, #0]
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	68db      	ldr	r3, [r3, #12]
 80058ea:	461a      	mov	r2, r3
 80058ec:	f7ff fa2e 	bl	8004d4c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	68db      	ldr	r3, [r3, #12]
 80058f4:	4aa1      	ldr	r2, [pc, #644]	@ (8005b7c <HAL_ADC_ConfigChannel+0x890>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	f040 812e 	bne.w	8005b58 <HAL_ADC_ConfigChannel+0x86c>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005908:	2b00      	cmp	r3, #0
 800590a:	d10b      	bne.n	8005924 <HAL_ADC_ConfigChannel+0x638>
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	0e9b      	lsrs	r3, r3, #26
 8005912:	3301      	adds	r3, #1
 8005914:	f003 031f 	and.w	r3, r3, #31
 8005918:	2b09      	cmp	r3, #9
 800591a:	bf94      	ite	ls
 800591c:	2301      	movls	r3, #1
 800591e:	2300      	movhi	r3, #0
 8005920:	b2db      	uxtb	r3, r3
 8005922:	e019      	b.n	8005958 <HAL_ADC_ConfigChannel+0x66c>
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800592a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800592c:	fa93 f3a3 	rbit	r3, r3
 8005930:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8005932:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005934:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8005936:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005938:	2b00      	cmp	r3, #0
 800593a:	d101      	bne.n	8005940 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 800593c:	2320      	movs	r3, #32
 800593e:	e003      	b.n	8005948 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8005940:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005942:	fab3 f383 	clz	r3, r3
 8005946:	b2db      	uxtb	r3, r3
 8005948:	3301      	adds	r3, #1
 800594a:	f003 031f 	and.w	r3, r3, #31
 800594e:	2b09      	cmp	r3, #9
 8005950:	bf94      	ite	ls
 8005952:	2301      	movls	r3, #1
 8005954:	2300      	movhi	r3, #0
 8005956:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005958:	2b00      	cmp	r3, #0
 800595a:	d079      	beq.n	8005a50 <HAL_ADC_ConfigChannel+0x764>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005964:	2b00      	cmp	r3, #0
 8005966:	d107      	bne.n	8005978 <HAL_ADC_ConfigChannel+0x68c>
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	0e9b      	lsrs	r3, r3, #26
 800596e:	3301      	adds	r3, #1
 8005970:	069b      	lsls	r3, r3, #26
 8005972:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005976:	e015      	b.n	80059a4 <HAL_ADC_ConfigChannel+0x6b8>
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800597e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005980:	fa93 f3a3 	rbit	r3, r3
 8005984:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8005986:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005988:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 800598a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800598c:	2b00      	cmp	r3, #0
 800598e:	d101      	bne.n	8005994 <HAL_ADC_ConfigChannel+0x6a8>
    return 32U;
 8005990:	2320      	movs	r3, #32
 8005992:	e003      	b.n	800599c <HAL_ADC_ConfigChannel+0x6b0>
  return __builtin_clz(value);
 8005994:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005996:	fab3 f383 	clz	r3, r3
 800599a:	b2db      	uxtb	r3, r3
 800599c:	3301      	adds	r3, #1
 800599e:	069b      	lsls	r3, r3, #26
 80059a0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d109      	bne.n	80059c4 <HAL_ADC_ConfigChannel+0x6d8>
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	0e9b      	lsrs	r3, r3, #26
 80059b6:	3301      	adds	r3, #1
 80059b8:	f003 031f 	and.w	r3, r3, #31
 80059bc:	2101      	movs	r1, #1
 80059be:	fa01 f303 	lsl.w	r3, r1, r3
 80059c2:	e017      	b.n	80059f4 <HAL_ADC_ConfigChannel+0x708>
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80059cc:	fa93 f3a3 	rbit	r3, r3
 80059d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 80059d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80059d4:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 80059d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d101      	bne.n	80059e0 <HAL_ADC_ConfigChannel+0x6f4>
    return 32U;
 80059dc:	2320      	movs	r3, #32
 80059de:	e003      	b.n	80059e8 <HAL_ADC_ConfigChannel+0x6fc>
  return __builtin_clz(value);
 80059e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80059e2:	fab3 f383 	clz	r3, r3
 80059e6:	b2db      	uxtb	r3, r3
 80059e8:	3301      	adds	r3, #1
 80059ea:	f003 031f 	and.w	r3, r3, #31
 80059ee:	2101      	movs	r1, #1
 80059f0:	fa01 f303 	lsl.w	r3, r1, r3
 80059f4:	ea42 0103 	orr.w	r1, r2, r3
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d10a      	bne.n	8005a1a <HAL_ADC_ConfigChannel+0x72e>
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	0e9b      	lsrs	r3, r3, #26
 8005a0a:	3301      	adds	r3, #1
 8005a0c:	f003 021f 	and.w	r2, r3, #31
 8005a10:	4613      	mov	r3, r2
 8005a12:	005b      	lsls	r3, r3, #1
 8005a14:	4413      	add	r3, r2
 8005a16:	051b      	lsls	r3, r3, #20
 8005a18:	e018      	b.n	8005a4c <HAL_ADC_ConfigChannel+0x760>
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a22:	fa93 f3a3 	rbit	r3, r3
 8005a26:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8005a28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a2a:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8005a2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d101      	bne.n	8005a36 <HAL_ADC_ConfigChannel+0x74a>
    return 32U;
 8005a32:	2320      	movs	r3, #32
 8005a34:	e003      	b.n	8005a3e <HAL_ADC_ConfigChannel+0x752>
  return __builtin_clz(value);
 8005a36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a38:	fab3 f383 	clz	r3, r3
 8005a3c:	b2db      	uxtb	r3, r3
 8005a3e:	3301      	adds	r3, #1
 8005a40:	f003 021f 	and.w	r2, r3, #31
 8005a44:	4613      	mov	r3, r2
 8005a46:	005b      	lsls	r3, r3, #1
 8005a48:	4413      	add	r3, r2
 8005a4a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005a4c:	430b      	orrs	r3, r1
 8005a4e:	e07e      	b.n	8005b4e <HAL_ADC_ConfigChannel+0x862>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d107      	bne.n	8005a6c <HAL_ADC_ConfigChannel+0x780>
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	0e9b      	lsrs	r3, r3, #26
 8005a62:	3301      	adds	r3, #1
 8005a64:	069b      	lsls	r3, r3, #26
 8005a66:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005a6a:	e015      	b.n	8005a98 <HAL_ADC_ConfigChannel+0x7ac>
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a74:	fa93 f3a3 	rbit	r3, r3
 8005a78:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8005a7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8005a7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d101      	bne.n	8005a88 <HAL_ADC_ConfigChannel+0x79c>
    return 32U;
 8005a84:	2320      	movs	r3, #32
 8005a86:	e003      	b.n	8005a90 <HAL_ADC_ConfigChannel+0x7a4>
  return __builtin_clz(value);
 8005a88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a8a:	fab3 f383 	clz	r3, r3
 8005a8e:	b2db      	uxtb	r3, r3
 8005a90:	3301      	adds	r3, #1
 8005a92:	069b      	lsls	r3, r3, #26
 8005a94:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d109      	bne.n	8005ab8 <HAL_ADC_ConfigChannel+0x7cc>
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	0e9b      	lsrs	r3, r3, #26
 8005aaa:	3301      	adds	r3, #1
 8005aac:	f003 031f 	and.w	r3, r3, #31
 8005ab0:	2101      	movs	r1, #1
 8005ab2:	fa01 f303 	lsl.w	r3, r1, r3
 8005ab6:	e017      	b.n	8005ae8 <HAL_ADC_ConfigChannel+0x7fc>
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005abe:	69fb      	ldr	r3, [r7, #28]
 8005ac0:	fa93 f3a3 	rbit	r3, r3
 8005ac4:	61bb      	str	r3, [r7, #24]
  return result;
 8005ac6:	69bb      	ldr	r3, [r7, #24]
 8005ac8:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8005aca:	6a3b      	ldr	r3, [r7, #32]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d101      	bne.n	8005ad4 <HAL_ADC_ConfigChannel+0x7e8>
    return 32U;
 8005ad0:	2320      	movs	r3, #32
 8005ad2:	e003      	b.n	8005adc <HAL_ADC_ConfigChannel+0x7f0>
  return __builtin_clz(value);
 8005ad4:	6a3b      	ldr	r3, [r7, #32]
 8005ad6:	fab3 f383 	clz	r3, r3
 8005ada:	b2db      	uxtb	r3, r3
 8005adc:	3301      	adds	r3, #1
 8005ade:	f003 031f 	and.w	r3, r3, #31
 8005ae2:	2101      	movs	r1, #1
 8005ae4:	fa01 f303 	lsl.w	r3, r1, r3
 8005ae8:	ea42 0103 	orr.w	r1, r2, r3
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d10d      	bne.n	8005b14 <HAL_ADC_ConfigChannel+0x828>
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	0e9b      	lsrs	r3, r3, #26
 8005afe:	3301      	adds	r3, #1
 8005b00:	f003 021f 	and.w	r2, r3, #31
 8005b04:	4613      	mov	r3, r2
 8005b06:	005b      	lsls	r3, r3, #1
 8005b08:	4413      	add	r3, r2
 8005b0a:	3b1e      	subs	r3, #30
 8005b0c:	051b      	lsls	r3, r3, #20
 8005b0e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005b12:	e01b      	b.n	8005b4c <HAL_ADC_ConfigChannel+0x860>
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b1a:	693b      	ldr	r3, [r7, #16]
 8005b1c:	fa93 f3a3 	rbit	r3, r3
 8005b20:	60fb      	str	r3, [r7, #12]
  return result;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8005b26:	697b      	ldr	r3, [r7, #20]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d101      	bne.n	8005b30 <HAL_ADC_ConfigChannel+0x844>
    return 32U;
 8005b2c:	2320      	movs	r3, #32
 8005b2e:	e003      	b.n	8005b38 <HAL_ADC_ConfigChannel+0x84c>
  return __builtin_clz(value);
 8005b30:	697b      	ldr	r3, [r7, #20]
 8005b32:	fab3 f383 	clz	r3, r3
 8005b36:	b2db      	uxtb	r3, r3
 8005b38:	3301      	adds	r3, #1
 8005b3a:	f003 021f 	and.w	r2, r3, #31
 8005b3e:	4613      	mov	r3, r2
 8005b40:	005b      	lsls	r3, r3, #1
 8005b42:	4413      	add	r3, r2
 8005b44:	3b1e      	subs	r3, #30
 8005b46:	051b      	lsls	r3, r3, #20
 8005b48:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005b4c:	430b      	orrs	r3, r1
 8005b4e:	683a      	ldr	r2, [r7, #0]
 8005b50:	6892      	ldr	r2, [r2, #8]
 8005b52:	4619      	mov	r1, r3
 8005b54:	f7ff f8ce 	bl	8004cf4 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	f280 80d7 	bge.w	8005d10 <HAL_ADC_ConfigChannel+0xa24>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	4a06      	ldr	r2, [pc, #24]	@ (8005b80 <HAL_ADC_ConfigChannel+0x894>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d004      	beq.n	8005b76 <HAL_ADC_ConfigChannel+0x88a>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	4a04      	ldr	r2, [pc, #16]	@ (8005b84 <HAL_ADC_ConfigChannel+0x898>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d10a      	bne.n	8005b8c <HAL_ADC_ConfigChannel+0x8a0>
 8005b76:	4b04      	ldr	r3, [pc, #16]	@ (8005b88 <HAL_ADC_ConfigChannel+0x89c>)
 8005b78:	e009      	b.n	8005b8e <HAL_ADC_ConfigChannel+0x8a2>
 8005b7a:	bf00      	nop
 8005b7c:	47ff0000 	.word	0x47ff0000
 8005b80:	40022000 	.word	0x40022000
 8005b84:	40022100 	.word	0x40022100
 8005b88:	40022300 	.word	0x40022300
 8005b8c:	4b65      	ldr	r3, [pc, #404]	@ (8005d24 <HAL_ADC_ConfigChannel+0xa38>)
 8005b8e:	4618      	mov	r0, r3
 8005b90:	f7fe ff84 	bl	8004a9c <LL_ADC_GetCommonPathInternalCh>
 8005b94:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	4a62      	ldr	r2, [pc, #392]	@ (8005d28 <HAL_ADC_ConfigChannel+0xa3c>)
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d004      	beq.n	8005bac <HAL_ADC_ConfigChannel+0x8c0>
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	4a61      	ldr	r2, [pc, #388]	@ (8005d2c <HAL_ADC_ConfigChannel+0xa40>)
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d10e      	bne.n	8005bca <HAL_ADC_ConfigChannel+0x8de>
 8005bac:	485e      	ldr	r0, [pc, #376]	@ (8005d28 <HAL_ADC_ConfigChannel+0xa3c>)
 8005bae:	f7ff f95b 	bl	8004e68 <LL_ADC_IsEnabled>
 8005bb2:	4604      	mov	r4, r0
 8005bb4:	485d      	ldr	r0, [pc, #372]	@ (8005d2c <HAL_ADC_ConfigChannel+0xa40>)
 8005bb6:	f7ff f957 	bl	8004e68 <LL_ADC_IsEnabled>
 8005bba:	4603      	mov	r3, r0
 8005bbc:	4323      	orrs	r3, r4
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	bf0c      	ite	eq
 8005bc2:	2301      	moveq	r3, #1
 8005bc4:	2300      	movne	r3, #0
 8005bc6:	b2db      	uxtb	r3, r3
 8005bc8:	e008      	b.n	8005bdc <HAL_ADC_ConfigChannel+0x8f0>
 8005bca:	4859      	ldr	r0, [pc, #356]	@ (8005d30 <HAL_ADC_ConfigChannel+0xa44>)
 8005bcc:	f7ff f94c 	bl	8004e68 <LL_ADC_IsEnabled>
 8005bd0:	4603      	mov	r3, r0
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	bf0c      	ite	eq
 8005bd6:	2301      	moveq	r3, #1
 8005bd8:	2300      	movne	r3, #0
 8005bda:	b2db      	uxtb	r3, r3
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	f000 8084 	beq.w	8005cea <HAL_ADC_ConfigChannel+0x9fe>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	4a53      	ldr	r2, [pc, #332]	@ (8005d34 <HAL_ADC_ConfigChannel+0xa48>)
 8005be8:	4293      	cmp	r3, r2
 8005bea:	d132      	bne.n	8005c52 <HAL_ADC_ConfigChannel+0x966>
 8005bec:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005bf0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d12c      	bne.n	8005c52 <HAL_ADC_ConfigChannel+0x966>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	4a4c      	ldr	r2, [pc, #304]	@ (8005d30 <HAL_ADC_ConfigChannel+0xa44>)
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	f040 8086 	bne.w	8005d10 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	4a47      	ldr	r2, [pc, #284]	@ (8005d28 <HAL_ADC_ConfigChannel+0xa3c>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d004      	beq.n	8005c18 <HAL_ADC_ConfigChannel+0x92c>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	4a46      	ldr	r2, [pc, #280]	@ (8005d2c <HAL_ADC_ConfigChannel+0xa40>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d101      	bne.n	8005c1c <HAL_ADC_ConfigChannel+0x930>
 8005c18:	4a47      	ldr	r2, [pc, #284]	@ (8005d38 <HAL_ADC_ConfigChannel+0xa4c>)
 8005c1a:	e000      	b.n	8005c1e <HAL_ADC_ConfigChannel+0x932>
 8005c1c:	4a41      	ldr	r2, [pc, #260]	@ (8005d24 <HAL_ADC_ConfigChannel+0xa38>)
 8005c1e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005c22:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005c26:	4619      	mov	r1, r3
 8005c28:	4610      	mov	r0, r2
 8005c2a:	f7fe ff24 	bl	8004a76 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005c2e:	4b43      	ldr	r3, [pc, #268]	@ (8005d3c <HAL_ADC_ConfigChannel+0xa50>)
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	099b      	lsrs	r3, r3, #6
 8005c34:	4a42      	ldr	r2, [pc, #264]	@ (8005d40 <HAL_ADC_ConfigChannel+0xa54>)
 8005c36:	fba2 2303 	umull	r2, r3, r2, r3
 8005c3a:	099b      	lsrs	r3, r3, #6
 8005c3c:	3301      	adds	r3, #1
 8005c3e:	005b      	lsls	r3, r3, #1
 8005c40:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8005c42:	e002      	b.n	8005c4a <HAL_ADC_ConfigChannel+0x95e>
              {
                wait_loop_index--;
 8005c44:	68bb      	ldr	r3, [r7, #8]
 8005c46:	3b01      	subs	r3, #1
 8005c48:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8005c4a:	68bb      	ldr	r3, [r7, #8]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d1f9      	bne.n	8005c44 <HAL_ADC_ConfigChannel+0x958>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005c50:	e05e      	b.n	8005d10 <HAL_ADC_ConfigChannel+0xa24>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	4a3b      	ldr	r2, [pc, #236]	@ (8005d44 <HAL_ADC_ConfigChannel+0xa58>)
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d120      	bne.n	8005c9e <HAL_ADC_ConfigChannel+0x9b2>
 8005c5c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005c60:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d11a      	bne.n	8005c9e <HAL_ADC_ConfigChannel+0x9b2>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	4a30      	ldr	r2, [pc, #192]	@ (8005d30 <HAL_ADC_ConfigChannel+0xa44>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d14e      	bne.n	8005d10 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	4a2c      	ldr	r2, [pc, #176]	@ (8005d28 <HAL_ADC_ConfigChannel+0xa3c>)
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d004      	beq.n	8005c86 <HAL_ADC_ConfigChannel+0x99a>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	4a2a      	ldr	r2, [pc, #168]	@ (8005d2c <HAL_ADC_ConfigChannel+0xa40>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d101      	bne.n	8005c8a <HAL_ADC_ConfigChannel+0x99e>
 8005c86:	4a2c      	ldr	r2, [pc, #176]	@ (8005d38 <HAL_ADC_ConfigChannel+0xa4c>)
 8005c88:	e000      	b.n	8005c8c <HAL_ADC_ConfigChannel+0x9a0>
 8005c8a:	4a26      	ldr	r2, [pc, #152]	@ (8005d24 <HAL_ADC_ConfigChannel+0xa38>)
 8005c8c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005c90:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005c94:	4619      	mov	r1, r3
 8005c96:	4610      	mov	r0, r2
 8005c98:	f7fe feed 	bl	8004a76 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005c9c:	e038      	b.n	8005d10 <HAL_ADC_ConfigChannel+0xa24>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	4a29      	ldr	r2, [pc, #164]	@ (8005d48 <HAL_ADC_ConfigChannel+0xa5c>)
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d133      	bne.n	8005d10 <HAL_ADC_ConfigChannel+0xa24>
 8005ca8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005cac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d12d      	bne.n	8005d10 <HAL_ADC_ConfigChannel+0xa24>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	4a1d      	ldr	r2, [pc, #116]	@ (8005d30 <HAL_ADC_ConfigChannel+0xa44>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d128      	bne.n	8005d10 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	4a19      	ldr	r2, [pc, #100]	@ (8005d28 <HAL_ADC_ConfigChannel+0xa3c>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d004      	beq.n	8005cd2 <HAL_ADC_ConfigChannel+0x9e6>
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	4a17      	ldr	r2, [pc, #92]	@ (8005d2c <HAL_ADC_ConfigChannel+0xa40>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d101      	bne.n	8005cd6 <HAL_ADC_ConfigChannel+0x9ea>
 8005cd2:	4a19      	ldr	r2, [pc, #100]	@ (8005d38 <HAL_ADC_ConfigChannel+0xa4c>)
 8005cd4:	e000      	b.n	8005cd8 <HAL_ADC_ConfigChannel+0x9ec>
 8005cd6:	4a13      	ldr	r2, [pc, #76]	@ (8005d24 <HAL_ADC_ConfigChannel+0xa38>)
 8005cd8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005cdc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005ce0:	4619      	mov	r1, r3
 8005ce2:	4610      	mov	r0, r2
 8005ce4:	f7fe fec7 	bl	8004a76 <LL_ADC_SetCommonPathInternalCh>
 8005ce8:	e012      	b.n	8005d10 <HAL_ADC_ConfigChannel+0xa24>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005cee:	f043 0220 	orr.w	r2, r3, #32
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	661a      	str	r2, [r3, #96]	@ 0x60

          tmp_hal_status = HAL_ERROR;
 8005cf6:	2301      	movs	r3, #1
 8005cf8:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
 8005cfc:	e008      	b.n	8005d10 <HAL_ADC_ConfigChannel+0xa24>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d02:	f043 0220 	orr.w	r2, r3, #32
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8005d0a:	2301      	movs	r3, #1
 8005d0c:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2200      	movs	r2, #0
 8005d14:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8005d18:	f897 30df 	ldrb.w	r3, [r7, #223]	@ 0xdf
}
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	37e4      	adds	r7, #228	@ 0xe4
 8005d20:	46bd      	mov	sp, r7
 8005d22:	bd90      	pop	{r4, r7, pc}
 8005d24:	58026300 	.word	0x58026300
 8005d28:	40022000 	.word	0x40022000
 8005d2c:	40022100 	.word	0x40022100
 8005d30:	58026000 	.word	0x58026000
 8005d34:	c7520000 	.word	0xc7520000
 8005d38:	40022300 	.word	0x40022300
 8005d3c:	24000000 	.word	0x24000000
 8005d40:	053e2d63 	.word	0x053e2d63
 8005d44:	c3210000 	.word	0xc3210000
 8005d48:	cb840000 	.word	0xcb840000

08005d4c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b084      	sub	sp, #16
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	4a6c      	ldr	r2, [pc, #432]	@ (8005f0c <ADC_ConfigureBoostMode+0x1c0>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d004      	beq.n	8005d68 <ADC_ConfigureBoostMode+0x1c>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	4a6b      	ldr	r2, [pc, #428]	@ (8005f10 <ADC_ConfigureBoostMode+0x1c4>)
 8005d64:	4293      	cmp	r3, r2
 8005d66:	d109      	bne.n	8005d7c <ADC_ConfigureBoostMode+0x30>
 8005d68:	4b6a      	ldr	r3, [pc, #424]	@ (8005f14 <ADC_ConfigureBoostMode+0x1c8>)
 8005d6a:	689b      	ldr	r3, [r3, #8]
 8005d6c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	bf14      	ite	ne
 8005d74:	2301      	movne	r3, #1
 8005d76:	2300      	moveq	r3, #0
 8005d78:	b2db      	uxtb	r3, r3
 8005d7a:	e008      	b.n	8005d8e <ADC_ConfigureBoostMode+0x42>
 8005d7c:	4b66      	ldr	r3, [pc, #408]	@ (8005f18 <ADC_ConfigureBoostMode+0x1cc>)
 8005d7e:	689b      	ldr	r3, [r3, #8]
 8005d80:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	bf14      	ite	ne
 8005d88:	2301      	movne	r3, #1
 8005d8a:	2300      	moveq	r3, #0
 8005d8c:	b2db      	uxtb	r3, r3
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d01c      	beq.n	8005dcc <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8005d92:	f005 fbe5 	bl	800b560 <HAL_RCC_GetHCLKFreq>
 8005d96:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	685b      	ldr	r3, [r3, #4]
 8005d9c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005da0:	d010      	beq.n	8005dc4 <ADC_ConfigureBoostMode+0x78>
 8005da2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005da6:	d873      	bhi.n	8005e90 <ADC_ConfigureBoostMode+0x144>
 8005da8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005dac:	d002      	beq.n	8005db4 <ADC_ConfigureBoostMode+0x68>
 8005dae:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005db2:	d16d      	bne.n	8005e90 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	685b      	ldr	r3, [r3, #4]
 8005db8:	0c1b      	lsrs	r3, r3, #16
 8005dba:	68fa      	ldr	r2, [r7, #12]
 8005dbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dc0:	60fb      	str	r3, [r7, #12]
        break;
 8005dc2:	e068      	b.n	8005e96 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	089b      	lsrs	r3, r3, #2
 8005dc8:	60fb      	str	r3, [r7, #12]
        break;
 8005dca:	e064      	b.n	8005e96 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8005dcc:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8005dd0:	f04f 0100 	mov.w	r1, #0
 8005dd4:	f006 fdc0 	bl	800c958 <HAL_RCCEx_GetPeriphCLKFreq>
 8005dd8:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	685b      	ldr	r3, [r3, #4]
 8005dde:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8005de2:	d051      	beq.n	8005e88 <ADC_ConfigureBoostMode+0x13c>
 8005de4:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8005de8:	d854      	bhi.n	8005e94 <ADC_ConfigureBoostMode+0x148>
 8005dea:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8005dee:	d047      	beq.n	8005e80 <ADC_ConfigureBoostMode+0x134>
 8005df0:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8005df4:	d84e      	bhi.n	8005e94 <ADC_ConfigureBoostMode+0x148>
 8005df6:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8005dfa:	d03d      	beq.n	8005e78 <ADC_ConfigureBoostMode+0x12c>
 8005dfc:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8005e00:	d848      	bhi.n	8005e94 <ADC_ConfigureBoostMode+0x148>
 8005e02:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005e06:	d033      	beq.n	8005e70 <ADC_ConfigureBoostMode+0x124>
 8005e08:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005e0c:	d842      	bhi.n	8005e94 <ADC_ConfigureBoostMode+0x148>
 8005e0e:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8005e12:	d029      	beq.n	8005e68 <ADC_ConfigureBoostMode+0x11c>
 8005e14:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8005e18:	d83c      	bhi.n	8005e94 <ADC_ConfigureBoostMode+0x148>
 8005e1a:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8005e1e:	d01a      	beq.n	8005e56 <ADC_ConfigureBoostMode+0x10a>
 8005e20:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8005e24:	d836      	bhi.n	8005e94 <ADC_ConfigureBoostMode+0x148>
 8005e26:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8005e2a:	d014      	beq.n	8005e56 <ADC_ConfigureBoostMode+0x10a>
 8005e2c:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8005e30:	d830      	bhi.n	8005e94 <ADC_ConfigureBoostMode+0x148>
 8005e32:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005e36:	d00e      	beq.n	8005e56 <ADC_ConfigureBoostMode+0x10a>
 8005e38:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005e3c:	d82a      	bhi.n	8005e94 <ADC_ConfigureBoostMode+0x148>
 8005e3e:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8005e42:	d008      	beq.n	8005e56 <ADC_ConfigureBoostMode+0x10a>
 8005e44:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8005e48:	d824      	bhi.n	8005e94 <ADC_ConfigureBoostMode+0x148>
 8005e4a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005e4e:	d002      	beq.n	8005e56 <ADC_ConfigureBoostMode+0x10a>
 8005e50:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005e54:	d11e      	bne.n	8005e94 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	685b      	ldr	r3, [r3, #4]
 8005e5a:	0c9b      	lsrs	r3, r3, #18
 8005e5c:	005b      	lsls	r3, r3, #1
 8005e5e:	68fa      	ldr	r2, [r7, #12]
 8005e60:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e64:	60fb      	str	r3, [r7, #12]
        break;
 8005e66:	e016      	b.n	8005e96 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	091b      	lsrs	r3, r3, #4
 8005e6c:	60fb      	str	r3, [r7, #12]
        break;
 8005e6e:	e012      	b.n	8005e96 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	095b      	lsrs	r3, r3, #5
 8005e74:	60fb      	str	r3, [r7, #12]
        break;
 8005e76:	e00e      	b.n	8005e96 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	099b      	lsrs	r3, r3, #6
 8005e7c:	60fb      	str	r3, [r7, #12]
        break;
 8005e7e:	e00a      	b.n	8005e96 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	09db      	lsrs	r3, r3, #7
 8005e84:	60fb      	str	r3, [r7, #12]
        break;
 8005e86:	e006      	b.n	8005e96 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	0a1b      	lsrs	r3, r3, #8
 8005e8c:	60fb      	str	r3, [r7, #12]
        break;
 8005e8e:	e002      	b.n	8005e96 <ADC_ConfigureBoostMode+0x14a>
        break;
 8005e90:	bf00      	nop
 8005e92:	e000      	b.n	8005e96 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8005e94:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	085b      	lsrs	r3, r3, #1
 8005e9a:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	4a1f      	ldr	r2, [pc, #124]	@ (8005f1c <ADC_ConfigureBoostMode+0x1d0>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d808      	bhi.n	8005eb6 <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	689a      	ldr	r2, [r3, #8]
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8005eb2:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8005eb4:	e025      	b.n	8005f02 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	4a19      	ldr	r2, [pc, #100]	@ (8005f20 <ADC_ConfigureBoostMode+0x1d4>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d80a      	bhi.n	8005ed4 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	689b      	ldr	r3, [r3, #8]
 8005ec4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005ed0:	609a      	str	r2, [r3, #8]
}
 8005ed2:	e016      	b.n	8005f02 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	4a13      	ldr	r2, [pc, #76]	@ (8005f24 <ADC_ConfigureBoostMode+0x1d8>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d80a      	bhi.n	8005ef2 <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	689b      	ldr	r3, [r3, #8]
 8005ee2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005eee:	609a      	str	r2, [r3, #8]
}
 8005ef0:	e007      	b.n	8005f02 <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	689a      	ldr	r2, [r3, #8]
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8005f00:	609a      	str	r2, [r3, #8]
}
 8005f02:	bf00      	nop
 8005f04:	3710      	adds	r7, #16
 8005f06:	46bd      	mov	sp, r7
 8005f08:	bd80      	pop	{r7, pc}
 8005f0a:	bf00      	nop
 8005f0c:	40022000 	.word	0x40022000
 8005f10:	40022100 	.word	0x40022100
 8005f14:	40022300 	.word	0x40022300
 8005f18:	58026300 	.word	0x58026300
 8005f1c:	005f5e10 	.word	0x005f5e10
 8005f20:	00bebc20 	.word	0x00bebc20
 8005f24:	017d7840 	.word	0x017d7840

08005f28 <LL_ADC_IsEnabled>:
{
 8005f28:	b480      	push	{r7}
 8005f2a:	b083      	sub	sp, #12
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	689b      	ldr	r3, [r3, #8]
 8005f34:	f003 0301 	and.w	r3, r3, #1
 8005f38:	2b01      	cmp	r3, #1
 8005f3a:	d101      	bne.n	8005f40 <LL_ADC_IsEnabled+0x18>
 8005f3c:	2301      	movs	r3, #1
 8005f3e:	e000      	b.n	8005f42 <LL_ADC_IsEnabled+0x1a>
 8005f40:	2300      	movs	r3, #0
}
 8005f42:	4618      	mov	r0, r3
 8005f44:	370c      	adds	r7, #12
 8005f46:	46bd      	mov	sp, r7
 8005f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4c:	4770      	bx	lr

08005f4e <LL_ADC_REG_IsConversionOngoing>:
{
 8005f4e:	b480      	push	{r7}
 8005f50:	b083      	sub	sp, #12
 8005f52:	af00      	add	r7, sp, #0
 8005f54:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	689b      	ldr	r3, [r3, #8]
 8005f5a:	f003 0304 	and.w	r3, r3, #4
 8005f5e:	2b04      	cmp	r3, #4
 8005f60:	d101      	bne.n	8005f66 <LL_ADC_REG_IsConversionOngoing+0x18>
 8005f62:	2301      	movs	r3, #1
 8005f64:	e000      	b.n	8005f68 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005f66:	2300      	movs	r3, #0
}
 8005f68:	4618      	mov	r0, r3
 8005f6a:	370c      	adds	r7, #12
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f72:	4770      	bx	lr

08005f74 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8005f74:	b590      	push	{r4, r7, lr}
 8005f76:	b0a3      	sub	sp, #140	@ 0x8c
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
 8005f7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005f7e:	2300      	movs	r3, #0
 8005f80:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005f8a:	2b01      	cmp	r3, #1
 8005f8c:	d101      	bne.n	8005f92 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8005f8e:	2302      	movs	r3, #2
 8005f90:	e0c1      	b.n	8006116 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2201      	movs	r2, #1
 8005f96:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	673b      	str	r3, [r7, #112]	@ 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	4a5e      	ldr	r2, [pc, #376]	@ (8006120 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005fa8:	4293      	cmp	r3, r2
 8005faa:	d102      	bne.n	8005fb2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8005fac:	4b5d      	ldr	r3, [pc, #372]	@ (8006124 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005fae:	60fb      	str	r3, [r7, #12]
 8005fb0:	e001      	b.n	8005fb6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d10b      	bne.n	8005fd4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005fc0:	f043 0220 	orr.w	r2, r3, #32
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2200      	movs	r2, #0
 8005fcc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    return HAL_ERROR;
 8005fd0:	2301      	movs	r3, #1
 8005fd2:	e0a0      	b.n	8006116 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	f7ff ffb9 	bl	8005f4e <LL_ADC_REG_IsConversionOngoing>
 8005fdc:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	f7ff ffb2 	bl	8005f4e <LL_ADC_REG_IsConversionOngoing>
 8005fea:	4603      	mov	r3, r0
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	f040 8081 	bne.w	80060f4 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8005ff2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d17c      	bne.n	80060f4 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	4a48      	ldr	r2, [pc, #288]	@ (8006120 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8006000:	4293      	cmp	r3, r2
 8006002:	d004      	beq.n	800600e <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	4a46      	ldr	r2, [pc, #280]	@ (8006124 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800600a:	4293      	cmp	r3, r2
 800600c:	d101      	bne.n	8006012 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 800600e:	4b46      	ldr	r3, [pc, #280]	@ (8006128 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8006010:	e000      	b.n	8006014 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8006012:	4b46      	ldr	r3, [pc, #280]	@ (800612c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8006014:	67fb      	str	r3, [r7, #124]	@ 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d039      	beq.n	8006092 <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 800601e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006020:	689b      	ldr	r3, [r3, #8]
 8006022:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	685b      	ldr	r3, [r3, #4]
 800602a:	431a      	orrs	r2, r3
 800602c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800602e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	4a3a      	ldr	r2, [pc, #232]	@ (8006120 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d004      	beq.n	8006044 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	4a39      	ldr	r2, [pc, #228]	@ (8006124 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8006040:	4293      	cmp	r3, r2
 8006042:	d10e      	bne.n	8006062 <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8006044:	4836      	ldr	r0, [pc, #216]	@ (8006120 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8006046:	f7ff ff6f 	bl	8005f28 <LL_ADC_IsEnabled>
 800604a:	4604      	mov	r4, r0
 800604c:	4835      	ldr	r0, [pc, #212]	@ (8006124 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800604e:	f7ff ff6b 	bl	8005f28 <LL_ADC_IsEnabled>
 8006052:	4603      	mov	r3, r0
 8006054:	4323      	orrs	r3, r4
 8006056:	2b00      	cmp	r3, #0
 8006058:	bf0c      	ite	eq
 800605a:	2301      	moveq	r3, #1
 800605c:	2300      	movne	r3, #0
 800605e:	b2db      	uxtb	r3, r3
 8006060:	e008      	b.n	8006074 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8006062:	4833      	ldr	r0, [pc, #204]	@ (8006130 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8006064:	f7ff ff60 	bl	8005f28 <LL_ADC_IsEnabled>
 8006068:	4603      	mov	r3, r0
 800606a:	2b00      	cmp	r3, #0
 800606c:	bf0c      	ite	eq
 800606e:	2301      	moveq	r3, #1
 8006070:	2300      	movne	r3, #0
 8006072:	b2db      	uxtb	r3, r3
 8006074:	2b00      	cmp	r3, #0
 8006076:	d047      	beq.n	8006108 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8006078:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800607a:	689a      	ldr	r2, [r3, #8]
 800607c:	4b2d      	ldr	r3, [pc, #180]	@ (8006134 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 800607e:	4013      	ands	r3, r2
 8006080:	683a      	ldr	r2, [r7, #0]
 8006082:	6811      	ldr	r1, [r2, #0]
 8006084:	683a      	ldr	r2, [r7, #0]
 8006086:	6892      	ldr	r2, [r2, #8]
 8006088:	430a      	orrs	r2, r1
 800608a:	431a      	orrs	r2, r3
 800608c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800608e:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006090:	e03a      	b.n	8006108 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8006092:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006094:	689b      	ldr	r3, [r3, #8]
 8006096:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800609a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800609c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	4a1f      	ldr	r2, [pc, #124]	@ (8006120 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80060a4:	4293      	cmp	r3, r2
 80060a6:	d004      	beq.n	80060b2 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	4a1d      	ldr	r2, [pc, #116]	@ (8006124 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d10e      	bne.n	80060d0 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 80060b2:	481b      	ldr	r0, [pc, #108]	@ (8006120 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80060b4:	f7ff ff38 	bl	8005f28 <LL_ADC_IsEnabled>
 80060b8:	4604      	mov	r4, r0
 80060ba:	481a      	ldr	r0, [pc, #104]	@ (8006124 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80060bc:	f7ff ff34 	bl	8005f28 <LL_ADC_IsEnabled>
 80060c0:	4603      	mov	r3, r0
 80060c2:	4323      	orrs	r3, r4
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	bf0c      	ite	eq
 80060c8:	2301      	moveq	r3, #1
 80060ca:	2300      	movne	r3, #0
 80060cc:	b2db      	uxtb	r3, r3
 80060ce:	e008      	b.n	80060e2 <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 80060d0:	4817      	ldr	r0, [pc, #92]	@ (8006130 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 80060d2:	f7ff ff29 	bl	8005f28 <LL_ADC_IsEnabled>
 80060d6:	4603      	mov	r3, r0
 80060d8:	2b00      	cmp	r3, #0
 80060da:	bf0c      	ite	eq
 80060dc:	2301      	moveq	r3, #1
 80060de:	2300      	movne	r3, #0
 80060e0:	b2db      	uxtb	r3, r3
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d010      	beq.n	8006108 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80060e6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80060e8:	689a      	ldr	r2, [r3, #8]
 80060ea:	4b12      	ldr	r3, [pc, #72]	@ (8006134 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80060ec:	4013      	ands	r3, r2
 80060ee:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80060f0:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80060f2:	e009      	b.n	8006108 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80060f8:	f043 0220 	orr.w	r2, r3, #32
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8006100:	2301      	movs	r3, #1
 8006102:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8006106:	e000      	b.n	800610a <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006108:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2200      	movs	r2, #0
 800610e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8006112:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 8006116:	4618      	mov	r0, r3
 8006118:	378c      	adds	r7, #140	@ 0x8c
 800611a:	46bd      	mov	sp, r7
 800611c:	bd90      	pop	{r4, r7, pc}
 800611e:	bf00      	nop
 8006120:	40022000 	.word	0x40022000
 8006124:	40022100 	.word	0x40022100
 8006128:	40022300 	.word	0x40022300
 800612c:	58026300 	.word	0x58026300
 8006130:	58026000 	.word	0x58026000
 8006134:	fffff0e0 	.word	0xfffff0e0

08006138 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006138:	b480      	push	{r7}
 800613a:	b085      	sub	sp, #20
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	f003 0307 	and.w	r3, r3, #7
 8006146:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006148:	4b0b      	ldr	r3, [pc, #44]	@ (8006178 <__NVIC_SetPriorityGrouping+0x40>)
 800614a:	68db      	ldr	r3, [r3, #12]
 800614c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800614e:	68ba      	ldr	r2, [r7, #8]
 8006150:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8006154:	4013      	ands	r3, r2
 8006156:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800615c:	68bb      	ldr	r3, [r7, #8]
 800615e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8006160:	4b06      	ldr	r3, [pc, #24]	@ (800617c <__NVIC_SetPriorityGrouping+0x44>)
 8006162:	4313      	orrs	r3, r2
 8006164:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006166:	4a04      	ldr	r2, [pc, #16]	@ (8006178 <__NVIC_SetPriorityGrouping+0x40>)
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	60d3      	str	r3, [r2, #12]
}
 800616c:	bf00      	nop
 800616e:	3714      	adds	r7, #20
 8006170:	46bd      	mov	sp, r7
 8006172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006176:	4770      	bx	lr
 8006178:	e000ed00 	.word	0xe000ed00
 800617c:	05fa0000 	.word	0x05fa0000

08006180 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006180:	b480      	push	{r7}
 8006182:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006184:	4b04      	ldr	r3, [pc, #16]	@ (8006198 <__NVIC_GetPriorityGrouping+0x18>)
 8006186:	68db      	ldr	r3, [r3, #12]
 8006188:	0a1b      	lsrs	r3, r3, #8
 800618a:	f003 0307 	and.w	r3, r3, #7
}
 800618e:	4618      	mov	r0, r3
 8006190:	46bd      	mov	sp, r7
 8006192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006196:	4770      	bx	lr
 8006198:	e000ed00 	.word	0xe000ed00

0800619c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800619c:	b480      	push	{r7}
 800619e:	b083      	sub	sp, #12
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	4603      	mov	r3, r0
 80061a4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80061a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	db0b      	blt.n	80061c6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80061ae:	88fb      	ldrh	r3, [r7, #6]
 80061b0:	f003 021f 	and.w	r2, r3, #31
 80061b4:	4907      	ldr	r1, [pc, #28]	@ (80061d4 <__NVIC_EnableIRQ+0x38>)
 80061b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80061ba:	095b      	lsrs	r3, r3, #5
 80061bc:	2001      	movs	r0, #1
 80061be:	fa00 f202 	lsl.w	r2, r0, r2
 80061c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80061c6:	bf00      	nop
 80061c8:	370c      	adds	r7, #12
 80061ca:	46bd      	mov	sp, r7
 80061cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d0:	4770      	bx	lr
 80061d2:	bf00      	nop
 80061d4:	e000e100 	.word	0xe000e100

080061d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80061d8:	b480      	push	{r7}
 80061da:	b083      	sub	sp, #12
 80061dc:	af00      	add	r7, sp, #0
 80061de:	4603      	mov	r3, r0
 80061e0:	6039      	str	r1, [r7, #0]
 80061e2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80061e4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	db0a      	blt.n	8006202 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	b2da      	uxtb	r2, r3
 80061f0:	490c      	ldr	r1, [pc, #48]	@ (8006224 <__NVIC_SetPriority+0x4c>)
 80061f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80061f6:	0112      	lsls	r2, r2, #4
 80061f8:	b2d2      	uxtb	r2, r2
 80061fa:	440b      	add	r3, r1
 80061fc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006200:	e00a      	b.n	8006218 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	b2da      	uxtb	r2, r3
 8006206:	4908      	ldr	r1, [pc, #32]	@ (8006228 <__NVIC_SetPriority+0x50>)
 8006208:	88fb      	ldrh	r3, [r7, #6]
 800620a:	f003 030f 	and.w	r3, r3, #15
 800620e:	3b04      	subs	r3, #4
 8006210:	0112      	lsls	r2, r2, #4
 8006212:	b2d2      	uxtb	r2, r2
 8006214:	440b      	add	r3, r1
 8006216:	761a      	strb	r2, [r3, #24]
}
 8006218:	bf00      	nop
 800621a:	370c      	adds	r7, #12
 800621c:	46bd      	mov	sp, r7
 800621e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006222:	4770      	bx	lr
 8006224:	e000e100 	.word	0xe000e100
 8006228:	e000ed00 	.word	0xe000ed00

0800622c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800622c:	b480      	push	{r7}
 800622e:	b089      	sub	sp, #36	@ 0x24
 8006230:	af00      	add	r7, sp, #0
 8006232:	60f8      	str	r0, [r7, #12]
 8006234:	60b9      	str	r1, [r7, #8]
 8006236:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	f003 0307 	and.w	r3, r3, #7
 800623e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006240:	69fb      	ldr	r3, [r7, #28]
 8006242:	f1c3 0307 	rsb	r3, r3, #7
 8006246:	2b04      	cmp	r3, #4
 8006248:	bf28      	it	cs
 800624a:	2304      	movcs	r3, #4
 800624c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800624e:	69fb      	ldr	r3, [r7, #28]
 8006250:	3304      	adds	r3, #4
 8006252:	2b06      	cmp	r3, #6
 8006254:	d902      	bls.n	800625c <NVIC_EncodePriority+0x30>
 8006256:	69fb      	ldr	r3, [r7, #28]
 8006258:	3b03      	subs	r3, #3
 800625a:	e000      	b.n	800625e <NVIC_EncodePriority+0x32>
 800625c:	2300      	movs	r3, #0
 800625e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006260:	f04f 32ff 	mov.w	r2, #4294967295
 8006264:	69bb      	ldr	r3, [r7, #24]
 8006266:	fa02 f303 	lsl.w	r3, r2, r3
 800626a:	43da      	mvns	r2, r3
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	401a      	ands	r2, r3
 8006270:	697b      	ldr	r3, [r7, #20]
 8006272:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006274:	f04f 31ff 	mov.w	r1, #4294967295
 8006278:	697b      	ldr	r3, [r7, #20]
 800627a:	fa01 f303 	lsl.w	r3, r1, r3
 800627e:	43d9      	mvns	r1, r3
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006284:	4313      	orrs	r3, r2
         );
}
 8006286:	4618      	mov	r0, r3
 8006288:	3724      	adds	r7, #36	@ 0x24
 800628a:	46bd      	mov	sp, r7
 800628c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006290:	4770      	bx	lr
	...

08006294 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006294:	b580      	push	{r7, lr}
 8006296:	b082      	sub	sp, #8
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	3b01      	subs	r3, #1
 80062a0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80062a4:	d301      	bcc.n	80062aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80062a6:	2301      	movs	r3, #1
 80062a8:	e00f      	b.n	80062ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80062aa:	4a0a      	ldr	r2, [pc, #40]	@ (80062d4 <SysTick_Config+0x40>)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	3b01      	subs	r3, #1
 80062b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80062b2:	210f      	movs	r1, #15
 80062b4:	f04f 30ff 	mov.w	r0, #4294967295
 80062b8:	f7ff ff8e 	bl	80061d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80062bc:	4b05      	ldr	r3, [pc, #20]	@ (80062d4 <SysTick_Config+0x40>)
 80062be:	2200      	movs	r2, #0
 80062c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80062c2:	4b04      	ldr	r3, [pc, #16]	@ (80062d4 <SysTick_Config+0x40>)
 80062c4:	2207      	movs	r2, #7
 80062c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80062c8:	2300      	movs	r3, #0
}
 80062ca:	4618      	mov	r0, r3
 80062cc:	3708      	adds	r7, #8
 80062ce:	46bd      	mov	sp, r7
 80062d0:	bd80      	pop	{r7, pc}
 80062d2:	bf00      	nop
 80062d4:	e000e010 	.word	0xe000e010

080062d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80062d8:	b580      	push	{r7, lr}
 80062da:	b082      	sub	sp, #8
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80062e0:	6878      	ldr	r0, [r7, #4]
 80062e2:	f7ff ff29 	bl	8006138 <__NVIC_SetPriorityGrouping>
}
 80062e6:	bf00      	nop
 80062e8:	3708      	adds	r7, #8
 80062ea:	46bd      	mov	sp, r7
 80062ec:	bd80      	pop	{r7, pc}

080062ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80062ee:	b580      	push	{r7, lr}
 80062f0:	b086      	sub	sp, #24
 80062f2:	af00      	add	r7, sp, #0
 80062f4:	4603      	mov	r3, r0
 80062f6:	60b9      	str	r1, [r7, #8]
 80062f8:	607a      	str	r2, [r7, #4]
 80062fa:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80062fc:	f7ff ff40 	bl	8006180 <__NVIC_GetPriorityGrouping>
 8006300:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006302:	687a      	ldr	r2, [r7, #4]
 8006304:	68b9      	ldr	r1, [r7, #8]
 8006306:	6978      	ldr	r0, [r7, #20]
 8006308:	f7ff ff90 	bl	800622c <NVIC_EncodePriority>
 800630c:	4602      	mov	r2, r0
 800630e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006312:	4611      	mov	r1, r2
 8006314:	4618      	mov	r0, r3
 8006316:	f7ff ff5f 	bl	80061d8 <__NVIC_SetPriority>
}
 800631a:	bf00      	nop
 800631c:	3718      	adds	r7, #24
 800631e:	46bd      	mov	sp, r7
 8006320:	bd80      	pop	{r7, pc}

08006322 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006322:	b580      	push	{r7, lr}
 8006324:	b082      	sub	sp, #8
 8006326:	af00      	add	r7, sp, #0
 8006328:	4603      	mov	r3, r0
 800632a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800632c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006330:	4618      	mov	r0, r3
 8006332:	f7ff ff33 	bl	800619c <__NVIC_EnableIRQ>
}
 8006336:	bf00      	nop
 8006338:	3708      	adds	r7, #8
 800633a:	46bd      	mov	sp, r7
 800633c:	bd80      	pop	{r7, pc}

0800633e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800633e:	b580      	push	{r7, lr}
 8006340:	b082      	sub	sp, #8
 8006342:	af00      	add	r7, sp, #0
 8006344:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006346:	6878      	ldr	r0, [r7, #4]
 8006348:	f7ff ffa4 	bl	8006294 <SysTick_Config>
 800634c:	4603      	mov	r3, r0
}
 800634e:	4618      	mov	r0, r3
 8006350:	3708      	adds	r7, #8
 8006352:	46bd      	mov	sp, r7
 8006354:	bd80      	pop	{r7, pc}
	...

08006358 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8006358:	b480      	push	{r7}
 800635a:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 800635c:	f3bf 8f5f 	dmb	sy
}
 8006360:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8006362:	4b07      	ldr	r3, [pc, #28]	@ (8006380 <HAL_MPU_Disable+0x28>)
 8006364:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006366:	4a06      	ldr	r2, [pc, #24]	@ (8006380 <HAL_MPU_Disable+0x28>)
 8006368:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800636c:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800636e:	4b05      	ldr	r3, [pc, #20]	@ (8006384 <HAL_MPU_Disable+0x2c>)
 8006370:	2200      	movs	r2, #0
 8006372:	605a      	str	r2, [r3, #4]
}
 8006374:	bf00      	nop
 8006376:	46bd      	mov	sp, r7
 8006378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637c:	4770      	bx	lr
 800637e:	bf00      	nop
 8006380:	e000ed00 	.word	0xe000ed00
 8006384:	e000ed90 	.word	0xe000ed90

08006388 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8006388:	b480      	push	{r7}
 800638a:	b083      	sub	sp, #12
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8006390:	4a0b      	ldr	r2, [pc, #44]	@ (80063c0 <HAL_MPU_Enable+0x38>)
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	f043 0301 	orr.w	r3, r3, #1
 8006398:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800639a:	4b0a      	ldr	r3, [pc, #40]	@ (80063c4 <HAL_MPU_Enable+0x3c>)
 800639c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800639e:	4a09      	ldr	r2, [pc, #36]	@ (80063c4 <HAL_MPU_Enable+0x3c>)
 80063a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80063a4:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80063a6:	f3bf 8f4f 	dsb	sy
}
 80063aa:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80063ac:	f3bf 8f6f 	isb	sy
}
 80063b0:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80063b2:	bf00      	nop
 80063b4:	370c      	adds	r7, #12
 80063b6:	46bd      	mov	sp, r7
 80063b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063bc:	4770      	bx	lr
 80063be:	bf00      	nop
 80063c0:	e000ed90 	.word	0xe000ed90
 80063c4:	e000ed00 	.word	0xe000ed00

080063c8 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80063c8:	b480      	push	{r7}
 80063ca:	b083      	sub	sp, #12
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	785a      	ldrb	r2, [r3, #1]
 80063d4:	4b1b      	ldr	r3, [pc, #108]	@ (8006444 <HAL_MPU_ConfigRegion+0x7c>)
 80063d6:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80063d8:	4b1a      	ldr	r3, [pc, #104]	@ (8006444 <HAL_MPU_ConfigRegion+0x7c>)
 80063da:	691b      	ldr	r3, [r3, #16]
 80063dc:	4a19      	ldr	r2, [pc, #100]	@ (8006444 <HAL_MPU_ConfigRegion+0x7c>)
 80063de:	f023 0301 	bic.w	r3, r3, #1
 80063e2:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80063e4:	4a17      	ldr	r2, [pc, #92]	@ (8006444 <HAL_MPU_ConfigRegion+0x7c>)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	685b      	ldr	r3, [r3, #4]
 80063ea:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	7b1b      	ldrb	r3, [r3, #12]
 80063f0:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	7adb      	ldrb	r3, [r3, #11]
 80063f6:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80063f8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	7a9b      	ldrb	r3, [r3, #10]
 80063fe:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8006400:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	7b5b      	ldrb	r3, [r3, #13]
 8006406:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8006408:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	7b9b      	ldrb	r3, [r3, #14]
 800640e:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8006410:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	7bdb      	ldrb	r3, [r3, #15]
 8006416:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8006418:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	7a5b      	ldrb	r3, [r3, #9]
 800641e:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8006420:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	7a1b      	ldrb	r3, [r3, #8]
 8006426:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8006428:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800642a:	687a      	ldr	r2, [r7, #4]
 800642c:	7812      	ldrb	r2, [r2, #0]
 800642e:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006430:	4a04      	ldr	r2, [pc, #16]	@ (8006444 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8006432:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006434:	6113      	str	r3, [r2, #16]
}
 8006436:	bf00      	nop
 8006438:	370c      	adds	r7, #12
 800643a:	46bd      	mov	sp, r7
 800643c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006440:	4770      	bx	lr
 8006442:	bf00      	nop
 8006444:	e000ed90 	.word	0xe000ed90

08006448 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8006448:	b580      	push	{r7, lr}
 800644a:	b082      	sub	sp, #8
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d101      	bne.n	800645a <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8006456:	2301      	movs	r3, #1
 8006458:	e014      	b.n	8006484 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	791b      	ldrb	r3, [r3, #4]
 800645e:	b2db      	uxtb	r3, r3
 8006460:	2b00      	cmp	r3, #0
 8006462:	d105      	bne.n	8006470 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2200      	movs	r2, #0
 8006468:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800646a:	6878      	ldr	r0, [r7, #4]
 800646c:	f7fb fb76 	bl	8001b5c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2202      	movs	r2, #2
 8006474:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	2200      	movs	r2, #0
 800647a:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2201      	movs	r2, #1
 8006480:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8006482:	2300      	movs	r3, #0
}
 8006484:	4618      	mov	r0, r3
 8006486:	3708      	adds	r7, #8
 8006488:	46bd      	mov	sp, r7
 800648a:	bd80      	pop	{r7, pc}

0800648c <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 800648c:	b580      	push	{r7, lr}
 800648e:	b086      	sub	sp, #24
 8006490:	af00      	add	r7, sp, #0
 8006492:	60f8      	str	r0, [r7, #12]
 8006494:	60b9      	str	r1, [r7, #8]
 8006496:	607a      	str	r2, [r7, #4]
 8006498:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d101      	bne.n	80064a4 <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 80064a0:	2301      	movs	r3, #1
 80064a2:	e0a2      	b.n	80065ea <HAL_DAC_Start_DMA+0x15e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	795b      	ldrb	r3, [r3, #5]
 80064a8:	2b01      	cmp	r3, #1
 80064aa:	d101      	bne.n	80064b0 <HAL_DAC_Start_DMA+0x24>
 80064ac:	2302      	movs	r3, #2
 80064ae:	e09c      	b.n	80065ea <HAL_DAC_Start_DMA+0x15e>
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	2201      	movs	r2, #1
 80064b4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	2202      	movs	r2, #2
 80064ba:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 80064bc:	68bb      	ldr	r3, [r7, #8]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d129      	bne.n	8006516 <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	689b      	ldr	r3, [r3, #8]
 80064c6:	4a4b      	ldr	r2, [pc, #300]	@ (80065f4 <HAL_DAC_Start_DMA+0x168>)
 80064c8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	689b      	ldr	r3, [r3, #8]
 80064ce:	4a4a      	ldr	r2, [pc, #296]	@ (80065f8 <HAL_DAC_Start_DMA+0x16c>)
 80064d0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	689b      	ldr	r3, [r3, #8]
 80064d6:	4a49      	ldr	r2, [pc, #292]	@ (80065fc <HAL_DAC_Start_DMA+0x170>)
 80064d8:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	681a      	ldr	r2, [r3, #0]
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80064e8:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 80064ea:	6a3b      	ldr	r3, [r7, #32]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d003      	beq.n	80064f8 <HAL_DAC_Start_DMA+0x6c>
 80064f0:	6a3b      	ldr	r3, [r7, #32]
 80064f2:	2b04      	cmp	r3, #4
 80064f4:	d005      	beq.n	8006502 <HAL_DAC_Start_DMA+0x76>
 80064f6:	e009      	b.n	800650c <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	3308      	adds	r3, #8
 80064fe:	613b      	str	r3, [r7, #16]
        break;
 8006500:	e033      	b.n	800656a <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	330c      	adds	r3, #12
 8006508:	613b      	str	r3, [r7, #16]
        break;
 800650a:	e02e      	b.n	800656a <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	3310      	adds	r3, #16
 8006512:	613b      	str	r3, [r7, #16]
        break;
 8006514:	e029      	b.n	800656a <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	68db      	ldr	r3, [r3, #12]
 800651a:	4a39      	ldr	r2, [pc, #228]	@ (8006600 <HAL_DAC_Start_DMA+0x174>)
 800651c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	68db      	ldr	r3, [r3, #12]
 8006522:	4a38      	ldr	r2, [pc, #224]	@ (8006604 <HAL_DAC_Start_DMA+0x178>)
 8006524:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	68db      	ldr	r3, [r3, #12]
 800652a:	4a37      	ldr	r2, [pc, #220]	@ (8006608 <HAL_DAC_Start_DMA+0x17c>)
 800652c:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	681a      	ldr	r2, [r3, #0]
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800653c:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 800653e:	6a3b      	ldr	r3, [r7, #32]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d003      	beq.n	800654c <HAL_DAC_Start_DMA+0xc0>
 8006544:	6a3b      	ldr	r3, [r7, #32]
 8006546:	2b04      	cmp	r3, #4
 8006548:	d005      	beq.n	8006556 <HAL_DAC_Start_DMA+0xca>
 800654a:	e009      	b.n	8006560 <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	3314      	adds	r3, #20
 8006552:	613b      	str	r3, [r7, #16]
        break;
 8006554:	e009      	b.n	800656a <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	3318      	adds	r3, #24
 800655c:	613b      	str	r3, [r7, #16]
        break;
 800655e:	e004      	b.n	800656a <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	331c      	adds	r3, #28
 8006566:	613b      	str	r3, [r7, #16]
        break;
 8006568:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 800656a:	68bb      	ldr	r3, [r7, #8]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d111      	bne.n	8006594 <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	681a      	ldr	r2, [r3, #0]
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800657e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	6898      	ldr	r0, [r3, #8]
 8006584:	6879      	ldr	r1, [r7, #4]
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	693a      	ldr	r2, [r7, #16]
 800658a:	f000 fd6d 	bl	8007068 <HAL_DMA_Start_IT>
 800658e:	4603      	mov	r3, r0
 8006590:	75fb      	strb	r3, [r7, #23]
 8006592:	e010      	b.n	80065b6 <HAL_DAC_Start_DMA+0x12a>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	681a      	ldr	r2, [r3, #0]
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 80065a2:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	68d8      	ldr	r0, [r3, #12]
 80065a8:	6879      	ldr	r1, [r7, #4]
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	693a      	ldr	r2, [r7, #16]
 80065ae:	f000 fd5b 	bl	8007068 <HAL_DMA_Start_IT>
 80065b2:	4603      	mov	r3, r0
 80065b4:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	2200      	movs	r2, #0
 80065ba:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 80065bc:	7dfb      	ldrb	r3, [r7, #23]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d10c      	bne.n	80065dc <HAL_DAC_Start_DMA+0x150>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	6819      	ldr	r1, [r3, #0]
 80065c8:	68bb      	ldr	r3, [r7, #8]
 80065ca:	f003 0310 	and.w	r3, r3, #16
 80065ce:	2201      	movs	r2, #1
 80065d0:	409a      	lsls	r2, r3
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	430a      	orrs	r2, r1
 80065d8:	601a      	str	r2, [r3, #0]
 80065da:	e005      	b.n	80065e8 <HAL_DAC_Start_DMA+0x15c>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	691b      	ldr	r3, [r3, #16]
 80065e0:	f043 0204 	orr.w	r2, r3, #4
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 80065e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80065ea:	4618      	mov	r0, r3
 80065ec:	3718      	adds	r7, #24
 80065ee:	46bd      	mov	sp, r7
 80065f0:	bd80      	pop	{r7, pc}
 80065f2:	bf00      	nop
 80065f4:	080068a5 	.word	0x080068a5
 80065f8:	080068c7 	.word	0x080068c7
 80065fc:	080068e3 	.word	0x080068e3
 8006600:	0800694d 	.word	0x0800694d
 8006604:	0800696f 	.word	0x0800696f
 8006608:	0800698b 	.word	0x0800698b

0800660c <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800660c:	b480      	push	{r7}
 800660e:	b083      	sub	sp, #12
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8006614:	bf00      	nop
 8006616:	370c      	adds	r7, #12
 8006618:	46bd      	mov	sp, r7
 800661a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661e:	4770      	bx	lr

08006620 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8006620:	b580      	push	{r7, lr}
 8006622:	b08a      	sub	sp, #40	@ 0x28
 8006624:	af00      	add	r7, sp, #0
 8006626:	60f8      	str	r0, [r7, #12]
 8006628:	60b9      	str	r1, [r7, #8]
 800662a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800662c:	2300      	movs	r3, #0
 800662e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d002      	beq.n	800663e <HAL_DAC_ConfigChannel+0x1e>
 8006638:	68bb      	ldr	r3, [r7, #8]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d101      	bne.n	8006642 <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 800663e:	2301      	movs	r3, #1
 8006640:	e12a      	b.n	8006898 <HAL_DAC_ConfigChannel+0x278>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	795b      	ldrb	r3, [r3, #5]
 8006646:	2b01      	cmp	r3, #1
 8006648:	d101      	bne.n	800664e <HAL_DAC_ConfigChannel+0x2e>
 800664a:	2302      	movs	r3, #2
 800664c:	e124      	b.n	8006898 <HAL_DAC_ConfigChannel+0x278>
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	2201      	movs	r2, #1
 8006652:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	2202      	movs	r2, #2
 8006658:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800665a:	68bb      	ldr	r3, [r7, #8]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	2b04      	cmp	r3, #4
 8006660:	d17a      	bne.n	8006758 <HAL_DAC_ConfigChannel+0x138>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8006662:	f7fe f9c5 	bl	80049f0 <HAL_GetTick>
 8006666:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d13d      	bne.n	80066ea <HAL_DAC_ConfigChannel+0xca>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800666e:	e018      	b.n	80066a2 <HAL_DAC_ConfigChannel+0x82>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8006670:	f7fe f9be 	bl	80049f0 <HAL_GetTick>
 8006674:	4602      	mov	r2, r0
 8006676:	69fb      	ldr	r3, [r7, #28]
 8006678:	1ad3      	subs	r3, r2, r3
 800667a:	2b01      	cmp	r3, #1
 800667c:	d911      	bls.n	80066a2 <HAL_DAC_ConfigChannel+0x82>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006684:	4b86      	ldr	r3, [pc, #536]	@ (80068a0 <HAL_DAC_ConfigChannel+0x280>)
 8006686:	4013      	ands	r3, r2
 8006688:	2b00      	cmp	r3, #0
 800668a:	d00a      	beq.n	80066a2 <HAL_DAC_ConfigChannel+0x82>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	691b      	ldr	r3, [r3, #16]
 8006690:	f043 0208 	orr.w	r2, r3, #8
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	2203      	movs	r2, #3
 800669c:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800669e:	2303      	movs	r3, #3
 80066a0:	e0fa      	b.n	8006898 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80066a8:	4b7d      	ldr	r3, [pc, #500]	@ (80068a0 <HAL_DAC_ConfigChannel+0x280>)
 80066aa:	4013      	ands	r3, r2
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d1df      	bne.n	8006670 <HAL_DAC_ConfigChannel+0x50>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	68ba      	ldr	r2, [r7, #8]
 80066b6:	6992      	ldr	r2, [r2, #24]
 80066b8:	641a      	str	r2, [r3, #64]	@ 0x40
 80066ba:	e020      	b.n	80066fe <HAL_DAC_ConfigChannel+0xde>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80066bc:	f7fe f998 	bl	80049f0 <HAL_GetTick>
 80066c0:	4602      	mov	r2, r0
 80066c2:	69fb      	ldr	r3, [r7, #28]
 80066c4:	1ad3      	subs	r3, r2, r3
 80066c6:	2b01      	cmp	r3, #1
 80066c8:	d90f      	bls.n	80066ea <HAL_DAC_ConfigChannel+0xca>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	da0a      	bge.n	80066ea <HAL_DAC_ConfigChannel+0xca>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	691b      	ldr	r3, [r3, #16]
 80066d8:	f043 0208 	orr.w	r2, r3, #8
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	2203      	movs	r2, #3
 80066e4:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80066e6:	2303      	movs	r3, #3
 80066e8:	e0d6      	b.n	8006898 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	dbe3      	blt.n	80066bc <HAL_DAC_ConfigChannel+0x9c>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	68ba      	ldr	r2, [r7, #8]
 80066fa:	6992      	ldr	r2, [r2, #24]
 80066fc:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	f003 0310 	and.w	r3, r3, #16
 800670a:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 800670e:	fa01 f303 	lsl.w	r3, r1, r3
 8006712:	43db      	mvns	r3, r3
 8006714:	ea02 0103 	and.w	r1, r2, r3
 8006718:	68bb      	ldr	r3, [r7, #8]
 800671a:	69da      	ldr	r2, [r3, #28]
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	f003 0310 	and.w	r3, r3, #16
 8006722:	409a      	lsls	r2, r3
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	430a      	orrs	r2, r1
 800672a:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	f003 0310 	and.w	r3, r3, #16
 8006738:	21ff      	movs	r1, #255	@ 0xff
 800673a:	fa01 f303 	lsl.w	r3, r1, r3
 800673e:	43db      	mvns	r3, r3
 8006740:	ea02 0103 	and.w	r1, r2, r3
 8006744:	68bb      	ldr	r3, [r7, #8]
 8006746:	6a1a      	ldr	r2, [r3, #32]
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	f003 0310 	and.w	r3, r3, #16
 800674e:	409a      	lsls	r2, r3
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	430a      	orrs	r2, r1
 8006756:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8006758:	68bb      	ldr	r3, [r7, #8]
 800675a:	691b      	ldr	r3, [r3, #16]
 800675c:	2b01      	cmp	r3, #1
 800675e:	d11d      	bne.n	800679c <HAL_DAC_ConfigChannel+0x17c>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006766:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	f003 0310 	and.w	r3, r3, #16
 800676e:	221f      	movs	r2, #31
 8006770:	fa02 f303 	lsl.w	r3, r2, r3
 8006774:	43db      	mvns	r3, r3
 8006776:	69ba      	ldr	r2, [r7, #24]
 8006778:	4013      	ands	r3, r2
 800677a:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800677c:	68bb      	ldr	r3, [r7, #8]
 800677e:	695b      	ldr	r3, [r3, #20]
 8006780:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	f003 0310 	and.w	r3, r3, #16
 8006788:	697a      	ldr	r2, [r7, #20]
 800678a:	fa02 f303 	lsl.w	r3, r2, r3
 800678e:	69ba      	ldr	r2, [r7, #24]
 8006790:	4313      	orrs	r3, r2
 8006792:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	69ba      	ldr	r2, [r7, #24]
 800679a:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067a2:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	f003 0310 	and.w	r3, r3, #16
 80067aa:	2207      	movs	r2, #7
 80067ac:	fa02 f303 	lsl.w	r3, r2, r3
 80067b0:	43db      	mvns	r3, r3
 80067b2:	69ba      	ldr	r2, [r7, #24]
 80067b4:	4013      	ands	r3, r2
 80067b6:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80067b8:	68bb      	ldr	r3, [r7, #8]
 80067ba:	68db      	ldr	r3, [r3, #12]
 80067bc:	2b01      	cmp	r3, #1
 80067be:	d102      	bne.n	80067c6 <HAL_DAC_ConfigChannel+0x1a6>
  {
    connectOnChip = 0x00000000UL;
 80067c0:	2300      	movs	r3, #0
 80067c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80067c4:	e00f      	b.n	80067e6 <HAL_DAC_ConfigChannel+0x1c6>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 80067c6:	68bb      	ldr	r3, [r7, #8]
 80067c8:	68db      	ldr	r3, [r3, #12]
 80067ca:	2b02      	cmp	r3, #2
 80067cc:	d102      	bne.n	80067d4 <HAL_DAC_ConfigChannel+0x1b4>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 80067ce:	2301      	movs	r3, #1
 80067d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80067d2:	e008      	b.n	80067e6 <HAL_DAC_ConfigChannel+0x1c6>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80067d4:	68bb      	ldr	r3, [r7, #8]
 80067d6:	689b      	ldr	r3, [r3, #8]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d102      	bne.n	80067e2 <HAL_DAC_ConfigChannel+0x1c2>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 80067dc:	2301      	movs	r3, #1
 80067de:	627b      	str	r3, [r7, #36]	@ 0x24
 80067e0:	e001      	b.n	80067e6 <HAL_DAC_ConfigChannel+0x1c6>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 80067e2:	2300      	movs	r3, #0
 80067e4:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80067e6:	68bb      	ldr	r3, [r7, #8]
 80067e8:	681a      	ldr	r2, [r3, #0]
 80067ea:	68bb      	ldr	r3, [r7, #8]
 80067ec:	689b      	ldr	r3, [r3, #8]
 80067ee:	4313      	orrs	r3, r2
 80067f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80067f2:	4313      	orrs	r3, r2
 80067f4:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	f003 0310 	and.w	r3, r3, #16
 80067fc:	697a      	ldr	r2, [r7, #20]
 80067fe:	fa02 f303 	lsl.w	r3, r2, r3
 8006802:	69ba      	ldr	r2, [r7, #24]
 8006804:	4313      	orrs	r3, r2
 8006806:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	69ba      	ldr	r2, [r7, #24]
 800680e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	6819      	ldr	r1, [r3, #0]
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	f003 0310 	and.w	r3, r3, #16
 800681c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8006820:	fa02 f303 	lsl.w	r3, r2, r3
 8006824:	43da      	mvns	r2, r3
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	400a      	ands	r2, r1
 800682c:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	f003 0310 	and.w	r3, r3, #16
 800683c:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8006840:	fa02 f303 	lsl.w	r3, r2, r3
 8006844:	43db      	mvns	r3, r3
 8006846:	69ba      	ldr	r2, [r7, #24]
 8006848:	4013      	ands	r3, r2
 800684a:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800684c:	68bb      	ldr	r3, [r7, #8]
 800684e:	685b      	ldr	r3, [r3, #4]
 8006850:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	f003 0310 	and.w	r3, r3, #16
 8006858:	697a      	ldr	r2, [r7, #20]
 800685a:	fa02 f303 	lsl.w	r3, r2, r3
 800685e:	69ba      	ldr	r2, [r7, #24]
 8006860:	4313      	orrs	r3, r2
 8006862:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	69ba      	ldr	r2, [r7, #24]
 800686a:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	6819      	ldr	r1, [r3, #0]
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	f003 0310 	and.w	r3, r3, #16
 8006878:	22c0      	movs	r2, #192	@ 0xc0
 800687a:	fa02 f303 	lsl.w	r3, r2, r3
 800687e:	43da      	mvns	r2, r3
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	400a      	ands	r2, r1
 8006886:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	2201      	movs	r2, #1
 800688c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	2200      	movs	r2, #0
 8006892:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8006894:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8006898:	4618      	mov	r0, r3
 800689a:	3728      	adds	r7, #40	@ 0x28
 800689c:	46bd      	mov	sp, r7
 800689e:	bd80      	pop	{r7, pc}
 80068a0:	20008000 	.word	0x20008000

080068a4 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b084      	sub	sp, #16
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068b0:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 80068b2:	68f8      	ldr	r0, [r7, #12]
 80068b4:	f7fa f91c 	bl	8000af0 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	2201      	movs	r2, #1
 80068bc:	711a      	strb	r2, [r3, #4]
}
 80068be:	bf00      	nop
 80068c0:	3710      	adds	r7, #16
 80068c2:	46bd      	mov	sp, r7
 80068c4:	bd80      	pop	{r7, pc}

080068c6 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80068c6:	b580      	push	{r7, lr}
 80068c8:	b084      	sub	sp, #16
 80068ca:	af00      	add	r7, sp, #0
 80068cc:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068d2:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 80068d4:	68f8      	ldr	r0, [r7, #12]
 80068d6:	f7fa f8fd 	bl	8000ad4 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80068da:	bf00      	nop
 80068dc:	3710      	adds	r7, #16
 80068de:	46bd      	mov	sp, r7
 80068e0:	bd80      	pop	{r7, pc}

080068e2 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 80068e2:	b580      	push	{r7, lr}
 80068e4:	b084      	sub	sp, #16
 80068e6:	af00      	add	r7, sp, #0
 80068e8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068ee:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	691b      	ldr	r3, [r3, #16]
 80068f4:	f043 0204 	orr.w	r2, r3, #4
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 80068fc:	68f8      	ldr	r0, [r7, #12]
 80068fe:	f7ff fe85 	bl	800660c <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	2201      	movs	r2, #1
 8006906:	711a      	strb	r2, [r3, #4]
}
 8006908:	bf00      	nop
 800690a:	3710      	adds	r7, #16
 800690c:	46bd      	mov	sp, r7
 800690e:	bd80      	pop	{r7, pc}

08006910 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8006910:	b480      	push	{r7}
 8006912:	b083      	sub	sp, #12
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8006918:	bf00      	nop
 800691a:	370c      	adds	r7, #12
 800691c:	46bd      	mov	sp, r7
 800691e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006922:	4770      	bx	lr

08006924 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8006924:	b480      	push	{r7}
 8006926:	b083      	sub	sp, #12
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 800692c:	bf00      	nop
 800692e:	370c      	adds	r7, #12
 8006930:	46bd      	mov	sp, r7
 8006932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006936:	4770      	bx	lr

08006938 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8006938:	b480      	push	{r7}
 800693a:	b083      	sub	sp, #12
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8006940:	bf00      	nop
 8006942:	370c      	adds	r7, #12
 8006944:	46bd      	mov	sp, r7
 8006946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694a:	4770      	bx	lr

0800694c <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800694c:	b580      	push	{r7, lr}
 800694e:	b084      	sub	sp, #16
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006958:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 800695a:	68f8      	ldr	r0, [r7, #12]
 800695c:	f7ff ffd8 	bl	8006910 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	2201      	movs	r2, #1
 8006964:	711a      	strb	r2, [r3, #4]
}
 8006966:	bf00      	nop
 8006968:	3710      	adds	r7, #16
 800696a:	46bd      	mov	sp, r7
 800696c:	bd80      	pop	{r7, pc}

0800696e <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800696e:	b580      	push	{r7, lr}
 8006970:	b084      	sub	sp, #16
 8006972:	af00      	add	r7, sp, #0
 8006974:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800697a:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 800697c:	68f8      	ldr	r0, [r7, #12]
 800697e:	f7ff ffd1 	bl	8006924 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8006982:	bf00      	nop
 8006984:	3710      	adds	r7, #16
 8006986:	46bd      	mov	sp, r7
 8006988:	bd80      	pop	{r7, pc}

0800698a <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 800698a:	b580      	push	{r7, lr}
 800698c:	b084      	sub	sp, #16
 800698e:	af00      	add	r7, sp, #0
 8006990:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006996:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	691b      	ldr	r3, [r3, #16]
 800699c:	f043 0204 	orr.w	r2, r3, #4
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 80069a4:	68f8      	ldr	r0, [r7, #12]
 80069a6:	f7ff ffc7 	bl	8006938 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	2201      	movs	r2, #1
 80069ae:	711a      	strb	r2, [r3, #4]
}
 80069b0:	bf00      	nop
 80069b2:	3710      	adds	r7, #16
 80069b4:	46bd      	mov	sp, r7
 80069b6:	bd80      	pop	{r7, pc}

080069b8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b086      	sub	sp, #24
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80069c0:	f7fe f816 	bl	80049f0 <HAL_GetTick>
 80069c4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d101      	bne.n	80069d0 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80069cc:	2301      	movs	r3, #1
 80069ce:	e312      	b.n	8006ff6 <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	4a66      	ldr	r2, [pc, #408]	@ (8006b70 <HAL_DMA_Init+0x1b8>)
 80069d6:	4293      	cmp	r3, r2
 80069d8:	d04a      	beq.n	8006a70 <HAL_DMA_Init+0xb8>
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	4a65      	ldr	r2, [pc, #404]	@ (8006b74 <HAL_DMA_Init+0x1bc>)
 80069e0:	4293      	cmp	r3, r2
 80069e2:	d045      	beq.n	8006a70 <HAL_DMA_Init+0xb8>
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	4a63      	ldr	r2, [pc, #396]	@ (8006b78 <HAL_DMA_Init+0x1c0>)
 80069ea:	4293      	cmp	r3, r2
 80069ec:	d040      	beq.n	8006a70 <HAL_DMA_Init+0xb8>
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	4a62      	ldr	r2, [pc, #392]	@ (8006b7c <HAL_DMA_Init+0x1c4>)
 80069f4:	4293      	cmp	r3, r2
 80069f6:	d03b      	beq.n	8006a70 <HAL_DMA_Init+0xb8>
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	4a60      	ldr	r2, [pc, #384]	@ (8006b80 <HAL_DMA_Init+0x1c8>)
 80069fe:	4293      	cmp	r3, r2
 8006a00:	d036      	beq.n	8006a70 <HAL_DMA_Init+0xb8>
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	4a5f      	ldr	r2, [pc, #380]	@ (8006b84 <HAL_DMA_Init+0x1cc>)
 8006a08:	4293      	cmp	r3, r2
 8006a0a:	d031      	beq.n	8006a70 <HAL_DMA_Init+0xb8>
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	4a5d      	ldr	r2, [pc, #372]	@ (8006b88 <HAL_DMA_Init+0x1d0>)
 8006a12:	4293      	cmp	r3, r2
 8006a14:	d02c      	beq.n	8006a70 <HAL_DMA_Init+0xb8>
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	4a5c      	ldr	r2, [pc, #368]	@ (8006b8c <HAL_DMA_Init+0x1d4>)
 8006a1c:	4293      	cmp	r3, r2
 8006a1e:	d027      	beq.n	8006a70 <HAL_DMA_Init+0xb8>
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	4a5a      	ldr	r2, [pc, #360]	@ (8006b90 <HAL_DMA_Init+0x1d8>)
 8006a26:	4293      	cmp	r3, r2
 8006a28:	d022      	beq.n	8006a70 <HAL_DMA_Init+0xb8>
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	4a59      	ldr	r2, [pc, #356]	@ (8006b94 <HAL_DMA_Init+0x1dc>)
 8006a30:	4293      	cmp	r3, r2
 8006a32:	d01d      	beq.n	8006a70 <HAL_DMA_Init+0xb8>
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	4a57      	ldr	r2, [pc, #348]	@ (8006b98 <HAL_DMA_Init+0x1e0>)
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	d018      	beq.n	8006a70 <HAL_DMA_Init+0xb8>
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	4a56      	ldr	r2, [pc, #344]	@ (8006b9c <HAL_DMA_Init+0x1e4>)
 8006a44:	4293      	cmp	r3, r2
 8006a46:	d013      	beq.n	8006a70 <HAL_DMA_Init+0xb8>
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	4a54      	ldr	r2, [pc, #336]	@ (8006ba0 <HAL_DMA_Init+0x1e8>)
 8006a4e:	4293      	cmp	r3, r2
 8006a50:	d00e      	beq.n	8006a70 <HAL_DMA_Init+0xb8>
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	4a53      	ldr	r2, [pc, #332]	@ (8006ba4 <HAL_DMA_Init+0x1ec>)
 8006a58:	4293      	cmp	r3, r2
 8006a5a:	d009      	beq.n	8006a70 <HAL_DMA_Init+0xb8>
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	4a51      	ldr	r2, [pc, #324]	@ (8006ba8 <HAL_DMA_Init+0x1f0>)
 8006a62:	4293      	cmp	r3, r2
 8006a64:	d004      	beq.n	8006a70 <HAL_DMA_Init+0xb8>
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	4a50      	ldr	r2, [pc, #320]	@ (8006bac <HAL_DMA_Init+0x1f4>)
 8006a6c:	4293      	cmp	r3, r2
 8006a6e:	d101      	bne.n	8006a74 <HAL_DMA_Init+0xbc>
 8006a70:	2301      	movs	r3, #1
 8006a72:	e000      	b.n	8006a76 <HAL_DMA_Init+0xbe>
 8006a74:	2300      	movs	r3, #0
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	f000 813c 	beq.w	8006cf4 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2202      	movs	r2, #2
 8006a80:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2200      	movs	r2, #0
 8006a88:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	4a37      	ldr	r2, [pc, #220]	@ (8006b70 <HAL_DMA_Init+0x1b8>)
 8006a92:	4293      	cmp	r3, r2
 8006a94:	d04a      	beq.n	8006b2c <HAL_DMA_Init+0x174>
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	4a36      	ldr	r2, [pc, #216]	@ (8006b74 <HAL_DMA_Init+0x1bc>)
 8006a9c:	4293      	cmp	r3, r2
 8006a9e:	d045      	beq.n	8006b2c <HAL_DMA_Init+0x174>
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	4a34      	ldr	r2, [pc, #208]	@ (8006b78 <HAL_DMA_Init+0x1c0>)
 8006aa6:	4293      	cmp	r3, r2
 8006aa8:	d040      	beq.n	8006b2c <HAL_DMA_Init+0x174>
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	4a33      	ldr	r2, [pc, #204]	@ (8006b7c <HAL_DMA_Init+0x1c4>)
 8006ab0:	4293      	cmp	r3, r2
 8006ab2:	d03b      	beq.n	8006b2c <HAL_DMA_Init+0x174>
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	4a31      	ldr	r2, [pc, #196]	@ (8006b80 <HAL_DMA_Init+0x1c8>)
 8006aba:	4293      	cmp	r3, r2
 8006abc:	d036      	beq.n	8006b2c <HAL_DMA_Init+0x174>
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	4a30      	ldr	r2, [pc, #192]	@ (8006b84 <HAL_DMA_Init+0x1cc>)
 8006ac4:	4293      	cmp	r3, r2
 8006ac6:	d031      	beq.n	8006b2c <HAL_DMA_Init+0x174>
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	4a2e      	ldr	r2, [pc, #184]	@ (8006b88 <HAL_DMA_Init+0x1d0>)
 8006ace:	4293      	cmp	r3, r2
 8006ad0:	d02c      	beq.n	8006b2c <HAL_DMA_Init+0x174>
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	4a2d      	ldr	r2, [pc, #180]	@ (8006b8c <HAL_DMA_Init+0x1d4>)
 8006ad8:	4293      	cmp	r3, r2
 8006ada:	d027      	beq.n	8006b2c <HAL_DMA_Init+0x174>
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	4a2b      	ldr	r2, [pc, #172]	@ (8006b90 <HAL_DMA_Init+0x1d8>)
 8006ae2:	4293      	cmp	r3, r2
 8006ae4:	d022      	beq.n	8006b2c <HAL_DMA_Init+0x174>
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	4a2a      	ldr	r2, [pc, #168]	@ (8006b94 <HAL_DMA_Init+0x1dc>)
 8006aec:	4293      	cmp	r3, r2
 8006aee:	d01d      	beq.n	8006b2c <HAL_DMA_Init+0x174>
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	4a28      	ldr	r2, [pc, #160]	@ (8006b98 <HAL_DMA_Init+0x1e0>)
 8006af6:	4293      	cmp	r3, r2
 8006af8:	d018      	beq.n	8006b2c <HAL_DMA_Init+0x174>
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	4a27      	ldr	r2, [pc, #156]	@ (8006b9c <HAL_DMA_Init+0x1e4>)
 8006b00:	4293      	cmp	r3, r2
 8006b02:	d013      	beq.n	8006b2c <HAL_DMA_Init+0x174>
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	4a25      	ldr	r2, [pc, #148]	@ (8006ba0 <HAL_DMA_Init+0x1e8>)
 8006b0a:	4293      	cmp	r3, r2
 8006b0c:	d00e      	beq.n	8006b2c <HAL_DMA_Init+0x174>
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	4a24      	ldr	r2, [pc, #144]	@ (8006ba4 <HAL_DMA_Init+0x1ec>)
 8006b14:	4293      	cmp	r3, r2
 8006b16:	d009      	beq.n	8006b2c <HAL_DMA_Init+0x174>
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	4a22      	ldr	r2, [pc, #136]	@ (8006ba8 <HAL_DMA_Init+0x1f0>)
 8006b1e:	4293      	cmp	r3, r2
 8006b20:	d004      	beq.n	8006b2c <HAL_DMA_Init+0x174>
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	4a21      	ldr	r2, [pc, #132]	@ (8006bac <HAL_DMA_Init+0x1f4>)
 8006b28:	4293      	cmp	r3, r2
 8006b2a:	d108      	bne.n	8006b3e <HAL_DMA_Init+0x186>
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	681a      	ldr	r2, [r3, #0]
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f022 0201 	bic.w	r2, r2, #1
 8006b3a:	601a      	str	r2, [r3, #0]
 8006b3c:	e007      	b.n	8006b4e <HAL_DMA_Init+0x196>
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	681a      	ldr	r2, [r3, #0]
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	f022 0201 	bic.w	r2, r2, #1
 8006b4c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006b4e:	e02f      	b.n	8006bb0 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006b50:	f7fd ff4e 	bl	80049f0 <HAL_GetTick>
 8006b54:	4602      	mov	r2, r0
 8006b56:	693b      	ldr	r3, [r7, #16]
 8006b58:	1ad3      	subs	r3, r2, r3
 8006b5a:	2b05      	cmp	r3, #5
 8006b5c:	d928      	bls.n	8006bb0 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	2220      	movs	r2, #32
 8006b62:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2203      	movs	r2, #3
 8006b68:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8006b6c:	2301      	movs	r3, #1
 8006b6e:	e242      	b.n	8006ff6 <HAL_DMA_Init+0x63e>
 8006b70:	40020010 	.word	0x40020010
 8006b74:	40020028 	.word	0x40020028
 8006b78:	40020040 	.word	0x40020040
 8006b7c:	40020058 	.word	0x40020058
 8006b80:	40020070 	.word	0x40020070
 8006b84:	40020088 	.word	0x40020088
 8006b88:	400200a0 	.word	0x400200a0
 8006b8c:	400200b8 	.word	0x400200b8
 8006b90:	40020410 	.word	0x40020410
 8006b94:	40020428 	.word	0x40020428
 8006b98:	40020440 	.word	0x40020440
 8006b9c:	40020458 	.word	0x40020458
 8006ba0:	40020470 	.word	0x40020470
 8006ba4:	40020488 	.word	0x40020488
 8006ba8:	400204a0 	.word	0x400204a0
 8006bac:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f003 0301 	and.w	r3, r3, #1
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d1c8      	bne.n	8006b50 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006bc6:	697a      	ldr	r2, [r7, #20]
 8006bc8:	4b83      	ldr	r3, [pc, #524]	@ (8006dd8 <HAL_DMA_Init+0x420>)
 8006bca:	4013      	ands	r3, r2
 8006bcc:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8006bd6:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	691b      	ldr	r3, [r3, #16]
 8006bdc:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006be2:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	699b      	ldr	r3, [r3, #24]
 8006be8:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006bee:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	6a1b      	ldr	r3, [r3, #32]
 8006bf4:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8006bf6:	697a      	ldr	r2, [r7, #20]
 8006bf8:	4313      	orrs	r3, r2
 8006bfa:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c00:	2b04      	cmp	r3, #4
 8006c02:	d107      	bne.n	8006c14 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c0c:	4313      	orrs	r3, r2
 8006c0e:	697a      	ldr	r2, [r7, #20]
 8006c10:	4313      	orrs	r3, r2
 8006c12:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	685b      	ldr	r3, [r3, #4]
 8006c18:	2b28      	cmp	r3, #40	@ 0x28
 8006c1a:	d903      	bls.n	8006c24 <HAL_DMA_Init+0x26c>
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	685b      	ldr	r3, [r3, #4]
 8006c20:	2b2e      	cmp	r3, #46	@ 0x2e
 8006c22:	d91f      	bls.n	8006c64 <HAL_DMA_Init+0x2ac>
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	685b      	ldr	r3, [r3, #4]
 8006c28:	2b3e      	cmp	r3, #62	@ 0x3e
 8006c2a:	d903      	bls.n	8006c34 <HAL_DMA_Init+0x27c>
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	685b      	ldr	r3, [r3, #4]
 8006c30:	2b42      	cmp	r3, #66	@ 0x42
 8006c32:	d917      	bls.n	8006c64 <HAL_DMA_Init+0x2ac>
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	685b      	ldr	r3, [r3, #4]
 8006c38:	2b46      	cmp	r3, #70	@ 0x46
 8006c3a:	d903      	bls.n	8006c44 <HAL_DMA_Init+0x28c>
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	685b      	ldr	r3, [r3, #4]
 8006c40:	2b48      	cmp	r3, #72	@ 0x48
 8006c42:	d90f      	bls.n	8006c64 <HAL_DMA_Init+0x2ac>
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	685b      	ldr	r3, [r3, #4]
 8006c48:	2b4e      	cmp	r3, #78	@ 0x4e
 8006c4a:	d903      	bls.n	8006c54 <HAL_DMA_Init+0x29c>
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	685b      	ldr	r3, [r3, #4]
 8006c50:	2b52      	cmp	r3, #82	@ 0x52
 8006c52:	d907      	bls.n	8006c64 <HAL_DMA_Init+0x2ac>
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	685b      	ldr	r3, [r3, #4]
 8006c58:	2b73      	cmp	r3, #115	@ 0x73
 8006c5a:	d905      	bls.n	8006c68 <HAL_DMA_Init+0x2b0>
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	685b      	ldr	r3, [r3, #4]
 8006c60:	2b77      	cmp	r3, #119	@ 0x77
 8006c62:	d801      	bhi.n	8006c68 <HAL_DMA_Init+0x2b0>
 8006c64:	2301      	movs	r3, #1
 8006c66:	e000      	b.n	8006c6a <HAL_DMA_Init+0x2b2>
 8006c68:	2300      	movs	r3, #0
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d003      	beq.n	8006c76 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8006c6e:	697b      	ldr	r3, [r7, #20]
 8006c70:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006c74:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	697a      	ldr	r2, [r7, #20]
 8006c7c:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	695b      	ldr	r3, [r3, #20]
 8006c84:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006c86:	697b      	ldr	r3, [r7, #20]
 8006c88:	f023 0307 	bic.w	r3, r3, #7
 8006c8c:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c92:	697a      	ldr	r2, [r7, #20]
 8006c94:	4313      	orrs	r3, r2
 8006c96:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c9c:	2b04      	cmp	r3, #4
 8006c9e:	d117      	bne.n	8006cd0 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ca4:	697a      	ldr	r2, [r7, #20]
 8006ca6:	4313      	orrs	r3, r2
 8006ca8:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d00e      	beq.n	8006cd0 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006cb2:	6878      	ldr	r0, [r7, #4]
 8006cb4:	f001 fdca 	bl	800884c <DMA_CheckFifoParam>
 8006cb8:	4603      	mov	r3, r0
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d008      	beq.n	8006cd0 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	2240      	movs	r2, #64	@ 0x40
 8006cc2:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2201      	movs	r2, #1
 8006cc8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8006ccc:	2301      	movs	r3, #1
 8006cce:	e192      	b.n	8006ff6 <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	697a      	ldr	r2, [r7, #20]
 8006cd6:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006cd8:	6878      	ldr	r0, [r7, #4]
 8006cda:	f001 fd05 	bl	80086e8 <DMA_CalcBaseAndBitshift>
 8006cde:	4603      	mov	r3, r0
 8006ce0:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006ce6:	f003 031f 	and.w	r3, r3, #31
 8006cea:	223f      	movs	r2, #63	@ 0x3f
 8006cec:	409a      	lsls	r2, r3
 8006cee:	68bb      	ldr	r3, [r7, #8]
 8006cf0:	609a      	str	r2, [r3, #8]
 8006cf2:	e0c8      	b.n	8006e86 <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	4a38      	ldr	r2, [pc, #224]	@ (8006ddc <HAL_DMA_Init+0x424>)
 8006cfa:	4293      	cmp	r3, r2
 8006cfc:	d022      	beq.n	8006d44 <HAL_DMA_Init+0x38c>
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	4a37      	ldr	r2, [pc, #220]	@ (8006de0 <HAL_DMA_Init+0x428>)
 8006d04:	4293      	cmp	r3, r2
 8006d06:	d01d      	beq.n	8006d44 <HAL_DMA_Init+0x38c>
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	4a35      	ldr	r2, [pc, #212]	@ (8006de4 <HAL_DMA_Init+0x42c>)
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d018      	beq.n	8006d44 <HAL_DMA_Init+0x38c>
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	4a34      	ldr	r2, [pc, #208]	@ (8006de8 <HAL_DMA_Init+0x430>)
 8006d18:	4293      	cmp	r3, r2
 8006d1a:	d013      	beq.n	8006d44 <HAL_DMA_Init+0x38c>
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	4a32      	ldr	r2, [pc, #200]	@ (8006dec <HAL_DMA_Init+0x434>)
 8006d22:	4293      	cmp	r3, r2
 8006d24:	d00e      	beq.n	8006d44 <HAL_DMA_Init+0x38c>
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	4a31      	ldr	r2, [pc, #196]	@ (8006df0 <HAL_DMA_Init+0x438>)
 8006d2c:	4293      	cmp	r3, r2
 8006d2e:	d009      	beq.n	8006d44 <HAL_DMA_Init+0x38c>
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	4a2f      	ldr	r2, [pc, #188]	@ (8006df4 <HAL_DMA_Init+0x43c>)
 8006d36:	4293      	cmp	r3, r2
 8006d38:	d004      	beq.n	8006d44 <HAL_DMA_Init+0x38c>
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	4a2e      	ldr	r2, [pc, #184]	@ (8006df8 <HAL_DMA_Init+0x440>)
 8006d40:	4293      	cmp	r3, r2
 8006d42:	d101      	bne.n	8006d48 <HAL_DMA_Init+0x390>
 8006d44:	2301      	movs	r3, #1
 8006d46:	e000      	b.n	8006d4a <HAL_DMA_Init+0x392>
 8006d48:	2300      	movs	r3, #0
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	f000 8092 	beq.w	8006e74 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	4a21      	ldr	r2, [pc, #132]	@ (8006ddc <HAL_DMA_Init+0x424>)
 8006d56:	4293      	cmp	r3, r2
 8006d58:	d021      	beq.n	8006d9e <HAL_DMA_Init+0x3e6>
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	4a20      	ldr	r2, [pc, #128]	@ (8006de0 <HAL_DMA_Init+0x428>)
 8006d60:	4293      	cmp	r3, r2
 8006d62:	d01c      	beq.n	8006d9e <HAL_DMA_Init+0x3e6>
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	4a1e      	ldr	r2, [pc, #120]	@ (8006de4 <HAL_DMA_Init+0x42c>)
 8006d6a:	4293      	cmp	r3, r2
 8006d6c:	d017      	beq.n	8006d9e <HAL_DMA_Init+0x3e6>
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	4a1d      	ldr	r2, [pc, #116]	@ (8006de8 <HAL_DMA_Init+0x430>)
 8006d74:	4293      	cmp	r3, r2
 8006d76:	d012      	beq.n	8006d9e <HAL_DMA_Init+0x3e6>
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	4a1b      	ldr	r2, [pc, #108]	@ (8006dec <HAL_DMA_Init+0x434>)
 8006d7e:	4293      	cmp	r3, r2
 8006d80:	d00d      	beq.n	8006d9e <HAL_DMA_Init+0x3e6>
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	4a1a      	ldr	r2, [pc, #104]	@ (8006df0 <HAL_DMA_Init+0x438>)
 8006d88:	4293      	cmp	r3, r2
 8006d8a:	d008      	beq.n	8006d9e <HAL_DMA_Init+0x3e6>
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	4a18      	ldr	r2, [pc, #96]	@ (8006df4 <HAL_DMA_Init+0x43c>)
 8006d92:	4293      	cmp	r3, r2
 8006d94:	d003      	beq.n	8006d9e <HAL_DMA_Init+0x3e6>
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	4a17      	ldr	r2, [pc, #92]	@ (8006df8 <HAL_DMA_Init+0x440>)
 8006d9c:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	2202      	movs	r2, #2
 8006da2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	2200      	movs	r2, #0
 8006daa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8006db6:	697a      	ldr	r2, [r7, #20]
 8006db8:	4b10      	ldr	r3, [pc, #64]	@ (8006dfc <HAL_DMA_Init+0x444>)
 8006dba:	4013      	ands	r3, r2
 8006dbc:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	689b      	ldr	r3, [r3, #8]
 8006dc2:	2b40      	cmp	r3, #64	@ 0x40
 8006dc4:	d01c      	beq.n	8006e00 <HAL_DMA_Init+0x448>
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	689b      	ldr	r3, [r3, #8]
 8006dca:	2b80      	cmp	r3, #128	@ 0x80
 8006dcc:	d102      	bne.n	8006dd4 <HAL_DMA_Init+0x41c>
 8006dce:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8006dd2:	e016      	b.n	8006e02 <HAL_DMA_Init+0x44a>
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	e014      	b.n	8006e02 <HAL_DMA_Init+0x44a>
 8006dd8:	fe10803f 	.word	0xfe10803f
 8006ddc:	58025408 	.word	0x58025408
 8006de0:	5802541c 	.word	0x5802541c
 8006de4:	58025430 	.word	0x58025430
 8006de8:	58025444 	.word	0x58025444
 8006dec:	58025458 	.word	0x58025458
 8006df0:	5802546c 	.word	0x5802546c
 8006df4:	58025480 	.word	0x58025480
 8006df8:	58025494 	.word	0x58025494
 8006dfc:	fffe000f 	.word	0xfffe000f
 8006e00:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8006e02:	687a      	ldr	r2, [r7, #4]
 8006e04:	68d2      	ldr	r2, [r2, #12]
 8006e06:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006e08:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	691b      	ldr	r3, [r3, #16]
 8006e0e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8006e10:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	695b      	ldr	r3, [r3, #20]
 8006e16:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8006e18:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	699b      	ldr	r3, [r3, #24]
 8006e1e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8006e20:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	69db      	ldr	r3, [r3, #28]
 8006e26:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8006e28:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	6a1b      	ldr	r3, [r3, #32]
 8006e2e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8006e30:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006e32:	697a      	ldr	r2, [r7, #20]
 8006e34:	4313      	orrs	r3, r2
 8006e36:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	697a      	ldr	r2, [r7, #20]
 8006e3e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	461a      	mov	r2, r3
 8006e46:	4b6e      	ldr	r3, [pc, #440]	@ (8007000 <HAL_DMA_Init+0x648>)
 8006e48:	4413      	add	r3, r2
 8006e4a:	4a6e      	ldr	r2, [pc, #440]	@ (8007004 <HAL_DMA_Init+0x64c>)
 8006e4c:	fba2 2303 	umull	r2, r3, r2, r3
 8006e50:	091b      	lsrs	r3, r3, #4
 8006e52:	009a      	lsls	r2, r3, #2
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006e58:	6878      	ldr	r0, [r7, #4]
 8006e5a:	f001 fc45 	bl	80086e8 <DMA_CalcBaseAndBitshift>
 8006e5e:	4603      	mov	r3, r0
 8006e60:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006e66:	f003 031f 	and.w	r3, r3, #31
 8006e6a:	2201      	movs	r2, #1
 8006e6c:	409a      	lsls	r2, r3
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	605a      	str	r2, [r3, #4]
 8006e72:	e008      	b.n	8006e86 <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2240      	movs	r2, #64	@ 0x40
 8006e78:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	2203      	movs	r2, #3
 8006e7e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8006e82:	2301      	movs	r3, #1
 8006e84:	e0b7      	b.n	8006ff6 <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	4a5f      	ldr	r2, [pc, #380]	@ (8007008 <HAL_DMA_Init+0x650>)
 8006e8c:	4293      	cmp	r3, r2
 8006e8e:	d072      	beq.n	8006f76 <HAL_DMA_Init+0x5be>
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	4a5d      	ldr	r2, [pc, #372]	@ (800700c <HAL_DMA_Init+0x654>)
 8006e96:	4293      	cmp	r3, r2
 8006e98:	d06d      	beq.n	8006f76 <HAL_DMA_Init+0x5be>
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	4a5c      	ldr	r2, [pc, #368]	@ (8007010 <HAL_DMA_Init+0x658>)
 8006ea0:	4293      	cmp	r3, r2
 8006ea2:	d068      	beq.n	8006f76 <HAL_DMA_Init+0x5be>
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	4a5a      	ldr	r2, [pc, #360]	@ (8007014 <HAL_DMA_Init+0x65c>)
 8006eaa:	4293      	cmp	r3, r2
 8006eac:	d063      	beq.n	8006f76 <HAL_DMA_Init+0x5be>
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	4a59      	ldr	r2, [pc, #356]	@ (8007018 <HAL_DMA_Init+0x660>)
 8006eb4:	4293      	cmp	r3, r2
 8006eb6:	d05e      	beq.n	8006f76 <HAL_DMA_Init+0x5be>
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	4a57      	ldr	r2, [pc, #348]	@ (800701c <HAL_DMA_Init+0x664>)
 8006ebe:	4293      	cmp	r3, r2
 8006ec0:	d059      	beq.n	8006f76 <HAL_DMA_Init+0x5be>
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	4a56      	ldr	r2, [pc, #344]	@ (8007020 <HAL_DMA_Init+0x668>)
 8006ec8:	4293      	cmp	r3, r2
 8006eca:	d054      	beq.n	8006f76 <HAL_DMA_Init+0x5be>
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	4a54      	ldr	r2, [pc, #336]	@ (8007024 <HAL_DMA_Init+0x66c>)
 8006ed2:	4293      	cmp	r3, r2
 8006ed4:	d04f      	beq.n	8006f76 <HAL_DMA_Init+0x5be>
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	4a53      	ldr	r2, [pc, #332]	@ (8007028 <HAL_DMA_Init+0x670>)
 8006edc:	4293      	cmp	r3, r2
 8006ede:	d04a      	beq.n	8006f76 <HAL_DMA_Init+0x5be>
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	4a51      	ldr	r2, [pc, #324]	@ (800702c <HAL_DMA_Init+0x674>)
 8006ee6:	4293      	cmp	r3, r2
 8006ee8:	d045      	beq.n	8006f76 <HAL_DMA_Init+0x5be>
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	4a50      	ldr	r2, [pc, #320]	@ (8007030 <HAL_DMA_Init+0x678>)
 8006ef0:	4293      	cmp	r3, r2
 8006ef2:	d040      	beq.n	8006f76 <HAL_DMA_Init+0x5be>
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	4a4e      	ldr	r2, [pc, #312]	@ (8007034 <HAL_DMA_Init+0x67c>)
 8006efa:	4293      	cmp	r3, r2
 8006efc:	d03b      	beq.n	8006f76 <HAL_DMA_Init+0x5be>
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	4a4d      	ldr	r2, [pc, #308]	@ (8007038 <HAL_DMA_Init+0x680>)
 8006f04:	4293      	cmp	r3, r2
 8006f06:	d036      	beq.n	8006f76 <HAL_DMA_Init+0x5be>
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	4a4b      	ldr	r2, [pc, #300]	@ (800703c <HAL_DMA_Init+0x684>)
 8006f0e:	4293      	cmp	r3, r2
 8006f10:	d031      	beq.n	8006f76 <HAL_DMA_Init+0x5be>
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	4a4a      	ldr	r2, [pc, #296]	@ (8007040 <HAL_DMA_Init+0x688>)
 8006f18:	4293      	cmp	r3, r2
 8006f1a:	d02c      	beq.n	8006f76 <HAL_DMA_Init+0x5be>
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	4a48      	ldr	r2, [pc, #288]	@ (8007044 <HAL_DMA_Init+0x68c>)
 8006f22:	4293      	cmp	r3, r2
 8006f24:	d027      	beq.n	8006f76 <HAL_DMA_Init+0x5be>
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	4a47      	ldr	r2, [pc, #284]	@ (8007048 <HAL_DMA_Init+0x690>)
 8006f2c:	4293      	cmp	r3, r2
 8006f2e:	d022      	beq.n	8006f76 <HAL_DMA_Init+0x5be>
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	4a45      	ldr	r2, [pc, #276]	@ (800704c <HAL_DMA_Init+0x694>)
 8006f36:	4293      	cmp	r3, r2
 8006f38:	d01d      	beq.n	8006f76 <HAL_DMA_Init+0x5be>
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	4a44      	ldr	r2, [pc, #272]	@ (8007050 <HAL_DMA_Init+0x698>)
 8006f40:	4293      	cmp	r3, r2
 8006f42:	d018      	beq.n	8006f76 <HAL_DMA_Init+0x5be>
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	4a42      	ldr	r2, [pc, #264]	@ (8007054 <HAL_DMA_Init+0x69c>)
 8006f4a:	4293      	cmp	r3, r2
 8006f4c:	d013      	beq.n	8006f76 <HAL_DMA_Init+0x5be>
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	4a41      	ldr	r2, [pc, #260]	@ (8007058 <HAL_DMA_Init+0x6a0>)
 8006f54:	4293      	cmp	r3, r2
 8006f56:	d00e      	beq.n	8006f76 <HAL_DMA_Init+0x5be>
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	4a3f      	ldr	r2, [pc, #252]	@ (800705c <HAL_DMA_Init+0x6a4>)
 8006f5e:	4293      	cmp	r3, r2
 8006f60:	d009      	beq.n	8006f76 <HAL_DMA_Init+0x5be>
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	4a3e      	ldr	r2, [pc, #248]	@ (8007060 <HAL_DMA_Init+0x6a8>)
 8006f68:	4293      	cmp	r3, r2
 8006f6a:	d004      	beq.n	8006f76 <HAL_DMA_Init+0x5be>
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	4a3c      	ldr	r2, [pc, #240]	@ (8007064 <HAL_DMA_Init+0x6ac>)
 8006f72:	4293      	cmp	r3, r2
 8006f74:	d101      	bne.n	8006f7a <HAL_DMA_Init+0x5c2>
 8006f76:	2301      	movs	r3, #1
 8006f78:	e000      	b.n	8006f7c <HAL_DMA_Init+0x5c4>
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d032      	beq.n	8006fe6 <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8006f80:	6878      	ldr	r0, [r7, #4]
 8006f82:	f001 fcdf 	bl	8008944 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	689b      	ldr	r3, [r3, #8]
 8006f8a:	2b80      	cmp	r3, #128	@ 0x80
 8006f8c:	d102      	bne.n	8006f94 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	2200      	movs	r2, #0
 8006f92:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	685a      	ldr	r2, [r3, #4]
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006f9c:	b2d2      	uxtb	r2, r2
 8006f9e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006fa4:	687a      	ldr	r2, [r7, #4]
 8006fa6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8006fa8:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	685b      	ldr	r3, [r3, #4]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d010      	beq.n	8006fd4 <HAL_DMA_Init+0x61c>
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	685b      	ldr	r3, [r3, #4]
 8006fb6:	2b08      	cmp	r3, #8
 8006fb8:	d80c      	bhi.n	8006fd4 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8006fba:	6878      	ldr	r0, [r7, #4]
 8006fbc:	f001 fd5c 	bl	8008a78 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006fcc:	687a      	ldr	r2, [r7, #4]
 8006fce:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8006fd0:	605a      	str	r2, [r3, #4]
 8006fd2:	e008      	b.n	8006fe6 <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	2200      	movs	r2, #0
 8006fde:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	2200      	movs	r2, #0
 8006fea:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2201      	movs	r2, #1
 8006ff0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8006ff4:	2300      	movs	r3, #0
}
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	3718      	adds	r7, #24
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	bd80      	pop	{r7, pc}
 8006ffe:	bf00      	nop
 8007000:	a7fdabf8 	.word	0xa7fdabf8
 8007004:	cccccccd 	.word	0xcccccccd
 8007008:	40020010 	.word	0x40020010
 800700c:	40020028 	.word	0x40020028
 8007010:	40020040 	.word	0x40020040
 8007014:	40020058 	.word	0x40020058
 8007018:	40020070 	.word	0x40020070
 800701c:	40020088 	.word	0x40020088
 8007020:	400200a0 	.word	0x400200a0
 8007024:	400200b8 	.word	0x400200b8
 8007028:	40020410 	.word	0x40020410
 800702c:	40020428 	.word	0x40020428
 8007030:	40020440 	.word	0x40020440
 8007034:	40020458 	.word	0x40020458
 8007038:	40020470 	.word	0x40020470
 800703c:	40020488 	.word	0x40020488
 8007040:	400204a0 	.word	0x400204a0
 8007044:	400204b8 	.word	0x400204b8
 8007048:	58025408 	.word	0x58025408
 800704c:	5802541c 	.word	0x5802541c
 8007050:	58025430 	.word	0x58025430
 8007054:	58025444 	.word	0x58025444
 8007058:	58025458 	.word	0x58025458
 800705c:	5802546c 	.word	0x5802546c
 8007060:	58025480 	.word	0x58025480
 8007064:	58025494 	.word	0x58025494

08007068 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007068:	b580      	push	{r7, lr}
 800706a:	b086      	sub	sp, #24
 800706c:	af00      	add	r7, sp, #0
 800706e:	60f8      	str	r0, [r7, #12]
 8007070:	60b9      	str	r1, [r7, #8]
 8007072:	607a      	str	r2, [r7, #4]
 8007074:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007076:	2300      	movs	r3, #0
 8007078:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	2b00      	cmp	r3, #0
 800707e:	d101      	bne.n	8007084 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8007080:	2301      	movs	r3, #1
 8007082:	e226      	b.n	80074d2 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800708a:	2b01      	cmp	r3, #1
 800708c:	d101      	bne.n	8007092 <HAL_DMA_Start_IT+0x2a>
 800708e:	2302      	movs	r3, #2
 8007090:	e21f      	b.n	80074d2 <HAL_DMA_Start_IT+0x46a>
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	2201      	movs	r2, #1
 8007096:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80070a0:	b2db      	uxtb	r3, r3
 80070a2:	2b01      	cmp	r3, #1
 80070a4:	f040 820a 	bne.w	80074bc <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	2202      	movs	r2, #2
 80070ac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	2200      	movs	r2, #0
 80070b4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	4a68      	ldr	r2, [pc, #416]	@ (800725c <HAL_DMA_Start_IT+0x1f4>)
 80070bc:	4293      	cmp	r3, r2
 80070be:	d04a      	beq.n	8007156 <HAL_DMA_Start_IT+0xee>
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	4a66      	ldr	r2, [pc, #408]	@ (8007260 <HAL_DMA_Start_IT+0x1f8>)
 80070c6:	4293      	cmp	r3, r2
 80070c8:	d045      	beq.n	8007156 <HAL_DMA_Start_IT+0xee>
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	4a65      	ldr	r2, [pc, #404]	@ (8007264 <HAL_DMA_Start_IT+0x1fc>)
 80070d0:	4293      	cmp	r3, r2
 80070d2:	d040      	beq.n	8007156 <HAL_DMA_Start_IT+0xee>
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	4a63      	ldr	r2, [pc, #396]	@ (8007268 <HAL_DMA_Start_IT+0x200>)
 80070da:	4293      	cmp	r3, r2
 80070dc:	d03b      	beq.n	8007156 <HAL_DMA_Start_IT+0xee>
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	4a62      	ldr	r2, [pc, #392]	@ (800726c <HAL_DMA_Start_IT+0x204>)
 80070e4:	4293      	cmp	r3, r2
 80070e6:	d036      	beq.n	8007156 <HAL_DMA_Start_IT+0xee>
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	4a60      	ldr	r2, [pc, #384]	@ (8007270 <HAL_DMA_Start_IT+0x208>)
 80070ee:	4293      	cmp	r3, r2
 80070f0:	d031      	beq.n	8007156 <HAL_DMA_Start_IT+0xee>
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	4a5f      	ldr	r2, [pc, #380]	@ (8007274 <HAL_DMA_Start_IT+0x20c>)
 80070f8:	4293      	cmp	r3, r2
 80070fa:	d02c      	beq.n	8007156 <HAL_DMA_Start_IT+0xee>
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	4a5d      	ldr	r2, [pc, #372]	@ (8007278 <HAL_DMA_Start_IT+0x210>)
 8007102:	4293      	cmp	r3, r2
 8007104:	d027      	beq.n	8007156 <HAL_DMA_Start_IT+0xee>
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	4a5c      	ldr	r2, [pc, #368]	@ (800727c <HAL_DMA_Start_IT+0x214>)
 800710c:	4293      	cmp	r3, r2
 800710e:	d022      	beq.n	8007156 <HAL_DMA_Start_IT+0xee>
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	4a5a      	ldr	r2, [pc, #360]	@ (8007280 <HAL_DMA_Start_IT+0x218>)
 8007116:	4293      	cmp	r3, r2
 8007118:	d01d      	beq.n	8007156 <HAL_DMA_Start_IT+0xee>
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	4a59      	ldr	r2, [pc, #356]	@ (8007284 <HAL_DMA_Start_IT+0x21c>)
 8007120:	4293      	cmp	r3, r2
 8007122:	d018      	beq.n	8007156 <HAL_DMA_Start_IT+0xee>
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	4a57      	ldr	r2, [pc, #348]	@ (8007288 <HAL_DMA_Start_IT+0x220>)
 800712a:	4293      	cmp	r3, r2
 800712c:	d013      	beq.n	8007156 <HAL_DMA_Start_IT+0xee>
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	4a56      	ldr	r2, [pc, #344]	@ (800728c <HAL_DMA_Start_IT+0x224>)
 8007134:	4293      	cmp	r3, r2
 8007136:	d00e      	beq.n	8007156 <HAL_DMA_Start_IT+0xee>
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	4a54      	ldr	r2, [pc, #336]	@ (8007290 <HAL_DMA_Start_IT+0x228>)
 800713e:	4293      	cmp	r3, r2
 8007140:	d009      	beq.n	8007156 <HAL_DMA_Start_IT+0xee>
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	4a53      	ldr	r2, [pc, #332]	@ (8007294 <HAL_DMA_Start_IT+0x22c>)
 8007148:	4293      	cmp	r3, r2
 800714a:	d004      	beq.n	8007156 <HAL_DMA_Start_IT+0xee>
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	4a51      	ldr	r2, [pc, #324]	@ (8007298 <HAL_DMA_Start_IT+0x230>)
 8007152:	4293      	cmp	r3, r2
 8007154:	d108      	bne.n	8007168 <HAL_DMA_Start_IT+0x100>
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	681a      	ldr	r2, [r3, #0]
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	f022 0201 	bic.w	r2, r2, #1
 8007164:	601a      	str	r2, [r3, #0]
 8007166:	e007      	b.n	8007178 <HAL_DMA_Start_IT+0x110>
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	681a      	ldr	r2, [r3, #0]
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	f022 0201 	bic.w	r2, r2, #1
 8007176:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007178:	683b      	ldr	r3, [r7, #0]
 800717a:	687a      	ldr	r2, [r7, #4]
 800717c:	68b9      	ldr	r1, [r7, #8]
 800717e:	68f8      	ldr	r0, [r7, #12]
 8007180:	f001 f906 	bl	8008390 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	4a34      	ldr	r2, [pc, #208]	@ (800725c <HAL_DMA_Start_IT+0x1f4>)
 800718a:	4293      	cmp	r3, r2
 800718c:	d04a      	beq.n	8007224 <HAL_DMA_Start_IT+0x1bc>
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	4a33      	ldr	r2, [pc, #204]	@ (8007260 <HAL_DMA_Start_IT+0x1f8>)
 8007194:	4293      	cmp	r3, r2
 8007196:	d045      	beq.n	8007224 <HAL_DMA_Start_IT+0x1bc>
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	4a31      	ldr	r2, [pc, #196]	@ (8007264 <HAL_DMA_Start_IT+0x1fc>)
 800719e:	4293      	cmp	r3, r2
 80071a0:	d040      	beq.n	8007224 <HAL_DMA_Start_IT+0x1bc>
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	4a30      	ldr	r2, [pc, #192]	@ (8007268 <HAL_DMA_Start_IT+0x200>)
 80071a8:	4293      	cmp	r3, r2
 80071aa:	d03b      	beq.n	8007224 <HAL_DMA_Start_IT+0x1bc>
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	4a2e      	ldr	r2, [pc, #184]	@ (800726c <HAL_DMA_Start_IT+0x204>)
 80071b2:	4293      	cmp	r3, r2
 80071b4:	d036      	beq.n	8007224 <HAL_DMA_Start_IT+0x1bc>
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	4a2d      	ldr	r2, [pc, #180]	@ (8007270 <HAL_DMA_Start_IT+0x208>)
 80071bc:	4293      	cmp	r3, r2
 80071be:	d031      	beq.n	8007224 <HAL_DMA_Start_IT+0x1bc>
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	4a2b      	ldr	r2, [pc, #172]	@ (8007274 <HAL_DMA_Start_IT+0x20c>)
 80071c6:	4293      	cmp	r3, r2
 80071c8:	d02c      	beq.n	8007224 <HAL_DMA_Start_IT+0x1bc>
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	4a2a      	ldr	r2, [pc, #168]	@ (8007278 <HAL_DMA_Start_IT+0x210>)
 80071d0:	4293      	cmp	r3, r2
 80071d2:	d027      	beq.n	8007224 <HAL_DMA_Start_IT+0x1bc>
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	4a28      	ldr	r2, [pc, #160]	@ (800727c <HAL_DMA_Start_IT+0x214>)
 80071da:	4293      	cmp	r3, r2
 80071dc:	d022      	beq.n	8007224 <HAL_DMA_Start_IT+0x1bc>
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	4a27      	ldr	r2, [pc, #156]	@ (8007280 <HAL_DMA_Start_IT+0x218>)
 80071e4:	4293      	cmp	r3, r2
 80071e6:	d01d      	beq.n	8007224 <HAL_DMA_Start_IT+0x1bc>
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	4a25      	ldr	r2, [pc, #148]	@ (8007284 <HAL_DMA_Start_IT+0x21c>)
 80071ee:	4293      	cmp	r3, r2
 80071f0:	d018      	beq.n	8007224 <HAL_DMA_Start_IT+0x1bc>
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	4a24      	ldr	r2, [pc, #144]	@ (8007288 <HAL_DMA_Start_IT+0x220>)
 80071f8:	4293      	cmp	r3, r2
 80071fa:	d013      	beq.n	8007224 <HAL_DMA_Start_IT+0x1bc>
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	4a22      	ldr	r2, [pc, #136]	@ (800728c <HAL_DMA_Start_IT+0x224>)
 8007202:	4293      	cmp	r3, r2
 8007204:	d00e      	beq.n	8007224 <HAL_DMA_Start_IT+0x1bc>
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	4a21      	ldr	r2, [pc, #132]	@ (8007290 <HAL_DMA_Start_IT+0x228>)
 800720c:	4293      	cmp	r3, r2
 800720e:	d009      	beq.n	8007224 <HAL_DMA_Start_IT+0x1bc>
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	4a1f      	ldr	r2, [pc, #124]	@ (8007294 <HAL_DMA_Start_IT+0x22c>)
 8007216:	4293      	cmp	r3, r2
 8007218:	d004      	beq.n	8007224 <HAL_DMA_Start_IT+0x1bc>
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	4a1e      	ldr	r2, [pc, #120]	@ (8007298 <HAL_DMA_Start_IT+0x230>)
 8007220:	4293      	cmp	r3, r2
 8007222:	d101      	bne.n	8007228 <HAL_DMA_Start_IT+0x1c0>
 8007224:	2301      	movs	r3, #1
 8007226:	e000      	b.n	800722a <HAL_DMA_Start_IT+0x1c2>
 8007228:	2300      	movs	r3, #0
 800722a:	2b00      	cmp	r3, #0
 800722c:	d036      	beq.n	800729c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	f023 021e 	bic.w	r2, r3, #30
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	f042 0216 	orr.w	r2, r2, #22
 8007240:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007246:	2b00      	cmp	r3, #0
 8007248:	d03e      	beq.n	80072c8 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	681a      	ldr	r2, [r3, #0]
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	f042 0208 	orr.w	r2, r2, #8
 8007258:	601a      	str	r2, [r3, #0]
 800725a:	e035      	b.n	80072c8 <HAL_DMA_Start_IT+0x260>
 800725c:	40020010 	.word	0x40020010
 8007260:	40020028 	.word	0x40020028
 8007264:	40020040 	.word	0x40020040
 8007268:	40020058 	.word	0x40020058
 800726c:	40020070 	.word	0x40020070
 8007270:	40020088 	.word	0x40020088
 8007274:	400200a0 	.word	0x400200a0
 8007278:	400200b8 	.word	0x400200b8
 800727c:	40020410 	.word	0x40020410
 8007280:	40020428 	.word	0x40020428
 8007284:	40020440 	.word	0x40020440
 8007288:	40020458 	.word	0x40020458
 800728c:	40020470 	.word	0x40020470
 8007290:	40020488 	.word	0x40020488
 8007294:	400204a0 	.word	0x400204a0
 8007298:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	f023 020e 	bic.w	r2, r3, #14
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	f042 020a 	orr.w	r2, r2, #10
 80072ae:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d007      	beq.n	80072c8 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	681a      	ldr	r2, [r3, #0]
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	f042 0204 	orr.w	r2, r2, #4
 80072c6:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	4a83      	ldr	r2, [pc, #524]	@ (80074dc <HAL_DMA_Start_IT+0x474>)
 80072ce:	4293      	cmp	r3, r2
 80072d0:	d072      	beq.n	80073b8 <HAL_DMA_Start_IT+0x350>
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	4a82      	ldr	r2, [pc, #520]	@ (80074e0 <HAL_DMA_Start_IT+0x478>)
 80072d8:	4293      	cmp	r3, r2
 80072da:	d06d      	beq.n	80073b8 <HAL_DMA_Start_IT+0x350>
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	4a80      	ldr	r2, [pc, #512]	@ (80074e4 <HAL_DMA_Start_IT+0x47c>)
 80072e2:	4293      	cmp	r3, r2
 80072e4:	d068      	beq.n	80073b8 <HAL_DMA_Start_IT+0x350>
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	4a7f      	ldr	r2, [pc, #508]	@ (80074e8 <HAL_DMA_Start_IT+0x480>)
 80072ec:	4293      	cmp	r3, r2
 80072ee:	d063      	beq.n	80073b8 <HAL_DMA_Start_IT+0x350>
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	4a7d      	ldr	r2, [pc, #500]	@ (80074ec <HAL_DMA_Start_IT+0x484>)
 80072f6:	4293      	cmp	r3, r2
 80072f8:	d05e      	beq.n	80073b8 <HAL_DMA_Start_IT+0x350>
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	4a7c      	ldr	r2, [pc, #496]	@ (80074f0 <HAL_DMA_Start_IT+0x488>)
 8007300:	4293      	cmp	r3, r2
 8007302:	d059      	beq.n	80073b8 <HAL_DMA_Start_IT+0x350>
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	4a7a      	ldr	r2, [pc, #488]	@ (80074f4 <HAL_DMA_Start_IT+0x48c>)
 800730a:	4293      	cmp	r3, r2
 800730c:	d054      	beq.n	80073b8 <HAL_DMA_Start_IT+0x350>
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	4a79      	ldr	r2, [pc, #484]	@ (80074f8 <HAL_DMA_Start_IT+0x490>)
 8007314:	4293      	cmp	r3, r2
 8007316:	d04f      	beq.n	80073b8 <HAL_DMA_Start_IT+0x350>
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	4a77      	ldr	r2, [pc, #476]	@ (80074fc <HAL_DMA_Start_IT+0x494>)
 800731e:	4293      	cmp	r3, r2
 8007320:	d04a      	beq.n	80073b8 <HAL_DMA_Start_IT+0x350>
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	4a76      	ldr	r2, [pc, #472]	@ (8007500 <HAL_DMA_Start_IT+0x498>)
 8007328:	4293      	cmp	r3, r2
 800732a:	d045      	beq.n	80073b8 <HAL_DMA_Start_IT+0x350>
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	4a74      	ldr	r2, [pc, #464]	@ (8007504 <HAL_DMA_Start_IT+0x49c>)
 8007332:	4293      	cmp	r3, r2
 8007334:	d040      	beq.n	80073b8 <HAL_DMA_Start_IT+0x350>
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	4a73      	ldr	r2, [pc, #460]	@ (8007508 <HAL_DMA_Start_IT+0x4a0>)
 800733c:	4293      	cmp	r3, r2
 800733e:	d03b      	beq.n	80073b8 <HAL_DMA_Start_IT+0x350>
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	4a71      	ldr	r2, [pc, #452]	@ (800750c <HAL_DMA_Start_IT+0x4a4>)
 8007346:	4293      	cmp	r3, r2
 8007348:	d036      	beq.n	80073b8 <HAL_DMA_Start_IT+0x350>
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	4a70      	ldr	r2, [pc, #448]	@ (8007510 <HAL_DMA_Start_IT+0x4a8>)
 8007350:	4293      	cmp	r3, r2
 8007352:	d031      	beq.n	80073b8 <HAL_DMA_Start_IT+0x350>
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	4a6e      	ldr	r2, [pc, #440]	@ (8007514 <HAL_DMA_Start_IT+0x4ac>)
 800735a:	4293      	cmp	r3, r2
 800735c:	d02c      	beq.n	80073b8 <HAL_DMA_Start_IT+0x350>
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	4a6d      	ldr	r2, [pc, #436]	@ (8007518 <HAL_DMA_Start_IT+0x4b0>)
 8007364:	4293      	cmp	r3, r2
 8007366:	d027      	beq.n	80073b8 <HAL_DMA_Start_IT+0x350>
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	4a6b      	ldr	r2, [pc, #428]	@ (800751c <HAL_DMA_Start_IT+0x4b4>)
 800736e:	4293      	cmp	r3, r2
 8007370:	d022      	beq.n	80073b8 <HAL_DMA_Start_IT+0x350>
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	4a6a      	ldr	r2, [pc, #424]	@ (8007520 <HAL_DMA_Start_IT+0x4b8>)
 8007378:	4293      	cmp	r3, r2
 800737a:	d01d      	beq.n	80073b8 <HAL_DMA_Start_IT+0x350>
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	4a68      	ldr	r2, [pc, #416]	@ (8007524 <HAL_DMA_Start_IT+0x4bc>)
 8007382:	4293      	cmp	r3, r2
 8007384:	d018      	beq.n	80073b8 <HAL_DMA_Start_IT+0x350>
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	4a67      	ldr	r2, [pc, #412]	@ (8007528 <HAL_DMA_Start_IT+0x4c0>)
 800738c:	4293      	cmp	r3, r2
 800738e:	d013      	beq.n	80073b8 <HAL_DMA_Start_IT+0x350>
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	4a65      	ldr	r2, [pc, #404]	@ (800752c <HAL_DMA_Start_IT+0x4c4>)
 8007396:	4293      	cmp	r3, r2
 8007398:	d00e      	beq.n	80073b8 <HAL_DMA_Start_IT+0x350>
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	4a64      	ldr	r2, [pc, #400]	@ (8007530 <HAL_DMA_Start_IT+0x4c8>)
 80073a0:	4293      	cmp	r3, r2
 80073a2:	d009      	beq.n	80073b8 <HAL_DMA_Start_IT+0x350>
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	4a62      	ldr	r2, [pc, #392]	@ (8007534 <HAL_DMA_Start_IT+0x4cc>)
 80073aa:	4293      	cmp	r3, r2
 80073ac:	d004      	beq.n	80073b8 <HAL_DMA_Start_IT+0x350>
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	4a61      	ldr	r2, [pc, #388]	@ (8007538 <HAL_DMA_Start_IT+0x4d0>)
 80073b4:	4293      	cmp	r3, r2
 80073b6:	d101      	bne.n	80073bc <HAL_DMA_Start_IT+0x354>
 80073b8:	2301      	movs	r3, #1
 80073ba:	e000      	b.n	80073be <HAL_DMA_Start_IT+0x356>
 80073bc:	2300      	movs	r3, #0
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d01a      	beq.n	80073f8 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d007      	beq.n	80073e0 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80073d4:	681a      	ldr	r2, [r3, #0]
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80073da:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80073de:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d007      	beq.n	80073f8 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80073ec:	681a      	ldr	r2, [r3, #0]
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80073f2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80073f6:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	4a37      	ldr	r2, [pc, #220]	@ (80074dc <HAL_DMA_Start_IT+0x474>)
 80073fe:	4293      	cmp	r3, r2
 8007400:	d04a      	beq.n	8007498 <HAL_DMA_Start_IT+0x430>
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	4a36      	ldr	r2, [pc, #216]	@ (80074e0 <HAL_DMA_Start_IT+0x478>)
 8007408:	4293      	cmp	r3, r2
 800740a:	d045      	beq.n	8007498 <HAL_DMA_Start_IT+0x430>
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	4a34      	ldr	r2, [pc, #208]	@ (80074e4 <HAL_DMA_Start_IT+0x47c>)
 8007412:	4293      	cmp	r3, r2
 8007414:	d040      	beq.n	8007498 <HAL_DMA_Start_IT+0x430>
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	4a33      	ldr	r2, [pc, #204]	@ (80074e8 <HAL_DMA_Start_IT+0x480>)
 800741c:	4293      	cmp	r3, r2
 800741e:	d03b      	beq.n	8007498 <HAL_DMA_Start_IT+0x430>
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	4a31      	ldr	r2, [pc, #196]	@ (80074ec <HAL_DMA_Start_IT+0x484>)
 8007426:	4293      	cmp	r3, r2
 8007428:	d036      	beq.n	8007498 <HAL_DMA_Start_IT+0x430>
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	4a30      	ldr	r2, [pc, #192]	@ (80074f0 <HAL_DMA_Start_IT+0x488>)
 8007430:	4293      	cmp	r3, r2
 8007432:	d031      	beq.n	8007498 <HAL_DMA_Start_IT+0x430>
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	4a2e      	ldr	r2, [pc, #184]	@ (80074f4 <HAL_DMA_Start_IT+0x48c>)
 800743a:	4293      	cmp	r3, r2
 800743c:	d02c      	beq.n	8007498 <HAL_DMA_Start_IT+0x430>
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	4a2d      	ldr	r2, [pc, #180]	@ (80074f8 <HAL_DMA_Start_IT+0x490>)
 8007444:	4293      	cmp	r3, r2
 8007446:	d027      	beq.n	8007498 <HAL_DMA_Start_IT+0x430>
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	4a2b      	ldr	r2, [pc, #172]	@ (80074fc <HAL_DMA_Start_IT+0x494>)
 800744e:	4293      	cmp	r3, r2
 8007450:	d022      	beq.n	8007498 <HAL_DMA_Start_IT+0x430>
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	4a2a      	ldr	r2, [pc, #168]	@ (8007500 <HAL_DMA_Start_IT+0x498>)
 8007458:	4293      	cmp	r3, r2
 800745a:	d01d      	beq.n	8007498 <HAL_DMA_Start_IT+0x430>
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	4a28      	ldr	r2, [pc, #160]	@ (8007504 <HAL_DMA_Start_IT+0x49c>)
 8007462:	4293      	cmp	r3, r2
 8007464:	d018      	beq.n	8007498 <HAL_DMA_Start_IT+0x430>
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	4a27      	ldr	r2, [pc, #156]	@ (8007508 <HAL_DMA_Start_IT+0x4a0>)
 800746c:	4293      	cmp	r3, r2
 800746e:	d013      	beq.n	8007498 <HAL_DMA_Start_IT+0x430>
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	4a25      	ldr	r2, [pc, #148]	@ (800750c <HAL_DMA_Start_IT+0x4a4>)
 8007476:	4293      	cmp	r3, r2
 8007478:	d00e      	beq.n	8007498 <HAL_DMA_Start_IT+0x430>
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	4a24      	ldr	r2, [pc, #144]	@ (8007510 <HAL_DMA_Start_IT+0x4a8>)
 8007480:	4293      	cmp	r3, r2
 8007482:	d009      	beq.n	8007498 <HAL_DMA_Start_IT+0x430>
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	4a22      	ldr	r2, [pc, #136]	@ (8007514 <HAL_DMA_Start_IT+0x4ac>)
 800748a:	4293      	cmp	r3, r2
 800748c:	d004      	beq.n	8007498 <HAL_DMA_Start_IT+0x430>
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	4a21      	ldr	r2, [pc, #132]	@ (8007518 <HAL_DMA_Start_IT+0x4b0>)
 8007494:	4293      	cmp	r3, r2
 8007496:	d108      	bne.n	80074aa <HAL_DMA_Start_IT+0x442>
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	681a      	ldr	r2, [r3, #0]
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	f042 0201 	orr.w	r2, r2, #1
 80074a6:	601a      	str	r2, [r3, #0]
 80074a8:	e012      	b.n	80074d0 <HAL_DMA_Start_IT+0x468>
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	681a      	ldr	r2, [r3, #0]
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	f042 0201 	orr.w	r2, r2, #1
 80074b8:	601a      	str	r2, [r3, #0]
 80074ba:	e009      	b.n	80074d0 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80074c2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	2200      	movs	r2, #0
 80074c8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 80074cc:	2301      	movs	r3, #1
 80074ce:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80074d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80074d2:	4618      	mov	r0, r3
 80074d4:	3718      	adds	r7, #24
 80074d6:	46bd      	mov	sp, r7
 80074d8:	bd80      	pop	{r7, pc}
 80074da:	bf00      	nop
 80074dc:	40020010 	.word	0x40020010
 80074e0:	40020028 	.word	0x40020028
 80074e4:	40020040 	.word	0x40020040
 80074e8:	40020058 	.word	0x40020058
 80074ec:	40020070 	.word	0x40020070
 80074f0:	40020088 	.word	0x40020088
 80074f4:	400200a0 	.word	0x400200a0
 80074f8:	400200b8 	.word	0x400200b8
 80074fc:	40020410 	.word	0x40020410
 8007500:	40020428 	.word	0x40020428
 8007504:	40020440 	.word	0x40020440
 8007508:	40020458 	.word	0x40020458
 800750c:	40020470 	.word	0x40020470
 8007510:	40020488 	.word	0x40020488
 8007514:	400204a0 	.word	0x400204a0
 8007518:	400204b8 	.word	0x400204b8
 800751c:	58025408 	.word	0x58025408
 8007520:	5802541c 	.word	0x5802541c
 8007524:	58025430 	.word	0x58025430
 8007528:	58025444 	.word	0x58025444
 800752c:	58025458 	.word	0x58025458
 8007530:	5802546c 	.word	0x5802546c
 8007534:	58025480 	.word	0x58025480
 8007538:	58025494 	.word	0x58025494

0800753c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800753c:	b580      	push	{r7, lr}
 800753e:	b08a      	sub	sp, #40	@ 0x28
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8007544:	2300      	movs	r3, #0
 8007546:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007548:	4b67      	ldr	r3, [pc, #412]	@ (80076e8 <HAL_DMA_IRQHandler+0x1ac>)
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	4a67      	ldr	r2, [pc, #412]	@ (80076ec <HAL_DMA_IRQHandler+0x1b0>)
 800754e:	fba2 2303 	umull	r2, r3, r2, r3
 8007552:	0a9b      	lsrs	r3, r3, #10
 8007554:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800755a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007560:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8007562:	6a3b      	ldr	r3, [r7, #32]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8007568:	69fb      	ldr	r3, [r7, #28]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	4a5f      	ldr	r2, [pc, #380]	@ (80076f0 <HAL_DMA_IRQHandler+0x1b4>)
 8007574:	4293      	cmp	r3, r2
 8007576:	d04a      	beq.n	800760e <HAL_DMA_IRQHandler+0xd2>
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	4a5d      	ldr	r2, [pc, #372]	@ (80076f4 <HAL_DMA_IRQHandler+0x1b8>)
 800757e:	4293      	cmp	r3, r2
 8007580:	d045      	beq.n	800760e <HAL_DMA_IRQHandler+0xd2>
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	4a5c      	ldr	r2, [pc, #368]	@ (80076f8 <HAL_DMA_IRQHandler+0x1bc>)
 8007588:	4293      	cmp	r3, r2
 800758a:	d040      	beq.n	800760e <HAL_DMA_IRQHandler+0xd2>
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	4a5a      	ldr	r2, [pc, #360]	@ (80076fc <HAL_DMA_IRQHandler+0x1c0>)
 8007592:	4293      	cmp	r3, r2
 8007594:	d03b      	beq.n	800760e <HAL_DMA_IRQHandler+0xd2>
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	4a59      	ldr	r2, [pc, #356]	@ (8007700 <HAL_DMA_IRQHandler+0x1c4>)
 800759c:	4293      	cmp	r3, r2
 800759e:	d036      	beq.n	800760e <HAL_DMA_IRQHandler+0xd2>
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	4a57      	ldr	r2, [pc, #348]	@ (8007704 <HAL_DMA_IRQHandler+0x1c8>)
 80075a6:	4293      	cmp	r3, r2
 80075a8:	d031      	beq.n	800760e <HAL_DMA_IRQHandler+0xd2>
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	4a56      	ldr	r2, [pc, #344]	@ (8007708 <HAL_DMA_IRQHandler+0x1cc>)
 80075b0:	4293      	cmp	r3, r2
 80075b2:	d02c      	beq.n	800760e <HAL_DMA_IRQHandler+0xd2>
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	4a54      	ldr	r2, [pc, #336]	@ (800770c <HAL_DMA_IRQHandler+0x1d0>)
 80075ba:	4293      	cmp	r3, r2
 80075bc:	d027      	beq.n	800760e <HAL_DMA_IRQHandler+0xd2>
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	4a53      	ldr	r2, [pc, #332]	@ (8007710 <HAL_DMA_IRQHandler+0x1d4>)
 80075c4:	4293      	cmp	r3, r2
 80075c6:	d022      	beq.n	800760e <HAL_DMA_IRQHandler+0xd2>
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	4a51      	ldr	r2, [pc, #324]	@ (8007714 <HAL_DMA_IRQHandler+0x1d8>)
 80075ce:	4293      	cmp	r3, r2
 80075d0:	d01d      	beq.n	800760e <HAL_DMA_IRQHandler+0xd2>
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	4a50      	ldr	r2, [pc, #320]	@ (8007718 <HAL_DMA_IRQHandler+0x1dc>)
 80075d8:	4293      	cmp	r3, r2
 80075da:	d018      	beq.n	800760e <HAL_DMA_IRQHandler+0xd2>
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	4a4e      	ldr	r2, [pc, #312]	@ (800771c <HAL_DMA_IRQHandler+0x1e0>)
 80075e2:	4293      	cmp	r3, r2
 80075e4:	d013      	beq.n	800760e <HAL_DMA_IRQHandler+0xd2>
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	4a4d      	ldr	r2, [pc, #308]	@ (8007720 <HAL_DMA_IRQHandler+0x1e4>)
 80075ec:	4293      	cmp	r3, r2
 80075ee:	d00e      	beq.n	800760e <HAL_DMA_IRQHandler+0xd2>
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	4a4b      	ldr	r2, [pc, #300]	@ (8007724 <HAL_DMA_IRQHandler+0x1e8>)
 80075f6:	4293      	cmp	r3, r2
 80075f8:	d009      	beq.n	800760e <HAL_DMA_IRQHandler+0xd2>
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	4a4a      	ldr	r2, [pc, #296]	@ (8007728 <HAL_DMA_IRQHandler+0x1ec>)
 8007600:	4293      	cmp	r3, r2
 8007602:	d004      	beq.n	800760e <HAL_DMA_IRQHandler+0xd2>
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	4a48      	ldr	r2, [pc, #288]	@ (800772c <HAL_DMA_IRQHandler+0x1f0>)
 800760a:	4293      	cmp	r3, r2
 800760c:	d101      	bne.n	8007612 <HAL_DMA_IRQHandler+0xd6>
 800760e:	2301      	movs	r3, #1
 8007610:	e000      	b.n	8007614 <HAL_DMA_IRQHandler+0xd8>
 8007612:	2300      	movs	r3, #0
 8007614:	2b00      	cmp	r3, #0
 8007616:	f000 842b 	beq.w	8007e70 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800761e:	f003 031f 	and.w	r3, r3, #31
 8007622:	2208      	movs	r2, #8
 8007624:	409a      	lsls	r2, r3
 8007626:	69bb      	ldr	r3, [r7, #24]
 8007628:	4013      	ands	r3, r2
 800762a:	2b00      	cmp	r3, #0
 800762c:	f000 80a2 	beq.w	8007774 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	4a2e      	ldr	r2, [pc, #184]	@ (80076f0 <HAL_DMA_IRQHandler+0x1b4>)
 8007636:	4293      	cmp	r3, r2
 8007638:	d04a      	beq.n	80076d0 <HAL_DMA_IRQHandler+0x194>
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	4a2d      	ldr	r2, [pc, #180]	@ (80076f4 <HAL_DMA_IRQHandler+0x1b8>)
 8007640:	4293      	cmp	r3, r2
 8007642:	d045      	beq.n	80076d0 <HAL_DMA_IRQHandler+0x194>
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	4a2b      	ldr	r2, [pc, #172]	@ (80076f8 <HAL_DMA_IRQHandler+0x1bc>)
 800764a:	4293      	cmp	r3, r2
 800764c:	d040      	beq.n	80076d0 <HAL_DMA_IRQHandler+0x194>
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	4a2a      	ldr	r2, [pc, #168]	@ (80076fc <HAL_DMA_IRQHandler+0x1c0>)
 8007654:	4293      	cmp	r3, r2
 8007656:	d03b      	beq.n	80076d0 <HAL_DMA_IRQHandler+0x194>
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	4a28      	ldr	r2, [pc, #160]	@ (8007700 <HAL_DMA_IRQHandler+0x1c4>)
 800765e:	4293      	cmp	r3, r2
 8007660:	d036      	beq.n	80076d0 <HAL_DMA_IRQHandler+0x194>
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	4a27      	ldr	r2, [pc, #156]	@ (8007704 <HAL_DMA_IRQHandler+0x1c8>)
 8007668:	4293      	cmp	r3, r2
 800766a:	d031      	beq.n	80076d0 <HAL_DMA_IRQHandler+0x194>
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	4a25      	ldr	r2, [pc, #148]	@ (8007708 <HAL_DMA_IRQHandler+0x1cc>)
 8007672:	4293      	cmp	r3, r2
 8007674:	d02c      	beq.n	80076d0 <HAL_DMA_IRQHandler+0x194>
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	4a24      	ldr	r2, [pc, #144]	@ (800770c <HAL_DMA_IRQHandler+0x1d0>)
 800767c:	4293      	cmp	r3, r2
 800767e:	d027      	beq.n	80076d0 <HAL_DMA_IRQHandler+0x194>
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	4a22      	ldr	r2, [pc, #136]	@ (8007710 <HAL_DMA_IRQHandler+0x1d4>)
 8007686:	4293      	cmp	r3, r2
 8007688:	d022      	beq.n	80076d0 <HAL_DMA_IRQHandler+0x194>
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	4a21      	ldr	r2, [pc, #132]	@ (8007714 <HAL_DMA_IRQHandler+0x1d8>)
 8007690:	4293      	cmp	r3, r2
 8007692:	d01d      	beq.n	80076d0 <HAL_DMA_IRQHandler+0x194>
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	4a1f      	ldr	r2, [pc, #124]	@ (8007718 <HAL_DMA_IRQHandler+0x1dc>)
 800769a:	4293      	cmp	r3, r2
 800769c:	d018      	beq.n	80076d0 <HAL_DMA_IRQHandler+0x194>
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	4a1e      	ldr	r2, [pc, #120]	@ (800771c <HAL_DMA_IRQHandler+0x1e0>)
 80076a4:	4293      	cmp	r3, r2
 80076a6:	d013      	beq.n	80076d0 <HAL_DMA_IRQHandler+0x194>
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	4a1c      	ldr	r2, [pc, #112]	@ (8007720 <HAL_DMA_IRQHandler+0x1e4>)
 80076ae:	4293      	cmp	r3, r2
 80076b0:	d00e      	beq.n	80076d0 <HAL_DMA_IRQHandler+0x194>
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	4a1b      	ldr	r2, [pc, #108]	@ (8007724 <HAL_DMA_IRQHandler+0x1e8>)
 80076b8:	4293      	cmp	r3, r2
 80076ba:	d009      	beq.n	80076d0 <HAL_DMA_IRQHandler+0x194>
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	4a19      	ldr	r2, [pc, #100]	@ (8007728 <HAL_DMA_IRQHandler+0x1ec>)
 80076c2:	4293      	cmp	r3, r2
 80076c4:	d004      	beq.n	80076d0 <HAL_DMA_IRQHandler+0x194>
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	4a18      	ldr	r2, [pc, #96]	@ (800772c <HAL_DMA_IRQHandler+0x1f0>)
 80076cc:	4293      	cmp	r3, r2
 80076ce:	d12f      	bne.n	8007730 <HAL_DMA_IRQHandler+0x1f4>
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	f003 0304 	and.w	r3, r3, #4
 80076da:	2b00      	cmp	r3, #0
 80076dc:	bf14      	ite	ne
 80076de:	2301      	movne	r3, #1
 80076e0:	2300      	moveq	r3, #0
 80076e2:	b2db      	uxtb	r3, r3
 80076e4:	e02e      	b.n	8007744 <HAL_DMA_IRQHandler+0x208>
 80076e6:	bf00      	nop
 80076e8:	24000000 	.word	0x24000000
 80076ec:	1b4e81b5 	.word	0x1b4e81b5
 80076f0:	40020010 	.word	0x40020010
 80076f4:	40020028 	.word	0x40020028
 80076f8:	40020040 	.word	0x40020040
 80076fc:	40020058 	.word	0x40020058
 8007700:	40020070 	.word	0x40020070
 8007704:	40020088 	.word	0x40020088
 8007708:	400200a0 	.word	0x400200a0
 800770c:	400200b8 	.word	0x400200b8
 8007710:	40020410 	.word	0x40020410
 8007714:	40020428 	.word	0x40020428
 8007718:	40020440 	.word	0x40020440
 800771c:	40020458 	.word	0x40020458
 8007720:	40020470 	.word	0x40020470
 8007724:	40020488 	.word	0x40020488
 8007728:	400204a0 	.word	0x400204a0
 800772c:	400204b8 	.word	0x400204b8
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	f003 0308 	and.w	r3, r3, #8
 800773a:	2b00      	cmp	r3, #0
 800773c:	bf14      	ite	ne
 800773e:	2301      	movne	r3, #1
 8007740:	2300      	moveq	r3, #0
 8007742:	b2db      	uxtb	r3, r3
 8007744:	2b00      	cmp	r3, #0
 8007746:	d015      	beq.n	8007774 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	681a      	ldr	r2, [r3, #0]
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	f022 0204 	bic.w	r2, r2, #4
 8007756:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800775c:	f003 031f 	and.w	r3, r3, #31
 8007760:	2208      	movs	r2, #8
 8007762:	409a      	lsls	r2, r3
 8007764:	6a3b      	ldr	r3, [r7, #32]
 8007766:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800776c:	f043 0201 	orr.w	r2, r3, #1
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007778:	f003 031f 	and.w	r3, r3, #31
 800777c:	69ba      	ldr	r2, [r7, #24]
 800777e:	fa22 f303 	lsr.w	r3, r2, r3
 8007782:	f003 0301 	and.w	r3, r3, #1
 8007786:	2b00      	cmp	r3, #0
 8007788:	d06e      	beq.n	8007868 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	4a69      	ldr	r2, [pc, #420]	@ (8007934 <HAL_DMA_IRQHandler+0x3f8>)
 8007790:	4293      	cmp	r3, r2
 8007792:	d04a      	beq.n	800782a <HAL_DMA_IRQHandler+0x2ee>
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	4a67      	ldr	r2, [pc, #412]	@ (8007938 <HAL_DMA_IRQHandler+0x3fc>)
 800779a:	4293      	cmp	r3, r2
 800779c:	d045      	beq.n	800782a <HAL_DMA_IRQHandler+0x2ee>
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	4a66      	ldr	r2, [pc, #408]	@ (800793c <HAL_DMA_IRQHandler+0x400>)
 80077a4:	4293      	cmp	r3, r2
 80077a6:	d040      	beq.n	800782a <HAL_DMA_IRQHandler+0x2ee>
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	4a64      	ldr	r2, [pc, #400]	@ (8007940 <HAL_DMA_IRQHandler+0x404>)
 80077ae:	4293      	cmp	r3, r2
 80077b0:	d03b      	beq.n	800782a <HAL_DMA_IRQHandler+0x2ee>
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	4a63      	ldr	r2, [pc, #396]	@ (8007944 <HAL_DMA_IRQHandler+0x408>)
 80077b8:	4293      	cmp	r3, r2
 80077ba:	d036      	beq.n	800782a <HAL_DMA_IRQHandler+0x2ee>
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	4a61      	ldr	r2, [pc, #388]	@ (8007948 <HAL_DMA_IRQHandler+0x40c>)
 80077c2:	4293      	cmp	r3, r2
 80077c4:	d031      	beq.n	800782a <HAL_DMA_IRQHandler+0x2ee>
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	4a60      	ldr	r2, [pc, #384]	@ (800794c <HAL_DMA_IRQHandler+0x410>)
 80077cc:	4293      	cmp	r3, r2
 80077ce:	d02c      	beq.n	800782a <HAL_DMA_IRQHandler+0x2ee>
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	4a5e      	ldr	r2, [pc, #376]	@ (8007950 <HAL_DMA_IRQHandler+0x414>)
 80077d6:	4293      	cmp	r3, r2
 80077d8:	d027      	beq.n	800782a <HAL_DMA_IRQHandler+0x2ee>
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	4a5d      	ldr	r2, [pc, #372]	@ (8007954 <HAL_DMA_IRQHandler+0x418>)
 80077e0:	4293      	cmp	r3, r2
 80077e2:	d022      	beq.n	800782a <HAL_DMA_IRQHandler+0x2ee>
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	4a5b      	ldr	r2, [pc, #364]	@ (8007958 <HAL_DMA_IRQHandler+0x41c>)
 80077ea:	4293      	cmp	r3, r2
 80077ec:	d01d      	beq.n	800782a <HAL_DMA_IRQHandler+0x2ee>
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	4a5a      	ldr	r2, [pc, #360]	@ (800795c <HAL_DMA_IRQHandler+0x420>)
 80077f4:	4293      	cmp	r3, r2
 80077f6:	d018      	beq.n	800782a <HAL_DMA_IRQHandler+0x2ee>
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	4a58      	ldr	r2, [pc, #352]	@ (8007960 <HAL_DMA_IRQHandler+0x424>)
 80077fe:	4293      	cmp	r3, r2
 8007800:	d013      	beq.n	800782a <HAL_DMA_IRQHandler+0x2ee>
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	4a57      	ldr	r2, [pc, #348]	@ (8007964 <HAL_DMA_IRQHandler+0x428>)
 8007808:	4293      	cmp	r3, r2
 800780a:	d00e      	beq.n	800782a <HAL_DMA_IRQHandler+0x2ee>
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	4a55      	ldr	r2, [pc, #340]	@ (8007968 <HAL_DMA_IRQHandler+0x42c>)
 8007812:	4293      	cmp	r3, r2
 8007814:	d009      	beq.n	800782a <HAL_DMA_IRQHandler+0x2ee>
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	4a54      	ldr	r2, [pc, #336]	@ (800796c <HAL_DMA_IRQHandler+0x430>)
 800781c:	4293      	cmp	r3, r2
 800781e:	d004      	beq.n	800782a <HAL_DMA_IRQHandler+0x2ee>
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	4a52      	ldr	r2, [pc, #328]	@ (8007970 <HAL_DMA_IRQHandler+0x434>)
 8007826:	4293      	cmp	r3, r2
 8007828:	d10a      	bne.n	8007840 <HAL_DMA_IRQHandler+0x304>
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	695b      	ldr	r3, [r3, #20]
 8007830:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007834:	2b00      	cmp	r3, #0
 8007836:	bf14      	ite	ne
 8007838:	2301      	movne	r3, #1
 800783a:	2300      	moveq	r3, #0
 800783c:	b2db      	uxtb	r3, r3
 800783e:	e003      	b.n	8007848 <HAL_DMA_IRQHandler+0x30c>
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	2300      	movs	r3, #0
 8007848:	2b00      	cmp	r3, #0
 800784a:	d00d      	beq.n	8007868 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007850:	f003 031f 	and.w	r3, r3, #31
 8007854:	2201      	movs	r2, #1
 8007856:	409a      	lsls	r2, r3
 8007858:	6a3b      	ldr	r3, [r7, #32]
 800785a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007860:	f043 0202 	orr.w	r2, r3, #2
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800786c:	f003 031f 	and.w	r3, r3, #31
 8007870:	2204      	movs	r2, #4
 8007872:	409a      	lsls	r2, r3
 8007874:	69bb      	ldr	r3, [r7, #24]
 8007876:	4013      	ands	r3, r2
 8007878:	2b00      	cmp	r3, #0
 800787a:	f000 808f 	beq.w	800799c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	4a2c      	ldr	r2, [pc, #176]	@ (8007934 <HAL_DMA_IRQHandler+0x3f8>)
 8007884:	4293      	cmp	r3, r2
 8007886:	d04a      	beq.n	800791e <HAL_DMA_IRQHandler+0x3e2>
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	4a2a      	ldr	r2, [pc, #168]	@ (8007938 <HAL_DMA_IRQHandler+0x3fc>)
 800788e:	4293      	cmp	r3, r2
 8007890:	d045      	beq.n	800791e <HAL_DMA_IRQHandler+0x3e2>
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	4a29      	ldr	r2, [pc, #164]	@ (800793c <HAL_DMA_IRQHandler+0x400>)
 8007898:	4293      	cmp	r3, r2
 800789a:	d040      	beq.n	800791e <HAL_DMA_IRQHandler+0x3e2>
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	4a27      	ldr	r2, [pc, #156]	@ (8007940 <HAL_DMA_IRQHandler+0x404>)
 80078a2:	4293      	cmp	r3, r2
 80078a4:	d03b      	beq.n	800791e <HAL_DMA_IRQHandler+0x3e2>
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	4a26      	ldr	r2, [pc, #152]	@ (8007944 <HAL_DMA_IRQHandler+0x408>)
 80078ac:	4293      	cmp	r3, r2
 80078ae:	d036      	beq.n	800791e <HAL_DMA_IRQHandler+0x3e2>
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	4a24      	ldr	r2, [pc, #144]	@ (8007948 <HAL_DMA_IRQHandler+0x40c>)
 80078b6:	4293      	cmp	r3, r2
 80078b8:	d031      	beq.n	800791e <HAL_DMA_IRQHandler+0x3e2>
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	4a23      	ldr	r2, [pc, #140]	@ (800794c <HAL_DMA_IRQHandler+0x410>)
 80078c0:	4293      	cmp	r3, r2
 80078c2:	d02c      	beq.n	800791e <HAL_DMA_IRQHandler+0x3e2>
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	4a21      	ldr	r2, [pc, #132]	@ (8007950 <HAL_DMA_IRQHandler+0x414>)
 80078ca:	4293      	cmp	r3, r2
 80078cc:	d027      	beq.n	800791e <HAL_DMA_IRQHandler+0x3e2>
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	4a20      	ldr	r2, [pc, #128]	@ (8007954 <HAL_DMA_IRQHandler+0x418>)
 80078d4:	4293      	cmp	r3, r2
 80078d6:	d022      	beq.n	800791e <HAL_DMA_IRQHandler+0x3e2>
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	4a1e      	ldr	r2, [pc, #120]	@ (8007958 <HAL_DMA_IRQHandler+0x41c>)
 80078de:	4293      	cmp	r3, r2
 80078e0:	d01d      	beq.n	800791e <HAL_DMA_IRQHandler+0x3e2>
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	4a1d      	ldr	r2, [pc, #116]	@ (800795c <HAL_DMA_IRQHandler+0x420>)
 80078e8:	4293      	cmp	r3, r2
 80078ea:	d018      	beq.n	800791e <HAL_DMA_IRQHandler+0x3e2>
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	4a1b      	ldr	r2, [pc, #108]	@ (8007960 <HAL_DMA_IRQHandler+0x424>)
 80078f2:	4293      	cmp	r3, r2
 80078f4:	d013      	beq.n	800791e <HAL_DMA_IRQHandler+0x3e2>
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	4a1a      	ldr	r2, [pc, #104]	@ (8007964 <HAL_DMA_IRQHandler+0x428>)
 80078fc:	4293      	cmp	r3, r2
 80078fe:	d00e      	beq.n	800791e <HAL_DMA_IRQHandler+0x3e2>
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	4a18      	ldr	r2, [pc, #96]	@ (8007968 <HAL_DMA_IRQHandler+0x42c>)
 8007906:	4293      	cmp	r3, r2
 8007908:	d009      	beq.n	800791e <HAL_DMA_IRQHandler+0x3e2>
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	4a17      	ldr	r2, [pc, #92]	@ (800796c <HAL_DMA_IRQHandler+0x430>)
 8007910:	4293      	cmp	r3, r2
 8007912:	d004      	beq.n	800791e <HAL_DMA_IRQHandler+0x3e2>
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	4a15      	ldr	r2, [pc, #84]	@ (8007970 <HAL_DMA_IRQHandler+0x434>)
 800791a:	4293      	cmp	r3, r2
 800791c:	d12a      	bne.n	8007974 <HAL_DMA_IRQHandler+0x438>
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	f003 0302 	and.w	r3, r3, #2
 8007928:	2b00      	cmp	r3, #0
 800792a:	bf14      	ite	ne
 800792c:	2301      	movne	r3, #1
 800792e:	2300      	moveq	r3, #0
 8007930:	b2db      	uxtb	r3, r3
 8007932:	e023      	b.n	800797c <HAL_DMA_IRQHandler+0x440>
 8007934:	40020010 	.word	0x40020010
 8007938:	40020028 	.word	0x40020028
 800793c:	40020040 	.word	0x40020040
 8007940:	40020058 	.word	0x40020058
 8007944:	40020070 	.word	0x40020070
 8007948:	40020088 	.word	0x40020088
 800794c:	400200a0 	.word	0x400200a0
 8007950:	400200b8 	.word	0x400200b8
 8007954:	40020410 	.word	0x40020410
 8007958:	40020428 	.word	0x40020428
 800795c:	40020440 	.word	0x40020440
 8007960:	40020458 	.word	0x40020458
 8007964:	40020470 	.word	0x40020470
 8007968:	40020488 	.word	0x40020488
 800796c:	400204a0 	.word	0x400204a0
 8007970:	400204b8 	.word	0x400204b8
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	2300      	movs	r3, #0
 800797c:	2b00      	cmp	r3, #0
 800797e:	d00d      	beq.n	800799c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007984:	f003 031f 	and.w	r3, r3, #31
 8007988:	2204      	movs	r2, #4
 800798a:	409a      	lsls	r2, r3
 800798c:	6a3b      	ldr	r3, [r7, #32]
 800798e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007994:	f043 0204 	orr.w	r2, r3, #4
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80079a0:	f003 031f 	and.w	r3, r3, #31
 80079a4:	2210      	movs	r2, #16
 80079a6:	409a      	lsls	r2, r3
 80079a8:	69bb      	ldr	r3, [r7, #24]
 80079aa:	4013      	ands	r3, r2
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	f000 80a6 	beq.w	8007afe <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	4a85      	ldr	r2, [pc, #532]	@ (8007bcc <HAL_DMA_IRQHandler+0x690>)
 80079b8:	4293      	cmp	r3, r2
 80079ba:	d04a      	beq.n	8007a52 <HAL_DMA_IRQHandler+0x516>
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	4a83      	ldr	r2, [pc, #524]	@ (8007bd0 <HAL_DMA_IRQHandler+0x694>)
 80079c2:	4293      	cmp	r3, r2
 80079c4:	d045      	beq.n	8007a52 <HAL_DMA_IRQHandler+0x516>
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	4a82      	ldr	r2, [pc, #520]	@ (8007bd4 <HAL_DMA_IRQHandler+0x698>)
 80079cc:	4293      	cmp	r3, r2
 80079ce:	d040      	beq.n	8007a52 <HAL_DMA_IRQHandler+0x516>
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	4a80      	ldr	r2, [pc, #512]	@ (8007bd8 <HAL_DMA_IRQHandler+0x69c>)
 80079d6:	4293      	cmp	r3, r2
 80079d8:	d03b      	beq.n	8007a52 <HAL_DMA_IRQHandler+0x516>
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	4a7f      	ldr	r2, [pc, #508]	@ (8007bdc <HAL_DMA_IRQHandler+0x6a0>)
 80079e0:	4293      	cmp	r3, r2
 80079e2:	d036      	beq.n	8007a52 <HAL_DMA_IRQHandler+0x516>
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	4a7d      	ldr	r2, [pc, #500]	@ (8007be0 <HAL_DMA_IRQHandler+0x6a4>)
 80079ea:	4293      	cmp	r3, r2
 80079ec:	d031      	beq.n	8007a52 <HAL_DMA_IRQHandler+0x516>
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	4a7c      	ldr	r2, [pc, #496]	@ (8007be4 <HAL_DMA_IRQHandler+0x6a8>)
 80079f4:	4293      	cmp	r3, r2
 80079f6:	d02c      	beq.n	8007a52 <HAL_DMA_IRQHandler+0x516>
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	4a7a      	ldr	r2, [pc, #488]	@ (8007be8 <HAL_DMA_IRQHandler+0x6ac>)
 80079fe:	4293      	cmp	r3, r2
 8007a00:	d027      	beq.n	8007a52 <HAL_DMA_IRQHandler+0x516>
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	4a79      	ldr	r2, [pc, #484]	@ (8007bec <HAL_DMA_IRQHandler+0x6b0>)
 8007a08:	4293      	cmp	r3, r2
 8007a0a:	d022      	beq.n	8007a52 <HAL_DMA_IRQHandler+0x516>
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	4a77      	ldr	r2, [pc, #476]	@ (8007bf0 <HAL_DMA_IRQHandler+0x6b4>)
 8007a12:	4293      	cmp	r3, r2
 8007a14:	d01d      	beq.n	8007a52 <HAL_DMA_IRQHandler+0x516>
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	4a76      	ldr	r2, [pc, #472]	@ (8007bf4 <HAL_DMA_IRQHandler+0x6b8>)
 8007a1c:	4293      	cmp	r3, r2
 8007a1e:	d018      	beq.n	8007a52 <HAL_DMA_IRQHandler+0x516>
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	4a74      	ldr	r2, [pc, #464]	@ (8007bf8 <HAL_DMA_IRQHandler+0x6bc>)
 8007a26:	4293      	cmp	r3, r2
 8007a28:	d013      	beq.n	8007a52 <HAL_DMA_IRQHandler+0x516>
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	4a73      	ldr	r2, [pc, #460]	@ (8007bfc <HAL_DMA_IRQHandler+0x6c0>)
 8007a30:	4293      	cmp	r3, r2
 8007a32:	d00e      	beq.n	8007a52 <HAL_DMA_IRQHandler+0x516>
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	4a71      	ldr	r2, [pc, #452]	@ (8007c00 <HAL_DMA_IRQHandler+0x6c4>)
 8007a3a:	4293      	cmp	r3, r2
 8007a3c:	d009      	beq.n	8007a52 <HAL_DMA_IRQHandler+0x516>
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	4a70      	ldr	r2, [pc, #448]	@ (8007c04 <HAL_DMA_IRQHandler+0x6c8>)
 8007a44:	4293      	cmp	r3, r2
 8007a46:	d004      	beq.n	8007a52 <HAL_DMA_IRQHandler+0x516>
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	4a6e      	ldr	r2, [pc, #440]	@ (8007c08 <HAL_DMA_IRQHandler+0x6cc>)
 8007a4e:	4293      	cmp	r3, r2
 8007a50:	d10a      	bne.n	8007a68 <HAL_DMA_IRQHandler+0x52c>
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	f003 0308 	and.w	r3, r3, #8
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	bf14      	ite	ne
 8007a60:	2301      	movne	r3, #1
 8007a62:	2300      	moveq	r3, #0
 8007a64:	b2db      	uxtb	r3, r3
 8007a66:	e009      	b.n	8007a7c <HAL_DMA_IRQHandler+0x540>
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	f003 0304 	and.w	r3, r3, #4
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	bf14      	ite	ne
 8007a76:	2301      	movne	r3, #1
 8007a78:	2300      	moveq	r3, #0
 8007a7a:	b2db      	uxtb	r3, r3
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d03e      	beq.n	8007afe <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007a84:	f003 031f 	and.w	r3, r3, #31
 8007a88:	2210      	movs	r2, #16
 8007a8a:	409a      	lsls	r2, r3
 8007a8c:	6a3b      	ldr	r3, [r7, #32]
 8007a8e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d018      	beq.n	8007ad0 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d108      	bne.n	8007abe <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d024      	beq.n	8007afe <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ab8:	6878      	ldr	r0, [r7, #4]
 8007aba:	4798      	blx	r3
 8007abc:	e01f      	b.n	8007afe <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d01b      	beq.n	8007afe <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007aca:	6878      	ldr	r0, [r7, #4]
 8007acc:	4798      	blx	r3
 8007ace:	e016      	b.n	8007afe <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d107      	bne.n	8007aee <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	681a      	ldr	r2, [r3, #0]
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	f022 0208 	bic.w	r2, r2, #8
 8007aec:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d003      	beq.n	8007afe <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007afa:	6878      	ldr	r0, [r7, #4]
 8007afc:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007b02:	f003 031f 	and.w	r3, r3, #31
 8007b06:	2220      	movs	r2, #32
 8007b08:	409a      	lsls	r2, r3
 8007b0a:	69bb      	ldr	r3, [r7, #24]
 8007b0c:	4013      	ands	r3, r2
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	f000 8110 	beq.w	8007d34 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	4a2c      	ldr	r2, [pc, #176]	@ (8007bcc <HAL_DMA_IRQHandler+0x690>)
 8007b1a:	4293      	cmp	r3, r2
 8007b1c:	d04a      	beq.n	8007bb4 <HAL_DMA_IRQHandler+0x678>
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	4a2b      	ldr	r2, [pc, #172]	@ (8007bd0 <HAL_DMA_IRQHandler+0x694>)
 8007b24:	4293      	cmp	r3, r2
 8007b26:	d045      	beq.n	8007bb4 <HAL_DMA_IRQHandler+0x678>
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	4a29      	ldr	r2, [pc, #164]	@ (8007bd4 <HAL_DMA_IRQHandler+0x698>)
 8007b2e:	4293      	cmp	r3, r2
 8007b30:	d040      	beq.n	8007bb4 <HAL_DMA_IRQHandler+0x678>
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	4a28      	ldr	r2, [pc, #160]	@ (8007bd8 <HAL_DMA_IRQHandler+0x69c>)
 8007b38:	4293      	cmp	r3, r2
 8007b3a:	d03b      	beq.n	8007bb4 <HAL_DMA_IRQHandler+0x678>
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	4a26      	ldr	r2, [pc, #152]	@ (8007bdc <HAL_DMA_IRQHandler+0x6a0>)
 8007b42:	4293      	cmp	r3, r2
 8007b44:	d036      	beq.n	8007bb4 <HAL_DMA_IRQHandler+0x678>
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	4a25      	ldr	r2, [pc, #148]	@ (8007be0 <HAL_DMA_IRQHandler+0x6a4>)
 8007b4c:	4293      	cmp	r3, r2
 8007b4e:	d031      	beq.n	8007bb4 <HAL_DMA_IRQHandler+0x678>
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	4a23      	ldr	r2, [pc, #140]	@ (8007be4 <HAL_DMA_IRQHandler+0x6a8>)
 8007b56:	4293      	cmp	r3, r2
 8007b58:	d02c      	beq.n	8007bb4 <HAL_DMA_IRQHandler+0x678>
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	4a22      	ldr	r2, [pc, #136]	@ (8007be8 <HAL_DMA_IRQHandler+0x6ac>)
 8007b60:	4293      	cmp	r3, r2
 8007b62:	d027      	beq.n	8007bb4 <HAL_DMA_IRQHandler+0x678>
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	4a20      	ldr	r2, [pc, #128]	@ (8007bec <HAL_DMA_IRQHandler+0x6b0>)
 8007b6a:	4293      	cmp	r3, r2
 8007b6c:	d022      	beq.n	8007bb4 <HAL_DMA_IRQHandler+0x678>
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	4a1f      	ldr	r2, [pc, #124]	@ (8007bf0 <HAL_DMA_IRQHandler+0x6b4>)
 8007b74:	4293      	cmp	r3, r2
 8007b76:	d01d      	beq.n	8007bb4 <HAL_DMA_IRQHandler+0x678>
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	4a1d      	ldr	r2, [pc, #116]	@ (8007bf4 <HAL_DMA_IRQHandler+0x6b8>)
 8007b7e:	4293      	cmp	r3, r2
 8007b80:	d018      	beq.n	8007bb4 <HAL_DMA_IRQHandler+0x678>
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	4a1c      	ldr	r2, [pc, #112]	@ (8007bf8 <HAL_DMA_IRQHandler+0x6bc>)
 8007b88:	4293      	cmp	r3, r2
 8007b8a:	d013      	beq.n	8007bb4 <HAL_DMA_IRQHandler+0x678>
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	4a1a      	ldr	r2, [pc, #104]	@ (8007bfc <HAL_DMA_IRQHandler+0x6c0>)
 8007b92:	4293      	cmp	r3, r2
 8007b94:	d00e      	beq.n	8007bb4 <HAL_DMA_IRQHandler+0x678>
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	4a19      	ldr	r2, [pc, #100]	@ (8007c00 <HAL_DMA_IRQHandler+0x6c4>)
 8007b9c:	4293      	cmp	r3, r2
 8007b9e:	d009      	beq.n	8007bb4 <HAL_DMA_IRQHandler+0x678>
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	4a17      	ldr	r2, [pc, #92]	@ (8007c04 <HAL_DMA_IRQHandler+0x6c8>)
 8007ba6:	4293      	cmp	r3, r2
 8007ba8:	d004      	beq.n	8007bb4 <HAL_DMA_IRQHandler+0x678>
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	4a16      	ldr	r2, [pc, #88]	@ (8007c08 <HAL_DMA_IRQHandler+0x6cc>)
 8007bb0:	4293      	cmp	r3, r2
 8007bb2:	d12b      	bne.n	8007c0c <HAL_DMA_IRQHandler+0x6d0>
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	f003 0310 	and.w	r3, r3, #16
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	bf14      	ite	ne
 8007bc2:	2301      	movne	r3, #1
 8007bc4:	2300      	moveq	r3, #0
 8007bc6:	b2db      	uxtb	r3, r3
 8007bc8:	e02a      	b.n	8007c20 <HAL_DMA_IRQHandler+0x6e4>
 8007bca:	bf00      	nop
 8007bcc:	40020010 	.word	0x40020010
 8007bd0:	40020028 	.word	0x40020028
 8007bd4:	40020040 	.word	0x40020040
 8007bd8:	40020058 	.word	0x40020058
 8007bdc:	40020070 	.word	0x40020070
 8007be0:	40020088 	.word	0x40020088
 8007be4:	400200a0 	.word	0x400200a0
 8007be8:	400200b8 	.word	0x400200b8
 8007bec:	40020410 	.word	0x40020410
 8007bf0:	40020428 	.word	0x40020428
 8007bf4:	40020440 	.word	0x40020440
 8007bf8:	40020458 	.word	0x40020458
 8007bfc:	40020470 	.word	0x40020470
 8007c00:	40020488 	.word	0x40020488
 8007c04:	400204a0 	.word	0x400204a0
 8007c08:	400204b8 	.word	0x400204b8
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	f003 0302 	and.w	r3, r3, #2
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	bf14      	ite	ne
 8007c1a:	2301      	movne	r3, #1
 8007c1c:	2300      	moveq	r3, #0
 8007c1e:	b2db      	uxtb	r3, r3
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	f000 8087 	beq.w	8007d34 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007c2a:	f003 031f 	and.w	r3, r3, #31
 8007c2e:	2220      	movs	r2, #32
 8007c30:	409a      	lsls	r2, r3
 8007c32:	6a3b      	ldr	r3, [r7, #32]
 8007c34:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007c3c:	b2db      	uxtb	r3, r3
 8007c3e:	2b04      	cmp	r3, #4
 8007c40:	d139      	bne.n	8007cb6 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	681a      	ldr	r2, [r3, #0]
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	f022 0216 	bic.w	r2, r2, #22
 8007c50:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	695a      	ldr	r2, [r3, #20]
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007c60:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d103      	bne.n	8007c72 <HAL_DMA_IRQHandler+0x736>
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d007      	beq.n	8007c82 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	681a      	ldr	r2, [r3, #0]
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	f022 0208 	bic.w	r2, r2, #8
 8007c80:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007c86:	f003 031f 	and.w	r3, r3, #31
 8007c8a:	223f      	movs	r2, #63	@ 0x3f
 8007c8c:	409a      	lsls	r2, r3
 8007c8e:	6a3b      	ldr	r3, [r7, #32]
 8007c90:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	2201      	movs	r2, #1
 8007c96:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	f000 834a 	beq.w	8008340 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007cb0:	6878      	ldr	r0, [r7, #4]
 8007cb2:	4798      	blx	r3
          }
          return;
 8007cb4:	e344      	b.n	8008340 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d018      	beq.n	8007cf6 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d108      	bne.n	8007ce4 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d02c      	beq.n	8007d34 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007cde:	6878      	ldr	r0, [r7, #4]
 8007ce0:	4798      	blx	r3
 8007ce2:	e027      	b.n	8007d34 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d023      	beq.n	8007d34 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007cf0:	6878      	ldr	r0, [r7, #4]
 8007cf2:	4798      	blx	r3
 8007cf4:	e01e      	b.n	8007d34 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d10f      	bne.n	8007d24 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	681a      	ldr	r2, [r3, #0]
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	f022 0210 	bic.w	r2, r2, #16
 8007d12:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	2201      	movs	r2, #1
 8007d18:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	2200      	movs	r2, #0
 8007d20:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d003      	beq.n	8007d34 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d30:	6878      	ldr	r0, [r7, #4]
 8007d32:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	f000 8306 	beq.w	800834a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d42:	f003 0301 	and.w	r3, r3, #1
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	f000 8088 	beq.w	8007e5c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2204      	movs	r2, #4
 8007d50:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	4a7a      	ldr	r2, [pc, #488]	@ (8007f44 <HAL_DMA_IRQHandler+0xa08>)
 8007d5a:	4293      	cmp	r3, r2
 8007d5c:	d04a      	beq.n	8007df4 <HAL_DMA_IRQHandler+0x8b8>
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	4a79      	ldr	r2, [pc, #484]	@ (8007f48 <HAL_DMA_IRQHandler+0xa0c>)
 8007d64:	4293      	cmp	r3, r2
 8007d66:	d045      	beq.n	8007df4 <HAL_DMA_IRQHandler+0x8b8>
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	4a77      	ldr	r2, [pc, #476]	@ (8007f4c <HAL_DMA_IRQHandler+0xa10>)
 8007d6e:	4293      	cmp	r3, r2
 8007d70:	d040      	beq.n	8007df4 <HAL_DMA_IRQHandler+0x8b8>
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	4a76      	ldr	r2, [pc, #472]	@ (8007f50 <HAL_DMA_IRQHandler+0xa14>)
 8007d78:	4293      	cmp	r3, r2
 8007d7a:	d03b      	beq.n	8007df4 <HAL_DMA_IRQHandler+0x8b8>
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	4a74      	ldr	r2, [pc, #464]	@ (8007f54 <HAL_DMA_IRQHandler+0xa18>)
 8007d82:	4293      	cmp	r3, r2
 8007d84:	d036      	beq.n	8007df4 <HAL_DMA_IRQHandler+0x8b8>
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	4a73      	ldr	r2, [pc, #460]	@ (8007f58 <HAL_DMA_IRQHandler+0xa1c>)
 8007d8c:	4293      	cmp	r3, r2
 8007d8e:	d031      	beq.n	8007df4 <HAL_DMA_IRQHandler+0x8b8>
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	4a71      	ldr	r2, [pc, #452]	@ (8007f5c <HAL_DMA_IRQHandler+0xa20>)
 8007d96:	4293      	cmp	r3, r2
 8007d98:	d02c      	beq.n	8007df4 <HAL_DMA_IRQHandler+0x8b8>
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	4a70      	ldr	r2, [pc, #448]	@ (8007f60 <HAL_DMA_IRQHandler+0xa24>)
 8007da0:	4293      	cmp	r3, r2
 8007da2:	d027      	beq.n	8007df4 <HAL_DMA_IRQHandler+0x8b8>
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	4a6e      	ldr	r2, [pc, #440]	@ (8007f64 <HAL_DMA_IRQHandler+0xa28>)
 8007daa:	4293      	cmp	r3, r2
 8007dac:	d022      	beq.n	8007df4 <HAL_DMA_IRQHandler+0x8b8>
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	4a6d      	ldr	r2, [pc, #436]	@ (8007f68 <HAL_DMA_IRQHandler+0xa2c>)
 8007db4:	4293      	cmp	r3, r2
 8007db6:	d01d      	beq.n	8007df4 <HAL_DMA_IRQHandler+0x8b8>
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	4a6b      	ldr	r2, [pc, #428]	@ (8007f6c <HAL_DMA_IRQHandler+0xa30>)
 8007dbe:	4293      	cmp	r3, r2
 8007dc0:	d018      	beq.n	8007df4 <HAL_DMA_IRQHandler+0x8b8>
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	4a6a      	ldr	r2, [pc, #424]	@ (8007f70 <HAL_DMA_IRQHandler+0xa34>)
 8007dc8:	4293      	cmp	r3, r2
 8007dca:	d013      	beq.n	8007df4 <HAL_DMA_IRQHandler+0x8b8>
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	4a68      	ldr	r2, [pc, #416]	@ (8007f74 <HAL_DMA_IRQHandler+0xa38>)
 8007dd2:	4293      	cmp	r3, r2
 8007dd4:	d00e      	beq.n	8007df4 <HAL_DMA_IRQHandler+0x8b8>
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	4a67      	ldr	r2, [pc, #412]	@ (8007f78 <HAL_DMA_IRQHandler+0xa3c>)
 8007ddc:	4293      	cmp	r3, r2
 8007dde:	d009      	beq.n	8007df4 <HAL_DMA_IRQHandler+0x8b8>
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	4a65      	ldr	r2, [pc, #404]	@ (8007f7c <HAL_DMA_IRQHandler+0xa40>)
 8007de6:	4293      	cmp	r3, r2
 8007de8:	d004      	beq.n	8007df4 <HAL_DMA_IRQHandler+0x8b8>
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	4a64      	ldr	r2, [pc, #400]	@ (8007f80 <HAL_DMA_IRQHandler+0xa44>)
 8007df0:	4293      	cmp	r3, r2
 8007df2:	d108      	bne.n	8007e06 <HAL_DMA_IRQHandler+0x8ca>
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	681a      	ldr	r2, [r3, #0]
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	f022 0201 	bic.w	r2, r2, #1
 8007e02:	601a      	str	r2, [r3, #0]
 8007e04:	e007      	b.n	8007e16 <HAL_DMA_IRQHandler+0x8da>
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	681a      	ldr	r2, [r3, #0]
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	f022 0201 	bic.w	r2, r2, #1
 8007e14:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	3301      	adds	r3, #1
 8007e1a:	60fb      	str	r3, [r7, #12]
 8007e1c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007e1e:	429a      	cmp	r2, r3
 8007e20:	d307      	bcc.n	8007e32 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	f003 0301 	and.w	r3, r3, #1
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d1f2      	bne.n	8007e16 <HAL_DMA_IRQHandler+0x8da>
 8007e30:	e000      	b.n	8007e34 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8007e32:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	f003 0301 	and.w	r3, r3, #1
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d004      	beq.n	8007e4c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	2203      	movs	r2, #3
 8007e46:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8007e4a:	e003      	b.n	8007e54 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2201      	movs	r2, #1
 8007e50:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	2200      	movs	r2, #0
 8007e58:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	f000 8272 	beq.w	800834a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007e6a:	6878      	ldr	r0, [r7, #4]
 8007e6c:	4798      	blx	r3
 8007e6e:	e26c      	b.n	800834a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	4a43      	ldr	r2, [pc, #268]	@ (8007f84 <HAL_DMA_IRQHandler+0xa48>)
 8007e76:	4293      	cmp	r3, r2
 8007e78:	d022      	beq.n	8007ec0 <HAL_DMA_IRQHandler+0x984>
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	4a42      	ldr	r2, [pc, #264]	@ (8007f88 <HAL_DMA_IRQHandler+0xa4c>)
 8007e80:	4293      	cmp	r3, r2
 8007e82:	d01d      	beq.n	8007ec0 <HAL_DMA_IRQHandler+0x984>
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	4a40      	ldr	r2, [pc, #256]	@ (8007f8c <HAL_DMA_IRQHandler+0xa50>)
 8007e8a:	4293      	cmp	r3, r2
 8007e8c:	d018      	beq.n	8007ec0 <HAL_DMA_IRQHandler+0x984>
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	4a3f      	ldr	r2, [pc, #252]	@ (8007f90 <HAL_DMA_IRQHandler+0xa54>)
 8007e94:	4293      	cmp	r3, r2
 8007e96:	d013      	beq.n	8007ec0 <HAL_DMA_IRQHandler+0x984>
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	4a3d      	ldr	r2, [pc, #244]	@ (8007f94 <HAL_DMA_IRQHandler+0xa58>)
 8007e9e:	4293      	cmp	r3, r2
 8007ea0:	d00e      	beq.n	8007ec0 <HAL_DMA_IRQHandler+0x984>
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	4a3c      	ldr	r2, [pc, #240]	@ (8007f98 <HAL_DMA_IRQHandler+0xa5c>)
 8007ea8:	4293      	cmp	r3, r2
 8007eaa:	d009      	beq.n	8007ec0 <HAL_DMA_IRQHandler+0x984>
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	4a3a      	ldr	r2, [pc, #232]	@ (8007f9c <HAL_DMA_IRQHandler+0xa60>)
 8007eb2:	4293      	cmp	r3, r2
 8007eb4:	d004      	beq.n	8007ec0 <HAL_DMA_IRQHandler+0x984>
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	4a39      	ldr	r2, [pc, #228]	@ (8007fa0 <HAL_DMA_IRQHandler+0xa64>)
 8007ebc:	4293      	cmp	r3, r2
 8007ebe:	d101      	bne.n	8007ec4 <HAL_DMA_IRQHandler+0x988>
 8007ec0:	2301      	movs	r3, #1
 8007ec2:	e000      	b.n	8007ec6 <HAL_DMA_IRQHandler+0x98a>
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	f000 823f 	beq.w	800834a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007ed8:	f003 031f 	and.w	r3, r3, #31
 8007edc:	2204      	movs	r2, #4
 8007ede:	409a      	lsls	r2, r3
 8007ee0:	697b      	ldr	r3, [r7, #20]
 8007ee2:	4013      	ands	r3, r2
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	f000 80cd 	beq.w	8008084 <HAL_DMA_IRQHandler+0xb48>
 8007eea:	693b      	ldr	r3, [r7, #16]
 8007eec:	f003 0304 	and.w	r3, r3, #4
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	f000 80c7 	beq.w	8008084 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007efa:	f003 031f 	and.w	r3, r3, #31
 8007efe:	2204      	movs	r2, #4
 8007f00:	409a      	lsls	r2, r3
 8007f02:	69fb      	ldr	r3, [r7, #28]
 8007f04:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007f06:	693b      	ldr	r3, [r7, #16]
 8007f08:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d049      	beq.n	8007fa4 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007f10:	693b      	ldr	r3, [r7, #16]
 8007f12:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d109      	bne.n	8007f2e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	f000 8210 	beq.w	8008344 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007f28:	6878      	ldr	r0, [r7, #4]
 8007f2a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007f2c:	e20a      	b.n	8008344 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	f000 8206 	beq.w	8008344 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f3c:	6878      	ldr	r0, [r7, #4]
 8007f3e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007f40:	e200      	b.n	8008344 <HAL_DMA_IRQHandler+0xe08>
 8007f42:	bf00      	nop
 8007f44:	40020010 	.word	0x40020010
 8007f48:	40020028 	.word	0x40020028
 8007f4c:	40020040 	.word	0x40020040
 8007f50:	40020058 	.word	0x40020058
 8007f54:	40020070 	.word	0x40020070
 8007f58:	40020088 	.word	0x40020088
 8007f5c:	400200a0 	.word	0x400200a0
 8007f60:	400200b8 	.word	0x400200b8
 8007f64:	40020410 	.word	0x40020410
 8007f68:	40020428 	.word	0x40020428
 8007f6c:	40020440 	.word	0x40020440
 8007f70:	40020458 	.word	0x40020458
 8007f74:	40020470 	.word	0x40020470
 8007f78:	40020488 	.word	0x40020488
 8007f7c:	400204a0 	.word	0x400204a0
 8007f80:	400204b8 	.word	0x400204b8
 8007f84:	58025408 	.word	0x58025408
 8007f88:	5802541c 	.word	0x5802541c
 8007f8c:	58025430 	.word	0x58025430
 8007f90:	58025444 	.word	0x58025444
 8007f94:	58025458 	.word	0x58025458
 8007f98:	5802546c 	.word	0x5802546c
 8007f9c:	58025480 	.word	0x58025480
 8007fa0:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007fa4:	693b      	ldr	r3, [r7, #16]
 8007fa6:	f003 0320 	and.w	r3, r3, #32
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d160      	bne.n	8008070 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	4a7f      	ldr	r2, [pc, #508]	@ (80081b0 <HAL_DMA_IRQHandler+0xc74>)
 8007fb4:	4293      	cmp	r3, r2
 8007fb6:	d04a      	beq.n	800804e <HAL_DMA_IRQHandler+0xb12>
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	4a7d      	ldr	r2, [pc, #500]	@ (80081b4 <HAL_DMA_IRQHandler+0xc78>)
 8007fbe:	4293      	cmp	r3, r2
 8007fc0:	d045      	beq.n	800804e <HAL_DMA_IRQHandler+0xb12>
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	4a7c      	ldr	r2, [pc, #496]	@ (80081b8 <HAL_DMA_IRQHandler+0xc7c>)
 8007fc8:	4293      	cmp	r3, r2
 8007fca:	d040      	beq.n	800804e <HAL_DMA_IRQHandler+0xb12>
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	4a7a      	ldr	r2, [pc, #488]	@ (80081bc <HAL_DMA_IRQHandler+0xc80>)
 8007fd2:	4293      	cmp	r3, r2
 8007fd4:	d03b      	beq.n	800804e <HAL_DMA_IRQHandler+0xb12>
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	4a79      	ldr	r2, [pc, #484]	@ (80081c0 <HAL_DMA_IRQHandler+0xc84>)
 8007fdc:	4293      	cmp	r3, r2
 8007fde:	d036      	beq.n	800804e <HAL_DMA_IRQHandler+0xb12>
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	4a77      	ldr	r2, [pc, #476]	@ (80081c4 <HAL_DMA_IRQHandler+0xc88>)
 8007fe6:	4293      	cmp	r3, r2
 8007fe8:	d031      	beq.n	800804e <HAL_DMA_IRQHandler+0xb12>
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	4a76      	ldr	r2, [pc, #472]	@ (80081c8 <HAL_DMA_IRQHandler+0xc8c>)
 8007ff0:	4293      	cmp	r3, r2
 8007ff2:	d02c      	beq.n	800804e <HAL_DMA_IRQHandler+0xb12>
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	4a74      	ldr	r2, [pc, #464]	@ (80081cc <HAL_DMA_IRQHandler+0xc90>)
 8007ffa:	4293      	cmp	r3, r2
 8007ffc:	d027      	beq.n	800804e <HAL_DMA_IRQHandler+0xb12>
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	4a73      	ldr	r2, [pc, #460]	@ (80081d0 <HAL_DMA_IRQHandler+0xc94>)
 8008004:	4293      	cmp	r3, r2
 8008006:	d022      	beq.n	800804e <HAL_DMA_IRQHandler+0xb12>
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	4a71      	ldr	r2, [pc, #452]	@ (80081d4 <HAL_DMA_IRQHandler+0xc98>)
 800800e:	4293      	cmp	r3, r2
 8008010:	d01d      	beq.n	800804e <HAL_DMA_IRQHandler+0xb12>
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	4a70      	ldr	r2, [pc, #448]	@ (80081d8 <HAL_DMA_IRQHandler+0xc9c>)
 8008018:	4293      	cmp	r3, r2
 800801a:	d018      	beq.n	800804e <HAL_DMA_IRQHandler+0xb12>
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	4a6e      	ldr	r2, [pc, #440]	@ (80081dc <HAL_DMA_IRQHandler+0xca0>)
 8008022:	4293      	cmp	r3, r2
 8008024:	d013      	beq.n	800804e <HAL_DMA_IRQHandler+0xb12>
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	4a6d      	ldr	r2, [pc, #436]	@ (80081e0 <HAL_DMA_IRQHandler+0xca4>)
 800802c:	4293      	cmp	r3, r2
 800802e:	d00e      	beq.n	800804e <HAL_DMA_IRQHandler+0xb12>
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	4a6b      	ldr	r2, [pc, #428]	@ (80081e4 <HAL_DMA_IRQHandler+0xca8>)
 8008036:	4293      	cmp	r3, r2
 8008038:	d009      	beq.n	800804e <HAL_DMA_IRQHandler+0xb12>
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	4a6a      	ldr	r2, [pc, #424]	@ (80081e8 <HAL_DMA_IRQHandler+0xcac>)
 8008040:	4293      	cmp	r3, r2
 8008042:	d004      	beq.n	800804e <HAL_DMA_IRQHandler+0xb12>
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	4a68      	ldr	r2, [pc, #416]	@ (80081ec <HAL_DMA_IRQHandler+0xcb0>)
 800804a:	4293      	cmp	r3, r2
 800804c:	d108      	bne.n	8008060 <HAL_DMA_IRQHandler+0xb24>
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	681a      	ldr	r2, [r3, #0]
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	f022 0208 	bic.w	r2, r2, #8
 800805c:	601a      	str	r2, [r3, #0]
 800805e:	e007      	b.n	8008070 <HAL_DMA_IRQHandler+0xb34>
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	681a      	ldr	r2, [r3, #0]
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	f022 0204 	bic.w	r2, r2, #4
 800806e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008074:	2b00      	cmp	r3, #0
 8008076:	f000 8165 	beq.w	8008344 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800807e:	6878      	ldr	r0, [r7, #4]
 8008080:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008082:	e15f      	b.n	8008344 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008088:	f003 031f 	and.w	r3, r3, #31
 800808c:	2202      	movs	r2, #2
 800808e:	409a      	lsls	r2, r3
 8008090:	697b      	ldr	r3, [r7, #20]
 8008092:	4013      	ands	r3, r2
 8008094:	2b00      	cmp	r3, #0
 8008096:	f000 80c5 	beq.w	8008224 <HAL_DMA_IRQHandler+0xce8>
 800809a:	693b      	ldr	r3, [r7, #16]
 800809c:	f003 0302 	and.w	r3, r3, #2
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	f000 80bf 	beq.w	8008224 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80080aa:	f003 031f 	and.w	r3, r3, #31
 80080ae:	2202      	movs	r2, #2
 80080b0:	409a      	lsls	r2, r3
 80080b2:	69fb      	ldr	r3, [r7, #28]
 80080b4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80080b6:	693b      	ldr	r3, [r7, #16]
 80080b8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d018      	beq.n	80080f2 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80080c0:	693b      	ldr	r3, [r7, #16]
 80080c2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d109      	bne.n	80080de <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	f000 813a 	beq.w	8008348 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80080d8:	6878      	ldr	r0, [r7, #4]
 80080da:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80080dc:	e134      	b.n	8008348 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	f000 8130 	beq.w	8008348 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80080ec:	6878      	ldr	r0, [r7, #4]
 80080ee:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80080f0:	e12a      	b.n	8008348 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80080f2:	693b      	ldr	r3, [r7, #16]
 80080f4:	f003 0320 	and.w	r3, r3, #32
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	f040 8089 	bne.w	8008210 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	4a2b      	ldr	r2, [pc, #172]	@ (80081b0 <HAL_DMA_IRQHandler+0xc74>)
 8008104:	4293      	cmp	r3, r2
 8008106:	d04a      	beq.n	800819e <HAL_DMA_IRQHandler+0xc62>
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	4a29      	ldr	r2, [pc, #164]	@ (80081b4 <HAL_DMA_IRQHandler+0xc78>)
 800810e:	4293      	cmp	r3, r2
 8008110:	d045      	beq.n	800819e <HAL_DMA_IRQHandler+0xc62>
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	4a28      	ldr	r2, [pc, #160]	@ (80081b8 <HAL_DMA_IRQHandler+0xc7c>)
 8008118:	4293      	cmp	r3, r2
 800811a:	d040      	beq.n	800819e <HAL_DMA_IRQHandler+0xc62>
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	4a26      	ldr	r2, [pc, #152]	@ (80081bc <HAL_DMA_IRQHandler+0xc80>)
 8008122:	4293      	cmp	r3, r2
 8008124:	d03b      	beq.n	800819e <HAL_DMA_IRQHandler+0xc62>
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	4a25      	ldr	r2, [pc, #148]	@ (80081c0 <HAL_DMA_IRQHandler+0xc84>)
 800812c:	4293      	cmp	r3, r2
 800812e:	d036      	beq.n	800819e <HAL_DMA_IRQHandler+0xc62>
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	4a23      	ldr	r2, [pc, #140]	@ (80081c4 <HAL_DMA_IRQHandler+0xc88>)
 8008136:	4293      	cmp	r3, r2
 8008138:	d031      	beq.n	800819e <HAL_DMA_IRQHandler+0xc62>
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	4a22      	ldr	r2, [pc, #136]	@ (80081c8 <HAL_DMA_IRQHandler+0xc8c>)
 8008140:	4293      	cmp	r3, r2
 8008142:	d02c      	beq.n	800819e <HAL_DMA_IRQHandler+0xc62>
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	4a20      	ldr	r2, [pc, #128]	@ (80081cc <HAL_DMA_IRQHandler+0xc90>)
 800814a:	4293      	cmp	r3, r2
 800814c:	d027      	beq.n	800819e <HAL_DMA_IRQHandler+0xc62>
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	4a1f      	ldr	r2, [pc, #124]	@ (80081d0 <HAL_DMA_IRQHandler+0xc94>)
 8008154:	4293      	cmp	r3, r2
 8008156:	d022      	beq.n	800819e <HAL_DMA_IRQHandler+0xc62>
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	4a1d      	ldr	r2, [pc, #116]	@ (80081d4 <HAL_DMA_IRQHandler+0xc98>)
 800815e:	4293      	cmp	r3, r2
 8008160:	d01d      	beq.n	800819e <HAL_DMA_IRQHandler+0xc62>
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	4a1c      	ldr	r2, [pc, #112]	@ (80081d8 <HAL_DMA_IRQHandler+0xc9c>)
 8008168:	4293      	cmp	r3, r2
 800816a:	d018      	beq.n	800819e <HAL_DMA_IRQHandler+0xc62>
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	4a1a      	ldr	r2, [pc, #104]	@ (80081dc <HAL_DMA_IRQHandler+0xca0>)
 8008172:	4293      	cmp	r3, r2
 8008174:	d013      	beq.n	800819e <HAL_DMA_IRQHandler+0xc62>
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	4a19      	ldr	r2, [pc, #100]	@ (80081e0 <HAL_DMA_IRQHandler+0xca4>)
 800817c:	4293      	cmp	r3, r2
 800817e:	d00e      	beq.n	800819e <HAL_DMA_IRQHandler+0xc62>
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	4a17      	ldr	r2, [pc, #92]	@ (80081e4 <HAL_DMA_IRQHandler+0xca8>)
 8008186:	4293      	cmp	r3, r2
 8008188:	d009      	beq.n	800819e <HAL_DMA_IRQHandler+0xc62>
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	4a16      	ldr	r2, [pc, #88]	@ (80081e8 <HAL_DMA_IRQHandler+0xcac>)
 8008190:	4293      	cmp	r3, r2
 8008192:	d004      	beq.n	800819e <HAL_DMA_IRQHandler+0xc62>
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	4a14      	ldr	r2, [pc, #80]	@ (80081ec <HAL_DMA_IRQHandler+0xcb0>)
 800819a:	4293      	cmp	r3, r2
 800819c:	d128      	bne.n	80081f0 <HAL_DMA_IRQHandler+0xcb4>
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	681a      	ldr	r2, [r3, #0]
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	f022 0214 	bic.w	r2, r2, #20
 80081ac:	601a      	str	r2, [r3, #0]
 80081ae:	e027      	b.n	8008200 <HAL_DMA_IRQHandler+0xcc4>
 80081b0:	40020010 	.word	0x40020010
 80081b4:	40020028 	.word	0x40020028
 80081b8:	40020040 	.word	0x40020040
 80081bc:	40020058 	.word	0x40020058
 80081c0:	40020070 	.word	0x40020070
 80081c4:	40020088 	.word	0x40020088
 80081c8:	400200a0 	.word	0x400200a0
 80081cc:	400200b8 	.word	0x400200b8
 80081d0:	40020410 	.word	0x40020410
 80081d4:	40020428 	.word	0x40020428
 80081d8:	40020440 	.word	0x40020440
 80081dc:	40020458 	.word	0x40020458
 80081e0:	40020470 	.word	0x40020470
 80081e4:	40020488 	.word	0x40020488
 80081e8:	400204a0 	.word	0x400204a0
 80081ec:	400204b8 	.word	0x400204b8
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	681a      	ldr	r2, [r3, #0]
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	f022 020a 	bic.w	r2, r2, #10
 80081fe:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	2201      	movs	r2, #1
 8008204:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	2200      	movs	r2, #0
 800820c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008214:	2b00      	cmp	r3, #0
 8008216:	f000 8097 	beq.w	8008348 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800821e:	6878      	ldr	r0, [r7, #4]
 8008220:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008222:	e091      	b.n	8008348 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008228:	f003 031f 	and.w	r3, r3, #31
 800822c:	2208      	movs	r2, #8
 800822e:	409a      	lsls	r2, r3
 8008230:	697b      	ldr	r3, [r7, #20]
 8008232:	4013      	ands	r3, r2
 8008234:	2b00      	cmp	r3, #0
 8008236:	f000 8088 	beq.w	800834a <HAL_DMA_IRQHandler+0xe0e>
 800823a:	693b      	ldr	r3, [r7, #16]
 800823c:	f003 0308 	and.w	r3, r3, #8
 8008240:	2b00      	cmp	r3, #0
 8008242:	f000 8082 	beq.w	800834a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	4a41      	ldr	r2, [pc, #260]	@ (8008350 <HAL_DMA_IRQHandler+0xe14>)
 800824c:	4293      	cmp	r3, r2
 800824e:	d04a      	beq.n	80082e6 <HAL_DMA_IRQHandler+0xdaa>
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	4a3f      	ldr	r2, [pc, #252]	@ (8008354 <HAL_DMA_IRQHandler+0xe18>)
 8008256:	4293      	cmp	r3, r2
 8008258:	d045      	beq.n	80082e6 <HAL_DMA_IRQHandler+0xdaa>
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	4a3e      	ldr	r2, [pc, #248]	@ (8008358 <HAL_DMA_IRQHandler+0xe1c>)
 8008260:	4293      	cmp	r3, r2
 8008262:	d040      	beq.n	80082e6 <HAL_DMA_IRQHandler+0xdaa>
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	4a3c      	ldr	r2, [pc, #240]	@ (800835c <HAL_DMA_IRQHandler+0xe20>)
 800826a:	4293      	cmp	r3, r2
 800826c:	d03b      	beq.n	80082e6 <HAL_DMA_IRQHandler+0xdaa>
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	4a3b      	ldr	r2, [pc, #236]	@ (8008360 <HAL_DMA_IRQHandler+0xe24>)
 8008274:	4293      	cmp	r3, r2
 8008276:	d036      	beq.n	80082e6 <HAL_DMA_IRQHandler+0xdaa>
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	4a39      	ldr	r2, [pc, #228]	@ (8008364 <HAL_DMA_IRQHandler+0xe28>)
 800827e:	4293      	cmp	r3, r2
 8008280:	d031      	beq.n	80082e6 <HAL_DMA_IRQHandler+0xdaa>
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	4a38      	ldr	r2, [pc, #224]	@ (8008368 <HAL_DMA_IRQHandler+0xe2c>)
 8008288:	4293      	cmp	r3, r2
 800828a:	d02c      	beq.n	80082e6 <HAL_DMA_IRQHandler+0xdaa>
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	4a36      	ldr	r2, [pc, #216]	@ (800836c <HAL_DMA_IRQHandler+0xe30>)
 8008292:	4293      	cmp	r3, r2
 8008294:	d027      	beq.n	80082e6 <HAL_DMA_IRQHandler+0xdaa>
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	4a35      	ldr	r2, [pc, #212]	@ (8008370 <HAL_DMA_IRQHandler+0xe34>)
 800829c:	4293      	cmp	r3, r2
 800829e:	d022      	beq.n	80082e6 <HAL_DMA_IRQHandler+0xdaa>
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	4a33      	ldr	r2, [pc, #204]	@ (8008374 <HAL_DMA_IRQHandler+0xe38>)
 80082a6:	4293      	cmp	r3, r2
 80082a8:	d01d      	beq.n	80082e6 <HAL_DMA_IRQHandler+0xdaa>
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	4a32      	ldr	r2, [pc, #200]	@ (8008378 <HAL_DMA_IRQHandler+0xe3c>)
 80082b0:	4293      	cmp	r3, r2
 80082b2:	d018      	beq.n	80082e6 <HAL_DMA_IRQHandler+0xdaa>
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	4a30      	ldr	r2, [pc, #192]	@ (800837c <HAL_DMA_IRQHandler+0xe40>)
 80082ba:	4293      	cmp	r3, r2
 80082bc:	d013      	beq.n	80082e6 <HAL_DMA_IRQHandler+0xdaa>
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	4a2f      	ldr	r2, [pc, #188]	@ (8008380 <HAL_DMA_IRQHandler+0xe44>)
 80082c4:	4293      	cmp	r3, r2
 80082c6:	d00e      	beq.n	80082e6 <HAL_DMA_IRQHandler+0xdaa>
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	4a2d      	ldr	r2, [pc, #180]	@ (8008384 <HAL_DMA_IRQHandler+0xe48>)
 80082ce:	4293      	cmp	r3, r2
 80082d0:	d009      	beq.n	80082e6 <HAL_DMA_IRQHandler+0xdaa>
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	4a2c      	ldr	r2, [pc, #176]	@ (8008388 <HAL_DMA_IRQHandler+0xe4c>)
 80082d8:	4293      	cmp	r3, r2
 80082da:	d004      	beq.n	80082e6 <HAL_DMA_IRQHandler+0xdaa>
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	4a2a      	ldr	r2, [pc, #168]	@ (800838c <HAL_DMA_IRQHandler+0xe50>)
 80082e2:	4293      	cmp	r3, r2
 80082e4:	d108      	bne.n	80082f8 <HAL_DMA_IRQHandler+0xdbc>
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	681a      	ldr	r2, [r3, #0]
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	f022 021c 	bic.w	r2, r2, #28
 80082f4:	601a      	str	r2, [r3, #0]
 80082f6:	e007      	b.n	8008308 <HAL_DMA_IRQHandler+0xdcc>
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	681a      	ldr	r2, [r3, #0]
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	f022 020e 	bic.w	r2, r2, #14
 8008306:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800830c:	f003 031f 	and.w	r3, r3, #31
 8008310:	2201      	movs	r2, #1
 8008312:	409a      	lsls	r2, r3
 8008314:	69fb      	ldr	r3, [r7, #28]
 8008316:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	2201      	movs	r2, #1
 800831c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	2201      	movs	r2, #1
 8008322:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	2200      	movs	r2, #0
 800832a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008332:	2b00      	cmp	r3, #0
 8008334:	d009      	beq.n	800834a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800833a:	6878      	ldr	r0, [r7, #4]
 800833c:	4798      	blx	r3
 800833e:	e004      	b.n	800834a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8008340:	bf00      	nop
 8008342:	e002      	b.n	800834a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008344:	bf00      	nop
 8008346:	e000      	b.n	800834a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008348:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800834a:	3728      	adds	r7, #40	@ 0x28
 800834c:	46bd      	mov	sp, r7
 800834e:	bd80      	pop	{r7, pc}
 8008350:	40020010 	.word	0x40020010
 8008354:	40020028 	.word	0x40020028
 8008358:	40020040 	.word	0x40020040
 800835c:	40020058 	.word	0x40020058
 8008360:	40020070 	.word	0x40020070
 8008364:	40020088 	.word	0x40020088
 8008368:	400200a0 	.word	0x400200a0
 800836c:	400200b8 	.word	0x400200b8
 8008370:	40020410 	.word	0x40020410
 8008374:	40020428 	.word	0x40020428
 8008378:	40020440 	.word	0x40020440
 800837c:	40020458 	.word	0x40020458
 8008380:	40020470 	.word	0x40020470
 8008384:	40020488 	.word	0x40020488
 8008388:	400204a0 	.word	0x400204a0
 800838c:	400204b8 	.word	0x400204b8

08008390 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008390:	b480      	push	{r7}
 8008392:	b087      	sub	sp, #28
 8008394:	af00      	add	r7, sp, #0
 8008396:	60f8      	str	r0, [r7, #12]
 8008398:	60b9      	str	r1, [r7, #8]
 800839a:	607a      	str	r2, [r7, #4]
 800839c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80083a2:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80083a8:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	4a7f      	ldr	r2, [pc, #508]	@ (80085ac <DMA_SetConfig+0x21c>)
 80083b0:	4293      	cmp	r3, r2
 80083b2:	d072      	beq.n	800849a <DMA_SetConfig+0x10a>
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	4a7d      	ldr	r2, [pc, #500]	@ (80085b0 <DMA_SetConfig+0x220>)
 80083ba:	4293      	cmp	r3, r2
 80083bc:	d06d      	beq.n	800849a <DMA_SetConfig+0x10a>
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	4a7c      	ldr	r2, [pc, #496]	@ (80085b4 <DMA_SetConfig+0x224>)
 80083c4:	4293      	cmp	r3, r2
 80083c6:	d068      	beq.n	800849a <DMA_SetConfig+0x10a>
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	4a7a      	ldr	r2, [pc, #488]	@ (80085b8 <DMA_SetConfig+0x228>)
 80083ce:	4293      	cmp	r3, r2
 80083d0:	d063      	beq.n	800849a <DMA_SetConfig+0x10a>
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	4a79      	ldr	r2, [pc, #484]	@ (80085bc <DMA_SetConfig+0x22c>)
 80083d8:	4293      	cmp	r3, r2
 80083da:	d05e      	beq.n	800849a <DMA_SetConfig+0x10a>
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	4a77      	ldr	r2, [pc, #476]	@ (80085c0 <DMA_SetConfig+0x230>)
 80083e2:	4293      	cmp	r3, r2
 80083e4:	d059      	beq.n	800849a <DMA_SetConfig+0x10a>
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	4a76      	ldr	r2, [pc, #472]	@ (80085c4 <DMA_SetConfig+0x234>)
 80083ec:	4293      	cmp	r3, r2
 80083ee:	d054      	beq.n	800849a <DMA_SetConfig+0x10a>
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	4a74      	ldr	r2, [pc, #464]	@ (80085c8 <DMA_SetConfig+0x238>)
 80083f6:	4293      	cmp	r3, r2
 80083f8:	d04f      	beq.n	800849a <DMA_SetConfig+0x10a>
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	4a73      	ldr	r2, [pc, #460]	@ (80085cc <DMA_SetConfig+0x23c>)
 8008400:	4293      	cmp	r3, r2
 8008402:	d04a      	beq.n	800849a <DMA_SetConfig+0x10a>
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	4a71      	ldr	r2, [pc, #452]	@ (80085d0 <DMA_SetConfig+0x240>)
 800840a:	4293      	cmp	r3, r2
 800840c:	d045      	beq.n	800849a <DMA_SetConfig+0x10a>
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	4a70      	ldr	r2, [pc, #448]	@ (80085d4 <DMA_SetConfig+0x244>)
 8008414:	4293      	cmp	r3, r2
 8008416:	d040      	beq.n	800849a <DMA_SetConfig+0x10a>
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	4a6e      	ldr	r2, [pc, #440]	@ (80085d8 <DMA_SetConfig+0x248>)
 800841e:	4293      	cmp	r3, r2
 8008420:	d03b      	beq.n	800849a <DMA_SetConfig+0x10a>
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	4a6d      	ldr	r2, [pc, #436]	@ (80085dc <DMA_SetConfig+0x24c>)
 8008428:	4293      	cmp	r3, r2
 800842a:	d036      	beq.n	800849a <DMA_SetConfig+0x10a>
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	4a6b      	ldr	r2, [pc, #428]	@ (80085e0 <DMA_SetConfig+0x250>)
 8008432:	4293      	cmp	r3, r2
 8008434:	d031      	beq.n	800849a <DMA_SetConfig+0x10a>
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	4a6a      	ldr	r2, [pc, #424]	@ (80085e4 <DMA_SetConfig+0x254>)
 800843c:	4293      	cmp	r3, r2
 800843e:	d02c      	beq.n	800849a <DMA_SetConfig+0x10a>
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	4a68      	ldr	r2, [pc, #416]	@ (80085e8 <DMA_SetConfig+0x258>)
 8008446:	4293      	cmp	r3, r2
 8008448:	d027      	beq.n	800849a <DMA_SetConfig+0x10a>
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	4a67      	ldr	r2, [pc, #412]	@ (80085ec <DMA_SetConfig+0x25c>)
 8008450:	4293      	cmp	r3, r2
 8008452:	d022      	beq.n	800849a <DMA_SetConfig+0x10a>
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	4a65      	ldr	r2, [pc, #404]	@ (80085f0 <DMA_SetConfig+0x260>)
 800845a:	4293      	cmp	r3, r2
 800845c:	d01d      	beq.n	800849a <DMA_SetConfig+0x10a>
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	4a64      	ldr	r2, [pc, #400]	@ (80085f4 <DMA_SetConfig+0x264>)
 8008464:	4293      	cmp	r3, r2
 8008466:	d018      	beq.n	800849a <DMA_SetConfig+0x10a>
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	4a62      	ldr	r2, [pc, #392]	@ (80085f8 <DMA_SetConfig+0x268>)
 800846e:	4293      	cmp	r3, r2
 8008470:	d013      	beq.n	800849a <DMA_SetConfig+0x10a>
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	4a61      	ldr	r2, [pc, #388]	@ (80085fc <DMA_SetConfig+0x26c>)
 8008478:	4293      	cmp	r3, r2
 800847a:	d00e      	beq.n	800849a <DMA_SetConfig+0x10a>
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	4a5f      	ldr	r2, [pc, #380]	@ (8008600 <DMA_SetConfig+0x270>)
 8008482:	4293      	cmp	r3, r2
 8008484:	d009      	beq.n	800849a <DMA_SetConfig+0x10a>
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	4a5e      	ldr	r2, [pc, #376]	@ (8008604 <DMA_SetConfig+0x274>)
 800848c:	4293      	cmp	r3, r2
 800848e:	d004      	beq.n	800849a <DMA_SetConfig+0x10a>
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	4a5c      	ldr	r2, [pc, #368]	@ (8008608 <DMA_SetConfig+0x278>)
 8008496:	4293      	cmp	r3, r2
 8008498:	d101      	bne.n	800849e <DMA_SetConfig+0x10e>
 800849a:	2301      	movs	r3, #1
 800849c:	e000      	b.n	80084a0 <DMA_SetConfig+0x110>
 800849e:	2300      	movs	r3, #0
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d00d      	beq.n	80084c0 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80084a8:	68fa      	ldr	r2, [r7, #12]
 80084aa:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80084ac:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d004      	beq.n	80084c0 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80084ba:	68fa      	ldr	r2, [r7, #12]
 80084bc:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80084be:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	4a39      	ldr	r2, [pc, #228]	@ (80085ac <DMA_SetConfig+0x21c>)
 80084c6:	4293      	cmp	r3, r2
 80084c8:	d04a      	beq.n	8008560 <DMA_SetConfig+0x1d0>
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	4a38      	ldr	r2, [pc, #224]	@ (80085b0 <DMA_SetConfig+0x220>)
 80084d0:	4293      	cmp	r3, r2
 80084d2:	d045      	beq.n	8008560 <DMA_SetConfig+0x1d0>
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	4a36      	ldr	r2, [pc, #216]	@ (80085b4 <DMA_SetConfig+0x224>)
 80084da:	4293      	cmp	r3, r2
 80084dc:	d040      	beq.n	8008560 <DMA_SetConfig+0x1d0>
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	4a35      	ldr	r2, [pc, #212]	@ (80085b8 <DMA_SetConfig+0x228>)
 80084e4:	4293      	cmp	r3, r2
 80084e6:	d03b      	beq.n	8008560 <DMA_SetConfig+0x1d0>
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	4a33      	ldr	r2, [pc, #204]	@ (80085bc <DMA_SetConfig+0x22c>)
 80084ee:	4293      	cmp	r3, r2
 80084f0:	d036      	beq.n	8008560 <DMA_SetConfig+0x1d0>
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	4a32      	ldr	r2, [pc, #200]	@ (80085c0 <DMA_SetConfig+0x230>)
 80084f8:	4293      	cmp	r3, r2
 80084fa:	d031      	beq.n	8008560 <DMA_SetConfig+0x1d0>
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	4a30      	ldr	r2, [pc, #192]	@ (80085c4 <DMA_SetConfig+0x234>)
 8008502:	4293      	cmp	r3, r2
 8008504:	d02c      	beq.n	8008560 <DMA_SetConfig+0x1d0>
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	4a2f      	ldr	r2, [pc, #188]	@ (80085c8 <DMA_SetConfig+0x238>)
 800850c:	4293      	cmp	r3, r2
 800850e:	d027      	beq.n	8008560 <DMA_SetConfig+0x1d0>
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	4a2d      	ldr	r2, [pc, #180]	@ (80085cc <DMA_SetConfig+0x23c>)
 8008516:	4293      	cmp	r3, r2
 8008518:	d022      	beq.n	8008560 <DMA_SetConfig+0x1d0>
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	4a2c      	ldr	r2, [pc, #176]	@ (80085d0 <DMA_SetConfig+0x240>)
 8008520:	4293      	cmp	r3, r2
 8008522:	d01d      	beq.n	8008560 <DMA_SetConfig+0x1d0>
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	4a2a      	ldr	r2, [pc, #168]	@ (80085d4 <DMA_SetConfig+0x244>)
 800852a:	4293      	cmp	r3, r2
 800852c:	d018      	beq.n	8008560 <DMA_SetConfig+0x1d0>
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	4a29      	ldr	r2, [pc, #164]	@ (80085d8 <DMA_SetConfig+0x248>)
 8008534:	4293      	cmp	r3, r2
 8008536:	d013      	beq.n	8008560 <DMA_SetConfig+0x1d0>
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	4a27      	ldr	r2, [pc, #156]	@ (80085dc <DMA_SetConfig+0x24c>)
 800853e:	4293      	cmp	r3, r2
 8008540:	d00e      	beq.n	8008560 <DMA_SetConfig+0x1d0>
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	4a26      	ldr	r2, [pc, #152]	@ (80085e0 <DMA_SetConfig+0x250>)
 8008548:	4293      	cmp	r3, r2
 800854a:	d009      	beq.n	8008560 <DMA_SetConfig+0x1d0>
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	4a24      	ldr	r2, [pc, #144]	@ (80085e4 <DMA_SetConfig+0x254>)
 8008552:	4293      	cmp	r3, r2
 8008554:	d004      	beq.n	8008560 <DMA_SetConfig+0x1d0>
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	4a23      	ldr	r2, [pc, #140]	@ (80085e8 <DMA_SetConfig+0x258>)
 800855c:	4293      	cmp	r3, r2
 800855e:	d101      	bne.n	8008564 <DMA_SetConfig+0x1d4>
 8008560:	2301      	movs	r3, #1
 8008562:	e000      	b.n	8008566 <DMA_SetConfig+0x1d6>
 8008564:	2300      	movs	r3, #0
 8008566:	2b00      	cmp	r3, #0
 8008568:	d059      	beq.n	800861e <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800856e:	f003 031f 	and.w	r3, r3, #31
 8008572:	223f      	movs	r2, #63	@ 0x3f
 8008574:	409a      	lsls	r2, r3
 8008576:	697b      	ldr	r3, [r7, #20]
 8008578:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	681a      	ldr	r2, [r3, #0]
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8008588:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	683a      	ldr	r2, [r7, #0]
 8008590:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	689b      	ldr	r3, [r3, #8]
 8008596:	2b40      	cmp	r3, #64	@ 0x40
 8008598:	d138      	bne.n	800860c <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	687a      	ldr	r2, [r7, #4]
 80085a0:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	68ba      	ldr	r2, [r7, #8]
 80085a8:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80085aa:	e086      	b.n	80086ba <DMA_SetConfig+0x32a>
 80085ac:	40020010 	.word	0x40020010
 80085b0:	40020028 	.word	0x40020028
 80085b4:	40020040 	.word	0x40020040
 80085b8:	40020058 	.word	0x40020058
 80085bc:	40020070 	.word	0x40020070
 80085c0:	40020088 	.word	0x40020088
 80085c4:	400200a0 	.word	0x400200a0
 80085c8:	400200b8 	.word	0x400200b8
 80085cc:	40020410 	.word	0x40020410
 80085d0:	40020428 	.word	0x40020428
 80085d4:	40020440 	.word	0x40020440
 80085d8:	40020458 	.word	0x40020458
 80085dc:	40020470 	.word	0x40020470
 80085e0:	40020488 	.word	0x40020488
 80085e4:	400204a0 	.word	0x400204a0
 80085e8:	400204b8 	.word	0x400204b8
 80085ec:	58025408 	.word	0x58025408
 80085f0:	5802541c 	.word	0x5802541c
 80085f4:	58025430 	.word	0x58025430
 80085f8:	58025444 	.word	0x58025444
 80085fc:	58025458 	.word	0x58025458
 8008600:	5802546c 	.word	0x5802546c
 8008604:	58025480 	.word	0x58025480
 8008608:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	68ba      	ldr	r2, [r7, #8]
 8008612:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	687a      	ldr	r2, [r7, #4]
 800861a:	60da      	str	r2, [r3, #12]
}
 800861c:	e04d      	b.n	80086ba <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	4a29      	ldr	r2, [pc, #164]	@ (80086c8 <DMA_SetConfig+0x338>)
 8008624:	4293      	cmp	r3, r2
 8008626:	d022      	beq.n	800866e <DMA_SetConfig+0x2de>
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	4a27      	ldr	r2, [pc, #156]	@ (80086cc <DMA_SetConfig+0x33c>)
 800862e:	4293      	cmp	r3, r2
 8008630:	d01d      	beq.n	800866e <DMA_SetConfig+0x2de>
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	4a26      	ldr	r2, [pc, #152]	@ (80086d0 <DMA_SetConfig+0x340>)
 8008638:	4293      	cmp	r3, r2
 800863a:	d018      	beq.n	800866e <DMA_SetConfig+0x2de>
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	4a24      	ldr	r2, [pc, #144]	@ (80086d4 <DMA_SetConfig+0x344>)
 8008642:	4293      	cmp	r3, r2
 8008644:	d013      	beq.n	800866e <DMA_SetConfig+0x2de>
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	4a23      	ldr	r2, [pc, #140]	@ (80086d8 <DMA_SetConfig+0x348>)
 800864c:	4293      	cmp	r3, r2
 800864e:	d00e      	beq.n	800866e <DMA_SetConfig+0x2de>
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	4a21      	ldr	r2, [pc, #132]	@ (80086dc <DMA_SetConfig+0x34c>)
 8008656:	4293      	cmp	r3, r2
 8008658:	d009      	beq.n	800866e <DMA_SetConfig+0x2de>
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	4a20      	ldr	r2, [pc, #128]	@ (80086e0 <DMA_SetConfig+0x350>)
 8008660:	4293      	cmp	r3, r2
 8008662:	d004      	beq.n	800866e <DMA_SetConfig+0x2de>
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	4a1e      	ldr	r2, [pc, #120]	@ (80086e4 <DMA_SetConfig+0x354>)
 800866a:	4293      	cmp	r3, r2
 800866c:	d101      	bne.n	8008672 <DMA_SetConfig+0x2e2>
 800866e:	2301      	movs	r3, #1
 8008670:	e000      	b.n	8008674 <DMA_SetConfig+0x2e4>
 8008672:	2300      	movs	r3, #0
 8008674:	2b00      	cmp	r3, #0
 8008676:	d020      	beq.n	80086ba <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800867c:	f003 031f 	and.w	r3, r3, #31
 8008680:	2201      	movs	r2, #1
 8008682:	409a      	lsls	r2, r3
 8008684:	693b      	ldr	r3, [r7, #16]
 8008686:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	683a      	ldr	r2, [r7, #0]
 800868e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	689b      	ldr	r3, [r3, #8]
 8008694:	2b40      	cmp	r3, #64	@ 0x40
 8008696:	d108      	bne.n	80086aa <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	687a      	ldr	r2, [r7, #4]
 800869e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	68ba      	ldr	r2, [r7, #8]
 80086a6:	60da      	str	r2, [r3, #12]
}
 80086a8:	e007      	b.n	80086ba <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	68ba      	ldr	r2, [r7, #8]
 80086b0:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	687a      	ldr	r2, [r7, #4]
 80086b8:	60da      	str	r2, [r3, #12]
}
 80086ba:	bf00      	nop
 80086bc:	371c      	adds	r7, #28
 80086be:	46bd      	mov	sp, r7
 80086c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c4:	4770      	bx	lr
 80086c6:	bf00      	nop
 80086c8:	58025408 	.word	0x58025408
 80086cc:	5802541c 	.word	0x5802541c
 80086d0:	58025430 	.word	0x58025430
 80086d4:	58025444 	.word	0x58025444
 80086d8:	58025458 	.word	0x58025458
 80086dc:	5802546c 	.word	0x5802546c
 80086e0:	58025480 	.word	0x58025480
 80086e4:	58025494 	.word	0x58025494

080086e8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80086e8:	b480      	push	{r7}
 80086ea:	b085      	sub	sp, #20
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	4a42      	ldr	r2, [pc, #264]	@ (8008800 <DMA_CalcBaseAndBitshift+0x118>)
 80086f6:	4293      	cmp	r3, r2
 80086f8:	d04a      	beq.n	8008790 <DMA_CalcBaseAndBitshift+0xa8>
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	4a41      	ldr	r2, [pc, #260]	@ (8008804 <DMA_CalcBaseAndBitshift+0x11c>)
 8008700:	4293      	cmp	r3, r2
 8008702:	d045      	beq.n	8008790 <DMA_CalcBaseAndBitshift+0xa8>
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	4a3f      	ldr	r2, [pc, #252]	@ (8008808 <DMA_CalcBaseAndBitshift+0x120>)
 800870a:	4293      	cmp	r3, r2
 800870c:	d040      	beq.n	8008790 <DMA_CalcBaseAndBitshift+0xa8>
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	4a3e      	ldr	r2, [pc, #248]	@ (800880c <DMA_CalcBaseAndBitshift+0x124>)
 8008714:	4293      	cmp	r3, r2
 8008716:	d03b      	beq.n	8008790 <DMA_CalcBaseAndBitshift+0xa8>
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	4a3c      	ldr	r2, [pc, #240]	@ (8008810 <DMA_CalcBaseAndBitshift+0x128>)
 800871e:	4293      	cmp	r3, r2
 8008720:	d036      	beq.n	8008790 <DMA_CalcBaseAndBitshift+0xa8>
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	4a3b      	ldr	r2, [pc, #236]	@ (8008814 <DMA_CalcBaseAndBitshift+0x12c>)
 8008728:	4293      	cmp	r3, r2
 800872a:	d031      	beq.n	8008790 <DMA_CalcBaseAndBitshift+0xa8>
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	4a39      	ldr	r2, [pc, #228]	@ (8008818 <DMA_CalcBaseAndBitshift+0x130>)
 8008732:	4293      	cmp	r3, r2
 8008734:	d02c      	beq.n	8008790 <DMA_CalcBaseAndBitshift+0xa8>
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	4a38      	ldr	r2, [pc, #224]	@ (800881c <DMA_CalcBaseAndBitshift+0x134>)
 800873c:	4293      	cmp	r3, r2
 800873e:	d027      	beq.n	8008790 <DMA_CalcBaseAndBitshift+0xa8>
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	4a36      	ldr	r2, [pc, #216]	@ (8008820 <DMA_CalcBaseAndBitshift+0x138>)
 8008746:	4293      	cmp	r3, r2
 8008748:	d022      	beq.n	8008790 <DMA_CalcBaseAndBitshift+0xa8>
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	4a35      	ldr	r2, [pc, #212]	@ (8008824 <DMA_CalcBaseAndBitshift+0x13c>)
 8008750:	4293      	cmp	r3, r2
 8008752:	d01d      	beq.n	8008790 <DMA_CalcBaseAndBitshift+0xa8>
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	4a33      	ldr	r2, [pc, #204]	@ (8008828 <DMA_CalcBaseAndBitshift+0x140>)
 800875a:	4293      	cmp	r3, r2
 800875c:	d018      	beq.n	8008790 <DMA_CalcBaseAndBitshift+0xa8>
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	4a32      	ldr	r2, [pc, #200]	@ (800882c <DMA_CalcBaseAndBitshift+0x144>)
 8008764:	4293      	cmp	r3, r2
 8008766:	d013      	beq.n	8008790 <DMA_CalcBaseAndBitshift+0xa8>
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	4a30      	ldr	r2, [pc, #192]	@ (8008830 <DMA_CalcBaseAndBitshift+0x148>)
 800876e:	4293      	cmp	r3, r2
 8008770:	d00e      	beq.n	8008790 <DMA_CalcBaseAndBitshift+0xa8>
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	4a2f      	ldr	r2, [pc, #188]	@ (8008834 <DMA_CalcBaseAndBitshift+0x14c>)
 8008778:	4293      	cmp	r3, r2
 800877a:	d009      	beq.n	8008790 <DMA_CalcBaseAndBitshift+0xa8>
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	4a2d      	ldr	r2, [pc, #180]	@ (8008838 <DMA_CalcBaseAndBitshift+0x150>)
 8008782:	4293      	cmp	r3, r2
 8008784:	d004      	beq.n	8008790 <DMA_CalcBaseAndBitshift+0xa8>
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	4a2c      	ldr	r2, [pc, #176]	@ (800883c <DMA_CalcBaseAndBitshift+0x154>)
 800878c:	4293      	cmp	r3, r2
 800878e:	d101      	bne.n	8008794 <DMA_CalcBaseAndBitshift+0xac>
 8008790:	2301      	movs	r3, #1
 8008792:	e000      	b.n	8008796 <DMA_CalcBaseAndBitshift+0xae>
 8008794:	2300      	movs	r3, #0
 8008796:	2b00      	cmp	r3, #0
 8008798:	d024      	beq.n	80087e4 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	b2db      	uxtb	r3, r3
 80087a0:	3b10      	subs	r3, #16
 80087a2:	4a27      	ldr	r2, [pc, #156]	@ (8008840 <DMA_CalcBaseAndBitshift+0x158>)
 80087a4:	fba2 2303 	umull	r2, r3, r2, r3
 80087a8:	091b      	lsrs	r3, r3, #4
 80087aa:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	f003 0307 	and.w	r3, r3, #7
 80087b2:	4a24      	ldr	r2, [pc, #144]	@ (8008844 <DMA_CalcBaseAndBitshift+0x15c>)
 80087b4:	5cd3      	ldrb	r3, [r2, r3]
 80087b6:	461a      	mov	r2, r3
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	2b03      	cmp	r3, #3
 80087c0:	d908      	bls.n	80087d4 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	461a      	mov	r2, r3
 80087c8:	4b1f      	ldr	r3, [pc, #124]	@ (8008848 <DMA_CalcBaseAndBitshift+0x160>)
 80087ca:	4013      	ands	r3, r2
 80087cc:	1d1a      	adds	r2, r3, #4
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	659a      	str	r2, [r3, #88]	@ 0x58
 80087d2:	e00d      	b.n	80087f0 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	461a      	mov	r2, r3
 80087da:	4b1b      	ldr	r3, [pc, #108]	@ (8008848 <DMA_CalcBaseAndBitshift+0x160>)
 80087dc:	4013      	ands	r3, r2
 80087de:	687a      	ldr	r2, [r7, #4]
 80087e0:	6593      	str	r3, [r2, #88]	@ 0x58
 80087e2:	e005      	b.n	80087f0 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80087f4:	4618      	mov	r0, r3
 80087f6:	3714      	adds	r7, #20
 80087f8:	46bd      	mov	sp, r7
 80087fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fe:	4770      	bx	lr
 8008800:	40020010 	.word	0x40020010
 8008804:	40020028 	.word	0x40020028
 8008808:	40020040 	.word	0x40020040
 800880c:	40020058 	.word	0x40020058
 8008810:	40020070 	.word	0x40020070
 8008814:	40020088 	.word	0x40020088
 8008818:	400200a0 	.word	0x400200a0
 800881c:	400200b8 	.word	0x400200b8
 8008820:	40020410 	.word	0x40020410
 8008824:	40020428 	.word	0x40020428
 8008828:	40020440 	.word	0x40020440
 800882c:	40020458 	.word	0x40020458
 8008830:	40020470 	.word	0x40020470
 8008834:	40020488 	.word	0x40020488
 8008838:	400204a0 	.word	0x400204a0
 800883c:	400204b8 	.word	0x400204b8
 8008840:	aaaaaaab 	.word	0xaaaaaaab
 8008844:	08019d8c 	.word	0x08019d8c
 8008848:	fffffc00 	.word	0xfffffc00

0800884c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800884c:	b480      	push	{r7}
 800884e:	b085      	sub	sp, #20
 8008850:	af00      	add	r7, sp, #0
 8008852:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008854:	2300      	movs	r3, #0
 8008856:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	699b      	ldr	r3, [r3, #24]
 800885c:	2b00      	cmp	r3, #0
 800885e:	d120      	bne.n	80088a2 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008864:	2b03      	cmp	r3, #3
 8008866:	d858      	bhi.n	800891a <DMA_CheckFifoParam+0xce>
 8008868:	a201      	add	r2, pc, #4	@ (adr r2, 8008870 <DMA_CheckFifoParam+0x24>)
 800886a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800886e:	bf00      	nop
 8008870:	08008881 	.word	0x08008881
 8008874:	08008893 	.word	0x08008893
 8008878:	08008881 	.word	0x08008881
 800887c:	0800891b 	.word	0x0800891b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008884:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008888:	2b00      	cmp	r3, #0
 800888a:	d048      	beq.n	800891e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800888c:	2301      	movs	r3, #1
 800888e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008890:	e045      	b.n	800891e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008896:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800889a:	d142      	bne.n	8008922 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800889c:	2301      	movs	r3, #1
 800889e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80088a0:	e03f      	b.n	8008922 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	699b      	ldr	r3, [r3, #24]
 80088a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80088aa:	d123      	bne.n	80088f4 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088b0:	2b03      	cmp	r3, #3
 80088b2:	d838      	bhi.n	8008926 <DMA_CheckFifoParam+0xda>
 80088b4:	a201      	add	r2, pc, #4	@ (adr r2, 80088bc <DMA_CheckFifoParam+0x70>)
 80088b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088ba:	bf00      	nop
 80088bc:	080088cd 	.word	0x080088cd
 80088c0:	080088d3 	.word	0x080088d3
 80088c4:	080088cd 	.word	0x080088cd
 80088c8:	080088e5 	.word	0x080088e5
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80088cc:	2301      	movs	r3, #1
 80088ce:	73fb      	strb	r3, [r7, #15]
        break;
 80088d0:	e030      	b.n	8008934 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088d6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d025      	beq.n	800892a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80088de:	2301      	movs	r3, #1
 80088e0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80088e2:	e022      	b.n	800892a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088e8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80088ec:	d11f      	bne.n	800892e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80088ee:	2301      	movs	r3, #1
 80088f0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80088f2:	e01c      	b.n	800892e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088f8:	2b02      	cmp	r3, #2
 80088fa:	d902      	bls.n	8008902 <DMA_CheckFifoParam+0xb6>
 80088fc:	2b03      	cmp	r3, #3
 80088fe:	d003      	beq.n	8008908 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8008900:	e018      	b.n	8008934 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8008902:	2301      	movs	r3, #1
 8008904:	73fb      	strb	r3, [r7, #15]
        break;
 8008906:	e015      	b.n	8008934 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800890c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008910:	2b00      	cmp	r3, #0
 8008912:	d00e      	beq.n	8008932 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8008914:	2301      	movs	r3, #1
 8008916:	73fb      	strb	r3, [r7, #15]
    break;
 8008918:	e00b      	b.n	8008932 <DMA_CheckFifoParam+0xe6>
        break;
 800891a:	bf00      	nop
 800891c:	e00a      	b.n	8008934 <DMA_CheckFifoParam+0xe8>
        break;
 800891e:	bf00      	nop
 8008920:	e008      	b.n	8008934 <DMA_CheckFifoParam+0xe8>
        break;
 8008922:	bf00      	nop
 8008924:	e006      	b.n	8008934 <DMA_CheckFifoParam+0xe8>
        break;
 8008926:	bf00      	nop
 8008928:	e004      	b.n	8008934 <DMA_CheckFifoParam+0xe8>
        break;
 800892a:	bf00      	nop
 800892c:	e002      	b.n	8008934 <DMA_CheckFifoParam+0xe8>
        break;
 800892e:	bf00      	nop
 8008930:	e000      	b.n	8008934 <DMA_CheckFifoParam+0xe8>
    break;
 8008932:	bf00      	nop
    }
  }

  return status;
 8008934:	7bfb      	ldrb	r3, [r7, #15]
}
 8008936:	4618      	mov	r0, r3
 8008938:	3714      	adds	r7, #20
 800893a:	46bd      	mov	sp, r7
 800893c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008940:	4770      	bx	lr
 8008942:	bf00      	nop

08008944 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008944:	b480      	push	{r7}
 8008946:	b085      	sub	sp, #20
 8008948:	af00      	add	r7, sp, #0
 800894a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	4a38      	ldr	r2, [pc, #224]	@ (8008a38 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8008958:	4293      	cmp	r3, r2
 800895a:	d022      	beq.n	80089a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	4a36      	ldr	r2, [pc, #216]	@ (8008a3c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8008962:	4293      	cmp	r3, r2
 8008964:	d01d      	beq.n	80089a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	4a35      	ldr	r2, [pc, #212]	@ (8008a40 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800896c:	4293      	cmp	r3, r2
 800896e:	d018      	beq.n	80089a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	4a33      	ldr	r2, [pc, #204]	@ (8008a44 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8008976:	4293      	cmp	r3, r2
 8008978:	d013      	beq.n	80089a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	4a32      	ldr	r2, [pc, #200]	@ (8008a48 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8008980:	4293      	cmp	r3, r2
 8008982:	d00e      	beq.n	80089a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	4a30      	ldr	r2, [pc, #192]	@ (8008a4c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800898a:	4293      	cmp	r3, r2
 800898c:	d009      	beq.n	80089a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	4a2f      	ldr	r2, [pc, #188]	@ (8008a50 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8008994:	4293      	cmp	r3, r2
 8008996:	d004      	beq.n	80089a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	4a2d      	ldr	r2, [pc, #180]	@ (8008a54 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800899e:	4293      	cmp	r3, r2
 80089a0:	d101      	bne.n	80089a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80089a2:	2301      	movs	r3, #1
 80089a4:	e000      	b.n	80089a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80089a6:	2300      	movs	r3, #0
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d01a      	beq.n	80089e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	b2db      	uxtb	r3, r3
 80089b2:	3b08      	subs	r3, #8
 80089b4:	4a28      	ldr	r2, [pc, #160]	@ (8008a58 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80089b6:	fba2 2303 	umull	r2, r3, r2, r3
 80089ba:	091b      	lsrs	r3, r3, #4
 80089bc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80089be:	68fa      	ldr	r2, [r7, #12]
 80089c0:	4b26      	ldr	r3, [pc, #152]	@ (8008a5c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80089c2:	4413      	add	r3, r2
 80089c4:	009b      	lsls	r3, r3, #2
 80089c6:	461a      	mov	r2, r3
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	4a24      	ldr	r2, [pc, #144]	@ (8008a60 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80089d0:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	f003 031f 	and.w	r3, r3, #31
 80089d8:	2201      	movs	r2, #1
 80089da:	409a      	lsls	r2, r3
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80089e0:	e024      	b.n	8008a2c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	b2db      	uxtb	r3, r3
 80089e8:	3b10      	subs	r3, #16
 80089ea:	4a1e      	ldr	r2, [pc, #120]	@ (8008a64 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80089ec:	fba2 2303 	umull	r2, r3, r2, r3
 80089f0:	091b      	lsrs	r3, r3, #4
 80089f2:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80089f4:	68bb      	ldr	r3, [r7, #8]
 80089f6:	4a1c      	ldr	r2, [pc, #112]	@ (8008a68 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80089f8:	4293      	cmp	r3, r2
 80089fa:	d806      	bhi.n	8008a0a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80089fc:	68bb      	ldr	r3, [r7, #8]
 80089fe:	4a1b      	ldr	r2, [pc, #108]	@ (8008a6c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8008a00:	4293      	cmp	r3, r2
 8008a02:	d902      	bls.n	8008a0a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	3308      	adds	r3, #8
 8008a08:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8008a0a:	68fa      	ldr	r2, [r7, #12]
 8008a0c:	4b18      	ldr	r3, [pc, #96]	@ (8008a70 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8008a0e:	4413      	add	r3, r2
 8008a10:	009b      	lsls	r3, r3, #2
 8008a12:	461a      	mov	r2, r3
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	4a16      	ldr	r2, [pc, #88]	@ (8008a74 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8008a1c:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	f003 031f 	and.w	r3, r3, #31
 8008a24:	2201      	movs	r2, #1
 8008a26:	409a      	lsls	r2, r3
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8008a2c:	bf00      	nop
 8008a2e:	3714      	adds	r7, #20
 8008a30:	46bd      	mov	sp, r7
 8008a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a36:	4770      	bx	lr
 8008a38:	58025408 	.word	0x58025408
 8008a3c:	5802541c 	.word	0x5802541c
 8008a40:	58025430 	.word	0x58025430
 8008a44:	58025444 	.word	0x58025444
 8008a48:	58025458 	.word	0x58025458
 8008a4c:	5802546c 	.word	0x5802546c
 8008a50:	58025480 	.word	0x58025480
 8008a54:	58025494 	.word	0x58025494
 8008a58:	cccccccd 	.word	0xcccccccd
 8008a5c:	16009600 	.word	0x16009600
 8008a60:	58025880 	.word	0x58025880
 8008a64:	aaaaaaab 	.word	0xaaaaaaab
 8008a68:	400204b8 	.word	0x400204b8
 8008a6c:	4002040f 	.word	0x4002040f
 8008a70:	10008200 	.word	0x10008200
 8008a74:	40020880 	.word	0x40020880

08008a78 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008a78:	b480      	push	{r7}
 8008a7a:	b085      	sub	sp, #20
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	685b      	ldr	r3, [r3, #4]
 8008a84:	b2db      	uxtb	r3, r3
 8008a86:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d04a      	beq.n	8008b24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	2b08      	cmp	r3, #8
 8008a92:	d847      	bhi.n	8008b24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	4a25      	ldr	r2, [pc, #148]	@ (8008b30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8008a9a:	4293      	cmp	r3, r2
 8008a9c:	d022      	beq.n	8008ae4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	4a24      	ldr	r2, [pc, #144]	@ (8008b34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8008aa4:	4293      	cmp	r3, r2
 8008aa6:	d01d      	beq.n	8008ae4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	4a22      	ldr	r2, [pc, #136]	@ (8008b38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8008aae:	4293      	cmp	r3, r2
 8008ab0:	d018      	beq.n	8008ae4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	4a21      	ldr	r2, [pc, #132]	@ (8008b3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8008ab8:	4293      	cmp	r3, r2
 8008aba:	d013      	beq.n	8008ae4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	4a1f      	ldr	r2, [pc, #124]	@ (8008b40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8008ac2:	4293      	cmp	r3, r2
 8008ac4:	d00e      	beq.n	8008ae4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	4a1e      	ldr	r2, [pc, #120]	@ (8008b44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8008acc:	4293      	cmp	r3, r2
 8008ace:	d009      	beq.n	8008ae4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	4a1c      	ldr	r2, [pc, #112]	@ (8008b48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8008ad6:	4293      	cmp	r3, r2
 8008ad8:	d004      	beq.n	8008ae4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	4a1b      	ldr	r2, [pc, #108]	@ (8008b4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8008ae0:	4293      	cmp	r3, r2
 8008ae2:	d101      	bne.n	8008ae8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8008ae4:	2301      	movs	r3, #1
 8008ae6:	e000      	b.n	8008aea <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8008ae8:	2300      	movs	r3, #0
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d00a      	beq.n	8008b04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8008aee:	68fa      	ldr	r2, [r7, #12]
 8008af0:	4b17      	ldr	r3, [pc, #92]	@ (8008b50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8008af2:	4413      	add	r3, r2
 8008af4:	009b      	lsls	r3, r3, #2
 8008af6:	461a      	mov	r2, r3
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	4a15      	ldr	r2, [pc, #84]	@ (8008b54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8008b00:	671a      	str	r2, [r3, #112]	@ 0x70
 8008b02:	e009      	b.n	8008b18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8008b04:	68fa      	ldr	r2, [r7, #12]
 8008b06:	4b14      	ldr	r3, [pc, #80]	@ (8008b58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8008b08:	4413      	add	r3, r2
 8008b0a:	009b      	lsls	r3, r3, #2
 8008b0c:	461a      	mov	r2, r3
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	4a11      	ldr	r2, [pc, #68]	@ (8008b5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8008b16:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	3b01      	subs	r3, #1
 8008b1c:	2201      	movs	r2, #1
 8008b1e:	409a      	lsls	r2, r3
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8008b24:	bf00      	nop
 8008b26:	3714      	adds	r7, #20
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b2e:	4770      	bx	lr
 8008b30:	58025408 	.word	0x58025408
 8008b34:	5802541c 	.word	0x5802541c
 8008b38:	58025430 	.word	0x58025430
 8008b3c:	58025444 	.word	0x58025444
 8008b40:	58025458 	.word	0x58025458
 8008b44:	5802546c 	.word	0x5802546c
 8008b48:	58025480 	.word	0x58025480
 8008b4c:	58025494 	.word	0x58025494
 8008b50:	1600963f 	.word	0x1600963f
 8008b54:	58025940 	.word	0x58025940
 8008b58:	1000823f 	.word	0x1000823f
 8008b5c:	40020940 	.word	0x40020940

08008b60 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008b60:	b480      	push	{r7}
 8008b62:	b089      	sub	sp, #36	@ 0x24
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	6078      	str	r0, [r7, #4]
 8008b68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8008b6a:	2300      	movs	r3, #0
 8008b6c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8008b6e:	4b86      	ldr	r3, [pc, #536]	@ (8008d88 <HAL_GPIO_Init+0x228>)
 8008b70:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008b72:	e18c      	b.n	8008e8e <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8008b74:	683b      	ldr	r3, [r7, #0]
 8008b76:	681a      	ldr	r2, [r3, #0]
 8008b78:	2101      	movs	r1, #1
 8008b7a:	69fb      	ldr	r3, [r7, #28]
 8008b7c:	fa01 f303 	lsl.w	r3, r1, r3
 8008b80:	4013      	ands	r3, r2
 8008b82:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8008b84:	693b      	ldr	r3, [r7, #16]
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	f000 817e 	beq.w	8008e88 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008b8c:	683b      	ldr	r3, [r7, #0]
 8008b8e:	685b      	ldr	r3, [r3, #4]
 8008b90:	f003 0303 	and.w	r3, r3, #3
 8008b94:	2b01      	cmp	r3, #1
 8008b96:	d005      	beq.n	8008ba4 <HAL_GPIO_Init+0x44>
 8008b98:	683b      	ldr	r3, [r7, #0]
 8008b9a:	685b      	ldr	r3, [r3, #4]
 8008b9c:	f003 0303 	and.w	r3, r3, #3
 8008ba0:	2b02      	cmp	r3, #2
 8008ba2:	d130      	bne.n	8008c06 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	689b      	ldr	r3, [r3, #8]
 8008ba8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008baa:	69fb      	ldr	r3, [r7, #28]
 8008bac:	005b      	lsls	r3, r3, #1
 8008bae:	2203      	movs	r2, #3
 8008bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8008bb4:	43db      	mvns	r3, r3
 8008bb6:	69ba      	ldr	r2, [r7, #24]
 8008bb8:	4013      	ands	r3, r2
 8008bba:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008bbc:	683b      	ldr	r3, [r7, #0]
 8008bbe:	68da      	ldr	r2, [r3, #12]
 8008bc0:	69fb      	ldr	r3, [r7, #28]
 8008bc2:	005b      	lsls	r3, r3, #1
 8008bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8008bc8:	69ba      	ldr	r2, [r7, #24]
 8008bca:	4313      	orrs	r3, r2
 8008bcc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	69ba      	ldr	r2, [r7, #24]
 8008bd2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	685b      	ldr	r3, [r3, #4]
 8008bd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008bda:	2201      	movs	r2, #1
 8008bdc:	69fb      	ldr	r3, [r7, #28]
 8008bde:	fa02 f303 	lsl.w	r3, r2, r3
 8008be2:	43db      	mvns	r3, r3
 8008be4:	69ba      	ldr	r2, [r7, #24]
 8008be6:	4013      	ands	r3, r2
 8008be8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008bea:	683b      	ldr	r3, [r7, #0]
 8008bec:	685b      	ldr	r3, [r3, #4]
 8008bee:	091b      	lsrs	r3, r3, #4
 8008bf0:	f003 0201 	and.w	r2, r3, #1
 8008bf4:	69fb      	ldr	r3, [r7, #28]
 8008bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8008bfa:	69ba      	ldr	r2, [r7, #24]
 8008bfc:	4313      	orrs	r3, r2
 8008bfe:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	69ba      	ldr	r2, [r7, #24]
 8008c04:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008c06:	683b      	ldr	r3, [r7, #0]
 8008c08:	685b      	ldr	r3, [r3, #4]
 8008c0a:	f003 0303 	and.w	r3, r3, #3
 8008c0e:	2b03      	cmp	r3, #3
 8008c10:	d017      	beq.n	8008c42 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	68db      	ldr	r3, [r3, #12]
 8008c16:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008c18:	69fb      	ldr	r3, [r7, #28]
 8008c1a:	005b      	lsls	r3, r3, #1
 8008c1c:	2203      	movs	r2, #3
 8008c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8008c22:	43db      	mvns	r3, r3
 8008c24:	69ba      	ldr	r2, [r7, #24]
 8008c26:	4013      	ands	r3, r2
 8008c28:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008c2a:	683b      	ldr	r3, [r7, #0]
 8008c2c:	689a      	ldr	r2, [r3, #8]
 8008c2e:	69fb      	ldr	r3, [r7, #28]
 8008c30:	005b      	lsls	r3, r3, #1
 8008c32:	fa02 f303 	lsl.w	r3, r2, r3
 8008c36:	69ba      	ldr	r2, [r7, #24]
 8008c38:	4313      	orrs	r3, r2
 8008c3a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	69ba      	ldr	r2, [r7, #24]
 8008c40:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008c42:	683b      	ldr	r3, [r7, #0]
 8008c44:	685b      	ldr	r3, [r3, #4]
 8008c46:	f003 0303 	and.w	r3, r3, #3
 8008c4a:	2b02      	cmp	r3, #2
 8008c4c:	d123      	bne.n	8008c96 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008c4e:	69fb      	ldr	r3, [r7, #28]
 8008c50:	08da      	lsrs	r2, r3, #3
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	3208      	adds	r2, #8
 8008c56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008c5c:	69fb      	ldr	r3, [r7, #28]
 8008c5e:	f003 0307 	and.w	r3, r3, #7
 8008c62:	009b      	lsls	r3, r3, #2
 8008c64:	220f      	movs	r2, #15
 8008c66:	fa02 f303 	lsl.w	r3, r2, r3
 8008c6a:	43db      	mvns	r3, r3
 8008c6c:	69ba      	ldr	r2, [r7, #24]
 8008c6e:	4013      	ands	r3, r2
 8008c70:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8008c72:	683b      	ldr	r3, [r7, #0]
 8008c74:	691a      	ldr	r2, [r3, #16]
 8008c76:	69fb      	ldr	r3, [r7, #28]
 8008c78:	f003 0307 	and.w	r3, r3, #7
 8008c7c:	009b      	lsls	r3, r3, #2
 8008c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8008c82:	69ba      	ldr	r2, [r7, #24]
 8008c84:	4313      	orrs	r3, r2
 8008c86:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008c88:	69fb      	ldr	r3, [r7, #28]
 8008c8a:	08da      	lsrs	r2, r3, #3
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	3208      	adds	r2, #8
 8008c90:	69b9      	ldr	r1, [r7, #24]
 8008c92:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8008c9c:	69fb      	ldr	r3, [r7, #28]
 8008c9e:	005b      	lsls	r3, r3, #1
 8008ca0:	2203      	movs	r2, #3
 8008ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8008ca6:	43db      	mvns	r3, r3
 8008ca8:	69ba      	ldr	r2, [r7, #24]
 8008caa:	4013      	ands	r3, r2
 8008cac:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008cae:	683b      	ldr	r3, [r7, #0]
 8008cb0:	685b      	ldr	r3, [r3, #4]
 8008cb2:	f003 0203 	and.w	r2, r3, #3
 8008cb6:	69fb      	ldr	r3, [r7, #28]
 8008cb8:	005b      	lsls	r3, r3, #1
 8008cba:	fa02 f303 	lsl.w	r3, r2, r3
 8008cbe:	69ba      	ldr	r2, [r7, #24]
 8008cc0:	4313      	orrs	r3, r2
 8008cc2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	69ba      	ldr	r2, [r7, #24]
 8008cc8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008cca:	683b      	ldr	r3, [r7, #0]
 8008ccc:	685b      	ldr	r3, [r3, #4]
 8008cce:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	f000 80d8 	beq.w	8008e88 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008cd8:	4b2c      	ldr	r3, [pc, #176]	@ (8008d8c <HAL_GPIO_Init+0x22c>)
 8008cda:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008cde:	4a2b      	ldr	r2, [pc, #172]	@ (8008d8c <HAL_GPIO_Init+0x22c>)
 8008ce0:	f043 0302 	orr.w	r3, r3, #2
 8008ce4:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8008ce8:	4b28      	ldr	r3, [pc, #160]	@ (8008d8c <HAL_GPIO_Init+0x22c>)
 8008cea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008cee:	f003 0302 	and.w	r3, r3, #2
 8008cf2:	60fb      	str	r3, [r7, #12]
 8008cf4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008cf6:	4a26      	ldr	r2, [pc, #152]	@ (8008d90 <HAL_GPIO_Init+0x230>)
 8008cf8:	69fb      	ldr	r3, [r7, #28]
 8008cfa:	089b      	lsrs	r3, r3, #2
 8008cfc:	3302      	adds	r3, #2
 8008cfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008d02:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008d04:	69fb      	ldr	r3, [r7, #28]
 8008d06:	f003 0303 	and.w	r3, r3, #3
 8008d0a:	009b      	lsls	r3, r3, #2
 8008d0c:	220f      	movs	r2, #15
 8008d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8008d12:	43db      	mvns	r3, r3
 8008d14:	69ba      	ldr	r2, [r7, #24]
 8008d16:	4013      	ands	r3, r2
 8008d18:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	4a1d      	ldr	r2, [pc, #116]	@ (8008d94 <HAL_GPIO_Init+0x234>)
 8008d1e:	4293      	cmp	r3, r2
 8008d20:	d04a      	beq.n	8008db8 <HAL_GPIO_Init+0x258>
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	4a1c      	ldr	r2, [pc, #112]	@ (8008d98 <HAL_GPIO_Init+0x238>)
 8008d26:	4293      	cmp	r3, r2
 8008d28:	d02b      	beq.n	8008d82 <HAL_GPIO_Init+0x222>
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	4a1b      	ldr	r2, [pc, #108]	@ (8008d9c <HAL_GPIO_Init+0x23c>)
 8008d2e:	4293      	cmp	r3, r2
 8008d30:	d025      	beq.n	8008d7e <HAL_GPIO_Init+0x21e>
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	4a1a      	ldr	r2, [pc, #104]	@ (8008da0 <HAL_GPIO_Init+0x240>)
 8008d36:	4293      	cmp	r3, r2
 8008d38:	d01f      	beq.n	8008d7a <HAL_GPIO_Init+0x21a>
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	4a19      	ldr	r2, [pc, #100]	@ (8008da4 <HAL_GPIO_Init+0x244>)
 8008d3e:	4293      	cmp	r3, r2
 8008d40:	d019      	beq.n	8008d76 <HAL_GPIO_Init+0x216>
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	4a18      	ldr	r2, [pc, #96]	@ (8008da8 <HAL_GPIO_Init+0x248>)
 8008d46:	4293      	cmp	r3, r2
 8008d48:	d013      	beq.n	8008d72 <HAL_GPIO_Init+0x212>
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	4a17      	ldr	r2, [pc, #92]	@ (8008dac <HAL_GPIO_Init+0x24c>)
 8008d4e:	4293      	cmp	r3, r2
 8008d50:	d00d      	beq.n	8008d6e <HAL_GPIO_Init+0x20e>
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	4a16      	ldr	r2, [pc, #88]	@ (8008db0 <HAL_GPIO_Init+0x250>)
 8008d56:	4293      	cmp	r3, r2
 8008d58:	d007      	beq.n	8008d6a <HAL_GPIO_Init+0x20a>
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	4a15      	ldr	r2, [pc, #84]	@ (8008db4 <HAL_GPIO_Init+0x254>)
 8008d5e:	4293      	cmp	r3, r2
 8008d60:	d101      	bne.n	8008d66 <HAL_GPIO_Init+0x206>
 8008d62:	2309      	movs	r3, #9
 8008d64:	e029      	b.n	8008dba <HAL_GPIO_Init+0x25a>
 8008d66:	230a      	movs	r3, #10
 8008d68:	e027      	b.n	8008dba <HAL_GPIO_Init+0x25a>
 8008d6a:	2307      	movs	r3, #7
 8008d6c:	e025      	b.n	8008dba <HAL_GPIO_Init+0x25a>
 8008d6e:	2306      	movs	r3, #6
 8008d70:	e023      	b.n	8008dba <HAL_GPIO_Init+0x25a>
 8008d72:	2305      	movs	r3, #5
 8008d74:	e021      	b.n	8008dba <HAL_GPIO_Init+0x25a>
 8008d76:	2304      	movs	r3, #4
 8008d78:	e01f      	b.n	8008dba <HAL_GPIO_Init+0x25a>
 8008d7a:	2303      	movs	r3, #3
 8008d7c:	e01d      	b.n	8008dba <HAL_GPIO_Init+0x25a>
 8008d7e:	2302      	movs	r3, #2
 8008d80:	e01b      	b.n	8008dba <HAL_GPIO_Init+0x25a>
 8008d82:	2301      	movs	r3, #1
 8008d84:	e019      	b.n	8008dba <HAL_GPIO_Init+0x25a>
 8008d86:	bf00      	nop
 8008d88:	58000080 	.word	0x58000080
 8008d8c:	58024400 	.word	0x58024400
 8008d90:	58000400 	.word	0x58000400
 8008d94:	58020000 	.word	0x58020000
 8008d98:	58020400 	.word	0x58020400
 8008d9c:	58020800 	.word	0x58020800
 8008da0:	58020c00 	.word	0x58020c00
 8008da4:	58021000 	.word	0x58021000
 8008da8:	58021400 	.word	0x58021400
 8008dac:	58021800 	.word	0x58021800
 8008db0:	58021c00 	.word	0x58021c00
 8008db4:	58022400 	.word	0x58022400
 8008db8:	2300      	movs	r3, #0
 8008dba:	69fa      	ldr	r2, [r7, #28]
 8008dbc:	f002 0203 	and.w	r2, r2, #3
 8008dc0:	0092      	lsls	r2, r2, #2
 8008dc2:	4093      	lsls	r3, r2
 8008dc4:	69ba      	ldr	r2, [r7, #24]
 8008dc6:	4313      	orrs	r3, r2
 8008dc8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008dca:	4938      	ldr	r1, [pc, #224]	@ (8008eac <HAL_GPIO_Init+0x34c>)
 8008dcc:	69fb      	ldr	r3, [r7, #28]
 8008dce:	089b      	lsrs	r3, r3, #2
 8008dd0:	3302      	adds	r3, #2
 8008dd2:	69ba      	ldr	r2, [r7, #24]
 8008dd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008dd8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008de0:	693b      	ldr	r3, [r7, #16]
 8008de2:	43db      	mvns	r3, r3
 8008de4:	69ba      	ldr	r2, [r7, #24]
 8008de6:	4013      	ands	r3, r2
 8008de8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008dea:	683b      	ldr	r3, [r7, #0]
 8008dec:	685b      	ldr	r3, [r3, #4]
 8008dee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d003      	beq.n	8008dfe <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8008df6:	69ba      	ldr	r2, [r7, #24]
 8008df8:	693b      	ldr	r3, [r7, #16]
 8008dfa:	4313      	orrs	r3, r2
 8008dfc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8008dfe:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008e02:	69bb      	ldr	r3, [r7, #24]
 8008e04:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8008e06:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008e0a:	685b      	ldr	r3, [r3, #4]
 8008e0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008e0e:	693b      	ldr	r3, [r7, #16]
 8008e10:	43db      	mvns	r3, r3
 8008e12:	69ba      	ldr	r2, [r7, #24]
 8008e14:	4013      	ands	r3, r2
 8008e16:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008e18:	683b      	ldr	r3, [r7, #0]
 8008e1a:	685b      	ldr	r3, [r3, #4]
 8008e1c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d003      	beq.n	8008e2c <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8008e24:	69ba      	ldr	r2, [r7, #24]
 8008e26:	693b      	ldr	r3, [r7, #16]
 8008e28:	4313      	orrs	r3, r2
 8008e2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8008e2c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008e30:	69bb      	ldr	r3, [r7, #24]
 8008e32:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8008e34:	697b      	ldr	r3, [r7, #20]
 8008e36:	685b      	ldr	r3, [r3, #4]
 8008e38:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008e3a:	693b      	ldr	r3, [r7, #16]
 8008e3c:	43db      	mvns	r3, r3
 8008e3e:	69ba      	ldr	r2, [r7, #24]
 8008e40:	4013      	ands	r3, r2
 8008e42:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008e44:	683b      	ldr	r3, [r7, #0]
 8008e46:	685b      	ldr	r3, [r3, #4]
 8008e48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d003      	beq.n	8008e58 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8008e50:	69ba      	ldr	r2, [r7, #24]
 8008e52:	693b      	ldr	r3, [r7, #16]
 8008e54:	4313      	orrs	r3, r2
 8008e56:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8008e58:	697b      	ldr	r3, [r7, #20]
 8008e5a:	69ba      	ldr	r2, [r7, #24]
 8008e5c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8008e5e:	697b      	ldr	r3, [r7, #20]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008e64:	693b      	ldr	r3, [r7, #16]
 8008e66:	43db      	mvns	r3, r3
 8008e68:	69ba      	ldr	r2, [r7, #24]
 8008e6a:	4013      	ands	r3, r2
 8008e6c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008e6e:	683b      	ldr	r3, [r7, #0]
 8008e70:	685b      	ldr	r3, [r3, #4]
 8008e72:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d003      	beq.n	8008e82 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8008e7a:	69ba      	ldr	r2, [r7, #24]
 8008e7c:	693b      	ldr	r3, [r7, #16]
 8008e7e:	4313      	orrs	r3, r2
 8008e80:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8008e82:	697b      	ldr	r3, [r7, #20]
 8008e84:	69ba      	ldr	r2, [r7, #24]
 8008e86:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8008e88:	69fb      	ldr	r3, [r7, #28]
 8008e8a:	3301      	adds	r3, #1
 8008e8c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008e8e:	683b      	ldr	r3, [r7, #0]
 8008e90:	681a      	ldr	r2, [r3, #0]
 8008e92:	69fb      	ldr	r3, [r7, #28]
 8008e94:	fa22 f303 	lsr.w	r3, r2, r3
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	f47f ae6b 	bne.w	8008b74 <HAL_GPIO_Init+0x14>
  }
}
 8008e9e:	bf00      	nop
 8008ea0:	bf00      	nop
 8008ea2:	3724      	adds	r7, #36	@ 0x24
 8008ea4:	46bd      	mov	sp, r7
 8008ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eaa:	4770      	bx	lr
 8008eac:	58000400 	.word	0x58000400

08008eb0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008eb0:	b480      	push	{r7}
 8008eb2:	b085      	sub	sp, #20
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	6078      	str	r0, [r7, #4]
 8008eb8:	460b      	mov	r3, r1
 8008eba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	691a      	ldr	r2, [r3, #16]
 8008ec0:	887b      	ldrh	r3, [r7, #2]
 8008ec2:	4013      	ands	r3, r2
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d002      	beq.n	8008ece <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008ec8:	2301      	movs	r3, #1
 8008eca:	73fb      	strb	r3, [r7, #15]
 8008ecc:	e001      	b.n	8008ed2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008ece:	2300      	movs	r3, #0
 8008ed0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008ed2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ed4:	4618      	mov	r0, r3
 8008ed6:	3714      	adds	r7, #20
 8008ed8:	46bd      	mov	sp, r7
 8008eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ede:	4770      	bx	lr

08008ee0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008ee0:	b480      	push	{r7}
 8008ee2:	b083      	sub	sp, #12
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	6078      	str	r0, [r7, #4]
 8008ee8:	460b      	mov	r3, r1
 8008eea:	807b      	strh	r3, [r7, #2]
 8008eec:	4613      	mov	r3, r2
 8008eee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008ef0:	787b      	ldrb	r3, [r7, #1]
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d003      	beq.n	8008efe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008ef6:	887a      	ldrh	r2, [r7, #2]
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8008efc:	e003      	b.n	8008f06 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8008efe:	887b      	ldrh	r3, [r7, #2]
 8008f00:	041a      	lsls	r2, r3, #16
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	619a      	str	r2, [r3, #24]
}
 8008f06:	bf00      	nop
 8008f08:	370c      	adds	r7, #12
 8008f0a:	46bd      	mov	sp, r7
 8008f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f10:	4770      	bx	lr
	...

08008f14 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008f14:	b580      	push	{r7, lr}
 8008f16:	b082      	sub	sp, #8
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d101      	bne.n	8008f26 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008f22:	2301      	movs	r3, #1
 8008f24:	e08b      	b.n	800903e <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008f2c:	b2db      	uxtb	r3, r3
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d106      	bne.n	8008f40 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	2200      	movs	r2, #0
 8008f36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8008f3a:	6878      	ldr	r0, [r7, #4]
 8008f3c:	f7f8 febc 	bl	8001cb8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	2224      	movs	r2, #36	@ 0x24
 8008f44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	681a      	ldr	r2, [r3, #0]
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	f022 0201 	bic.w	r2, r2, #1
 8008f56:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	685a      	ldr	r2, [r3, #4]
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8008f64:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	689a      	ldr	r2, [r3, #8]
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008f74:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	68db      	ldr	r3, [r3, #12]
 8008f7a:	2b01      	cmp	r3, #1
 8008f7c:	d107      	bne.n	8008f8e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	689a      	ldr	r2, [r3, #8]
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008f8a:	609a      	str	r2, [r3, #8]
 8008f8c:	e006      	b.n	8008f9c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	689a      	ldr	r2, [r3, #8]
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8008f9a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	68db      	ldr	r3, [r3, #12]
 8008fa0:	2b02      	cmp	r3, #2
 8008fa2:	d108      	bne.n	8008fb6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	685a      	ldr	r2, [r3, #4]
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008fb2:	605a      	str	r2, [r3, #4]
 8008fb4:	e007      	b.n	8008fc6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	685a      	ldr	r2, [r3, #4]
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008fc4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	6859      	ldr	r1, [r3, #4]
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681a      	ldr	r2, [r3, #0]
 8008fd0:	4b1d      	ldr	r3, [pc, #116]	@ (8009048 <HAL_I2C_Init+0x134>)
 8008fd2:	430b      	orrs	r3, r1
 8008fd4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	68da      	ldr	r2, [r3, #12]
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008fe4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	691a      	ldr	r2, [r3, #16]
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	695b      	ldr	r3, [r3, #20]
 8008fee:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	699b      	ldr	r3, [r3, #24]
 8008ff6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	430a      	orrs	r2, r1
 8008ffe:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	69d9      	ldr	r1, [r3, #28]
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	6a1a      	ldr	r2, [r3, #32]
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	430a      	orrs	r2, r1
 800900e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	681a      	ldr	r2, [r3, #0]
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	f042 0201 	orr.w	r2, r2, #1
 800901e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	2200      	movs	r2, #0
 8009024:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	2220      	movs	r2, #32
 800902a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	2200      	movs	r2, #0
 8009032:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	2200      	movs	r2, #0
 8009038:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800903c:	2300      	movs	r3, #0
}
 800903e:	4618      	mov	r0, r3
 8009040:	3708      	adds	r7, #8
 8009042:	46bd      	mov	sp, r7
 8009044:	bd80      	pop	{r7, pc}
 8009046:	bf00      	nop
 8009048:	02008000 	.word	0x02008000

0800904c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800904c:	b480      	push	{r7}
 800904e:	b083      	sub	sp, #12
 8009050:	af00      	add	r7, sp, #0
 8009052:	6078      	str	r0, [r7, #4]
 8009054:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800905c:	b2db      	uxtb	r3, r3
 800905e:	2b20      	cmp	r3, #32
 8009060:	d138      	bne.n	80090d4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009068:	2b01      	cmp	r3, #1
 800906a:	d101      	bne.n	8009070 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800906c:	2302      	movs	r3, #2
 800906e:	e032      	b.n	80090d6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	2201      	movs	r2, #1
 8009074:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	2224      	movs	r2, #36	@ 0x24
 800907c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	681a      	ldr	r2, [r3, #0]
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	f022 0201 	bic.w	r2, r2, #1
 800908e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	681a      	ldr	r2, [r3, #0]
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800909e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	6819      	ldr	r1, [r3, #0]
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	683a      	ldr	r2, [r7, #0]
 80090ac:	430a      	orrs	r2, r1
 80090ae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	681a      	ldr	r2, [r3, #0]
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	f042 0201 	orr.w	r2, r2, #1
 80090be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	2220      	movs	r2, #32
 80090c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	2200      	movs	r2, #0
 80090cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80090d0:	2300      	movs	r3, #0
 80090d2:	e000      	b.n	80090d6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80090d4:	2302      	movs	r3, #2
  }
}
 80090d6:	4618      	mov	r0, r3
 80090d8:	370c      	adds	r7, #12
 80090da:	46bd      	mov	sp, r7
 80090dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e0:	4770      	bx	lr

080090e2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80090e2:	b480      	push	{r7}
 80090e4:	b085      	sub	sp, #20
 80090e6:	af00      	add	r7, sp, #0
 80090e8:	6078      	str	r0, [r7, #4]
 80090ea:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80090f2:	b2db      	uxtb	r3, r3
 80090f4:	2b20      	cmp	r3, #32
 80090f6:	d139      	bne.n	800916c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80090fe:	2b01      	cmp	r3, #1
 8009100:	d101      	bne.n	8009106 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8009102:	2302      	movs	r3, #2
 8009104:	e033      	b.n	800916e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	2201      	movs	r2, #1
 800910a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	2224      	movs	r2, #36	@ 0x24
 8009112:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	681a      	ldr	r2, [r3, #0]
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	f022 0201 	bic.w	r2, r2, #1
 8009124:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8009134:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8009136:	683b      	ldr	r3, [r7, #0]
 8009138:	021b      	lsls	r3, r3, #8
 800913a:	68fa      	ldr	r2, [r7, #12]
 800913c:	4313      	orrs	r3, r2
 800913e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	68fa      	ldr	r2, [r7, #12]
 8009146:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	681a      	ldr	r2, [r3, #0]
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	f042 0201 	orr.w	r2, r2, #1
 8009156:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	2220      	movs	r2, #32
 800915c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	2200      	movs	r2, #0
 8009164:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8009168:	2300      	movs	r3, #0
 800916a:	e000      	b.n	800916e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800916c:	2302      	movs	r3, #2
  }
}
 800916e:	4618      	mov	r0, r3
 8009170:	3714      	adds	r7, #20
 8009172:	46bd      	mov	sp, r7
 8009174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009178:	4770      	bx	lr

0800917a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800917a:	b580      	push	{r7, lr}
 800917c:	b086      	sub	sp, #24
 800917e:	af02      	add	r7, sp, #8
 8009180:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	2b00      	cmp	r3, #0
 8009186:	d101      	bne.n	800918c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8009188:	2301      	movs	r3, #1
 800918a:	e0fe      	b.n	800938a <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8009192:	b2db      	uxtb	r3, r3
 8009194:	2b00      	cmp	r3, #0
 8009196:	d106      	bne.n	80091a6 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	2200      	movs	r2, #0
 800919c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80091a0:	6878      	ldr	r0, [r7, #4]
 80091a2:	f00b fa4f 	bl	8014644 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	2203      	movs	r2, #3
 80091aa:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	4618      	mov	r0, r3
 80091b4:	f007 fe0b 	bl	8010dce <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	6818      	ldr	r0, [r3, #0]
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	7c1a      	ldrb	r2, [r3, #16]
 80091c0:	f88d 2000 	strb.w	r2, [sp]
 80091c4:	3304      	adds	r3, #4
 80091c6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80091c8:	f007 fcdc 	bl	8010b84 <USB_CoreInit>
 80091cc:	4603      	mov	r3, r0
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d005      	beq.n	80091de <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	2202      	movs	r2, #2
 80091d6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80091da:	2301      	movs	r3, #1
 80091dc:	e0d5      	b.n	800938a <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	2100      	movs	r1, #0
 80091e4:	4618      	mov	r0, r3
 80091e6:	f007 fe03 	bl	8010df0 <USB_SetCurrentMode>
 80091ea:	4603      	mov	r3, r0
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d005      	beq.n	80091fc <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	2202      	movs	r2, #2
 80091f4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80091f8:	2301      	movs	r3, #1
 80091fa:	e0c6      	b.n	800938a <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80091fc:	2300      	movs	r3, #0
 80091fe:	73fb      	strb	r3, [r7, #15]
 8009200:	e04a      	b.n	8009298 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8009202:	7bfa      	ldrb	r2, [r7, #15]
 8009204:	6879      	ldr	r1, [r7, #4]
 8009206:	4613      	mov	r3, r2
 8009208:	00db      	lsls	r3, r3, #3
 800920a:	4413      	add	r3, r2
 800920c:	009b      	lsls	r3, r3, #2
 800920e:	440b      	add	r3, r1
 8009210:	3315      	adds	r3, #21
 8009212:	2201      	movs	r2, #1
 8009214:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8009216:	7bfa      	ldrb	r2, [r7, #15]
 8009218:	6879      	ldr	r1, [r7, #4]
 800921a:	4613      	mov	r3, r2
 800921c:	00db      	lsls	r3, r3, #3
 800921e:	4413      	add	r3, r2
 8009220:	009b      	lsls	r3, r3, #2
 8009222:	440b      	add	r3, r1
 8009224:	3314      	adds	r3, #20
 8009226:	7bfa      	ldrb	r2, [r7, #15]
 8009228:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800922a:	7bfa      	ldrb	r2, [r7, #15]
 800922c:	7bfb      	ldrb	r3, [r7, #15]
 800922e:	b298      	uxth	r0, r3
 8009230:	6879      	ldr	r1, [r7, #4]
 8009232:	4613      	mov	r3, r2
 8009234:	00db      	lsls	r3, r3, #3
 8009236:	4413      	add	r3, r2
 8009238:	009b      	lsls	r3, r3, #2
 800923a:	440b      	add	r3, r1
 800923c:	332e      	adds	r3, #46	@ 0x2e
 800923e:	4602      	mov	r2, r0
 8009240:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8009242:	7bfa      	ldrb	r2, [r7, #15]
 8009244:	6879      	ldr	r1, [r7, #4]
 8009246:	4613      	mov	r3, r2
 8009248:	00db      	lsls	r3, r3, #3
 800924a:	4413      	add	r3, r2
 800924c:	009b      	lsls	r3, r3, #2
 800924e:	440b      	add	r3, r1
 8009250:	3318      	adds	r3, #24
 8009252:	2200      	movs	r2, #0
 8009254:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8009256:	7bfa      	ldrb	r2, [r7, #15]
 8009258:	6879      	ldr	r1, [r7, #4]
 800925a:	4613      	mov	r3, r2
 800925c:	00db      	lsls	r3, r3, #3
 800925e:	4413      	add	r3, r2
 8009260:	009b      	lsls	r3, r3, #2
 8009262:	440b      	add	r3, r1
 8009264:	331c      	adds	r3, #28
 8009266:	2200      	movs	r2, #0
 8009268:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800926a:	7bfa      	ldrb	r2, [r7, #15]
 800926c:	6879      	ldr	r1, [r7, #4]
 800926e:	4613      	mov	r3, r2
 8009270:	00db      	lsls	r3, r3, #3
 8009272:	4413      	add	r3, r2
 8009274:	009b      	lsls	r3, r3, #2
 8009276:	440b      	add	r3, r1
 8009278:	3320      	adds	r3, #32
 800927a:	2200      	movs	r2, #0
 800927c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800927e:	7bfa      	ldrb	r2, [r7, #15]
 8009280:	6879      	ldr	r1, [r7, #4]
 8009282:	4613      	mov	r3, r2
 8009284:	00db      	lsls	r3, r3, #3
 8009286:	4413      	add	r3, r2
 8009288:	009b      	lsls	r3, r3, #2
 800928a:	440b      	add	r3, r1
 800928c:	3324      	adds	r3, #36	@ 0x24
 800928e:	2200      	movs	r2, #0
 8009290:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009292:	7bfb      	ldrb	r3, [r7, #15]
 8009294:	3301      	adds	r3, #1
 8009296:	73fb      	strb	r3, [r7, #15]
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	791b      	ldrb	r3, [r3, #4]
 800929c:	7bfa      	ldrb	r2, [r7, #15]
 800929e:	429a      	cmp	r2, r3
 80092a0:	d3af      	bcc.n	8009202 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80092a2:	2300      	movs	r3, #0
 80092a4:	73fb      	strb	r3, [r7, #15]
 80092a6:	e044      	b.n	8009332 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80092a8:	7bfa      	ldrb	r2, [r7, #15]
 80092aa:	6879      	ldr	r1, [r7, #4]
 80092ac:	4613      	mov	r3, r2
 80092ae:	00db      	lsls	r3, r3, #3
 80092b0:	4413      	add	r3, r2
 80092b2:	009b      	lsls	r3, r3, #2
 80092b4:	440b      	add	r3, r1
 80092b6:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80092ba:	2200      	movs	r2, #0
 80092bc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80092be:	7bfa      	ldrb	r2, [r7, #15]
 80092c0:	6879      	ldr	r1, [r7, #4]
 80092c2:	4613      	mov	r3, r2
 80092c4:	00db      	lsls	r3, r3, #3
 80092c6:	4413      	add	r3, r2
 80092c8:	009b      	lsls	r3, r3, #2
 80092ca:	440b      	add	r3, r1
 80092cc:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80092d0:	7bfa      	ldrb	r2, [r7, #15]
 80092d2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80092d4:	7bfa      	ldrb	r2, [r7, #15]
 80092d6:	6879      	ldr	r1, [r7, #4]
 80092d8:	4613      	mov	r3, r2
 80092da:	00db      	lsls	r3, r3, #3
 80092dc:	4413      	add	r3, r2
 80092de:	009b      	lsls	r3, r3, #2
 80092e0:	440b      	add	r3, r1
 80092e2:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80092e6:	2200      	movs	r2, #0
 80092e8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80092ea:	7bfa      	ldrb	r2, [r7, #15]
 80092ec:	6879      	ldr	r1, [r7, #4]
 80092ee:	4613      	mov	r3, r2
 80092f0:	00db      	lsls	r3, r3, #3
 80092f2:	4413      	add	r3, r2
 80092f4:	009b      	lsls	r3, r3, #2
 80092f6:	440b      	add	r3, r1
 80092f8:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80092fc:	2200      	movs	r2, #0
 80092fe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8009300:	7bfa      	ldrb	r2, [r7, #15]
 8009302:	6879      	ldr	r1, [r7, #4]
 8009304:	4613      	mov	r3, r2
 8009306:	00db      	lsls	r3, r3, #3
 8009308:	4413      	add	r3, r2
 800930a:	009b      	lsls	r3, r3, #2
 800930c:	440b      	add	r3, r1
 800930e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8009312:	2200      	movs	r2, #0
 8009314:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8009316:	7bfa      	ldrb	r2, [r7, #15]
 8009318:	6879      	ldr	r1, [r7, #4]
 800931a:	4613      	mov	r3, r2
 800931c:	00db      	lsls	r3, r3, #3
 800931e:	4413      	add	r3, r2
 8009320:	009b      	lsls	r3, r3, #2
 8009322:	440b      	add	r3, r1
 8009324:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8009328:	2200      	movs	r2, #0
 800932a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800932c:	7bfb      	ldrb	r3, [r7, #15]
 800932e:	3301      	adds	r3, #1
 8009330:	73fb      	strb	r3, [r7, #15]
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	791b      	ldrb	r3, [r3, #4]
 8009336:	7bfa      	ldrb	r2, [r7, #15]
 8009338:	429a      	cmp	r2, r3
 800933a:	d3b5      	bcc.n	80092a8 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	6818      	ldr	r0, [r3, #0]
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	7c1a      	ldrb	r2, [r3, #16]
 8009344:	f88d 2000 	strb.w	r2, [sp]
 8009348:	3304      	adds	r3, #4
 800934a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800934c:	f007 fd9c 	bl	8010e88 <USB_DevInit>
 8009350:	4603      	mov	r3, r0
 8009352:	2b00      	cmp	r3, #0
 8009354:	d005      	beq.n	8009362 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	2202      	movs	r2, #2
 800935a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800935e:	2301      	movs	r3, #1
 8009360:	e013      	b.n	800938a <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	2200      	movs	r2, #0
 8009366:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	2201      	movs	r2, #1
 800936c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	7b1b      	ldrb	r3, [r3, #12]
 8009374:	2b01      	cmp	r3, #1
 8009376:	d102      	bne.n	800937e <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8009378:	6878      	ldr	r0, [r7, #4]
 800937a:	f001 f96d 	bl	800a658 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	4618      	mov	r0, r3
 8009384:	f008 fddb 	bl	8011f3e <USB_DevDisconnect>

  return HAL_OK;
 8009388:	2300      	movs	r3, #0
}
 800938a:	4618      	mov	r0, r3
 800938c:	3710      	adds	r7, #16
 800938e:	46bd      	mov	sp, r7
 8009390:	bd80      	pop	{r7, pc}

08009392 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8009392:	b580      	push	{r7, lr}
 8009394:	b084      	sub	sp, #16
 8009396:	af00      	add	r7, sp, #0
 8009398:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80093a6:	2b01      	cmp	r3, #1
 80093a8:	d101      	bne.n	80093ae <HAL_PCD_Start+0x1c>
 80093aa:	2302      	movs	r3, #2
 80093ac:	e022      	b.n	80093f4 <HAL_PCD_Start+0x62>
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	2201      	movs	r2, #1
 80093b2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	68db      	ldr	r3, [r3, #12]
 80093ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d009      	beq.n	80093d6 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80093c6:	2b01      	cmp	r3, #1
 80093c8:	d105      	bne.n	80093d6 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80093ce:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	4618      	mov	r0, r3
 80093dc:	f007 fce6 	bl	8010dac <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	4618      	mov	r0, r3
 80093e6:	f008 fd89 	bl	8011efc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	2200      	movs	r2, #0
 80093ee:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80093f2:	2300      	movs	r3, #0
}
 80093f4:	4618      	mov	r0, r3
 80093f6:	3710      	adds	r7, #16
 80093f8:	46bd      	mov	sp, r7
 80093fa:	bd80      	pop	{r7, pc}

080093fc <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80093fc:	b590      	push	{r4, r7, lr}
 80093fe:	b08d      	sub	sp, #52	@ 0x34
 8009400:	af00      	add	r7, sp, #0
 8009402:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800940a:	6a3b      	ldr	r3, [r7, #32]
 800940c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	4618      	mov	r0, r3
 8009414:	f008 fe47 	bl	80120a6 <USB_GetMode>
 8009418:	4603      	mov	r3, r0
 800941a:	2b00      	cmp	r3, #0
 800941c:	f040 84b9 	bne.w	8009d92 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	4618      	mov	r0, r3
 8009426:	f008 fdab 	bl	8011f80 <USB_ReadInterrupts>
 800942a:	4603      	mov	r3, r0
 800942c:	2b00      	cmp	r3, #0
 800942e:	f000 84af 	beq.w	8009d90 <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8009432:	69fb      	ldr	r3, [r7, #28]
 8009434:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009438:	689b      	ldr	r3, [r3, #8]
 800943a:	0a1b      	lsrs	r3, r3, #8
 800943c:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	4618      	mov	r0, r3
 800944c:	f008 fd98 	bl	8011f80 <USB_ReadInterrupts>
 8009450:	4603      	mov	r3, r0
 8009452:	f003 0302 	and.w	r3, r3, #2
 8009456:	2b02      	cmp	r3, #2
 8009458:	d107      	bne.n	800946a <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	695a      	ldr	r2, [r3, #20]
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	f002 0202 	and.w	r2, r2, #2
 8009468:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	4618      	mov	r0, r3
 8009470:	f008 fd86 	bl	8011f80 <USB_ReadInterrupts>
 8009474:	4603      	mov	r3, r0
 8009476:	f003 0310 	and.w	r3, r3, #16
 800947a:	2b10      	cmp	r3, #16
 800947c:	d161      	bne.n	8009542 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	699a      	ldr	r2, [r3, #24]
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	f022 0210 	bic.w	r2, r2, #16
 800948c:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800948e:	6a3b      	ldr	r3, [r7, #32]
 8009490:	6a1b      	ldr	r3, [r3, #32]
 8009492:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8009494:	69bb      	ldr	r3, [r7, #24]
 8009496:	f003 020f 	and.w	r2, r3, #15
 800949a:	4613      	mov	r3, r2
 800949c:	00db      	lsls	r3, r3, #3
 800949e:	4413      	add	r3, r2
 80094a0:	009b      	lsls	r3, r3, #2
 80094a2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80094a6:	687a      	ldr	r2, [r7, #4]
 80094a8:	4413      	add	r3, r2
 80094aa:	3304      	adds	r3, #4
 80094ac:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80094ae:	69bb      	ldr	r3, [r7, #24]
 80094b0:	0c5b      	lsrs	r3, r3, #17
 80094b2:	f003 030f 	and.w	r3, r3, #15
 80094b6:	2b02      	cmp	r3, #2
 80094b8:	d124      	bne.n	8009504 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80094ba:	69ba      	ldr	r2, [r7, #24]
 80094bc:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80094c0:	4013      	ands	r3, r2
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d035      	beq.n	8009532 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80094c6:	697b      	ldr	r3, [r7, #20]
 80094c8:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80094ca:	69bb      	ldr	r3, [r7, #24]
 80094cc:	091b      	lsrs	r3, r3, #4
 80094ce:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80094d0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80094d4:	b29b      	uxth	r3, r3
 80094d6:	461a      	mov	r2, r3
 80094d8:	6a38      	ldr	r0, [r7, #32]
 80094da:	f008 fbbd 	bl	8011c58 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80094de:	697b      	ldr	r3, [r7, #20]
 80094e0:	68da      	ldr	r2, [r3, #12]
 80094e2:	69bb      	ldr	r3, [r7, #24]
 80094e4:	091b      	lsrs	r3, r3, #4
 80094e6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80094ea:	441a      	add	r2, r3
 80094ec:	697b      	ldr	r3, [r7, #20]
 80094ee:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80094f0:	697b      	ldr	r3, [r7, #20]
 80094f2:	695a      	ldr	r2, [r3, #20]
 80094f4:	69bb      	ldr	r3, [r7, #24]
 80094f6:	091b      	lsrs	r3, r3, #4
 80094f8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80094fc:	441a      	add	r2, r3
 80094fe:	697b      	ldr	r3, [r7, #20]
 8009500:	615a      	str	r2, [r3, #20]
 8009502:	e016      	b.n	8009532 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8009504:	69bb      	ldr	r3, [r7, #24]
 8009506:	0c5b      	lsrs	r3, r3, #17
 8009508:	f003 030f 	and.w	r3, r3, #15
 800950c:	2b06      	cmp	r3, #6
 800950e:	d110      	bne.n	8009532 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8009516:	2208      	movs	r2, #8
 8009518:	4619      	mov	r1, r3
 800951a:	6a38      	ldr	r0, [r7, #32]
 800951c:	f008 fb9c 	bl	8011c58 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8009520:	697b      	ldr	r3, [r7, #20]
 8009522:	695a      	ldr	r2, [r3, #20]
 8009524:	69bb      	ldr	r3, [r7, #24]
 8009526:	091b      	lsrs	r3, r3, #4
 8009528:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800952c:	441a      	add	r2, r3
 800952e:	697b      	ldr	r3, [r7, #20]
 8009530:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	699a      	ldr	r2, [r3, #24]
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	f042 0210 	orr.w	r2, r2, #16
 8009540:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	4618      	mov	r0, r3
 8009548:	f008 fd1a 	bl	8011f80 <USB_ReadInterrupts>
 800954c:	4603      	mov	r3, r0
 800954e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8009552:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8009556:	f040 80a7 	bne.w	80096a8 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800955a:	2300      	movs	r3, #0
 800955c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	4618      	mov	r0, r3
 8009564:	f008 fd1f 	bl	8011fa6 <USB_ReadDevAllOutEpInterrupt>
 8009568:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800956a:	e099      	b.n	80096a0 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800956c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800956e:	f003 0301 	and.w	r3, r3, #1
 8009572:	2b00      	cmp	r3, #0
 8009574:	f000 808e 	beq.w	8009694 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800957e:	b2d2      	uxtb	r2, r2
 8009580:	4611      	mov	r1, r2
 8009582:	4618      	mov	r0, r3
 8009584:	f008 fd43 	bl	801200e <USB_ReadDevOutEPInterrupt>
 8009588:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800958a:	693b      	ldr	r3, [r7, #16]
 800958c:	f003 0301 	and.w	r3, r3, #1
 8009590:	2b00      	cmp	r3, #0
 8009592:	d00c      	beq.n	80095ae <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8009594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009596:	015a      	lsls	r2, r3, #5
 8009598:	69fb      	ldr	r3, [r7, #28]
 800959a:	4413      	add	r3, r2
 800959c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80095a0:	461a      	mov	r2, r3
 80095a2:	2301      	movs	r3, #1
 80095a4:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80095a6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80095a8:	6878      	ldr	r0, [r7, #4]
 80095aa:	f000 fecf 	bl	800a34c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80095ae:	693b      	ldr	r3, [r7, #16]
 80095b0:	f003 0308 	and.w	r3, r3, #8
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d00c      	beq.n	80095d2 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80095b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095ba:	015a      	lsls	r2, r3, #5
 80095bc:	69fb      	ldr	r3, [r7, #28]
 80095be:	4413      	add	r3, r2
 80095c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80095c4:	461a      	mov	r2, r3
 80095c6:	2308      	movs	r3, #8
 80095c8:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80095ca:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80095cc:	6878      	ldr	r0, [r7, #4]
 80095ce:	f000 ffa5 	bl	800a51c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80095d2:	693b      	ldr	r3, [r7, #16]
 80095d4:	f003 0310 	and.w	r3, r3, #16
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d008      	beq.n	80095ee <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80095dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095de:	015a      	lsls	r2, r3, #5
 80095e0:	69fb      	ldr	r3, [r7, #28]
 80095e2:	4413      	add	r3, r2
 80095e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80095e8:	461a      	mov	r2, r3
 80095ea:	2310      	movs	r3, #16
 80095ec:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80095ee:	693b      	ldr	r3, [r7, #16]
 80095f0:	f003 0302 	and.w	r3, r3, #2
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d030      	beq.n	800965a <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80095f8:	6a3b      	ldr	r3, [r7, #32]
 80095fa:	695b      	ldr	r3, [r3, #20]
 80095fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009600:	2b80      	cmp	r3, #128	@ 0x80
 8009602:	d109      	bne.n	8009618 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8009604:	69fb      	ldr	r3, [r7, #28]
 8009606:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800960a:	685b      	ldr	r3, [r3, #4]
 800960c:	69fa      	ldr	r2, [r7, #28]
 800960e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009612:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8009616:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8009618:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800961a:	4613      	mov	r3, r2
 800961c:	00db      	lsls	r3, r3, #3
 800961e:	4413      	add	r3, r2
 8009620:	009b      	lsls	r3, r3, #2
 8009622:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8009626:	687a      	ldr	r2, [r7, #4]
 8009628:	4413      	add	r3, r2
 800962a:	3304      	adds	r3, #4
 800962c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800962e:	697b      	ldr	r3, [r7, #20]
 8009630:	78db      	ldrb	r3, [r3, #3]
 8009632:	2b01      	cmp	r3, #1
 8009634:	d108      	bne.n	8009648 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8009636:	697b      	ldr	r3, [r7, #20]
 8009638:	2200      	movs	r2, #0
 800963a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800963c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800963e:	b2db      	uxtb	r3, r3
 8009640:	4619      	mov	r1, r3
 8009642:	6878      	ldr	r0, [r7, #4]
 8009644:	f00b f8f6 	bl	8014834 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8009648:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800964a:	015a      	lsls	r2, r3, #5
 800964c:	69fb      	ldr	r3, [r7, #28]
 800964e:	4413      	add	r3, r2
 8009650:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009654:	461a      	mov	r2, r3
 8009656:	2302      	movs	r3, #2
 8009658:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800965a:	693b      	ldr	r3, [r7, #16]
 800965c:	f003 0320 	and.w	r3, r3, #32
 8009660:	2b00      	cmp	r3, #0
 8009662:	d008      	beq.n	8009676 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009664:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009666:	015a      	lsls	r2, r3, #5
 8009668:	69fb      	ldr	r3, [r7, #28]
 800966a:	4413      	add	r3, r2
 800966c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009670:	461a      	mov	r2, r3
 8009672:	2320      	movs	r3, #32
 8009674:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8009676:	693b      	ldr	r3, [r7, #16]
 8009678:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800967c:	2b00      	cmp	r3, #0
 800967e:	d009      	beq.n	8009694 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8009680:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009682:	015a      	lsls	r2, r3, #5
 8009684:	69fb      	ldr	r3, [r7, #28]
 8009686:	4413      	add	r3, r2
 8009688:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800968c:	461a      	mov	r2, r3
 800968e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8009692:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8009694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009696:	3301      	adds	r3, #1
 8009698:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800969a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800969c:	085b      	lsrs	r3, r3, #1
 800969e:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80096a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	f47f af62 	bne.w	800956c <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	4618      	mov	r0, r3
 80096ae:	f008 fc67 	bl	8011f80 <USB_ReadInterrupts>
 80096b2:	4603      	mov	r3, r0
 80096b4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80096b8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80096bc:	f040 80db 	bne.w	8009876 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	4618      	mov	r0, r3
 80096c6:	f008 fc88 	bl	8011fda <USB_ReadDevAllInEpInterrupt>
 80096ca:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80096cc:	2300      	movs	r3, #0
 80096ce:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80096d0:	e0cd      	b.n	800986e <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80096d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096d4:	f003 0301 	and.w	r3, r3, #1
 80096d8:	2b00      	cmp	r3, #0
 80096da:	f000 80c2 	beq.w	8009862 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80096e4:	b2d2      	uxtb	r2, r2
 80096e6:	4611      	mov	r1, r2
 80096e8:	4618      	mov	r0, r3
 80096ea:	f008 fcae 	bl	801204a <USB_ReadDevInEPInterrupt>
 80096ee:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80096f0:	693b      	ldr	r3, [r7, #16]
 80096f2:	f003 0301 	and.w	r3, r3, #1
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d057      	beq.n	80097aa <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80096fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096fc:	f003 030f 	and.w	r3, r3, #15
 8009700:	2201      	movs	r2, #1
 8009702:	fa02 f303 	lsl.w	r3, r2, r3
 8009706:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8009708:	69fb      	ldr	r3, [r7, #28]
 800970a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800970e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	43db      	mvns	r3, r3
 8009714:	69f9      	ldr	r1, [r7, #28]
 8009716:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800971a:	4013      	ands	r3, r2
 800971c:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800971e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009720:	015a      	lsls	r2, r3, #5
 8009722:	69fb      	ldr	r3, [r7, #28]
 8009724:	4413      	add	r3, r2
 8009726:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800972a:	461a      	mov	r2, r3
 800972c:	2301      	movs	r3, #1
 800972e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	799b      	ldrb	r3, [r3, #6]
 8009734:	2b01      	cmp	r3, #1
 8009736:	d132      	bne.n	800979e <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8009738:	6879      	ldr	r1, [r7, #4]
 800973a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800973c:	4613      	mov	r3, r2
 800973e:	00db      	lsls	r3, r3, #3
 8009740:	4413      	add	r3, r2
 8009742:	009b      	lsls	r3, r3, #2
 8009744:	440b      	add	r3, r1
 8009746:	3320      	adds	r3, #32
 8009748:	6819      	ldr	r1, [r3, #0]
 800974a:	6878      	ldr	r0, [r7, #4]
 800974c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800974e:	4613      	mov	r3, r2
 8009750:	00db      	lsls	r3, r3, #3
 8009752:	4413      	add	r3, r2
 8009754:	009b      	lsls	r3, r3, #2
 8009756:	4403      	add	r3, r0
 8009758:	331c      	adds	r3, #28
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	4419      	add	r1, r3
 800975e:	6878      	ldr	r0, [r7, #4]
 8009760:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009762:	4613      	mov	r3, r2
 8009764:	00db      	lsls	r3, r3, #3
 8009766:	4413      	add	r3, r2
 8009768:	009b      	lsls	r3, r3, #2
 800976a:	4403      	add	r3, r0
 800976c:	3320      	adds	r3, #32
 800976e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8009770:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009772:	2b00      	cmp	r3, #0
 8009774:	d113      	bne.n	800979e <HAL_PCD_IRQHandler+0x3a2>
 8009776:	6879      	ldr	r1, [r7, #4]
 8009778:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800977a:	4613      	mov	r3, r2
 800977c:	00db      	lsls	r3, r3, #3
 800977e:	4413      	add	r3, r2
 8009780:	009b      	lsls	r3, r3, #2
 8009782:	440b      	add	r3, r1
 8009784:	3324      	adds	r3, #36	@ 0x24
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	2b00      	cmp	r3, #0
 800978a:	d108      	bne.n	800979e <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	6818      	ldr	r0, [r3, #0]
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8009796:	461a      	mov	r2, r3
 8009798:	2101      	movs	r1, #1
 800979a:	f008 fcb7 	bl	801210c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800979e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097a0:	b2db      	uxtb	r3, r3
 80097a2:	4619      	mov	r1, r3
 80097a4:	6878      	ldr	r0, [r7, #4]
 80097a6:	f00a ffc0 	bl	801472a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80097aa:	693b      	ldr	r3, [r7, #16]
 80097ac:	f003 0308 	and.w	r3, r3, #8
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d008      	beq.n	80097c6 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80097b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097b6:	015a      	lsls	r2, r3, #5
 80097b8:	69fb      	ldr	r3, [r7, #28]
 80097ba:	4413      	add	r3, r2
 80097bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80097c0:	461a      	mov	r2, r3
 80097c2:	2308      	movs	r3, #8
 80097c4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80097c6:	693b      	ldr	r3, [r7, #16]
 80097c8:	f003 0310 	and.w	r3, r3, #16
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d008      	beq.n	80097e2 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80097d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097d2:	015a      	lsls	r2, r3, #5
 80097d4:	69fb      	ldr	r3, [r7, #28]
 80097d6:	4413      	add	r3, r2
 80097d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80097dc:	461a      	mov	r2, r3
 80097de:	2310      	movs	r3, #16
 80097e0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80097e2:	693b      	ldr	r3, [r7, #16]
 80097e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d008      	beq.n	80097fe <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80097ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097ee:	015a      	lsls	r2, r3, #5
 80097f0:	69fb      	ldr	r3, [r7, #28]
 80097f2:	4413      	add	r3, r2
 80097f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80097f8:	461a      	mov	r2, r3
 80097fa:	2340      	movs	r3, #64	@ 0x40
 80097fc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80097fe:	693b      	ldr	r3, [r7, #16]
 8009800:	f003 0302 	and.w	r3, r3, #2
 8009804:	2b00      	cmp	r3, #0
 8009806:	d023      	beq.n	8009850 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8009808:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800980a:	6a38      	ldr	r0, [r7, #32]
 800980c:	f007 fc9a 	bl	8011144 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8009810:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009812:	4613      	mov	r3, r2
 8009814:	00db      	lsls	r3, r3, #3
 8009816:	4413      	add	r3, r2
 8009818:	009b      	lsls	r3, r3, #2
 800981a:	3310      	adds	r3, #16
 800981c:	687a      	ldr	r2, [r7, #4]
 800981e:	4413      	add	r3, r2
 8009820:	3304      	adds	r3, #4
 8009822:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8009824:	697b      	ldr	r3, [r7, #20]
 8009826:	78db      	ldrb	r3, [r3, #3]
 8009828:	2b01      	cmp	r3, #1
 800982a:	d108      	bne.n	800983e <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800982c:	697b      	ldr	r3, [r7, #20]
 800982e:	2200      	movs	r2, #0
 8009830:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8009832:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009834:	b2db      	uxtb	r3, r3
 8009836:	4619      	mov	r1, r3
 8009838:	6878      	ldr	r0, [r7, #4]
 800983a:	f00b f80d 	bl	8014858 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800983e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009840:	015a      	lsls	r2, r3, #5
 8009842:	69fb      	ldr	r3, [r7, #28]
 8009844:	4413      	add	r3, r2
 8009846:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800984a:	461a      	mov	r2, r3
 800984c:	2302      	movs	r3, #2
 800984e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8009850:	693b      	ldr	r3, [r7, #16]
 8009852:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009856:	2b00      	cmp	r3, #0
 8009858:	d003      	beq.n	8009862 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800985a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800985c:	6878      	ldr	r0, [r7, #4]
 800985e:	f000 fce8 	bl	800a232 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8009862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009864:	3301      	adds	r3, #1
 8009866:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8009868:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800986a:	085b      	lsrs	r3, r3, #1
 800986c:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800986e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009870:	2b00      	cmp	r3, #0
 8009872:	f47f af2e 	bne.w	80096d2 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	4618      	mov	r0, r3
 800987c:	f008 fb80 	bl	8011f80 <USB_ReadInterrupts>
 8009880:	4603      	mov	r3, r0
 8009882:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009886:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800988a:	d122      	bne.n	80098d2 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800988c:	69fb      	ldr	r3, [r7, #28]
 800988e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009892:	685b      	ldr	r3, [r3, #4]
 8009894:	69fa      	ldr	r2, [r7, #28]
 8009896:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800989a:	f023 0301 	bic.w	r3, r3, #1
 800989e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80098a6:	2b01      	cmp	r3, #1
 80098a8:	d108      	bne.n	80098bc <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	2200      	movs	r2, #0
 80098ae:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80098b2:	2100      	movs	r1, #0
 80098b4:	6878      	ldr	r0, [r7, #4]
 80098b6:	f000 fef3 	bl	800a6a0 <HAL_PCDEx_LPM_Callback>
 80098ba:	e002      	b.n	80098c2 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80098bc:	6878      	ldr	r0, [r7, #4]
 80098be:	f00a ffab 	bl	8014818 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	695a      	ldr	r2, [r3, #20]
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80098d0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	4618      	mov	r0, r3
 80098d8:	f008 fb52 	bl	8011f80 <USB_ReadInterrupts>
 80098dc:	4603      	mov	r3, r0
 80098de:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80098e2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80098e6:	d112      	bne.n	800990e <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80098e8:	69fb      	ldr	r3, [r7, #28]
 80098ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80098ee:	689b      	ldr	r3, [r3, #8]
 80098f0:	f003 0301 	and.w	r3, r3, #1
 80098f4:	2b01      	cmp	r3, #1
 80098f6:	d102      	bne.n	80098fe <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80098f8:	6878      	ldr	r0, [r7, #4]
 80098fa:	f00a ff67 	bl	80147cc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	695a      	ldr	r2, [r3, #20]
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 800990c:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	4618      	mov	r0, r3
 8009914:	f008 fb34 	bl	8011f80 <USB_ReadInterrupts>
 8009918:	4603      	mov	r3, r0
 800991a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800991e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009922:	d121      	bne.n	8009968 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	695a      	ldr	r2, [r3, #20]
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8009932:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800993a:	2b00      	cmp	r3, #0
 800993c:	d111      	bne.n	8009962 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	2201      	movs	r2, #1
 8009942:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800994c:	089b      	lsrs	r3, r3, #2
 800994e:	f003 020f 	and.w	r2, r3, #15
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8009958:	2101      	movs	r1, #1
 800995a:	6878      	ldr	r0, [r7, #4]
 800995c:	f000 fea0 	bl	800a6a0 <HAL_PCDEx_LPM_Callback>
 8009960:	e002      	b.n	8009968 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8009962:	6878      	ldr	r0, [r7, #4]
 8009964:	f00a ff32 	bl	80147cc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	4618      	mov	r0, r3
 800996e:	f008 fb07 	bl	8011f80 <USB_ReadInterrupts>
 8009972:	4603      	mov	r3, r0
 8009974:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009978:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800997c:	f040 80b7 	bne.w	8009aee <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8009980:	69fb      	ldr	r3, [r7, #28]
 8009982:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009986:	685b      	ldr	r3, [r3, #4]
 8009988:	69fa      	ldr	r2, [r7, #28]
 800998a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800998e:	f023 0301 	bic.w	r3, r3, #1
 8009992:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	2110      	movs	r1, #16
 800999a:	4618      	mov	r0, r3
 800999c:	f007 fbd2 	bl	8011144 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80099a0:	2300      	movs	r3, #0
 80099a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80099a4:	e046      	b.n	8009a34 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80099a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099a8:	015a      	lsls	r2, r3, #5
 80099aa:	69fb      	ldr	r3, [r7, #28]
 80099ac:	4413      	add	r3, r2
 80099ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80099b2:	461a      	mov	r2, r3
 80099b4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80099b8:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80099ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099bc:	015a      	lsls	r2, r3, #5
 80099be:	69fb      	ldr	r3, [r7, #28]
 80099c0:	4413      	add	r3, r2
 80099c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80099ca:	0151      	lsls	r1, r2, #5
 80099cc:	69fa      	ldr	r2, [r7, #28]
 80099ce:	440a      	add	r2, r1
 80099d0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80099d4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80099d8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80099da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099dc:	015a      	lsls	r2, r3, #5
 80099de:	69fb      	ldr	r3, [r7, #28]
 80099e0:	4413      	add	r3, r2
 80099e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80099e6:	461a      	mov	r2, r3
 80099e8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80099ec:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80099ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099f0:	015a      	lsls	r2, r3, #5
 80099f2:	69fb      	ldr	r3, [r7, #28]
 80099f4:	4413      	add	r3, r2
 80099f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80099fe:	0151      	lsls	r1, r2, #5
 8009a00:	69fa      	ldr	r2, [r7, #28]
 8009a02:	440a      	add	r2, r1
 8009a04:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009a08:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009a0c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009a0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a10:	015a      	lsls	r2, r3, #5
 8009a12:	69fb      	ldr	r3, [r7, #28]
 8009a14:	4413      	add	r3, r2
 8009a16:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009a1e:	0151      	lsls	r1, r2, #5
 8009a20:	69fa      	ldr	r2, [r7, #28]
 8009a22:	440a      	add	r2, r1
 8009a24:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009a28:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009a2c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009a2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a30:	3301      	adds	r3, #1
 8009a32:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	791b      	ldrb	r3, [r3, #4]
 8009a38:	461a      	mov	r2, r3
 8009a3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a3c:	4293      	cmp	r3, r2
 8009a3e:	d3b2      	bcc.n	80099a6 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8009a40:	69fb      	ldr	r3, [r7, #28]
 8009a42:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009a46:	69db      	ldr	r3, [r3, #28]
 8009a48:	69fa      	ldr	r2, [r7, #28]
 8009a4a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009a4e:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8009a52:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	7bdb      	ldrb	r3, [r3, #15]
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d016      	beq.n	8009a8a <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8009a5c:	69fb      	ldr	r3, [r7, #28]
 8009a5e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009a62:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009a66:	69fa      	ldr	r2, [r7, #28]
 8009a68:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009a6c:	f043 030b 	orr.w	r3, r3, #11
 8009a70:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8009a74:	69fb      	ldr	r3, [r7, #28]
 8009a76:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009a7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009a7c:	69fa      	ldr	r2, [r7, #28]
 8009a7e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009a82:	f043 030b 	orr.w	r3, r3, #11
 8009a86:	6453      	str	r3, [r2, #68]	@ 0x44
 8009a88:	e015      	b.n	8009ab6 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8009a8a:	69fb      	ldr	r3, [r7, #28]
 8009a8c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009a90:	695a      	ldr	r2, [r3, #20]
 8009a92:	69fb      	ldr	r3, [r7, #28]
 8009a94:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009a98:	4619      	mov	r1, r3
 8009a9a:	f242 032b 	movw	r3, #8235	@ 0x202b
 8009a9e:	4313      	orrs	r3, r2
 8009aa0:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8009aa2:	69fb      	ldr	r3, [r7, #28]
 8009aa4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009aa8:	691b      	ldr	r3, [r3, #16]
 8009aaa:	69fa      	ldr	r2, [r7, #28]
 8009aac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009ab0:	f043 030b 	orr.w	r3, r3, #11
 8009ab4:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8009ab6:	69fb      	ldr	r3, [r7, #28]
 8009ab8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	69fa      	ldr	r2, [r7, #28]
 8009ac0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009ac4:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8009ac8:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	6818      	ldr	r0, [r3, #0]
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8009ad8:	461a      	mov	r2, r3
 8009ada:	f008 fb17 	bl	801210c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	695a      	ldr	r2, [r3, #20]
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8009aec:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	4618      	mov	r0, r3
 8009af4:	f008 fa44 	bl	8011f80 <USB_ReadInterrupts>
 8009af8:	4603      	mov	r3, r0
 8009afa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009afe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009b02:	d123      	bne.n	8009b4c <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	4618      	mov	r0, r3
 8009b0a:	f008 fadb 	bl	80120c4 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	4618      	mov	r0, r3
 8009b14:	f007 fb8f 	bl	8011236 <USB_GetDevSpeed>
 8009b18:	4603      	mov	r3, r0
 8009b1a:	461a      	mov	r2, r3
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	681c      	ldr	r4, [r3, #0]
 8009b24:	f001 fd1c 	bl	800b560 <HAL_RCC_GetHCLKFreq>
 8009b28:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8009b2e:	461a      	mov	r2, r3
 8009b30:	4620      	mov	r0, r4
 8009b32:	f007 f899 	bl	8010c68 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8009b36:	6878      	ldr	r0, [r7, #4]
 8009b38:	f00a fe1f 	bl	801477a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	695a      	ldr	r2, [r3, #20]
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8009b4a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	4618      	mov	r0, r3
 8009b52:	f008 fa15 	bl	8011f80 <USB_ReadInterrupts>
 8009b56:	4603      	mov	r3, r0
 8009b58:	f003 0308 	and.w	r3, r3, #8
 8009b5c:	2b08      	cmp	r3, #8
 8009b5e:	d10a      	bne.n	8009b76 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8009b60:	6878      	ldr	r0, [r7, #4]
 8009b62:	f00a fdfc 	bl	801475e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	695a      	ldr	r2, [r3, #20]
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	f002 0208 	and.w	r2, r2, #8
 8009b74:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	4618      	mov	r0, r3
 8009b7c:	f008 fa00 	bl	8011f80 <USB_ReadInterrupts>
 8009b80:	4603      	mov	r3, r0
 8009b82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009b86:	2b80      	cmp	r3, #128	@ 0x80
 8009b88:	d123      	bne.n	8009bd2 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8009b8a:	6a3b      	ldr	r3, [r7, #32]
 8009b8c:	699b      	ldr	r3, [r3, #24]
 8009b8e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009b92:	6a3b      	ldr	r3, [r7, #32]
 8009b94:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009b96:	2301      	movs	r3, #1
 8009b98:	627b      	str	r3, [r7, #36]	@ 0x24
 8009b9a:	e014      	b.n	8009bc6 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8009b9c:	6879      	ldr	r1, [r7, #4]
 8009b9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009ba0:	4613      	mov	r3, r2
 8009ba2:	00db      	lsls	r3, r3, #3
 8009ba4:	4413      	add	r3, r2
 8009ba6:	009b      	lsls	r3, r3, #2
 8009ba8:	440b      	add	r3, r1
 8009baa:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8009bae:	781b      	ldrb	r3, [r3, #0]
 8009bb0:	2b01      	cmp	r3, #1
 8009bb2:	d105      	bne.n	8009bc0 <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8009bb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bb6:	b2db      	uxtb	r3, r3
 8009bb8:	4619      	mov	r1, r3
 8009bba:	6878      	ldr	r0, [r7, #4]
 8009bbc:	f000 fb08 	bl	800a1d0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009bc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bc2:	3301      	adds	r3, #1
 8009bc4:	627b      	str	r3, [r7, #36]	@ 0x24
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	791b      	ldrb	r3, [r3, #4]
 8009bca:	461a      	mov	r2, r3
 8009bcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bce:	4293      	cmp	r3, r2
 8009bd0:	d3e4      	bcc.n	8009b9c <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	4618      	mov	r0, r3
 8009bd8:	f008 f9d2 	bl	8011f80 <USB_ReadInterrupts>
 8009bdc:	4603      	mov	r3, r0
 8009bde:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009be2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009be6:	d13c      	bne.n	8009c62 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009be8:	2301      	movs	r3, #1
 8009bea:	627b      	str	r3, [r7, #36]	@ 0x24
 8009bec:	e02b      	b.n	8009c46 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8009bee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bf0:	015a      	lsls	r2, r3, #5
 8009bf2:	69fb      	ldr	r3, [r7, #28]
 8009bf4:	4413      	add	r3, r2
 8009bf6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8009bfe:	6879      	ldr	r1, [r7, #4]
 8009c00:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009c02:	4613      	mov	r3, r2
 8009c04:	00db      	lsls	r3, r3, #3
 8009c06:	4413      	add	r3, r2
 8009c08:	009b      	lsls	r3, r3, #2
 8009c0a:	440b      	add	r3, r1
 8009c0c:	3318      	adds	r3, #24
 8009c0e:	781b      	ldrb	r3, [r3, #0]
 8009c10:	2b01      	cmp	r3, #1
 8009c12:	d115      	bne.n	8009c40 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8009c14:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	da12      	bge.n	8009c40 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8009c1a:	6879      	ldr	r1, [r7, #4]
 8009c1c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009c1e:	4613      	mov	r3, r2
 8009c20:	00db      	lsls	r3, r3, #3
 8009c22:	4413      	add	r3, r2
 8009c24:	009b      	lsls	r3, r3, #2
 8009c26:	440b      	add	r3, r1
 8009c28:	3317      	adds	r3, #23
 8009c2a:	2201      	movs	r2, #1
 8009c2c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8009c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c30:	b2db      	uxtb	r3, r3
 8009c32:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009c36:	b2db      	uxtb	r3, r3
 8009c38:	4619      	mov	r1, r3
 8009c3a:	6878      	ldr	r0, [r7, #4]
 8009c3c:	f000 fac8 	bl	800a1d0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009c40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c42:	3301      	adds	r3, #1
 8009c44:	627b      	str	r3, [r7, #36]	@ 0x24
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	791b      	ldrb	r3, [r3, #4]
 8009c4a:	461a      	mov	r2, r3
 8009c4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c4e:	4293      	cmp	r3, r2
 8009c50:	d3cd      	bcc.n	8009bee <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	695a      	ldr	r2, [r3, #20]
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8009c60:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	4618      	mov	r0, r3
 8009c68:	f008 f98a 	bl	8011f80 <USB_ReadInterrupts>
 8009c6c:	4603      	mov	r3, r0
 8009c6e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009c72:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009c76:	d156      	bne.n	8009d26 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009c78:	2301      	movs	r3, #1
 8009c7a:	627b      	str	r3, [r7, #36]	@ 0x24
 8009c7c:	e045      	b.n	8009d0a <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8009c7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c80:	015a      	lsls	r2, r3, #5
 8009c82:	69fb      	ldr	r3, [r7, #28]
 8009c84:	4413      	add	r3, r2
 8009c86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8009c8e:	6879      	ldr	r1, [r7, #4]
 8009c90:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009c92:	4613      	mov	r3, r2
 8009c94:	00db      	lsls	r3, r3, #3
 8009c96:	4413      	add	r3, r2
 8009c98:	009b      	lsls	r3, r3, #2
 8009c9a:	440b      	add	r3, r1
 8009c9c:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8009ca0:	781b      	ldrb	r3, [r3, #0]
 8009ca2:	2b01      	cmp	r3, #1
 8009ca4:	d12e      	bne.n	8009d04 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8009ca6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	da2b      	bge.n	8009d04 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8009cac:	69bb      	ldr	r3, [r7, #24]
 8009cae:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8009cb8:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8009cbc:	429a      	cmp	r2, r3
 8009cbe:	d121      	bne.n	8009d04 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8009cc0:	6879      	ldr	r1, [r7, #4]
 8009cc2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009cc4:	4613      	mov	r3, r2
 8009cc6:	00db      	lsls	r3, r3, #3
 8009cc8:	4413      	add	r3, r2
 8009cca:	009b      	lsls	r3, r3, #2
 8009ccc:	440b      	add	r3, r1
 8009cce:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8009cd2:	2201      	movs	r2, #1
 8009cd4:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8009cd6:	6a3b      	ldr	r3, [r7, #32]
 8009cd8:	699b      	ldr	r3, [r3, #24]
 8009cda:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8009cde:	6a3b      	ldr	r3, [r7, #32]
 8009ce0:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8009ce2:	6a3b      	ldr	r3, [r7, #32]
 8009ce4:	695b      	ldr	r3, [r3, #20]
 8009ce6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d10a      	bne.n	8009d04 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8009cee:	69fb      	ldr	r3, [r7, #28]
 8009cf0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009cf4:	685b      	ldr	r3, [r3, #4]
 8009cf6:	69fa      	ldr	r2, [r7, #28]
 8009cf8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009cfc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8009d00:	6053      	str	r3, [r2, #4]
            break;
 8009d02:	e008      	b.n	8009d16 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009d04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d06:	3301      	adds	r3, #1
 8009d08:	627b      	str	r3, [r7, #36]	@ 0x24
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	791b      	ldrb	r3, [r3, #4]
 8009d0e:	461a      	mov	r2, r3
 8009d10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d12:	4293      	cmp	r3, r2
 8009d14:	d3b3      	bcc.n	8009c7e <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	695a      	ldr	r2, [r3, #20]
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8009d24:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	4618      	mov	r0, r3
 8009d2c:	f008 f928 	bl	8011f80 <USB_ReadInterrupts>
 8009d30:	4603      	mov	r3, r0
 8009d32:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8009d36:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009d3a:	d10a      	bne.n	8009d52 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8009d3c:	6878      	ldr	r0, [r7, #4]
 8009d3e:	f00a fd9d 	bl	801487c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	695a      	ldr	r2, [r3, #20]
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8009d50:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	4618      	mov	r0, r3
 8009d58:	f008 f912 	bl	8011f80 <USB_ReadInterrupts>
 8009d5c:	4603      	mov	r3, r0
 8009d5e:	f003 0304 	and.w	r3, r3, #4
 8009d62:	2b04      	cmp	r3, #4
 8009d64:	d115      	bne.n	8009d92 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	685b      	ldr	r3, [r3, #4]
 8009d6c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8009d6e:	69bb      	ldr	r3, [r7, #24]
 8009d70:	f003 0304 	and.w	r3, r3, #4
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d002      	beq.n	8009d7e <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8009d78:	6878      	ldr	r0, [r7, #4]
 8009d7a:	f00a fd8d 	bl	8014898 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	6859      	ldr	r1, [r3, #4]
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	69ba      	ldr	r2, [r7, #24]
 8009d8a:	430a      	orrs	r2, r1
 8009d8c:	605a      	str	r2, [r3, #4]
 8009d8e:	e000      	b.n	8009d92 <HAL_PCD_IRQHandler+0x996>
      return;
 8009d90:	bf00      	nop
    }
  }
}
 8009d92:	3734      	adds	r7, #52	@ 0x34
 8009d94:	46bd      	mov	sp, r7
 8009d96:	bd90      	pop	{r4, r7, pc}

08009d98 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8009d98:	b580      	push	{r7, lr}
 8009d9a:	b082      	sub	sp, #8
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	6078      	str	r0, [r7, #4]
 8009da0:	460b      	mov	r3, r1
 8009da2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8009daa:	2b01      	cmp	r3, #1
 8009dac:	d101      	bne.n	8009db2 <HAL_PCD_SetAddress+0x1a>
 8009dae:	2302      	movs	r3, #2
 8009db0:	e012      	b.n	8009dd8 <HAL_PCD_SetAddress+0x40>
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	2201      	movs	r2, #1
 8009db6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	78fa      	ldrb	r2, [r7, #3]
 8009dbe:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	78fa      	ldrb	r2, [r7, #3]
 8009dc6:	4611      	mov	r1, r2
 8009dc8:	4618      	mov	r0, r3
 8009dca:	f008 f871 	bl	8011eb0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	2200      	movs	r2, #0
 8009dd2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8009dd6:	2300      	movs	r3, #0
}
 8009dd8:	4618      	mov	r0, r3
 8009dda:	3708      	adds	r7, #8
 8009ddc:	46bd      	mov	sp, r7
 8009dde:	bd80      	pop	{r7, pc}

08009de0 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8009de0:	b580      	push	{r7, lr}
 8009de2:	b084      	sub	sp, #16
 8009de4:	af00      	add	r7, sp, #0
 8009de6:	6078      	str	r0, [r7, #4]
 8009de8:	4608      	mov	r0, r1
 8009dea:	4611      	mov	r1, r2
 8009dec:	461a      	mov	r2, r3
 8009dee:	4603      	mov	r3, r0
 8009df0:	70fb      	strb	r3, [r7, #3]
 8009df2:	460b      	mov	r3, r1
 8009df4:	803b      	strh	r3, [r7, #0]
 8009df6:	4613      	mov	r3, r2
 8009df8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8009dfa:	2300      	movs	r3, #0
 8009dfc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8009dfe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	da0f      	bge.n	8009e26 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009e06:	78fb      	ldrb	r3, [r7, #3]
 8009e08:	f003 020f 	and.w	r2, r3, #15
 8009e0c:	4613      	mov	r3, r2
 8009e0e:	00db      	lsls	r3, r3, #3
 8009e10:	4413      	add	r3, r2
 8009e12:	009b      	lsls	r3, r3, #2
 8009e14:	3310      	adds	r3, #16
 8009e16:	687a      	ldr	r2, [r7, #4]
 8009e18:	4413      	add	r3, r2
 8009e1a:	3304      	adds	r3, #4
 8009e1c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	2201      	movs	r2, #1
 8009e22:	705a      	strb	r2, [r3, #1]
 8009e24:	e00f      	b.n	8009e46 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009e26:	78fb      	ldrb	r3, [r7, #3]
 8009e28:	f003 020f 	and.w	r2, r3, #15
 8009e2c:	4613      	mov	r3, r2
 8009e2e:	00db      	lsls	r3, r3, #3
 8009e30:	4413      	add	r3, r2
 8009e32:	009b      	lsls	r3, r3, #2
 8009e34:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8009e38:	687a      	ldr	r2, [r7, #4]
 8009e3a:	4413      	add	r3, r2
 8009e3c:	3304      	adds	r3, #4
 8009e3e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	2200      	movs	r2, #0
 8009e44:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8009e46:	78fb      	ldrb	r3, [r7, #3]
 8009e48:	f003 030f 	and.w	r3, r3, #15
 8009e4c:	b2da      	uxtb	r2, r3
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8009e52:	883a      	ldrh	r2, [r7, #0]
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	78ba      	ldrb	r2, [r7, #2]
 8009e5c:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	785b      	ldrb	r3, [r3, #1]
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d004      	beq.n	8009e70 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	781b      	ldrb	r3, [r3, #0]
 8009e6a:	461a      	mov	r2, r3
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8009e70:	78bb      	ldrb	r3, [r7, #2]
 8009e72:	2b02      	cmp	r3, #2
 8009e74:	d102      	bne.n	8009e7c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	2200      	movs	r2, #0
 8009e7a:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8009e82:	2b01      	cmp	r3, #1
 8009e84:	d101      	bne.n	8009e8a <HAL_PCD_EP_Open+0xaa>
 8009e86:	2302      	movs	r3, #2
 8009e88:	e00e      	b.n	8009ea8 <HAL_PCD_EP_Open+0xc8>
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	2201      	movs	r2, #1
 8009e8e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	68f9      	ldr	r1, [r7, #12]
 8009e98:	4618      	mov	r0, r3
 8009e9a:	f007 f9f1 	bl	8011280 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	2200      	movs	r2, #0
 8009ea2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8009ea6:	7afb      	ldrb	r3, [r7, #11]
}
 8009ea8:	4618      	mov	r0, r3
 8009eaa:	3710      	adds	r7, #16
 8009eac:	46bd      	mov	sp, r7
 8009eae:	bd80      	pop	{r7, pc}

08009eb0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009eb0:	b580      	push	{r7, lr}
 8009eb2:	b084      	sub	sp, #16
 8009eb4:	af00      	add	r7, sp, #0
 8009eb6:	6078      	str	r0, [r7, #4]
 8009eb8:	460b      	mov	r3, r1
 8009eba:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8009ebc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	da0f      	bge.n	8009ee4 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009ec4:	78fb      	ldrb	r3, [r7, #3]
 8009ec6:	f003 020f 	and.w	r2, r3, #15
 8009eca:	4613      	mov	r3, r2
 8009ecc:	00db      	lsls	r3, r3, #3
 8009ece:	4413      	add	r3, r2
 8009ed0:	009b      	lsls	r3, r3, #2
 8009ed2:	3310      	adds	r3, #16
 8009ed4:	687a      	ldr	r2, [r7, #4]
 8009ed6:	4413      	add	r3, r2
 8009ed8:	3304      	adds	r3, #4
 8009eda:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	2201      	movs	r2, #1
 8009ee0:	705a      	strb	r2, [r3, #1]
 8009ee2:	e00f      	b.n	8009f04 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009ee4:	78fb      	ldrb	r3, [r7, #3]
 8009ee6:	f003 020f 	and.w	r2, r3, #15
 8009eea:	4613      	mov	r3, r2
 8009eec:	00db      	lsls	r3, r3, #3
 8009eee:	4413      	add	r3, r2
 8009ef0:	009b      	lsls	r3, r3, #2
 8009ef2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8009ef6:	687a      	ldr	r2, [r7, #4]
 8009ef8:	4413      	add	r3, r2
 8009efa:	3304      	adds	r3, #4
 8009efc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	2200      	movs	r2, #0
 8009f02:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8009f04:	78fb      	ldrb	r3, [r7, #3]
 8009f06:	f003 030f 	and.w	r3, r3, #15
 8009f0a:	b2da      	uxtb	r2, r3
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8009f16:	2b01      	cmp	r3, #1
 8009f18:	d101      	bne.n	8009f1e <HAL_PCD_EP_Close+0x6e>
 8009f1a:	2302      	movs	r3, #2
 8009f1c:	e00e      	b.n	8009f3c <HAL_PCD_EP_Close+0x8c>
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	2201      	movs	r2, #1
 8009f22:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	68f9      	ldr	r1, [r7, #12]
 8009f2c:	4618      	mov	r0, r3
 8009f2e:	f007 fa2f 	bl	8011390 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	2200      	movs	r2, #0
 8009f36:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8009f3a:	2300      	movs	r3, #0
}
 8009f3c:	4618      	mov	r0, r3
 8009f3e:	3710      	adds	r7, #16
 8009f40:	46bd      	mov	sp, r7
 8009f42:	bd80      	pop	{r7, pc}

08009f44 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8009f44:	b580      	push	{r7, lr}
 8009f46:	b086      	sub	sp, #24
 8009f48:	af00      	add	r7, sp, #0
 8009f4a:	60f8      	str	r0, [r7, #12]
 8009f4c:	607a      	str	r2, [r7, #4]
 8009f4e:	603b      	str	r3, [r7, #0]
 8009f50:	460b      	mov	r3, r1
 8009f52:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009f54:	7afb      	ldrb	r3, [r7, #11]
 8009f56:	f003 020f 	and.w	r2, r3, #15
 8009f5a:	4613      	mov	r3, r2
 8009f5c:	00db      	lsls	r3, r3, #3
 8009f5e:	4413      	add	r3, r2
 8009f60:	009b      	lsls	r3, r3, #2
 8009f62:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8009f66:	68fa      	ldr	r2, [r7, #12]
 8009f68:	4413      	add	r3, r2
 8009f6a:	3304      	adds	r3, #4
 8009f6c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8009f6e:	697b      	ldr	r3, [r7, #20]
 8009f70:	687a      	ldr	r2, [r7, #4]
 8009f72:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8009f74:	697b      	ldr	r3, [r7, #20]
 8009f76:	683a      	ldr	r2, [r7, #0]
 8009f78:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8009f7a:	697b      	ldr	r3, [r7, #20]
 8009f7c:	2200      	movs	r2, #0
 8009f7e:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8009f80:	697b      	ldr	r3, [r7, #20]
 8009f82:	2200      	movs	r2, #0
 8009f84:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009f86:	7afb      	ldrb	r3, [r7, #11]
 8009f88:	f003 030f 	and.w	r3, r3, #15
 8009f8c:	b2da      	uxtb	r2, r3
 8009f8e:	697b      	ldr	r3, [r7, #20]
 8009f90:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	799b      	ldrb	r3, [r3, #6]
 8009f96:	2b01      	cmp	r3, #1
 8009f98:	d102      	bne.n	8009fa0 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8009f9a:	687a      	ldr	r2, [r7, #4]
 8009f9c:	697b      	ldr	r3, [r7, #20]
 8009f9e:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	6818      	ldr	r0, [r3, #0]
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	799b      	ldrb	r3, [r3, #6]
 8009fa8:	461a      	mov	r2, r3
 8009faa:	6979      	ldr	r1, [r7, #20]
 8009fac:	f007 facc 	bl	8011548 <USB_EPStartXfer>

  return HAL_OK;
 8009fb0:	2300      	movs	r3, #0
}
 8009fb2:	4618      	mov	r0, r3
 8009fb4:	3718      	adds	r7, #24
 8009fb6:	46bd      	mov	sp, r7
 8009fb8:	bd80      	pop	{r7, pc}

08009fba <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8009fba:	b480      	push	{r7}
 8009fbc:	b083      	sub	sp, #12
 8009fbe:	af00      	add	r7, sp, #0
 8009fc0:	6078      	str	r0, [r7, #4]
 8009fc2:	460b      	mov	r3, r1
 8009fc4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8009fc6:	78fb      	ldrb	r3, [r7, #3]
 8009fc8:	f003 020f 	and.w	r2, r3, #15
 8009fcc:	6879      	ldr	r1, [r7, #4]
 8009fce:	4613      	mov	r3, r2
 8009fd0:	00db      	lsls	r3, r3, #3
 8009fd2:	4413      	add	r3, r2
 8009fd4:	009b      	lsls	r3, r3, #2
 8009fd6:	440b      	add	r3, r1
 8009fd8:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8009fdc:	681b      	ldr	r3, [r3, #0]
}
 8009fde:	4618      	mov	r0, r3
 8009fe0:	370c      	adds	r7, #12
 8009fe2:	46bd      	mov	sp, r7
 8009fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe8:	4770      	bx	lr

08009fea <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8009fea:	b580      	push	{r7, lr}
 8009fec:	b086      	sub	sp, #24
 8009fee:	af00      	add	r7, sp, #0
 8009ff0:	60f8      	str	r0, [r7, #12]
 8009ff2:	607a      	str	r2, [r7, #4]
 8009ff4:	603b      	str	r3, [r7, #0]
 8009ff6:	460b      	mov	r3, r1
 8009ff8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009ffa:	7afb      	ldrb	r3, [r7, #11]
 8009ffc:	f003 020f 	and.w	r2, r3, #15
 800a000:	4613      	mov	r3, r2
 800a002:	00db      	lsls	r3, r3, #3
 800a004:	4413      	add	r3, r2
 800a006:	009b      	lsls	r3, r3, #2
 800a008:	3310      	adds	r3, #16
 800a00a:	68fa      	ldr	r2, [r7, #12]
 800a00c:	4413      	add	r3, r2
 800a00e:	3304      	adds	r3, #4
 800a010:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800a012:	697b      	ldr	r3, [r7, #20]
 800a014:	687a      	ldr	r2, [r7, #4]
 800a016:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800a018:	697b      	ldr	r3, [r7, #20]
 800a01a:	683a      	ldr	r2, [r7, #0]
 800a01c:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800a01e:	697b      	ldr	r3, [r7, #20]
 800a020:	2200      	movs	r2, #0
 800a022:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800a024:	697b      	ldr	r3, [r7, #20]
 800a026:	2201      	movs	r2, #1
 800a028:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a02a:	7afb      	ldrb	r3, [r7, #11]
 800a02c:	f003 030f 	and.w	r3, r3, #15
 800a030:	b2da      	uxtb	r2, r3
 800a032:	697b      	ldr	r3, [r7, #20]
 800a034:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	799b      	ldrb	r3, [r3, #6]
 800a03a:	2b01      	cmp	r3, #1
 800a03c:	d102      	bne.n	800a044 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800a03e:	687a      	ldr	r2, [r7, #4]
 800a040:	697b      	ldr	r3, [r7, #20]
 800a042:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	6818      	ldr	r0, [r3, #0]
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	799b      	ldrb	r3, [r3, #6]
 800a04c:	461a      	mov	r2, r3
 800a04e:	6979      	ldr	r1, [r7, #20]
 800a050:	f007 fa7a 	bl	8011548 <USB_EPStartXfer>

  return HAL_OK;
 800a054:	2300      	movs	r3, #0
}
 800a056:	4618      	mov	r0, r3
 800a058:	3718      	adds	r7, #24
 800a05a:	46bd      	mov	sp, r7
 800a05c:	bd80      	pop	{r7, pc}

0800a05e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a05e:	b580      	push	{r7, lr}
 800a060:	b084      	sub	sp, #16
 800a062:	af00      	add	r7, sp, #0
 800a064:	6078      	str	r0, [r7, #4]
 800a066:	460b      	mov	r3, r1
 800a068:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800a06a:	78fb      	ldrb	r3, [r7, #3]
 800a06c:	f003 030f 	and.w	r3, r3, #15
 800a070:	687a      	ldr	r2, [r7, #4]
 800a072:	7912      	ldrb	r2, [r2, #4]
 800a074:	4293      	cmp	r3, r2
 800a076:	d901      	bls.n	800a07c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800a078:	2301      	movs	r3, #1
 800a07a:	e04f      	b.n	800a11c <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800a07c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a080:	2b00      	cmp	r3, #0
 800a082:	da0f      	bge.n	800a0a4 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a084:	78fb      	ldrb	r3, [r7, #3]
 800a086:	f003 020f 	and.w	r2, r3, #15
 800a08a:	4613      	mov	r3, r2
 800a08c:	00db      	lsls	r3, r3, #3
 800a08e:	4413      	add	r3, r2
 800a090:	009b      	lsls	r3, r3, #2
 800a092:	3310      	adds	r3, #16
 800a094:	687a      	ldr	r2, [r7, #4]
 800a096:	4413      	add	r3, r2
 800a098:	3304      	adds	r3, #4
 800a09a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	2201      	movs	r2, #1
 800a0a0:	705a      	strb	r2, [r3, #1]
 800a0a2:	e00d      	b.n	800a0c0 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800a0a4:	78fa      	ldrb	r2, [r7, #3]
 800a0a6:	4613      	mov	r3, r2
 800a0a8:	00db      	lsls	r3, r3, #3
 800a0aa:	4413      	add	r3, r2
 800a0ac:	009b      	lsls	r3, r3, #2
 800a0ae:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800a0b2:	687a      	ldr	r2, [r7, #4]
 800a0b4:	4413      	add	r3, r2
 800a0b6:	3304      	adds	r3, #4
 800a0b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	2200      	movs	r2, #0
 800a0be:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	2201      	movs	r2, #1
 800a0c4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a0c6:	78fb      	ldrb	r3, [r7, #3]
 800a0c8:	f003 030f 	and.w	r3, r3, #15
 800a0cc:	b2da      	uxtb	r2, r3
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800a0d8:	2b01      	cmp	r3, #1
 800a0da:	d101      	bne.n	800a0e0 <HAL_PCD_EP_SetStall+0x82>
 800a0dc:	2302      	movs	r3, #2
 800a0de:	e01d      	b.n	800a11c <HAL_PCD_EP_SetStall+0xbe>
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	2201      	movs	r2, #1
 800a0e4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	68f9      	ldr	r1, [r7, #12]
 800a0ee:	4618      	mov	r0, r3
 800a0f0:	f007 fe0a 	bl	8011d08 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800a0f4:	78fb      	ldrb	r3, [r7, #3]
 800a0f6:	f003 030f 	and.w	r3, r3, #15
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d109      	bne.n	800a112 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	6818      	ldr	r0, [r3, #0]
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	7999      	ldrb	r1, [r3, #6]
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800a10c:	461a      	mov	r2, r3
 800a10e:	f007 fffd 	bl	801210c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	2200      	movs	r2, #0
 800a116:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800a11a:	2300      	movs	r3, #0
}
 800a11c:	4618      	mov	r0, r3
 800a11e:	3710      	adds	r7, #16
 800a120:	46bd      	mov	sp, r7
 800a122:	bd80      	pop	{r7, pc}

0800a124 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a124:	b580      	push	{r7, lr}
 800a126:	b084      	sub	sp, #16
 800a128:	af00      	add	r7, sp, #0
 800a12a:	6078      	str	r0, [r7, #4]
 800a12c:	460b      	mov	r3, r1
 800a12e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800a130:	78fb      	ldrb	r3, [r7, #3]
 800a132:	f003 030f 	and.w	r3, r3, #15
 800a136:	687a      	ldr	r2, [r7, #4]
 800a138:	7912      	ldrb	r2, [r2, #4]
 800a13a:	4293      	cmp	r3, r2
 800a13c:	d901      	bls.n	800a142 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800a13e:	2301      	movs	r3, #1
 800a140:	e042      	b.n	800a1c8 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800a142:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a146:	2b00      	cmp	r3, #0
 800a148:	da0f      	bge.n	800a16a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a14a:	78fb      	ldrb	r3, [r7, #3]
 800a14c:	f003 020f 	and.w	r2, r3, #15
 800a150:	4613      	mov	r3, r2
 800a152:	00db      	lsls	r3, r3, #3
 800a154:	4413      	add	r3, r2
 800a156:	009b      	lsls	r3, r3, #2
 800a158:	3310      	adds	r3, #16
 800a15a:	687a      	ldr	r2, [r7, #4]
 800a15c:	4413      	add	r3, r2
 800a15e:	3304      	adds	r3, #4
 800a160:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	2201      	movs	r2, #1
 800a166:	705a      	strb	r2, [r3, #1]
 800a168:	e00f      	b.n	800a18a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a16a:	78fb      	ldrb	r3, [r7, #3]
 800a16c:	f003 020f 	and.w	r2, r3, #15
 800a170:	4613      	mov	r3, r2
 800a172:	00db      	lsls	r3, r3, #3
 800a174:	4413      	add	r3, r2
 800a176:	009b      	lsls	r3, r3, #2
 800a178:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800a17c:	687a      	ldr	r2, [r7, #4]
 800a17e:	4413      	add	r3, r2
 800a180:	3304      	adds	r3, #4
 800a182:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	2200      	movs	r2, #0
 800a188:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	2200      	movs	r2, #0
 800a18e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a190:	78fb      	ldrb	r3, [r7, #3]
 800a192:	f003 030f 	and.w	r3, r3, #15
 800a196:	b2da      	uxtb	r2, r3
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800a1a2:	2b01      	cmp	r3, #1
 800a1a4:	d101      	bne.n	800a1aa <HAL_PCD_EP_ClrStall+0x86>
 800a1a6:	2302      	movs	r3, #2
 800a1a8:	e00e      	b.n	800a1c8 <HAL_PCD_EP_ClrStall+0xa4>
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	2201      	movs	r2, #1
 800a1ae:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	68f9      	ldr	r1, [r7, #12]
 800a1b8:	4618      	mov	r0, r3
 800a1ba:	f007 fe13 	bl	8011de4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	2200      	movs	r2, #0
 800a1c2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800a1c6:	2300      	movs	r3, #0
}
 800a1c8:	4618      	mov	r0, r3
 800a1ca:	3710      	adds	r7, #16
 800a1cc:	46bd      	mov	sp, r7
 800a1ce:	bd80      	pop	{r7, pc}

0800a1d0 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a1d0:	b580      	push	{r7, lr}
 800a1d2:	b084      	sub	sp, #16
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	6078      	str	r0, [r7, #4]
 800a1d8:	460b      	mov	r3, r1
 800a1da:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800a1dc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	da0c      	bge.n	800a1fe <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a1e4:	78fb      	ldrb	r3, [r7, #3]
 800a1e6:	f003 020f 	and.w	r2, r3, #15
 800a1ea:	4613      	mov	r3, r2
 800a1ec:	00db      	lsls	r3, r3, #3
 800a1ee:	4413      	add	r3, r2
 800a1f0:	009b      	lsls	r3, r3, #2
 800a1f2:	3310      	adds	r3, #16
 800a1f4:	687a      	ldr	r2, [r7, #4]
 800a1f6:	4413      	add	r3, r2
 800a1f8:	3304      	adds	r3, #4
 800a1fa:	60fb      	str	r3, [r7, #12]
 800a1fc:	e00c      	b.n	800a218 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a1fe:	78fb      	ldrb	r3, [r7, #3]
 800a200:	f003 020f 	and.w	r2, r3, #15
 800a204:	4613      	mov	r3, r2
 800a206:	00db      	lsls	r3, r3, #3
 800a208:	4413      	add	r3, r2
 800a20a:	009b      	lsls	r3, r3, #2
 800a20c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800a210:	687a      	ldr	r2, [r7, #4]
 800a212:	4413      	add	r3, r2
 800a214:	3304      	adds	r3, #4
 800a216:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	68f9      	ldr	r1, [r7, #12]
 800a21e:	4618      	mov	r0, r3
 800a220:	f007 fc32 	bl	8011a88 <USB_EPStopXfer>
 800a224:	4603      	mov	r3, r0
 800a226:	72fb      	strb	r3, [r7, #11]

  return ret;
 800a228:	7afb      	ldrb	r3, [r7, #11]
}
 800a22a:	4618      	mov	r0, r3
 800a22c:	3710      	adds	r7, #16
 800a22e:	46bd      	mov	sp, r7
 800a230:	bd80      	pop	{r7, pc}

0800a232 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800a232:	b580      	push	{r7, lr}
 800a234:	b08a      	sub	sp, #40	@ 0x28
 800a236:	af02      	add	r7, sp, #8
 800a238:	6078      	str	r0, [r7, #4]
 800a23a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a242:	697b      	ldr	r3, [r7, #20]
 800a244:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800a246:	683a      	ldr	r2, [r7, #0]
 800a248:	4613      	mov	r3, r2
 800a24a:	00db      	lsls	r3, r3, #3
 800a24c:	4413      	add	r3, r2
 800a24e:	009b      	lsls	r3, r3, #2
 800a250:	3310      	adds	r3, #16
 800a252:	687a      	ldr	r2, [r7, #4]
 800a254:	4413      	add	r3, r2
 800a256:	3304      	adds	r3, #4
 800a258:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	695a      	ldr	r2, [r3, #20]
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	691b      	ldr	r3, [r3, #16]
 800a262:	429a      	cmp	r2, r3
 800a264:	d901      	bls.n	800a26a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800a266:	2301      	movs	r3, #1
 800a268:	e06b      	b.n	800a342 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	691a      	ldr	r2, [r3, #16]
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	695b      	ldr	r3, [r3, #20]
 800a272:	1ad3      	subs	r3, r2, r3
 800a274:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	689b      	ldr	r3, [r3, #8]
 800a27a:	69fa      	ldr	r2, [r7, #28]
 800a27c:	429a      	cmp	r2, r3
 800a27e:	d902      	bls.n	800a286 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	689b      	ldr	r3, [r3, #8]
 800a284:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800a286:	69fb      	ldr	r3, [r7, #28]
 800a288:	3303      	adds	r3, #3
 800a28a:	089b      	lsrs	r3, r3, #2
 800a28c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800a28e:	e02a      	b.n	800a2e6 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	691a      	ldr	r2, [r3, #16]
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	695b      	ldr	r3, [r3, #20]
 800a298:	1ad3      	subs	r3, r2, r3
 800a29a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	689b      	ldr	r3, [r3, #8]
 800a2a0:	69fa      	ldr	r2, [r7, #28]
 800a2a2:	429a      	cmp	r2, r3
 800a2a4:	d902      	bls.n	800a2ac <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	689b      	ldr	r3, [r3, #8]
 800a2aa:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800a2ac:	69fb      	ldr	r3, [r7, #28]
 800a2ae:	3303      	adds	r3, #3
 800a2b0:	089b      	lsrs	r3, r3, #2
 800a2b2:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	68d9      	ldr	r1, [r3, #12]
 800a2b8:	683b      	ldr	r3, [r7, #0]
 800a2ba:	b2da      	uxtb	r2, r3
 800a2bc:	69fb      	ldr	r3, [r7, #28]
 800a2be:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800a2c4:	9300      	str	r3, [sp, #0]
 800a2c6:	4603      	mov	r3, r0
 800a2c8:	6978      	ldr	r0, [r7, #20]
 800a2ca:	f007 fc87 	bl	8011bdc <USB_WritePacket>

    ep->xfer_buff  += len;
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	68da      	ldr	r2, [r3, #12]
 800a2d2:	69fb      	ldr	r3, [r7, #28]
 800a2d4:	441a      	add	r2, r3
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	695a      	ldr	r2, [r3, #20]
 800a2de:	69fb      	ldr	r3, [r7, #28]
 800a2e0:	441a      	add	r2, r3
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800a2e6:	683b      	ldr	r3, [r7, #0]
 800a2e8:	015a      	lsls	r2, r3, #5
 800a2ea:	693b      	ldr	r3, [r7, #16]
 800a2ec:	4413      	add	r3, r2
 800a2ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a2f2:	699b      	ldr	r3, [r3, #24]
 800a2f4:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800a2f6:	69ba      	ldr	r2, [r7, #24]
 800a2f8:	429a      	cmp	r2, r3
 800a2fa:	d809      	bhi.n	800a310 <PCD_WriteEmptyTxFifo+0xde>
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	695a      	ldr	r2, [r3, #20]
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800a304:	429a      	cmp	r2, r3
 800a306:	d203      	bcs.n	800a310 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	691b      	ldr	r3, [r3, #16]
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d1bf      	bne.n	800a290 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	691a      	ldr	r2, [r3, #16]
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	695b      	ldr	r3, [r3, #20]
 800a318:	429a      	cmp	r2, r3
 800a31a:	d811      	bhi.n	800a340 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800a31c:	683b      	ldr	r3, [r7, #0]
 800a31e:	f003 030f 	and.w	r3, r3, #15
 800a322:	2201      	movs	r2, #1
 800a324:	fa02 f303 	lsl.w	r3, r2, r3
 800a328:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800a32a:	693b      	ldr	r3, [r7, #16]
 800a32c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a330:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a332:	68bb      	ldr	r3, [r7, #8]
 800a334:	43db      	mvns	r3, r3
 800a336:	6939      	ldr	r1, [r7, #16]
 800a338:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a33c:	4013      	ands	r3, r2
 800a33e:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800a340:	2300      	movs	r3, #0
}
 800a342:	4618      	mov	r0, r3
 800a344:	3720      	adds	r7, #32
 800a346:	46bd      	mov	sp, r7
 800a348:	bd80      	pop	{r7, pc}
	...

0800a34c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800a34c:	b580      	push	{r7, lr}
 800a34e:	b088      	sub	sp, #32
 800a350:	af00      	add	r7, sp, #0
 800a352:	6078      	str	r0, [r7, #4]
 800a354:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a35c:	69fb      	ldr	r3, [r7, #28]
 800a35e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800a360:	69fb      	ldr	r3, [r7, #28]
 800a362:	333c      	adds	r3, #60	@ 0x3c
 800a364:	3304      	adds	r3, #4
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800a36a:	683b      	ldr	r3, [r7, #0]
 800a36c:	015a      	lsls	r2, r3, #5
 800a36e:	69bb      	ldr	r3, [r7, #24]
 800a370:	4413      	add	r3, r2
 800a372:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a376:	689b      	ldr	r3, [r3, #8]
 800a378:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	799b      	ldrb	r3, [r3, #6]
 800a37e:	2b01      	cmp	r3, #1
 800a380:	d17b      	bne.n	800a47a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800a382:	693b      	ldr	r3, [r7, #16]
 800a384:	f003 0308 	and.w	r3, r3, #8
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d015      	beq.n	800a3b8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a38c:	697b      	ldr	r3, [r7, #20]
 800a38e:	4a61      	ldr	r2, [pc, #388]	@ (800a514 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800a390:	4293      	cmp	r3, r2
 800a392:	f240 80b9 	bls.w	800a508 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800a396:	693b      	ldr	r3, [r7, #16]
 800a398:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	f000 80b3 	beq.w	800a508 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a3a2:	683b      	ldr	r3, [r7, #0]
 800a3a4:	015a      	lsls	r2, r3, #5
 800a3a6:	69bb      	ldr	r3, [r7, #24]
 800a3a8:	4413      	add	r3, r2
 800a3aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a3ae:	461a      	mov	r2, r3
 800a3b0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a3b4:	6093      	str	r3, [r2, #8]
 800a3b6:	e0a7      	b.n	800a508 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800a3b8:	693b      	ldr	r3, [r7, #16]
 800a3ba:	f003 0320 	and.w	r3, r3, #32
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d009      	beq.n	800a3d6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800a3c2:	683b      	ldr	r3, [r7, #0]
 800a3c4:	015a      	lsls	r2, r3, #5
 800a3c6:	69bb      	ldr	r3, [r7, #24]
 800a3c8:	4413      	add	r3, r2
 800a3ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a3ce:	461a      	mov	r2, r3
 800a3d0:	2320      	movs	r3, #32
 800a3d2:	6093      	str	r3, [r2, #8]
 800a3d4:	e098      	b.n	800a508 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800a3d6:	693b      	ldr	r3, [r7, #16]
 800a3d8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	f040 8093 	bne.w	800a508 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a3e2:	697b      	ldr	r3, [r7, #20]
 800a3e4:	4a4b      	ldr	r2, [pc, #300]	@ (800a514 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800a3e6:	4293      	cmp	r3, r2
 800a3e8:	d90f      	bls.n	800a40a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800a3ea:	693b      	ldr	r3, [r7, #16]
 800a3ec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d00a      	beq.n	800a40a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a3f4:	683b      	ldr	r3, [r7, #0]
 800a3f6:	015a      	lsls	r2, r3, #5
 800a3f8:	69bb      	ldr	r3, [r7, #24]
 800a3fa:	4413      	add	r3, r2
 800a3fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a400:	461a      	mov	r2, r3
 800a402:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a406:	6093      	str	r3, [r2, #8]
 800a408:	e07e      	b.n	800a508 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800a40a:	683a      	ldr	r2, [r7, #0]
 800a40c:	4613      	mov	r3, r2
 800a40e:	00db      	lsls	r3, r3, #3
 800a410:	4413      	add	r3, r2
 800a412:	009b      	lsls	r3, r3, #2
 800a414:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800a418:	687a      	ldr	r2, [r7, #4]
 800a41a:	4413      	add	r3, r2
 800a41c:	3304      	adds	r3, #4
 800a41e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	6a1a      	ldr	r2, [r3, #32]
 800a424:	683b      	ldr	r3, [r7, #0]
 800a426:	0159      	lsls	r1, r3, #5
 800a428:	69bb      	ldr	r3, [r7, #24]
 800a42a:	440b      	add	r3, r1
 800a42c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a430:	691b      	ldr	r3, [r3, #16]
 800a432:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a436:	1ad2      	subs	r2, r2, r3
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 800a43c:	683b      	ldr	r3, [r7, #0]
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d114      	bne.n	800a46c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	691b      	ldr	r3, [r3, #16]
 800a446:	2b00      	cmp	r3, #0
 800a448:	d109      	bne.n	800a45e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	6818      	ldr	r0, [r3, #0]
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800a454:	461a      	mov	r2, r3
 800a456:	2101      	movs	r1, #1
 800a458:	f007 fe58 	bl	801210c <USB_EP0_OutStart>
 800a45c:	e006      	b.n	800a46c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	68da      	ldr	r2, [r3, #12]
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	695b      	ldr	r3, [r3, #20]
 800a466:	441a      	add	r2, r3
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800a46c:	683b      	ldr	r3, [r7, #0]
 800a46e:	b2db      	uxtb	r3, r3
 800a470:	4619      	mov	r1, r3
 800a472:	6878      	ldr	r0, [r7, #4]
 800a474:	f00a f93e 	bl	80146f4 <HAL_PCD_DataOutStageCallback>
 800a478:	e046      	b.n	800a508 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800a47a:	697b      	ldr	r3, [r7, #20]
 800a47c:	4a26      	ldr	r2, [pc, #152]	@ (800a518 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800a47e:	4293      	cmp	r3, r2
 800a480:	d124      	bne.n	800a4cc <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800a482:	693b      	ldr	r3, [r7, #16]
 800a484:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d00a      	beq.n	800a4a2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a48c:	683b      	ldr	r3, [r7, #0]
 800a48e:	015a      	lsls	r2, r3, #5
 800a490:	69bb      	ldr	r3, [r7, #24]
 800a492:	4413      	add	r3, r2
 800a494:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a498:	461a      	mov	r2, r3
 800a49a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a49e:	6093      	str	r3, [r2, #8]
 800a4a0:	e032      	b.n	800a508 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800a4a2:	693b      	ldr	r3, [r7, #16]
 800a4a4:	f003 0320 	and.w	r3, r3, #32
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d008      	beq.n	800a4be <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800a4ac:	683b      	ldr	r3, [r7, #0]
 800a4ae:	015a      	lsls	r2, r3, #5
 800a4b0:	69bb      	ldr	r3, [r7, #24]
 800a4b2:	4413      	add	r3, r2
 800a4b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a4b8:	461a      	mov	r2, r3
 800a4ba:	2320      	movs	r3, #32
 800a4bc:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800a4be:	683b      	ldr	r3, [r7, #0]
 800a4c0:	b2db      	uxtb	r3, r3
 800a4c2:	4619      	mov	r1, r3
 800a4c4:	6878      	ldr	r0, [r7, #4]
 800a4c6:	f00a f915 	bl	80146f4 <HAL_PCD_DataOutStageCallback>
 800a4ca:	e01d      	b.n	800a508 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800a4cc:	683b      	ldr	r3, [r7, #0]
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d114      	bne.n	800a4fc <PCD_EP_OutXfrComplete_int+0x1b0>
 800a4d2:	6879      	ldr	r1, [r7, #4]
 800a4d4:	683a      	ldr	r2, [r7, #0]
 800a4d6:	4613      	mov	r3, r2
 800a4d8:	00db      	lsls	r3, r3, #3
 800a4da:	4413      	add	r3, r2
 800a4dc:	009b      	lsls	r3, r3, #2
 800a4de:	440b      	add	r3, r1
 800a4e0:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d108      	bne.n	800a4fc <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	6818      	ldr	r0, [r3, #0]
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800a4f4:	461a      	mov	r2, r3
 800a4f6:	2100      	movs	r1, #0
 800a4f8:	f007 fe08 	bl	801210c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800a4fc:	683b      	ldr	r3, [r7, #0]
 800a4fe:	b2db      	uxtb	r3, r3
 800a500:	4619      	mov	r1, r3
 800a502:	6878      	ldr	r0, [r7, #4]
 800a504:	f00a f8f6 	bl	80146f4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800a508:	2300      	movs	r3, #0
}
 800a50a:	4618      	mov	r0, r3
 800a50c:	3720      	adds	r7, #32
 800a50e:	46bd      	mov	sp, r7
 800a510:	bd80      	pop	{r7, pc}
 800a512:	bf00      	nop
 800a514:	4f54300a 	.word	0x4f54300a
 800a518:	4f54310a 	.word	0x4f54310a

0800a51c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800a51c:	b580      	push	{r7, lr}
 800a51e:	b086      	sub	sp, #24
 800a520:	af00      	add	r7, sp, #0
 800a522:	6078      	str	r0, [r7, #4]
 800a524:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a52c:	697b      	ldr	r3, [r7, #20]
 800a52e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800a530:	697b      	ldr	r3, [r7, #20]
 800a532:	333c      	adds	r3, #60	@ 0x3c
 800a534:	3304      	adds	r3, #4
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800a53a:	683b      	ldr	r3, [r7, #0]
 800a53c:	015a      	lsls	r2, r3, #5
 800a53e:	693b      	ldr	r3, [r7, #16]
 800a540:	4413      	add	r3, r2
 800a542:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a546:	689b      	ldr	r3, [r3, #8]
 800a548:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	4a15      	ldr	r2, [pc, #84]	@ (800a5a4 <PCD_EP_OutSetupPacket_int+0x88>)
 800a54e:	4293      	cmp	r3, r2
 800a550:	d90e      	bls.n	800a570 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800a552:	68bb      	ldr	r3, [r7, #8]
 800a554:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d009      	beq.n	800a570 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a55c:	683b      	ldr	r3, [r7, #0]
 800a55e:	015a      	lsls	r2, r3, #5
 800a560:	693b      	ldr	r3, [r7, #16]
 800a562:	4413      	add	r3, r2
 800a564:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a568:	461a      	mov	r2, r3
 800a56a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a56e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800a570:	6878      	ldr	r0, [r7, #4]
 800a572:	f00a f8ad 	bl	80146d0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	4a0a      	ldr	r2, [pc, #40]	@ (800a5a4 <PCD_EP_OutSetupPacket_int+0x88>)
 800a57a:	4293      	cmp	r3, r2
 800a57c:	d90c      	bls.n	800a598 <PCD_EP_OutSetupPacket_int+0x7c>
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	799b      	ldrb	r3, [r3, #6]
 800a582:	2b01      	cmp	r3, #1
 800a584:	d108      	bne.n	800a598 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	6818      	ldr	r0, [r3, #0]
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800a590:	461a      	mov	r2, r3
 800a592:	2101      	movs	r1, #1
 800a594:	f007 fdba 	bl	801210c <USB_EP0_OutStart>
  }

  return HAL_OK;
 800a598:	2300      	movs	r3, #0
}
 800a59a:	4618      	mov	r0, r3
 800a59c:	3718      	adds	r7, #24
 800a59e:	46bd      	mov	sp, r7
 800a5a0:	bd80      	pop	{r7, pc}
 800a5a2:	bf00      	nop
 800a5a4:	4f54300a 	.word	0x4f54300a

0800a5a8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800a5a8:	b480      	push	{r7}
 800a5aa:	b085      	sub	sp, #20
 800a5ac:	af00      	add	r7, sp, #0
 800a5ae:	6078      	str	r0, [r7, #4]
 800a5b0:	460b      	mov	r3, r1
 800a5b2:	70fb      	strb	r3, [r7, #3]
 800a5b4:	4613      	mov	r3, r2
 800a5b6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a5be:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800a5c0:	78fb      	ldrb	r3, [r7, #3]
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d107      	bne.n	800a5d6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800a5c6:	883b      	ldrh	r3, [r7, #0]
 800a5c8:	0419      	lsls	r1, r3, #16
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	68ba      	ldr	r2, [r7, #8]
 800a5d0:	430a      	orrs	r2, r1
 800a5d2:	629a      	str	r2, [r3, #40]	@ 0x28
 800a5d4:	e028      	b.n	800a628 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a5dc:	0c1b      	lsrs	r3, r3, #16
 800a5de:	68ba      	ldr	r2, [r7, #8]
 800a5e0:	4413      	add	r3, r2
 800a5e2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800a5e4:	2300      	movs	r3, #0
 800a5e6:	73fb      	strb	r3, [r7, #15]
 800a5e8:	e00d      	b.n	800a606 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	681a      	ldr	r2, [r3, #0]
 800a5ee:	7bfb      	ldrb	r3, [r7, #15]
 800a5f0:	3340      	adds	r3, #64	@ 0x40
 800a5f2:	009b      	lsls	r3, r3, #2
 800a5f4:	4413      	add	r3, r2
 800a5f6:	685b      	ldr	r3, [r3, #4]
 800a5f8:	0c1b      	lsrs	r3, r3, #16
 800a5fa:	68ba      	ldr	r2, [r7, #8]
 800a5fc:	4413      	add	r3, r2
 800a5fe:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800a600:	7bfb      	ldrb	r3, [r7, #15]
 800a602:	3301      	adds	r3, #1
 800a604:	73fb      	strb	r3, [r7, #15]
 800a606:	7bfa      	ldrb	r2, [r7, #15]
 800a608:	78fb      	ldrb	r3, [r7, #3]
 800a60a:	3b01      	subs	r3, #1
 800a60c:	429a      	cmp	r2, r3
 800a60e:	d3ec      	bcc.n	800a5ea <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800a610:	883b      	ldrh	r3, [r7, #0]
 800a612:	0418      	lsls	r0, r3, #16
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	6819      	ldr	r1, [r3, #0]
 800a618:	78fb      	ldrb	r3, [r7, #3]
 800a61a:	3b01      	subs	r3, #1
 800a61c:	68ba      	ldr	r2, [r7, #8]
 800a61e:	4302      	orrs	r2, r0
 800a620:	3340      	adds	r3, #64	@ 0x40
 800a622:	009b      	lsls	r3, r3, #2
 800a624:	440b      	add	r3, r1
 800a626:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800a628:	2300      	movs	r3, #0
}
 800a62a:	4618      	mov	r0, r3
 800a62c:	3714      	adds	r7, #20
 800a62e:	46bd      	mov	sp, r7
 800a630:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a634:	4770      	bx	lr

0800a636 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800a636:	b480      	push	{r7}
 800a638:	b083      	sub	sp, #12
 800a63a:	af00      	add	r7, sp, #0
 800a63c:	6078      	str	r0, [r7, #4]
 800a63e:	460b      	mov	r3, r1
 800a640:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	887a      	ldrh	r2, [r7, #2]
 800a648:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800a64a:	2300      	movs	r3, #0
}
 800a64c:	4618      	mov	r0, r3
 800a64e:	370c      	adds	r7, #12
 800a650:	46bd      	mov	sp, r7
 800a652:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a656:	4770      	bx	lr

0800a658 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800a658:	b480      	push	{r7}
 800a65a:	b085      	sub	sp, #20
 800a65c:	af00      	add	r7, sp, #0
 800a65e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	2201      	movs	r2, #1
 800a66a:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	2200      	movs	r2, #0
 800a672:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	699b      	ldr	r3, [r3, #24]
 800a67a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a686:	4b05      	ldr	r3, [pc, #20]	@ (800a69c <HAL_PCDEx_ActivateLPM+0x44>)
 800a688:	4313      	orrs	r3, r2
 800a68a:	68fa      	ldr	r2, [r7, #12]
 800a68c:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800a68e:	2300      	movs	r3, #0
}
 800a690:	4618      	mov	r0, r3
 800a692:	3714      	adds	r7, #20
 800a694:	46bd      	mov	sp, r7
 800a696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a69a:	4770      	bx	lr
 800a69c:	10000003 	.word	0x10000003

0800a6a0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800a6a0:	b480      	push	{r7}
 800a6a2:	b083      	sub	sp, #12
 800a6a4:	af00      	add	r7, sp, #0
 800a6a6:	6078      	str	r0, [r7, #4]
 800a6a8:	460b      	mov	r3, r1
 800a6aa:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800a6ac:	bf00      	nop
 800a6ae:	370c      	adds	r7, #12
 800a6b0:	46bd      	mov	sp, r7
 800a6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b6:	4770      	bx	lr

0800a6b8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800a6b8:	b580      	push	{r7, lr}
 800a6ba:	b084      	sub	sp, #16
 800a6bc:	af00      	add	r7, sp, #0
 800a6be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800a6c0:	4b19      	ldr	r3, [pc, #100]	@ (800a728 <HAL_PWREx_ConfigSupply+0x70>)
 800a6c2:	68db      	ldr	r3, [r3, #12]
 800a6c4:	f003 0304 	and.w	r3, r3, #4
 800a6c8:	2b04      	cmp	r3, #4
 800a6ca:	d00a      	beq.n	800a6e2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800a6cc:	4b16      	ldr	r3, [pc, #88]	@ (800a728 <HAL_PWREx_ConfigSupply+0x70>)
 800a6ce:	68db      	ldr	r3, [r3, #12]
 800a6d0:	f003 0307 	and.w	r3, r3, #7
 800a6d4:	687a      	ldr	r2, [r7, #4]
 800a6d6:	429a      	cmp	r2, r3
 800a6d8:	d001      	beq.n	800a6de <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800a6da:	2301      	movs	r3, #1
 800a6dc:	e01f      	b.n	800a71e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800a6de:	2300      	movs	r3, #0
 800a6e0:	e01d      	b.n	800a71e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800a6e2:	4b11      	ldr	r3, [pc, #68]	@ (800a728 <HAL_PWREx_ConfigSupply+0x70>)
 800a6e4:	68db      	ldr	r3, [r3, #12]
 800a6e6:	f023 0207 	bic.w	r2, r3, #7
 800a6ea:	490f      	ldr	r1, [pc, #60]	@ (800a728 <HAL_PWREx_ConfigSupply+0x70>)
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	4313      	orrs	r3, r2
 800a6f0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800a6f2:	f7fa f97d 	bl	80049f0 <HAL_GetTick>
 800a6f6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a6f8:	e009      	b.n	800a70e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800a6fa:	f7fa f979 	bl	80049f0 <HAL_GetTick>
 800a6fe:	4602      	mov	r2, r0
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	1ad3      	subs	r3, r2, r3
 800a704:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a708:	d901      	bls.n	800a70e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800a70a:	2301      	movs	r3, #1
 800a70c:	e007      	b.n	800a71e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a70e:	4b06      	ldr	r3, [pc, #24]	@ (800a728 <HAL_PWREx_ConfigSupply+0x70>)
 800a710:	685b      	ldr	r3, [r3, #4]
 800a712:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a716:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a71a:	d1ee      	bne.n	800a6fa <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800a71c:	2300      	movs	r3, #0
}
 800a71e:	4618      	mov	r0, r3
 800a720:	3710      	adds	r7, #16
 800a722:	46bd      	mov	sp, r7
 800a724:	bd80      	pop	{r7, pc}
 800a726:	bf00      	nop
 800a728:	58024800 	.word	0x58024800

0800a72c <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800a72c:	b480      	push	{r7}
 800a72e:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800a730:	4b05      	ldr	r3, [pc, #20]	@ (800a748 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800a732:	68db      	ldr	r3, [r3, #12]
 800a734:	4a04      	ldr	r2, [pc, #16]	@ (800a748 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800a736:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800a73a:	60d3      	str	r3, [r2, #12]
}
 800a73c:	bf00      	nop
 800a73e:	46bd      	mov	sp, r7
 800a740:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a744:	4770      	bx	lr
 800a746:	bf00      	nop
 800a748:	58024800 	.word	0x58024800

0800a74c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a74c:	b580      	push	{r7, lr}
 800a74e:	b08c      	sub	sp, #48	@ 0x30
 800a750:	af00      	add	r7, sp, #0
 800a752:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	2b00      	cmp	r3, #0
 800a758:	d101      	bne.n	800a75e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a75a:	2301      	movs	r3, #1
 800a75c:	e3c8      	b.n	800aef0 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	f003 0301 	and.w	r3, r3, #1
 800a766:	2b00      	cmp	r3, #0
 800a768:	f000 8087 	beq.w	800a87a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a76c:	4b88      	ldr	r3, [pc, #544]	@ (800a990 <HAL_RCC_OscConfig+0x244>)
 800a76e:	691b      	ldr	r3, [r3, #16]
 800a770:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a774:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a776:	4b86      	ldr	r3, [pc, #536]	@ (800a990 <HAL_RCC_OscConfig+0x244>)
 800a778:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a77a:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800a77c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a77e:	2b10      	cmp	r3, #16
 800a780:	d007      	beq.n	800a792 <HAL_RCC_OscConfig+0x46>
 800a782:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a784:	2b18      	cmp	r3, #24
 800a786:	d110      	bne.n	800a7aa <HAL_RCC_OscConfig+0x5e>
 800a788:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a78a:	f003 0303 	and.w	r3, r3, #3
 800a78e:	2b02      	cmp	r3, #2
 800a790:	d10b      	bne.n	800a7aa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a792:	4b7f      	ldr	r3, [pc, #508]	@ (800a990 <HAL_RCC_OscConfig+0x244>)
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d06c      	beq.n	800a878 <HAL_RCC_OscConfig+0x12c>
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	685b      	ldr	r3, [r3, #4]
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d168      	bne.n	800a878 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800a7a6:	2301      	movs	r3, #1
 800a7a8:	e3a2      	b.n	800aef0 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	685b      	ldr	r3, [r3, #4]
 800a7ae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a7b2:	d106      	bne.n	800a7c2 <HAL_RCC_OscConfig+0x76>
 800a7b4:	4b76      	ldr	r3, [pc, #472]	@ (800a990 <HAL_RCC_OscConfig+0x244>)
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	4a75      	ldr	r2, [pc, #468]	@ (800a990 <HAL_RCC_OscConfig+0x244>)
 800a7ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a7be:	6013      	str	r3, [r2, #0]
 800a7c0:	e02e      	b.n	800a820 <HAL_RCC_OscConfig+0xd4>
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	685b      	ldr	r3, [r3, #4]
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d10c      	bne.n	800a7e4 <HAL_RCC_OscConfig+0x98>
 800a7ca:	4b71      	ldr	r3, [pc, #452]	@ (800a990 <HAL_RCC_OscConfig+0x244>)
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	4a70      	ldr	r2, [pc, #448]	@ (800a990 <HAL_RCC_OscConfig+0x244>)
 800a7d0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a7d4:	6013      	str	r3, [r2, #0]
 800a7d6:	4b6e      	ldr	r3, [pc, #440]	@ (800a990 <HAL_RCC_OscConfig+0x244>)
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	4a6d      	ldr	r2, [pc, #436]	@ (800a990 <HAL_RCC_OscConfig+0x244>)
 800a7dc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a7e0:	6013      	str	r3, [r2, #0]
 800a7e2:	e01d      	b.n	800a820 <HAL_RCC_OscConfig+0xd4>
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	685b      	ldr	r3, [r3, #4]
 800a7e8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a7ec:	d10c      	bne.n	800a808 <HAL_RCC_OscConfig+0xbc>
 800a7ee:	4b68      	ldr	r3, [pc, #416]	@ (800a990 <HAL_RCC_OscConfig+0x244>)
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	4a67      	ldr	r2, [pc, #412]	@ (800a990 <HAL_RCC_OscConfig+0x244>)
 800a7f4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800a7f8:	6013      	str	r3, [r2, #0]
 800a7fa:	4b65      	ldr	r3, [pc, #404]	@ (800a990 <HAL_RCC_OscConfig+0x244>)
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	4a64      	ldr	r2, [pc, #400]	@ (800a990 <HAL_RCC_OscConfig+0x244>)
 800a800:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a804:	6013      	str	r3, [r2, #0]
 800a806:	e00b      	b.n	800a820 <HAL_RCC_OscConfig+0xd4>
 800a808:	4b61      	ldr	r3, [pc, #388]	@ (800a990 <HAL_RCC_OscConfig+0x244>)
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	4a60      	ldr	r2, [pc, #384]	@ (800a990 <HAL_RCC_OscConfig+0x244>)
 800a80e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a812:	6013      	str	r3, [r2, #0]
 800a814:	4b5e      	ldr	r3, [pc, #376]	@ (800a990 <HAL_RCC_OscConfig+0x244>)
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	4a5d      	ldr	r2, [pc, #372]	@ (800a990 <HAL_RCC_OscConfig+0x244>)
 800a81a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a81e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	685b      	ldr	r3, [r3, #4]
 800a824:	2b00      	cmp	r3, #0
 800a826:	d013      	beq.n	800a850 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a828:	f7fa f8e2 	bl	80049f0 <HAL_GetTick>
 800a82c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a82e:	e008      	b.n	800a842 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a830:	f7fa f8de 	bl	80049f0 <HAL_GetTick>
 800a834:	4602      	mov	r2, r0
 800a836:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a838:	1ad3      	subs	r3, r2, r3
 800a83a:	2b64      	cmp	r3, #100	@ 0x64
 800a83c:	d901      	bls.n	800a842 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800a83e:	2303      	movs	r3, #3
 800a840:	e356      	b.n	800aef0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a842:	4b53      	ldr	r3, [pc, #332]	@ (800a990 <HAL_RCC_OscConfig+0x244>)
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d0f0      	beq.n	800a830 <HAL_RCC_OscConfig+0xe4>
 800a84e:	e014      	b.n	800a87a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a850:	f7fa f8ce 	bl	80049f0 <HAL_GetTick>
 800a854:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a856:	e008      	b.n	800a86a <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a858:	f7fa f8ca 	bl	80049f0 <HAL_GetTick>
 800a85c:	4602      	mov	r2, r0
 800a85e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a860:	1ad3      	subs	r3, r2, r3
 800a862:	2b64      	cmp	r3, #100	@ 0x64
 800a864:	d901      	bls.n	800a86a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800a866:	2303      	movs	r3, #3
 800a868:	e342      	b.n	800aef0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a86a:	4b49      	ldr	r3, [pc, #292]	@ (800a990 <HAL_RCC_OscConfig+0x244>)
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a872:	2b00      	cmp	r3, #0
 800a874:	d1f0      	bne.n	800a858 <HAL_RCC_OscConfig+0x10c>
 800a876:	e000      	b.n	800a87a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a878:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	f003 0302 	and.w	r3, r3, #2
 800a882:	2b00      	cmp	r3, #0
 800a884:	f000 808c 	beq.w	800a9a0 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a888:	4b41      	ldr	r3, [pc, #260]	@ (800a990 <HAL_RCC_OscConfig+0x244>)
 800a88a:	691b      	ldr	r3, [r3, #16]
 800a88c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a890:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a892:	4b3f      	ldr	r3, [pc, #252]	@ (800a990 <HAL_RCC_OscConfig+0x244>)
 800a894:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a896:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800a898:	6a3b      	ldr	r3, [r7, #32]
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d007      	beq.n	800a8ae <HAL_RCC_OscConfig+0x162>
 800a89e:	6a3b      	ldr	r3, [r7, #32]
 800a8a0:	2b18      	cmp	r3, #24
 800a8a2:	d137      	bne.n	800a914 <HAL_RCC_OscConfig+0x1c8>
 800a8a4:	69fb      	ldr	r3, [r7, #28]
 800a8a6:	f003 0303 	and.w	r3, r3, #3
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d132      	bne.n	800a914 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a8ae:	4b38      	ldr	r3, [pc, #224]	@ (800a990 <HAL_RCC_OscConfig+0x244>)
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	f003 0304 	and.w	r3, r3, #4
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d005      	beq.n	800a8c6 <HAL_RCC_OscConfig+0x17a>
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	68db      	ldr	r3, [r3, #12]
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d101      	bne.n	800a8c6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800a8c2:	2301      	movs	r3, #1
 800a8c4:	e314      	b.n	800aef0 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a8c6:	4b32      	ldr	r3, [pc, #200]	@ (800a990 <HAL_RCC_OscConfig+0x244>)
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	f023 0219 	bic.w	r2, r3, #25
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	68db      	ldr	r3, [r3, #12]
 800a8d2:	492f      	ldr	r1, [pc, #188]	@ (800a990 <HAL_RCC_OscConfig+0x244>)
 800a8d4:	4313      	orrs	r3, r2
 800a8d6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a8d8:	f7fa f88a 	bl	80049f0 <HAL_GetTick>
 800a8dc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a8de:	e008      	b.n	800a8f2 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a8e0:	f7fa f886 	bl	80049f0 <HAL_GetTick>
 800a8e4:	4602      	mov	r2, r0
 800a8e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8e8:	1ad3      	subs	r3, r2, r3
 800a8ea:	2b02      	cmp	r3, #2
 800a8ec:	d901      	bls.n	800a8f2 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800a8ee:	2303      	movs	r3, #3
 800a8f0:	e2fe      	b.n	800aef0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a8f2:	4b27      	ldr	r3, [pc, #156]	@ (800a990 <HAL_RCC_OscConfig+0x244>)
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	f003 0304 	and.w	r3, r3, #4
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d0f0      	beq.n	800a8e0 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a8fe:	4b24      	ldr	r3, [pc, #144]	@ (800a990 <HAL_RCC_OscConfig+0x244>)
 800a900:	685b      	ldr	r3, [r3, #4]
 800a902:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	691b      	ldr	r3, [r3, #16]
 800a90a:	061b      	lsls	r3, r3, #24
 800a90c:	4920      	ldr	r1, [pc, #128]	@ (800a990 <HAL_RCC_OscConfig+0x244>)
 800a90e:	4313      	orrs	r3, r2
 800a910:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a912:	e045      	b.n	800a9a0 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	68db      	ldr	r3, [r3, #12]
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d026      	beq.n	800a96a <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a91c:	4b1c      	ldr	r3, [pc, #112]	@ (800a990 <HAL_RCC_OscConfig+0x244>)
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	f023 0219 	bic.w	r2, r3, #25
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	68db      	ldr	r3, [r3, #12]
 800a928:	4919      	ldr	r1, [pc, #100]	@ (800a990 <HAL_RCC_OscConfig+0x244>)
 800a92a:	4313      	orrs	r3, r2
 800a92c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a92e:	f7fa f85f 	bl	80049f0 <HAL_GetTick>
 800a932:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a934:	e008      	b.n	800a948 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a936:	f7fa f85b 	bl	80049f0 <HAL_GetTick>
 800a93a:	4602      	mov	r2, r0
 800a93c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a93e:	1ad3      	subs	r3, r2, r3
 800a940:	2b02      	cmp	r3, #2
 800a942:	d901      	bls.n	800a948 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800a944:	2303      	movs	r3, #3
 800a946:	e2d3      	b.n	800aef0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a948:	4b11      	ldr	r3, [pc, #68]	@ (800a990 <HAL_RCC_OscConfig+0x244>)
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	f003 0304 	and.w	r3, r3, #4
 800a950:	2b00      	cmp	r3, #0
 800a952:	d0f0      	beq.n	800a936 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a954:	4b0e      	ldr	r3, [pc, #56]	@ (800a990 <HAL_RCC_OscConfig+0x244>)
 800a956:	685b      	ldr	r3, [r3, #4]
 800a958:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	691b      	ldr	r3, [r3, #16]
 800a960:	061b      	lsls	r3, r3, #24
 800a962:	490b      	ldr	r1, [pc, #44]	@ (800a990 <HAL_RCC_OscConfig+0x244>)
 800a964:	4313      	orrs	r3, r2
 800a966:	604b      	str	r3, [r1, #4]
 800a968:	e01a      	b.n	800a9a0 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a96a:	4b09      	ldr	r3, [pc, #36]	@ (800a990 <HAL_RCC_OscConfig+0x244>)
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	4a08      	ldr	r2, [pc, #32]	@ (800a990 <HAL_RCC_OscConfig+0x244>)
 800a970:	f023 0301 	bic.w	r3, r3, #1
 800a974:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a976:	f7fa f83b 	bl	80049f0 <HAL_GetTick>
 800a97a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a97c:	e00a      	b.n	800a994 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a97e:	f7fa f837 	bl	80049f0 <HAL_GetTick>
 800a982:	4602      	mov	r2, r0
 800a984:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a986:	1ad3      	subs	r3, r2, r3
 800a988:	2b02      	cmp	r3, #2
 800a98a:	d903      	bls.n	800a994 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800a98c:	2303      	movs	r3, #3
 800a98e:	e2af      	b.n	800aef0 <HAL_RCC_OscConfig+0x7a4>
 800a990:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a994:	4b96      	ldr	r3, [pc, #600]	@ (800abf0 <HAL_RCC_OscConfig+0x4a4>)
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	f003 0304 	and.w	r3, r3, #4
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d1ee      	bne.n	800a97e <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	f003 0310 	and.w	r3, r3, #16
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d06a      	beq.n	800aa82 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a9ac:	4b90      	ldr	r3, [pc, #576]	@ (800abf0 <HAL_RCC_OscConfig+0x4a4>)
 800a9ae:	691b      	ldr	r3, [r3, #16]
 800a9b0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a9b4:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a9b6:	4b8e      	ldr	r3, [pc, #568]	@ (800abf0 <HAL_RCC_OscConfig+0x4a4>)
 800a9b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a9ba:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800a9bc:	69bb      	ldr	r3, [r7, #24]
 800a9be:	2b08      	cmp	r3, #8
 800a9c0:	d007      	beq.n	800a9d2 <HAL_RCC_OscConfig+0x286>
 800a9c2:	69bb      	ldr	r3, [r7, #24]
 800a9c4:	2b18      	cmp	r3, #24
 800a9c6:	d11b      	bne.n	800aa00 <HAL_RCC_OscConfig+0x2b4>
 800a9c8:	697b      	ldr	r3, [r7, #20]
 800a9ca:	f003 0303 	and.w	r3, r3, #3
 800a9ce:	2b01      	cmp	r3, #1
 800a9d0:	d116      	bne.n	800aa00 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a9d2:	4b87      	ldr	r3, [pc, #540]	@ (800abf0 <HAL_RCC_OscConfig+0x4a4>)
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d005      	beq.n	800a9ea <HAL_RCC_OscConfig+0x29e>
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	69db      	ldr	r3, [r3, #28]
 800a9e2:	2b80      	cmp	r3, #128	@ 0x80
 800a9e4:	d001      	beq.n	800a9ea <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800a9e6:	2301      	movs	r3, #1
 800a9e8:	e282      	b.n	800aef0 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a9ea:	4b81      	ldr	r3, [pc, #516]	@ (800abf0 <HAL_RCC_OscConfig+0x4a4>)
 800a9ec:	68db      	ldr	r3, [r3, #12]
 800a9ee:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	6a1b      	ldr	r3, [r3, #32]
 800a9f6:	061b      	lsls	r3, r3, #24
 800a9f8:	497d      	ldr	r1, [pc, #500]	@ (800abf0 <HAL_RCC_OscConfig+0x4a4>)
 800a9fa:	4313      	orrs	r3, r2
 800a9fc:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a9fe:	e040      	b.n	800aa82 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	69db      	ldr	r3, [r3, #28]
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d023      	beq.n	800aa50 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800aa08:	4b79      	ldr	r3, [pc, #484]	@ (800abf0 <HAL_RCC_OscConfig+0x4a4>)
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	4a78      	ldr	r2, [pc, #480]	@ (800abf0 <HAL_RCC_OscConfig+0x4a4>)
 800aa0e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aa12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aa14:	f7f9 ffec 	bl	80049f0 <HAL_GetTick>
 800aa18:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800aa1a:	e008      	b.n	800aa2e <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800aa1c:	f7f9 ffe8 	bl	80049f0 <HAL_GetTick>
 800aa20:	4602      	mov	r2, r0
 800aa22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa24:	1ad3      	subs	r3, r2, r3
 800aa26:	2b02      	cmp	r3, #2
 800aa28:	d901      	bls.n	800aa2e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800aa2a:	2303      	movs	r3, #3
 800aa2c:	e260      	b.n	800aef0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800aa2e:	4b70      	ldr	r3, [pc, #448]	@ (800abf0 <HAL_RCC_OscConfig+0x4a4>)
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d0f0      	beq.n	800aa1c <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800aa3a:	4b6d      	ldr	r3, [pc, #436]	@ (800abf0 <HAL_RCC_OscConfig+0x4a4>)
 800aa3c:	68db      	ldr	r3, [r3, #12]
 800aa3e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	6a1b      	ldr	r3, [r3, #32]
 800aa46:	061b      	lsls	r3, r3, #24
 800aa48:	4969      	ldr	r1, [pc, #420]	@ (800abf0 <HAL_RCC_OscConfig+0x4a4>)
 800aa4a:	4313      	orrs	r3, r2
 800aa4c:	60cb      	str	r3, [r1, #12]
 800aa4e:	e018      	b.n	800aa82 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800aa50:	4b67      	ldr	r3, [pc, #412]	@ (800abf0 <HAL_RCC_OscConfig+0x4a4>)
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	4a66      	ldr	r2, [pc, #408]	@ (800abf0 <HAL_RCC_OscConfig+0x4a4>)
 800aa56:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800aa5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aa5c:	f7f9 ffc8 	bl	80049f0 <HAL_GetTick>
 800aa60:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800aa62:	e008      	b.n	800aa76 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800aa64:	f7f9 ffc4 	bl	80049f0 <HAL_GetTick>
 800aa68:	4602      	mov	r2, r0
 800aa6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa6c:	1ad3      	subs	r3, r2, r3
 800aa6e:	2b02      	cmp	r3, #2
 800aa70:	d901      	bls.n	800aa76 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 800aa72:	2303      	movs	r3, #3
 800aa74:	e23c      	b.n	800aef0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800aa76:	4b5e      	ldr	r3, [pc, #376]	@ (800abf0 <HAL_RCC_OscConfig+0x4a4>)
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d1f0      	bne.n	800aa64 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	f003 0308 	and.w	r3, r3, #8
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d036      	beq.n	800aafc <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	695b      	ldr	r3, [r3, #20]
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d019      	beq.n	800aaca <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800aa96:	4b56      	ldr	r3, [pc, #344]	@ (800abf0 <HAL_RCC_OscConfig+0x4a4>)
 800aa98:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800aa9a:	4a55      	ldr	r2, [pc, #340]	@ (800abf0 <HAL_RCC_OscConfig+0x4a4>)
 800aa9c:	f043 0301 	orr.w	r3, r3, #1
 800aaa0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800aaa2:	f7f9 ffa5 	bl	80049f0 <HAL_GetTick>
 800aaa6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800aaa8:	e008      	b.n	800aabc <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800aaaa:	f7f9 ffa1 	bl	80049f0 <HAL_GetTick>
 800aaae:	4602      	mov	r2, r0
 800aab0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aab2:	1ad3      	subs	r3, r2, r3
 800aab4:	2b02      	cmp	r3, #2
 800aab6:	d901      	bls.n	800aabc <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 800aab8:	2303      	movs	r3, #3
 800aaba:	e219      	b.n	800aef0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800aabc:	4b4c      	ldr	r3, [pc, #304]	@ (800abf0 <HAL_RCC_OscConfig+0x4a4>)
 800aabe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800aac0:	f003 0302 	and.w	r3, r3, #2
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d0f0      	beq.n	800aaaa <HAL_RCC_OscConfig+0x35e>
 800aac8:	e018      	b.n	800aafc <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800aaca:	4b49      	ldr	r3, [pc, #292]	@ (800abf0 <HAL_RCC_OscConfig+0x4a4>)
 800aacc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800aace:	4a48      	ldr	r2, [pc, #288]	@ (800abf0 <HAL_RCC_OscConfig+0x4a4>)
 800aad0:	f023 0301 	bic.w	r3, r3, #1
 800aad4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800aad6:	f7f9 ff8b 	bl	80049f0 <HAL_GetTick>
 800aada:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800aadc:	e008      	b.n	800aaf0 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800aade:	f7f9 ff87 	bl	80049f0 <HAL_GetTick>
 800aae2:	4602      	mov	r2, r0
 800aae4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aae6:	1ad3      	subs	r3, r2, r3
 800aae8:	2b02      	cmp	r3, #2
 800aaea:	d901      	bls.n	800aaf0 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 800aaec:	2303      	movs	r3, #3
 800aaee:	e1ff      	b.n	800aef0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800aaf0:	4b3f      	ldr	r3, [pc, #252]	@ (800abf0 <HAL_RCC_OscConfig+0x4a4>)
 800aaf2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800aaf4:	f003 0302 	and.w	r3, r3, #2
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d1f0      	bne.n	800aade <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	f003 0320 	and.w	r3, r3, #32
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d036      	beq.n	800ab76 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	699b      	ldr	r3, [r3, #24]
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d019      	beq.n	800ab44 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800ab10:	4b37      	ldr	r3, [pc, #220]	@ (800abf0 <HAL_RCC_OscConfig+0x4a4>)
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	4a36      	ldr	r2, [pc, #216]	@ (800abf0 <HAL_RCC_OscConfig+0x4a4>)
 800ab16:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800ab1a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800ab1c:	f7f9 ff68 	bl	80049f0 <HAL_GetTick>
 800ab20:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800ab22:	e008      	b.n	800ab36 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800ab24:	f7f9 ff64 	bl	80049f0 <HAL_GetTick>
 800ab28:	4602      	mov	r2, r0
 800ab2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab2c:	1ad3      	subs	r3, r2, r3
 800ab2e:	2b02      	cmp	r3, #2
 800ab30:	d901      	bls.n	800ab36 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 800ab32:	2303      	movs	r3, #3
 800ab34:	e1dc      	b.n	800aef0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800ab36:	4b2e      	ldr	r3, [pc, #184]	@ (800abf0 <HAL_RCC_OscConfig+0x4a4>)
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d0f0      	beq.n	800ab24 <HAL_RCC_OscConfig+0x3d8>
 800ab42:	e018      	b.n	800ab76 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800ab44:	4b2a      	ldr	r3, [pc, #168]	@ (800abf0 <HAL_RCC_OscConfig+0x4a4>)
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	4a29      	ldr	r2, [pc, #164]	@ (800abf0 <HAL_RCC_OscConfig+0x4a4>)
 800ab4a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ab4e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800ab50:	f7f9 ff4e 	bl	80049f0 <HAL_GetTick>
 800ab54:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800ab56:	e008      	b.n	800ab6a <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800ab58:	f7f9 ff4a 	bl	80049f0 <HAL_GetTick>
 800ab5c:	4602      	mov	r2, r0
 800ab5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab60:	1ad3      	subs	r3, r2, r3
 800ab62:	2b02      	cmp	r3, #2
 800ab64:	d901      	bls.n	800ab6a <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800ab66:	2303      	movs	r3, #3
 800ab68:	e1c2      	b.n	800aef0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800ab6a:	4b21      	ldr	r3, [pc, #132]	@ (800abf0 <HAL_RCC_OscConfig+0x4a4>)
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d1f0      	bne.n	800ab58 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	f003 0304 	and.w	r3, r3, #4
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	f000 8086 	beq.w	800ac90 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800ab84:	4b1b      	ldr	r3, [pc, #108]	@ (800abf4 <HAL_RCC_OscConfig+0x4a8>)
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	4a1a      	ldr	r2, [pc, #104]	@ (800abf4 <HAL_RCC_OscConfig+0x4a8>)
 800ab8a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ab8e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800ab90:	f7f9 ff2e 	bl	80049f0 <HAL_GetTick>
 800ab94:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ab96:	e008      	b.n	800abaa <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ab98:	f7f9 ff2a 	bl	80049f0 <HAL_GetTick>
 800ab9c:	4602      	mov	r2, r0
 800ab9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aba0:	1ad3      	subs	r3, r2, r3
 800aba2:	2b64      	cmp	r3, #100	@ 0x64
 800aba4:	d901      	bls.n	800abaa <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800aba6:	2303      	movs	r3, #3
 800aba8:	e1a2      	b.n	800aef0 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800abaa:	4b12      	ldr	r3, [pc, #72]	@ (800abf4 <HAL_RCC_OscConfig+0x4a8>)
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d0f0      	beq.n	800ab98 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	689b      	ldr	r3, [r3, #8]
 800abba:	2b01      	cmp	r3, #1
 800abbc:	d106      	bne.n	800abcc <HAL_RCC_OscConfig+0x480>
 800abbe:	4b0c      	ldr	r3, [pc, #48]	@ (800abf0 <HAL_RCC_OscConfig+0x4a4>)
 800abc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800abc2:	4a0b      	ldr	r2, [pc, #44]	@ (800abf0 <HAL_RCC_OscConfig+0x4a4>)
 800abc4:	f043 0301 	orr.w	r3, r3, #1
 800abc8:	6713      	str	r3, [r2, #112]	@ 0x70
 800abca:	e032      	b.n	800ac32 <HAL_RCC_OscConfig+0x4e6>
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	689b      	ldr	r3, [r3, #8]
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d111      	bne.n	800abf8 <HAL_RCC_OscConfig+0x4ac>
 800abd4:	4b06      	ldr	r3, [pc, #24]	@ (800abf0 <HAL_RCC_OscConfig+0x4a4>)
 800abd6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800abd8:	4a05      	ldr	r2, [pc, #20]	@ (800abf0 <HAL_RCC_OscConfig+0x4a4>)
 800abda:	f023 0301 	bic.w	r3, r3, #1
 800abde:	6713      	str	r3, [r2, #112]	@ 0x70
 800abe0:	4b03      	ldr	r3, [pc, #12]	@ (800abf0 <HAL_RCC_OscConfig+0x4a4>)
 800abe2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800abe4:	4a02      	ldr	r2, [pc, #8]	@ (800abf0 <HAL_RCC_OscConfig+0x4a4>)
 800abe6:	f023 0304 	bic.w	r3, r3, #4
 800abea:	6713      	str	r3, [r2, #112]	@ 0x70
 800abec:	e021      	b.n	800ac32 <HAL_RCC_OscConfig+0x4e6>
 800abee:	bf00      	nop
 800abf0:	58024400 	.word	0x58024400
 800abf4:	58024800 	.word	0x58024800
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	689b      	ldr	r3, [r3, #8]
 800abfc:	2b05      	cmp	r3, #5
 800abfe:	d10c      	bne.n	800ac1a <HAL_RCC_OscConfig+0x4ce>
 800ac00:	4b83      	ldr	r3, [pc, #524]	@ (800ae10 <HAL_RCC_OscConfig+0x6c4>)
 800ac02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ac04:	4a82      	ldr	r2, [pc, #520]	@ (800ae10 <HAL_RCC_OscConfig+0x6c4>)
 800ac06:	f043 0304 	orr.w	r3, r3, #4
 800ac0a:	6713      	str	r3, [r2, #112]	@ 0x70
 800ac0c:	4b80      	ldr	r3, [pc, #512]	@ (800ae10 <HAL_RCC_OscConfig+0x6c4>)
 800ac0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ac10:	4a7f      	ldr	r2, [pc, #508]	@ (800ae10 <HAL_RCC_OscConfig+0x6c4>)
 800ac12:	f043 0301 	orr.w	r3, r3, #1
 800ac16:	6713      	str	r3, [r2, #112]	@ 0x70
 800ac18:	e00b      	b.n	800ac32 <HAL_RCC_OscConfig+0x4e6>
 800ac1a:	4b7d      	ldr	r3, [pc, #500]	@ (800ae10 <HAL_RCC_OscConfig+0x6c4>)
 800ac1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ac1e:	4a7c      	ldr	r2, [pc, #496]	@ (800ae10 <HAL_RCC_OscConfig+0x6c4>)
 800ac20:	f023 0301 	bic.w	r3, r3, #1
 800ac24:	6713      	str	r3, [r2, #112]	@ 0x70
 800ac26:	4b7a      	ldr	r3, [pc, #488]	@ (800ae10 <HAL_RCC_OscConfig+0x6c4>)
 800ac28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ac2a:	4a79      	ldr	r2, [pc, #484]	@ (800ae10 <HAL_RCC_OscConfig+0x6c4>)
 800ac2c:	f023 0304 	bic.w	r3, r3, #4
 800ac30:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	689b      	ldr	r3, [r3, #8]
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d015      	beq.n	800ac66 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ac3a:	f7f9 fed9 	bl	80049f0 <HAL_GetTick>
 800ac3e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ac40:	e00a      	b.n	800ac58 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ac42:	f7f9 fed5 	bl	80049f0 <HAL_GetTick>
 800ac46:	4602      	mov	r2, r0
 800ac48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac4a:	1ad3      	subs	r3, r2, r3
 800ac4c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ac50:	4293      	cmp	r3, r2
 800ac52:	d901      	bls.n	800ac58 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 800ac54:	2303      	movs	r3, #3
 800ac56:	e14b      	b.n	800aef0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ac58:	4b6d      	ldr	r3, [pc, #436]	@ (800ae10 <HAL_RCC_OscConfig+0x6c4>)
 800ac5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ac5c:	f003 0302 	and.w	r3, r3, #2
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d0ee      	beq.n	800ac42 <HAL_RCC_OscConfig+0x4f6>
 800ac64:	e014      	b.n	800ac90 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ac66:	f7f9 fec3 	bl	80049f0 <HAL_GetTick>
 800ac6a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800ac6c:	e00a      	b.n	800ac84 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ac6e:	f7f9 febf 	bl	80049f0 <HAL_GetTick>
 800ac72:	4602      	mov	r2, r0
 800ac74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac76:	1ad3      	subs	r3, r2, r3
 800ac78:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ac7c:	4293      	cmp	r3, r2
 800ac7e:	d901      	bls.n	800ac84 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 800ac80:	2303      	movs	r3, #3
 800ac82:	e135      	b.n	800aef0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800ac84:	4b62      	ldr	r3, [pc, #392]	@ (800ae10 <HAL_RCC_OscConfig+0x6c4>)
 800ac86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ac88:	f003 0302 	and.w	r3, r3, #2
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d1ee      	bne.n	800ac6e <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	f000 812a 	beq.w	800aeee <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800ac9a:	4b5d      	ldr	r3, [pc, #372]	@ (800ae10 <HAL_RCC_OscConfig+0x6c4>)
 800ac9c:	691b      	ldr	r3, [r3, #16]
 800ac9e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800aca2:	2b18      	cmp	r3, #24
 800aca4:	f000 80ba 	beq.w	800ae1c <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800acac:	2b02      	cmp	r3, #2
 800acae:	f040 8095 	bne.w	800addc <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800acb2:	4b57      	ldr	r3, [pc, #348]	@ (800ae10 <HAL_RCC_OscConfig+0x6c4>)
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	4a56      	ldr	r2, [pc, #344]	@ (800ae10 <HAL_RCC_OscConfig+0x6c4>)
 800acb8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800acbc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800acbe:	f7f9 fe97 	bl	80049f0 <HAL_GetTick>
 800acc2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800acc4:	e008      	b.n	800acd8 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800acc6:	f7f9 fe93 	bl	80049f0 <HAL_GetTick>
 800acca:	4602      	mov	r2, r0
 800accc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acce:	1ad3      	subs	r3, r2, r3
 800acd0:	2b02      	cmp	r3, #2
 800acd2:	d901      	bls.n	800acd8 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 800acd4:	2303      	movs	r3, #3
 800acd6:	e10b      	b.n	800aef0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800acd8:	4b4d      	ldr	r3, [pc, #308]	@ (800ae10 <HAL_RCC_OscConfig+0x6c4>)
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d1f0      	bne.n	800acc6 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800ace4:	4b4a      	ldr	r3, [pc, #296]	@ (800ae10 <HAL_RCC_OscConfig+0x6c4>)
 800ace6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ace8:	4b4a      	ldr	r3, [pc, #296]	@ (800ae14 <HAL_RCC_OscConfig+0x6c8>)
 800acea:	4013      	ands	r3, r2
 800acec:	687a      	ldr	r2, [r7, #4]
 800acee:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800acf0:	687a      	ldr	r2, [r7, #4]
 800acf2:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800acf4:	0112      	lsls	r2, r2, #4
 800acf6:	430a      	orrs	r2, r1
 800acf8:	4945      	ldr	r1, [pc, #276]	@ (800ae10 <HAL_RCC_OscConfig+0x6c4>)
 800acfa:	4313      	orrs	r3, r2
 800acfc:	628b      	str	r3, [r1, #40]	@ 0x28
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ad02:	3b01      	subs	r3, #1
 800ad04:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ad0c:	3b01      	subs	r3, #1
 800ad0e:	025b      	lsls	r3, r3, #9
 800ad10:	b29b      	uxth	r3, r3
 800ad12:	431a      	orrs	r2, r3
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ad18:	3b01      	subs	r3, #1
 800ad1a:	041b      	lsls	r3, r3, #16
 800ad1c:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800ad20:	431a      	orrs	r2, r3
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ad26:	3b01      	subs	r3, #1
 800ad28:	061b      	lsls	r3, r3, #24
 800ad2a:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800ad2e:	4938      	ldr	r1, [pc, #224]	@ (800ae10 <HAL_RCC_OscConfig+0x6c4>)
 800ad30:	4313      	orrs	r3, r2
 800ad32:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800ad34:	4b36      	ldr	r3, [pc, #216]	@ (800ae10 <HAL_RCC_OscConfig+0x6c4>)
 800ad36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad38:	4a35      	ldr	r2, [pc, #212]	@ (800ae10 <HAL_RCC_OscConfig+0x6c4>)
 800ad3a:	f023 0301 	bic.w	r3, r3, #1
 800ad3e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800ad40:	4b33      	ldr	r3, [pc, #204]	@ (800ae10 <HAL_RCC_OscConfig+0x6c4>)
 800ad42:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ad44:	4b34      	ldr	r3, [pc, #208]	@ (800ae18 <HAL_RCC_OscConfig+0x6cc>)
 800ad46:	4013      	ands	r3, r2
 800ad48:	687a      	ldr	r2, [r7, #4]
 800ad4a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800ad4c:	00d2      	lsls	r2, r2, #3
 800ad4e:	4930      	ldr	r1, [pc, #192]	@ (800ae10 <HAL_RCC_OscConfig+0x6c4>)
 800ad50:	4313      	orrs	r3, r2
 800ad52:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800ad54:	4b2e      	ldr	r3, [pc, #184]	@ (800ae10 <HAL_RCC_OscConfig+0x6c4>)
 800ad56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad58:	f023 020c 	bic.w	r2, r3, #12
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad60:	492b      	ldr	r1, [pc, #172]	@ (800ae10 <HAL_RCC_OscConfig+0x6c4>)
 800ad62:	4313      	orrs	r3, r2
 800ad64:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800ad66:	4b2a      	ldr	r3, [pc, #168]	@ (800ae10 <HAL_RCC_OscConfig+0x6c4>)
 800ad68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad6a:	f023 0202 	bic.w	r2, r3, #2
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ad72:	4927      	ldr	r1, [pc, #156]	@ (800ae10 <HAL_RCC_OscConfig+0x6c4>)
 800ad74:	4313      	orrs	r3, r2
 800ad76:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800ad78:	4b25      	ldr	r3, [pc, #148]	@ (800ae10 <HAL_RCC_OscConfig+0x6c4>)
 800ad7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad7c:	4a24      	ldr	r2, [pc, #144]	@ (800ae10 <HAL_RCC_OscConfig+0x6c4>)
 800ad7e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ad82:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ad84:	4b22      	ldr	r3, [pc, #136]	@ (800ae10 <HAL_RCC_OscConfig+0x6c4>)
 800ad86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad88:	4a21      	ldr	r2, [pc, #132]	@ (800ae10 <HAL_RCC_OscConfig+0x6c4>)
 800ad8a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ad8e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800ad90:	4b1f      	ldr	r3, [pc, #124]	@ (800ae10 <HAL_RCC_OscConfig+0x6c4>)
 800ad92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad94:	4a1e      	ldr	r2, [pc, #120]	@ (800ae10 <HAL_RCC_OscConfig+0x6c4>)
 800ad96:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800ad9a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800ad9c:	4b1c      	ldr	r3, [pc, #112]	@ (800ae10 <HAL_RCC_OscConfig+0x6c4>)
 800ad9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ada0:	4a1b      	ldr	r2, [pc, #108]	@ (800ae10 <HAL_RCC_OscConfig+0x6c4>)
 800ada2:	f043 0301 	orr.w	r3, r3, #1
 800ada6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800ada8:	4b19      	ldr	r3, [pc, #100]	@ (800ae10 <HAL_RCC_OscConfig+0x6c4>)
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	4a18      	ldr	r2, [pc, #96]	@ (800ae10 <HAL_RCC_OscConfig+0x6c4>)
 800adae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800adb2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800adb4:	f7f9 fe1c 	bl	80049f0 <HAL_GetTick>
 800adb8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800adba:	e008      	b.n	800adce <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800adbc:	f7f9 fe18 	bl	80049f0 <HAL_GetTick>
 800adc0:	4602      	mov	r2, r0
 800adc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adc4:	1ad3      	subs	r3, r2, r3
 800adc6:	2b02      	cmp	r3, #2
 800adc8:	d901      	bls.n	800adce <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800adca:	2303      	movs	r3, #3
 800adcc:	e090      	b.n	800aef0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800adce:	4b10      	ldr	r3, [pc, #64]	@ (800ae10 <HAL_RCC_OscConfig+0x6c4>)
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800add6:	2b00      	cmp	r3, #0
 800add8:	d0f0      	beq.n	800adbc <HAL_RCC_OscConfig+0x670>
 800adda:	e088      	b.n	800aeee <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800addc:	4b0c      	ldr	r3, [pc, #48]	@ (800ae10 <HAL_RCC_OscConfig+0x6c4>)
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	4a0b      	ldr	r2, [pc, #44]	@ (800ae10 <HAL_RCC_OscConfig+0x6c4>)
 800ade2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800ade6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ade8:	f7f9 fe02 	bl	80049f0 <HAL_GetTick>
 800adec:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800adee:	e008      	b.n	800ae02 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800adf0:	f7f9 fdfe 	bl	80049f0 <HAL_GetTick>
 800adf4:	4602      	mov	r2, r0
 800adf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adf8:	1ad3      	subs	r3, r2, r3
 800adfa:	2b02      	cmp	r3, #2
 800adfc:	d901      	bls.n	800ae02 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800adfe:	2303      	movs	r3, #3
 800ae00:	e076      	b.n	800aef0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800ae02:	4b03      	ldr	r3, [pc, #12]	@ (800ae10 <HAL_RCC_OscConfig+0x6c4>)
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d1f0      	bne.n	800adf0 <HAL_RCC_OscConfig+0x6a4>
 800ae0e:	e06e      	b.n	800aeee <HAL_RCC_OscConfig+0x7a2>
 800ae10:	58024400 	.word	0x58024400
 800ae14:	fffffc0c 	.word	0xfffffc0c
 800ae18:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800ae1c:	4b36      	ldr	r3, [pc, #216]	@ (800aef8 <HAL_RCC_OscConfig+0x7ac>)
 800ae1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae20:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800ae22:	4b35      	ldr	r3, [pc, #212]	@ (800aef8 <HAL_RCC_OscConfig+0x7ac>)
 800ae24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ae26:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae2c:	2b01      	cmp	r3, #1
 800ae2e:	d031      	beq.n	800ae94 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ae30:	693b      	ldr	r3, [r7, #16]
 800ae32:	f003 0203 	and.w	r2, r3, #3
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ae3a:	429a      	cmp	r2, r3
 800ae3c:	d12a      	bne.n	800ae94 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800ae3e:	693b      	ldr	r3, [r7, #16]
 800ae40:	091b      	lsrs	r3, r3, #4
 800ae42:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ae4a:	429a      	cmp	r2, r3
 800ae4c:	d122      	bne.n	800ae94 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ae58:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800ae5a:	429a      	cmp	r2, r3
 800ae5c:	d11a      	bne.n	800ae94 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	0a5b      	lsrs	r3, r3, #9
 800ae62:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ae6a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800ae6c:	429a      	cmp	r2, r3
 800ae6e:	d111      	bne.n	800ae94 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	0c1b      	lsrs	r3, r3, #16
 800ae74:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ae7c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800ae7e:	429a      	cmp	r2, r3
 800ae80:	d108      	bne.n	800ae94 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	0e1b      	lsrs	r3, r3, #24
 800ae86:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ae8e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800ae90:	429a      	cmp	r2, r3
 800ae92:	d001      	beq.n	800ae98 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 800ae94:	2301      	movs	r3, #1
 800ae96:	e02b      	b.n	800aef0 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800ae98:	4b17      	ldr	r3, [pc, #92]	@ (800aef8 <HAL_RCC_OscConfig+0x7ac>)
 800ae9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ae9c:	08db      	lsrs	r3, r3, #3
 800ae9e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800aea2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800aea8:	693a      	ldr	r2, [r7, #16]
 800aeaa:	429a      	cmp	r2, r3
 800aeac:	d01f      	beq.n	800aeee <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800aeae:	4b12      	ldr	r3, [pc, #72]	@ (800aef8 <HAL_RCC_OscConfig+0x7ac>)
 800aeb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aeb2:	4a11      	ldr	r2, [pc, #68]	@ (800aef8 <HAL_RCC_OscConfig+0x7ac>)
 800aeb4:	f023 0301 	bic.w	r3, r3, #1
 800aeb8:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800aeba:	f7f9 fd99 	bl	80049f0 <HAL_GetTick>
 800aebe:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800aec0:	bf00      	nop
 800aec2:	f7f9 fd95 	bl	80049f0 <HAL_GetTick>
 800aec6:	4602      	mov	r2, r0
 800aec8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aeca:	4293      	cmp	r3, r2
 800aecc:	d0f9      	beq.n	800aec2 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800aece:	4b0a      	ldr	r3, [pc, #40]	@ (800aef8 <HAL_RCC_OscConfig+0x7ac>)
 800aed0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800aed2:	4b0a      	ldr	r3, [pc, #40]	@ (800aefc <HAL_RCC_OscConfig+0x7b0>)
 800aed4:	4013      	ands	r3, r2
 800aed6:	687a      	ldr	r2, [r7, #4]
 800aed8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800aeda:	00d2      	lsls	r2, r2, #3
 800aedc:	4906      	ldr	r1, [pc, #24]	@ (800aef8 <HAL_RCC_OscConfig+0x7ac>)
 800aede:	4313      	orrs	r3, r2
 800aee0:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800aee2:	4b05      	ldr	r3, [pc, #20]	@ (800aef8 <HAL_RCC_OscConfig+0x7ac>)
 800aee4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aee6:	4a04      	ldr	r2, [pc, #16]	@ (800aef8 <HAL_RCC_OscConfig+0x7ac>)
 800aee8:	f043 0301 	orr.w	r3, r3, #1
 800aeec:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800aeee:	2300      	movs	r3, #0
}
 800aef0:	4618      	mov	r0, r3
 800aef2:	3730      	adds	r7, #48	@ 0x30
 800aef4:	46bd      	mov	sp, r7
 800aef6:	bd80      	pop	{r7, pc}
 800aef8:	58024400 	.word	0x58024400
 800aefc:	ffff0007 	.word	0xffff0007

0800af00 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800af00:	b580      	push	{r7, lr}
 800af02:	b086      	sub	sp, #24
 800af04:	af00      	add	r7, sp, #0
 800af06:	6078      	str	r0, [r7, #4]
 800af08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d101      	bne.n	800af14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800af10:	2301      	movs	r3, #1
 800af12:	e19c      	b.n	800b24e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800af14:	4b8a      	ldr	r3, [pc, #552]	@ (800b140 <HAL_RCC_ClockConfig+0x240>)
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	f003 030f 	and.w	r3, r3, #15
 800af1c:	683a      	ldr	r2, [r7, #0]
 800af1e:	429a      	cmp	r2, r3
 800af20:	d910      	bls.n	800af44 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800af22:	4b87      	ldr	r3, [pc, #540]	@ (800b140 <HAL_RCC_ClockConfig+0x240>)
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	f023 020f 	bic.w	r2, r3, #15
 800af2a:	4985      	ldr	r1, [pc, #532]	@ (800b140 <HAL_RCC_ClockConfig+0x240>)
 800af2c:	683b      	ldr	r3, [r7, #0]
 800af2e:	4313      	orrs	r3, r2
 800af30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800af32:	4b83      	ldr	r3, [pc, #524]	@ (800b140 <HAL_RCC_ClockConfig+0x240>)
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	f003 030f 	and.w	r3, r3, #15
 800af3a:	683a      	ldr	r2, [r7, #0]
 800af3c:	429a      	cmp	r2, r3
 800af3e:	d001      	beq.n	800af44 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800af40:	2301      	movs	r3, #1
 800af42:	e184      	b.n	800b24e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	f003 0304 	and.w	r3, r3, #4
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d010      	beq.n	800af72 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	691a      	ldr	r2, [r3, #16]
 800af54:	4b7b      	ldr	r3, [pc, #492]	@ (800b144 <HAL_RCC_ClockConfig+0x244>)
 800af56:	699b      	ldr	r3, [r3, #24]
 800af58:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800af5c:	429a      	cmp	r2, r3
 800af5e:	d908      	bls.n	800af72 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800af60:	4b78      	ldr	r3, [pc, #480]	@ (800b144 <HAL_RCC_ClockConfig+0x244>)
 800af62:	699b      	ldr	r3, [r3, #24]
 800af64:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	691b      	ldr	r3, [r3, #16]
 800af6c:	4975      	ldr	r1, [pc, #468]	@ (800b144 <HAL_RCC_ClockConfig+0x244>)
 800af6e:	4313      	orrs	r3, r2
 800af70:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	f003 0308 	and.w	r3, r3, #8
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d010      	beq.n	800afa0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	695a      	ldr	r2, [r3, #20]
 800af82:	4b70      	ldr	r3, [pc, #448]	@ (800b144 <HAL_RCC_ClockConfig+0x244>)
 800af84:	69db      	ldr	r3, [r3, #28]
 800af86:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800af8a:	429a      	cmp	r2, r3
 800af8c:	d908      	bls.n	800afa0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800af8e:	4b6d      	ldr	r3, [pc, #436]	@ (800b144 <HAL_RCC_ClockConfig+0x244>)
 800af90:	69db      	ldr	r3, [r3, #28]
 800af92:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	695b      	ldr	r3, [r3, #20]
 800af9a:	496a      	ldr	r1, [pc, #424]	@ (800b144 <HAL_RCC_ClockConfig+0x244>)
 800af9c:	4313      	orrs	r3, r2
 800af9e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	f003 0310 	and.w	r3, r3, #16
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d010      	beq.n	800afce <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	699a      	ldr	r2, [r3, #24]
 800afb0:	4b64      	ldr	r3, [pc, #400]	@ (800b144 <HAL_RCC_ClockConfig+0x244>)
 800afb2:	69db      	ldr	r3, [r3, #28]
 800afb4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800afb8:	429a      	cmp	r2, r3
 800afba:	d908      	bls.n	800afce <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800afbc:	4b61      	ldr	r3, [pc, #388]	@ (800b144 <HAL_RCC_ClockConfig+0x244>)
 800afbe:	69db      	ldr	r3, [r3, #28]
 800afc0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	699b      	ldr	r3, [r3, #24]
 800afc8:	495e      	ldr	r1, [pc, #376]	@ (800b144 <HAL_RCC_ClockConfig+0x244>)
 800afca:	4313      	orrs	r3, r2
 800afcc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	f003 0320 	and.w	r3, r3, #32
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d010      	beq.n	800affc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	69da      	ldr	r2, [r3, #28]
 800afde:	4b59      	ldr	r3, [pc, #356]	@ (800b144 <HAL_RCC_ClockConfig+0x244>)
 800afe0:	6a1b      	ldr	r3, [r3, #32]
 800afe2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800afe6:	429a      	cmp	r2, r3
 800afe8:	d908      	bls.n	800affc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800afea:	4b56      	ldr	r3, [pc, #344]	@ (800b144 <HAL_RCC_ClockConfig+0x244>)
 800afec:	6a1b      	ldr	r3, [r3, #32]
 800afee:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	69db      	ldr	r3, [r3, #28]
 800aff6:	4953      	ldr	r1, [pc, #332]	@ (800b144 <HAL_RCC_ClockConfig+0x244>)
 800aff8:	4313      	orrs	r3, r2
 800affa:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	f003 0302 	and.w	r3, r3, #2
 800b004:	2b00      	cmp	r3, #0
 800b006:	d010      	beq.n	800b02a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	68da      	ldr	r2, [r3, #12]
 800b00c:	4b4d      	ldr	r3, [pc, #308]	@ (800b144 <HAL_RCC_ClockConfig+0x244>)
 800b00e:	699b      	ldr	r3, [r3, #24]
 800b010:	f003 030f 	and.w	r3, r3, #15
 800b014:	429a      	cmp	r2, r3
 800b016:	d908      	bls.n	800b02a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b018:	4b4a      	ldr	r3, [pc, #296]	@ (800b144 <HAL_RCC_ClockConfig+0x244>)
 800b01a:	699b      	ldr	r3, [r3, #24]
 800b01c:	f023 020f 	bic.w	r2, r3, #15
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	68db      	ldr	r3, [r3, #12]
 800b024:	4947      	ldr	r1, [pc, #284]	@ (800b144 <HAL_RCC_ClockConfig+0x244>)
 800b026:	4313      	orrs	r3, r2
 800b028:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	f003 0301 	and.w	r3, r3, #1
 800b032:	2b00      	cmp	r3, #0
 800b034:	d055      	beq.n	800b0e2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800b036:	4b43      	ldr	r3, [pc, #268]	@ (800b144 <HAL_RCC_ClockConfig+0x244>)
 800b038:	699b      	ldr	r3, [r3, #24]
 800b03a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	689b      	ldr	r3, [r3, #8]
 800b042:	4940      	ldr	r1, [pc, #256]	@ (800b144 <HAL_RCC_ClockConfig+0x244>)
 800b044:	4313      	orrs	r3, r2
 800b046:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	685b      	ldr	r3, [r3, #4]
 800b04c:	2b02      	cmp	r3, #2
 800b04e:	d107      	bne.n	800b060 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800b050:	4b3c      	ldr	r3, [pc, #240]	@ (800b144 <HAL_RCC_ClockConfig+0x244>)
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d121      	bne.n	800b0a0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800b05c:	2301      	movs	r3, #1
 800b05e:	e0f6      	b.n	800b24e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	685b      	ldr	r3, [r3, #4]
 800b064:	2b03      	cmp	r3, #3
 800b066:	d107      	bne.n	800b078 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800b068:	4b36      	ldr	r3, [pc, #216]	@ (800b144 <HAL_RCC_ClockConfig+0x244>)
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b070:	2b00      	cmp	r3, #0
 800b072:	d115      	bne.n	800b0a0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800b074:	2301      	movs	r3, #1
 800b076:	e0ea      	b.n	800b24e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	685b      	ldr	r3, [r3, #4]
 800b07c:	2b01      	cmp	r3, #1
 800b07e:	d107      	bne.n	800b090 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800b080:	4b30      	ldr	r3, [pc, #192]	@ (800b144 <HAL_RCC_ClockConfig+0x244>)
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d109      	bne.n	800b0a0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800b08c:	2301      	movs	r3, #1
 800b08e:	e0de      	b.n	800b24e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b090:	4b2c      	ldr	r3, [pc, #176]	@ (800b144 <HAL_RCC_ClockConfig+0x244>)
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	f003 0304 	and.w	r3, r3, #4
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d101      	bne.n	800b0a0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800b09c:	2301      	movs	r3, #1
 800b09e:	e0d6      	b.n	800b24e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800b0a0:	4b28      	ldr	r3, [pc, #160]	@ (800b144 <HAL_RCC_ClockConfig+0x244>)
 800b0a2:	691b      	ldr	r3, [r3, #16]
 800b0a4:	f023 0207 	bic.w	r2, r3, #7
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	685b      	ldr	r3, [r3, #4]
 800b0ac:	4925      	ldr	r1, [pc, #148]	@ (800b144 <HAL_RCC_ClockConfig+0x244>)
 800b0ae:	4313      	orrs	r3, r2
 800b0b0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b0b2:	f7f9 fc9d 	bl	80049f0 <HAL_GetTick>
 800b0b6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b0b8:	e00a      	b.n	800b0d0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b0ba:	f7f9 fc99 	bl	80049f0 <HAL_GetTick>
 800b0be:	4602      	mov	r2, r0
 800b0c0:	697b      	ldr	r3, [r7, #20]
 800b0c2:	1ad3      	subs	r3, r2, r3
 800b0c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b0c8:	4293      	cmp	r3, r2
 800b0ca:	d901      	bls.n	800b0d0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800b0cc:	2303      	movs	r3, #3
 800b0ce:	e0be      	b.n	800b24e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b0d0:	4b1c      	ldr	r3, [pc, #112]	@ (800b144 <HAL_RCC_ClockConfig+0x244>)
 800b0d2:	691b      	ldr	r3, [r3, #16]
 800b0d4:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	685b      	ldr	r3, [r3, #4]
 800b0dc:	00db      	lsls	r3, r3, #3
 800b0de:	429a      	cmp	r2, r3
 800b0e0:	d1eb      	bne.n	800b0ba <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	f003 0302 	and.w	r3, r3, #2
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d010      	beq.n	800b110 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	68da      	ldr	r2, [r3, #12]
 800b0f2:	4b14      	ldr	r3, [pc, #80]	@ (800b144 <HAL_RCC_ClockConfig+0x244>)
 800b0f4:	699b      	ldr	r3, [r3, #24]
 800b0f6:	f003 030f 	and.w	r3, r3, #15
 800b0fa:	429a      	cmp	r2, r3
 800b0fc:	d208      	bcs.n	800b110 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b0fe:	4b11      	ldr	r3, [pc, #68]	@ (800b144 <HAL_RCC_ClockConfig+0x244>)
 800b100:	699b      	ldr	r3, [r3, #24]
 800b102:	f023 020f 	bic.w	r2, r3, #15
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	68db      	ldr	r3, [r3, #12]
 800b10a:	490e      	ldr	r1, [pc, #56]	@ (800b144 <HAL_RCC_ClockConfig+0x244>)
 800b10c:	4313      	orrs	r3, r2
 800b10e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b110:	4b0b      	ldr	r3, [pc, #44]	@ (800b140 <HAL_RCC_ClockConfig+0x240>)
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	f003 030f 	and.w	r3, r3, #15
 800b118:	683a      	ldr	r2, [r7, #0]
 800b11a:	429a      	cmp	r2, r3
 800b11c:	d214      	bcs.n	800b148 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b11e:	4b08      	ldr	r3, [pc, #32]	@ (800b140 <HAL_RCC_ClockConfig+0x240>)
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	f023 020f 	bic.w	r2, r3, #15
 800b126:	4906      	ldr	r1, [pc, #24]	@ (800b140 <HAL_RCC_ClockConfig+0x240>)
 800b128:	683b      	ldr	r3, [r7, #0]
 800b12a:	4313      	orrs	r3, r2
 800b12c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b12e:	4b04      	ldr	r3, [pc, #16]	@ (800b140 <HAL_RCC_ClockConfig+0x240>)
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	f003 030f 	and.w	r3, r3, #15
 800b136:	683a      	ldr	r2, [r7, #0]
 800b138:	429a      	cmp	r2, r3
 800b13a:	d005      	beq.n	800b148 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800b13c:	2301      	movs	r3, #1
 800b13e:	e086      	b.n	800b24e <HAL_RCC_ClockConfig+0x34e>
 800b140:	52002000 	.word	0x52002000
 800b144:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	f003 0304 	and.w	r3, r3, #4
 800b150:	2b00      	cmp	r3, #0
 800b152:	d010      	beq.n	800b176 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	691a      	ldr	r2, [r3, #16]
 800b158:	4b3f      	ldr	r3, [pc, #252]	@ (800b258 <HAL_RCC_ClockConfig+0x358>)
 800b15a:	699b      	ldr	r3, [r3, #24]
 800b15c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800b160:	429a      	cmp	r2, r3
 800b162:	d208      	bcs.n	800b176 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800b164:	4b3c      	ldr	r3, [pc, #240]	@ (800b258 <HAL_RCC_ClockConfig+0x358>)
 800b166:	699b      	ldr	r3, [r3, #24]
 800b168:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	691b      	ldr	r3, [r3, #16]
 800b170:	4939      	ldr	r1, [pc, #228]	@ (800b258 <HAL_RCC_ClockConfig+0x358>)
 800b172:	4313      	orrs	r3, r2
 800b174:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	f003 0308 	and.w	r3, r3, #8
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d010      	beq.n	800b1a4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	695a      	ldr	r2, [r3, #20]
 800b186:	4b34      	ldr	r3, [pc, #208]	@ (800b258 <HAL_RCC_ClockConfig+0x358>)
 800b188:	69db      	ldr	r3, [r3, #28]
 800b18a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800b18e:	429a      	cmp	r2, r3
 800b190:	d208      	bcs.n	800b1a4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800b192:	4b31      	ldr	r3, [pc, #196]	@ (800b258 <HAL_RCC_ClockConfig+0x358>)
 800b194:	69db      	ldr	r3, [r3, #28]
 800b196:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	695b      	ldr	r3, [r3, #20]
 800b19e:	492e      	ldr	r1, [pc, #184]	@ (800b258 <HAL_RCC_ClockConfig+0x358>)
 800b1a0:	4313      	orrs	r3, r2
 800b1a2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	f003 0310 	and.w	r3, r3, #16
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d010      	beq.n	800b1d2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	699a      	ldr	r2, [r3, #24]
 800b1b4:	4b28      	ldr	r3, [pc, #160]	@ (800b258 <HAL_RCC_ClockConfig+0x358>)
 800b1b6:	69db      	ldr	r3, [r3, #28]
 800b1b8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800b1bc:	429a      	cmp	r2, r3
 800b1be:	d208      	bcs.n	800b1d2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800b1c0:	4b25      	ldr	r3, [pc, #148]	@ (800b258 <HAL_RCC_ClockConfig+0x358>)
 800b1c2:	69db      	ldr	r3, [r3, #28]
 800b1c4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	699b      	ldr	r3, [r3, #24]
 800b1cc:	4922      	ldr	r1, [pc, #136]	@ (800b258 <HAL_RCC_ClockConfig+0x358>)
 800b1ce:	4313      	orrs	r3, r2
 800b1d0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	f003 0320 	and.w	r3, r3, #32
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d010      	beq.n	800b200 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	69da      	ldr	r2, [r3, #28]
 800b1e2:	4b1d      	ldr	r3, [pc, #116]	@ (800b258 <HAL_RCC_ClockConfig+0x358>)
 800b1e4:	6a1b      	ldr	r3, [r3, #32]
 800b1e6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800b1ea:	429a      	cmp	r2, r3
 800b1ec:	d208      	bcs.n	800b200 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800b1ee:	4b1a      	ldr	r3, [pc, #104]	@ (800b258 <HAL_RCC_ClockConfig+0x358>)
 800b1f0:	6a1b      	ldr	r3, [r3, #32]
 800b1f2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	69db      	ldr	r3, [r3, #28]
 800b1fa:	4917      	ldr	r1, [pc, #92]	@ (800b258 <HAL_RCC_ClockConfig+0x358>)
 800b1fc:	4313      	orrs	r3, r2
 800b1fe:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800b200:	f000 f834 	bl	800b26c <HAL_RCC_GetSysClockFreq>
 800b204:	4602      	mov	r2, r0
 800b206:	4b14      	ldr	r3, [pc, #80]	@ (800b258 <HAL_RCC_ClockConfig+0x358>)
 800b208:	699b      	ldr	r3, [r3, #24]
 800b20a:	0a1b      	lsrs	r3, r3, #8
 800b20c:	f003 030f 	and.w	r3, r3, #15
 800b210:	4912      	ldr	r1, [pc, #72]	@ (800b25c <HAL_RCC_ClockConfig+0x35c>)
 800b212:	5ccb      	ldrb	r3, [r1, r3]
 800b214:	f003 031f 	and.w	r3, r3, #31
 800b218:	fa22 f303 	lsr.w	r3, r2, r3
 800b21c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b21e:	4b0e      	ldr	r3, [pc, #56]	@ (800b258 <HAL_RCC_ClockConfig+0x358>)
 800b220:	699b      	ldr	r3, [r3, #24]
 800b222:	f003 030f 	and.w	r3, r3, #15
 800b226:	4a0d      	ldr	r2, [pc, #52]	@ (800b25c <HAL_RCC_ClockConfig+0x35c>)
 800b228:	5cd3      	ldrb	r3, [r2, r3]
 800b22a:	f003 031f 	and.w	r3, r3, #31
 800b22e:	693a      	ldr	r2, [r7, #16]
 800b230:	fa22 f303 	lsr.w	r3, r2, r3
 800b234:	4a0a      	ldr	r2, [pc, #40]	@ (800b260 <HAL_RCC_ClockConfig+0x360>)
 800b236:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800b238:	4a0a      	ldr	r2, [pc, #40]	@ (800b264 <HAL_RCC_ClockConfig+0x364>)
 800b23a:	693b      	ldr	r3, [r7, #16]
 800b23c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800b23e:	4b0a      	ldr	r3, [pc, #40]	@ (800b268 <HAL_RCC_ClockConfig+0x368>)
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	4618      	mov	r0, r3
 800b244:	f7f9 fb8a 	bl	800495c <HAL_InitTick>
 800b248:	4603      	mov	r3, r0
 800b24a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800b24c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b24e:	4618      	mov	r0, r3
 800b250:	3718      	adds	r7, #24
 800b252:	46bd      	mov	sp, r7
 800b254:	bd80      	pop	{r7, pc}
 800b256:	bf00      	nop
 800b258:	58024400 	.word	0x58024400
 800b25c:	08019b44 	.word	0x08019b44
 800b260:	24000004 	.word	0x24000004
 800b264:	24000000 	.word	0x24000000
 800b268:	24000008 	.word	0x24000008

0800b26c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b26c:	b480      	push	{r7}
 800b26e:	b089      	sub	sp, #36	@ 0x24
 800b270:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b272:	4bb3      	ldr	r3, [pc, #716]	@ (800b540 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b274:	691b      	ldr	r3, [r3, #16]
 800b276:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b27a:	2b18      	cmp	r3, #24
 800b27c:	f200 8155 	bhi.w	800b52a <HAL_RCC_GetSysClockFreq+0x2be>
 800b280:	a201      	add	r2, pc, #4	@ (adr r2, 800b288 <HAL_RCC_GetSysClockFreq+0x1c>)
 800b282:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b286:	bf00      	nop
 800b288:	0800b2ed 	.word	0x0800b2ed
 800b28c:	0800b52b 	.word	0x0800b52b
 800b290:	0800b52b 	.word	0x0800b52b
 800b294:	0800b52b 	.word	0x0800b52b
 800b298:	0800b52b 	.word	0x0800b52b
 800b29c:	0800b52b 	.word	0x0800b52b
 800b2a0:	0800b52b 	.word	0x0800b52b
 800b2a4:	0800b52b 	.word	0x0800b52b
 800b2a8:	0800b313 	.word	0x0800b313
 800b2ac:	0800b52b 	.word	0x0800b52b
 800b2b0:	0800b52b 	.word	0x0800b52b
 800b2b4:	0800b52b 	.word	0x0800b52b
 800b2b8:	0800b52b 	.word	0x0800b52b
 800b2bc:	0800b52b 	.word	0x0800b52b
 800b2c0:	0800b52b 	.word	0x0800b52b
 800b2c4:	0800b52b 	.word	0x0800b52b
 800b2c8:	0800b319 	.word	0x0800b319
 800b2cc:	0800b52b 	.word	0x0800b52b
 800b2d0:	0800b52b 	.word	0x0800b52b
 800b2d4:	0800b52b 	.word	0x0800b52b
 800b2d8:	0800b52b 	.word	0x0800b52b
 800b2dc:	0800b52b 	.word	0x0800b52b
 800b2e0:	0800b52b 	.word	0x0800b52b
 800b2e4:	0800b52b 	.word	0x0800b52b
 800b2e8:	0800b31f 	.word	0x0800b31f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b2ec:	4b94      	ldr	r3, [pc, #592]	@ (800b540 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	f003 0320 	and.w	r3, r3, #32
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d009      	beq.n	800b30c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b2f8:	4b91      	ldr	r3, [pc, #580]	@ (800b540 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	08db      	lsrs	r3, r3, #3
 800b2fe:	f003 0303 	and.w	r3, r3, #3
 800b302:	4a90      	ldr	r2, [pc, #576]	@ (800b544 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b304:	fa22 f303 	lsr.w	r3, r2, r3
 800b308:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800b30a:	e111      	b.n	800b530 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800b30c:	4b8d      	ldr	r3, [pc, #564]	@ (800b544 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b30e:	61bb      	str	r3, [r7, #24]
      break;
 800b310:	e10e      	b.n	800b530 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800b312:	4b8d      	ldr	r3, [pc, #564]	@ (800b548 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800b314:	61bb      	str	r3, [r7, #24]
      break;
 800b316:	e10b      	b.n	800b530 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800b318:	4b8c      	ldr	r3, [pc, #560]	@ (800b54c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800b31a:	61bb      	str	r3, [r7, #24]
      break;
 800b31c:	e108      	b.n	800b530 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b31e:	4b88      	ldr	r3, [pc, #544]	@ (800b540 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b320:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b322:	f003 0303 	and.w	r3, r3, #3
 800b326:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800b328:	4b85      	ldr	r3, [pc, #532]	@ (800b540 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b32a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b32c:	091b      	lsrs	r3, r3, #4
 800b32e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b332:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800b334:	4b82      	ldr	r3, [pc, #520]	@ (800b540 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b336:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b338:	f003 0301 	and.w	r3, r3, #1
 800b33c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800b33e:	4b80      	ldr	r3, [pc, #512]	@ (800b540 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b340:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b342:	08db      	lsrs	r3, r3, #3
 800b344:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b348:	68fa      	ldr	r2, [r7, #12]
 800b34a:	fb02 f303 	mul.w	r3, r2, r3
 800b34e:	ee07 3a90 	vmov	s15, r3
 800b352:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b356:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800b35a:	693b      	ldr	r3, [r7, #16]
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	f000 80e1 	beq.w	800b524 <HAL_RCC_GetSysClockFreq+0x2b8>
 800b362:	697b      	ldr	r3, [r7, #20]
 800b364:	2b02      	cmp	r3, #2
 800b366:	f000 8083 	beq.w	800b470 <HAL_RCC_GetSysClockFreq+0x204>
 800b36a:	697b      	ldr	r3, [r7, #20]
 800b36c:	2b02      	cmp	r3, #2
 800b36e:	f200 80a1 	bhi.w	800b4b4 <HAL_RCC_GetSysClockFreq+0x248>
 800b372:	697b      	ldr	r3, [r7, #20]
 800b374:	2b00      	cmp	r3, #0
 800b376:	d003      	beq.n	800b380 <HAL_RCC_GetSysClockFreq+0x114>
 800b378:	697b      	ldr	r3, [r7, #20]
 800b37a:	2b01      	cmp	r3, #1
 800b37c:	d056      	beq.n	800b42c <HAL_RCC_GetSysClockFreq+0x1c0>
 800b37e:	e099      	b.n	800b4b4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b380:	4b6f      	ldr	r3, [pc, #444]	@ (800b540 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	f003 0320 	and.w	r3, r3, #32
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d02d      	beq.n	800b3e8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b38c:	4b6c      	ldr	r3, [pc, #432]	@ (800b540 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	08db      	lsrs	r3, r3, #3
 800b392:	f003 0303 	and.w	r3, r3, #3
 800b396:	4a6b      	ldr	r2, [pc, #428]	@ (800b544 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b398:	fa22 f303 	lsr.w	r3, r2, r3
 800b39c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	ee07 3a90 	vmov	s15, r3
 800b3a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b3a8:	693b      	ldr	r3, [r7, #16]
 800b3aa:	ee07 3a90 	vmov	s15, r3
 800b3ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b3b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b3b6:	4b62      	ldr	r3, [pc, #392]	@ (800b540 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b3b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b3ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b3be:	ee07 3a90 	vmov	s15, r3
 800b3c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b3c6:	ed97 6a02 	vldr	s12, [r7, #8]
 800b3ca:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800b550 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b3ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b3d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b3d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b3da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b3de:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b3e2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800b3e6:	e087      	b.n	800b4f8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b3e8:	693b      	ldr	r3, [r7, #16]
 800b3ea:	ee07 3a90 	vmov	s15, r3
 800b3ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b3f2:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800b554 <HAL_RCC_GetSysClockFreq+0x2e8>
 800b3f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b3fa:	4b51      	ldr	r3, [pc, #324]	@ (800b540 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b3fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b3fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b402:	ee07 3a90 	vmov	s15, r3
 800b406:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b40a:	ed97 6a02 	vldr	s12, [r7, #8]
 800b40e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800b550 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b412:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b416:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b41a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b41e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b422:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b426:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b42a:	e065      	b.n	800b4f8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b42c:	693b      	ldr	r3, [r7, #16]
 800b42e:	ee07 3a90 	vmov	s15, r3
 800b432:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b436:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800b558 <HAL_RCC_GetSysClockFreq+0x2ec>
 800b43a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b43e:	4b40      	ldr	r3, [pc, #256]	@ (800b540 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b440:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b442:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b446:	ee07 3a90 	vmov	s15, r3
 800b44a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b44e:	ed97 6a02 	vldr	s12, [r7, #8]
 800b452:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800b550 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b456:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b45a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b45e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b462:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b466:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b46a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b46e:	e043      	b.n	800b4f8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b470:	693b      	ldr	r3, [r7, #16]
 800b472:	ee07 3a90 	vmov	s15, r3
 800b476:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b47a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800b55c <HAL_RCC_GetSysClockFreq+0x2f0>
 800b47e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b482:	4b2f      	ldr	r3, [pc, #188]	@ (800b540 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b484:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b486:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b48a:	ee07 3a90 	vmov	s15, r3
 800b48e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b492:	ed97 6a02 	vldr	s12, [r7, #8]
 800b496:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800b550 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b49a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b49e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b4a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b4a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b4aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b4ae:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b4b2:	e021      	b.n	800b4f8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b4b4:	693b      	ldr	r3, [r7, #16]
 800b4b6:	ee07 3a90 	vmov	s15, r3
 800b4ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b4be:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800b558 <HAL_RCC_GetSysClockFreq+0x2ec>
 800b4c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b4c6:	4b1e      	ldr	r3, [pc, #120]	@ (800b540 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b4c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b4ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b4ce:	ee07 3a90 	vmov	s15, r3
 800b4d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b4d6:	ed97 6a02 	vldr	s12, [r7, #8]
 800b4da:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800b550 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b4de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b4e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b4e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b4ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b4ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b4f2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b4f6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800b4f8:	4b11      	ldr	r3, [pc, #68]	@ (800b540 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b4fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b4fc:	0a5b      	lsrs	r3, r3, #9
 800b4fe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b502:	3301      	adds	r3, #1
 800b504:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800b506:	683b      	ldr	r3, [r7, #0]
 800b508:	ee07 3a90 	vmov	s15, r3
 800b50c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800b510:	edd7 6a07 	vldr	s13, [r7, #28]
 800b514:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b518:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b51c:	ee17 3a90 	vmov	r3, s15
 800b520:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800b522:	e005      	b.n	800b530 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800b524:	2300      	movs	r3, #0
 800b526:	61bb      	str	r3, [r7, #24]
      break;
 800b528:	e002      	b.n	800b530 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800b52a:	4b07      	ldr	r3, [pc, #28]	@ (800b548 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800b52c:	61bb      	str	r3, [r7, #24]
      break;
 800b52e:	bf00      	nop
  }

  return sysclockfreq;
 800b530:	69bb      	ldr	r3, [r7, #24]
}
 800b532:	4618      	mov	r0, r3
 800b534:	3724      	adds	r7, #36	@ 0x24
 800b536:	46bd      	mov	sp, r7
 800b538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b53c:	4770      	bx	lr
 800b53e:	bf00      	nop
 800b540:	58024400 	.word	0x58024400
 800b544:	03d09000 	.word	0x03d09000
 800b548:	003d0900 	.word	0x003d0900
 800b54c:	016e3600 	.word	0x016e3600
 800b550:	46000000 	.word	0x46000000
 800b554:	4c742400 	.word	0x4c742400
 800b558:	4a742400 	.word	0x4a742400
 800b55c:	4bb71b00 	.word	0x4bb71b00

0800b560 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b560:	b580      	push	{r7, lr}
 800b562:	b082      	sub	sp, #8
 800b564:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800b566:	f7ff fe81 	bl	800b26c <HAL_RCC_GetSysClockFreq>
 800b56a:	4602      	mov	r2, r0
 800b56c:	4b10      	ldr	r3, [pc, #64]	@ (800b5b0 <HAL_RCC_GetHCLKFreq+0x50>)
 800b56e:	699b      	ldr	r3, [r3, #24]
 800b570:	0a1b      	lsrs	r3, r3, #8
 800b572:	f003 030f 	and.w	r3, r3, #15
 800b576:	490f      	ldr	r1, [pc, #60]	@ (800b5b4 <HAL_RCC_GetHCLKFreq+0x54>)
 800b578:	5ccb      	ldrb	r3, [r1, r3]
 800b57a:	f003 031f 	and.w	r3, r3, #31
 800b57e:	fa22 f303 	lsr.w	r3, r2, r3
 800b582:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b584:	4b0a      	ldr	r3, [pc, #40]	@ (800b5b0 <HAL_RCC_GetHCLKFreq+0x50>)
 800b586:	699b      	ldr	r3, [r3, #24]
 800b588:	f003 030f 	and.w	r3, r3, #15
 800b58c:	4a09      	ldr	r2, [pc, #36]	@ (800b5b4 <HAL_RCC_GetHCLKFreq+0x54>)
 800b58e:	5cd3      	ldrb	r3, [r2, r3]
 800b590:	f003 031f 	and.w	r3, r3, #31
 800b594:	687a      	ldr	r2, [r7, #4]
 800b596:	fa22 f303 	lsr.w	r3, r2, r3
 800b59a:	4a07      	ldr	r2, [pc, #28]	@ (800b5b8 <HAL_RCC_GetHCLKFreq+0x58>)
 800b59c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800b59e:	4a07      	ldr	r2, [pc, #28]	@ (800b5bc <HAL_RCC_GetHCLKFreq+0x5c>)
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800b5a4:	4b04      	ldr	r3, [pc, #16]	@ (800b5b8 <HAL_RCC_GetHCLKFreq+0x58>)
 800b5a6:	681b      	ldr	r3, [r3, #0]
}
 800b5a8:	4618      	mov	r0, r3
 800b5aa:	3708      	adds	r7, #8
 800b5ac:	46bd      	mov	sp, r7
 800b5ae:	bd80      	pop	{r7, pc}
 800b5b0:	58024400 	.word	0x58024400
 800b5b4:	08019b44 	.word	0x08019b44
 800b5b8:	24000004 	.word	0x24000004
 800b5bc:	24000000 	.word	0x24000000

0800b5c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b5c0:	b580      	push	{r7, lr}
 800b5c2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800b5c4:	f7ff ffcc 	bl	800b560 <HAL_RCC_GetHCLKFreq>
 800b5c8:	4602      	mov	r2, r0
 800b5ca:	4b06      	ldr	r3, [pc, #24]	@ (800b5e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b5cc:	69db      	ldr	r3, [r3, #28]
 800b5ce:	091b      	lsrs	r3, r3, #4
 800b5d0:	f003 0307 	and.w	r3, r3, #7
 800b5d4:	4904      	ldr	r1, [pc, #16]	@ (800b5e8 <HAL_RCC_GetPCLK1Freq+0x28>)
 800b5d6:	5ccb      	ldrb	r3, [r1, r3]
 800b5d8:	f003 031f 	and.w	r3, r3, #31
 800b5dc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800b5e0:	4618      	mov	r0, r3
 800b5e2:	bd80      	pop	{r7, pc}
 800b5e4:	58024400 	.word	0x58024400
 800b5e8:	08019b44 	.word	0x08019b44

0800b5ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b5ec:	b580      	push	{r7, lr}
 800b5ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800b5f0:	f7ff ffb6 	bl	800b560 <HAL_RCC_GetHCLKFreq>
 800b5f4:	4602      	mov	r2, r0
 800b5f6:	4b06      	ldr	r3, [pc, #24]	@ (800b610 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b5f8:	69db      	ldr	r3, [r3, #28]
 800b5fa:	0a1b      	lsrs	r3, r3, #8
 800b5fc:	f003 0307 	and.w	r3, r3, #7
 800b600:	4904      	ldr	r1, [pc, #16]	@ (800b614 <HAL_RCC_GetPCLK2Freq+0x28>)
 800b602:	5ccb      	ldrb	r3, [r1, r3]
 800b604:	f003 031f 	and.w	r3, r3, #31
 800b608:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800b60c:	4618      	mov	r0, r3
 800b60e:	bd80      	pop	{r7, pc}
 800b610:	58024400 	.word	0x58024400
 800b614:	08019b44 	.word	0x08019b44

0800b618 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b618:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b61c:	b0c6      	sub	sp, #280	@ 0x118
 800b61e:	af00      	add	r7, sp, #0
 800b620:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800b624:	2300      	movs	r3, #0
 800b626:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800b62a:	2300      	movs	r3, #0
 800b62c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800b630:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b634:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b638:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800b63c:	2500      	movs	r5, #0
 800b63e:	ea54 0305 	orrs.w	r3, r4, r5
 800b642:	d049      	beq.n	800b6d8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800b644:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b648:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b64a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800b64e:	d02f      	beq.n	800b6b0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800b650:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800b654:	d828      	bhi.n	800b6a8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800b656:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b65a:	d01a      	beq.n	800b692 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800b65c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b660:	d822      	bhi.n	800b6a8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800b662:	2b00      	cmp	r3, #0
 800b664:	d003      	beq.n	800b66e <HAL_RCCEx_PeriphCLKConfig+0x56>
 800b666:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b66a:	d007      	beq.n	800b67c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800b66c:	e01c      	b.n	800b6a8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b66e:	4bab      	ldr	r3, [pc, #684]	@ (800b91c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b670:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b672:	4aaa      	ldr	r2, [pc, #680]	@ (800b91c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b674:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b678:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b67a:	e01a      	b.n	800b6b2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b67c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b680:	3308      	adds	r3, #8
 800b682:	2102      	movs	r1, #2
 800b684:	4618      	mov	r0, r3
 800b686:	f002 fa49 	bl	800db1c <RCCEx_PLL2_Config>
 800b68a:	4603      	mov	r3, r0
 800b68c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b690:	e00f      	b.n	800b6b2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b692:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b696:	3328      	adds	r3, #40	@ 0x28
 800b698:	2102      	movs	r1, #2
 800b69a:	4618      	mov	r0, r3
 800b69c:	f002 faf0 	bl	800dc80 <RCCEx_PLL3_Config>
 800b6a0:	4603      	mov	r3, r0
 800b6a2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b6a6:	e004      	b.n	800b6b2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b6a8:	2301      	movs	r3, #1
 800b6aa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800b6ae:	e000      	b.n	800b6b2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800b6b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b6b2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d10a      	bne.n	800b6d0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800b6ba:	4b98      	ldr	r3, [pc, #608]	@ (800b91c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b6bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b6be:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800b6c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b6c6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b6c8:	4a94      	ldr	r2, [pc, #592]	@ (800b91c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b6ca:	430b      	orrs	r3, r1
 800b6cc:	6513      	str	r3, [r2, #80]	@ 0x50
 800b6ce:	e003      	b.n	800b6d8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b6d0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b6d4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800b6d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b6dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6e0:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800b6e4:	f04f 0900 	mov.w	r9, #0
 800b6e8:	ea58 0309 	orrs.w	r3, r8, r9
 800b6ec:	d047      	beq.n	800b77e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800b6ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b6f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b6f4:	2b04      	cmp	r3, #4
 800b6f6:	d82a      	bhi.n	800b74e <HAL_RCCEx_PeriphCLKConfig+0x136>
 800b6f8:	a201      	add	r2, pc, #4	@ (adr r2, 800b700 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800b6fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6fe:	bf00      	nop
 800b700:	0800b715 	.word	0x0800b715
 800b704:	0800b723 	.word	0x0800b723
 800b708:	0800b739 	.word	0x0800b739
 800b70c:	0800b757 	.word	0x0800b757
 800b710:	0800b757 	.word	0x0800b757
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b714:	4b81      	ldr	r3, [pc, #516]	@ (800b91c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b716:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b718:	4a80      	ldr	r2, [pc, #512]	@ (800b91c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b71a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b71e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b720:	e01a      	b.n	800b758 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b722:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b726:	3308      	adds	r3, #8
 800b728:	2100      	movs	r1, #0
 800b72a:	4618      	mov	r0, r3
 800b72c:	f002 f9f6 	bl	800db1c <RCCEx_PLL2_Config>
 800b730:	4603      	mov	r3, r0
 800b732:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b736:	e00f      	b.n	800b758 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b738:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b73c:	3328      	adds	r3, #40	@ 0x28
 800b73e:	2100      	movs	r1, #0
 800b740:	4618      	mov	r0, r3
 800b742:	f002 fa9d 	bl	800dc80 <RCCEx_PLL3_Config>
 800b746:	4603      	mov	r3, r0
 800b748:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b74c:	e004      	b.n	800b758 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b74e:	2301      	movs	r3, #1
 800b750:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800b754:	e000      	b.n	800b758 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800b756:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b758:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d10a      	bne.n	800b776 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b760:	4b6e      	ldr	r3, [pc, #440]	@ (800b91c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b762:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b764:	f023 0107 	bic.w	r1, r3, #7
 800b768:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b76c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b76e:	4a6b      	ldr	r2, [pc, #428]	@ (800b91c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b770:	430b      	orrs	r3, r1
 800b772:	6513      	str	r3, [r2, #80]	@ 0x50
 800b774:	e003      	b.n	800b77e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b776:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b77a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800b77e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b782:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b786:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 800b78a:	f04f 0b00 	mov.w	fp, #0
 800b78e:	ea5a 030b 	orrs.w	r3, sl, fp
 800b792:	d05b      	beq.n	800b84c <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800b794:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b798:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800b79c:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800b7a0:	d03b      	beq.n	800b81a <HAL_RCCEx_PeriphCLKConfig+0x202>
 800b7a2:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800b7a6:	d834      	bhi.n	800b812 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800b7a8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800b7ac:	d037      	beq.n	800b81e <HAL_RCCEx_PeriphCLKConfig+0x206>
 800b7ae:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800b7b2:	d82e      	bhi.n	800b812 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800b7b4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800b7b8:	d033      	beq.n	800b822 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800b7ba:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800b7be:	d828      	bhi.n	800b812 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800b7c0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b7c4:	d01a      	beq.n	800b7fc <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800b7c6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b7ca:	d822      	bhi.n	800b812 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d003      	beq.n	800b7d8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 800b7d0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b7d4:	d007      	beq.n	800b7e6 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800b7d6:	e01c      	b.n	800b812 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b7d8:	4b50      	ldr	r3, [pc, #320]	@ (800b91c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b7da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b7dc:	4a4f      	ldr	r2, [pc, #316]	@ (800b91c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b7de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b7e2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b7e4:	e01e      	b.n	800b824 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b7e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b7ea:	3308      	adds	r3, #8
 800b7ec:	2100      	movs	r1, #0
 800b7ee:	4618      	mov	r0, r3
 800b7f0:	f002 f994 	bl	800db1c <RCCEx_PLL2_Config>
 800b7f4:	4603      	mov	r3, r0
 800b7f6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800b7fa:	e013      	b.n	800b824 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b7fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b800:	3328      	adds	r3, #40	@ 0x28
 800b802:	2100      	movs	r1, #0
 800b804:	4618      	mov	r0, r3
 800b806:	f002 fa3b 	bl	800dc80 <RCCEx_PLL3_Config>
 800b80a:	4603      	mov	r3, r0
 800b80c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b810:	e008      	b.n	800b824 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800b812:	2301      	movs	r3, #1
 800b814:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800b818:	e004      	b.n	800b824 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800b81a:	bf00      	nop
 800b81c:	e002      	b.n	800b824 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800b81e:	bf00      	nop
 800b820:	e000      	b.n	800b824 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800b822:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b824:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d10b      	bne.n	800b844 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800b82c:	4b3b      	ldr	r3, [pc, #236]	@ (800b91c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b82e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b830:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800b834:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b838:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800b83c:	4a37      	ldr	r2, [pc, #220]	@ (800b91c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b83e:	430b      	orrs	r3, r1
 800b840:	6593      	str	r3, [r2, #88]	@ 0x58
 800b842:	e003      	b.n	800b84c <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b844:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b848:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800b84c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b850:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b854:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800b858:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800b85c:	2300      	movs	r3, #0
 800b85e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800b862:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800b866:	460b      	mov	r3, r1
 800b868:	4313      	orrs	r3, r2
 800b86a:	d05d      	beq.n	800b928 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800b86c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b870:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800b874:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800b878:	d03b      	beq.n	800b8f2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800b87a:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800b87e:	d834      	bhi.n	800b8ea <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800b880:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b884:	d037      	beq.n	800b8f6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800b886:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b88a:	d82e      	bhi.n	800b8ea <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800b88c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800b890:	d033      	beq.n	800b8fa <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800b892:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800b896:	d828      	bhi.n	800b8ea <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800b898:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b89c:	d01a      	beq.n	800b8d4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800b89e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b8a2:	d822      	bhi.n	800b8ea <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d003      	beq.n	800b8b0 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800b8a8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b8ac:	d007      	beq.n	800b8be <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800b8ae:	e01c      	b.n	800b8ea <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b8b0:	4b1a      	ldr	r3, [pc, #104]	@ (800b91c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b8b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b8b4:	4a19      	ldr	r2, [pc, #100]	@ (800b91c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b8b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b8ba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b8bc:	e01e      	b.n	800b8fc <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b8be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b8c2:	3308      	adds	r3, #8
 800b8c4:	2100      	movs	r1, #0
 800b8c6:	4618      	mov	r0, r3
 800b8c8:	f002 f928 	bl	800db1c <RCCEx_PLL2_Config>
 800b8cc:	4603      	mov	r3, r0
 800b8ce:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800b8d2:	e013      	b.n	800b8fc <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b8d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b8d8:	3328      	adds	r3, #40	@ 0x28
 800b8da:	2100      	movs	r1, #0
 800b8dc:	4618      	mov	r0, r3
 800b8de:	f002 f9cf 	bl	800dc80 <RCCEx_PLL3_Config>
 800b8e2:	4603      	mov	r3, r0
 800b8e4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b8e8:	e008      	b.n	800b8fc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800b8ea:	2301      	movs	r3, #1
 800b8ec:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800b8f0:	e004      	b.n	800b8fc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800b8f2:	bf00      	nop
 800b8f4:	e002      	b.n	800b8fc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800b8f6:	bf00      	nop
 800b8f8:	e000      	b.n	800b8fc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800b8fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b8fc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b900:	2b00      	cmp	r3, #0
 800b902:	d10d      	bne.n	800b920 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800b904:	4b05      	ldr	r3, [pc, #20]	@ (800b91c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b906:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b908:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800b90c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b910:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800b914:	4a01      	ldr	r2, [pc, #4]	@ (800b91c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b916:	430b      	orrs	r3, r1
 800b918:	6593      	str	r3, [r2, #88]	@ 0x58
 800b91a:	e005      	b.n	800b928 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800b91c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b920:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b924:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800b928:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b92c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b930:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800b934:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800b938:	2300      	movs	r3, #0
 800b93a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800b93e:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800b942:	460b      	mov	r3, r1
 800b944:	4313      	orrs	r3, r2
 800b946:	d03a      	beq.n	800b9be <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800b948:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b94c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b94e:	2b30      	cmp	r3, #48	@ 0x30
 800b950:	d01f      	beq.n	800b992 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800b952:	2b30      	cmp	r3, #48	@ 0x30
 800b954:	d819      	bhi.n	800b98a <HAL_RCCEx_PeriphCLKConfig+0x372>
 800b956:	2b20      	cmp	r3, #32
 800b958:	d00c      	beq.n	800b974 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800b95a:	2b20      	cmp	r3, #32
 800b95c:	d815      	bhi.n	800b98a <HAL_RCCEx_PeriphCLKConfig+0x372>
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d019      	beq.n	800b996 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800b962:	2b10      	cmp	r3, #16
 800b964:	d111      	bne.n	800b98a <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b966:	4baa      	ldr	r3, [pc, #680]	@ (800bc10 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b968:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b96a:	4aa9      	ldr	r2, [pc, #676]	@ (800bc10 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b96c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b970:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800b972:	e011      	b.n	800b998 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b974:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b978:	3308      	adds	r3, #8
 800b97a:	2102      	movs	r1, #2
 800b97c:	4618      	mov	r0, r3
 800b97e:	f002 f8cd 	bl	800db1c <RCCEx_PLL2_Config>
 800b982:	4603      	mov	r3, r0
 800b984:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800b988:	e006      	b.n	800b998 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800b98a:	2301      	movs	r3, #1
 800b98c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800b990:	e002      	b.n	800b998 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800b992:	bf00      	nop
 800b994:	e000      	b.n	800b998 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800b996:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b998:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d10a      	bne.n	800b9b6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800b9a0:	4b9b      	ldr	r3, [pc, #620]	@ (800bc10 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b9a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b9a4:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800b9a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b9ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b9ae:	4a98      	ldr	r2, [pc, #608]	@ (800bc10 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b9b0:	430b      	orrs	r3, r1
 800b9b2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800b9b4:	e003      	b.n	800b9be <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b9b6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b9ba:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800b9be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b9c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9c6:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800b9ca:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800b9ce:	2300      	movs	r3, #0
 800b9d0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800b9d4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800b9d8:	460b      	mov	r3, r1
 800b9da:	4313      	orrs	r3, r2
 800b9dc:	d051      	beq.n	800ba82 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800b9de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b9e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b9e4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b9e8:	d035      	beq.n	800ba56 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800b9ea:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b9ee:	d82e      	bhi.n	800ba4e <HAL_RCCEx_PeriphCLKConfig+0x436>
 800b9f0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b9f4:	d031      	beq.n	800ba5a <HAL_RCCEx_PeriphCLKConfig+0x442>
 800b9f6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b9fa:	d828      	bhi.n	800ba4e <HAL_RCCEx_PeriphCLKConfig+0x436>
 800b9fc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ba00:	d01a      	beq.n	800ba38 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800ba02:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ba06:	d822      	bhi.n	800ba4e <HAL_RCCEx_PeriphCLKConfig+0x436>
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d003      	beq.n	800ba14 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 800ba0c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ba10:	d007      	beq.n	800ba22 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800ba12:	e01c      	b.n	800ba4e <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ba14:	4b7e      	ldr	r3, [pc, #504]	@ (800bc10 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ba16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba18:	4a7d      	ldr	r2, [pc, #500]	@ (800bc10 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ba1a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ba1e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800ba20:	e01c      	b.n	800ba5c <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ba22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ba26:	3308      	adds	r3, #8
 800ba28:	2100      	movs	r1, #0
 800ba2a:	4618      	mov	r0, r3
 800ba2c:	f002 f876 	bl	800db1c <RCCEx_PLL2_Config>
 800ba30:	4603      	mov	r3, r0
 800ba32:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800ba36:	e011      	b.n	800ba5c <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ba38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ba3c:	3328      	adds	r3, #40	@ 0x28
 800ba3e:	2100      	movs	r1, #0
 800ba40:	4618      	mov	r0, r3
 800ba42:	f002 f91d 	bl	800dc80 <RCCEx_PLL3_Config>
 800ba46:	4603      	mov	r3, r0
 800ba48:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800ba4c:	e006      	b.n	800ba5c <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ba4e:	2301      	movs	r3, #1
 800ba50:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800ba54:	e002      	b.n	800ba5c <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800ba56:	bf00      	nop
 800ba58:	e000      	b.n	800ba5c <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800ba5a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ba5c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d10a      	bne.n	800ba7a <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800ba64:	4b6a      	ldr	r3, [pc, #424]	@ (800bc10 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ba66:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ba68:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800ba6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ba70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ba72:	4a67      	ldr	r2, [pc, #412]	@ (800bc10 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ba74:	430b      	orrs	r3, r1
 800ba76:	6513      	str	r3, [r2, #80]	@ 0x50
 800ba78:	e003      	b.n	800ba82 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba7a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ba7e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800ba82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ba86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba8a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800ba8e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800ba92:	2300      	movs	r3, #0
 800ba94:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800ba98:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800ba9c:	460b      	mov	r3, r1
 800ba9e:	4313      	orrs	r3, r2
 800baa0:	d053      	beq.n	800bb4a <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800baa2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800baa6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800baa8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800baac:	d033      	beq.n	800bb16 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800baae:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800bab2:	d82c      	bhi.n	800bb0e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800bab4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800bab8:	d02f      	beq.n	800bb1a <HAL_RCCEx_PeriphCLKConfig+0x502>
 800baba:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800babe:	d826      	bhi.n	800bb0e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800bac0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800bac4:	d02b      	beq.n	800bb1e <HAL_RCCEx_PeriphCLKConfig+0x506>
 800bac6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800baca:	d820      	bhi.n	800bb0e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800bacc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bad0:	d012      	beq.n	800baf8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800bad2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bad6:	d81a      	bhi.n	800bb0e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d022      	beq.n	800bb22 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800badc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bae0:	d115      	bne.n	800bb0e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bae2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bae6:	3308      	adds	r3, #8
 800bae8:	2101      	movs	r1, #1
 800baea:	4618      	mov	r0, r3
 800baec:	f002 f816 	bl	800db1c <RCCEx_PLL2_Config>
 800baf0:	4603      	mov	r3, r0
 800baf2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800baf6:	e015      	b.n	800bb24 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800baf8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bafc:	3328      	adds	r3, #40	@ 0x28
 800bafe:	2101      	movs	r1, #1
 800bb00:	4618      	mov	r0, r3
 800bb02:	f002 f8bd 	bl	800dc80 <RCCEx_PLL3_Config>
 800bb06:	4603      	mov	r3, r0
 800bb08:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800bb0c:	e00a      	b.n	800bb24 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bb0e:	2301      	movs	r3, #1
 800bb10:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800bb14:	e006      	b.n	800bb24 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800bb16:	bf00      	nop
 800bb18:	e004      	b.n	800bb24 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800bb1a:	bf00      	nop
 800bb1c:	e002      	b.n	800bb24 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800bb1e:	bf00      	nop
 800bb20:	e000      	b.n	800bb24 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800bb22:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bb24:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d10a      	bne.n	800bb42 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800bb2c:	4b38      	ldr	r3, [pc, #224]	@ (800bc10 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bb2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bb30:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800bb34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bb38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bb3a:	4a35      	ldr	r2, [pc, #212]	@ (800bc10 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bb3c:	430b      	orrs	r3, r1
 800bb3e:	6513      	str	r3, [r2, #80]	@ 0x50
 800bb40:	e003      	b.n	800bb4a <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb42:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bb46:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800bb4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bb4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb52:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800bb56:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800bb5a:	2300      	movs	r3, #0
 800bb5c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800bb60:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800bb64:	460b      	mov	r3, r1
 800bb66:	4313      	orrs	r3, r2
 800bb68:	d058      	beq.n	800bc1c <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800bb6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bb6e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800bb72:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800bb76:	d033      	beq.n	800bbe0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800bb78:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800bb7c:	d82c      	bhi.n	800bbd8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800bb7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bb82:	d02f      	beq.n	800bbe4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800bb84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bb88:	d826      	bhi.n	800bbd8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800bb8a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800bb8e:	d02b      	beq.n	800bbe8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800bb90:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800bb94:	d820      	bhi.n	800bbd8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800bb96:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bb9a:	d012      	beq.n	800bbc2 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 800bb9c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bba0:	d81a      	bhi.n	800bbd8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d022      	beq.n	800bbec <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800bba6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bbaa:	d115      	bne.n	800bbd8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bbac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bbb0:	3308      	adds	r3, #8
 800bbb2:	2101      	movs	r1, #1
 800bbb4:	4618      	mov	r0, r3
 800bbb6:	f001 ffb1 	bl	800db1c <RCCEx_PLL2_Config>
 800bbba:	4603      	mov	r3, r0
 800bbbc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800bbc0:	e015      	b.n	800bbee <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bbc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bbc6:	3328      	adds	r3, #40	@ 0x28
 800bbc8:	2101      	movs	r1, #1
 800bbca:	4618      	mov	r0, r3
 800bbcc:	f002 f858 	bl	800dc80 <RCCEx_PLL3_Config>
 800bbd0:	4603      	mov	r3, r0
 800bbd2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800bbd6:	e00a      	b.n	800bbee <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800bbd8:	2301      	movs	r3, #1
 800bbda:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800bbde:	e006      	b.n	800bbee <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800bbe0:	bf00      	nop
 800bbe2:	e004      	b.n	800bbee <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800bbe4:	bf00      	nop
 800bbe6:	e002      	b.n	800bbee <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800bbe8:	bf00      	nop
 800bbea:	e000      	b.n	800bbee <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800bbec:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bbee:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d10e      	bne.n	800bc14 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800bbf6:	4b06      	ldr	r3, [pc, #24]	@ (800bc10 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bbf8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bbfa:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800bbfe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bc02:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800bc06:	4a02      	ldr	r2, [pc, #8]	@ (800bc10 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bc08:	430b      	orrs	r3, r1
 800bc0a:	6593      	str	r3, [r2, #88]	@ 0x58
 800bc0c:	e006      	b.n	800bc1c <HAL_RCCEx_PeriphCLKConfig+0x604>
 800bc0e:	bf00      	nop
 800bc10:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bc14:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bc18:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800bc1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bc20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc24:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800bc28:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800bc2c:	2300      	movs	r3, #0
 800bc2e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800bc32:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800bc36:	460b      	mov	r3, r1
 800bc38:	4313      	orrs	r3, r2
 800bc3a:	d037      	beq.n	800bcac <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800bc3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bc40:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bc42:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bc46:	d00e      	beq.n	800bc66 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800bc48:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bc4c:	d816      	bhi.n	800bc7c <HAL_RCCEx_PeriphCLKConfig+0x664>
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d018      	beq.n	800bc84 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800bc52:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bc56:	d111      	bne.n	800bc7c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bc58:	4bc4      	ldr	r3, [pc, #784]	@ (800bf6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bc5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc5c:	4ac3      	ldr	r2, [pc, #780]	@ (800bf6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bc5e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bc62:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800bc64:	e00f      	b.n	800bc86 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bc66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bc6a:	3308      	adds	r3, #8
 800bc6c:	2101      	movs	r1, #1
 800bc6e:	4618      	mov	r0, r3
 800bc70:	f001 ff54 	bl	800db1c <RCCEx_PLL2_Config>
 800bc74:	4603      	mov	r3, r0
 800bc76:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800bc7a:	e004      	b.n	800bc86 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bc7c:	2301      	movs	r3, #1
 800bc7e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800bc82:	e000      	b.n	800bc86 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800bc84:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bc86:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d10a      	bne.n	800bca4 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800bc8e:	4bb7      	ldr	r3, [pc, #732]	@ (800bf6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bc90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bc92:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800bc96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bc9a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bc9c:	4ab3      	ldr	r2, [pc, #716]	@ (800bf6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bc9e:	430b      	orrs	r3, r1
 800bca0:	6513      	str	r3, [r2, #80]	@ 0x50
 800bca2:	e003      	b.n	800bcac <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bca4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bca8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800bcac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bcb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcb4:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800bcb8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800bcbc:	2300      	movs	r3, #0
 800bcbe:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800bcc2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800bcc6:	460b      	mov	r3, r1
 800bcc8:	4313      	orrs	r3, r2
 800bcca:	d039      	beq.n	800bd40 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800bccc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bcd0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bcd2:	2b03      	cmp	r3, #3
 800bcd4:	d81c      	bhi.n	800bd10 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800bcd6:	a201      	add	r2, pc, #4	@ (adr r2, 800bcdc <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800bcd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bcdc:	0800bd19 	.word	0x0800bd19
 800bce0:	0800bced 	.word	0x0800bced
 800bce4:	0800bcfb 	.word	0x0800bcfb
 800bce8:	0800bd19 	.word	0x0800bd19
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bcec:	4b9f      	ldr	r3, [pc, #636]	@ (800bf6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bcee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bcf0:	4a9e      	ldr	r2, [pc, #632]	@ (800bf6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bcf2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bcf6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800bcf8:	e00f      	b.n	800bd1a <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800bcfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bcfe:	3308      	adds	r3, #8
 800bd00:	2102      	movs	r1, #2
 800bd02:	4618      	mov	r0, r3
 800bd04:	f001 ff0a 	bl	800db1c <RCCEx_PLL2_Config>
 800bd08:	4603      	mov	r3, r0
 800bd0a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800bd0e:	e004      	b.n	800bd1a <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800bd10:	2301      	movs	r3, #1
 800bd12:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800bd16:	e000      	b.n	800bd1a <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800bd18:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bd1a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	d10a      	bne.n	800bd38 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800bd22:	4b92      	ldr	r3, [pc, #584]	@ (800bf6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bd24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bd26:	f023 0103 	bic.w	r1, r3, #3
 800bd2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bd2e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bd30:	4a8e      	ldr	r2, [pc, #568]	@ (800bf6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bd32:	430b      	orrs	r3, r1
 800bd34:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800bd36:	e003      	b.n	800bd40 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bd38:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bd3c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800bd40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bd44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd48:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800bd4c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800bd50:	2300      	movs	r3, #0
 800bd52:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800bd56:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800bd5a:	460b      	mov	r3, r1
 800bd5c:	4313      	orrs	r3, r2
 800bd5e:	f000 8099 	beq.w	800be94 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800bd62:	4b83      	ldr	r3, [pc, #524]	@ (800bf70 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	4a82      	ldr	r2, [pc, #520]	@ (800bf70 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800bd68:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800bd6c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800bd6e:	f7f8 fe3f 	bl	80049f0 <HAL_GetTick>
 800bd72:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800bd76:	e00b      	b.n	800bd90 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bd78:	f7f8 fe3a 	bl	80049f0 <HAL_GetTick>
 800bd7c:	4602      	mov	r2, r0
 800bd7e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800bd82:	1ad3      	subs	r3, r2, r3
 800bd84:	2b64      	cmp	r3, #100	@ 0x64
 800bd86:	d903      	bls.n	800bd90 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800bd88:	2303      	movs	r3, #3
 800bd8a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800bd8e:	e005      	b.n	800bd9c <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800bd90:	4b77      	ldr	r3, [pc, #476]	@ (800bf70 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d0ed      	beq.n	800bd78 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800bd9c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d173      	bne.n	800be8c <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800bda4:	4b71      	ldr	r3, [pc, #452]	@ (800bf6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bda6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800bda8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bdac:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800bdb0:	4053      	eors	r3, r2
 800bdb2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	d015      	beq.n	800bde6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800bdba:	4b6c      	ldr	r3, [pc, #432]	@ (800bf6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bdbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bdbe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800bdc2:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800bdc6:	4b69      	ldr	r3, [pc, #420]	@ (800bf6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bdc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bdca:	4a68      	ldr	r2, [pc, #416]	@ (800bf6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bdcc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800bdd0:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800bdd2:	4b66      	ldr	r3, [pc, #408]	@ (800bf6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bdd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bdd6:	4a65      	ldr	r2, [pc, #404]	@ (800bf6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bdd8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800bddc:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800bdde:	4a63      	ldr	r2, [pc, #396]	@ (800bf6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bde0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bde4:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800bde6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bdea:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800bdee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bdf2:	d118      	bne.n	800be26 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bdf4:	f7f8 fdfc 	bl	80049f0 <HAL_GetTick>
 800bdf8:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800bdfc:	e00d      	b.n	800be1a <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bdfe:	f7f8 fdf7 	bl	80049f0 <HAL_GetTick>
 800be02:	4602      	mov	r2, r0
 800be04:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800be08:	1ad2      	subs	r2, r2, r3
 800be0a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800be0e:	429a      	cmp	r2, r3
 800be10:	d903      	bls.n	800be1a <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800be12:	2303      	movs	r3, #3
 800be14:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 800be18:	e005      	b.n	800be26 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800be1a:	4b54      	ldr	r3, [pc, #336]	@ (800bf6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800be1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800be1e:	f003 0302 	and.w	r3, r3, #2
 800be22:	2b00      	cmp	r3, #0
 800be24:	d0eb      	beq.n	800bdfe <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800be26:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	d129      	bne.n	800be82 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800be2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800be32:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800be36:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800be3a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800be3e:	d10e      	bne.n	800be5e <HAL_RCCEx_PeriphCLKConfig+0x846>
 800be40:	4b4a      	ldr	r3, [pc, #296]	@ (800bf6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800be42:	691b      	ldr	r3, [r3, #16]
 800be44:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800be48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800be4c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800be50:	091a      	lsrs	r2, r3, #4
 800be52:	4b48      	ldr	r3, [pc, #288]	@ (800bf74 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800be54:	4013      	ands	r3, r2
 800be56:	4a45      	ldr	r2, [pc, #276]	@ (800bf6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800be58:	430b      	orrs	r3, r1
 800be5a:	6113      	str	r3, [r2, #16]
 800be5c:	e005      	b.n	800be6a <HAL_RCCEx_PeriphCLKConfig+0x852>
 800be5e:	4b43      	ldr	r3, [pc, #268]	@ (800bf6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800be60:	691b      	ldr	r3, [r3, #16]
 800be62:	4a42      	ldr	r2, [pc, #264]	@ (800bf6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800be64:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800be68:	6113      	str	r3, [r2, #16]
 800be6a:	4b40      	ldr	r3, [pc, #256]	@ (800bf6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800be6c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800be6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800be72:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800be76:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800be7a:	4a3c      	ldr	r2, [pc, #240]	@ (800bf6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800be7c:	430b      	orrs	r3, r1
 800be7e:	6713      	str	r3, [r2, #112]	@ 0x70
 800be80:	e008      	b.n	800be94 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800be82:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800be86:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800be8a:	e003      	b.n	800be94 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800be8c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800be90:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800be94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800be98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be9c:	f002 0301 	and.w	r3, r2, #1
 800bea0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800bea4:	2300      	movs	r3, #0
 800bea6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800beaa:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800beae:	460b      	mov	r3, r1
 800beb0:	4313      	orrs	r3, r2
 800beb2:	f000 808f 	beq.w	800bfd4 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800beb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800beba:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800bebc:	2b28      	cmp	r3, #40	@ 0x28
 800bebe:	d871      	bhi.n	800bfa4 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800bec0:	a201      	add	r2, pc, #4	@ (adr r2, 800bec8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800bec2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bec6:	bf00      	nop
 800bec8:	0800bfad 	.word	0x0800bfad
 800becc:	0800bfa5 	.word	0x0800bfa5
 800bed0:	0800bfa5 	.word	0x0800bfa5
 800bed4:	0800bfa5 	.word	0x0800bfa5
 800bed8:	0800bfa5 	.word	0x0800bfa5
 800bedc:	0800bfa5 	.word	0x0800bfa5
 800bee0:	0800bfa5 	.word	0x0800bfa5
 800bee4:	0800bfa5 	.word	0x0800bfa5
 800bee8:	0800bf79 	.word	0x0800bf79
 800beec:	0800bfa5 	.word	0x0800bfa5
 800bef0:	0800bfa5 	.word	0x0800bfa5
 800bef4:	0800bfa5 	.word	0x0800bfa5
 800bef8:	0800bfa5 	.word	0x0800bfa5
 800befc:	0800bfa5 	.word	0x0800bfa5
 800bf00:	0800bfa5 	.word	0x0800bfa5
 800bf04:	0800bfa5 	.word	0x0800bfa5
 800bf08:	0800bf8f 	.word	0x0800bf8f
 800bf0c:	0800bfa5 	.word	0x0800bfa5
 800bf10:	0800bfa5 	.word	0x0800bfa5
 800bf14:	0800bfa5 	.word	0x0800bfa5
 800bf18:	0800bfa5 	.word	0x0800bfa5
 800bf1c:	0800bfa5 	.word	0x0800bfa5
 800bf20:	0800bfa5 	.word	0x0800bfa5
 800bf24:	0800bfa5 	.word	0x0800bfa5
 800bf28:	0800bfad 	.word	0x0800bfad
 800bf2c:	0800bfa5 	.word	0x0800bfa5
 800bf30:	0800bfa5 	.word	0x0800bfa5
 800bf34:	0800bfa5 	.word	0x0800bfa5
 800bf38:	0800bfa5 	.word	0x0800bfa5
 800bf3c:	0800bfa5 	.word	0x0800bfa5
 800bf40:	0800bfa5 	.word	0x0800bfa5
 800bf44:	0800bfa5 	.word	0x0800bfa5
 800bf48:	0800bfad 	.word	0x0800bfad
 800bf4c:	0800bfa5 	.word	0x0800bfa5
 800bf50:	0800bfa5 	.word	0x0800bfa5
 800bf54:	0800bfa5 	.word	0x0800bfa5
 800bf58:	0800bfa5 	.word	0x0800bfa5
 800bf5c:	0800bfa5 	.word	0x0800bfa5
 800bf60:	0800bfa5 	.word	0x0800bfa5
 800bf64:	0800bfa5 	.word	0x0800bfa5
 800bf68:	0800bfad 	.word	0x0800bfad
 800bf6c:	58024400 	.word	0x58024400
 800bf70:	58024800 	.word	0x58024800
 800bf74:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bf78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bf7c:	3308      	adds	r3, #8
 800bf7e:	2101      	movs	r1, #1
 800bf80:	4618      	mov	r0, r3
 800bf82:	f001 fdcb 	bl	800db1c <RCCEx_PLL2_Config>
 800bf86:	4603      	mov	r3, r0
 800bf88:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800bf8c:	e00f      	b.n	800bfae <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bf8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bf92:	3328      	adds	r3, #40	@ 0x28
 800bf94:	2101      	movs	r1, #1
 800bf96:	4618      	mov	r0, r3
 800bf98:	f001 fe72 	bl	800dc80 <RCCEx_PLL3_Config>
 800bf9c:	4603      	mov	r3, r0
 800bf9e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800bfa2:	e004      	b.n	800bfae <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bfa4:	2301      	movs	r3, #1
 800bfa6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800bfaa:	e000      	b.n	800bfae <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800bfac:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bfae:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d10a      	bne.n	800bfcc <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800bfb6:	4bbf      	ldr	r3, [pc, #764]	@ (800c2b4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800bfb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bfba:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800bfbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bfc2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800bfc4:	4abb      	ldr	r2, [pc, #748]	@ (800c2b4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800bfc6:	430b      	orrs	r3, r1
 800bfc8:	6553      	str	r3, [r2, #84]	@ 0x54
 800bfca:	e003      	b.n	800bfd4 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bfcc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bfd0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800bfd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bfd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfdc:	f002 0302 	and.w	r3, r2, #2
 800bfe0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800bfe4:	2300      	movs	r3, #0
 800bfe6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800bfea:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800bfee:	460b      	mov	r3, r1
 800bff0:	4313      	orrs	r3, r2
 800bff2:	d041      	beq.n	800c078 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800bff4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bff8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bffa:	2b05      	cmp	r3, #5
 800bffc:	d824      	bhi.n	800c048 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800bffe:	a201      	add	r2, pc, #4	@ (adr r2, 800c004 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 800c000:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c004:	0800c051 	.word	0x0800c051
 800c008:	0800c01d 	.word	0x0800c01d
 800c00c:	0800c033 	.word	0x0800c033
 800c010:	0800c051 	.word	0x0800c051
 800c014:	0800c051 	.word	0x0800c051
 800c018:	0800c051 	.word	0x0800c051
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c01c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c020:	3308      	adds	r3, #8
 800c022:	2101      	movs	r1, #1
 800c024:	4618      	mov	r0, r3
 800c026:	f001 fd79 	bl	800db1c <RCCEx_PLL2_Config>
 800c02a:	4603      	mov	r3, r0
 800c02c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800c030:	e00f      	b.n	800c052 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c032:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c036:	3328      	adds	r3, #40	@ 0x28
 800c038:	2101      	movs	r1, #1
 800c03a:	4618      	mov	r0, r3
 800c03c:	f001 fe20 	bl	800dc80 <RCCEx_PLL3_Config>
 800c040:	4603      	mov	r3, r0
 800c042:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800c046:	e004      	b.n	800c052 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c048:	2301      	movs	r3, #1
 800c04a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c04e:	e000      	b.n	800c052 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 800c050:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c052:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c056:	2b00      	cmp	r3, #0
 800c058:	d10a      	bne.n	800c070 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800c05a:	4b96      	ldr	r3, [pc, #600]	@ (800c2b4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c05c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c05e:	f023 0107 	bic.w	r1, r3, #7
 800c062:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c066:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c068:	4a92      	ldr	r2, [pc, #584]	@ (800c2b4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c06a:	430b      	orrs	r3, r1
 800c06c:	6553      	str	r3, [r2, #84]	@ 0x54
 800c06e:	e003      	b.n	800c078 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c070:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c074:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800c078:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c07c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c080:	f002 0304 	and.w	r3, r2, #4
 800c084:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800c088:	2300      	movs	r3, #0
 800c08a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800c08e:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800c092:	460b      	mov	r3, r1
 800c094:	4313      	orrs	r3, r2
 800c096:	d044      	beq.n	800c122 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800c098:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c09c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c0a0:	2b05      	cmp	r3, #5
 800c0a2:	d825      	bhi.n	800c0f0 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 800c0a4:	a201      	add	r2, pc, #4	@ (adr r2, 800c0ac <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800c0a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0aa:	bf00      	nop
 800c0ac:	0800c0f9 	.word	0x0800c0f9
 800c0b0:	0800c0c5 	.word	0x0800c0c5
 800c0b4:	0800c0db 	.word	0x0800c0db
 800c0b8:	0800c0f9 	.word	0x0800c0f9
 800c0bc:	0800c0f9 	.word	0x0800c0f9
 800c0c0:	0800c0f9 	.word	0x0800c0f9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c0c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c0c8:	3308      	adds	r3, #8
 800c0ca:	2101      	movs	r1, #1
 800c0cc:	4618      	mov	r0, r3
 800c0ce:	f001 fd25 	bl	800db1c <RCCEx_PLL2_Config>
 800c0d2:	4603      	mov	r3, r0
 800c0d4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800c0d8:	e00f      	b.n	800c0fa <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c0da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c0de:	3328      	adds	r3, #40	@ 0x28
 800c0e0:	2101      	movs	r1, #1
 800c0e2:	4618      	mov	r0, r3
 800c0e4:	f001 fdcc 	bl	800dc80 <RCCEx_PLL3_Config>
 800c0e8:	4603      	mov	r3, r0
 800c0ea:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800c0ee:	e004      	b.n	800c0fa <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c0f0:	2301      	movs	r3, #1
 800c0f2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c0f6:	e000      	b.n	800c0fa <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 800c0f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c0fa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d10b      	bne.n	800c11a <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800c102:	4b6c      	ldr	r3, [pc, #432]	@ (800c2b4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c104:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c106:	f023 0107 	bic.w	r1, r3, #7
 800c10a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c10e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c112:	4a68      	ldr	r2, [pc, #416]	@ (800c2b4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c114:	430b      	orrs	r3, r1
 800c116:	6593      	str	r3, [r2, #88]	@ 0x58
 800c118:	e003      	b.n	800c122 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c11a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c11e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800c122:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c12a:	f002 0320 	and.w	r3, r2, #32
 800c12e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800c132:	2300      	movs	r3, #0
 800c134:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800c138:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800c13c:	460b      	mov	r3, r1
 800c13e:	4313      	orrs	r3, r2
 800c140:	d055      	beq.n	800c1ee <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800c142:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c146:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c14a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c14e:	d033      	beq.n	800c1b8 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 800c150:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c154:	d82c      	bhi.n	800c1b0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800c156:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c15a:	d02f      	beq.n	800c1bc <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800c15c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c160:	d826      	bhi.n	800c1b0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800c162:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800c166:	d02b      	beq.n	800c1c0 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800c168:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800c16c:	d820      	bhi.n	800c1b0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800c16e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c172:	d012      	beq.n	800c19a <HAL_RCCEx_PeriphCLKConfig+0xb82>
 800c174:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c178:	d81a      	bhi.n	800c1b0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d022      	beq.n	800c1c4 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800c17e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c182:	d115      	bne.n	800c1b0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c184:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c188:	3308      	adds	r3, #8
 800c18a:	2100      	movs	r1, #0
 800c18c:	4618      	mov	r0, r3
 800c18e:	f001 fcc5 	bl	800db1c <RCCEx_PLL2_Config>
 800c192:	4603      	mov	r3, r0
 800c194:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800c198:	e015      	b.n	800c1c6 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c19a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c19e:	3328      	adds	r3, #40	@ 0x28
 800c1a0:	2102      	movs	r1, #2
 800c1a2:	4618      	mov	r0, r3
 800c1a4:	f001 fd6c 	bl	800dc80 <RCCEx_PLL3_Config>
 800c1a8:	4603      	mov	r3, r0
 800c1aa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800c1ae:	e00a      	b.n	800c1c6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c1b0:	2301      	movs	r3, #1
 800c1b2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c1b6:	e006      	b.n	800c1c6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800c1b8:	bf00      	nop
 800c1ba:	e004      	b.n	800c1c6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800c1bc:	bf00      	nop
 800c1be:	e002      	b.n	800c1c6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800c1c0:	bf00      	nop
 800c1c2:	e000      	b.n	800c1c6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800c1c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c1c6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d10b      	bne.n	800c1e6 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800c1ce:	4b39      	ldr	r3, [pc, #228]	@ (800c2b4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c1d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c1d2:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800c1d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c1da:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c1de:	4a35      	ldr	r2, [pc, #212]	@ (800c2b4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c1e0:	430b      	orrs	r3, r1
 800c1e2:	6553      	str	r3, [r2, #84]	@ 0x54
 800c1e4:	e003      	b.n	800c1ee <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c1e6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c1ea:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800c1ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c1f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1f6:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800c1fa:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800c1fe:	2300      	movs	r3, #0
 800c200:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800c204:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800c208:	460b      	mov	r3, r1
 800c20a:	4313      	orrs	r3, r2
 800c20c:	d058      	beq.n	800c2c0 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800c20e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c212:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800c216:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800c21a:	d033      	beq.n	800c284 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800c21c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800c220:	d82c      	bhi.n	800c27c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800c222:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c226:	d02f      	beq.n	800c288 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800c228:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c22c:	d826      	bhi.n	800c27c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800c22e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800c232:	d02b      	beq.n	800c28c <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800c234:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800c238:	d820      	bhi.n	800c27c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800c23a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c23e:	d012      	beq.n	800c266 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 800c240:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c244:	d81a      	bhi.n	800c27c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800c246:	2b00      	cmp	r3, #0
 800c248:	d022      	beq.n	800c290 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800c24a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c24e:	d115      	bne.n	800c27c <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c250:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c254:	3308      	adds	r3, #8
 800c256:	2100      	movs	r1, #0
 800c258:	4618      	mov	r0, r3
 800c25a:	f001 fc5f 	bl	800db1c <RCCEx_PLL2_Config>
 800c25e:	4603      	mov	r3, r0
 800c260:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800c264:	e015      	b.n	800c292 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c266:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c26a:	3328      	adds	r3, #40	@ 0x28
 800c26c:	2102      	movs	r1, #2
 800c26e:	4618      	mov	r0, r3
 800c270:	f001 fd06 	bl	800dc80 <RCCEx_PLL3_Config>
 800c274:	4603      	mov	r3, r0
 800c276:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800c27a:	e00a      	b.n	800c292 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c27c:	2301      	movs	r3, #1
 800c27e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c282:	e006      	b.n	800c292 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800c284:	bf00      	nop
 800c286:	e004      	b.n	800c292 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800c288:	bf00      	nop
 800c28a:	e002      	b.n	800c292 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800c28c:	bf00      	nop
 800c28e:	e000      	b.n	800c292 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800c290:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c292:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c296:	2b00      	cmp	r3, #0
 800c298:	d10e      	bne.n	800c2b8 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800c29a:	4b06      	ldr	r3, [pc, #24]	@ (800c2b4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c29c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c29e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800c2a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c2a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800c2aa:	4a02      	ldr	r2, [pc, #8]	@ (800c2b4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c2ac:	430b      	orrs	r3, r1
 800c2ae:	6593      	str	r3, [r2, #88]	@ 0x58
 800c2b0:	e006      	b.n	800c2c0 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800c2b2:	bf00      	nop
 800c2b4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c2b8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c2bc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800c2c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c2c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2c8:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800c2cc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800c2d0:	2300      	movs	r3, #0
 800c2d2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800c2d6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800c2da:	460b      	mov	r3, r1
 800c2dc:	4313      	orrs	r3, r2
 800c2de:	d055      	beq.n	800c38c <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800c2e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c2e4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800c2e8:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800c2ec:	d033      	beq.n	800c356 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800c2ee:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800c2f2:	d82c      	bhi.n	800c34e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800c2f4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c2f8:	d02f      	beq.n	800c35a <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800c2fa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c2fe:	d826      	bhi.n	800c34e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800c300:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800c304:	d02b      	beq.n	800c35e <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800c306:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800c30a:	d820      	bhi.n	800c34e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800c30c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c310:	d012      	beq.n	800c338 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800c312:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c316:	d81a      	bhi.n	800c34e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d022      	beq.n	800c362 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800c31c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c320:	d115      	bne.n	800c34e <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c322:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c326:	3308      	adds	r3, #8
 800c328:	2100      	movs	r1, #0
 800c32a:	4618      	mov	r0, r3
 800c32c:	f001 fbf6 	bl	800db1c <RCCEx_PLL2_Config>
 800c330:	4603      	mov	r3, r0
 800c332:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800c336:	e015      	b.n	800c364 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c338:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c33c:	3328      	adds	r3, #40	@ 0x28
 800c33e:	2102      	movs	r1, #2
 800c340:	4618      	mov	r0, r3
 800c342:	f001 fc9d 	bl	800dc80 <RCCEx_PLL3_Config>
 800c346:	4603      	mov	r3, r0
 800c348:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800c34c:	e00a      	b.n	800c364 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c34e:	2301      	movs	r3, #1
 800c350:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c354:	e006      	b.n	800c364 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800c356:	bf00      	nop
 800c358:	e004      	b.n	800c364 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800c35a:	bf00      	nop
 800c35c:	e002      	b.n	800c364 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800c35e:	bf00      	nop
 800c360:	e000      	b.n	800c364 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800c362:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c364:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d10b      	bne.n	800c384 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800c36c:	4ba0      	ldr	r3, [pc, #640]	@ (800c5f0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c36e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c370:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800c374:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c378:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800c37c:	4a9c      	ldr	r2, [pc, #624]	@ (800c5f0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c37e:	430b      	orrs	r3, r1
 800c380:	6593      	str	r3, [r2, #88]	@ 0x58
 800c382:	e003      	b.n	800c38c <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c384:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c388:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800c38c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c390:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c394:	f002 0308 	and.w	r3, r2, #8
 800c398:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800c39c:	2300      	movs	r3, #0
 800c39e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800c3a2:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800c3a6:	460b      	mov	r3, r1
 800c3a8:	4313      	orrs	r3, r2
 800c3aa:	d01e      	beq.n	800c3ea <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800c3ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c3b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c3b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c3b8:	d10c      	bne.n	800c3d4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c3ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c3be:	3328      	adds	r3, #40	@ 0x28
 800c3c0:	2102      	movs	r1, #2
 800c3c2:	4618      	mov	r0, r3
 800c3c4:	f001 fc5c 	bl	800dc80 <RCCEx_PLL3_Config>
 800c3c8:	4603      	mov	r3, r0
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d002      	beq.n	800c3d4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800c3ce:	2301      	movs	r3, #1
 800c3d0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800c3d4:	4b86      	ldr	r3, [pc, #536]	@ (800c5f0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c3d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c3d8:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800c3dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c3e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c3e4:	4a82      	ldr	r2, [pc, #520]	@ (800c5f0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c3e6:	430b      	orrs	r3, r1
 800c3e8:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800c3ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c3ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3f2:	f002 0310 	and.w	r3, r2, #16
 800c3f6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800c3fa:	2300      	movs	r3, #0
 800c3fc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800c400:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800c404:	460b      	mov	r3, r1
 800c406:	4313      	orrs	r3, r2
 800c408:	d01e      	beq.n	800c448 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800c40a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c40e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c412:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c416:	d10c      	bne.n	800c432 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c418:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c41c:	3328      	adds	r3, #40	@ 0x28
 800c41e:	2102      	movs	r1, #2
 800c420:	4618      	mov	r0, r3
 800c422:	f001 fc2d 	bl	800dc80 <RCCEx_PLL3_Config>
 800c426:	4603      	mov	r3, r0
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d002      	beq.n	800c432 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 800c42c:	2301      	movs	r3, #1
 800c42e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800c432:	4b6f      	ldr	r3, [pc, #444]	@ (800c5f0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c434:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c436:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800c43a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c43e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c442:	4a6b      	ldr	r2, [pc, #428]	@ (800c5f0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c444:	430b      	orrs	r3, r1
 800c446:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800c448:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c44c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c450:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800c454:	67bb      	str	r3, [r7, #120]	@ 0x78
 800c456:	2300      	movs	r3, #0
 800c458:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800c45a:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800c45e:	460b      	mov	r3, r1
 800c460:	4313      	orrs	r3, r2
 800c462:	d03e      	beq.n	800c4e2 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800c464:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c468:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800c46c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c470:	d022      	beq.n	800c4b8 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800c472:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c476:	d81b      	bhi.n	800c4b0 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d003      	beq.n	800c484 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 800c47c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c480:	d00b      	beq.n	800c49a <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800c482:	e015      	b.n	800c4b0 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c484:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c488:	3308      	adds	r3, #8
 800c48a:	2100      	movs	r1, #0
 800c48c:	4618      	mov	r0, r3
 800c48e:	f001 fb45 	bl	800db1c <RCCEx_PLL2_Config>
 800c492:	4603      	mov	r3, r0
 800c494:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800c498:	e00f      	b.n	800c4ba <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c49a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c49e:	3328      	adds	r3, #40	@ 0x28
 800c4a0:	2102      	movs	r1, #2
 800c4a2:	4618      	mov	r0, r3
 800c4a4:	f001 fbec 	bl	800dc80 <RCCEx_PLL3_Config>
 800c4a8:	4603      	mov	r3, r0
 800c4aa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800c4ae:	e004      	b.n	800c4ba <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c4b0:	2301      	movs	r3, #1
 800c4b2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c4b6:	e000      	b.n	800c4ba <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800c4b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c4ba:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	d10b      	bne.n	800c4da <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800c4c2:	4b4b      	ldr	r3, [pc, #300]	@ (800c5f0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c4c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c4c6:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800c4ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c4ce:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800c4d2:	4a47      	ldr	r2, [pc, #284]	@ (800c5f0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c4d4:	430b      	orrs	r3, r1
 800c4d6:	6593      	str	r3, [r2, #88]	@ 0x58
 800c4d8:	e003      	b.n	800c4e2 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c4da:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c4de:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800c4e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c4e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4ea:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800c4ee:	673b      	str	r3, [r7, #112]	@ 0x70
 800c4f0:	2300      	movs	r3, #0
 800c4f2:	677b      	str	r3, [r7, #116]	@ 0x74
 800c4f4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800c4f8:	460b      	mov	r3, r1
 800c4fa:	4313      	orrs	r3, r2
 800c4fc:	d03b      	beq.n	800c576 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800c4fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c502:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c506:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800c50a:	d01f      	beq.n	800c54c <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800c50c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800c510:	d818      	bhi.n	800c544 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800c512:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c516:	d003      	beq.n	800c520 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 800c518:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c51c:	d007      	beq.n	800c52e <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800c51e:	e011      	b.n	800c544 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c520:	4b33      	ldr	r3, [pc, #204]	@ (800c5f0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c522:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c524:	4a32      	ldr	r2, [pc, #200]	@ (800c5f0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c526:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c52a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800c52c:	e00f      	b.n	800c54e <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c52e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c532:	3328      	adds	r3, #40	@ 0x28
 800c534:	2101      	movs	r1, #1
 800c536:	4618      	mov	r0, r3
 800c538:	f001 fba2 	bl	800dc80 <RCCEx_PLL3_Config>
 800c53c:	4603      	mov	r3, r0
 800c53e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800c542:	e004      	b.n	800c54e <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c544:	2301      	movs	r3, #1
 800c546:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c54a:	e000      	b.n	800c54e <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 800c54c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c54e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c552:	2b00      	cmp	r3, #0
 800c554:	d10b      	bne.n	800c56e <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800c556:	4b26      	ldr	r3, [pc, #152]	@ (800c5f0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c558:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c55a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800c55e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c562:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c566:	4a22      	ldr	r2, [pc, #136]	@ (800c5f0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c568:	430b      	orrs	r3, r1
 800c56a:	6553      	str	r3, [r2, #84]	@ 0x54
 800c56c:	e003      	b.n	800c576 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c56e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c572:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800c576:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c57a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c57e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800c582:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c584:	2300      	movs	r3, #0
 800c586:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800c588:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800c58c:	460b      	mov	r3, r1
 800c58e:	4313      	orrs	r3, r2
 800c590:	d034      	beq.n	800c5fc <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800c592:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c596:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c598:	2b00      	cmp	r3, #0
 800c59a:	d003      	beq.n	800c5a4 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800c59c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c5a0:	d007      	beq.n	800c5b2 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800c5a2:	e011      	b.n	800c5c8 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c5a4:	4b12      	ldr	r3, [pc, #72]	@ (800c5f0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c5a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c5a8:	4a11      	ldr	r2, [pc, #68]	@ (800c5f0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c5aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c5ae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800c5b0:	e00e      	b.n	800c5d0 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c5b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c5b6:	3308      	adds	r3, #8
 800c5b8:	2102      	movs	r1, #2
 800c5ba:	4618      	mov	r0, r3
 800c5bc:	f001 faae 	bl	800db1c <RCCEx_PLL2_Config>
 800c5c0:	4603      	mov	r3, r0
 800c5c2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800c5c6:	e003      	b.n	800c5d0 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 800c5c8:	2301      	movs	r3, #1
 800c5ca:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c5ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c5d0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	d10d      	bne.n	800c5f4 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800c5d8:	4b05      	ldr	r3, [pc, #20]	@ (800c5f0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c5da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c5dc:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800c5e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c5e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c5e6:	4a02      	ldr	r2, [pc, #8]	@ (800c5f0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c5e8:	430b      	orrs	r3, r1
 800c5ea:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800c5ec:	e006      	b.n	800c5fc <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800c5ee:	bf00      	nop
 800c5f0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c5f4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c5f8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800c5fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c600:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c604:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800c608:	663b      	str	r3, [r7, #96]	@ 0x60
 800c60a:	2300      	movs	r3, #0
 800c60c:	667b      	str	r3, [r7, #100]	@ 0x64
 800c60e:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800c612:	460b      	mov	r3, r1
 800c614:	4313      	orrs	r3, r2
 800c616:	d00c      	beq.n	800c632 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c618:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c61c:	3328      	adds	r3, #40	@ 0x28
 800c61e:	2102      	movs	r1, #2
 800c620:	4618      	mov	r0, r3
 800c622:	f001 fb2d 	bl	800dc80 <RCCEx_PLL3_Config>
 800c626:	4603      	mov	r3, r0
 800c628:	2b00      	cmp	r3, #0
 800c62a:	d002      	beq.n	800c632 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 800c62c:	2301      	movs	r3, #1
 800c62e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800c632:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c63a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800c63e:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c640:	2300      	movs	r3, #0
 800c642:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c644:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800c648:	460b      	mov	r3, r1
 800c64a:	4313      	orrs	r3, r2
 800c64c:	d036      	beq.n	800c6bc <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800c64e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c652:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c654:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c658:	d018      	beq.n	800c68c <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800c65a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c65e:	d811      	bhi.n	800c684 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800c660:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c664:	d014      	beq.n	800c690 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800c666:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c66a:	d80b      	bhi.n	800c684 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d011      	beq.n	800c694 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800c670:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c674:	d106      	bne.n	800c684 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c676:	4bb7      	ldr	r3, [pc, #732]	@ (800c954 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c678:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c67a:	4ab6      	ldr	r2, [pc, #728]	@ (800c954 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c67c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c680:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800c682:	e008      	b.n	800c696 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c684:	2301      	movs	r3, #1
 800c686:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c68a:	e004      	b.n	800c696 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800c68c:	bf00      	nop
 800c68e:	e002      	b.n	800c696 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800c690:	bf00      	nop
 800c692:	e000      	b.n	800c696 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800c694:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c696:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d10a      	bne.n	800c6b4 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800c69e:	4bad      	ldr	r3, [pc, #692]	@ (800c954 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c6a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c6a2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800c6a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c6aa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c6ac:	4aa9      	ldr	r2, [pc, #676]	@ (800c954 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c6ae:	430b      	orrs	r3, r1
 800c6b0:	6553      	str	r3, [r2, #84]	@ 0x54
 800c6b2:	e003      	b.n	800c6bc <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c6b4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c6b8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800c6bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c6c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6c4:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800c6c8:	653b      	str	r3, [r7, #80]	@ 0x50
 800c6ca:	2300      	movs	r3, #0
 800c6cc:	657b      	str	r3, [r7, #84]	@ 0x54
 800c6ce:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800c6d2:	460b      	mov	r3, r1
 800c6d4:	4313      	orrs	r3, r2
 800c6d6:	d009      	beq.n	800c6ec <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800c6d8:	4b9e      	ldr	r3, [pc, #632]	@ (800c954 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c6da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c6dc:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800c6e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c6e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c6e6:	4a9b      	ldr	r2, [pc, #620]	@ (800c954 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c6e8:	430b      	orrs	r3, r1
 800c6ea:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800c6ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c6f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6f4:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800c6f8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c6fa:	2300      	movs	r3, #0
 800c6fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c6fe:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800c702:	460b      	mov	r3, r1
 800c704:	4313      	orrs	r3, r2
 800c706:	d009      	beq.n	800c71c <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800c708:	4b92      	ldr	r3, [pc, #584]	@ (800c954 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c70a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c70c:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800c710:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c714:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c716:	4a8f      	ldr	r2, [pc, #572]	@ (800c954 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c718:	430b      	orrs	r3, r1
 800c71a:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800c71c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c720:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c724:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800c728:	643b      	str	r3, [r7, #64]	@ 0x40
 800c72a:	2300      	movs	r3, #0
 800c72c:	647b      	str	r3, [r7, #68]	@ 0x44
 800c72e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800c732:	460b      	mov	r3, r1
 800c734:	4313      	orrs	r3, r2
 800c736:	d00e      	beq.n	800c756 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800c738:	4b86      	ldr	r3, [pc, #536]	@ (800c954 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c73a:	691b      	ldr	r3, [r3, #16]
 800c73c:	4a85      	ldr	r2, [pc, #532]	@ (800c954 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c73e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800c742:	6113      	str	r3, [r2, #16]
 800c744:	4b83      	ldr	r3, [pc, #524]	@ (800c954 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c746:	6919      	ldr	r1, [r3, #16]
 800c748:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c74c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800c750:	4a80      	ldr	r2, [pc, #512]	@ (800c954 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c752:	430b      	orrs	r3, r1
 800c754:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800c756:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c75a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c75e:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800c762:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c764:	2300      	movs	r3, #0
 800c766:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c768:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800c76c:	460b      	mov	r3, r1
 800c76e:	4313      	orrs	r3, r2
 800c770:	d009      	beq.n	800c786 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800c772:	4b78      	ldr	r3, [pc, #480]	@ (800c954 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c774:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c776:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800c77a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c77e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c780:	4a74      	ldr	r2, [pc, #464]	@ (800c954 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c782:	430b      	orrs	r3, r1
 800c784:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800c786:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c78a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c78e:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800c792:	633b      	str	r3, [r7, #48]	@ 0x30
 800c794:	2300      	movs	r3, #0
 800c796:	637b      	str	r3, [r7, #52]	@ 0x34
 800c798:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800c79c:	460b      	mov	r3, r1
 800c79e:	4313      	orrs	r3, r2
 800c7a0:	d00a      	beq.n	800c7b8 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800c7a2:	4b6c      	ldr	r3, [pc, #432]	@ (800c954 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c7a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c7a6:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800c7aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c7ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c7b2:	4a68      	ldr	r2, [pc, #416]	@ (800c954 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c7b4:	430b      	orrs	r3, r1
 800c7b6:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800c7b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c7bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7c0:	2100      	movs	r1, #0
 800c7c2:	62b9      	str	r1, [r7, #40]	@ 0x28
 800c7c4:	f003 0301 	and.w	r3, r3, #1
 800c7c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c7ca:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800c7ce:	460b      	mov	r3, r1
 800c7d0:	4313      	orrs	r3, r2
 800c7d2:	d011      	beq.n	800c7f8 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c7d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c7d8:	3308      	adds	r3, #8
 800c7da:	2100      	movs	r1, #0
 800c7dc:	4618      	mov	r0, r3
 800c7de:	f001 f99d 	bl	800db1c <RCCEx_PLL2_Config>
 800c7e2:	4603      	mov	r3, r0
 800c7e4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800c7e8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	d003      	beq.n	800c7f8 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c7f0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c7f4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800c7f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c7fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c800:	2100      	movs	r1, #0
 800c802:	6239      	str	r1, [r7, #32]
 800c804:	f003 0302 	and.w	r3, r3, #2
 800c808:	627b      	str	r3, [r7, #36]	@ 0x24
 800c80a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800c80e:	460b      	mov	r3, r1
 800c810:	4313      	orrs	r3, r2
 800c812:	d011      	beq.n	800c838 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c814:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c818:	3308      	adds	r3, #8
 800c81a:	2101      	movs	r1, #1
 800c81c:	4618      	mov	r0, r3
 800c81e:	f001 f97d 	bl	800db1c <RCCEx_PLL2_Config>
 800c822:	4603      	mov	r3, r0
 800c824:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800c828:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	d003      	beq.n	800c838 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c830:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c834:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800c838:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c83c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c840:	2100      	movs	r1, #0
 800c842:	61b9      	str	r1, [r7, #24]
 800c844:	f003 0304 	and.w	r3, r3, #4
 800c848:	61fb      	str	r3, [r7, #28]
 800c84a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800c84e:	460b      	mov	r3, r1
 800c850:	4313      	orrs	r3, r2
 800c852:	d011      	beq.n	800c878 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c854:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c858:	3308      	adds	r3, #8
 800c85a:	2102      	movs	r1, #2
 800c85c:	4618      	mov	r0, r3
 800c85e:	f001 f95d 	bl	800db1c <RCCEx_PLL2_Config>
 800c862:	4603      	mov	r3, r0
 800c864:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800c868:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	d003      	beq.n	800c878 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c870:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c874:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800c878:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c87c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c880:	2100      	movs	r1, #0
 800c882:	6139      	str	r1, [r7, #16]
 800c884:	f003 0308 	and.w	r3, r3, #8
 800c888:	617b      	str	r3, [r7, #20]
 800c88a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800c88e:	460b      	mov	r3, r1
 800c890:	4313      	orrs	r3, r2
 800c892:	d011      	beq.n	800c8b8 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c894:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c898:	3328      	adds	r3, #40	@ 0x28
 800c89a:	2100      	movs	r1, #0
 800c89c:	4618      	mov	r0, r3
 800c89e:	f001 f9ef 	bl	800dc80 <RCCEx_PLL3_Config>
 800c8a2:	4603      	mov	r3, r0
 800c8a4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 800c8a8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	d003      	beq.n	800c8b8 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c8b0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c8b4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800c8b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c8bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8c0:	2100      	movs	r1, #0
 800c8c2:	60b9      	str	r1, [r7, #8]
 800c8c4:	f003 0310 	and.w	r3, r3, #16
 800c8c8:	60fb      	str	r3, [r7, #12]
 800c8ca:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800c8ce:	460b      	mov	r3, r1
 800c8d0:	4313      	orrs	r3, r2
 800c8d2:	d011      	beq.n	800c8f8 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c8d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c8d8:	3328      	adds	r3, #40	@ 0x28
 800c8da:	2101      	movs	r1, #1
 800c8dc:	4618      	mov	r0, r3
 800c8de:	f001 f9cf 	bl	800dc80 <RCCEx_PLL3_Config>
 800c8e2:	4603      	mov	r3, r0
 800c8e4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800c8e8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	d003      	beq.n	800c8f8 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c8f0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c8f4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800c8f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c8fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c900:	2100      	movs	r1, #0
 800c902:	6039      	str	r1, [r7, #0]
 800c904:	f003 0320 	and.w	r3, r3, #32
 800c908:	607b      	str	r3, [r7, #4]
 800c90a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800c90e:	460b      	mov	r3, r1
 800c910:	4313      	orrs	r3, r2
 800c912:	d011      	beq.n	800c938 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c914:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c918:	3328      	adds	r3, #40	@ 0x28
 800c91a:	2102      	movs	r1, #2
 800c91c:	4618      	mov	r0, r3
 800c91e:	f001 f9af 	bl	800dc80 <RCCEx_PLL3_Config>
 800c922:	4603      	mov	r3, r0
 800c924:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800c928:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	d003      	beq.n	800c938 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c930:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c934:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 800c938:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	d101      	bne.n	800c944 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800c940:	2300      	movs	r3, #0
 800c942:	e000      	b.n	800c946 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800c944:	2301      	movs	r3, #1
}
 800c946:	4618      	mov	r0, r3
 800c948:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 800c94c:	46bd      	mov	sp, r7
 800c94e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c952:	bf00      	nop
 800c954:	58024400 	.word	0x58024400

0800c958 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800c958:	b580      	push	{r7, lr}
 800c95a:	b090      	sub	sp, #64	@ 0x40
 800c95c:	af00      	add	r7, sp, #0
 800c95e:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800c962:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c966:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800c96a:	430b      	orrs	r3, r1
 800c96c:	f040 8094 	bne.w	800ca98 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800c970:	4b9b      	ldr	r3, [pc, #620]	@ (800cbe0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c972:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c974:	f003 0307 	and.w	r3, r3, #7
 800c978:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800c97a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c97c:	2b04      	cmp	r3, #4
 800c97e:	f200 8087 	bhi.w	800ca90 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800c982:	a201      	add	r2, pc, #4	@ (adr r2, 800c988 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800c984:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c988:	0800c99d 	.word	0x0800c99d
 800c98c:	0800c9c5 	.word	0x0800c9c5
 800c990:	0800c9ed 	.word	0x0800c9ed
 800c994:	0800ca89 	.word	0x0800ca89
 800c998:	0800ca15 	.word	0x0800ca15
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c99c:	4b90      	ldr	r3, [pc, #576]	@ (800cbe0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c9a4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c9a8:	d108      	bne.n	800c9bc <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c9aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c9ae:	4618      	mov	r0, r3
 800c9b0:	f000 ff62 	bl	800d878 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c9b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c9b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c9b8:	f000 bc93 	b.w	800d2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c9bc:	2300      	movs	r3, #0
 800c9be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c9c0:	f000 bc8f 	b.w	800d2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c9c4:	4b86      	ldr	r3, [pc, #536]	@ (800cbe0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c9cc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c9d0:	d108      	bne.n	800c9e4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c9d2:	f107 0318 	add.w	r3, r7, #24
 800c9d6:	4618      	mov	r0, r3
 800c9d8:	f000 fca6 	bl	800d328 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c9dc:	69bb      	ldr	r3, [r7, #24]
 800c9de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c9e0:	f000 bc7f 	b.w	800d2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c9e4:	2300      	movs	r3, #0
 800c9e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c9e8:	f000 bc7b 	b.w	800d2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c9ec:	4b7c      	ldr	r3, [pc, #496]	@ (800cbe0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c9f4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c9f8:	d108      	bne.n	800ca0c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c9fa:	f107 030c 	add.w	r3, r7, #12
 800c9fe:	4618      	mov	r0, r3
 800ca00:	f000 fde6 	bl	800d5d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ca04:	68fb      	ldr	r3, [r7, #12]
 800ca06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ca08:	f000 bc6b 	b.w	800d2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ca0c:	2300      	movs	r3, #0
 800ca0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ca10:	f000 bc67 	b.w	800d2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ca14:	4b72      	ldr	r3, [pc, #456]	@ (800cbe0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ca16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ca18:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800ca1c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ca1e:	4b70      	ldr	r3, [pc, #448]	@ (800cbe0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ca20:	681b      	ldr	r3, [r3, #0]
 800ca22:	f003 0304 	and.w	r3, r3, #4
 800ca26:	2b04      	cmp	r3, #4
 800ca28:	d10c      	bne.n	800ca44 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800ca2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	d109      	bne.n	800ca44 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ca30:	4b6b      	ldr	r3, [pc, #428]	@ (800cbe0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ca32:	681b      	ldr	r3, [r3, #0]
 800ca34:	08db      	lsrs	r3, r3, #3
 800ca36:	f003 0303 	and.w	r3, r3, #3
 800ca3a:	4a6a      	ldr	r2, [pc, #424]	@ (800cbe4 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800ca3c:	fa22 f303 	lsr.w	r3, r2, r3
 800ca40:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ca42:	e01f      	b.n	800ca84 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ca44:	4b66      	ldr	r3, [pc, #408]	@ (800cbe0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ca4c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ca50:	d106      	bne.n	800ca60 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800ca52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ca54:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ca58:	d102      	bne.n	800ca60 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ca5a:	4b63      	ldr	r3, [pc, #396]	@ (800cbe8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800ca5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ca5e:	e011      	b.n	800ca84 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ca60:	4b5f      	ldr	r3, [pc, #380]	@ (800cbe0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ca68:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ca6c:	d106      	bne.n	800ca7c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800ca6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ca70:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ca74:	d102      	bne.n	800ca7c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ca76:	4b5d      	ldr	r3, [pc, #372]	@ (800cbec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ca78:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ca7a:	e003      	b.n	800ca84 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ca7c:	2300      	movs	r3, #0
 800ca7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800ca80:	f000 bc2f 	b.w	800d2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800ca84:	f000 bc2d 	b.w	800d2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800ca88:	4b59      	ldr	r3, [pc, #356]	@ (800cbf0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800ca8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ca8c:	f000 bc29 	b.w	800d2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800ca90:	2300      	movs	r3, #0
 800ca92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ca94:	f000 bc25 	b.w	800d2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800ca98:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ca9c:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800caa0:	430b      	orrs	r3, r1
 800caa2:	f040 80a7 	bne.w	800cbf4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800caa6:	4b4e      	ldr	r3, [pc, #312]	@ (800cbe0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800caa8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800caaa:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800caae:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800cab0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cab2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800cab6:	d054      	beq.n	800cb62 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 800cab8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800caba:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800cabe:	f200 808b 	bhi.w	800cbd8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800cac2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cac4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800cac8:	f000 8083 	beq.w	800cbd2 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 800cacc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cace:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800cad2:	f200 8081 	bhi.w	800cbd8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800cad6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cad8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800cadc:	d02f      	beq.n	800cb3e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800cade:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cae0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800cae4:	d878      	bhi.n	800cbd8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800cae6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cae8:	2b00      	cmp	r3, #0
 800caea:	d004      	beq.n	800caf6 <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 800caec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800caee:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800caf2:	d012      	beq.n	800cb1a <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 800caf4:	e070      	b.n	800cbd8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800caf6:	4b3a      	ldr	r3, [pc, #232]	@ (800cbe0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800cafe:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800cb02:	d107      	bne.n	800cb14 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cb04:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800cb08:	4618      	mov	r0, r3
 800cb0a:	f000 feb5 	bl	800d878 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800cb0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb10:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cb12:	e3e6      	b.n	800d2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cb14:	2300      	movs	r3, #0
 800cb16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cb18:	e3e3      	b.n	800d2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cb1a:	4b31      	ldr	r3, [pc, #196]	@ (800cbe0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cb1c:	681b      	ldr	r3, [r3, #0]
 800cb1e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800cb22:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800cb26:	d107      	bne.n	800cb38 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cb28:	f107 0318 	add.w	r3, r7, #24
 800cb2c:	4618      	mov	r0, r3
 800cb2e:	f000 fbfb 	bl	800d328 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800cb32:	69bb      	ldr	r3, [r7, #24]
 800cb34:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cb36:	e3d4      	b.n	800d2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cb38:	2300      	movs	r3, #0
 800cb3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cb3c:	e3d1      	b.n	800d2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cb3e:	4b28      	ldr	r3, [pc, #160]	@ (800cbe0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800cb46:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800cb4a:	d107      	bne.n	800cb5c <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cb4c:	f107 030c 	add.w	r3, r7, #12
 800cb50:	4618      	mov	r0, r3
 800cb52:	f000 fd3d 	bl	800d5d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800cb56:	68fb      	ldr	r3, [r7, #12]
 800cb58:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cb5a:	e3c2      	b.n	800d2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cb5c:	2300      	movs	r3, #0
 800cb5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cb60:	e3bf      	b.n	800d2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800cb62:	4b1f      	ldr	r3, [pc, #124]	@ (800cbe0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cb64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cb66:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800cb6a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800cb6c:	4b1c      	ldr	r3, [pc, #112]	@ (800cbe0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	f003 0304 	and.w	r3, r3, #4
 800cb74:	2b04      	cmp	r3, #4
 800cb76:	d10c      	bne.n	800cb92 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 800cb78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d109      	bne.n	800cb92 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cb7e:	4b18      	ldr	r3, [pc, #96]	@ (800cbe0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cb80:	681b      	ldr	r3, [r3, #0]
 800cb82:	08db      	lsrs	r3, r3, #3
 800cb84:	f003 0303 	and.w	r3, r3, #3
 800cb88:	4a16      	ldr	r2, [pc, #88]	@ (800cbe4 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800cb8a:	fa22 f303 	lsr.w	r3, r2, r3
 800cb8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cb90:	e01e      	b.n	800cbd0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800cb92:	4b13      	ldr	r3, [pc, #76]	@ (800cbe0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cb94:	681b      	ldr	r3, [r3, #0]
 800cb96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cb9a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cb9e:	d106      	bne.n	800cbae <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 800cba0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cba2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cba6:	d102      	bne.n	800cbae <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800cba8:	4b0f      	ldr	r3, [pc, #60]	@ (800cbe8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800cbaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cbac:	e010      	b.n	800cbd0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800cbae:	4b0c      	ldr	r3, [pc, #48]	@ (800cbe0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cbb0:	681b      	ldr	r3, [r3, #0]
 800cbb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cbb6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800cbba:	d106      	bne.n	800cbca <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800cbbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cbbe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800cbc2:	d102      	bne.n	800cbca <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800cbc4:	4b09      	ldr	r3, [pc, #36]	@ (800cbec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800cbc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cbc8:	e002      	b.n	800cbd0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800cbca:	2300      	movs	r3, #0
 800cbcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800cbce:	e388      	b.n	800d2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800cbd0:	e387      	b.n	800d2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800cbd2:	4b07      	ldr	r3, [pc, #28]	@ (800cbf0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800cbd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cbd6:	e384      	b.n	800d2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800cbd8:	2300      	movs	r3, #0
 800cbda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cbdc:	e381      	b.n	800d2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800cbde:	bf00      	nop
 800cbe0:	58024400 	.word	0x58024400
 800cbe4:	03d09000 	.word	0x03d09000
 800cbe8:	003d0900 	.word	0x003d0900
 800cbec:	016e3600 	.word	0x016e3600
 800cbf0:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800cbf4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cbf8:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800cbfc:	430b      	orrs	r3, r1
 800cbfe:	f040 809c 	bne.w	800cd3a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800cc02:	4b9e      	ldr	r3, [pc, #632]	@ (800ce7c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cc04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cc06:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800cc0a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800cc0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc0e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800cc12:	d054      	beq.n	800ccbe <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 800cc14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc16:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800cc1a:	f200 808b 	bhi.w	800cd34 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800cc1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc20:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800cc24:	f000 8083 	beq.w	800cd2e <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 800cc28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc2a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800cc2e:	f200 8081 	bhi.w	800cd34 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800cc32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc34:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800cc38:	d02f      	beq.n	800cc9a <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800cc3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc3c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800cc40:	d878      	bhi.n	800cd34 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800cc42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	d004      	beq.n	800cc52 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800cc48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc4a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800cc4e:	d012      	beq.n	800cc76 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800cc50:	e070      	b.n	800cd34 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800cc52:	4b8a      	ldr	r3, [pc, #552]	@ (800ce7c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cc54:	681b      	ldr	r3, [r3, #0]
 800cc56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800cc5a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800cc5e:	d107      	bne.n	800cc70 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cc60:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800cc64:	4618      	mov	r0, r3
 800cc66:	f000 fe07 	bl	800d878 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800cc6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cc6e:	e338      	b.n	800d2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cc70:	2300      	movs	r3, #0
 800cc72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cc74:	e335      	b.n	800d2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cc76:	4b81      	ldr	r3, [pc, #516]	@ (800ce7c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800cc7e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800cc82:	d107      	bne.n	800cc94 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cc84:	f107 0318 	add.w	r3, r7, #24
 800cc88:	4618      	mov	r0, r3
 800cc8a:	f000 fb4d 	bl	800d328 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800cc8e:	69bb      	ldr	r3, [r7, #24]
 800cc90:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cc92:	e326      	b.n	800d2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cc94:	2300      	movs	r3, #0
 800cc96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cc98:	e323      	b.n	800d2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cc9a:	4b78      	ldr	r3, [pc, #480]	@ (800ce7c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cc9c:	681b      	ldr	r3, [r3, #0]
 800cc9e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800cca2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800cca6:	d107      	bne.n	800ccb8 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cca8:	f107 030c 	add.w	r3, r7, #12
 800ccac:	4618      	mov	r0, r3
 800ccae:	f000 fc8f 	bl	800d5d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ccb2:	68fb      	ldr	r3, [r7, #12]
 800ccb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ccb6:	e314      	b.n	800d2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ccb8:	2300      	movs	r3, #0
 800ccba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ccbc:	e311      	b.n	800d2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ccbe:	4b6f      	ldr	r3, [pc, #444]	@ (800ce7c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ccc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ccc2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800ccc6:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ccc8:	4b6c      	ldr	r3, [pc, #432]	@ (800ce7c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ccca:	681b      	ldr	r3, [r3, #0]
 800cccc:	f003 0304 	and.w	r3, r3, #4
 800ccd0:	2b04      	cmp	r3, #4
 800ccd2:	d10c      	bne.n	800ccee <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800ccd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	d109      	bne.n	800ccee <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ccda:	4b68      	ldr	r3, [pc, #416]	@ (800ce7c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ccdc:	681b      	ldr	r3, [r3, #0]
 800ccde:	08db      	lsrs	r3, r3, #3
 800cce0:	f003 0303 	and.w	r3, r3, #3
 800cce4:	4a66      	ldr	r2, [pc, #408]	@ (800ce80 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800cce6:	fa22 f303 	lsr.w	r3, r2, r3
 800ccea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ccec:	e01e      	b.n	800cd2c <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ccee:	4b63      	ldr	r3, [pc, #396]	@ (800ce7c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ccf0:	681b      	ldr	r3, [r3, #0]
 800ccf2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ccf6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ccfa:	d106      	bne.n	800cd0a <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800ccfc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ccfe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cd02:	d102      	bne.n	800cd0a <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800cd04:	4b5f      	ldr	r3, [pc, #380]	@ (800ce84 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800cd06:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cd08:	e010      	b.n	800cd2c <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800cd0a:	4b5c      	ldr	r3, [pc, #368]	@ (800ce7c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cd0c:	681b      	ldr	r3, [r3, #0]
 800cd0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cd12:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800cd16:	d106      	bne.n	800cd26 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 800cd18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cd1a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800cd1e:	d102      	bne.n	800cd26 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800cd20:	4b59      	ldr	r3, [pc, #356]	@ (800ce88 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800cd22:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cd24:	e002      	b.n	800cd2c <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800cd26:	2300      	movs	r3, #0
 800cd28:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800cd2a:	e2da      	b.n	800d2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800cd2c:	e2d9      	b.n	800d2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800cd2e:	4b57      	ldr	r3, [pc, #348]	@ (800ce8c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800cd30:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cd32:	e2d6      	b.n	800d2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800cd34:	2300      	movs	r3, #0
 800cd36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cd38:	e2d3      	b.n	800d2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800cd3a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cd3e:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800cd42:	430b      	orrs	r3, r1
 800cd44:	f040 80a7 	bne.w	800ce96 <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800cd48:	4b4c      	ldr	r3, [pc, #304]	@ (800ce7c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cd4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cd4c:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800cd50:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800cd52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd54:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800cd58:	d055      	beq.n	800ce06 <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 800cd5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd5c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800cd60:	f200 8096 	bhi.w	800ce90 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800cd64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd66:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800cd6a:	f000 8084 	beq.w	800ce76 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 800cd6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd70:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800cd74:	f200 808c 	bhi.w	800ce90 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800cd78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd7a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800cd7e:	d030      	beq.n	800cde2 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800cd80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd82:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800cd86:	f200 8083 	bhi.w	800ce90 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800cd8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	d004      	beq.n	800cd9a <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 800cd90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd92:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cd96:	d012      	beq.n	800cdbe <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800cd98:	e07a      	b.n	800ce90 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800cd9a:	4b38      	ldr	r3, [pc, #224]	@ (800ce7c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cd9c:	681b      	ldr	r3, [r3, #0]
 800cd9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800cda2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800cda6:	d107      	bne.n	800cdb8 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cda8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800cdac:	4618      	mov	r0, r3
 800cdae:	f000 fd63 	bl	800d878 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800cdb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cdb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cdb6:	e294      	b.n	800d2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cdb8:	2300      	movs	r3, #0
 800cdba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cdbc:	e291      	b.n	800d2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cdbe:	4b2f      	ldr	r3, [pc, #188]	@ (800ce7c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800cdc6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800cdca:	d107      	bne.n	800cddc <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cdcc:	f107 0318 	add.w	r3, r7, #24
 800cdd0:	4618      	mov	r0, r3
 800cdd2:	f000 faa9 	bl	800d328 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800cdd6:	69bb      	ldr	r3, [r7, #24]
 800cdd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cdda:	e282      	b.n	800d2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cddc:	2300      	movs	r3, #0
 800cdde:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cde0:	e27f      	b.n	800d2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cde2:	4b26      	ldr	r3, [pc, #152]	@ (800ce7c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cde4:	681b      	ldr	r3, [r3, #0]
 800cde6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800cdea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800cdee:	d107      	bne.n	800ce00 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cdf0:	f107 030c 	add.w	r3, r7, #12
 800cdf4:	4618      	mov	r0, r3
 800cdf6:	f000 fbeb 	bl	800d5d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800cdfa:	68fb      	ldr	r3, [r7, #12]
 800cdfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cdfe:	e270      	b.n	800d2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ce00:	2300      	movs	r3, #0
 800ce02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ce04:	e26d      	b.n	800d2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ce06:	4b1d      	ldr	r3, [pc, #116]	@ (800ce7c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ce08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ce0a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800ce0e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ce10:	4b1a      	ldr	r3, [pc, #104]	@ (800ce7c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	f003 0304 	and.w	r3, r3, #4
 800ce18:	2b04      	cmp	r3, #4
 800ce1a:	d10c      	bne.n	800ce36 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 800ce1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ce1e:	2b00      	cmp	r3, #0
 800ce20:	d109      	bne.n	800ce36 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ce22:	4b16      	ldr	r3, [pc, #88]	@ (800ce7c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ce24:	681b      	ldr	r3, [r3, #0]
 800ce26:	08db      	lsrs	r3, r3, #3
 800ce28:	f003 0303 	and.w	r3, r3, #3
 800ce2c:	4a14      	ldr	r2, [pc, #80]	@ (800ce80 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800ce2e:	fa22 f303 	lsr.w	r3, r2, r3
 800ce32:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ce34:	e01e      	b.n	800ce74 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ce36:	4b11      	ldr	r3, [pc, #68]	@ (800ce7c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ce38:	681b      	ldr	r3, [r3, #0]
 800ce3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ce3e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ce42:	d106      	bne.n	800ce52 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800ce44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ce46:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ce4a:	d102      	bne.n	800ce52 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ce4c:	4b0d      	ldr	r3, [pc, #52]	@ (800ce84 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800ce4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ce50:	e010      	b.n	800ce74 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ce52:	4b0a      	ldr	r3, [pc, #40]	@ (800ce7c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ce54:	681b      	ldr	r3, [r3, #0]
 800ce56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ce5a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ce5e:	d106      	bne.n	800ce6e <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 800ce60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ce62:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ce66:	d102      	bne.n	800ce6e <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ce68:	4b07      	ldr	r3, [pc, #28]	@ (800ce88 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ce6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ce6c:	e002      	b.n	800ce74 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ce6e:	2300      	movs	r3, #0
 800ce70:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800ce72:	e236      	b.n	800d2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800ce74:	e235      	b.n	800d2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800ce76:	4b05      	ldr	r3, [pc, #20]	@ (800ce8c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800ce78:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ce7a:	e232      	b.n	800d2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800ce7c:	58024400 	.word	0x58024400
 800ce80:	03d09000 	.word	0x03d09000
 800ce84:	003d0900 	.word	0x003d0900
 800ce88:	016e3600 	.word	0x016e3600
 800ce8c:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 800ce90:	2300      	movs	r3, #0
 800ce92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ce94:	e225      	b.n	800d2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800ce96:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ce9a:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800ce9e:	430b      	orrs	r3, r1
 800cea0:	f040 8085 	bne.w	800cfae <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800cea4:	4b9c      	ldr	r3, [pc, #624]	@ (800d118 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800cea6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cea8:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800ceac:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800ceae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ceb0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800ceb4:	d06b      	beq.n	800cf8e <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800ceb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ceb8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800cebc:	d874      	bhi.n	800cfa8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800cebe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cec0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800cec4:	d056      	beq.n	800cf74 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 800cec6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cec8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800cecc:	d86c      	bhi.n	800cfa8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800cece:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ced0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800ced4:	d03b      	beq.n	800cf4e <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800ced6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ced8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800cedc:	d864      	bhi.n	800cfa8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800cede:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cee0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800cee4:	d021      	beq.n	800cf2a <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800cee6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cee8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ceec:	d85c      	bhi.n	800cfa8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800ceee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	d004      	beq.n	800cefe <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 800cef4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cef6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cefa:	d004      	beq.n	800cf06 <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 800cefc:	e054      	b.n	800cfa8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800cefe:	f7fe fb5f 	bl	800b5c0 <HAL_RCC_GetPCLK1Freq>
 800cf02:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800cf04:	e1ed      	b.n	800d2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cf06:	4b84      	ldr	r3, [pc, #528]	@ (800d118 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800cf08:	681b      	ldr	r3, [r3, #0]
 800cf0a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800cf0e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800cf12:	d107      	bne.n	800cf24 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cf14:	f107 0318 	add.w	r3, r7, #24
 800cf18:	4618      	mov	r0, r3
 800cf1a:	f000 fa05 	bl	800d328 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800cf1e:	69fb      	ldr	r3, [r7, #28]
 800cf20:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cf22:	e1de      	b.n	800d2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cf24:	2300      	movs	r3, #0
 800cf26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cf28:	e1db      	b.n	800d2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cf2a:	4b7b      	ldr	r3, [pc, #492]	@ (800d118 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800cf2c:	681b      	ldr	r3, [r3, #0]
 800cf2e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800cf32:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800cf36:	d107      	bne.n	800cf48 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cf38:	f107 030c 	add.w	r3, r7, #12
 800cf3c:	4618      	mov	r0, r3
 800cf3e:	f000 fb47 	bl	800d5d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800cf42:	693b      	ldr	r3, [r7, #16]
 800cf44:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cf46:	e1cc      	b.n	800d2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cf48:	2300      	movs	r3, #0
 800cf4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cf4c:	e1c9      	b.n	800d2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800cf4e:	4b72      	ldr	r3, [pc, #456]	@ (800d118 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800cf50:	681b      	ldr	r3, [r3, #0]
 800cf52:	f003 0304 	and.w	r3, r3, #4
 800cf56:	2b04      	cmp	r3, #4
 800cf58:	d109      	bne.n	800cf6e <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cf5a:	4b6f      	ldr	r3, [pc, #444]	@ (800d118 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800cf5c:	681b      	ldr	r3, [r3, #0]
 800cf5e:	08db      	lsrs	r3, r3, #3
 800cf60:	f003 0303 	and.w	r3, r3, #3
 800cf64:	4a6d      	ldr	r2, [pc, #436]	@ (800d11c <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800cf66:	fa22 f303 	lsr.w	r3, r2, r3
 800cf6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cf6c:	e1b9      	b.n	800d2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cf6e:	2300      	movs	r3, #0
 800cf70:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cf72:	e1b6      	b.n	800d2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800cf74:	4b68      	ldr	r3, [pc, #416]	@ (800d118 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800cf76:	681b      	ldr	r3, [r3, #0]
 800cf78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cf7c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cf80:	d102      	bne.n	800cf88 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 800cf82:	4b67      	ldr	r3, [pc, #412]	@ (800d120 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800cf84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cf86:	e1ac      	b.n	800d2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cf88:	2300      	movs	r3, #0
 800cf8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cf8c:	e1a9      	b.n	800d2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800cf8e:	4b62      	ldr	r3, [pc, #392]	@ (800d118 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800cf90:	681b      	ldr	r3, [r3, #0]
 800cf92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cf96:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800cf9a:	d102      	bne.n	800cfa2 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 800cf9c:	4b61      	ldr	r3, [pc, #388]	@ (800d124 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800cf9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cfa0:	e19f      	b.n	800d2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cfa2:	2300      	movs	r3, #0
 800cfa4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cfa6:	e19c      	b.n	800d2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800cfa8:	2300      	movs	r3, #0
 800cfaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cfac:	e199      	b.n	800d2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800cfae:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cfb2:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800cfb6:	430b      	orrs	r3, r1
 800cfb8:	d173      	bne.n	800d0a2 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800cfba:	4b57      	ldr	r3, [pc, #348]	@ (800d118 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800cfbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cfbe:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800cfc2:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800cfc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cfc6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800cfca:	d02f      	beq.n	800d02c <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 800cfcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cfce:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800cfd2:	d863      	bhi.n	800d09c <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 800cfd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	d004      	beq.n	800cfe4 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 800cfda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cfdc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cfe0:	d012      	beq.n	800d008 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 800cfe2:	e05b      	b.n	800d09c <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cfe4:	4b4c      	ldr	r3, [pc, #304]	@ (800d118 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800cfe6:	681b      	ldr	r3, [r3, #0]
 800cfe8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800cfec:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800cff0:	d107      	bne.n	800d002 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cff2:	f107 0318 	add.w	r3, r7, #24
 800cff6:	4618      	mov	r0, r3
 800cff8:	f000 f996 	bl	800d328 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800cffc:	69bb      	ldr	r3, [r7, #24]
 800cffe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d000:	e16f      	b.n	800d2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d002:	2300      	movs	r3, #0
 800d004:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d006:	e16c      	b.n	800d2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800d008:	4b43      	ldr	r3, [pc, #268]	@ (800d118 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d00a:	681b      	ldr	r3, [r3, #0]
 800d00c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d010:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d014:	d107      	bne.n	800d026 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d016:	f107 030c 	add.w	r3, r7, #12
 800d01a:	4618      	mov	r0, r3
 800d01c:	f000 fad8 	bl	800d5d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800d020:	697b      	ldr	r3, [r7, #20]
 800d022:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d024:	e15d      	b.n	800d2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d026:	2300      	movs	r3, #0
 800d028:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d02a:	e15a      	b.n	800d2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800d02c:	4b3a      	ldr	r3, [pc, #232]	@ (800d118 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d02e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d030:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800d034:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800d036:	4b38      	ldr	r3, [pc, #224]	@ (800d118 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d038:	681b      	ldr	r3, [r3, #0]
 800d03a:	f003 0304 	and.w	r3, r3, #4
 800d03e:	2b04      	cmp	r3, #4
 800d040:	d10c      	bne.n	800d05c <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800d042:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d044:	2b00      	cmp	r3, #0
 800d046:	d109      	bne.n	800d05c <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d048:	4b33      	ldr	r3, [pc, #204]	@ (800d118 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d04a:	681b      	ldr	r3, [r3, #0]
 800d04c:	08db      	lsrs	r3, r3, #3
 800d04e:	f003 0303 	and.w	r3, r3, #3
 800d052:	4a32      	ldr	r2, [pc, #200]	@ (800d11c <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800d054:	fa22 f303 	lsr.w	r3, r2, r3
 800d058:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d05a:	e01e      	b.n	800d09a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800d05c:	4b2e      	ldr	r3, [pc, #184]	@ (800d118 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d05e:	681b      	ldr	r3, [r3, #0]
 800d060:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d064:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d068:	d106      	bne.n	800d078 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800d06a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d06c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d070:	d102      	bne.n	800d078 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800d072:	4b2b      	ldr	r3, [pc, #172]	@ (800d120 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800d074:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d076:	e010      	b.n	800d09a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800d078:	4b27      	ldr	r3, [pc, #156]	@ (800d118 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d07a:	681b      	ldr	r3, [r3, #0]
 800d07c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d080:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d084:	d106      	bne.n	800d094 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 800d086:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d088:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d08c:	d102      	bne.n	800d094 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800d08e:	4b25      	ldr	r3, [pc, #148]	@ (800d124 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800d090:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d092:	e002      	b.n	800d09a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800d094:	2300      	movs	r3, #0
 800d096:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800d098:	e123      	b.n	800d2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800d09a:	e122      	b.n	800d2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800d09c:	2300      	movs	r3, #0
 800d09e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d0a0:	e11f      	b.n	800d2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800d0a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d0a6:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800d0aa:	430b      	orrs	r3, r1
 800d0ac:	d13c      	bne.n	800d128 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800d0ae:	4b1a      	ldr	r3, [pc, #104]	@ (800d118 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d0b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d0b2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800d0b6:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800d0b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	d004      	beq.n	800d0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800d0be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d0c4:	d012      	beq.n	800d0ec <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 800d0c6:	e023      	b.n	800d110 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800d0c8:	4b13      	ldr	r3, [pc, #76]	@ (800d118 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d0ca:	681b      	ldr	r3, [r3, #0]
 800d0cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d0d0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d0d4:	d107      	bne.n	800d0e6 <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d0d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d0da:	4618      	mov	r0, r3
 800d0dc:	f000 fbcc 	bl	800d878 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800d0e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d0e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d0e4:	e0fd      	b.n	800d2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d0e6:	2300      	movs	r3, #0
 800d0e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d0ea:	e0fa      	b.n	800d2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d0ec:	4b0a      	ldr	r3, [pc, #40]	@ (800d118 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d0ee:	681b      	ldr	r3, [r3, #0]
 800d0f0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d0f4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d0f8:	d107      	bne.n	800d10a <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d0fa:	f107 0318 	add.w	r3, r7, #24
 800d0fe:	4618      	mov	r0, r3
 800d100:	f000 f912 	bl	800d328 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800d104:	6a3b      	ldr	r3, [r7, #32]
 800d106:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d108:	e0eb      	b.n	800d2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d10a:	2300      	movs	r3, #0
 800d10c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d10e:	e0e8      	b.n	800d2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800d110:	2300      	movs	r3, #0
 800d112:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d114:	e0e5      	b.n	800d2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800d116:	bf00      	nop
 800d118:	58024400 	.word	0x58024400
 800d11c:	03d09000 	.word	0x03d09000
 800d120:	003d0900 	.word	0x003d0900
 800d124:	016e3600 	.word	0x016e3600
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800d128:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d12c:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800d130:	430b      	orrs	r3, r1
 800d132:	f040 8085 	bne.w	800d240 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800d136:	4b6d      	ldr	r3, [pc, #436]	@ (800d2ec <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d138:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d13a:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800d13e:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800d140:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d142:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800d146:	d06b      	beq.n	800d220 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 800d148:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d14a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800d14e:	d874      	bhi.n	800d23a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800d150:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d152:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d156:	d056      	beq.n	800d206 <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 800d158:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d15a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d15e:	d86c      	bhi.n	800d23a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800d160:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d162:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800d166:	d03b      	beq.n	800d1e0 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 800d168:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d16a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800d16e:	d864      	bhi.n	800d23a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800d170:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d172:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d176:	d021      	beq.n	800d1bc <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 800d178:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d17a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d17e:	d85c      	bhi.n	800d23a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800d180:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d182:	2b00      	cmp	r3, #0
 800d184:	d004      	beq.n	800d190 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 800d186:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d188:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d18c:	d004      	beq.n	800d198 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800d18e:	e054      	b.n	800d23a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800d190:	f000 f8b4 	bl	800d2fc <HAL_RCCEx_GetD3PCLK1Freq>
 800d194:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d196:	e0a4      	b.n	800d2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d198:	4b54      	ldr	r3, [pc, #336]	@ (800d2ec <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d19a:	681b      	ldr	r3, [r3, #0]
 800d19c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d1a0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d1a4:	d107      	bne.n	800d1b6 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d1a6:	f107 0318 	add.w	r3, r7, #24
 800d1aa:	4618      	mov	r0, r3
 800d1ac:	f000 f8bc 	bl	800d328 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800d1b0:	69fb      	ldr	r3, [r7, #28]
 800d1b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d1b4:	e095      	b.n	800d2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d1b6:	2300      	movs	r3, #0
 800d1b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d1ba:	e092      	b.n	800d2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800d1bc:	4b4b      	ldr	r3, [pc, #300]	@ (800d2ec <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d1be:	681b      	ldr	r3, [r3, #0]
 800d1c0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d1c4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d1c8:	d107      	bne.n	800d1da <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d1ca:	f107 030c 	add.w	r3, r7, #12
 800d1ce:	4618      	mov	r0, r3
 800d1d0:	f000 f9fe 	bl	800d5d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800d1d4:	693b      	ldr	r3, [r7, #16]
 800d1d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d1d8:	e083      	b.n	800d2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d1da:	2300      	movs	r3, #0
 800d1dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d1de:	e080      	b.n	800d2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800d1e0:	4b42      	ldr	r3, [pc, #264]	@ (800d2ec <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d1e2:	681b      	ldr	r3, [r3, #0]
 800d1e4:	f003 0304 	and.w	r3, r3, #4
 800d1e8:	2b04      	cmp	r3, #4
 800d1ea:	d109      	bne.n	800d200 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d1ec:	4b3f      	ldr	r3, [pc, #252]	@ (800d2ec <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d1ee:	681b      	ldr	r3, [r3, #0]
 800d1f0:	08db      	lsrs	r3, r3, #3
 800d1f2:	f003 0303 	and.w	r3, r3, #3
 800d1f6:	4a3e      	ldr	r2, [pc, #248]	@ (800d2f0 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800d1f8:	fa22 f303 	lsr.w	r3, r2, r3
 800d1fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d1fe:	e070      	b.n	800d2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d200:	2300      	movs	r3, #0
 800d202:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d204:	e06d      	b.n	800d2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800d206:	4b39      	ldr	r3, [pc, #228]	@ (800d2ec <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d208:	681b      	ldr	r3, [r3, #0]
 800d20a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d20e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d212:	d102      	bne.n	800d21a <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 800d214:	4b37      	ldr	r3, [pc, #220]	@ (800d2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800d216:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d218:	e063      	b.n	800d2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d21a:	2300      	movs	r3, #0
 800d21c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d21e:	e060      	b.n	800d2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800d220:	4b32      	ldr	r3, [pc, #200]	@ (800d2ec <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d222:	681b      	ldr	r3, [r3, #0]
 800d224:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d228:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d22c:	d102      	bne.n	800d234 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 800d22e:	4b32      	ldr	r3, [pc, #200]	@ (800d2f8 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800d230:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d232:	e056      	b.n	800d2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d234:	2300      	movs	r3, #0
 800d236:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d238:	e053      	b.n	800d2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800d23a:	2300      	movs	r3, #0
 800d23c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d23e:	e050      	b.n	800d2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800d240:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d244:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800d248:	430b      	orrs	r3, r1
 800d24a:	d148      	bne.n	800d2de <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800d24c:	4b27      	ldr	r3, [pc, #156]	@ (800d2ec <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d24e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d250:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800d254:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800d256:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d258:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d25c:	d02a      	beq.n	800d2b4 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800d25e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d260:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d264:	d838      	bhi.n	800d2d8 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800d266:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d268:	2b00      	cmp	r3, #0
 800d26a:	d004      	beq.n	800d276 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800d26c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d26e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d272:	d00d      	beq.n	800d290 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800d274:	e030      	b.n	800d2d8 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800d276:	4b1d      	ldr	r3, [pc, #116]	@ (800d2ec <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d278:	681b      	ldr	r3, [r3, #0]
 800d27a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d27e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d282:	d102      	bne.n	800d28a <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 800d284:	4b1c      	ldr	r3, [pc, #112]	@ (800d2f8 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800d286:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d288:	e02b      	b.n	800d2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d28a:	2300      	movs	r3, #0
 800d28c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d28e:	e028      	b.n	800d2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800d290:	4b16      	ldr	r3, [pc, #88]	@ (800d2ec <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d292:	681b      	ldr	r3, [r3, #0]
 800d294:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d298:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d29c:	d107      	bne.n	800d2ae <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d29e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d2a2:	4618      	mov	r0, r3
 800d2a4:	f000 fae8 	bl	800d878 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800d2a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d2aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d2ac:	e019      	b.n	800d2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d2ae:	2300      	movs	r3, #0
 800d2b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d2b2:	e016      	b.n	800d2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d2b4:	4b0d      	ldr	r3, [pc, #52]	@ (800d2ec <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d2b6:	681b      	ldr	r3, [r3, #0]
 800d2b8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d2bc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d2c0:	d107      	bne.n	800d2d2 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d2c2:	f107 0318 	add.w	r3, r7, #24
 800d2c6:	4618      	mov	r0, r3
 800d2c8:	f000 f82e 	bl	800d328 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800d2cc:	69fb      	ldr	r3, [r7, #28]
 800d2ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d2d0:	e007      	b.n	800d2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d2d2:	2300      	movs	r3, #0
 800d2d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d2d6:	e004      	b.n	800d2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800d2d8:	2300      	movs	r3, #0
 800d2da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d2dc:	e001      	b.n	800d2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 800d2de:	2300      	movs	r3, #0
 800d2e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800d2e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800d2e4:	4618      	mov	r0, r3
 800d2e6:	3740      	adds	r7, #64	@ 0x40
 800d2e8:	46bd      	mov	sp, r7
 800d2ea:	bd80      	pop	{r7, pc}
 800d2ec:	58024400 	.word	0x58024400
 800d2f0:	03d09000 	.word	0x03d09000
 800d2f4:	003d0900 	.word	0x003d0900
 800d2f8:	016e3600 	.word	0x016e3600

0800d2fc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800d2fc:	b580      	push	{r7, lr}
 800d2fe:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800d300:	f7fe f92e 	bl	800b560 <HAL_RCC_GetHCLKFreq>
 800d304:	4602      	mov	r2, r0
 800d306:	4b06      	ldr	r3, [pc, #24]	@ (800d320 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800d308:	6a1b      	ldr	r3, [r3, #32]
 800d30a:	091b      	lsrs	r3, r3, #4
 800d30c:	f003 0307 	and.w	r3, r3, #7
 800d310:	4904      	ldr	r1, [pc, #16]	@ (800d324 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800d312:	5ccb      	ldrb	r3, [r1, r3]
 800d314:	f003 031f 	and.w	r3, r3, #31
 800d318:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800d31c:	4618      	mov	r0, r3
 800d31e:	bd80      	pop	{r7, pc}
 800d320:	58024400 	.word	0x58024400
 800d324:	08019b44 	.word	0x08019b44

0800d328 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800d328:	b480      	push	{r7}
 800d32a:	b089      	sub	sp, #36	@ 0x24
 800d32c:	af00      	add	r7, sp, #0
 800d32e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d330:	4ba1      	ldr	r3, [pc, #644]	@ (800d5b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d332:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d334:	f003 0303 	and.w	r3, r3, #3
 800d338:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800d33a:	4b9f      	ldr	r3, [pc, #636]	@ (800d5b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d33c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d33e:	0b1b      	lsrs	r3, r3, #12
 800d340:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d344:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800d346:	4b9c      	ldr	r3, [pc, #624]	@ (800d5b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d348:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d34a:	091b      	lsrs	r3, r3, #4
 800d34c:	f003 0301 	and.w	r3, r3, #1
 800d350:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800d352:	4b99      	ldr	r3, [pc, #612]	@ (800d5b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d354:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d356:	08db      	lsrs	r3, r3, #3
 800d358:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d35c:	693a      	ldr	r2, [r7, #16]
 800d35e:	fb02 f303 	mul.w	r3, r2, r3
 800d362:	ee07 3a90 	vmov	s15, r3
 800d366:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d36a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800d36e:	697b      	ldr	r3, [r7, #20]
 800d370:	2b00      	cmp	r3, #0
 800d372:	f000 8111 	beq.w	800d598 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800d376:	69bb      	ldr	r3, [r7, #24]
 800d378:	2b02      	cmp	r3, #2
 800d37a:	f000 8083 	beq.w	800d484 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800d37e:	69bb      	ldr	r3, [r7, #24]
 800d380:	2b02      	cmp	r3, #2
 800d382:	f200 80a1 	bhi.w	800d4c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800d386:	69bb      	ldr	r3, [r7, #24]
 800d388:	2b00      	cmp	r3, #0
 800d38a:	d003      	beq.n	800d394 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800d38c:	69bb      	ldr	r3, [r7, #24]
 800d38e:	2b01      	cmp	r3, #1
 800d390:	d056      	beq.n	800d440 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800d392:	e099      	b.n	800d4c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d394:	4b88      	ldr	r3, [pc, #544]	@ (800d5b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d396:	681b      	ldr	r3, [r3, #0]
 800d398:	f003 0320 	and.w	r3, r3, #32
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	d02d      	beq.n	800d3fc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d3a0:	4b85      	ldr	r3, [pc, #532]	@ (800d5b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d3a2:	681b      	ldr	r3, [r3, #0]
 800d3a4:	08db      	lsrs	r3, r3, #3
 800d3a6:	f003 0303 	and.w	r3, r3, #3
 800d3aa:	4a84      	ldr	r2, [pc, #528]	@ (800d5bc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800d3ac:	fa22 f303 	lsr.w	r3, r2, r3
 800d3b0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d3b2:	68bb      	ldr	r3, [r7, #8]
 800d3b4:	ee07 3a90 	vmov	s15, r3
 800d3b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d3bc:	697b      	ldr	r3, [r7, #20]
 800d3be:	ee07 3a90 	vmov	s15, r3
 800d3c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d3c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d3ca:	4b7b      	ldr	r3, [pc, #492]	@ (800d5b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d3cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d3ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d3d2:	ee07 3a90 	vmov	s15, r3
 800d3d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d3da:	ed97 6a03 	vldr	s12, [r7, #12]
 800d3de:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800d5c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d3e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d3e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d3ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d3ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d3f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d3f6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d3fa:	e087      	b.n	800d50c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d3fc:	697b      	ldr	r3, [r7, #20]
 800d3fe:	ee07 3a90 	vmov	s15, r3
 800d402:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d406:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800d5c4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800d40a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d40e:	4b6a      	ldr	r3, [pc, #424]	@ (800d5b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d410:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d412:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d416:	ee07 3a90 	vmov	s15, r3
 800d41a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d41e:	ed97 6a03 	vldr	s12, [r7, #12]
 800d422:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800d5c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d426:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d42a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d42e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d432:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d436:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d43a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d43e:	e065      	b.n	800d50c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d440:	697b      	ldr	r3, [r7, #20]
 800d442:	ee07 3a90 	vmov	s15, r3
 800d446:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d44a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800d5c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800d44e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d452:	4b59      	ldr	r3, [pc, #356]	@ (800d5b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d454:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d456:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d45a:	ee07 3a90 	vmov	s15, r3
 800d45e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d462:	ed97 6a03 	vldr	s12, [r7, #12]
 800d466:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800d5c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d46a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d46e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d472:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d476:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d47a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d47e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d482:	e043      	b.n	800d50c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d484:	697b      	ldr	r3, [r7, #20]
 800d486:	ee07 3a90 	vmov	s15, r3
 800d48a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d48e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800d5cc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800d492:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d496:	4b48      	ldr	r3, [pc, #288]	@ (800d5b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d498:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d49a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d49e:	ee07 3a90 	vmov	s15, r3
 800d4a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d4a6:	ed97 6a03 	vldr	s12, [r7, #12]
 800d4aa:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800d5c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d4ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d4b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d4b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d4ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d4be:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d4c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d4c6:	e021      	b.n	800d50c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d4c8:	697b      	ldr	r3, [r7, #20]
 800d4ca:	ee07 3a90 	vmov	s15, r3
 800d4ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d4d2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800d5c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800d4d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d4da:	4b37      	ldr	r3, [pc, #220]	@ (800d5b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d4dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d4de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d4e2:	ee07 3a90 	vmov	s15, r3
 800d4e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d4ea:	ed97 6a03 	vldr	s12, [r7, #12]
 800d4ee:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800d5c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d4f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d4f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d4fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d4fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d502:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d506:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d50a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800d50c:	4b2a      	ldr	r3, [pc, #168]	@ (800d5b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d50e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d510:	0a5b      	lsrs	r3, r3, #9
 800d512:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d516:	ee07 3a90 	vmov	s15, r3
 800d51a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d51e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d522:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d526:	edd7 6a07 	vldr	s13, [r7, #28]
 800d52a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d52e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d532:	ee17 2a90 	vmov	r2, s15
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800d53a:	4b1f      	ldr	r3, [pc, #124]	@ (800d5b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d53c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d53e:	0c1b      	lsrs	r3, r3, #16
 800d540:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d544:	ee07 3a90 	vmov	s15, r3
 800d548:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d54c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d550:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d554:	edd7 6a07 	vldr	s13, [r7, #28]
 800d558:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d55c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d560:	ee17 2a90 	vmov	r2, s15
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800d568:	4b13      	ldr	r3, [pc, #76]	@ (800d5b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d56a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d56c:	0e1b      	lsrs	r3, r3, #24
 800d56e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d572:	ee07 3a90 	vmov	s15, r3
 800d576:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d57a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d57e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d582:	edd7 6a07 	vldr	s13, [r7, #28]
 800d586:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d58a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d58e:	ee17 2a90 	vmov	r2, s15
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800d596:	e008      	b.n	800d5aa <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	2200      	movs	r2, #0
 800d59c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	2200      	movs	r2, #0
 800d5a2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	2200      	movs	r2, #0
 800d5a8:	609a      	str	r2, [r3, #8]
}
 800d5aa:	bf00      	nop
 800d5ac:	3724      	adds	r7, #36	@ 0x24
 800d5ae:	46bd      	mov	sp, r7
 800d5b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5b4:	4770      	bx	lr
 800d5b6:	bf00      	nop
 800d5b8:	58024400 	.word	0x58024400
 800d5bc:	03d09000 	.word	0x03d09000
 800d5c0:	46000000 	.word	0x46000000
 800d5c4:	4c742400 	.word	0x4c742400
 800d5c8:	4a742400 	.word	0x4a742400
 800d5cc:	4bb71b00 	.word	0x4bb71b00

0800d5d0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800d5d0:	b480      	push	{r7}
 800d5d2:	b089      	sub	sp, #36	@ 0x24
 800d5d4:	af00      	add	r7, sp, #0
 800d5d6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d5d8:	4ba1      	ldr	r3, [pc, #644]	@ (800d860 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d5da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d5dc:	f003 0303 	and.w	r3, r3, #3
 800d5e0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800d5e2:	4b9f      	ldr	r3, [pc, #636]	@ (800d860 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d5e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d5e6:	0d1b      	lsrs	r3, r3, #20
 800d5e8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d5ec:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800d5ee:	4b9c      	ldr	r3, [pc, #624]	@ (800d860 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d5f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d5f2:	0a1b      	lsrs	r3, r3, #8
 800d5f4:	f003 0301 	and.w	r3, r3, #1
 800d5f8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800d5fa:	4b99      	ldr	r3, [pc, #612]	@ (800d860 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d5fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d5fe:	08db      	lsrs	r3, r3, #3
 800d600:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d604:	693a      	ldr	r2, [r7, #16]
 800d606:	fb02 f303 	mul.w	r3, r2, r3
 800d60a:	ee07 3a90 	vmov	s15, r3
 800d60e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d612:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800d616:	697b      	ldr	r3, [r7, #20]
 800d618:	2b00      	cmp	r3, #0
 800d61a:	f000 8111 	beq.w	800d840 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800d61e:	69bb      	ldr	r3, [r7, #24]
 800d620:	2b02      	cmp	r3, #2
 800d622:	f000 8083 	beq.w	800d72c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800d626:	69bb      	ldr	r3, [r7, #24]
 800d628:	2b02      	cmp	r3, #2
 800d62a:	f200 80a1 	bhi.w	800d770 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800d62e:	69bb      	ldr	r3, [r7, #24]
 800d630:	2b00      	cmp	r3, #0
 800d632:	d003      	beq.n	800d63c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800d634:	69bb      	ldr	r3, [r7, #24]
 800d636:	2b01      	cmp	r3, #1
 800d638:	d056      	beq.n	800d6e8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800d63a:	e099      	b.n	800d770 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d63c:	4b88      	ldr	r3, [pc, #544]	@ (800d860 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d63e:	681b      	ldr	r3, [r3, #0]
 800d640:	f003 0320 	and.w	r3, r3, #32
 800d644:	2b00      	cmp	r3, #0
 800d646:	d02d      	beq.n	800d6a4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d648:	4b85      	ldr	r3, [pc, #532]	@ (800d860 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d64a:	681b      	ldr	r3, [r3, #0]
 800d64c:	08db      	lsrs	r3, r3, #3
 800d64e:	f003 0303 	and.w	r3, r3, #3
 800d652:	4a84      	ldr	r2, [pc, #528]	@ (800d864 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800d654:	fa22 f303 	lsr.w	r3, r2, r3
 800d658:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d65a:	68bb      	ldr	r3, [r7, #8]
 800d65c:	ee07 3a90 	vmov	s15, r3
 800d660:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d664:	697b      	ldr	r3, [r7, #20]
 800d666:	ee07 3a90 	vmov	s15, r3
 800d66a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d66e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d672:	4b7b      	ldr	r3, [pc, #492]	@ (800d860 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d674:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d676:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d67a:	ee07 3a90 	vmov	s15, r3
 800d67e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d682:	ed97 6a03 	vldr	s12, [r7, #12]
 800d686:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800d868 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d68a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d68e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d692:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d696:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d69a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d69e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d6a2:	e087      	b.n	800d7b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d6a4:	697b      	ldr	r3, [r7, #20]
 800d6a6:	ee07 3a90 	vmov	s15, r3
 800d6aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d6ae:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800d86c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800d6b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d6b6:	4b6a      	ldr	r3, [pc, #424]	@ (800d860 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d6b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d6ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d6be:	ee07 3a90 	vmov	s15, r3
 800d6c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d6c6:	ed97 6a03 	vldr	s12, [r7, #12]
 800d6ca:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800d868 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d6ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d6d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d6d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d6da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d6de:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d6e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d6e6:	e065      	b.n	800d7b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d6e8:	697b      	ldr	r3, [r7, #20]
 800d6ea:	ee07 3a90 	vmov	s15, r3
 800d6ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d6f2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800d870 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800d6f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d6fa:	4b59      	ldr	r3, [pc, #356]	@ (800d860 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d6fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d6fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d702:	ee07 3a90 	vmov	s15, r3
 800d706:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d70a:	ed97 6a03 	vldr	s12, [r7, #12]
 800d70e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800d868 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d712:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d716:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d71a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d71e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d722:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d726:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d72a:	e043      	b.n	800d7b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d72c:	697b      	ldr	r3, [r7, #20]
 800d72e:	ee07 3a90 	vmov	s15, r3
 800d732:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d736:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800d874 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800d73a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d73e:	4b48      	ldr	r3, [pc, #288]	@ (800d860 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d740:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d742:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d746:	ee07 3a90 	vmov	s15, r3
 800d74a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d74e:	ed97 6a03 	vldr	s12, [r7, #12]
 800d752:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800d868 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d756:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d75a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d75e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d762:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d766:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d76a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d76e:	e021      	b.n	800d7b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d770:	697b      	ldr	r3, [r7, #20]
 800d772:	ee07 3a90 	vmov	s15, r3
 800d776:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d77a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800d870 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800d77e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d782:	4b37      	ldr	r3, [pc, #220]	@ (800d860 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d784:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d786:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d78a:	ee07 3a90 	vmov	s15, r3
 800d78e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d792:	ed97 6a03 	vldr	s12, [r7, #12]
 800d796:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800d868 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d79a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d79e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d7a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d7a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d7aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d7ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d7b2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800d7b4:	4b2a      	ldr	r3, [pc, #168]	@ (800d860 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d7b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d7b8:	0a5b      	lsrs	r3, r3, #9
 800d7ba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d7be:	ee07 3a90 	vmov	s15, r3
 800d7c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d7c6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d7ca:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d7ce:	edd7 6a07 	vldr	s13, [r7, #28]
 800d7d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d7d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d7da:	ee17 2a90 	vmov	r2, s15
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800d7e2:	4b1f      	ldr	r3, [pc, #124]	@ (800d860 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d7e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d7e6:	0c1b      	lsrs	r3, r3, #16
 800d7e8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d7ec:	ee07 3a90 	vmov	s15, r3
 800d7f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d7f4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d7f8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d7fc:	edd7 6a07 	vldr	s13, [r7, #28]
 800d800:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d804:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d808:	ee17 2a90 	vmov	r2, s15
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800d810:	4b13      	ldr	r3, [pc, #76]	@ (800d860 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d812:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d814:	0e1b      	lsrs	r3, r3, #24
 800d816:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d81a:	ee07 3a90 	vmov	s15, r3
 800d81e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d822:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d826:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d82a:	edd7 6a07 	vldr	s13, [r7, #28]
 800d82e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d832:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d836:	ee17 2a90 	vmov	r2, s15
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800d83e:	e008      	b.n	800d852 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	2200      	movs	r2, #0
 800d844:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	2200      	movs	r2, #0
 800d84a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	2200      	movs	r2, #0
 800d850:	609a      	str	r2, [r3, #8]
}
 800d852:	bf00      	nop
 800d854:	3724      	adds	r7, #36	@ 0x24
 800d856:	46bd      	mov	sp, r7
 800d858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d85c:	4770      	bx	lr
 800d85e:	bf00      	nop
 800d860:	58024400 	.word	0x58024400
 800d864:	03d09000 	.word	0x03d09000
 800d868:	46000000 	.word	0x46000000
 800d86c:	4c742400 	.word	0x4c742400
 800d870:	4a742400 	.word	0x4a742400
 800d874:	4bb71b00 	.word	0x4bb71b00

0800d878 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800d878:	b480      	push	{r7}
 800d87a:	b089      	sub	sp, #36	@ 0x24
 800d87c:	af00      	add	r7, sp, #0
 800d87e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d880:	4ba0      	ldr	r3, [pc, #640]	@ (800db04 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d882:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d884:	f003 0303 	and.w	r3, r3, #3
 800d888:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800d88a:	4b9e      	ldr	r3, [pc, #632]	@ (800db04 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d88c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d88e:	091b      	lsrs	r3, r3, #4
 800d890:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d894:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800d896:	4b9b      	ldr	r3, [pc, #620]	@ (800db04 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d898:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d89a:	f003 0301 	and.w	r3, r3, #1
 800d89e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800d8a0:	4b98      	ldr	r3, [pc, #608]	@ (800db04 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d8a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d8a4:	08db      	lsrs	r3, r3, #3
 800d8a6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d8aa:	693a      	ldr	r2, [r7, #16]
 800d8ac:	fb02 f303 	mul.w	r3, r2, r3
 800d8b0:	ee07 3a90 	vmov	s15, r3
 800d8b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d8b8:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800d8bc:	697b      	ldr	r3, [r7, #20]
 800d8be:	2b00      	cmp	r3, #0
 800d8c0:	f000 8111 	beq.w	800dae6 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800d8c4:	69bb      	ldr	r3, [r7, #24]
 800d8c6:	2b02      	cmp	r3, #2
 800d8c8:	f000 8083 	beq.w	800d9d2 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800d8cc:	69bb      	ldr	r3, [r7, #24]
 800d8ce:	2b02      	cmp	r3, #2
 800d8d0:	f200 80a1 	bhi.w	800da16 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800d8d4:	69bb      	ldr	r3, [r7, #24]
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	d003      	beq.n	800d8e2 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800d8da:	69bb      	ldr	r3, [r7, #24]
 800d8dc:	2b01      	cmp	r3, #1
 800d8de:	d056      	beq.n	800d98e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800d8e0:	e099      	b.n	800da16 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d8e2:	4b88      	ldr	r3, [pc, #544]	@ (800db04 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d8e4:	681b      	ldr	r3, [r3, #0]
 800d8e6:	f003 0320 	and.w	r3, r3, #32
 800d8ea:	2b00      	cmp	r3, #0
 800d8ec:	d02d      	beq.n	800d94a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d8ee:	4b85      	ldr	r3, [pc, #532]	@ (800db04 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d8f0:	681b      	ldr	r3, [r3, #0]
 800d8f2:	08db      	lsrs	r3, r3, #3
 800d8f4:	f003 0303 	and.w	r3, r3, #3
 800d8f8:	4a83      	ldr	r2, [pc, #524]	@ (800db08 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800d8fa:	fa22 f303 	lsr.w	r3, r2, r3
 800d8fe:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d900:	68bb      	ldr	r3, [r7, #8]
 800d902:	ee07 3a90 	vmov	s15, r3
 800d906:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d90a:	697b      	ldr	r3, [r7, #20]
 800d90c:	ee07 3a90 	vmov	s15, r3
 800d910:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d914:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d918:	4b7a      	ldr	r3, [pc, #488]	@ (800db04 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d91a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d91c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d920:	ee07 3a90 	vmov	s15, r3
 800d924:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d928:	ed97 6a03 	vldr	s12, [r7, #12]
 800d92c:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800db0c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d930:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d934:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d938:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d93c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d940:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d944:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d948:	e087      	b.n	800da5a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d94a:	697b      	ldr	r3, [r7, #20]
 800d94c:	ee07 3a90 	vmov	s15, r3
 800d950:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d954:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800db10 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800d958:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d95c:	4b69      	ldr	r3, [pc, #420]	@ (800db04 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d95e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d960:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d964:	ee07 3a90 	vmov	s15, r3
 800d968:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d96c:	ed97 6a03 	vldr	s12, [r7, #12]
 800d970:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800db0c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d974:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d978:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d97c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d980:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d984:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d988:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d98c:	e065      	b.n	800da5a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d98e:	697b      	ldr	r3, [r7, #20]
 800d990:	ee07 3a90 	vmov	s15, r3
 800d994:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d998:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800db14 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800d99c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d9a0:	4b58      	ldr	r3, [pc, #352]	@ (800db04 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d9a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d9a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d9a8:	ee07 3a90 	vmov	s15, r3
 800d9ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d9b0:	ed97 6a03 	vldr	s12, [r7, #12]
 800d9b4:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800db0c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d9b8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d9bc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d9c0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d9c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d9c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d9cc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d9d0:	e043      	b.n	800da5a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d9d2:	697b      	ldr	r3, [r7, #20]
 800d9d4:	ee07 3a90 	vmov	s15, r3
 800d9d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d9dc:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800db18 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800d9e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d9e4:	4b47      	ldr	r3, [pc, #284]	@ (800db04 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d9e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d9e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d9ec:	ee07 3a90 	vmov	s15, r3
 800d9f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d9f4:	ed97 6a03 	vldr	s12, [r7, #12]
 800d9f8:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800db0c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d9fc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800da00:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800da04:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800da08:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800da0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800da10:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800da14:	e021      	b.n	800da5a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800da16:	697b      	ldr	r3, [r7, #20]
 800da18:	ee07 3a90 	vmov	s15, r3
 800da1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800da20:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800db10 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800da24:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800da28:	4b36      	ldr	r3, [pc, #216]	@ (800db04 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800da2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800da2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800da30:	ee07 3a90 	vmov	s15, r3
 800da34:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800da38:	ed97 6a03 	vldr	s12, [r7, #12]
 800da3c:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800db0c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800da40:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800da44:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800da48:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800da4c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800da50:	ee67 7a27 	vmul.f32	s15, s14, s15
 800da54:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800da58:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800da5a:	4b2a      	ldr	r3, [pc, #168]	@ (800db04 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800da5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800da5e:	0a5b      	lsrs	r3, r3, #9
 800da60:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800da64:	ee07 3a90 	vmov	s15, r3
 800da68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800da6c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800da70:	ee37 7a87 	vadd.f32	s14, s15, s14
 800da74:	edd7 6a07 	vldr	s13, [r7, #28]
 800da78:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800da7c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800da80:	ee17 2a90 	vmov	r2, s15
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800da88:	4b1e      	ldr	r3, [pc, #120]	@ (800db04 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800da8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800da8c:	0c1b      	lsrs	r3, r3, #16
 800da8e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800da92:	ee07 3a90 	vmov	s15, r3
 800da96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800da9a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800da9e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800daa2:	edd7 6a07 	vldr	s13, [r7, #28]
 800daa6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800daaa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800daae:	ee17 2a90 	vmov	r2, s15
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800dab6:	4b13      	ldr	r3, [pc, #76]	@ (800db04 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800dab8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800daba:	0e1b      	lsrs	r3, r3, #24
 800dabc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800dac0:	ee07 3a90 	vmov	s15, r3
 800dac4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dac8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800dacc:	ee37 7a87 	vadd.f32	s14, s15, s14
 800dad0:	edd7 6a07 	vldr	s13, [r7, #28]
 800dad4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800dad8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800dadc:	ee17 2a90 	vmov	r2, s15
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800dae4:	e008      	b.n	800daf8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	2200      	movs	r2, #0
 800daea:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	2200      	movs	r2, #0
 800daf0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	2200      	movs	r2, #0
 800daf6:	609a      	str	r2, [r3, #8]
}
 800daf8:	bf00      	nop
 800dafa:	3724      	adds	r7, #36	@ 0x24
 800dafc:	46bd      	mov	sp, r7
 800dafe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db02:	4770      	bx	lr
 800db04:	58024400 	.word	0x58024400
 800db08:	03d09000 	.word	0x03d09000
 800db0c:	46000000 	.word	0x46000000
 800db10:	4c742400 	.word	0x4c742400
 800db14:	4a742400 	.word	0x4a742400
 800db18:	4bb71b00 	.word	0x4bb71b00

0800db1c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800db1c:	b580      	push	{r7, lr}
 800db1e:	b084      	sub	sp, #16
 800db20:	af00      	add	r7, sp, #0
 800db22:	6078      	str	r0, [r7, #4]
 800db24:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800db26:	2300      	movs	r3, #0
 800db28:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800db2a:	4b53      	ldr	r3, [pc, #332]	@ (800dc78 <RCCEx_PLL2_Config+0x15c>)
 800db2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800db2e:	f003 0303 	and.w	r3, r3, #3
 800db32:	2b03      	cmp	r3, #3
 800db34:	d101      	bne.n	800db3a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800db36:	2301      	movs	r3, #1
 800db38:	e099      	b.n	800dc6e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800db3a:	4b4f      	ldr	r3, [pc, #316]	@ (800dc78 <RCCEx_PLL2_Config+0x15c>)
 800db3c:	681b      	ldr	r3, [r3, #0]
 800db3e:	4a4e      	ldr	r2, [pc, #312]	@ (800dc78 <RCCEx_PLL2_Config+0x15c>)
 800db40:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800db44:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800db46:	f7f6 ff53 	bl	80049f0 <HAL_GetTick>
 800db4a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800db4c:	e008      	b.n	800db60 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800db4e:	f7f6 ff4f 	bl	80049f0 <HAL_GetTick>
 800db52:	4602      	mov	r2, r0
 800db54:	68bb      	ldr	r3, [r7, #8]
 800db56:	1ad3      	subs	r3, r2, r3
 800db58:	2b02      	cmp	r3, #2
 800db5a:	d901      	bls.n	800db60 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800db5c:	2303      	movs	r3, #3
 800db5e:	e086      	b.n	800dc6e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800db60:	4b45      	ldr	r3, [pc, #276]	@ (800dc78 <RCCEx_PLL2_Config+0x15c>)
 800db62:	681b      	ldr	r3, [r3, #0]
 800db64:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800db68:	2b00      	cmp	r3, #0
 800db6a:	d1f0      	bne.n	800db4e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800db6c:	4b42      	ldr	r3, [pc, #264]	@ (800dc78 <RCCEx_PLL2_Config+0x15c>)
 800db6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800db70:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	681b      	ldr	r3, [r3, #0]
 800db78:	031b      	lsls	r3, r3, #12
 800db7a:	493f      	ldr	r1, [pc, #252]	@ (800dc78 <RCCEx_PLL2_Config+0x15c>)
 800db7c:	4313      	orrs	r3, r2
 800db7e:	628b      	str	r3, [r1, #40]	@ 0x28
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	685b      	ldr	r3, [r3, #4]
 800db84:	3b01      	subs	r3, #1
 800db86:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	689b      	ldr	r3, [r3, #8]
 800db8e:	3b01      	subs	r3, #1
 800db90:	025b      	lsls	r3, r3, #9
 800db92:	b29b      	uxth	r3, r3
 800db94:	431a      	orrs	r2, r3
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	68db      	ldr	r3, [r3, #12]
 800db9a:	3b01      	subs	r3, #1
 800db9c:	041b      	lsls	r3, r3, #16
 800db9e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800dba2:	431a      	orrs	r2, r3
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	691b      	ldr	r3, [r3, #16]
 800dba8:	3b01      	subs	r3, #1
 800dbaa:	061b      	lsls	r3, r3, #24
 800dbac:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800dbb0:	4931      	ldr	r1, [pc, #196]	@ (800dc78 <RCCEx_PLL2_Config+0x15c>)
 800dbb2:	4313      	orrs	r3, r2
 800dbb4:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800dbb6:	4b30      	ldr	r3, [pc, #192]	@ (800dc78 <RCCEx_PLL2_Config+0x15c>)
 800dbb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dbba:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	695b      	ldr	r3, [r3, #20]
 800dbc2:	492d      	ldr	r1, [pc, #180]	@ (800dc78 <RCCEx_PLL2_Config+0x15c>)
 800dbc4:	4313      	orrs	r3, r2
 800dbc6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800dbc8:	4b2b      	ldr	r3, [pc, #172]	@ (800dc78 <RCCEx_PLL2_Config+0x15c>)
 800dbca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dbcc:	f023 0220 	bic.w	r2, r3, #32
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	699b      	ldr	r3, [r3, #24]
 800dbd4:	4928      	ldr	r1, [pc, #160]	@ (800dc78 <RCCEx_PLL2_Config+0x15c>)
 800dbd6:	4313      	orrs	r3, r2
 800dbd8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800dbda:	4b27      	ldr	r3, [pc, #156]	@ (800dc78 <RCCEx_PLL2_Config+0x15c>)
 800dbdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dbde:	4a26      	ldr	r2, [pc, #152]	@ (800dc78 <RCCEx_PLL2_Config+0x15c>)
 800dbe0:	f023 0310 	bic.w	r3, r3, #16
 800dbe4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800dbe6:	4b24      	ldr	r3, [pc, #144]	@ (800dc78 <RCCEx_PLL2_Config+0x15c>)
 800dbe8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800dbea:	4b24      	ldr	r3, [pc, #144]	@ (800dc7c <RCCEx_PLL2_Config+0x160>)
 800dbec:	4013      	ands	r3, r2
 800dbee:	687a      	ldr	r2, [r7, #4]
 800dbf0:	69d2      	ldr	r2, [r2, #28]
 800dbf2:	00d2      	lsls	r2, r2, #3
 800dbf4:	4920      	ldr	r1, [pc, #128]	@ (800dc78 <RCCEx_PLL2_Config+0x15c>)
 800dbf6:	4313      	orrs	r3, r2
 800dbf8:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800dbfa:	4b1f      	ldr	r3, [pc, #124]	@ (800dc78 <RCCEx_PLL2_Config+0x15c>)
 800dbfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dbfe:	4a1e      	ldr	r2, [pc, #120]	@ (800dc78 <RCCEx_PLL2_Config+0x15c>)
 800dc00:	f043 0310 	orr.w	r3, r3, #16
 800dc04:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800dc06:	683b      	ldr	r3, [r7, #0]
 800dc08:	2b00      	cmp	r3, #0
 800dc0a:	d106      	bne.n	800dc1a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800dc0c:	4b1a      	ldr	r3, [pc, #104]	@ (800dc78 <RCCEx_PLL2_Config+0x15c>)
 800dc0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dc10:	4a19      	ldr	r2, [pc, #100]	@ (800dc78 <RCCEx_PLL2_Config+0x15c>)
 800dc12:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800dc16:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800dc18:	e00f      	b.n	800dc3a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800dc1a:	683b      	ldr	r3, [r7, #0]
 800dc1c:	2b01      	cmp	r3, #1
 800dc1e:	d106      	bne.n	800dc2e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800dc20:	4b15      	ldr	r3, [pc, #84]	@ (800dc78 <RCCEx_PLL2_Config+0x15c>)
 800dc22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dc24:	4a14      	ldr	r2, [pc, #80]	@ (800dc78 <RCCEx_PLL2_Config+0x15c>)
 800dc26:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800dc2a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800dc2c:	e005      	b.n	800dc3a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800dc2e:	4b12      	ldr	r3, [pc, #72]	@ (800dc78 <RCCEx_PLL2_Config+0x15c>)
 800dc30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dc32:	4a11      	ldr	r2, [pc, #68]	@ (800dc78 <RCCEx_PLL2_Config+0x15c>)
 800dc34:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800dc38:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800dc3a:	4b0f      	ldr	r3, [pc, #60]	@ (800dc78 <RCCEx_PLL2_Config+0x15c>)
 800dc3c:	681b      	ldr	r3, [r3, #0]
 800dc3e:	4a0e      	ldr	r2, [pc, #56]	@ (800dc78 <RCCEx_PLL2_Config+0x15c>)
 800dc40:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800dc44:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800dc46:	f7f6 fed3 	bl	80049f0 <HAL_GetTick>
 800dc4a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800dc4c:	e008      	b.n	800dc60 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800dc4e:	f7f6 fecf 	bl	80049f0 <HAL_GetTick>
 800dc52:	4602      	mov	r2, r0
 800dc54:	68bb      	ldr	r3, [r7, #8]
 800dc56:	1ad3      	subs	r3, r2, r3
 800dc58:	2b02      	cmp	r3, #2
 800dc5a:	d901      	bls.n	800dc60 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800dc5c:	2303      	movs	r3, #3
 800dc5e:	e006      	b.n	800dc6e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800dc60:	4b05      	ldr	r3, [pc, #20]	@ (800dc78 <RCCEx_PLL2_Config+0x15c>)
 800dc62:	681b      	ldr	r3, [r3, #0]
 800dc64:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	d0f0      	beq.n	800dc4e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800dc6c:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc6e:	4618      	mov	r0, r3
 800dc70:	3710      	adds	r7, #16
 800dc72:	46bd      	mov	sp, r7
 800dc74:	bd80      	pop	{r7, pc}
 800dc76:	bf00      	nop
 800dc78:	58024400 	.word	0x58024400
 800dc7c:	ffff0007 	.word	0xffff0007

0800dc80 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800dc80:	b580      	push	{r7, lr}
 800dc82:	b084      	sub	sp, #16
 800dc84:	af00      	add	r7, sp, #0
 800dc86:	6078      	str	r0, [r7, #4]
 800dc88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800dc8a:	2300      	movs	r3, #0
 800dc8c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800dc8e:	4b53      	ldr	r3, [pc, #332]	@ (800dddc <RCCEx_PLL3_Config+0x15c>)
 800dc90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dc92:	f003 0303 	and.w	r3, r3, #3
 800dc96:	2b03      	cmp	r3, #3
 800dc98:	d101      	bne.n	800dc9e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800dc9a:	2301      	movs	r3, #1
 800dc9c:	e099      	b.n	800ddd2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800dc9e:	4b4f      	ldr	r3, [pc, #316]	@ (800dddc <RCCEx_PLL3_Config+0x15c>)
 800dca0:	681b      	ldr	r3, [r3, #0]
 800dca2:	4a4e      	ldr	r2, [pc, #312]	@ (800dddc <RCCEx_PLL3_Config+0x15c>)
 800dca4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800dca8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800dcaa:	f7f6 fea1 	bl	80049f0 <HAL_GetTick>
 800dcae:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800dcb0:	e008      	b.n	800dcc4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800dcb2:	f7f6 fe9d 	bl	80049f0 <HAL_GetTick>
 800dcb6:	4602      	mov	r2, r0
 800dcb8:	68bb      	ldr	r3, [r7, #8]
 800dcba:	1ad3      	subs	r3, r2, r3
 800dcbc:	2b02      	cmp	r3, #2
 800dcbe:	d901      	bls.n	800dcc4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800dcc0:	2303      	movs	r3, #3
 800dcc2:	e086      	b.n	800ddd2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800dcc4:	4b45      	ldr	r3, [pc, #276]	@ (800dddc <RCCEx_PLL3_Config+0x15c>)
 800dcc6:	681b      	ldr	r3, [r3, #0]
 800dcc8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800dccc:	2b00      	cmp	r3, #0
 800dcce:	d1f0      	bne.n	800dcb2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800dcd0:	4b42      	ldr	r3, [pc, #264]	@ (800dddc <RCCEx_PLL3_Config+0x15c>)
 800dcd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dcd4:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	681b      	ldr	r3, [r3, #0]
 800dcdc:	051b      	lsls	r3, r3, #20
 800dcde:	493f      	ldr	r1, [pc, #252]	@ (800dddc <RCCEx_PLL3_Config+0x15c>)
 800dce0:	4313      	orrs	r3, r2
 800dce2:	628b      	str	r3, [r1, #40]	@ 0x28
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	685b      	ldr	r3, [r3, #4]
 800dce8:	3b01      	subs	r3, #1
 800dcea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	689b      	ldr	r3, [r3, #8]
 800dcf2:	3b01      	subs	r3, #1
 800dcf4:	025b      	lsls	r3, r3, #9
 800dcf6:	b29b      	uxth	r3, r3
 800dcf8:	431a      	orrs	r2, r3
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	68db      	ldr	r3, [r3, #12]
 800dcfe:	3b01      	subs	r3, #1
 800dd00:	041b      	lsls	r3, r3, #16
 800dd02:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800dd06:	431a      	orrs	r2, r3
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	691b      	ldr	r3, [r3, #16]
 800dd0c:	3b01      	subs	r3, #1
 800dd0e:	061b      	lsls	r3, r3, #24
 800dd10:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800dd14:	4931      	ldr	r1, [pc, #196]	@ (800dddc <RCCEx_PLL3_Config+0x15c>)
 800dd16:	4313      	orrs	r3, r2
 800dd18:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800dd1a:	4b30      	ldr	r3, [pc, #192]	@ (800dddc <RCCEx_PLL3_Config+0x15c>)
 800dd1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dd1e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	695b      	ldr	r3, [r3, #20]
 800dd26:	492d      	ldr	r1, [pc, #180]	@ (800dddc <RCCEx_PLL3_Config+0x15c>)
 800dd28:	4313      	orrs	r3, r2
 800dd2a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800dd2c:	4b2b      	ldr	r3, [pc, #172]	@ (800dddc <RCCEx_PLL3_Config+0x15c>)
 800dd2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dd30:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	699b      	ldr	r3, [r3, #24]
 800dd38:	4928      	ldr	r1, [pc, #160]	@ (800dddc <RCCEx_PLL3_Config+0x15c>)
 800dd3a:	4313      	orrs	r3, r2
 800dd3c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800dd3e:	4b27      	ldr	r3, [pc, #156]	@ (800dddc <RCCEx_PLL3_Config+0x15c>)
 800dd40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dd42:	4a26      	ldr	r2, [pc, #152]	@ (800dddc <RCCEx_PLL3_Config+0x15c>)
 800dd44:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800dd48:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800dd4a:	4b24      	ldr	r3, [pc, #144]	@ (800dddc <RCCEx_PLL3_Config+0x15c>)
 800dd4c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800dd4e:	4b24      	ldr	r3, [pc, #144]	@ (800dde0 <RCCEx_PLL3_Config+0x160>)
 800dd50:	4013      	ands	r3, r2
 800dd52:	687a      	ldr	r2, [r7, #4]
 800dd54:	69d2      	ldr	r2, [r2, #28]
 800dd56:	00d2      	lsls	r2, r2, #3
 800dd58:	4920      	ldr	r1, [pc, #128]	@ (800dddc <RCCEx_PLL3_Config+0x15c>)
 800dd5a:	4313      	orrs	r3, r2
 800dd5c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800dd5e:	4b1f      	ldr	r3, [pc, #124]	@ (800dddc <RCCEx_PLL3_Config+0x15c>)
 800dd60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dd62:	4a1e      	ldr	r2, [pc, #120]	@ (800dddc <RCCEx_PLL3_Config+0x15c>)
 800dd64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800dd68:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800dd6a:	683b      	ldr	r3, [r7, #0]
 800dd6c:	2b00      	cmp	r3, #0
 800dd6e:	d106      	bne.n	800dd7e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800dd70:	4b1a      	ldr	r3, [pc, #104]	@ (800dddc <RCCEx_PLL3_Config+0x15c>)
 800dd72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dd74:	4a19      	ldr	r2, [pc, #100]	@ (800dddc <RCCEx_PLL3_Config+0x15c>)
 800dd76:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800dd7a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800dd7c:	e00f      	b.n	800dd9e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800dd7e:	683b      	ldr	r3, [r7, #0]
 800dd80:	2b01      	cmp	r3, #1
 800dd82:	d106      	bne.n	800dd92 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800dd84:	4b15      	ldr	r3, [pc, #84]	@ (800dddc <RCCEx_PLL3_Config+0x15c>)
 800dd86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dd88:	4a14      	ldr	r2, [pc, #80]	@ (800dddc <RCCEx_PLL3_Config+0x15c>)
 800dd8a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800dd8e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800dd90:	e005      	b.n	800dd9e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800dd92:	4b12      	ldr	r3, [pc, #72]	@ (800dddc <RCCEx_PLL3_Config+0x15c>)
 800dd94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dd96:	4a11      	ldr	r2, [pc, #68]	@ (800dddc <RCCEx_PLL3_Config+0x15c>)
 800dd98:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800dd9c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800dd9e:	4b0f      	ldr	r3, [pc, #60]	@ (800dddc <RCCEx_PLL3_Config+0x15c>)
 800dda0:	681b      	ldr	r3, [r3, #0]
 800dda2:	4a0e      	ldr	r2, [pc, #56]	@ (800dddc <RCCEx_PLL3_Config+0x15c>)
 800dda4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800dda8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ddaa:	f7f6 fe21 	bl	80049f0 <HAL_GetTick>
 800ddae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800ddb0:	e008      	b.n	800ddc4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800ddb2:	f7f6 fe1d 	bl	80049f0 <HAL_GetTick>
 800ddb6:	4602      	mov	r2, r0
 800ddb8:	68bb      	ldr	r3, [r7, #8]
 800ddba:	1ad3      	subs	r3, r2, r3
 800ddbc:	2b02      	cmp	r3, #2
 800ddbe:	d901      	bls.n	800ddc4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800ddc0:	2303      	movs	r3, #3
 800ddc2:	e006      	b.n	800ddd2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800ddc4:	4b05      	ldr	r3, [pc, #20]	@ (800dddc <RCCEx_PLL3_Config+0x15c>)
 800ddc6:	681b      	ldr	r3, [r3, #0]
 800ddc8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ddcc:	2b00      	cmp	r3, #0
 800ddce:	d0f0      	beq.n	800ddb2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800ddd0:	7bfb      	ldrb	r3, [r7, #15]
}
 800ddd2:	4618      	mov	r0, r3
 800ddd4:	3710      	adds	r7, #16
 800ddd6:	46bd      	mov	sp, r7
 800ddd8:	bd80      	pop	{r7, pc}
 800ddda:	bf00      	nop
 800dddc:	58024400 	.word	0x58024400
 800dde0:	ffff0007 	.word	0xffff0007

0800dde4 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800dde4:	b580      	push	{r7, lr}
 800dde6:	b084      	sub	sp, #16
 800dde8:	af00      	add	r7, sp, #0
 800ddea:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	2b00      	cmp	r3, #0
 800ddf0:	d101      	bne.n	800ddf6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800ddf2:	2301      	movs	r3, #1
 800ddf4:	e10f      	b.n	800e016 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	2200      	movs	r2, #0
 800ddfa:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	681b      	ldr	r3, [r3, #0]
 800de00:	4a87      	ldr	r2, [pc, #540]	@ (800e020 <HAL_SPI_Init+0x23c>)
 800de02:	4293      	cmp	r3, r2
 800de04:	d00f      	beq.n	800de26 <HAL_SPI_Init+0x42>
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	681b      	ldr	r3, [r3, #0]
 800de0a:	4a86      	ldr	r2, [pc, #536]	@ (800e024 <HAL_SPI_Init+0x240>)
 800de0c:	4293      	cmp	r3, r2
 800de0e:	d00a      	beq.n	800de26 <HAL_SPI_Init+0x42>
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	681b      	ldr	r3, [r3, #0]
 800de14:	4a84      	ldr	r2, [pc, #528]	@ (800e028 <HAL_SPI_Init+0x244>)
 800de16:	4293      	cmp	r3, r2
 800de18:	d005      	beq.n	800de26 <HAL_SPI_Init+0x42>
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	68db      	ldr	r3, [r3, #12]
 800de1e:	2b0f      	cmp	r3, #15
 800de20:	d901      	bls.n	800de26 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800de22:	2301      	movs	r3, #1
 800de24:	e0f7      	b.n	800e016 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800de26:	6878      	ldr	r0, [r7, #4]
 800de28:	f000 f900 	bl	800e02c <SPI_GetPacketSize>
 800de2c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	681b      	ldr	r3, [r3, #0]
 800de32:	4a7b      	ldr	r2, [pc, #492]	@ (800e020 <HAL_SPI_Init+0x23c>)
 800de34:	4293      	cmp	r3, r2
 800de36:	d00c      	beq.n	800de52 <HAL_SPI_Init+0x6e>
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	681b      	ldr	r3, [r3, #0]
 800de3c:	4a79      	ldr	r2, [pc, #484]	@ (800e024 <HAL_SPI_Init+0x240>)
 800de3e:	4293      	cmp	r3, r2
 800de40:	d007      	beq.n	800de52 <HAL_SPI_Init+0x6e>
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	681b      	ldr	r3, [r3, #0]
 800de46:	4a78      	ldr	r2, [pc, #480]	@ (800e028 <HAL_SPI_Init+0x244>)
 800de48:	4293      	cmp	r3, r2
 800de4a:	d002      	beq.n	800de52 <HAL_SPI_Init+0x6e>
 800de4c:	68fb      	ldr	r3, [r7, #12]
 800de4e:	2b08      	cmp	r3, #8
 800de50:	d811      	bhi.n	800de76 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800de56:	4a72      	ldr	r2, [pc, #456]	@ (800e020 <HAL_SPI_Init+0x23c>)
 800de58:	4293      	cmp	r3, r2
 800de5a:	d009      	beq.n	800de70 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	681b      	ldr	r3, [r3, #0]
 800de60:	4a70      	ldr	r2, [pc, #448]	@ (800e024 <HAL_SPI_Init+0x240>)
 800de62:	4293      	cmp	r3, r2
 800de64:	d004      	beq.n	800de70 <HAL_SPI_Init+0x8c>
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	681b      	ldr	r3, [r3, #0]
 800de6a:	4a6f      	ldr	r2, [pc, #444]	@ (800e028 <HAL_SPI_Init+0x244>)
 800de6c:	4293      	cmp	r3, r2
 800de6e:	d104      	bne.n	800de7a <HAL_SPI_Init+0x96>
 800de70:	68fb      	ldr	r3, [r7, #12]
 800de72:	2b10      	cmp	r3, #16
 800de74:	d901      	bls.n	800de7a <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800de76:	2301      	movs	r3, #1
 800de78:	e0cd      	b.n	800e016 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800de80:	b2db      	uxtb	r3, r3
 800de82:	2b00      	cmp	r3, #0
 800de84:	d106      	bne.n	800de94 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	2200      	movs	r2, #0
 800de8a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800de8e:	6878      	ldr	r0, [r7, #4]
 800de90:	f7f3 ff7c 	bl	8001d8c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	2202      	movs	r2, #2
 800de98:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	681b      	ldr	r3, [r3, #0]
 800dea0:	681a      	ldr	r2, [r3, #0]
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	681b      	ldr	r3, [r3, #0]
 800dea6:	f022 0201 	bic.w	r2, r2, #1
 800deaa:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	681b      	ldr	r3, [r3, #0]
 800deb0:	689b      	ldr	r3, [r3, #8]
 800deb2:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800deb6:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	699b      	ldr	r3, [r3, #24]
 800debc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800dec0:	d119      	bne.n	800def6 <HAL_SPI_Init+0x112>
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	685b      	ldr	r3, [r3, #4]
 800dec6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800deca:	d103      	bne.n	800ded4 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800ded0:	2b00      	cmp	r3, #0
 800ded2:	d008      	beq.n	800dee6 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800ded8:	2b00      	cmp	r3, #0
 800deda:	d10c      	bne.n	800def6 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800dee0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800dee4:	d107      	bne.n	800def6 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	681b      	ldr	r3, [r3, #0]
 800deea:	681a      	ldr	r2, [r3, #0]
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	681b      	ldr	r3, [r3, #0]
 800def0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800def4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	685b      	ldr	r3, [r3, #4]
 800defa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800defe:	2b00      	cmp	r3, #0
 800df00:	d00f      	beq.n	800df22 <HAL_SPI_Init+0x13e>
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	68db      	ldr	r3, [r3, #12]
 800df06:	2b06      	cmp	r3, #6
 800df08:	d90b      	bls.n	800df22 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	681b      	ldr	r3, [r3, #0]
 800df0e:	681b      	ldr	r3, [r3, #0]
 800df10:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	681b      	ldr	r3, [r3, #0]
 800df1c:	430a      	orrs	r2, r1
 800df1e:	601a      	str	r2, [r3, #0]
 800df20:	e007      	b.n	800df32 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	681b      	ldr	r3, [r3, #0]
 800df26:	681a      	ldr	r2, [r3, #0]
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	681b      	ldr	r3, [r3, #0]
 800df2c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800df30:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	69da      	ldr	r2, [r3, #28]
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800df3a:	431a      	orrs	r2, r3
 800df3c:	68bb      	ldr	r3, [r7, #8]
 800df3e:	431a      	orrs	r2, r3
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800df44:	ea42 0103 	orr.w	r1, r2, r3
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	68da      	ldr	r2, [r3, #12]
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	681b      	ldr	r3, [r3, #0]
 800df50:	430a      	orrs	r2, r1
 800df52:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800df5c:	431a      	orrs	r2, r3
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800df62:	431a      	orrs	r2, r3
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	699b      	ldr	r3, [r3, #24]
 800df68:	431a      	orrs	r2, r3
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	691b      	ldr	r3, [r3, #16]
 800df6e:	431a      	orrs	r2, r3
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	695b      	ldr	r3, [r3, #20]
 800df74:	431a      	orrs	r2, r3
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	6a1b      	ldr	r3, [r3, #32]
 800df7a:	431a      	orrs	r2, r3
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	685b      	ldr	r3, [r3, #4]
 800df80:	431a      	orrs	r2, r3
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800df86:	431a      	orrs	r2, r3
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	689b      	ldr	r3, [r3, #8]
 800df8c:	431a      	orrs	r2, r3
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800df92:	ea42 0103 	orr.w	r1, r2, r3
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	681b      	ldr	r3, [r3, #0]
 800df9e:	430a      	orrs	r2, r1
 800dfa0:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	685b      	ldr	r3, [r3, #4]
 800dfa6:	2b00      	cmp	r3, #0
 800dfa8:	d113      	bne.n	800dfd2 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	681b      	ldr	r3, [r3, #0]
 800dfae:	689b      	ldr	r3, [r3, #8]
 800dfb0:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	681b      	ldr	r3, [r3, #0]
 800dfb8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800dfbc:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	681b      	ldr	r3, [r3, #0]
 800dfc2:	689b      	ldr	r3, [r3, #8]
 800dfc4:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	681b      	ldr	r3, [r3, #0]
 800dfcc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800dfd0:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	681b      	ldr	r3, [r3, #0]
 800dfd6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	681b      	ldr	r3, [r3, #0]
 800dfdc:	f022 0201 	bic.w	r2, r2, #1
 800dfe0:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	685b      	ldr	r3, [r3, #4]
 800dfe6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800dfea:	2b00      	cmp	r3, #0
 800dfec:	d00a      	beq.n	800e004 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	681b      	ldr	r3, [r3, #0]
 800dff2:	68db      	ldr	r3, [r3, #12]
 800dff4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	681b      	ldr	r3, [r3, #0]
 800e000:	430a      	orrs	r2, r1
 800e002:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	2200      	movs	r2, #0
 800e008:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	2201      	movs	r2, #1
 800e010:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800e014:	2300      	movs	r3, #0
}
 800e016:	4618      	mov	r0, r3
 800e018:	3710      	adds	r7, #16
 800e01a:	46bd      	mov	sp, r7
 800e01c:	bd80      	pop	{r7, pc}
 800e01e:	bf00      	nop
 800e020:	40013000 	.word	0x40013000
 800e024:	40003800 	.word	0x40003800
 800e028:	40003c00 	.word	0x40003c00

0800e02c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800e02c:	b480      	push	{r7}
 800e02e:	b085      	sub	sp, #20
 800e030:	af00      	add	r7, sp, #0
 800e032:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e038:	095b      	lsrs	r3, r3, #5
 800e03a:	3301      	adds	r3, #1
 800e03c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	68db      	ldr	r3, [r3, #12]
 800e042:	3301      	adds	r3, #1
 800e044:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800e046:	68bb      	ldr	r3, [r7, #8]
 800e048:	3307      	adds	r3, #7
 800e04a:	08db      	lsrs	r3, r3, #3
 800e04c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800e04e:	68bb      	ldr	r3, [r7, #8]
 800e050:	68fa      	ldr	r2, [r7, #12]
 800e052:	fb02 f303 	mul.w	r3, r2, r3
}
 800e056:	4618      	mov	r0, r3
 800e058:	3714      	adds	r7, #20
 800e05a:	46bd      	mov	sp, r7
 800e05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e060:	4770      	bx	lr

0800e062 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800e062:	b580      	push	{r7, lr}
 800e064:	b082      	sub	sp, #8
 800e066:	af00      	add	r7, sp, #0
 800e068:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	2b00      	cmp	r3, #0
 800e06e:	d101      	bne.n	800e074 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800e070:	2301      	movs	r3, #1
 800e072:	e049      	b.n	800e108 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e07a:	b2db      	uxtb	r3, r3
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	d106      	bne.n	800e08e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	2200      	movs	r2, #0
 800e084:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800e088:	6878      	ldr	r0, [r7, #4]
 800e08a:	f7f3 ff87 	bl	8001f9c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	2202      	movs	r2, #2
 800e092:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	681a      	ldr	r2, [r3, #0]
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	3304      	adds	r3, #4
 800e09e:	4619      	mov	r1, r3
 800e0a0:	4610      	mov	r0, r2
 800e0a2:	f000 fe89 	bl	800edb8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	2201      	movs	r2, #1
 800e0aa:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	2201      	movs	r2, #1
 800e0b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	2201      	movs	r2, #1
 800e0ba:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	2201      	movs	r2, #1
 800e0c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	2201      	movs	r2, #1
 800e0ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	2201      	movs	r2, #1
 800e0d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	2201      	movs	r2, #1
 800e0da:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	2201      	movs	r2, #1
 800e0e2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	2201      	movs	r2, #1
 800e0ea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	2201      	movs	r2, #1
 800e0f2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	2201      	movs	r2, #1
 800e0fa:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	2201      	movs	r2, #1
 800e102:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800e106:	2300      	movs	r3, #0
}
 800e108:	4618      	mov	r0, r3
 800e10a:	3708      	adds	r7, #8
 800e10c:	46bd      	mov	sp, r7
 800e10e:	bd80      	pop	{r7, pc}

0800e110 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800e110:	b480      	push	{r7}
 800e112:	b085      	sub	sp, #20
 800e114:	af00      	add	r7, sp, #0
 800e116:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e11e:	b2db      	uxtb	r3, r3
 800e120:	2b01      	cmp	r3, #1
 800e122:	d001      	beq.n	800e128 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800e124:	2301      	movs	r3, #1
 800e126:	e056      	b.n	800e1d6 <HAL_TIM_Base_Start+0xc6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	2202      	movs	r2, #2
 800e12c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	681b      	ldr	r3, [r3, #0]
 800e134:	4a2b      	ldr	r2, [pc, #172]	@ (800e1e4 <HAL_TIM_Base_Start+0xd4>)
 800e136:	4293      	cmp	r3, r2
 800e138:	d02c      	beq.n	800e194 <HAL_TIM_Base_Start+0x84>
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	681b      	ldr	r3, [r3, #0]
 800e13e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e142:	d027      	beq.n	800e194 <HAL_TIM_Base_Start+0x84>
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	681b      	ldr	r3, [r3, #0]
 800e148:	4a27      	ldr	r2, [pc, #156]	@ (800e1e8 <HAL_TIM_Base_Start+0xd8>)
 800e14a:	4293      	cmp	r3, r2
 800e14c:	d022      	beq.n	800e194 <HAL_TIM_Base_Start+0x84>
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	681b      	ldr	r3, [r3, #0]
 800e152:	4a26      	ldr	r2, [pc, #152]	@ (800e1ec <HAL_TIM_Base_Start+0xdc>)
 800e154:	4293      	cmp	r3, r2
 800e156:	d01d      	beq.n	800e194 <HAL_TIM_Base_Start+0x84>
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	681b      	ldr	r3, [r3, #0]
 800e15c:	4a24      	ldr	r2, [pc, #144]	@ (800e1f0 <HAL_TIM_Base_Start+0xe0>)
 800e15e:	4293      	cmp	r3, r2
 800e160:	d018      	beq.n	800e194 <HAL_TIM_Base_Start+0x84>
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	681b      	ldr	r3, [r3, #0]
 800e166:	4a23      	ldr	r2, [pc, #140]	@ (800e1f4 <HAL_TIM_Base_Start+0xe4>)
 800e168:	4293      	cmp	r3, r2
 800e16a:	d013      	beq.n	800e194 <HAL_TIM_Base_Start+0x84>
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	681b      	ldr	r3, [r3, #0]
 800e170:	4a21      	ldr	r2, [pc, #132]	@ (800e1f8 <HAL_TIM_Base_Start+0xe8>)
 800e172:	4293      	cmp	r3, r2
 800e174:	d00e      	beq.n	800e194 <HAL_TIM_Base_Start+0x84>
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	681b      	ldr	r3, [r3, #0]
 800e17a:	4a20      	ldr	r2, [pc, #128]	@ (800e1fc <HAL_TIM_Base_Start+0xec>)
 800e17c:	4293      	cmp	r3, r2
 800e17e:	d009      	beq.n	800e194 <HAL_TIM_Base_Start+0x84>
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	681b      	ldr	r3, [r3, #0]
 800e184:	4a1e      	ldr	r2, [pc, #120]	@ (800e200 <HAL_TIM_Base_Start+0xf0>)
 800e186:	4293      	cmp	r3, r2
 800e188:	d004      	beq.n	800e194 <HAL_TIM_Base_Start+0x84>
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	681b      	ldr	r3, [r3, #0]
 800e18e:	4a1d      	ldr	r2, [pc, #116]	@ (800e204 <HAL_TIM_Base_Start+0xf4>)
 800e190:	4293      	cmp	r3, r2
 800e192:	d115      	bne.n	800e1c0 <HAL_TIM_Base_Start+0xb0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	681b      	ldr	r3, [r3, #0]
 800e198:	689a      	ldr	r2, [r3, #8]
 800e19a:	4b1b      	ldr	r3, [pc, #108]	@ (800e208 <HAL_TIM_Base_Start+0xf8>)
 800e19c:	4013      	ands	r3, r2
 800e19e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e1a0:	68fb      	ldr	r3, [r7, #12]
 800e1a2:	2b06      	cmp	r3, #6
 800e1a4:	d015      	beq.n	800e1d2 <HAL_TIM_Base_Start+0xc2>
 800e1a6:	68fb      	ldr	r3, [r7, #12]
 800e1a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e1ac:	d011      	beq.n	800e1d2 <HAL_TIM_Base_Start+0xc2>
    {
      __HAL_TIM_ENABLE(htim);
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	681b      	ldr	r3, [r3, #0]
 800e1b2:	681a      	ldr	r2, [r3, #0]
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	681b      	ldr	r3, [r3, #0]
 800e1b8:	f042 0201 	orr.w	r2, r2, #1
 800e1bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e1be:	e008      	b.n	800e1d2 <HAL_TIM_Base_Start+0xc2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	681b      	ldr	r3, [r3, #0]
 800e1c4:	681a      	ldr	r2, [r3, #0]
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	681b      	ldr	r3, [r3, #0]
 800e1ca:	f042 0201 	orr.w	r2, r2, #1
 800e1ce:	601a      	str	r2, [r3, #0]
 800e1d0:	e000      	b.n	800e1d4 <HAL_TIM_Base_Start+0xc4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e1d2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800e1d4:	2300      	movs	r3, #0
}
 800e1d6:	4618      	mov	r0, r3
 800e1d8:	3714      	adds	r7, #20
 800e1da:	46bd      	mov	sp, r7
 800e1dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1e0:	4770      	bx	lr
 800e1e2:	bf00      	nop
 800e1e4:	40010000 	.word	0x40010000
 800e1e8:	40000400 	.word	0x40000400
 800e1ec:	40000800 	.word	0x40000800
 800e1f0:	40000c00 	.word	0x40000c00
 800e1f4:	40010400 	.word	0x40010400
 800e1f8:	40001800 	.word	0x40001800
 800e1fc:	40014000 	.word	0x40014000
 800e200:	4000e000 	.word	0x4000e000
 800e204:	4000e400 	.word	0x4000e400
 800e208:	00010007 	.word	0x00010007

0800e20c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800e20c:	b480      	push	{r7}
 800e20e:	b085      	sub	sp, #20
 800e210:	af00      	add	r7, sp, #0
 800e212:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e21a:	b2db      	uxtb	r3, r3
 800e21c:	2b01      	cmp	r3, #1
 800e21e:	d001      	beq.n	800e224 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800e220:	2301      	movs	r3, #1
 800e222:	e05e      	b.n	800e2e2 <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	2202      	movs	r2, #2
 800e228:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	681b      	ldr	r3, [r3, #0]
 800e230:	68da      	ldr	r2, [r3, #12]
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	681b      	ldr	r3, [r3, #0]
 800e236:	f042 0201 	orr.w	r2, r2, #1
 800e23a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	681b      	ldr	r3, [r3, #0]
 800e240:	4a2b      	ldr	r2, [pc, #172]	@ (800e2f0 <HAL_TIM_Base_Start_IT+0xe4>)
 800e242:	4293      	cmp	r3, r2
 800e244:	d02c      	beq.n	800e2a0 <HAL_TIM_Base_Start_IT+0x94>
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	681b      	ldr	r3, [r3, #0]
 800e24a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e24e:	d027      	beq.n	800e2a0 <HAL_TIM_Base_Start_IT+0x94>
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	681b      	ldr	r3, [r3, #0]
 800e254:	4a27      	ldr	r2, [pc, #156]	@ (800e2f4 <HAL_TIM_Base_Start_IT+0xe8>)
 800e256:	4293      	cmp	r3, r2
 800e258:	d022      	beq.n	800e2a0 <HAL_TIM_Base_Start_IT+0x94>
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	681b      	ldr	r3, [r3, #0]
 800e25e:	4a26      	ldr	r2, [pc, #152]	@ (800e2f8 <HAL_TIM_Base_Start_IT+0xec>)
 800e260:	4293      	cmp	r3, r2
 800e262:	d01d      	beq.n	800e2a0 <HAL_TIM_Base_Start_IT+0x94>
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	681b      	ldr	r3, [r3, #0]
 800e268:	4a24      	ldr	r2, [pc, #144]	@ (800e2fc <HAL_TIM_Base_Start_IT+0xf0>)
 800e26a:	4293      	cmp	r3, r2
 800e26c:	d018      	beq.n	800e2a0 <HAL_TIM_Base_Start_IT+0x94>
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	681b      	ldr	r3, [r3, #0]
 800e272:	4a23      	ldr	r2, [pc, #140]	@ (800e300 <HAL_TIM_Base_Start_IT+0xf4>)
 800e274:	4293      	cmp	r3, r2
 800e276:	d013      	beq.n	800e2a0 <HAL_TIM_Base_Start_IT+0x94>
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	681b      	ldr	r3, [r3, #0]
 800e27c:	4a21      	ldr	r2, [pc, #132]	@ (800e304 <HAL_TIM_Base_Start_IT+0xf8>)
 800e27e:	4293      	cmp	r3, r2
 800e280:	d00e      	beq.n	800e2a0 <HAL_TIM_Base_Start_IT+0x94>
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	681b      	ldr	r3, [r3, #0]
 800e286:	4a20      	ldr	r2, [pc, #128]	@ (800e308 <HAL_TIM_Base_Start_IT+0xfc>)
 800e288:	4293      	cmp	r3, r2
 800e28a:	d009      	beq.n	800e2a0 <HAL_TIM_Base_Start_IT+0x94>
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	681b      	ldr	r3, [r3, #0]
 800e290:	4a1e      	ldr	r2, [pc, #120]	@ (800e30c <HAL_TIM_Base_Start_IT+0x100>)
 800e292:	4293      	cmp	r3, r2
 800e294:	d004      	beq.n	800e2a0 <HAL_TIM_Base_Start_IT+0x94>
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	681b      	ldr	r3, [r3, #0]
 800e29a:	4a1d      	ldr	r2, [pc, #116]	@ (800e310 <HAL_TIM_Base_Start_IT+0x104>)
 800e29c:	4293      	cmp	r3, r2
 800e29e:	d115      	bne.n	800e2cc <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	681b      	ldr	r3, [r3, #0]
 800e2a4:	689a      	ldr	r2, [r3, #8]
 800e2a6:	4b1b      	ldr	r3, [pc, #108]	@ (800e314 <HAL_TIM_Base_Start_IT+0x108>)
 800e2a8:	4013      	ands	r3, r2
 800e2aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e2ac:	68fb      	ldr	r3, [r7, #12]
 800e2ae:	2b06      	cmp	r3, #6
 800e2b0:	d015      	beq.n	800e2de <HAL_TIM_Base_Start_IT+0xd2>
 800e2b2:	68fb      	ldr	r3, [r7, #12]
 800e2b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e2b8:	d011      	beq.n	800e2de <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	681b      	ldr	r3, [r3, #0]
 800e2be:	681a      	ldr	r2, [r3, #0]
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	681b      	ldr	r3, [r3, #0]
 800e2c4:	f042 0201 	orr.w	r2, r2, #1
 800e2c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e2ca:	e008      	b.n	800e2de <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	681b      	ldr	r3, [r3, #0]
 800e2d0:	681a      	ldr	r2, [r3, #0]
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	681b      	ldr	r3, [r3, #0]
 800e2d6:	f042 0201 	orr.w	r2, r2, #1
 800e2da:	601a      	str	r2, [r3, #0]
 800e2dc:	e000      	b.n	800e2e0 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e2de:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800e2e0:	2300      	movs	r3, #0
}
 800e2e2:	4618      	mov	r0, r3
 800e2e4:	3714      	adds	r7, #20
 800e2e6:	46bd      	mov	sp, r7
 800e2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2ec:	4770      	bx	lr
 800e2ee:	bf00      	nop
 800e2f0:	40010000 	.word	0x40010000
 800e2f4:	40000400 	.word	0x40000400
 800e2f8:	40000800 	.word	0x40000800
 800e2fc:	40000c00 	.word	0x40000c00
 800e300:	40010400 	.word	0x40010400
 800e304:	40001800 	.word	0x40001800
 800e308:	40014000 	.word	0x40014000
 800e30c:	4000e000 	.word	0x4000e000
 800e310:	4000e400 	.word	0x4000e400
 800e314:	00010007 	.word	0x00010007

0800e318 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800e318:	b580      	push	{r7, lr}
 800e31a:	b082      	sub	sp, #8
 800e31c:	af00      	add	r7, sp, #0
 800e31e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	2b00      	cmp	r3, #0
 800e324:	d101      	bne.n	800e32a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800e326:	2301      	movs	r3, #1
 800e328:	e049      	b.n	800e3be <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e330:	b2db      	uxtb	r3, r3
 800e332:	2b00      	cmp	r3, #0
 800e334:	d106      	bne.n	800e344 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	2200      	movs	r2, #0
 800e33a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800e33e:	6878      	ldr	r0, [r7, #4]
 800e340:	f000 f841 	bl	800e3c6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	2202      	movs	r2, #2
 800e348:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	681a      	ldr	r2, [r3, #0]
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	3304      	adds	r3, #4
 800e354:	4619      	mov	r1, r3
 800e356:	4610      	mov	r0, r2
 800e358:	f000 fd2e 	bl	800edb8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	2201      	movs	r2, #1
 800e360:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	2201      	movs	r2, #1
 800e368:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	2201      	movs	r2, #1
 800e370:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	2201      	movs	r2, #1
 800e378:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	2201      	movs	r2, #1
 800e380:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	2201      	movs	r2, #1
 800e388:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	2201      	movs	r2, #1
 800e390:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	2201      	movs	r2, #1
 800e398:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	2201      	movs	r2, #1
 800e3a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	2201      	movs	r2, #1
 800e3a8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	2201      	movs	r2, #1
 800e3b0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	2201      	movs	r2, #1
 800e3b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800e3bc:	2300      	movs	r3, #0
}
 800e3be:	4618      	mov	r0, r3
 800e3c0:	3708      	adds	r7, #8
 800e3c2:	46bd      	mov	sp, r7
 800e3c4:	bd80      	pop	{r7, pc}

0800e3c6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800e3c6:	b480      	push	{r7}
 800e3c8:	b083      	sub	sp, #12
 800e3ca:	af00      	add	r7, sp, #0
 800e3cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800e3ce:	bf00      	nop
 800e3d0:	370c      	adds	r7, #12
 800e3d2:	46bd      	mov	sp, r7
 800e3d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3d8:	4770      	bx	lr
	...

0800e3dc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e3dc:	b580      	push	{r7, lr}
 800e3de:	b084      	sub	sp, #16
 800e3e0:	af00      	add	r7, sp, #0
 800e3e2:	6078      	str	r0, [r7, #4]
 800e3e4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800e3e6:	683b      	ldr	r3, [r7, #0]
 800e3e8:	2b00      	cmp	r3, #0
 800e3ea:	d109      	bne.n	800e400 <HAL_TIM_PWM_Start+0x24>
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800e3f2:	b2db      	uxtb	r3, r3
 800e3f4:	2b01      	cmp	r3, #1
 800e3f6:	bf14      	ite	ne
 800e3f8:	2301      	movne	r3, #1
 800e3fa:	2300      	moveq	r3, #0
 800e3fc:	b2db      	uxtb	r3, r3
 800e3fe:	e03c      	b.n	800e47a <HAL_TIM_PWM_Start+0x9e>
 800e400:	683b      	ldr	r3, [r7, #0]
 800e402:	2b04      	cmp	r3, #4
 800e404:	d109      	bne.n	800e41a <HAL_TIM_PWM_Start+0x3e>
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800e40c:	b2db      	uxtb	r3, r3
 800e40e:	2b01      	cmp	r3, #1
 800e410:	bf14      	ite	ne
 800e412:	2301      	movne	r3, #1
 800e414:	2300      	moveq	r3, #0
 800e416:	b2db      	uxtb	r3, r3
 800e418:	e02f      	b.n	800e47a <HAL_TIM_PWM_Start+0x9e>
 800e41a:	683b      	ldr	r3, [r7, #0]
 800e41c:	2b08      	cmp	r3, #8
 800e41e:	d109      	bne.n	800e434 <HAL_TIM_PWM_Start+0x58>
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800e426:	b2db      	uxtb	r3, r3
 800e428:	2b01      	cmp	r3, #1
 800e42a:	bf14      	ite	ne
 800e42c:	2301      	movne	r3, #1
 800e42e:	2300      	moveq	r3, #0
 800e430:	b2db      	uxtb	r3, r3
 800e432:	e022      	b.n	800e47a <HAL_TIM_PWM_Start+0x9e>
 800e434:	683b      	ldr	r3, [r7, #0]
 800e436:	2b0c      	cmp	r3, #12
 800e438:	d109      	bne.n	800e44e <HAL_TIM_PWM_Start+0x72>
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800e440:	b2db      	uxtb	r3, r3
 800e442:	2b01      	cmp	r3, #1
 800e444:	bf14      	ite	ne
 800e446:	2301      	movne	r3, #1
 800e448:	2300      	moveq	r3, #0
 800e44a:	b2db      	uxtb	r3, r3
 800e44c:	e015      	b.n	800e47a <HAL_TIM_PWM_Start+0x9e>
 800e44e:	683b      	ldr	r3, [r7, #0]
 800e450:	2b10      	cmp	r3, #16
 800e452:	d109      	bne.n	800e468 <HAL_TIM_PWM_Start+0x8c>
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800e45a:	b2db      	uxtb	r3, r3
 800e45c:	2b01      	cmp	r3, #1
 800e45e:	bf14      	ite	ne
 800e460:	2301      	movne	r3, #1
 800e462:	2300      	moveq	r3, #0
 800e464:	b2db      	uxtb	r3, r3
 800e466:	e008      	b.n	800e47a <HAL_TIM_PWM_Start+0x9e>
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800e46e:	b2db      	uxtb	r3, r3
 800e470:	2b01      	cmp	r3, #1
 800e472:	bf14      	ite	ne
 800e474:	2301      	movne	r3, #1
 800e476:	2300      	moveq	r3, #0
 800e478:	b2db      	uxtb	r3, r3
 800e47a:	2b00      	cmp	r3, #0
 800e47c:	d001      	beq.n	800e482 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800e47e:	2301      	movs	r3, #1
 800e480:	e0ab      	b.n	800e5da <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800e482:	683b      	ldr	r3, [r7, #0]
 800e484:	2b00      	cmp	r3, #0
 800e486:	d104      	bne.n	800e492 <HAL_TIM_PWM_Start+0xb6>
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	2202      	movs	r2, #2
 800e48c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800e490:	e023      	b.n	800e4da <HAL_TIM_PWM_Start+0xfe>
 800e492:	683b      	ldr	r3, [r7, #0]
 800e494:	2b04      	cmp	r3, #4
 800e496:	d104      	bne.n	800e4a2 <HAL_TIM_PWM_Start+0xc6>
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	2202      	movs	r2, #2
 800e49c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800e4a0:	e01b      	b.n	800e4da <HAL_TIM_PWM_Start+0xfe>
 800e4a2:	683b      	ldr	r3, [r7, #0]
 800e4a4:	2b08      	cmp	r3, #8
 800e4a6:	d104      	bne.n	800e4b2 <HAL_TIM_PWM_Start+0xd6>
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	2202      	movs	r2, #2
 800e4ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800e4b0:	e013      	b.n	800e4da <HAL_TIM_PWM_Start+0xfe>
 800e4b2:	683b      	ldr	r3, [r7, #0]
 800e4b4:	2b0c      	cmp	r3, #12
 800e4b6:	d104      	bne.n	800e4c2 <HAL_TIM_PWM_Start+0xe6>
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	2202      	movs	r2, #2
 800e4bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800e4c0:	e00b      	b.n	800e4da <HAL_TIM_PWM_Start+0xfe>
 800e4c2:	683b      	ldr	r3, [r7, #0]
 800e4c4:	2b10      	cmp	r3, #16
 800e4c6:	d104      	bne.n	800e4d2 <HAL_TIM_PWM_Start+0xf6>
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	2202      	movs	r2, #2
 800e4cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800e4d0:	e003      	b.n	800e4da <HAL_TIM_PWM_Start+0xfe>
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	2202      	movs	r2, #2
 800e4d6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	681b      	ldr	r3, [r3, #0]
 800e4de:	2201      	movs	r2, #1
 800e4e0:	6839      	ldr	r1, [r7, #0]
 800e4e2:	4618      	mov	r0, r3
 800e4e4:	f001 f88e 	bl	800f604 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	681b      	ldr	r3, [r3, #0]
 800e4ec:	4a3d      	ldr	r2, [pc, #244]	@ (800e5e4 <HAL_TIM_PWM_Start+0x208>)
 800e4ee:	4293      	cmp	r3, r2
 800e4f0:	d013      	beq.n	800e51a <HAL_TIM_PWM_Start+0x13e>
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	681b      	ldr	r3, [r3, #0]
 800e4f6:	4a3c      	ldr	r2, [pc, #240]	@ (800e5e8 <HAL_TIM_PWM_Start+0x20c>)
 800e4f8:	4293      	cmp	r3, r2
 800e4fa:	d00e      	beq.n	800e51a <HAL_TIM_PWM_Start+0x13e>
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	681b      	ldr	r3, [r3, #0]
 800e500:	4a3a      	ldr	r2, [pc, #232]	@ (800e5ec <HAL_TIM_PWM_Start+0x210>)
 800e502:	4293      	cmp	r3, r2
 800e504:	d009      	beq.n	800e51a <HAL_TIM_PWM_Start+0x13e>
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	681b      	ldr	r3, [r3, #0]
 800e50a:	4a39      	ldr	r2, [pc, #228]	@ (800e5f0 <HAL_TIM_PWM_Start+0x214>)
 800e50c:	4293      	cmp	r3, r2
 800e50e:	d004      	beq.n	800e51a <HAL_TIM_PWM_Start+0x13e>
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	681b      	ldr	r3, [r3, #0]
 800e514:	4a37      	ldr	r2, [pc, #220]	@ (800e5f4 <HAL_TIM_PWM_Start+0x218>)
 800e516:	4293      	cmp	r3, r2
 800e518:	d101      	bne.n	800e51e <HAL_TIM_PWM_Start+0x142>
 800e51a:	2301      	movs	r3, #1
 800e51c:	e000      	b.n	800e520 <HAL_TIM_PWM_Start+0x144>
 800e51e:	2300      	movs	r3, #0
 800e520:	2b00      	cmp	r3, #0
 800e522:	d007      	beq.n	800e534 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	681b      	ldr	r3, [r3, #0]
 800e528:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	681b      	ldr	r3, [r3, #0]
 800e52e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800e532:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	681b      	ldr	r3, [r3, #0]
 800e538:	4a2a      	ldr	r2, [pc, #168]	@ (800e5e4 <HAL_TIM_PWM_Start+0x208>)
 800e53a:	4293      	cmp	r3, r2
 800e53c:	d02c      	beq.n	800e598 <HAL_TIM_PWM_Start+0x1bc>
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	681b      	ldr	r3, [r3, #0]
 800e542:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e546:	d027      	beq.n	800e598 <HAL_TIM_PWM_Start+0x1bc>
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	681b      	ldr	r3, [r3, #0]
 800e54c:	4a2a      	ldr	r2, [pc, #168]	@ (800e5f8 <HAL_TIM_PWM_Start+0x21c>)
 800e54e:	4293      	cmp	r3, r2
 800e550:	d022      	beq.n	800e598 <HAL_TIM_PWM_Start+0x1bc>
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	681b      	ldr	r3, [r3, #0]
 800e556:	4a29      	ldr	r2, [pc, #164]	@ (800e5fc <HAL_TIM_PWM_Start+0x220>)
 800e558:	4293      	cmp	r3, r2
 800e55a:	d01d      	beq.n	800e598 <HAL_TIM_PWM_Start+0x1bc>
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	681b      	ldr	r3, [r3, #0]
 800e560:	4a27      	ldr	r2, [pc, #156]	@ (800e600 <HAL_TIM_PWM_Start+0x224>)
 800e562:	4293      	cmp	r3, r2
 800e564:	d018      	beq.n	800e598 <HAL_TIM_PWM_Start+0x1bc>
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	681b      	ldr	r3, [r3, #0]
 800e56a:	4a1f      	ldr	r2, [pc, #124]	@ (800e5e8 <HAL_TIM_PWM_Start+0x20c>)
 800e56c:	4293      	cmp	r3, r2
 800e56e:	d013      	beq.n	800e598 <HAL_TIM_PWM_Start+0x1bc>
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	681b      	ldr	r3, [r3, #0]
 800e574:	4a23      	ldr	r2, [pc, #140]	@ (800e604 <HAL_TIM_PWM_Start+0x228>)
 800e576:	4293      	cmp	r3, r2
 800e578:	d00e      	beq.n	800e598 <HAL_TIM_PWM_Start+0x1bc>
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	681b      	ldr	r3, [r3, #0]
 800e57e:	4a1b      	ldr	r2, [pc, #108]	@ (800e5ec <HAL_TIM_PWM_Start+0x210>)
 800e580:	4293      	cmp	r3, r2
 800e582:	d009      	beq.n	800e598 <HAL_TIM_PWM_Start+0x1bc>
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	681b      	ldr	r3, [r3, #0]
 800e588:	4a1f      	ldr	r2, [pc, #124]	@ (800e608 <HAL_TIM_PWM_Start+0x22c>)
 800e58a:	4293      	cmp	r3, r2
 800e58c:	d004      	beq.n	800e598 <HAL_TIM_PWM_Start+0x1bc>
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	681b      	ldr	r3, [r3, #0]
 800e592:	4a1e      	ldr	r2, [pc, #120]	@ (800e60c <HAL_TIM_PWM_Start+0x230>)
 800e594:	4293      	cmp	r3, r2
 800e596:	d115      	bne.n	800e5c4 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	681b      	ldr	r3, [r3, #0]
 800e59c:	689a      	ldr	r2, [r3, #8]
 800e59e:	4b1c      	ldr	r3, [pc, #112]	@ (800e610 <HAL_TIM_PWM_Start+0x234>)
 800e5a0:	4013      	ands	r3, r2
 800e5a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e5a4:	68fb      	ldr	r3, [r7, #12]
 800e5a6:	2b06      	cmp	r3, #6
 800e5a8:	d015      	beq.n	800e5d6 <HAL_TIM_PWM_Start+0x1fa>
 800e5aa:	68fb      	ldr	r3, [r7, #12]
 800e5ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e5b0:	d011      	beq.n	800e5d6 <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	681b      	ldr	r3, [r3, #0]
 800e5b6:	681a      	ldr	r2, [r3, #0]
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	681b      	ldr	r3, [r3, #0]
 800e5bc:	f042 0201 	orr.w	r2, r2, #1
 800e5c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e5c2:	e008      	b.n	800e5d6 <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	681b      	ldr	r3, [r3, #0]
 800e5c8:	681a      	ldr	r2, [r3, #0]
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	681b      	ldr	r3, [r3, #0]
 800e5ce:	f042 0201 	orr.w	r2, r2, #1
 800e5d2:	601a      	str	r2, [r3, #0]
 800e5d4:	e000      	b.n	800e5d8 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e5d6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800e5d8:	2300      	movs	r3, #0
}
 800e5da:	4618      	mov	r0, r3
 800e5dc:	3710      	adds	r7, #16
 800e5de:	46bd      	mov	sp, r7
 800e5e0:	bd80      	pop	{r7, pc}
 800e5e2:	bf00      	nop
 800e5e4:	40010000 	.word	0x40010000
 800e5e8:	40010400 	.word	0x40010400
 800e5ec:	40014000 	.word	0x40014000
 800e5f0:	40014400 	.word	0x40014400
 800e5f4:	40014800 	.word	0x40014800
 800e5f8:	40000400 	.word	0x40000400
 800e5fc:	40000800 	.word	0x40000800
 800e600:	40000c00 	.word	0x40000c00
 800e604:	40001800 	.word	0x40001800
 800e608:	4000e000 	.word	0x4000e000
 800e60c:	4000e400 	.word	0x4000e400
 800e610:	00010007 	.word	0x00010007

0800e614 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e614:	b580      	push	{r7, lr}
 800e616:	b082      	sub	sp, #8
 800e618:	af00      	add	r7, sp, #0
 800e61a:	6078      	str	r0, [r7, #4]
 800e61c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	681b      	ldr	r3, [r3, #0]
 800e622:	2200      	movs	r2, #0
 800e624:	6839      	ldr	r1, [r7, #0]
 800e626:	4618      	mov	r0, r3
 800e628:	f000 ffec 	bl	800f604 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	681b      	ldr	r3, [r3, #0]
 800e630:	4a3e      	ldr	r2, [pc, #248]	@ (800e72c <HAL_TIM_PWM_Stop+0x118>)
 800e632:	4293      	cmp	r3, r2
 800e634:	d013      	beq.n	800e65e <HAL_TIM_PWM_Stop+0x4a>
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	681b      	ldr	r3, [r3, #0]
 800e63a:	4a3d      	ldr	r2, [pc, #244]	@ (800e730 <HAL_TIM_PWM_Stop+0x11c>)
 800e63c:	4293      	cmp	r3, r2
 800e63e:	d00e      	beq.n	800e65e <HAL_TIM_PWM_Stop+0x4a>
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	681b      	ldr	r3, [r3, #0]
 800e644:	4a3b      	ldr	r2, [pc, #236]	@ (800e734 <HAL_TIM_PWM_Stop+0x120>)
 800e646:	4293      	cmp	r3, r2
 800e648:	d009      	beq.n	800e65e <HAL_TIM_PWM_Stop+0x4a>
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	681b      	ldr	r3, [r3, #0]
 800e64e:	4a3a      	ldr	r2, [pc, #232]	@ (800e738 <HAL_TIM_PWM_Stop+0x124>)
 800e650:	4293      	cmp	r3, r2
 800e652:	d004      	beq.n	800e65e <HAL_TIM_PWM_Stop+0x4a>
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	681b      	ldr	r3, [r3, #0]
 800e658:	4a38      	ldr	r2, [pc, #224]	@ (800e73c <HAL_TIM_PWM_Stop+0x128>)
 800e65a:	4293      	cmp	r3, r2
 800e65c:	d101      	bne.n	800e662 <HAL_TIM_PWM_Stop+0x4e>
 800e65e:	2301      	movs	r3, #1
 800e660:	e000      	b.n	800e664 <HAL_TIM_PWM_Stop+0x50>
 800e662:	2300      	movs	r3, #0
 800e664:	2b00      	cmp	r3, #0
 800e666:	d017      	beq.n	800e698 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	681b      	ldr	r3, [r3, #0]
 800e66c:	6a1a      	ldr	r2, [r3, #32]
 800e66e:	f241 1311 	movw	r3, #4369	@ 0x1111
 800e672:	4013      	ands	r3, r2
 800e674:	2b00      	cmp	r3, #0
 800e676:	d10f      	bne.n	800e698 <HAL_TIM_PWM_Stop+0x84>
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	681b      	ldr	r3, [r3, #0]
 800e67c:	6a1a      	ldr	r2, [r3, #32]
 800e67e:	f240 4344 	movw	r3, #1092	@ 0x444
 800e682:	4013      	ands	r3, r2
 800e684:	2b00      	cmp	r3, #0
 800e686:	d107      	bne.n	800e698 <HAL_TIM_PWM_Stop+0x84>
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	681b      	ldr	r3, [r3, #0]
 800e68c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	681b      	ldr	r3, [r3, #0]
 800e692:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800e696:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	681b      	ldr	r3, [r3, #0]
 800e69c:	6a1a      	ldr	r2, [r3, #32]
 800e69e:	f241 1311 	movw	r3, #4369	@ 0x1111
 800e6a2:	4013      	ands	r3, r2
 800e6a4:	2b00      	cmp	r3, #0
 800e6a6:	d10f      	bne.n	800e6c8 <HAL_TIM_PWM_Stop+0xb4>
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	681b      	ldr	r3, [r3, #0]
 800e6ac:	6a1a      	ldr	r2, [r3, #32]
 800e6ae:	f240 4344 	movw	r3, #1092	@ 0x444
 800e6b2:	4013      	ands	r3, r2
 800e6b4:	2b00      	cmp	r3, #0
 800e6b6:	d107      	bne.n	800e6c8 <HAL_TIM_PWM_Stop+0xb4>
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	681b      	ldr	r3, [r3, #0]
 800e6bc:	681a      	ldr	r2, [r3, #0]
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	681b      	ldr	r3, [r3, #0]
 800e6c2:	f022 0201 	bic.w	r2, r2, #1
 800e6c6:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800e6c8:	683b      	ldr	r3, [r7, #0]
 800e6ca:	2b00      	cmp	r3, #0
 800e6cc:	d104      	bne.n	800e6d8 <HAL_TIM_PWM_Stop+0xc4>
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	2201      	movs	r2, #1
 800e6d2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800e6d6:	e023      	b.n	800e720 <HAL_TIM_PWM_Stop+0x10c>
 800e6d8:	683b      	ldr	r3, [r7, #0]
 800e6da:	2b04      	cmp	r3, #4
 800e6dc:	d104      	bne.n	800e6e8 <HAL_TIM_PWM_Stop+0xd4>
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	2201      	movs	r2, #1
 800e6e2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800e6e6:	e01b      	b.n	800e720 <HAL_TIM_PWM_Stop+0x10c>
 800e6e8:	683b      	ldr	r3, [r7, #0]
 800e6ea:	2b08      	cmp	r3, #8
 800e6ec:	d104      	bne.n	800e6f8 <HAL_TIM_PWM_Stop+0xe4>
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	2201      	movs	r2, #1
 800e6f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800e6f6:	e013      	b.n	800e720 <HAL_TIM_PWM_Stop+0x10c>
 800e6f8:	683b      	ldr	r3, [r7, #0]
 800e6fa:	2b0c      	cmp	r3, #12
 800e6fc:	d104      	bne.n	800e708 <HAL_TIM_PWM_Stop+0xf4>
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	2201      	movs	r2, #1
 800e702:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800e706:	e00b      	b.n	800e720 <HAL_TIM_PWM_Stop+0x10c>
 800e708:	683b      	ldr	r3, [r7, #0]
 800e70a:	2b10      	cmp	r3, #16
 800e70c:	d104      	bne.n	800e718 <HAL_TIM_PWM_Stop+0x104>
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	2201      	movs	r2, #1
 800e712:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800e716:	e003      	b.n	800e720 <HAL_TIM_PWM_Stop+0x10c>
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	2201      	movs	r2, #1
 800e71c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 800e720:	2300      	movs	r3, #0
}
 800e722:	4618      	mov	r0, r3
 800e724:	3708      	adds	r7, #8
 800e726:	46bd      	mov	sp, r7
 800e728:	bd80      	pop	{r7, pc}
 800e72a:	bf00      	nop
 800e72c:	40010000 	.word	0x40010000
 800e730:	40010400 	.word	0x40010400
 800e734:	40014000 	.word	0x40014000
 800e738:	40014400 	.word	0x40014400
 800e73c:	40014800 	.word	0x40014800

0800e740 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800e740:	b580      	push	{r7, lr}
 800e742:	b084      	sub	sp, #16
 800e744:	af00      	add	r7, sp, #0
 800e746:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	681b      	ldr	r3, [r3, #0]
 800e74c:	68db      	ldr	r3, [r3, #12]
 800e74e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800e750:	687b      	ldr	r3, [r7, #4]
 800e752:	681b      	ldr	r3, [r3, #0]
 800e754:	691b      	ldr	r3, [r3, #16]
 800e756:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800e758:	68bb      	ldr	r3, [r7, #8]
 800e75a:	f003 0302 	and.w	r3, r3, #2
 800e75e:	2b00      	cmp	r3, #0
 800e760:	d020      	beq.n	800e7a4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800e762:	68fb      	ldr	r3, [r7, #12]
 800e764:	f003 0302 	and.w	r3, r3, #2
 800e768:	2b00      	cmp	r3, #0
 800e76a:	d01b      	beq.n	800e7a4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	681b      	ldr	r3, [r3, #0]
 800e770:	f06f 0202 	mvn.w	r2, #2
 800e774:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	2201      	movs	r2, #1
 800e77a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	681b      	ldr	r3, [r3, #0]
 800e780:	699b      	ldr	r3, [r3, #24]
 800e782:	f003 0303 	and.w	r3, r3, #3
 800e786:	2b00      	cmp	r3, #0
 800e788:	d003      	beq.n	800e792 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800e78a:	6878      	ldr	r0, [r7, #4]
 800e78c:	f000 faf6 	bl	800ed7c <HAL_TIM_IC_CaptureCallback>
 800e790:	e005      	b.n	800e79e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800e792:	6878      	ldr	r0, [r7, #4]
 800e794:	f000 fae8 	bl	800ed68 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e798:	6878      	ldr	r0, [r7, #4]
 800e79a:	f000 faf9 	bl	800ed90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	2200      	movs	r2, #0
 800e7a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800e7a4:	68bb      	ldr	r3, [r7, #8]
 800e7a6:	f003 0304 	and.w	r3, r3, #4
 800e7aa:	2b00      	cmp	r3, #0
 800e7ac:	d020      	beq.n	800e7f0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800e7ae:	68fb      	ldr	r3, [r7, #12]
 800e7b0:	f003 0304 	and.w	r3, r3, #4
 800e7b4:	2b00      	cmp	r3, #0
 800e7b6:	d01b      	beq.n	800e7f0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	681b      	ldr	r3, [r3, #0]
 800e7bc:	f06f 0204 	mvn.w	r2, #4
 800e7c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	2202      	movs	r2, #2
 800e7c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	681b      	ldr	r3, [r3, #0]
 800e7cc:	699b      	ldr	r3, [r3, #24]
 800e7ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800e7d2:	2b00      	cmp	r3, #0
 800e7d4:	d003      	beq.n	800e7de <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e7d6:	6878      	ldr	r0, [r7, #4]
 800e7d8:	f000 fad0 	bl	800ed7c <HAL_TIM_IC_CaptureCallback>
 800e7dc:	e005      	b.n	800e7ea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e7de:	6878      	ldr	r0, [r7, #4]
 800e7e0:	f000 fac2 	bl	800ed68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e7e4:	6878      	ldr	r0, [r7, #4]
 800e7e6:	f000 fad3 	bl	800ed90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	2200      	movs	r2, #0
 800e7ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800e7f0:	68bb      	ldr	r3, [r7, #8]
 800e7f2:	f003 0308 	and.w	r3, r3, #8
 800e7f6:	2b00      	cmp	r3, #0
 800e7f8:	d020      	beq.n	800e83c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800e7fa:	68fb      	ldr	r3, [r7, #12]
 800e7fc:	f003 0308 	and.w	r3, r3, #8
 800e800:	2b00      	cmp	r3, #0
 800e802:	d01b      	beq.n	800e83c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	681b      	ldr	r3, [r3, #0]
 800e808:	f06f 0208 	mvn.w	r2, #8
 800e80c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	2204      	movs	r2, #4
 800e812:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	681b      	ldr	r3, [r3, #0]
 800e818:	69db      	ldr	r3, [r3, #28]
 800e81a:	f003 0303 	and.w	r3, r3, #3
 800e81e:	2b00      	cmp	r3, #0
 800e820:	d003      	beq.n	800e82a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e822:	6878      	ldr	r0, [r7, #4]
 800e824:	f000 faaa 	bl	800ed7c <HAL_TIM_IC_CaptureCallback>
 800e828:	e005      	b.n	800e836 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e82a:	6878      	ldr	r0, [r7, #4]
 800e82c:	f000 fa9c 	bl	800ed68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e830:	6878      	ldr	r0, [r7, #4]
 800e832:	f000 faad 	bl	800ed90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	2200      	movs	r2, #0
 800e83a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800e83c:	68bb      	ldr	r3, [r7, #8]
 800e83e:	f003 0310 	and.w	r3, r3, #16
 800e842:	2b00      	cmp	r3, #0
 800e844:	d020      	beq.n	800e888 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800e846:	68fb      	ldr	r3, [r7, #12]
 800e848:	f003 0310 	and.w	r3, r3, #16
 800e84c:	2b00      	cmp	r3, #0
 800e84e:	d01b      	beq.n	800e888 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	681b      	ldr	r3, [r3, #0]
 800e854:	f06f 0210 	mvn.w	r2, #16
 800e858:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	2208      	movs	r2, #8
 800e85e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	681b      	ldr	r3, [r3, #0]
 800e864:	69db      	ldr	r3, [r3, #28]
 800e866:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800e86a:	2b00      	cmp	r3, #0
 800e86c:	d003      	beq.n	800e876 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e86e:	6878      	ldr	r0, [r7, #4]
 800e870:	f000 fa84 	bl	800ed7c <HAL_TIM_IC_CaptureCallback>
 800e874:	e005      	b.n	800e882 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e876:	6878      	ldr	r0, [r7, #4]
 800e878:	f000 fa76 	bl	800ed68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e87c:	6878      	ldr	r0, [r7, #4]
 800e87e:	f000 fa87 	bl	800ed90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	2200      	movs	r2, #0
 800e886:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800e888:	68bb      	ldr	r3, [r7, #8]
 800e88a:	f003 0301 	and.w	r3, r3, #1
 800e88e:	2b00      	cmp	r3, #0
 800e890:	d00c      	beq.n	800e8ac <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800e892:	68fb      	ldr	r3, [r7, #12]
 800e894:	f003 0301 	and.w	r3, r3, #1
 800e898:	2b00      	cmp	r3, #0
 800e89a:	d007      	beq.n	800e8ac <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	681b      	ldr	r3, [r3, #0]
 800e8a0:	f06f 0201 	mvn.w	r2, #1
 800e8a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800e8a6:	6878      	ldr	r0, [r7, #4]
 800e8a8:	f7f2 f906 	bl	8000ab8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800e8ac:	68bb      	ldr	r3, [r7, #8]
 800e8ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e8b2:	2b00      	cmp	r3, #0
 800e8b4:	d104      	bne.n	800e8c0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800e8b6:	68bb      	ldr	r3, [r7, #8]
 800e8b8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800e8bc:	2b00      	cmp	r3, #0
 800e8be:	d00c      	beq.n	800e8da <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800e8c0:	68fb      	ldr	r3, [r7, #12]
 800e8c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e8c6:	2b00      	cmp	r3, #0
 800e8c8:	d007      	beq.n	800e8da <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	681b      	ldr	r3, [r3, #0]
 800e8ce:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800e8d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800e8d4:	6878      	ldr	r0, [r7, #4]
 800e8d6:	f000 ff61 	bl	800f79c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800e8da:	68bb      	ldr	r3, [r7, #8]
 800e8dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e8e0:	2b00      	cmp	r3, #0
 800e8e2:	d00c      	beq.n	800e8fe <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800e8e4:	68fb      	ldr	r3, [r7, #12]
 800e8e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e8ea:	2b00      	cmp	r3, #0
 800e8ec:	d007      	beq.n	800e8fe <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	681b      	ldr	r3, [r3, #0]
 800e8f2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800e8f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800e8f8:	6878      	ldr	r0, [r7, #4]
 800e8fa:	f000 ff59 	bl	800f7b0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800e8fe:	68bb      	ldr	r3, [r7, #8]
 800e900:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e904:	2b00      	cmp	r3, #0
 800e906:	d00c      	beq.n	800e922 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800e908:	68fb      	ldr	r3, [r7, #12]
 800e90a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e90e:	2b00      	cmp	r3, #0
 800e910:	d007      	beq.n	800e922 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	681b      	ldr	r3, [r3, #0]
 800e916:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800e91a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800e91c:	6878      	ldr	r0, [r7, #4]
 800e91e:	f000 fa41 	bl	800eda4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800e922:	68bb      	ldr	r3, [r7, #8]
 800e924:	f003 0320 	and.w	r3, r3, #32
 800e928:	2b00      	cmp	r3, #0
 800e92a:	d00c      	beq.n	800e946 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800e92c:	68fb      	ldr	r3, [r7, #12]
 800e92e:	f003 0320 	and.w	r3, r3, #32
 800e932:	2b00      	cmp	r3, #0
 800e934:	d007      	beq.n	800e946 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	681b      	ldr	r3, [r3, #0]
 800e93a:	f06f 0220 	mvn.w	r2, #32
 800e93e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800e940:	6878      	ldr	r0, [r7, #4]
 800e942:	f000 ff21 	bl	800f788 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800e946:	bf00      	nop
 800e948:	3710      	adds	r7, #16
 800e94a:	46bd      	mov	sp, r7
 800e94c:	bd80      	pop	{r7, pc}
	...

0800e950 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800e950:	b580      	push	{r7, lr}
 800e952:	b086      	sub	sp, #24
 800e954:	af00      	add	r7, sp, #0
 800e956:	60f8      	str	r0, [r7, #12]
 800e958:	60b9      	str	r1, [r7, #8]
 800e95a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e95c:	2300      	movs	r3, #0
 800e95e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800e960:	68fb      	ldr	r3, [r7, #12]
 800e962:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e966:	2b01      	cmp	r3, #1
 800e968:	d101      	bne.n	800e96e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800e96a:	2302      	movs	r3, #2
 800e96c:	e0ff      	b.n	800eb6e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800e96e:	68fb      	ldr	r3, [r7, #12]
 800e970:	2201      	movs	r2, #1
 800e972:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	2b14      	cmp	r3, #20
 800e97a:	f200 80f0 	bhi.w	800eb5e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800e97e:	a201      	add	r2, pc, #4	@ (adr r2, 800e984 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800e980:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e984:	0800e9d9 	.word	0x0800e9d9
 800e988:	0800eb5f 	.word	0x0800eb5f
 800e98c:	0800eb5f 	.word	0x0800eb5f
 800e990:	0800eb5f 	.word	0x0800eb5f
 800e994:	0800ea19 	.word	0x0800ea19
 800e998:	0800eb5f 	.word	0x0800eb5f
 800e99c:	0800eb5f 	.word	0x0800eb5f
 800e9a0:	0800eb5f 	.word	0x0800eb5f
 800e9a4:	0800ea5b 	.word	0x0800ea5b
 800e9a8:	0800eb5f 	.word	0x0800eb5f
 800e9ac:	0800eb5f 	.word	0x0800eb5f
 800e9b0:	0800eb5f 	.word	0x0800eb5f
 800e9b4:	0800ea9b 	.word	0x0800ea9b
 800e9b8:	0800eb5f 	.word	0x0800eb5f
 800e9bc:	0800eb5f 	.word	0x0800eb5f
 800e9c0:	0800eb5f 	.word	0x0800eb5f
 800e9c4:	0800eadd 	.word	0x0800eadd
 800e9c8:	0800eb5f 	.word	0x0800eb5f
 800e9cc:	0800eb5f 	.word	0x0800eb5f
 800e9d0:	0800eb5f 	.word	0x0800eb5f
 800e9d4:	0800eb1d 	.word	0x0800eb1d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800e9d8:	68fb      	ldr	r3, [r7, #12]
 800e9da:	681b      	ldr	r3, [r3, #0]
 800e9dc:	68b9      	ldr	r1, [r7, #8]
 800e9de:	4618      	mov	r0, r3
 800e9e0:	f000 fa9c 	bl	800ef1c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800e9e4:	68fb      	ldr	r3, [r7, #12]
 800e9e6:	681b      	ldr	r3, [r3, #0]
 800e9e8:	699a      	ldr	r2, [r3, #24]
 800e9ea:	68fb      	ldr	r3, [r7, #12]
 800e9ec:	681b      	ldr	r3, [r3, #0]
 800e9ee:	f042 0208 	orr.w	r2, r2, #8
 800e9f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800e9f4:	68fb      	ldr	r3, [r7, #12]
 800e9f6:	681b      	ldr	r3, [r3, #0]
 800e9f8:	699a      	ldr	r2, [r3, #24]
 800e9fa:	68fb      	ldr	r3, [r7, #12]
 800e9fc:	681b      	ldr	r3, [r3, #0]
 800e9fe:	f022 0204 	bic.w	r2, r2, #4
 800ea02:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800ea04:	68fb      	ldr	r3, [r7, #12]
 800ea06:	681b      	ldr	r3, [r3, #0]
 800ea08:	6999      	ldr	r1, [r3, #24]
 800ea0a:	68bb      	ldr	r3, [r7, #8]
 800ea0c:	691a      	ldr	r2, [r3, #16]
 800ea0e:	68fb      	ldr	r3, [r7, #12]
 800ea10:	681b      	ldr	r3, [r3, #0]
 800ea12:	430a      	orrs	r2, r1
 800ea14:	619a      	str	r2, [r3, #24]
      break;
 800ea16:	e0a5      	b.n	800eb64 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800ea18:	68fb      	ldr	r3, [r7, #12]
 800ea1a:	681b      	ldr	r3, [r3, #0]
 800ea1c:	68b9      	ldr	r1, [r7, #8]
 800ea1e:	4618      	mov	r0, r3
 800ea20:	f000 fb0c 	bl	800f03c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800ea24:	68fb      	ldr	r3, [r7, #12]
 800ea26:	681b      	ldr	r3, [r3, #0]
 800ea28:	699a      	ldr	r2, [r3, #24]
 800ea2a:	68fb      	ldr	r3, [r7, #12]
 800ea2c:	681b      	ldr	r3, [r3, #0]
 800ea2e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ea32:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800ea34:	68fb      	ldr	r3, [r7, #12]
 800ea36:	681b      	ldr	r3, [r3, #0]
 800ea38:	699a      	ldr	r2, [r3, #24]
 800ea3a:	68fb      	ldr	r3, [r7, #12]
 800ea3c:	681b      	ldr	r3, [r3, #0]
 800ea3e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ea42:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800ea44:	68fb      	ldr	r3, [r7, #12]
 800ea46:	681b      	ldr	r3, [r3, #0]
 800ea48:	6999      	ldr	r1, [r3, #24]
 800ea4a:	68bb      	ldr	r3, [r7, #8]
 800ea4c:	691b      	ldr	r3, [r3, #16]
 800ea4e:	021a      	lsls	r2, r3, #8
 800ea50:	68fb      	ldr	r3, [r7, #12]
 800ea52:	681b      	ldr	r3, [r3, #0]
 800ea54:	430a      	orrs	r2, r1
 800ea56:	619a      	str	r2, [r3, #24]
      break;
 800ea58:	e084      	b.n	800eb64 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ea5a:	68fb      	ldr	r3, [r7, #12]
 800ea5c:	681b      	ldr	r3, [r3, #0]
 800ea5e:	68b9      	ldr	r1, [r7, #8]
 800ea60:	4618      	mov	r0, r3
 800ea62:	f000 fb75 	bl	800f150 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800ea66:	68fb      	ldr	r3, [r7, #12]
 800ea68:	681b      	ldr	r3, [r3, #0]
 800ea6a:	69da      	ldr	r2, [r3, #28]
 800ea6c:	68fb      	ldr	r3, [r7, #12]
 800ea6e:	681b      	ldr	r3, [r3, #0]
 800ea70:	f042 0208 	orr.w	r2, r2, #8
 800ea74:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800ea76:	68fb      	ldr	r3, [r7, #12]
 800ea78:	681b      	ldr	r3, [r3, #0]
 800ea7a:	69da      	ldr	r2, [r3, #28]
 800ea7c:	68fb      	ldr	r3, [r7, #12]
 800ea7e:	681b      	ldr	r3, [r3, #0]
 800ea80:	f022 0204 	bic.w	r2, r2, #4
 800ea84:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800ea86:	68fb      	ldr	r3, [r7, #12]
 800ea88:	681b      	ldr	r3, [r3, #0]
 800ea8a:	69d9      	ldr	r1, [r3, #28]
 800ea8c:	68bb      	ldr	r3, [r7, #8]
 800ea8e:	691a      	ldr	r2, [r3, #16]
 800ea90:	68fb      	ldr	r3, [r7, #12]
 800ea92:	681b      	ldr	r3, [r3, #0]
 800ea94:	430a      	orrs	r2, r1
 800ea96:	61da      	str	r2, [r3, #28]
      break;
 800ea98:	e064      	b.n	800eb64 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ea9a:	68fb      	ldr	r3, [r7, #12]
 800ea9c:	681b      	ldr	r3, [r3, #0]
 800ea9e:	68b9      	ldr	r1, [r7, #8]
 800eaa0:	4618      	mov	r0, r3
 800eaa2:	f000 fbdd 	bl	800f260 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800eaa6:	68fb      	ldr	r3, [r7, #12]
 800eaa8:	681b      	ldr	r3, [r3, #0]
 800eaaa:	69da      	ldr	r2, [r3, #28]
 800eaac:	68fb      	ldr	r3, [r7, #12]
 800eaae:	681b      	ldr	r3, [r3, #0]
 800eab0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800eab4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800eab6:	68fb      	ldr	r3, [r7, #12]
 800eab8:	681b      	ldr	r3, [r3, #0]
 800eaba:	69da      	ldr	r2, [r3, #28]
 800eabc:	68fb      	ldr	r3, [r7, #12]
 800eabe:	681b      	ldr	r3, [r3, #0]
 800eac0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800eac4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800eac6:	68fb      	ldr	r3, [r7, #12]
 800eac8:	681b      	ldr	r3, [r3, #0]
 800eaca:	69d9      	ldr	r1, [r3, #28]
 800eacc:	68bb      	ldr	r3, [r7, #8]
 800eace:	691b      	ldr	r3, [r3, #16]
 800ead0:	021a      	lsls	r2, r3, #8
 800ead2:	68fb      	ldr	r3, [r7, #12]
 800ead4:	681b      	ldr	r3, [r3, #0]
 800ead6:	430a      	orrs	r2, r1
 800ead8:	61da      	str	r2, [r3, #28]
      break;
 800eada:	e043      	b.n	800eb64 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800eadc:	68fb      	ldr	r3, [r7, #12]
 800eade:	681b      	ldr	r3, [r3, #0]
 800eae0:	68b9      	ldr	r1, [r7, #8]
 800eae2:	4618      	mov	r0, r3
 800eae4:	f000 fc26 	bl	800f334 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800eae8:	68fb      	ldr	r3, [r7, #12]
 800eaea:	681b      	ldr	r3, [r3, #0]
 800eaec:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800eaee:	68fb      	ldr	r3, [r7, #12]
 800eaf0:	681b      	ldr	r3, [r3, #0]
 800eaf2:	f042 0208 	orr.w	r2, r2, #8
 800eaf6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800eaf8:	68fb      	ldr	r3, [r7, #12]
 800eafa:	681b      	ldr	r3, [r3, #0]
 800eafc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800eafe:	68fb      	ldr	r3, [r7, #12]
 800eb00:	681b      	ldr	r3, [r3, #0]
 800eb02:	f022 0204 	bic.w	r2, r2, #4
 800eb06:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800eb08:	68fb      	ldr	r3, [r7, #12]
 800eb0a:	681b      	ldr	r3, [r3, #0]
 800eb0c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800eb0e:	68bb      	ldr	r3, [r7, #8]
 800eb10:	691a      	ldr	r2, [r3, #16]
 800eb12:	68fb      	ldr	r3, [r7, #12]
 800eb14:	681b      	ldr	r3, [r3, #0]
 800eb16:	430a      	orrs	r2, r1
 800eb18:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800eb1a:	e023      	b.n	800eb64 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800eb1c:	68fb      	ldr	r3, [r7, #12]
 800eb1e:	681b      	ldr	r3, [r3, #0]
 800eb20:	68b9      	ldr	r1, [r7, #8]
 800eb22:	4618      	mov	r0, r3
 800eb24:	f000 fc6a 	bl	800f3fc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800eb28:	68fb      	ldr	r3, [r7, #12]
 800eb2a:	681b      	ldr	r3, [r3, #0]
 800eb2c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800eb2e:	68fb      	ldr	r3, [r7, #12]
 800eb30:	681b      	ldr	r3, [r3, #0]
 800eb32:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800eb36:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800eb38:	68fb      	ldr	r3, [r7, #12]
 800eb3a:	681b      	ldr	r3, [r3, #0]
 800eb3c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800eb3e:	68fb      	ldr	r3, [r7, #12]
 800eb40:	681b      	ldr	r3, [r3, #0]
 800eb42:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800eb46:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800eb48:	68fb      	ldr	r3, [r7, #12]
 800eb4a:	681b      	ldr	r3, [r3, #0]
 800eb4c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800eb4e:	68bb      	ldr	r3, [r7, #8]
 800eb50:	691b      	ldr	r3, [r3, #16]
 800eb52:	021a      	lsls	r2, r3, #8
 800eb54:	68fb      	ldr	r3, [r7, #12]
 800eb56:	681b      	ldr	r3, [r3, #0]
 800eb58:	430a      	orrs	r2, r1
 800eb5a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800eb5c:	e002      	b.n	800eb64 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800eb5e:	2301      	movs	r3, #1
 800eb60:	75fb      	strb	r3, [r7, #23]
      break;
 800eb62:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800eb64:	68fb      	ldr	r3, [r7, #12]
 800eb66:	2200      	movs	r2, #0
 800eb68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800eb6c:	7dfb      	ldrb	r3, [r7, #23]
}
 800eb6e:	4618      	mov	r0, r3
 800eb70:	3718      	adds	r7, #24
 800eb72:	46bd      	mov	sp, r7
 800eb74:	bd80      	pop	{r7, pc}
 800eb76:	bf00      	nop

0800eb78 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800eb78:	b580      	push	{r7, lr}
 800eb7a:	b084      	sub	sp, #16
 800eb7c:	af00      	add	r7, sp, #0
 800eb7e:	6078      	str	r0, [r7, #4]
 800eb80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800eb82:	2300      	movs	r3, #0
 800eb84:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800eb8c:	2b01      	cmp	r3, #1
 800eb8e:	d101      	bne.n	800eb94 <HAL_TIM_ConfigClockSource+0x1c>
 800eb90:	2302      	movs	r3, #2
 800eb92:	e0dc      	b.n	800ed4e <HAL_TIM_ConfigClockSource+0x1d6>
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	2201      	movs	r2, #1
 800eb98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	2202      	movs	r2, #2
 800eba0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	681b      	ldr	r3, [r3, #0]
 800eba8:	689b      	ldr	r3, [r3, #8]
 800ebaa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800ebac:	68ba      	ldr	r2, [r7, #8]
 800ebae:	4b6a      	ldr	r3, [pc, #424]	@ (800ed58 <HAL_TIM_ConfigClockSource+0x1e0>)
 800ebb0:	4013      	ands	r3, r2
 800ebb2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ebb4:	68bb      	ldr	r3, [r7, #8]
 800ebb6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800ebba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	681b      	ldr	r3, [r3, #0]
 800ebc0:	68ba      	ldr	r2, [r7, #8]
 800ebc2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ebc4:	683b      	ldr	r3, [r7, #0]
 800ebc6:	681b      	ldr	r3, [r3, #0]
 800ebc8:	4a64      	ldr	r2, [pc, #400]	@ (800ed5c <HAL_TIM_ConfigClockSource+0x1e4>)
 800ebca:	4293      	cmp	r3, r2
 800ebcc:	f000 80a9 	beq.w	800ed22 <HAL_TIM_ConfigClockSource+0x1aa>
 800ebd0:	4a62      	ldr	r2, [pc, #392]	@ (800ed5c <HAL_TIM_ConfigClockSource+0x1e4>)
 800ebd2:	4293      	cmp	r3, r2
 800ebd4:	f200 80ae 	bhi.w	800ed34 <HAL_TIM_ConfigClockSource+0x1bc>
 800ebd8:	4a61      	ldr	r2, [pc, #388]	@ (800ed60 <HAL_TIM_ConfigClockSource+0x1e8>)
 800ebda:	4293      	cmp	r3, r2
 800ebdc:	f000 80a1 	beq.w	800ed22 <HAL_TIM_ConfigClockSource+0x1aa>
 800ebe0:	4a5f      	ldr	r2, [pc, #380]	@ (800ed60 <HAL_TIM_ConfigClockSource+0x1e8>)
 800ebe2:	4293      	cmp	r3, r2
 800ebe4:	f200 80a6 	bhi.w	800ed34 <HAL_TIM_ConfigClockSource+0x1bc>
 800ebe8:	4a5e      	ldr	r2, [pc, #376]	@ (800ed64 <HAL_TIM_ConfigClockSource+0x1ec>)
 800ebea:	4293      	cmp	r3, r2
 800ebec:	f000 8099 	beq.w	800ed22 <HAL_TIM_ConfigClockSource+0x1aa>
 800ebf0:	4a5c      	ldr	r2, [pc, #368]	@ (800ed64 <HAL_TIM_ConfigClockSource+0x1ec>)
 800ebf2:	4293      	cmp	r3, r2
 800ebf4:	f200 809e 	bhi.w	800ed34 <HAL_TIM_ConfigClockSource+0x1bc>
 800ebf8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800ebfc:	f000 8091 	beq.w	800ed22 <HAL_TIM_ConfigClockSource+0x1aa>
 800ec00:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800ec04:	f200 8096 	bhi.w	800ed34 <HAL_TIM_ConfigClockSource+0x1bc>
 800ec08:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ec0c:	f000 8089 	beq.w	800ed22 <HAL_TIM_ConfigClockSource+0x1aa>
 800ec10:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ec14:	f200 808e 	bhi.w	800ed34 <HAL_TIM_ConfigClockSource+0x1bc>
 800ec18:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ec1c:	d03e      	beq.n	800ec9c <HAL_TIM_ConfigClockSource+0x124>
 800ec1e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ec22:	f200 8087 	bhi.w	800ed34 <HAL_TIM_ConfigClockSource+0x1bc>
 800ec26:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ec2a:	f000 8086 	beq.w	800ed3a <HAL_TIM_ConfigClockSource+0x1c2>
 800ec2e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ec32:	d87f      	bhi.n	800ed34 <HAL_TIM_ConfigClockSource+0x1bc>
 800ec34:	2b70      	cmp	r3, #112	@ 0x70
 800ec36:	d01a      	beq.n	800ec6e <HAL_TIM_ConfigClockSource+0xf6>
 800ec38:	2b70      	cmp	r3, #112	@ 0x70
 800ec3a:	d87b      	bhi.n	800ed34 <HAL_TIM_ConfigClockSource+0x1bc>
 800ec3c:	2b60      	cmp	r3, #96	@ 0x60
 800ec3e:	d050      	beq.n	800ece2 <HAL_TIM_ConfigClockSource+0x16a>
 800ec40:	2b60      	cmp	r3, #96	@ 0x60
 800ec42:	d877      	bhi.n	800ed34 <HAL_TIM_ConfigClockSource+0x1bc>
 800ec44:	2b50      	cmp	r3, #80	@ 0x50
 800ec46:	d03c      	beq.n	800ecc2 <HAL_TIM_ConfigClockSource+0x14a>
 800ec48:	2b50      	cmp	r3, #80	@ 0x50
 800ec4a:	d873      	bhi.n	800ed34 <HAL_TIM_ConfigClockSource+0x1bc>
 800ec4c:	2b40      	cmp	r3, #64	@ 0x40
 800ec4e:	d058      	beq.n	800ed02 <HAL_TIM_ConfigClockSource+0x18a>
 800ec50:	2b40      	cmp	r3, #64	@ 0x40
 800ec52:	d86f      	bhi.n	800ed34 <HAL_TIM_ConfigClockSource+0x1bc>
 800ec54:	2b30      	cmp	r3, #48	@ 0x30
 800ec56:	d064      	beq.n	800ed22 <HAL_TIM_ConfigClockSource+0x1aa>
 800ec58:	2b30      	cmp	r3, #48	@ 0x30
 800ec5a:	d86b      	bhi.n	800ed34 <HAL_TIM_ConfigClockSource+0x1bc>
 800ec5c:	2b20      	cmp	r3, #32
 800ec5e:	d060      	beq.n	800ed22 <HAL_TIM_ConfigClockSource+0x1aa>
 800ec60:	2b20      	cmp	r3, #32
 800ec62:	d867      	bhi.n	800ed34 <HAL_TIM_ConfigClockSource+0x1bc>
 800ec64:	2b00      	cmp	r3, #0
 800ec66:	d05c      	beq.n	800ed22 <HAL_TIM_ConfigClockSource+0x1aa>
 800ec68:	2b10      	cmp	r3, #16
 800ec6a:	d05a      	beq.n	800ed22 <HAL_TIM_ConfigClockSource+0x1aa>
 800ec6c:	e062      	b.n	800ed34 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800ec72:	683b      	ldr	r3, [r7, #0]
 800ec74:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800ec76:	683b      	ldr	r3, [r7, #0]
 800ec78:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800ec7a:	683b      	ldr	r3, [r7, #0]
 800ec7c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800ec7e:	f000 fca1 	bl	800f5c4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	681b      	ldr	r3, [r3, #0]
 800ec86:	689b      	ldr	r3, [r3, #8]
 800ec88:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ec8a:	68bb      	ldr	r3, [r7, #8]
 800ec8c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800ec90:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	681b      	ldr	r3, [r3, #0]
 800ec96:	68ba      	ldr	r2, [r7, #8]
 800ec98:	609a      	str	r2, [r3, #8]
      break;
 800ec9a:	e04f      	b.n	800ed3c <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800eca0:	683b      	ldr	r3, [r7, #0]
 800eca2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800eca4:	683b      	ldr	r3, [r7, #0]
 800eca6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800eca8:	683b      	ldr	r3, [r7, #0]
 800ecaa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800ecac:	f000 fc8a 	bl	800f5c4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	681b      	ldr	r3, [r3, #0]
 800ecb4:	689a      	ldr	r2, [r3, #8]
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	681b      	ldr	r3, [r3, #0]
 800ecba:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800ecbe:	609a      	str	r2, [r3, #8]
      break;
 800ecc0:	e03c      	b.n	800ed3c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ecc6:	683b      	ldr	r3, [r7, #0]
 800ecc8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ecca:	683b      	ldr	r3, [r7, #0]
 800eccc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ecce:	461a      	mov	r2, r3
 800ecd0:	f000 fbfa 	bl	800f4c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	681b      	ldr	r3, [r3, #0]
 800ecd8:	2150      	movs	r1, #80	@ 0x50
 800ecda:	4618      	mov	r0, r3
 800ecdc:	f000 fc54 	bl	800f588 <TIM_ITRx_SetConfig>
      break;
 800ece0:	e02c      	b.n	800ed3c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ece6:	683b      	ldr	r3, [r7, #0]
 800ece8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ecea:	683b      	ldr	r3, [r7, #0]
 800ecec:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800ecee:	461a      	mov	r2, r3
 800ecf0:	f000 fc19 	bl	800f526 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	681b      	ldr	r3, [r3, #0]
 800ecf8:	2160      	movs	r1, #96	@ 0x60
 800ecfa:	4618      	mov	r0, r3
 800ecfc:	f000 fc44 	bl	800f588 <TIM_ITRx_SetConfig>
      break;
 800ed00:	e01c      	b.n	800ed3c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ed06:	683b      	ldr	r3, [r7, #0]
 800ed08:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ed0a:	683b      	ldr	r3, [r7, #0]
 800ed0c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ed0e:	461a      	mov	r2, r3
 800ed10:	f000 fbda 	bl	800f4c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	681b      	ldr	r3, [r3, #0]
 800ed18:	2140      	movs	r1, #64	@ 0x40
 800ed1a:	4618      	mov	r0, r3
 800ed1c:	f000 fc34 	bl	800f588 <TIM_ITRx_SetConfig>
      break;
 800ed20:	e00c      	b.n	800ed3c <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	681a      	ldr	r2, [r3, #0]
 800ed26:	683b      	ldr	r3, [r7, #0]
 800ed28:	681b      	ldr	r3, [r3, #0]
 800ed2a:	4619      	mov	r1, r3
 800ed2c:	4610      	mov	r0, r2
 800ed2e:	f000 fc2b 	bl	800f588 <TIM_ITRx_SetConfig>
      break;
 800ed32:	e003      	b.n	800ed3c <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800ed34:	2301      	movs	r3, #1
 800ed36:	73fb      	strb	r3, [r7, #15]
      break;
 800ed38:	e000      	b.n	800ed3c <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800ed3a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	2201      	movs	r2, #1
 800ed40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	2200      	movs	r2, #0
 800ed48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800ed4c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ed4e:	4618      	mov	r0, r3
 800ed50:	3710      	adds	r7, #16
 800ed52:	46bd      	mov	sp, r7
 800ed54:	bd80      	pop	{r7, pc}
 800ed56:	bf00      	nop
 800ed58:	ffceff88 	.word	0xffceff88
 800ed5c:	00100040 	.word	0x00100040
 800ed60:	00100030 	.word	0x00100030
 800ed64:	00100020 	.word	0x00100020

0800ed68 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ed68:	b480      	push	{r7}
 800ed6a:	b083      	sub	sp, #12
 800ed6c:	af00      	add	r7, sp, #0
 800ed6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ed70:	bf00      	nop
 800ed72:	370c      	adds	r7, #12
 800ed74:	46bd      	mov	sp, r7
 800ed76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed7a:	4770      	bx	lr

0800ed7c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ed7c:	b480      	push	{r7}
 800ed7e:	b083      	sub	sp, #12
 800ed80:	af00      	add	r7, sp, #0
 800ed82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ed84:	bf00      	nop
 800ed86:	370c      	adds	r7, #12
 800ed88:	46bd      	mov	sp, r7
 800ed8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed8e:	4770      	bx	lr

0800ed90 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ed90:	b480      	push	{r7}
 800ed92:	b083      	sub	sp, #12
 800ed94:	af00      	add	r7, sp, #0
 800ed96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ed98:	bf00      	nop
 800ed9a:	370c      	adds	r7, #12
 800ed9c:	46bd      	mov	sp, r7
 800ed9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eda2:	4770      	bx	lr

0800eda4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800eda4:	b480      	push	{r7}
 800eda6:	b083      	sub	sp, #12
 800eda8:	af00      	add	r7, sp, #0
 800edaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800edac:	bf00      	nop
 800edae:	370c      	adds	r7, #12
 800edb0:	46bd      	mov	sp, r7
 800edb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edb6:	4770      	bx	lr

0800edb8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800edb8:	b480      	push	{r7}
 800edba:	b085      	sub	sp, #20
 800edbc:	af00      	add	r7, sp, #0
 800edbe:	6078      	str	r0, [r7, #4]
 800edc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	681b      	ldr	r3, [r3, #0]
 800edc6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	4a4a      	ldr	r2, [pc, #296]	@ (800eef4 <TIM_Base_SetConfig+0x13c>)
 800edcc:	4293      	cmp	r3, r2
 800edce:	d013      	beq.n	800edf8 <TIM_Base_SetConfig+0x40>
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800edd6:	d00f      	beq.n	800edf8 <TIM_Base_SetConfig+0x40>
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	4a47      	ldr	r2, [pc, #284]	@ (800eef8 <TIM_Base_SetConfig+0x140>)
 800eddc:	4293      	cmp	r3, r2
 800edde:	d00b      	beq.n	800edf8 <TIM_Base_SetConfig+0x40>
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	4a46      	ldr	r2, [pc, #280]	@ (800eefc <TIM_Base_SetConfig+0x144>)
 800ede4:	4293      	cmp	r3, r2
 800ede6:	d007      	beq.n	800edf8 <TIM_Base_SetConfig+0x40>
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	4a45      	ldr	r2, [pc, #276]	@ (800ef00 <TIM_Base_SetConfig+0x148>)
 800edec:	4293      	cmp	r3, r2
 800edee:	d003      	beq.n	800edf8 <TIM_Base_SetConfig+0x40>
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	4a44      	ldr	r2, [pc, #272]	@ (800ef04 <TIM_Base_SetConfig+0x14c>)
 800edf4:	4293      	cmp	r3, r2
 800edf6:	d108      	bne.n	800ee0a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800edf8:	68fb      	ldr	r3, [r7, #12]
 800edfa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800edfe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ee00:	683b      	ldr	r3, [r7, #0]
 800ee02:	685b      	ldr	r3, [r3, #4]
 800ee04:	68fa      	ldr	r2, [r7, #12]
 800ee06:	4313      	orrs	r3, r2
 800ee08:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ee0a:	687b      	ldr	r3, [r7, #4]
 800ee0c:	4a39      	ldr	r2, [pc, #228]	@ (800eef4 <TIM_Base_SetConfig+0x13c>)
 800ee0e:	4293      	cmp	r3, r2
 800ee10:	d027      	beq.n	800ee62 <TIM_Base_SetConfig+0xaa>
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ee18:	d023      	beq.n	800ee62 <TIM_Base_SetConfig+0xaa>
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	4a36      	ldr	r2, [pc, #216]	@ (800eef8 <TIM_Base_SetConfig+0x140>)
 800ee1e:	4293      	cmp	r3, r2
 800ee20:	d01f      	beq.n	800ee62 <TIM_Base_SetConfig+0xaa>
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	4a35      	ldr	r2, [pc, #212]	@ (800eefc <TIM_Base_SetConfig+0x144>)
 800ee26:	4293      	cmp	r3, r2
 800ee28:	d01b      	beq.n	800ee62 <TIM_Base_SetConfig+0xaa>
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	4a34      	ldr	r2, [pc, #208]	@ (800ef00 <TIM_Base_SetConfig+0x148>)
 800ee2e:	4293      	cmp	r3, r2
 800ee30:	d017      	beq.n	800ee62 <TIM_Base_SetConfig+0xaa>
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	4a33      	ldr	r2, [pc, #204]	@ (800ef04 <TIM_Base_SetConfig+0x14c>)
 800ee36:	4293      	cmp	r3, r2
 800ee38:	d013      	beq.n	800ee62 <TIM_Base_SetConfig+0xaa>
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	4a32      	ldr	r2, [pc, #200]	@ (800ef08 <TIM_Base_SetConfig+0x150>)
 800ee3e:	4293      	cmp	r3, r2
 800ee40:	d00f      	beq.n	800ee62 <TIM_Base_SetConfig+0xaa>
 800ee42:	687b      	ldr	r3, [r7, #4]
 800ee44:	4a31      	ldr	r2, [pc, #196]	@ (800ef0c <TIM_Base_SetConfig+0x154>)
 800ee46:	4293      	cmp	r3, r2
 800ee48:	d00b      	beq.n	800ee62 <TIM_Base_SetConfig+0xaa>
 800ee4a:	687b      	ldr	r3, [r7, #4]
 800ee4c:	4a30      	ldr	r2, [pc, #192]	@ (800ef10 <TIM_Base_SetConfig+0x158>)
 800ee4e:	4293      	cmp	r3, r2
 800ee50:	d007      	beq.n	800ee62 <TIM_Base_SetConfig+0xaa>
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	4a2f      	ldr	r2, [pc, #188]	@ (800ef14 <TIM_Base_SetConfig+0x15c>)
 800ee56:	4293      	cmp	r3, r2
 800ee58:	d003      	beq.n	800ee62 <TIM_Base_SetConfig+0xaa>
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	4a2e      	ldr	r2, [pc, #184]	@ (800ef18 <TIM_Base_SetConfig+0x160>)
 800ee5e:	4293      	cmp	r3, r2
 800ee60:	d108      	bne.n	800ee74 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ee62:	68fb      	ldr	r3, [r7, #12]
 800ee64:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ee68:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ee6a:	683b      	ldr	r3, [r7, #0]
 800ee6c:	68db      	ldr	r3, [r3, #12]
 800ee6e:	68fa      	ldr	r2, [r7, #12]
 800ee70:	4313      	orrs	r3, r2
 800ee72:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ee74:	68fb      	ldr	r3, [r7, #12]
 800ee76:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800ee7a:	683b      	ldr	r3, [r7, #0]
 800ee7c:	695b      	ldr	r3, [r3, #20]
 800ee7e:	4313      	orrs	r3, r2
 800ee80:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	68fa      	ldr	r2, [r7, #12]
 800ee86:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ee88:	683b      	ldr	r3, [r7, #0]
 800ee8a:	689a      	ldr	r2, [r3, #8]
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ee90:	683b      	ldr	r3, [r7, #0]
 800ee92:	681a      	ldr	r2, [r3, #0]
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	4a16      	ldr	r2, [pc, #88]	@ (800eef4 <TIM_Base_SetConfig+0x13c>)
 800ee9c:	4293      	cmp	r3, r2
 800ee9e:	d00f      	beq.n	800eec0 <TIM_Base_SetConfig+0x108>
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	4a18      	ldr	r2, [pc, #96]	@ (800ef04 <TIM_Base_SetConfig+0x14c>)
 800eea4:	4293      	cmp	r3, r2
 800eea6:	d00b      	beq.n	800eec0 <TIM_Base_SetConfig+0x108>
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	4a17      	ldr	r2, [pc, #92]	@ (800ef08 <TIM_Base_SetConfig+0x150>)
 800eeac:	4293      	cmp	r3, r2
 800eeae:	d007      	beq.n	800eec0 <TIM_Base_SetConfig+0x108>
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	4a16      	ldr	r2, [pc, #88]	@ (800ef0c <TIM_Base_SetConfig+0x154>)
 800eeb4:	4293      	cmp	r3, r2
 800eeb6:	d003      	beq.n	800eec0 <TIM_Base_SetConfig+0x108>
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	4a15      	ldr	r2, [pc, #84]	@ (800ef10 <TIM_Base_SetConfig+0x158>)
 800eebc:	4293      	cmp	r3, r2
 800eebe:	d103      	bne.n	800eec8 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800eec0:	683b      	ldr	r3, [r7, #0]
 800eec2:	691a      	ldr	r2, [r3, #16]
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	2201      	movs	r2, #1
 800eecc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800eece:	687b      	ldr	r3, [r7, #4]
 800eed0:	691b      	ldr	r3, [r3, #16]
 800eed2:	f003 0301 	and.w	r3, r3, #1
 800eed6:	2b01      	cmp	r3, #1
 800eed8:	d105      	bne.n	800eee6 <TIM_Base_SetConfig+0x12e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	691b      	ldr	r3, [r3, #16]
 800eede:	f023 0201 	bic.w	r2, r3, #1
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	611a      	str	r2, [r3, #16]
  }
}
 800eee6:	bf00      	nop
 800eee8:	3714      	adds	r7, #20
 800eeea:	46bd      	mov	sp, r7
 800eeec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eef0:	4770      	bx	lr
 800eef2:	bf00      	nop
 800eef4:	40010000 	.word	0x40010000
 800eef8:	40000400 	.word	0x40000400
 800eefc:	40000800 	.word	0x40000800
 800ef00:	40000c00 	.word	0x40000c00
 800ef04:	40010400 	.word	0x40010400
 800ef08:	40014000 	.word	0x40014000
 800ef0c:	40014400 	.word	0x40014400
 800ef10:	40014800 	.word	0x40014800
 800ef14:	4000e000 	.word	0x4000e000
 800ef18:	4000e400 	.word	0x4000e400

0800ef1c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ef1c:	b480      	push	{r7}
 800ef1e:	b087      	sub	sp, #28
 800ef20:	af00      	add	r7, sp, #0
 800ef22:	6078      	str	r0, [r7, #4]
 800ef24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ef26:	687b      	ldr	r3, [r7, #4]
 800ef28:	6a1b      	ldr	r3, [r3, #32]
 800ef2a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	6a1b      	ldr	r3, [r3, #32]
 800ef30:	f023 0201 	bic.w	r2, r3, #1
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	685b      	ldr	r3, [r3, #4]
 800ef3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	699b      	ldr	r3, [r3, #24]
 800ef42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ef44:	68fa      	ldr	r2, [r7, #12]
 800ef46:	4b37      	ldr	r3, [pc, #220]	@ (800f024 <TIM_OC1_SetConfig+0x108>)
 800ef48:	4013      	ands	r3, r2
 800ef4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ef4c:	68fb      	ldr	r3, [r7, #12]
 800ef4e:	f023 0303 	bic.w	r3, r3, #3
 800ef52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ef54:	683b      	ldr	r3, [r7, #0]
 800ef56:	681b      	ldr	r3, [r3, #0]
 800ef58:	68fa      	ldr	r2, [r7, #12]
 800ef5a:	4313      	orrs	r3, r2
 800ef5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ef5e:	697b      	ldr	r3, [r7, #20]
 800ef60:	f023 0302 	bic.w	r3, r3, #2
 800ef64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800ef66:	683b      	ldr	r3, [r7, #0]
 800ef68:	689b      	ldr	r3, [r3, #8]
 800ef6a:	697a      	ldr	r2, [r7, #20]
 800ef6c:	4313      	orrs	r3, r2
 800ef6e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	4a2d      	ldr	r2, [pc, #180]	@ (800f028 <TIM_OC1_SetConfig+0x10c>)
 800ef74:	4293      	cmp	r3, r2
 800ef76:	d00f      	beq.n	800ef98 <TIM_OC1_SetConfig+0x7c>
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	4a2c      	ldr	r2, [pc, #176]	@ (800f02c <TIM_OC1_SetConfig+0x110>)
 800ef7c:	4293      	cmp	r3, r2
 800ef7e:	d00b      	beq.n	800ef98 <TIM_OC1_SetConfig+0x7c>
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	4a2b      	ldr	r2, [pc, #172]	@ (800f030 <TIM_OC1_SetConfig+0x114>)
 800ef84:	4293      	cmp	r3, r2
 800ef86:	d007      	beq.n	800ef98 <TIM_OC1_SetConfig+0x7c>
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	4a2a      	ldr	r2, [pc, #168]	@ (800f034 <TIM_OC1_SetConfig+0x118>)
 800ef8c:	4293      	cmp	r3, r2
 800ef8e:	d003      	beq.n	800ef98 <TIM_OC1_SetConfig+0x7c>
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	4a29      	ldr	r2, [pc, #164]	@ (800f038 <TIM_OC1_SetConfig+0x11c>)
 800ef94:	4293      	cmp	r3, r2
 800ef96:	d10c      	bne.n	800efb2 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800ef98:	697b      	ldr	r3, [r7, #20]
 800ef9a:	f023 0308 	bic.w	r3, r3, #8
 800ef9e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800efa0:	683b      	ldr	r3, [r7, #0]
 800efa2:	68db      	ldr	r3, [r3, #12]
 800efa4:	697a      	ldr	r2, [r7, #20]
 800efa6:	4313      	orrs	r3, r2
 800efa8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800efaa:	697b      	ldr	r3, [r7, #20]
 800efac:	f023 0304 	bic.w	r3, r3, #4
 800efb0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	4a1c      	ldr	r2, [pc, #112]	@ (800f028 <TIM_OC1_SetConfig+0x10c>)
 800efb6:	4293      	cmp	r3, r2
 800efb8:	d00f      	beq.n	800efda <TIM_OC1_SetConfig+0xbe>
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	4a1b      	ldr	r2, [pc, #108]	@ (800f02c <TIM_OC1_SetConfig+0x110>)
 800efbe:	4293      	cmp	r3, r2
 800efc0:	d00b      	beq.n	800efda <TIM_OC1_SetConfig+0xbe>
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	4a1a      	ldr	r2, [pc, #104]	@ (800f030 <TIM_OC1_SetConfig+0x114>)
 800efc6:	4293      	cmp	r3, r2
 800efc8:	d007      	beq.n	800efda <TIM_OC1_SetConfig+0xbe>
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	4a19      	ldr	r2, [pc, #100]	@ (800f034 <TIM_OC1_SetConfig+0x118>)
 800efce:	4293      	cmp	r3, r2
 800efd0:	d003      	beq.n	800efda <TIM_OC1_SetConfig+0xbe>
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	4a18      	ldr	r2, [pc, #96]	@ (800f038 <TIM_OC1_SetConfig+0x11c>)
 800efd6:	4293      	cmp	r3, r2
 800efd8:	d111      	bne.n	800effe <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800efda:	693b      	ldr	r3, [r7, #16]
 800efdc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800efe0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800efe2:	693b      	ldr	r3, [r7, #16]
 800efe4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800efe8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800efea:	683b      	ldr	r3, [r7, #0]
 800efec:	695b      	ldr	r3, [r3, #20]
 800efee:	693a      	ldr	r2, [r7, #16]
 800eff0:	4313      	orrs	r3, r2
 800eff2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800eff4:	683b      	ldr	r3, [r7, #0]
 800eff6:	699b      	ldr	r3, [r3, #24]
 800eff8:	693a      	ldr	r2, [r7, #16]
 800effa:	4313      	orrs	r3, r2
 800effc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	693a      	ldr	r2, [r7, #16]
 800f002:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	68fa      	ldr	r2, [r7, #12]
 800f008:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800f00a:	683b      	ldr	r3, [r7, #0]
 800f00c:	685a      	ldr	r2, [r3, #4]
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	697a      	ldr	r2, [r7, #20]
 800f016:	621a      	str	r2, [r3, #32]
}
 800f018:	bf00      	nop
 800f01a:	371c      	adds	r7, #28
 800f01c:	46bd      	mov	sp, r7
 800f01e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f022:	4770      	bx	lr
 800f024:	fffeff8f 	.word	0xfffeff8f
 800f028:	40010000 	.word	0x40010000
 800f02c:	40010400 	.word	0x40010400
 800f030:	40014000 	.word	0x40014000
 800f034:	40014400 	.word	0x40014400
 800f038:	40014800 	.word	0x40014800

0800f03c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f03c:	b480      	push	{r7}
 800f03e:	b087      	sub	sp, #28
 800f040:	af00      	add	r7, sp, #0
 800f042:	6078      	str	r0, [r7, #4]
 800f044:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	6a1b      	ldr	r3, [r3, #32]
 800f04a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	6a1b      	ldr	r3, [r3, #32]
 800f050:	f023 0210 	bic.w	r2, r3, #16
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	685b      	ldr	r3, [r3, #4]
 800f05c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f05e:	687b      	ldr	r3, [r7, #4]
 800f060:	699b      	ldr	r3, [r3, #24]
 800f062:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800f064:	68fa      	ldr	r2, [r7, #12]
 800f066:	4b34      	ldr	r3, [pc, #208]	@ (800f138 <TIM_OC2_SetConfig+0xfc>)
 800f068:	4013      	ands	r3, r2
 800f06a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800f06c:	68fb      	ldr	r3, [r7, #12]
 800f06e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800f072:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f074:	683b      	ldr	r3, [r7, #0]
 800f076:	681b      	ldr	r3, [r3, #0]
 800f078:	021b      	lsls	r3, r3, #8
 800f07a:	68fa      	ldr	r2, [r7, #12]
 800f07c:	4313      	orrs	r3, r2
 800f07e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800f080:	697b      	ldr	r3, [r7, #20]
 800f082:	f023 0320 	bic.w	r3, r3, #32
 800f086:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800f088:	683b      	ldr	r3, [r7, #0]
 800f08a:	689b      	ldr	r3, [r3, #8]
 800f08c:	011b      	lsls	r3, r3, #4
 800f08e:	697a      	ldr	r2, [r7, #20]
 800f090:	4313      	orrs	r3, r2
 800f092:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	4a29      	ldr	r2, [pc, #164]	@ (800f13c <TIM_OC2_SetConfig+0x100>)
 800f098:	4293      	cmp	r3, r2
 800f09a:	d003      	beq.n	800f0a4 <TIM_OC2_SetConfig+0x68>
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	4a28      	ldr	r2, [pc, #160]	@ (800f140 <TIM_OC2_SetConfig+0x104>)
 800f0a0:	4293      	cmp	r3, r2
 800f0a2:	d10d      	bne.n	800f0c0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800f0a4:	697b      	ldr	r3, [r7, #20]
 800f0a6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f0aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800f0ac:	683b      	ldr	r3, [r7, #0]
 800f0ae:	68db      	ldr	r3, [r3, #12]
 800f0b0:	011b      	lsls	r3, r3, #4
 800f0b2:	697a      	ldr	r2, [r7, #20]
 800f0b4:	4313      	orrs	r3, r2
 800f0b6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800f0b8:	697b      	ldr	r3, [r7, #20]
 800f0ba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f0be:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	4a1e      	ldr	r2, [pc, #120]	@ (800f13c <TIM_OC2_SetConfig+0x100>)
 800f0c4:	4293      	cmp	r3, r2
 800f0c6:	d00f      	beq.n	800f0e8 <TIM_OC2_SetConfig+0xac>
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	4a1d      	ldr	r2, [pc, #116]	@ (800f140 <TIM_OC2_SetConfig+0x104>)
 800f0cc:	4293      	cmp	r3, r2
 800f0ce:	d00b      	beq.n	800f0e8 <TIM_OC2_SetConfig+0xac>
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	4a1c      	ldr	r2, [pc, #112]	@ (800f144 <TIM_OC2_SetConfig+0x108>)
 800f0d4:	4293      	cmp	r3, r2
 800f0d6:	d007      	beq.n	800f0e8 <TIM_OC2_SetConfig+0xac>
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	4a1b      	ldr	r2, [pc, #108]	@ (800f148 <TIM_OC2_SetConfig+0x10c>)
 800f0dc:	4293      	cmp	r3, r2
 800f0de:	d003      	beq.n	800f0e8 <TIM_OC2_SetConfig+0xac>
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	4a1a      	ldr	r2, [pc, #104]	@ (800f14c <TIM_OC2_SetConfig+0x110>)
 800f0e4:	4293      	cmp	r3, r2
 800f0e6:	d113      	bne.n	800f110 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800f0e8:	693b      	ldr	r3, [r7, #16]
 800f0ea:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800f0ee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800f0f0:	693b      	ldr	r3, [r7, #16]
 800f0f2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800f0f6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800f0f8:	683b      	ldr	r3, [r7, #0]
 800f0fa:	695b      	ldr	r3, [r3, #20]
 800f0fc:	009b      	lsls	r3, r3, #2
 800f0fe:	693a      	ldr	r2, [r7, #16]
 800f100:	4313      	orrs	r3, r2
 800f102:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800f104:	683b      	ldr	r3, [r7, #0]
 800f106:	699b      	ldr	r3, [r3, #24]
 800f108:	009b      	lsls	r3, r3, #2
 800f10a:	693a      	ldr	r2, [r7, #16]
 800f10c:	4313      	orrs	r3, r2
 800f10e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	693a      	ldr	r2, [r7, #16]
 800f114:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f116:	687b      	ldr	r3, [r7, #4]
 800f118:	68fa      	ldr	r2, [r7, #12]
 800f11a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800f11c:	683b      	ldr	r3, [r7, #0]
 800f11e:	685a      	ldr	r2, [r3, #4]
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	697a      	ldr	r2, [r7, #20]
 800f128:	621a      	str	r2, [r3, #32]
}
 800f12a:	bf00      	nop
 800f12c:	371c      	adds	r7, #28
 800f12e:	46bd      	mov	sp, r7
 800f130:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f134:	4770      	bx	lr
 800f136:	bf00      	nop
 800f138:	feff8fff 	.word	0xfeff8fff
 800f13c:	40010000 	.word	0x40010000
 800f140:	40010400 	.word	0x40010400
 800f144:	40014000 	.word	0x40014000
 800f148:	40014400 	.word	0x40014400
 800f14c:	40014800 	.word	0x40014800

0800f150 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f150:	b480      	push	{r7}
 800f152:	b087      	sub	sp, #28
 800f154:	af00      	add	r7, sp, #0
 800f156:	6078      	str	r0, [r7, #4]
 800f158:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	6a1b      	ldr	r3, [r3, #32]
 800f15e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	6a1b      	ldr	r3, [r3, #32]
 800f164:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800f168:	687b      	ldr	r3, [r7, #4]
 800f16a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	685b      	ldr	r3, [r3, #4]
 800f170:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f172:	687b      	ldr	r3, [r7, #4]
 800f174:	69db      	ldr	r3, [r3, #28]
 800f176:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800f178:	68fa      	ldr	r2, [r7, #12]
 800f17a:	4b33      	ldr	r3, [pc, #204]	@ (800f248 <TIM_OC3_SetConfig+0xf8>)
 800f17c:	4013      	ands	r3, r2
 800f17e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800f180:	68fb      	ldr	r3, [r7, #12]
 800f182:	f023 0303 	bic.w	r3, r3, #3
 800f186:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f188:	683b      	ldr	r3, [r7, #0]
 800f18a:	681b      	ldr	r3, [r3, #0]
 800f18c:	68fa      	ldr	r2, [r7, #12]
 800f18e:	4313      	orrs	r3, r2
 800f190:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800f192:	697b      	ldr	r3, [r7, #20]
 800f194:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800f198:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800f19a:	683b      	ldr	r3, [r7, #0]
 800f19c:	689b      	ldr	r3, [r3, #8]
 800f19e:	021b      	lsls	r3, r3, #8
 800f1a0:	697a      	ldr	r2, [r7, #20]
 800f1a2:	4313      	orrs	r3, r2
 800f1a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800f1a6:	687b      	ldr	r3, [r7, #4]
 800f1a8:	4a28      	ldr	r2, [pc, #160]	@ (800f24c <TIM_OC3_SetConfig+0xfc>)
 800f1aa:	4293      	cmp	r3, r2
 800f1ac:	d003      	beq.n	800f1b6 <TIM_OC3_SetConfig+0x66>
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	4a27      	ldr	r2, [pc, #156]	@ (800f250 <TIM_OC3_SetConfig+0x100>)
 800f1b2:	4293      	cmp	r3, r2
 800f1b4:	d10d      	bne.n	800f1d2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800f1b6:	697b      	ldr	r3, [r7, #20]
 800f1b8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800f1bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800f1be:	683b      	ldr	r3, [r7, #0]
 800f1c0:	68db      	ldr	r3, [r3, #12]
 800f1c2:	021b      	lsls	r3, r3, #8
 800f1c4:	697a      	ldr	r2, [r7, #20]
 800f1c6:	4313      	orrs	r3, r2
 800f1c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800f1ca:	697b      	ldr	r3, [r7, #20]
 800f1cc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800f1d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	4a1d      	ldr	r2, [pc, #116]	@ (800f24c <TIM_OC3_SetConfig+0xfc>)
 800f1d6:	4293      	cmp	r3, r2
 800f1d8:	d00f      	beq.n	800f1fa <TIM_OC3_SetConfig+0xaa>
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	4a1c      	ldr	r2, [pc, #112]	@ (800f250 <TIM_OC3_SetConfig+0x100>)
 800f1de:	4293      	cmp	r3, r2
 800f1e0:	d00b      	beq.n	800f1fa <TIM_OC3_SetConfig+0xaa>
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	4a1b      	ldr	r2, [pc, #108]	@ (800f254 <TIM_OC3_SetConfig+0x104>)
 800f1e6:	4293      	cmp	r3, r2
 800f1e8:	d007      	beq.n	800f1fa <TIM_OC3_SetConfig+0xaa>
 800f1ea:	687b      	ldr	r3, [r7, #4]
 800f1ec:	4a1a      	ldr	r2, [pc, #104]	@ (800f258 <TIM_OC3_SetConfig+0x108>)
 800f1ee:	4293      	cmp	r3, r2
 800f1f0:	d003      	beq.n	800f1fa <TIM_OC3_SetConfig+0xaa>
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	4a19      	ldr	r2, [pc, #100]	@ (800f25c <TIM_OC3_SetConfig+0x10c>)
 800f1f6:	4293      	cmp	r3, r2
 800f1f8:	d113      	bne.n	800f222 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800f1fa:	693b      	ldr	r3, [r7, #16]
 800f1fc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800f200:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800f202:	693b      	ldr	r3, [r7, #16]
 800f204:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800f208:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800f20a:	683b      	ldr	r3, [r7, #0]
 800f20c:	695b      	ldr	r3, [r3, #20]
 800f20e:	011b      	lsls	r3, r3, #4
 800f210:	693a      	ldr	r2, [r7, #16]
 800f212:	4313      	orrs	r3, r2
 800f214:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800f216:	683b      	ldr	r3, [r7, #0]
 800f218:	699b      	ldr	r3, [r3, #24]
 800f21a:	011b      	lsls	r3, r3, #4
 800f21c:	693a      	ldr	r2, [r7, #16]
 800f21e:	4313      	orrs	r3, r2
 800f220:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f222:	687b      	ldr	r3, [r7, #4]
 800f224:	693a      	ldr	r2, [r7, #16]
 800f226:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	68fa      	ldr	r2, [r7, #12]
 800f22c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800f22e:	683b      	ldr	r3, [r7, #0]
 800f230:	685a      	ldr	r2, [r3, #4]
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	697a      	ldr	r2, [r7, #20]
 800f23a:	621a      	str	r2, [r3, #32]
}
 800f23c:	bf00      	nop
 800f23e:	371c      	adds	r7, #28
 800f240:	46bd      	mov	sp, r7
 800f242:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f246:	4770      	bx	lr
 800f248:	fffeff8f 	.word	0xfffeff8f
 800f24c:	40010000 	.word	0x40010000
 800f250:	40010400 	.word	0x40010400
 800f254:	40014000 	.word	0x40014000
 800f258:	40014400 	.word	0x40014400
 800f25c:	40014800 	.word	0x40014800

0800f260 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f260:	b480      	push	{r7}
 800f262:	b087      	sub	sp, #28
 800f264:	af00      	add	r7, sp, #0
 800f266:	6078      	str	r0, [r7, #4]
 800f268:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	6a1b      	ldr	r3, [r3, #32]
 800f26e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	6a1b      	ldr	r3, [r3, #32]
 800f274:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	685b      	ldr	r3, [r3, #4]
 800f280:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f282:	687b      	ldr	r3, [r7, #4]
 800f284:	69db      	ldr	r3, [r3, #28]
 800f286:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800f288:	68fa      	ldr	r2, [r7, #12]
 800f28a:	4b24      	ldr	r3, [pc, #144]	@ (800f31c <TIM_OC4_SetConfig+0xbc>)
 800f28c:	4013      	ands	r3, r2
 800f28e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800f290:	68fb      	ldr	r3, [r7, #12]
 800f292:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800f296:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f298:	683b      	ldr	r3, [r7, #0]
 800f29a:	681b      	ldr	r3, [r3, #0]
 800f29c:	021b      	lsls	r3, r3, #8
 800f29e:	68fa      	ldr	r2, [r7, #12]
 800f2a0:	4313      	orrs	r3, r2
 800f2a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800f2a4:	693b      	ldr	r3, [r7, #16]
 800f2a6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800f2aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800f2ac:	683b      	ldr	r3, [r7, #0]
 800f2ae:	689b      	ldr	r3, [r3, #8]
 800f2b0:	031b      	lsls	r3, r3, #12
 800f2b2:	693a      	ldr	r2, [r7, #16]
 800f2b4:	4313      	orrs	r3, r2
 800f2b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	4a19      	ldr	r2, [pc, #100]	@ (800f320 <TIM_OC4_SetConfig+0xc0>)
 800f2bc:	4293      	cmp	r3, r2
 800f2be:	d00f      	beq.n	800f2e0 <TIM_OC4_SetConfig+0x80>
 800f2c0:	687b      	ldr	r3, [r7, #4]
 800f2c2:	4a18      	ldr	r2, [pc, #96]	@ (800f324 <TIM_OC4_SetConfig+0xc4>)
 800f2c4:	4293      	cmp	r3, r2
 800f2c6:	d00b      	beq.n	800f2e0 <TIM_OC4_SetConfig+0x80>
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	4a17      	ldr	r2, [pc, #92]	@ (800f328 <TIM_OC4_SetConfig+0xc8>)
 800f2cc:	4293      	cmp	r3, r2
 800f2ce:	d007      	beq.n	800f2e0 <TIM_OC4_SetConfig+0x80>
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	4a16      	ldr	r2, [pc, #88]	@ (800f32c <TIM_OC4_SetConfig+0xcc>)
 800f2d4:	4293      	cmp	r3, r2
 800f2d6:	d003      	beq.n	800f2e0 <TIM_OC4_SetConfig+0x80>
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	4a15      	ldr	r2, [pc, #84]	@ (800f330 <TIM_OC4_SetConfig+0xd0>)
 800f2dc:	4293      	cmp	r3, r2
 800f2de:	d109      	bne.n	800f2f4 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800f2e0:	697b      	ldr	r3, [r7, #20]
 800f2e2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800f2e6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800f2e8:	683b      	ldr	r3, [r7, #0]
 800f2ea:	695b      	ldr	r3, [r3, #20]
 800f2ec:	019b      	lsls	r3, r3, #6
 800f2ee:	697a      	ldr	r2, [r7, #20]
 800f2f0:	4313      	orrs	r3, r2
 800f2f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f2f4:	687b      	ldr	r3, [r7, #4]
 800f2f6:	697a      	ldr	r2, [r7, #20]
 800f2f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	68fa      	ldr	r2, [r7, #12]
 800f2fe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800f300:	683b      	ldr	r3, [r7, #0]
 800f302:	685a      	ldr	r2, [r3, #4]
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	693a      	ldr	r2, [r7, #16]
 800f30c:	621a      	str	r2, [r3, #32]
}
 800f30e:	bf00      	nop
 800f310:	371c      	adds	r7, #28
 800f312:	46bd      	mov	sp, r7
 800f314:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f318:	4770      	bx	lr
 800f31a:	bf00      	nop
 800f31c:	feff8fff 	.word	0xfeff8fff
 800f320:	40010000 	.word	0x40010000
 800f324:	40010400 	.word	0x40010400
 800f328:	40014000 	.word	0x40014000
 800f32c:	40014400 	.word	0x40014400
 800f330:	40014800 	.word	0x40014800

0800f334 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800f334:	b480      	push	{r7}
 800f336:	b087      	sub	sp, #28
 800f338:	af00      	add	r7, sp, #0
 800f33a:	6078      	str	r0, [r7, #4]
 800f33c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	6a1b      	ldr	r3, [r3, #32]
 800f342:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	6a1b      	ldr	r3, [r3, #32]
 800f348:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800f34c:	687b      	ldr	r3, [r7, #4]
 800f34e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	685b      	ldr	r3, [r3, #4]
 800f354:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f35a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800f35c:	68fa      	ldr	r2, [r7, #12]
 800f35e:	4b21      	ldr	r3, [pc, #132]	@ (800f3e4 <TIM_OC5_SetConfig+0xb0>)
 800f360:	4013      	ands	r3, r2
 800f362:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f364:	683b      	ldr	r3, [r7, #0]
 800f366:	681b      	ldr	r3, [r3, #0]
 800f368:	68fa      	ldr	r2, [r7, #12]
 800f36a:	4313      	orrs	r3, r2
 800f36c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800f36e:	693b      	ldr	r3, [r7, #16]
 800f370:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800f374:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800f376:	683b      	ldr	r3, [r7, #0]
 800f378:	689b      	ldr	r3, [r3, #8]
 800f37a:	041b      	lsls	r3, r3, #16
 800f37c:	693a      	ldr	r2, [r7, #16]
 800f37e:	4313      	orrs	r3, r2
 800f380:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	4a18      	ldr	r2, [pc, #96]	@ (800f3e8 <TIM_OC5_SetConfig+0xb4>)
 800f386:	4293      	cmp	r3, r2
 800f388:	d00f      	beq.n	800f3aa <TIM_OC5_SetConfig+0x76>
 800f38a:	687b      	ldr	r3, [r7, #4]
 800f38c:	4a17      	ldr	r2, [pc, #92]	@ (800f3ec <TIM_OC5_SetConfig+0xb8>)
 800f38e:	4293      	cmp	r3, r2
 800f390:	d00b      	beq.n	800f3aa <TIM_OC5_SetConfig+0x76>
 800f392:	687b      	ldr	r3, [r7, #4]
 800f394:	4a16      	ldr	r2, [pc, #88]	@ (800f3f0 <TIM_OC5_SetConfig+0xbc>)
 800f396:	4293      	cmp	r3, r2
 800f398:	d007      	beq.n	800f3aa <TIM_OC5_SetConfig+0x76>
 800f39a:	687b      	ldr	r3, [r7, #4]
 800f39c:	4a15      	ldr	r2, [pc, #84]	@ (800f3f4 <TIM_OC5_SetConfig+0xc0>)
 800f39e:	4293      	cmp	r3, r2
 800f3a0:	d003      	beq.n	800f3aa <TIM_OC5_SetConfig+0x76>
 800f3a2:	687b      	ldr	r3, [r7, #4]
 800f3a4:	4a14      	ldr	r2, [pc, #80]	@ (800f3f8 <TIM_OC5_SetConfig+0xc4>)
 800f3a6:	4293      	cmp	r3, r2
 800f3a8:	d109      	bne.n	800f3be <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800f3aa:	697b      	ldr	r3, [r7, #20]
 800f3ac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800f3b0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800f3b2:	683b      	ldr	r3, [r7, #0]
 800f3b4:	695b      	ldr	r3, [r3, #20]
 800f3b6:	021b      	lsls	r3, r3, #8
 800f3b8:	697a      	ldr	r2, [r7, #20]
 800f3ba:	4313      	orrs	r3, r2
 800f3bc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f3be:	687b      	ldr	r3, [r7, #4]
 800f3c0:	697a      	ldr	r2, [r7, #20]
 800f3c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	68fa      	ldr	r2, [r7, #12]
 800f3c8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800f3ca:	683b      	ldr	r3, [r7, #0]
 800f3cc:	685a      	ldr	r2, [r3, #4]
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f3d2:	687b      	ldr	r3, [r7, #4]
 800f3d4:	693a      	ldr	r2, [r7, #16]
 800f3d6:	621a      	str	r2, [r3, #32]
}
 800f3d8:	bf00      	nop
 800f3da:	371c      	adds	r7, #28
 800f3dc:	46bd      	mov	sp, r7
 800f3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3e2:	4770      	bx	lr
 800f3e4:	fffeff8f 	.word	0xfffeff8f
 800f3e8:	40010000 	.word	0x40010000
 800f3ec:	40010400 	.word	0x40010400
 800f3f0:	40014000 	.word	0x40014000
 800f3f4:	40014400 	.word	0x40014400
 800f3f8:	40014800 	.word	0x40014800

0800f3fc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800f3fc:	b480      	push	{r7}
 800f3fe:	b087      	sub	sp, #28
 800f400:	af00      	add	r7, sp, #0
 800f402:	6078      	str	r0, [r7, #4]
 800f404:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	6a1b      	ldr	r3, [r3, #32]
 800f40a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800f40c:	687b      	ldr	r3, [r7, #4]
 800f40e:	6a1b      	ldr	r3, [r3, #32]
 800f410:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	685b      	ldr	r3, [r3, #4]
 800f41c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800f41e:	687b      	ldr	r3, [r7, #4]
 800f420:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f422:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800f424:	68fa      	ldr	r2, [r7, #12]
 800f426:	4b22      	ldr	r3, [pc, #136]	@ (800f4b0 <TIM_OC6_SetConfig+0xb4>)
 800f428:	4013      	ands	r3, r2
 800f42a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f42c:	683b      	ldr	r3, [r7, #0]
 800f42e:	681b      	ldr	r3, [r3, #0]
 800f430:	021b      	lsls	r3, r3, #8
 800f432:	68fa      	ldr	r2, [r7, #12]
 800f434:	4313      	orrs	r3, r2
 800f436:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800f438:	693b      	ldr	r3, [r7, #16]
 800f43a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800f43e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800f440:	683b      	ldr	r3, [r7, #0]
 800f442:	689b      	ldr	r3, [r3, #8]
 800f444:	051b      	lsls	r3, r3, #20
 800f446:	693a      	ldr	r2, [r7, #16]
 800f448:	4313      	orrs	r3, r2
 800f44a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	4a19      	ldr	r2, [pc, #100]	@ (800f4b4 <TIM_OC6_SetConfig+0xb8>)
 800f450:	4293      	cmp	r3, r2
 800f452:	d00f      	beq.n	800f474 <TIM_OC6_SetConfig+0x78>
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	4a18      	ldr	r2, [pc, #96]	@ (800f4b8 <TIM_OC6_SetConfig+0xbc>)
 800f458:	4293      	cmp	r3, r2
 800f45a:	d00b      	beq.n	800f474 <TIM_OC6_SetConfig+0x78>
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	4a17      	ldr	r2, [pc, #92]	@ (800f4bc <TIM_OC6_SetConfig+0xc0>)
 800f460:	4293      	cmp	r3, r2
 800f462:	d007      	beq.n	800f474 <TIM_OC6_SetConfig+0x78>
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	4a16      	ldr	r2, [pc, #88]	@ (800f4c0 <TIM_OC6_SetConfig+0xc4>)
 800f468:	4293      	cmp	r3, r2
 800f46a:	d003      	beq.n	800f474 <TIM_OC6_SetConfig+0x78>
 800f46c:	687b      	ldr	r3, [r7, #4]
 800f46e:	4a15      	ldr	r2, [pc, #84]	@ (800f4c4 <TIM_OC6_SetConfig+0xc8>)
 800f470:	4293      	cmp	r3, r2
 800f472:	d109      	bne.n	800f488 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800f474:	697b      	ldr	r3, [r7, #20]
 800f476:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800f47a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800f47c:	683b      	ldr	r3, [r7, #0]
 800f47e:	695b      	ldr	r3, [r3, #20]
 800f480:	029b      	lsls	r3, r3, #10
 800f482:	697a      	ldr	r2, [r7, #20]
 800f484:	4313      	orrs	r3, r2
 800f486:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	697a      	ldr	r2, [r7, #20]
 800f48c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	68fa      	ldr	r2, [r7, #12]
 800f492:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800f494:	683b      	ldr	r3, [r7, #0]
 800f496:	685a      	ldr	r2, [r3, #4]
 800f498:	687b      	ldr	r3, [r7, #4]
 800f49a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	693a      	ldr	r2, [r7, #16]
 800f4a0:	621a      	str	r2, [r3, #32]
}
 800f4a2:	bf00      	nop
 800f4a4:	371c      	adds	r7, #28
 800f4a6:	46bd      	mov	sp, r7
 800f4a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4ac:	4770      	bx	lr
 800f4ae:	bf00      	nop
 800f4b0:	feff8fff 	.word	0xfeff8fff
 800f4b4:	40010000 	.word	0x40010000
 800f4b8:	40010400 	.word	0x40010400
 800f4bc:	40014000 	.word	0x40014000
 800f4c0:	40014400 	.word	0x40014400
 800f4c4:	40014800 	.word	0x40014800

0800f4c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f4c8:	b480      	push	{r7}
 800f4ca:	b087      	sub	sp, #28
 800f4cc:	af00      	add	r7, sp, #0
 800f4ce:	60f8      	str	r0, [r7, #12]
 800f4d0:	60b9      	str	r1, [r7, #8]
 800f4d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800f4d4:	68fb      	ldr	r3, [r7, #12]
 800f4d6:	6a1b      	ldr	r3, [r3, #32]
 800f4d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f4da:	68fb      	ldr	r3, [r7, #12]
 800f4dc:	6a1b      	ldr	r3, [r3, #32]
 800f4de:	f023 0201 	bic.w	r2, r3, #1
 800f4e2:	68fb      	ldr	r3, [r7, #12]
 800f4e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f4e6:	68fb      	ldr	r3, [r7, #12]
 800f4e8:	699b      	ldr	r3, [r3, #24]
 800f4ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800f4ec:	693b      	ldr	r3, [r7, #16]
 800f4ee:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800f4f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	011b      	lsls	r3, r3, #4
 800f4f8:	693a      	ldr	r2, [r7, #16]
 800f4fa:	4313      	orrs	r3, r2
 800f4fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800f4fe:	697b      	ldr	r3, [r7, #20]
 800f500:	f023 030a 	bic.w	r3, r3, #10
 800f504:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800f506:	697a      	ldr	r2, [r7, #20]
 800f508:	68bb      	ldr	r3, [r7, #8]
 800f50a:	4313      	orrs	r3, r2
 800f50c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800f50e:	68fb      	ldr	r3, [r7, #12]
 800f510:	693a      	ldr	r2, [r7, #16]
 800f512:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f514:	68fb      	ldr	r3, [r7, #12]
 800f516:	697a      	ldr	r2, [r7, #20]
 800f518:	621a      	str	r2, [r3, #32]
}
 800f51a:	bf00      	nop
 800f51c:	371c      	adds	r7, #28
 800f51e:	46bd      	mov	sp, r7
 800f520:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f524:	4770      	bx	lr

0800f526 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f526:	b480      	push	{r7}
 800f528:	b087      	sub	sp, #28
 800f52a:	af00      	add	r7, sp, #0
 800f52c:	60f8      	str	r0, [r7, #12]
 800f52e:	60b9      	str	r1, [r7, #8]
 800f530:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800f532:	68fb      	ldr	r3, [r7, #12]
 800f534:	6a1b      	ldr	r3, [r3, #32]
 800f536:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f538:	68fb      	ldr	r3, [r7, #12]
 800f53a:	6a1b      	ldr	r3, [r3, #32]
 800f53c:	f023 0210 	bic.w	r2, r3, #16
 800f540:	68fb      	ldr	r3, [r7, #12]
 800f542:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f544:	68fb      	ldr	r3, [r7, #12]
 800f546:	699b      	ldr	r3, [r3, #24]
 800f548:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800f54a:	693b      	ldr	r3, [r7, #16]
 800f54c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800f550:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800f552:	687b      	ldr	r3, [r7, #4]
 800f554:	031b      	lsls	r3, r3, #12
 800f556:	693a      	ldr	r2, [r7, #16]
 800f558:	4313      	orrs	r3, r2
 800f55a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800f55c:	697b      	ldr	r3, [r7, #20]
 800f55e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800f562:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800f564:	68bb      	ldr	r3, [r7, #8]
 800f566:	011b      	lsls	r3, r3, #4
 800f568:	697a      	ldr	r2, [r7, #20]
 800f56a:	4313      	orrs	r3, r2
 800f56c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800f56e:	68fb      	ldr	r3, [r7, #12]
 800f570:	693a      	ldr	r2, [r7, #16]
 800f572:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f574:	68fb      	ldr	r3, [r7, #12]
 800f576:	697a      	ldr	r2, [r7, #20]
 800f578:	621a      	str	r2, [r3, #32]
}
 800f57a:	bf00      	nop
 800f57c:	371c      	adds	r7, #28
 800f57e:	46bd      	mov	sp, r7
 800f580:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f584:	4770      	bx	lr
	...

0800f588 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800f588:	b480      	push	{r7}
 800f58a:	b085      	sub	sp, #20
 800f58c:	af00      	add	r7, sp, #0
 800f58e:	6078      	str	r0, [r7, #4]
 800f590:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800f592:	687b      	ldr	r3, [r7, #4]
 800f594:	689b      	ldr	r3, [r3, #8]
 800f596:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800f598:	68fa      	ldr	r2, [r7, #12]
 800f59a:	4b09      	ldr	r3, [pc, #36]	@ (800f5c0 <TIM_ITRx_SetConfig+0x38>)
 800f59c:	4013      	ands	r3, r2
 800f59e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800f5a0:	683a      	ldr	r2, [r7, #0]
 800f5a2:	68fb      	ldr	r3, [r7, #12]
 800f5a4:	4313      	orrs	r3, r2
 800f5a6:	f043 0307 	orr.w	r3, r3, #7
 800f5aa:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f5ac:	687b      	ldr	r3, [r7, #4]
 800f5ae:	68fa      	ldr	r2, [r7, #12]
 800f5b0:	609a      	str	r2, [r3, #8]
}
 800f5b2:	bf00      	nop
 800f5b4:	3714      	adds	r7, #20
 800f5b6:	46bd      	mov	sp, r7
 800f5b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5bc:	4770      	bx	lr
 800f5be:	bf00      	nop
 800f5c0:	ffcfff8f 	.word	0xffcfff8f

0800f5c4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800f5c4:	b480      	push	{r7}
 800f5c6:	b087      	sub	sp, #28
 800f5c8:	af00      	add	r7, sp, #0
 800f5ca:	60f8      	str	r0, [r7, #12]
 800f5cc:	60b9      	str	r1, [r7, #8]
 800f5ce:	607a      	str	r2, [r7, #4]
 800f5d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800f5d2:	68fb      	ldr	r3, [r7, #12]
 800f5d4:	689b      	ldr	r3, [r3, #8]
 800f5d6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f5d8:	697b      	ldr	r3, [r7, #20]
 800f5da:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800f5de:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800f5e0:	683b      	ldr	r3, [r7, #0]
 800f5e2:	021a      	lsls	r2, r3, #8
 800f5e4:	687b      	ldr	r3, [r7, #4]
 800f5e6:	431a      	orrs	r2, r3
 800f5e8:	68bb      	ldr	r3, [r7, #8]
 800f5ea:	4313      	orrs	r3, r2
 800f5ec:	697a      	ldr	r2, [r7, #20]
 800f5ee:	4313      	orrs	r3, r2
 800f5f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f5f2:	68fb      	ldr	r3, [r7, #12]
 800f5f4:	697a      	ldr	r2, [r7, #20]
 800f5f6:	609a      	str	r2, [r3, #8]
}
 800f5f8:	bf00      	nop
 800f5fa:	371c      	adds	r7, #28
 800f5fc:	46bd      	mov	sp, r7
 800f5fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f602:	4770      	bx	lr

0800f604 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800f604:	b480      	push	{r7}
 800f606:	b087      	sub	sp, #28
 800f608:	af00      	add	r7, sp, #0
 800f60a:	60f8      	str	r0, [r7, #12]
 800f60c:	60b9      	str	r1, [r7, #8]
 800f60e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800f610:	68bb      	ldr	r3, [r7, #8]
 800f612:	f003 031f 	and.w	r3, r3, #31
 800f616:	2201      	movs	r2, #1
 800f618:	fa02 f303 	lsl.w	r3, r2, r3
 800f61c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800f61e:	68fb      	ldr	r3, [r7, #12]
 800f620:	6a1a      	ldr	r2, [r3, #32]
 800f622:	697b      	ldr	r3, [r7, #20]
 800f624:	43db      	mvns	r3, r3
 800f626:	401a      	ands	r2, r3
 800f628:	68fb      	ldr	r3, [r7, #12]
 800f62a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800f62c:	68fb      	ldr	r3, [r7, #12]
 800f62e:	6a1a      	ldr	r2, [r3, #32]
 800f630:	68bb      	ldr	r3, [r7, #8]
 800f632:	f003 031f 	and.w	r3, r3, #31
 800f636:	6879      	ldr	r1, [r7, #4]
 800f638:	fa01 f303 	lsl.w	r3, r1, r3
 800f63c:	431a      	orrs	r2, r3
 800f63e:	68fb      	ldr	r3, [r7, #12]
 800f640:	621a      	str	r2, [r3, #32]
}
 800f642:	bf00      	nop
 800f644:	371c      	adds	r7, #28
 800f646:	46bd      	mov	sp, r7
 800f648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f64c:	4770      	bx	lr
	...

0800f650 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800f650:	b480      	push	{r7}
 800f652:	b085      	sub	sp, #20
 800f654:	af00      	add	r7, sp, #0
 800f656:	6078      	str	r0, [r7, #4]
 800f658:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800f65a:	687b      	ldr	r3, [r7, #4]
 800f65c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800f660:	2b01      	cmp	r3, #1
 800f662:	d101      	bne.n	800f668 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800f664:	2302      	movs	r3, #2
 800f666:	e077      	b.n	800f758 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	2201      	movs	r2, #1
 800f66c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	2202      	movs	r2, #2
 800f674:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	681b      	ldr	r3, [r3, #0]
 800f67c:	685b      	ldr	r3, [r3, #4]
 800f67e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	681b      	ldr	r3, [r3, #0]
 800f684:	689b      	ldr	r3, [r3, #8]
 800f686:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800f688:	687b      	ldr	r3, [r7, #4]
 800f68a:	681b      	ldr	r3, [r3, #0]
 800f68c:	4a35      	ldr	r2, [pc, #212]	@ (800f764 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800f68e:	4293      	cmp	r3, r2
 800f690:	d004      	beq.n	800f69c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800f692:	687b      	ldr	r3, [r7, #4]
 800f694:	681b      	ldr	r3, [r3, #0]
 800f696:	4a34      	ldr	r2, [pc, #208]	@ (800f768 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800f698:	4293      	cmp	r3, r2
 800f69a:	d108      	bne.n	800f6ae <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800f69c:	68fb      	ldr	r3, [r7, #12]
 800f69e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800f6a2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800f6a4:	683b      	ldr	r3, [r7, #0]
 800f6a6:	685b      	ldr	r3, [r3, #4]
 800f6a8:	68fa      	ldr	r2, [r7, #12]
 800f6aa:	4313      	orrs	r3, r2
 800f6ac:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800f6ae:	68fb      	ldr	r3, [r7, #12]
 800f6b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f6b4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800f6b6:	683b      	ldr	r3, [r7, #0]
 800f6b8:	681b      	ldr	r3, [r3, #0]
 800f6ba:	68fa      	ldr	r2, [r7, #12]
 800f6bc:	4313      	orrs	r3, r2
 800f6be:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	681b      	ldr	r3, [r3, #0]
 800f6c4:	68fa      	ldr	r2, [r7, #12]
 800f6c6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	681b      	ldr	r3, [r3, #0]
 800f6cc:	4a25      	ldr	r2, [pc, #148]	@ (800f764 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800f6ce:	4293      	cmp	r3, r2
 800f6d0:	d02c      	beq.n	800f72c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f6d2:	687b      	ldr	r3, [r7, #4]
 800f6d4:	681b      	ldr	r3, [r3, #0]
 800f6d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f6da:	d027      	beq.n	800f72c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f6dc:	687b      	ldr	r3, [r7, #4]
 800f6de:	681b      	ldr	r3, [r3, #0]
 800f6e0:	4a22      	ldr	r2, [pc, #136]	@ (800f76c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800f6e2:	4293      	cmp	r3, r2
 800f6e4:	d022      	beq.n	800f72c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f6e6:	687b      	ldr	r3, [r7, #4]
 800f6e8:	681b      	ldr	r3, [r3, #0]
 800f6ea:	4a21      	ldr	r2, [pc, #132]	@ (800f770 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800f6ec:	4293      	cmp	r3, r2
 800f6ee:	d01d      	beq.n	800f72c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f6f0:	687b      	ldr	r3, [r7, #4]
 800f6f2:	681b      	ldr	r3, [r3, #0]
 800f6f4:	4a1f      	ldr	r2, [pc, #124]	@ (800f774 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800f6f6:	4293      	cmp	r3, r2
 800f6f8:	d018      	beq.n	800f72c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f6fa:	687b      	ldr	r3, [r7, #4]
 800f6fc:	681b      	ldr	r3, [r3, #0]
 800f6fe:	4a1a      	ldr	r2, [pc, #104]	@ (800f768 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800f700:	4293      	cmp	r3, r2
 800f702:	d013      	beq.n	800f72c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f704:	687b      	ldr	r3, [r7, #4]
 800f706:	681b      	ldr	r3, [r3, #0]
 800f708:	4a1b      	ldr	r2, [pc, #108]	@ (800f778 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800f70a:	4293      	cmp	r3, r2
 800f70c:	d00e      	beq.n	800f72c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	681b      	ldr	r3, [r3, #0]
 800f712:	4a1a      	ldr	r2, [pc, #104]	@ (800f77c <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800f714:	4293      	cmp	r3, r2
 800f716:	d009      	beq.n	800f72c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	681b      	ldr	r3, [r3, #0]
 800f71c:	4a18      	ldr	r2, [pc, #96]	@ (800f780 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800f71e:	4293      	cmp	r3, r2
 800f720:	d004      	beq.n	800f72c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f722:	687b      	ldr	r3, [r7, #4]
 800f724:	681b      	ldr	r3, [r3, #0]
 800f726:	4a17      	ldr	r2, [pc, #92]	@ (800f784 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800f728:	4293      	cmp	r3, r2
 800f72a:	d10c      	bne.n	800f746 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800f72c:	68bb      	ldr	r3, [r7, #8]
 800f72e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f732:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800f734:	683b      	ldr	r3, [r7, #0]
 800f736:	689b      	ldr	r3, [r3, #8]
 800f738:	68ba      	ldr	r2, [r7, #8]
 800f73a:	4313      	orrs	r3, r2
 800f73c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800f73e:	687b      	ldr	r3, [r7, #4]
 800f740:	681b      	ldr	r3, [r3, #0]
 800f742:	68ba      	ldr	r2, [r7, #8]
 800f744:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800f746:	687b      	ldr	r3, [r7, #4]
 800f748:	2201      	movs	r2, #1
 800f74a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800f74e:	687b      	ldr	r3, [r7, #4]
 800f750:	2200      	movs	r2, #0
 800f752:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800f756:	2300      	movs	r3, #0
}
 800f758:	4618      	mov	r0, r3
 800f75a:	3714      	adds	r7, #20
 800f75c:	46bd      	mov	sp, r7
 800f75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f762:	4770      	bx	lr
 800f764:	40010000 	.word	0x40010000
 800f768:	40010400 	.word	0x40010400
 800f76c:	40000400 	.word	0x40000400
 800f770:	40000800 	.word	0x40000800
 800f774:	40000c00 	.word	0x40000c00
 800f778:	40001800 	.word	0x40001800
 800f77c:	40014000 	.word	0x40014000
 800f780:	4000e000 	.word	0x4000e000
 800f784:	4000e400 	.word	0x4000e400

0800f788 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800f788:	b480      	push	{r7}
 800f78a:	b083      	sub	sp, #12
 800f78c:	af00      	add	r7, sp, #0
 800f78e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800f790:	bf00      	nop
 800f792:	370c      	adds	r7, #12
 800f794:	46bd      	mov	sp, r7
 800f796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f79a:	4770      	bx	lr

0800f79c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800f79c:	b480      	push	{r7}
 800f79e:	b083      	sub	sp, #12
 800f7a0:	af00      	add	r7, sp, #0
 800f7a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800f7a4:	bf00      	nop
 800f7a6:	370c      	adds	r7, #12
 800f7a8:	46bd      	mov	sp, r7
 800f7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7ae:	4770      	bx	lr

0800f7b0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800f7b0:	b480      	push	{r7}
 800f7b2:	b083      	sub	sp, #12
 800f7b4:	af00      	add	r7, sp, #0
 800f7b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800f7b8:	bf00      	nop
 800f7ba:	370c      	adds	r7, #12
 800f7bc:	46bd      	mov	sp, r7
 800f7be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7c2:	4770      	bx	lr

0800f7c4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800f7c4:	b580      	push	{r7, lr}
 800f7c6:	b082      	sub	sp, #8
 800f7c8:	af00      	add	r7, sp, #0
 800f7ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	2b00      	cmp	r3, #0
 800f7d0:	d101      	bne.n	800f7d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800f7d2:	2301      	movs	r3, #1
 800f7d4:	e042      	b.n	800f85c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800f7d6:	687b      	ldr	r3, [r7, #4]
 800f7d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f7dc:	2b00      	cmp	r3, #0
 800f7de:	d106      	bne.n	800f7ee <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800f7e0:	687b      	ldr	r3, [r7, #4]
 800f7e2:	2200      	movs	r2, #0
 800f7e4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800f7e8:	6878      	ldr	r0, [r7, #4]
 800f7ea:	f7f2 fca9 	bl	8002140 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	2224      	movs	r2, #36	@ 0x24
 800f7f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800f7f6:	687b      	ldr	r3, [r7, #4]
 800f7f8:	681b      	ldr	r3, [r3, #0]
 800f7fa:	681a      	ldr	r2, [r3, #0]
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	681b      	ldr	r3, [r3, #0]
 800f800:	f022 0201 	bic.w	r2, r2, #1
 800f804:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800f806:	687b      	ldr	r3, [r7, #4]
 800f808:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f80a:	2b00      	cmp	r3, #0
 800f80c:	d002      	beq.n	800f814 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800f80e:	6878      	ldr	r0, [r7, #4]
 800f810:	f000 fe94 	bl	801053c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800f814:	6878      	ldr	r0, [r7, #4]
 800f816:	f000 f825 	bl	800f864 <UART_SetConfig>
 800f81a:	4603      	mov	r3, r0
 800f81c:	2b01      	cmp	r3, #1
 800f81e:	d101      	bne.n	800f824 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800f820:	2301      	movs	r3, #1
 800f822:	e01b      	b.n	800f85c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	681b      	ldr	r3, [r3, #0]
 800f828:	685a      	ldr	r2, [r3, #4]
 800f82a:	687b      	ldr	r3, [r7, #4]
 800f82c:	681b      	ldr	r3, [r3, #0]
 800f82e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800f832:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	681b      	ldr	r3, [r3, #0]
 800f838:	689a      	ldr	r2, [r3, #8]
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	681b      	ldr	r3, [r3, #0]
 800f83e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800f842:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800f844:	687b      	ldr	r3, [r7, #4]
 800f846:	681b      	ldr	r3, [r3, #0]
 800f848:	681a      	ldr	r2, [r3, #0]
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	681b      	ldr	r3, [r3, #0]
 800f84e:	f042 0201 	orr.w	r2, r2, #1
 800f852:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800f854:	6878      	ldr	r0, [r7, #4]
 800f856:	f000 ff13 	bl	8010680 <UART_CheckIdleState>
 800f85a:	4603      	mov	r3, r0
}
 800f85c:	4618      	mov	r0, r3
 800f85e:	3708      	adds	r7, #8
 800f860:	46bd      	mov	sp, r7
 800f862:	bd80      	pop	{r7, pc}

0800f864 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800f864:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f868:	b092      	sub	sp, #72	@ 0x48
 800f86a:	af00      	add	r7, sp, #0
 800f86c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800f86e:	2300      	movs	r3, #0
 800f870:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800f874:	697b      	ldr	r3, [r7, #20]
 800f876:	689a      	ldr	r2, [r3, #8]
 800f878:	697b      	ldr	r3, [r7, #20]
 800f87a:	691b      	ldr	r3, [r3, #16]
 800f87c:	431a      	orrs	r2, r3
 800f87e:	697b      	ldr	r3, [r7, #20]
 800f880:	695b      	ldr	r3, [r3, #20]
 800f882:	431a      	orrs	r2, r3
 800f884:	697b      	ldr	r3, [r7, #20]
 800f886:	69db      	ldr	r3, [r3, #28]
 800f888:	4313      	orrs	r3, r2
 800f88a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800f88c:	697b      	ldr	r3, [r7, #20]
 800f88e:	681b      	ldr	r3, [r3, #0]
 800f890:	681a      	ldr	r2, [r3, #0]
 800f892:	4bbe      	ldr	r3, [pc, #760]	@ (800fb8c <UART_SetConfig+0x328>)
 800f894:	4013      	ands	r3, r2
 800f896:	697a      	ldr	r2, [r7, #20]
 800f898:	6812      	ldr	r2, [r2, #0]
 800f89a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800f89c:	430b      	orrs	r3, r1
 800f89e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800f8a0:	697b      	ldr	r3, [r7, #20]
 800f8a2:	681b      	ldr	r3, [r3, #0]
 800f8a4:	685b      	ldr	r3, [r3, #4]
 800f8a6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800f8aa:	697b      	ldr	r3, [r7, #20]
 800f8ac:	68da      	ldr	r2, [r3, #12]
 800f8ae:	697b      	ldr	r3, [r7, #20]
 800f8b0:	681b      	ldr	r3, [r3, #0]
 800f8b2:	430a      	orrs	r2, r1
 800f8b4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800f8b6:	697b      	ldr	r3, [r7, #20]
 800f8b8:	699b      	ldr	r3, [r3, #24]
 800f8ba:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800f8bc:	697b      	ldr	r3, [r7, #20]
 800f8be:	681b      	ldr	r3, [r3, #0]
 800f8c0:	4ab3      	ldr	r2, [pc, #716]	@ (800fb90 <UART_SetConfig+0x32c>)
 800f8c2:	4293      	cmp	r3, r2
 800f8c4:	d004      	beq.n	800f8d0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800f8c6:	697b      	ldr	r3, [r7, #20]
 800f8c8:	6a1b      	ldr	r3, [r3, #32]
 800f8ca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f8cc:	4313      	orrs	r3, r2
 800f8ce:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800f8d0:	697b      	ldr	r3, [r7, #20]
 800f8d2:	681b      	ldr	r3, [r3, #0]
 800f8d4:	689a      	ldr	r2, [r3, #8]
 800f8d6:	4baf      	ldr	r3, [pc, #700]	@ (800fb94 <UART_SetConfig+0x330>)
 800f8d8:	4013      	ands	r3, r2
 800f8da:	697a      	ldr	r2, [r7, #20]
 800f8dc:	6812      	ldr	r2, [r2, #0]
 800f8de:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800f8e0:	430b      	orrs	r3, r1
 800f8e2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800f8e4:	697b      	ldr	r3, [r7, #20]
 800f8e6:	681b      	ldr	r3, [r3, #0]
 800f8e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f8ea:	f023 010f 	bic.w	r1, r3, #15
 800f8ee:	697b      	ldr	r3, [r7, #20]
 800f8f0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f8f2:	697b      	ldr	r3, [r7, #20]
 800f8f4:	681b      	ldr	r3, [r3, #0]
 800f8f6:	430a      	orrs	r2, r1
 800f8f8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800f8fa:	697b      	ldr	r3, [r7, #20]
 800f8fc:	681b      	ldr	r3, [r3, #0]
 800f8fe:	4aa6      	ldr	r2, [pc, #664]	@ (800fb98 <UART_SetConfig+0x334>)
 800f900:	4293      	cmp	r3, r2
 800f902:	d177      	bne.n	800f9f4 <UART_SetConfig+0x190>
 800f904:	4ba5      	ldr	r3, [pc, #660]	@ (800fb9c <UART_SetConfig+0x338>)
 800f906:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f908:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800f90c:	2b28      	cmp	r3, #40	@ 0x28
 800f90e:	d86d      	bhi.n	800f9ec <UART_SetConfig+0x188>
 800f910:	a201      	add	r2, pc, #4	@ (adr r2, 800f918 <UART_SetConfig+0xb4>)
 800f912:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f916:	bf00      	nop
 800f918:	0800f9bd 	.word	0x0800f9bd
 800f91c:	0800f9ed 	.word	0x0800f9ed
 800f920:	0800f9ed 	.word	0x0800f9ed
 800f924:	0800f9ed 	.word	0x0800f9ed
 800f928:	0800f9ed 	.word	0x0800f9ed
 800f92c:	0800f9ed 	.word	0x0800f9ed
 800f930:	0800f9ed 	.word	0x0800f9ed
 800f934:	0800f9ed 	.word	0x0800f9ed
 800f938:	0800f9c5 	.word	0x0800f9c5
 800f93c:	0800f9ed 	.word	0x0800f9ed
 800f940:	0800f9ed 	.word	0x0800f9ed
 800f944:	0800f9ed 	.word	0x0800f9ed
 800f948:	0800f9ed 	.word	0x0800f9ed
 800f94c:	0800f9ed 	.word	0x0800f9ed
 800f950:	0800f9ed 	.word	0x0800f9ed
 800f954:	0800f9ed 	.word	0x0800f9ed
 800f958:	0800f9cd 	.word	0x0800f9cd
 800f95c:	0800f9ed 	.word	0x0800f9ed
 800f960:	0800f9ed 	.word	0x0800f9ed
 800f964:	0800f9ed 	.word	0x0800f9ed
 800f968:	0800f9ed 	.word	0x0800f9ed
 800f96c:	0800f9ed 	.word	0x0800f9ed
 800f970:	0800f9ed 	.word	0x0800f9ed
 800f974:	0800f9ed 	.word	0x0800f9ed
 800f978:	0800f9d5 	.word	0x0800f9d5
 800f97c:	0800f9ed 	.word	0x0800f9ed
 800f980:	0800f9ed 	.word	0x0800f9ed
 800f984:	0800f9ed 	.word	0x0800f9ed
 800f988:	0800f9ed 	.word	0x0800f9ed
 800f98c:	0800f9ed 	.word	0x0800f9ed
 800f990:	0800f9ed 	.word	0x0800f9ed
 800f994:	0800f9ed 	.word	0x0800f9ed
 800f998:	0800f9dd 	.word	0x0800f9dd
 800f99c:	0800f9ed 	.word	0x0800f9ed
 800f9a0:	0800f9ed 	.word	0x0800f9ed
 800f9a4:	0800f9ed 	.word	0x0800f9ed
 800f9a8:	0800f9ed 	.word	0x0800f9ed
 800f9ac:	0800f9ed 	.word	0x0800f9ed
 800f9b0:	0800f9ed 	.word	0x0800f9ed
 800f9b4:	0800f9ed 	.word	0x0800f9ed
 800f9b8:	0800f9e5 	.word	0x0800f9e5
 800f9bc:	2301      	movs	r3, #1
 800f9be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f9c2:	e326      	b.n	8010012 <UART_SetConfig+0x7ae>
 800f9c4:	2304      	movs	r3, #4
 800f9c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f9ca:	e322      	b.n	8010012 <UART_SetConfig+0x7ae>
 800f9cc:	2308      	movs	r3, #8
 800f9ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f9d2:	e31e      	b.n	8010012 <UART_SetConfig+0x7ae>
 800f9d4:	2310      	movs	r3, #16
 800f9d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f9da:	e31a      	b.n	8010012 <UART_SetConfig+0x7ae>
 800f9dc:	2320      	movs	r3, #32
 800f9de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f9e2:	e316      	b.n	8010012 <UART_SetConfig+0x7ae>
 800f9e4:	2340      	movs	r3, #64	@ 0x40
 800f9e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f9ea:	e312      	b.n	8010012 <UART_SetConfig+0x7ae>
 800f9ec:	2380      	movs	r3, #128	@ 0x80
 800f9ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f9f2:	e30e      	b.n	8010012 <UART_SetConfig+0x7ae>
 800f9f4:	697b      	ldr	r3, [r7, #20]
 800f9f6:	681b      	ldr	r3, [r3, #0]
 800f9f8:	4a69      	ldr	r2, [pc, #420]	@ (800fba0 <UART_SetConfig+0x33c>)
 800f9fa:	4293      	cmp	r3, r2
 800f9fc:	d130      	bne.n	800fa60 <UART_SetConfig+0x1fc>
 800f9fe:	4b67      	ldr	r3, [pc, #412]	@ (800fb9c <UART_SetConfig+0x338>)
 800fa00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fa02:	f003 0307 	and.w	r3, r3, #7
 800fa06:	2b05      	cmp	r3, #5
 800fa08:	d826      	bhi.n	800fa58 <UART_SetConfig+0x1f4>
 800fa0a:	a201      	add	r2, pc, #4	@ (adr r2, 800fa10 <UART_SetConfig+0x1ac>)
 800fa0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa10:	0800fa29 	.word	0x0800fa29
 800fa14:	0800fa31 	.word	0x0800fa31
 800fa18:	0800fa39 	.word	0x0800fa39
 800fa1c:	0800fa41 	.word	0x0800fa41
 800fa20:	0800fa49 	.word	0x0800fa49
 800fa24:	0800fa51 	.word	0x0800fa51
 800fa28:	2300      	movs	r3, #0
 800fa2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fa2e:	e2f0      	b.n	8010012 <UART_SetConfig+0x7ae>
 800fa30:	2304      	movs	r3, #4
 800fa32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fa36:	e2ec      	b.n	8010012 <UART_SetConfig+0x7ae>
 800fa38:	2308      	movs	r3, #8
 800fa3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fa3e:	e2e8      	b.n	8010012 <UART_SetConfig+0x7ae>
 800fa40:	2310      	movs	r3, #16
 800fa42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fa46:	e2e4      	b.n	8010012 <UART_SetConfig+0x7ae>
 800fa48:	2320      	movs	r3, #32
 800fa4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fa4e:	e2e0      	b.n	8010012 <UART_SetConfig+0x7ae>
 800fa50:	2340      	movs	r3, #64	@ 0x40
 800fa52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fa56:	e2dc      	b.n	8010012 <UART_SetConfig+0x7ae>
 800fa58:	2380      	movs	r3, #128	@ 0x80
 800fa5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fa5e:	e2d8      	b.n	8010012 <UART_SetConfig+0x7ae>
 800fa60:	697b      	ldr	r3, [r7, #20]
 800fa62:	681b      	ldr	r3, [r3, #0]
 800fa64:	4a4f      	ldr	r2, [pc, #316]	@ (800fba4 <UART_SetConfig+0x340>)
 800fa66:	4293      	cmp	r3, r2
 800fa68:	d130      	bne.n	800facc <UART_SetConfig+0x268>
 800fa6a:	4b4c      	ldr	r3, [pc, #304]	@ (800fb9c <UART_SetConfig+0x338>)
 800fa6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fa6e:	f003 0307 	and.w	r3, r3, #7
 800fa72:	2b05      	cmp	r3, #5
 800fa74:	d826      	bhi.n	800fac4 <UART_SetConfig+0x260>
 800fa76:	a201      	add	r2, pc, #4	@ (adr r2, 800fa7c <UART_SetConfig+0x218>)
 800fa78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa7c:	0800fa95 	.word	0x0800fa95
 800fa80:	0800fa9d 	.word	0x0800fa9d
 800fa84:	0800faa5 	.word	0x0800faa5
 800fa88:	0800faad 	.word	0x0800faad
 800fa8c:	0800fab5 	.word	0x0800fab5
 800fa90:	0800fabd 	.word	0x0800fabd
 800fa94:	2300      	movs	r3, #0
 800fa96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fa9a:	e2ba      	b.n	8010012 <UART_SetConfig+0x7ae>
 800fa9c:	2304      	movs	r3, #4
 800fa9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800faa2:	e2b6      	b.n	8010012 <UART_SetConfig+0x7ae>
 800faa4:	2308      	movs	r3, #8
 800faa6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800faaa:	e2b2      	b.n	8010012 <UART_SetConfig+0x7ae>
 800faac:	2310      	movs	r3, #16
 800faae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fab2:	e2ae      	b.n	8010012 <UART_SetConfig+0x7ae>
 800fab4:	2320      	movs	r3, #32
 800fab6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800faba:	e2aa      	b.n	8010012 <UART_SetConfig+0x7ae>
 800fabc:	2340      	movs	r3, #64	@ 0x40
 800fabe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fac2:	e2a6      	b.n	8010012 <UART_SetConfig+0x7ae>
 800fac4:	2380      	movs	r3, #128	@ 0x80
 800fac6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800faca:	e2a2      	b.n	8010012 <UART_SetConfig+0x7ae>
 800facc:	697b      	ldr	r3, [r7, #20]
 800face:	681b      	ldr	r3, [r3, #0]
 800fad0:	4a35      	ldr	r2, [pc, #212]	@ (800fba8 <UART_SetConfig+0x344>)
 800fad2:	4293      	cmp	r3, r2
 800fad4:	d130      	bne.n	800fb38 <UART_SetConfig+0x2d4>
 800fad6:	4b31      	ldr	r3, [pc, #196]	@ (800fb9c <UART_SetConfig+0x338>)
 800fad8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fada:	f003 0307 	and.w	r3, r3, #7
 800fade:	2b05      	cmp	r3, #5
 800fae0:	d826      	bhi.n	800fb30 <UART_SetConfig+0x2cc>
 800fae2:	a201      	add	r2, pc, #4	@ (adr r2, 800fae8 <UART_SetConfig+0x284>)
 800fae4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fae8:	0800fb01 	.word	0x0800fb01
 800faec:	0800fb09 	.word	0x0800fb09
 800faf0:	0800fb11 	.word	0x0800fb11
 800faf4:	0800fb19 	.word	0x0800fb19
 800faf8:	0800fb21 	.word	0x0800fb21
 800fafc:	0800fb29 	.word	0x0800fb29
 800fb00:	2300      	movs	r3, #0
 800fb02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fb06:	e284      	b.n	8010012 <UART_SetConfig+0x7ae>
 800fb08:	2304      	movs	r3, #4
 800fb0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fb0e:	e280      	b.n	8010012 <UART_SetConfig+0x7ae>
 800fb10:	2308      	movs	r3, #8
 800fb12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fb16:	e27c      	b.n	8010012 <UART_SetConfig+0x7ae>
 800fb18:	2310      	movs	r3, #16
 800fb1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fb1e:	e278      	b.n	8010012 <UART_SetConfig+0x7ae>
 800fb20:	2320      	movs	r3, #32
 800fb22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fb26:	e274      	b.n	8010012 <UART_SetConfig+0x7ae>
 800fb28:	2340      	movs	r3, #64	@ 0x40
 800fb2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fb2e:	e270      	b.n	8010012 <UART_SetConfig+0x7ae>
 800fb30:	2380      	movs	r3, #128	@ 0x80
 800fb32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fb36:	e26c      	b.n	8010012 <UART_SetConfig+0x7ae>
 800fb38:	697b      	ldr	r3, [r7, #20]
 800fb3a:	681b      	ldr	r3, [r3, #0]
 800fb3c:	4a1b      	ldr	r2, [pc, #108]	@ (800fbac <UART_SetConfig+0x348>)
 800fb3e:	4293      	cmp	r3, r2
 800fb40:	d142      	bne.n	800fbc8 <UART_SetConfig+0x364>
 800fb42:	4b16      	ldr	r3, [pc, #88]	@ (800fb9c <UART_SetConfig+0x338>)
 800fb44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fb46:	f003 0307 	and.w	r3, r3, #7
 800fb4a:	2b05      	cmp	r3, #5
 800fb4c:	d838      	bhi.n	800fbc0 <UART_SetConfig+0x35c>
 800fb4e:	a201      	add	r2, pc, #4	@ (adr r2, 800fb54 <UART_SetConfig+0x2f0>)
 800fb50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fb54:	0800fb6d 	.word	0x0800fb6d
 800fb58:	0800fb75 	.word	0x0800fb75
 800fb5c:	0800fb7d 	.word	0x0800fb7d
 800fb60:	0800fb85 	.word	0x0800fb85
 800fb64:	0800fbb1 	.word	0x0800fbb1
 800fb68:	0800fbb9 	.word	0x0800fbb9
 800fb6c:	2300      	movs	r3, #0
 800fb6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fb72:	e24e      	b.n	8010012 <UART_SetConfig+0x7ae>
 800fb74:	2304      	movs	r3, #4
 800fb76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fb7a:	e24a      	b.n	8010012 <UART_SetConfig+0x7ae>
 800fb7c:	2308      	movs	r3, #8
 800fb7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fb82:	e246      	b.n	8010012 <UART_SetConfig+0x7ae>
 800fb84:	2310      	movs	r3, #16
 800fb86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fb8a:	e242      	b.n	8010012 <UART_SetConfig+0x7ae>
 800fb8c:	cfff69f3 	.word	0xcfff69f3
 800fb90:	58000c00 	.word	0x58000c00
 800fb94:	11fff4ff 	.word	0x11fff4ff
 800fb98:	40011000 	.word	0x40011000
 800fb9c:	58024400 	.word	0x58024400
 800fba0:	40004400 	.word	0x40004400
 800fba4:	40004800 	.word	0x40004800
 800fba8:	40004c00 	.word	0x40004c00
 800fbac:	40005000 	.word	0x40005000
 800fbb0:	2320      	movs	r3, #32
 800fbb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fbb6:	e22c      	b.n	8010012 <UART_SetConfig+0x7ae>
 800fbb8:	2340      	movs	r3, #64	@ 0x40
 800fbba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fbbe:	e228      	b.n	8010012 <UART_SetConfig+0x7ae>
 800fbc0:	2380      	movs	r3, #128	@ 0x80
 800fbc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fbc6:	e224      	b.n	8010012 <UART_SetConfig+0x7ae>
 800fbc8:	697b      	ldr	r3, [r7, #20]
 800fbca:	681b      	ldr	r3, [r3, #0]
 800fbcc:	4ab1      	ldr	r2, [pc, #708]	@ (800fe94 <UART_SetConfig+0x630>)
 800fbce:	4293      	cmp	r3, r2
 800fbd0:	d176      	bne.n	800fcc0 <UART_SetConfig+0x45c>
 800fbd2:	4bb1      	ldr	r3, [pc, #708]	@ (800fe98 <UART_SetConfig+0x634>)
 800fbd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fbd6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800fbda:	2b28      	cmp	r3, #40	@ 0x28
 800fbdc:	d86c      	bhi.n	800fcb8 <UART_SetConfig+0x454>
 800fbde:	a201      	add	r2, pc, #4	@ (adr r2, 800fbe4 <UART_SetConfig+0x380>)
 800fbe0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fbe4:	0800fc89 	.word	0x0800fc89
 800fbe8:	0800fcb9 	.word	0x0800fcb9
 800fbec:	0800fcb9 	.word	0x0800fcb9
 800fbf0:	0800fcb9 	.word	0x0800fcb9
 800fbf4:	0800fcb9 	.word	0x0800fcb9
 800fbf8:	0800fcb9 	.word	0x0800fcb9
 800fbfc:	0800fcb9 	.word	0x0800fcb9
 800fc00:	0800fcb9 	.word	0x0800fcb9
 800fc04:	0800fc91 	.word	0x0800fc91
 800fc08:	0800fcb9 	.word	0x0800fcb9
 800fc0c:	0800fcb9 	.word	0x0800fcb9
 800fc10:	0800fcb9 	.word	0x0800fcb9
 800fc14:	0800fcb9 	.word	0x0800fcb9
 800fc18:	0800fcb9 	.word	0x0800fcb9
 800fc1c:	0800fcb9 	.word	0x0800fcb9
 800fc20:	0800fcb9 	.word	0x0800fcb9
 800fc24:	0800fc99 	.word	0x0800fc99
 800fc28:	0800fcb9 	.word	0x0800fcb9
 800fc2c:	0800fcb9 	.word	0x0800fcb9
 800fc30:	0800fcb9 	.word	0x0800fcb9
 800fc34:	0800fcb9 	.word	0x0800fcb9
 800fc38:	0800fcb9 	.word	0x0800fcb9
 800fc3c:	0800fcb9 	.word	0x0800fcb9
 800fc40:	0800fcb9 	.word	0x0800fcb9
 800fc44:	0800fca1 	.word	0x0800fca1
 800fc48:	0800fcb9 	.word	0x0800fcb9
 800fc4c:	0800fcb9 	.word	0x0800fcb9
 800fc50:	0800fcb9 	.word	0x0800fcb9
 800fc54:	0800fcb9 	.word	0x0800fcb9
 800fc58:	0800fcb9 	.word	0x0800fcb9
 800fc5c:	0800fcb9 	.word	0x0800fcb9
 800fc60:	0800fcb9 	.word	0x0800fcb9
 800fc64:	0800fca9 	.word	0x0800fca9
 800fc68:	0800fcb9 	.word	0x0800fcb9
 800fc6c:	0800fcb9 	.word	0x0800fcb9
 800fc70:	0800fcb9 	.word	0x0800fcb9
 800fc74:	0800fcb9 	.word	0x0800fcb9
 800fc78:	0800fcb9 	.word	0x0800fcb9
 800fc7c:	0800fcb9 	.word	0x0800fcb9
 800fc80:	0800fcb9 	.word	0x0800fcb9
 800fc84:	0800fcb1 	.word	0x0800fcb1
 800fc88:	2301      	movs	r3, #1
 800fc8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fc8e:	e1c0      	b.n	8010012 <UART_SetConfig+0x7ae>
 800fc90:	2304      	movs	r3, #4
 800fc92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fc96:	e1bc      	b.n	8010012 <UART_SetConfig+0x7ae>
 800fc98:	2308      	movs	r3, #8
 800fc9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fc9e:	e1b8      	b.n	8010012 <UART_SetConfig+0x7ae>
 800fca0:	2310      	movs	r3, #16
 800fca2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fca6:	e1b4      	b.n	8010012 <UART_SetConfig+0x7ae>
 800fca8:	2320      	movs	r3, #32
 800fcaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fcae:	e1b0      	b.n	8010012 <UART_SetConfig+0x7ae>
 800fcb0:	2340      	movs	r3, #64	@ 0x40
 800fcb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fcb6:	e1ac      	b.n	8010012 <UART_SetConfig+0x7ae>
 800fcb8:	2380      	movs	r3, #128	@ 0x80
 800fcba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fcbe:	e1a8      	b.n	8010012 <UART_SetConfig+0x7ae>
 800fcc0:	697b      	ldr	r3, [r7, #20]
 800fcc2:	681b      	ldr	r3, [r3, #0]
 800fcc4:	4a75      	ldr	r2, [pc, #468]	@ (800fe9c <UART_SetConfig+0x638>)
 800fcc6:	4293      	cmp	r3, r2
 800fcc8:	d130      	bne.n	800fd2c <UART_SetConfig+0x4c8>
 800fcca:	4b73      	ldr	r3, [pc, #460]	@ (800fe98 <UART_SetConfig+0x634>)
 800fccc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fcce:	f003 0307 	and.w	r3, r3, #7
 800fcd2:	2b05      	cmp	r3, #5
 800fcd4:	d826      	bhi.n	800fd24 <UART_SetConfig+0x4c0>
 800fcd6:	a201      	add	r2, pc, #4	@ (adr r2, 800fcdc <UART_SetConfig+0x478>)
 800fcd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fcdc:	0800fcf5 	.word	0x0800fcf5
 800fce0:	0800fcfd 	.word	0x0800fcfd
 800fce4:	0800fd05 	.word	0x0800fd05
 800fce8:	0800fd0d 	.word	0x0800fd0d
 800fcec:	0800fd15 	.word	0x0800fd15
 800fcf0:	0800fd1d 	.word	0x0800fd1d
 800fcf4:	2300      	movs	r3, #0
 800fcf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fcfa:	e18a      	b.n	8010012 <UART_SetConfig+0x7ae>
 800fcfc:	2304      	movs	r3, #4
 800fcfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fd02:	e186      	b.n	8010012 <UART_SetConfig+0x7ae>
 800fd04:	2308      	movs	r3, #8
 800fd06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fd0a:	e182      	b.n	8010012 <UART_SetConfig+0x7ae>
 800fd0c:	2310      	movs	r3, #16
 800fd0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fd12:	e17e      	b.n	8010012 <UART_SetConfig+0x7ae>
 800fd14:	2320      	movs	r3, #32
 800fd16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fd1a:	e17a      	b.n	8010012 <UART_SetConfig+0x7ae>
 800fd1c:	2340      	movs	r3, #64	@ 0x40
 800fd1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fd22:	e176      	b.n	8010012 <UART_SetConfig+0x7ae>
 800fd24:	2380      	movs	r3, #128	@ 0x80
 800fd26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fd2a:	e172      	b.n	8010012 <UART_SetConfig+0x7ae>
 800fd2c:	697b      	ldr	r3, [r7, #20]
 800fd2e:	681b      	ldr	r3, [r3, #0]
 800fd30:	4a5b      	ldr	r2, [pc, #364]	@ (800fea0 <UART_SetConfig+0x63c>)
 800fd32:	4293      	cmp	r3, r2
 800fd34:	d130      	bne.n	800fd98 <UART_SetConfig+0x534>
 800fd36:	4b58      	ldr	r3, [pc, #352]	@ (800fe98 <UART_SetConfig+0x634>)
 800fd38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fd3a:	f003 0307 	and.w	r3, r3, #7
 800fd3e:	2b05      	cmp	r3, #5
 800fd40:	d826      	bhi.n	800fd90 <UART_SetConfig+0x52c>
 800fd42:	a201      	add	r2, pc, #4	@ (adr r2, 800fd48 <UART_SetConfig+0x4e4>)
 800fd44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fd48:	0800fd61 	.word	0x0800fd61
 800fd4c:	0800fd69 	.word	0x0800fd69
 800fd50:	0800fd71 	.word	0x0800fd71
 800fd54:	0800fd79 	.word	0x0800fd79
 800fd58:	0800fd81 	.word	0x0800fd81
 800fd5c:	0800fd89 	.word	0x0800fd89
 800fd60:	2300      	movs	r3, #0
 800fd62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fd66:	e154      	b.n	8010012 <UART_SetConfig+0x7ae>
 800fd68:	2304      	movs	r3, #4
 800fd6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fd6e:	e150      	b.n	8010012 <UART_SetConfig+0x7ae>
 800fd70:	2308      	movs	r3, #8
 800fd72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fd76:	e14c      	b.n	8010012 <UART_SetConfig+0x7ae>
 800fd78:	2310      	movs	r3, #16
 800fd7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fd7e:	e148      	b.n	8010012 <UART_SetConfig+0x7ae>
 800fd80:	2320      	movs	r3, #32
 800fd82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fd86:	e144      	b.n	8010012 <UART_SetConfig+0x7ae>
 800fd88:	2340      	movs	r3, #64	@ 0x40
 800fd8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fd8e:	e140      	b.n	8010012 <UART_SetConfig+0x7ae>
 800fd90:	2380      	movs	r3, #128	@ 0x80
 800fd92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fd96:	e13c      	b.n	8010012 <UART_SetConfig+0x7ae>
 800fd98:	697b      	ldr	r3, [r7, #20]
 800fd9a:	681b      	ldr	r3, [r3, #0]
 800fd9c:	4a41      	ldr	r2, [pc, #260]	@ (800fea4 <UART_SetConfig+0x640>)
 800fd9e:	4293      	cmp	r3, r2
 800fda0:	f040 8082 	bne.w	800fea8 <UART_SetConfig+0x644>
 800fda4:	4b3c      	ldr	r3, [pc, #240]	@ (800fe98 <UART_SetConfig+0x634>)
 800fda6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fda8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800fdac:	2b28      	cmp	r3, #40	@ 0x28
 800fdae:	d86d      	bhi.n	800fe8c <UART_SetConfig+0x628>
 800fdb0:	a201      	add	r2, pc, #4	@ (adr r2, 800fdb8 <UART_SetConfig+0x554>)
 800fdb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fdb6:	bf00      	nop
 800fdb8:	0800fe5d 	.word	0x0800fe5d
 800fdbc:	0800fe8d 	.word	0x0800fe8d
 800fdc0:	0800fe8d 	.word	0x0800fe8d
 800fdc4:	0800fe8d 	.word	0x0800fe8d
 800fdc8:	0800fe8d 	.word	0x0800fe8d
 800fdcc:	0800fe8d 	.word	0x0800fe8d
 800fdd0:	0800fe8d 	.word	0x0800fe8d
 800fdd4:	0800fe8d 	.word	0x0800fe8d
 800fdd8:	0800fe65 	.word	0x0800fe65
 800fddc:	0800fe8d 	.word	0x0800fe8d
 800fde0:	0800fe8d 	.word	0x0800fe8d
 800fde4:	0800fe8d 	.word	0x0800fe8d
 800fde8:	0800fe8d 	.word	0x0800fe8d
 800fdec:	0800fe8d 	.word	0x0800fe8d
 800fdf0:	0800fe8d 	.word	0x0800fe8d
 800fdf4:	0800fe8d 	.word	0x0800fe8d
 800fdf8:	0800fe6d 	.word	0x0800fe6d
 800fdfc:	0800fe8d 	.word	0x0800fe8d
 800fe00:	0800fe8d 	.word	0x0800fe8d
 800fe04:	0800fe8d 	.word	0x0800fe8d
 800fe08:	0800fe8d 	.word	0x0800fe8d
 800fe0c:	0800fe8d 	.word	0x0800fe8d
 800fe10:	0800fe8d 	.word	0x0800fe8d
 800fe14:	0800fe8d 	.word	0x0800fe8d
 800fe18:	0800fe75 	.word	0x0800fe75
 800fe1c:	0800fe8d 	.word	0x0800fe8d
 800fe20:	0800fe8d 	.word	0x0800fe8d
 800fe24:	0800fe8d 	.word	0x0800fe8d
 800fe28:	0800fe8d 	.word	0x0800fe8d
 800fe2c:	0800fe8d 	.word	0x0800fe8d
 800fe30:	0800fe8d 	.word	0x0800fe8d
 800fe34:	0800fe8d 	.word	0x0800fe8d
 800fe38:	0800fe7d 	.word	0x0800fe7d
 800fe3c:	0800fe8d 	.word	0x0800fe8d
 800fe40:	0800fe8d 	.word	0x0800fe8d
 800fe44:	0800fe8d 	.word	0x0800fe8d
 800fe48:	0800fe8d 	.word	0x0800fe8d
 800fe4c:	0800fe8d 	.word	0x0800fe8d
 800fe50:	0800fe8d 	.word	0x0800fe8d
 800fe54:	0800fe8d 	.word	0x0800fe8d
 800fe58:	0800fe85 	.word	0x0800fe85
 800fe5c:	2301      	movs	r3, #1
 800fe5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fe62:	e0d6      	b.n	8010012 <UART_SetConfig+0x7ae>
 800fe64:	2304      	movs	r3, #4
 800fe66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fe6a:	e0d2      	b.n	8010012 <UART_SetConfig+0x7ae>
 800fe6c:	2308      	movs	r3, #8
 800fe6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fe72:	e0ce      	b.n	8010012 <UART_SetConfig+0x7ae>
 800fe74:	2310      	movs	r3, #16
 800fe76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fe7a:	e0ca      	b.n	8010012 <UART_SetConfig+0x7ae>
 800fe7c:	2320      	movs	r3, #32
 800fe7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fe82:	e0c6      	b.n	8010012 <UART_SetConfig+0x7ae>
 800fe84:	2340      	movs	r3, #64	@ 0x40
 800fe86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fe8a:	e0c2      	b.n	8010012 <UART_SetConfig+0x7ae>
 800fe8c:	2380      	movs	r3, #128	@ 0x80
 800fe8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fe92:	e0be      	b.n	8010012 <UART_SetConfig+0x7ae>
 800fe94:	40011400 	.word	0x40011400
 800fe98:	58024400 	.word	0x58024400
 800fe9c:	40007800 	.word	0x40007800
 800fea0:	40007c00 	.word	0x40007c00
 800fea4:	40011800 	.word	0x40011800
 800fea8:	697b      	ldr	r3, [r7, #20]
 800feaa:	681b      	ldr	r3, [r3, #0]
 800feac:	4aad      	ldr	r2, [pc, #692]	@ (8010164 <UART_SetConfig+0x900>)
 800feae:	4293      	cmp	r3, r2
 800feb0:	d176      	bne.n	800ffa0 <UART_SetConfig+0x73c>
 800feb2:	4bad      	ldr	r3, [pc, #692]	@ (8010168 <UART_SetConfig+0x904>)
 800feb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800feb6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800feba:	2b28      	cmp	r3, #40	@ 0x28
 800febc:	d86c      	bhi.n	800ff98 <UART_SetConfig+0x734>
 800febe:	a201      	add	r2, pc, #4	@ (adr r2, 800fec4 <UART_SetConfig+0x660>)
 800fec0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fec4:	0800ff69 	.word	0x0800ff69
 800fec8:	0800ff99 	.word	0x0800ff99
 800fecc:	0800ff99 	.word	0x0800ff99
 800fed0:	0800ff99 	.word	0x0800ff99
 800fed4:	0800ff99 	.word	0x0800ff99
 800fed8:	0800ff99 	.word	0x0800ff99
 800fedc:	0800ff99 	.word	0x0800ff99
 800fee0:	0800ff99 	.word	0x0800ff99
 800fee4:	0800ff71 	.word	0x0800ff71
 800fee8:	0800ff99 	.word	0x0800ff99
 800feec:	0800ff99 	.word	0x0800ff99
 800fef0:	0800ff99 	.word	0x0800ff99
 800fef4:	0800ff99 	.word	0x0800ff99
 800fef8:	0800ff99 	.word	0x0800ff99
 800fefc:	0800ff99 	.word	0x0800ff99
 800ff00:	0800ff99 	.word	0x0800ff99
 800ff04:	0800ff79 	.word	0x0800ff79
 800ff08:	0800ff99 	.word	0x0800ff99
 800ff0c:	0800ff99 	.word	0x0800ff99
 800ff10:	0800ff99 	.word	0x0800ff99
 800ff14:	0800ff99 	.word	0x0800ff99
 800ff18:	0800ff99 	.word	0x0800ff99
 800ff1c:	0800ff99 	.word	0x0800ff99
 800ff20:	0800ff99 	.word	0x0800ff99
 800ff24:	0800ff81 	.word	0x0800ff81
 800ff28:	0800ff99 	.word	0x0800ff99
 800ff2c:	0800ff99 	.word	0x0800ff99
 800ff30:	0800ff99 	.word	0x0800ff99
 800ff34:	0800ff99 	.word	0x0800ff99
 800ff38:	0800ff99 	.word	0x0800ff99
 800ff3c:	0800ff99 	.word	0x0800ff99
 800ff40:	0800ff99 	.word	0x0800ff99
 800ff44:	0800ff89 	.word	0x0800ff89
 800ff48:	0800ff99 	.word	0x0800ff99
 800ff4c:	0800ff99 	.word	0x0800ff99
 800ff50:	0800ff99 	.word	0x0800ff99
 800ff54:	0800ff99 	.word	0x0800ff99
 800ff58:	0800ff99 	.word	0x0800ff99
 800ff5c:	0800ff99 	.word	0x0800ff99
 800ff60:	0800ff99 	.word	0x0800ff99
 800ff64:	0800ff91 	.word	0x0800ff91
 800ff68:	2301      	movs	r3, #1
 800ff6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ff6e:	e050      	b.n	8010012 <UART_SetConfig+0x7ae>
 800ff70:	2304      	movs	r3, #4
 800ff72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ff76:	e04c      	b.n	8010012 <UART_SetConfig+0x7ae>
 800ff78:	2308      	movs	r3, #8
 800ff7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ff7e:	e048      	b.n	8010012 <UART_SetConfig+0x7ae>
 800ff80:	2310      	movs	r3, #16
 800ff82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ff86:	e044      	b.n	8010012 <UART_SetConfig+0x7ae>
 800ff88:	2320      	movs	r3, #32
 800ff8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ff8e:	e040      	b.n	8010012 <UART_SetConfig+0x7ae>
 800ff90:	2340      	movs	r3, #64	@ 0x40
 800ff92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ff96:	e03c      	b.n	8010012 <UART_SetConfig+0x7ae>
 800ff98:	2380      	movs	r3, #128	@ 0x80
 800ff9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ff9e:	e038      	b.n	8010012 <UART_SetConfig+0x7ae>
 800ffa0:	697b      	ldr	r3, [r7, #20]
 800ffa2:	681b      	ldr	r3, [r3, #0]
 800ffa4:	4a71      	ldr	r2, [pc, #452]	@ (801016c <UART_SetConfig+0x908>)
 800ffa6:	4293      	cmp	r3, r2
 800ffa8:	d130      	bne.n	801000c <UART_SetConfig+0x7a8>
 800ffaa:	4b6f      	ldr	r3, [pc, #444]	@ (8010168 <UART_SetConfig+0x904>)
 800ffac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ffae:	f003 0307 	and.w	r3, r3, #7
 800ffb2:	2b05      	cmp	r3, #5
 800ffb4:	d826      	bhi.n	8010004 <UART_SetConfig+0x7a0>
 800ffb6:	a201      	add	r2, pc, #4	@ (adr r2, 800ffbc <UART_SetConfig+0x758>)
 800ffb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ffbc:	0800ffd5 	.word	0x0800ffd5
 800ffc0:	0800ffdd 	.word	0x0800ffdd
 800ffc4:	0800ffe5 	.word	0x0800ffe5
 800ffc8:	0800ffed 	.word	0x0800ffed
 800ffcc:	0800fff5 	.word	0x0800fff5
 800ffd0:	0800fffd 	.word	0x0800fffd
 800ffd4:	2302      	movs	r3, #2
 800ffd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ffda:	e01a      	b.n	8010012 <UART_SetConfig+0x7ae>
 800ffdc:	2304      	movs	r3, #4
 800ffde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ffe2:	e016      	b.n	8010012 <UART_SetConfig+0x7ae>
 800ffe4:	2308      	movs	r3, #8
 800ffe6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ffea:	e012      	b.n	8010012 <UART_SetConfig+0x7ae>
 800ffec:	2310      	movs	r3, #16
 800ffee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fff2:	e00e      	b.n	8010012 <UART_SetConfig+0x7ae>
 800fff4:	2320      	movs	r3, #32
 800fff6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fffa:	e00a      	b.n	8010012 <UART_SetConfig+0x7ae>
 800fffc:	2340      	movs	r3, #64	@ 0x40
 800fffe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010002:	e006      	b.n	8010012 <UART_SetConfig+0x7ae>
 8010004:	2380      	movs	r3, #128	@ 0x80
 8010006:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801000a:	e002      	b.n	8010012 <UART_SetConfig+0x7ae>
 801000c:	2380      	movs	r3, #128	@ 0x80
 801000e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8010012:	697b      	ldr	r3, [r7, #20]
 8010014:	681b      	ldr	r3, [r3, #0]
 8010016:	4a55      	ldr	r2, [pc, #340]	@ (801016c <UART_SetConfig+0x908>)
 8010018:	4293      	cmp	r3, r2
 801001a:	f040 80f8 	bne.w	801020e <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 801001e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8010022:	2b20      	cmp	r3, #32
 8010024:	dc46      	bgt.n	80100b4 <UART_SetConfig+0x850>
 8010026:	2b02      	cmp	r3, #2
 8010028:	db75      	blt.n	8010116 <UART_SetConfig+0x8b2>
 801002a:	3b02      	subs	r3, #2
 801002c:	2b1e      	cmp	r3, #30
 801002e:	d872      	bhi.n	8010116 <UART_SetConfig+0x8b2>
 8010030:	a201      	add	r2, pc, #4	@ (adr r2, 8010038 <UART_SetConfig+0x7d4>)
 8010032:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010036:	bf00      	nop
 8010038:	080100bb 	.word	0x080100bb
 801003c:	08010117 	.word	0x08010117
 8010040:	080100c3 	.word	0x080100c3
 8010044:	08010117 	.word	0x08010117
 8010048:	08010117 	.word	0x08010117
 801004c:	08010117 	.word	0x08010117
 8010050:	080100d3 	.word	0x080100d3
 8010054:	08010117 	.word	0x08010117
 8010058:	08010117 	.word	0x08010117
 801005c:	08010117 	.word	0x08010117
 8010060:	08010117 	.word	0x08010117
 8010064:	08010117 	.word	0x08010117
 8010068:	08010117 	.word	0x08010117
 801006c:	08010117 	.word	0x08010117
 8010070:	080100e3 	.word	0x080100e3
 8010074:	08010117 	.word	0x08010117
 8010078:	08010117 	.word	0x08010117
 801007c:	08010117 	.word	0x08010117
 8010080:	08010117 	.word	0x08010117
 8010084:	08010117 	.word	0x08010117
 8010088:	08010117 	.word	0x08010117
 801008c:	08010117 	.word	0x08010117
 8010090:	08010117 	.word	0x08010117
 8010094:	08010117 	.word	0x08010117
 8010098:	08010117 	.word	0x08010117
 801009c:	08010117 	.word	0x08010117
 80100a0:	08010117 	.word	0x08010117
 80100a4:	08010117 	.word	0x08010117
 80100a8:	08010117 	.word	0x08010117
 80100ac:	08010117 	.word	0x08010117
 80100b0:	08010109 	.word	0x08010109
 80100b4:	2b40      	cmp	r3, #64	@ 0x40
 80100b6:	d02a      	beq.n	801010e <UART_SetConfig+0x8aa>
 80100b8:	e02d      	b.n	8010116 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80100ba:	f7fd f91f 	bl	800d2fc <HAL_RCCEx_GetD3PCLK1Freq>
 80100be:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80100c0:	e02f      	b.n	8010122 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80100c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80100c6:	4618      	mov	r0, r3
 80100c8:	f7fd f92e 	bl	800d328 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80100cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80100ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80100d0:	e027      	b.n	8010122 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80100d2:	f107 0318 	add.w	r3, r7, #24
 80100d6:	4618      	mov	r0, r3
 80100d8:	f7fd fa7a 	bl	800d5d0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80100dc:	69fb      	ldr	r3, [r7, #28]
 80100de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80100e0:	e01f      	b.n	8010122 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80100e2:	4b21      	ldr	r3, [pc, #132]	@ (8010168 <UART_SetConfig+0x904>)
 80100e4:	681b      	ldr	r3, [r3, #0]
 80100e6:	f003 0320 	and.w	r3, r3, #32
 80100ea:	2b00      	cmp	r3, #0
 80100ec:	d009      	beq.n	8010102 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80100ee:	4b1e      	ldr	r3, [pc, #120]	@ (8010168 <UART_SetConfig+0x904>)
 80100f0:	681b      	ldr	r3, [r3, #0]
 80100f2:	08db      	lsrs	r3, r3, #3
 80100f4:	f003 0303 	and.w	r3, r3, #3
 80100f8:	4a1d      	ldr	r2, [pc, #116]	@ (8010170 <UART_SetConfig+0x90c>)
 80100fa:	fa22 f303 	lsr.w	r3, r2, r3
 80100fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8010100:	e00f      	b.n	8010122 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8010102:	4b1b      	ldr	r3, [pc, #108]	@ (8010170 <UART_SetConfig+0x90c>)
 8010104:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010106:	e00c      	b.n	8010122 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8010108:	4b1a      	ldr	r3, [pc, #104]	@ (8010174 <UART_SetConfig+0x910>)
 801010a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801010c:	e009      	b.n	8010122 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801010e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8010112:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010114:	e005      	b.n	8010122 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8010116:	2300      	movs	r3, #0
 8010118:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 801011a:	2301      	movs	r3, #1
 801011c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8010120:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8010122:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010124:	2b00      	cmp	r3, #0
 8010126:	f000 81ee 	beq.w	8010506 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 801012a:	697b      	ldr	r3, [r7, #20]
 801012c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801012e:	4a12      	ldr	r2, [pc, #72]	@ (8010178 <UART_SetConfig+0x914>)
 8010130:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010134:	461a      	mov	r2, r3
 8010136:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010138:	fbb3 f3f2 	udiv	r3, r3, r2
 801013c:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801013e:	697b      	ldr	r3, [r7, #20]
 8010140:	685a      	ldr	r2, [r3, #4]
 8010142:	4613      	mov	r3, r2
 8010144:	005b      	lsls	r3, r3, #1
 8010146:	4413      	add	r3, r2
 8010148:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801014a:	429a      	cmp	r2, r3
 801014c:	d305      	bcc.n	801015a <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 801014e:	697b      	ldr	r3, [r7, #20]
 8010150:	685b      	ldr	r3, [r3, #4]
 8010152:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8010154:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010156:	429a      	cmp	r2, r3
 8010158:	d910      	bls.n	801017c <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 801015a:	2301      	movs	r3, #1
 801015c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8010160:	e1d1      	b.n	8010506 <UART_SetConfig+0xca2>
 8010162:	bf00      	nop
 8010164:	40011c00 	.word	0x40011c00
 8010168:	58024400 	.word	0x58024400
 801016c:	58000c00 	.word	0x58000c00
 8010170:	03d09000 	.word	0x03d09000
 8010174:	003d0900 	.word	0x003d0900
 8010178:	08019d94 	.word	0x08019d94
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801017c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801017e:	2200      	movs	r2, #0
 8010180:	60bb      	str	r3, [r7, #8]
 8010182:	60fa      	str	r2, [r7, #12]
 8010184:	697b      	ldr	r3, [r7, #20]
 8010186:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010188:	4ac0      	ldr	r2, [pc, #768]	@ (801048c <UART_SetConfig+0xc28>)
 801018a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801018e:	b29b      	uxth	r3, r3
 8010190:	2200      	movs	r2, #0
 8010192:	603b      	str	r3, [r7, #0]
 8010194:	607a      	str	r2, [r7, #4]
 8010196:	e9d7 2300 	ldrd	r2, r3, [r7]
 801019a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801019e:	f7f0 fadb 	bl	8000758 <__aeabi_uldivmod>
 80101a2:	4602      	mov	r2, r0
 80101a4:	460b      	mov	r3, r1
 80101a6:	4610      	mov	r0, r2
 80101a8:	4619      	mov	r1, r3
 80101aa:	f04f 0200 	mov.w	r2, #0
 80101ae:	f04f 0300 	mov.w	r3, #0
 80101b2:	020b      	lsls	r3, r1, #8
 80101b4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80101b8:	0202      	lsls	r2, r0, #8
 80101ba:	6979      	ldr	r1, [r7, #20]
 80101bc:	6849      	ldr	r1, [r1, #4]
 80101be:	0849      	lsrs	r1, r1, #1
 80101c0:	2000      	movs	r0, #0
 80101c2:	460c      	mov	r4, r1
 80101c4:	4605      	mov	r5, r0
 80101c6:	eb12 0804 	adds.w	r8, r2, r4
 80101ca:	eb43 0905 	adc.w	r9, r3, r5
 80101ce:	697b      	ldr	r3, [r7, #20]
 80101d0:	685b      	ldr	r3, [r3, #4]
 80101d2:	2200      	movs	r2, #0
 80101d4:	469a      	mov	sl, r3
 80101d6:	4693      	mov	fp, r2
 80101d8:	4652      	mov	r2, sl
 80101da:	465b      	mov	r3, fp
 80101dc:	4640      	mov	r0, r8
 80101de:	4649      	mov	r1, r9
 80101e0:	f7f0 faba 	bl	8000758 <__aeabi_uldivmod>
 80101e4:	4602      	mov	r2, r0
 80101e6:	460b      	mov	r3, r1
 80101e8:	4613      	mov	r3, r2
 80101ea:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80101ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80101ee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80101f2:	d308      	bcc.n	8010206 <UART_SetConfig+0x9a2>
 80101f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80101f6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80101fa:	d204      	bcs.n	8010206 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 80101fc:	697b      	ldr	r3, [r7, #20]
 80101fe:	681b      	ldr	r3, [r3, #0]
 8010200:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010202:	60da      	str	r2, [r3, #12]
 8010204:	e17f      	b.n	8010506 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8010206:	2301      	movs	r3, #1
 8010208:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 801020c:	e17b      	b.n	8010506 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801020e:	697b      	ldr	r3, [r7, #20]
 8010210:	69db      	ldr	r3, [r3, #28]
 8010212:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8010216:	f040 80bd 	bne.w	8010394 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 801021a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 801021e:	2b20      	cmp	r3, #32
 8010220:	dc48      	bgt.n	80102b4 <UART_SetConfig+0xa50>
 8010222:	2b00      	cmp	r3, #0
 8010224:	db7b      	blt.n	801031e <UART_SetConfig+0xaba>
 8010226:	2b20      	cmp	r3, #32
 8010228:	d879      	bhi.n	801031e <UART_SetConfig+0xaba>
 801022a:	a201      	add	r2, pc, #4	@ (adr r2, 8010230 <UART_SetConfig+0x9cc>)
 801022c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010230:	080102bb 	.word	0x080102bb
 8010234:	080102c3 	.word	0x080102c3
 8010238:	0801031f 	.word	0x0801031f
 801023c:	0801031f 	.word	0x0801031f
 8010240:	080102cb 	.word	0x080102cb
 8010244:	0801031f 	.word	0x0801031f
 8010248:	0801031f 	.word	0x0801031f
 801024c:	0801031f 	.word	0x0801031f
 8010250:	080102db 	.word	0x080102db
 8010254:	0801031f 	.word	0x0801031f
 8010258:	0801031f 	.word	0x0801031f
 801025c:	0801031f 	.word	0x0801031f
 8010260:	0801031f 	.word	0x0801031f
 8010264:	0801031f 	.word	0x0801031f
 8010268:	0801031f 	.word	0x0801031f
 801026c:	0801031f 	.word	0x0801031f
 8010270:	080102eb 	.word	0x080102eb
 8010274:	0801031f 	.word	0x0801031f
 8010278:	0801031f 	.word	0x0801031f
 801027c:	0801031f 	.word	0x0801031f
 8010280:	0801031f 	.word	0x0801031f
 8010284:	0801031f 	.word	0x0801031f
 8010288:	0801031f 	.word	0x0801031f
 801028c:	0801031f 	.word	0x0801031f
 8010290:	0801031f 	.word	0x0801031f
 8010294:	0801031f 	.word	0x0801031f
 8010298:	0801031f 	.word	0x0801031f
 801029c:	0801031f 	.word	0x0801031f
 80102a0:	0801031f 	.word	0x0801031f
 80102a4:	0801031f 	.word	0x0801031f
 80102a8:	0801031f 	.word	0x0801031f
 80102ac:	0801031f 	.word	0x0801031f
 80102b0:	08010311 	.word	0x08010311
 80102b4:	2b40      	cmp	r3, #64	@ 0x40
 80102b6:	d02e      	beq.n	8010316 <UART_SetConfig+0xab2>
 80102b8:	e031      	b.n	801031e <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80102ba:	f7fb f981 	bl	800b5c0 <HAL_RCC_GetPCLK1Freq>
 80102be:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80102c0:	e033      	b.n	801032a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80102c2:	f7fb f993 	bl	800b5ec <HAL_RCC_GetPCLK2Freq>
 80102c6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80102c8:	e02f      	b.n	801032a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80102ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80102ce:	4618      	mov	r0, r3
 80102d0:	f7fd f82a 	bl	800d328 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80102d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80102d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80102d8:	e027      	b.n	801032a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80102da:	f107 0318 	add.w	r3, r7, #24
 80102de:	4618      	mov	r0, r3
 80102e0:	f7fd f976 	bl	800d5d0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80102e4:	69fb      	ldr	r3, [r7, #28]
 80102e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80102e8:	e01f      	b.n	801032a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80102ea:	4b69      	ldr	r3, [pc, #420]	@ (8010490 <UART_SetConfig+0xc2c>)
 80102ec:	681b      	ldr	r3, [r3, #0]
 80102ee:	f003 0320 	and.w	r3, r3, #32
 80102f2:	2b00      	cmp	r3, #0
 80102f4:	d009      	beq.n	801030a <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80102f6:	4b66      	ldr	r3, [pc, #408]	@ (8010490 <UART_SetConfig+0xc2c>)
 80102f8:	681b      	ldr	r3, [r3, #0]
 80102fa:	08db      	lsrs	r3, r3, #3
 80102fc:	f003 0303 	and.w	r3, r3, #3
 8010300:	4a64      	ldr	r2, [pc, #400]	@ (8010494 <UART_SetConfig+0xc30>)
 8010302:	fa22 f303 	lsr.w	r3, r2, r3
 8010306:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8010308:	e00f      	b.n	801032a <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 801030a:	4b62      	ldr	r3, [pc, #392]	@ (8010494 <UART_SetConfig+0xc30>)
 801030c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801030e:	e00c      	b.n	801032a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8010310:	4b61      	ldr	r3, [pc, #388]	@ (8010498 <UART_SetConfig+0xc34>)
 8010312:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010314:	e009      	b.n	801032a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010316:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801031a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801031c:	e005      	b.n	801032a <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 801031e:	2300      	movs	r3, #0
 8010320:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8010322:	2301      	movs	r3, #1
 8010324:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8010328:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801032a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801032c:	2b00      	cmp	r3, #0
 801032e:	f000 80ea 	beq.w	8010506 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010332:	697b      	ldr	r3, [r7, #20]
 8010334:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010336:	4a55      	ldr	r2, [pc, #340]	@ (801048c <UART_SetConfig+0xc28>)
 8010338:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801033c:	461a      	mov	r2, r3
 801033e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010340:	fbb3 f3f2 	udiv	r3, r3, r2
 8010344:	005a      	lsls	r2, r3, #1
 8010346:	697b      	ldr	r3, [r7, #20]
 8010348:	685b      	ldr	r3, [r3, #4]
 801034a:	085b      	lsrs	r3, r3, #1
 801034c:	441a      	add	r2, r3
 801034e:	697b      	ldr	r3, [r7, #20]
 8010350:	685b      	ldr	r3, [r3, #4]
 8010352:	fbb2 f3f3 	udiv	r3, r2, r3
 8010356:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010358:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801035a:	2b0f      	cmp	r3, #15
 801035c:	d916      	bls.n	801038c <UART_SetConfig+0xb28>
 801035e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010360:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010364:	d212      	bcs.n	801038c <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8010366:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010368:	b29b      	uxth	r3, r3
 801036a:	f023 030f 	bic.w	r3, r3, #15
 801036e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8010370:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010372:	085b      	lsrs	r3, r3, #1
 8010374:	b29b      	uxth	r3, r3
 8010376:	f003 0307 	and.w	r3, r3, #7
 801037a:	b29a      	uxth	r2, r3
 801037c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 801037e:	4313      	orrs	r3, r2
 8010380:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8010382:	697b      	ldr	r3, [r7, #20]
 8010384:	681b      	ldr	r3, [r3, #0]
 8010386:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8010388:	60da      	str	r2, [r3, #12]
 801038a:	e0bc      	b.n	8010506 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 801038c:	2301      	movs	r3, #1
 801038e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8010392:	e0b8      	b.n	8010506 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8010394:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8010398:	2b20      	cmp	r3, #32
 801039a:	dc4b      	bgt.n	8010434 <UART_SetConfig+0xbd0>
 801039c:	2b00      	cmp	r3, #0
 801039e:	f2c0 8087 	blt.w	80104b0 <UART_SetConfig+0xc4c>
 80103a2:	2b20      	cmp	r3, #32
 80103a4:	f200 8084 	bhi.w	80104b0 <UART_SetConfig+0xc4c>
 80103a8:	a201      	add	r2, pc, #4	@ (adr r2, 80103b0 <UART_SetConfig+0xb4c>)
 80103aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80103ae:	bf00      	nop
 80103b0:	0801043b 	.word	0x0801043b
 80103b4:	08010443 	.word	0x08010443
 80103b8:	080104b1 	.word	0x080104b1
 80103bc:	080104b1 	.word	0x080104b1
 80103c0:	0801044b 	.word	0x0801044b
 80103c4:	080104b1 	.word	0x080104b1
 80103c8:	080104b1 	.word	0x080104b1
 80103cc:	080104b1 	.word	0x080104b1
 80103d0:	0801045b 	.word	0x0801045b
 80103d4:	080104b1 	.word	0x080104b1
 80103d8:	080104b1 	.word	0x080104b1
 80103dc:	080104b1 	.word	0x080104b1
 80103e0:	080104b1 	.word	0x080104b1
 80103e4:	080104b1 	.word	0x080104b1
 80103e8:	080104b1 	.word	0x080104b1
 80103ec:	080104b1 	.word	0x080104b1
 80103f0:	0801046b 	.word	0x0801046b
 80103f4:	080104b1 	.word	0x080104b1
 80103f8:	080104b1 	.word	0x080104b1
 80103fc:	080104b1 	.word	0x080104b1
 8010400:	080104b1 	.word	0x080104b1
 8010404:	080104b1 	.word	0x080104b1
 8010408:	080104b1 	.word	0x080104b1
 801040c:	080104b1 	.word	0x080104b1
 8010410:	080104b1 	.word	0x080104b1
 8010414:	080104b1 	.word	0x080104b1
 8010418:	080104b1 	.word	0x080104b1
 801041c:	080104b1 	.word	0x080104b1
 8010420:	080104b1 	.word	0x080104b1
 8010424:	080104b1 	.word	0x080104b1
 8010428:	080104b1 	.word	0x080104b1
 801042c:	080104b1 	.word	0x080104b1
 8010430:	080104a3 	.word	0x080104a3
 8010434:	2b40      	cmp	r3, #64	@ 0x40
 8010436:	d037      	beq.n	80104a8 <UART_SetConfig+0xc44>
 8010438:	e03a      	b.n	80104b0 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801043a:	f7fb f8c1 	bl	800b5c0 <HAL_RCC_GetPCLK1Freq>
 801043e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8010440:	e03c      	b.n	80104bc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8010442:	f7fb f8d3 	bl	800b5ec <HAL_RCC_GetPCLK2Freq>
 8010446:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8010448:	e038      	b.n	80104bc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801044a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801044e:	4618      	mov	r0, r3
 8010450:	f7fc ff6a 	bl	800d328 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8010454:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010456:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010458:	e030      	b.n	80104bc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801045a:	f107 0318 	add.w	r3, r7, #24
 801045e:	4618      	mov	r0, r3
 8010460:	f7fd f8b6 	bl	800d5d0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8010464:	69fb      	ldr	r3, [r7, #28]
 8010466:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010468:	e028      	b.n	80104bc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801046a:	4b09      	ldr	r3, [pc, #36]	@ (8010490 <UART_SetConfig+0xc2c>)
 801046c:	681b      	ldr	r3, [r3, #0]
 801046e:	f003 0320 	and.w	r3, r3, #32
 8010472:	2b00      	cmp	r3, #0
 8010474:	d012      	beq.n	801049c <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8010476:	4b06      	ldr	r3, [pc, #24]	@ (8010490 <UART_SetConfig+0xc2c>)
 8010478:	681b      	ldr	r3, [r3, #0]
 801047a:	08db      	lsrs	r3, r3, #3
 801047c:	f003 0303 	and.w	r3, r3, #3
 8010480:	4a04      	ldr	r2, [pc, #16]	@ (8010494 <UART_SetConfig+0xc30>)
 8010482:	fa22 f303 	lsr.w	r3, r2, r3
 8010486:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8010488:	e018      	b.n	80104bc <UART_SetConfig+0xc58>
 801048a:	bf00      	nop
 801048c:	08019d94 	.word	0x08019d94
 8010490:	58024400 	.word	0x58024400
 8010494:	03d09000 	.word	0x03d09000
 8010498:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 801049c:	4b24      	ldr	r3, [pc, #144]	@ (8010530 <UART_SetConfig+0xccc>)
 801049e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80104a0:	e00c      	b.n	80104bc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80104a2:	4b24      	ldr	r3, [pc, #144]	@ (8010534 <UART_SetConfig+0xcd0>)
 80104a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80104a6:	e009      	b.n	80104bc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80104a8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80104ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80104ae:	e005      	b.n	80104bc <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 80104b0:	2300      	movs	r3, #0
 80104b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80104b4:	2301      	movs	r3, #1
 80104b6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80104ba:	bf00      	nop
    }

    if (pclk != 0U)
 80104bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80104be:	2b00      	cmp	r3, #0
 80104c0:	d021      	beq.n	8010506 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80104c2:	697b      	ldr	r3, [r7, #20]
 80104c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80104c6:	4a1c      	ldr	r2, [pc, #112]	@ (8010538 <UART_SetConfig+0xcd4>)
 80104c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80104cc:	461a      	mov	r2, r3
 80104ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80104d0:	fbb3 f2f2 	udiv	r2, r3, r2
 80104d4:	697b      	ldr	r3, [r7, #20]
 80104d6:	685b      	ldr	r3, [r3, #4]
 80104d8:	085b      	lsrs	r3, r3, #1
 80104da:	441a      	add	r2, r3
 80104dc:	697b      	ldr	r3, [r7, #20]
 80104de:	685b      	ldr	r3, [r3, #4]
 80104e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80104e4:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80104e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80104e8:	2b0f      	cmp	r3, #15
 80104ea:	d909      	bls.n	8010500 <UART_SetConfig+0xc9c>
 80104ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80104ee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80104f2:	d205      	bcs.n	8010500 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80104f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80104f6:	b29a      	uxth	r2, r3
 80104f8:	697b      	ldr	r3, [r7, #20]
 80104fa:	681b      	ldr	r3, [r3, #0]
 80104fc:	60da      	str	r2, [r3, #12]
 80104fe:	e002      	b.n	8010506 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8010500:	2301      	movs	r3, #1
 8010502:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8010506:	697b      	ldr	r3, [r7, #20]
 8010508:	2201      	movs	r2, #1
 801050a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 801050e:	697b      	ldr	r3, [r7, #20]
 8010510:	2201      	movs	r2, #1
 8010512:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8010516:	697b      	ldr	r3, [r7, #20]
 8010518:	2200      	movs	r2, #0
 801051a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 801051c:	697b      	ldr	r3, [r7, #20]
 801051e:	2200      	movs	r2, #0
 8010520:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8010522:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8010526:	4618      	mov	r0, r3
 8010528:	3748      	adds	r7, #72	@ 0x48
 801052a:	46bd      	mov	sp, r7
 801052c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8010530:	03d09000 	.word	0x03d09000
 8010534:	003d0900 	.word	0x003d0900
 8010538:	08019d94 	.word	0x08019d94

0801053c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 801053c:	b480      	push	{r7}
 801053e:	b083      	sub	sp, #12
 8010540:	af00      	add	r7, sp, #0
 8010542:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8010544:	687b      	ldr	r3, [r7, #4]
 8010546:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010548:	f003 0308 	and.w	r3, r3, #8
 801054c:	2b00      	cmp	r3, #0
 801054e:	d00a      	beq.n	8010566 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8010550:	687b      	ldr	r3, [r7, #4]
 8010552:	681b      	ldr	r3, [r3, #0]
 8010554:	685b      	ldr	r3, [r3, #4]
 8010556:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 801055a:	687b      	ldr	r3, [r7, #4]
 801055c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801055e:	687b      	ldr	r3, [r7, #4]
 8010560:	681b      	ldr	r3, [r3, #0]
 8010562:	430a      	orrs	r2, r1
 8010564:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8010566:	687b      	ldr	r3, [r7, #4]
 8010568:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801056a:	f003 0301 	and.w	r3, r3, #1
 801056e:	2b00      	cmp	r3, #0
 8010570:	d00a      	beq.n	8010588 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8010572:	687b      	ldr	r3, [r7, #4]
 8010574:	681b      	ldr	r3, [r3, #0]
 8010576:	685b      	ldr	r3, [r3, #4]
 8010578:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 801057c:	687b      	ldr	r3, [r7, #4]
 801057e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010580:	687b      	ldr	r3, [r7, #4]
 8010582:	681b      	ldr	r3, [r3, #0]
 8010584:	430a      	orrs	r2, r1
 8010586:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8010588:	687b      	ldr	r3, [r7, #4]
 801058a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801058c:	f003 0302 	and.w	r3, r3, #2
 8010590:	2b00      	cmp	r3, #0
 8010592:	d00a      	beq.n	80105aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8010594:	687b      	ldr	r3, [r7, #4]
 8010596:	681b      	ldr	r3, [r3, #0]
 8010598:	685b      	ldr	r3, [r3, #4]
 801059a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 801059e:	687b      	ldr	r3, [r7, #4]
 80105a0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80105a2:	687b      	ldr	r3, [r7, #4]
 80105a4:	681b      	ldr	r3, [r3, #0]
 80105a6:	430a      	orrs	r2, r1
 80105a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80105aa:	687b      	ldr	r3, [r7, #4]
 80105ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80105ae:	f003 0304 	and.w	r3, r3, #4
 80105b2:	2b00      	cmp	r3, #0
 80105b4:	d00a      	beq.n	80105cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80105b6:	687b      	ldr	r3, [r7, #4]
 80105b8:	681b      	ldr	r3, [r3, #0]
 80105ba:	685b      	ldr	r3, [r3, #4]
 80105bc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80105c0:	687b      	ldr	r3, [r7, #4]
 80105c2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80105c4:	687b      	ldr	r3, [r7, #4]
 80105c6:	681b      	ldr	r3, [r3, #0]
 80105c8:	430a      	orrs	r2, r1
 80105ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80105cc:	687b      	ldr	r3, [r7, #4]
 80105ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80105d0:	f003 0310 	and.w	r3, r3, #16
 80105d4:	2b00      	cmp	r3, #0
 80105d6:	d00a      	beq.n	80105ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80105d8:	687b      	ldr	r3, [r7, #4]
 80105da:	681b      	ldr	r3, [r3, #0]
 80105dc:	689b      	ldr	r3, [r3, #8]
 80105de:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80105e2:	687b      	ldr	r3, [r7, #4]
 80105e4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80105e6:	687b      	ldr	r3, [r7, #4]
 80105e8:	681b      	ldr	r3, [r3, #0]
 80105ea:	430a      	orrs	r2, r1
 80105ec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80105ee:	687b      	ldr	r3, [r7, #4]
 80105f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80105f2:	f003 0320 	and.w	r3, r3, #32
 80105f6:	2b00      	cmp	r3, #0
 80105f8:	d00a      	beq.n	8010610 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80105fa:	687b      	ldr	r3, [r7, #4]
 80105fc:	681b      	ldr	r3, [r3, #0]
 80105fe:	689b      	ldr	r3, [r3, #8]
 8010600:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8010604:	687b      	ldr	r3, [r7, #4]
 8010606:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8010608:	687b      	ldr	r3, [r7, #4]
 801060a:	681b      	ldr	r3, [r3, #0]
 801060c:	430a      	orrs	r2, r1
 801060e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8010610:	687b      	ldr	r3, [r7, #4]
 8010612:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010614:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010618:	2b00      	cmp	r3, #0
 801061a:	d01a      	beq.n	8010652 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 801061c:	687b      	ldr	r3, [r7, #4]
 801061e:	681b      	ldr	r3, [r3, #0]
 8010620:	685b      	ldr	r3, [r3, #4]
 8010622:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8010626:	687b      	ldr	r3, [r7, #4]
 8010628:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801062a:	687b      	ldr	r3, [r7, #4]
 801062c:	681b      	ldr	r3, [r3, #0]
 801062e:	430a      	orrs	r2, r1
 8010630:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8010632:	687b      	ldr	r3, [r7, #4]
 8010634:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010636:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801063a:	d10a      	bne.n	8010652 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 801063c:	687b      	ldr	r3, [r7, #4]
 801063e:	681b      	ldr	r3, [r3, #0]
 8010640:	685b      	ldr	r3, [r3, #4]
 8010642:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8010646:	687b      	ldr	r3, [r7, #4]
 8010648:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 801064a:	687b      	ldr	r3, [r7, #4]
 801064c:	681b      	ldr	r3, [r3, #0]
 801064e:	430a      	orrs	r2, r1
 8010650:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8010652:	687b      	ldr	r3, [r7, #4]
 8010654:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010656:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801065a:	2b00      	cmp	r3, #0
 801065c:	d00a      	beq.n	8010674 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801065e:	687b      	ldr	r3, [r7, #4]
 8010660:	681b      	ldr	r3, [r3, #0]
 8010662:	685b      	ldr	r3, [r3, #4]
 8010664:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8010668:	687b      	ldr	r3, [r7, #4]
 801066a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801066c:	687b      	ldr	r3, [r7, #4]
 801066e:	681b      	ldr	r3, [r3, #0]
 8010670:	430a      	orrs	r2, r1
 8010672:	605a      	str	r2, [r3, #4]
  }
}
 8010674:	bf00      	nop
 8010676:	370c      	adds	r7, #12
 8010678:	46bd      	mov	sp, r7
 801067a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801067e:	4770      	bx	lr

08010680 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8010680:	b580      	push	{r7, lr}
 8010682:	b098      	sub	sp, #96	@ 0x60
 8010684:	af02      	add	r7, sp, #8
 8010686:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010688:	687b      	ldr	r3, [r7, #4]
 801068a:	2200      	movs	r2, #0
 801068c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8010690:	f7f4 f9ae 	bl	80049f0 <HAL_GetTick>
 8010694:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8010696:	687b      	ldr	r3, [r7, #4]
 8010698:	681b      	ldr	r3, [r3, #0]
 801069a:	681b      	ldr	r3, [r3, #0]
 801069c:	f003 0308 	and.w	r3, r3, #8
 80106a0:	2b08      	cmp	r3, #8
 80106a2:	d12f      	bne.n	8010704 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80106a4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80106a8:	9300      	str	r3, [sp, #0]
 80106aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80106ac:	2200      	movs	r2, #0
 80106ae:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80106b2:	6878      	ldr	r0, [r7, #4]
 80106b4:	f000 f88e 	bl	80107d4 <UART_WaitOnFlagUntilTimeout>
 80106b8:	4603      	mov	r3, r0
 80106ba:	2b00      	cmp	r3, #0
 80106bc:	d022      	beq.n	8010704 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80106be:	687b      	ldr	r3, [r7, #4]
 80106c0:	681b      	ldr	r3, [r3, #0]
 80106c2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80106c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80106c6:	e853 3f00 	ldrex	r3, [r3]
 80106ca:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80106cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80106ce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80106d2:	653b      	str	r3, [r7, #80]	@ 0x50
 80106d4:	687b      	ldr	r3, [r7, #4]
 80106d6:	681b      	ldr	r3, [r3, #0]
 80106d8:	461a      	mov	r2, r3
 80106da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80106dc:	647b      	str	r3, [r7, #68]	@ 0x44
 80106de:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80106e0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80106e2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80106e4:	e841 2300 	strex	r3, r2, [r1]
 80106e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80106ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80106ec:	2b00      	cmp	r3, #0
 80106ee:	d1e6      	bne.n	80106be <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80106f0:	687b      	ldr	r3, [r7, #4]
 80106f2:	2220      	movs	r2, #32
 80106f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80106f8:	687b      	ldr	r3, [r7, #4]
 80106fa:	2200      	movs	r2, #0
 80106fc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010700:	2303      	movs	r3, #3
 8010702:	e063      	b.n	80107cc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8010704:	687b      	ldr	r3, [r7, #4]
 8010706:	681b      	ldr	r3, [r3, #0]
 8010708:	681b      	ldr	r3, [r3, #0]
 801070a:	f003 0304 	and.w	r3, r3, #4
 801070e:	2b04      	cmp	r3, #4
 8010710:	d149      	bne.n	80107a6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010712:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8010716:	9300      	str	r3, [sp, #0]
 8010718:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801071a:	2200      	movs	r2, #0
 801071c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8010720:	6878      	ldr	r0, [r7, #4]
 8010722:	f000 f857 	bl	80107d4 <UART_WaitOnFlagUntilTimeout>
 8010726:	4603      	mov	r3, r0
 8010728:	2b00      	cmp	r3, #0
 801072a:	d03c      	beq.n	80107a6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801072c:	687b      	ldr	r3, [r7, #4]
 801072e:	681b      	ldr	r3, [r3, #0]
 8010730:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010734:	e853 3f00 	ldrex	r3, [r3]
 8010738:	623b      	str	r3, [r7, #32]
   return(result);
 801073a:	6a3b      	ldr	r3, [r7, #32]
 801073c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8010740:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8010742:	687b      	ldr	r3, [r7, #4]
 8010744:	681b      	ldr	r3, [r3, #0]
 8010746:	461a      	mov	r2, r3
 8010748:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801074a:	633b      	str	r3, [r7, #48]	@ 0x30
 801074c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801074e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010750:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010752:	e841 2300 	strex	r3, r2, [r1]
 8010756:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8010758:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801075a:	2b00      	cmp	r3, #0
 801075c:	d1e6      	bne.n	801072c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801075e:	687b      	ldr	r3, [r7, #4]
 8010760:	681b      	ldr	r3, [r3, #0]
 8010762:	3308      	adds	r3, #8
 8010764:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010766:	693b      	ldr	r3, [r7, #16]
 8010768:	e853 3f00 	ldrex	r3, [r3]
 801076c:	60fb      	str	r3, [r7, #12]
   return(result);
 801076e:	68fb      	ldr	r3, [r7, #12]
 8010770:	f023 0301 	bic.w	r3, r3, #1
 8010774:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010776:	687b      	ldr	r3, [r7, #4]
 8010778:	681b      	ldr	r3, [r3, #0]
 801077a:	3308      	adds	r3, #8
 801077c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801077e:	61fa      	str	r2, [r7, #28]
 8010780:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010782:	69b9      	ldr	r1, [r7, #24]
 8010784:	69fa      	ldr	r2, [r7, #28]
 8010786:	e841 2300 	strex	r3, r2, [r1]
 801078a:	617b      	str	r3, [r7, #20]
   return(result);
 801078c:	697b      	ldr	r3, [r7, #20]
 801078e:	2b00      	cmp	r3, #0
 8010790:	d1e5      	bne.n	801075e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8010792:	687b      	ldr	r3, [r7, #4]
 8010794:	2220      	movs	r2, #32
 8010796:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 801079a:	687b      	ldr	r3, [r7, #4]
 801079c:	2200      	movs	r2, #0
 801079e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80107a2:	2303      	movs	r3, #3
 80107a4:	e012      	b.n	80107cc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80107a6:	687b      	ldr	r3, [r7, #4]
 80107a8:	2220      	movs	r2, #32
 80107aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80107ae:	687b      	ldr	r3, [r7, #4]
 80107b0:	2220      	movs	r2, #32
 80107b2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80107b6:	687b      	ldr	r3, [r7, #4]
 80107b8:	2200      	movs	r2, #0
 80107ba:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80107bc:	687b      	ldr	r3, [r7, #4]
 80107be:	2200      	movs	r2, #0
 80107c0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80107c2:	687b      	ldr	r3, [r7, #4]
 80107c4:	2200      	movs	r2, #0
 80107c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80107ca:	2300      	movs	r3, #0
}
 80107cc:	4618      	mov	r0, r3
 80107ce:	3758      	adds	r7, #88	@ 0x58
 80107d0:	46bd      	mov	sp, r7
 80107d2:	bd80      	pop	{r7, pc}

080107d4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80107d4:	b580      	push	{r7, lr}
 80107d6:	b084      	sub	sp, #16
 80107d8:	af00      	add	r7, sp, #0
 80107da:	60f8      	str	r0, [r7, #12]
 80107dc:	60b9      	str	r1, [r7, #8]
 80107de:	603b      	str	r3, [r7, #0]
 80107e0:	4613      	mov	r3, r2
 80107e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80107e4:	e04f      	b.n	8010886 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80107e6:	69bb      	ldr	r3, [r7, #24]
 80107e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80107ec:	d04b      	beq.n	8010886 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80107ee:	f7f4 f8ff 	bl	80049f0 <HAL_GetTick>
 80107f2:	4602      	mov	r2, r0
 80107f4:	683b      	ldr	r3, [r7, #0]
 80107f6:	1ad3      	subs	r3, r2, r3
 80107f8:	69ba      	ldr	r2, [r7, #24]
 80107fa:	429a      	cmp	r2, r3
 80107fc:	d302      	bcc.n	8010804 <UART_WaitOnFlagUntilTimeout+0x30>
 80107fe:	69bb      	ldr	r3, [r7, #24]
 8010800:	2b00      	cmp	r3, #0
 8010802:	d101      	bne.n	8010808 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8010804:	2303      	movs	r3, #3
 8010806:	e04e      	b.n	80108a6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8010808:	68fb      	ldr	r3, [r7, #12]
 801080a:	681b      	ldr	r3, [r3, #0]
 801080c:	681b      	ldr	r3, [r3, #0]
 801080e:	f003 0304 	and.w	r3, r3, #4
 8010812:	2b00      	cmp	r3, #0
 8010814:	d037      	beq.n	8010886 <UART_WaitOnFlagUntilTimeout+0xb2>
 8010816:	68bb      	ldr	r3, [r7, #8]
 8010818:	2b80      	cmp	r3, #128	@ 0x80
 801081a:	d034      	beq.n	8010886 <UART_WaitOnFlagUntilTimeout+0xb2>
 801081c:	68bb      	ldr	r3, [r7, #8]
 801081e:	2b40      	cmp	r3, #64	@ 0x40
 8010820:	d031      	beq.n	8010886 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8010822:	68fb      	ldr	r3, [r7, #12]
 8010824:	681b      	ldr	r3, [r3, #0]
 8010826:	69db      	ldr	r3, [r3, #28]
 8010828:	f003 0308 	and.w	r3, r3, #8
 801082c:	2b08      	cmp	r3, #8
 801082e:	d110      	bne.n	8010852 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8010830:	68fb      	ldr	r3, [r7, #12]
 8010832:	681b      	ldr	r3, [r3, #0]
 8010834:	2208      	movs	r2, #8
 8010836:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8010838:	68f8      	ldr	r0, [r7, #12]
 801083a:	f000 f839 	bl	80108b0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 801083e:	68fb      	ldr	r3, [r7, #12]
 8010840:	2208      	movs	r2, #8
 8010842:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8010846:	68fb      	ldr	r3, [r7, #12]
 8010848:	2200      	movs	r2, #0
 801084a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 801084e:	2301      	movs	r3, #1
 8010850:	e029      	b.n	80108a6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8010852:	68fb      	ldr	r3, [r7, #12]
 8010854:	681b      	ldr	r3, [r3, #0]
 8010856:	69db      	ldr	r3, [r3, #28]
 8010858:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801085c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8010860:	d111      	bne.n	8010886 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8010862:	68fb      	ldr	r3, [r7, #12]
 8010864:	681b      	ldr	r3, [r3, #0]
 8010866:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801086a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 801086c:	68f8      	ldr	r0, [r7, #12]
 801086e:	f000 f81f 	bl	80108b0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8010872:	68fb      	ldr	r3, [r7, #12]
 8010874:	2220      	movs	r2, #32
 8010876:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801087a:	68fb      	ldr	r3, [r7, #12]
 801087c:	2200      	movs	r2, #0
 801087e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8010882:	2303      	movs	r3, #3
 8010884:	e00f      	b.n	80108a6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010886:	68fb      	ldr	r3, [r7, #12]
 8010888:	681b      	ldr	r3, [r3, #0]
 801088a:	69da      	ldr	r2, [r3, #28]
 801088c:	68bb      	ldr	r3, [r7, #8]
 801088e:	4013      	ands	r3, r2
 8010890:	68ba      	ldr	r2, [r7, #8]
 8010892:	429a      	cmp	r2, r3
 8010894:	bf0c      	ite	eq
 8010896:	2301      	moveq	r3, #1
 8010898:	2300      	movne	r3, #0
 801089a:	b2db      	uxtb	r3, r3
 801089c:	461a      	mov	r2, r3
 801089e:	79fb      	ldrb	r3, [r7, #7]
 80108a0:	429a      	cmp	r2, r3
 80108a2:	d0a0      	beq.n	80107e6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80108a4:	2300      	movs	r3, #0
}
 80108a6:	4618      	mov	r0, r3
 80108a8:	3710      	adds	r7, #16
 80108aa:	46bd      	mov	sp, r7
 80108ac:	bd80      	pop	{r7, pc}
	...

080108b0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80108b0:	b480      	push	{r7}
 80108b2:	b095      	sub	sp, #84	@ 0x54
 80108b4:	af00      	add	r7, sp, #0
 80108b6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80108b8:	687b      	ldr	r3, [r7, #4]
 80108ba:	681b      	ldr	r3, [r3, #0]
 80108bc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80108be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80108c0:	e853 3f00 	ldrex	r3, [r3]
 80108c4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80108c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80108c8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80108cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80108ce:	687b      	ldr	r3, [r7, #4]
 80108d0:	681b      	ldr	r3, [r3, #0]
 80108d2:	461a      	mov	r2, r3
 80108d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80108d6:	643b      	str	r3, [r7, #64]	@ 0x40
 80108d8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80108da:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80108dc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80108de:	e841 2300 	strex	r3, r2, [r1]
 80108e2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80108e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80108e6:	2b00      	cmp	r3, #0
 80108e8:	d1e6      	bne.n	80108b8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80108ea:	687b      	ldr	r3, [r7, #4]
 80108ec:	681b      	ldr	r3, [r3, #0]
 80108ee:	3308      	adds	r3, #8
 80108f0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80108f2:	6a3b      	ldr	r3, [r7, #32]
 80108f4:	e853 3f00 	ldrex	r3, [r3]
 80108f8:	61fb      	str	r3, [r7, #28]
   return(result);
 80108fa:	69fa      	ldr	r2, [r7, #28]
 80108fc:	4b1e      	ldr	r3, [pc, #120]	@ (8010978 <UART_EndRxTransfer+0xc8>)
 80108fe:	4013      	ands	r3, r2
 8010900:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010902:	687b      	ldr	r3, [r7, #4]
 8010904:	681b      	ldr	r3, [r3, #0]
 8010906:	3308      	adds	r3, #8
 8010908:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801090a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801090c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801090e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8010910:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010912:	e841 2300 	strex	r3, r2, [r1]
 8010916:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8010918:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801091a:	2b00      	cmp	r3, #0
 801091c:	d1e5      	bne.n	80108ea <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801091e:	687b      	ldr	r3, [r7, #4]
 8010920:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010922:	2b01      	cmp	r3, #1
 8010924:	d118      	bne.n	8010958 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010926:	687b      	ldr	r3, [r7, #4]
 8010928:	681b      	ldr	r3, [r3, #0]
 801092a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801092c:	68fb      	ldr	r3, [r7, #12]
 801092e:	e853 3f00 	ldrex	r3, [r3]
 8010932:	60bb      	str	r3, [r7, #8]
   return(result);
 8010934:	68bb      	ldr	r3, [r7, #8]
 8010936:	f023 0310 	bic.w	r3, r3, #16
 801093a:	647b      	str	r3, [r7, #68]	@ 0x44
 801093c:	687b      	ldr	r3, [r7, #4]
 801093e:	681b      	ldr	r3, [r3, #0]
 8010940:	461a      	mov	r2, r3
 8010942:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010944:	61bb      	str	r3, [r7, #24]
 8010946:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010948:	6979      	ldr	r1, [r7, #20]
 801094a:	69ba      	ldr	r2, [r7, #24]
 801094c:	e841 2300 	strex	r3, r2, [r1]
 8010950:	613b      	str	r3, [r7, #16]
   return(result);
 8010952:	693b      	ldr	r3, [r7, #16]
 8010954:	2b00      	cmp	r3, #0
 8010956:	d1e6      	bne.n	8010926 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8010958:	687b      	ldr	r3, [r7, #4]
 801095a:	2220      	movs	r2, #32
 801095c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010960:	687b      	ldr	r3, [r7, #4]
 8010962:	2200      	movs	r2, #0
 8010964:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8010966:	687b      	ldr	r3, [r7, #4]
 8010968:	2200      	movs	r2, #0
 801096a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 801096c:	bf00      	nop
 801096e:	3754      	adds	r7, #84	@ 0x54
 8010970:	46bd      	mov	sp, r7
 8010972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010976:	4770      	bx	lr
 8010978:	effffffe 	.word	0xeffffffe

0801097c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 801097c:	b480      	push	{r7}
 801097e:	b085      	sub	sp, #20
 8010980:	af00      	add	r7, sp, #0
 8010982:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010984:	687b      	ldr	r3, [r7, #4]
 8010986:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801098a:	2b01      	cmp	r3, #1
 801098c:	d101      	bne.n	8010992 <HAL_UARTEx_DisableFifoMode+0x16>
 801098e:	2302      	movs	r3, #2
 8010990:	e027      	b.n	80109e2 <HAL_UARTEx_DisableFifoMode+0x66>
 8010992:	687b      	ldr	r3, [r7, #4]
 8010994:	2201      	movs	r2, #1
 8010996:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801099a:	687b      	ldr	r3, [r7, #4]
 801099c:	2224      	movs	r2, #36	@ 0x24
 801099e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80109a2:	687b      	ldr	r3, [r7, #4]
 80109a4:	681b      	ldr	r3, [r3, #0]
 80109a6:	681b      	ldr	r3, [r3, #0]
 80109a8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80109aa:	687b      	ldr	r3, [r7, #4]
 80109ac:	681b      	ldr	r3, [r3, #0]
 80109ae:	681a      	ldr	r2, [r3, #0]
 80109b0:	687b      	ldr	r3, [r7, #4]
 80109b2:	681b      	ldr	r3, [r3, #0]
 80109b4:	f022 0201 	bic.w	r2, r2, #1
 80109b8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80109ba:	68fb      	ldr	r3, [r7, #12]
 80109bc:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80109c0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80109c2:	687b      	ldr	r3, [r7, #4]
 80109c4:	2200      	movs	r2, #0
 80109c6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80109c8:	687b      	ldr	r3, [r7, #4]
 80109ca:	681b      	ldr	r3, [r3, #0]
 80109cc:	68fa      	ldr	r2, [r7, #12]
 80109ce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80109d0:	687b      	ldr	r3, [r7, #4]
 80109d2:	2220      	movs	r2, #32
 80109d4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80109d8:	687b      	ldr	r3, [r7, #4]
 80109da:	2200      	movs	r2, #0
 80109dc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80109e0:	2300      	movs	r3, #0
}
 80109e2:	4618      	mov	r0, r3
 80109e4:	3714      	adds	r7, #20
 80109e6:	46bd      	mov	sp, r7
 80109e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109ec:	4770      	bx	lr

080109ee <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80109ee:	b580      	push	{r7, lr}
 80109f0:	b084      	sub	sp, #16
 80109f2:	af00      	add	r7, sp, #0
 80109f4:	6078      	str	r0, [r7, #4]
 80109f6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80109f8:	687b      	ldr	r3, [r7, #4]
 80109fa:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80109fe:	2b01      	cmp	r3, #1
 8010a00:	d101      	bne.n	8010a06 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8010a02:	2302      	movs	r3, #2
 8010a04:	e02d      	b.n	8010a62 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8010a06:	687b      	ldr	r3, [r7, #4]
 8010a08:	2201      	movs	r2, #1
 8010a0a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8010a0e:	687b      	ldr	r3, [r7, #4]
 8010a10:	2224      	movs	r2, #36	@ 0x24
 8010a12:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010a16:	687b      	ldr	r3, [r7, #4]
 8010a18:	681b      	ldr	r3, [r3, #0]
 8010a1a:	681b      	ldr	r3, [r3, #0]
 8010a1c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010a1e:	687b      	ldr	r3, [r7, #4]
 8010a20:	681b      	ldr	r3, [r3, #0]
 8010a22:	681a      	ldr	r2, [r3, #0]
 8010a24:	687b      	ldr	r3, [r7, #4]
 8010a26:	681b      	ldr	r3, [r3, #0]
 8010a28:	f022 0201 	bic.w	r2, r2, #1
 8010a2c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8010a2e:	687b      	ldr	r3, [r7, #4]
 8010a30:	681b      	ldr	r3, [r3, #0]
 8010a32:	689b      	ldr	r3, [r3, #8]
 8010a34:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8010a38:	687b      	ldr	r3, [r7, #4]
 8010a3a:	681b      	ldr	r3, [r3, #0]
 8010a3c:	683a      	ldr	r2, [r7, #0]
 8010a3e:	430a      	orrs	r2, r1
 8010a40:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010a42:	6878      	ldr	r0, [r7, #4]
 8010a44:	f000 f850 	bl	8010ae8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010a48:	687b      	ldr	r3, [r7, #4]
 8010a4a:	681b      	ldr	r3, [r3, #0]
 8010a4c:	68fa      	ldr	r2, [r7, #12]
 8010a4e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010a50:	687b      	ldr	r3, [r7, #4]
 8010a52:	2220      	movs	r2, #32
 8010a54:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010a58:	687b      	ldr	r3, [r7, #4]
 8010a5a:	2200      	movs	r2, #0
 8010a5c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8010a60:	2300      	movs	r3, #0
}
 8010a62:	4618      	mov	r0, r3
 8010a64:	3710      	adds	r7, #16
 8010a66:	46bd      	mov	sp, r7
 8010a68:	bd80      	pop	{r7, pc}

08010a6a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010a6a:	b580      	push	{r7, lr}
 8010a6c:	b084      	sub	sp, #16
 8010a6e:	af00      	add	r7, sp, #0
 8010a70:	6078      	str	r0, [r7, #4]
 8010a72:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010a74:	687b      	ldr	r3, [r7, #4]
 8010a76:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8010a7a:	2b01      	cmp	r3, #1
 8010a7c:	d101      	bne.n	8010a82 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8010a7e:	2302      	movs	r3, #2
 8010a80:	e02d      	b.n	8010ade <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8010a82:	687b      	ldr	r3, [r7, #4]
 8010a84:	2201      	movs	r2, #1
 8010a86:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8010a8a:	687b      	ldr	r3, [r7, #4]
 8010a8c:	2224      	movs	r2, #36	@ 0x24
 8010a8e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010a92:	687b      	ldr	r3, [r7, #4]
 8010a94:	681b      	ldr	r3, [r3, #0]
 8010a96:	681b      	ldr	r3, [r3, #0]
 8010a98:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010a9a:	687b      	ldr	r3, [r7, #4]
 8010a9c:	681b      	ldr	r3, [r3, #0]
 8010a9e:	681a      	ldr	r2, [r3, #0]
 8010aa0:	687b      	ldr	r3, [r7, #4]
 8010aa2:	681b      	ldr	r3, [r3, #0]
 8010aa4:	f022 0201 	bic.w	r2, r2, #1
 8010aa8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8010aaa:	687b      	ldr	r3, [r7, #4]
 8010aac:	681b      	ldr	r3, [r3, #0]
 8010aae:	689b      	ldr	r3, [r3, #8]
 8010ab0:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8010ab4:	687b      	ldr	r3, [r7, #4]
 8010ab6:	681b      	ldr	r3, [r3, #0]
 8010ab8:	683a      	ldr	r2, [r7, #0]
 8010aba:	430a      	orrs	r2, r1
 8010abc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010abe:	6878      	ldr	r0, [r7, #4]
 8010ac0:	f000 f812 	bl	8010ae8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010ac4:	687b      	ldr	r3, [r7, #4]
 8010ac6:	681b      	ldr	r3, [r3, #0]
 8010ac8:	68fa      	ldr	r2, [r7, #12]
 8010aca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010acc:	687b      	ldr	r3, [r7, #4]
 8010ace:	2220      	movs	r2, #32
 8010ad0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010ad4:	687b      	ldr	r3, [r7, #4]
 8010ad6:	2200      	movs	r2, #0
 8010ad8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8010adc:	2300      	movs	r3, #0
}
 8010ade:	4618      	mov	r0, r3
 8010ae0:	3710      	adds	r7, #16
 8010ae2:	46bd      	mov	sp, r7
 8010ae4:	bd80      	pop	{r7, pc}
	...

08010ae8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8010ae8:	b480      	push	{r7}
 8010aea:	b085      	sub	sp, #20
 8010aec:	af00      	add	r7, sp, #0
 8010aee:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8010af0:	687b      	ldr	r3, [r7, #4]
 8010af2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010af4:	2b00      	cmp	r3, #0
 8010af6:	d108      	bne.n	8010b0a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8010af8:	687b      	ldr	r3, [r7, #4]
 8010afa:	2201      	movs	r2, #1
 8010afc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8010b00:	687b      	ldr	r3, [r7, #4]
 8010b02:	2201      	movs	r2, #1
 8010b04:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8010b08:	e031      	b.n	8010b6e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8010b0a:	2310      	movs	r3, #16
 8010b0c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8010b0e:	2310      	movs	r3, #16
 8010b10:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8010b12:	687b      	ldr	r3, [r7, #4]
 8010b14:	681b      	ldr	r3, [r3, #0]
 8010b16:	689b      	ldr	r3, [r3, #8]
 8010b18:	0e5b      	lsrs	r3, r3, #25
 8010b1a:	b2db      	uxtb	r3, r3
 8010b1c:	f003 0307 	and.w	r3, r3, #7
 8010b20:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8010b22:	687b      	ldr	r3, [r7, #4]
 8010b24:	681b      	ldr	r3, [r3, #0]
 8010b26:	689b      	ldr	r3, [r3, #8]
 8010b28:	0f5b      	lsrs	r3, r3, #29
 8010b2a:	b2db      	uxtb	r3, r3
 8010b2c:	f003 0307 	and.w	r3, r3, #7
 8010b30:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010b32:	7bbb      	ldrb	r3, [r7, #14]
 8010b34:	7b3a      	ldrb	r2, [r7, #12]
 8010b36:	4911      	ldr	r1, [pc, #68]	@ (8010b7c <UARTEx_SetNbDataToProcess+0x94>)
 8010b38:	5c8a      	ldrb	r2, [r1, r2]
 8010b3a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8010b3e:	7b3a      	ldrb	r2, [r7, #12]
 8010b40:	490f      	ldr	r1, [pc, #60]	@ (8010b80 <UARTEx_SetNbDataToProcess+0x98>)
 8010b42:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010b44:	fb93 f3f2 	sdiv	r3, r3, r2
 8010b48:	b29a      	uxth	r2, r3
 8010b4a:	687b      	ldr	r3, [r7, #4]
 8010b4c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010b50:	7bfb      	ldrb	r3, [r7, #15]
 8010b52:	7b7a      	ldrb	r2, [r7, #13]
 8010b54:	4909      	ldr	r1, [pc, #36]	@ (8010b7c <UARTEx_SetNbDataToProcess+0x94>)
 8010b56:	5c8a      	ldrb	r2, [r1, r2]
 8010b58:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8010b5c:	7b7a      	ldrb	r2, [r7, #13]
 8010b5e:	4908      	ldr	r1, [pc, #32]	@ (8010b80 <UARTEx_SetNbDataToProcess+0x98>)
 8010b60:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010b62:	fb93 f3f2 	sdiv	r3, r3, r2
 8010b66:	b29a      	uxth	r2, r3
 8010b68:	687b      	ldr	r3, [r7, #4]
 8010b6a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8010b6e:	bf00      	nop
 8010b70:	3714      	adds	r7, #20
 8010b72:	46bd      	mov	sp, r7
 8010b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b78:	4770      	bx	lr
 8010b7a:	bf00      	nop
 8010b7c:	08019dac 	.word	0x08019dac
 8010b80:	08019db4 	.word	0x08019db4

08010b84 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8010b84:	b084      	sub	sp, #16
 8010b86:	b580      	push	{r7, lr}
 8010b88:	b084      	sub	sp, #16
 8010b8a:	af00      	add	r7, sp, #0
 8010b8c:	6078      	str	r0, [r7, #4]
 8010b8e:	f107 001c 	add.w	r0, r7, #28
 8010b92:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8010b96:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8010b9a:	2b01      	cmp	r3, #1
 8010b9c:	d121      	bne.n	8010be2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8010b9e:	687b      	ldr	r3, [r7, #4]
 8010ba0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010ba2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8010ba6:	687b      	ldr	r3, [r7, #4]
 8010ba8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8010baa:	687b      	ldr	r3, [r7, #4]
 8010bac:	68da      	ldr	r2, [r3, #12]
 8010bae:	4b2c      	ldr	r3, [pc, #176]	@ (8010c60 <USB_CoreInit+0xdc>)
 8010bb0:	4013      	ands	r3, r2
 8010bb2:	687a      	ldr	r2, [r7, #4]
 8010bb4:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8010bb6:	687b      	ldr	r3, [r7, #4]
 8010bb8:	68db      	ldr	r3, [r3, #12]
 8010bba:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8010bbe:	687b      	ldr	r3, [r7, #4]
 8010bc0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8010bc2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8010bc6:	2b01      	cmp	r3, #1
 8010bc8:	d105      	bne.n	8010bd6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8010bca:	687b      	ldr	r3, [r7, #4]
 8010bcc:	68db      	ldr	r3, [r3, #12]
 8010bce:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8010bd2:	687b      	ldr	r3, [r7, #4]
 8010bd4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8010bd6:	6878      	ldr	r0, [r7, #4]
 8010bd8:	f001 faf6 	bl	80121c8 <USB_CoreReset>
 8010bdc:	4603      	mov	r3, r0
 8010bde:	73fb      	strb	r3, [r7, #15]
 8010be0:	e01b      	b.n	8010c1a <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8010be2:	687b      	ldr	r3, [r7, #4]
 8010be4:	68db      	ldr	r3, [r3, #12]
 8010be6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8010bea:	687b      	ldr	r3, [r7, #4]
 8010bec:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8010bee:	6878      	ldr	r0, [r7, #4]
 8010bf0:	f001 faea 	bl	80121c8 <USB_CoreReset>
 8010bf4:	4603      	mov	r3, r0
 8010bf6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8010bf8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8010bfc:	2b00      	cmp	r3, #0
 8010bfe:	d106      	bne.n	8010c0e <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8010c00:	687b      	ldr	r3, [r7, #4]
 8010c02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010c04:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8010c08:	687b      	ldr	r3, [r7, #4]
 8010c0a:	639a      	str	r2, [r3, #56]	@ 0x38
 8010c0c:	e005      	b.n	8010c1a <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8010c0e:	687b      	ldr	r3, [r7, #4]
 8010c10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010c12:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8010c16:	687b      	ldr	r3, [r7, #4]
 8010c18:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8010c1a:	7fbb      	ldrb	r3, [r7, #30]
 8010c1c:	2b01      	cmp	r3, #1
 8010c1e:	d116      	bne.n	8010c4e <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8010c20:	687b      	ldr	r3, [r7, #4]
 8010c22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010c24:	b29a      	uxth	r2, r3
 8010c26:	687b      	ldr	r3, [r7, #4]
 8010c28:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8010c2a:	687b      	ldr	r3, [r7, #4]
 8010c2c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8010c2e:	4b0d      	ldr	r3, [pc, #52]	@ (8010c64 <USB_CoreInit+0xe0>)
 8010c30:	4313      	orrs	r3, r2
 8010c32:	687a      	ldr	r2, [r7, #4]
 8010c34:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8010c36:	687b      	ldr	r3, [r7, #4]
 8010c38:	689b      	ldr	r3, [r3, #8]
 8010c3a:	f043 0206 	orr.w	r2, r3, #6
 8010c3e:	687b      	ldr	r3, [r7, #4]
 8010c40:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8010c42:	687b      	ldr	r3, [r7, #4]
 8010c44:	689b      	ldr	r3, [r3, #8]
 8010c46:	f043 0220 	orr.w	r2, r3, #32
 8010c4a:	687b      	ldr	r3, [r7, #4]
 8010c4c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8010c4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010c50:	4618      	mov	r0, r3
 8010c52:	3710      	adds	r7, #16
 8010c54:	46bd      	mov	sp, r7
 8010c56:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8010c5a:	b004      	add	sp, #16
 8010c5c:	4770      	bx	lr
 8010c5e:	bf00      	nop
 8010c60:	ffbdffbf 	.word	0xffbdffbf
 8010c64:	03ee0000 	.word	0x03ee0000

08010c68 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8010c68:	b480      	push	{r7}
 8010c6a:	b087      	sub	sp, #28
 8010c6c:	af00      	add	r7, sp, #0
 8010c6e:	60f8      	str	r0, [r7, #12]
 8010c70:	60b9      	str	r1, [r7, #8]
 8010c72:	4613      	mov	r3, r2
 8010c74:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8010c76:	79fb      	ldrb	r3, [r7, #7]
 8010c78:	2b02      	cmp	r3, #2
 8010c7a:	d165      	bne.n	8010d48 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8010c7c:	68bb      	ldr	r3, [r7, #8]
 8010c7e:	4a41      	ldr	r2, [pc, #260]	@ (8010d84 <USB_SetTurnaroundTime+0x11c>)
 8010c80:	4293      	cmp	r3, r2
 8010c82:	d906      	bls.n	8010c92 <USB_SetTurnaroundTime+0x2a>
 8010c84:	68bb      	ldr	r3, [r7, #8]
 8010c86:	4a40      	ldr	r2, [pc, #256]	@ (8010d88 <USB_SetTurnaroundTime+0x120>)
 8010c88:	4293      	cmp	r3, r2
 8010c8a:	d202      	bcs.n	8010c92 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8010c8c:	230f      	movs	r3, #15
 8010c8e:	617b      	str	r3, [r7, #20]
 8010c90:	e062      	b.n	8010d58 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8010c92:	68bb      	ldr	r3, [r7, #8]
 8010c94:	4a3c      	ldr	r2, [pc, #240]	@ (8010d88 <USB_SetTurnaroundTime+0x120>)
 8010c96:	4293      	cmp	r3, r2
 8010c98:	d306      	bcc.n	8010ca8 <USB_SetTurnaroundTime+0x40>
 8010c9a:	68bb      	ldr	r3, [r7, #8]
 8010c9c:	4a3b      	ldr	r2, [pc, #236]	@ (8010d8c <USB_SetTurnaroundTime+0x124>)
 8010c9e:	4293      	cmp	r3, r2
 8010ca0:	d202      	bcs.n	8010ca8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8010ca2:	230e      	movs	r3, #14
 8010ca4:	617b      	str	r3, [r7, #20]
 8010ca6:	e057      	b.n	8010d58 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8010ca8:	68bb      	ldr	r3, [r7, #8]
 8010caa:	4a38      	ldr	r2, [pc, #224]	@ (8010d8c <USB_SetTurnaroundTime+0x124>)
 8010cac:	4293      	cmp	r3, r2
 8010cae:	d306      	bcc.n	8010cbe <USB_SetTurnaroundTime+0x56>
 8010cb0:	68bb      	ldr	r3, [r7, #8]
 8010cb2:	4a37      	ldr	r2, [pc, #220]	@ (8010d90 <USB_SetTurnaroundTime+0x128>)
 8010cb4:	4293      	cmp	r3, r2
 8010cb6:	d202      	bcs.n	8010cbe <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8010cb8:	230d      	movs	r3, #13
 8010cba:	617b      	str	r3, [r7, #20]
 8010cbc:	e04c      	b.n	8010d58 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8010cbe:	68bb      	ldr	r3, [r7, #8]
 8010cc0:	4a33      	ldr	r2, [pc, #204]	@ (8010d90 <USB_SetTurnaroundTime+0x128>)
 8010cc2:	4293      	cmp	r3, r2
 8010cc4:	d306      	bcc.n	8010cd4 <USB_SetTurnaroundTime+0x6c>
 8010cc6:	68bb      	ldr	r3, [r7, #8]
 8010cc8:	4a32      	ldr	r2, [pc, #200]	@ (8010d94 <USB_SetTurnaroundTime+0x12c>)
 8010cca:	4293      	cmp	r3, r2
 8010ccc:	d802      	bhi.n	8010cd4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8010cce:	230c      	movs	r3, #12
 8010cd0:	617b      	str	r3, [r7, #20]
 8010cd2:	e041      	b.n	8010d58 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8010cd4:	68bb      	ldr	r3, [r7, #8]
 8010cd6:	4a2f      	ldr	r2, [pc, #188]	@ (8010d94 <USB_SetTurnaroundTime+0x12c>)
 8010cd8:	4293      	cmp	r3, r2
 8010cda:	d906      	bls.n	8010cea <USB_SetTurnaroundTime+0x82>
 8010cdc:	68bb      	ldr	r3, [r7, #8]
 8010cde:	4a2e      	ldr	r2, [pc, #184]	@ (8010d98 <USB_SetTurnaroundTime+0x130>)
 8010ce0:	4293      	cmp	r3, r2
 8010ce2:	d802      	bhi.n	8010cea <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8010ce4:	230b      	movs	r3, #11
 8010ce6:	617b      	str	r3, [r7, #20]
 8010ce8:	e036      	b.n	8010d58 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8010cea:	68bb      	ldr	r3, [r7, #8]
 8010cec:	4a2a      	ldr	r2, [pc, #168]	@ (8010d98 <USB_SetTurnaroundTime+0x130>)
 8010cee:	4293      	cmp	r3, r2
 8010cf0:	d906      	bls.n	8010d00 <USB_SetTurnaroundTime+0x98>
 8010cf2:	68bb      	ldr	r3, [r7, #8]
 8010cf4:	4a29      	ldr	r2, [pc, #164]	@ (8010d9c <USB_SetTurnaroundTime+0x134>)
 8010cf6:	4293      	cmp	r3, r2
 8010cf8:	d802      	bhi.n	8010d00 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8010cfa:	230a      	movs	r3, #10
 8010cfc:	617b      	str	r3, [r7, #20]
 8010cfe:	e02b      	b.n	8010d58 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8010d00:	68bb      	ldr	r3, [r7, #8]
 8010d02:	4a26      	ldr	r2, [pc, #152]	@ (8010d9c <USB_SetTurnaroundTime+0x134>)
 8010d04:	4293      	cmp	r3, r2
 8010d06:	d906      	bls.n	8010d16 <USB_SetTurnaroundTime+0xae>
 8010d08:	68bb      	ldr	r3, [r7, #8]
 8010d0a:	4a25      	ldr	r2, [pc, #148]	@ (8010da0 <USB_SetTurnaroundTime+0x138>)
 8010d0c:	4293      	cmp	r3, r2
 8010d0e:	d202      	bcs.n	8010d16 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8010d10:	2309      	movs	r3, #9
 8010d12:	617b      	str	r3, [r7, #20]
 8010d14:	e020      	b.n	8010d58 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8010d16:	68bb      	ldr	r3, [r7, #8]
 8010d18:	4a21      	ldr	r2, [pc, #132]	@ (8010da0 <USB_SetTurnaroundTime+0x138>)
 8010d1a:	4293      	cmp	r3, r2
 8010d1c:	d306      	bcc.n	8010d2c <USB_SetTurnaroundTime+0xc4>
 8010d1e:	68bb      	ldr	r3, [r7, #8]
 8010d20:	4a20      	ldr	r2, [pc, #128]	@ (8010da4 <USB_SetTurnaroundTime+0x13c>)
 8010d22:	4293      	cmp	r3, r2
 8010d24:	d802      	bhi.n	8010d2c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8010d26:	2308      	movs	r3, #8
 8010d28:	617b      	str	r3, [r7, #20]
 8010d2a:	e015      	b.n	8010d58 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8010d2c:	68bb      	ldr	r3, [r7, #8]
 8010d2e:	4a1d      	ldr	r2, [pc, #116]	@ (8010da4 <USB_SetTurnaroundTime+0x13c>)
 8010d30:	4293      	cmp	r3, r2
 8010d32:	d906      	bls.n	8010d42 <USB_SetTurnaroundTime+0xda>
 8010d34:	68bb      	ldr	r3, [r7, #8]
 8010d36:	4a1c      	ldr	r2, [pc, #112]	@ (8010da8 <USB_SetTurnaroundTime+0x140>)
 8010d38:	4293      	cmp	r3, r2
 8010d3a:	d202      	bcs.n	8010d42 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8010d3c:	2307      	movs	r3, #7
 8010d3e:	617b      	str	r3, [r7, #20]
 8010d40:	e00a      	b.n	8010d58 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8010d42:	2306      	movs	r3, #6
 8010d44:	617b      	str	r3, [r7, #20]
 8010d46:	e007      	b.n	8010d58 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8010d48:	79fb      	ldrb	r3, [r7, #7]
 8010d4a:	2b00      	cmp	r3, #0
 8010d4c:	d102      	bne.n	8010d54 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8010d4e:	2309      	movs	r3, #9
 8010d50:	617b      	str	r3, [r7, #20]
 8010d52:	e001      	b.n	8010d58 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8010d54:	2309      	movs	r3, #9
 8010d56:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8010d58:	68fb      	ldr	r3, [r7, #12]
 8010d5a:	68db      	ldr	r3, [r3, #12]
 8010d5c:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8010d60:	68fb      	ldr	r3, [r7, #12]
 8010d62:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8010d64:	68fb      	ldr	r3, [r7, #12]
 8010d66:	68da      	ldr	r2, [r3, #12]
 8010d68:	697b      	ldr	r3, [r7, #20]
 8010d6a:	029b      	lsls	r3, r3, #10
 8010d6c:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8010d70:	431a      	orrs	r2, r3
 8010d72:	68fb      	ldr	r3, [r7, #12]
 8010d74:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8010d76:	2300      	movs	r3, #0
}
 8010d78:	4618      	mov	r0, r3
 8010d7a:	371c      	adds	r7, #28
 8010d7c:	46bd      	mov	sp, r7
 8010d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d82:	4770      	bx	lr
 8010d84:	00d8acbf 	.word	0x00d8acbf
 8010d88:	00e4e1c0 	.word	0x00e4e1c0
 8010d8c:	00f42400 	.word	0x00f42400
 8010d90:	01067380 	.word	0x01067380
 8010d94:	011a499f 	.word	0x011a499f
 8010d98:	01312cff 	.word	0x01312cff
 8010d9c:	014ca43f 	.word	0x014ca43f
 8010da0:	016e3600 	.word	0x016e3600
 8010da4:	01a6ab1f 	.word	0x01a6ab1f
 8010da8:	01e84800 	.word	0x01e84800

08010dac <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8010dac:	b480      	push	{r7}
 8010dae:	b083      	sub	sp, #12
 8010db0:	af00      	add	r7, sp, #0
 8010db2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8010db4:	687b      	ldr	r3, [r7, #4]
 8010db6:	689b      	ldr	r3, [r3, #8]
 8010db8:	f043 0201 	orr.w	r2, r3, #1
 8010dbc:	687b      	ldr	r3, [r7, #4]
 8010dbe:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8010dc0:	2300      	movs	r3, #0
}
 8010dc2:	4618      	mov	r0, r3
 8010dc4:	370c      	adds	r7, #12
 8010dc6:	46bd      	mov	sp, r7
 8010dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dcc:	4770      	bx	lr

08010dce <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8010dce:	b480      	push	{r7}
 8010dd0:	b083      	sub	sp, #12
 8010dd2:	af00      	add	r7, sp, #0
 8010dd4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8010dd6:	687b      	ldr	r3, [r7, #4]
 8010dd8:	689b      	ldr	r3, [r3, #8]
 8010dda:	f023 0201 	bic.w	r2, r3, #1
 8010dde:	687b      	ldr	r3, [r7, #4]
 8010de0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8010de2:	2300      	movs	r3, #0
}
 8010de4:	4618      	mov	r0, r3
 8010de6:	370c      	adds	r7, #12
 8010de8:	46bd      	mov	sp, r7
 8010dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dee:	4770      	bx	lr

08010df0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8010df0:	b580      	push	{r7, lr}
 8010df2:	b084      	sub	sp, #16
 8010df4:	af00      	add	r7, sp, #0
 8010df6:	6078      	str	r0, [r7, #4]
 8010df8:	460b      	mov	r3, r1
 8010dfa:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8010dfc:	2300      	movs	r3, #0
 8010dfe:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8010e00:	687b      	ldr	r3, [r7, #4]
 8010e02:	68db      	ldr	r3, [r3, #12]
 8010e04:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8010e08:	687b      	ldr	r3, [r7, #4]
 8010e0a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8010e0c:	78fb      	ldrb	r3, [r7, #3]
 8010e0e:	2b01      	cmp	r3, #1
 8010e10:	d115      	bne.n	8010e3e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8010e12:	687b      	ldr	r3, [r7, #4]
 8010e14:	68db      	ldr	r3, [r3, #12]
 8010e16:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8010e1a:	687b      	ldr	r3, [r7, #4]
 8010e1c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8010e1e:	200a      	movs	r0, #10
 8010e20:	f7f3 fdf2 	bl	8004a08 <HAL_Delay>
      ms += 10U;
 8010e24:	68fb      	ldr	r3, [r7, #12]
 8010e26:	330a      	adds	r3, #10
 8010e28:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8010e2a:	6878      	ldr	r0, [r7, #4]
 8010e2c:	f001 f93b 	bl	80120a6 <USB_GetMode>
 8010e30:	4603      	mov	r3, r0
 8010e32:	2b01      	cmp	r3, #1
 8010e34:	d01e      	beq.n	8010e74 <USB_SetCurrentMode+0x84>
 8010e36:	68fb      	ldr	r3, [r7, #12]
 8010e38:	2bc7      	cmp	r3, #199	@ 0xc7
 8010e3a:	d9f0      	bls.n	8010e1e <USB_SetCurrentMode+0x2e>
 8010e3c:	e01a      	b.n	8010e74 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8010e3e:	78fb      	ldrb	r3, [r7, #3]
 8010e40:	2b00      	cmp	r3, #0
 8010e42:	d115      	bne.n	8010e70 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8010e44:	687b      	ldr	r3, [r7, #4]
 8010e46:	68db      	ldr	r3, [r3, #12]
 8010e48:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8010e4c:	687b      	ldr	r3, [r7, #4]
 8010e4e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8010e50:	200a      	movs	r0, #10
 8010e52:	f7f3 fdd9 	bl	8004a08 <HAL_Delay>
      ms += 10U;
 8010e56:	68fb      	ldr	r3, [r7, #12]
 8010e58:	330a      	adds	r3, #10
 8010e5a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8010e5c:	6878      	ldr	r0, [r7, #4]
 8010e5e:	f001 f922 	bl	80120a6 <USB_GetMode>
 8010e62:	4603      	mov	r3, r0
 8010e64:	2b00      	cmp	r3, #0
 8010e66:	d005      	beq.n	8010e74 <USB_SetCurrentMode+0x84>
 8010e68:	68fb      	ldr	r3, [r7, #12]
 8010e6a:	2bc7      	cmp	r3, #199	@ 0xc7
 8010e6c:	d9f0      	bls.n	8010e50 <USB_SetCurrentMode+0x60>
 8010e6e:	e001      	b.n	8010e74 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8010e70:	2301      	movs	r3, #1
 8010e72:	e005      	b.n	8010e80 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8010e74:	68fb      	ldr	r3, [r7, #12]
 8010e76:	2bc8      	cmp	r3, #200	@ 0xc8
 8010e78:	d101      	bne.n	8010e7e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8010e7a:	2301      	movs	r3, #1
 8010e7c:	e000      	b.n	8010e80 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8010e7e:	2300      	movs	r3, #0
}
 8010e80:	4618      	mov	r0, r3
 8010e82:	3710      	adds	r7, #16
 8010e84:	46bd      	mov	sp, r7
 8010e86:	bd80      	pop	{r7, pc}

08010e88 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8010e88:	b084      	sub	sp, #16
 8010e8a:	b580      	push	{r7, lr}
 8010e8c:	b086      	sub	sp, #24
 8010e8e:	af00      	add	r7, sp, #0
 8010e90:	6078      	str	r0, [r7, #4]
 8010e92:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8010e96:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8010e9a:	2300      	movs	r3, #0
 8010e9c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010e9e:	687b      	ldr	r3, [r7, #4]
 8010ea0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8010ea2:	2300      	movs	r3, #0
 8010ea4:	613b      	str	r3, [r7, #16]
 8010ea6:	e009      	b.n	8010ebc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8010ea8:	687a      	ldr	r2, [r7, #4]
 8010eaa:	693b      	ldr	r3, [r7, #16]
 8010eac:	3340      	adds	r3, #64	@ 0x40
 8010eae:	009b      	lsls	r3, r3, #2
 8010eb0:	4413      	add	r3, r2
 8010eb2:	2200      	movs	r2, #0
 8010eb4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8010eb6:	693b      	ldr	r3, [r7, #16]
 8010eb8:	3301      	adds	r3, #1
 8010eba:	613b      	str	r3, [r7, #16]
 8010ebc:	693b      	ldr	r3, [r7, #16]
 8010ebe:	2b0e      	cmp	r3, #14
 8010ec0:	d9f2      	bls.n	8010ea8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8010ec2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8010ec6:	2b00      	cmp	r3, #0
 8010ec8:	d11c      	bne.n	8010f04 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8010eca:	68fb      	ldr	r3, [r7, #12]
 8010ecc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010ed0:	685b      	ldr	r3, [r3, #4]
 8010ed2:	68fa      	ldr	r2, [r7, #12]
 8010ed4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8010ed8:	f043 0302 	orr.w	r3, r3, #2
 8010edc:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8010ede:	687b      	ldr	r3, [r7, #4]
 8010ee0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010ee2:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8010ee6:	687b      	ldr	r3, [r7, #4]
 8010ee8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8010eea:	687b      	ldr	r3, [r7, #4]
 8010eec:	681b      	ldr	r3, [r3, #0]
 8010eee:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8010ef2:	687b      	ldr	r3, [r7, #4]
 8010ef4:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8010ef6:	687b      	ldr	r3, [r7, #4]
 8010ef8:	681b      	ldr	r3, [r3, #0]
 8010efa:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8010efe:	687b      	ldr	r3, [r7, #4]
 8010f00:	601a      	str	r2, [r3, #0]
 8010f02:	e005      	b.n	8010f10 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8010f04:	687b      	ldr	r3, [r7, #4]
 8010f06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010f08:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8010f0c:	687b      	ldr	r3, [r7, #4]
 8010f0e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8010f10:	68fb      	ldr	r3, [r7, #12]
 8010f12:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8010f16:	461a      	mov	r2, r3
 8010f18:	2300      	movs	r3, #0
 8010f1a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8010f1c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8010f20:	2b01      	cmp	r3, #1
 8010f22:	d10d      	bne.n	8010f40 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8010f24:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010f28:	2b00      	cmp	r3, #0
 8010f2a:	d104      	bne.n	8010f36 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8010f2c:	2100      	movs	r1, #0
 8010f2e:	6878      	ldr	r0, [r7, #4]
 8010f30:	f000 f968 	bl	8011204 <USB_SetDevSpeed>
 8010f34:	e008      	b.n	8010f48 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8010f36:	2101      	movs	r1, #1
 8010f38:	6878      	ldr	r0, [r7, #4]
 8010f3a:	f000 f963 	bl	8011204 <USB_SetDevSpeed>
 8010f3e:	e003      	b.n	8010f48 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8010f40:	2103      	movs	r1, #3
 8010f42:	6878      	ldr	r0, [r7, #4]
 8010f44:	f000 f95e 	bl	8011204 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8010f48:	2110      	movs	r1, #16
 8010f4a:	6878      	ldr	r0, [r7, #4]
 8010f4c:	f000 f8fa 	bl	8011144 <USB_FlushTxFifo>
 8010f50:	4603      	mov	r3, r0
 8010f52:	2b00      	cmp	r3, #0
 8010f54:	d001      	beq.n	8010f5a <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8010f56:	2301      	movs	r3, #1
 8010f58:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8010f5a:	6878      	ldr	r0, [r7, #4]
 8010f5c:	f000 f924 	bl	80111a8 <USB_FlushRxFifo>
 8010f60:	4603      	mov	r3, r0
 8010f62:	2b00      	cmp	r3, #0
 8010f64:	d001      	beq.n	8010f6a <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8010f66:	2301      	movs	r3, #1
 8010f68:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8010f6a:	68fb      	ldr	r3, [r7, #12]
 8010f6c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010f70:	461a      	mov	r2, r3
 8010f72:	2300      	movs	r3, #0
 8010f74:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8010f76:	68fb      	ldr	r3, [r7, #12]
 8010f78:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010f7c:	461a      	mov	r2, r3
 8010f7e:	2300      	movs	r3, #0
 8010f80:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8010f82:	68fb      	ldr	r3, [r7, #12]
 8010f84:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010f88:	461a      	mov	r2, r3
 8010f8a:	2300      	movs	r3, #0
 8010f8c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8010f8e:	2300      	movs	r3, #0
 8010f90:	613b      	str	r3, [r7, #16]
 8010f92:	e043      	b.n	801101c <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8010f94:	693b      	ldr	r3, [r7, #16]
 8010f96:	015a      	lsls	r2, r3, #5
 8010f98:	68fb      	ldr	r3, [r7, #12]
 8010f9a:	4413      	add	r3, r2
 8010f9c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010fa0:	681b      	ldr	r3, [r3, #0]
 8010fa2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8010fa6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8010faa:	d118      	bne.n	8010fde <USB_DevInit+0x156>
    {
      if (i == 0U)
 8010fac:	693b      	ldr	r3, [r7, #16]
 8010fae:	2b00      	cmp	r3, #0
 8010fb0:	d10a      	bne.n	8010fc8 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8010fb2:	693b      	ldr	r3, [r7, #16]
 8010fb4:	015a      	lsls	r2, r3, #5
 8010fb6:	68fb      	ldr	r3, [r7, #12]
 8010fb8:	4413      	add	r3, r2
 8010fba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010fbe:	461a      	mov	r2, r3
 8010fc0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8010fc4:	6013      	str	r3, [r2, #0]
 8010fc6:	e013      	b.n	8010ff0 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8010fc8:	693b      	ldr	r3, [r7, #16]
 8010fca:	015a      	lsls	r2, r3, #5
 8010fcc:	68fb      	ldr	r3, [r7, #12]
 8010fce:	4413      	add	r3, r2
 8010fd0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010fd4:	461a      	mov	r2, r3
 8010fd6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8010fda:	6013      	str	r3, [r2, #0]
 8010fdc:	e008      	b.n	8010ff0 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8010fde:	693b      	ldr	r3, [r7, #16]
 8010fe0:	015a      	lsls	r2, r3, #5
 8010fe2:	68fb      	ldr	r3, [r7, #12]
 8010fe4:	4413      	add	r3, r2
 8010fe6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010fea:	461a      	mov	r2, r3
 8010fec:	2300      	movs	r3, #0
 8010fee:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8010ff0:	693b      	ldr	r3, [r7, #16]
 8010ff2:	015a      	lsls	r2, r3, #5
 8010ff4:	68fb      	ldr	r3, [r7, #12]
 8010ff6:	4413      	add	r3, r2
 8010ff8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010ffc:	461a      	mov	r2, r3
 8010ffe:	2300      	movs	r3, #0
 8011000:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8011002:	693b      	ldr	r3, [r7, #16]
 8011004:	015a      	lsls	r2, r3, #5
 8011006:	68fb      	ldr	r3, [r7, #12]
 8011008:	4413      	add	r3, r2
 801100a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801100e:	461a      	mov	r2, r3
 8011010:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8011014:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8011016:	693b      	ldr	r3, [r7, #16]
 8011018:	3301      	adds	r3, #1
 801101a:	613b      	str	r3, [r7, #16]
 801101c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8011020:	461a      	mov	r2, r3
 8011022:	693b      	ldr	r3, [r7, #16]
 8011024:	4293      	cmp	r3, r2
 8011026:	d3b5      	bcc.n	8010f94 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8011028:	2300      	movs	r3, #0
 801102a:	613b      	str	r3, [r7, #16]
 801102c:	e043      	b.n	80110b6 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801102e:	693b      	ldr	r3, [r7, #16]
 8011030:	015a      	lsls	r2, r3, #5
 8011032:	68fb      	ldr	r3, [r7, #12]
 8011034:	4413      	add	r3, r2
 8011036:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801103a:	681b      	ldr	r3, [r3, #0]
 801103c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8011040:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8011044:	d118      	bne.n	8011078 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8011046:	693b      	ldr	r3, [r7, #16]
 8011048:	2b00      	cmp	r3, #0
 801104a:	d10a      	bne.n	8011062 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 801104c:	693b      	ldr	r3, [r7, #16]
 801104e:	015a      	lsls	r2, r3, #5
 8011050:	68fb      	ldr	r3, [r7, #12]
 8011052:	4413      	add	r3, r2
 8011054:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011058:	461a      	mov	r2, r3
 801105a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 801105e:	6013      	str	r3, [r2, #0]
 8011060:	e013      	b.n	801108a <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8011062:	693b      	ldr	r3, [r7, #16]
 8011064:	015a      	lsls	r2, r3, #5
 8011066:	68fb      	ldr	r3, [r7, #12]
 8011068:	4413      	add	r3, r2
 801106a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801106e:	461a      	mov	r2, r3
 8011070:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8011074:	6013      	str	r3, [r2, #0]
 8011076:	e008      	b.n	801108a <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8011078:	693b      	ldr	r3, [r7, #16]
 801107a:	015a      	lsls	r2, r3, #5
 801107c:	68fb      	ldr	r3, [r7, #12]
 801107e:	4413      	add	r3, r2
 8011080:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011084:	461a      	mov	r2, r3
 8011086:	2300      	movs	r3, #0
 8011088:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 801108a:	693b      	ldr	r3, [r7, #16]
 801108c:	015a      	lsls	r2, r3, #5
 801108e:	68fb      	ldr	r3, [r7, #12]
 8011090:	4413      	add	r3, r2
 8011092:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011096:	461a      	mov	r2, r3
 8011098:	2300      	movs	r3, #0
 801109a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 801109c:	693b      	ldr	r3, [r7, #16]
 801109e:	015a      	lsls	r2, r3, #5
 80110a0:	68fb      	ldr	r3, [r7, #12]
 80110a2:	4413      	add	r3, r2
 80110a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80110a8:	461a      	mov	r2, r3
 80110aa:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80110ae:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80110b0:	693b      	ldr	r3, [r7, #16]
 80110b2:	3301      	adds	r3, #1
 80110b4:	613b      	str	r3, [r7, #16]
 80110b6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80110ba:	461a      	mov	r2, r3
 80110bc:	693b      	ldr	r3, [r7, #16]
 80110be:	4293      	cmp	r3, r2
 80110c0:	d3b5      	bcc.n	801102e <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80110c2:	68fb      	ldr	r3, [r7, #12]
 80110c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80110c8:	691b      	ldr	r3, [r3, #16]
 80110ca:	68fa      	ldr	r2, [r7, #12]
 80110cc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80110d0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80110d4:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80110d6:	687b      	ldr	r3, [r7, #4]
 80110d8:	2200      	movs	r2, #0
 80110da:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80110dc:	687b      	ldr	r3, [r7, #4]
 80110de:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80110e2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80110e4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80110e8:	2b00      	cmp	r3, #0
 80110ea:	d105      	bne.n	80110f8 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80110ec:	687b      	ldr	r3, [r7, #4]
 80110ee:	699b      	ldr	r3, [r3, #24]
 80110f0:	f043 0210 	orr.w	r2, r3, #16
 80110f4:	687b      	ldr	r3, [r7, #4]
 80110f6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80110f8:	687b      	ldr	r3, [r7, #4]
 80110fa:	699a      	ldr	r2, [r3, #24]
 80110fc:	4b0f      	ldr	r3, [pc, #60]	@ (801113c <USB_DevInit+0x2b4>)
 80110fe:	4313      	orrs	r3, r2
 8011100:	687a      	ldr	r2, [r7, #4]
 8011102:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8011104:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8011108:	2b00      	cmp	r3, #0
 801110a:	d005      	beq.n	8011118 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 801110c:	687b      	ldr	r3, [r7, #4]
 801110e:	699b      	ldr	r3, [r3, #24]
 8011110:	f043 0208 	orr.w	r2, r3, #8
 8011114:	687b      	ldr	r3, [r7, #4]
 8011116:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8011118:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 801111c:	2b01      	cmp	r3, #1
 801111e:	d105      	bne.n	801112c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8011120:	687b      	ldr	r3, [r7, #4]
 8011122:	699a      	ldr	r2, [r3, #24]
 8011124:	4b06      	ldr	r3, [pc, #24]	@ (8011140 <USB_DevInit+0x2b8>)
 8011126:	4313      	orrs	r3, r2
 8011128:	687a      	ldr	r2, [r7, #4]
 801112a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 801112c:	7dfb      	ldrb	r3, [r7, #23]
}
 801112e:	4618      	mov	r0, r3
 8011130:	3718      	adds	r7, #24
 8011132:	46bd      	mov	sp, r7
 8011134:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8011138:	b004      	add	sp, #16
 801113a:	4770      	bx	lr
 801113c:	803c3800 	.word	0x803c3800
 8011140:	40000004 	.word	0x40000004

08011144 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8011144:	b480      	push	{r7}
 8011146:	b085      	sub	sp, #20
 8011148:	af00      	add	r7, sp, #0
 801114a:	6078      	str	r0, [r7, #4]
 801114c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 801114e:	2300      	movs	r3, #0
 8011150:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8011152:	68fb      	ldr	r3, [r7, #12]
 8011154:	3301      	adds	r3, #1
 8011156:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8011158:	68fb      	ldr	r3, [r7, #12]
 801115a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 801115e:	d901      	bls.n	8011164 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8011160:	2303      	movs	r3, #3
 8011162:	e01b      	b.n	801119c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8011164:	687b      	ldr	r3, [r7, #4]
 8011166:	691b      	ldr	r3, [r3, #16]
 8011168:	2b00      	cmp	r3, #0
 801116a:	daf2      	bge.n	8011152 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 801116c:	2300      	movs	r3, #0
 801116e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8011170:	683b      	ldr	r3, [r7, #0]
 8011172:	019b      	lsls	r3, r3, #6
 8011174:	f043 0220 	orr.w	r2, r3, #32
 8011178:	687b      	ldr	r3, [r7, #4]
 801117a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 801117c:	68fb      	ldr	r3, [r7, #12]
 801117e:	3301      	adds	r3, #1
 8011180:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8011182:	68fb      	ldr	r3, [r7, #12]
 8011184:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8011188:	d901      	bls.n	801118e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 801118a:	2303      	movs	r3, #3
 801118c:	e006      	b.n	801119c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 801118e:	687b      	ldr	r3, [r7, #4]
 8011190:	691b      	ldr	r3, [r3, #16]
 8011192:	f003 0320 	and.w	r3, r3, #32
 8011196:	2b20      	cmp	r3, #32
 8011198:	d0f0      	beq.n	801117c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 801119a:	2300      	movs	r3, #0
}
 801119c:	4618      	mov	r0, r3
 801119e:	3714      	adds	r7, #20
 80111a0:	46bd      	mov	sp, r7
 80111a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111a6:	4770      	bx	lr

080111a8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80111a8:	b480      	push	{r7}
 80111aa:	b085      	sub	sp, #20
 80111ac:	af00      	add	r7, sp, #0
 80111ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80111b0:	2300      	movs	r3, #0
 80111b2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80111b4:	68fb      	ldr	r3, [r7, #12]
 80111b6:	3301      	adds	r3, #1
 80111b8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80111ba:	68fb      	ldr	r3, [r7, #12]
 80111bc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80111c0:	d901      	bls.n	80111c6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80111c2:	2303      	movs	r3, #3
 80111c4:	e018      	b.n	80111f8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80111c6:	687b      	ldr	r3, [r7, #4]
 80111c8:	691b      	ldr	r3, [r3, #16]
 80111ca:	2b00      	cmp	r3, #0
 80111cc:	daf2      	bge.n	80111b4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80111ce:	2300      	movs	r3, #0
 80111d0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80111d2:	687b      	ldr	r3, [r7, #4]
 80111d4:	2210      	movs	r2, #16
 80111d6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80111d8:	68fb      	ldr	r3, [r7, #12]
 80111da:	3301      	adds	r3, #1
 80111dc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80111de:	68fb      	ldr	r3, [r7, #12]
 80111e0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80111e4:	d901      	bls.n	80111ea <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80111e6:	2303      	movs	r3, #3
 80111e8:	e006      	b.n	80111f8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80111ea:	687b      	ldr	r3, [r7, #4]
 80111ec:	691b      	ldr	r3, [r3, #16]
 80111ee:	f003 0310 	and.w	r3, r3, #16
 80111f2:	2b10      	cmp	r3, #16
 80111f4:	d0f0      	beq.n	80111d8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80111f6:	2300      	movs	r3, #0
}
 80111f8:	4618      	mov	r0, r3
 80111fa:	3714      	adds	r7, #20
 80111fc:	46bd      	mov	sp, r7
 80111fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011202:	4770      	bx	lr

08011204 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8011204:	b480      	push	{r7}
 8011206:	b085      	sub	sp, #20
 8011208:	af00      	add	r7, sp, #0
 801120a:	6078      	str	r0, [r7, #4]
 801120c:	460b      	mov	r3, r1
 801120e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011210:	687b      	ldr	r3, [r7, #4]
 8011212:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8011214:	68fb      	ldr	r3, [r7, #12]
 8011216:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801121a:	681a      	ldr	r2, [r3, #0]
 801121c:	78fb      	ldrb	r3, [r7, #3]
 801121e:	68f9      	ldr	r1, [r7, #12]
 8011220:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8011224:	4313      	orrs	r3, r2
 8011226:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8011228:	2300      	movs	r3, #0
}
 801122a:	4618      	mov	r0, r3
 801122c:	3714      	adds	r7, #20
 801122e:	46bd      	mov	sp, r7
 8011230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011234:	4770      	bx	lr

08011236 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8011236:	b480      	push	{r7}
 8011238:	b087      	sub	sp, #28
 801123a:	af00      	add	r7, sp, #0
 801123c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801123e:	687b      	ldr	r3, [r7, #4]
 8011240:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8011242:	693b      	ldr	r3, [r7, #16]
 8011244:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011248:	689b      	ldr	r3, [r3, #8]
 801124a:	f003 0306 	and.w	r3, r3, #6
 801124e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8011250:	68fb      	ldr	r3, [r7, #12]
 8011252:	2b00      	cmp	r3, #0
 8011254:	d102      	bne.n	801125c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8011256:	2300      	movs	r3, #0
 8011258:	75fb      	strb	r3, [r7, #23]
 801125a:	e00a      	b.n	8011272 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 801125c:	68fb      	ldr	r3, [r7, #12]
 801125e:	2b02      	cmp	r3, #2
 8011260:	d002      	beq.n	8011268 <USB_GetDevSpeed+0x32>
 8011262:	68fb      	ldr	r3, [r7, #12]
 8011264:	2b06      	cmp	r3, #6
 8011266:	d102      	bne.n	801126e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8011268:	2302      	movs	r3, #2
 801126a:	75fb      	strb	r3, [r7, #23]
 801126c:	e001      	b.n	8011272 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 801126e:	230f      	movs	r3, #15
 8011270:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8011272:	7dfb      	ldrb	r3, [r7, #23]
}
 8011274:	4618      	mov	r0, r3
 8011276:	371c      	adds	r7, #28
 8011278:	46bd      	mov	sp, r7
 801127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801127e:	4770      	bx	lr

08011280 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8011280:	b480      	push	{r7}
 8011282:	b085      	sub	sp, #20
 8011284:	af00      	add	r7, sp, #0
 8011286:	6078      	str	r0, [r7, #4]
 8011288:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801128a:	687b      	ldr	r3, [r7, #4]
 801128c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801128e:	683b      	ldr	r3, [r7, #0]
 8011290:	781b      	ldrb	r3, [r3, #0]
 8011292:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8011294:	683b      	ldr	r3, [r7, #0]
 8011296:	785b      	ldrb	r3, [r3, #1]
 8011298:	2b01      	cmp	r3, #1
 801129a:	d139      	bne.n	8011310 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 801129c:	68fb      	ldr	r3, [r7, #12]
 801129e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80112a2:	69da      	ldr	r2, [r3, #28]
 80112a4:	683b      	ldr	r3, [r7, #0]
 80112a6:	781b      	ldrb	r3, [r3, #0]
 80112a8:	f003 030f 	and.w	r3, r3, #15
 80112ac:	2101      	movs	r1, #1
 80112ae:	fa01 f303 	lsl.w	r3, r1, r3
 80112b2:	b29b      	uxth	r3, r3
 80112b4:	68f9      	ldr	r1, [r7, #12]
 80112b6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80112ba:	4313      	orrs	r3, r2
 80112bc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80112be:	68bb      	ldr	r3, [r7, #8]
 80112c0:	015a      	lsls	r2, r3, #5
 80112c2:	68fb      	ldr	r3, [r7, #12]
 80112c4:	4413      	add	r3, r2
 80112c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80112ca:	681b      	ldr	r3, [r3, #0]
 80112cc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80112d0:	2b00      	cmp	r3, #0
 80112d2:	d153      	bne.n	801137c <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80112d4:	68bb      	ldr	r3, [r7, #8]
 80112d6:	015a      	lsls	r2, r3, #5
 80112d8:	68fb      	ldr	r3, [r7, #12]
 80112da:	4413      	add	r3, r2
 80112dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80112e0:	681a      	ldr	r2, [r3, #0]
 80112e2:	683b      	ldr	r3, [r7, #0]
 80112e4:	689b      	ldr	r3, [r3, #8]
 80112e6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80112ea:	683b      	ldr	r3, [r7, #0]
 80112ec:	791b      	ldrb	r3, [r3, #4]
 80112ee:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80112f0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80112f2:	68bb      	ldr	r3, [r7, #8]
 80112f4:	059b      	lsls	r3, r3, #22
 80112f6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80112f8:	431a      	orrs	r2, r3
 80112fa:	68bb      	ldr	r3, [r7, #8]
 80112fc:	0159      	lsls	r1, r3, #5
 80112fe:	68fb      	ldr	r3, [r7, #12]
 8011300:	440b      	add	r3, r1
 8011302:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011306:	4619      	mov	r1, r3
 8011308:	4b20      	ldr	r3, [pc, #128]	@ (801138c <USB_ActivateEndpoint+0x10c>)
 801130a:	4313      	orrs	r3, r2
 801130c:	600b      	str	r3, [r1, #0]
 801130e:	e035      	b.n	801137c <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8011310:	68fb      	ldr	r3, [r7, #12]
 8011312:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011316:	69da      	ldr	r2, [r3, #28]
 8011318:	683b      	ldr	r3, [r7, #0]
 801131a:	781b      	ldrb	r3, [r3, #0]
 801131c:	f003 030f 	and.w	r3, r3, #15
 8011320:	2101      	movs	r1, #1
 8011322:	fa01 f303 	lsl.w	r3, r1, r3
 8011326:	041b      	lsls	r3, r3, #16
 8011328:	68f9      	ldr	r1, [r7, #12]
 801132a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 801132e:	4313      	orrs	r3, r2
 8011330:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8011332:	68bb      	ldr	r3, [r7, #8]
 8011334:	015a      	lsls	r2, r3, #5
 8011336:	68fb      	ldr	r3, [r7, #12]
 8011338:	4413      	add	r3, r2
 801133a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801133e:	681b      	ldr	r3, [r3, #0]
 8011340:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8011344:	2b00      	cmp	r3, #0
 8011346:	d119      	bne.n	801137c <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8011348:	68bb      	ldr	r3, [r7, #8]
 801134a:	015a      	lsls	r2, r3, #5
 801134c:	68fb      	ldr	r3, [r7, #12]
 801134e:	4413      	add	r3, r2
 8011350:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011354:	681a      	ldr	r2, [r3, #0]
 8011356:	683b      	ldr	r3, [r7, #0]
 8011358:	689b      	ldr	r3, [r3, #8]
 801135a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 801135e:	683b      	ldr	r3, [r7, #0]
 8011360:	791b      	ldrb	r3, [r3, #4]
 8011362:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8011364:	430b      	orrs	r3, r1
 8011366:	431a      	orrs	r2, r3
 8011368:	68bb      	ldr	r3, [r7, #8]
 801136a:	0159      	lsls	r1, r3, #5
 801136c:	68fb      	ldr	r3, [r7, #12]
 801136e:	440b      	add	r3, r1
 8011370:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011374:	4619      	mov	r1, r3
 8011376:	4b05      	ldr	r3, [pc, #20]	@ (801138c <USB_ActivateEndpoint+0x10c>)
 8011378:	4313      	orrs	r3, r2
 801137a:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 801137c:	2300      	movs	r3, #0
}
 801137e:	4618      	mov	r0, r3
 8011380:	3714      	adds	r7, #20
 8011382:	46bd      	mov	sp, r7
 8011384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011388:	4770      	bx	lr
 801138a:	bf00      	nop
 801138c:	10008000 	.word	0x10008000

08011390 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8011390:	b480      	push	{r7}
 8011392:	b085      	sub	sp, #20
 8011394:	af00      	add	r7, sp, #0
 8011396:	6078      	str	r0, [r7, #4]
 8011398:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801139a:	687b      	ldr	r3, [r7, #4]
 801139c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801139e:	683b      	ldr	r3, [r7, #0]
 80113a0:	781b      	ldrb	r3, [r3, #0]
 80113a2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80113a4:	683b      	ldr	r3, [r7, #0]
 80113a6:	785b      	ldrb	r3, [r3, #1]
 80113a8:	2b01      	cmp	r3, #1
 80113aa:	d161      	bne.n	8011470 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80113ac:	68bb      	ldr	r3, [r7, #8]
 80113ae:	015a      	lsls	r2, r3, #5
 80113b0:	68fb      	ldr	r3, [r7, #12]
 80113b2:	4413      	add	r3, r2
 80113b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80113b8:	681b      	ldr	r3, [r3, #0]
 80113ba:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80113be:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80113c2:	d11f      	bne.n	8011404 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80113c4:	68bb      	ldr	r3, [r7, #8]
 80113c6:	015a      	lsls	r2, r3, #5
 80113c8:	68fb      	ldr	r3, [r7, #12]
 80113ca:	4413      	add	r3, r2
 80113cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80113d0:	681b      	ldr	r3, [r3, #0]
 80113d2:	68ba      	ldr	r2, [r7, #8]
 80113d4:	0151      	lsls	r1, r2, #5
 80113d6:	68fa      	ldr	r2, [r7, #12]
 80113d8:	440a      	add	r2, r1
 80113da:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80113de:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80113e2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80113e4:	68bb      	ldr	r3, [r7, #8]
 80113e6:	015a      	lsls	r2, r3, #5
 80113e8:	68fb      	ldr	r3, [r7, #12]
 80113ea:	4413      	add	r3, r2
 80113ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80113f0:	681b      	ldr	r3, [r3, #0]
 80113f2:	68ba      	ldr	r2, [r7, #8]
 80113f4:	0151      	lsls	r1, r2, #5
 80113f6:	68fa      	ldr	r2, [r7, #12]
 80113f8:	440a      	add	r2, r1
 80113fa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80113fe:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8011402:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8011404:	68fb      	ldr	r3, [r7, #12]
 8011406:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801140a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801140c:	683b      	ldr	r3, [r7, #0]
 801140e:	781b      	ldrb	r3, [r3, #0]
 8011410:	f003 030f 	and.w	r3, r3, #15
 8011414:	2101      	movs	r1, #1
 8011416:	fa01 f303 	lsl.w	r3, r1, r3
 801141a:	b29b      	uxth	r3, r3
 801141c:	43db      	mvns	r3, r3
 801141e:	68f9      	ldr	r1, [r7, #12]
 8011420:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8011424:	4013      	ands	r3, r2
 8011426:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8011428:	68fb      	ldr	r3, [r7, #12]
 801142a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801142e:	69da      	ldr	r2, [r3, #28]
 8011430:	683b      	ldr	r3, [r7, #0]
 8011432:	781b      	ldrb	r3, [r3, #0]
 8011434:	f003 030f 	and.w	r3, r3, #15
 8011438:	2101      	movs	r1, #1
 801143a:	fa01 f303 	lsl.w	r3, r1, r3
 801143e:	b29b      	uxth	r3, r3
 8011440:	43db      	mvns	r3, r3
 8011442:	68f9      	ldr	r1, [r7, #12]
 8011444:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8011448:	4013      	ands	r3, r2
 801144a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 801144c:	68bb      	ldr	r3, [r7, #8]
 801144e:	015a      	lsls	r2, r3, #5
 8011450:	68fb      	ldr	r3, [r7, #12]
 8011452:	4413      	add	r3, r2
 8011454:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011458:	681a      	ldr	r2, [r3, #0]
 801145a:	68bb      	ldr	r3, [r7, #8]
 801145c:	0159      	lsls	r1, r3, #5
 801145e:	68fb      	ldr	r3, [r7, #12]
 8011460:	440b      	add	r3, r1
 8011462:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011466:	4619      	mov	r1, r3
 8011468:	4b35      	ldr	r3, [pc, #212]	@ (8011540 <USB_DeactivateEndpoint+0x1b0>)
 801146a:	4013      	ands	r3, r2
 801146c:	600b      	str	r3, [r1, #0]
 801146e:	e060      	b.n	8011532 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8011470:	68bb      	ldr	r3, [r7, #8]
 8011472:	015a      	lsls	r2, r3, #5
 8011474:	68fb      	ldr	r3, [r7, #12]
 8011476:	4413      	add	r3, r2
 8011478:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801147c:	681b      	ldr	r3, [r3, #0]
 801147e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8011482:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8011486:	d11f      	bne.n	80114c8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8011488:	68bb      	ldr	r3, [r7, #8]
 801148a:	015a      	lsls	r2, r3, #5
 801148c:	68fb      	ldr	r3, [r7, #12]
 801148e:	4413      	add	r3, r2
 8011490:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011494:	681b      	ldr	r3, [r3, #0]
 8011496:	68ba      	ldr	r2, [r7, #8]
 8011498:	0151      	lsls	r1, r2, #5
 801149a:	68fa      	ldr	r2, [r7, #12]
 801149c:	440a      	add	r2, r1
 801149e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80114a2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80114a6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80114a8:	68bb      	ldr	r3, [r7, #8]
 80114aa:	015a      	lsls	r2, r3, #5
 80114ac:	68fb      	ldr	r3, [r7, #12]
 80114ae:	4413      	add	r3, r2
 80114b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80114b4:	681b      	ldr	r3, [r3, #0]
 80114b6:	68ba      	ldr	r2, [r7, #8]
 80114b8:	0151      	lsls	r1, r2, #5
 80114ba:	68fa      	ldr	r2, [r7, #12]
 80114bc:	440a      	add	r2, r1
 80114be:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80114c2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80114c6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80114c8:	68fb      	ldr	r3, [r7, #12]
 80114ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80114ce:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80114d0:	683b      	ldr	r3, [r7, #0]
 80114d2:	781b      	ldrb	r3, [r3, #0]
 80114d4:	f003 030f 	and.w	r3, r3, #15
 80114d8:	2101      	movs	r1, #1
 80114da:	fa01 f303 	lsl.w	r3, r1, r3
 80114de:	041b      	lsls	r3, r3, #16
 80114e0:	43db      	mvns	r3, r3
 80114e2:	68f9      	ldr	r1, [r7, #12]
 80114e4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80114e8:	4013      	ands	r3, r2
 80114ea:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80114ec:	68fb      	ldr	r3, [r7, #12]
 80114ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80114f2:	69da      	ldr	r2, [r3, #28]
 80114f4:	683b      	ldr	r3, [r7, #0]
 80114f6:	781b      	ldrb	r3, [r3, #0]
 80114f8:	f003 030f 	and.w	r3, r3, #15
 80114fc:	2101      	movs	r1, #1
 80114fe:	fa01 f303 	lsl.w	r3, r1, r3
 8011502:	041b      	lsls	r3, r3, #16
 8011504:	43db      	mvns	r3, r3
 8011506:	68f9      	ldr	r1, [r7, #12]
 8011508:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 801150c:	4013      	ands	r3, r2
 801150e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8011510:	68bb      	ldr	r3, [r7, #8]
 8011512:	015a      	lsls	r2, r3, #5
 8011514:	68fb      	ldr	r3, [r7, #12]
 8011516:	4413      	add	r3, r2
 8011518:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801151c:	681a      	ldr	r2, [r3, #0]
 801151e:	68bb      	ldr	r3, [r7, #8]
 8011520:	0159      	lsls	r1, r3, #5
 8011522:	68fb      	ldr	r3, [r7, #12]
 8011524:	440b      	add	r3, r1
 8011526:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801152a:	4619      	mov	r1, r3
 801152c:	4b05      	ldr	r3, [pc, #20]	@ (8011544 <USB_DeactivateEndpoint+0x1b4>)
 801152e:	4013      	ands	r3, r2
 8011530:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8011532:	2300      	movs	r3, #0
}
 8011534:	4618      	mov	r0, r3
 8011536:	3714      	adds	r7, #20
 8011538:	46bd      	mov	sp, r7
 801153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801153e:	4770      	bx	lr
 8011540:	ec337800 	.word	0xec337800
 8011544:	eff37800 	.word	0xeff37800

08011548 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8011548:	b580      	push	{r7, lr}
 801154a:	b08a      	sub	sp, #40	@ 0x28
 801154c:	af02      	add	r7, sp, #8
 801154e:	60f8      	str	r0, [r7, #12]
 8011550:	60b9      	str	r1, [r7, #8]
 8011552:	4613      	mov	r3, r2
 8011554:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011556:	68fb      	ldr	r3, [r7, #12]
 8011558:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 801155a:	68bb      	ldr	r3, [r7, #8]
 801155c:	781b      	ldrb	r3, [r3, #0]
 801155e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8011560:	68bb      	ldr	r3, [r7, #8]
 8011562:	785b      	ldrb	r3, [r3, #1]
 8011564:	2b01      	cmp	r3, #1
 8011566:	f040 8181 	bne.w	801186c <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 801156a:	68bb      	ldr	r3, [r7, #8]
 801156c:	691b      	ldr	r3, [r3, #16]
 801156e:	2b00      	cmp	r3, #0
 8011570:	d132      	bne.n	80115d8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8011572:	69bb      	ldr	r3, [r7, #24]
 8011574:	015a      	lsls	r2, r3, #5
 8011576:	69fb      	ldr	r3, [r7, #28]
 8011578:	4413      	add	r3, r2
 801157a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801157e:	691a      	ldr	r2, [r3, #16]
 8011580:	69bb      	ldr	r3, [r7, #24]
 8011582:	0159      	lsls	r1, r3, #5
 8011584:	69fb      	ldr	r3, [r7, #28]
 8011586:	440b      	add	r3, r1
 8011588:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801158c:	4619      	mov	r1, r3
 801158e:	4ba5      	ldr	r3, [pc, #660]	@ (8011824 <USB_EPStartXfer+0x2dc>)
 8011590:	4013      	ands	r3, r2
 8011592:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8011594:	69bb      	ldr	r3, [r7, #24]
 8011596:	015a      	lsls	r2, r3, #5
 8011598:	69fb      	ldr	r3, [r7, #28]
 801159a:	4413      	add	r3, r2
 801159c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80115a0:	691b      	ldr	r3, [r3, #16]
 80115a2:	69ba      	ldr	r2, [r7, #24]
 80115a4:	0151      	lsls	r1, r2, #5
 80115a6:	69fa      	ldr	r2, [r7, #28]
 80115a8:	440a      	add	r2, r1
 80115aa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80115ae:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80115b2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80115b4:	69bb      	ldr	r3, [r7, #24]
 80115b6:	015a      	lsls	r2, r3, #5
 80115b8:	69fb      	ldr	r3, [r7, #28]
 80115ba:	4413      	add	r3, r2
 80115bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80115c0:	691a      	ldr	r2, [r3, #16]
 80115c2:	69bb      	ldr	r3, [r7, #24]
 80115c4:	0159      	lsls	r1, r3, #5
 80115c6:	69fb      	ldr	r3, [r7, #28]
 80115c8:	440b      	add	r3, r1
 80115ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80115ce:	4619      	mov	r1, r3
 80115d0:	4b95      	ldr	r3, [pc, #596]	@ (8011828 <USB_EPStartXfer+0x2e0>)
 80115d2:	4013      	ands	r3, r2
 80115d4:	610b      	str	r3, [r1, #16]
 80115d6:	e092      	b.n	80116fe <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80115d8:	69bb      	ldr	r3, [r7, #24]
 80115da:	015a      	lsls	r2, r3, #5
 80115dc:	69fb      	ldr	r3, [r7, #28]
 80115de:	4413      	add	r3, r2
 80115e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80115e4:	691a      	ldr	r2, [r3, #16]
 80115e6:	69bb      	ldr	r3, [r7, #24]
 80115e8:	0159      	lsls	r1, r3, #5
 80115ea:	69fb      	ldr	r3, [r7, #28]
 80115ec:	440b      	add	r3, r1
 80115ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80115f2:	4619      	mov	r1, r3
 80115f4:	4b8c      	ldr	r3, [pc, #560]	@ (8011828 <USB_EPStartXfer+0x2e0>)
 80115f6:	4013      	ands	r3, r2
 80115f8:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80115fa:	69bb      	ldr	r3, [r7, #24]
 80115fc:	015a      	lsls	r2, r3, #5
 80115fe:	69fb      	ldr	r3, [r7, #28]
 8011600:	4413      	add	r3, r2
 8011602:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011606:	691a      	ldr	r2, [r3, #16]
 8011608:	69bb      	ldr	r3, [r7, #24]
 801160a:	0159      	lsls	r1, r3, #5
 801160c:	69fb      	ldr	r3, [r7, #28]
 801160e:	440b      	add	r3, r1
 8011610:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011614:	4619      	mov	r1, r3
 8011616:	4b83      	ldr	r3, [pc, #524]	@ (8011824 <USB_EPStartXfer+0x2dc>)
 8011618:	4013      	ands	r3, r2
 801161a:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 801161c:	69bb      	ldr	r3, [r7, #24]
 801161e:	2b00      	cmp	r3, #0
 8011620:	d11a      	bne.n	8011658 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8011622:	68bb      	ldr	r3, [r7, #8]
 8011624:	691a      	ldr	r2, [r3, #16]
 8011626:	68bb      	ldr	r3, [r7, #8]
 8011628:	689b      	ldr	r3, [r3, #8]
 801162a:	429a      	cmp	r2, r3
 801162c:	d903      	bls.n	8011636 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 801162e:	68bb      	ldr	r3, [r7, #8]
 8011630:	689a      	ldr	r2, [r3, #8]
 8011632:	68bb      	ldr	r3, [r7, #8]
 8011634:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8011636:	69bb      	ldr	r3, [r7, #24]
 8011638:	015a      	lsls	r2, r3, #5
 801163a:	69fb      	ldr	r3, [r7, #28]
 801163c:	4413      	add	r3, r2
 801163e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011642:	691b      	ldr	r3, [r3, #16]
 8011644:	69ba      	ldr	r2, [r7, #24]
 8011646:	0151      	lsls	r1, r2, #5
 8011648:	69fa      	ldr	r2, [r7, #28]
 801164a:	440a      	add	r2, r1
 801164c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8011650:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8011654:	6113      	str	r3, [r2, #16]
 8011656:	e01b      	b.n	8011690 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8011658:	69bb      	ldr	r3, [r7, #24]
 801165a:	015a      	lsls	r2, r3, #5
 801165c:	69fb      	ldr	r3, [r7, #28]
 801165e:	4413      	add	r3, r2
 8011660:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011664:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8011666:	68bb      	ldr	r3, [r7, #8]
 8011668:	6919      	ldr	r1, [r3, #16]
 801166a:	68bb      	ldr	r3, [r7, #8]
 801166c:	689b      	ldr	r3, [r3, #8]
 801166e:	440b      	add	r3, r1
 8011670:	1e59      	subs	r1, r3, #1
 8011672:	68bb      	ldr	r3, [r7, #8]
 8011674:	689b      	ldr	r3, [r3, #8]
 8011676:	fbb1 f3f3 	udiv	r3, r1, r3
 801167a:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 801167c:	4b6b      	ldr	r3, [pc, #428]	@ (801182c <USB_EPStartXfer+0x2e4>)
 801167e:	400b      	ands	r3, r1
 8011680:	69b9      	ldr	r1, [r7, #24]
 8011682:	0148      	lsls	r0, r1, #5
 8011684:	69f9      	ldr	r1, [r7, #28]
 8011686:	4401      	add	r1, r0
 8011688:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 801168c:	4313      	orrs	r3, r2
 801168e:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8011690:	69bb      	ldr	r3, [r7, #24]
 8011692:	015a      	lsls	r2, r3, #5
 8011694:	69fb      	ldr	r3, [r7, #28]
 8011696:	4413      	add	r3, r2
 8011698:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801169c:	691a      	ldr	r2, [r3, #16]
 801169e:	68bb      	ldr	r3, [r7, #8]
 80116a0:	691b      	ldr	r3, [r3, #16]
 80116a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80116a6:	69b9      	ldr	r1, [r7, #24]
 80116a8:	0148      	lsls	r0, r1, #5
 80116aa:	69f9      	ldr	r1, [r7, #28]
 80116ac:	4401      	add	r1, r0
 80116ae:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80116b2:	4313      	orrs	r3, r2
 80116b4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80116b6:	68bb      	ldr	r3, [r7, #8]
 80116b8:	791b      	ldrb	r3, [r3, #4]
 80116ba:	2b01      	cmp	r3, #1
 80116bc:	d11f      	bne.n	80116fe <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80116be:	69bb      	ldr	r3, [r7, #24]
 80116c0:	015a      	lsls	r2, r3, #5
 80116c2:	69fb      	ldr	r3, [r7, #28]
 80116c4:	4413      	add	r3, r2
 80116c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80116ca:	691b      	ldr	r3, [r3, #16]
 80116cc:	69ba      	ldr	r2, [r7, #24]
 80116ce:	0151      	lsls	r1, r2, #5
 80116d0:	69fa      	ldr	r2, [r7, #28]
 80116d2:	440a      	add	r2, r1
 80116d4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80116d8:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80116dc:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80116de:	69bb      	ldr	r3, [r7, #24]
 80116e0:	015a      	lsls	r2, r3, #5
 80116e2:	69fb      	ldr	r3, [r7, #28]
 80116e4:	4413      	add	r3, r2
 80116e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80116ea:	691b      	ldr	r3, [r3, #16]
 80116ec:	69ba      	ldr	r2, [r7, #24]
 80116ee:	0151      	lsls	r1, r2, #5
 80116f0:	69fa      	ldr	r2, [r7, #28]
 80116f2:	440a      	add	r2, r1
 80116f4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80116f8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80116fc:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80116fe:	79fb      	ldrb	r3, [r7, #7]
 8011700:	2b01      	cmp	r3, #1
 8011702:	d14b      	bne.n	801179c <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8011704:	68bb      	ldr	r3, [r7, #8]
 8011706:	69db      	ldr	r3, [r3, #28]
 8011708:	2b00      	cmp	r3, #0
 801170a:	d009      	beq.n	8011720 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 801170c:	69bb      	ldr	r3, [r7, #24]
 801170e:	015a      	lsls	r2, r3, #5
 8011710:	69fb      	ldr	r3, [r7, #28]
 8011712:	4413      	add	r3, r2
 8011714:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011718:	461a      	mov	r2, r3
 801171a:	68bb      	ldr	r3, [r7, #8]
 801171c:	69db      	ldr	r3, [r3, #28]
 801171e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8011720:	68bb      	ldr	r3, [r7, #8]
 8011722:	791b      	ldrb	r3, [r3, #4]
 8011724:	2b01      	cmp	r3, #1
 8011726:	d128      	bne.n	801177a <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8011728:	69fb      	ldr	r3, [r7, #28]
 801172a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801172e:	689b      	ldr	r3, [r3, #8]
 8011730:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8011734:	2b00      	cmp	r3, #0
 8011736:	d110      	bne.n	801175a <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8011738:	69bb      	ldr	r3, [r7, #24]
 801173a:	015a      	lsls	r2, r3, #5
 801173c:	69fb      	ldr	r3, [r7, #28]
 801173e:	4413      	add	r3, r2
 8011740:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011744:	681b      	ldr	r3, [r3, #0]
 8011746:	69ba      	ldr	r2, [r7, #24]
 8011748:	0151      	lsls	r1, r2, #5
 801174a:	69fa      	ldr	r2, [r7, #28]
 801174c:	440a      	add	r2, r1
 801174e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8011752:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8011756:	6013      	str	r3, [r2, #0]
 8011758:	e00f      	b.n	801177a <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 801175a:	69bb      	ldr	r3, [r7, #24]
 801175c:	015a      	lsls	r2, r3, #5
 801175e:	69fb      	ldr	r3, [r7, #28]
 8011760:	4413      	add	r3, r2
 8011762:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011766:	681b      	ldr	r3, [r3, #0]
 8011768:	69ba      	ldr	r2, [r7, #24]
 801176a:	0151      	lsls	r1, r2, #5
 801176c:	69fa      	ldr	r2, [r7, #28]
 801176e:	440a      	add	r2, r1
 8011770:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8011774:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8011778:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801177a:	69bb      	ldr	r3, [r7, #24]
 801177c:	015a      	lsls	r2, r3, #5
 801177e:	69fb      	ldr	r3, [r7, #28]
 8011780:	4413      	add	r3, r2
 8011782:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011786:	681b      	ldr	r3, [r3, #0]
 8011788:	69ba      	ldr	r2, [r7, #24]
 801178a:	0151      	lsls	r1, r2, #5
 801178c:	69fa      	ldr	r2, [r7, #28]
 801178e:	440a      	add	r2, r1
 8011790:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8011794:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8011798:	6013      	str	r3, [r2, #0]
 801179a:	e16a      	b.n	8011a72 <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801179c:	69bb      	ldr	r3, [r7, #24]
 801179e:	015a      	lsls	r2, r3, #5
 80117a0:	69fb      	ldr	r3, [r7, #28]
 80117a2:	4413      	add	r3, r2
 80117a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80117a8:	681b      	ldr	r3, [r3, #0]
 80117aa:	69ba      	ldr	r2, [r7, #24]
 80117ac:	0151      	lsls	r1, r2, #5
 80117ae:	69fa      	ldr	r2, [r7, #28]
 80117b0:	440a      	add	r2, r1
 80117b2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80117b6:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80117ba:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80117bc:	68bb      	ldr	r3, [r7, #8]
 80117be:	791b      	ldrb	r3, [r3, #4]
 80117c0:	2b01      	cmp	r3, #1
 80117c2:	d015      	beq.n	80117f0 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80117c4:	68bb      	ldr	r3, [r7, #8]
 80117c6:	691b      	ldr	r3, [r3, #16]
 80117c8:	2b00      	cmp	r3, #0
 80117ca:	f000 8152 	beq.w	8011a72 <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80117ce:	69fb      	ldr	r3, [r7, #28]
 80117d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80117d4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80117d6:	68bb      	ldr	r3, [r7, #8]
 80117d8:	781b      	ldrb	r3, [r3, #0]
 80117da:	f003 030f 	and.w	r3, r3, #15
 80117de:	2101      	movs	r1, #1
 80117e0:	fa01 f303 	lsl.w	r3, r1, r3
 80117e4:	69f9      	ldr	r1, [r7, #28]
 80117e6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80117ea:	4313      	orrs	r3, r2
 80117ec:	634b      	str	r3, [r1, #52]	@ 0x34
 80117ee:	e140      	b.n	8011a72 <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80117f0:	69fb      	ldr	r3, [r7, #28]
 80117f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80117f6:	689b      	ldr	r3, [r3, #8]
 80117f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80117fc:	2b00      	cmp	r3, #0
 80117fe:	d117      	bne.n	8011830 <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8011800:	69bb      	ldr	r3, [r7, #24]
 8011802:	015a      	lsls	r2, r3, #5
 8011804:	69fb      	ldr	r3, [r7, #28]
 8011806:	4413      	add	r3, r2
 8011808:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801180c:	681b      	ldr	r3, [r3, #0]
 801180e:	69ba      	ldr	r2, [r7, #24]
 8011810:	0151      	lsls	r1, r2, #5
 8011812:	69fa      	ldr	r2, [r7, #28]
 8011814:	440a      	add	r2, r1
 8011816:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801181a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 801181e:	6013      	str	r3, [r2, #0]
 8011820:	e016      	b.n	8011850 <USB_EPStartXfer+0x308>
 8011822:	bf00      	nop
 8011824:	e007ffff 	.word	0xe007ffff
 8011828:	fff80000 	.word	0xfff80000
 801182c:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8011830:	69bb      	ldr	r3, [r7, #24]
 8011832:	015a      	lsls	r2, r3, #5
 8011834:	69fb      	ldr	r3, [r7, #28]
 8011836:	4413      	add	r3, r2
 8011838:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801183c:	681b      	ldr	r3, [r3, #0]
 801183e:	69ba      	ldr	r2, [r7, #24]
 8011840:	0151      	lsls	r1, r2, #5
 8011842:	69fa      	ldr	r2, [r7, #28]
 8011844:	440a      	add	r2, r1
 8011846:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801184a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 801184e:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8011850:	68bb      	ldr	r3, [r7, #8]
 8011852:	68d9      	ldr	r1, [r3, #12]
 8011854:	68bb      	ldr	r3, [r7, #8]
 8011856:	781a      	ldrb	r2, [r3, #0]
 8011858:	68bb      	ldr	r3, [r7, #8]
 801185a:	691b      	ldr	r3, [r3, #16]
 801185c:	b298      	uxth	r0, r3
 801185e:	79fb      	ldrb	r3, [r7, #7]
 8011860:	9300      	str	r3, [sp, #0]
 8011862:	4603      	mov	r3, r0
 8011864:	68f8      	ldr	r0, [r7, #12]
 8011866:	f000 f9b9 	bl	8011bdc <USB_WritePacket>
 801186a:	e102      	b.n	8011a72 <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 801186c:	69bb      	ldr	r3, [r7, #24]
 801186e:	015a      	lsls	r2, r3, #5
 8011870:	69fb      	ldr	r3, [r7, #28]
 8011872:	4413      	add	r3, r2
 8011874:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011878:	691a      	ldr	r2, [r3, #16]
 801187a:	69bb      	ldr	r3, [r7, #24]
 801187c:	0159      	lsls	r1, r3, #5
 801187e:	69fb      	ldr	r3, [r7, #28]
 8011880:	440b      	add	r3, r1
 8011882:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011886:	4619      	mov	r1, r3
 8011888:	4b7c      	ldr	r3, [pc, #496]	@ (8011a7c <USB_EPStartXfer+0x534>)
 801188a:	4013      	ands	r3, r2
 801188c:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 801188e:	69bb      	ldr	r3, [r7, #24]
 8011890:	015a      	lsls	r2, r3, #5
 8011892:	69fb      	ldr	r3, [r7, #28]
 8011894:	4413      	add	r3, r2
 8011896:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801189a:	691a      	ldr	r2, [r3, #16]
 801189c:	69bb      	ldr	r3, [r7, #24]
 801189e:	0159      	lsls	r1, r3, #5
 80118a0:	69fb      	ldr	r3, [r7, #28]
 80118a2:	440b      	add	r3, r1
 80118a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80118a8:	4619      	mov	r1, r3
 80118aa:	4b75      	ldr	r3, [pc, #468]	@ (8011a80 <USB_EPStartXfer+0x538>)
 80118ac:	4013      	ands	r3, r2
 80118ae:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 80118b0:	69bb      	ldr	r3, [r7, #24]
 80118b2:	2b00      	cmp	r3, #0
 80118b4:	d12f      	bne.n	8011916 <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 80118b6:	68bb      	ldr	r3, [r7, #8]
 80118b8:	691b      	ldr	r3, [r3, #16]
 80118ba:	2b00      	cmp	r3, #0
 80118bc:	d003      	beq.n	80118c6 <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 80118be:	68bb      	ldr	r3, [r7, #8]
 80118c0:	689a      	ldr	r2, [r3, #8]
 80118c2:	68bb      	ldr	r3, [r7, #8]
 80118c4:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80118c6:	68bb      	ldr	r3, [r7, #8]
 80118c8:	689a      	ldr	r2, [r3, #8]
 80118ca:	68bb      	ldr	r3, [r7, #8]
 80118cc:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80118ce:	69bb      	ldr	r3, [r7, #24]
 80118d0:	015a      	lsls	r2, r3, #5
 80118d2:	69fb      	ldr	r3, [r7, #28]
 80118d4:	4413      	add	r3, r2
 80118d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80118da:	691a      	ldr	r2, [r3, #16]
 80118dc:	68bb      	ldr	r3, [r7, #8]
 80118de:	6a1b      	ldr	r3, [r3, #32]
 80118e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80118e4:	69b9      	ldr	r1, [r7, #24]
 80118e6:	0148      	lsls	r0, r1, #5
 80118e8:	69f9      	ldr	r1, [r7, #28]
 80118ea:	4401      	add	r1, r0
 80118ec:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80118f0:	4313      	orrs	r3, r2
 80118f2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80118f4:	69bb      	ldr	r3, [r7, #24]
 80118f6:	015a      	lsls	r2, r3, #5
 80118f8:	69fb      	ldr	r3, [r7, #28]
 80118fa:	4413      	add	r3, r2
 80118fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011900:	691b      	ldr	r3, [r3, #16]
 8011902:	69ba      	ldr	r2, [r7, #24]
 8011904:	0151      	lsls	r1, r2, #5
 8011906:	69fa      	ldr	r2, [r7, #28]
 8011908:	440a      	add	r2, r1
 801190a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801190e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8011912:	6113      	str	r3, [r2, #16]
 8011914:	e05f      	b.n	80119d6 <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 8011916:	68bb      	ldr	r3, [r7, #8]
 8011918:	691b      	ldr	r3, [r3, #16]
 801191a:	2b00      	cmp	r3, #0
 801191c:	d123      	bne.n	8011966 <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 801191e:	69bb      	ldr	r3, [r7, #24]
 8011920:	015a      	lsls	r2, r3, #5
 8011922:	69fb      	ldr	r3, [r7, #28]
 8011924:	4413      	add	r3, r2
 8011926:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801192a:	691a      	ldr	r2, [r3, #16]
 801192c:	68bb      	ldr	r3, [r7, #8]
 801192e:	689b      	ldr	r3, [r3, #8]
 8011930:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8011934:	69b9      	ldr	r1, [r7, #24]
 8011936:	0148      	lsls	r0, r1, #5
 8011938:	69f9      	ldr	r1, [r7, #28]
 801193a:	4401      	add	r1, r0
 801193c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8011940:	4313      	orrs	r3, r2
 8011942:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8011944:	69bb      	ldr	r3, [r7, #24]
 8011946:	015a      	lsls	r2, r3, #5
 8011948:	69fb      	ldr	r3, [r7, #28]
 801194a:	4413      	add	r3, r2
 801194c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011950:	691b      	ldr	r3, [r3, #16]
 8011952:	69ba      	ldr	r2, [r7, #24]
 8011954:	0151      	lsls	r1, r2, #5
 8011956:	69fa      	ldr	r2, [r7, #28]
 8011958:	440a      	add	r2, r1
 801195a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801195e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8011962:	6113      	str	r3, [r2, #16]
 8011964:	e037      	b.n	80119d6 <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8011966:	68bb      	ldr	r3, [r7, #8]
 8011968:	691a      	ldr	r2, [r3, #16]
 801196a:	68bb      	ldr	r3, [r7, #8]
 801196c:	689b      	ldr	r3, [r3, #8]
 801196e:	4413      	add	r3, r2
 8011970:	1e5a      	subs	r2, r3, #1
 8011972:	68bb      	ldr	r3, [r7, #8]
 8011974:	689b      	ldr	r3, [r3, #8]
 8011976:	fbb2 f3f3 	udiv	r3, r2, r3
 801197a:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 801197c:	68bb      	ldr	r3, [r7, #8]
 801197e:	689b      	ldr	r3, [r3, #8]
 8011980:	8afa      	ldrh	r2, [r7, #22]
 8011982:	fb03 f202 	mul.w	r2, r3, r2
 8011986:	68bb      	ldr	r3, [r7, #8]
 8011988:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 801198a:	69bb      	ldr	r3, [r7, #24]
 801198c:	015a      	lsls	r2, r3, #5
 801198e:	69fb      	ldr	r3, [r7, #28]
 8011990:	4413      	add	r3, r2
 8011992:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011996:	691a      	ldr	r2, [r3, #16]
 8011998:	8afb      	ldrh	r3, [r7, #22]
 801199a:	04d9      	lsls	r1, r3, #19
 801199c:	4b39      	ldr	r3, [pc, #228]	@ (8011a84 <USB_EPStartXfer+0x53c>)
 801199e:	400b      	ands	r3, r1
 80119a0:	69b9      	ldr	r1, [r7, #24]
 80119a2:	0148      	lsls	r0, r1, #5
 80119a4:	69f9      	ldr	r1, [r7, #28]
 80119a6:	4401      	add	r1, r0
 80119a8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80119ac:	4313      	orrs	r3, r2
 80119ae:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80119b0:	69bb      	ldr	r3, [r7, #24]
 80119b2:	015a      	lsls	r2, r3, #5
 80119b4:	69fb      	ldr	r3, [r7, #28]
 80119b6:	4413      	add	r3, r2
 80119b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80119bc:	691a      	ldr	r2, [r3, #16]
 80119be:	68bb      	ldr	r3, [r7, #8]
 80119c0:	6a1b      	ldr	r3, [r3, #32]
 80119c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80119c6:	69b9      	ldr	r1, [r7, #24]
 80119c8:	0148      	lsls	r0, r1, #5
 80119ca:	69f9      	ldr	r1, [r7, #28]
 80119cc:	4401      	add	r1, r0
 80119ce:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80119d2:	4313      	orrs	r3, r2
 80119d4:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80119d6:	79fb      	ldrb	r3, [r7, #7]
 80119d8:	2b01      	cmp	r3, #1
 80119da:	d10d      	bne.n	80119f8 <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80119dc:	68bb      	ldr	r3, [r7, #8]
 80119de:	68db      	ldr	r3, [r3, #12]
 80119e0:	2b00      	cmp	r3, #0
 80119e2:	d009      	beq.n	80119f8 <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80119e4:	68bb      	ldr	r3, [r7, #8]
 80119e6:	68d9      	ldr	r1, [r3, #12]
 80119e8:	69bb      	ldr	r3, [r7, #24]
 80119ea:	015a      	lsls	r2, r3, #5
 80119ec:	69fb      	ldr	r3, [r7, #28]
 80119ee:	4413      	add	r3, r2
 80119f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80119f4:	460a      	mov	r2, r1
 80119f6:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80119f8:	68bb      	ldr	r3, [r7, #8]
 80119fa:	791b      	ldrb	r3, [r3, #4]
 80119fc:	2b01      	cmp	r3, #1
 80119fe:	d128      	bne.n	8011a52 <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8011a00:	69fb      	ldr	r3, [r7, #28]
 8011a02:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011a06:	689b      	ldr	r3, [r3, #8]
 8011a08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8011a0c:	2b00      	cmp	r3, #0
 8011a0e:	d110      	bne.n	8011a32 <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8011a10:	69bb      	ldr	r3, [r7, #24]
 8011a12:	015a      	lsls	r2, r3, #5
 8011a14:	69fb      	ldr	r3, [r7, #28]
 8011a16:	4413      	add	r3, r2
 8011a18:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011a1c:	681b      	ldr	r3, [r3, #0]
 8011a1e:	69ba      	ldr	r2, [r7, #24]
 8011a20:	0151      	lsls	r1, r2, #5
 8011a22:	69fa      	ldr	r2, [r7, #28]
 8011a24:	440a      	add	r2, r1
 8011a26:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8011a2a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8011a2e:	6013      	str	r3, [r2, #0]
 8011a30:	e00f      	b.n	8011a52 <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8011a32:	69bb      	ldr	r3, [r7, #24]
 8011a34:	015a      	lsls	r2, r3, #5
 8011a36:	69fb      	ldr	r3, [r7, #28]
 8011a38:	4413      	add	r3, r2
 8011a3a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011a3e:	681b      	ldr	r3, [r3, #0]
 8011a40:	69ba      	ldr	r2, [r7, #24]
 8011a42:	0151      	lsls	r1, r2, #5
 8011a44:	69fa      	ldr	r2, [r7, #28]
 8011a46:	440a      	add	r2, r1
 8011a48:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8011a4c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8011a50:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8011a52:	69bb      	ldr	r3, [r7, #24]
 8011a54:	015a      	lsls	r2, r3, #5
 8011a56:	69fb      	ldr	r3, [r7, #28]
 8011a58:	4413      	add	r3, r2
 8011a5a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011a5e:	681b      	ldr	r3, [r3, #0]
 8011a60:	69ba      	ldr	r2, [r7, #24]
 8011a62:	0151      	lsls	r1, r2, #5
 8011a64:	69fa      	ldr	r2, [r7, #28]
 8011a66:	440a      	add	r2, r1
 8011a68:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8011a6c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8011a70:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8011a72:	2300      	movs	r3, #0
}
 8011a74:	4618      	mov	r0, r3
 8011a76:	3720      	adds	r7, #32
 8011a78:	46bd      	mov	sp, r7
 8011a7a:	bd80      	pop	{r7, pc}
 8011a7c:	fff80000 	.word	0xfff80000
 8011a80:	e007ffff 	.word	0xe007ffff
 8011a84:	1ff80000 	.word	0x1ff80000

08011a88 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8011a88:	b480      	push	{r7}
 8011a8a:	b087      	sub	sp, #28
 8011a8c:	af00      	add	r7, sp, #0
 8011a8e:	6078      	str	r0, [r7, #4]
 8011a90:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8011a92:	2300      	movs	r3, #0
 8011a94:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8011a96:	2300      	movs	r3, #0
 8011a98:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011a9a:	687b      	ldr	r3, [r7, #4]
 8011a9c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8011a9e:	683b      	ldr	r3, [r7, #0]
 8011aa0:	785b      	ldrb	r3, [r3, #1]
 8011aa2:	2b01      	cmp	r3, #1
 8011aa4:	d14a      	bne.n	8011b3c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8011aa6:	683b      	ldr	r3, [r7, #0]
 8011aa8:	781b      	ldrb	r3, [r3, #0]
 8011aaa:	015a      	lsls	r2, r3, #5
 8011aac:	693b      	ldr	r3, [r7, #16]
 8011aae:	4413      	add	r3, r2
 8011ab0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011ab4:	681b      	ldr	r3, [r3, #0]
 8011ab6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8011aba:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8011abe:	f040 8086 	bne.w	8011bce <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8011ac2:	683b      	ldr	r3, [r7, #0]
 8011ac4:	781b      	ldrb	r3, [r3, #0]
 8011ac6:	015a      	lsls	r2, r3, #5
 8011ac8:	693b      	ldr	r3, [r7, #16]
 8011aca:	4413      	add	r3, r2
 8011acc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011ad0:	681b      	ldr	r3, [r3, #0]
 8011ad2:	683a      	ldr	r2, [r7, #0]
 8011ad4:	7812      	ldrb	r2, [r2, #0]
 8011ad6:	0151      	lsls	r1, r2, #5
 8011ad8:	693a      	ldr	r2, [r7, #16]
 8011ada:	440a      	add	r2, r1
 8011adc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8011ae0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8011ae4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8011ae6:	683b      	ldr	r3, [r7, #0]
 8011ae8:	781b      	ldrb	r3, [r3, #0]
 8011aea:	015a      	lsls	r2, r3, #5
 8011aec:	693b      	ldr	r3, [r7, #16]
 8011aee:	4413      	add	r3, r2
 8011af0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011af4:	681b      	ldr	r3, [r3, #0]
 8011af6:	683a      	ldr	r2, [r7, #0]
 8011af8:	7812      	ldrb	r2, [r2, #0]
 8011afa:	0151      	lsls	r1, r2, #5
 8011afc:	693a      	ldr	r2, [r7, #16]
 8011afe:	440a      	add	r2, r1
 8011b00:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8011b04:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8011b08:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8011b0a:	68fb      	ldr	r3, [r7, #12]
 8011b0c:	3301      	adds	r3, #1
 8011b0e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8011b10:	68fb      	ldr	r3, [r7, #12]
 8011b12:	f242 7210 	movw	r2, #10000	@ 0x2710
 8011b16:	4293      	cmp	r3, r2
 8011b18:	d902      	bls.n	8011b20 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8011b1a:	2301      	movs	r3, #1
 8011b1c:	75fb      	strb	r3, [r7, #23]
          break;
 8011b1e:	e056      	b.n	8011bce <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8011b20:	683b      	ldr	r3, [r7, #0]
 8011b22:	781b      	ldrb	r3, [r3, #0]
 8011b24:	015a      	lsls	r2, r3, #5
 8011b26:	693b      	ldr	r3, [r7, #16]
 8011b28:	4413      	add	r3, r2
 8011b2a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011b2e:	681b      	ldr	r3, [r3, #0]
 8011b30:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8011b34:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8011b38:	d0e7      	beq.n	8011b0a <USB_EPStopXfer+0x82>
 8011b3a:	e048      	b.n	8011bce <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8011b3c:	683b      	ldr	r3, [r7, #0]
 8011b3e:	781b      	ldrb	r3, [r3, #0]
 8011b40:	015a      	lsls	r2, r3, #5
 8011b42:	693b      	ldr	r3, [r7, #16]
 8011b44:	4413      	add	r3, r2
 8011b46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011b4a:	681b      	ldr	r3, [r3, #0]
 8011b4c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8011b50:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8011b54:	d13b      	bne.n	8011bce <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8011b56:	683b      	ldr	r3, [r7, #0]
 8011b58:	781b      	ldrb	r3, [r3, #0]
 8011b5a:	015a      	lsls	r2, r3, #5
 8011b5c:	693b      	ldr	r3, [r7, #16]
 8011b5e:	4413      	add	r3, r2
 8011b60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011b64:	681b      	ldr	r3, [r3, #0]
 8011b66:	683a      	ldr	r2, [r7, #0]
 8011b68:	7812      	ldrb	r2, [r2, #0]
 8011b6a:	0151      	lsls	r1, r2, #5
 8011b6c:	693a      	ldr	r2, [r7, #16]
 8011b6e:	440a      	add	r2, r1
 8011b70:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8011b74:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8011b78:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8011b7a:	683b      	ldr	r3, [r7, #0]
 8011b7c:	781b      	ldrb	r3, [r3, #0]
 8011b7e:	015a      	lsls	r2, r3, #5
 8011b80:	693b      	ldr	r3, [r7, #16]
 8011b82:	4413      	add	r3, r2
 8011b84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011b88:	681b      	ldr	r3, [r3, #0]
 8011b8a:	683a      	ldr	r2, [r7, #0]
 8011b8c:	7812      	ldrb	r2, [r2, #0]
 8011b8e:	0151      	lsls	r1, r2, #5
 8011b90:	693a      	ldr	r2, [r7, #16]
 8011b92:	440a      	add	r2, r1
 8011b94:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8011b98:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8011b9c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8011b9e:	68fb      	ldr	r3, [r7, #12]
 8011ba0:	3301      	adds	r3, #1
 8011ba2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8011ba4:	68fb      	ldr	r3, [r7, #12]
 8011ba6:	f242 7210 	movw	r2, #10000	@ 0x2710
 8011baa:	4293      	cmp	r3, r2
 8011bac:	d902      	bls.n	8011bb4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8011bae:	2301      	movs	r3, #1
 8011bb0:	75fb      	strb	r3, [r7, #23]
          break;
 8011bb2:	e00c      	b.n	8011bce <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8011bb4:	683b      	ldr	r3, [r7, #0]
 8011bb6:	781b      	ldrb	r3, [r3, #0]
 8011bb8:	015a      	lsls	r2, r3, #5
 8011bba:	693b      	ldr	r3, [r7, #16]
 8011bbc:	4413      	add	r3, r2
 8011bbe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011bc2:	681b      	ldr	r3, [r3, #0]
 8011bc4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8011bc8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8011bcc:	d0e7      	beq.n	8011b9e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8011bce:	7dfb      	ldrb	r3, [r7, #23]
}
 8011bd0:	4618      	mov	r0, r3
 8011bd2:	371c      	adds	r7, #28
 8011bd4:	46bd      	mov	sp, r7
 8011bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bda:	4770      	bx	lr

08011bdc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8011bdc:	b480      	push	{r7}
 8011bde:	b089      	sub	sp, #36	@ 0x24
 8011be0:	af00      	add	r7, sp, #0
 8011be2:	60f8      	str	r0, [r7, #12]
 8011be4:	60b9      	str	r1, [r7, #8]
 8011be6:	4611      	mov	r1, r2
 8011be8:	461a      	mov	r2, r3
 8011bea:	460b      	mov	r3, r1
 8011bec:	71fb      	strb	r3, [r7, #7]
 8011bee:	4613      	mov	r3, r2
 8011bf0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011bf2:	68fb      	ldr	r3, [r7, #12]
 8011bf4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8011bf6:	68bb      	ldr	r3, [r7, #8]
 8011bf8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8011bfa:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8011bfe:	2b00      	cmp	r3, #0
 8011c00:	d123      	bne.n	8011c4a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8011c02:	88bb      	ldrh	r3, [r7, #4]
 8011c04:	3303      	adds	r3, #3
 8011c06:	089b      	lsrs	r3, r3, #2
 8011c08:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8011c0a:	2300      	movs	r3, #0
 8011c0c:	61bb      	str	r3, [r7, #24]
 8011c0e:	e018      	b.n	8011c42 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8011c10:	79fb      	ldrb	r3, [r7, #7]
 8011c12:	031a      	lsls	r2, r3, #12
 8011c14:	697b      	ldr	r3, [r7, #20]
 8011c16:	4413      	add	r3, r2
 8011c18:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8011c1c:	461a      	mov	r2, r3
 8011c1e:	69fb      	ldr	r3, [r7, #28]
 8011c20:	681b      	ldr	r3, [r3, #0]
 8011c22:	6013      	str	r3, [r2, #0]
      pSrc++;
 8011c24:	69fb      	ldr	r3, [r7, #28]
 8011c26:	3301      	adds	r3, #1
 8011c28:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8011c2a:	69fb      	ldr	r3, [r7, #28]
 8011c2c:	3301      	adds	r3, #1
 8011c2e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8011c30:	69fb      	ldr	r3, [r7, #28]
 8011c32:	3301      	adds	r3, #1
 8011c34:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8011c36:	69fb      	ldr	r3, [r7, #28]
 8011c38:	3301      	adds	r3, #1
 8011c3a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8011c3c:	69bb      	ldr	r3, [r7, #24]
 8011c3e:	3301      	adds	r3, #1
 8011c40:	61bb      	str	r3, [r7, #24]
 8011c42:	69ba      	ldr	r2, [r7, #24]
 8011c44:	693b      	ldr	r3, [r7, #16]
 8011c46:	429a      	cmp	r2, r3
 8011c48:	d3e2      	bcc.n	8011c10 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8011c4a:	2300      	movs	r3, #0
}
 8011c4c:	4618      	mov	r0, r3
 8011c4e:	3724      	adds	r7, #36	@ 0x24
 8011c50:	46bd      	mov	sp, r7
 8011c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c56:	4770      	bx	lr

08011c58 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8011c58:	b480      	push	{r7}
 8011c5a:	b08b      	sub	sp, #44	@ 0x2c
 8011c5c:	af00      	add	r7, sp, #0
 8011c5e:	60f8      	str	r0, [r7, #12]
 8011c60:	60b9      	str	r1, [r7, #8]
 8011c62:	4613      	mov	r3, r2
 8011c64:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011c66:	68fb      	ldr	r3, [r7, #12]
 8011c68:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8011c6a:	68bb      	ldr	r3, [r7, #8]
 8011c6c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8011c6e:	88fb      	ldrh	r3, [r7, #6]
 8011c70:	089b      	lsrs	r3, r3, #2
 8011c72:	b29b      	uxth	r3, r3
 8011c74:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8011c76:	88fb      	ldrh	r3, [r7, #6]
 8011c78:	f003 0303 	and.w	r3, r3, #3
 8011c7c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8011c7e:	2300      	movs	r3, #0
 8011c80:	623b      	str	r3, [r7, #32]
 8011c82:	e014      	b.n	8011cae <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8011c84:	69bb      	ldr	r3, [r7, #24]
 8011c86:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8011c8a:	681a      	ldr	r2, [r3, #0]
 8011c8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011c8e:	601a      	str	r2, [r3, #0]
    pDest++;
 8011c90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011c92:	3301      	adds	r3, #1
 8011c94:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8011c96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011c98:	3301      	adds	r3, #1
 8011c9a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8011c9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011c9e:	3301      	adds	r3, #1
 8011ca0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8011ca2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011ca4:	3301      	adds	r3, #1
 8011ca6:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8011ca8:	6a3b      	ldr	r3, [r7, #32]
 8011caa:	3301      	adds	r3, #1
 8011cac:	623b      	str	r3, [r7, #32]
 8011cae:	6a3a      	ldr	r2, [r7, #32]
 8011cb0:	697b      	ldr	r3, [r7, #20]
 8011cb2:	429a      	cmp	r2, r3
 8011cb4:	d3e6      	bcc.n	8011c84 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8011cb6:	8bfb      	ldrh	r3, [r7, #30]
 8011cb8:	2b00      	cmp	r3, #0
 8011cba:	d01e      	beq.n	8011cfa <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8011cbc:	2300      	movs	r3, #0
 8011cbe:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8011cc0:	69bb      	ldr	r3, [r7, #24]
 8011cc2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8011cc6:	461a      	mov	r2, r3
 8011cc8:	f107 0310 	add.w	r3, r7, #16
 8011ccc:	6812      	ldr	r2, [r2, #0]
 8011cce:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8011cd0:	693a      	ldr	r2, [r7, #16]
 8011cd2:	6a3b      	ldr	r3, [r7, #32]
 8011cd4:	b2db      	uxtb	r3, r3
 8011cd6:	00db      	lsls	r3, r3, #3
 8011cd8:	fa22 f303 	lsr.w	r3, r2, r3
 8011cdc:	b2da      	uxtb	r2, r3
 8011cde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011ce0:	701a      	strb	r2, [r3, #0]
      i++;
 8011ce2:	6a3b      	ldr	r3, [r7, #32]
 8011ce4:	3301      	adds	r3, #1
 8011ce6:	623b      	str	r3, [r7, #32]
      pDest++;
 8011ce8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011cea:	3301      	adds	r3, #1
 8011cec:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8011cee:	8bfb      	ldrh	r3, [r7, #30]
 8011cf0:	3b01      	subs	r3, #1
 8011cf2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8011cf4:	8bfb      	ldrh	r3, [r7, #30]
 8011cf6:	2b00      	cmp	r3, #0
 8011cf8:	d1ea      	bne.n	8011cd0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8011cfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8011cfc:	4618      	mov	r0, r3
 8011cfe:	372c      	adds	r7, #44	@ 0x2c
 8011d00:	46bd      	mov	sp, r7
 8011d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d06:	4770      	bx	lr

08011d08 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8011d08:	b480      	push	{r7}
 8011d0a:	b085      	sub	sp, #20
 8011d0c:	af00      	add	r7, sp, #0
 8011d0e:	6078      	str	r0, [r7, #4]
 8011d10:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011d12:	687b      	ldr	r3, [r7, #4]
 8011d14:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8011d16:	683b      	ldr	r3, [r7, #0]
 8011d18:	781b      	ldrb	r3, [r3, #0]
 8011d1a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8011d1c:	683b      	ldr	r3, [r7, #0]
 8011d1e:	785b      	ldrb	r3, [r3, #1]
 8011d20:	2b01      	cmp	r3, #1
 8011d22:	d12c      	bne.n	8011d7e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8011d24:	68bb      	ldr	r3, [r7, #8]
 8011d26:	015a      	lsls	r2, r3, #5
 8011d28:	68fb      	ldr	r3, [r7, #12]
 8011d2a:	4413      	add	r3, r2
 8011d2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011d30:	681b      	ldr	r3, [r3, #0]
 8011d32:	2b00      	cmp	r3, #0
 8011d34:	db12      	blt.n	8011d5c <USB_EPSetStall+0x54>
 8011d36:	68bb      	ldr	r3, [r7, #8]
 8011d38:	2b00      	cmp	r3, #0
 8011d3a:	d00f      	beq.n	8011d5c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8011d3c:	68bb      	ldr	r3, [r7, #8]
 8011d3e:	015a      	lsls	r2, r3, #5
 8011d40:	68fb      	ldr	r3, [r7, #12]
 8011d42:	4413      	add	r3, r2
 8011d44:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011d48:	681b      	ldr	r3, [r3, #0]
 8011d4a:	68ba      	ldr	r2, [r7, #8]
 8011d4c:	0151      	lsls	r1, r2, #5
 8011d4e:	68fa      	ldr	r2, [r7, #12]
 8011d50:	440a      	add	r2, r1
 8011d52:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8011d56:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8011d5a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8011d5c:	68bb      	ldr	r3, [r7, #8]
 8011d5e:	015a      	lsls	r2, r3, #5
 8011d60:	68fb      	ldr	r3, [r7, #12]
 8011d62:	4413      	add	r3, r2
 8011d64:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011d68:	681b      	ldr	r3, [r3, #0]
 8011d6a:	68ba      	ldr	r2, [r7, #8]
 8011d6c:	0151      	lsls	r1, r2, #5
 8011d6e:	68fa      	ldr	r2, [r7, #12]
 8011d70:	440a      	add	r2, r1
 8011d72:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8011d76:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8011d7a:	6013      	str	r3, [r2, #0]
 8011d7c:	e02b      	b.n	8011dd6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8011d7e:	68bb      	ldr	r3, [r7, #8]
 8011d80:	015a      	lsls	r2, r3, #5
 8011d82:	68fb      	ldr	r3, [r7, #12]
 8011d84:	4413      	add	r3, r2
 8011d86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011d8a:	681b      	ldr	r3, [r3, #0]
 8011d8c:	2b00      	cmp	r3, #0
 8011d8e:	db12      	blt.n	8011db6 <USB_EPSetStall+0xae>
 8011d90:	68bb      	ldr	r3, [r7, #8]
 8011d92:	2b00      	cmp	r3, #0
 8011d94:	d00f      	beq.n	8011db6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8011d96:	68bb      	ldr	r3, [r7, #8]
 8011d98:	015a      	lsls	r2, r3, #5
 8011d9a:	68fb      	ldr	r3, [r7, #12]
 8011d9c:	4413      	add	r3, r2
 8011d9e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011da2:	681b      	ldr	r3, [r3, #0]
 8011da4:	68ba      	ldr	r2, [r7, #8]
 8011da6:	0151      	lsls	r1, r2, #5
 8011da8:	68fa      	ldr	r2, [r7, #12]
 8011daa:	440a      	add	r2, r1
 8011dac:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8011db0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8011db4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8011db6:	68bb      	ldr	r3, [r7, #8]
 8011db8:	015a      	lsls	r2, r3, #5
 8011dba:	68fb      	ldr	r3, [r7, #12]
 8011dbc:	4413      	add	r3, r2
 8011dbe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011dc2:	681b      	ldr	r3, [r3, #0]
 8011dc4:	68ba      	ldr	r2, [r7, #8]
 8011dc6:	0151      	lsls	r1, r2, #5
 8011dc8:	68fa      	ldr	r2, [r7, #12]
 8011dca:	440a      	add	r2, r1
 8011dcc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8011dd0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8011dd4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8011dd6:	2300      	movs	r3, #0
}
 8011dd8:	4618      	mov	r0, r3
 8011dda:	3714      	adds	r7, #20
 8011ddc:	46bd      	mov	sp, r7
 8011dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011de2:	4770      	bx	lr

08011de4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8011de4:	b480      	push	{r7}
 8011de6:	b085      	sub	sp, #20
 8011de8:	af00      	add	r7, sp, #0
 8011dea:	6078      	str	r0, [r7, #4]
 8011dec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011dee:	687b      	ldr	r3, [r7, #4]
 8011df0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8011df2:	683b      	ldr	r3, [r7, #0]
 8011df4:	781b      	ldrb	r3, [r3, #0]
 8011df6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8011df8:	683b      	ldr	r3, [r7, #0]
 8011dfa:	785b      	ldrb	r3, [r3, #1]
 8011dfc:	2b01      	cmp	r3, #1
 8011dfe:	d128      	bne.n	8011e52 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8011e00:	68bb      	ldr	r3, [r7, #8]
 8011e02:	015a      	lsls	r2, r3, #5
 8011e04:	68fb      	ldr	r3, [r7, #12]
 8011e06:	4413      	add	r3, r2
 8011e08:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011e0c:	681b      	ldr	r3, [r3, #0]
 8011e0e:	68ba      	ldr	r2, [r7, #8]
 8011e10:	0151      	lsls	r1, r2, #5
 8011e12:	68fa      	ldr	r2, [r7, #12]
 8011e14:	440a      	add	r2, r1
 8011e16:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8011e1a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8011e1e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8011e20:	683b      	ldr	r3, [r7, #0]
 8011e22:	791b      	ldrb	r3, [r3, #4]
 8011e24:	2b03      	cmp	r3, #3
 8011e26:	d003      	beq.n	8011e30 <USB_EPClearStall+0x4c>
 8011e28:	683b      	ldr	r3, [r7, #0]
 8011e2a:	791b      	ldrb	r3, [r3, #4]
 8011e2c:	2b02      	cmp	r3, #2
 8011e2e:	d138      	bne.n	8011ea2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8011e30:	68bb      	ldr	r3, [r7, #8]
 8011e32:	015a      	lsls	r2, r3, #5
 8011e34:	68fb      	ldr	r3, [r7, #12]
 8011e36:	4413      	add	r3, r2
 8011e38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011e3c:	681b      	ldr	r3, [r3, #0]
 8011e3e:	68ba      	ldr	r2, [r7, #8]
 8011e40:	0151      	lsls	r1, r2, #5
 8011e42:	68fa      	ldr	r2, [r7, #12]
 8011e44:	440a      	add	r2, r1
 8011e46:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8011e4a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8011e4e:	6013      	str	r3, [r2, #0]
 8011e50:	e027      	b.n	8011ea2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8011e52:	68bb      	ldr	r3, [r7, #8]
 8011e54:	015a      	lsls	r2, r3, #5
 8011e56:	68fb      	ldr	r3, [r7, #12]
 8011e58:	4413      	add	r3, r2
 8011e5a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011e5e:	681b      	ldr	r3, [r3, #0]
 8011e60:	68ba      	ldr	r2, [r7, #8]
 8011e62:	0151      	lsls	r1, r2, #5
 8011e64:	68fa      	ldr	r2, [r7, #12]
 8011e66:	440a      	add	r2, r1
 8011e68:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8011e6c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8011e70:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8011e72:	683b      	ldr	r3, [r7, #0]
 8011e74:	791b      	ldrb	r3, [r3, #4]
 8011e76:	2b03      	cmp	r3, #3
 8011e78:	d003      	beq.n	8011e82 <USB_EPClearStall+0x9e>
 8011e7a:	683b      	ldr	r3, [r7, #0]
 8011e7c:	791b      	ldrb	r3, [r3, #4]
 8011e7e:	2b02      	cmp	r3, #2
 8011e80:	d10f      	bne.n	8011ea2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8011e82:	68bb      	ldr	r3, [r7, #8]
 8011e84:	015a      	lsls	r2, r3, #5
 8011e86:	68fb      	ldr	r3, [r7, #12]
 8011e88:	4413      	add	r3, r2
 8011e8a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011e8e:	681b      	ldr	r3, [r3, #0]
 8011e90:	68ba      	ldr	r2, [r7, #8]
 8011e92:	0151      	lsls	r1, r2, #5
 8011e94:	68fa      	ldr	r2, [r7, #12]
 8011e96:	440a      	add	r2, r1
 8011e98:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8011e9c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8011ea0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8011ea2:	2300      	movs	r3, #0
}
 8011ea4:	4618      	mov	r0, r3
 8011ea6:	3714      	adds	r7, #20
 8011ea8:	46bd      	mov	sp, r7
 8011eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011eae:	4770      	bx	lr

08011eb0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8011eb0:	b480      	push	{r7}
 8011eb2:	b085      	sub	sp, #20
 8011eb4:	af00      	add	r7, sp, #0
 8011eb6:	6078      	str	r0, [r7, #4]
 8011eb8:	460b      	mov	r3, r1
 8011eba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011ebc:	687b      	ldr	r3, [r7, #4]
 8011ebe:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8011ec0:	68fb      	ldr	r3, [r7, #12]
 8011ec2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011ec6:	681b      	ldr	r3, [r3, #0]
 8011ec8:	68fa      	ldr	r2, [r7, #12]
 8011eca:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8011ece:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8011ed2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8011ed4:	68fb      	ldr	r3, [r7, #12]
 8011ed6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011eda:	681a      	ldr	r2, [r3, #0]
 8011edc:	78fb      	ldrb	r3, [r7, #3]
 8011ede:	011b      	lsls	r3, r3, #4
 8011ee0:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8011ee4:	68f9      	ldr	r1, [r7, #12]
 8011ee6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8011eea:	4313      	orrs	r3, r2
 8011eec:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8011eee:	2300      	movs	r3, #0
}
 8011ef0:	4618      	mov	r0, r3
 8011ef2:	3714      	adds	r7, #20
 8011ef4:	46bd      	mov	sp, r7
 8011ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011efa:	4770      	bx	lr

08011efc <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8011efc:	b480      	push	{r7}
 8011efe:	b085      	sub	sp, #20
 8011f00:	af00      	add	r7, sp, #0
 8011f02:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011f04:	687b      	ldr	r3, [r7, #4]
 8011f06:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8011f08:	68fb      	ldr	r3, [r7, #12]
 8011f0a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8011f0e:	681b      	ldr	r3, [r3, #0]
 8011f10:	68fa      	ldr	r2, [r7, #12]
 8011f12:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8011f16:	f023 0303 	bic.w	r3, r3, #3
 8011f1a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8011f1c:	68fb      	ldr	r3, [r7, #12]
 8011f1e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011f22:	685b      	ldr	r3, [r3, #4]
 8011f24:	68fa      	ldr	r2, [r7, #12]
 8011f26:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8011f2a:	f023 0302 	bic.w	r3, r3, #2
 8011f2e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8011f30:	2300      	movs	r3, #0
}
 8011f32:	4618      	mov	r0, r3
 8011f34:	3714      	adds	r7, #20
 8011f36:	46bd      	mov	sp, r7
 8011f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f3c:	4770      	bx	lr

08011f3e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8011f3e:	b480      	push	{r7}
 8011f40:	b085      	sub	sp, #20
 8011f42:	af00      	add	r7, sp, #0
 8011f44:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011f46:	687b      	ldr	r3, [r7, #4]
 8011f48:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8011f4a:	68fb      	ldr	r3, [r7, #12]
 8011f4c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8011f50:	681b      	ldr	r3, [r3, #0]
 8011f52:	68fa      	ldr	r2, [r7, #12]
 8011f54:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8011f58:	f023 0303 	bic.w	r3, r3, #3
 8011f5c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8011f5e:	68fb      	ldr	r3, [r7, #12]
 8011f60:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011f64:	685b      	ldr	r3, [r3, #4]
 8011f66:	68fa      	ldr	r2, [r7, #12]
 8011f68:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8011f6c:	f043 0302 	orr.w	r3, r3, #2
 8011f70:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8011f72:	2300      	movs	r3, #0
}
 8011f74:	4618      	mov	r0, r3
 8011f76:	3714      	adds	r7, #20
 8011f78:	46bd      	mov	sp, r7
 8011f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f7e:	4770      	bx	lr

08011f80 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8011f80:	b480      	push	{r7}
 8011f82:	b085      	sub	sp, #20
 8011f84:	af00      	add	r7, sp, #0
 8011f86:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8011f88:	687b      	ldr	r3, [r7, #4]
 8011f8a:	695b      	ldr	r3, [r3, #20]
 8011f8c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8011f8e:	687b      	ldr	r3, [r7, #4]
 8011f90:	699b      	ldr	r3, [r3, #24]
 8011f92:	68fa      	ldr	r2, [r7, #12]
 8011f94:	4013      	ands	r3, r2
 8011f96:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8011f98:	68fb      	ldr	r3, [r7, #12]
}
 8011f9a:	4618      	mov	r0, r3
 8011f9c:	3714      	adds	r7, #20
 8011f9e:	46bd      	mov	sp, r7
 8011fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fa4:	4770      	bx	lr

08011fa6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8011fa6:	b480      	push	{r7}
 8011fa8:	b085      	sub	sp, #20
 8011faa:	af00      	add	r7, sp, #0
 8011fac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011fae:	687b      	ldr	r3, [r7, #4]
 8011fb0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8011fb2:	68fb      	ldr	r3, [r7, #12]
 8011fb4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011fb8:	699b      	ldr	r3, [r3, #24]
 8011fba:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8011fbc:	68fb      	ldr	r3, [r7, #12]
 8011fbe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011fc2:	69db      	ldr	r3, [r3, #28]
 8011fc4:	68ba      	ldr	r2, [r7, #8]
 8011fc6:	4013      	ands	r3, r2
 8011fc8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8011fca:	68bb      	ldr	r3, [r7, #8]
 8011fcc:	0c1b      	lsrs	r3, r3, #16
}
 8011fce:	4618      	mov	r0, r3
 8011fd0:	3714      	adds	r7, #20
 8011fd2:	46bd      	mov	sp, r7
 8011fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fd8:	4770      	bx	lr

08011fda <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8011fda:	b480      	push	{r7}
 8011fdc:	b085      	sub	sp, #20
 8011fde:	af00      	add	r7, sp, #0
 8011fe0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011fe2:	687b      	ldr	r3, [r7, #4]
 8011fe4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8011fe6:	68fb      	ldr	r3, [r7, #12]
 8011fe8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011fec:	699b      	ldr	r3, [r3, #24]
 8011fee:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8011ff0:	68fb      	ldr	r3, [r7, #12]
 8011ff2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011ff6:	69db      	ldr	r3, [r3, #28]
 8011ff8:	68ba      	ldr	r2, [r7, #8]
 8011ffa:	4013      	ands	r3, r2
 8011ffc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8011ffe:	68bb      	ldr	r3, [r7, #8]
 8012000:	b29b      	uxth	r3, r3
}
 8012002:	4618      	mov	r0, r3
 8012004:	3714      	adds	r7, #20
 8012006:	46bd      	mov	sp, r7
 8012008:	f85d 7b04 	ldr.w	r7, [sp], #4
 801200c:	4770      	bx	lr

0801200e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 801200e:	b480      	push	{r7}
 8012010:	b085      	sub	sp, #20
 8012012:	af00      	add	r7, sp, #0
 8012014:	6078      	str	r0, [r7, #4]
 8012016:	460b      	mov	r3, r1
 8012018:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801201a:	687b      	ldr	r3, [r7, #4]
 801201c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 801201e:	78fb      	ldrb	r3, [r7, #3]
 8012020:	015a      	lsls	r2, r3, #5
 8012022:	68fb      	ldr	r3, [r7, #12]
 8012024:	4413      	add	r3, r2
 8012026:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801202a:	689b      	ldr	r3, [r3, #8]
 801202c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 801202e:	68fb      	ldr	r3, [r7, #12]
 8012030:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012034:	695b      	ldr	r3, [r3, #20]
 8012036:	68ba      	ldr	r2, [r7, #8]
 8012038:	4013      	ands	r3, r2
 801203a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 801203c:	68bb      	ldr	r3, [r7, #8]
}
 801203e:	4618      	mov	r0, r3
 8012040:	3714      	adds	r7, #20
 8012042:	46bd      	mov	sp, r7
 8012044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012048:	4770      	bx	lr

0801204a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 801204a:	b480      	push	{r7}
 801204c:	b087      	sub	sp, #28
 801204e:	af00      	add	r7, sp, #0
 8012050:	6078      	str	r0, [r7, #4]
 8012052:	460b      	mov	r3, r1
 8012054:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012056:	687b      	ldr	r3, [r7, #4]
 8012058:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 801205a:	697b      	ldr	r3, [r7, #20]
 801205c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012060:	691b      	ldr	r3, [r3, #16]
 8012062:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8012064:	697b      	ldr	r3, [r7, #20]
 8012066:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801206a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801206c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 801206e:	78fb      	ldrb	r3, [r7, #3]
 8012070:	f003 030f 	and.w	r3, r3, #15
 8012074:	68fa      	ldr	r2, [r7, #12]
 8012076:	fa22 f303 	lsr.w	r3, r2, r3
 801207a:	01db      	lsls	r3, r3, #7
 801207c:	b2db      	uxtb	r3, r3
 801207e:	693a      	ldr	r2, [r7, #16]
 8012080:	4313      	orrs	r3, r2
 8012082:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8012084:	78fb      	ldrb	r3, [r7, #3]
 8012086:	015a      	lsls	r2, r3, #5
 8012088:	697b      	ldr	r3, [r7, #20]
 801208a:	4413      	add	r3, r2
 801208c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012090:	689b      	ldr	r3, [r3, #8]
 8012092:	693a      	ldr	r2, [r7, #16]
 8012094:	4013      	ands	r3, r2
 8012096:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8012098:	68bb      	ldr	r3, [r7, #8]
}
 801209a:	4618      	mov	r0, r3
 801209c:	371c      	adds	r7, #28
 801209e:	46bd      	mov	sp, r7
 80120a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120a4:	4770      	bx	lr

080120a6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80120a6:	b480      	push	{r7}
 80120a8:	b083      	sub	sp, #12
 80120aa:	af00      	add	r7, sp, #0
 80120ac:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80120ae:	687b      	ldr	r3, [r7, #4]
 80120b0:	695b      	ldr	r3, [r3, #20]
 80120b2:	f003 0301 	and.w	r3, r3, #1
}
 80120b6:	4618      	mov	r0, r3
 80120b8:	370c      	adds	r7, #12
 80120ba:	46bd      	mov	sp, r7
 80120bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120c0:	4770      	bx	lr
	...

080120c4 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 80120c4:	b480      	push	{r7}
 80120c6:	b085      	sub	sp, #20
 80120c8:	af00      	add	r7, sp, #0
 80120ca:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80120cc:	687b      	ldr	r3, [r7, #4]
 80120ce:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80120d0:	68fb      	ldr	r3, [r7, #12]
 80120d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80120d6:	681a      	ldr	r2, [r3, #0]
 80120d8:	68fb      	ldr	r3, [r7, #12]
 80120da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80120de:	4619      	mov	r1, r3
 80120e0:	4b09      	ldr	r3, [pc, #36]	@ (8012108 <USB_ActivateSetup+0x44>)
 80120e2:	4013      	ands	r3, r2
 80120e4:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80120e6:	68fb      	ldr	r3, [r7, #12]
 80120e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80120ec:	685b      	ldr	r3, [r3, #4]
 80120ee:	68fa      	ldr	r2, [r7, #12]
 80120f0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80120f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80120f8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80120fa:	2300      	movs	r3, #0
}
 80120fc:	4618      	mov	r0, r3
 80120fe:	3714      	adds	r7, #20
 8012100:	46bd      	mov	sp, r7
 8012102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012106:	4770      	bx	lr
 8012108:	fffff800 	.word	0xfffff800

0801210c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 801210c:	b480      	push	{r7}
 801210e:	b087      	sub	sp, #28
 8012110:	af00      	add	r7, sp, #0
 8012112:	60f8      	str	r0, [r7, #12]
 8012114:	460b      	mov	r3, r1
 8012116:	607a      	str	r2, [r7, #4]
 8012118:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801211a:	68fb      	ldr	r3, [r7, #12]
 801211c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 801211e:	68fb      	ldr	r3, [r7, #12]
 8012120:	333c      	adds	r3, #60	@ 0x3c
 8012122:	3304      	adds	r3, #4
 8012124:	681b      	ldr	r3, [r3, #0]
 8012126:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8012128:	693b      	ldr	r3, [r7, #16]
 801212a:	4a26      	ldr	r2, [pc, #152]	@ (80121c4 <USB_EP0_OutStart+0xb8>)
 801212c:	4293      	cmp	r3, r2
 801212e:	d90a      	bls.n	8012146 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8012130:	697b      	ldr	r3, [r7, #20]
 8012132:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012136:	681b      	ldr	r3, [r3, #0]
 8012138:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 801213c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8012140:	d101      	bne.n	8012146 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8012142:	2300      	movs	r3, #0
 8012144:	e037      	b.n	80121b6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8012146:	697b      	ldr	r3, [r7, #20]
 8012148:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801214c:	461a      	mov	r2, r3
 801214e:	2300      	movs	r3, #0
 8012150:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8012152:	697b      	ldr	r3, [r7, #20]
 8012154:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012158:	691b      	ldr	r3, [r3, #16]
 801215a:	697a      	ldr	r2, [r7, #20]
 801215c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8012160:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8012164:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8012166:	697b      	ldr	r3, [r7, #20]
 8012168:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801216c:	691b      	ldr	r3, [r3, #16]
 801216e:	697a      	ldr	r2, [r7, #20]
 8012170:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8012174:	f043 0318 	orr.w	r3, r3, #24
 8012178:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 801217a:	697b      	ldr	r3, [r7, #20]
 801217c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012180:	691b      	ldr	r3, [r3, #16]
 8012182:	697a      	ldr	r2, [r7, #20]
 8012184:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8012188:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 801218c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 801218e:	7afb      	ldrb	r3, [r7, #11]
 8012190:	2b01      	cmp	r3, #1
 8012192:	d10f      	bne.n	80121b4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8012194:	697b      	ldr	r3, [r7, #20]
 8012196:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801219a:	461a      	mov	r2, r3
 801219c:	687b      	ldr	r3, [r7, #4]
 801219e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80121a0:	697b      	ldr	r3, [r7, #20]
 80121a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80121a6:	681b      	ldr	r3, [r3, #0]
 80121a8:	697a      	ldr	r2, [r7, #20]
 80121aa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80121ae:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 80121b2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80121b4:	2300      	movs	r3, #0
}
 80121b6:	4618      	mov	r0, r3
 80121b8:	371c      	adds	r7, #28
 80121ba:	46bd      	mov	sp, r7
 80121bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121c0:	4770      	bx	lr
 80121c2:	bf00      	nop
 80121c4:	4f54300a 	.word	0x4f54300a

080121c8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80121c8:	b480      	push	{r7}
 80121ca:	b085      	sub	sp, #20
 80121cc:	af00      	add	r7, sp, #0
 80121ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80121d0:	2300      	movs	r3, #0
 80121d2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80121d4:	68fb      	ldr	r3, [r7, #12]
 80121d6:	3301      	adds	r3, #1
 80121d8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80121da:	68fb      	ldr	r3, [r7, #12]
 80121dc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80121e0:	d901      	bls.n	80121e6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80121e2:	2303      	movs	r3, #3
 80121e4:	e01b      	b.n	801221e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80121e6:	687b      	ldr	r3, [r7, #4]
 80121e8:	691b      	ldr	r3, [r3, #16]
 80121ea:	2b00      	cmp	r3, #0
 80121ec:	daf2      	bge.n	80121d4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80121ee:	2300      	movs	r3, #0
 80121f0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80121f2:	687b      	ldr	r3, [r7, #4]
 80121f4:	691b      	ldr	r3, [r3, #16]
 80121f6:	f043 0201 	orr.w	r2, r3, #1
 80121fa:	687b      	ldr	r3, [r7, #4]
 80121fc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80121fe:	68fb      	ldr	r3, [r7, #12]
 8012200:	3301      	adds	r3, #1
 8012202:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8012204:	68fb      	ldr	r3, [r7, #12]
 8012206:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 801220a:	d901      	bls.n	8012210 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 801220c:	2303      	movs	r3, #3
 801220e:	e006      	b.n	801221e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8012210:	687b      	ldr	r3, [r7, #4]
 8012212:	691b      	ldr	r3, [r3, #16]
 8012214:	f003 0301 	and.w	r3, r3, #1
 8012218:	2b01      	cmp	r3, #1
 801221a:	d0f0      	beq.n	80121fe <USB_CoreReset+0x36>

  return HAL_OK;
 801221c:	2300      	movs	r3, #0
}
 801221e:	4618      	mov	r0, r3
 8012220:	3714      	adds	r7, #20
 8012222:	46bd      	mov	sp, r7
 8012224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012228:	4770      	bx	lr
	...

0801222c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801222c:	b580      	push	{r7, lr}
 801222e:	b084      	sub	sp, #16
 8012230:	af00      	add	r7, sp, #0
 8012232:	6078      	str	r0, [r7, #4]
 8012234:	460b      	mov	r3, r1
 8012236:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8012238:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 801223c:	f002 fcca 	bl	8014bd4 <USBD_static_malloc>
 8012240:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8012242:	68fb      	ldr	r3, [r7, #12]
 8012244:	2b00      	cmp	r3, #0
 8012246:	d109      	bne.n	801225c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8012248:	687b      	ldr	r3, [r7, #4]
 801224a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801224e:	687b      	ldr	r3, [r7, #4]
 8012250:	32b0      	adds	r2, #176	@ 0xb0
 8012252:	2100      	movs	r1, #0
 8012254:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8012258:	2302      	movs	r3, #2
 801225a:	e0d4      	b.n	8012406 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 801225c:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8012260:	2100      	movs	r1, #0
 8012262:	68f8      	ldr	r0, [r7, #12]
 8012264:	f004 f815 	bl	8016292 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8012268:	687b      	ldr	r3, [r7, #4]
 801226a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801226e:	687b      	ldr	r3, [r7, #4]
 8012270:	32b0      	adds	r2, #176	@ 0xb0
 8012272:	68f9      	ldr	r1, [r7, #12]
 8012274:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8012278:	687b      	ldr	r3, [r7, #4]
 801227a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801227e:	687b      	ldr	r3, [r7, #4]
 8012280:	32b0      	adds	r2, #176	@ 0xb0
 8012282:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8012286:	687b      	ldr	r3, [r7, #4]
 8012288:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801228c:	687b      	ldr	r3, [r7, #4]
 801228e:	7c1b      	ldrb	r3, [r3, #16]
 8012290:	2b00      	cmp	r3, #0
 8012292:	d138      	bne.n	8012306 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8012294:	4b5e      	ldr	r3, [pc, #376]	@ (8012410 <USBD_CDC_Init+0x1e4>)
 8012296:	7819      	ldrb	r1, [r3, #0]
 8012298:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801229c:	2202      	movs	r2, #2
 801229e:	6878      	ldr	r0, [r7, #4]
 80122a0:	f002 fb75 	bl	801498e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80122a4:	4b5a      	ldr	r3, [pc, #360]	@ (8012410 <USBD_CDC_Init+0x1e4>)
 80122a6:	781b      	ldrb	r3, [r3, #0]
 80122a8:	f003 020f 	and.w	r2, r3, #15
 80122ac:	6879      	ldr	r1, [r7, #4]
 80122ae:	4613      	mov	r3, r2
 80122b0:	009b      	lsls	r3, r3, #2
 80122b2:	4413      	add	r3, r2
 80122b4:	009b      	lsls	r3, r3, #2
 80122b6:	440b      	add	r3, r1
 80122b8:	3324      	adds	r3, #36	@ 0x24
 80122ba:	2201      	movs	r2, #1
 80122bc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80122be:	4b55      	ldr	r3, [pc, #340]	@ (8012414 <USBD_CDC_Init+0x1e8>)
 80122c0:	7819      	ldrb	r1, [r3, #0]
 80122c2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80122c6:	2202      	movs	r2, #2
 80122c8:	6878      	ldr	r0, [r7, #4]
 80122ca:	f002 fb60 	bl	801498e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80122ce:	4b51      	ldr	r3, [pc, #324]	@ (8012414 <USBD_CDC_Init+0x1e8>)
 80122d0:	781b      	ldrb	r3, [r3, #0]
 80122d2:	f003 020f 	and.w	r2, r3, #15
 80122d6:	6879      	ldr	r1, [r7, #4]
 80122d8:	4613      	mov	r3, r2
 80122da:	009b      	lsls	r3, r3, #2
 80122dc:	4413      	add	r3, r2
 80122de:	009b      	lsls	r3, r3, #2
 80122e0:	440b      	add	r3, r1
 80122e2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80122e6:	2201      	movs	r2, #1
 80122e8:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80122ea:	4b4b      	ldr	r3, [pc, #300]	@ (8012418 <USBD_CDC_Init+0x1ec>)
 80122ec:	781b      	ldrb	r3, [r3, #0]
 80122ee:	f003 020f 	and.w	r2, r3, #15
 80122f2:	6879      	ldr	r1, [r7, #4]
 80122f4:	4613      	mov	r3, r2
 80122f6:	009b      	lsls	r3, r3, #2
 80122f8:	4413      	add	r3, r2
 80122fa:	009b      	lsls	r3, r3, #2
 80122fc:	440b      	add	r3, r1
 80122fe:	3326      	adds	r3, #38	@ 0x26
 8012300:	2210      	movs	r2, #16
 8012302:	801a      	strh	r2, [r3, #0]
 8012304:	e035      	b.n	8012372 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8012306:	4b42      	ldr	r3, [pc, #264]	@ (8012410 <USBD_CDC_Init+0x1e4>)
 8012308:	7819      	ldrb	r1, [r3, #0]
 801230a:	2340      	movs	r3, #64	@ 0x40
 801230c:	2202      	movs	r2, #2
 801230e:	6878      	ldr	r0, [r7, #4]
 8012310:	f002 fb3d 	bl	801498e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8012314:	4b3e      	ldr	r3, [pc, #248]	@ (8012410 <USBD_CDC_Init+0x1e4>)
 8012316:	781b      	ldrb	r3, [r3, #0]
 8012318:	f003 020f 	and.w	r2, r3, #15
 801231c:	6879      	ldr	r1, [r7, #4]
 801231e:	4613      	mov	r3, r2
 8012320:	009b      	lsls	r3, r3, #2
 8012322:	4413      	add	r3, r2
 8012324:	009b      	lsls	r3, r3, #2
 8012326:	440b      	add	r3, r1
 8012328:	3324      	adds	r3, #36	@ 0x24
 801232a:	2201      	movs	r2, #1
 801232c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 801232e:	4b39      	ldr	r3, [pc, #228]	@ (8012414 <USBD_CDC_Init+0x1e8>)
 8012330:	7819      	ldrb	r1, [r3, #0]
 8012332:	2340      	movs	r3, #64	@ 0x40
 8012334:	2202      	movs	r2, #2
 8012336:	6878      	ldr	r0, [r7, #4]
 8012338:	f002 fb29 	bl	801498e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 801233c:	4b35      	ldr	r3, [pc, #212]	@ (8012414 <USBD_CDC_Init+0x1e8>)
 801233e:	781b      	ldrb	r3, [r3, #0]
 8012340:	f003 020f 	and.w	r2, r3, #15
 8012344:	6879      	ldr	r1, [r7, #4]
 8012346:	4613      	mov	r3, r2
 8012348:	009b      	lsls	r3, r3, #2
 801234a:	4413      	add	r3, r2
 801234c:	009b      	lsls	r3, r3, #2
 801234e:	440b      	add	r3, r1
 8012350:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8012354:	2201      	movs	r2, #1
 8012356:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8012358:	4b2f      	ldr	r3, [pc, #188]	@ (8012418 <USBD_CDC_Init+0x1ec>)
 801235a:	781b      	ldrb	r3, [r3, #0]
 801235c:	f003 020f 	and.w	r2, r3, #15
 8012360:	6879      	ldr	r1, [r7, #4]
 8012362:	4613      	mov	r3, r2
 8012364:	009b      	lsls	r3, r3, #2
 8012366:	4413      	add	r3, r2
 8012368:	009b      	lsls	r3, r3, #2
 801236a:	440b      	add	r3, r1
 801236c:	3326      	adds	r3, #38	@ 0x26
 801236e:	2210      	movs	r2, #16
 8012370:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8012372:	4b29      	ldr	r3, [pc, #164]	@ (8012418 <USBD_CDC_Init+0x1ec>)
 8012374:	7819      	ldrb	r1, [r3, #0]
 8012376:	2308      	movs	r3, #8
 8012378:	2203      	movs	r2, #3
 801237a:	6878      	ldr	r0, [r7, #4]
 801237c:	f002 fb07 	bl	801498e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8012380:	4b25      	ldr	r3, [pc, #148]	@ (8012418 <USBD_CDC_Init+0x1ec>)
 8012382:	781b      	ldrb	r3, [r3, #0]
 8012384:	f003 020f 	and.w	r2, r3, #15
 8012388:	6879      	ldr	r1, [r7, #4]
 801238a:	4613      	mov	r3, r2
 801238c:	009b      	lsls	r3, r3, #2
 801238e:	4413      	add	r3, r2
 8012390:	009b      	lsls	r3, r3, #2
 8012392:	440b      	add	r3, r1
 8012394:	3324      	adds	r3, #36	@ 0x24
 8012396:	2201      	movs	r2, #1
 8012398:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 801239a:	68fb      	ldr	r3, [r7, #12]
 801239c:	2200      	movs	r2, #0
 801239e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80123a2:	687b      	ldr	r3, [r7, #4]
 80123a4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80123a8:	687a      	ldr	r2, [r7, #4]
 80123aa:	33b0      	adds	r3, #176	@ 0xb0
 80123ac:	009b      	lsls	r3, r3, #2
 80123ae:	4413      	add	r3, r2
 80123b0:	685b      	ldr	r3, [r3, #4]
 80123b2:	681b      	ldr	r3, [r3, #0]
 80123b4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80123b6:	68fb      	ldr	r3, [r7, #12]
 80123b8:	2200      	movs	r2, #0
 80123ba:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 80123be:	68fb      	ldr	r3, [r7, #12]
 80123c0:	2200      	movs	r2, #0
 80123c2:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 80123c6:	68fb      	ldr	r3, [r7, #12]
 80123c8:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80123cc:	2b00      	cmp	r3, #0
 80123ce:	d101      	bne.n	80123d4 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80123d0:	2302      	movs	r3, #2
 80123d2:	e018      	b.n	8012406 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80123d4:	687b      	ldr	r3, [r7, #4]
 80123d6:	7c1b      	ldrb	r3, [r3, #16]
 80123d8:	2b00      	cmp	r3, #0
 80123da:	d10a      	bne.n	80123f2 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80123dc:	4b0d      	ldr	r3, [pc, #52]	@ (8012414 <USBD_CDC_Init+0x1e8>)
 80123de:	7819      	ldrb	r1, [r3, #0]
 80123e0:	68fb      	ldr	r3, [r7, #12]
 80123e2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80123e6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80123ea:	6878      	ldr	r0, [r7, #4]
 80123ec:	f002 fbbe 	bl	8014b6c <USBD_LL_PrepareReceive>
 80123f0:	e008      	b.n	8012404 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80123f2:	4b08      	ldr	r3, [pc, #32]	@ (8012414 <USBD_CDC_Init+0x1e8>)
 80123f4:	7819      	ldrb	r1, [r3, #0]
 80123f6:	68fb      	ldr	r3, [r7, #12]
 80123f8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80123fc:	2340      	movs	r3, #64	@ 0x40
 80123fe:	6878      	ldr	r0, [r7, #4]
 8012400:	f002 fbb4 	bl	8014b6c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8012404:	2300      	movs	r3, #0
}
 8012406:	4618      	mov	r0, r3
 8012408:	3710      	adds	r7, #16
 801240a:	46bd      	mov	sp, r7
 801240c:	bd80      	pop	{r7, pc}
 801240e:	bf00      	nop
 8012410:	24000097 	.word	0x24000097
 8012414:	24000098 	.word	0x24000098
 8012418:	24000099 	.word	0x24000099

0801241c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801241c:	b580      	push	{r7, lr}
 801241e:	b082      	sub	sp, #8
 8012420:	af00      	add	r7, sp, #0
 8012422:	6078      	str	r0, [r7, #4]
 8012424:	460b      	mov	r3, r1
 8012426:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8012428:	4b3a      	ldr	r3, [pc, #232]	@ (8012514 <USBD_CDC_DeInit+0xf8>)
 801242a:	781b      	ldrb	r3, [r3, #0]
 801242c:	4619      	mov	r1, r3
 801242e:	6878      	ldr	r0, [r7, #4]
 8012430:	f002 fad3 	bl	80149da <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8012434:	4b37      	ldr	r3, [pc, #220]	@ (8012514 <USBD_CDC_DeInit+0xf8>)
 8012436:	781b      	ldrb	r3, [r3, #0]
 8012438:	f003 020f 	and.w	r2, r3, #15
 801243c:	6879      	ldr	r1, [r7, #4]
 801243e:	4613      	mov	r3, r2
 8012440:	009b      	lsls	r3, r3, #2
 8012442:	4413      	add	r3, r2
 8012444:	009b      	lsls	r3, r3, #2
 8012446:	440b      	add	r3, r1
 8012448:	3324      	adds	r3, #36	@ 0x24
 801244a:	2200      	movs	r2, #0
 801244c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 801244e:	4b32      	ldr	r3, [pc, #200]	@ (8012518 <USBD_CDC_DeInit+0xfc>)
 8012450:	781b      	ldrb	r3, [r3, #0]
 8012452:	4619      	mov	r1, r3
 8012454:	6878      	ldr	r0, [r7, #4]
 8012456:	f002 fac0 	bl	80149da <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 801245a:	4b2f      	ldr	r3, [pc, #188]	@ (8012518 <USBD_CDC_DeInit+0xfc>)
 801245c:	781b      	ldrb	r3, [r3, #0]
 801245e:	f003 020f 	and.w	r2, r3, #15
 8012462:	6879      	ldr	r1, [r7, #4]
 8012464:	4613      	mov	r3, r2
 8012466:	009b      	lsls	r3, r3, #2
 8012468:	4413      	add	r3, r2
 801246a:	009b      	lsls	r3, r3, #2
 801246c:	440b      	add	r3, r1
 801246e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8012472:	2200      	movs	r2, #0
 8012474:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8012476:	4b29      	ldr	r3, [pc, #164]	@ (801251c <USBD_CDC_DeInit+0x100>)
 8012478:	781b      	ldrb	r3, [r3, #0]
 801247a:	4619      	mov	r1, r3
 801247c:	6878      	ldr	r0, [r7, #4]
 801247e:	f002 faac 	bl	80149da <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8012482:	4b26      	ldr	r3, [pc, #152]	@ (801251c <USBD_CDC_DeInit+0x100>)
 8012484:	781b      	ldrb	r3, [r3, #0]
 8012486:	f003 020f 	and.w	r2, r3, #15
 801248a:	6879      	ldr	r1, [r7, #4]
 801248c:	4613      	mov	r3, r2
 801248e:	009b      	lsls	r3, r3, #2
 8012490:	4413      	add	r3, r2
 8012492:	009b      	lsls	r3, r3, #2
 8012494:	440b      	add	r3, r1
 8012496:	3324      	adds	r3, #36	@ 0x24
 8012498:	2200      	movs	r2, #0
 801249a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 801249c:	4b1f      	ldr	r3, [pc, #124]	@ (801251c <USBD_CDC_DeInit+0x100>)
 801249e:	781b      	ldrb	r3, [r3, #0]
 80124a0:	f003 020f 	and.w	r2, r3, #15
 80124a4:	6879      	ldr	r1, [r7, #4]
 80124a6:	4613      	mov	r3, r2
 80124a8:	009b      	lsls	r3, r3, #2
 80124aa:	4413      	add	r3, r2
 80124ac:	009b      	lsls	r3, r3, #2
 80124ae:	440b      	add	r3, r1
 80124b0:	3326      	adds	r3, #38	@ 0x26
 80124b2:	2200      	movs	r2, #0
 80124b4:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80124b6:	687b      	ldr	r3, [r7, #4]
 80124b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80124bc:	687b      	ldr	r3, [r7, #4]
 80124be:	32b0      	adds	r2, #176	@ 0xb0
 80124c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80124c4:	2b00      	cmp	r3, #0
 80124c6:	d01f      	beq.n	8012508 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80124c8:	687b      	ldr	r3, [r7, #4]
 80124ca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80124ce:	687a      	ldr	r2, [r7, #4]
 80124d0:	33b0      	adds	r3, #176	@ 0xb0
 80124d2:	009b      	lsls	r3, r3, #2
 80124d4:	4413      	add	r3, r2
 80124d6:	685b      	ldr	r3, [r3, #4]
 80124d8:	685b      	ldr	r3, [r3, #4]
 80124da:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80124dc:	687b      	ldr	r3, [r7, #4]
 80124de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80124e2:	687b      	ldr	r3, [r7, #4]
 80124e4:	32b0      	adds	r2, #176	@ 0xb0
 80124e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80124ea:	4618      	mov	r0, r3
 80124ec:	f002 fb80 	bl	8014bf0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80124f0:	687b      	ldr	r3, [r7, #4]
 80124f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80124f6:	687b      	ldr	r3, [r7, #4]
 80124f8:	32b0      	adds	r2, #176	@ 0xb0
 80124fa:	2100      	movs	r1, #0
 80124fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8012500:	687b      	ldr	r3, [r7, #4]
 8012502:	2200      	movs	r2, #0
 8012504:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8012508:	2300      	movs	r3, #0
}
 801250a:	4618      	mov	r0, r3
 801250c:	3708      	adds	r7, #8
 801250e:	46bd      	mov	sp, r7
 8012510:	bd80      	pop	{r7, pc}
 8012512:	bf00      	nop
 8012514:	24000097 	.word	0x24000097
 8012518:	24000098 	.word	0x24000098
 801251c:	24000099 	.word	0x24000099

08012520 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8012520:	b580      	push	{r7, lr}
 8012522:	b086      	sub	sp, #24
 8012524:	af00      	add	r7, sp, #0
 8012526:	6078      	str	r0, [r7, #4]
 8012528:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801252a:	687b      	ldr	r3, [r7, #4]
 801252c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012530:	687b      	ldr	r3, [r7, #4]
 8012532:	32b0      	adds	r2, #176	@ 0xb0
 8012534:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012538:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 801253a:	2300      	movs	r3, #0
 801253c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 801253e:	2300      	movs	r3, #0
 8012540:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8012542:	2300      	movs	r3, #0
 8012544:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8012546:	693b      	ldr	r3, [r7, #16]
 8012548:	2b00      	cmp	r3, #0
 801254a:	d101      	bne.n	8012550 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 801254c:	2303      	movs	r3, #3
 801254e:	e0bf      	b.n	80126d0 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8012550:	683b      	ldr	r3, [r7, #0]
 8012552:	781b      	ldrb	r3, [r3, #0]
 8012554:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8012558:	2b00      	cmp	r3, #0
 801255a:	d050      	beq.n	80125fe <USBD_CDC_Setup+0xde>
 801255c:	2b20      	cmp	r3, #32
 801255e:	f040 80af 	bne.w	80126c0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8012562:	683b      	ldr	r3, [r7, #0]
 8012564:	88db      	ldrh	r3, [r3, #6]
 8012566:	2b00      	cmp	r3, #0
 8012568:	d03a      	beq.n	80125e0 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 801256a:	683b      	ldr	r3, [r7, #0]
 801256c:	781b      	ldrb	r3, [r3, #0]
 801256e:	b25b      	sxtb	r3, r3
 8012570:	2b00      	cmp	r3, #0
 8012572:	da1b      	bge.n	80125ac <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8012574:	687b      	ldr	r3, [r7, #4]
 8012576:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801257a:	687a      	ldr	r2, [r7, #4]
 801257c:	33b0      	adds	r3, #176	@ 0xb0
 801257e:	009b      	lsls	r3, r3, #2
 8012580:	4413      	add	r3, r2
 8012582:	685b      	ldr	r3, [r3, #4]
 8012584:	689b      	ldr	r3, [r3, #8]
 8012586:	683a      	ldr	r2, [r7, #0]
 8012588:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 801258a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 801258c:	683a      	ldr	r2, [r7, #0]
 801258e:	88d2      	ldrh	r2, [r2, #6]
 8012590:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8012592:	683b      	ldr	r3, [r7, #0]
 8012594:	88db      	ldrh	r3, [r3, #6]
 8012596:	2b07      	cmp	r3, #7
 8012598:	bf28      	it	cs
 801259a:	2307      	movcs	r3, #7
 801259c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 801259e:	693b      	ldr	r3, [r7, #16]
 80125a0:	89fa      	ldrh	r2, [r7, #14]
 80125a2:	4619      	mov	r1, r3
 80125a4:	6878      	ldr	r0, [r7, #4]
 80125a6:	f001 fdbd 	bl	8014124 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80125aa:	e090      	b.n	80126ce <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80125ac:	683b      	ldr	r3, [r7, #0]
 80125ae:	785a      	ldrb	r2, [r3, #1]
 80125b0:	693b      	ldr	r3, [r7, #16]
 80125b2:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80125b6:	683b      	ldr	r3, [r7, #0]
 80125b8:	88db      	ldrh	r3, [r3, #6]
 80125ba:	2b3f      	cmp	r3, #63	@ 0x3f
 80125bc:	d803      	bhi.n	80125c6 <USBD_CDC_Setup+0xa6>
 80125be:	683b      	ldr	r3, [r7, #0]
 80125c0:	88db      	ldrh	r3, [r3, #6]
 80125c2:	b2da      	uxtb	r2, r3
 80125c4:	e000      	b.n	80125c8 <USBD_CDC_Setup+0xa8>
 80125c6:	2240      	movs	r2, #64	@ 0x40
 80125c8:	693b      	ldr	r3, [r7, #16]
 80125ca:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80125ce:	6939      	ldr	r1, [r7, #16]
 80125d0:	693b      	ldr	r3, [r7, #16]
 80125d2:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 80125d6:	461a      	mov	r2, r3
 80125d8:	6878      	ldr	r0, [r7, #4]
 80125da:	f001 fdcf 	bl	801417c <USBD_CtlPrepareRx>
      break;
 80125de:	e076      	b.n	80126ce <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80125e0:	687b      	ldr	r3, [r7, #4]
 80125e2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80125e6:	687a      	ldr	r2, [r7, #4]
 80125e8:	33b0      	adds	r3, #176	@ 0xb0
 80125ea:	009b      	lsls	r3, r3, #2
 80125ec:	4413      	add	r3, r2
 80125ee:	685b      	ldr	r3, [r3, #4]
 80125f0:	689b      	ldr	r3, [r3, #8]
 80125f2:	683a      	ldr	r2, [r7, #0]
 80125f4:	7850      	ldrb	r0, [r2, #1]
 80125f6:	2200      	movs	r2, #0
 80125f8:	6839      	ldr	r1, [r7, #0]
 80125fa:	4798      	blx	r3
      break;
 80125fc:	e067      	b.n	80126ce <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80125fe:	683b      	ldr	r3, [r7, #0]
 8012600:	785b      	ldrb	r3, [r3, #1]
 8012602:	2b0b      	cmp	r3, #11
 8012604:	d851      	bhi.n	80126aa <USBD_CDC_Setup+0x18a>
 8012606:	a201      	add	r2, pc, #4	@ (adr r2, 801260c <USBD_CDC_Setup+0xec>)
 8012608:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801260c:	0801263d 	.word	0x0801263d
 8012610:	080126b9 	.word	0x080126b9
 8012614:	080126ab 	.word	0x080126ab
 8012618:	080126ab 	.word	0x080126ab
 801261c:	080126ab 	.word	0x080126ab
 8012620:	080126ab 	.word	0x080126ab
 8012624:	080126ab 	.word	0x080126ab
 8012628:	080126ab 	.word	0x080126ab
 801262c:	080126ab 	.word	0x080126ab
 8012630:	080126ab 	.word	0x080126ab
 8012634:	08012667 	.word	0x08012667
 8012638:	08012691 	.word	0x08012691
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801263c:	687b      	ldr	r3, [r7, #4]
 801263e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012642:	b2db      	uxtb	r3, r3
 8012644:	2b03      	cmp	r3, #3
 8012646:	d107      	bne.n	8012658 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8012648:	f107 030a 	add.w	r3, r7, #10
 801264c:	2202      	movs	r2, #2
 801264e:	4619      	mov	r1, r3
 8012650:	6878      	ldr	r0, [r7, #4]
 8012652:	f001 fd67 	bl	8014124 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8012656:	e032      	b.n	80126be <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8012658:	6839      	ldr	r1, [r7, #0]
 801265a:	6878      	ldr	r0, [r7, #4]
 801265c:	f001 fce5 	bl	801402a <USBD_CtlError>
            ret = USBD_FAIL;
 8012660:	2303      	movs	r3, #3
 8012662:	75fb      	strb	r3, [r7, #23]
          break;
 8012664:	e02b      	b.n	80126be <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012666:	687b      	ldr	r3, [r7, #4]
 8012668:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801266c:	b2db      	uxtb	r3, r3
 801266e:	2b03      	cmp	r3, #3
 8012670:	d107      	bne.n	8012682 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8012672:	f107 030d 	add.w	r3, r7, #13
 8012676:	2201      	movs	r2, #1
 8012678:	4619      	mov	r1, r3
 801267a:	6878      	ldr	r0, [r7, #4]
 801267c:	f001 fd52 	bl	8014124 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8012680:	e01d      	b.n	80126be <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8012682:	6839      	ldr	r1, [r7, #0]
 8012684:	6878      	ldr	r0, [r7, #4]
 8012686:	f001 fcd0 	bl	801402a <USBD_CtlError>
            ret = USBD_FAIL;
 801268a:	2303      	movs	r3, #3
 801268c:	75fb      	strb	r3, [r7, #23]
          break;
 801268e:	e016      	b.n	80126be <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8012690:	687b      	ldr	r3, [r7, #4]
 8012692:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012696:	b2db      	uxtb	r3, r3
 8012698:	2b03      	cmp	r3, #3
 801269a:	d00f      	beq.n	80126bc <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 801269c:	6839      	ldr	r1, [r7, #0]
 801269e:	6878      	ldr	r0, [r7, #4]
 80126a0:	f001 fcc3 	bl	801402a <USBD_CtlError>
            ret = USBD_FAIL;
 80126a4:	2303      	movs	r3, #3
 80126a6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80126a8:	e008      	b.n	80126bc <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80126aa:	6839      	ldr	r1, [r7, #0]
 80126ac:	6878      	ldr	r0, [r7, #4]
 80126ae:	f001 fcbc 	bl	801402a <USBD_CtlError>
          ret = USBD_FAIL;
 80126b2:	2303      	movs	r3, #3
 80126b4:	75fb      	strb	r3, [r7, #23]
          break;
 80126b6:	e002      	b.n	80126be <USBD_CDC_Setup+0x19e>
          break;
 80126b8:	bf00      	nop
 80126ba:	e008      	b.n	80126ce <USBD_CDC_Setup+0x1ae>
          break;
 80126bc:	bf00      	nop
      }
      break;
 80126be:	e006      	b.n	80126ce <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80126c0:	6839      	ldr	r1, [r7, #0]
 80126c2:	6878      	ldr	r0, [r7, #4]
 80126c4:	f001 fcb1 	bl	801402a <USBD_CtlError>
      ret = USBD_FAIL;
 80126c8:	2303      	movs	r3, #3
 80126ca:	75fb      	strb	r3, [r7, #23]
      break;
 80126cc:	bf00      	nop
  }

  return (uint8_t)ret;
 80126ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80126d0:	4618      	mov	r0, r3
 80126d2:	3718      	adds	r7, #24
 80126d4:	46bd      	mov	sp, r7
 80126d6:	bd80      	pop	{r7, pc}

080126d8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80126d8:	b580      	push	{r7, lr}
 80126da:	b084      	sub	sp, #16
 80126dc:	af00      	add	r7, sp, #0
 80126de:	6078      	str	r0, [r7, #4]
 80126e0:	460b      	mov	r3, r1
 80126e2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80126e4:	687b      	ldr	r3, [r7, #4]
 80126e6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80126ea:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80126ec:	687b      	ldr	r3, [r7, #4]
 80126ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80126f2:	687b      	ldr	r3, [r7, #4]
 80126f4:	32b0      	adds	r2, #176	@ 0xb0
 80126f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80126fa:	2b00      	cmp	r3, #0
 80126fc:	d101      	bne.n	8012702 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80126fe:	2303      	movs	r3, #3
 8012700:	e065      	b.n	80127ce <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8012702:	687b      	ldr	r3, [r7, #4]
 8012704:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012708:	687b      	ldr	r3, [r7, #4]
 801270a:	32b0      	adds	r2, #176	@ 0xb0
 801270c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012710:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8012712:	78fb      	ldrb	r3, [r7, #3]
 8012714:	f003 020f 	and.w	r2, r3, #15
 8012718:	6879      	ldr	r1, [r7, #4]
 801271a:	4613      	mov	r3, r2
 801271c:	009b      	lsls	r3, r3, #2
 801271e:	4413      	add	r3, r2
 8012720:	009b      	lsls	r3, r3, #2
 8012722:	440b      	add	r3, r1
 8012724:	3318      	adds	r3, #24
 8012726:	681b      	ldr	r3, [r3, #0]
 8012728:	2b00      	cmp	r3, #0
 801272a:	d02f      	beq.n	801278c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 801272c:	78fb      	ldrb	r3, [r7, #3]
 801272e:	f003 020f 	and.w	r2, r3, #15
 8012732:	6879      	ldr	r1, [r7, #4]
 8012734:	4613      	mov	r3, r2
 8012736:	009b      	lsls	r3, r3, #2
 8012738:	4413      	add	r3, r2
 801273a:	009b      	lsls	r3, r3, #2
 801273c:	440b      	add	r3, r1
 801273e:	3318      	adds	r3, #24
 8012740:	681a      	ldr	r2, [r3, #0]
 8012742:	78fb      	ldrb	r3, [r7, #3]
 8012744:	f003 010f 	and.w	r1, r3, #15
 8012748:	68f8      	ldr	r0, [r7, #12]
 801274a:	460b      	mov	r3, r1
 801274c:	00db      	lsls	r3, r3, #3
 801274e:	440b      	add	r3, r1
 8012750:	009b      	lsls	r3, r3, #2
 8012752:	4403      	add	r3, r0
 8012754:	331c      	adds	r3, #28
 8012756:	681b      	ldr	r3, [r3, #0]
 8012758:	fbb2 f1f3 	udiv	r1, r2, r3
 801275c:	fb01 f303 	mul.w	r3, r1, r3
 8012760:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8012762:	2b00      	cmp	r3, #0
 8012764:	d112      	bne.n	801278c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8012766:	78fb      	ldrb	r3, [r7, #3]
 8012768:	f003 020f 	and.w	r2, r3, #15
 801276c:	6879      	ldr	r1, [r7, #4]
 801276e:	4613      	mov	r3, r2
 8012770:	009b      	lsls	r3, r3, #2
 8012772:	4413      	add	r3, r2
 8012774:	009b      	lsls	r3, r3, #2
 8012776:	440b      	add	r3, r1
 8012778:	3318      	adds	r3, #24
 801277a:	2200      	movs	r2, #0
 801277c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 801277e:	78f9      	ldrb	r1, [r7, #3]
 8012780:	2300      	movs	r3, #0
 8012782:	2200      	movs	r2, #0
 8012784:	6878      	ldr	r0, [r7, #4]
 8012786:	f002 f9d0 	bl	8014b2a <USBD_LL_Transmit>
 801278a:	e01f      	b.n	80127cc <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 801278c:	68bb      	ldr	r3, [r7, #8]
 801278e:	2200      	movs	r2, #0
 8012790:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8012794:	687b      	ldr	r3, [r7, #4]
 8012796:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801279a:	687a      	ldr	r2, [r7, #4]
 801279c:	33b0      	adds	r3, #176	@ 0xb0
 801279e:	009b      	lsls	r3, r3, #2
 80127a0:	4413      	add	r3, r2
 80127a2:	685b      	ldr	r3, [r3, #4]
 80127a4:	691b      	ldr	r3, [r3, #16]
 80127a6:	2b00      	cmp	r3, #0
 80127a8:	d010      	beq.n	80127cc <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80127aa:	687b      	ldr	r3, [r7, #4]
 80127ac:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80127b0:	687a      	ldr	r2, [r7, #4]
 80127b2:	33b0      	adds	r3, #176	@ 0xb0
 80127b4:	009b      	lsls	r3, r3, #2
 80127b6:	4413      	add	r3, r2
 80127b8:	685b      	ldr	r3, [r3, #4]
 80127ba:	691b      	ldr	r3, [r3, #16]
 80127bc:	68ba      	ldr	r2, [r7, #8]
 80127be:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 80127c2:	68ba      	ldr	r2, [r7, #8]
 80127c4:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 80127c8:	78fa      	ldrb	r2, [r7, #3]
 80127ca:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80127cc:	2300      	movs	r3, #0
}
 80127ce:	4618      	mov	r0, r3
 80127d0:	3710      	adds	r7, #16
 80127d2:	46bd      	mov	sp, r7
 80127d4:	bd80      	pop	{r7, pc}

080127d6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80127d6:	b580      	push	{r7, lr}
 80127d8:	b084      	sub	sp, #16
 80127da:	af00      	add	r7, sp, #0
 80127dc:	6078      	str	r0, [r7, #4]
 80127de:	460b      	mov	r3, r1
 80127e0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80127e2:	687b      	ldr	r3, [r7, #4]
 80127e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80127e8:	687b      	ldr	r3, [r7, #4]
 80127ea:	32b0      	adds	r2, #176	@ 0xb0
 80127ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80127f0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80127f2:	687b      	ldr	r3, [r7, #4]
 80127f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80127f8:	687b      	ldr	r3, [r7, #4]
 80127fa:	32b0      	adds	r2, #176	@ 0xb0
 80127fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012800:	2b00      	cmp	r3, #0
 8012802:	d101      	bne.n	8012808 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8012804:	2303      	movs	r3, #3
 8012806:	e01a      	b.n	801283e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8012808:	78fb      	ldrb	r3, [r7, #3]
 801280a:	4619      	mov	r1, r3
 801280c:	6878      	ldr	r0, [r7, #4]
 801280e:	f002 f9ce 	bl	8014bae <USBD_LL_GetRxDataSize>
 8012812:	4602      	mov	r2, r0
 8012814:	68fb      	ldr	r3, [r7, #12]
 8012816:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 801281a:	687b      	ldr	r3, [r7, #4]
 801281c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8012820:	687a      	ldr	r2, [r7, #4]
 8012822:	33b0      	adds	r3, #176	@ 0xb0
 8012824:	009b      	lsls	r3, r3, #2
 8012826:	4413      	add	r3, r2
 8012828:	685b      	ldr	r3, [r3, #4]
 801282a:	68db      	ldr	r3, [r3, #12]
 801282c:	68fa      	ldr	r2, [r7, #12]
 801282e:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8012832:	68fa      	ldr	r2, [r7, #12]
 8012834:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8012838:	4611      	mov	r1, r2
 801283a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 801283c:	2300      	movs	r3, #0
}
 801283e:	4618      	mov	r0, r3
 8012840:	3710      	adds	r7, #16
 8012842:	46bd      	mov	sp, r7
 8012844:	bd80      	pop	{r7, pc}

08012846 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8012846:	b580      	push	{r7, lr}
 8012848:	b084      	sub	sp, #16
 801284a:	af00      	add	r7, sp, #0
 801284c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801284e:	687b      	ldr	r3, [r7, #4]
 8012850:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012854:	687b      	ldr	r3, [r7, #4]
 8012856:	32b0      	adds	r2, #176	@ 0xb0
 8012858:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801285c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 801285e:	68fb      	ldr	r3, [r7, #12]
 8012860:	2b00      	cmp	r3, #0
 8012862:	d101      	bne.n	8012868 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8012864:	2303      	movs	r3, #3
 8012866:	e024      	b.n	80128b2 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8012868:	687b      	ldr	r3, [r7, #4]
 801286a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801286e:	687a      	ldr	r2, [r7, #4]
 8012870:	33b0      	adds	r3, #176	@ 0xb0
 8012872:	009b      	lsls	r3, r3, #2
 8012874:	4413      	add	r3, r2
 8012876:	685b      	ldr	r3, [r3, #4]
 8012878:	2b00      	cmp	r3, #0
 801287a:	d019      	beq.n	80128b0 <USBD_CDC_EP0_RxReady+0x6a>
 801287c:	68fb      	ldr	r3, [r7, #12]
 801287e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8012882:	2bff      	cmp	r3, #255	@ 0xff
 8012884:	d014      	beq.n	80128b0 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8012886:	687b      	ldr	r3, [r7, #4]
 8012888:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801288c:	687a      	ldr	r2, [r7, #4]
 801288e:	33b0      	adds	r3, #176	@ 0xb0
 8012890:	009b      	lsls	r3, r3, #2
 8012892:	4413      	add	r3, r2
 8012894:	685b      	ldr	r3, [r3, #4]
 8012896:	689b      	ldr	r3, [r3, #8]
 8012898:	68fa      	ldr	r2, [r7, #12]
 801289a:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 801289e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80128a0:	68fa      	ldr	r2, [r7, #12]
 80128a2:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80128a6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80128a8:	68fb      	ldr	r3, [r7, #12]
 80128aa:	22ff      	movs	r2, #255	@ 0xff
 80128ac:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 80128b0:	2300      	movs	r3, #0
}
 80128b2:	4618      	mov	r0, r3
 80128b4:	3710      	adds	r7, #16
 80128b6:	46bd      	mov	sp, r7
 80128b8:	bd80      	pop	{r7, pc}
	...

080128bc <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80128bc:	b580      	push	{r7, lr}
 80128be:	b086      	sub	sp, #24
 80128c0:	af00      	add	r7, sp, #0
 80128c2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80128c4:	2182      	movs	r1, #130	@ 0x82
 80128c6:	4818      	ldr	r0, [pc, #96]	@ (8012928 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80128c8:	f000 fd4f 	bl	801336a <USBD_GetEpDesc>
 80128cc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80128ce:	2101      	movs	r1, #1
 80128d0:	4815      	ldr	r0, [pc, #84]	@ (8012928 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80128d2:	f000 fd4a 	bl	801336a <USBD_GetEpDesc>
 80128d6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80128d8:	2181      	movs	r1, #129	@ 0x81
 80128da:	4813      	ldr	r0, [pc, #76]	@ (8012928 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80128dc:	f000 fd45 	bl	801336a <USBD_GetEpDesc>
 80128e0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80128e2:	697b      	ldr	r3, [r7, #20]
 80128e4:	2b00      	cmp	r3, #0
 80128e6:	d002      	beq.n	80128ee <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80128e8:	697b      	ldr	r3, [r7, #20]
 80128ea:	2210      	movs	r2, #16
 80128ec:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80128ee:	693b      	ldr	r3, [r7, #16]
 80128f0:	2b00      	cmp	r3, #0
 80128f2:	d006      	beq.n	8012902 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80128f4:	693b      	ldr	r3, [r7, #16]
 80128f6:	2200      	movs	r2, #0
 80128f8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80128fc:	711a      	strb	r2, [r3, #4]
 80128fe:	2200      	movs	r2, #0
 8012900:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8012902:	68fb      	ldr	r3, [r7, #12]
 8012904:	2b00      	cmp	r3, #0
 8012906:	d006      	beq.n	8012916 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8012908:	68fb      	ldr	r3, [r7, #12]
 801290a:	2200      	movs	r2, #0
 801290c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8012910:	711a      	strb	r2, [r3, #4]
 8012912:	2200      	movs	r2, #0
 8012914:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8012916:	687b      	ldr	r3, [r7, #4]
 8012918:	2243      	movs	r2, #67	@ 0x43
 801291a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 801291c:	4b02      	ldr	r3, [pc, #8]	@ (8012928 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 801291e:	4618      	mov	r0, r3
 8012920:	3718      	adds	r7, #24
 8012922:	46bd      	mov	sp, r7
 8012924:	bd80      	pop	{r7, pc}
 8012926:	bf00      	nop
 8012928:	24000054 	.word	0x24000054

0801292c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 801292c:	b580      	push	{r7, lr}
 801292e:	b086      	sub	sp, #24
 8012930:	af00      	add	r7, sp, #0
 8012932:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8012934:	2182      	movs	r1, #130	@ 0x82
 8012936:	4818      	ldr	r0, [pc, #96]	@ (8012998 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8012938:	f000 fd17 	bl	801336a <USBD_GetEpDesc>
 801293c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 801293e:	2101      	movs	r1, #1
 8012940:	4815      	ldr	r0, [pc, #84]	@ (8012998 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8012942:	f000 fd12 	bl	801336a <USBD_GetEpDesc>
 8012946:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8012948:	2181      	movs	r1, #129	@ 0x81
 801294a:	4813      	ldr	r0, [pc, #76]	@ (8012998 <USBD_CDC_GetHSCfgDesc+0x6c>)
 801294c:	f000 fd0d 	bl	801336a <USBD_GetEpDesc>
 8012950:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8012952:	697b      	ldr	r3, [r7, #20]
 8012954:	2b00      	cmp	r3, #0
 8012956:	d002      	beq.n	801295e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8012958:	697b      	ldr	r3, [r7, #20]
 801295a:	2210      	movs	r2, #16
 801295c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 801295e:	693b      	ldr	r3, [r7, #16]
 8012960:	2b00      	cmp	r3, #0
 8012962:	d006      	beq.n	8012972 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8012964:	693b      	ldr	r3, [r7, #16]
 8012966:	2200      	movs	r2, #0
 8012968:	711a      	strb	r2, [r3, #4]
 801296a:	2200      	movs	r2, #0
 801296c:	f042 0202 	orr.w	r2, r2, #2
 8012970:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8012972:	68fb      	ldr	r3, [r7, #12]
 8012974:	2b00      	cmp	r3, #0
 8012976:	d006      	beq.n	8012986 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8012978:	68fb      	ldr	r3, [r7, #12]
 801297a:	2200      	movs	r2, #0
 801297c:	711a      	strb	r2, [r3, #4]
 801297e:	2200      	movs	r2, #0
 8012980:	f042 0202 	orr.w	r2, r2, #2
 8012984:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8012986:	687b      	ldr	r3, [r7, #4]
 8012988:	2243      	movs	r2, #67	@ 0x43
 801298a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 801298c:	4b02      	ldr	r3, [pc, #8]	@ (8012998 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 801298e:	4618      	mov	r0, r3
 8012990:	3718      	adds	r7, #24
 8012992:	46bd      	mov	sp, r7
 8012994:	bd80      	pop	{r7, pc}
 8012996:	bf00      	nop
 8012998:	24000054 	.word	0x24000054

0801299c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 801299c:	b580      	push	{r7, lr}
 801299e:	b086      	sub	sp, #24
 80129a0:	af00      	add	r7, sp, #0
 80129a2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80129a4:	2182      	movs	r1, #130	@ 0x82
 80129a6:	4818      	ldr	r0, [pc, #96]	@ (8012a08 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80129a8:	f000 fcdf 	bl	801336a <USBD_GetEpDesc>
 80129ac:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80129ae:	2101      	movs	r1, #1
 80129b0:	4815      	ldr	r0, [pc, #84]	@ (8012a08 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80129b2:	f000 fcda 	bl	801336a <USBD_GetEpDesc>
 80129b6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80129b8:	2181      	movs	r1, #129	@ 0x81
 80129ba:	4813      	ldr	r0, [pc, #76]	@ (8012a08 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80129bc:	f000 fcd5 	bl	801336a <USBD_GetEpDesc>
 80129c0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80129c2:	697b      	ldr	r3, [r7, #20]
 80129c4:	2b00      	cmp	r3, #0
 80129c6:	d002      	beq.n	80129ce <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80129c8:	697b      	ldr	r3, [r7, #20]
 80129ca:	2210      	movs	r2, #16
 80129cc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80129ce:	693b      	ldr	r3, [r7, #16]
 80129d0:	2b00      	cmp	r3, #0
 80129d2:	d006      	beq.n	80129e2 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80129d4:	693b      	ldr	r3, [r7, #16]
 80129d6:	2200      	movs	r2, #0
 80129d8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80129dc:	711a      	strb	r2, [r3, #4]
 80129de:	2200      	movs	r2, #0
 80129e0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80129e2:	68fb      	ldr	r3, [r7, #12]
 80129e4:	2b00      	cmp	r3, #0
 80129e6:	d006      	beq.n	80129f6 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80129e8:	68fb      	ldr	r3, [r7, #12]
 80129ea:	2200      	movs	r2, #0
 80129ec:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80129f0:	711a      	strb	r2, [r3, #4]
 80129f2:	2200      	movs	r2, #0
 80129f4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80129f6:	687b      	ldr	r3, [r7, #4]
 80129f8:	2243      	movs	r2, #67	@ 0x43
 80129fa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80129fc:	4b02      	ldr	r3, [pc, #8]	@ (8012a08 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80129fe:	4618      	mov	r0, r3
 8012a00:	3718      	adds	r7, #24
 8012a02:	46bd      	mov	sp, r7
 8012a04:	bd80      	pop	{r7, pc}
 8012a06:	bf00      	nop
 8012a08:	24000054 	.word	0x24000054

08012a0c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8012a0c:	b480      	push	{r7}
 8012a0e:	b083      	sub	sp, #12
 8012a10:	af00      	add	r7, sp, #0
 8012a12:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8012a14:	687b      	ldr	r3, [r7, #4]
 8012a16:	220a      	movs	r2, #10
 8012a18:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8012a1a:	4b03      	ldr	r3, [pc, #12]	@ (8012a28 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8012a1c:	4618      	mov	r0, r3
 8012a1e:	370c      	adds	r7, #12
 8012a20:	46bd      	mov	sp, r7
 8012a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a26:	4770      	bx	lr
 8012a28:	24000010 	.word	0x24000010

08012a2c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8012a2c:	b480      	push	{r7}
 8012a2e:	b083      	sub	sp, #12
 8012a30:	af00      	add	r7, sp, #0
 8012a32:	6078      	str	r0, [r7, #4]
 8012a34:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8012a36:	683b      	ldr	r3, [r7, #0]
 8012a38:	2b00      	cmp	r3, #0
 8012a3a:	d101      	bne.n	8012a40 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8012a3c:	2303      	movs	r3, #3
 8012a3e:	e009      	b.n	8012a54 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8012a40:	687b      	ldr	r3, [r7, #4]
 8012a42:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8012a46:	687a      	ldr	r2, [r7, #4]
 8012a48:	33b0      	adds	r3, #176	@ 0xb0
 8012a4a:	009b      	lsls	r3, r3, #2
 8012a4c:	4413      	add	r3, r2
 8012a4e:	683a      	ldr	r2, [r7, #0]
 8012a50:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8012a52:	2300      	movs	r3, #0
}
 8012a54:	4618      	mov	r0, r3
 8012a56:	370c      	adds	r7, #12
 8012a58:	46bd      	mov	sp, r7
 8012a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a5e:	4770      	bx	lr

08012a60 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8012a60:	b480      	push	{r7}
 8012a62:	b087      	sub	sp, #28
 8012a64:	af00      	add	r7, sp, #0
 8012a66:	60f8      	str	r0, [r7, #12]
 8012a68:	60b9      	str	r1, [r7, #8]
 8012a6a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8012a6c:	68fb      	ldr	r3, [r7, #12]
 8012a6e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012a72:	68fb      	ldr	r3, [r7, #12]
 8012a74:	32b0      	adds	r2, #176	@ 0xb0
 8012a76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012a7a:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8012a7c:	697b      	ldr	r3, [r7, #20]
 8012a7e:	2b00      	cmp	r3, #0
 8012a80:	d101      	bne.n	8012a86 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8012a82:	2303      	movs	r3, #3
 8012a84:	e008      	b.n	8012a98 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8012a86:	697b      	ldr	r3, [r7, #20]
 8012a88:	68ba      	ldr	r2, [r7, #8]
 8012a8a:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8012a8e:	697b      	ldr	r3, [r7, #20]
 8012a90:	687a      	ldr	r2, [r7, #4]
 8012a92:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8012a96:	2300      	movs	r3, #0
}
 8012a98:	4618      	mov	r0, r3
 8012a9a:	371c      	adds	r7, #28
 8012a9c:	46bd      	mov	sp, r7
 8012a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012aa2:	4770      	bx	lr

08012aa4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8012aa4:	b480      	push	{r7}
 8012aa6:	b085      	sub	sp, #20
 8012aa8:	af00      	add	r7, sp, #0
 8012aaa:	6078      	str	r0, [r7, #4]
 8012aac:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8012aae:	687b      	ldr	r3, [r7, #4]
 8012ab0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012ab4:	687b      	ldr	r3, [r7, #4]
 8012ab6:	32b0      	adds	r2, #176	@ 0xb0
 8012ab8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012abc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8012abe:	68fb      	ldr	r3, [r7, #12]
 8012ac0:	2b00      	cmp	r3, #0
 8012ac2:	d101      	bne.n	8012ac8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8012ac4:	2303      	movs	r3, #3
 8012ac6:	e004      	b.n	8012ad2 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8012ac8:	68fb      	ldr	r3, [r7, #12]
 8012aca:	683a      	ldr	r2, [r7, #0]
 8012acc:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8012ad0:	2300      	movs	r3, #0
}
 8012ad2:	4618      	mov	r0, r3
 8012ad4:	3714      	adds	r7, #20
 8012ad6:	46bd      	mov	sp, r7
 8012ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012adc:	4770      	bx	lr
	...

08012ae0 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8012ae0:	b580      	push	{r7, lr}
 8012ae2:	b084      	sub	sp, #16
 8012ae4:	af00      	add	r7, sp, #0
 8012ae6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8012ae8:	687b      	ldr	r3, [r7, #4]
 8012aea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012aee:	687b      	ldr	r3, [r7, #4]
 8012af0:	32b0      	adds	r2, #176	@ 0xb0
 8012af2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012af6:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8012af8:	2301      	movs	r3, #1
 8012afa:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8012afc:	68bb      	ldr	r3, [r7, #8]
 8012afe:	2b00      	cmp	r3, #0
 8012b00:	d101      	bne.n	8012b06 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8012b02:	2303      	movs	r3, #3
 8012b04:	e025      	b.n	8012b52 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8012b06:	68bb      	ldr	r3, [r7, #8]
 8012b08:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8012b0c:	2b00      	cmp	r3, #0
 8012b0e:	d11f      	bne.n	8012b50 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8012b10:	68bb      	ldr	r3, [r7, #8]
 8012b12:	2201      	movs	r2, #1
 8012b14:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8012b18:	4b10      	ldr	r3, [pc, #64]	@ (8012b5c <USBD_CDC_TransmitPacket+0x7c>)
 8012b1a:	781b      	ldrb	r3, [r3, #0]
 8012b1c:	f003 020f 	and.w	r2, r3, #15
 8012b20:	68bb      	ldr	r3, [r7, #8]
 8012b22:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8012b26:	6878      	ldr	r0, [r7, #4]
 8012b28:	4613      	mov	r3, r2
 8012b2a:	009b      	lsls	r3, r3, #2
 8012b2c:	4413      	add	r3, r2
 8012b2e:	009b      	lsls	r3, r3, #2
 8012b30:	4403      	add	r3, r0
 8012b32:	3318      	adds	r3, #24
 8012b34:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8012b36:	4b09      	ldr	r3, [pc, #36]	@ (8012b5c <USBD_CDC_TransmitPacket+0x7c>)
 8012b38:	7819      	ldrb	r1, [r3, #0]
 8012b3a:	68bb      	ldr	r3, [r7, #8]
 8012b3c:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8012b40:	68bb      	ldr	r3, [r7, #8]
 8012b42:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8012b46:	6878      	ldr	r0, [r7, #4]
 8012b48:	f001 ffef 	bl	8014b2a <USBD_LL_Transmit>

    ret = USBD_OK;
 8012b4c:	2300      	movs	r3, #0
 8012b4e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8012b50:	7bfb      	ldrb	r3, [r7, #15]
}
 8012b52:	4618      	mov	r0, r3
 8012b54:	3710      	adds	r7, #16
 8012b56:	46bd      	mov	sp, r7
 8012b58:	bd80      	pop	{r7, pc}
 8012b5a:	bf00      	nop
 8012b5c:	24000097 	.word	0x24000097

08012b60 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8012b60:	b580      	push	{r7, lr}
 8012b62:	b084      	sub	sp, #16
 8012b64:	af00      	add	r7, sp, #0
 8012b66:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8012b68:	687b      	ldr	r3, [r7, #4]
 8012b6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012b6e:	687b      	ldr	r3, [r7, #4]
 8012b70:	32b0      	adds	r2, #176	@ 0xb0
 8012b72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012b76:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8012b78:	687b      	ldr	r3, [r7, #4]
 8012b7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012b7e:	687b      	ldr	r3, [r7, #4]
 8012b80:	32b0      	adds	r2, #176	@ 0xb0
 8012b82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012b86:	2b00      	cmp	r3, #0
 8012b88:	d101      	bne.n	8012b8e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8012b8a:	2303      	movs	r3, #3
 8012b8c:	e018      	b.n	8012bc0 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012b8e:	687b      	ldr	r3, [r7, #4]
 8012b90:	7c1b      	ldrb	r3, [r3, #16]
 8012b92:	2b00      	cmp	r3, #0
 8012b94:	d10a      	bne.n	8012bac <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8012b96:	4b0c      	ldr	r3, [pc, #48]	@ (8012bc8 <USBD_CDC_ReceivePacket+0x68>)
 8012b98:	7819      	ldrb	r1, [r3, #0]
 8012b9a:	68fb      	ldr	r3, [r7, #12]
 8012b9c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8012ba0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8012ba4:	6878      	ldr	r0, [r7, #4]
 8012ba6:	f001 ffe1 	bl	8014b6c <USBD_LL_PrepareReceive>
 8012baa:	e008      	b.n	8012bbe <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8012bac:	4b06      	ldr	r3, [pc, #24]	@ (8012bc8 <USBD_CDC_ReceivePacket+0x68>)
 8012bae:	7819      	ldrb	r1, [r3, #0]
 8012bb0:	68fb      	ldr	r3, [r7, #12]
 8012bb2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8012bb6:	2340      	movs	r3, #64	@ 0x40
 8012bb8:	6878      	ldr	r0, [r7, #4]
 8012bba:	f001 ffd7 	bl	8014b6c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8012bbe:	2300      	movs	r3, #0
}
 8012bc0:	4618      	mov	r0, r3
 8012bc2:	3710      	adds	r7, #16
 8012bc4:	46bd      	mov	sp, r7
 8012bc6:	bd80      	pop	{r7, pc}
 8012bc8:	24000098 	.word	0x24000098

08012bcc <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8012bcc:	b580      	push	{r7, lr}
 8012bce:	b086      	sub	sp, #24
 8012bd0:	af00      	add	r7, sp, #0
 8012bd2:	60f8      	str	r0, [r7, #12]
 8012bd4:	60b9      	str	r1, [r7, #8]
 8012bd6:	4613      	mov	r3, r2
 8012bd8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8012bda:	68fb      	ldr	r3, [r7, #12]
 8012bdc:	2b00      	cmp	r3, #0
 8012bde:	d101      	bne.n	8012be4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8012be0:	2303      	movs	r3, #3
 8012be2:	e01f      	b.n	8012c24 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8012be4:	68fb      	ldr	r3, [r7, #12]
 8012be6:	2200      	movs	r2, #0
 8012be8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8012bec:	68fb      	ldr	r3, [r7, #12]
 8012bee:	2200      	movs	r2, #0
 8012bf0:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8012bf4:	68fb      	ldr	r3, [r7, #12]
 8012bf6:	2200      	movs	r2, #0
 8012bf8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8012bfc:	68bb      	ldr	r3, [r7, #8]
 8012bfe:	2b00      	cmp	r3, #0
 8012c00:	d003      	beq.n	8012c0a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8012c02:	68fb      	ldr	r3, [r7, #12]
 8012c04:	68ba      	ldr	r2, [r7, #8]
 8012c06:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8012c0a:	68fb      	ldr	r3, [r7, #12]
 8012c0c:	2201      	movs	r2, #1
 8012c0e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8012c12:	68fb      	ldr	r3, [r7, #12]
 8012c14:	79fa      	ldrb	r2, [r7, #7]
 8012c16:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8012c18:	68f8      	ldr	r0, [r7, #12]
 8012c1a:	f001 fe4b 	bl	80148b4 <USBD_LL_Init>
 8012c1e:	4603      	mov	r3, r0
 8012c20:	75fb      	strb	r3, [r7, #23]

  return ret;
 8012c22:	7dfb      	ldrb	r3, [r7, #23]
}
 8012c24:	4618      	mov	r0, r3
 8012c26:	3718      	adds	r7, #24
 8012c28:	46bd      	mov	sp, r7
 8012c2a:	bd80      	pop	{r7, pc}

08012c2c <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8012c2c:	b580      	push	{r7, lr}
 8012c2e:	b084      	sub	sp, #16
 8012c30:	af00      	add	r7, sp, #0
 8012c32:	6078      	str	r0, [r7, #4]
 8012c34:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8012c36:	2300      	movs	r3, #0
 8012c38:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8012c3a:	683b      	ldr	r3, [r7, #0]
 8012c3c:	2b00      	cmp	r3, #0
 8012c3e:	d101      	bne.n	8012c44 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8012c40:	2303      	movs	r3, #3
 8012c42:	e025      	b.n	8012c90 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8012c44:	687b      	ldr	r3, [r7, #4]
 8012c46:	683a      	ldr	r2, [r7, #0]
 8012c48:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8012c4c:	687b      	ldr	r3, [r7, #4]
 8012c4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012c52:	687b      	ldr	r3, [r7, #4]
 8012c54:	32ae      	adds	r2, #174	@ 0xae
 8012c56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012c5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012c5c:	2b00      	cmp	r3, #0
 8012c5e:	d00f      	beq.n	8012c80 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8012c60:	687b      	ldr	r3, [r7, #4]
 8012c62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012c66:	687b      	ldr	r3, [r7, #4]
 8012c68:	32ae      	adds	r2, #174	@ 0xae
 8012c6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012c6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012c70:	f107 020e 	add.w	r2, r7, #14
 8012c74:	4610      	mov	r0, r2
 8012c76:	4798      	blx	r3
 8012c78:	4602      	mov	r2, r0
 8012c7a:	687b      	ldr	r3, [r7, #4]
 8012c7c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8012c80:	687b      	ldr	r3, [r7, #4]
 8012c82:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8012c86:	1c5a      	adds	r2, r3, #1
 8012c88:	687b      	ldr	r3, [r7, #4]
 8012c8a:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8012c8e:	2300      	movs	r3, #0
}
 8012c90:	4618      	mov	r0, r3
 8012c92:	3710      	adds	r7, #16
 8012c94:	46bd      	mov	sp, r7
 8012c96:	bd80      	pop	{r7, pc}

08012c98 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8012c98:	b580      	push	{r7, lr}
 8012c9a:	b082      	sub	sp, #8
 8012c9c:	af00      	add	r7, sp, #0
 8012c9e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8012ca0:	6878      	ldr	r0, [r7, #4]
 8012ca2:	f001 fe59 	bl	8014958 <USBD_LL_Start>
 8012ca6:	4603      	mov	r3, r0
}
 8012ca8:	4618      	mov	r0, r3
 8012caa:	3708      	adds	r7, #8
 8012cac:	46bd      	mov	sp, r7
 8012cae:	bd80      	pop	{r7, pc}

08012cb0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8012cb0:	b480      	push	{r7}
 8012cb2:	b083      	sub	sp, #12
 8012cb4:	af00      	add	r7, sp, #0
 8012cb6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8012cb8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8012cba:	4618      	mov	r0, r3
 8012cbc:	370c      	adds	r7, #12
 8012cbe:	46bd      	mov	sp, r7
 8012cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cc4:	4770      	bx	lr

08012cc6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8012cc6:	b580      	push	{r7, lr}
 8012cc8:	b084      	sub	sp, #16
 8012cca:	af00      	add	r7, sp, #0
 8012ccc:	6078      	str	r0, [r7, #4]
 8012cce:	460b      	mov	r3, r1
 8012cd0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8012cd2:	2300      	movs	r3, #0
 8012cd4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8012cd6:	687b      	ldr	r3, [r7, #4]
 8012cd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012cdc:	2b00      	cmp	r3, #0
 8012cde:	d009      	beq.n	8012cf4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8012ce0:	687b      	ldr	r3, [r7, #4]
 8012ce2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012ce6:	681b      	ldr	r3, [r3, #0]
 8012ce8:	78fa      	ldrb	r2, [r7, #3]
 8012cea:	4611      	mov	r1, r2
 8012cec:	6878      	ldr	r0, [r7, #4]
 8012cee:	4798      	blx	r3
 8012cf0:	4603      	mov	r3, r0
 8012cf2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8012cf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8012cf6:	4618      	mov	r0, r3
 8012cf8:	3710      	adds	r7, #16
 8012cfa:	46bd      	mov	sp, r7
 8012cfc:	bd80      	pop	{r7, pc}

08012cfe <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8012cfe:	b580      	push	{r7, lr}
 8012d00:	b084      	sub	sp, #16
 8012d02:	af00      	add	r7, sp, #0
 8012d04:	6078      	str	r0, [r7, #4]
 8012d06:	460b      	mov	r3, r1
 8012d08:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8012d0a:	2300      	movs	r3, #0
 8012d0c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8012d0e:	687b      	ldr	r3, [r7, #4]
 8012d10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012d14:	685b      	ldr	r3, [r3, #4]
 8012d16:	78fa      	ldrb	r2, [r7, #3]
 8012d18:	4611      	mov	r1, r2
 8012d1a:	6878      	ldr	r0, [r7, #4]
 8012d1c:	4798      	blx	r3
 8012d1e:	4603      	mov	r3, r0
 8012d20:	2b00      	cmp	r3, #0
 8012d22:	d001      	beq.n	8012d28 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8012d24:	2303      	movs	r3, #3
 8012d26:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8012d28:	7bfb      	ldrb	r3, [r7, #15]
}
 8012d2a:	4618      	mov	r0, r3
 8012d2c:	3710      	adds	r7, #16
 8012d2e:	46bd      	mov	sp, r7
 8012d30:	bd80      	pop	{r7, pc}

08012d32 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8012d32:	b580      	push	{r7, lr}
 8012d34:	b084      	sub	sp, #16
 8012d36:	af00      	add	r7, sp, #0
 8012d38:	6078      	str	r0, [r7, #4]
 8012d3a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8012d3c:	687b      	ldr	r3, [r7, #4]
 8012d3e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8012d42:	6839      	ldr	r1, [r7, #0]
 8012d44:	4618      	mov	r0, r3
 8012d46:	f001 f936 	bl	8013fb6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8012d4a:	687b      	ldr	r3, [r7, #4]
 8012d4c:	2201      	movs	r2, #1
 8012d4e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8012d52:	687b      	ldr	r3, [r7, #4]
 8012d54:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8012d58:	461a      	mov	r2, r3
 8012d5a:	687b      	ldr	r3, [r7, #4]
 8012d5c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8012d60:	687b      	ldr	r3, [r7, #4]
 8012d62:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8012d66:	f003 031f 	and.w	r3, r3, #31
 8012d6a:	2b02      	cmp	r3, #2
 8012d6c:	d01a      	beq.n	8012da4 <USBD_LL_SetupStage+0x72>
 8012d6e:	2b02      	cmp	r3, #2
 8012d70:	d822      	bhi.n	8012db8 <USBD_LL_SetupStage+0x86>
 8012d72:	2b00      	cmp	r3, #0
 8012d74:	d002      	beq.n	8012d7c <USBD_LL_SetupStage+0x4a>
 8012d76:	2b01      	cmp	r3, #1
 8012d78:	d00a      	beq.n	8012d90 <USBD_LL_SetupStage+0x5e>
 8012d7a:	e01d      	b.n	8012db8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8012d7c:	687b      	ldr	r3, [r7, #4]
 8012d7e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8012d82:	4619      	mov	r1, r3
 8012d84:	6878      	ldr	r0, [r7, #4]
 8012d86:	f000 fb63 	bl	8013450 <USBD_StdDevReq>
 8012d8a:	4603      	mov	r3, r0
 8012d8c:	73fb      	strb	r3, [r7, #15]
      break;
 8012d8e:	e020      	b.n	8012dd2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8012d90:	687b      	ldr	r3, [r7, #4]
 8012d92:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8012d96:	4619      	mov	r1, r3
 8012d98:	6878      	ldr	r0, [r7, #4]
 8012d9a:	f000 fbcb 	bl	8013534 <USBD_StdItfReq>
 8012d9e:	4603      	mov	r3, r0
 8012da0:	73fb      	strb	r3, [r7, #15]
      break;
 8012da2:	e016      	b.n	8012dd2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8012da4:	687b      	ldr	r3, [r7, #4]
 8012da6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8012daa:	4619      	mov	r1, r3
 8012dac:	6878      	ldr	r0, [r7, #4]
 8012dae:	f000 fc2d 	bl	801360c <USBD_StdEPReq>
 8012db2:	4603      	mov	r3, r0
 8012db4:	73fb      	strb	r3, [r7, #15]
      break;
 8012db6:	e00c      	b.n	8012dd2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8012db8:	687b      	ldr	r3, [r7, #4]
 8012dba:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8012dbe:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8012dc2:	b2db      	uxtb	r3, r3
 8012dc4:	4619      	mov	r1, r3
 8012dc6:	6878      	ldr	r0, [r7, #4]
 8012dc8:	f001 fe26 	bl	8014a18 <USBD_LL_StallEP>
 8012dcc:	4603      	mov	r3, r0
 8012dce:	73fb      	strb	r3, [r7, #15]
      break;
 8012dd0:	bf00      	nop
  }

  return ret;
 8012dd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8012dd4:	4618      	mov	r0, r3
 8012dd6:	3710      	adds	r7, #16
 8012dd8:	46bd      	mov	sp, r7
 8012dda:	bd80      	pop	{r7, pc}

08012ddc <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8012ddc:	b580      	push	{r7, lr}
 8012dde:	b086      	sub	sp, #24
 8012de0:	af00      	add	r7, sp, #0
 8012de2:	60f8      	str	r0, [r7, #12]
 8012de4:	460b      	mov	r3, r1
 8012de6:	607a      	str	r2, [r7, #4]
 8012de8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8012dea:	2300      	movs	r3, #0
 8012dec:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8012dee:	7afb      	ldrb	r3, [r7, #11]
 8012df0:	2b00      	cmp	r3, #0
 8012df2:	d16e      	bne.n	8012ed2 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8012df4:	68fb      	ldr	r3, [r7, #12]
 8012df6:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8012dfa:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8012dfc:	68fb      	ldr	r3, [r7, #12]
 8012dfe:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8012e02:	2b03      	cmp	r3, #3
 8012e04:	f040 8098 	bne.w	8012f38 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8012e08:	693b      	ldr	r3, [r7, #16]
 8012e0a:	689a      	ldr	r2, [r3, #8]
 8012e0c:	693b      	ldr	r3, [r7, #16]
 8012e0e:	68db      	ldr	r3, [r3, #12]
 8012e10:	429a      	cmp	r2, r3
 8012e12:	d913      	bls.n	8012e3c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8012e14:	693b      	ldr	r3, [r7, #16]
 8012e16:	689a      	ldr	r2, [r3, #8]
 8012e18:	693b      	ldr	r3, [r7, #16]
 8012e1a:	68db      	ldr	r3, [r3, #12]
 8012e1c:	1ad2      	subs	r2, r2, r3
 8012e1e:	693b      	ldr	r3, [r7, #16]
 8012e20:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8012e22:	693b      	ldr	r3, [r7, #16]
 8012e24:	68da      	ldr	r2, [r3, #12]
 8012e26:	693b      	ldr	r3, [r7, #16]
 8012e28:	689b      	ldr	r3, [r3, #8]
 8012e2a:	4293      	cmp	r3, r2
 8012e2c:	bf28      	it	cs
 8012e2e:	4613      	movcs	r3, r2
 8012e30:	461a      	mov	r2, r3
 8012e32:	6879      	ldr	r1, [r7, #4]
 8012e34:	68f8      	ldr	r0, [r7, #12]
 8012e36:	f001 f9be 	bl	80141b6 <USBD_CtlContinueRx>
 8012e3a:	e07d      	b.n	8012f38 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8012e3c:	68fb      	ldr	r3, [r7, #12]
 8012e3e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8012e42:	f003 031f 	and.w	r3, r3, #31
 8012e46:	2b02      	cmp	r3, #2
 8012e48:	d014      	beq.n	8012e74 <USBD_LL_DataOutStage+0x98>
 8012e4a:	2b02      	cmp	r3, #2
 8012e4c:	d81d      	bhi.n	8012e8a <USBD_LL_DataOutStage+0xae>
 8012e4e:	2b00      	cmp	r3, #0
 8012e50:	d002      	beq.n	8012e58 <USBD_LL_DataOutStage+0x7c>
 8012e52:	2b01      	cmp	r3, #1
 8012e54:	d003      	beq.n	8012e5e <USBD_LL_DataOutStage+0x82>
 8012e56:	e018      	b.n	8012e8a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8012e58:	2300      	movs	r3, #0
 8012e5a:	75bb      	strb	r3, [r7, #22]
            break;
 8012e5c:	e018      	b.n	8012e90 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8012e5e:	68fb      	ldr	r3, [r7, #12]
 8012e60:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8012e64:	b2db      	uxtb	r3, r3
 8012e66:	4619      	mov	r1, r3
 8012e68:	68f8      	ldr	r0, [r7, #12]
 8012e6a:	f000 fa64 	bl	8013336 <USBD_CoreFindIF>
 8012e6e:	4603      	mov	r3, r0
 8012e70:	75bb      	strb	r3, [r7, #22]
            break;
 8012e72:	e00d      	b.n	8012e90 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8012e74:	68fb      	ldr	r3, [r7, #12]
 8012e76:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8012e7a:	b2db      	uxtb	r3, r3
 8012e7c:	4619      	mov	r1, r3
 8012e7e:	68f8      	ldr	r0, [r7, #12]
 8012e80:	f000 fa66 	bl	8013350 <USBD_CoreFindEP>
 8012e84:	4603      	mov	r3, r0
 8012e86:	75bb      	strb	r3, [r7, #22]
            break;
 8012e88:	e002      	b.n	8012e90 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8012e8a:	2300      	movs	r3, #0
 8012e8c:	75bb      	strb	r3, [r7, #22]
            break;
 8012e8e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8012e90:	7dbb      	ldrb	r3, [r7, #22]
 8012e92:	2b00      	cmp	r3, #0
 8012e94:	d119      	bne.n	8012eca <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012e96:	68fb      	ldr	r3, [r7, #12]
 8012e98:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012e9c:	b2db      	uxtb	r3, r3
 8012e9e:	2b03      	cmp	r3, #3
 8012ea0:	d113      	bne.n	8012eca <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8012ea2:	7dba      	ldrb	r2, [r7, #22]
 8012ea4:	68fb      	ldr	r3, [r7, #12]
 8012ea6:	32ae      	adds	r2, #174	@ 0xae
 8012ea8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012eac:	691b      	ldr	r3, [r3, #16]
 8012eae:	2b00      	cmp	r3, #0
 8012eb0:	d00b      	beq.n	8012eca <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8012eb2:	7dba      	ldrb	r2, [r7, #22]
 8012eb4:	68fb      	ldr	r3, [r7, #12]
 8012eb6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8012eba:	7dba      	ldrb	r2, [r7, #22]
 8012ebc:	68fb      	ldr	r3, [r7, #12]
 8012ebe:	32ae      	adds	r2, #174	@ 0xae
 8012ec0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012ec4:	691b      	ldr	r3, [r3, #16]
 8012ec6:	68f8      	ldr	r0, [r7, #12]
 8012ec8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8012eca:	68f8      	ldr	r0, [r7, #12]
 8012ecc:	f001 f984 	bl	80141d8 <USBD_CtlSendStatus>
 8012ed0:	e032      	b.n	8012f38 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8012ed2:	7afb      	ldrb	r3, [r7, #11]
 8012ed4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8012ed8:	b2db      	uxtb	r3, r3
 8012eda:	4619      	mov	r1, r3
 8012edc:	68f8      	ldr	r0, [r7, #12]
 8012ede:	f000 fa37 	bl	8013350 <USBD_CoreFindEP>
 8012ee2:	4603      	mov	r3, r0
 8012ee4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8012ee6:	7dbb      	ldrb	r3, [r7, #22]
 8012ee8:	2bff      	cmp	r3, #255	@ 0xff
 8012eea:	d025      	beq.n	8012f38 <USBD_LL_DataOutStage+0x15c>
 8012eec:	7dbb      	ldrb	r3, [r7, #22]
 8012eee:	2b00      	cmp	r3, #0
 8012ef0:	d122      	bne.n	8012f38 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012ef2:	68fb      	ldr	r3, [r7, #12]
 8012ef4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012ef8:	b2db      	uxtb	r3, r3
 8012efa:	2b03      	cmp	r3, #3
 8012efc:	d117      	bne.n	8012f2e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8012efe:	7dba      	ldrb	r2, [r7, #22]
 8012f00:	68fb      	ldr	r3, [r7, #12]
 8012f02:	32ae      	adds	r2, #174	@ 0xae
 8012f04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012f08:	699b      	ldr	r3, [r3, #24]
 8012f0a:	2b00      	cmp	r3, #0
 8012f0c:	d00f      	beq.n	8012f2e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8012f0e:	7dba      	ldrb	r2, [r7, #22]
 8012f10:	68fb      	ldr	r3, [r7, #12]
 8012f12:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8012f16:	7dba      	ldrb	r2, [r7, #22]
 8012f18:	68fb      	ldr	r3, [r7, #12]
 8012f1a:	32ae      	adds	r2, #174	@ 0xae
 8012f1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012f20:	699b      	ldr	r3, [r3, #24]
 8012f22:	7afa      	ldrb	r2, [r7, #11]
 8012f24:	4611      	mov	r1, r2
 8012f26:	68f8      	ldr	r0, [r7, #12]
 8012f28:	4798      	blx	r3
 8012f2a:	4603      	mov	r3, r0
 8012f2c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8012f2e:	7dfb      	ldrb	r3, [r7, #23]
 8012f30:	2b00      	cmp	r3, #0
 8012f32:	d001      	beq.n	8012f38 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8012f34:	7dfb      	ldrb	r3, [r7, #23]
 8012f36:	e000      	b.n	8012f3a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8012f38:	2300      	movs	r3, #0
}
 8012f3a:	4618      	mov	r0, r3
 8012f3c:	3718      	adds	r7, #24
 8012f3e:	46bd      	mov	sp, r7
 8012f40:	bd80      	pop	{r7, pc}

08012f42 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8012f42:	b580      	push	{r7, lr}
 8012f44:	b086      	sub	sp, #24
 8012f46:	af00      	add	r7, sp, #0
 8012f48:	60f8      	str	r0, [r7, #12]
 8012f4a:	460b      	mov	r3, r1
 8012f4c:	607a      	str	r2, [r7, #4]
 8012f4e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8012f50:	7afb      	ldrb	r3, [r7, #11]
 8012f52:	2b00      	cmp	r3, #0
 8012f54:	d16f      	bne.n	8013036 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8012f56:	68fb      	ldr	r3, [r7, #12]
 8012f58:	3314      	adds	r3, #20
 8012f5a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8012f5c:	68fb      	ldr	r3, [r7, #12]
 8012f5e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8012f62:	2b02      	cmp	r3, #2
 8012f64:	d15a      	bne.n	801301c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8012f66:	693b      	ldr	r3, [r7, #16]
 8012f68:	689a      	ldr	r2, [r3, #8]
 8012f6a:	693b      	ldr	r3, [r7, #16]
 8012f6c:	68db      	ldr	r3, [r3, #12]
 8012f6e:	429a      	cmp	r2, r3
 8012f70:	d914      	bls.n	8012f9c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8012f72:	693b      	ldr	r3, [r7, #16]
 8012f74:	689a      	ldr	r2, [r3, #8]
 8012f76:	693b      	ldr	r3, [r7, #16]
 8012f78:	68db      	ldr	r3, [r3, #12]
 8012f7a:	1ad2      	subs	r2, r2, r3
 8012f7c:	693b      	ldr	r3, [r7, #16]
 8012f7e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8012f80:	693b      	ldr	r3, [r7, #16]
 8012f82:	689b      	ldr	r3, [r3, #8]
 8012f84:	461a      	mov	r2, r3
 8012f86:	6879      	ldr	r1, [r7, #4]
 8012f88:	68f8      	ldr	r0, [r7, #12]
 8012f8a:	f001 f8e6 	bl	801415a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8012f8e:	2300      	movs	r3, #0
 8012f90:	2200      	movs	r2, #0
 8012f92:	2100      	movs	r1, #0
 8012f94:	68f8      	ldr	r0, [r7, #12]
 8012f96:	f001 fde9 	bl	8014b6c <USBD_LL_PrepareReceive>
 8012f9a:	e03f      	b.n	801301c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8012f9c:	693b      	ldr	r3, [r7, #16]
 8012f9e:	68da      	ldr	r2, [r3, #12]
 8012fa0:	693b      	ldr	r3, [r7, #16]
 8012fa2:	689b      	ldr	r3, [r3, #8]
 8012fa4:	429a      	cmp	r2, r3
 8012fa6:	d11c      	bne.n	8012fe2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8012fa8:	693b      	ldr	r3, [r7, #16]
 8012faa:	685a      	ldr	r2, [r3, #4]
 8012fac:	693b      	ldr	r3, [r7, #16]
 8012fae:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8012fb0:	429a      	cmp	r2, r3
 8012fb2:	d316      	bcc.n	8012fe2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8012fb4:	693b      	ldr	r3, [r7, #16]
 8012fb6:	685a      	ldr	r2, [r3, #4]
 8012fb8:	68fb      	ldr	r3, [r7, #12]
 8012fba:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8012fbe:	429a      	cmp	r2, r3
 8012fc0:	d20f      	bcs.n	8012fe2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8012fc2:	2200      	movs	r2, #0
 8012fc4:	2100      	movs	r1, #0
 8012fc6:	68f8      	ldr	r0, [r7, #12]
 8012fc8:	f001 f8c7 	bl	801415a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8012fcc:	68fb      	ldr	r3, [r7, #12]
 8012fce:	2200      	movs	r2, #0
 8012fd0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8012fd4:	2300      	movs	r3, #0
 8012fd6:	2200      	movs	r2, #0
 8012fd8:	2100      	movs	r1, #0
 8012fda:	68f8      	ldr	r0, [r7, #12]
 8012fdc:	f001 fdc6 	bl	8014b6c <USBD_LL_PrepareReceive>
 8012fe0:	e01c      	b.n	801301c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012fe2:	68fb      	ldr	r3, [r7, #12]
 8012fe4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012fe8:	b2db      	uxtb	r3, r3
 8012fea:	2b03      	cmp	r3, #3
 8012fec:	d10f      	bne.n	801300e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8012fee:	68fb      	ldr	r3, [r7, #12]
 8012ff0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012ff4:	68db      	ldr	r3, [r3, #12]
 8012ff6:	2b00      	cmp	r3, #0
 8012ff8:	d009      	beq.n	801300e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8012ffa:	68fb      	ldr	r3, [r7, #12]
 8012ffc:	2200      	movs	r2, #0
 8012ffe:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8013002:	68fb      	ldr	r3, [r7, #12]
 8013004:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013008:	68db      	ldr	r3, [r3, #12]
 801300a:	68f8      	ldr	r0, [r7, #12]
 801300c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 801300e:	2180      	movs	r1, #128	@ 0x80
 8013010:	68f8      	ldr	r0, [r7, #12]
 8013012:	f001 fd01 	bl	8014a18 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8013016:	68f8      	ldr	r0, [r7, #12]
 8013018:	f001 f8f1 	bl	80141fe <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 801301c:	68fb      	ldr	r3, [r7, #12]
 801301e:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8013022:	2b00      	cmp	r3, #0
 8013024:	d03a      	beq.n	801309c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8013026:	68f8      	ldr	r0, [r7, #12]
 8013028:	f7ff fe42 	bl	8012cb0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 801302c:	68fb      	ldr	r3, [r7, #12]
 801302e:	2200      	movs	r2, #0
 8013030:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8013034:	e032      	b.n	801309c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8013036:	7afb      	ldrb	r3, [r7, #11]
 8013038:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 801303c:	b2db      	uxtb	r3, r3
 801303e:	4619      	mov	r1, r3
 8013040:	68f8      	ldr	r0, [r7, #12]
 8013042:	f000 f985 	bl	8013350 <USBD_CoreFindEP>
 8013046:	4603      	mov	r3, r0
 8013048:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801304a:	7dfb      	ldrb	r3, [r7, #23]
 801304c:	2bff      	cmp	r3, #255	@ 0xff
 801304e:	d025      	beq.n	801309c <USBD_LL_DataInStage+0x15a>
 8013050:	7dfb      	ldrb	r3, [r7, #23]
 8013052:	2b00      	cmp	r3, #0
 8013054:	d122      	bne.n	801309c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013056:	68fb      	ldr	r3, [r7, #12]
 8013058:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801305c:	b2db      	uxtb	r3, r3
 801305e:	2b03      	cmp	r3, #3
 8013060:	d11c      	bne.n	801309c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8013062:	7dfa      	ldrb	r2, [r7, #23]
 8013064:	68fb      	ldr	r3, [r7, #12]
 8013066:	32ae      	adds	r2, #174	@ 0xae
 8013068:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801306c:	695b      	ldr	r3, [r3, #20]
 801306e:	2b00      	cmp	r3, #0
 8013070:	d014      	beq.n	801309c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8013072:	7dfa      	ldrb	r2, [r7, #23]
 8013074:	68fb      	ldr	r3, [r7, #12]
 8013076:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 801307a:	7dfa      	ldrb	r2, [r7, #23]
 801307c:	68fb      	ldr	r3, [r7, #12]
 801307e:	32ae      	adds	r2, #174	@ 0xae
 8013080:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013084:	695b      	ldr	r3, [r3, #20]
 8013086:	7afa      	ldrb	r2, [r7, #11]
 8013088:	4611      	mov	r1, r2
 801308a:	68f8      	ldr	r0, [r7, #12]
 801308c:	4798      	blx	r3
 801308e:	4603      	mov	r3, r0
 8013090:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8013092:	7dbb      	ldrb	r3, [r7, #22]
 8013094:	2b00      	cmp	r3, #0
 8013096:	d001      	beq.n	801309c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8013098:	7dbb      	ldrb	r3, [r7, #22]
 801309a:	e000      	b.n	801309e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 801309c:	2300      	movs	r3, #0
}
 801309e:	4618      	mov	r0, r3
 80130a0:	3718      	adds	r7, #24
 80130a2:	46bd      	mov	sp, r7
 80130a4:	bd80      	pop	{r7, pc}

080130a6 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80130a6:	b580      	push	{r7, lr}
 80130a8:	b084      	sub	sp, #16
 80130aa:	af00      	add	r7, sp, #0
 80130ac:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80130ae:	2300      	movs	r3, #0
 80130b0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80130b2:	687b      	ldr	r3, [r7, #4]
 80130b4:	2201      	movs	r2, #1
 80130b6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80130ba:	687b      	ldr	r3, [r7, #4]
 80130bc:	2200      	movs	r2, #0
 80130be:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80130c2:	687b      	ldr	r3, [r7, #4]
 80130c4:	2200      	movs	r2, #0
 80130c6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80130c8:	687b      	ldr	r3, [r7, #4]
 80130ca:	2200      	movs	r2, #0
 80130cc:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 80130d0:	687b      	ldr	r3, [r7, #4]
 80130d2:	2200      	movs	r2, #0
 80130d4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80130d8:	687b      	ldr	r3, [r7, #4]
 80130da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80130de:	2b00      	cmp	r3, #0
 80130e0:	d014      	beq.n	801310c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80130e2:	687b      	ldr	r3, [r7, #4]
 80130e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80130e8:	685b      	ldr	r3, [r3, #4]
 80130ea:	2b00      	cmp	r3, #0
 80130ec:	d00e      	beq.n	801310c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80130ee:	687b      	ldr	r3, [r7, #4]
 80130f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80130f4:	685b      	ldr	r3, [r3, #4]
 80130f6:	687a      	ldr	r2, [r7, #4]
 80130f8:	6852      	ldr	r2, [r2, #4]
 80130fa:	b2d2      	uxtb	r2, r2
 80130fc:	4611      	mov	r1, r2
 80130fe:	6878      	ldr	r0, [r7, #4]
 8013100:	4798      	blx	r3
 8013102:	4603      	mov	r3, r0
 8013104:	2b00      	cmp	r3, #0
 8013106:	d001      	beq.n	801310c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8013108:	2303      	movs	r3, #3
 801310a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801310c:	2340      	movs	r3, #64	@ 0x40
 801310e:	2200      	movs	r2, #0
 8013110:	2100      	movs	r1, #0
 8013112:	6878      	ldr	r0, [r7, #4]
 8013114:	f001 fc3b 	bl	801498e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8013118:	687b      	ldr	r3, [r7, #4]
 801311a:	2201      	movs	r2, #1
 801311c:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8013120:	687b      	ldr	r3, [r7, #4]
 8013122:	2240      	movs	r2, #64	@ 0x40
 8013124:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8013128:	2340      	movs	r3, #64	@ 0x40
 801312a:	2200      	movs	r2, #0
 801312c:	2180      	movs	r1, #128	@ 0x80
 801312e:	6878      	ldr	r0, [r7, #4]
 8013130:	f001 fc2d 	bl	801498e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8013134:	687b      	ldr	r3, [r7, #4]
 8013136:	2201      	movs	r2, #1
 8013138:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 801313a:	687b      	ldr	r3, [r7, #4]
 801313c:	2240      	movs	r2, #64	@ 0x40
 801313e:	621a      	str	r2, [r3, #32]

  return ret;
 8013140:	7bfb      	ldrb	r3, [r7, #15]
}
 8013142:	4618      	mov	r0, r3
 8013144:	3710      	adds	r7, #16
 8013146:	46bd      	mov	sp, r7
 8013148:	bd80      	pop	{r7, pc}

0801314a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 801314a:	b480      	push	{r7}
 801314c:	b083      	sub	sp, #12
 801314e:	af00      	add	r7, sp, #0
 8013150:	6078      	str	r0, [r7, #4]
 8013152:	460b      	mov	r3, r1
 8013154:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8013156:	687b      	ldr	r3, [r7, #4]
 8013158:	78fa      	ldrb	r2, [r7, #3]
 801315a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 801315c:	2300      	movs	r3, #0
}
 801315e:	4618      	mov	r0, r3
 8013160:	370c      	adds	r7, #12
 8013162:	46bd      	mov	sp, r7
 8013164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013168:	4770      	bx	lr

0801316a <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 801316a:	b480      	push	{r7}
 801316c:	b083      	sub	sp, #12
 801316e:	af00      	add	r7, sp, #0
 8013170:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8013172:	687b      	ldr	r3, [r7, #4]
 8013174:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013178:	b2db      	uxtb	r3, r3
 801317a:	2b04      	cmp	r3, #4
 801317c:	d006      	beq.n	801318c <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 801317e:	687b      	ldr	r3, [r7, #4]
 8013180:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013184:	b2da      	uxtb	r2, r3
 8013186:	687b      	ldr	r3, [r7, #4]
 8013188:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 801318c:	687b      	ldr	r3, [r7, #4]
 801318e:	2204      	movs	r2, #4
 8013190:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8013194:	2300      	movs	r3, #0
}
 8013196:	4618      	mov	r0, r3
 8013198:	370c      	adds	r7, #12
 801319a:	46bd      	mov	sp, r7
 801319c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131a0:	4770      	bx	lr

080131a2 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80131a2:	b480      	push	{r7}
 80131a4:	b083      	sub	sp, #12
 80131a6:	af00      	add	r7, sp, #0
 80131a8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80131aa:	687b      	ldr	r3, [r7, #4]
 80131ac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80131b0:	b2db      	uxtb	r3, r3
 80131b2:	2b04      	cmp	r3, #4
 80131b4:	d106      	bne.n	80131c4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80131b6:	687b      	ldr	r3, [r7, #4]
 80131b8:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 80131bc:	b2da      	uxtb	r2, r3
 80131be:	687b      	ldr	r3, [r7, #4]
 80131c0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80131c4:	2300      	movs	r3, #0
}
 80131c6:	4618      	mov	r0, r3
 80131c8:	370c      	adds	r7, #12
 80131ca:	46bd      	mov	sp, r7
 80131cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131d0:	4770      	bx	lr

080131d2 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80131d2:	b580      	push	{r7, lr}
 80131d4:	b082      	sub	sp, #8
 80131d6:	af00      	add	r7, sp, #0
 80131d8:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80131da:	687b      	ldr	r3, [r7, #4]
 80131dc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80131e0:	b2db      	uxtb	r3, r3
 80131e2:	2b03      	cmp	r3, #3
 80131e4:	d110      	bne.n	8013208 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80131e6:	687b      	ldr	r3, [r7, #4]
 80131e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80131ec:	2b00      	cmp	r3, #0
 80131ee:	d00b      	beq.n	8013208 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80131f0:	687b      	ldr	r3, [r7, #4]
 80131f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80131f6:	69db      	ldr	r3, [r3, #28]
 80131f8:	2b00      	cmp	r3, #0
 80131fa:	d005      	beq.n	8013208 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80131fc:	687b      	ldr	r3, [r7, #4]
 80131fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013202:	69db      	ldr	r3, [r3, #28]
 8013204:	6878      	ldr	r0, [r7, #4]
 8013206:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8013208:	2300      	movs	r3, #0
}
 801320a:	4618      	mov	r0, r3
 801320c:	3708      	adds	r7, #8
 801320e:	46bd      	mov	sp, r7
 8013210:	bd80      	pop	{r7, pc}

08013212 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8013212:	b580      	push	{r7, lr}
 8013214:	b082      	sub	sp, #8
 8013216:	af00      	add	r7, sp, #0
 8013218:	6078      	str	r0, [r7, #4]
 801321a:	460b      	mov	r3, r1
 801321c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 801321e:	687b      	ldr	r3, [r7, #4]
 8013220:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013224:	687b      	ldr	r3, [r7, #4]
 8013226:	32ae      	adds	r2, #174	@ 0xae
 8013228:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801322c:	2b00      	cmp	r3, #0
 801322e:	d101      	bne.n	8013234 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8013230:	2303      	movs	r3, #3
 8013232:	e01c      	b.n	801326e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013234:	687b      	ldr	r3, [r7, #4]
 8013236:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801323a:	b2db      	uxtb	r3, r3
 801323c:	2b03      	cmp	r3, #3
 801323e:	d115      	bne.n	801326c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8013240:	687b      	ldr	r3, [r7, #4]
 8013242:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013246:	687b      	ldr	r3, [r7, #4]
 8013248:	32ae      	adds	r2, #174	@ 0xae
 801324a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801324e:	6a1b      	ldr	r3, [r3, #32]
 8013250:	2b00      	cmp	r3, #0
 8013252:	d00b      	beq.n	801326c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8013254:	687b      	ldr	r3, [r7, #4]
 8013256:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801325a:	687b      	ldr	r3, [r7, #4]
 801325c:	32ae      	adds	r2, #174	@ 0xae
 801325e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013262:	6a1b      	ldr	r3, [r3, #32]
 8013264:	78fa      	ldrb	r2, [r7, #3]
 8013266:	4611      	mov	r1, r2
 8013268:	6878      	ldr	r0, [r7, #4]
 801326a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801326c:	2300      	movs	r3, #0
}
 801326e:	4618      	mov	r0, r3
 8013270:	3708      	adds	r7, #8
 8013272:	46bd      	mov	sp, r7
 8013274:	bd80      	pop	{r7, pc}

08013276 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8013276:	b580      	push	{r7, lr}
 8013278:	b082      	sub	sp, #8
 801327a:	af00      	add	r7, sp, #0
 801327c:	6078      	str	r0, [r7, #4]
 801327e:	460b      	mov	r3, r1
 8013280:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8013282:	687b      	ldr	r3, [r7, #4]
 8013284:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013288:	687b      	ldr	r3, [r7, #4]
 801328a:	32ae      	adds	r2, #174	@ 0xae
 801328c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013290:	2b00      	cmp	r3, #0
 8013292:	d101      	bne.n	8013298 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8013294:	2303      	movs	r3, #3
 8013296:	e01c      	b.n	80132d2 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013298:	687b      	ldr	r3, [r7, #4]
 801329a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801329e:	b2db      	uxtb	r3, r3
 80132a0:	2b03      	cmp	r3, #3
 80132a2:	d115      	bne.n	80132d0 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80132a4:	687b      	ldr	r3, [r7, #4]
 80132a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80132aa:	687b      	ldr	r3, [r7, #4]
 80132ac:	32ae      	adds	r2, #174	@ 0xae
 80132ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80132b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80132b4:	2b00      	cmp	r3, #0
 80132b6:	d00b      	beq.n	80132d0 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80132b8:	687b      	ldr	r3, [r7, #4]
 80132ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80132be:	687b      	ldr	r3, [r7, #4]
 80132c0:	32ae      	adds	r2, #174	@ 0xae
 80132c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80132c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80132c8:	78fa      	ldrb	r2, [r7, #3]
 80132ca:	4611      	mov	r1, r2
 80132cc:	6878      	ldr	r0, [r7, #4]
 80132ce:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80132d0:	2300      	movs	r3, #0
}
 80132d2:	4618      	mov	r0, r3
 80132d4:	3708      	adds	r7, #8
 80132d6:	46bd      	mov	sp, r7
 80132d8:	bd80      	pop	{r7, pc}

080132da <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80132da:	b480      	push	{r7}
 80132dc:	b083      	sub	sp, #12
 80132de:	af00      	add	r7, sp, #0
 80132e0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80132e2:	2300      	movs	r3, #0
}
 80132e4:	4618      	mov	r0, r3
 80132e6:	370c      	adds	r7, #12
 80132e8:	46bd      	mov	sp, r7
 80132ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132ee:	4770      	bx	lr

080132f0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80132f0:	b580      	push	{r7, lr}
 80132f2:	b084      	sub	sp, #16
 80132f4:	af00      	add	r7, sp, #0
 80132f6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80132f8:	2300      	movs	r3, #0
 80132fa:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80132fc:	687b      	ldr	r3, [r7, #4]
 80132fe:	2201      	movs	r2, #1
 8013300:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8013304:	687b      	ldr	r3, [r7, #4]
 8013306:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801330a:	2b00      	cmp	r3, #0
 801330c:	d00e      	beq.n	801332c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 801330e:	687b      	ldr	r3, [r7, #4]
 8013310:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013314:	685b      	ldr	r3, [r3, #4]
 8013316:	687a      	ldr	r2, [r7, #4]
 8013318:	6852      	ldr	r2, [r2, #4]
 801331a:	b2d2      	uxtb	r2, r2
 801331c:	4611      	mov	r1, r2
 801331e:	6878      	ldr	r0, [r7, #4]
 8013320:	4798      	blx	r3
 8013322:	4603      	mov	r3, r0
 8013324:	2b00      	cmp	r3, #0
 8013326:	d001      	beq.n	801332c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8013328:	2303      	movs	r3, #3
 801332a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 801332c:	7bfb      	ldrb	r3, [r7, #15]
}
 801332e:	4618      	mov	r0, r3
 8013330:	3710      	adds	r7, #16
 8013332:	46bd      	mov	sp, r7
 8013334:	bd80      	pop	{r7, pc}

08013336 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8013336:	b480      	push	{r7}
 8013338:	b083      	sub	sp, #12
 801333a:	af00      	add	r7, sp, #0
 801333c:	6078      	str	r0, [r7, #4]
 801333e:	460b      	mov	r3, r1
 8013340:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8013342:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8013344:	4618      	mov	r0, r3
 8013346:	370c      	adds	r7, #12
 8013348:	46bd      	mov	sp, r7
 801334a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801334e:	4770      	bx	lr

08013350 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8013350:	b480      	push	{r7}
 8013352:	b083      	sub	sp, #12
 8013354:	af00      	add	r7, sp, #0
 8013356:	6078      	str	r0, [r7, #4]
 8013358:	460b      	mov	r3, r1
 801335a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 801335c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 801335e:	4618      	mov	r0, r3
 8013360:	370c      	adds	r7, #12
 8013362:	46bd      	mov	sp, r7
 8013364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013368:	4770      	bx	lr

0801336a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 801336a:	b580      	push	{r7, lr}
 801336c:	b086      	sub	sp, #24
 801336e:	af00      	add	r7, sp, #0
 8013370:	6078      	str	r0, [r7, #4]
 8013372:	460b      	mov	r3, r1
 8013374:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8013376:	687b      	ldr	r3, [r7, #4]
 8013378:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 801337a:	687b      	ldr	r3, [r7, #4]
 801337c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 801337e:	2300      	movs	r3, #0
 8013380:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8013382:	68fb      	ldr	r3, [r7, #12]
 8013384:	885b      	ldrh	r3, [r3, #2]
 8013386:	b29b      	uxth	r3, r3
 8013388:	68fa      	ldr	r2, [r7, #12]
 801338a:	7812      	ldrb	r2, [r2, #0]
 801338c:	4293      	cmp	r3, r2
 801338e:	d91f      	bls.n	80133d0 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8013390:	68fb      	ldr	r3, [r7, #12]
 8013392:	781b      	ldrb	r3, [r3, #0]
 8013394:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8013396:	e013      	b.n	80133c0 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8013398:	f107 030a 	add.w	r3, r7, #10
 801339c:	4619      	mov	r1, r3
 801339e:	6978      	ldr	r0, [r7, #20]
 80133a0:	f000 f81b 	bl	80133da <USBD_GetNextDesc>
 80133a4:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80133a6:	697b      	ldr	r3, [r7, #20]
 80133a8:	785b      	ldrb	r3, [r3, #1]
 80133aa:	2b05      	cmp	r3, #5
 80133ac:	d108      	bne.n	80133c0 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80133ae:	697b      	ldr	r3, [r7, #20]
 80133b0:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80133b2:	693b      	ldr	r3, [r7, #16]
 80133b4:	789b      	ldrb	r3, [r3, #2]
 80133b6:	78fa      	ldrb	r2, [r7, #3]
 80133b8:	429a      	cmp	r2, r3
 80133ba:	d008      	beq.n	80133ce <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80133bc:	2300      	movs	r3, #0
 80133be:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80133c0:	68fb      	ldr	r3, [r7, #12]
 80133c2:	885b      	ldrh	r3, [r3, #2]
 80133c4:	b29a      	uxth	r2, r3
 80133c6:	897b      	ldrh	r3, [r7, #10]
 80133c8:	429a      	cmp	r2, r3
 80133ca:	d8e5      	bhi.n	8013398 <USBD_GetEpDesc+0x2e>
 80133cc:	e000      	b.n	80133d0 <USBD_GetEpDesc+0x66>
          break;
 80133ce:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80133d0:	693b      	ldr	r3, [r7, #16]
}
 80133d2:	4618      	mov	r0, r3
 80133d4:	3718      	adds	r7, #24
 80133d6:	46bd      	mov	sp, r7
 80133d8:	bd80      	pop	{r7, pc}

080133da <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80133da:	b480      	push	{r7}
 80133dc:	b085      	sub	sp, #20
 80133de:	af00      	add	r7, sp, #0
 80133e0:	6078      	str	r0, [r7, #4]
 80133e2:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80133e4:	687b      	ldr	r3, [r7, #4]
 80133e6:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80133e8:	683b      	ldr	r3, [r7, #0]
 80133ea:	881b      	ldrh	r3, [r3, #0]
 80133ec:	68fa      	ldr	r2, [r7, #12]
 80133ee:	7812      	ldrb	r2, [r2, #0]
 80133f0:	4413      	add	r3, r2
 80133f2:	b29a      	uxth	r2, r3
 80133f4:	683b      	ldr	r3, [r7, #0]
 80133f6:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80133f8:	68fb      	ldr	r3, [r7, #12]
 80133fa:	781b      	ldrb	r3, [r3, #0]
 80133fc:	461a      	mov	r2, r3
 80133fe:	687b      	ldr	r3, [r7, #4]
 8013400:	4413      	add	r3, r2
 8013402:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8013404:	68fb      	ldr	r3, [r7, #12]
}
 8013406:	4618      	mov	r0, r3
 8013408:	3714      	adds	r7, #20
 801340a:	46bd      	mov	sp, r7
 801340c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013410:	4770      	bx	lr

08013412 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8013412:	b480      	push	{r7}
 8013414:	b087      	sub	sp, #28
 8013416:	af00      	add	r7, sp, #0
 8013418:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 801341a:	687b      	ldr	r3, [r7, #4]
 801341c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 801341e:	697b      	ldr	r3, [r7, #20]
 8013420:	781b      	ldrb	r3, [r3, #0]
 8013422:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8013424:	697b      	ldr	r3, [r7, #20]
 8013426:	3301      	adds	r3, #1
 8013428:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 801342a:	697b      	ldr	r3, [r7, #20]
 801342c:	781b      	ldrb	r3, [r3, #0]
 801342e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8013430:	8a3b      	ldrh	r3, [r7, #16]
 8013432:	021b      	lsls	r3, r3, #8
 8013434:	b21a      	sxth	r2, r3
 8013436:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801343a:	4313      	orrs	r3, r2
 801343c:	b21b      	sxth	r3, r3
 801343e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8013440:	89fb      	ldrh	r3, [r7, #14]
}
 8013442:	4618      	mov	r0, r3
 8013444:	371c      	adds	r7, #28
 8013446:	46bd      	mov	sp, r7
 8013448:	f85d 7b04 	ldr.w	r7, [sp], #4
 801344c:	4770      	bx	lr
	...

08013450 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013450:	b580      	push	{r7, lr}
 8013452:	b084      	sub	sp, #16
 8013454:	af00      	add	r7, sp, #0
 8013456:	6078      	str	r0, [r7, #4]
 8013458:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801345a:	2300      	movs	r3, #0
 801345c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801345e:	683b      	ldr	r3, [r7, #0]
 8013460:	781b      	ldrb	r3, [r3, #0]
 8013462:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8013466:	2b40      	cmp	r3, #64	@ 0x40
 8013468:	d005      	beq.n	8013476 <USBD_StdDevReq+0x26>
 801346a:	2b40      	cmp	r3, #64	@ 0x40
 801346c:	d857      	bhi.n	801351e <USBD_StdDevReq+0xce>
 801346e:	2b00      	cmp	r3, #0
 8013470:	d00f      	beq.n	8013492 <USBD_StdDevReq+0x42>
 8013472:	2b20      	cmp	r3, #32
 8013474:	d153      	bne.n	801351e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8013476:	687b      	ldr	r3, [r7, #4]
 8013478:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801347c:	687b      	ldr	r3, [r7, #4]
 801347e:	32ae      	adds	r2, #174	@ 0xae
 8013480:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013484:	689b      	ldr	r3, [r3, #8]
 8013486:	6839      	ldr	r1, [r7, #0]
 8013488:	6878      	ldr	r0, [r7, #4]
 801348a:	4798      	blx	r3
 801348c:	4603      	mov	r3, r0
 801348e:	73fb      	strb	r3, [r7, #15]
      break;
 8013490:	e04a      	b.n	8013528 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8013492:	683b      	ldr	r3, [r7, #0]
 8013494:	785b      	ldrb	r3, [r3, #1]
 8013496:	2b09      	cmp	r3, #9
 8013498:	d83b      	bhi.n	8013512 <USBD_StdDevReq+0xc2>
 801349a:	a201      	add	r2, pc, #4	@ (adr r2, 80134a0 <USBD_StdDevReq+0x50>)
 801349c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80134a0:	080134f5 	.word	0x080134f5
 80134a4:	08013509 	.word	0x08013509
 80134a8:	08013513 	.word	0x08013513
 80134ac:	080134ff 	.word	0x080134ff
 80134b0:	08013513 	.word	0x08013513
 80134b4:	080134d3 	.word	0x080134d3
 80134b8:	080134c9 	.word	0x080134c9
 80134bc:	08013513 	.word	0x08013513
 80134c0:	080134eb 	.word	0x080134eb
 80134c4:	080134dd 	.word	0x080134dd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80134c8:	6839      	ldr	r1, [r7, #0]
 80134ca:	6878      	ldr	r0, [r7, #4]
 80134cc:	f000 fa3c 	bl	8013948 <USBD_GetDescriptor>
          break;
 80134d0:	e024      	b.n	801351c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80134d2:	6839      	ldr	r1, [r7, #0]
 80134d4:	6878      	ldr	r0, [r7, #4]
 80134d6:	f000 fbcb 	bl	8013c70 <USBD_SetAddress>
          break;
 80134da:	e01f      	b.n	801351c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80134dc:	6839      	ldr	r1, [r7, #0]
 80134de:	6878      	ldr	r0, [r7, #4]
 80134e0:	f000 fc0a 	bl	8013cf8 <USBD_SetConfig>
 80134e4:	4603      	mov	r3, r0
 80134e6:	73fb      	strb	r3, [r7, #15]
          break;
 80134e8:	e018      	b.n	801351c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80134ea:	6839      	ldr	r1, [r7, #0]
 80134ec:	6878      	ldr	r0, [r7, #4]
 80134ee:	f000 fcad 	bl	8013e4c <USBD_GetConfig>
          break;
 80134f2:	e013      	b.n	801351c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80134f4:	6839      	ldr	r1, [r7, #0]
 80134f6:	6878      	ldr	r0, [r7, #4]
 80134f8:	f000 fcde 	bl	8013eb8 <USBD_GetStatus>
          break;
 80134fc:	e00e      	b.n	801351c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80134fe:	6839      	ldr	r1, [r7, #0]
 8013500:	6878      	ldr	r0, [r7, #4]
 8013502:	f000 fd0d 	bl	8013f20 <USBD_SetFeature>
          break;
 8013506:	e009      	b.n	801351c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8013508:	6839      	ldr	r1, [r7, #0]
 801350a:	6878      	ldr	r0, [r7, #4]
 801350c:	f000 fd31 	bl	8013f72 <USBD_ClrFeature>
          break;
 8013510:	e004      	b.n	801351c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8013512:	6839      	ldr	r1, [r7, #0]
 8013514:	6878      	ldr	r0, [r7, #4]
 8013516:	f000 fd88 	bl	801402a <USBD_CtlError>
          break;
 801351a:	bf00      	nop
      }
      break;
 801351c:	e004      	b.n	8013528 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 801351e:	6839      	ldr	r1, [r7, #0]
 8013520:	6878      	ldr	r0, [r7, #4]
 8013522:	f000 fd82 	bl	801402a <USBD_CtlError>
      break;
 8013526:	bf00      	nop
  }

  return ret;
 8013528:	7bfb      	ldrb	r3, [r7, #15]
}
 801352a:	4618      	mov	r0, r3
 801352c:	3710      	adds	r7, #16
 801352e:	46bd      	mov	sp, r7
 8013530:	bd80      	pop	{r7, pc}
 8013532:	bf00      	nop

08013534 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013534:	b580      	push	{r7, lr}
 8013536:	b084      	sub	sp, #16
 8013538:	af00      	add	r7, sp, #0
 801353a:	6078      	str	r0, [r7, #4]
 801353c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801353e:	2300      	movs	r3, #0
 8013540:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8013542:	683b      	ldr	r3, [r7, #0]
 8013544:	781b      	ldrb	r3, [r3, #0]
 8013546:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801354a:	2b40      	cmp	r3, #64	@ 0x40
 801354c:	d005      	beq.n	801355a <USBD_StdItfReq+0x26>
 801354e:	2b40      	cmp	r3, #64	@ 0x40
 8013550:	d852      	bhi.n	80135f8 <USBD_StdItfReq+0xc4>
 8013552:	2b00      	cmp	r3, #0
 8013554:	d001      	beq.n	801355a <USBD_StdItfReq+0x26>
 8013556:	2b20      	cmp	r3, #32
 8013558:	d14e      	bne.n	80135f8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 801355a:	687b      	ldr	r3, [r7, #4]
 801355c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013560:	b2db      	uxtb	r3, r3
 8013562:	3b01      	subs	r3, #1
 8013564:	2b02      	cmp	r3, #2
 8013566:	d840      	bhi.n	80135ea <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8013568:	683b      	ldr	r3, [r7, #0]
 801356a:	889b      	ldrh	r3, [r3, #4]
 801356c:	b2db      	uxtb	r3, r3
 801356e:	2b01      	cmp	r3, #1
 8013570:	d836      	bhi.n	80135e0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8013572:	683b      	ldr	r3, [r7, #0]
 8013574:	889b      	ldrh	r3, [r3, #4]
 8013576:	b2db      	uxtb	r3, r3
 8013578:	4619      	mov	r1, r3
 801357a:	6878      	ldr	r0, [r7, #4]
 801357c:	f7ff fedb 	bl	8013336 <USBD_CoreFindIF>
 8013580:	4603      	mov	r3, r0
 8013582:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8013584:	7bbb      	ldrb	r3, [r7, #14]
 8013586:	2bff      	cmp	r3, #255	@ 0xff
 8013588:	d01d      	beq.n	80135c6 <USBD_StdItfReq+0x92>
 801358a:	7bbb      	ldrb	r3, [r7, #14]
 801358c:	2b00      	cmp	r3, #0
 801358e:	d11a      	bne.n	80135c6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8013590:	7bba      	ldrb	r2, [r7, #14]
 8013592:	687b      	ldr	r3, [r7, #4]
 8013594:	32ae      	adds	r2, #174	@ 0xae
 8013596:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801359a:	689b      	ldr	r3, [r3, #8]
 801359c:	2b00      	cmp	r3, #0
 801359e:	d00f      	beq.n	80135c0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80135a0:	7bba      	ldrb	r2, [r7, #14]
 80135a2:	687b      	ldr	r3, [r7, #4]
 80135a4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80135a8:	7bba      	ldrb	r2, [r7, #14]
 80135aa:	687b      	ldr	r3, [r7, #4]
 80135ac:	32ae      	adds	r2, #174	@ 0xae
 80135ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80135b2:	689b      	ldr	r3, [r3, #8]
 80135b4:	6839      	ldr	r1, [r7, #0]
 80135b6:	6878      	ldr	r0, [r7, #4]
 80135b8:	4798      	blx	r3
 80135ba:	4603      	mov	r3, r0
 80135bc:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80135be:	e004      	b.n	80135ca <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80135c0:	2303      	movs	r3, #3
 80135c2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80135c4:	e001      	b.n	80135ca <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80135c6:	2303      	movs	r3, #3
 80135c8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80135ca:	683b      	ldr	r3, [r7, #0]
 80135cc:	88db      	ldrh	r3, [r3, #6]
 80135ce:	2b00      	cmp	r3, #0
 80135d0:	d110      	bne.n	80135f4 <USBD_StdItfReq+0xc0>
 80135d2:	7bfb      	ldrb	r3, [r7, #15]
 80135d4:	2b00      	cmp	r3, #0
 80135d6:	d10d      	bne.n	80135f4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80135d8:	6878      	ldr	r0, [r7, #4]
 80135da:	f000 fdfd 	bl	80141d8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80135de:	e009      	b.n	80135f4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80135e0:	6839      	ldr	r1, [r7, #0]
 80135e2:	6878      	ldr	r0, [r7, #4]
 80135e4:	f000 fd21 	bl	801402a <USBD_CtlError>
          break;
 80135e8:	e004      	b.n	80135f4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80135ea:	6839      	ldr	r1, [r7, #0]
 80135ec:	6878      	ldr	r0, [r7, #4]
 80135ee:	f000 fd1c 	bl	801402a <USBD_CtlError>
          break;
 80135f2:	e000      	b.n	80135f6 <USBD_StdItfReq+0xc2>
          break;
 80135f4:	bf00      	nop
      }
      break;
 80135f6:	e004      	b.n	8013602 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80135f8:	6839      	ldr	r1, [r7, #0]
 80135fa:	6878      	ldr	r0, [r7, #4]
 80135fc:	f000 fd15 	bl	801402a <USBD_CtlError>
      break;
 8013600:	bf00      	nop
  }

  return ret;
 8013602:	7bfb      	ldrb	r3, [r7, #15]
}
 8013604:	4618      	mov	r0, r3
 8013606:	3710      	adds	r7, #16
 8013608:	46bd      	mov	sp, r7
 801360a:	bd80      	pop	{r7, pc}

0801360c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801360c:	b580      	push	{r7, lr}
 801360e:	b084      	sub	sp, #16
 8013610:	af00      	add	r7, sp, #0
 8013612:	6078      	str	r0, [r7, #4]
 8013614:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8013616:	2300      	movs	r3, #0
 8013618:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 801361a:	683b      	ldr	r3, [r7, #0]
 801361c:	889b      	ldrh	r3, [r3, #4]
 801361e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8013620:	683b      	ldr	r3, [r7, #0]
 8013622:	781b      	ldrb	r3, [r3, #0]
 8013624:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8013628:	2b40      	cmp	r3, #64	@ 0x40
 801362a:	d007      	beq.n	801363c <USBD_StdEPReq+0x30>
 801362c:	2b40      	cmp	r3, #64	@ 0x40
 801362e:	f200 817f 	bhi.w	8013930 <USBD_StdEPReq+0x324>
 8013632:	2b00      	cmp	r3, #0
 8013634:	d02a      	beq.n	801368c <USBD_StdEPReq+0x80>
 8013636:	2b20      	cmp	r3, #32
 8013638:	f040 817a 	bne.w	8013930 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 801363c:	7bbb      	ldrb	r3, [r7, #14]
 801363e:	4619      	mov	r1, r3
 8013640:	6878      	ldr	r0, [r7, #4]
 8013642:	f7ff fe85 	bl	8013350 <USBD_CoreFindEP>
 8013646:	4603      	mov	r3, r0
 8013648:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801364a:	7b7b      	ldrb	r3, [r7, #13]
 801364c:	2bff      	cmp	r3, #255	@ 0xff
 801364e:	f000 8174 	beq.w	801393a <USBD_StdEPReq+0x32e>
 8013652:	7b7b      	ldrb	r3, [r7, #13]
 8013654:	2b00      	cmp	r3, #0
 8013656:	f040 8170 	bne.w	801393a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 801365a:	7b7a      	ldrb	r2, [r7, #13]
 801365c:	687b      	ldr	r3, [r7, #4]
 801365e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8013662:	7b7a      	ldrb	r2, [r7, #13]
 8013664:	687b      	ldr	r3, [r7, #4]
 8013666:	32ae      	adds	r2, #174	@ 0xae
 8013668:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801366c:	689b      	ldr	r3, [r3, #8]
 801366e:	2b00      	cmp	r3, #0
 8013670:	f000 8163 	beq.w	801393a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8013674:	7b7a      	ldrb	r2, [r7, #13]
 8013676:	687b      	ldr	r3, [r7, #4]
 8013678:	32ae      	adds	r2, #174	@ 0xae
 801367a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801367e:	689b      	ldr	r3, [r3, #8]
 8013680:	6839      	ldr	r1, [r7, #0]
 8013682:	6878      	ldr	r0, [r7, #4]
 8013684:	4798      	blx	r3
 8013686:	4603      	mov	r3, r0
 8013688:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 801368a:	e156      	b.n	801393a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801368c:	683b      	ldr	r3, [r7, #0]
 801368e:	785b      	ldrb	r3, [r3, #1]
 8013690:	2b03      	cmp	r3, #3
 8013692:	d008      	beq.n	80136a6 <USBD_StdEPReq+0x9a>
 8013694:	2b03      	cmp	r3, #3
 8013696:	f300 8145 	bgt.w	8013924 <USBD_StdEPReq+0x318>
 801369a:	2b00      	cmp	r3, #0
 801369c:	f000 809b 	beq.w	80137d6 <USBD_StdEPReq+0x1ca>
 80136a0:	2b01      	cmp	r3, #1
 80136a2:	d03c      	beq.n	801371e <USBD_StdEPReq+0x112>
 80136a4:	e13e      	b.n	8013924 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80136a6:	687b      	ldr	r3, [r7, #4]
 80136a8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80136ac:	b2db      	uxtb	r3, r3
 80136ae:	2b02      	cmp	r3, #2
 80136b0:	d002      	beq.n	80136b8 <USBD_StdEPReq+0xac>
 80136b2:	2b03      	cmp	r3, #3
 80136b4:	d016      	beq.n	80136e4 <USBD_StdEPReq+0xd8>
 80136b6:	e02c      	b.n	8013712 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80136b8:	7bbb      	ldrb	r3, [r7, #14]
 80136ba:	2b00      	cmp	r3, #0
 80136bc:	d00d      	beq.n	80136da <USBD_StdEPReq+0xce>
 80136be:	7bbb      	ldrb	r3, [r7, #14]
 80136c0:	2b80      	cmp	r3, #128	@ 0x80
 80136c2:	d00a      	beq.n	80136da <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80136c4:	7bbb      	ldrb	r3, [r7, #14]
 80136c6:	4619      	mov	r1, r3
 80136c8:	6878      	ldr	r0, [r7, #4]
 80136ca:	f001 f9a5 	bl	8014a18 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80136ce:	2180      	movs	r1, #128	@ 0x80
 80136d0:	6878      	ldr	r0, [r7, #4]
 80136d2:	f001 f9a1 	bl	8014a18 <USBD_LL_StallEP>
 80136d6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80136d8:	e020      	b.n	801371c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80136da:	6839      	ldr	r1, [r7, #0]
 80136dc:	6878      	ldr	r0, [r7, #4]
 80136de:	f000 fca4 	bl	801402a <USBD_CtlError>
              break;
 80136e2:	e01b      	b.n	801371c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80136e4:	683b      	ldr	r3, [r7, #0]
 80136e6:	885b      	ldrh	r3, [r3, #2]
 80136e8:	2b00      	cmp	r3, #0
 80136ea:	d10e      	bne.n	801370a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80136ec:	7bbb      	ldrb	r3, [r7, #14]
 80136ee:	2b00      	cmp	r3, #0
 80136f0:	d00b      	beq.n	801370a <USBD_StdEPReq+0xfe>
 80136f2:	7bbb      	ldrb	r3, [r7, #14]
 80136f4:	2b80      	cmp	r3, #128	@ 0x80
 80136f6:	d008      	beq.n	801370a <USBD_StdEPReq+0xfe>
 80136f8:	683b      	ldr	r3, [r7, #0]
 80136fa:	88db      	ldrh	r3, [r3, #6]
 80136fc:	2b00      	cmp	r3, #0
 80136fe:	d104      	bne.n	801370a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8013700:	7bbb      	ldrb	r3, [r7, #14]
 8013702:	4619      	mov	r1, r3
 8013704:	6878      	ldr	r0, [r7, #4]
 8013706:	f001 f987 	bl	8014a18 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 801370a:	6878      	ldr	r0, [r7, #4]
 801370c:	f000 fd64 	bl	80141d8 <USBD_CtlSendStatus>

              break;
 8013710:	e004      	b.n	801371c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8013712:	6839      	ldr	r1, [r7, #0]
 8013714:	6878      	ldr	r0, [r7, #4]
 8013716:	f000 fc88 	bl	801402a <USBD_CtlError>
              break;
 801371a:	bf00      	nop
          }
          break;
 801371c:	e107      	b.n	801392e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 801371e:	687b      	ldr	r3, [r7, #4]
 8013720:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013724:	b2db      	uxtb	r3, r3
 8013726:	2b02      	cmp	r3, #2
 8013728:	d002      	beq.n	8013730 <USBD_StdEPReq+0x124>
 801372a:	2b03      	cmp	r3, #3
 801372c:	d016      	beq.n	801375c <USBD_StdEPReq+0x150>
 801372e:	e04b      	b.n	80137c8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8013730:	7bbb      	ldrb	r3, [r7, #14]
 8013732:	2b00      	cmp	r3, #0
 8013734:	d00d      	beq.n	8013752 <USBD_StdEPReq+0x146>
 8013736:	7bbb      	ldrb	r3, [r7, #14]
 8013738:	2b80      	cmp	r3, #128	@ 0x80
 801373a:	d00a      	beq.n	8013752 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 801373c:	7bbb      	ldrb	r3, [r7, #14]
 801373e:	4619      	mov	r1, r3
 8013740:	6878      	ldr	r0, [r7, #4]
 8013742:	f001 f969 	bl	8014a18 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8013746:	2180      	movs	r1, #128	@ 0x80
 8013748:	6878      	ldr	r0, [r7, #4]
 801374a:	f001 f965 	bl	8014a18 <USBD_LL_StallEP>
 801374e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8013750:	e040      	b.n	80137d4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8013752:	6839      	ldr	r1, [r7, #0]
 8013754:	6878      	ldr	r0, [r7, #4]
 8013756:	f000 fc68 	bl	801402a <USBD_CtlError>
              break;
 801375a:	e03b      	b.n	80137d4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801375c:	683b      	ldr	r3, [r7, #0]
 801375e:	885b      	ldrh	r3, [r3, #2]
 8013760:	2b00      	cmp	r3, #0
 8013762:	d136      	bne.n	80137d2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8013764:	7bbb      	ldrb	r3, [r7, #14]
 8013766:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801376a:	2b00      	cmp	r3, #0
 801376c:	d004      	beq.n	8013778 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 801376e:	7bbb      	ldrb	r3, [r7, #14]
 8013770:	4619      	mov	r1, r3
 8013772:	6878      	ldr	r0, [r7, #4]
 8013774:	f001 f96f 	bl	8014a56 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8013778:	6878      	ldr	r0, [r7, #4]
 801377a:	f000 fd2d 	bl	80141d8 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 801377e:	7bbb      	ldrb	r3, [r7, #14]
 8013780:	4619      	mov	r1, r3
 8013782:	6878      	ldr	r0, [r7, #4]
 8013784:	f7ff fde4 	bl	8013350 <USBD_CoreFindEP>
 8013788:	4603      	mov	r3, r0
 801378a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801378c:	7b7b      	ldrb	r3, [r7, #13]
 801378e:	2bff      	cmp	r3, #255	@ 0xff
 8013790:	d01f      	beq.n	80137d2 <USBD_StdEPReq+0x1c6>
 8013792:	7b7b      	ldrb	r3, [r7, #13]
 8013794:	2b00      	cmp	r3, #0
 8013796:	d11c      	bne.n	80137d2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8013798:	7b7a      	ldrb	r2, [r7, #13]
 801379a:	687b      	ldr	r3, [r7, #4]
 801379c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80137a0:	7b7a      	ldrb	r2, [r7, #13]
 80137a2:	687b      	ldr	r3, [r7, #4]
 80137a4:	32ae      	adds	r2, #174	@ 0xae
 80137a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80137aa:	689b      	ldr	r3, [r3, #8]
 80137ac:	2b00      	cmp	r3, #0
 80137ae:	d010      	beq.n	80137d2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80137b0:	7b7a      	ldrb	r2, [r7, #13]
 80137b2:	687b      	ldr	r3, [r7, #4]
 80137b4:	32ae      	adds	r2, #174	@ 0xae
 80137b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80137ba:	689b      	ldr	r3, [r3, #8]
 80137bc:	6839      	ldr	r1, [r7, #0]
 80137be:	6878      	ldr	r0, [r7, #4]
 80137c0:	4798      	blx	r3
 80137c2:	4603      	mov	r3, r0
 80137c4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80137c6:	e004      	b.n	80137d2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80137c8:	6839      	ldr	r1, [r7, #0]
 80137ca:	6878      	ldr	r0, [r7, #4]
 80137cc:	f000 fc2d 	bl	801402a <USBD_CtlError>
              break;
 80137d0:	e000      	b.n	80137d4 <USBD_StdEPReq+0x1c8>
              break;
 80137d2:	bf00      	nop
          }
          break;
 80137d4:	e0ab      	b.n	801392e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80137d6:	687b      	ldr	r3, [r7, #4]
 80137d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80137dc:	b2db      	uxtb	r3, r3
 80137de:	2b02      	cmp	r3, #2
 80137e0:	d002      	beq.n	80137e8 <USBD_StdEPReq+0x1dc>
 80137e2:	2b03      	cmp	r3, #3
 80137e4:	d032      	beq.n	801384c <USBD_StdEPReq+0x240>
 80137e6:	e097      	b.n	8013918 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80137e8:	7bbb      	ldrb	r3, [r7, #14]
 80137ea:	2b00      	cmp	r3, #0
 80137ec:	d007      	beq.n	80137fe <USBD_StdEPReq+0x1f2>
 80137ee:	7bbb      	ldrb	r3, [r7, #14]
 80137f0:	2b80      	cmp	r3, #128	@ 0x80
 80137f2:	d004      	beq.n	80137fe <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80137f4:	6839      	ldr	r1, [r7, #0]
 80137f6:	6878      	ldr	r0, [r7, #4]
 80137f8:	f000 fc17 	bl	801402a <USBD_CtlError>
                break;
 80137fc:	e091      	b.n	8013922 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80137fe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8013802:	2b00      	cmp	r3, #0
 8013804:	da0b      	bge.n	801381e <USBD_StdEPReq+0x212>
 8013806:	7bbb      	ldrb	r3, [r7, #14]
 8013808:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801380c:	4613      	mov	r3, r2
 801380e:	009b      	lsls	r3, r3, #2
 8013810:	4413      	add	r3, r2
 8013812:	009b      	lsls	r3, r3, #2
 8013814:	3310      	adds	r3, #16
 8013816:	687a      	ldr	r2, [r7, #4]
 8013818:	4413      	add	r3, r2
 801381a:	3304      	adds	r3, #4
 801381c:	e00b      	b.n	8013836 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801381e:	7bbb      	ldrb	r3, [r7, #14]
 8013820:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8013824:	4613      	mov	r3, r2
 8013826:	009b      	lsls	r3, r3, #2
 8013828:	4413      	add	r3, r2
 801382a:	009b      	lsls	r3, r3, #2
 801382c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8013830:	687a      	ldr	r2, [r7, #4]
 8013832:	4413      	add	r3, r2
 8013834:	3304      	adds	r3, #4
 8013836:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8013838:	68bb      	ldr	r3, [r7, #8]
 801383a:	2200      	movs	r2, #0
 801383c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801383e:	68bb      	ldr	r3, [r7, #8]
 8013840:	2202      	movs	r2, #2
 8013842:	4619      	mov	r1, r3
 8013844:	6878      	ldr	r0, [r7, #4]
 8013846:	f000 fc6d 	bl	8014124 <USBD_CtlSendData>
              break;
 801384a:	e06a      	b.n	8013922 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 801384c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8013850:	2b00      	cmp	r3, #0
 8013852:	da11      	bge.n	8013878 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8013854:	7bbb      	ldrb	r3, [r7, #14]
 8013856:	f003 020f 	and.w	r2, r3, #15
 801385a:	6879      	ldr	r1, [r7, #4]
 801385c:	4613      	mov	r3, r2
 801385e:	009b      	lsls	r3, r3, #2
 8013860:	4413      	add	r3, r2
 8013862:	009b      	lsls	r3, r3, #2
 8013864:	440b      	add	r3, r1
 8013866:	3324      	adds	r3, #36	@ 0x24
 8013868:	881b      	ldrh	r3, [r3, #0]
 801386a:	2b00      	cmp	r3, #0
 801386c:	d117      	bne.n	801389e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 801386e:	6839      	ldr	r1, [r7, #0]
 8013870:	6878      	ldr	r0, [r7, #4]
 8013872:	f000 fbda 	bl	801402a <USBD_CtlError>
                  break;
 8013876:	e054      	b.n	8013922 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8013878:	7bbb      	ldrb	r3, [r7, #14]
 801387a:	f003 020f 	and.w	r2, r3, #15
 801387e:	6879      	ldr	r1, [r7, #4]
 8013880:	4613      	mov	r3, r2
 8013882:	009b      	lsls	r3, r3, #2
 8013884:	4413      	add	r3, r2
 8013886:	009b      	lsls	r3, r3, #2
 8013888:	440b      	add	r3, r1
 801388a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 801388e:	881b      	ldrh	r3, [r3, #0]
 8013890:	2b00      	cmp	r3, #0
 8013892:	d104      	bne.n	801389e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8013894:	6839      	ldr	r1, [r7, #0]
 8013896:	6878      	ldr	r0, [r7, #4]
 8013898:	f000 fbc7 	bl	801402a <USBD_CtlError>
                  break;
 801389c:	e041      	b.n	8013922 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801389e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80138a2:	2b00      	cmp	r3, #0
 80138a4:	da0b      	bge.n	80138be <USBD_StdEPReq+0x2b2>
 80138a6:	7bbb      	ldrb	r3, [r7, #14]
 80138a8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80138ac:	4613      	mov	r3, r2
 80138ae:	009b      	lsls	r3, r3, #2
 80138b0:	4413      	add	r3, r2
 80138b2:	009b      	lsls	r3, r3, #2
 80138b4:	3310      	adds	r3, #16
 80138b6:	687a      	ldr	r2, [r7, #4]
 80138b8:	4413      	add	r3, r2
 80138ba:	3304      	adds	r3, #4
 80138bc:	e00b      	b.n	80138d6 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80138be:	7bbb      	ldrb	r3, [r7, #14]
 80138c0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80138c4:	4613      	mov	r3, r2
 80138c6:	009b      	lsls	r3, r3, #2
 80138c8:	4413      	add	r3, r2
 80138ca:	009b      	lsls	r3, r3, #2
 80138cc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80138d0:	687a      	ldr	r2, [r7, #4]
 80138d2:	4413      	add	r3, r2
 80138d4:	3304      	adds	r3, #4
 80138d6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80138d8:	7bbb      	ldrb	r3, [r7, #14]
 80138da:	2b00      	cmp	r3, #0
 80138dc:	d002      	beq.n	80138e4 <USBD_StdEPReq+0x2d8>
 80138de:	7bbb      	ldrb	r3, [r7, #14]
 80138e0:	2b80      	cmp	r3, #128	@ 0x80
 80138e2:	d103      	bne.n	80138ec <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80138e4:	68bb      	ldr	r3, [r7, #8]
 80138e6:	2200      	movs	r2, #0
 80138e8:	601a      	str	r2, [r3, #0]
 80138ea:	e00e      	b.n	801390a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80138ec:	7bbb      	ldrb	r3, [r7, #14]
 80138ee:	4619      	mov	r1, r3
 80138f0:	6878      	ldr	r0, [r7, #4]
 80138f2:	f001 f8cf 	bl	8014a94 <USBD_LL_IsStallEP>
 80138f6:	4603      	mov	r3, r0
 80138f8:	2b00      	cmp	r3, #0
 80138fa:	d003      	beq.n	8013904 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80138fc:	68bb      	ldr	r3, [r7, #8]
 80138fe:	2201      	movs	r2, #1
 8013900:	601a      	str	r2, [r3, #0]
 8013902:	e002      	b.n	801390a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8013904:	68bb      	ldr	r3, [r7, #8]
 8013906:	2200      	movs	r2, #0
 8013908:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801390a:	68bb      	ldr	r3, [r7, #8]
 801390c:	2202      	movs	r2, #2
 801390e:	4619      	mov	r1, r3
 8013910:	6878      	ldr	r0, [r7, #4]
 8013912:	f000 fc07 	bl	8014124 <USBD_CtlSendData>
              break;
 8013916:	e004      	b.n	8013922 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8013918:	6839      	ldr	r1, [r7, #0]
 801391a:	6878      	ldr	r0, [r7, #4]
 801391c:	f000 fb85 	bl	801402a <USBD_CtlError>
              break;
 8013920:	bf00      	nop
          }
          break;
 8013922:	e004      	b.n	801392e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8013924:	6839      	ldr	r1, [r7, #0]
 8013926:	6878      	ldr	r0, [r7, #4]
 8013928:	f000 fb7f 	bl	801402a <USBD_CtlError>
          break;
 801392c:	bf00      	nop
      }
      break;
 801392e:	e005      	b.n	801393c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8013930:	6839      	ldr	r1, [r7, #0]
 8013932:	6878      	ldr	r0, [r7, #4]
 8013934:	f000 fb79 	bl	801402a <USBD_CtlError>
      break;
 8013938:	e000      	b.n	801393c <USBD_StdEPReq+0x330>
      break;
 801393a:	bf00      	nop
  }

  return ret;
 801393c:	7bfb      	ldrb	r3, [r7, #15]
}
 801393e:	4618      	mov	r0, r3
 8013940:	3710      	adds	r7, #16
 8013942:	46bd      	mov	sp, r7
 8013944:	bd80      	pop	{r7, pc}
	...

08013948 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013948:	b580      	push	{r7, lr}
 801394a:	b084      	sub	sp, #16
 801394c:	af00      	add	r7, sp, #0
 801394e:	6078      	str	r0, [r7, #4]
 8013950:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8013952:	2300      	movs	r3, #0
 8013954:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8013956:	2300      	movs	r3, #0
 8013958:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 801395a:	2300      	movs	r3, #0
 801395c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 801395e:	683b      	ldr	r3, [r7, #0]
 8013960:	885b      	ldrh	r3, [r3, #2]
 8013962:	0a1b      	lsrs	r3, r3, #8
 8013964:	b29b      	uxth	r3, r3
 8013966:	3b01      	subs	r3, #1
 8013968:	2b0e      	cmp	r3, #14
 801396a:	f200 8152 	bhi.w	8013c12 <USBD_GetDescriptor+0x2ca>
 801396e:	a201      	add	r2, pc, #4	@ (adr r2, 8013974 <USBD_GetDescriptor+0x2c>)
 8013970:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013974:	080139e5 	.word	0x080139e5
 8013978:	080139fd 	.word	0x080139fd
 801397c:	08013a3d 	.word	0x08013a3d
 8013980:	08013c13 	.word	0x08013c13
 8013984:	08013c13 	.word	0x08013c13
 8013988:	08013bb3 	.word	0x08013bb3
 801398c:	08013bdf 	.word	0x08013bdf
 8013990:	08013c13 	.word	0x08013c13
 8013994:	08013c13 	.word	0x08013c13
 8013998:	08013c13 	.word	0x08013c13
 801399c:	08013c13 	.word	0x08013c13
 80139a0:	08013c13 	.word	0x08013c13
 80139a4:	08013c13 	.word	0x08013c13
 80139a8:	08013c13 	.word	0x08013c13
 80139ac:	080139b1 	.word	0x080139b1
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 80139b0:	687b      	ldr	r3, [r7, #4]
 80139b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80139b6:	69db      	ldr	r3, [r3, #28]
 80139b8:	2b00      	cmp	r3, #0
 80139ba:	d00b      	beq.n	80139d4 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80139bc:	687b      	ldr	r3, [r7, #4]
 80139be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80139c2:	69db      	ldr	r3, [r3, #28]
 80139c4:	687a      	ldr	r2, [r7, #4]
 80139c6:	7c12      	ldrb	r2, [r2, #16]
 80139c8:	f107 0108 	add.w	r1, r7, #8
 80139cc:	4610      	mov	r0, r2
 80139ce:	4798      	blx	r3
 80139d0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80139d2:	e126      	b.n	8013c22 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80139d4:	6839      	ldr	r1, [r7, #0]
 80139d6:	6878      	ldr	r0, [r7, #4]
 80139d8:	f000 fb27 	bl	801402a <USBD_CtlError>
        err++;
 80139dc:	7afb      	ldrb	r3, [r7, #11]
 80139de:	3301      	adds	r3, #1
 80139e0:	72fb      	strb	r3, [r7, #11]
      break;
 80139e2:	e11e      	b.n	8013c22 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80139e4:	687b      	ldr	r3, [r7, #4]
 80139e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80139ea:	681b      	ldr	r3, [r3, #0]
 80139ec:	687a      	ldr	r2, [r7, #4]
 80139ee:	7c12      	ldrb	r2, [r2, #16]
 80139f0:	f107 0108 	add.w	r1, r7, #8
 80139f4:	4610      	mov	r0, r2
 80139f6:	4798      	blx	r3
 80139f8:	60f8      	str	r0, [r7, #12]
      break;
 80139fa:	e112      	b.n	8013c22 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80139fc:	687b      	ldr	r3, [r7, #4]
 80139fe:	7c1b      	ldrb	r3, [r3, #16]
 8013a00:	2b00      	cmp	r3, #0
 8013a02:	d10d      	bne.n	8013a20 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8013a04:	687b      	ldr	r3, [r7, #4]
 8013a06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013a0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013a0c:	f107 0208 	add.w	r2, r7, #8
 8013a10:	4610      	mov	r0, r2
 8013a12:	4798      	blx	r3
 8013a14:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8013a16:	68fb      	ldr	r3, [r7, #12]
 8013a18:	3301      	adds	r3, #1
 8013a1a:	2202      	movs	r2, #2
 8013a1c:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8013a1e:	e100      	b.n	8013c22 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8013a20:	687b      	ldr	r3, [r7, #4]
 8013a22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013a26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013a28:	f107 0208 	add.w	r2, r7, #8
 8013a2c:	4610      	mov	r0, r2
 8013a2e:	4798      	blx	r3
 8013a30:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8013a32:	68fb      	ldr	r3, [r7, #12]
 8013a34:	3301      	adds	r3, #1
 8013a36:	2202      	movs	r2, #2
 8013a38:	701a      	strb	r2, [r3, #0]
      break;
 8013a3a:	e0f2      	b.n	8013c22 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8013a3c:	683b      	ldr	r3, [r7, #0]
 8013a3e:	885b      	ldrh	r3, [r3, #2]
 8013a40:	b2db      	uxtb	r3, r3
 8013a42:	2b05      	cmp	r3, #5
 8013a44:	f200 80ac 	bhi.w	8013ba0 <USBD_GetDescriptor+0x258>
 8013a48:	a201      	add	r2, pc, #4	@ (adr r2, 8013a50 <USBD_GetDescriptor+0x108>)
 8013a4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013a4e:	bf00      	nop
 8013a50:	08013a69 	.word	0x08013a69
 8013a54:	08013a9d 	.word	0x08013a9d
 8013a58:	08013ad1 	.word	0x08013ad1
 8013a5c:	08013b05 	.word	0x08013b05
 8013a60:	08013b39 	.word	0x08013b39
 8013a64:	08013b6d 	.word	0x08013b6d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8013a68:	687b      	ldr	r3, [r7, #4]
 8013a6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8013a6e:	685b      	ldr	r3, [r3, #4]
 8013a70:	2b00      	cmp	r3, #0
 8013a72:	d00b      	beq.n	8013a8c <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8013a74:	687b      	ldr	r3, [r7, #4]
 8013a76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8013a7a:	685b      	ldr	r3, [r3, #4]
 8013a7c:	687a      	ldr	r2, [r7, #4]
 8013a7e:	7c12      	ldrb	r2, [r2, #16]
 8013a80:	f107 0108 	add.w	r1, r7, #8
 8013a84:	4610      	mov	r0, r2
 8013a86:	4798      	blx	r3
 8013a88:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013a8a:	e091      	b.n	8013bb0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8013a8c:	6839      	ldr	r1, [r7, #0]
 8013a8e:	6878      	ldr	r0, [r7, #4]
 8013a90:	f000 facb 	bl	801402a <USBD_CtlError>
            err++;
 8013a94:	7afb      	ldrb	r3, [r7, #11]
 8013a96:	3301      	adds	r3, #1
 8013a98:	72fb      	strb	r3, [r7, #11]
          break;
 8013a9a:	e089      	b.n	8013bb0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8013a9c:	687b      	ldr	r3, [r7, #4]
 8013a9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8013aa2:	689b      	ldr	r3, [r3, #8]
 8013aa4:	2b00      	cmp	r3, #0
 8013aa6:	d00b      	beq.n	8013ac0 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8013aa8:	687b      	ldr	r3, [r7, #4]
 8013aaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8013aae:	689b      	ldr	r3, [r3, #8]
 8013ab0:	687a      	ldr	r2, [r7, #4]
 8013ab2:	7c12      	ldrb	r2, [r2, #16]
 8013ab4:	f107 0108 	add.w	r1, r7, #8
 8013ab8:	4610      	mov	r0, r2
 8013aba:	4798      	blx	r3
 8013abc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013abe:	e077      	b.n	8013bb0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8013ac0:	6839      	ldr	r1, [r7, #0]
 8013ac2:	6878      	ldr	r0, [r7, #4]
 8013ac4:	f000 fab1 	bl	801402a <USBD_CtlError>
            err++;
 8013ac8:	7afb      	ldrb	r3, [r7, #11]
 8013aca:	3301      	adds	r3, #1
 8013acc:	72fb      	strb	r3, [r7, #11]
          break;
 8013ace:	e06f      	b.n	8013bb0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8013ad0:	687b      	ldr	r3, [r7, #4]
 8013ad2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8013ad6:	68db      	ldr	r3, [r3, #12]
 8013ad8:	2b00      	cmp	r3, #0
 8013ada:	d00b      	beq.n	8013af4 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8013adc:	687b      	ldr	r3, [r7, #4]
 8013ade:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8013ae2:	68db      	ldr	r3, [r3, #12]
 8013ae4:	687a      	ldr	r2, [r7, #4]
 8013ae6:	7c12      	ldrb	r2, [r2, #16]
 8013ae8:	f107 0108 	add.w	r1, r7, #8
 8013aec:	4610      	mov	r0, r2
 8013aee:	4798      	blx	r3
 8013af0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013af2:	e05d      	b.n	8013bb0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8013af4:	6839      	ldr	r1, [r7, #0]
 8013af6:	6878      	ldr	r0, [r7, #4]
 8013af8:	f000 fa97 	bl	801402a <USBD_CtlError>
            err++;
 8013afc:	7afb      	ldrb	r3, [r7, #11]
 8013afe:	3301      	adds	r3, #1
 8013b00:	72fb      	strb	r3, [r7, #11]
          break;
 8013b02:	e055      	b.n	8013bb0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8013b04:	687b      	ldr	r3, [r7, #4]
 8013b06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8013b0a:	691b      	ldr	r3, [r3, #16]
 8013b0c:	2b00      	cmp	r3, #0
 8013b0e:	d00b      	beq.n	8013b28 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8013b10:	687b      	ldr	r3, [r7, #4]
 8013b12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8013b16:	691b      	ldr	r3, [r3, #16]
 8013b18:	687a      	ldr	r2, [r7, #4]
 8013b1a:	7c12      	ldrb	r2, [r2, #16]
 8013b1c:	f107 0108 	add.w	r1, r7, #8
 8013b20:	4610      	mov	r0, r2
 8013b22:	4798      	blx	r3
 8013b24:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013b26:	e043      	b.n	8013bb0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8013b28:	6839      	ldr	r1, [r7, #0]
 8013b2a:	6878      	ldr	r0, [r7, #4]
 8013b2c:	f000 fa7d 	bl	801402a <USBD_CtlError>
            err++;
 8013b30:	7afb      	ldrb	r3, [r7, #11]
 8013b32:	3301      	adds	r3, #1
 8013b34:	72fb      	strb	r3, [r7, #11]
          break;
 8013b36:	e03b      	b.n	8013bb0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8013b38:	687b      	ldr	r3, [r7, #4]
 8013b3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8013b3e:	695b      	ldr	r3, [r3, #20]
 8013b40:	2b00      	cmp	r3, #0
 8013b42:	d00b      	beq.n	8013b5c <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8013b44:	687b      	ldr	r3, [r7, #4]
 8013b46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8013b4a:	695b      	ldr	r3, [r3, #20]
 8013b4c:	687a      	ldr	r2, [r7, #4]
 8013b4e:	7c12      	ldrb	r2, [r2, #16]
 8013b50:	f107 0108 	add.w	r1, r7, #8
 8013b54:	4610      	mov	r0, r2
 8013b56:	4798      	blx	r3
 8013b58:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013b5a:	e029      	b.n	8013bb0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8013b5c:	6839      	ldr	r1, [r7, #0]
 8013b5e:	6878      	ldr	r0, [r7, #4]
 8013b60:	f000 fa63 	bl	801402a <USBD_CtlError>
            err++;
 8013b64:	7afb      	ldrb	r3, [r7, #11]
 8013b66:	3301      	adds	r3, #1
 8013b68:	72fb      	strb	r3, [r7, #11]
          break;
 8013b6a:	e021      	b.n	8013bb0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8013b6c:	687b      	ldr	r3, [r7, #4]
 8013b6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8013b72:	699b      	ldr	r3, [r3, #24]
 8013b74:	2b00      	cmp	r3, #0
 8013b76:	d00b      	beq.n	8013b90 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8013b78:	687b      	ldr	r3, [r7, #4]
 8013b7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8013b7e:	699b      	ldr	r3, [r3, #24]
 8013b80:	687a      	ldr	r2, [r7, #4]
 8013b82:	7c12      	ldrb	r2, [r2, #16]
 8013b84:	f107 0108 	add.w	r1, r7, #8
 8013b88:	4610      	mov	r0, r2
 8013b8a:	4798      	blx	r3
 8013b8c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013b8e:	e00f      	b.n	8013bb0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8013b90:	6839      	ldr	r1, [r7, #0]
 8013b92:	6878      	ldr	r0, [r7, #4]
 8013b94:	f000 fa49 	bl	801402a <USBD_CtlError>
            err++;
 8013b98:	7afb      	ldrb	r3, [r7, #11]
 8013b9a:	3301      	adds	r3, #1
 8013b9c:	72fb      	strb	r3, [r7, #11]
          break;
 8013b9e:	e007      	b.n	8013bb0 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8013ba0:	6839      	ldr	r1, [r7, #0]
 8013ba2:	6878      	ldr	r0, [r7, #4]
 8013ba4:	f000 fa41 	bl	801402a <USBD_CtlError>
          err++;
 8013ba8:	7afb      	ldrb	r3, [r7, #11]
 8013baa:	3301      	adds	r3, #1
 8013bac:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8013bae:	bf00      	nop
      }
      break;
 8013bb0:	e037      	b.n	8013c22 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013bb2:	687b      	ldr	r3, [r7, #4]
 8013bb4:	7c1b      	ldrb	r3, [r3, #16]
 8013bb6:	2b00      	cmp	r3, #0
 8013bb8:	d109      	bne.n	8013bce <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8013bba:	687b      	ldr	r3, [r7, #4]
 8013bbc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013bc0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013bc2:	f107 0208 	add.w	r2, r7, #8
 8013bc6:	4610      	mov	r0, r2
 8013bc8:	4798      	blx	r3
 8013bca:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8013bcc:	e029      	b.n	8013c22 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8013bce:	6839      	ldr	r1, [r7, #0]
 8013bd0:	6878      	ldr	r0, [r7, #4]
 8013bd2:	f000 fa2a 	bl	801402a <USBD_CtlError>
        err++;
 8013bd6:	7afb      	ldrb	r3, [r7, #11]
 8013bd8:	3301      	adds	r3, #1
 8013bda:	72fb      	strb	r3, [r7, #11]
      break;
 8013bdc:	e021      	b.n	8013c22 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013bde:	687b      	ldr	r3, [r7, #4]
 8013be0:	7c1b      	ldrb	r3, [r3, #16]
 8013be2:	2b00      	cmp	r3, #0
 8013be4:	d10d      	bne.n	8013c02 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8013be6:	687b      	ldr	r3, [r7, #4]
 8013be8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013bec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013bee:	f107 0208 	add.w	r2, r7, #8
 8013bf2:	4610      	mov	r0, r2
 8013bf4:	4798      	blx	r3
 8013bf6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8013bf8:	68fb      	ldr	r3, [r7, #12]
 8013bfa:	3301      	adds	r3, #1
 8013bfc:	2207      	movs	r2, #7
 8013bfe:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8013c00:	e00f      	b.n	8013c22 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8013c02:	6839      	ldr	r1, [r7, #0]
 8013c04:	6878      	ldr	r0, [r7, #4]
 8013c06:	f000 fa10 	bl	801402a <USBD_CtlError>
        err++;
 8013c0a:	7afb      	ldrb	r3, [r7, #11]
 8013c0c:	3301      	adds	r3, #1
 8013c0e:	72fb      	strb	r3, [r7, #11]
      break;
 8013c10:	e007      	b.n	8013c22 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8013c12:	6839      	ldr	r1, [r7, #0]
 8013c14:	6878      	ldr	r0, [r7, #4]
 8013c16:	f000 fa08 	bl	801402a <USBD_CtlError>
      err++;
 8013c1a:	7afb      	ldrb	r3, [r7, #11]
 8013c1c:	3301      	adds	r3, #1
 8013c1e:	72fb      	strb	r3, [r7, #11]
      break;
 8013c20:	bf00      	nop
  }

  if (err != 0U)
 8013c22:	7afb      	ldrb	r3, [r7, #11]
 8013c24:	2b00      	cmp	r3, #0
 8013c26:	d11e      	bne.n	8013c66 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8013c28:	683b      	ldr	r3, [r7, #0]
 8013c2a:	88db      	ldrh	r3, [r3, #6]
 8013c2c:	2b00      	cmp	r3, #0
 8013c2e:	d016      	beq.n	8013c5e <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8013c30:	893b      	ldrh	r3, [r7, #8]
 8013c32:	2b00      	cmp	r3, #0
 8013c34:	d00e      	beq.n	8013c54 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8013c36:	683b      	ldr	r3, [r7, #0]
 8013c38:	88da      	ldrh	r2, [r3, #6]
 8013c3a:	893b      	ldrh	r3, [r7, #8]
 8013c3c:	4293      	cmp	r3, r2
 8013c3e:	bf28      	it	cs
 8013c40:	4613      	movcs	r3, r2
 8013c42:	b29b      	uxth	r3, r3
 8013c44:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8013c46:	893b      	ldrh	r3, [r7, #8]
 8013c48:	461a      	mov	r2, r3
 8013c4a:	68f9      	ldr	r1, [r7, #12]
 8013c4c:	6878      	ldr	r0, [r7, #4]
 8013c4e:	f000 fa69 	bl	8014124 <USBD_CtlSendData>
 8013c52:	e009      	b.n	8013c68 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8013c54:	6839      	ldr	r1, [r7, #0]
 8013c56:	6878      	ldr	r0, [r7, #4]
 8013c58:	f000 f9e7 	bl	801402a <USBD_CtlError>
 8013c5c:	e004      	b.n	8013c68 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8013c5e:	6878      	ldr	r0, [r7, #4]
 8013c60:	f000 faba 	bl	80141d8 <USBD_CtlSendStatus>
 8013c64:	e000      	b.n	8013c68 <USBD_GetDescriptor+0x320>
    return;
 8013c66:	bf00      	nop
  }
}
 8013c68:	3710      	adds	r7, #16
 8013c6a:	46bd      	mov	sp, r7
 8013c6c:	bd80      	pop	{r7, pc}
 8013c6e:	bf00      	nop

08013c70 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013c70:	b580      	push	{r7, lr}
 8013c72:	b084      	sub	sp, #16
 8013c74:	af00      	add	r7, sp, #0
 8013c76:	6078      	str	r0, [r7, #4]
 8013c78:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8013c7a:	683b      	ldr	r3, [r7, #0]
 8013c7c:	889b      	ldrh	r3, [r3, #4]
 8013c7e:	2b00      	cmp	r3, #0
 8013c80:	d131      	bne.n	8013ce6 <USBD_SetAddress+0x76>
 8013c82:	683b      	ldr	r3, [r7, #0]
 8013c84:	88db      	ldrh	r3, [r3, #6]
 8013c86:	2b00      	cmp	r3, #0
 8013c88:	d12d      	bne.n	8013ce6 <USBD_SetAddress+0x76>
 8013c8a:	683b      	ldr	r3, [r7, #0]
 8013c8c:	885b      	ldrh	r3, [r3, #2]
 8013c8e:	2b7f      	cmp	r3, #127	@ 0x7f
 8013c90:	d829      	bhi.n	8013ce6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8013c92:	683b      	ldr	r3, [r7, #0]
 8013c94:	885b      	ldrh	r3, [r3, #2]
 8013c96:	b2db      	uxtb	r3, r3
 8013c98:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013c9c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013c9e:	687b      	ldr	r3, [r7, #4]
 8013ca0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013ca4:	b2db      	uxtb	r3, r3
 8013ca6:	2b03      	cmp	r3, #3
 8013ca8:	d104      	bne.n	8013cb4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8013caa:	6839      	ldr	r1, [r7, #0]
 8013cac:	6878      	ldr	r0, [r7, #4]
 8013cae:	f000 f9bc 	bl	801402a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013cb2:	e01d      	b.n	8013cf0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8013cb4:	687b      	ldr	r3, [r7, #4]
 8013cb6:	7bfa      	ldrb	r2, [r7, #15]
 8013cb8:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8013cbc:	7bfb      	ldrb	r3, [r7, #15]
 8013cbe:	4619      	mov	r1, r3
 8013cc0:	6878      	ldr	r0, [r7, #4]
 8013cc2:	f000 ff13 	bl	8014aec <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8013cc6:	6878      	ldr	r0, [r7, #4]
 8013cc8:	f000 fa86 	bl	80141d8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8013ccc:	7bfb      	ldrb	r3, [r7, #15]
 8013cce:	2b00      	cmp	r3, #0
 8013cd0:	d004      	beq.n	8013cdc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8013cd2:	687b      	ldr	r3, [r7, #4]
 8013cd4:	2202      	movs	r2, #2
 8013cd6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013cda:	e009      	b.n	8013cf0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8013cdc:	687b      	ldr	r3, [r7, #4]
 8013cde:	2201      	movs	r2, #1
 8013ce0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013ce4:	e004      	b.n	8013cf0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8013ce6:	6839      	ldr	r1, [r7, #0]
 8013ce8:	6878      	ldr	r0, [r7, #4]
 8013cea:	f000 f99e 	bl	801402a <USBD_CtlError>
  }
}
 8013cee:	bf00      	nop
 8013cf0:	bf00      	nop
 8013cf2:	3710      	adds	r7, #16
 8013cf4:	46bd      	mov	sp, r7
 8013cf6:	bd80      	pop	{r7, pc}

08013cf8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013cf8:	b580      	push	{r7, lr}
 8013cfa:	b084      	sub	sp, #16
 8013cfc:	af00      	add	r7, sp, #0
 8013cfe:	6078      	str	r0, [r7, #4]
 8013d00:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8013d02:	2300      	movs	r3, #0
 8013d04:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8013d06:	683b      	ldr	r3, [r7, #0]
 8013d08:	885b      	ldrh	r3, [r3, #2]
 8013d0a:	b2da      	uxtb	r2, r3
 8013d0c:	4b4e      	ldr	r3, [pc, #312]	@ (8013e48 <USBD_SetConfig+0x150>)
 8013d0e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8013d10:	4b4d      	ldr	r3, [pc, #308]	@ (8013e48 <USBD_SetConfig+0x150>)
 8013d12:	781b      	ldrb	r3, [r3, #0]
 8013d14:	2b01      	cmp	r3, #1
 8013d16:	d905      	bls.n	8013d24 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8013d18:	6839      	ldr	r1, [r7, #0]
 8013d1a:	6878      	ldr	r0, [r7, #4]
 8013d1c:	f000 f985 	bl	801402a <USBD_CtlError>
    return USBD_FAIL;
 8013d20:	2303      	movs	r3, #3
 8013d22:	e08c      	b.n	8013e3e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8013d24:	687b      	ldr	r3, [r7, #4]
 8013d26:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013d2a:	b2db      	uxtb	r3, r3
 8013d2c:	2b02      	cmp	r3, #2
 8013d2e:	d002      	beq.n	8013d36 <USBD_SetConfig+0x3e>
 8013d30:	2b03      	cmp	r3, #3
 8013d32:	d029      	beq.n	8013d88 <USBD_SetConfig+0x90>
 8013d34:	e075      	b.n	8013e22 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8013d36:	4b44      	ldr	r3, [pc, #272]	@ (8013e48 <USBD_SetConfig+0x150>)
 8013d38:	781b      	ldrb	r3, [r3, #0]
 8013d3a:	2b00      	cmp	r3, #0
 8013d3c:	d020      	beq.n	8013d80 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8013d3e:	4b42      	ldr	r3, [pc, #264]	@ (8013e48 <USBD_SetConfig+0x150>)
 8013d40:	781b      	ldrb	r3, [r3, #0]
 8013d42:	461a      	mov	r2, r3
 8013d44:	687b      	ldr	r3, [r7, #4]
 8013d46:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8013d48:	4b3f      	ldr	r3, [pc, #252]	@ (8013e48 <USBD_SetConfig+0x150>)
 8013d4a:	781b      	ldrb	r3, [r3, #0]
 8013d4c:	4619      	mov	r1, r3
 8013d4e:	6878      	ldr	r0, [r7, #4]
 8013d50:	f7fe ffb9 	bl	8012cc6 <USBD_SetClassConfig>
 8013d54:	4603      	mov	r3, r0
 8013d56:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8013d58:	7bfb      	ldrb	r3, [r7, #15]
 8013d5a:	2b00      	cmp	r3, #0
 8013d5c:	d008      	beq.n	8013d70 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8013d5e:	6839      	ldr	r1, [r7, #0]
 8013d60:	6878      	ldr	r0, [r7, #4]
 8013d62:	f000 f962 	bl	801402a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8013d66:	687b      	ldr	r3, [r7, #4]
 8013d68:	2202      	movs	r2, #2
 8013d6a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8013d6e:	e065      	b.n	8013e3c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8013d70:	6878      	ldr	r0, [r7, #4]
 8013d72:	f000 fa31 	bl	80141d8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8013d76:	687b      	ldr	r3, [r7, #4]
 8013d78:	2203      	movs	r2, #3
 8013d7a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8013d7e:	e05d      	b.n	8013e3c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8013d80:	6878      	ldr	r0, [r7, #4]
 8013d82:	f000 fa29 	bl	80141d8 <USBD_CtlSendStatus>
      break;
 8013d86:	e059      	b.n	8013e3c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8013d88:	4b2f      	ldr	r3, [pc, #188]	@ (8013e48 <USBD_SetConfig+0x150>)
 8013d8a:	781b      	ldrb	r3, [r3, #0]
 8013d8c:	2b00      	cmp	r3, #0
 8013d8e:	d112      	bne.n	8013db6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8013d90:	687b      	ldr	r3, [r7, #4]
 8013d92:	2202      	movs	r2, #2
 8013d94:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8013d98:	4b2b      	ldr	r3, [pc, #172]	@ (8013e48 <USBD_SetConfig+0x150>)
 8013d9a:	781b      	ldrb	r3, [r3, #0]
 8013d9c:	461a      	mov	r2, r3
 8013d9e:	687b      	ldr	r3, [r7, #4]
 8013da0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8013da2:	4b29      	ldr	r3, [pc, #164]	@ (8013e48 <USBD_SetConfig+0x150>)
 8013da4:	781b      	ldrb	r3, [r3, #0]
 8013da6:	4619      	mov	r1, r3
 8013da8:	6878      	ldr	r0, [r7, #4]
 8013daa:	f7fe ffa8 	bl	8012cfe <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8013dae:	6878      	ldr	r0, [r7, #4]
 8013db0:	f000 fa12 	bl	80141d8 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8013db4:	e042      	b.n	8013e3c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8013db6:	4b24      	ldr	r3, [pc, #144]	@ (8013e48 <USBD_SetConfig+0x150>)
 8013db8:	781b      	ldrb	r3, [r3, #0]
 8013dba:	461a      	mov	r2, r3
 8013dbc:	687b      	ldr	r3, [r7, #4]
 8013dbe:	685b      	ldr	r3, [r3, #4]
 8013dc0:	429a      	cmp	r2, r3
 8013dc2:	d02a      	beq.n	8013e1a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8013dc4:	687b      	ldr	r3, [r7, #4]
 8013dc6:	685b      	ldr	r3, [r3, #4]
 8013dc8:	b2db      	uxtb	r3, r3
 8013dca:	4619      	mov	r1, r3
 8013dcc:	6878      	ldr	r0, [r7, #4]
 8013dce:	f7fe ff96 	bl	8012cfe <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8013dd2:	4b1d      	ldr	r3, [pc, #116]	@ (8013e48 <USBD_SetConfig+0x150>)
 8013dd4:	781b      	ldrb	r3, [r3, #0]
 8013dd6:	461a      	mov	r2, r3
 8013dd8:	687b      	ldr	r3, [r7, #4]
 8013dda:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8013ddc:	4b1a      	ldr	r3, [pc, #104]	@ (8013e48 <USBD_SetConfig+0x150>)
 8013dde:	781b      	ldrb	r3, [r3, #0]
 8013de0:	4619      	mov	r1, r3
 8013de2:	6878      	ldr	r0, [r7, #4]
 8013de4:	f7fe ff6f 	bl	8012cc6 <USBD_SetClassConfig>
 8013de8:	4603      	mov	r3, r0
 8013dea:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8013dec:	7bfb      	ldrb	r3, [r7, #15]
 8013dee:	2b00      	cmp	r3, #0
 8013df0:	d00f      	beq.n	8013e12 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8013df2:	6839      	ldr	r1, [r7, #0]
 8013df4:	6878      	ldr	r0, [r7, #4]
 8013df6:	f000 f918 	bl	801402a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8013dfa:	687b      	ldr	r3, [r7, #4]
 8013dfc:	685b      	ldr	r3, [r3, #4]
 8013dfe:	b2db      	uxtb	r3, r3
 8013e00:	4619      	mov	r1, r3
 8013e02:	6878      	ldr	r0, [r7, #4]
 8013e04:	f7fe ff7b 	bl	8012cfe <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8013e08:	687b      	ldr	r3, [r7, #4]
 8013e0a:	2202      	movs	r2, #2
 8013e0c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8013e10:	e014      	b.n	8013e3c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8013e12:	6878      	ldr	r0, [r7, #4]
 8013e14:	f000 f9e0 	bl	80141d8 <USBD_CtlSendStatus>
      break;
 8013e18:	e010      	b.n	8013e3c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8013e1a:	6878      	ldr	r0, [r7, #4]
 8013e1c:	f000 f9dc 	bl	80141d8 <USBD_CtlSendStatus>
      break;
 8013e20:	e00c      	b.n	8013e3c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8013e22:	6839      	ldr	r1, [r7, #0]
 8013e24:	6878      	ldr	r0, [r7, #4]
 8013e26:	f000 f900 	bl	801402a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8013e2a:	4b07      	ldr	r3, [pc, #28]	@ (8013e48 <USBD_SetConfig+0x150>)
 8013e2c:	781b      	ldrb	r3, [r3, #0]
 8013e2e:	4619      	mov	r1, r3
 8013e30:	6878      	ldr	r0, [r7, #4]
 8013e32:	f7fe ff64 	bl	8012cfe <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8013e36:	2303      	movs	r3, #3
 8013e38:	73fb      	strb	r3, [r7, #15]
      break;
 8013e3a:	bf00      	nop
  }

  return ret;
 8013e3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8013e3e:	4618      	mov	r0, r3
 8013e40:	3710      	adds	r7, #16
 8013e42:	46bd      	mov	sp, r7
 8013e44:	bd80      	pop	{r7, pc}
 8013e46:	bf00      	nop
 8013e48:	24003f4c 	.word	0x24003f4c

08013e4c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013e4c:	b580      	push	{r7, lr}
 8013e4e:	b082      	sub	sp, #8
 8013e50:	af00      	add	r7, sp, #0
 8013e52:	6078      	str	r0, [r7, #4]
 8013e54:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8013e56:	683b      	ldr	r3, [r7, #0]
 8013e58:	88db      	ldrh	r3, [r3, #6]
 8013e5a:	2b01      	cmp	r3, #1
 8013e5c:	d004      	beq.n	8013e68 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8013e5e:	6839      	ldr	r1, [r7, #0]
 8013e60:	6878      	ldr	r0, [r7, #4]
 8013e62:	f000 f8e2 	bl	801402a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8013e66:	e023      	b.n	8013eb0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8013e68:	687b      	ldr	r3, [r7, #4]
 8013e6a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013e6e:	b2db      	uxtb	r3, r3
 8013e70:	2b02      	cmp	r3, #2
 8013e72:	dc02      	bgt.n	8013e7a <USBD_GetConfig+0x2e>
 8013e74:	2b00      	cmp	r3, #0
 8013e76:	dc03      	bgt.n	8013e80 <USBD_GetConfig+0x34>
 8013e78:	e015      	b.n	8013ea6 <USBD_GetConfig+0x5a>
 8013e7a:	2b03      	cmp	r3, #3
 8013e7c:	d00b      	beq.n	8013e96 <USBD_GetConfig+0x4a>
 8013e7e:	e012      	b.n	8013ea6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8013e80:	687b      	ldr	r3, [r7, #4]
 8013e82:	2200      	movs	r2, #0
 8013e84:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8013e86:	687b      	ldr	r3, [r7, #4]
 8013e88:	3308      	adds	r3, #8
 8013e8a:	2201      	movs	r2, #1
 8013e8c:	4619      	mov	r1, r3
 8013e8e:	6878      	ldr	r0, [r7, #4]
 8013e90:	f000 f948 	bl	8014124 <USBD_CtlSendData>
        break;
 8013e94:	e00c      	b.n	8013eb0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8013e96:	687b      	ldr	r3, [r7, #4]
 8013e98:	3304      	adds	r3, #4
 8013e9a:	2201      	movs	r2, #1
 8013e9c:	4619      	mov	r1, r3
 8013e9e:	6878      	ldr	r0, [r7, #4]
 8013ea0:	f000 f940 	bl	8014124 <USBD_CtlSendData>
        break;
 8013ea4:	e004      	b.n	8013eb0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8013ea6:	6839      	ldr	r1, [r7, #0]
 8013ea8:	6878      	ldr	r0, [r7, #4]
 8013eaa:	f000 f8be 	bl	801402a <USBD_CtlError>
        break;
 8013eae:	bf00      	nop
}
 8013eb0:	bf00      	nop
 8013eb2:	3708      	adds	r7, #8
 8013eb4:	46bd      	mov	sp, r7
 8013eb6:	bd80      	pop	{r7, pc}

08013eb8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013eb8:	b580      	push	{r7, lr}
 8013eba:	b082      	sub	sp, #8
 8013ebc:	af00      	add	r7, sp, #0
 8013ebe:	6078      	str	r0, [r7, #4]
 8013ec0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8013ec2:	687b      	ldr	r3, [r7, #4]
 8013ec4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013ec8:	b2db      	uxtb	r3, r3
 8013eca:	3b01      	subs	r3, #1
 8013ecc:	2b02      	cmp	r3, #2
 8013ece:	d81e      	bhi.n	8013f0e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8013ed0:	683b      	ldr	r3, [r7, #0]
 8013ed2:	88db      	ldrh	r3, [r3, #6]
 8013ed4:	2b02      	cmp	r3, #2
 8013ed6:	d004      	beq.n	8013ee2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8013ed8:	6839      	ldr	r1, [r7, #0]
 8013eda:	6878      	ldr	r0, [r7, #4]
 8013edc:	f000 f8a5 	bl	801402a <USBD_CtlError>
        break;
 8013ee0:	e01a      	b.n	8013f18 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8013ee2:	687b      	ldr	r3, [r7, #4]
 8013ee4:	2201      	movs	r2, #1
 8013ee6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8013ee8:	687b      	ldr	r3, [r7, #4]
 8013eea:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8013eee:	2b00      	cmp	r3, #0
 8013ef0:	d005      	beq.n	8013efe <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8013ef2:	687b      	ldr	r3, [r7, #4]
 8013ef4:	68db      	ldr	r3, [r3, #12]
 8013ef6:	f043 0202 	orr.w	r2, r3, #2
 8013efa:	687b      	ldr	r3, [r7, #4]
 8013efc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8013efe:	687b      	ldr	r3, [r7, #4]
 8013f00:	330c      	adds	r3, #12
 8013f02:	2202      	movs	r2, #2
 8013f04:	4619      	mov	r1, r3
 8013f06:	6878      	ldr	r0, [r7, #4]
 8013f08:	f000 f90c 	bl	8014124 <USBD_CtlSendData>
      break;
 8013f0c:	e004      	b.n	8013f18 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8013f0e:	6839      	ldr	r1, [r7, #0]
 8013f10:	6878      	ldr	r0, [r7, #4]
 8013f12:	f000 f88a 	bl	801402a <USBD_CtlError>
      break;
 8013f16:	bf00      	nop
  }
}
 8013f18:	bf00      	nop
 8013f1a:	3708      	adds	r7, #8
 8013f1c:	46bd      	mov	sp, r7
 8013f1e:	bd80      	pop	{r7, pc}

08013f20 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013f20:	b580      	push	{r7, lr}
 8013f22:	b082      	sub	sp, #8
 8013f24:	af00      	add	r7, sp, #0
 8013f26:	6078      	str	r0, [r7, #4]
 8013f28:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8013f2a:	683b      	ldr	r3, [r7, #0]
 8013f2c:	885b      	ldrh	r3, [r3, #2]
 8013f2e:	2b01      	cmp	r3, #1
 8013f30:	d107      	bne.n	8013f42 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8013f32:	687b      	ldr	r3, [r7, #4]
 8013f34:	2201      	movs	r2, #1
 8013f36:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8013f3a:	6878      	ldr	r0, [r7, #4]
 8013f3c:	f000 f94c 	bl	80141d8 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8013f40:	e013      	b.n	8013f6a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8013f42:	683b      	ldr	r3, [r7, #0]
 8013f44:	885b      	ldrh	r3, [r3, #2]
 8013f46:	2b02      	cmp	r3, #2
 8013f48:	d10b      	bne.n	8013f62 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8013f4a:	683b      	ldr	r3, [r7, #0]
 8013f4c:	889b      	ldrh	r3, [r3, #4]
 8013f4e:	0a1b      	lsrs	r3, r3, #8
 8013f50:	b29b      	uxth	r3, r3
 8013f52:	b2da      	uxtb	r2, r3
 8013f54:	687b      	ldr	r3, [r7, #4]
 8013f56:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8013f5a:	6878      	ldr	r0, [r7, #4]
 8013f5c:	f000 f93c 	bl	80141d8 <USBD_CtlSendStatus>
}
 8013f60:	e003      	b.n	8013f6a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8013f62:	6839      	ldr	r1, [r7, #0]
 8013f64:	6878      	ldr	r0, [r7, #4]
 8013f66:	f000 f860 	bl	801402a <USBD_CtlError>
}
 8013f6a:	bf00      	nop
 8013f6c:	3708      	adds	r7, #8
 8013f6e:	46bd      	mov	sp, r7
 8013f70:	bd80      	pop	{r7, pc}

08013f72 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013f72:	b580      	push	{r7, lr}
 8013f74:	b082      	sub	sp, #8
 8013f76:	af00      	add	r7, sp, #0
 8013f78:	6078      	str	r0, [r7, #4]
 8013f7a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8013f7c:	687b      	ldr	r3, [r7, #4]
 8013f7e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013f82:	b2db      	uxtb	r3, r3
 8013f84:	3b01      	subs	r3, #1
 8013f86:	2b02      	cmp	r3, #2
 8013f88:	d80b      	bhi.n	8013fa2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8013f8a:	683b      	ldr	r3, [r7, #0]
 8013f8c:	885b      	ldrh	r3, [r3, #2]
 8013f8e:	2b01      	cmp	r3, #1
 8013f90:	d10c      	bne.n	8013fac <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8013f92:	687b      	ldr	r3, [r7, #4]
 8013f94:	2200      	movs	r2, #0
 8013f96:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8013f9a:	6878      	ldr	r0, [r7, #4]
 8013f9c:	f000 f91c 	bl	80141d8 <USBD_CtlSendStatus>
      }
      break;
 8013fa0:	e004      	b.n	8013fac <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8013fa2:	6839      	ldr	r1, [r7, #0]
 8013fa4:	6878      	ldr	r0, [r7, #4]
 8013fa6:	f000 f840 	bl	801402a <USBD_CtlError>
      break;
 8013faa:	e000      	b.n	8013fae <USBD_ClrFeature+0x3c>
      break;
 8013fac:	bf00      	nop
  }
}
 8013fae:	bf00      	nop
 8013fb0:	3708      	adds	r7, #8
 8013fb2:	46bd      	mov	sp, r7
 8013fb4:	bd80      	pop	{r7, pc}

08013fb6 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8013fb6:	b580      	push	{r7, lr}
 8013fb8:	b084      	sub	sp, #16
 8013fba:	af00      	add	r7, sp, #0
 8013fbc:	6078      	str	r0, [r7, #4]
 8013fbe:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8013fc0:	683b      	ldr	r3, [r7, #0]
 8013fc2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8013fc4:	68fb      	ldr	r3, [r7, #12]
 8013fc6:	781a      	ldrb	r2, [r3, #0]
 8013fc8:	687b      	ldr	r3, [r7, #4]
 8013fca:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8013fcc:	68fb      	ldr	r3, [r7, #12]
 8013fce:	3301      	adds	r3, #1
 8013fd0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8013fd2:	68fb      	ldr	r3, [r7, #12]
 8013fd4:	781a      	ldrb	r2, [r3, #0]
 8013fd6:	687b      	ldr	r3, [r7, #4]
 8013fd8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8013fda:	68fb      	ldr	r3, [r7, #12]
 8013fdc:	3301      	adds	r3, #1
 8013fde:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8013fe0:	68f8      	ldr	r0, [r7, #12]
 8013fe2:	f7ff fa16 	bl	8013412 <SWAPBYTE>
 8013fe6:	4603      	mov	r3, r0
 8013fe8:	461a      	mov	r2, r3
 8013fea:	687b      	ldr	r3, [r7, #4]
 8013fec:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8013fee:	68fb      	ldr	r3, [r7, #12]
 8013ff0:	3301      	adds	r3, #1
 8013ff2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8013ff4:	68fb      	ldr	r3, [r7, #12]
 8013ff6:	3301      	adds	r3, #1
 8013ff8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8013ffa:	68f8      	ldr	r0, [r7, #12]
 8013ffc:	f7ff fa09 	bl	8013412 <SWAPBYTE>
 8014000:	4603      	mov	r3, r0
 8014002:	461a      	mov	r2, r3
 8014004:	687b      	ldr	r3, [r7, #4]
 8014006:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8014008:	68fb      	ldr	r3, [r7, #12]
 801400a:	3301      	adds	r3, #1
 801400c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801400e:	68fb      	ldr	r3, [r7, #12]
 8014010:	3301      	adds	r3, #1
 8014012:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8014014:	68f8      	ldr	r0, [r7, #12]
 8014016:	f7ff f9fc 	bl	8013412 <SWAPBYTE>
 801401a:	4603      	mov	r3, r0
 801401c:	461a      	mov	r2, r3
 801401e:	687b      	ldr	r3, [r7, #4]
 8014020:	80da      	strh	r2, [r3, #6]
}
 8014022:	bf00      	nop
 8014024:	3710      	adds	r7, #16
 8014026:	46bd      	mov	sp, r7
 8014028:	bd80      	pop	{r7, pc}

0801402a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801402a:	b580      	push	{r7, lr}
 801402c:	b082      	sub	sp, #8
 801402e:	af00      	add	r7, sp, #0
 8014030:	6078      	str	r0, [r7, #4]
 8014032:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8014034:	2180      	movs	r1, #128	@ 0x80
 8014036:	6878      	ldr	r0, [r7, #4]
 8014038:	f000 fcee 	bl	8014a18 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 801403c:	2100      	movs	r1, #0
 801403e:	6878      	ldr	r0, [r7, #4]
 8014040:	f000 fcea 	bl	8014a18 <USBD_LL_StallEP>
}
 8014044:	bf00      	nop
 8014046:	3708      	adds	r7, #8
 8014048:	46bd      	mov	sp, r7
 801404a:	bd80      	pop	{r7, pc}

0801404c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 801404c:	b580      	push	{r7, lr}
 801404e:	b086      	sub	sp, #24
 8014050:	af00      	add	r7, sp, #0
 8014052:	60f8      	str	r0, [r7, #12]
 8014054:	60b9      	str	r1, [r7, #8]
 8014056:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8014058:	2300      	movs	r3, #0
 801405a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 801405c:	68fb      	ldr	r3, [r7, #12]
 801405e:	2b00      	cmp	r3, #0
 8014060:	d042      	beq.n	80140e8 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8014062:	68fb      	ldr	r3, [r7, #12]
 8014064:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8014066:	6938      	ldr	r0, [r7, #16]
 8014068:	f000 f842 	bl	80140f0 <USBD_GetLen>
 801406c:	4603      	mov	r3, r0
 801406e:	3301      	adds	r3, #1
 8014070:	005b      	lsls	r3, r3, #1
 8014072:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8014076:	d808      	bhi.n	801408a <USBD_GetString+0x3e>
 8014078:	6938      	ldr	r0, [r7, #16]
 801407a:	f000 f839 	bl	80140f0 <USBD_GetLen>
 801407e:	4603      	mov	r3, r0
 8014080:	3301      	adds	r3, #1
 8014082:	b29b      	uxth	r3, r3
 8014084:	005b      	lsls	r3, r3, #1
 8014086:	b29a      	uxth	r2, r3
 8014088:	e001      	b.n	801408e <USBD_GetString+0x42>
 801408a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801408e:	687b      	ldr	r3, [r7, #4]
 8014090:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8014092:	7dfb      	ldrb	r3, [r7, #23]
 8014094:	68ba      	ldr	r2, [r7, #8]
 8014096:	4413      	add	r3, r2
 8014098:	687a      	ldr	r2, [r7, #4]
 801409a:	7812      	ldrb	r2, [r2, #0]
 801409c:	701a      	strb	r2, [r3, #0]
  idx++;
 801409e:	7dfb      	ldrb	r3, [r7, #23]
 80140a0:	3301      	adds	r3, #1
 80140a2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80140a4:	7dfb      	ldrb	r3, [r7, #23]
 80140a6:	68ba      	ldr	r2, [r7, #8]
 80140a8:	4413      	add	r3, r2
 80140aa:	2203      	movs	r2, #3
 80140ac:	701a      	strb	r2, [r3, #0]
  idx++;
 80140ae:	7dfb      	ldrb	r3, [r7, #23]
 80140b0:	3301      	adds	r3, #1
 80140b2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80140b4:	e013      	b.n	80140de <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 80140b6:	7dfb      	ldrb	r3, [r7, #23]
 80140b8:	68ba      	ldr	r2, [r7, #8]
 80140ba:	4413      	add	r3, r2
 80140bc:	693a      	ldr	r2, [r7, #16]
 80140be:	7812      	ldrb	r2, [r2, #0]
 80140c0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80140c2:	693b      	ldr	r3, [r7, #16]
 80140c4:	3301      	adds	r3, #1
 80140c6:	613b      	str	r3, [r7, #16]
    idx++;
 80140c8:	7dfb      	ldrb	r3, [r7, #23]
 80140ca:	3301      	adds	r3, #1
 80140cc:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80140ce:	7dfb      	ldrb	r3, [r7, #23]
 80140d0:	68ba      	ldr	r2, [r7, #8]
 80140d2:	4413      	add	r3, r2
 80140d4:	2200      	movs	r2, #0
 80140d6:	701a      	strb	r2, [r3, #0]
    idx++;
 80140d8:	7dfb      	ldrb	r3, [r7, #23]
 80140da:	3301      	adds	r3, #1
 80140dc:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80140de:	693b      	ldr	r3, [r7, #16]
 80140e0:	781b      	ldrb	r3, [r3, #0]
 80140e2:	2b00      	cmp	r3, #0
 80140e4:	d1e7      	bne.n	80140b6 <USBD_GetString+0x6a>
 80140e6:	e000      	b.n	80140ea <USBD_GetString+0x9e>
    return;
 80140e8:	bf00      	nop
  }
}
 80140ea:	3718      	adds	r7, #24
 80140ec:	46bd      	mov	sp, r7
 80140ee:	bd80      	pop	{r7, pc}

080140f0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80140f0:	b480      	push	{r7}
 80140f2:	b085      	sub	sp, #20
 80140f4:	af00      	add	r7, sp, #0
 80140f6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80140f8:	2300      	movs	r3, #0
 80140fa:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80140fc:	687b      	ldr	r3, [r7, #4]
 80140fe:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8014100:	e005      	b.n	801410e <USBD_GetLen+0x1e>
  {
    len++;
 8014102:	7bfb      	ldrb	r3, [r7, #15]
 8014104:	3301      	adds	r3, #1
 8014106:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8014108:	68bb      	ldr	r3, [r7, #8]
 801410a:	3301      	adds	r3, #1
 801410c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 801410e:	68bb      	ldr	r3, [r7, #8]
 8014110:	781b      	ldrb	r3, [r3, #0]
 8014112:	2b00      	cmp	r3, #0
 8014114:	d1f5      	bne.n	8014102 <USBD_GetLen+0x12>
  }

  return len;
 8014116:	7bfb      	ldrb	r3, [r7, #15]
}
 8014118:	4618      	mov	r0, r3
 801411a:	3714      	adds	r7, #20
 801411c:	46bd      	mov	sp, r7
 801411e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014122:	4770      	bx	lr

08014124 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8014124:	b580      	push	{r7, lr}
 8014126:	b084      	sub	sp, #16
 8014128:	af00      	add	r7, sp, #0
 801412a:	60f8      	str	r0, [r7, #12]
 801412c:	60b9      	str	r1, [r7, #8]
 801412e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8014130:	68fb      	ldr	r3, [r7, #12]
 8014132:	2202      	movs	r2, #2
 8014134:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8014138:	68fb      	ldr	r3, [r7, #12]
 801413a:	687a      	ldr	r2, [r7, #4]
 801413c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 801413e:	68fb      	ldr	r3, [r7, #12]
 8014140:	687a      	ldr	r2, [r7, #4]
 8014142:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8014144:	687b      	ldr	r3, [r7, #4]
 8014146:	68ba      	ldr	r2, [r7, #8]
 8014148:	2100      	movs	r1, #0
 801414a:	68f8      	ldr	r0, [r7, #12]
 801414c:	f000 fced 	bl	8014b2a <USBD_LL_Transmit>

  return USBD_OK;
 8014150:	2300      	movs	r3, #0
}
 8014152:	4618      	mov	r0, r3
 8014154:	3710      	adds	r7, #16
 8014156:	46bd      	mov	sp, r7
 8014158:	bd80      	pop	{r7, pc}

0801415a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 801415a:	b580      	push	{r7, lr}
 801415c:	b084      	sub	sp, #16
 801415e:	af00      	add	r7, sp, #0
 8014160:	60f8      	str	r0, [r7, #12]
 8014162:	60b9      	str	r1, [r7, #8]
 8014164:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8014166:	687b      	ldr	r3, [r7, #4]
 8014168:	68ba      	ldr	r2, [r7, #8]
 801416a:	2100      	movs	r1, #0
 801416c:	68f8      	ldr	r0, [r7, #12]
 801416e:	f000 fcdc 	bl	8014b2a <USBD_LL_Transmit>

  return USBD_OK;
 8014172:	2300      	movs	r3, #0
}
 8014174:	4618      	mov	r0, r3
 8014176:	3710      	adds	r7, #16
 8014178:	46bd      	mov	sp, r7
 801417a:	bd80      	pop	{r7, pc}

0801417c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 801417c:	b580      	push	{r7, lr}
 801417e:	b084      	sub	sp, #16
 8014180:	af00      	add	r7, sp, #0
 8014182:	60f8      	str	r0, [r7, #12]
 8014184:	60b9      	str	r1, [r7, #8]
 8014186:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8014188:	68fb      	ldr	r3, [r7, #12]
 801418a:	2203      	movs	r2, #3
 801418c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8014190:	68fb      	ldr	r3, [r7, #12]
 8014192:	687a      	ldr	r2, [r7, #4]
 8014194:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8014198:	68fb      	ldr	r3, [r7, #12]
 801419a:	687a      	ldr	r2, [r7, #4]
 801419c:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80141a0:	687b      	ldr	r3, [r7, #4]
 80141a2:	68ba      	ldr	r2, [r7, #8]
 80141a4:	2100      	movs	r1, #0
 80141a6:	68f8      	ldr	r0, [r7, #12]
 80141a8:	f000 fce0 	bl	8014b6c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80141ac:	2300      	movs	r3, #0
}
 80141ae:	4618      	mov	r0, r3
 80141b0:	3710      	adds	r7, #16
 80141b2:	46bd      	mov	sp, r7
 80141b4:	bd80      	pop	{r7, pc}

080141b6 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80141b6:	b580      	push	{r7, lr}
 80141b8:	b084      	sub	sp, #16
 80141ba:	af00      	add	r7, sp, #0
 80141bc:	60f8      	str	r0, [r7, #12]
 80141be:	60b9      	str	r1, [r7, #8]
 80141c0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80141c2:	687b      	ldr	r3, [r7, #4]
 80141c4:	68ba      	ldr	r2, [r7, #8]
 80141c6:	2100      	movs	r1, #0
 80141c8:	68f8      	ldr	r0, [r7, #12]
 80141ca:	f000 fccf 	bl	8014b6c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80141ce:	2300      	movs	r3, #0
}
 80141d0:	4618      	mov	r0, r3
 80141d2:	3710      	adds	r7, #16
 80141d4:	46bd      	mov	sp, r7
 80141d6:	bd80      	pop	{r7, pc}

080141d8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80141d8:	b580      	push	{r7, lr}
 80141da:	b082      	sub	sp, #8
 80141dc:	af00      	add	r7, sp, #0
 80141de:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80141e0:	687b      	ldr	r3, [r7, #4]
 80141e2:	2204      	movs	r2, #4
 80141e4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80141e8:	2300      	movs	r3, #0
 80141ea:	2200      	movs	r2, #0
 80141ec:	2100      	movs	r1, #0
 80141ee:	6878      	ldr	r0, [r7, #4]
 80141f0:	f000 fc9b 	bl	8014b2a <USBD_LL_Transmit>

  return USBD_OK;
 80141f4:	2300      	movs	r3, #0
}
 80141f6:	4618      	mov	r0, r3
 80141f8:	3708      	adds	r7, #8
 80141fa:	46bd      	mov	sp, r7
 80141fc:	bd80      	pop	{r7, pc}

080141fe <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80141fe:	b580      	push	{r7, lr}
 8014200:	b082      	sub	sp, #8
 8014202:	af00      	add	r7, sp, #0
 8014204:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8014206:	687b      	ldr	r3, [r7, #4]
 8014208:	2205      	movs	r2, #5
 801420a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801420e:	2300      	movs	r3, #0
 8014210:	2200      	movs	r2, #0
 8014212:	2100      	movs	r1, #0
 8014214:	6878      	ldr	r0, [r7, #4]
 8014216:	f000 fca9 	bl	8014b6c <USBD_LL_PrepareReceive>

  return USBD_OK;
 801421a:	2300      	movs	r3, #0
}
 801421c:	4618      	mov	r0, r3
 801421e:	3708      	adds	r7, #8
 8014220:	46bd      	mov	sp, r7
 8014222:	bd80      	pop	{r7, pc}

08014224 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8014224:	b580      	push	{r7, lr}
 8014226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 8014228:	2201      	movs	r2, #1
 801422a:	4913      	ldr	r1, [pc, #76]	@ (8014278 <MX_USB_DEVICE_Init+0x54>)
 801422c:	4813      	ldr	r0, [pc, #76]	@ (801427c <MX_USB_DEVICE_Init+0x58>)
 801422e:	f7fe fccd 	bl	8012bcc <USBD_Init>
 8014232:	4603      	mov	r3, r0
 8014234:	2b00      	cmp	r3, #0
 8014236:	d001      	beq.n	801423c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8014238:	f7ed fb4c 	bl	80018d4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 801423c:	4910      	ldr	r1, [pc, #64]	@ (8014280 <MX_USB_DEVICE_Init+0x5c>)
 801423e:	480f      	ldr	r0, [pc, #60]	@ (801427c <MX_USB_DEVICE_Init+0x58>)
 8014240:	f7fe fcf4 	bl	8012c2c <USBD_RegisterClass>
 8014244:	4603      	mov	r3, r0
 8014246:	2b00      	cmp	r3, #0
 8014248:	d001      	beq.n	801424e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 801424a:	f7ed fb43 	bl	80018d4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 801424e:	490d      	ldr	r1, [pc, #52]	@ (8014284 <MX_USB_DEVICE_Init+0x60>)
 8014250:	480a      	ldr	r0, [pc, #40]	@ (801427c <MX_USB_DEVICE_Init+0x58>)
 8014252:	f7fe fbeb 	bl	8012a2c <USBD_CDC_RegisterInterface>
 8014256:	4603      	mov	r3, r0
 8014258:	2b00      	cmp	r3, #0
 801425a:	d001      	beq.n	8014260 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 801425c:	f7ed fb3a 	bl	80018d4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 8014260:	4806      	ldr	r0, [pc, #24]	@ (801427c <MX_USB_DEVICE_Init+0x58>)
 8014262:	f7fe fd19 	bl	8012c98 <USBD_Start>
 8014266:	4603      	mov	r3, r0
 8014268:	2b00      	cmp	r3, #0
 801426a:	d001      	beq.n	8014270 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 801426c:	f7ed fb32 	bl	80018d4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 8014270:	f7f6 fa5c 	bl	800a72c <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8014274:	bf00      	nop
 8014276:	bd80      	pop	{r7, pc}
 8014278:	240000b0 	.word	0x240000b0
 801427c:	24003f50 	.word	0x24003f50
 8014280:	2400001c 	.word	0x2400001c
 8014284:	2400009c 	.word	0x2400009c

08014288 <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 8014288:	b580      	push	{r7, lr}
 801428a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 801428c:	2200      	movs	r2, #0
 801428e:	4905      	ldr	r1, [pc, #20]	@ (80142a4 <CDC_Init_HS+0x1c>)
 8014290:	4805      	ldr	r0, [pc, #20]	@ (80142a8 <CDC_Init_HS+0x20>)
 8014292:	f7fe fbe5 	bl	8012a60 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 8014296:	4905      	ldr	r1, [pc, #20]	@ (80142ac <CDC_Init_HS+0x24>)
 8014298:	4803      	ldr	r0, [pc, #12]	@ (80142a8 <CDC_Init_HS+0x20>)
 801429a:	f7fe fc03 	bl	8012aa4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801429e:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 80142a0:	4618      	mov	r0, r3
 80142a2:	bd80      	pop	{r7, pc}
 80142a4:	24004a2c 	.word	0x24004a2c
 80142a8:	24003f50 	.word	0x24003f50
 80142ac:	2400422c 	.word	0x2400422c

080142b0 <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 80142b0:	b480      	push	{r7}
 80142b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 80142b4:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 80142b6:	4618      	mov	r0, r3
 80142b8:	46bd      	mov	sp, r7
 80142ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142be:	4770      	bx	lr

080142c0 <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80142c0:	b480      	push	{r7}
 80142c2:	b083      	sub	sp, #12
 80142c4:	af00      	add	r7, sp, #0
 80142c6:	4603      	mov	r3, r0
 80142c8:	6039      	str	r1, [r7, #0]
 80142ca:	71fb      	strb	r3, [r7, #7]
 80142cc:	4613      	mov	r3, r2
 80142ce:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 80142d0:	79fb      	ldrb	r3, [r7, #7]
 80142d2:	2b23      	cmp	r3, #35	@ 0x23
 80142d4:	d84a      	bhi.n	801436c <CDC_Control_HS+0xac>
 80142d6:	a201      	add	r2, pc, #4	@ (adr r2, 80142dc <CDC_Control_HS+0x1c>)
 80142d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80142dc:	0801436d 	.word	0x0801436d
 80142e0:	0801436d 	.word	0x0801436d
 80142e4:	0801436d 	.word	0x0801436d
 80142e8:	0801436d 	.word	0x0801436d
 80142ec:	0801436d 	.word	0x0801436d
 80142f0:	0801436d 	.word	0x0801436d
 80142f4:	0801436d 	.word	0x0801436d
 80142f8:	0801436d 	.word	0x0801436d
 80142fc:	0801436d 	.word	0x0801436d
 8014300:	0801436d 	.word	0x0801436d
 8014304:	0801436d 	.word	0x0801436d
 8014308:	0801436d 	.word	0x0801436d
 801430c:	0801436d 	.word	0x0801436d
 8014310:	0801436d 	.word	0x0801436d
 8014314:	0801436d 	.word	0x0801436d
 8014318:	0801436d 	.word	0x0801436d
 801431c:	0801436d 	.word	0x0801436d
 8014320:	0801436d 	.word	0x0801436d
 8014324:	0801436d 	.word	0x0801436d
 8014328:	0801436d 	.word	0x0801436d
 801432c:	0801436d 	.word	0x0801436d
 8014330:	0801436d 	.word	0x0801436d
 8014334:	0801436d 	.word	0x0801436d
 8014338:	0801436d 	.word	0x0801436d
 801433c:	0801436d 	.word	0x0801436d
 8014340:	0801436d 	.word	0x0801436d
 8014344:	0801436d 	.word	0x0801436d
 8014348:	0801436d 	.word	0x0801436d
 801434c:	0801436d 	.word	0x0801436d
 8014350:	0801436d 	.word	0x0801436d
 8014354:	0801436d 	.word	0x0801436d
 8014358:	0801436d 	.word	0x0801436d
 801435c:	0801436d 	.word	0x0801436d
 8014360:	0801436d 	.word	0x0801436d
 8014364:	0801436d 	.word	0x0801436d
 8014368:	0801436d 	.word	0x0801436d
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 801436c:	bf00      	nop
  }

  return (USBD_OK);
 801436e:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 8014370:	4618      	mov	r0, r3
 8014372:	370c      	adds	r7, #12
 8014374:	46bd      	mov	sp, r7
 8014376:	f85d 7b04 	ldr.w	r7, [sp], #4
 801437a:	4770      	bx	lr

0801437c <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 801437c:	b580      	push	{r7, lr}
 801437e:	b082      	sub	sp, #8
 8014380:	af00      	add	r7, sp, #0
 8014382:	6078      	str	r0, [r7, #4]
 8014384:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
	USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 8014386:	6879      	ldr	r1, [r7, #4]
 8014388:	4808      	ldr	r0, [pc, #32]	@ (80143ac <CDC_Receive_HS+0x30>)
 801438a:	f7fe fb8b 	bl	8012aa4 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 801438e:	4807      	ldr	r0, [pc, #28]	@ (80143ac <CDC_Receive_HS+0x30>)
 8014390:	f7fe fbe6 	bl	8012b60 <USBD_CDC_ReceivePacket>

	VibeCheckShell_PutInput(&vc.shell, (char*)Buf, *Len);
 8014394:	683b      	ldr	r3, [r7, #0]
 8014396:	681b      	ldr	r3, [r3, #0]
 8014398:	461a      	mov	r2, r3
 801439a:	6879      	ldr	r1, [r7, #4]
 801439c:	4804      	ldr	r0, [pc, #16]	@ (80143b0 <CDC_Receive_HS+0x34>)
 801439e:	f7ee fdad 	bl	8002efc <VibeCheckShell_PutInput>

	return (USBD_OK);
 80143a2:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 80143a4:	4618      	mov	r0, r3
 80143a6:	3708      	adds	r7, #8
 80143a8:	46bd      	mov	sp, r7
 80143aa:	bd80      	pop	{r7, pc}
 80143ac:	24003f50 	.word	0x24003f50
 80143b0:	24000910 	.word	0x24000910

080143b4 <CDC_Transmit_HS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_HS(uint8_t* Buf, uint16_t Len)
{
 80143b4:	b580      	push	{r7, lr}
 80143b6:	b084      	sub	sp, #16
 80143b8:	af00      	add	r7, sp, #0
 80143ba:	6078      	str	r0, [r7, #4]
 80143bc:	460b      	mov	r3, r1
 80143be:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80143c0:	2300      	movs	r3, #0
 80143c2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 12 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData;
 80143c4:	4b0d      	ldr	r3, [pc, #52]	@ (80143fc <CDC_Transmit_HS+0x48>)
 80143c6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80143ca:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80143cc:	68bb      	ldr	r3, [r7, #8]
 80143ce:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80143d2:	2b00      	cmp	r3, #0
 80143d4:	d001      	beq.n	80143da <CDC_Transmit_HS+0x26>
    return USBD_BUSY;
 80143d6:	2301      	movs	r3, #1
 80143d8:	e00b      	b.n	80143f2 <CDC_Transmit_HS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, Buf, Len);
 80143da:	887b      	ldrh	r3, [r7, #2]
 80143dc:	461a      	mov	r2, r3
 80143de:	6879      	ldr	r1, [r7, #4]
 80143e0:	4806      	ldr	r0, [pc, #24]	@ (80143fc <CDC_Transmit_HS+0x48>)
 80143e2:	f7fe fb3d 	bl	8012a60 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceHS);
 80143e6:	4805      	ldr	r0, [pc, #20]	@ (80143fc <CDC_Transmit_HS+0x48>)
 80143e8:	f7fe fb7a 	bl	8012ae0 <USBD_CDC_TransmitPacket>
 80143ec:	4603      	mov	r3, r0
 80143ee:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 12 */
  return result;
 80143f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80143f2:	4618      	mov	r0, r3
 80143f4:	3710      	adds	r7, #16
 80143f6:	46bd      	mov	sp, r7
 80143f8:	bd80      	pop	{r7, pc}
 80143fa:	bf00      	nop
 80143fc:	24003f50 	.word	0x24003f50

08014400 <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8014400:	b480      	push	{r7}
 8014402:	b087      	sub	sp, #28
 8014404:	af00      	add	r7, sp, #0
 8014406:	60f8      	str	r0, [r7, #12]
 8014408:	60b9      	str	r1, [r7, #8]
 801440a:	4613      	mov	r3, r2
 801440c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 801440e:	2300      	movs	r3, #0
 8014410:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 8014412:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014416:	4618      	mov	r0, r3
 8014418:	371c      	adds	r7, #28
 801441a:	46bd      	mov	sp, r7
 801441c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014420:	4770      	bx	lr
	...

08014424 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014424:	b480      	push	{r7}
 8014426:	b083      	sub	sp, #12
 8014428:	af00      	add	r7, sp, #0
 801442a:	4603      	mov	r3, r0
 801442c:	6039      	str	r1, [r7, #0]
 801442e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 8014430:	683b      	ldr	r3, [r7, #0]
 8014432:	2212      	movs	r2, #18
 8014434:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 8014436:	4b03      	ldr	r3, [pc, #12]	@ (8014444 <USBD_HS_DeviceDescriptor+0x20>)
}
 8014438:	4618      	mov	r0, r3
 801443a:	370c      	adds	r7, #12
 801443c:	46bd      	mov	sp, r7
 801443e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014442:	4770      	bx	lr
 8014444:	240000d0 	.word	0x240000d0

08014448 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014448:	b480      	push	{r7}
 801444a:	b083      	sub	sp, #12
 801444c:	af00      	add	r7, sp, #0
 801444e:	4603      	mov	r3, r0
 8014450:	6039      	str	r1, [r7, #0]
 8014452:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8014454:	683b      	ldr	r3, [r7, #0]
 8014456:	2204      	movs	r2, #4
 8014458:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801445a:	4b03      	ldr	r3, [pc, #12]	@ (8014468 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 801445c:	4618      	mov	r0, r3
 801445e:	370c      	adds	r7, #12
 8014460:	46bd      	mov	sp, r7
 8014462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014466:	4770      	bx	lr
 8014468:	240000e4 	.word	0x240000e4

0801446c <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801446c:	b580      	push	{r7, lr}
 801446e:	b082      	sub	sp, #8
 8014470:	af00      	add	r7, sp, #0
 8014472:	4603      	mov	r3, r0
 8014474:	6039      	str	r1, [r7, #0]
 8014476:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8014478:	79fb      	ldrb	r3, [r7, #7]
 801447a:	2b00      	cmp	r3, #0
 801447c:	d105      	bne.n	801448a <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 801447e:	683a      	ldr	r2, [r7, #0]
 8014480:	4907      	ldr	r1, [pc, #28]	@ (80144a0 <USBD_HS_ProductStrDescriptor+0x34>)
 8014482:	4808      	ldr	r0, [pc, #32]	@ (80144a4 <USBD_HS_ProductStrDescriptor+0x38>)
 8014484:	f7ff fde2 	bl	801404c <USBD_GetString>
 8014488:	e004      	b.n	8014494 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 801448a:	683a      	ldr	r2, [r7, #0]
 801448c:	4904      	ldr	r1, [pc, #16]	@ (80144a0 <USBD_HS_ProductStrDescriptor+0x34>)
 801448e:	4805      	ldr	r0, [pc, #20]	@ (80144a4 <USBD_HS_ProductStrDescriptor+0x38>)
 8014490:	f7ff fddc 	bl	801404c <USBD_GetString>
  }
  return USBD_StrDesc;
 8014494:	4b02      	ldr	r3, [pc, #8]	@ (80144a0 <USBD_HS_ProductStrDescriptor+0x34>)
}
 8014496:	4618      	mov	r0, r3
 8014498:	3708      	adds	r7, #8
 801449a:	46bd      	mov	sp, r7
 801449c:	bd80      	pop	{r7, pc}
 801449e:	bf00      	nop
 80144a0:	2400522c 	.word	0x2400522c
 80144a4:	08019b10 	.word	0x08019b10

080144a8 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80144a8:	b580      	push	{r7, lr}
 80144aa:	b082      	sub	sp, #8
 80144ac:	af00      	add	r7, sp, #0
 80144ae:	4603      	mov	r3, r0
 80144b0:	6039      	str	r1, [r7, #0]
 80144b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80144b4:	683a      	ldr	r2, [r7, #0]
 80144b6:	4904      	ldr	r1, [pc, #16]	@ (80144c8 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 80144b8:	4804      	ldr	r0, [pc, #16]	@ (80144cc <USBD_HS_ManufacturerStrDescriptor+0x24>)
 80144ba:	f7ff fdc7 	bl	801404c <USBD_GetString>
  return USBD_StrDesc;
 80144be:	4b02      	ldr	r3, [pc, #8]	@ (80144c8 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 80144c0:	4618      	mov	r0, r3
 80144c2:	3708      	adds	r7, #8
 80144c4:	46bd      	mov	sp, r7
 80144c6:	bd80      	pop	{r7, pc}
 80144c8:	2400522c 	.word	0x2400522c
 80144cc:	08019b1c 	.word	0x08019b1c

080144d0 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80144d0:	b580      	push	{r7, lr}
 80144d2:	b082      	sub	sp, #8
 80144d4:	af00      	add	r7, sp, #0
 80144d6:	4603      	mov	r3, r0
 80144d8:	6039      	str	r1, [r7, #0]
 80144da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80144dc:	683b      	ldr	r3, [r7, #0]
 80144de:	221a      	movs	r2, #26
 80144e0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80144e2:	f000 f843 	bl	801456c <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 80144e6:	4b02      	ldr	r3, [pc, #8]	@ (80144f0 <USBD_HS_SerialStrDescriptor+0x20>)
}
 80144e8:	4618      	mov	r0, r3
 80144ea:	3708      	adds	r7, #8
 80144ec:	46bd      	mov	sp, r7
 80144ee:	bd80      	pop	{r7, pc}
 80144f0:	240000e8 	.word	0x240000e8

080144f4 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80144f4:	b580      	push	{r7, lr}
 80144f6:	b082      	sub	sp, #8
 80144f8:	af00      	add	r7, sp, #0
 80144fa:	4603      	mov	r3, r0
 80144fc:	6039      	str	r1, [r7, #0]
 80144fe:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8014500:	79fb      	ldrb	r3, [r7, #7]
 8014502:	2b00      	cmp	r3, #0
 8014504:	d105      	bne.n	8014512 <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8014506:	683a      	ldr	r2, [r7, #0]
 8014508:	4907      	ldr	r1, [pc, #28]	@ (8014528 <USBD_HS_ConfigStrDescriptor+0x34>)
 801450a:	4808      	ldr	r0, [pc, #32]	@ (801452c <USBD_HS_ConfigStrDescriptor+0x38>)
 801450c:	f7ff fd9e 	bl	801404c <USBD_GetString>
 8014510:	e004      	b.n	801451c <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8014512:	683a      	ldr	r2, [r7, #0]
 8014514:	4904      	ldr	r1, [pc, #16]	@ (8014528 <USBD_HS_ConfigStrDescriptor+0x34>)
 8014516:	4805      	ldr	r0, [pc, #20]	@ (801452c <USBD_HS_ConfigStrDescriptor+0x38>)
 8014518:	f7ff fd98 	bl	801404c <USBD_GetString>
  }
  return USBD_StrDesc;
 801451c:	4b02      	ldr	r3, [pc, #8]	@ (8014528 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 801451e:	4618      	mov	r0, r3
 8014520:	3708      	adds	r7, #8
 8014522:	46bd      	mov	sp, r7
 8014524:	bd80      	pop	{r7, pc}
 8014526:	bf00      	nop
 8014528:	2400522c 	.word	0x2400522c
 801452c:	08019b28 	.word	0x08019b28

08014530 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014530:	b580      	push	{r7, lr}
 8014532:	b082      	sub	sp, #8
 8014534:	af00      	add	r7, sp, #0
 8014536:	4603      	mov	r3, r0
 8014538:	6039      	str	r1, [r7, #0]
 801453a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801453c:	79fb      	ldrb	r3, [r7, #7]
 801453e:	2b00      	cmp	r3, #0
 8014540:	d105      	bne.n	801454e <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8014542:	683a      	ldr	r2, [r7, #0]
 8014544:	4907      	ldr	r1, [pc, #28]	@ (8014564 <USBD_HS_InterfaceStrDescriptor+0x34>)
 8014546:	4808      	ldr	r0, [pc, #32]	@ (8014568 <USBD_HS_InterfaceStrDescriptor+0x38>)
 8014548:	f7ff fd80 	bl	801404c <USBD_GetString>
 801454c:	e004      	b.n	8014558 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 801454e:	683a      	ldr	r2, [r7, #0]
 8014550:	4904      	ldr	r1, [pc, #16]	@ (8014564 <USBD_HS_InterfaceStrDescriptor+0x34>)
 8014552:	4805      	ldr	r0, [pc, #20]	@ (8014568 <USBD_HS_InterfaceStrDescriptor+0x38>)
 8014554:	f7ff fd7a 	bl	801404c <USBD_GetString>
  }
  return USBD_StrDesc;
 8014558:	4b02      	ldr	r3, [pc, #8]	@ (8014564 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 801455a:	4618      	mov	r0, r3
 801455c:	3708      	adds	r7, #8
 801455e:	46bd      	mov	sp, r7
 8014560:	bd80      	pop	{r7, pc}
 8014562:	bf00      	nop
 8014564:	2400522c 	.word	0x2400522c
 8014568:	08019b34 	.word	0x08019b34

0801456c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801456c:	b580      	push	{r7, lr}
 801456e:	b084      	sub	sp, #16
 8014570:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8014572:	4b0f      	ldr	r3, [pc, #60]	@ (80145b0 <Get_SerialNum+0x44>)
 8014574:	681b      	ldr	r3, [r3, #0]
 8014576:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8014578:	4b0e      	ldr	r3, [pc, #56]	@ (80145b4 <Get_SerialNum+0x48>)
 801457a:	681b      	ldr	r3, [r3, #0]
 801457c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801457e:	4b0e      	ldr	r3, [pc, #56]	@ (80145b8 <Get_SerialNum+0x4c>)
 8014580:	681b      	ldr	r3, [r3, #0]
 8014582:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8014584:	68fa      	ldr	r2, [r7, #12]
 8014586:	687b      	ldr	r3, [r7, #4]
 8014588:	4413      	add	r3, r2
 801458a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801458c:	68fb      	ldr	r3, [r7, #12]
 801458e:	2b00      	cmp	r3, #0
 8014590:	d009      	beq.n	80145a6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8014592:	2208      	movs	r2, #8
 8014594:	4909      	ldr	r1, [pc, #36]	@ (80145bc <Get_SerialNum+0x50>)
 8014596:	68f8      	ldr	r0, [r7, #12]
 8014598:	f000 f814 	bl	80145c4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801459c:	2204      	movs	r2, #4
 801459e:	4908      	ldr	r1, [pc, #32]	@ (80145c0 <Get_SerialNum+0x54>)
 80145a0:	68b8      	ldr	r0, [r7, #8]
 80145a2:	f000 f80f 	bl	80145c4 <IntToUnicode>
  }
}
 80145a6:	bf00      	nop
 80145a8:	3710      	adds	r7, #16
 80145aa:	46bd      	mov	sp, r7
 80145ac:	bd80      	pop	{r7, pc}
 80145ae:	bf00      	nop
 80145b0:	1ff1e800 	.word	0x1ff1e800
 80145b4:	1ff1e804 	.word	0x1ff1e804
 80145b8:	1ff1e808 	.word	0x1ff1e808
 80145bc:	240000ea 	.word	0x240000ea
 80145c0:	240000fa 	.word	0x240000fa

080145c4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80145c4:	b480      	push	{r7}
 80145c6:	b087      	sub	sp, #28
 80145c8:	af00      	add	r7, sp, #0
 80145ca:	60f8      	str	r0, [r7, #12]
 80145cc:	60b9      	str	r1, [r7, #8]
 80145ce:	4613      	mov	r3, r2
 80145d0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80145d2:	2300      	movs	r3, #0
 80145d4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80145d6:	2300      	movs	r3, #0
 80145d8:	75fb      	strb	r3, [r7, #23]
 80145da:	e027      	b.n	801462c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80145dc:	68fb      	ldr	r3, [r7, #12]
 80145de:	0f1b      	lsrs	r3, r3, #28
 80145e0:	2b09      	cmp	r3, #9
 80145e2:	d80b      	bhi.n	80145fc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80145e4:	68fb      	ldr	r3, [r7, #12]
 80145e6:	0f1b      	lsrs	r3, r3, #28
 80145e8:	b2da      	uxtb	r2, r3
 80145ea:	7dfb      	ldrb	r3, [r7, #23]
 80145ec:	005b      	lsls	r3, r3, #1
 80145ee:	4619      	mov	r1, r3
 80145f0:	68bb      	ldr	r3, [r7, #8]
 80145f2:	440b      	add	r3, r1
 80145f4:	3230      	adds	r2, #48	@ 0x30
 80145f6:	b2d2      	uxtb	r2, r2
 80145f8:	701a      	strb	r2, [r3, #0]
 80145fa:	e00a      	b.n	8014612 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80145fc:	68fb      	ldr	r3, [r7, #12]
 80145fe:	0f1b      	lsrs	r3, r3, #28
 8014600:	b2da      	uxtb	r2, r3
 8014602:	7dfb      	ldrb	r3, [r7, #23]
 8014604:	005b      	lsls	r3, r3, #1
 8014606:	4619      	mov	r1, r3
 8014608:	68bb      	ldr	r3, [r7, #8]
 801460a:	440b      	add	r3, r1
 801460c:	3237      	adds	r2, #55	@ 0x37
 801460e:	b2d2      	uxtb	r2, r2
 8014610:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8014612:	68fb      	ldr	r3, [r7, #12]
 8014614:	011b      	lsls	r3, r3, #4
 8014616:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8014618:	7dfb      	ldrb	r3, [r7, #23]
 801461a:	005b      	lsls	r3, r3, #1
 801461c:	3301      	adds	r3, #1
 801461e:	68ba      	ldr	r2, [r7, #8]
 8014620:	4413      	add	r3, r2
 8014622:	2200      	movs	r2, #0
 8014624:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8014626:	7dfb      	ldrb	r3, [r7, #23]
 8014628:	3301      	adds	r3, #1
 801462a:	75fb      	strb	r3, [r7, #23]
 801462c:	7dfa      	ldrb	r2, [r7, #23]
 801462e:	79fb      	ldrb	r3, [r7, #7]
 8014630:	429a      	cmp	r2, r3
 8014632:	d3d3      	bcc.n	80145dc <IntToUnicode+0x18>
  }
}
 8014634:	bf00      	nop
 8014636:	bf00      	nop
 8014638:	371c      	adds	r7, #28
 801463a:	46bd      	mov	sp, r7
 801463c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014640:	4770      	bx	lr
	...

08014644 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8014644:	b580      	push	{r7, lr}
 8014646:	b0b2      	sub	sp, #200	@ 0xc8
 8014648:	af00      	add	r7, sp, #0
 801464a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 801464c:	f107 0310 	add.w	r3, r7, #16
 8014650:	22b8      	movs	r2, #184	@ 0xb8
 8014652:	2100      	movs	r1, #0
 8014654:	4618      	mov	r0, r3
 8014656:	f001 fe1c 	bl	8016292 <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 801465a:	687b      	ldr	r3, [r7, #4]
 801465c:	681b      	ldr	r3, [r3, #0]
 801465e:	4a1a      	ldr	r2, [pc, #104]	@ (80146c8 <HAL_PCD_MspInit+0x84>)
 8014660:	4293      	cmp	r3, r2
 8014662:	d12c      	bne.n	80146be <HAL_PCD_MspInit+0x7a>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8014664:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8014668:	f04f 0300 	mov.w	r3, #0
 801466c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8014670:	f44f 1340 	mov.w	r3, #3145728	@ 0x300000
 8014674:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8014678:	f107 0310 	add.w	r3, r7, #16
 801467c:	4618      	mov	r0, r3
 801467e:	f7f6 ffcb 	bl	800b618 <HAL_RCCEx_PeriphCLKConfig>
 8014682:	4603      	mov	r3, r0
 8014684:	2b00      	cmp	r3, #0
 8014686:	d001      	beq.n	801468c <HAL_PCD_MspInit+0x48>
    {
      Error_Handler();
 8014688:	f7ed f924 	bl	80018d4 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 801468c:	f7f6 f84e 	bl	800a72c <HAL_PWREx_EnableUSBVoltageDetector>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8014690:	4b0e      	ldr	r3, [pc, #56]	@ (80146cc <HAL_PCD_MspInit+0x88>)
 8014692:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8014696:	4a0d      	ldr	r2, [pc, #52]	@ (80146cc <HAL_PCD_MspInit+0x88>)
 8014698:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 801469c:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80146a0:	4b0a      	ldr	r3, [pc, #40]	@ (80146cc <HAL_PCD_MspInit+0x88>)
 80146a2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80146a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80146aa:	60fb      	str	r3, [r7, #12]
 80146ac:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 80146ae:	2200      	movs	r2, #0
 80146b0:	2100      	movs	r1, #0
 80146b2:	204d      	movs	r0, #77	@ 0x4d
 80146b4:	f7f1 fe1b 	bl	80062ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 80146b8:	204d      	movs	r0, #77	@ 0x4d
 80146ba:	f7f1 fe32 	bl	8006322 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 80146be:	bf00      	nop
 80146c0:	37c8      	adds	r7, #200	@ 0xc8
 80146c2:	46bd      	mov	sp, r7
 80146c4:	bd80      	pop	{r7, pc}
 80146c6:	bf00      	nop
 80146c8:	40040000 	.word	0x40040000
 80146cc:	58024400 	.word	0x58024400

080146d0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80146d0:	b580      	push	{r7, lr}
 80146d2:	b082      	sub	sp, #8
 80146d4:	af00      	add	r7, sp, #0
 80146d6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80146d8:	687b      	ldr	r3, [r7, #4]
 80146da:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 80146de:	687b      	ldr	r3, [r7, #4]
 80146e0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80146e4:	4619      	mov	r1, r3
 80146e6:	4610      	mov	r0, r2
 80146e8:	f7fe fb23 	bl	8012d32 <USBD_LL_SetupStage>
}
 80146ec:	bf00      	nop
 80146ee:	3708      	adds	r7, #8
 80146f0:	46bd      	mov	sp, r7
 80146f2:	bd80      	pop	{r7, pc}

080146f4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80146f4:	b580      	push	{r7, lr}
 80146f6:	b082      	sub	sp, #8
 80146f8:	af00      	add	r7, sp, #0
 80146fa:	6078      	str	r0, [r7, #4]
 80146fc:	460b      	mov	r3, r1
 80146fe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8014700:	687b      	ldr	r3, [r7, #4]
 8014702:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8014706:	78fa      	ldrb	r2, [r7, #3]
 8014708:	6879      	ldr	r1, [r7, #4]
 801470a:	4613      	mov	r3, r2
 801470c:	00db      	lsls	r3, r3, #3
 801470e:	4413      	add	r3, r2
 8014710:	009b      	lsls	r3, r3, #2
 8014712:	440b      	add	r3, r1
 8014714:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8014718:	681a      	ldr	r2, [r3, #0]
 801471a:	78fb      	ldrb	r3, [r7, #3]
 801471c:	4619      	mov	r1, r3
 801471e:	f7fe fb5d 	bl	8012ddc <USBD_LL_DataOutStage>
}
 8014722:	bf00      	nop
 8014724:	3708      	adds	r7, #8
 8014726:	46bd      	mov	sp, r7
 8014728:	bd80      	pop	{r7, pc}

0801472a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801472a:	b580      	push	{r7, lr}
 801472c:	b082      	sub	sp, #8
 801472e:	af00      	add	r7, sp, #0
 8014730:	6078      	str	r0, [r7, #4]
 8014732:	460b      	mov	r3, r1
 8014734:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8014736:	687b      	ldr	r3, [r7, #4]
 8014738:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 801473c:	78fa      	ldrb	r2, [r7, #3]
 801473e:	6879      	ldr	r1, [r7, #4]
 8014740:	4613      	mov	r3, r2
 8014742:	00db      	lsls	r3, r3, #3
 8014744:	4413      	add	r3, r2
 8014746:	009b      	lsls	r3, r3, #2
 8014748:	440b      	add	r3, r1
 801474a:	3320      	adds	r3, #32
 801474c:	681a      	ldr	r2, [r3, #0]
 801474e:	78fb      	ldrb	r3, [r7, #3]
 8014750:	4619      	mov	r1, r3
 8014752:	f7fe fbf6 	bl	8012f42 <USBD_LL_DataInStage>
}
 8014756:	bf00      	nop
 8014758:	3708      	adds	r7, #8
 801475a:	46bd      	mov	sp, r7
 801475c:	bd80      	pop	{r7, pc}

0801475e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801475e:	b580      	push	{r7, lr}
 8014760:	b082      	sub	sp, #8
 8014762:	af00      	add	r7, sp, #0
 8014764:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8014766:	687b      	ldr	r3, [r7, #4]
 8014768:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801476c:	4618      	mov	r0, r3
 801476e:	f7fe fd30 	bl	80131d2 <USBD_LL_SOF>
}
 8014772:	bf00      	nop
 8014774:	3708      	adds	r7, #8
 8014776:	46bd      	mov	sp, r7
 8014778:	bd80      	pop	{r7, pc}

0801477a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801477a:	b580      	push	{r7, lr}
 801477c:	b084      	sub	sp, #16
 801477e:	af00      	add	r7, sp, #0
 8014780:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8014782:	2301      	movs	r3, #1
 8014784:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8014786:	687b      	ldr	r3, [r7, #4]
 8014788:	79db      	ldrb	r3, [r3, #7]
 801478a:	2b00      	cmp	r3, #0
 801478c:	d102      	bne.n	8014794 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801478e:	2300      	movs	r3, #0
 8014790:	73fb      	strb	r3, [r7, #15]
 8014792:	e008      	b.n	80147a6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8014794:	687b      	ldr	r3, [r7, #4]
 8014796:	79db      	ldrb	r3, [r3, #7]
 8014798:	2b02      	cmp	r3, #2
 801479a:	d102      	bne.n	80147a2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 801479c:	2301      	movs	r3, #1
 801479e:	73fb      	strb	r3, [r7, #15]
 80147a0:	e001      	b.n	80147a6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80147a2:	f7ed f897 	bl	80018d4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80147a6:	687b      	ldr	r3, [r7, #4]
 80147a8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80147ac:	7bfa      	ldrb	r2, [r7, #15]
 80147ae:	4611      	mov	r1, r2
 80147b0:	4618      	mov	r0, r3
 80147b2:	f7fe fcca 	bl	801314a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80147b6:	687b      	ldr	r3, [r7, #4]
 80147b8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80147bc:	4618      	mov	r0, r3
 80147be:	f7fe fc72 	bl	80130a6 <USBD_LL_Reset>
}
 80147c2:	bf00      	nop
 80147c4:	3710      	adds	r7, #16
 80147c6:	46bd      	mov	sp, r7
 80147c8:	bd80      	pop	{r7, pc}
	...

080147cc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80147cc:	b580      	push	{r7, lr}
 80147ce:	b082      	sub	sp, #8
 80147d0:	af00      	add	r7, sp, #0
 80147d2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80147d4:	687b      	ldr	r3, [r7, #4]
 80147d6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80147da:	4618      	mov	r0, r3
 80147dc:	f7fe fcc5 	bl	801316a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80147e0:	687b      	ldr	r3, [r7, #4]
 80147e2:	681b      	ldr	r3, [r3, #0]
 80147e4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80147e8:	681b      	ldr	r3, [r3, #0]
 80147ea:	687a      	ldr	r2, [r7, #4]
 80147ec:	6812      	ldr	r2, [r2, #0]
 80147ee:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80147f2:	f043 0301 	orr.w	r3, r3, #1
 80147f6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80147f8:	687b      	ldr	r3, [r7, #4]
 80147fa:	7adb      	ldrb	r3, [r3, #11]
 80147fc:	2b00      	cmp	r3, #0
 80147fe:	d005      	beq.n	801480c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8014800:	4b04      	ldr	r3, [pc, #16]	@ (8014814 <HAL_PCD_SuspendCallback+0x48>)
 8014802:	691b      	ldr	r3, [r3, #16]
 8014804:	4a03      	ldr	r2, [pc, #12]	@ (8014814 <HAL_PCD_SuspendCallback+0x48>)
 8014806:	f043 0306 	orr.w	r3, r3, #6
 801480a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 801480c:	bf00      	nop
 801480e:	3708      	adds	r7, #8
 8014810:	46bd      	mov	sp, r7
 8014812:	bd80      	pop	{r7, pc}
 8014814:	e000ed00 	.word	0xe000ed00

08014818 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014818:	b580      	push	{r7, lr}
 801481a:	b082      	sub	sp, #8
 801481c:	af00      	add	r7, sp, #0
 801481e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8014820:	687b      	ldr	r3, [r7, #4]
 8014822:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8014826:	4618      	mov	r0, r3
 8014828:	f7fe fcbb 	bl	80131a2 <USBD_LL_Resume>
}
 801482c:	bf00      	nop
 801482e:	3708      	adds	r7, #8
 8014830:	46bd      	mov	sp, r7
 8014832:	bd80      	pop	{r7, pc}

08014834 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014834:	b580      	push	{r7, lr}
 8014836:	b082      	sub	sp, #8
 8014838:	af00      	add	r7, sp, #0
 801483a:	6078      	str	r0, [r7, #4]
 801483c:	460b      	mov	r3, r1
 801483e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8014840:	687b      	ldr	r3, [r7, #4]
 8014842:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8014846:	78fa      	ldrb	r2, [r7, #3]
 8014848:	4611      	mov	r1, r2
 801484a:	4618      	mov	r0, r3
 801484c:	f7fe fd13 	bl	8013276 <USBD_LL_IsoOUTIncomplete>
}
 8014850:	bf00      	nop
 8014852:	3708      	adds	r7, #8
 8014854:	46bd      	mov	sp, r7
 8014856:	bd80      	pop	{r7, pc}

08014858 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014858:	b580      	push	{r7, lr}
 801485a:	b082      	sub	sp, #8
 801485c:	af00      	add	r7, sp, #0
 801485e:	6078      	str	r0, [r7, #4]
 8014860:	460b      	mov	r3, r1
 8014862:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8014864:	687b      	ldr	r3, [r7, #4]
 8014866:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801486a:	78fa      	ldrb	r2, [r7, #3]
 801486c:	4611      	mov	r1, r2
 801486e:	4618      	mov	r0, r3
 8014870:	f7fe fccf 	bl	8013212 <USBD_LL_IsoINIncomplete>
}
 8014874:	bf00      	nop
 8014876:	3708      	adds	r7, #8
 8014878:	46bd      	mov	sp, r7
 801487a:	bd80      	pop	{r7, pc}

0801487c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801487c:	b580      	push	{r7, lr}
 801487e:	b082      	sub	sp, #8
 8014880:	af00      	add	r7, sp, #0
 8014882:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8014884:	687b      	ldr	r3, [r7, #4]
 8014886:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801488a:	4618      	mov	r0, r3
 801488c:	f7fe fd25 	bl	80132da <USBD_LL_DevConnected>
}
 8014890:	bf00      	nop
 8014892:	3708      	adds	r7, #8
 8014894:	46bd      	mov	sp, r7
 8014896:	bd80      	pop	{r7, pc}

08014898 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014898:	b580      	push	{r7, lr}
 801489a:	b082      	sub	sp, #8
 801489c:	af00      	add	r7, sp, #0
 801489e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80148a0:	687b      	ldr	r3, [r7, #4]
 80148a2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80148a6:	4618      	mov	r0, r3
 80148a8:	f7fe fd22 	bl	80132f0 <USBD_LL_DevDisconnected>
}
 80148ac:	bf00      	nop
 80148ae:	3708      	adds	r7, #8
 80148b0:	46bd      	mov	sp, r7
 80148b2:	bd80      	pop	{r7, pc}

080148b4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80148b4:	b580      	push	{r7, lr}
 80148b6:	b082      	sub	sp, #8
 80148b8:	af00      	add	r7, sp, #0
 80148ba:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 80148bc:	687b      	ldr	r3, [r7, #4]
 80148be:	781b      	ldrb	r3, [r3, #0]
 80148c0:	2b01      	cmp	r3, #1
 80148c2:	d140      	bne.n	8014946 <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 80148c4:	4a22      	ldr	r2, [pc, #136]	@ (8014950 <USBD_LL_Init+0x9c>)
 80148c6:	687b      	ldr	r3, [r7, #4]
 80148c8:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_HS;
 80148cc:	687b      	ldr	r3, [r7, #4]
 80148ce:	4a20      	ldr	r2, [pc, #128]	@ (8014950 <USBD_LL_Init+0x9c>)
 80148d0:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 80148d4:	4b1e      	ldr	r3, [pc, #120]	@ (8014950 <USBD_LL_Init+0x9c>)
 80148d6:	4a1f      	ldr	r2, [pc, #124]	@ (8014954 <USBD_LL_Init+0xa0>)
 80148d8:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 80148da:	4b1d      	ldr	r3, [pc, #116]	@ (8014950 <USBD_LL_Init+0x9c>)
 80148dc:	2209      	movs	r2, #9
 80148de:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 80148e0:	4b1b      	ldr	r3, [pc, #108]	@ (8014950 <USBD_LL_Init+0x9c>)
 80148e2:	2202      	movs	r2, #2
 80148e4:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 80148e6:	4b1a      	ldr	r3, [pc, #104]	@ (8014950 <USBD_LL_Init+0x9c>)
 80148e8:	2200      	movs	r2, #0
 80148ea:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 80148ec:	4b18      	ldr	r3, [pc, #96]	@ (8014950 <USBD_LL_Init+0x9c>)
 80148ee:	2202      	movs	r2, #2
 80148f0:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 80148f2:	4b17      	ldr	r3, [pc, #92]	@ (8014950 <USBD_LL_Init+0x9c>)
 80148f4:	2200      	movs	r2, #0
 80148f6:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 80148f8:	4b15      	ldr	r3, [pc, #84]	@ (8014950 <USBD_LL_Init+0x9c>)
 80148fa:	2200      	movs	r2, #0
 80148fc:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 80148fe:	4b14      	ldr	r3, [pc, #80]	@ (8014950 <USBD_LL_Init+0x9c>)
 8014900:	2200      	movs	r2, #0
 8014902:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8014904:	4b12      	ldr	r3, [pc, #72]	@ (8014950 <USBD_LL_Init+0x9c>)
 8014906:	2200      	movs	r2, #0
 8014908:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 801490a:	4b11      	ldr	r3, [pc, #68]	@ (8014950 <USBD_LL_Init+0x9c>)
 801490c:	2200      	movs	r2, #0
 801490e:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8014910:	4b0f      	ldr	r3, [pc, #60]	@ (8014950 <USBD_LL_Init+0x9c>)
 8014912:	2200      	movs	r2, #0
 8014914:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 8014916:	480e      	ldr	r0, [pc, #56]	@ (8014950 <USBD_LL_Init+0x9c>)
 8014918:	f7f4 fc2f 	bl	800917a <HAL_PCD_Init>
 801491c:	4603      	mov	r3, r0
 801491e:	2b00      	cmp	r3, #0
 8014920:	d001      	beq.n	8014926 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 8014922:	f7ec ffd7 	bl	80018d4 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_HS_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 8014926:	f44f 7100 	mov.w	r1, #512	@ 0x200
 801492a:	4809      	ldr	r0, [pc, #36]	@ (8014950 <USBD_LL_Init+0x9c>)
 801492c:	f7f5 fe83 	bl	800a636 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 8014930:	2280      	movs	r2, #128	@ 0x80
 8014932:	2100      	movs	r1, #0
 8014934:	4806      	ldr	r0, [pc, #24]	@ (8014950 <USBD_LL_Init+0x9c>)
 8014936:	f7f5 fe37 	bl	800a5a8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 801493a:	f44f 72ba 	mov.w	r2, #372	@ 0x174
 801493e:	2101      	movs	r1, #1
 8014940:	4803      	ldr	r0, [pc, #12]	@ (8014950 <USBD_LL_Init+0x9c>)
 8014942:	f7f5 fe31 	bl	800a5a8 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_HS_Configuration */
  }
  return USBD_OK;
 8014946:	2300      	movs	r3, #0
}
 8014948:	4618      	mov	r0, r3
 801494a:	3708      	adds	r7, #8
 801494c:	46bd      	mov	sp, r7
 801494e:	bd80      	pop	{r7, pc}
 8014950:	2400542c 	.word	0x2400542c
 8014954:	40040000 	.word	0x40040000

08014958 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8014958:	b580      	push	{r7, lr}
 801495a:	b084      	sub	sp, #16
 801495c:	af00      	add	r7, sp, #0
 801495e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014960:	2300      	movs	r3, #0
 8014962:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014964:	2300      	movs	r3, #0
 8014966:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8014968:	687b      	ldr	r3, [r7, #4]
 801496a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801496e:	4618      	mov	r0, r3
 8014970:	f7f4 fd0f 	bl	8009392 <HAL_PCD_Start>
 8014974:	4603      	mov	r3, r0
 8014976:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014978:	7bfb      	ldrb	r3, [r7, #15]
 801497a:	4618      	mov	r0, r3
 801497c:	f000 f942 	bl	8014c04 <USBD_Get_USB_Status>
 8014980:	4603      	mov	r3, r0
 8014982:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014984:	7bbb      	ldrb	r3, [r7, #14]
}
 8014986:	4618      	mov	r0, r3
 8014988:	3710      	adds	r7, #16
 801498a:	46bd      	mov	sp, r7
 801498c:	bd80      	pop	{r7, pc}

0801498e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801498e:	b580      	push	{r7, lr}
 8014990:	b084      	sub	sp, #16
 8014992:	af00      	add	r7, sp, #0
 8014994:	6078      	str	r0, [r7, #4]
 8014996:	4608      	mov	r0, r1
 8014998:	4611      	mov	r1, r2
 801499a:	461a      	mov	r2, r3
 801499c:	4603      	mov	r3, r0
 801499e:	70fb      	strb	r3, [r7, #3]
 80149a0:	460b      	mov	r3, r1
 80149a2:	70bb      	strb	r3, [r7, #2]
 80149a4:	4613      	mov	r3, r2
 80149a6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80149a8:	2300      	movs	r3, #0
 80149aa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80149ac:	2300      	movs	r3, #0
 80149ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80149b0:	687b      	ldr	r3, [r7, #4]
 80149b2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80149b6:	78bb      	ldrb	r3, [r7, #2]
 80149b8:	883a      	ldrh	r2, [r7, #0]
 80149ba:	78f9      	ldrb	r1, [r7, #3]
 80149bc:	f7f5 fa10 	bl	8009de0 <HAL_PCD_EP_Open>
 80149c0:	4603      	mov	r3, r0
 80149c2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80149c4:	7bfb      	ldrb	r3, [r7, #15]
 80149c6:	4618      	mov	r0, r3
 80149c8:	f000 f91c 	bl	8014c04 <USBD_Get_USB_Status>
 80149cc:	4603      	mov	r3, r0
 80149ce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80149d0:	7bbb      	ldrb	r3, [r7, #14]
}
 80149d2:	4618      	mov	r0, r3
 80149d4:	3710      	adds	r7, #16
 80149d6:	46bd      	mov	sp, r7
 80149d8:	bd80      	pop	{r7, pc}

080149da <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80149da:	b580      	push	{r7, lr}
 80149dc:	b084      	sub	sp, #16
 80149de:	af00      	add	r7, sp, #0
 80149e0:	6078      	str	r0, [r7, #4]
 80149e2:	460b      	mov	r3, r1
 80149e4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80149e6:	2300      	movs	r3, #0
 80149e8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80149ea:	2300      	movs	r3, #0
 80149ec:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80149ee:	687b      	ldr	r3, [r7, #4]
 80149f0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80149f4:	78fa      	ldrb	r2, [r7, #3]
 80149f6:	4611      	mov	r1, r2
 80149f8:	4618      	mov	r0, r3
 80149fa:	f7f5 fa59 	bl	8009eb0 <HAL_PCD_EP_Close>
 80149fe:	4603      	mov	r3, r0
 8014a00:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014a02:	7bfb      	ldrb	r3, [r7, #15]
 8014a04:	4618      	mov	r0, r3
 8014a06:	f000 f8fd 	bl	8014c04 <USBD_Get_USB_Status>
 8014a0a:	4603      	mov	r3, r0
 8014a0c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014a0e:	7bbb      	ldrb	r3, [r7, #14]
}
 8014a10:	4618      	mov	r0, r3
 8014a12:	3710      	adds	r7, #16
 8014a14:	46bd      	mov	sp, r7
 8014a16:	bd80      	pop	{r7, pc}

08014a18 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014a18:	b580      	push	{r7, lr}
 8014a1a:	b084      	sub	sp, #16
 8014a1c:	af00      	add	r7, sp, #0
 8014a1e:	6078      	str	r0, [r7, #4]
 8014a20:	460b      	mov	r3, r1
 8014a22:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014a24:	2300      	movs	r3, #0
 8014a26:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014a28:	2300      	movs	r3, #0
 8014a2a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8014a2c:	687b      	ldr	r3, [r7, #4]
 8014a2e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8014a32:	78fa      	ldrb	r2, [r7, #3]
 8014a34:	4611      	mov	r1, r2
 8014a36:	4618      	mov	r0, r3
 8014a38:	f7f5 fb11 	bl	800a05e <HAL_PCD_EP_SetStall>
 8014a3c:	4603      	mov	r3, r0
 8014a3e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014a40:	7bfb      	ldrb	r3, [r7, #15]
 8014a42:	4618      	mov	r0, r3
 8014a44:	f000 f8de 	bl	8014c04 <USBD_Get_USB_Status>
 8014a48:	4603      	mov	r3, r0
 8014a4a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014a4c:	7bbb      	ldrb	r3, [r7, #14]
}
 8014a4e:	4618      	mov	r0, r3
 8014a50:	3710      	adds	r7, #16
 8014a52:	46bd      	mov	sp, r7
 8014a54:	bd80      	pop	{r7, pc}

08014a56 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014a56:	b580      	push	{r7, lr}
 8014a58:	b084      	sub	sp, #16
 8014a5a:	af00      	add	r7, sp, #0
 8014a5c:	6078      	str	r0, [r7, #4]
 8014a5e:	460b      	mov	r3, r1
 8014a60:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014a62:	2300      	movs	r3, #0
 8014a64:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014a66:	2300      	movs	r3, #0
 8014a68:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8014a6a:	687b      	ldr	r3, [r7, #4]
 8014a6c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8014a70:	78fa      	ldrb	r2, [r7, #3]
 8014a72:	4611      	mov	r1, r2
 8014a74:	4618      	mov	r0, r3
 8014a76:	f7f5 fb55 	bl	800a124 <HAL_PCD_EP_ClrStall>
 8014a7a:	4603      	mov	r3, r0
 8014a7c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014a7e:	7bfb      	ldrb	r3, [r7, #15]
 8014a80:	4618      	mov	r0, r3
 8014a82:	f000 f8bf 	bl	8014c04 <USBD_Get_USB_Status>
 8014a86:	4603      	mov	r3, r0
 8014a88:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014a8a:	7bbb      	ldrb	r3, [r7, #14]
}
 8014a8c:	4618      	mov	r0, r3
 8014a8e:	3710      	adds	r7, #16
 8014a90:	46bd      	mov	sp, r7
 8014a92:	bd80      	pop	{r7, pc}

08014a94 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014a94:	b480      	push	{r7}
 8014a96:	b085      	sub	sp, #20
 8014a98:	af00      	add	r7, sp, #0
 8014a9a:	6078      	str	r0, [r7, #4]
 8014a9c:	460b      	mov	r3, r1
 8014a9e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8014aa0:	687b      	ldr	r3, [r7, #4]
 8014aa2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8014aa6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8014aa8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8014aac:	2b00      	cmp	r3, #0
 8014aae:	da0b      	bge.n	8014ac8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8014ab0:	78fb      	ldrb	r3, [r7, #3]
 8014ab2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8014ab6:	68f9      	ldr	r1, [r7, #12]
 8014ab8:	4613      	mov	r3, r2
 8014aba:	00db      	lsls	r3, r3, #3
 8014abc:	4413      	add	r3, r2
 8014abe:	009b      	lsls	r3, r3, #2
 8014ac0:	440b      	add	r3, r1
 8014ac2:	3316      	adds	r3, #22
 8014ac4:	781b      	ldrb	r3, [r3, #0]
 8014ac6:	e00b      	b.n	8014ae0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8014ac8:	78fb      	ldrb	r3, [r7, #3]
 8014aca:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8014ace:	68f9      	ldr	r1, [r7, #12]
 8014ad0:	4613      	mov	r3, r2
 8014ad2:	00db      	lsls	r3, r3, #3
 8014ad4:	4413      	add	r3, r2
 8014ad6:	009b      	lsls	r3, r3, #2
 8014ad8:	440b      	add	r3, r1
 8014ada:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8014ade:	781b      	ldrb	r3, [r3, #0]
  }
}
 8014ae0:	4618      	mov	r0, r3
 8014ae2:	3714      	adds	r7, #20
 8014ae4:	46bd      	mov	sp, r7
 8014ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014aea:	4770      	bx	lr

08014aec <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8014aec:	b580      	push	{r7, lr}
 8014aee:	b084      	sub	sp, #16
 8014af0:	af00      	add	r7, sp, #0
 8014af2:	6078      	str	r0, [r7, #4]
 8014af4:	460b      	mov	r3, r1
 8014af6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014af8:	2300      	movs	r3, #0
 8014afa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014afc:	2300      	movs	r3, #0
 8014afe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8014b00:	687b      	ldr	r3, [r7, #4]
 8014b02:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8014b06:	78fa      	ldrb	r2, [r7, #3]
 8014b08:	4611      	mov	r1, r2
 8014b0a:	4618      	mov	r0, r3
 8014b0c:	f7f5 f944 	bl	8009d98 <HAL_PCD_SetAddress>
 8014b10:	4603      	mov	r3, r0
 8014b12:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014b14:	7bfb      	ldrb	r3, [r7, #15]
 8014b16:	4618      	mov	r0, r3
 8014b18:	f000 f874 	bl	8014c04 <USBD_Get_USB_Status>
 8014b1c:	4603      	mov	r3, r0
 8014b1e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014b20:	7bbb      	ldrb	r3, [r7, #14]
}
 8014b22:	4618      	mov	r0, r3
 8014b24:	3710      	adds	r7, #16
 8014b26:	46bd      	mov	sp, r7
 8014b28:	bd80      	pop	{r7, pc}

08014b2a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8014b2a:	b580      	push	{r7, lr}
 8014b2c:	b086      	sub	sp, #24
 8014b2e:	af00      	add	r7, sp, #0
 8014b30:	60f8      	str	r0, [r7, #12]
 8014b32:	607a      	str	r2, [r7, #4]
 8014b34:	603b      	str	r3, [r7, #0]
 8014b36:	460b      	mov	r3, r1
 8014b38:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014b3a:	2300      	movs	r3, #0
 8014b3c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014b3e:	2300      	movs	r3, #0
 8014b40:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8014b42:	68fb      	ldr	r3, [r7, #12]
 8014b44:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8014b48:	7af9      	ldrb	r1, [r7, #11]
 8014b4a:	683b      	ldr	r3, [r7, #0]
 8014b4c:	687a      	ldr	r2, [r7, #4]
 8014b4e:	f7f5 fa4c 	bl	8009fea <HAL_PCD_EP_Transmit>
 8014b52:	4603      	mov	r3, r0
 8014b54:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014b56:	7dfb      	ldrb	r3, [r7, #23]
 8014b58:	4618      	mov	r0, r3
 8014b5a:	f000 f853 	bl	8014c04 <USBD_Get_USB_Status>
 8014b5e:	4603      	mov	r3, r0
 8014b60:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8014b62:	7dbb      	ldrb	r3, [r7, #22]
}
 8014b64:	4618      	mov	r0, r3
 8014b66:	3718      	adds	r7, #24
 8014b68:	46bd      	mov	sp, r7
 8014b6a:	bd80      	pop	{r7, pc}

08014b6c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8014b6c:	b580      	push	{r7, lr}
 8014b6e:	b086      	sub	sp, #24
 8014b70:	af00      	add	r7, sp, #0
 8014b72:	60f8      	str	r0, [r7, #12]
 8014b74:	607a      	str	r2, [r7, #4]
 8014b76:	603b      	str	r3, [r7, #0]
 8014b78:	460b      	mov	r3, r1
 8014b7a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014b7c:	2300      	movs	r3, #0
 8014b7e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014b80:	2300      	movs	r3, #0
 8014b82:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8014b84:	68fb      	ldr	r3, [r7, #12]
 8014b86:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8014b8a:	7af9      	ldrb	r1, [r7, #11]
 8014b8c:	683b      	ldr	r3, [r7, #0]
 8014b8e:	687a      	ldr	r2, [r7, #4]
 8014b90:	f7f5 f9d8 	bl	8009f44 <HAL_PCD_EP_Receive>
 8014b94:	4603      	mov	r3, r0
 8014b96:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014b98:	7dfb      	ldrb	r3, [r7, #23]
 8014b9a:	4618      	mov	r0, r3
 8014b9c:	f000 f832 	bl	8014c04 <USBD_Get_USB_Status>
 8014ba0:	4603      	mov	r3, r0
 8014ba2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8014ba4:	7dbb      	ldrb	r3, [r7, #22]
}
 8014ba6:	4618      	mov	r0, r3
 8014ba8:	3718      	adds	r7, #24
 8014baa:	46bd      	mov	sp, r7
 8014bac:	bd80      	pop	{r7, pc}

08014bae <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014bae:	b580      	push	{r7, lr}
 8014bb0:	b082      	sub	sp, #8
 8014bb2:	af00      	add	r7, sp, #0
 8014bb4:	6078      	str	r0, [r7, #4]
 8014bb6:	460b      	mov	r3, r1
 8014bb8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8014bba:	687b      	ldr	r3, [r7, #4]
 8014bbc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8014bc0:	78fa      	ldrb	r2, [r7, #3]
 8014bc2:	4611      	mov	r1, r2
 8014bc4:	4618      	mov	r0, r3
 8014bc6:	f7f5 f9f8 	bl	8009fba <HAL_PCD_EP_GetRxCount>
 8014bca:	4603      	mov	r3, r0
}
 8014bcc:	4618      	mov	r0, r3
 8014bce:	3708      	adds	r7, #8
 8014bd0:	46bd      	mov	sp, r7
 8014bd2:	bd80      	pop	{r7, pc}

08014bd4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8014bd4:	b480      	push	{r7}
 8014bd6:	b083      	sub	sp, #12
 8014bd8:	af00      	add	r7, sp, #0
 8014bda:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8014bdc:	4b03      	ldr	r3, [pc, #12]	@ (8014bec <USBD_static_malloc+0x18>)
}
 8014bde:	4618      	mov	r0, r3
 8014be0:	370c      	adds	r7, #12
 8014be2:	46bd      	mov	sp, r7
 8014be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014be8:	4770      	bx	lr
 8014bea:	bf00      	nop
 8014bec:	24005910 	.word	0x24005910

08014bf0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8014bf0:	b480      	push	{r7}
 8014bf2:	b083      	sub	sp, #12
 8014bf4:	af00      	add	r7, sp, #0
 8014bf6:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 8014bf8:	bf00      	nop
 8014bfa:	370c      	adds	r7, #12
 8014bfc:	46bd      	mov	sp, r7
 8014bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c02:	4770      	bx	lr

08014c04 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8014c04:	b480      	push	{r7}
 8014c06:	b085      	sub	sp, #20
 8014c08:	af00      	add	r7, sp, #0
 8014c0a:	4603      	mov	r3, r0
 8014c0c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014c0e:	2300      	movs	r3, #0
 8014c10:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8014c12:	79fb      	ldrb	r3, [r7, #7]
 8014c14:	2b03      	cmp	r3, #3
 8014c16:	d817      	bhi.n	8014c48 <USBD_Get_USB_Status+0x44>
 8014c18:	a201      	add	r2, pc, #4	@ (adr r2, 8014c20 <USBD_Get_USB_Status+0x1c>)
 8014c1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014c1e:	bf00      	nop
 8014c20:	08014c31 	.word	0x08014c31
 8014c24:	08014c37 	.word	0x08014c37
 8014c28:	08014c3d 	.word	0x08014c3d
 8014c2c:	08014c43 	.word	0x08014c43
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8014c30:	2300      	movs	r3, #0
 8014c32:	73fb      	strb	r3, [r7, #15]
    break;
 8014c34:	e00b      	b.n	8014c4e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8014c36:	2303      	movs	r3, #3
 8014c38:	73fb      	strb	r3, [r7, #15]
    break;
 8014c3a:	e008      	b.n	8014c4e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8014c3c:	2301      	movs	r3, #1
 8014c3e:	73fb      	strb	r3, [r7, #15]
    break;
 8014c40:	e005      	b.n	8014c4e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8014c42:	2303      	movs	r3, #3
 8014c44:	73fb      	strb	r3, [r7, #15]
    break;
 8014c46:	e002      	b.n	8014c4e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8014c48:	2303      	movs	r3, #3
 8014c4a:	73fb      	strb	r3, [r7, #15]
    break;
 8014c4c:	bf00      	nop
  }
  return usb_status;
 8014c4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8014c50:	4618      	mov	r0, r3
 8014c52:	3714      	adds	r7, #20
 8014c54:	46bd      	mov	sp, r7
 8014c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c5a:	4770      	bx	lr

08014c5c <atof>:
 8014c5c:	2100      	movs	r1, #0
 8014c5e:	f000 bdb1 	b.w	80157c4 <strtod>

08014c62 <sulp>:
 8014c62:	b570      	push	{r4, r5, r6, lr}
 8014c64:	4604      	mov	r4, r0
 8014c66:	460d      	mov	r5, r1
 8014c68:	4616      	mov	r6, r2
 8014c6a:	ec45 4b10 	vmov	d0, r4, r5
 8014c6e:	f003 f965 	bl	8017f3c <__ulp>
 8014c72:	b17e      	cbz	r6, 8014c94 <sulp+0x32>
 8014c74:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8014c78:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8014c7c:	2b00      	cmp	r3, #0
 8014c7e:	dd09      	ble.n	8014c94 <sulp+0x32>
 8014c80:	051b      	lsls	r3, r3, #20
 8014c82:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 8014c86:	2000      	movs	r0, #0
 8014c88:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 8014c8c:	ec41 0b17 	vmov	d7, r0, r1
 8014c90:	ee20 0b07 	vmul.f64	d0, d0, d7
 8014c94:	bd70      	pop	{r4, r5, r6, pc}
	...

08014c98 <_strtod_l>:
 8014c98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014c9c:	ed2d 8b0a 	vpush	{d8-d12}
 8014ca0:	b097      	sub	sp, #92	@ 0x5c
 8014ca2:	4688      	mov	r8, r1
 8014ca4:	920e      	str	r2, [sp, #56]	@ 0x38
 8014ca6:	2200      	movs	r2, #0
 8014ca8:	9212      	str	r2, [sp, #72]	@ 0x48
 8014caa:	9005      	str	r0, [sp, #20]
 8014cac:	f04f 0a00 	mov.w	sl, #0
 8014cb0:	f04f 0b00 	mov.w	fp, #0
 8014cb4:	460a      	mov	r2, r1
 8014cb6:	9211      	str	r2, [sp, #68]	@ 0x44
 8014cb8:	7811      	ldrb	r1, [r2, #0]
 8014cba:	292b      	cmp	r1, #43	@ 0x2b
 8014cbc:	d04c      	beq.n	8014d58 <_strtod_l+0xc0>
 8014cbe:	d839      	bhi.n	8014d34 <_strtod_l+0x9c>
 8014cc0:	290d      	cmp	r1, #13
 8014cc2:	d833      	bhi.n	8014d2c <_strtod_l+0x94>
 8014cc4:	2908      	cmp	r1, #8
 8014cc6:	d833      	bhi.n	8014d30 <_strtod_l+0x98>
 8014cc8:	2900      	cmp	r1, #0
 8014cca:	d03c      	beq.n	8014d46 <_strtod_l+0xae>
 8014ccc:	2200      	movs	r2, #0
 8014cce:	9208      	str	r2, [sp, #32]
 8014cd0:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8014cd2:	782a      	ldrb	r2, [r5, #0]
 8014cd4:	2a30      	cmp	r2, #48	@ 0x30
 8014cd6:	f040 80b5 	bne.w	8014e44 <_strtod_l+0x1ac>
 8014cda:	786a      	ldrb	r2, [r5, #1]
 8014cdc:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8014ce0:	2a58      	cmp	r2, #88	@ 0x58
 8014ce2:	d170      	bne.n	8014dc6 <_strtod_l+0x12e>
 8014ce4:	9302      	str	r3, [sp, #8]
 8014ce6:	9b08      	ldr	r3, [sp, #32]
 8014ce8:	9301      	str	r3, [sp, #4]
 8014cea:	ab12      	add	r3, sp, #72	@ 0x48
 8014cec:	9300      	str	r3, [sp, #0]
 8014cee:	4a8b      	ldr	r2, [pc, #556]	@ (8014f1c <_strtod_l+0x284>)
 8014cf0:	9805      	ldr	r0, [sp, #20]
 8014cf2:	ab13      	add	r3, sp, #76	@ 0x4c
 8014cf4:	a911      	add	r1, sp, #68	@ 0x44
 8014cf6:	f002 fa13 	bl	8017120 <__gethex>
 8014cfa:	f010 060f 	ands.w	r6, r0, #15
 8014cfe:	4604      	mov	r4, r0
 8014d00:	d005      	beq.n	8014d0e <_strtod_l+0x76>
 8014d02:	2e06      	cmp	r6, #6
 8014d04:	d12a      	bne.n	8014d5c <_strtod_l+0xc4>
 8014d06:	3501      	adds	r5, #1
 8014d08:	2300      	movs	r3, #0
 8014d0a:	9511      	str	r5, [sp, #68]	@ 0x44
 8014d0c:	9308      	str	r3, [sp, #32]
 8014d0e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014d10:	2b00      	cmp	r3, #0
 8014d12:	f040 852f 	bne.w	8015774 <_strtod_l+0xadc>
 8014d16:	9b08      	ldr	r3, [sp, #32]
 8014d18:	ec4b ab10 	vmov	d0, sl, fp
 8014d1c:	b1cb      	cbz	r3, 8014d52 <_strtod_l+0xba>
 8014d1e:	eeb1 0b40 	vneg.f64	d0, d0
 8014d22:	b017      	add	sp, #92	@ 0x5c
 8014d24:	ecbd 8b0a 	vpop	{d8-d12}
 8014d28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014d2c:	2920      	cmp	r1, #32
 8014d2e:	d1cd      	bne.n	8014ccc <_strtod_l+0x34>
 8014d30:	3201      	adds	r2, #1
 8014d32:	e7c0      	b.n	8014cb6 <_strtod_l+0x1e>
 8014d34:	292d      	cmp	r1, #45	@ 0x2d
 8014d36:	d1c9      	bne.n	8014ccc <_strtod_l+0x34>
 8014d38:	2101      	movs	r1, #1
 8014d3a:	9108      	str	r1, [sp, #32]
 8014d3c:	1c51      	adds	r1, r2, #1
 8014d3e:	9111      	str	r1, [sp, #68]	@ 0x44
 8014d40:	7852      	ldrb	r2, [r2, #1]
 8014d42:	2a00      	cmp	r2, #0
 8014d44:	d1c4      	bne.n	8014cd0 <_strtod_l+0x38>
 8014d46:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014d48:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 8014d4c:	2b00      	cmp	r3, #0
 8014d4e:	f040 850f 	bne.w	8015770 <_strtod_l+0xad8>
 8014d52:	ec4b ab10 	vmov	d0, sl, fp
 8014d56:	e7e4      	b.n	8014d22 <_strtod_l+0x8a>
 8014d58:	2100      	movs	r1, #0
 8014d5a:	e7ee      	b.n	8014d3a <_strtod_l+0xa2>
 8014d5c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8014d5e:	b13a      	cbz	r2, 8014d70 <_strtod_l+0xd8>
 8014d60:	2135      	movs	r1, #53	@ 0x35
 8014d62:	a814      	add	r0, sp, #80	@ 0x50
 8014d64:	f003 f9e1 	bl	801812a <__copybits>
 8014d68:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8014d6a:	9805      	ldr	r0, [sp, #20]
 8014d6c:	f002 fdb2 	bl	80178d4 <_Bfree>
 8014d70:	1e73      	subs	r3, r6, #1
 8014d72:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8014d74:	2b04      	cmp	r3, #4
 8014d76:	d806      	bhi.n	8014d86 <_strtod_l+0xee>
 8014d78:	e8df f003 	tbb	[pc, r3]
 8014d7c:	201d0314 	.word	0x201d0314
 8014d80:	14          	.byte	0x14
 8014d81:	00          	.byte	0x00
 8014d82:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 8014d86:	05e3      	lsls	r3, r4, #23
 8014d88:	bf48      	it	mi
 8014d8a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8014d8e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8014d92:	0d1b      	lsrs	r3, r3, #20
 8014d94:	051b      	lsls	r3, r3, #20
 8014d96:	2b00      	cmp	r3, #0
 8014d98:	d1b9      	bne.n	8014d0e <_strtod_l+0x76>
 8014d9a:	f001 faeb 	bl	8016374 <__errno>
 8014d9e:	2322      	movs	r3, #34	@ 0x22
 8014da0:	6003      	str	r3, [r0, #0]
 8014da2:	e7b4      	b.n	8014d0e <_strtod_l+0x76>
 8014da4:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 8014da8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8014dac:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8014db0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8014db4:	e7e7      	b.n	8014d86 <_strtod_l+0xee>
 8014db6:	f8df b16c 	ldr.w	fp, [pc, #364]	@ 8014f24 <_strtod_l+0x28c>
 8014dba:	e7e4      	b.n	8014d86 <_strtod_l+0xee>
 8014dbc:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8014dc0:	f04f 3aff 	mov.w	sl, #4294967295
 8014dc4:	e7df      	b.n	8014d86 <_strtod_l+0xee>
 8014dc6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8014dc8:	1c5a      	adds	r2, r3, #1
 8014dca:	9211      	str	r2, [sp, #68]	@ 0x44
 8014dcc:	785b      	ldrb	r3, [r3, #1]
 8014dce:	2b30      	cmp	r3, #48	@ 0x30
 8014dd0:	d0f9      	beq.n	8014dc6 <_strtod_l+0x12e>
 8014dd2:	2b00      	cmp	r3, #0
 8014dd4:	d09b      	beq.n	8014d0e <_strtod_l+0x76>
 8014dd6:	2301      	movs	r3, #1
 8014dd8:	2600      	movs	r6, #0
 8014dda:	9307      	str	r3, [sp, #28]
 8014ddc:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8014dde:	930a      	str	r3, [sp, #40]	@ 0x28
 8014de0:	46b1      	mov	r9, r6
 8014de2:	4635      	mov	r5, r6
 8014de4:	220a      	movs	r2, #10
 8014de6:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8014de8:	7804      	ldrb	r4, [r0, #0]
 8014dea:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 8014dee:	b2d9      	uxtb	r1, r3
 8014df0:	2909      	cmp	r1, #9
 8014df2:	d929      	bls.n	8014e48 <_strtod_l+0x1b0>
 8014df4:	494a      	ldr	r1, [pc, #296]	@ (8014f20 <_strtod_l+0x288>)
 8014df6:	2201      	movs	r2, #1
 8014df8:	f001 fa60 	bl	80162bc <strncmp>
 8014dfc:	b378      	cbz	r0, 8014e5e <_strtod_l+0x1c6>
 8014dfe:	2000      	movs	r0, #0
 8014e00:	4622      	mov	r2, r4
 8014e02:	462b      	mov	r3, r5
 8014e04:	4607      	mov	r7, r0
 8014e06:	9006      	str	r0, [sp, #24]
 8014e08:	2a65      	cmp	r2, #101	@ 0x65
 8014e0a:	d001      	beq.n	8014e10 <_strtod_l+0x178>
 8014e0c:	2a45      	cmp	r2, #69	@ 0x45
 8014e0e:	d117      	bne.n	8014e40 <_strtod_l+0x1a8>
 8014e10:	b91b      	cbnz	r3, 8014e1a <_strtod_l+0x182>
 8014e12:	9b07      	ldr	r3, [sp, #28]
 8014e14:	4303      	orrs	r3, r0
 8014e16:	d096      	beq.n	8014d46 <_strtod_l+0xae>
 8014e18:	2300      	movs	r3, #0
 8014e1a:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 8014e1e:	f108 0201 	add.w	r2, r8, #1
 8014e22:	9211      	str	r2, [sp, #68]	@ 0x44
 8014e24:	f898 2001 	ldrb.w	r2, [r8, #1]
 8014e28:	2a2b      	cmp	r2, #43	@ 0x2b
 8014e2a:	d06b      	beq.n	8014f04 <_strtod_l+0x26c>
 8014e2c:	2a2d      	cmp	r2, #45	@ 0x2d
 8014e2e:	d071      	beq.n	8014f14 <_strtod_l+0x27c>
 8014e30:	f04f 0e00 	mov.w	lr, #0
 8014e34:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 8014e38:	2c09      	cmp	r4, #9
 8014e3a:	d979      	bls.n	8014f30 <_strtod_l+0x298>
 8014e3c:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 8014e40:	2400      	movs	r4, #0
 8014e42:	e094      	b.n	8014f6e <_strtod_l+0x2d6>
 8014e44:	2300      	movs	r3, #0
 8014e46:	e7c7      	b.n	8014dd8 <_strtod_l+0x140>
 8014e48:	2d08      	cmp	r5, #8
 8014e4a:	f100 0001 	add.w	r0, r0, #1
 8014e4e:	bfd4      	ite	le
 8014e50:	fb02 3909 	mlale	r9, r2, r9, r3
 8014e54:	fb02 3606 	mlagt	r6, r2, r6, r3
 8014e58:	3501      	adds	r5, #1
 8014e5a:	9011      	str	r0, [sp, #68]	@ 0x44
 8014e5c:	e7c3      	b.n	8014de6 <_strtod_l+0x14e>
 8014e5e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8014e60:	1c5a      	adds	r2, r3, #1
 8014e62:	9211      	str	r2, [sp, #68]	@ 0x44
 8014e64:	785a      	ldrb	r2, [r3, #1]
 8014e66:	b375      	cbz	r5, 8014ec6 <_strtod_l+0x22e>
 8014e68:	4607      	mov	r7, r0
 8014e6a:	462b      	mov	r3, r5
 8014e6c:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8014e70:	2909      	cmp	r1, #9
 8014e72:	d913      	bls.n	8014e9c <_strtod_l+0x204>
 8014e74:	2101      	movs	r1, #1
 8014e76:	9106      	str	r1, [sp, #24]
 8014e78:	e7c6      	b.n	8014e08 <_strtod_l+0x170>
 8014e7a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8014e7c:	1c5a      	adds	r2, r3, #1
 8014e7e:	9211      	str	r2, [sp, #68]	@ 0x44
 8014e80:	785a      	ldrb	r2, [r3, #1]
 8014e82:	3001      	adds	r0, #1
 8014e84:	2a30      	cmp	r2, #48	@ 0x30
 8014e86:	d0f8      	beq.n	8014e7a <_strtod_l+0x1e2>
 8014e88:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8014e8c:	2b08      	cmp	r3, #8
 8014e8e:	f200 8476 	bhi.w	801577e <_strtod_l+0xae6>
 8014e92:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8014e94:	930a      	str	r3, [sp, #40]	@ 0x28
 8014e96:	4607      	mov	r7, r0
 8014e98:	2000      	movs	r0, #0
 8014e9a:	4603      	mov	r3, r0
 8014e9c:	3a30      	subs	r2, #48	@ 0x30
 8014e9e:	f100 0101 	add.w	r1, r0, #1
 8014ea2:	d023      	beq.n	8014eec <_strtod_l+0x254>
 8014ea4:	440f      	add	r7, r1
 8014ea6:	eb00 0c03 	add.w	ip, r0, r3
 8014eaa:	4619      	mov	r1, r3
 8014eac:	240a      	movs	r4, #10
 8014eae:	4561      	cmp	r1, ip
 8014eb0:	d10b      	bne.n	8014eca <_strtod_l+0x232>
 8014eb2:	1c5c      	adds	r4, r3, #1
 8014eb4:	4403      	add	r3, r0
 8014eb6:	2b08      	cmp	r3, #8
 8014eb8:	4404      	add	r4, r0
 8014eba:	dc11      	bgt.n	8014ee0 <_strtod_l+0x248>
 8014ebc:	230a      	movs	r3, #10
 8014ebe:	fb03 2909 	mla	r9, r3, r9, r2
 8014ec2:	2100      	movs	r1, #0
 8014ec4:	e013      	b.n	8014eee <_strtod_l+0x256>
 8014ec6:	4628      	mov	r0, r5
 8014ec8:	e7dc      	b.n	8014e84 <_strtod_l+0x1ec>
 8014eca:	2908      	cmp	r1, #8
 8014ecc:	f101 0101 	add.w	r1, r1, #1
 8014ed0:	dc02      	bgt.n	8014ed8 <_strtod_l+0x240>
 8014ed2:	fb04 f909 	mul.w	r9, r4, r9
 8014ed6:	e7ea      	b.n	8014eae <_strtod_l+0x216>
 8014ed8:	2910      	cmp	r1, #16
 8014eda:	bfd8      	it	le
 8014edc:	4366      	mulle	r6, r4
 8014ede:	e7e6      	b.n	8014eae <_strtod_l+0x216>
 8014ee0:	2b0f      	cmp	r3, #15
 8014ee2:	dcee      	bgt.n	8014ec2 <_strtod_l+0x22a>
 8014ee4:	230a      	movs	r3, #10
 8014ee6:	fb03 2606 	mla	r6, r3, r6, r2
 8014eea:	e7ea      	b.n	8014ec2 <_strtod_l+0x22a>
 8014eec:	461c      	mov	r4, r3
 8014eee:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8014ef0:	1c5a      	adds	r2, r3, #1
 8014ef2:	9211      	str	r2, [sp, #68]	@ 0x44
 8014ef4:	785a      	ldrb	r2, [r3, #1]
 8014ef6:	4608      	mov	r0, r1
 8014ef8:	4623      	mov	r3, r4
 8014efa:	e7b7      	b.n	8014e6c <_strtod_l+0x1d4>
 8014efc:	2301      	movs	r3, #1
 8014efe:	2700      	movs	r7, #0
 8014f00:	9306      	str	r3, [sp, #24]
 8014f02:	e786      	b.n	8014e12 <_strtod_l+0x17a>
 8014f04:	f04f 0e00 	mov.w	lr, #0
 8014f08:	f108 0202 	add.w	r2, r8, #2
 8014f0c:	9211      	str	r2, [sp, #68]	@ 0x44
 8014f0e:	f898 2002 	ldrb.w	r2, [r8, #2]
 8014f12:	e78f      	b.n	8014e34 <_strtod_l+0x19c>
 8014f14:	f04f 0e01 	mov.w	lr, #1
 8014f18:	e7f6      	b.n	8014f08 <_strtod_l+0x270>
 8014f1a:	bf00      	nop
 8014f1c:	08019dd4 	.word	0x08019dd4
 8014f20:	08019dbc 	.word	0x08019dbc
 8014f24:	7ff00000 	.word	0x7ff00000
 8014f28:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8014f2a:	1c54      	adds	r4, r2, #1
 8014f2c:	9411      	str	r4, [sp, #68]	@ 0x44
 8014f2e:	7852      	ldrb	r2, [r2, #1]
 8014f30:	2a30      	cmp	r2, #48	@ 0x30
 8014f32:	d0f9      	beq.n	8014f28 <_strtod_l+0x290>
 8014f34:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 8014f38:	2c08      	cmp	r4, #8
 8014f3a:	d881      	bhi.n	8014e40 <_strtod_l+0x1a8>
 8014f3c:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 8014f40:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8014f42:	9209      	str	r2, [sp, #36]	@ 0x24
 8014f44:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8014f46:	1c51      	adds	r1, r2, #1
 8014f48:	9111      	str	r1, [sp, #68]	@ 0x44
 8014f4a:	7852      	ldrb	r2, [r2, #1]
 8014f4c:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 8014f50:	2c09      	cmp	r4, #9
 8014f52:	d938      	bls.n	8014fc6 <_strtod_l+0x32e>
 8014f54:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8014f56:	1b0c      	subs	r4, r1, r4
 8014f58:	2c08      	cmp	r4, #8
 8014f5a:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 8014f5e:	dc02      	bgt.n	8014f66 <_strtod_l+0x2ce>
 8014f60:	4564      	cmp	r4, ip
 8014f62:	bfa8      	it	ge
 8014f64:	4664      	movge	r4, ip
 8014f66:	f1be 0f00 	cmp.w	lr, #0
 8014f6a:	d000      	beq.n	8014f6e <_strtod_l+0x2d6>
 8014f6c:	4264      	negs	r4, r4
 8014f6e:	2b00      	cmp	r3, #0
 8014f70:	d14e      	bne.n	8015010 <_strtod_l+0x378>
 8014f72:	9b07      	ldr	r3, [sp, #28]
 8014f74:	4318      	orrs	r0, r3
 8014f76:	f47f aeca 	bne.w	8014d0e <_strtod_l+0x76>
 8014f7a:	9b06      	ldr	r3, [sp, #24]
 8014f7c:	2b00      	cmp	r3, #0
 8014f7e:	f47f aee2 	bne.w	8014d46 <_strtod_l+0xae>
 8014f82:	2a69      	cmp	r2, #105	@ 0x69
 8014f84:	d027      	beq.n	8014fd6 <_strtod_l+0x33e>
 8014f86:	dc24      	bgt.n	8014fd2 <_strtod_l+0x33a>
 8014f88:	2a49      	cmp	r2, #73	@ 0x49
 8014f8a:	d024      	beq.n	8014fd6 <_strtod_l+0x33e>
 8014f8c:	2a4e      	cmp	r2, #78	@ 0x4e
 8014f8e:	f47f aeda 	bne.w	8014d46 <_strtod_l+0xae>
 8014f92:	4997      	ldr	r1, [pc, #604]	@ (80151f0 <_strtod_l+0x558>)
 8014f94:	a811      	add	r0, sp, #68	@ 0x44
 8014f96:	f002 fae5 	bl	8017564 <__match>
 8014f9a:	2800      	cmp	r0, #0
 8014f9c:	f43f aed3 	beq.w	8014d46 <_strtod_l+0xae>
 8014fa0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8014fa2:	781b      	ldrb	r3, [r3, #0]
 8014fa4:	2b28      	cmp	r3, #40	@ 0x28
 8014fa6:	d12d      	bne.n	8015004 <_strtod_l+0x36c>
 8014fa8:	4992      	ldr	r1, [pc, #584]	@ (80151f4 <_strtod_l+0x55c>)
 8014faa:	aa14      	add	r2, sp, #80	@ 0x50
 8014fac:	a811      	add	r0, sp, #68	@ 0x44
 8014fae:	f002 faed 	bl	801758c <__hexnan>
 8014fb2:	2805      	cmp	r0, #5
 8014fb4:	d126      	bne.n	8015004 <_strtod_l+0x36c>
 8014fb6:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8014fb8:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 8014fbc:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8014fc0:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8014fc4:	e6a3      	b.n	8014d0e <_strtod_l+0x76>
 8014fc6:	240a      	movs	r4, #10
 8014fc8:	fb04 2c0c 	mla	ip, r4, ip, r2
 8014fcc:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 8014fd0:	e7b8      	b.n	8014f44 <_strtod_l+0x2ac>
 8014fd2:	2a6e      	cmp	r2, #110	@ 0x6e
 8014fd4:	e7db      	b.n	8014f8e <_strtod_l+0x2f6>
 8014fd6:	4988      	ldr	r1, [pc, #544]	@ (80151f8 <_strtod_l+0x560>)
 8014fd8:	a811      	add	r0, sp, #68	@ 0x44
 8014fda:	f002 fac3 	bl	8017564 <__match>
 8014fde:	2800      	cmp	r0, #0
 8014fe0:	f43f aeb1 	beq.w	8014d46 <_strtod_l+0xae>
 8014fe4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8014fe6:	4985      	ldr	r1, [pc, #532]	@ (80151fc <_strtod_l+0x564>)
 8014fe8:	3b01      	subs	r3, #1
 8014fea:	a811      	add	r0, sp, #68	@ 0x44
 8014fec:	9311      	str	r3, [sp, #68]	@ 0x44
 8014fee:	f002 fab9 	bl	8017564 <__match>
 8014ff2:	b910      	cbnz	r0, 8014ffa <_strtod_l+0x362>
 8014ff4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8014ff6:	3301      	adds	r3, #1
 8014ff8:	9311      	str	r3, [sp, #68]	@ 0x44
 8014ffa:	f8df b214 	ldr.w	fp, [pc, #532]	@ 8015210 <_strtod_l+0x578>
 8014ffe:	f04f 0a00 	mov.w	sl, #0
 8015002:	e684      	b.n	8014d0e <_strtod_l+0x76>
 8015004:	487e      	ldr	r0, [pc, #504]	@ (8015200 <_strtod_l+0x568>)
 8015006:	f001 f9f3 	bl	80163f0 <nan>
 801500a:	ec5b ab10 	vmov	sl, fp, d0
 801500e:	e67e      	b.n	8014d0e <_strtod_l+0x76>
 8015010:	ee07 9a90 	vmov	s15, r9
 8015014:	1be2      	subs	r2, r4, r7
 8015016:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801501a:	2d00      	cmp	r5, #0
 801501c:	bf08      	it	eq
 801501e:	461d      	moveq	r5, r3
 8015020:	2b10      	cmp	r3, #16
 8015022:	9209      	str	r2, [sp, #36]	@ 0x24
 8015024:	461a      	mov	r2, r3
 8015026:	bfa8      	it	ge
 8015028:	2210      	movge	r2, #16
 801502a:	2b09      	cmp	r3, #9
 801502c:	ec5b ab17 	vmov	sl, fp, d7
 8015030:	dc15      	bgt.n	801505e <_strtod_l+0x3c6>
 8015032:	1be1      	subs	r1, r4, r7
 8015034:	2900      	cmp	r1, #0
 8015036:	f43f ae6a 	beq.w	8014d0e <_strtod_l+0x76>
 801503a:	eba4 0107 	sub.w	r1, r4, r7
 801503e:	dd72      	ble.n	8015126 <_strtod_l+0x48e>
 8015040:	2916      	cmp	r1, #22
 8015042:	dc59      	bgt.n	80150f8 <_strtod_l+0x460>
 8015044:	4b6f      	ldr	r3, [pc, #444]	@ (8015204 <_strtod_l+0x56c>)
 8015046:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8015048:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801504c:	ed93 7b00 	vldr	d7, [r3]
 8015050:	ec4b ab16 	vmov	d6, sl, fp
 8015054:	ee27 7b06 	vmul.f64	d7, d7, d6
 8015058:	ec5b ab17 	vmov	sl, fp, d7
 801505c:	e657      	b.n	8014d0e <_strtod_l+0x76>
 801505e:	4969      	ldr	r1, [pc, #420]	@ (8015204 <_strtod_l+0x56c>)
 8015060:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8015064:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 8015068:	ee06 6a90 	vmov	s13, r6
 801506c:	2b0f      	cmp	r3, #15
 801506e:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 8015072:	eea7 6b05 	vfma.f64	d6, d7, d5
 8015076:	ec5b ab16 	vmov	sl, fp, d6
 801507a:	ddda      	ble.n	8015032 <_strtod_l+0x39a>
 801507c:	1a9a      	subs	r2, r3, r2
 801507e:	1be1      	subs	r1, r4, r7
 8015080:	440a      	add	r2, r1
 8015082:	2a00      	cmp	r2, #0
 8015084:	f340 8094 	ble.w	80151b0 <_strtod_l+0x518>
 8015088:	f012 000f 	ands.w	r0, r2, #15
 801508c:	d00a      	beq.n	80150a4 <_strtod_l+0x40c>
 801508e:	495d      	ldr	r1, [pc, #372]	@ (8015204 <_strtod_l+0x56c>)
 8015090:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8015094:	ed91 7b00 	vldr	d7, [r1]
 8015098:	ec4b ab16 	vmov	d6, sl, fp
 801509c:	ee27 7b06 	vmul.f64	d7, d7, d6
 80150a0:	ec5b ab17 	vmov	sl, fp, d7
 80150a4:	f032 020f 	bics.w	r2, r2, #15
 80150a8:	d073      	beq.n	8015192 <_strtod_l+0x4fa>
 80150aa:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 80150ae:	dd47      	ble.n	8015140 <_strtod_l+0x4a8>
 80150b0:	2400      	movs	r4, #0
 80150b2:	4625      	mov	r5, r4
 80150b4:	9407      	str	r4, [sp, #28]
 80150b6:	4626      	mov	r6, r4
 80150b8:	9a05      	ldr	r2, [sp, #20]
 80150ba:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8015210 <_strtod_l+0x578>
 80150be:	2322      	movs	r3, #34	@ 0x22
 80150c0:	6013      	str	r3, [r2, #0]
 80150c2:	f04f 0a00 	mov.w	sl, #0
 80150c6:	9b07      	ldr	r3, [sp, #28]
 80150c8:	2b00      	cmp	r3, #0
 80150ca:	f43f ae20 	beq.w	8014d0e <_strtod_l+0x76>
 80150ce:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80150d0:	9805      	ldr	r0, [sp, #20]
 80150d2:	f002 fbff 	bl	80178d4 <_Bfree>
 80150d6:	9805      	ldr	r0, [sp, #20]
 80150d8:	4631      	mov	r1, r6
 80150da:	f002 fbfb 	bl	80178d4 <_Bfree>
 80150de:	9805      	ldr	r0, [sp, #20]
 80150e0:	4629      	mov	r1, r5
 80150e2:	f002 fbf7 	bl	80178d4 <_Bfree>
 80150e6:	9907      	ldr	r1, [sp, #28]
 80150e8:	9805      	ldr	r0, [sp, #20]
 80150ea:	f002 fbf3 	bl	80178d4 <_Bfree>
 80150ee:	9805      	ldr	r0, [sp, #20]
 80150f0:	4621      	mov	r1, r4
 80150f2:	f002 fbef 	bl	80178d4 <_Bfree>
 80150f6:	e60a      	b.n	8014d0e <_strtod_l+0x76>
 80150f8:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 80150fc:	1be0      	subs	r0, r4, r7
 80150fe:	4281      	cmp	r1, r0
 8015100:	dbbc      	blt.n	801507c <_strtod_l+0x3e4>
 8015102:	4a40      	ldr	r2, [pc, #256]	@ (8015204 <_strtod_l+0x56c>)
 8015104:	f1c3 030f 	rsb	r3, r3, #15
 8015108:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 801510c:	ed91 7b00 	vldr	d7, [r1]
 8015110:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8015112:	ec4b ab16 	vmov	d6, sl, fp
 8015116:	1acb      	subs	r3, r1, r3
 8015118:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 801511c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8015120:	ed92 6b00 	vldr	d6, [r2]
 8015124:	e796      	b.n	8015054 <_strtod_l+0x3bc>
 8015126:	3116      	adds	r1, #22
 8015128:	dba8      	blt.n	801507c <_strtod_l+0x3e4>
 801512a:	4b36      	ldr	r3, [pc, #216]	@ (8015204 <_strtod_l+0x56c>)
 801512c:	1b3c      	subs	r4, r7, r4
 801512e:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8015132:	ed94 7b00 	vldr	d7, [r4]
 8015136:	ec4b ab16 	vmov	d6, sl, fp
 801513a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801513e:	e78b      	b.n	8015058 <_strtod_l+0x3c0>
 8015140:	2000      	movs	r0, #0
 8015142:	ec4b ab17 	vmov	d7, sl, fp
 8015146:	4e30      	ldr	r6, [pc, #192]	@ (8015208 <_strtod_l+0x570>)
 8015148:	1112      	asrs	r2, r2, #4
 801514a:	4601      	mov	r1, r0
 801514c:	2a01      	cmp	r2, #1
 801514e:	dc23      	bgt.n	8015198 <_strtod_l+0x500>
 8015150:	b108      	cbz	r0, 8015156 <_strtod_l+0x4be>
 8015152:	ec5b ab17 	vmov	sl, fp, d7
 8015156:	4a2c      	ldr	r2, [pc, #176]	@ (8015208 <_strtod_l+0x570>)
 8015158:	482c      	ldr	r0, [pc, #176]	@ (801520c <_strtod_l+0x574>)
 801515a:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 801515e:	ed92 7b00 	vldr	d7, [r2]
 8015162:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8015166:	ec4b ab16 	vmov	d6, sl, fp
 801516a:	4a29      	ldr	r2, [pc, #164]	@ (8015210 <_strtod_l+0x578>)
 801516c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8015170:	ee17 1a90 	vmov	r1, s15
 8015174:	400a      	ands	r2, r1
 8015176:	4282      	cmp	r2, r0
 8015178:	ec5b ab17 	vmov	sl, fp, d7
 801517c:	d898      	bhi.n	80150b0 <_strtod_l+0x418>
 801517e:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 8015182:	4282      	cmp	r2, r0
 8015184:	bf86      	itte	hi
 8015186:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 8015214 <_strtod_l+0x57c>
 801518a:	f04f 3aff 	movhi.w	sl, #4294967295
 801518e:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 8015192:	2200      	movs	r2, #0
 8015194:	9206      	str	r2, [sp, #24]
 8015196:	e076      	b.n	8015286 <_strtod_l+0x5ee>
 8015198:	f012 0f01 	tst.w	r2, #1
 801519c:	d004      	beq.n	80151a8 <_strtod_l+0x510>
 801519e:	ed96 6b00 	vldr	d6, [r6]
 80151a2:	2001      	movs	r0, #1
 80151a4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80151a8:	3101      	adds	r1, #1
 80151aa:	1052      	asrs	r2, r2, #1
 80151ac:	3608      	adds	r6, #8
 80151ae:	e7cd      	b.n	801514c <_strtod_l+0x4b4>
 80151b0:	d0ef      	beq.n	8015192 <_strtod_l+0x4fa>
 80151b2:	4252      	negs	r2, r2
 80151b4:	f012 000f 	ands.w	r0, r2, #15
 80151b8:	d00a      	beq.n	80151d0 <_strtod_l+0x538>
 80151ba:	4912      	ldr	r1, [pc, #72]	@ (8015204 <_strtod_l+0x56c>)
 80151bc:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 80151c0:	ed91 7b00 	vldr	d7, [r1]
 80151c4:	ec4b ab16 	vmov	d6, sl, fp
 80151c8:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80151cc:	ec5b ab17 	vmov	sl, fp, d7
 80151d0:	1112      	asrs	r2, r2, #4
 80151d2:	d0de      	beq.n	8015192 <_strtod_l+0x4fa>
 80151d4:	2a1f      	cmp	r2, #31
 80151d6:	dd1f      	ble.n	8015218 <_strtod_l+0x580>
 80151d8:	2400      	movs	r4, #0
 80151da:	4625      	mov	r5, r4
 80151dc:	9407      	str	r4, [sp, #28]
 80151de:	4626      	mov	r6, r4
 80151e0:	9a05      	ldr	r2, [sp, #20]
 80151e2:	2322      	movs	r3, #34	@ 0x22
 80151e4:	f04f 0a00 	mov.w	sl, #0
 80151e8:	f04f 0b00 	mov.w	fp, #0
 80151ec:	6013      	str	r3, [r2, #0]
 80151ee:	e76a      	b.n	80150c6 <_strtod_l+0x42e>
 80151f0:	08019f1e 	.word	0x08019f1e
 80151f4:	08019dc0 	.word	0x08019dc0
 80151f8:	08019f16 	.word	0x08019f16
 80151fc:	08019f50 	.word	0x08019f50
 8015200:	0801a1dc 	.word	0x0801a1dc
 8015204:	0801a0c8 	.word	0x0801a0c8
 8015208:	0801a0a0 	.word	0x0801a0a0
 801520c:	7ca00000 	.word	0x7ca00000
 8015210:	7ff00000 	.word	0x7ff00000
 8015214:	7fefffff 	.word	0x7fefffff
 8015218:	f012 0110 	ands.w	r1, r2, #16
 801521c:	bf18      	it	ne
 801521e:	216a      	movne	r1, #106	@ 0x6a
 8015220:	9106      	str	r1, [sp, #24]
 8015222:	ec4b ab17 	vmov	d7, sl, fp
 8015226:	49b0      	ldr	r1, [pc, #704]	@ (80154e8 <_strtod_l+0x850>)
 8015228:	2000      	movs	r0, #0
 801522a:	07d6      	lsls	r6, r2, #31
 801522c:	d504      	bpl.n	8015238 <_strtod_l+0x5a0>
 801522e:	ed91 6b00 	vldr	d6, [r1]
 8015232:	2001      	movs	r0, #1
 8015234:	ee27 7b06 	vmul.f64	d7, d7, d6
 8015238:	1052      	asrs	r2, r2, #1
 801523a:	f101 0108 	add.w	r1, r1, #8
 801523e:	d1f4      	bne.n	801522a <_strtod_l+0x592>
 8015240:	b108      	cbz	r0, 8015246 <_strtod_l+0x5ae>
 8015242:	ec5b ab17 	vmov	sl, fp, d7
 8015246:	9a06      	ldr	r2, [sp, #24]
 8015248:	b1b2      	cbz	r2, 8015278 <_strtod_l+0x5e0>
 801524a:	f3cb 510a 	ubfx	r1, fp, #20, #11
 801524e:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 8015252:	2a00      	cmp	r2, #0
 8015254:	4658      	mov	r0, fp
 8015256:	dd0f      	ble.n	8015278 <_strtod_l+0x5e0>
 8015258:	2a1f      	cmp	r2, #31
 801525a:	dd55      	ble.n	8015308 <_strtod_l+0x670>
 801525c:	2a34      	cmp	r2, #52	@ 0x34
 801525e:	bfde      	ittt	le
 8015260:	f04f 32ff 	movle.w	r2, #4294967295
 8015264:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 8015268:	408a      	lslle	r2, r1
 801526a:	f04f 0a00 	mov.w	sl, #0
 801526e:	bfcc      	ite	gt
 8015270:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8015274:	ea02 0b00 	andle.w	fp, r2, r0
 8015278:	ec4b ab17 	vmov	d7, sl, fp
 801527c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8015280:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015284:	d0a8      	beq.n	80151d8 <_strtod_l+0x540>
 8015286:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8015288:	9805      	ldr	r0, [sp, #20]
 801528a:	f8cd 9000 	str.w	r9, [sp]
 801528e:	462a      	mov	r2, r5
 8015290:	f002 fb88 	bl	80179a4 <__s2b>
 8015294:	9007      	str	r0, [sp, #28]
 8015296:	2800      	cmp	r0, #0
 8015298:	f43f af0a 	beq.w	80150b0 <_strtod_l+0x418>
 801529c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801529e:	1b3f      	subs	r7, r7, r4
 80152a0:	2b00      	cmp	r3, #0
 80152a2:	bfb4      	ite	lt
 80152a4:	463b      	movlt	r3, r7
 80152a6:	2300      	movge	r3, #0
 80152a8:	930a      	str	r3, [sp, #40]	@ 0x28
 80152aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80152ac:	ed9f bb8a 	vldr	d11, [pc, #552]	@ 80154d8 <_strtod_l+0x840>
 80152b0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80152b4:	2400      	movs	r4, #0
 80152b6:	930d      	str	r3, [sp, #52]	@ 0x34
 80152b8:	4625      	mov	r5, r4
 80152ba:	9b07      	ldr	r3, [sp, #28]
 80152bc:	9805      	ldr	r0, [sp, #20]
 80152be:	6859      	ldr	r1, [r3, #4]
 80152c0:	f002 fac8 	bl	8017854 <_Balloc>
 80152c4:	4606      	mov	r6, r0
 80152c6:	2800      	cmp	r0, #0
 80152c8:	f43f aef6 	beq.w	80150b8 <_strtod_l+0x420>
 80152cc:	9b07      	ldr	r3, [sp, #28]
 80152ce:	691a      	ldr	r2, [r3, #16]
 80152d0:	ec4b ab19 	vmov	d9, sl, fp
 80152d4:	3202      	adds	r2, #2
 80152d6:	f103 010c 	add.w	r1, r3, #12
 80152da:	0092      	lsls	r2, r2, #2
 80152dc:	300c      	adds	r0, #12
 80152de:	f001 f876 	bl	80163ce <memcpy>
 80152e2:	eeb0 0b49 	vmov.f64	d0, d9
 80152e6:	9805      	ldr	r0, [sp, #20]
 80152e8:	aa14      	add	r2, sp, #80	@ 0x50
 80152ea:	a913      	add	r1, sp, #76	@ 0x4c
 80152ec:	f002 fe96 	bl	801801c <__d2b>
 80152f0:	9012      	str	r0, [sp, #72]	@ 0x48
 80152f2:	2800      	cmp	r0, #0
 80152f4:	f43f aee0 	beq.w	80150b8 <_strtod_l+0x420>
 80152f8:	9805      	ldr	r0, [sp, #20]
 80152fa:	2101      	movs	r1, #1
 80152fc:	f002 fbe8 	bl	8017ad0 <__i2b>
 8015300:	4605      	mov	r5, r0
 8015302:	b940      	cbnz	r0, 8015316 <_strtod_l+0x67e>
 8015304:	2500      	movs	r5, #0
 8015306:	e6d7      	b.n	80150b8 <_strtod_l+0x420>
 8015308:	f04f 31ff 	mov.w	r1, #4294967295
 801530c:	fa01 f202 	lsl.w	r2, r1, r2
 8015310:	ea02 0a0a 	and.w	sl, r2, sl
 8015314:	e7b0      	b.n	8015278 <_strtod_l+0x5e0>
 8015316:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 8015318:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801531a:	2f00      	cmp	r7, #0
 801531c:	bfab      	itete	ge
 801531e:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 8015320:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 8015322:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 8015326:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 801532a:	bfac      	ite	ge
 801532c:	eb07 0903 	addge.w	r9, r7, r3
 8015330:	eba3 0807 	sublt.w	r8, r3, r7
 8015334:	9b06      	ldr	r3, [sp, #24]
 8015336:	1aff      	subs	r7, r7, r3
 8015338:	4417      	add	r7, r2
 801533a:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 801533e:	4a6b      	ldr	r2, [pc, #428]	@ (80154ec <_strtod_l+0x854>)
 8015340:	3f01      	subs	r7, #1
 8015342:	4297      	cmp	r7, r2
 8015344:	da51      	bge.n	80153ea <_strtod_l+0x752>
 8015346:	1bd1      	subs	r1, r2, r7
 8015348:	291f      	cmp	r1, #31
 801534a:	eba3 0301 	sub.w	r3, r3, r1
 801534e:	f04f 0201 	mov.w	r2, #1
 8015352:	dc3e      	bgt.n	80153d2 <_strtod_l+0x73a>
 8015354:	408a      	lsls	r2, r1
 8015356:	920c      	str	r2, [sp, #48]	@ 0x30
 8015358:	2200      	movs	r2, #0
 801535a:	920b      	str	r2, [sp, #44]	@ 0x2c
 801535c:	eb09 0703 	add.w	r7, r9, r3
 8015360:	4498      	add	r8, r3
 8015362:	9b06      	ldr	r3, [sp, #24]
 8015364:	45b9      	cmp	r9, r7
 8015366:	4498      	add	r8, r3
 8015368:	464b      	mov	r3, r9
 801536a:	bfa8      	it	ge
 801536c:	463b      	movge	r3, r7
 801536e:	4543      	cmp	r3, r8
 8015370:	bfa8      	it	ge
 8015372:	4643      	movge	r3, r8
 8015374:	2b00      	cmp	r3, #0
 8015376:	bfc2      	ittt	gt
 8015378:	1aff      	subgt	r7, r7, r3
 801537a:	eba8 0803 	subgt.w	r8, r8, r3
 801537e:	eba9 0903 	subgt.w	r9, r9, r3
 8015382:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015384:	2b00      	cmp	r3, #0
 8015386:	dd16      	ble.n	80153b6 <_strtod_l+0x71e>
 8015388:	4629      	mov	r1, r5
 801538a:	9805      	ldr	r0, [sp, #20]
 801538c:	461a      	mov	r2, r3
 801538e:	f002 fc5f 	bl	8017c50 <__pow5mult>
 8015392:	4605      	mov	r5, r0
 8015394:	2800      	cmp	r0, #0
 8015396:	d0b5      	beq.n	8015304 <_strtod_l+0x66c>
 8015398:	4601      	mov	r1, r0
 801539a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801539c:	9805      	ldr	r0, [sp, #20]
 801539e:	f002 fbad 	bl	8017afc <__multiply>
 80153a2:	900f      	str	r0, [sp, #60]	@ 0x3c
 80153a4:	2800      	cmp	r0, #0
 80153a6:	f43f ae87 	beq.w	80150b8 <_strtod_l+0x420>
 80153aa:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80153ac:	9805      	ldr	r0, [sp, #20]
 80153ae:	f002 fa91 	bl	80178d4 <_Bfree>
 80153b2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80153b4:	9312      	str	r3, [sp, #72]	@ 0x48
 80153b6:	2f00      	cmp	r7, #0
 80153b8:	dc1b      	bgt.n	80153f2 <_strtod_l+0x75a>
 80153ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80153bc:	2b00      	cmp	r3, #0
 80153be:	dd21      	ble.n	8015404 <_strtod_l+0x76c>
 80153c0:	4631      	mov	r1, r6
 80153c2:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80153c4:	9805      	ldr	r0, [sp, #20]
 80153c6:	f002 fc43 	bl	8017c50 <__pow5mult>
 80153ca:	4606      	mov	r6, r0
 80153cc:	b9d0      	cbnz	r0, 8015404 <_strtod_l+0x76c>
 80153ce:	2600      	movs	r6, #0
 80153d0:	e672      	b.n	80150b8 <_strtod_l+0x420>
 80153d2:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 80153d6:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 80153da:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 80153de:	37e2      	adds	r7, #226	@ 0xe2
 80153e0:	fa02 f107 	lsl.w	r1, r2, r7
 80153e4:	910b      	str	r1, [sp, #44]	@ 0x2c
 80153e6:	920c      	str	r2, [sp, #48]	@ 0x30
 80153e8:	e7b8      	b.n	801535c <_strtod_l+0x6c4>
 80153ea:	2200      	movs	r2, #0
 80153ec:	920b      	str	r2, [sp, #44]	@ 0x2c
 80153ee:	2201      	movs	r2, #1
 80153f0:	e7f9      	b.n	80153e6 <_strtod_l+0x74e>
 80153f2:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80153f4:	9805      	ldr	r0, [sp, #20]
 80153f6:	463a      	mov	r2, r7
 80153f8:	f002 fc84 	bl	8017d04 <__lshift>
 80153fc:	9012      	str	r0, [sp, #72]	@ 0x48
 80153fe:	2800      	cmp	r0, #0
 8015400:	d1db      	bne.n	80153ba <_strtod_l+0x722>
 8015402:	e659      	b.n	80150b8 <_strtod_l+0x420>
 8015404:	f1b8 0f00 	cmp.w	r8, #0
 8015408:	dd07      	ble.n	801541a <_strtod_l+0x782>
 801540a:	4631      	mov	r1, r6
 801540c:	9805      	ldr	r0, [sp, #20]
 801540e:	4642      	mov	r2, r8
 8015410:	f002 fc78 	bl	8017d04 <__lshift>
 8015414:	4606      	mov	r6, r0
 8015416:	2800      	cmp	r0, #0
 8015418:	d0d9      	beq.n	80153ce <_strtod_l+0x736>
 801541a:	f1b9 0f00 	cmp.w	r9, #0
 801541e:	dd08      	ble.n	8015432 <_strtod_l+0x79a>
 8015420:	4629      	mov	r1, r5
 8015422:	9805      	ldr	r0, [sp, #20]
 8015424:	464a      	mov	r2, r9
 8015426:	f002 fc6d 	bl	8017d04 <__lshift>
 801542a:	4605      	mov	r5, r0
 801542c:	2800      	cmp	r0, #0
 801542e:	f43f ae43 	beq.w	80150b8 <_strtod_l+0x420>
 8015432:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8015434:	9805      	ldr	r0, [sp, #20]
 8015436:	4632      	mov	r2, r6
 8015438:	f002 fcec 	bl	8017e14 <__mdiff>
 801543c:	4604      	mov	r4, r0
 801543e:	2800      	cmp	r0, #0
 8015440:	f43f ae3a 	beq.w	80150b8 <_strtod_l+0x420>
 8015444:	2300      	movs	r3, #0
 8015446:	f8d0 800c 	ldr.w	r8, [r0, #12]
 801544a:	60c3      	str	r3, [r0, #12]
 801544c:	4629      	mov	r1, r5
 801544e:	f002 fcc5 	bl	8017ddc <__mcmp>
 8015452:	2800      	cmp	r0, #0
 8015454:	da4e      	bge.n	80154f4 <_strtod_l+0x85c>
 8015456:	ea58 080a 	orrs.w	r8, r8, sl
 801545a:	d174      	bne.n	8015546 <_strtod_l+0x8ae>
 801545c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8015460:	2b00      	cmp	r3, #0
 8015462:	d170      	bne.n	8015546 <_strtod_l+0x8ae>
 8015464:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8015468:	0d1b      	lsrs	r3, r3, #20
 801546a:	051b      	lsls	r3, r3, #20
 801546c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8015470:	d969      	bls.n	8015546 <_strtod_l+0x8ae>
 8015472:	6963      	ldr	r3, [r4, #20]
 8015474:	b913      	cbnz	r3, 801547c <_strtod_l+0x7e4>
 8015476:	6923      	ldr	r3, [r4, #16]
 8015478:	2b01      	cmp	r3, #1
 801547a:	dd64      	ble.n	8015546 <_strtod_l+0x8ae>
 801547c:	4621      	mov	r1, r4
 801547e:	2201      	movs	r2, #1
 8015480:	9805      	ldr	r0, [sp, #20]
 8015482:	f002 fc3f 	bl	8017d04 <__lshift>
 8015486:	4629      	mov	r1, r5
 8015488:	4604      	mov	r4, r0
 801548a:	f002 fca7 	bl	8017ddc <__mcmp>
 801548e:	2800      	cmp	r0, #0
 8015490:	dd59      	ble.n	8015546 <_strtod_l+0x8ae>
 8015492:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8015496:	9a06      	ldr	r2, [sp, #24]
 8015498:	0d1b      	lsrs	r3, r3, #20
 801549a:	051b      	lsls	r3, r3, #20
 801549c:	2a00      	cmp	r2, #0
 801549e:	d070      	beq.n	8015582 <_strtod_l+0x8ea>
 80154a0:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80154a4:	d86d      	bhi.n	8015582 <_strtod_l+0x8ea>
 80154a6:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80154aa:	f67f ae99 	bls.w	80151e0 <_strtod_l+0x548>
 80154ae:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 80154e0 <_strtod_l+0x848>
 80154b2:	ec4b ab16 	vmov	d6, sl, fp
 80154b6:	4b0e      	ldr	r3, [pc, #56]	@ (80154f0 <_strtod_l+0x858>)
 80154b8:	ee26 7b07 	vmul.f64	d7, d6, d7
 80154bc:	ee17 2a90 	vmov	r2, s15
 80154c0:	4013      	ands	r3, r2
 80154c2:	ec5b ab17 	vmov	sl, fp, d7
 80154c6:	2b00      	cmp	r3, #0
 80154c8:	f47f ae01 	bne.w	80150ce <_strtod_l+0x436>
 80154cc:	9a05      	ldr	r2, [sp, #20]
 80154ce:	2322      	movs	r3, #34	@ 0x22
 80154d0:	6013      	str	r3, [r2, #0]
 80154d2:	e5fc      	b.n	80150ce <_strtod_l+0x436>
 80154d4:	f3af 8000 	nop.w
 80154d8:	ffc00000 	.word	0xffc00000
 80154dc:	41dfffff 	.word	0x41dfffff
 80154e0:	00000000 	.word	0x00000000
 80154e4:	39500000 	.word	0x39500000
 80154e8:	08019de8 	.word	0x08019de8
 80154ec:	fffffc02 	.word	0xfffffc02
 80154f0:	7ff00000 	.word	0x7ff00000
 80154f4:	46d9      	mov	r9, fp
 80154f6:	d15d      	bne.n	80155b4 <_strtod_l+0x91c>
 80154f8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80154fc:	f1b8 0f00 	cmp.w	r8, #0
 8015500:	d02a      	beq.n	8015558 <_strtod_l+0x8c0>
 8015502:	4aab      	ldr	r2, [pc, #684]	@ (80157b0 <_strtod_l+0xb18>)
 8015504:	4293      	cmp	r3, r2
 8015506:	d12a      	bne.n	801555e <_strtod_l+0x8c6>
 8015508:	9b06      	ldr	r3, [sp, #24]
 801550a:	4652      	mov	r2, sl
 801550c:	b1fb      	cbz	r3, 801554e <_strtod_l+0x8b6>
 801550e:	4ba9      	ldr	r3, [pc, #676]	@ (80157b4 <_strtod_l+0xb1c>)
 8015510:	ea0b 0303 	and.w	r3, fp, r3
 8015514:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8015518:	f04f 31ff 	mov.w	r1, #4294967295
 801551c:	d81a      	bhi.n	8015554 <_strtod_l+0x8bc>
 801551e:	0d1b      	lsrs	r3, r3, #20
 8015520:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8015524:	fa01 f303 	lsl.w	r3, r1, r3
 8015528:	429a      	cmp	r2, r3
 801552a:	d118      	bne.n	801555e <_strtod_l+0x8c6>
 801552c:	4ba2      	ldr	r3, [pc, #648]	@ (80157b8 <_strtod_l+0xb20>)
 801552e:	4599      	cmp	r9, r3
 8015530:	d102      	bne.n	8015538 <_strtod_l+0x8a0>
 8015532:	3201      	adds	r2, #1
 8015534:	f43f adc0 	beq.w	80150b8 <_strtod_l+0x420>
 8015538:	4b9e      	ldr	r3, [pc, #632]	@ (80157b4 <_strtod_l+0xb1c>)
 801553a:	ea09 0303 	and.w	r3, r9, r3
 801553e:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 8015542:	f04f 0a00 	mov.w	sl, #0
 8015546:	9b06      	ldr	r3, [sp, #24]
 8015548:	2b00      	cmp	r3, #0
 801554a:	d1b0      	bne.n	80154ae <_strtod_l+0x816>
 801554c:	e5bf      	b.n	80150ce <_strtod_l+0x436>
 801554e:	f04f 33ff 	mov.w	r3, #4294967295
 8015552:	e7e9      	b.n	8015528 <_strtod_l+0x890>
 8015554:	460b      	mov	r3, r1
 8015556:	e7e7      	b.n	8015528 <_strtod_l+0x890>
 8015558:	ea53 030a 	orrs.w	r3, r3, sl
 801555c:	d099      	beq.n	8015492 <_strtod_l+0x7fa>
 801555e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8015560:	b1c3      	cbz	r3, 8015594 <_strtod_l+0x8fc>
 8015562:	ea13 0f09 	tst.w	r3, r9
 8015566:	d0ee      	beq.n	8015546 <_strtod_l+0x8ae>
 8015568:	9a06      	ldr	r2, [sp, #24]
 801556a:	4650      	mov	r0, sl
 801556c:	4659      	mov	r1, fp
 801556e:	f1b8 0f00 	cmp.w	r8, #0
 8015572:	d013      	beq.n	801559c <_strtod_l+0x904>
 8015574:	f7ff fb75 	bl	8014c62 <sulp>
 8015578:	ee39 7b00 	vadd.f64	d7, d9, d0
 801557c:	ec5b ab17 	vmov	sl, fp, d7
 8015580:	e7e1      	b.n	8015546 <_strtod_l+0x8ae>
 8015582:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8015586:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801558a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801558e:	f04f 3aff 	mov.w	sl, #4294967295
 8015592:	e7d8      	b.n	8015546 <_strtod_l+0x8ae>
 8015594:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015596:	ea13 0f0a 	tst.w	r3, sl
 801559a:	e7e4      	b.n	8015566 <_strtod_l+0x8ce>
 801559c:	f7ff fb61 	bl	8014c62 <sulp>
 80155a0:	ee39 0b40 	vsub.f64	d0, d9, d0
 80155a4:	eeb5 0b40 	vcmp.f64	d0, #0.0
 80155a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80155ac:	ec5b ab10 	vmov	sl, fp, d0
 80155b0:	d1c9      	bne.n	8015546 <_strtod_l+0x8ae>
 80155b2:	e615      	b.n	80151e0 <_strtod_l+0x548>
 80155b4:	4629      	mov	r1, r5
 80155b6:	4620      	mov	r0, r4
 80155b8:	f002 fd88 	bl	80180cc <__ratio>
 80155bc:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 80155c0:	eeb4 0bc7 	vcmpe.f64	d0, d7
 80155c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80155c8:	d85d      	bhi.n	8015686 <_strtod_l+0x9ee>
 80155ca:	f1b8 0f00 	cmp.w	r8, #0
 80155ce:	d164      	bne.n	801569a <_strtod_l+0xa02>
 80155d0:	f1ba 0f00 	cmp.w	sl, #0
 80155d4:	d14b      	bne.n	801566e <_strtod_l+0x9d6>
 80155d6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80155da:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 80155de:	2b00      	cmp	r3, #0
 80155e0:	d160      	bne.n	80156a4 <_strtod_l+0xa0c>
 80155e2:	eeb4 0bc8 	vcmpe.f64	d0, d8
 80155e6:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 80155ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80155ee:	d401      	bmi.n	80155f4 <_strtod_l+0x95c>
 80155f0:	ee20 8b08 	vmul.f64	d8, d0, d8
 80155f4:	eeb1 ab48 	vneg.f64	d10, d8
 80155f8:	486e      	ldr	r0, [pc, #440]	@ (80157b4 <_strtod_l+0xb1c>)
 80155fa:	4970      	ldr	r1, [pc, #448]	@ (80157bc <_strtod_l+0xb24>)
 80155fc:	ea09 0700 	and.w	r7, r9, r0
 8015600:	428f      	cmp	r7, r1
 8015602:	ec53 2b1a 	vmov	r2, r3, d10
 8015606:	d17d      	bne.n	8015704 <_strtod_l+0xa6c>
 8015608:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 801560c:	ec4b ab1c 	vmov	d12, sl, fp
 8015610:	eeb0 0b4c 	vmov.f64	d0, d12
 8015614:	f002 fc92 	bl	8017f3c <__ulp>
 8015618:	4866      	ldr	r0, [pc, #408]	@ (80157b4 <_strtod_l+0xb1c>)
 801561a:	eea0 cb0a 	vfma.f64	d12, d0, d10
 801561e:	ee1c 3a90 	vmov	r3, s25
 8015622:	4a67      	ldr	r2, [pc, #412]	@ (80157c0 <_strtod_l+0xb28>)
 8015624:	ea03 0100 	and.w	r1, r3, r0
 8015628:	4291      	cmp	r1, r2
 801562a:	ec5b ab1c 	vmov	sl, fp, d12
 801562e:	d93c      	bls.n	80156aa <_strtod_l+0xa12>
 8015630:	ee19 2a90 	vmov	r2, s19
 8015634:	4b60      	ldr	r3, [pc, #384]	@ (80157b8 <_strtod_l+0xb20>)
 8015636:	429a      	cmp	r2, r3
 8015638:	d104      	bne.n	8015644 <_strtod_l+0x9ac>
 801563a:	ee19 3a10 	vmov	r3, s18
 801563e:	3301      	adds	r3, #1
 8015640:	f43f ad3a 	beq.w	80150b8 <_strtod_l+0x420>
 8015644:	f8df b170 	ldr.w	fp, [pc, #368]	@ 80157b8 <_strtod_l+0xb20>
 8015648:	f04f 3aff 	mov.w	sl, #4294967295
 801564c:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801564e:	9805      	ldr	r0, [sp, #20]
 8015650:	f002 f940 	bl	80178d4 <_Bfree>
 8015654:	9805      	ldr	r0, [sp, #20]
 8015656:	4631      	mov	r1, r6
 8015658:	f002 f93c 	bl	80178d4 <_Bfree>
 801565c:	9805      	ldr	r0, [sp, #20]
 801565e:	4629      	mov	r1, r5
 8015660:	f002 f938 	bl	80178d4 <_Bfree>
 8015664:	9805      	ldr	r0, [sp, #20]
 8015666:	4621      	mov	r1, r4
 8015668:	f002 f934 	bl	80178d4 <_Bfree>
 801566c:	e625      	b.n	80152ba <_strtod_l+0x622>
 801566e:	f1ba 0f01 	cmp.w	sl, #1
 8015672:	d103      	bne.n	801567c <_strtod_l+0x9e4>
 8015674:	f1bb 0f00 	cmp.w	fp, #0
 8015678:	f43f adb2 	beq.w	80151e0 <_strtod_l+0x548>
 801567c:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 8015680:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 8015684:	e7b8      	b.n	80155f8 <_strtod_l+0x960>
 8015686:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 801568a:	ee20 8b08 	vmul.f64	d8, d0, d8
 801568e:	f1b8 0f00 	cmp.w	r8, #0
 8015692:	d0af      	beq.n	80155f4 <_strtod_l+0x95c>
 8015694:	eeb0 ab48 	vmov.f64	d10, d8
 8015698:	e7ae      	b.n	80155f8 <_strtod_l+0x960>
 801569a:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 801569e:	eeb0 8b4a 	vmov.f64	d8, d10
 80156a2:	e7a9      	b.n	80155f8 <_strtod_l+0x960>
 80156a4:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 80156a8:	e7a6      	b.n	80155f8 <_strtod_l+0x960>
 80156aa:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80156ae:	9b06      	ldr	r3, [sp, #24]
 80156b0:	46d9      	mov	r9, fp
 80156b2:	2b00      	cmp	r3, #0
 80156b4:	d1ca      	bne.n	801564c <_strtod_l+0x9b4>
 80156b6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80156ba:	0d1b      	lsrs	r3, r3, #20
 80156bc:	051b      	lsls	r3, r3, #20
 80156be:	429f      	cmp	r7, r3
 80156c0:	d1c4      	bne.n	801564c <_strtod_l+0x9b4>
 80156c2:	ec51 0b18 	vmov	r0, r1, d8
 80156c6:	f7eb f85f 	bl	8000788 <__aeabi_d2lz>
 80156ca:	f7eb f817 	bl	80006fc <__aeabi_l2d>
 80156ce:	f3cb 0913 	ubfx	r9, fp, #0, #20
 80156d2:	ec41 0b17 	vmov	d7, r0, r1
 80156d6:	ea49 090a 	orr.w	r9, r9, sl
 80156da:	ea59 0908 	orrs.w	r9, r9, r8
 80156de:	ee38 8b47 	vsub.f64	d8, d8, d7
 80156e2:	d03c      	beq.n	801575e <_strtod_l+0xac6>
 80156e4:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 8015798 <_strtod_l+0xb00>
 80156e8:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80156ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80156f0:	f53f aced 	bmi.w	80150ce <_strtod_l+0x436>
 80156f4:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 80157a0 <_strtod_l+0xb08>
 80156f8:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80156fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015700:	dda4      	ble.n	801564c <_strtod_l+0x9b4>
 8015702:	e4e4      	b.n	80150ce <_strtod_l+0x436>
 8015704:	9906      	ldr	r1, [sp, #24]
 8015706:	b1e1      	cbz	r1, 8015742 <_strtod_l+0xaaa>
 8015708:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 801570c:	d819      	bhi.n	8015742 <_strtod_l+0xaaa>
 801570e:	eeb4 8bcb 	vcmpe.f64	d8, d11
 8015712:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015716:	d811      	bhi.n	801573c <_strtod_l+0xaa4>
 8015718:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 801571c:	ee18 3a10 	vmov	r3, s16
 8015720:	2b01      	cmp	r3, #1
 8015722:	bf38      	it	cc
 8015724:	2301      	movcc	r3, #1
 8015726:	ee08 3a10 	vmov	s16, r3
 801572a:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 801572e:	f1b8 0f00 	cmp.w	r8, #0
 8015732:	d111      	bne.n	8015758 <_strtod_l+0xac0>
 8015734:	eeb1 7b48 	vneg.f64	d7, d8
 8015738:	ec53 2b17 	vmov	r2, r3, d7
 801573c:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 8015740:	1bcb      	subs	r3, r1, r7
 8015742:	eeb0 0b49 	vmov.f64	d0, d9
 8015746:	ec43 2b1a 	vmov	d10, r2, r3
 801574a:	f002 fbf7 	bl	8017f3c <__ulp>
 801574e:	eeaa 9b00 	vfma.f64	d9, d10, d0
 8015752:	ec5b ab19 	vmov	sl, fp, d9
 8015756:	e7aa      	b.n	80156ae <_strtod_l+0xa16>
 8015758:	eeb0 7b48 	vmov.f64	d7, d8
 801575c:	e7ec      	b.n	8015738 <_strtod_l+0xaa0>
 801575e:	ed9f 7b12 	vldr	d7, [pc, #72]	@ 80157a8 <_strtod_l+0xb10>
 8015762:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8015766:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801576a:	f57f af6f 	bpl.w	801564c <_strtod_l+0x9b4>
 801576e:	e4ae      	b.n	80150ce <_strtod_l+0x436>
 8015770:	2300      	movs	r3, #0
 8015772:	9308      	str	r3, [sp, #32]
 8015774:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8015776:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8015778:	6013      	str	r3, [r2, #0]
 801577a:	f7ff bacc 	b.w	8014d16 <_strtod_l+0x7e>
 801577e:	2a65      	cmp	r2, #101	@ 0x65
 8015780:	f43f abbc 	beq.w	8014efc <_strtod_l+0x264>
 8015784:	2a45      	cmp	r2, #69	@ 0x45
 8015786:	f43f abb9 	beq.w	8014efc <_strtod_l+0x264>
 801578a:	2301      	movs	r3, #1
 801578c:	9306      	str	r3, [sp, #24]
 801578e:	f7ff bbf0 	b.w	8014f72 <_strtod_l+0x2da>
 8015792:	bf00      	nop
 8015794:	f3af 8000 	nop.w
 8015798:	94a03595 	.word	0x94a03595
 801579c:	3fdfffff 	.word	0x3fdfffff
 80157a0:	35afe535 	.word	0x35afe535
 80157a4:	3fe00000 	.word	0x3fe00000
 80157a8:	94a03595 	.word	0x94a03595
 80157ac:	3fcfffff 	.word	0x3fcfffff
 80157b0:	000fffff 	.word	0x000fffff
 80157b4:	7ff00000 	.word	0x7ff00000
 80157b8:	7fefffff 	.word	0x7fefffff
 80157bc:	7fe00000 	.word	0x7fe00000
 80157c0:	7c9fffff 	.word	0x7c9fffff

080157c4 <strtod>:
 80157c4:	460a      	mov	r2, r1
 80157c6:	4601      	mov	r1, r0
 80157c8:	4802      	ldr	r0, [pc, #8]	@ (80157d4 <strtod+0x10>)
 80157ca:	4b03      	ldr	r3, [pc, #12]	@ (80157d8 <strtod+0x14>)
 80157cc:	6800      	ldr	r0, [r0, #0]
 80157ce:	f7ff ba63 	b.w	8014c98 <_strtod_l>
 80157d2:	bf00      	nop
 80157d4:	2400027c 	.word	0x2400027c
 80157d8:	24000110 	.word	0x24000110

080157dc <__cvt>:
 80157dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80157de:	ed2d 8b02 	vpush	{d8}
 80157e2:	eeb0 8b40 	vmov.f64	d8, d0
 80157e6:	b085      	sub	sp, #20
 80157e8:	4617      	mov	r7, r2
 80157ea:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 80157ec:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80157ee:	ee18 2a90 	vmov	r2, s17
 80157f2:	f025 0520 	bic.w	r5, r5, #32
 80157f6:	2a00      	cmp	r2, #0
 80157f8:	bfb6      	itet	lt
 80157fa:	222d      	movlt	r2, #45	@ 0x2d
 80157fc:	2200      	movge	r2, #0
 80157fe:	eeb1 8b40 	vneglt.f64	d8, d0
 8015802:	2d46      	cmp	r5, #70	@ 0x46
 8015804:	460c      	mov	r4, r1
 8015806:	701a      	strb	r2, [r3, #0]
 8015808:	d004      	beq.n	8015814 <__cvt+0x38>
 801580a:	2d45      	cmp	r5, #69	@ 0x45
 801580c:	d100      	bne.n	8015810 <__cvt+0x34>
 801580e:	3401      	adds	r4, #1
 8015810:	2102      	movs	r1, #2
 8015812:	e000      	b.n	8015816 <__cvt+0x3a>
 8015814:	2103      	movs	r1, #3
 8015816:	ab03      	add	r3, sp, #12
 8015818:	9301      	str	r3, [sp, #4]
 801581a:	ab02      	add	r3, sp, #8
 801581c:	9300      	str	r3, [sp, #0]
 801581e:	4622      	mov	r2, r4
 8015820:	4633      	mov	r3, r6
 8015822:	eeb0 0b48 	vmov.f64	d0, d8
 8015826:	f000 fe73 	bl	8016510 <_dtoa_r>
 801582a:	2d47      	cmp	r5, #71	@ 0x47
 801582c:	d114      	bne.n	8015858 <__cvt+0x7c>
 801582e:	07fb      	lsls	r3, r7, #31
 8015830:	d50a      	bpl.n	8015848 <__cvt+0x6c>
 8015832:	1902      	adds	r2, r0, r4
 8015834:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8015838:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801583c:	bf08      	it	eq
 801583e:	9203      	streq	r2, [sp, #12]
 8015840:	2130      	movs	r1, #48	@ 0x30
 8015842:	9b03      	ldr	r3, [sp, #12]
 8015844:	4293      	cmp	r3, r2
 8015846:	d319      	bcc.n	801587c <__cvt+0xa0>
 8015848:	9b03      	ldr	r3, [sp, #12]
 801584a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801584c:	1a1b      	subs	r3, r3, r0
 801584e:	6013      	str	r3, [r2, #0]
 8015850:	b005      	add	sp, #20
 8015852:	ecbd 8b02 	vpop	{d8}
 8015856:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015858:	2d46      	cmp	r5, #70	@ 0x46
 801585a:	eb00 0204 	add.w	r2, r0, r4
 801585e:	d1e9      	bne.n	8015834 <__cvt+0x58>
 8015860:	7803      	ldrb	r3, [r0, #0]
 8015862:	2b30      	cmp	r3, #48	@ 0x30
 8015864:	d107      	bne.n	8015876 <__cvt+0x9a>
 8015866:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801586a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801586e:	bf1c      	itt	ne
 8015870:	f1c4 0401 	rsbne	r4, r4, #1
 8015874:	6034      	strne	r4, [r6, #0]
 8015876:	6833      	ldr	r3, [r6, #0]
 8015878:	441a      	add	r2, r3
 801587a:	e7db      	b.n	8015834 <__cvt+0x58>
 801587c:	1c5c      	adds	r4, r3, #1
 801587e:	9403      	str	r4, [sp, #12]
 8015880:	7019      	strb	r1, [r3, #0]
 8015882:	e7de      	b.n	8015842 <__cvt+0x66>

08015884 <__exponent>:
 8015884:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015886:	2900      	cmp	r1, #0
 8015888:	bfba      	itte	lt
 801588a:	4249      	neglt	r1, r1
 801588c:	232d      	movlt	r3, #45	@ 0x2d
 801588e:	232b      	movge	r3, #43	@ 0x2b
 8015890:	2909      	cmp	r1, #9
 8015892:	7002      	strb	r2, [r0, #0]
 8015894:	7043      	strb	r3, [r0, #1]
 8015896:	dd29      	ble.n	80158ec <__exponent+0x68>
 8015898:	f10d 0307 	add.w	r3, sp, #7
 801589c:	461d      	mov	r5, r3
 801589e:	270a      	movs	r7, #10
 80158a0:	461a      	mov	r2, r3
 80158a2:	fbb1 f6f7 	udiv	r6, r1, r7
 80158a6:	fb07 1416 	mls	r4, r7, r6, r1
 80158aa:	3430      	adds	r4, #48	@ 0x30
 80158ac:	f802 4c01 	strb.w	r4, [r2, #-1]
 80158b0:	460c      	mov	r4, r1
 80158b2:	2c63      	cmp	r4, #99	@ 0x63
 80158b4:	f103 33ff 	add.w	r3, r3, #4294967295
 80158b8:	4631      	mov	r1, r6
 80158ba:	dcf1      	bgt.n	80158a0 <__exponent+0x1c>
 80158bc:	3130      	adds	r1, #48	@ 0x30
 80158be:	1e94      	subs	r4, r2, #2
 80158c0:	f803 1c01 	strb.w	r1, [r3, #-1]
 80158c4:	1c41      	adds	r1, r0, #1
 80158c6:	4623      	mov	r3, r4
 80158c8:	42ab      	cmp	r3, r5
 80158ca:	d30a      	bcc.n	80158e2 <__exponent+0x5e>
 80158cc:	f10d 0309 	add.w	r3, sp, #9
 80158d0:	1a9b      	subs	r3, r3, r2
 80158d2:	42ac      	cmp	r4, r5
 80158d4:	bf88      	it	hi
 80158d6:	2300      	movhi	r3, #0
 80158d8:	3302      	adds	r3, #2
 80158da:	4403      	add	r3, r0
 80158dc:	1a18      	subs	r0, r3, r0
 80158de:	b003      	add	sp, #12
 80158e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80158e2:	f813 6b01 	ldrb.w	r6, [r3], #1
 80158e6:	f801 6f01 	strb.w	r6, [r1, #1]!
 80158ea:	e7ed      	b.n	80158c8 <__exponent+0x44>
 80158ec:	2330      	movs	r3, #48	@ 0x30
 80158ee:	3130      	adds	r1, #48	@ 0x30
 80158f0:	7083      	strb	r3, [r0, #2]
 80158f2:	70c1      	strb	r1, [r0, #3]
 80158f4:	1d03      	adds	r3, r0, #4
 80158f6:	e7f1      	b.n	80158dc <__exponent+0x58>

080158f8 <_printf_float>:
 80158f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80158fc:	b08d      	sub	sp, #52	@ 0x34
 80158fe:	460c      	mov	r4, r1
 8015900:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8015904:	4616      	mov	r6, r2
 8015906:	461f      	mov	r7, r3
 8015908:	4605      	mov	r5, r0
 801590a:	f000 fce9 	bl	80162e0 <_localeconv_r>
 801590e:	f8d0 b000 	ldr.w	fp, [r0]
 8015912:	4658      	mov	r0, fp
 8015914:	f7ea fd5c 	bl	80003d0 <strlen>
 8015918:	2300      	movs	r3, #0
 801591a:	930a      	str	r3, [sp, #40]	@ 0x28
 801591c:	f8d8 3000 	ldr.w	r3, [r8]
 8015920:	f894 9018 	ldrb.w	r9, [r4, #24]
 8015924:	6822      	ldr	r2, [r4, #0]
 8015926:	9005      	str	r0, [sp, #20]
 8015928:	3307      	adds	r3, #7
 801592a:	f023 0307 	bic.w	r3, r3, #7
 801592e:	f103 0108 	add.w	r1, r3, #8
 8015932:	f8c8 1000 	str.w	r1, [r8]
 8015936:	ed93 0b00 	vldr	d0, [r3]
 801593a:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8015b98 <_printf_float+0x2a0>
 801593e:	eeb0 7bc0 	vabs.f64	d7, d0
 8015942:	eeb4 7b46 	vcmp.f64	d7, d6
 8015946:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801594a:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 801594e:	dd24      	ble.n	801599a <_printf_float+0xa2>
 8015950:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8015954:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015958:	d502      	bpl.n	8015960 <_printf_float+0x68>
 801595a:	232d      	movs	r3, #45	@ 0x2d
 801595c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8015960:	498f      	ldr	r1, [pc, #572]	@ (8015ba0 <_printf_float+0x2a8>)
 8015962:	4b90      	ldr	r3, [pc, #576]	@ (8015ba4 <_printf_float+0x2ac>)
 8015964:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8015968:	bf94      	ite	ls
 801596a:	4688      	movls	r8, r1
 801596c:	4698      	movhi	r8, r3
 801596e:	f022 0204 	bic.w	r2, r2, #4
 8015972:	2303      	movs	r3, #3
 8015974:	6123      	str	r3, [r4, #16]
 8015976:	6022      	str	r2, [r4, #0]
 8015978:	f04f 0a00 	mov.w	sl, #0
 801597c:	9700      	str	r7, [sp, #0]
 801597e:	4633      	mov	r3, r6
 8015980:	aa0b      	add	r2, sp, #44	@ 0x2c
 8015982:	4621      	mov	r1, r4
 8015984:	4628      	mov	r0, r5
 8015986:	f000 f9d1 	bl	8015d2c <_printf_common>
 801598a:	3001      	adds	r0, #1
 801598c:	f040 8089 	bne.w	8015aa2 <_printf_float+0x1aa>
 8015990:	f04f 30ff 	mov.w	r0, #4294967295
 8015994:	b00d      	add	sp, #52	@ 0x34
 8015996:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801599a:	eeb4 0b40 	vcmp.f64	d0, d0
 801599e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80159a2:	d709      	bvc.n	80159b8 <_printf_float+0xc0>
 80159a4:	ee10 3a90 	vmov	r3, s1
 80159a8:	2b00      	cmp	r3, #0
 80159aa:	bfbc      	itt	lt
 80159ac:	232d      	movlt	r3, #45	@ 0x2d
 80159ae:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80159b2:	497d      	ldr	r1, [pc, #500]	@ (8015ba8 <_printf_float+0x2b0>)
 80159b4:	4b7d      	ldr	r3, [pc, #500]	@ (8015bac <_printf_float+0x2b4>)
 80159b6:	e7d5      	b.n	8015964 <_printf_float+0x6c>
 80159b8:	6863      	ldr	r3, [r4, #4]
 80159ba:	1c59      	adds	r1, r3, #1
 80159bc:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 80159c0:	d139      	bne.n	8015a36 <_printf_float+0x13e>
 80159c2:	2306      	movs	r3, #6
 80159c4:	6063      	str	r3, [r4, #4]
 80159c6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80159ca:	2300      	movs	r3, #0
 80159cc:	6022      	str	r2, [r4, #0]
 80159ce:	9303      	str	r3, [sp, #12]
 80159d0:	ab0a      	add	r3, sp, #40	@ 0x28
 80159d2:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80159d6:	ab09      	add	r3, sp, #36	@ 0x24
 80159d8:	9300      	str	r3, [sp, #0]
 80159da:	6861      	ldr	r1, [r4, #4]
 80159dc:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80159e0:	4628      	mov	r0, r5
 80159e2:	f7ff fefb 	bl	80157dc <__cvt>
 80159e6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80159ea:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80159ec:	4680      	mov	r8, r0
 80159ee:	d129      	bne.n	8015a44 <_printf_float+0x14c>
 80159f0:	1cc8      	adds	r0, r1, #3
 80159f2:	db02      	blt.n	80159fa <_printf_float+0x102>
 80159f4:	6863      	ldr	r3, [r4, #4]
 80159f6:	4299      	cmp	r1, r3
 80159f8:	dd41      	ble.n	8015a7e <_printf_float+0x186>
 80159fa:	f1a9 0902 	sub.w	r9, r9, #2
 80159fe:	fa5f f989 	uxtb.w	r9, r9
 8015a02:	3901      	subs	r1, #1
 8015a04:	464a      	mov	r2, r9
 8015a06:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8015a0a:	9109      	str	r1, [sp, #36]	@ 0x24
 8015a0c:	f7ff ff3a 	bl	8015884 <__exponent>
 8015a10:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8015a12:	1813      	adds	r3, r2, r0
 8015a14:	2a01      	cmp	r2, #1
 8015a16:	4682      	mov	sl, r0
 8015a18:	6123      	str	r3, [r4, #16]
 8015a1a:	dc02      	bgt.n	8015a22 <_printf_float+0x12a>
 8015a1c:	6822      	ldr	r2, [r4, #0]
 8015a1e:	07d2      	lsls	r2, r2, #31
 8015a20:	d501      	bpl.n	8015a26 <_printf_float+0x12e>
 8015a22:	3301      	adds	r3, #1
 8015a24:	6123      	str	r3, [r4, #16]
 8015a26:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8015a2a:	2b00      	cmp	r3, #0
 8015a2c:	d0a6      	beq.n	801597c <_printf_float+0x84>
 8015a2e:	232d      	movs	r3, #45	@ 0x2d
 8015a30:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8015a34:	e7a2      	b.n	801597c <_printf_float+0x84>
 8015a36:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8015a3a:	d1c4      	bne.n	80159c6 <_printf_float+0xce>
 8015a3c:	2b00      	cmp	r3, #0
 8015a3e:	d1c2      	bne.n	80159c6 <_printf_float+0xce>
 8015a40:	2301      	movs	r3, #1
 8015a42:	e7bf      	b.n	80159c4 <_printf_float+0xcc>
 8015a44:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8015a48:	d9db      	bls.n	8015a02 <_printf_float+0x10a>
 8015a4a:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 8015a4e:	d118      	bne.n	8015a82 <_printf_float+0x18a>
 8015a50:	2900      	cmp	r1, #0
 8015a52:	6863      	ldr	r3, [r4, #4]
 8015a54:	dd0b      	ble.n	8015a6e <_printf_float+0x176>
 8015a56:	6121      	str	r1, [r4, #16]
 8015a58:	b913      	cbnz	r3, 8015a60 <_printf_float+0x168>
 8015a5a:	6822      	ldr	r2, [r4, #0]
 8015a5c:	07d0      	lsls	r0, r2, #31
 8015a5e:	d502      	bpl.n	8015a66 <_printf_float+0x16e>
 8015a60:	3301      	adds	r3, #1
 8015a62:	440b      	add	r3, r1
 8015a64:	6123      	str	r3, [r4, #16]
 8015a66:	65a1      	str	r1, [r4, #88]	@ 0x58
 8015a68:	f04f 0a00 	mov.w	sl, #0
 8015a6c:	e7db      	b.n	8015a26 <_printf_float+0x12e>
 8015a6e:	b913      	cbnz	r3, 8015a76 <_printf_float+0x17e>
 8015a70:	6822      	ldr	r2, [r4, #0]
 8015a72:	07d2      	lsls	r2, r2, #31
 8015a74:	d501      	bpl.n	8015a7a <_printf_float+0x182>
 8015a76:	3302      	adds	r3, #2
 8015a78:	e7f4      	b.n	8015a64 <_printf_float+0x16c>
 8015a7a:	2301      	movs	r3, #1
 8015a7c:	e7f2      	b.n	8015a64 <_printf_float+0x16c>
 8015a7e:	f04f 0967 	mov.w	r9, #103	@ 0x67
 8015a82:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015a84:	4299      	cmp	r1, r3
 8015a86:	db05      	blt.n	8015a94 <_printf_float+0x19c>
 8015a88:	6823      	ldr	r3, [r4, #0]
 8015a8a:	6121      	str	r1, [r4, #16]
 8015a8c:	07d8      	lsls	r0, r3, #31
 8015a8e:	d5ea      	bpl.n	8015a66 <_printf_float+0x16e>
 8015a90:	1c4b      	adds	r3, r1, #1
 8015a92:	e7e7      	b.n	8015a64 <_printf_float+0x16c>
 8015a94:	2900      	cmp	r1, #0
 8015a96:	bfd4      	ite	le
 8015a98:	f1c1 0202 	rsble	r2, r1, #2
 8015a9c:	2201      	movgt	r2, #1
 8015a9e:	4413      	add	r3, r2
 8015aa0:	e7e0      	b.n	8015a64 <_printf_float+0x16c>
 8015aa2:	6823      	ldr	r3, [r4, #0]
 8015aa4:	055a      	lsls	r2, r3, #21
 8015aa6:	d407      	bmi.n	8015ab8 <_printf_float+0x1c0>
 8015aa8:	6923      	ldr	r3, [r4, #16]
 8015aaa:	4642      	mov	r2, r8
 8015aac:	4631      	mov	r1, r6
 8015aae:	4628      	mov	r0, r5
 8015ab0:	47b8      	blx	r7
 8015ab2:	3001      	adds	r0, #1
 8015ab4:	d12a      	bne.n	8015b0c <_printf_float+0x214>
 8015ab6:	e76b      	b.n	8015990 <_printf_float+0x98>
 8015ab8:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8015abc:	f240 80e0 	bls.w	8015c80 <_printf_float+0x388>
 8015ac0:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8015ac4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8015ac8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015acc:	d133      	bne.n	8015b36 <_printf_float+0x23e>
 8015ace:	4a38      	ldr	r2, [pc, #224]	@ (8015bb0 <_printf_float+0x2b8>)
 8015ad0:	2301      	movs	r3, #1
 8015ad2:	4631      	mov	r1, r6
 8015ad4:	4628      	mov	r0, r5
 8015ad6:	47b8      	blx	r7
 8015ad8:	3001      	adds	r0, #1
 8015ada:	f43f af59 	beq.w	8015990 <_printf_float+0x98>
 8015ade:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8015ae2:	4543      	cmp	r3, r8
 8015ae4:	db02      	blt.n	8015aec <_printf_float+0x1f4>
 8015ae6:	6823      	ldr	r3, [r4, #0]
 8015ae8:	07d8      	lsls	r0, r3, #31
 8015aea:	d50f      	bpl.n	8015b0c <_printf_float+0x214>
 8015aec:	9b05      	ldr	r3, [sp, #20]
 8015aee:	465a      	mov	r2, fp
 8015af0:	4631      	mov	r1, r6
 8015af2:	4628      	mov	r0, r5
 8015af4:	47b8      	blx	r7
 8015af6:	3001      	adds	r0, #1
 8015af8:	f43f af4a 	beq.w	8015990 <_printf_float+0x98>
 8015afc:	f04f 0900 	mov.w	r9, #0
 8015b00:	f108 38ff 	add.w	r8, r8, #4294967295
 8015b04:	f104 0a1a 	add.w	sl, r4, #26
 8015b08:	45c8      	cmp	r8, r9
 8015b0a:	dc09      	bgt.n	8015b20 <_printf_float+0x228>
 8015b0c:	6823      	ldr	r3, [r4, #0]
 8015b0e:	079b      	lsls	r3, r3, #30
 8015b10:	f100 8107 	bmi.w	8015d22 <_printf_float+0x42a>
 8015b14:	68e0      	ldr	r0, [r4, #12]
 8015b16:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8015b18:	4298      	cmp	r0, r3
 8015b1a:	bfb8      	it	lt
 8015b1c:	4618      	movlt	r0, r3
 8015b1e:	e739      	b.n	8015994 <_printf_float+0x9c>
 8015b20:	2301      	movs	r3, #1
 8015b22:	4652      	mov	r2, sl
 8015b24:	4631      	mov	r1, r6
 8015b26:	4628      	mov	r0, r5
 8015b28:	47b8      	blx	r7
 8015b2a:	3001      	adds	r0, #1
 8015b2c:	f43f af30 	beq.w	8015990 <_printf_float+0x98>
 8015b30:	f109 0901 	add.w	r9, r9, #1
 8015b34:	e7e8      	b.n	8015b08 <_printf_float+0x210>
 8015b36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015b38:	2b00      	cmp	r3, #0
 8015b3a:	dc3b      	bgt.n	8015bb4 <_printf_float+0x2bc>
 8015b3c:	4a1c      	ldr	r2, [pc, #112]	@ (8015bb0 <_printf_float+0x2b8>)
 8015b3e:	2301      	movs	r3, #1
 8015b40:	4631      	mov	r1, r6
 8015b42:	4628      	mov	r0, r5
 8015b44:	47b8      	blx	r7
 8015b46:	3001      	adds	r0, #1
 8015b48:	f43f af22 	beq.w	8015990 <_printf_float+0x98>
 8015b4c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8015b50:	ea59 0303 	orrs.w	r3, r9, r3
 8015b54:	d102      	bne.n	8015b5c <_printf_float+0x264>
 8015b56:	6823      	ldr	r3, [r4, #0]
 8015b58:	07d9      	lsls	r1, r3, #31
 8015b5a:	d5d7      	bpl.n	8015b0c <_printf_float+0x214>
 8015b5c:	9b05      	ldr	r3, [sp, #20]
 8015b5e:	465a      	mov	r2, fp
 8015b60:	4631      	mov	r1, r6
 8015b62:	4628      	mov	r0, r5
 8015b64:	47b8      	blx	r7
 8015b66:	3001      	adds	r0, #1
 8015b68:	f43f af12 	beq.w	8015990 <_printf_float+0x98>
 8015b6c:	f04f 0a00 	mov.w	sl, #0
 8015b70:	f104 0b1a 	add.w	fp, r4, #26
 8015b74:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015b76:	425b      	negs	r3, r3
 8015b78:	4553      	cmp	r3, sl
 8015b7a:	dc01      	bgt.n	8015b80 <_printf_float+0x288>
 8015b7c:	464b      	mov	r3, r9
 8015b7e:	e794      	b.n	8015aaa <_printf_float+0x1b2>
 8015b80:	2301      	movs	r3, #1
 8015b82:	465a      	mov	r2, fp
 8015b84:	4631      	mov	r1, r6
 8015b86:	4628      	mov	r0, r5
 8015b88:	47b8      	blx	r7
 8015b8a:	3001      	adds	r0, #1
 8015b8c:	f43f af00 	beq.w	8015990 <_printf_float+0x98>
 8015b90:	f10a 0a01 	add.w	sl, sl, #1
 8015b94:	e7ee      	b.n	8015b74 <_printf_float+0x27c>
 8015b96:	bf00      	nop
 8015b98:	ffffffff 	.word	0xffffffff
 8015b9c:	7fefffff 	.word	0x7fefffff
 8015ba0:	08019f11 	.word	0x08019f11
 8015ba4:	08019f15 	.word	0x08019f15
 8015ba8:	08019f19 	.word	0x08019f19
 8015bac:	08019f1d 	.word	0x08019f1d
 8015bb0:	08019f21 	.word	0x08019f21
 8015bb4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8015bb6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8015bba:	4553      	cmp	r3, sl
 8015bbc:	bfa8      	it	ge
 8015bbe:	4653      	movge	r3, sl
 8015bc0:	2b00      	cmp	r3, #0
 8015bc2:	4699      	mov	r9, r3
 8015bc4:	dc37      	bgt.n	8015c36 <_printf_float+0x33e>
 8015bc6:	2300      	movs	r3, #0
 8015bc8:	9307      	str	r3, [sp, #28]
 8015bca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8015bce:	f104 021a 	add.w	r2, r4, #26
 8015bd2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8015bd4:	9907      	ldr	r1, [sp, #28]
 8015bd6:	9306      	str	r3, [sp, #24]
 8015bd8:	eba3 0309 	sub.w	r3, r3, r9
 8015bdc:	428b      	cmp	r3, r1
 8015bde:	dc31      	bgt.n	8015c44 <_printf_float+0x34c>
 8015be0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015be2:	459a      	cmp	sl, r3
 8015be4:	dc3b      	bgt.n	8015c5e <_printf_float+0x366>
 8015be6:	6823      	ldr	r3, [r4, #0]
 8015be8:	07da      	lsls	r2, r3, #31
 8015bea:	d438      	bmi.n	8015c5e <_printf_float+0x366>
 8015bec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015bee:	ebaa 0903 	sub.w	r9, sl, r3
 8015bf2:	9b06      	ldr	r3, [sp, #24]
 8015bf4:	ebaa 0303 	sub.w	r3, sl, r3
 8015bf8:	4599      	cmp	r9, r3
 8015bfa:	bfa8      	it	ge
 8015bfc:	4699      	movge	r9, r3
 8015bfe:	f1b9 0f00 	cmp.w	r9, #0
 8015c02:	dc34      	bgt.n	8015c6e <_printf_float+0x376>
 8015c04:	f04f 0800 	mov.w	r8, #0
 8015c08:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8015c0c:	f104 0b1a 	add.w	fp, r4, #26
 8015c10:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015c12:	ebaa 0303 	sub.w	r3, sl, r3
 8015c16:	eba3 0309 	sub.w	r3, r3, r9
 8015c1a:	4543      	cmp	r3, r8
 8015c1c:	f77f af76 	ble.w	8015b0c <_printf_float+0x214>
 8015c20:	2301      	movs	r3, #1
 8015c22:	465a      	mov	r2, fp
 8015c24:	4631      	mov	r1, r6
 8015c26:	4628      	mov	r0, r5
 8015c28:	47b8      	blx	r7
 8015c2a:	3001      	adds	r0, #1
 8015c2c:	f43f aeb0 	beq.w	8015990 <_printf_float+0x98>
 8015c30:	f108 0801 	add.w	r8, r8, #1
 8015c34:	e7ec      	b.n	8015c10 <_printf_float+0x318>
 8015c36:	4642      	mov	r2, r8
 8015c38:	4631      	mov	r1, r6
 8015c3a:	4628      	mov	r0, r5
 8015c3c:	47b8      	blx	r7
 8015c3e:	3001      	adds	r0, #1
 8015c40:	d1c1      	bne.n	8015bc6 <_printf_float+0x2ce>
 8015c42:	e6a5      	b.n	8015990 <_printf_float+0x98>
 8015c44:	2301      	movs	r3, #1
 8015c46:	4631      	mov	r1, r6
 8015c48:	4628      	mov	r0, r5
 8015c4a:	9206      	str	r2, [sp, #24]
 8015c4c:	47b8      	blx	r7
 8015c4e:	3001      	adds	r0, #1
 8015c50:	f43f ae9e 	beq.w	8015990 <_printf_float+0x98>
 8015c54:	9b07      	ldr	r3, [sp, #28]
 8015c56:	9a06      	ldr	r2, [sp, #24]
 8015c58:	3301      	adds	r3, #1
 8015c5a:	9307      	str	r3, [sp, #28]
 8015c5c:	e7b9      	b.n	8015bd2 <_printf_float+0x2da>
 8015c5e:	9b05      	ldr	r3, [sp, #20]
 8015c60:	465a      	mov	r2, fp
 8015c62:	4631      	mov	r1, r6
 8015c64:	4628      	mov	r0, r5
 8015c66:	47b8      	blx	r7
 8015c68:	3001      	adds	r0, #1
 8015c6a:	d1bf      	bne.n	8015bec <_printf_float+0x2f4>
 8015c6c:	e690      	b.n	8015990 <_printf_float+0x98>
 8015c6e:	9a06      	ldr	r2, [sp, #24]
 8015c70:	464b      	mov	r3, r9
 8015c72:	4442      	add	r2, r8
 8015c74:	4631      	mov	r1, r6
 8015c76:	4628      	mov	r0, r5
 8015c78:	47b8      	blx	r7
 8015c7a:	3001      	adds	r0, #1
 8015c7c:	d1c2      	bne.n	8015c04 <_printf_float+0x30c>
 8015c7e:	e687      	b.n	8015990 <_printf_float+0x98>
 8015c80:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8015c84:	f1b9 0f01 	cmp.w	r9, #1
 8015c88:	dc01      	bgt.n	8015c8e <_printf_float+0x396>
 8015c8a:	07db      	lsls	r3, r3, #31
 8015c8c:	d536      	bpl.n	8015cfc <_printf_float+0x404>
 8015c8e:	2301      	movs	r3, #1
 8015c90:	4642      	mov	r2, r8
 8015c92:	4631      	mov	r1, r6
 8015c94:	4628      	mov	r0, r5
 8015c96:	47b8      	blx	r7
 8015c98:	3001      	adds	r0, #1
 8015c9a:	f43f ae79 	beq.w	8015990 <_printf_float+0x98>
 8015c9e:	9b05      	ldr	r3, [sp, #20]
 8015ca0:	465a      	mov	r2, fp
 8015ca2:	4631      	mov	r1, r6
 8015ca4:	4628      	mov	r0, r5
 8015ca6:	47b8      	blx	r7
 8015ca8:	3001      	adds	r0, #1
 8015caa:	f43f ae71 	beq.w	8015990 <_printf_float+0x98>
 8015cae:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8015cb2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8015cb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015cba:	f109 39ff 	add.w	r9, r9, #4294967295
 8015cbe:	d018      	beq.n	8015cf2 <_printf_float+0x3fa>
 8015cc0:	464b      	mov	r3, r9
 8015cc2:	f108 0201 	add.w	r2, r8, #1
 8015cc6:	4631      	mov	r1, r6
 8015cc8:	4628      	mov	r0, r5
 8015cca:	47b8      	blx	r7
 8015ccc:	3001      	adds	r0, #1
 8015cce:	d10c      	bne.n	8015cea <_printf_float+0x3f2>
 8015cd0:	e65e      	b.n	8015990 <_printf_float+0x98>
 8015cd2:	2301      	movs	r3, #1
 8015cd4:	465a      	mov	r2, fp
 8015cd6:	4631      	mov	r1, r6
 8015cd8:	4628      	mov	r0, r5
 8015cda:	47b8      	blx	r7
 8015cdc:	3001      	adds	r0, #1
 8015cde:	f43f ae57 	beq.w	8015990 <_printf_float+0x98>
 8015ce2:	f108 0801 	add.w	r8, r8, #1
 8015ce6:	45c8      	cmp	r8, r9
 8015ce8:	dbf3      	blt.n	8015cd2 <_printf_float+0x3da>
 8015cea:	4653      	mov	r3, sl
 8015cec:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8015cf0:	e6dc      	b.n	8015aac <_printf_float+0x1b4>
 8015cf2:	f04f 0800 	mov.w	r8, #0
 8015cf6:	f104 0b1a 	add.w	fp, r4, #26
 8015cfa:	e7f4      	b.n	8015ce6 <_printf_float+0x3ee>
 8015cfc:	2301      	movs	r3, #1
 8015cfe:	4642      	mov	r2, r8
 8015d00:	e7e1      	b.n	8015cc6 <_printf_float+0x3ce>
 8015d02:	2301      	movs	r3, #1
 8015d04:	464a      	mov	r2, r9
 8015d06:	4631      	mov	r1, r6
 8015d08:	4628      	mov	r0, r5
 8015d0a:	47b8      	blx	r7
 8015d0c:	3001      	adds	r0, #1
 8015d0e:	f43f ae3f 	beq.w	8015990 <_printf_float+0x98>
 8015d12:	f108 0801 	add.w	r8, r8, #1
 8015d16:	68e3      	ldr	r3, [r4, #12]
 8015d18:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8015d1a:	1a5b      	subs	r3, r3, r1
 8015d1c:	4543      	cmp	r3, r8
 8015d1e:	dcf0      	bgt.n	8015d02 <_printf_float+0x40a>
 8015d20:	e6f8      	b.n	8015b14 <_printf_float+0x21c>
 8015d22:	f04f 0800 	mov.w	r8, #0
 8015d26:	f104 0919 	add.w	r9, r4, #25
 8015d2a:	e7f4      	b.n	8015d16 <_printf_float+0x41e>

08015d2c <_printf_common>:
 8015d2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015d30:	4616      	mov	r6, r2
 8015d32:	4698      	mov	r8, r3
 8015d34:	688a      	ldr	r2, [r1, #8]
 8015d36:	690b      	ldr	r3, [r1, #16]
 8015d38:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8015d3c:	4293      	cmp	r3, r2
 8015d3e:	bfb8      	it	lt
 8015d40:	4613      	movlt	r3, r2
 8015d42:	6033      	str	r3, [r6, #0]
 8015d44:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8015d48:	4607      	mov	r7, r0
 8015d4a:	460c      	mov	r4, r1
 8015d4c:	b10a      	cbz	r2, 8015d52 <_printf_common+0x26>
 8015d4e:	3301      	adds	r3, #1
 8015d50:	6033      	str	r3, [r6, #0]
 8015d52:	6823      	ldr	r3, [r4, #0]
 8015d54:	0699      	lsls	r1, r3, #26
 8015d56:	bf42      	ittt	mi
 8015d58:	6833      	ldrmi	r3, [r6, #0]
 8015d5a:	3302      	addmi	r3, #2
 8015d5c:	6033      	strmi	r3, [r6, #0]
 8015d5e:	6825      	ldr	r5, [r4, #0]
 8015d60:	f015 0506 	ands.w	r5, r5, #6
 8015d64:	d106      	bne.n	8015d74 <_printf_common+0x48>
 8015d66:	f104 0a19 	add.w	sl, r4, #25
 8015d6a:	68e3      	ldr	r3, [r4, #12]
 8015d6c:	6832      	ldr	r2, [r6, #0]
 8015d6e:	1a9b      	subs	r3, r3, r2
 8015d70:	42ab      	cmp	r3, r5
 8015d72:	dc26      	bgt.n	8015dc2 <_printf_common+0x96>
 8015d74:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8015d78:	6822      	ldr	r2, [r4, #0]
 8015d7a:	3b00      	subs	r3, #0
 8015d7c:	bf18      	it	ne
 8015d7e:	2301      	movne	r3, #1
 8015d80:	0692      	lsls	r2, r2, #26
 8015d82:	d42b      	bmi.n	8015ddc <_printf_common+0xb0>
 8015d84:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8015d88:	4641      	mov	r1, r8
 8015d8a:	4638      	mov	r0, r7
 8015d8c:	47c8      	blx	r9
 8015d8e:	3001      	adds	r0, #1
 8015d90:	d01e      	beq.n	8015dd0 <_printf_common+0xa4>
 8015d92:	6823      	ldr	r3, [r4, #0]
 8015d94:	6922      	ldr	r2, [r4, #16]
 8015d96:	f003 0306 	and.w	r3, r3, #6
 8015d9a:	2b04      	cmp	r3, #4
 8015d9c:	bf02      	ittt	eq
 8015d9e:	68e5      	ldreq	r5, [r4, #12]
 8015da0:	6833      	ldreq	r3, [r6, #0]
 8015da2:	1aed      	subeq	r5, r5, r3
 8015da4:	68a3      	ldr	r3, [r4, #8]
 8015da6:	bf0c      	ite	eq
 8015da8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8015dac:	2500      	movne	r5, #0
 8015dae:	4293      	cmp	r3, r2
 8015db0:	bfc4      	itt	gt
 8015db2:	1a9b      	subgt	r3, r3, r2
 8015db4:	18ed      	addgt	r5, r5, r3
 8015db6:	2600      	movs	r6, #0
 8015db8:	341a      	adds	r4, #26
 8015dba:	42b5      	cmp	r5, r6
 8015dbc:	d11a      	bne.n	8015df4 <_printf_common+0xc8>
 8015dbe:	2000      	movs	r0, #0
 8015dc0:	e008      	b.n	8015dd4 <_printf_common+0xa8>
 8015dc2:	2301      	movs	r3, #1
 8015dc4:	4652      	mov	r2, sl
 8015dc6:	4641      	mov	r1, r8
 8015dc8:	4638      	mov	r0, r7
 8015dca:	47c8      	blx	r9
 8015dcc:	3001      	adds	r0, #1
 8015dce:	d103      	bne.n	8015dd8 <_printf_common+0xac>
 8015dd0:	f04f 30ff 	mov.w	r0, #4294967295
 8015dd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015dd8:	3501      	adds	r5, #1
 8015dda:	e7c6      	b.n	8015d6a <_printf_common+0x3e>
 8015ddc:	18e1      	adds	r1, r4, r3
 8015dde:	1c5a      	adds	r2, r3, #1
 8015de0:	2030      	movs	r0, #48	@ 0x30
 8015de2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8015de6:	4422      	add	r2, r4
 8015de8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8015dec:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8015df0:	3302      	adds	r3, #2
 8015df2:	e7c7      	b.n	8015d84 <_printf_common+0x58>
 8015df4:	2301      	movs	r3, #1
 8015df6:	4622      	mov	r2, r4
 8015df8:	4641      	mov	r1, r8
 8015dfa:	4638      	mov	r0, r7
 8015dfc:	47c8      	blx	r9
 8015dfe:	3001      	adds	r0, #1
 8015e00:	d0e6      	beq.n	8015dd0 <_printf_common+0xa4>
 8015e02:	3601      	adds	r6, #1
 8015e04:	e7d9      	b.n	8015dba <_printf_common+0x8e>
	...

08015e08 <_printf_i>:
 8015e08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8015e0c:	7e0f      	ldrb	r7, [r1, #24]
 8015e0e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8015e10:	2f78      	cmp	r7, #120	@ 0x78
 8015e12:	4691      	mov	r9, r2
 8015e14:	4680      	mov	r8, r0
 8015e16:	460c      	mov	r4, r1
 8015e18:	469a      	mov	sl, r3
 8015e1a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8015e1e:	d807      	bhi.n	8015e30 <_printf_i+0x28>
 8015e20:	2f62      	cmp	r7, #98	@ 0x62
 8015e22:	d80a      	bhi.n	8015e3a <_printf_i+0x32>
 8015e24:	2f00      	cmp	r7, #0
 8015e26:	f000 80d2 	beq.w	8015fce <_printf_i+0x1c6>
 8015e2a:	2f58      	cmp	r7, #88	@ 0x58
 8015e2c:	f000 80b9 	beq.w	8015fa2 <_printf_i+0x19a>
 8015e30:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8015e34:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8015e38:	e03a      	b.n	8015eb0 <_printf_i+0xa8>
 8015e3a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8015e3e:	2b15      	cmp	r3, #21
 8015e40:	d8f6      	bhi.n	8015e30 <_printf_i+0x28>
 8015e42:	a101      	add	r1, pc, #4	@ (adr r1, 8015e48 <_printf_i+0x40>)
 8015e44:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8015e48:	08015ea1 	.word	0x08015ea1
 8015e4c:	08015eb5 	.word	0x08015eb5
 8015e50:	08015e31 	.word	0x08015e31
 8015e54:	08015e31 	.word	0x08015e31
 8015e58:	08015e31 	.word	0x08015e31
 8015e5c:	08015e31 	.word	0x08015e31
 8015e60:	08015eb5 	.word	0x08015eb5
 8015e64:	08015e31 	.word	0x08015e31
 8015e68:	08015e31 	.word	0x08015e31
 8015e6c:	08015e31 	.word	0x08015e31
 8015e70:	08015e31 	.word	0x08015e31
 8015e74:	08015fb5 	.word	0x08015fb5
 8015e78:	08015edf 	.word	0x08015edf
 8015e7c:	08015f6f 	.word	0x08015f6f
 8015e80:	08015e31 	.word	0x08015e31
 8015e84:	08015e31 	.word	0x08015e31
 8015e88:	08015fd7 	.word	0x08015fd7
 8015e8c:	08015e31 	.word	0x08015e31
 8015e90:	08015edf 	.word	0x08015edf
 8015e94:	08015e31 	.word	0x08015e31
 8015e98:	08015e31 	.word	0x08015e31
 8015e9c:	08015f77 	.word	0x08015f77
 8015ea0:	6833      	ldr	r3, [r6, #0]
 8015ea2:	1d1a      	adds	r2, r3, #4
 8015ea4:	681b      	ldr	r3, [r3, #0]
 8015ea6:	6032      	str	r2, [r6, #0]
 8015ea8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8015eac:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8015eb0:	2301      	movs	r3, #1
 8015eb2:	e09d      	b.n	8015ff0 <_printf_i+0x1e8>
 8015eb4:	6833      	ldr	r3, [r6, #0]
 8015eb6:	6820      	ldr	r0, [r4, #0]
 8015eb8:	1d19      	adds	r1, r3, #4
 8015eba:	6031      	str	r1, [r6, #0]
 8015ebc:	0606      	lsls	r6, r0, #24
 8015ebe:	d501      	bpl.n	8015ec4 <_printf_i+0xbc>
 8015ec0:	681d      	ldr	r5, [r3, #0]
 8015ec2:	e003      	b.n	8015ecc <_printf_i+0xc4>
 8015ec4:	0645      	lsls	r5, r0, #25
 8015ec6:	d5fb      	bpl.n	8015ec0 <_printf_i+0xb8>
 8015ec8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8015ecc:	2d00      	cmp	r5, #0
 8015ece:	da03      	bge.n	8015ed8 <_printf_i+0xd0>
 8015ed0:	232d      	movs	r3, #45	@ 0x2d
 8015ed2:	426d      	negs	r5, r5
 8015ed4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8015ed8:	4859      	ldr	r0, [pc, #356]	@ (8016040 <_printf_i+0x238>)
 8015eda:	230a      	movs	r3, #10
 8015edc:	e011      	b.n	8015f02 <_printf_i+0xfa>
 8015ede:	6821      	ldr	r1, [r4, #0]
 8015ee0:	6833      	ldr	r3, [r6, #0]
 8015ee2:	0608      	lsls	r0, r1, #24
 8015ee4:	f853 5b04 	ldr.w	r5, [r3], #4
 8015ee8:	d402      	bmi.n	8015ef0 <_printf_i+0xe8>
 8015eea:	0649      	lsls	r1, r1, #25
 8015eec:	bf48      	it	mi
 8015eee:	b2ad      	uxthmi	r5, r5
 8015ef0:	2f6f      	cmp	r7, #111	@ 0x6f
 8015ef2:	4853      	ldr	r0, [pc, #332]	@ (8016040 <_printf_i+0x238>)
 8015ef4:	6033      	str	r3, [r6, #0]
 8015ef6:	bf14      	ite	ne
 8015ef8:	230a      	movne	r3, #10
 8015efa:	2308      	moveq	r3, #8
 8015efc:	2100      	movs	r1, #0
 8015efe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8015f02:	6866      	ldr	r6, [r4, #4]
 8015f04:	60a6      	str	r6, [r4, #8]
 8015f06:	2e00      	cmp	r6, #0
 8015f08:	bfa2      	ittt	ge
 8015f0a:	6821      	ldrge	r1, [r4, #0]
 8015f0c:	f021 0104 	bicge.w	r1, r1, #4
 8015f10:	6021      	strge	r1, [r4, #0]
 8015f12:	b90d      	cbnz	r5, 8015f18 <_printf_i+0x110>
 8015f14:	2e00      	cmp	r6, #0
 8015f16:	d04b      	beq.n	8015fb0 <_printf_i+0x1a8>
 8015f18:	4616      	mov	r6, r2
 8015f1a:	fbb5 f1f3 	udiv	r1, r5, r3
 8015f1e:	fb03 5711 	mls	r7, r3, r1, r5
 8015f22:	5dc7      	ldrb	r7, [r0, r7]
 8015f24:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8015f28:	462f      	mov	r7, r5
 8015f2a:	42bb      	cmp	r3, r7
 8015f2c:	460d      	mov	r5, r1
 8015f2e:	d9f4      	bls.n	8015f1a <_printf_i+0x112>
 8015f30:	2b08      	cmp	r3, #8
 8015f32:	d10b      	bne.n	8015f4c <_printf_i+0x144>
 8015f34:	6823      	ldr	r3, [r4, #0]
 8015f36:	07df      	lsls	r7, r3, #31
 8015f38:	d508      	bpl.n	8015f4c <_printf_i+0x144>
 8015f3a:	6923      	ldr	r3, [r4, #16]
 8015f3c:	6861      	ldr	r1, [r4, #4]
 8015f3e:	4299      	cmp	r1, r3
 8015f40:	bfde      	ittt	le
 8015f42:	2330      	movle	r3, #48	@ 0x30
 8015f44:	f806 3c01 	strble.w	r3, [r6, #-1]
 8015f48:	f106 36ff 	addle.w	r6, r6, #4294967295
 8015f4c:	1b92      	subs	r2, r2, r6
 8015f4e:	6122      	str	r2, [r4, #16]
 8015f50:	f8cd a000 	str.w	sl, [sp]
 8015f54:	464b      	mov	r3, r9
 8015f56:	aa03      	add	r2, sp, #12
 8015f58:	4621      	mov	r1, r4
 8015f5a:	4640      	mov	r0, r8
 8015f5c:	f7ff fee6 	bl	8015d2c <_printf_common>
 8015f60:	3001      	adds	r0, #1
 8015f62:	d14a      	bne.n	8015ffa <_printf_i+0x1f2>
 8015f64:	f04f 30ff 	mov.w	r0, #4294967295
 8015f68:	b004      	add	sp, #16
 8015f6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015f6e:	6823      	ldr	r3, [r4, #0]
 8015f70:	f043 0320 	orr.w	r3, r3, #32
 8015f74:	6023      	str	r3, [r4, #0]
 8015f76:	4833      	ldr	r0, [pc, #204]	@ (8016044 <_printf_i+0x23c>)
 8015f78:	2778      	movs	r7, #120	@ 0x78
 8015f7a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8015f7e:	6823      	ldr	r3, [r4, #0]
 8015f80:	6831      	ldr	r1, [r6, #0]
 8015f82:	061f      	lsls	r7, r3, #24
 8015f84:	f851 5b04 	ldr.w	r5, [r1], #4
 8015f88:	d402      	bmi.n	8015f90 <_printf_i+0x188>
 8015f8a:	065f      	lsls	r7, r3, #25
 8015f8c:	bf48      	it	mi
 8015f8e:	b2ad      	uxthmi	r5, r5
 8015f90:	6031      	str	r1, [r6, #0]
 8015f92:	07d9      	lsls	r1, r3, #31
 8015f94:	bf44      	itt	mi
 8015f96:	f043 0320 	orrmi.w	r3, r3, #32
 8015f9a:	6023      	strmi	r3, [r4, #0]
 8015f9c:	b11d      	cbz	r5, 8015fa6 <_printf_i+0x19e>
 8015f9e:	2310      	movs	r3, #16
 8015fa0:	e7ac      	b.n	8015efc <_printf_i+0xf4>
 8015fa2:	4827      	ldr	r0, [pc, #156]	@ (8016040 <_printf_i+0x238>)
 8015fa4:	e7e9      	b.n	8015f7a <_printf_i+0x172>
 8015fa6:	6823      	ldr	r3, [r4, #0]
 8015fa8:	f023 0320 	bic.w	r3, r3, #32
 8015fac:	6023      	str	r3, [r4, #0]
 8015fae:	e7f6      	b.n	8015f9e <_printf_i+0x196>
 8015fb0:	4616      	mov	r6, r2
 8015fb2:	e7bd      	b.n	8015f30 <_printf_i+0x128>
 8015fb4:	6833      	ldr	r3, [r6, #0]
 8015fb6:	6825      	ldr	r5, [r4, #0]
 8015fb8:	6961      	ldr	r1, [r4, #20]
 8015fba:	1d18      	adds	r0, r3, #4
 8015fbc:	6030      	str	r0, [r6, #0]
 8015fbe:	062e      	lsls	r6, r5, #24
 8015fc0:	681b      	ldr	r3, [r3, #0]
 8015fc2:	d501      	bpl.n	8015fc8 <_printf_i+0x1c0>
 8015fc4:	6019      	str	r1, [r3, #0]
 8015fc6:	e002      	b.n	8015fce <_printf_i+0x1c6>
 8015fc8:	0668      	lsls	r0, r5, #25
 8015fca:	d5fb      	bpl.n	8015fc4 <_printf_i+0x1bc>
 8015fcc:	8019      	strh	r1, [r3, #0]
 8015fce:	2300      	movs	r3, #0
 8015fd0:	6123      	str	r3, [r4, #16]
 8015fd2:	4616      	mov	r6, r2
 8015fd4:	e7bc      	b.n	8015f50 <_printf_i+0x148>
 8015fd6:	6833      	ldr	r3, [r6, #0]
 8015fd8:	1d1a      	adds	r2, r3, #4
 8015fda:	6032      	str	r2, [r6, #0]
 8015fdc:	681e      	ldr	r6, [r3, #0]
 8015fde:	6862      	ldr	r2, [r4, #4]
 8015fe0:	2100      	movs	r1, #0
 8015fe2:	4630      	mov	r0, r6
 8015fe4:	f7ea f9a4 	bl	8000330 <memchr>
 8015fe8:	b108      	cbz	r0, 8015fee <_printf_i+0x1e6>
 8015fea:	1b80      	subs	r0, r0, r6
 8015fec:	6060      	str	r0, [r4, #4]
 8015fee:	6863      	ldr	r3, [r4, #4]
 8015ff0:	6123      	str	r3, [r4, #16]
 8015ff2:	2300      	movs	r3, #0
 8015ff4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8015ff8:	e7aa      	b.n	8015f50 <_printf_i+0x148>
 8015ffa:	6923      	ldr	r3, [r4, #16]
 8015ffc:	4632      	mov	r2, r6
 8015ffe:	4649      	mov	r1, r9
 8016000:	4640      	mov	r0, r8
 8016002:	47d0      	blx	sl
 8016004:	3001      	adds	r0, #1
 8016006:	d0ad      	beq.n	8015f64 <_printf_i+0x15c>
 8016008:	6823      	ldr	r3, [r4, #0]
 801600a:	079b      	lsls	r3, r3, #30
 801600c:	d413      	bmi.n	8016036 <_printf_i+0x22e>
 801600e:	68e0      	ldr	r0, [r4, #12]
 8016010:	9b03      	ldr	r3, [sp, #12]
 8016012:	4298      	cmp	r0, r3
 8016014:	bfb8      	it	lt
 8016016:	4618      	movlt	r0, r3
 8016018:	e7a6      	b.n	8015f68 <_printf_i+0x160>
 801601a:	2301      	movs	r3, #1
 801601c:	4632      	mov	r2, r6
 801601e:	4649      	mov	r1, r9
 8016020:	4640      	mov	r0, r8
 8016022:	47d0      	blx	sl
 8016024:	3001      	adds	r0, #1
 8016026:	d09d      	beq.n	8015f64 <_printf_i+0x15c>
 8016028:	3501      	adds	r5, #1
 801602a:	68e3      	ldr	r3, [r4, #12]
 801602c:	9903      	ldr	r1, [sp, #12]
 801602e:	1a5b      	subs	r3, r3, r1
 8016030:	42ab      	cmp	r3, r5
 8016032:	dcf2      	bgt.n	801601a <_printf_i+0x212>
 8016034:	e7eb      	b.n	801600e <_printf_i+0x206>
 8016036:	2500      	movs	r5, #0
 8016038:	f104 0619 	add.w	r6, r4, #25
 801603c:	e7f5      	b.n	801602a <_printf_i+0x222>
 801603e:	bf00      	nop
 8016040:	08019f23 	.word	0x08019f23
 8016044:	08019f34 	.word	0x08019f34

08016048 <std>:
 8016048:	2300      	movs	r3, #0
 801604a:	b510      	push	{r4, lr}
 801604c:	4604      	mov	r4, r0
 801604e:	e9c0 3300 	strd	r3, r3, [r0]
 8016052:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8016056:	6083      	str	r3, [r0, #8]
 8016058:	8181      	strh	r1, [r0, #12]
 801605a:	6643      	str	r3, [r0, #100]	@ 0x64
 801605c:	81c2      	strh	r2, [r0, #14]
 801605e:	6183      	str	r3, [r0, #24]
 8016060:	4619      	mov	r1, r3
 8016062:	2208      	movs	r2, #8
 8016064:	305c      	adds	r0, #92	@ 0x5c
 8016066:	f000 f914 	bl	8016292 <memset>
 801606a:	4b0d      	ldr	r3, [pc, #52]	@ (80160a0 <std+0x58>)
 801606c:	6263      	str	r3, [r4, #36]	@ 0x24
 801606e:	4b0d      	ldr	r3, [pc, #52]	@ (80160a4 <std+0x5c>)
 8016070:	62a3      	str	r3, [r4, #40]	@ 0x28
 8016072:	4b0d      	ldr	r3, [pc, #52]	@ (80160a8 <std+0x60>)
 8016074:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8016076:	4b0d      	ldr	r3, [pc, #52]	@ (80160ac <std+0x64>)
 8016078:	6323      	str	r3, [r4, #48]	@ 0x30
 801607a:	4b0d      	ldr	r3, [pc, #52]	@ (80160b0 <std+0x68>)
 801607c:	6224      	str	r4, [r4, #32]
 801607e:	429c      	cmp	r4, r3
 8016080:	d006      	beq.n	8016090 <std+0x48>
 8016082:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8016086:	4294      	cmp	r4, r2
 8016088:	d002      	beq.n	8016090 <std+0x48>
 801608a:	33d0      	adds	r3, #208	@ 0xd0
 801608c:	429c      	cmp	r4, r3
 801608e:	d105      	bne.n	801609c <std+0x54>
 8016090:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8016094:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016098:	f000 b996 	b.w	80163c8 <__retarget_lock_init_recursive>
 801609c:	bd10      	pop	{r4, pc}
 801609e:	bf00      	nop
 80160a0:	0801620d 	.word	0x0801620d
 80160a4:	0801622f 	.word	0x0801622f
 80160a8:	08016267 	.word	0x08016267
 80160ac:	0801628b 	.word	0x0801628b
 80160b0:	24005b30 	.word	0x24005b30

080160b4 <stdio_exit_handler>:
 80160b4:	4a02      	ldr	r2, [pc, #8]	@ (80160c0 <stdio_exit_handler+0xc>)
 80160b6:	4903      	ldr	r1, [pc, #12]	@ (80160c4 <stdio_exit_handler+0x10>)
 80160b8:	4803      	ldr	r0, [pc, #12]	@ (80160c8 <stdio_exit_handler+0x14>)
 80160ba:	f000 b869 	b.w	8016190 <_fwalk_sglue>
 80160be:	bf00      	nop
 80160c0:	24000104 	.word	0x24000104
 80160c4:	08018585 	.word	0x08018585
 80160c8:	24000280 	.word	0x24000280

080160cc <cleanup_stdio>:
 80160cc:	6841      	ldr	r1, [r0, #4]
 80160ce:	4b0c      	ldr	r3, [pc, #48]	@ (8016100 <cleanup_stdio+0x34>)
 80160d0:	4299      	cmp	r1, r3
 80160d2:	b510      	push	{r4, lr}
 80160d4:	4604      	mov	r4, r0
 80160d6:	d001      	beq.n	80160dc <cleanup_stdio+0x10>
 80160d8:	f002 fa54 	bl	8018584 <_fflush_r>
 80160dc:	68a1      	ldr	r1, [r4, #8]
 80160de:	4b09      	ldr	r3, [pc, #36]	@ (8016104 <cleanup_stdio+0x38>)
 80160e0:	4299      	cmp	r1, r3
 80160e2:	d002      	beq.n	80160ea <cleanup_stdio+0x1e>
 80160e4:	4620      	mov	r0, r4
 80160e6:	f002 fa4d 	bl	8018584 <_fflush_r>
 80160ea:	68e1      	ldr	r1, [r4, #12]
 80160ec:	4b06      	ldr	r3, [pc, #24]	@ (8016108 <cleanup_stdio+0x3c>)
 80160ee:	4299      	cmp	r1, r3
 80160f0:	d004      	beq.n	80160fc <cleanup_stdio+0x30>
 80160f2:	4620      	mov	r0, r4
 80160f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80160f8:	f002 ba44 	b.w	8018584 <_fflush_r>
 80160fc:	bd10      	pop	{r4, pc}
 80160fe:	bf00      	nop
 8016100:	24005b30 	.word	0x24005b30
 8016104:	24005b98 	.word	0x24005b98
 8016108:	24005c00 	.word	0x24005c00

0801610c <global_stdio_init.part.0>:
 801610c:	b510      	push	{r4, lr}
 801610e:	4b0b      	ldr	r3, [pc, #44]	@ (801613c <global_stdio_init.part.0+0x30>)
 8016110:	4c0b      	ldr	r4, [pc, #44]	@ (8016140 <global_stdio_init.part.0+0x34>)
 8016112:	4a0c      	ldr	r2, [pc, #48]	@ (8016144 <global_stdio_init.part.0+0x38>)
 8016114:	601a      	str	r2, [r3, #0]
 8016116:	4620      	mov	r0, r4
 8016118:	2200      	movs	r2, #0
 801611a:	2104      	movs	r1, #4
 801611c:	f7ff ff94 	bl	8016048 <std>
 8016120:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8016124:	2201      	movs	r2, #1
 8016126:	2109      	movs	r1, #9
 8016128:	f7ff ff8e 	bl	8016048 <std>
 801612c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8016130:	2202      	movs	r2, #2
 8016132:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016136:	2112      	movs	r1, #18
 8016138:	f7ff bf86 	b.w	8016048 <std>
 801613c:	24005c68 	.word	0x24005c68
 8016140:	24005b30 	.word	0x24005b30
 8016144:	080160b5 	.word	0x080160b5

08016148 <__sfp_lock_acquire>:
 8016148:	4801      	ldr	r0, [pc, #4]	@ (8016150 <__sfp_lock_acquire+0x8>)
 801614a:	f000 b93e 	b.w	80163ca <__retarget_lock_acquire_recursive>
 801614e:	bf00      	nop
 8016150:	24005c71 	.word	0x24005c71

08016154 <__sfp_lock_release>:
 8016154:	4801      	ldr	r0, [pc, #4]	@ (801615c <__sfp_lock_release+0x8>)
 8016156:	f000 b939 	b.w	80163cc <__retarget_lock_release_recursive>
 801615a:	bf00      	nop
 801615c:	24005c71 	.word	0x24005c71

08016160 <__sinit>:
 8016160:	b510      	push	{r4, lr}
 8016162:	4604      	mov	r4, r0
 8016164:	f7ff fff0 	bl	8016148 <__sfp_lock_acquire>
 8016168:	6a23      	ldr	r3, [r4, #32]
 801616a:	b11b      	cbz	r3, 8016174 <__sinit+0x14>
 801616c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016170:	f7ff bff0 	b.w	8016154 <__sfp_lock_release>
 8016174:	4b04      	ldr	r3, [pc, #16]	@ (8016188 <__sinit+0x28>)
 8016176:	6223      	str	r3, [r4, #32]
 8016178:	4b04      	ldr	r3, [pc, #16]	@ (801618c <__sinit+0x2c>)
 801617a:	681b      	ldr	r3, [r3, #0]
 801617c:	2b00      	cmp	r3, #0
 801617e:	d1f5      	bne.n	801616c <__sinit+0xc>
 8016180:	f7ff ffc4 	bl	801610c <global_stdio_init.part.0>
 8016184:	e7f2      	b.n	801616c <__sinit+0xc>
 8016186:	bf00      	nop
 8016188:	080160cd 	.word	0x080160cd
 801618c:	24005c68 	.word	0x24005c68

08016190 <_fwalk_sglue>:
 8016190:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016194:	4607      	mov	r7, r0
 8016196:	4688      	mov	r8, r1
 8016198:	4614      	mov	r4, r2
 801619a:	2600      	movs	r6, #0
 801619c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80161a0:	f1b9 0901 	subs.w	r9, r9, #1
 80161a4:	d505      	bpl.n	80161b2 <_fwalk_sglue+0x22>
 80161a6:	6824      	ldr	r4, [r4, #0]
 80161a8:	2c00      	cmp	r4, #0
 80161aa:	d1f7      	bne.n	801619c <_fwalk_sglue+0xc>
 80161ac:	4630      	mov	r0, r6
 80161ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80161b2:	89ab      	ldrh	r3, [r5, #12]
 80161b4:	2b01      	cmp	r3, #1
 80161b6:	d907      	bls.n	80161c8 <_fwalk_sglue+0x38>
 80161b8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80161bc:	3301      	adds	r3, #1
 80161be:	d003      	beq.n	80161c8 <_fwalk_sglue+0x38>
 80161c0:	4629      	mov	r1, r5
 80161c2:	4638      	mov	r0, r7
 80161c4:	47c0      	blx	r8
 80161c6:	4306      	orrs	r6, r0
 80161c8:	3568      	adds	r5, #104	@ 0x68
 80161ca:	e7e9      	b.n	80161a0 <_fwalk_sglue+0x10>

080161cc <siprintf>:
 80161cc:	b40e      	push	{r1, r2, r3}
 80161ce:	b500      	push	{lr}
 80161d0:	b09c      	sub	sp, #112	@ 0x70
 80161d2:	ab1d      	add	r3, sp, #116	@ 0x74
 80161d4:	9002      	str	r0, [sp, #8]
 80161d6:	9006      	str	r0, [sp, #24]
 80161d8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80161dc:	4809      	ldr	r0, [pc, #36]	@ (8016204 <siprintf+0x38>)
 80161de:	9107      	str	r1, [sp, #28]
 80161e0:	9104      	str	r1, [sp, #16]
 80161e2:	4909      	ldr	r1, [pc, #36]	@ (8016208 <siprintf+0x3c>)
 80161e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80161e8:	9105      	str	r1, [sp, #20]
 80161ea:	6800      	ldr	r0, [r0, #0]
 80161ec:	9301      	str	r3, [sp, #4]
 80161ee:	a902      	add	r1, sp, #8
 80161f0:	f002 f848 	bl	8018284 <_svfiprintf_r>
 80161f4:	9b02      	ldr	r3, [sp, #8]
 80161f6:	2200      	movs	r2, #0
 80161f8:	701a      	strb	r2, [r3, #0]
 80161fa:	b01c      	add	sp, #112	@ 0x70
 80161fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8016200:	b003      	add	sp, #12
 8016202:	4770      	bx	lr
 8016204:	2400027c 	.word	0x2400027c
 8016208:	ffff0208 	.word	0xffff0208

0801620c <__sread>:
 801620c:	b510      	push	{r4, lr}
 801620e:	460c      	mov	r4, r1
 8016210:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016214:	f000 f88a 	bl	801632c <_read_r>
 8016218:	2800      	cmp	r0, #0
 801621a:	bfab      	itete	ge
 801621c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801621e:	89a3      	ldrhlt	r3, [r4, #12]
 8016220:	181b      	addge	r3, r3, r0
 8016222:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8016226:	bfac      	ite	ge
 8016228:	6563      	strge	r3, [r4, #84]	@ 0x54
 801622a:	81a3      	strhlt	r3, [r4, #12]
 801622c:	bd10      	pop	{r4, pc}

0801622e <__swrite>:
 801622e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016232:	461f      	mov	r7, r3
 8016234:	898b      	ldrh	r3, [r1, #12]
 8016236:	05db      	lsls	r3, r3, #23
 8016238:	4605      	mov	r5, r0
 801623a:	460c      	mov	r4, r1
 801623c:	4616      	mov	r6, r2
 801623e:	d505      	bpl.n	801624c <__swrite+0x1e>
 8016240:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016244:	2302      	movs	r3, #2
 8016246:	2200      	movs	r2, #0
 8016248:	f000 f85e 	bl	8016308 <_lseek_r>
 801624c:	89a3      	ldrh	r3, [r4, #12]
 801624e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016252:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8016256:	81a3      	strh	r3, [r4, #12]
 8016258:	4632      	mov	r2, r6
 801625a:	463b      	mov	r3, r7
 801625c:	4628      	mov	r0, r5
 801625e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016262:	f000 b875 	b.w	8016350 <_write_r>

08016266 <__sseek>:
 8016266:	b510      	push	{r4, lr}
 8016268:	460c      	mov	r4, r1
 801626a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801626e:	f000 f84b 	bl	8016308 <_lseek_r>
 8016272:	1c43      	adds	r3, r0, #1
 8016274:	89a3      	ldrh	r3, [r4, #12]
 8016276:	bf15      	itete	ne
 8016278:	6560      	strne	r0, [r4, #84]	@ 0x54
 801627a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801627e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8016282:	81a3      	strheq	r3, [r4, #12]
 8016284:	bf18      	it	ne
 8016286:	81a3      	strhne	r3, [r4, #12]
 8016288:	bd10      	pop	{r4, pc}

0801628a <__sclose>:
 801628a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801628e:	f000 b82b 	b.w	80162e8 <_close_r>

08016292 <memset>:
 8016292:	4402      	add	r2, r0
 8016294:	4603      	mov	r3, r0
 8016296:	4293      	cmp	r3, r2
 8016298:	d100      	bne.n	801629c <memset+0xa>
 801629a:	4770      	bx	lr
 801629c:	f803 1b01 	strb.w	r1, [r3], #1
 80162a0:	e7f9      	b.n	8016296 <memset+0x4>

080162a2 <strchr>:
 80162a2:	b2c9      	uxtb	r1, r1
 80162a4:	4603      	mov	r3, r0
 80162a6:	4618      	mov	r0, r3
 80162a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80162ac:	b112      	cbz	r2, 80162b4 <strchr+0x12>
 80162ae:	428a      	cmp	r2, r1
 80162b0:	d1f9      	bne.n	80162a6 <strchr+0x4>
 80162b2:	4770      	bx	lr
 80162b4:	2900      	cmp	r1, #0
 80162b6:	bf18      	it	ne
 80162b8:	2000      	movne	r0, #0
 80162ba:	4770      	bx	lr

080162bc <strncmp>:
 80162bc:	b510      	push	{r4, lr}
 80162be:	b16a      	cbz	r2, 80162dc <strncmp+0x20>
 80162c0:	3901      	subs	r1, #1
 80162c2:	1884      	adds	r4, r0, r2
 80162c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80162c8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80162cc:	429a      	cmp	r2, r3
 80162ce:	d103      	bne.n	80162d8 <strncmp+0x1c>
 80162d0:	42a0      	cmp	r0, r4
 80162d2:	d001      	beq.n	80162d8 <strncmp+0x1c>
 80162d4:	2a00      	cmp	r2, #0
 80162d6:	d1f5      	bne.n	80162c4 <strncmp+0x8>
 80162d8:	1ad0      	subs	r0, r2, r3
 80162da:	bd10      	pop	{r4, pc}
 80162dc:	4610      	mov	r0, r2
 80162de:	e7fc      	b.n	80162da <strncmp+0x1e>

080162e0 <_localeconv_r>:
 80162e0:	4800      	ldr	r0, [pc, #0]	@ (80162e4 <_localeconv_r+0x4>)
 80162e2:	4770      	bx	lr
 80162e4:	24000200 	.word	0x24000200

080162e8 <_close_r>:
 80162e8:	b538      	push	{r3, r4, r5, lr}
 80162ea:	4d06      	ldr	r5, [pc, #24]	@ (8016304 <_close_r+0x1c>)
 80162ec:	2300      	movs	r3, #0
 80162ee:	4604      	mov	r4, r0
 80162f0:	4608      	mov	r0, r1
 80162f2:	602b      	str	r3, [r5, #0]
 80162f4:	f7ec f892 	bl	800241c <_close>
 80162f8:	1c43      	adds	r3, r0, #1
 80162fa:	d102      	bne.n	8016302 <_close_r+0x1a>
 80162fc:	682b      	ldr	r3, [r5, #0]
 80162fe:	b103      	cbz	r3, 8016302 <_close_r+0x1a>
 8016300:	6023      	str	r3, [r4, #0]
 8016302:	bd38      	pop	{r3, r4, r5, pc}
 8016304:	24005c6c 	.word	0x24005c6c

08016308 <_lseek_r>:
 8016308:	b538      	push	{r3, r4, r5, lr}
 801630a:	4d07      	ldr	r5, [pc, #28]	@ (8016328 <_lseek_r+0x20>)
 801630c:	4604      	mov	r4, r0
 801630e:	4608      	mov	r0, r1
 8016310:	4611      	mov	r1, r2
 8016312:	2200      	movs	r2, #0
 8016314:	602a      	str	r2, [r5, #0]
 8016316:	461a      	mov	r2, r3
 8016318:	f7ec f8a7 	bl	800246a <_lseek>
 801631c:	1c43      	adds	r3, r0, #1
 801631e:	d102      	bne.n	8016326 <_lseek_r+0x1e>
 8016320:	682b      	ldr	r3, [r5, #0]
 8016322:	b103      	cbz	r3, 8016326 <_lseek_r+0x1e>
 8016324:	6023      	str	r3, [r4, #0]
 8016326:	bd38      	pop	{r3, r4, r5, pc}
 8016328:	24005c6c 	.word	0x24005c6c

0801632c <_read_r>:
 801632c:	b538      	push	{r3, r4, r5, lr}
 801632e:	4d07      	ldr	r5, [pc, #28]	@ (801634c <_read_r+0x20>)
 8016330:	4604      	mov	r4, r0
 8016332:	4608      	mov	r0, r1
 8016334:	4611      	mov	r1, r2
 8016336:	2200      	movs	r2, #0
 8016338:	602a      	str	r2, [r5, #0]
 801633a:	461a      	mov	r2, r3
 801633c:	f7ec f835 	bl	80023aa <_read>
 8016340:	1c43      	adds	r3, r0, #1
 8016342:	d102      	bne.n	801634a <_read_r+0x1e>
 8016344:	682b      	ldr	r3, [r5, #0]
 8016346:	b103      	cbz	r3, 801634a <_read_r+0x1e>
 8016348:	6023      	str	r3, [r4, #0]
 801634a:	bd38      	pop	{r3, r4, r5, pc}
 801634c:	24005c6c 	.word	0x24005c6c

08016350 <_write_r>:
 8016350:	b538      	push	{r3, r4, r5, lr}
 8016352:	4d07      	ldr	r5, [pc, #28]	@ (8016370 <_write_r+0x20>)
 8016354:	4604      	mov	r4, r0
 8016356:	4608      	mov	r0, r1
 8016358:	4611      	mov	r1, r2
 801635a:	2200      	movs	r2, #0
 801635c:	602a      	str	r2, [r5, #0]
 801635e:	461a      	mov	r2, r3
 8016360:	f7ec f840 	bl	80023e4 <_write>
 8016364:	1c43      	adds	r3, r0, #1
 8016366:	d102      	bne.n	801636e <_write_r+0x1e>
 8016368:	682b      	ldr	r3, [r5, #0]
 801636a:	b103      	cbz	r3, 801636e <_write_r+0x1e>
 801636c:	6023      	str	r3, [r4, #0]
 801636e:	bd38      	pop	{r3, r4, r5, pc}
 8016370:	24005c6c 	.word	0x24005c6c

08016374 <__errno>:
 8016374:	4b01      	ldr	r3, [pc, #4]	@ (801637c <__errno+0x8>)
 8016376:	6818      	ldr	r0, [r3, #0]
 8016378:	4770      	bx	lr
 801637a:	bf00      	nop
 801637c:	2400027c 	.word	0x2400027c

08016380 <__libc_init_array>:
 8016380:	b570      	push	{r4, r5, r6, lr}
 8016382:	4d0d      	ldr	r5, [pc, #52]	@ (80163b8 <__libc_init_array+0x38>)
 8016384:	4c0d      	ldr	r4, [pc, #52]	@ (80163bc <__libc_init_array+0x3c>)
 8016386:	1b64      	subs	r4, r4, r5
 8016388:	10a4      	asrs	r4, r4, #2
 801638a:	2600      	movs	r6, #0
 801638c:	42a6      	cmp	r6, r4
 801638e:	d109      	bne.n	80163a4 <__libc_init_array+0x24>
 8016390:	4d0b      	ldr	r5, [pc, #44]	@ (80163c0 <__libc_init_array+0x40>)
 8016392:	4c0c      	ldr	r4, [pc, #48]	@ (80163c4 <__libc_init_array+0x44>)
 8016394:	f003 fb18 	bl	80199c8 <_init>
 8016398:	1b64      	subs	r4, r4, r5
 801639a:	10a4      	asrs	r4, r4, #2
 801639c:	2600      	movs	r6, #0
 801639e:	42a6      	cmp	r6, r4
 80163a0:	d105      	bne.n	80163ae <__libc_init_array+0x2e>
 80163a2:	bd70      	pop	{r4, r5, r6, pc}
 80163a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80163a8:	4798      	blx	r3
 80163aa:	3601      	adds	r6, #1
 80163ac:	e7ee      	b.n	801638c <__libc_init_array+0xc>
 80163ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80163b2:	4798      	blx	r3
 80163b4:	3601      	adds	r6, #1
 80163b6:	e7f2      	b.n	801639e <__libc_init_array+0x1e>
 80163b8:	0801a500 	.word	0x0801a500
 80163bc:	0801a500 	.word	0x0801a500
 80163c0:	0801a500 	.word	0x0801a500
 80163c4:	0801a504 	.word	0x0801a504

080163c8 <__retarget_lock_init_recursive>:
 80163c8:	4770      	bx	lr

080163ca <__retarget_lock_acquire_recursive>:
 80163ca:	4770      	bx	lr

080163cc <__retarget_lock_release_recursive>:
 80163cc:	4770      	bx	lr

080163ce <memcpy>:
 80163ce:	440a      	add	r2, r1
 80163d0:	4291      	cmp	r1, r2
 80163d2:	f100 33ff 	add.w	r3, r0, #4294967295
 80163d6:	d100      	bne.n	80163da <memcpy+0xc>
 80163d8:	4770      	bx	lr
 80163da:	b510      	push	{r4, lr}
 80163dc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80163e0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80163e4:	4291      	cmp	r1, r2
 80163e6:	d1f9      	bne.n	80163dc <memcpy+0xe>
 80163e8:	bd10      	pop	{r4, pc}
 80163ea:	0000      	movs	r0, r0
 80163ec:	0000      	movs	r0, r0
	...

080163f0 <nan>:
 80163f0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80163f8 <nan+0x8>
 80163f4:	4770      	bx	lr
 80163f6:	bf00      	nop
 80163f8:	00000000 	.word	0x00000000
 80163fc:	7ff80000 	.word	0x7ff80000

08016400 <quorem>:
 8016400:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016404:	6903      	ldr	r3, [r0, #16]
 8016406:	690c      	ldr	r4, [r1, #16]
 8016408:	42a3      	cmp	r3, r4
 801640a:	4607      	mov	r7, r0
 801640c:	db7e      	blt.n	801650c <quorem+0x10c>
 801640e:	3c01      	subs	r4, #1
 8016410:	f101 0814 	add.w	r8, r1, #20
 8016414:	00a3      	lsls	r3, r4, #2
 8016416:	f100 0514 	add.w	r5, r0, #20
 801641a:	9300      	str	r3, [sp, #0]
 801641c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8016420:	9301      	str	r3, [sp, #4]
 8016422:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8016426:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801642a:	3301      	adds	r3, #1
 801642c:	429a      	cmp	r2, r3
 801642e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8016432:	fbb2 f6f3 	udiv	r6, r2, r3
 8016436:	d32e      	bcc.n	8016496 <quorem+0x96>
 8016438:	f04f 0a00 	mov.w	sl, #0
 801643c:	46c4      	mov	ip, r8
 801643e:	46ae      	mov	lr, r5
 8016440:	46d3      	mov	fp, sl
 8016442:	f85c 3b04 	ldr.w	r3, [ip], #4
 8016446:	b298      	uxth	r0, r3
 8016448:	fb06 a000 	mla	r0, r6, r0, sl
 801644c:	0c02      	lsrs	r2, r0, #16
 801644e:	0c1b      	lsrs	r3, r3, #16
 8016450:	fb06 2303 	mla	r3, r6, r3, r2
 8016454:	f8de 2000 	ldr.w	r2, [lr]
 8016458:	b280      	uxth	r0, r0
 801645a:	b292      	uxth	r2, r2
 801645c:	1a12      	subs	r2, r2, r0
 801645e:	445a      	add	r2, fp
 8016460:	f8de 0000 	ldr.w	r0, [lr]
 8016464:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8016468:	b29b      	uxth	r3, r3
 801646a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 801646e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8016472:	b292      	uxth	r2, r2
 8016474:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8016478:	45e1      	cmp	r9, ip
 801647a:	f84e 2b04 	str.w	r2, [lr], #4
 801647e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8016482:	d2de      	bcs.n	8016442 <quorem+0x42>
 8016484:	9b00      	ldr	r3, [sp, #0]
 8016486:	58eb      	ldr	r3, [r5, r3]
 8016488:	b92b      	cbnz	r3, 8016496 <quorem+0x96>
 801648a:	9b01      	ldr	r3, [sp, #4]
 801648c:	3b04      	subs	r3, #4
 801648e:	429d      	cmp	r5, r3
 8016490:	461a      	mov	r2, r3
 8016492:	d32f      	bcc.n	80164f4 <quorem+0xf4>
 8016494:	613c      	str	r4, [r7, #16]
 8016496:	4638      	mov	r0, r7
 8016498:	f001 fca0 	bl	8017ddc <__mcmp>
 801649c:	2800      	cmp	r0, #0
 801649e:	db25      	blt.n	80164ec <quorem+0xec>
 80164a0:	4629      	mov	r1, r5
 80164a2:	2000      	movs	r0, #0
 80164a4:	f858 2b04 	ldr.w	r2, [r8], #4
 80164a8:	f8d1 c000 	ldr.w	ip, [r1]
 80164ac:	fa1f fe82 	uxth.w	lr, r2
 80164b0:	fa1f f38c 	uxth.w	r3, ip
 80164b4:	eba3 030e 	sub.w	r3, r3, lr
 80164b8:	4403      	add	r3, r0
 80164ba:	0c12      	lsrs	r2, r2, #16
 80164bc:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80164c0:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80164c4:	b29b      	uxth	r3, r3
 80164c6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80164ca:	45c1      	cmp	r9, r8
 80164cc:	f841 3b04 	str.w	r3, [r1], #4
 80164d0:	ea4f 4022 	mov.w	r0, r2, asr #16
 80164d4:	d2e6      	bcs.n	80164a4 <quorem+0xa4>
 80164d6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80164da:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80164de:	b922      	cbnz	r2, 80164ea <quorem+0xea>
 80164e0:	3b04      	subs	r3, #4
 80164e2:	429d      	cmp	r5, r3
 80164e4:	461a      	mov	r2, r3
 80164e6:	d30b      	bcc.n	8016500 <quorem+0x100>
 80164e8:	613c      	str	r4, [r7, #16]
 80164ea:	3601      	adds	r6, #1
 80164ec:	4630      	mov	r0, r6
 80164ee:	b003      	add	sp, #12
 80164f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80164f4:	6812      	ldr	r2, [r2, #0]
 80164f6:	3b04      	subs	r3, #4
 80164f8:	2a00      	cmp	r2, #0
 80164fa:	d1cb      	bne.n	8016494 <quorem+0x94>
 80164fc:	3c01      	subs	r4, #1
 80164fe:	e7c6      	b.n	801648e <quorem+0x8e>
 8016500:	6812      	ldr	r2, [r2, #0]
 8016502:	3b04      	subs	r3, #4
 8016504:	2a00      	cmp	r2, #0
 8016506:	d1ef      	bne.n	80164e8 <quorem+0xe8>
 8016508:	3c01      	subs	r4, #1
 801650a:	e7ea      	b.n	80164e2 <quorem+0xe2>
 801650c:	2000      	movs	r0, #0
 801650e:	e7ee      	b.n	80164ee <quorem+0xee>

08016510 <_dtoa_r>:
 8016510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016514:	ed2d 8b02 	vpush	{d8}
 8016518:	69c7      	ldr	r7, [r0, #28]
 801651a:	b091      	sub	sp, #68	@ 0x44
 801651c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8016520:	ec55 4b10 	vmov	r4, r5, d0
 8016524:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 8016526:	9107      	str	r1, [sp, #28]
 8016528:	4681      	mov	r9, r0
 801652a:	9209      	str	r2, [sp, #36]	@ 0x24
 801652c:	930d      	str	r3, [sp, #52]	@ 0x34
 801652e:	b97f      	cbnz	r7, 8016550 <_dtoa_r+0x40>
 8016530:	2010      	movs	r0, #16
 8016532:	f001 f8c7 	bl	80176c4 <malloc>
 8016536:	4602      	mov	r2, r0
 8016538:	f8c9 001c 	str.w	r0, [r9, #28]
 801653c:	b920      	cbnz	r0, 8016548 <_dtoa_r+0x38>
 801653e:	4ba0      	ldr	r3, [pc, #640]	@ (80167c0 <_dtoa_r+0x2b0>)
 8016540:	21ef      	movs	r1, #239	@ 0xef
 8016542:	48a0      	ldr	r0, [pc, #640]	@ (80167c4 <_dtoa_r+0x2b4>)
 8016544:	f002 f870 	bl	8018628 <__assert_func>
 8016548:	e9c0 7701 	strd	r7, r7, [r0, #4]
 801654c:	6007      	str	r7, [r0, #0]
 801654e:	60c7      	str	r7, [r0, #12]
 8016550:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8016554:	6819      	ldr	r1, [r3, #0]
 8016556:	b159      	cbz	r1, 8016570 <_dtoa_r+0x60>
 8016558:	685a      	ldr	r2, [r3, #4]
 801655a:	604a      	str	r2, [r1, #4]
 801655c:	2301      	movs	r3, #1
 801655e:	4093      	lsls	r3, r2
 8016560:	608b      	str	r3, [r1, #8]
 8016562:	4648      	mov	r0, r9
 8016564:	f001 f9b6 	bl	80178d4 <_Bfree>
 8016568:	f8d9 301c 	ldr.w	r3, [r9, #28]
 801656c:	2200      	movs	r2, #0
 801656e:	601a      	str	r2, [r3, #0]
 8016570:	1e2b      	subs	r3, r5, #0
 8016572:	bfbb      	ittet	lt
 8016574:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8016578:	9303      	strlt	r3, [sp, #12]
 801657a:	2300      	movge	r3, #0
 801657c:	2201      	movlt	r2, #1
 801657e:	bfac      	ite	ge
 8016580:	6033      	strge	r3, [r6, #0]
 8016582:	6032      	strlt	r2, [r6, #0]
 8016584:	4b90      	ldr	r3, [pc, #576]	@ (80167c8 <_dtoa_r+0x2b8>)
 8016586:	9e03      	ldr	r6, [sp, #12]
 8016588:	43b3      	bics	r3, r6
 801658a:	d110      	bne.n	80165ae <_dtoa_r+0x9e>
 801658c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801658e:	f242 730f 	movw	r3, #9999	@ 0x270f
 8016592:	6013      	str	r3, [r2, #0]
 8016594:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8016598:	4323      	orrs	r3, r4
 801659a:	f000 84de 	beq.w	8016f5a <_dtoa_r+0xa4a>
 801659e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80165a0:	4f8a      	ldr	r7, [pc, #552]	@ (80167cc <_dtoa_r+0x2bc>)
 80165a2:	2b00      	cmp	r3, #0
 80165a4:	f000 84e0 	beq.w	8016f68 <_dtoa_r+0xa58>
 80165a8:	1cfb      	adds	r3, r7, #3
 80165aa:	f000 bcdb 	b.w	8016f64 <_dtoa_r+0xa54>
 80165ae:	ed9d 8b02 	vldr	d8, [sp, #8]
 80165b2:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80165b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80165ba:	d10a      	bne.n	80165d2 <_dtoa_r+0xc2>
 80165bc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80165be:	2301      	movs	r3, #1
 80165c0:	6013      	str	r3, [r2, #0]
 80165c2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80165c4:	b113      	cbz	r3, 80165cc <_dtoa_r+0xbc>
 80165c6:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 80165c8:	4b81      	ldr	r3, [pc, #516]	@ (80167d0 <_dtoa_r+0x2c0>)
 80165ca:	6013      	str	r3, [r2, #0]
 80165cc:	4f81      	ldr	r7, [pc, #516]	@ (80167d4 <_dtoa_r+0x2c4>)
 80165ce:	f000 bccb 	b.w	8016f68 <_dtoa_r+0xa58>
 80165d2:	aa0e      	add	r2, sp, #56	@ 0x38
 80165d4:	a90f      	add	r1, sp, #60	@ 0x3c
 80165d6:	4648      	mov	r0, r9
 80165d8:	eeb0 0b48 	vmov.f64	d0, d8
 80165dc:	f001 fd1e 	bl	801801c <__d2b>
 80165e0:	f3c6 530a 	ubfx	r3, r6, #20, #11
 80165e4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80165e6:	9001      	str	r0, [sp, #4]
 80165e8:	2b00      	cmp	r3, #0
 80165ea:	d045      	beq.n	8016678 <_dtoa_r+0x168>
 80165ec:	eeb0 7b48 	vmov.f64	d7, d8
 80165f0:	ee18 1a90 	vmov	r1, s17
 80165f4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 80165f8:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 80165fc:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8016600:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8016604:	2500      	movs	r5, #0
 8016606:	ee07 1a90 	vmov	s15, r1
 801660a:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 801660e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 80167a8 <_dtoa_r+0x298>
 8016612:	ee37 7b46 	vsub.f64	d7, d7, d6
 8016616:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 80167b0 <_dtoa_r+0x2a0>
 801661a:	eea7 6b05 	vfma.f64	d6, d7, d5
 801661e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 80167b8 <_dtoa_r+0x2a8>
 8016622:	ee07 3a90 	vmov	s15, r3
 8016626:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 801662a:	eeb0 7b46 	vmov.f64	d7, d6
 801662e:	eea4 7b05 	vfma.f64	d7, d4, d5
 8016632:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8016636:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801663a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801663e:	ee16 8a90 	vmov	r8, s13
 8016642:	d508      	bpl.n	8016656 <_dtoa_r+0x146>
 8016644:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8016648:	eeb4 6b47 	vcmp.f64	d6, d7
 801664c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016650:	bf18      	it	ne
 8016652:	f108 38ff 	addne.w	r8, r8, #4294967295
 8016656:	f1b8 0f16 	cmp.w	r8, #22
 801665a:	d82b      	bhi.n	80166b4 <_dtoa_r+0x1a4>
 801665c:	495e      	ldr	r1, [pc, #376]	@ (80167d8 <_dtoa_r+0x2c8>)
 801665e:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 8016662:	ed91 7b00 	vldr	d7, [r1]
 8016666:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801666a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801666e:	d501      	bpl.n	8016674 <_dtoa_r+0x164>
 8016670:	f108 38ff 	add.w	r8, r8, #4294967295
 8016674:	2100      	movs	r1, #0
 8016676:	e01e      	b.n	80166b6 <_dtoa_r+0x1a6>
 8016678:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801667a:	4413      	add	r3, r2
 801667c:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8016680:	2920      	cmp	r1, #32
 8016682:	bfc1      	itttt	gt
 8016684:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8016688:	408e      	lslgt	r6, r1
 801668a:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 801668e:	fa24 f101 	lsrgt.w	r1, r4, r1
 8016692:	bfd6      	itet	le
 8016694:	f1c1 0120 	rsble	r1, r1, #32
 8016698:	4331      	orrgt	r1, r6
 801669a:	fa04 f101 	lslle.w	r1, r4, r1
 801669e:	ee07 1a90 	vmov	s15, r1
 80166a2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80166a6:	3b01      	subs	r3, #1
 80166a8:	ee17 1a90 	vmov	r1, s15
 80166ac:	2501      	movs	r5, #1
 80166ae:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 80166b2:	e7a8      	b.n	8016606 <_dtoa_r+0xf6>
 80166b4:	2101      	movs	r1, #1
 80166b6:	1ad2      	subs	r2, r2, r3
 80166b8:	1e53      	subs	r3, r2, #1
 80166ba:	9306      	str	r3, [sp, #24]
 80166bc:	bf45      	ittet	mi
 80166be:	f1c2 0301 	rsbmi	r3, r2, #1
 80166c2:	9305      	strmi	r3, [sp, #20]
 80166c4:	2300      	movpl	r3, #0
 80166c6:	2300      	movmi	r3, #0
 80166c8:	bf4c      	ite	mi
 80166ca:	9306      	strmi	r3, [sp, #24]
 80166cc:	9305      	strpl	r3, [sp, #20]
 80166ce:	f1b8 0f00 	cmp.w	r8, #0
 80166d2:	910c      	str	r1, [sp, #48]	@ 0x30
 80166d4:	db18      	blt.n	8016708 <_dtoa_r+0x1f8>
 80166d6:	9b06      	ldr	r3, [sp, #24]
 80166d8:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80166dc:	4443      	add	r3, r8
 80166de:	9306      	str	r3, [sp, #24]
 80166e0:	2300      	movs	r3, #0
 80166e2:	9a07      	ldr	r2, [sp, #28]
 80166e4:	2a09      	cmp	r2, #9
 80166e6:	d849      	bhi.n	801677c <_dtoa_r+0x26c>
 80166e8:	2a05      	cmp	r2, #5
 80166ea:	bfc4      	itt	gt
 80166ec:	3a04      	subgt	r2, #4
 80166ee:	9207      	strgt	r2, [sp, #28]
 80166f0:	9a07      	ldr	r2, [sp, #28]
 80166f2:	f1a2 0202 	sub.w	r2, r2, #2
 80166f6:	bfcc      	ite	gt
 80166f8:	2400      	movgt	r4, #0
 80166fa:	2401      	movle	r4, #1
 80166fc:	2a03      	cmp	r2, #3
 80166fe:	d848      	bhi.n	8016792 <_dtoa_r+0x282>
 8016700:	e8df f002 	tbb	[pc, r2]
 8016704:	3a2c2e0b 	.word	0x3a2c2e0b
 8016708:	9b05      	ldr	r3, [sp, #20]
 801670a:	2200      	movs	r2, #0
 801670c:	eba3 0308 	sub.w	r3, r3, r8
 8016710:	9305      	str	r3, [sp, #20]
 8016712:	920a      	str	r2, [sp, #40]	@ 0x28
 8016714:	f1c8 0300 	rsb	r3, r8, #0
 8016718:	e7e3      	b.n	80166e2 <_dtoa_r+0x1d2>
 801671a:	2200      	movs	r2, #0
 801671c:	9208      	str	r2, [sp, #32]
 801671e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8016720:	2a00      	cmp	r2, #0
 8016722:	dc39      	bgt.n	8016798 <_dtoa_r+0x288>
 8016724:	f04f 0b01 	mov.w	fp, #1
 8016728:	46da      	mov	sl, fp
 801672a:	465a      	mov	r2, fp
 801672c:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8016730:	f8d9 701c 	ldr.w	r7, [r9, #28]
 8016734:	2100      	movs	r1, #0
 8016736:	2004      	movs	r0, #4
 8016738:	f100 0614 	add.w	r6, r0, #20
 801673c:	4296      	cmp	r6, r2
 801673e:	d930      	bls.n	80167a2 <_dtoa_r+0x292>
 8016740:	6079      	str	r1, [r7, #4]
 8016742:	4648      	mov	r0, r9
 8016744:	9304      	str	r3, [sp, #16]
 8016746:	f001 f885 	bl	8017854 <_Balloc>
 801674a:	9b04      	ldr	r3, [sp, #16]
 801674c:	4607      	mov	r7, r0
 801674e:	2800      	cmp	r0, #0
 8016750:	d146      	bne.n	80167e0 <_dtoa_r+0x2d0>
 8016752:	4b22      	ldr	r3, [pc, #136]	@ (80167dc <_dtoa_r+0x2cc>)
 8016754:	4602      	mov	r2, r0
 8016756:	f240 11af 	movw	r1, #431	@ 0x1af
 801675a:	e6f2      	b.n	8016542 <_dtoa_r+0x32>
 801675c:	2201      	movs	r2, #1
 801675e:	e7dd      	b.n	801671c <_dtoa_r+0x20c>
 8016760:	2200      	movs	r2, #0
 8016762:	9208      	str	r2, [sp, #32]
 8016764:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8016766:	eb08 0b02 	add.w	fp, r8, r2
 801676a:	f10b 0a01 	add.w	sl, fp, #1
 801676e:	4652      	mov	r2, sl
 8016770:	2a01      	cmp	r2, #1
 8016772:	bfb8      	it	lt
 8016774:	2201      	movlt	r2, #1
 8016776:	e7db      	b.n	8016730 <_dtoa_r+0x220>
 8016778:	2201      	movs	r2, #1
 801677a:	e7f2      	b.n	8016762 <_dtoa_r+0x252>
 801677c:	2401      	movs	r4, #1
 801677e:	2200      	movs	r2, #0
 8016780:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8016784:	f04f 3bff 	mov.w	fp, #4294967295
 8016788:	2100      	movs	r1, #0
 801678a:	46da      	mov	sl, fp
 801678c:	2212      	movs	r2, #18
 801678e:	9109      	str	r1, [sp, #36]	@ 0x24
 8016790:	e7ce      	b.n	8016730 <_dtoa_r+0x220>
 8016792:	2201      	movs	r2, #1
 8016794:	9208      	str	r2, [sp, #32]
 8016796:	e7f5      	b.n	8016784 <_dtoa_r+0x274>
 8016798:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 801679c:	46da      	mov	sl, fp
 801679e:	465a      	mov	r2, fp
 80167a0:	e7c6      	b.n	8016730 <_dtoa_r+0x220>
 80167a2:	3101      	adds	r1, #1
 80167a4:	0040      	lsls	r0, r0, #1
 80167a6:	e7c7      	b.n	8016738 <_dtoa_r+0x228>
 80167a8:	636f4361 	.word	0x636f4361
 80167ac:	3fd287a7 	.word	0x3fd287a7
 80167b0:	8b60c8b3 	.word	0x8b60c8b3
 80167b4:	3fc68a28 	.word	0x3fc68a28
 80167b8:	509f79fb 	.word	0x509f79fb
 80167bc:	3fd34413 	.word	0x3fd34413
 80167c0:	08019f5a 	.word	0x08019f5a
 80167c4:	08019f71 	.word	0x08019f71
 80167c8:	7ff00000 	.word	0x7ff00000
 80167cc:	08019f56 	.word	0x08019f56
 80167d0:	08019f22 	.word	0x08019f22
 80167d4:	08019f21 	.word	0x08019f21
 80167d8:	0801a0c8 	.word	0x0801a0c8
 80167dc:	08019fc9 	.word	0x08019fc9
 80167e0:	f8d9 201c 	ldr.w	r2, [r9, #28]
 80167e4:	f1ba 0f0e 	cmp.w	sl, #14
 80167e8:	6010      	str	r0, [r2, #0]
 80167ea:	d86f      	bhi.n	80168cc <_dtoa_r+0x3bc>
 80167ec:	2c00      	cmp	r4, #0
 80167ee:	d06d      	beq.n	80168cc <_dtoa_r+0x3bc>
 80167f0:	f1b8 0f00 	cmp.w	r8, #0
 80167f4:	f340 80c2 	ble.w	801697c <_dtoa_r+0x46c>
 80167f8:	4aca      	ldr	r2, [pc, #808]	@ (8016b24 <_dtoa_r+0x614>)
 80167fa:	f008 010f 	and.w	r1, r8, #15
 80167fe:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8016802:	f418 7f80 	tst.w	r8, #256	@ 0x100
 8016806:	ed92 7b00 	vldr	d7, [r2]
 801680a:	ea4f 1128 	mov.w	r1, r8, asr #4
 801680e:	f000 80a9 	beq.w	8016964 <_dtoa_r+0x454>
 8016812:	4ac5      	ldr	r2, [pc, #788]	@ (8016b28 <_dtoa_r+0x618>)
 8016814:	ed92 6b08 	vldr	d6, [r2, #32]
 8016818:	ee88 6b06 	vdiv.f64	d6, d8, d6
 801681c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8016820:	f001 010f 	and.w	r1, r1, #15
 8016824:	2203      	movs	r2, #3
 8016826:	48c0      	ldr	r0, [pc, #768]	@ (8016b28 <_dtoa_r+0x618>)
 8016828:	2900      	cmp	r1, #0
 801682a:	f040 809d 	bne.w	8016968 <_dtoa_r+0x458>
 801682e:	ed9d 6b02 	vldr	d6, [sp, #8]
 8016832:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8016836:	ed8d 7b02 	vstr	d7, [sp, #8]
 801683a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801683c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8016840:	2900      	cmp	r1, #0
 8016842:	f000 80c1 	beq.w	80169c8 <_dtoa_r+0x4b8>
 8016846:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 801684a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801684e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016852:	f140 80b9 	bpl.w	80169c8 <_dtoa_r+0x4b8>
 8016856:	f1ba 0f00 	cmp.w	sl, #0
 801685a:	f000 80b5 	beq.w	80169c8 <_dtoa_r+0x4b8>
 801685e:	f1bb 0f00 	cmp.w	fp, #0
 8016862:	dd31      	ble.n	80168c8 <_dtoa_r+0x3b8>
 8016864:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8016868:	ee27 7b06 	vmul.f64	d7, d7, d6
 801686c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8016870:	f108 31ff 	add.w	r1, r8, #4294967295
 8016874:	9104      	str	r1, [sp, #16]
 8016876:	3201      	adds	r2, #1
 8016878:	465c      	mov	r4, fp
 801687a:	ed9d 6b02 	vldr	d6, [sp, #8]
 801687e:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 8016882:	ee07 2a90 	vmov	s15, r2
 8016886:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801688a:	eea7 5b06 	vfma.f64	d5, d7, d6
 801688e:	ee15 2a90 	vmov	r2, s11
 8016892:	ec51 0b15 	vmov	r0, r1, d5
 8016896:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 801689a:	2c00      	cmp	r4, #0
 801689c:	f040 8098 	bne.w	80169d0 <_dtoa_r+0x4c0>
 80168a0:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 80168a4:	ee36 6b47 	vsub.f64	d6, d6, d7
 80168a8:	ec41 0b17 	vmov	d7, r0, r1
 80168ac:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80168b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80168b4:	f300 8261 	bgt.w	8016d7a <_dtoa_r+0x86a>
 80168b8:	eeb1 7b47 	vneg.f64	d7, d7
 80168bc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80168c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80168c4:	f100 80f5 	bmi.w	8016ab2 <_dtoa_r+0x5a2>
 80168c8:	ed8d 8b02 	vstr	d8, [sp, #8]
 80168cc:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80168ce:	2a00      	cmp	r2, #0
 80168d0:	f2c0 812c 	blt.w	8016b2c <_dtoa_r+0x61c>
 80168d4:	f1b8 0f0e 	cmp.w	r8, #14
 80168d8:	f300 8128 	bgt.w	8016b2c <_dtoa_r+0x61c>
 80168dc:	4b91      	ldr	r3, [pc, #580]	@ (8016b24 <_dtoa_r+0x614>)
 80168de:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80168e2:	ed93 6b00 	vldr	d6, [r3]
 80168e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80168e8:	2b00      	cmp	r3, #0
 80168ea:	da03      	bge.n	80168f4 <_dtoa_r+0x3e4>
 80168ec:	f1ba 0f00 	cmp.w	sl, #0
 80168f0:	f340 80d2 	ble.w	8016a98 <_dtoa_r+0x588>
 80168f4:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 80168f8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80168fc:	463e      	mov	r6, r7
 80168fe:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8016902:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8016906:	ee15 3a10 	vmov	r3, s10
 801690a:	3330      	adds	r3, #48	@ 0x30
 801690c:	f806 3b01 	strb.w	r3, [r6], #1
 8016910:	1bf3      	subs	r3, r6, r7
 8016912:	459a      	cmp	sl, r3
 8016914:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8016918:	eea3 7b46 	vfms.f64	d7, d3, d6
 801691c:	f040 80f8 	bne.w	8016b10 <_dtoa_r+0x600>
 8016920:	ee37 7b07 	vadd.f64	d7, d7, d7
 8016924:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8016928:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801692c:	f300 80dd 	bgt.w	8016aea <_dtoa_r+0x5da>
 8016930:	eeb4 7b46 	vcmp.f64	d7, d6
 8016934:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016938:	d104      	bne.n	8016944 <_dtoa_r+0x434>
 801693a:	ee15 3a10 	vmov	r3, s10
 801693e:	07db      	lsls	r3, r3, #31
 8016940:	f100 80d3 	bmi.w	8016aea <_dtoa_r+0x5da>
 8016944:	9901      	ldr	r1, [sp, #4]
 8016946:	4648      	mov	r0, r9
 8016948:	f000 ffc4 	bl	80178d4 <_Bfree>
 801694c:	2300      	movs	r3, #0
 801694e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8016950:	7033      	strb	r3, [r6, #0]
 8016952:	f108 0301 	add.w	r3, r8, #1
 8016956:	6013      	str	r3, [r2, #0]
 8016958:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801695a:	2b00      	cmp	r3, #0
 801695c:	f000 8304 	beq.w	8016f68 <_dtoa_r+0xa58>
 8016960:	601e      	str	r6, [r3, #0]
 8016962:	e301      	b.n	8016f68 <_dtoa_r+0xa58>
 8016964:	2202      	movs	r2, #2
 8016966:	e75e      	b.n	8016826 <_dtoa_r+0x316>
 8016968:	07cc      	lsls	r4, r1, #31
 801696a:	d504      	bpl.n	8016976 <_dtoa_r+0x466>
 801696c:	ed90 6b00 	vldr	d6, [r0]
 8016970:	3201      	adds	r2, #1
 8016972:	ee27 7b06 	vmul.f64	d7, d7, d6
 8016976:	1049      	asrs	r1, r1, #1
 8016978:	3008      	adds	r0, #8
 801697a:	e755      	b.n	8016828 <_dtoa_r+0x318>
 801697c:	d022      	beq.n	80169c4 <_dtoa_r+0x4b4>
 801697e:	f1c8 0100 	rsb	r1, r8, #0
 8016982:	4a68      	ldr	r2, [pc, #416]	@ (8016b24 <_dtoa_r+0x614>)
 8016984:	f001 000f 	and.w	r0, r1, #15
 8016988:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 801698c:	ed92 7b00 	vldr	d7, [r2]
 8016990:	ee28 7b07 	vmul.f64	d7, d8, d7
 8016994:	ed8d 7b02 	vstr	d7, [sp, #8]
 8016998:	4863      	ldr	r0, [pc, #396]	@ (8016b28 <_dtoa_r+0x618>)
 801699a:	1109      	asrs	r1, r1, #4
 801699c:	2400      	movs	r4, #0
 801699e:	2202      	movs	r2, #2
 80169a0:	b929      	cbnz	r1, 80169ae <_dtoa_r+0x49e>
 80169a2:	2c00      	cmp	r4, #0
 80169a4:	f43f af49 	beq.w	801683a <_dtoa_r+0x32a>
 80169a8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80169ac:	e745      	b.n	801683a <_dtoa_r+0x32a>
 80169ae:	07ce      	lsls	r6, r1, #31
 80169b0:	d505      	bpl.n	80169be <_dtoa_r+0x4ae>
 80169b2:	ed90 6b00 	vldr	d6, [r0]
 80169b6:	3201      	adds	r2, #1
 80169b8:	2401      	movs	r4, #1
 80169ba:	ee27 7b06 	vmul.f64	d7, d7, d6
 80169be:	1049      	asrs	r1, r1, #1
 80169c0:	3008      	adds	r0, #8
 80169c2:	e7ed      	b.n	80169a0 <_dtoa_r+0x490>
 80169c4:	2202      	movs	r2, #2
 80169c6:	e738      	b.n	801683a <_dtoa_r+0x32a>
 80169c8:	f8cd 8010 	str.w	r8, [sp, #16]
 80169cc:	4654      	mov	r4, sl
 80169ce:	e754      	b.n	801687a <_dtoa_r+0x36a>
 80169d0:	4a54      	ldr	r2, [pc, #336]	@ (8016b24 <_dtoa_r+0x614>)
 80169d2:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 80169d6:	ed12 4b02 	vldr	d4, [r2, #-8]
 80169da:	9a08      	ldr	r2, [sp, #32]
 80169dc:	ec41 0b17 	vmov	d7, r0, r1
 80169e0:	443c      	add	r4, r7
 80169e2:	b34a      	cbz	r2, 8016a38 <_dtoa_r+0x528>
 80169e4:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 80169e8:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 80169ec:	463e      	mov	r6, r7
 80169ee:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80169f2:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 80169f6:	ee35 7b47 	vsub.f64	d7, d5, d7
 80169fa:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80169fe:	ee14 2a90 	vmov	r2, s9
 8016a02:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8016a06:	3230      	adds	r2, #48	@ 0x30
 8016a08:	ee36 6b45 	vsub.f64	d6, d6, d5
 8016a0c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8016a10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016a14:	f806 2b01 	strb.w	r2, [r6], #1
 8016a18:	d438      	bmi.n	8016a8c <_dtoa_r+0x57c>
 8016a1a:	ee32 5b46 	vsub.f64	d5, d2, d6
 8016a1e:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8016a22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016a26:	d462      	bmi.n	8016aee <_dtoa_r+0x5de>
 8016a28:	42a6      	cmp	r6, r4
 8016a2a:	f43f af4d 	beq.w	80168c8 <_dtoa_r+0x3b8>
 8016a2e:	ee27 7b03 	vmul.f64	d7, d7, d3
 8016a32:	ee26 6b03 	vmul.f64	d6, d6, d3
 8016a36:	e7e0      	b.n	80169fa <_dtoa_r+0x4ea>
 8016a38:	4621      	mov	r1, r4
 8016a3a:	463e      	mov	r6, r7
 8016a3c:	ee27 7b04 	vmul.f64	d7, d7, d4
 8016a40:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8016a44:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8016a48:	ee14 2a90 	vmov	r2, s9
 8016a4c:	3230      	adds	r2, #48	@ 0x30
 8016a4e:	f806 2b01 	strb.w	r2, [r6], #1
 8016a52:	42a6      	cmp	r6, r4
 8016a54:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8016a58:	ee36 6b45 	vsub.f64	d6, d6, d5
 8016a5c:	d119      	bne.n	8016a92 <_dtoa_r+0x582>
 8016a5e:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 8016a62:	ee37 4b05 	vadd.f64	d4, d7, d5
 8016a66:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8016a6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016a6e:	dc3e      	bgt.n	8016aee <_dtoa_r+0x5de>
 8016a70:	ee35 5b47 	vsub.f64	d5, d5, d7
 8016a74:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8016a78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016a7c:	f57f af24 	bpl.w	80168c8 <_dtoa_r+0x3b8>
 8016a80:	460e      	mov	r6, r1
 8016a82:	3901      	subs	r1, #1
 8016a84:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8016a88:	2b30      	cmp	r3, #48	@ 0x30
 8016a8a:	d0f9      	beq.n	8016a80 <_dtoa_r+0x570>
 8016a8c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8016a90:	e758      	b.n	8016944 <_dtoa_r+0x434>
 8016a92:	ee26 6b03 	vmul.f64	d6, d6, d3
 8016a96:	e7d5      	b.n	8016a44 <_dtoa_r+0x534>
 8016a98:	d10b      	bne.n	8016ab2 <_dtoa_r+0x5a2>
 8016a9a:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8016a9e:	ee26 6b07 	vmul.f64	d6, d6, d7
 8016aa2:	ed9d 7b02 	vldr	d7, [sp, #8]
 8016aa6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8016aaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016aae:	f2c0 8161 	blt.w	8016d74 <_dtoa_r+0x864>
 8016ab2:	2400      	movs	r4, #0
 8016ab4:	4625      	mov	r5, r4
 8016ab6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016ab8:	43db      	mvns	r3, r3
 8016aba:	9304      	str	r3, [sp, #16]
 8016abc:	463e      	mov	r6, r7
 8016abe:	f04f 0800 	mov.w	r8, #0
 8016ac2:	4621      	mov	r1, r4
 8016ac4:	4648      	mov	r0, r9
 8016ac6:	f000 ff05 	bl	80178d4 <_Bfree>
 8016aca:	2d00      	cmp	r5, #0
 8016acc:	d0de      	beq.n	8016a8c <_dtoa_r+0x57c>
 8016ace:	f1b8 0f00 	cmp.w	r8, #0
 8016ad2:	d005      	beq.n	8016ae0 <_dtoa_r+0x5d0>
 8016ad4:	45a8      	cmp	r8, r5
 8016ad6:	d003      	beq.n	8016ae0 <_dtoa_r+0x5d0>
 8016ad8:	4641      	mov	r1, r8
 8016ada:	4648      	mov	r0, r9
 8016adc:	f000 fefa 	bl	80178d4 <_Bfree>
 8016ae0:	4629      	mov	r1, r5
 8016ae2:	4648      	mov	r0, r9
 8016ae4:	f000 fef6 	bl	80178d4 <_Bfree>
 8016ae8:	e7d0      	b.n	8016a8c <_dtoa_r+0x57c>
 8016aea:	f8cd 8010 	str.w	r8, [sp, #16]
 8016aee:	4633      	mov	r3, r6
 8016af0:	461e      	mov	r6, r3
 8016af2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8016af6:	2a39      	cmp	r2, #57	@ 0x39
 8016af8:	d106      	bne.n	8016b08 <_dtoa_r+0x5f8>
 8016afa:	429f      	cmp	r7, r3
 8016afc:	d1f8      	bne.n	8016af0 <_dtoa_r+0x5e0>
 8016afe:	9a04      	ldr	r2, [sp, #16]
 8016b00:	3201      	adds	r2, #1
 8016b02:	9204      	str	r2, [sp, #16]
 8016b04:	2230      	movs	r2, #48	@ 0x30
 8016b06:	703a      	strb	r2, [r7, #0]
 8016b08:	781a      	ldrb	r2, [r3, #0]
 8016b0a:	3201      	adds	r2, #1
 8016b0c:	701a      	strb	r2, [r3, #0]
 8016b0e:	e7bd      	b.n	8016a8c <_dtoa_r+0x57c>
 8016b10:	ee27 7b04 	vmul.f64	d7, d7, d4
 8016b14:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8016b18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016b1c:	f47f aeef 	bne.w	80168fe <_dtoa_r+0x3ee>
 8016b20:	e710      	b.n	8016944 <_dtoa_r+0x434>
 8016b22:	bf00      	nop
 8016b24:	0801a0c8 	.word	0x0801a0c8
 8016b28:	0801a0a0 	.word	0x0801a0a0
 8016b2c:	9908      	ldr	r1, [sp, #32]
 8016b2e:	2900      	cmp	r1, #0
 8016b30:	f000 80e3 	beq.w	8016cfa <_dtoa_r+0x7ea>
 8016b34:	9907      	ldr	r1, [sp, #28]
 8016b36:	2901      	cmp	r1, #1
 8016b38:	f300 80c8 	bgt.w	8016ccc <_dtoa_r+0x7bc>
 8016b3c:	2d00      	cmp	r5, #0
 8016b3e:	f000 80c1 	beq.w	8016cc4 <_dtoa_r+0x7b4>
 8016b42:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8016b46:	9e05      	ldr	r6, [sp, #20]
 8016b48:	461c      	mov	r4, r3
 8016b4a:	9304      	str	r3, [sp, #16]
 8016b4c:	9b05      	ldr	r3, [sp, #20]
 8016b4e:	4413      	add	r3, r2
 8016b50:	9305      	str	r3, [sp, #20]
 8016b52:	9b06      	ldr	r3, [sp, #24]
 8016b54:	2101      	movs	r1, #1
 8016b56:	4413      	add	r3, r2
 8016b58:	4648      	mov	r0, r9
 8016b5a:	9306      	str	r3, [sp, #24]
 8016b5c:	f000 ffb8 	bl	8017ad0 <__i2b>
 8016b60:	9b04      	ldr	r3, [sp, #16]
 8016b62:	4605      	mov	r5, r0
 8016b64:	b166      	cbz	r6, 8016b80 <_dtoa_r+0x670>
 8016b66:	9a06      	ldr	r2, [sp, #24]
 8016b68:	2a00      	cmp	r2, #0
 8016b6a:	dd09      	ble.n	8016b80 <_dtoa_r+0x670>
 8016b6c:	42b2      	cmp	r2, r6
 8016b6e:	9905      	ldr	r1, [sp, #20]
 8016b70:	bfa8      	it	ge
 8016b72:	4632      	movge	r2, r6
 8016b74:	1a89      	subs	r1, r1, r2
 8016b76:	9105      	str	r1, [sp, #20]
 8016b78:	9906      	ldr	r1, [sp, #24]
 8016b7a:	1ab6      	subs	r6, r6, r2
 8016b7c:	1a8a      	subs	r2, r1, r2
 8016b7e:	9206      	str	r2, [sp, #24]
 8016b80:	b1fb      	cbz	r3, 8016bc2 <_dtoa_r+0x6b2>
 8016b82:	9a08      	ldr	r2, [sp, #32]
 8016b84:	2a00      	cmp	r2, #0
 8016b86:	f000 80bc 	beq.w	8016d02 <_dtoa_r+0x7f2>
 8016b8a:	b19c      	cbz	r4, 8016bb4 <_dtoa_r+0x6a4>
 8016b8c:	4629      	mov	r1, r5
 8016b8e:	4622      	mov	r2, r4
 8016b90:	4648      	mov	r0, r9
 8016b92:	930b      	str	r3, [sp, #44]	@ 0x2c
 8016b94:	f001 f85c 	bl	8017c50 <__pow5mult>
 8016b98:	9a01      	ldr	r2, [sp, #4]
 8016b9a:	4601      	mov	r1, r0
 8016b9c:	4605      	mov	r5, r0
 8016b9e:	4648      	mov	r0, r9
 8016ba0:	f000 ffac 	bl	8017afc <__multiply>
 8016ba4:	9901      	ldr	r1, [sp, #4]
 8016ba6:	9004      	str	r0, [sp, #16]
 8016ba8:	4648      	mov	r0, r9
 8016baa:	f000 fe93 	bl	80178d4 <_Bfree>
 8016bae:	9a04      	ldr	r2, [sp, #16]
 8016bb0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8016bb2:	9201      	str	r2, [sp, #4]
 8016bb4:	1b1a      	subs	r2, r3, r4
 8016bb6:	d004      	beq.n	8016bc2 <_dtoa_r+0x6b2>
 8016bb8:	9901      	ldr	r1, [sp, #4]
 8016bba:	4648      	mov	r0, r9
 8016bbc:	f001 f848 	bl	8017c50 <__pow5mult>
 8016bc0:	9001      	str	r0, [sp, #4]
 8016bc2:	2101      	movs	r1, #1
 8016bc4:	4648      	mov	r0, r9
 8016bc6:	f000 ff83 	bl	8017ad0 <__i2b>
 8016bca:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8016bcc:	4604      	mov	r4, r0
 8016bce:	2b00      	cmp	r3, #0
 8016bd0:	f000 81d0 	beq.w	8016f74 <_dtoa_r+0xa64>
 8016bd4:	461a      	mov	r2, r3
 8016bd6:	4601      	mov	r1, r0
 8016bd8:	4648      	mov	r0, r9
 8016bda:	f001 f839 	bl	8017c50 <__pow5mult>
 8016bde:	9b07      	ldr	r3, [sp, #28]
 8016be0:	2b01      	cmp	r3, #1
 8016be2:	4604      	mov	r4, r0
 8016be4:	f300 8095 	bgt.w	8016d12 <_dtoa_r+0x802>
 8016be8:	9b02      	ldr	r3, [sp, #8]
 8016bea:	2b00      	cmp	r3, #0
 8016bec:	f040 808b 	bne.w	8016d06 <_dtoa_r+0x7f6>
 8016bf0:	9b03      	ldr	r3, [sp, #12]
 8016bf2:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8016bf6:	2a00      	cmp	r2, #0
 8016bf8:	f040 8087 	bne.w	8016d0a <_dtoa_r+0x7fa>
 8016bfc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8016c00:	0d12      	lsrs	r2, r2, #20
 8016c02:	0512      	lsls	r2, r2, #20
 8016c04:	2a00      	cmp	r2, #0
 8016c06:	f000 8082 	beq.w	8016d0e <_dtoa_r+0x7fe>
 8016c0a:	9b05      	ldr	r3, [sp, #20]
 8016c0c:	3301      	adds	r3, #1
 8016c0e:	9305      	str	r3, [sp, #20]
 8016c10:	9b06      	ldr	r3, [sp, #24]
 8016c12:	3301      	adds	r3, #1
 8016c14:	9306      	str	r3, [sp, #24]
 8016c16:	2301      	movs	r3, #1
 8016c18:	930b      	str	r3, [sp, #44]	@ 0x2c
 8016c1a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8016c1c:	2b00      	cmp	r3, #0
 8016c1e:	f000 81af 	beq.w	8016f80 <_dtoa_r+0xa70>
 8016c22:	6922      	ldr	r2, [r4, #16]
 8016c24:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8016c28:	6910      	ldr	r0, [r2, #16]
 8016c2a:	f000 ff05 	bl	8017a38 <__hi0bits>
 8016c2e:	f1c0 0020 	rsb	r0, r0, #32
 8016c32:	9b06      	ldr	r3, [sp, #24]
 8016c34:	4418      	add	r0, r3
 8016c36:	f010 001f 	ands.w	r0, r0, #31
 8016c3a:	d076      	beq.n	8016d2a <_dtoa_r+0x81a>
 8016c3c:	f1c0 0220 	rsb	r2, r0, #32
 8016c40:	2a04      	cmp	r2, #4
 8016c42:	dd69      	ble.n	8016d18 <_dtoa_r+0x808>
 8016c44:	9b05      	ldr	r3, [sp, #20]
 8016c46:	f1c0 001c 	rsb	r0, r0, #28
 8016c4a:	4403      	add	r3, r0
 8016c4c:	9305      	str	r3, [sp, #20]
 8016c4e:	9b06      	ldr	r3, [sp, #24]
 8016c50:	4406      	add	r6, r0
 8016c52:	4403      	add	r3, r0
 8016c54:	9306      	str	r3, [sp, #24]
 8016c56:	9b05      	ldr	r3, [sp, #20]
 8016c58:	2b00      	cmp	r3, #0
 8016c5a:	dd05      	ble.n	8016c68 <_dtoa_r+0x758>
 8016c5c:	9901      	ldr	r1, [sp, #4]
 8016c5e:	461a      	mov	r2, r3
 8016c60:	4648      	mov	r0, r9
 8016c62:	f001 f84f 	bl	8017d04 <__lshift>
 8016c66:	9001      	str	r0, [sp, #4]
 8016c68:	9b06      	ldr	r3, [sp, #24]
 8016c6a:	2b00      	cmp	r3, #0
 8016c6c:	dd05      	ble.n	8016c7a <_dtoa_r+0x76a>
 8016c6e:	4621      	mov	r1, r4
 8016c70:	461a      	mov	r2, r3
 8016c72:	4648      	mov	r0, r9
 8016c74:	f001 f846 	bl	8017d04 <__lshift>
 8016c78:	4604      	mov	r4, r0
 8016c7a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8016c7c:	2b00      	cmp	r3, #0
 8016c7e:	d056      	beq.n	8016d2e <_dtoa_r+0x81e>
 8016c80:	9801      	ldr	r0, [sp, #4]
 8016c82:	4621      	mov	r1, r4
 8016c84:	f001 f8aa 	bl	8017ddc <__mcmp>
 8016c88:	2800      	cmp	r0, #0
 8016c8a:	da50      	bge.n	8016d2e <_dtoa_r+0x81e>
 8016c8c:	f108 33ff 	add.w	r3, r8, #4294967295
 8016c90:	9304      	str	r3, [sp, #16]
 8016c92:	9901      	ldr	r1, [sp, #4]
 8016c94:	2300      	movs	r3, #0
 8016c96:	220a      	movs	r2, #10
 8016c98:	4648      	mov	r0, r9
 8016c9a:	f000 fe3d 	bl	8017918 <__multadd>
 8016c9e:	9b08      	ldr	r3, [sp, #32]
 8016ca0:	9001      	str	r0, [sp, #4]
 8016ca2:	2b00      	cmp	r3, #0
 8016ca4:	f000 816e 	beq.w	8016f84 <_dtoa_r+0xa74>
 8016ca8:	4629      	mov	r1, r5
 8016caa:	2300      	movs	r3, #0
 8016cac:	220a      	movs	r2, #10
 8016cae:	4648      	mov	r0, r9
 8016cb0:	f000 fe32 	bl	8017918 <__multadd>
 8016cb4:	f1bb 0f00 	cmp.w	fp, #0
 8016cb8:	4605      	mov	r5, r0
 8016cba:	dc64      	bgt.n	8016d86 <_dtoa_r+0x876>
 8016cbc:	9b07      	ldr	r3, [sp, #28]
 8016cbe:	2b02      	cmp	r3, #2
 8016cc0:	dc3e      	bgt.n	8016d40 <_dtoa_r+0x830>
 8016cc2:	e060      	b.n	8016d86 <_dtoa_r+0x876>
 8016cc4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8016cc6:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8016cca:	e73c      	b.n	8016b46 <_dtoa_r+0x636>
 8016ccc:	f10a 34ff 	add.w	r4, sl, #4294967295
 8016cd0:	42a3      	cmp	r3, r4
 8016cd2:	bfbf      	itttt	lt
 8016cd4:	1ae2      	sublt	r2, r4, r3
 8016cd6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8016cd8:	189b      	addlt	r3, r3, r2
 8016cda:	930a      	strlt	r3, [sp, #40]	@ 0x28
 8016cdc:	bfae      	itee	ge
 8016cde:	1b1c      	subge	r4, r3, r4
 8016ce0:	4623      	movlt	r3, r4
 8016ce2:	2400      	movlt	r4, #0
 8016ce4:	f1ba 0f00 	cmp.w	sl, #0
 8016ce8:	bfb5      	itete	lt
 8016cea:	9a05      	ldrlt	r2, [sp, #20]
 8016cec:	9e05      	ldrge	r6, [sp, #20]
 8016cee:	eba2 060a 	sublt.w	r6, r2, sl
 8016cf2:	4652      	movge	r2, sl
 8016cf4:	bfb8      	it	lt
 8016cf6:	2200      	movlt	r2, #0
 8016cf8:	e727      	b.n	8016b4a <_dtoa_r+0x63a>
 8016cfa:	9e05      	ldr	r6, [sp, #20]
 8016cfc:	9d08      	ldr	r5, [sp, #32]
 8016cfe:	461c      	mov	r4, r3
 8016d00:	e730      	b.n	8016b64 <_dtoa_r+0x654>
 8016d02:	461a      	mov	r2, r3
 8016d04:	e758      	b.n	8016bb8 <_dtoa_r+0x6a8>
 8016d06:	2300      	movs	r3, #0
 8016d08:	e786      	b.n	8016c18 <_dtoa_r+0x708>
 8016d0a:	9b02      	ldr	r3, [sp, #8]
 8016d0c:	e784      	b.n	8016c18 <_dtoa_r+0x708>
 8016d0e:	920b      	str	r2, [sp, #44]	@ 0x2c
 8016d10:	e783      	b.n	8016c1a <_dtoa_r+0x70a>
 8016d12:	2300      	movs	r3, #0
 8016d14:	930b      	str	r3, [sp, #44]	@ 0x2c
 8016d16:	e784      	b.n	8016c22 <_dtoa_r+0x712>
 8016d18:	d09d      	beq.n	8016c56 <_dtoa_r+0x746>
 8016d1a:	9b05      	ldr	r3, [sp, #20]
 8016d1c:	321c      	adds	r2, #28
 8016d1e:	4413      	add	r3, r2
 8016d20:	9305      	str	r3, [sp, #20]
 8016d22:	9b06      	ldr	r3, [sp, #24]
 8016d24:	4416      	add	r6, r2
 8016d26:	4413      	add	r3, r2
 8016d28:	e794      	b.n	8016c54 <_dtoa_r+0x744>
 8016d2a:	4602      	mov	r2, r0
 8016d2c:	e7f5      	b.n	8016d1a <_dtoa_r+0x80a>
 8016d2e:	f1ba 0f00 	cmp.w	sl, #0
 8016d32:	f8cd 8010 	str.w	r8, [sp, #16]
 8016d36:	46d3      	mov	fp, sl
 8016d38:	dc21      	bgt.n	8016d7e <_dtoa_r+0x86e>
 8016d3a:	9b07      	ldr	r3, [sp, #28]
 8016d3c:	2b02      	cmp	r3, #2
 8016d3e:	dd1e      	ble.n	8016d7e <_dtoa_r+0x86e>
 8016d40:	f1bb 0f00 	cmp.w	fp, #0
 8016d44:	f47f aeb7 	bne.w	8016ab6 <_dtoa_r+0x5a6>
 8016d48:	4621      	mov	r1, r4
 8016d4a:	465b      	mov	r3, fp
 8016d4c:	2205      	movs	r2, #5
 8016d4e:	4648      	mov	r0, r9
 8016d50:	f000 fde2 	bl	8017918 <__multadd>
 8016d54:	4601      	mov	r1, r0
 8016d56:	4604      	mov	r4, r0
 8016d58:	9801      	ldr	r0, [sp, #4]
 8016d5a:	f001 f83f 	bl	8017ddc <__mcmp>
 8016d5e:	2800      	cmp	r0, #0
 8016d60:	f77f aea9 	ble.w	8016ab6 <_dtoa_r+0x5a6>
 8016d64:	463e      	mov	r6, r7
 8016d66:	2331      	movs	r3, #49	@ 0x31
 8016d68:	f806 3b01 	strb.w	r3, [r6], #1
 8016d6c:	9b04      	ldr	r3, [sp, #16]
 8016d6e:	3301      	adds	r3, #1
 8016d70:	9304      	str	r3, [sp, #16]
 8016d72:	e6a4      	b.n	8016abe <_dtoa_r+0x5ae>
 8016d74:	f8cd 8010 	str.w	r8, [sp, #16]
 8016d78:	4654      	mov	r4, sl
 8016d7a:	4625      	mov	r5, r4
 8016d7c:	e7f2      	b.n	8016d64 <_dtoa_r+0x854>
 8016d7e:	9b08      	ldr	r3, [sp, #32]
 8016d80:	2b00      	cmp	r3, #0
 8016d82:	f000 8103 	beq.w	8016f8c <_dtoa_r+0xa7c>
 8016d86:	2e00      	cmp	r6, #0
 8016d88:	dd05      	ble.n	8016d96 <_dtoa_r+0x886>
 8016d8a:	4629      	mov	r1, r5
 8016d8c:	4632      	mov	r2, r6
 8016d8e:	4648      	mov	r0, r9
 8016d90:	f000 ffb8 	bl	8017d04 <__lshift>
 8016d94:	4605      	mov	r5, r0
 8016d96:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8016d98:	2b00      	cmp	r3, #0
 8016d9a:	d058      	beq.n	8016e4e <_dtoa_r+0x93e>
 8016d9c:	6869      	ldr	r1, [r5, #4]
 8016d9e:	4648      	mov	r0, r9
 8016da0:	f000 fd58 	bl	8017854 <_Balloc>
 8016da4:	4606      	mov	r6, r0
 8016da6:	b928      	cbnz	r0, 8016db4 <_dtoa_r+0x8a4>
 8016da8:	4b82      	ldr	r3, [pc, #520]	@ (8016fb4 <_dtoa_r+0xaa4>)
 8016daa:	4602      	mov	r2, r0
 8016dac:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8016db0:	f7ff bbc7 	b.w	8016542 <_dtoa_r+0x32>
 8016db4:	692a      	ldr	r2, [r5, #16]
 8016db6:	3202      	adds	r2, #2
 8016db8:	0092      	lsls	r2, r2, #2
 8016dba:	f105 010c 	add.w	r1, r5, #12
 8016dbe:	300c      	adds	r0, #12
 8016dc0:	f7ff fb05 	bl	80163ce <memcpy>
 8016dc4:	2201      	movs	r2, #1
 8016dc6:	4631      	mov	r1, r6
 8016dc8:	4648      	mov	r0, r9
 8016dca:	f000 ff9b 	bl	8017d04 <__lshift>
 8016dce:	1c7b      	adds	r3, r7, #1
 8016dd0:	9305      	str	r3, [sp, #20]
 8016dd2:	eb07 030b 	add.w	r3, r7, fp
 8016dd6:	9309      	str	r3, [sp, #36]	@ 0x24
 8016dd8:	9b02      	ldr	r3, [sp, #8]
 8016dda:	f003 0301 	and.w	r3, r3, #1
 8016dde:	46a8      	mov	r8, r5
 8016de0:	9308      	str	r3, [sp, #32]
 8016de2:	4605      	mov	r5, r0
 8016de4:	9b05      	ldr	r3, [sp, #20]
 8016de6:	9801      	ldr	r0, [sp, #4]
 8016de8:	4621      	mov	r1, r4
 8016dea:	f103 3bff 	add.w	fp, r3, #4294967295
 8016dee:	f7ff fb07 	bl	8016400 <quorem>
 8016df2:	4641      	mov	r1, r8
 8016df4:	9002      	str	r0, [sp, #8]
 8016df6:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8016dfa:	9801      	ldr	r0, [sp, #4]
 8016dfc:	f000 ffee 	bl	8017ddc <__mcmp>
 8016e00:	462a      	mov	r2, r5
 8016e02:	9006      	str	r0, [sp, #24]
 8016e04:	4621      	mov	r1, r4
 8016e06:	4648      	mov	r0, r9
 8016e08:	f001 f804 	bl	8017e14 <__mdiff>
 8016e0c:	68c2      	ldr	r2, [r0, #12]
 8016e0e:	4606      	mov	r6, r0
 8016e10:	b9fa      	cbnz	r2, 8016e52 <_dtoa_r+0x942>
 8016e12:	4601      	mov	r1, r0
 8016e14:	9801      	ldr	r0, [sp, #4]
 8016e16:	f000 ffe1 	bl	8017ddc <__mcmp>
 8016e1a:	4602      	mov	r2, r0
 8016e1c:	4631      	mov	r1, r6
 8016e1e:	4648      	mov	r0, r9
 8016e20:	920a      	str	r2, [sp, #40]	@ 0x28
 8016e22:	f000 fd57 	bl	80178d4 <_Bfree>
 8016e26:	9b07      	ldr	r3, [sp, #28]
 8016e28:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8016e2a:	9e05      	ldr	r6, [sp, #20]
 8016e2c:	ea43 0102 	orr.w	r1, r3, r2
 8016e30:	9b08      	ldr	r3, [sp, #32]
 8016e32:	4319      	orrs	r1, r3
 8016e34:	d10f      	bne.n	8016e56 <_dtoa_r+0x946>
 8016e36:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8016e3a:	d028      	beq.n	8016e8e <_dtoa_r+0x97e>
 8016e3c:	9b06      	ldr	r3, [sp, #24]
 8016e3e:	2b00      	cmp	r3, #0
 8016e40:	dd02      	ble.n	8016e48 <_dtoa_r+0x938>
 8016e42:	9b02      	ldr	r3, [sp, #8]
 8016e44:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 8016e48:	f88b a000 	strb.w	sl, [fp]
 8016e4c:	e639      	b.n	8016ac2 <_dtoa_r+0x5b2>
 8016e4e:	4628      	mov	r0, r5
 8016e50:	e7bd      	b.n	8016dce <_dtoa_r+0x8be>
 8016e52:	2201      	movs	r2, #1
 8016e54:	e7e2      	b.n	8016e1c <_dtoa_r+0x90c>
 8016e56:	9b06      	ldr	r3, [sp, #24]
 8016e58:	2b00      	cmp	r3, #0
 8016e5a:	db04      	blt.n	8016e66 <_dtoa_r+0x956>
 8016e5c:	9907      	ldr	r1, [sp, #28]
 8016e5e:	430b      	orrs	r3, r1
 8016e60:	9908      	ldr	r1, [sp, #32]
 8016e62:	430b      	orrs	r3, r1
 8016e64:	d120      	bne.n	8016ea8 <_dtoa_r+0x998>
 8016e66:	2a00      	cmp	r2, #0
 8016e68:	ddee      	ble.n	8016e48 <_dtoa_r+0x938>
 8016e6a:	9901      	ldr	r1, [sp, #4]
 8016e6c:	2201      	movs	r2, #1
 8016e6e:	4648      	mov	r0, r9
 8016e70:	f000 ff48 	bl	8017d04 <__lshift>
 8016e74:	4621      	mov	r1, r4
 8016e76:	9001      	str	r0, [sp, #4]
 8016e78:	f000 ffb0 	bl	8017ddc <__mcmp>
 8016e7c:	2800      	cmp	r0, #0
 8016e7e:	dc03      	bgt.n	8016e88 <_dtoa_r+0x978>
 8016e80:	d1e2      	bne.n	8016e48 <_dtoa_r+0x938>
 8016e82:	f01a 0f01 	tst.w	sl, #1
 8016e86:	d0df      	beq.n	8016e48 <_dtoa_r+0x938>
 8016e88:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8016e8c:	d1d9      	bne.n	8016e42 <_dtoa_r+0x932>
 8016e8e:	2339      	movs	r3, #57	@ 0x39
 8016e90:	f88b 3000 	strb.w	r3, [fp]
 8016e94:	4633      	mov	r3, r6
 8016e96:	461e      	mov	r6, r3
 8016e98:	3b01      	subs	r3, #1
 8016e9a:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8016e9e:	2a39      	cmp	r2, #57	@ 0x39
 8016ea0:	d053      	beq.n	8016f4a <_dtoa_r+0xa3a>
 8016ea2:	3201      	adds	r2, #1
 8016ea4:	701a      	strb	r2, [r3, #0]
 8016ea6:	e60c      	b.n	8016ac2 <_dtoa_r+0x5b2>
 8016ea8:	2a00      	cmp	r2, #0
 8016eaa:	dd07      	ble.n	8016ebc <_dtoa_r+0x9ac>
 8016eac:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8016eb0:	d0ed      	beq.n	8016e8e <_dtoa_r+0x97e>
 8016eb2:	f10a 0301 	add.w	r3, sl, #1
 8016eb6:	f88b 3000 	strb.w	r3, [fp]
 8016eba:	e602      	b.n	8016ac2 <_dtoa_r+0x5b2>
 8016ebc:	9b05      	ldr	r3, [sp, #20]
 8016ebe:	9a05      	ldr	r2, [sp, #20]
 8016ec0:	f803 ac01 	strb.w	sl, [r3, #-1]
 8016ec4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016ec6:	4293      	cmp	r3, r2
 8016ec8:	d029      	beq.n	8016f1e <_dtoa_r+0xa0e>
 8016eca:	9901      	ldr	r1, [sp, #4]
 8016ecc:	2300      	movs	r3, #0
 8016ece:	220a      	movs	r2, #10
 8016ed0:	4648      	mov	r0, r9
 8016ed2:	f000 fd21 	bl	8017918 <__multadd>
 8016ed6:	45a8      	cmp	r8, r5
 8016ed8:	9001      	str	r0, [sp, #4]
 8016eda:	f04f 0300 	mov.w	r3, #0
 8016ede:	f04f 020a 	mov.w	r2, #10
 8016ee2:	4641      	mov	r1, r8
 8016ee4:	4648      	mov	r0, r9
 8016ee6:	d107      	bne.n	8016ef8 <_dtoa_r+0x9e8>
 8016ee8:	f000 fd16 	bl	8017918 <__multadd>
 8016eec:	4680      	mov	r8, r0
 8016eee:	4605      	mov	r5, r0
 8016ef0:	9b05      	ldr	r3, [sp, #20]
 8016ef2:	3301      	adds	r3, #1
 8016ef4:	9305      	str	r3, [sp, #20]
 8016ef6:	e775      	b.n	8016de4 <_dtoa_r+0x8d4>
 8016ef8:	f000 fd0e 	bl	8017918 <__multadd>
 8016efc:	4629      	mov	r1, r5
 8016efe:	4680      	mov	r8, r0
 8016f00:	2300      	movs	r3, #0
 8016f02:	220a      	movs	r2, #10
 8016f04:	4648      	mov	r0, r9
 8016f06:	f000 fd07 	bl	8017918 <__multadd>
 8016f0a:	4605      	mov	r5, r0
 8016f0c:	e7f0      	b.n	8016ef0 <_dtoa_r+0x9e0>
 8016f0e:	f1bb 0f00 	cmp.w	fp, #0
 8016f12:	bfcc      	ite	gt
 8016f14:	465e      	movgt	r6, fp
 8016f16:	2601      	movle	r6, #1
 8016f18:	443e      	add	r6, r7
 8016f1a:	f04f 0800 	mov.w	r8, #0
 8016f1e:	9901      	ldr	r1, [sp, #4]
 8016f20:	2201      	movs	r2, #1
 8016f22:	4648      	mov	r0, r9
 8016f24:	f000 feee 	bl	8017d04 <__lshift>
 8016f28:	4621      	mov	r1, r4
 8016f2a:	9001      	str	r0, [sp, #4]
 8016f2c:	f000 ff56 	bl	8017ddc <__mcmp>
 8016f30:	2800      	cmp	r0, #0
 8016f32:	dcaf      	bgt.n	8016e94 <_dtoa_r+0x984>
 8016f34:	d102      	bne.n	8016f3c <_dtoa_r+0xa2c>
 8016f36:	f01a 0f01 	tst.w	sl, #1
 8016f3a:	d1ab      	bne.n	8016e94 <_dtoa_r+0x984>
 8016f3c:	4633      	mov	r3, r6
 8016f3e:	461e      	mov	r6, r3
 8016f40:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8016f44:	2a30      	cmp	r2, #48	@ 0x30
 8016f46:	d0fa      	beq.n	8016f3e <_dtoa_r+0xa2e>
 8016f48:	e5bb      	b.n	8016ac2 <_dtoa_r+0x5b2>
 8016f4a:	429f      	cmp	r7, r3
 8016f4c:	d1a3      	bne.n	8016e96 <_dtoa_r+0x986>
 8016f4e:	9b04      	ldr	r3, [sp, #16]
 8016f50:	3301      	adds	r3, #1
 8016f52:	9304      	str	r3, [sp, #16]
 8016f54:	2331      	movs	r3, #49	@ 0x31
 8016f56:	703b      	strb	r3, [r7, #0]
 8016f58:	e5b3      	b.n	8016ac2 <_dtoa_r+0x5b2>
 8016f5a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8016f5c:	4f16      	ldr	r7, [pc, #88]	@ (8016fb8 <_dtoa_r+0xaa8>)
 8016f5e:	b11b      	cbz	r3, 8016f68 <_dtoa_r+0xa58>
 8016f60:	f107 0308 	add.w	r3, r7, #8
 8016f64:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8016f66:	6013      	str	r3, [r2, #0]
 8016f68:	4638      	mov	r0, r7
 8016f6a:	b011      	add	sp, #68	@ 0x44
 8016f6c:	ecbd 8b02 	vpop	{d8}
 8016f70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016f74:	9b07      	ldr	r3, [sp, #28]
 8016f76:	2b01      	cmp	r3, #1
 8016f78:	f77f ae36 	ble.w	8016be8 <_dtoa_r+0x6d8>
 8016f7c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8016f7e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8016f80:	2001      	movs	r0, #1
 8016f82:	e656      	b.n	8016c32 <_dtoa_r+0x722>
 8016f84:	f1bb 0f00 	cmp.w	fp, #0
 8016f88:	f77f aed7 	ble.w	8016d3a <_dtoa_r+0x82a>
 8016f8c:	463e      	mov	r6, r7
 8016f8e:	9801      	ldr	r0, [sp, #4]
 8016f90:	4621      	mov	r1, r4
 8016f92:	f7ff fa35 	bl	8016400 <quorem>
 8016f96:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8016f9a:	f806 ab01 	strb.w	sl, [r6], #1
 8016f9e:	1bf2      	subs	r2, r6, r7
 8016fa0:	4593      	cmp	fp, r2
 8016fa2:	ddb4      	ble.n	8016f0e <_dtoa_r+0x9fe>
 8016fa4:	9901      	ldr	r1, [sp, #4]
 8016fa6:	2300      	movs	r3, #0
 8016fa8:	220a      	movs	r2, #10
 8016faa:	4648      	mov	r0, r9
 8016fac:	f000 fcb4 	bl	8017918 <__multadd>
 8016fb0:	9001      	str	r0, [sp, #4]
 8016fb2:	e7ec      	b.n	8016f8e <_dtoa_r+0xa7e>
 8016fb4:	08019fc9 	.word	0x08019fc9
 8016fb8:	08019f4d 	.word	0x08019f4d

08016fbc <_free_r>:
 8016fbc:	b538      	push	{r3, r4, r5, lr}
 8016fbe:	4605      	mov	r5, r0
 8016fc0:	2900      	cmp	r1, #0
 8016fc2:	d041      	beq.n	8017048 <_free_r+0x8c>
 8016fc4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016fc8:	1f0c      	subs	r4, r1, #4
 8016fca:	2b00      	cmp	r3, #0
 8016fcc:	bfb8      	it	lt
 8016fce:	18e4      	addlt	r4, r4, r3
 8016fd0:	f000 fc34 	bl	801783c <__malloc_lock>
 8016fd4:	4a1d      	ldr	r2, [pc, #116]	@ (801704c <_free_r+0x90>)
 8016fd6:	6813      	ldr	r3, [r2, #0]
 8016fd8:	b933      	cbnz	r3, 8016fe8 <_free_r+0x2c>
 8016fda:	6063      	str	r3, [r4, #4]
 8016fdc:	6014      	str	r4, [r2, #0]
 8016fde:	4628      	mov	r0, r5
 8016fe0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016fe4:	f000 bc30 	b.w	8017848 <__malloc_unlock>
 8016fe8:	42a3      	cmp	r3, r4
 8016fea:	d908      	bls.n	8016ffe <_free_r+0x42>
 8016fec:	6820      	ldr	r0, [r4, #0]
 8016fee:	1821      	adds	r1, r4, r0
 8016ff0:	428b      	cmp	r3, r1
 8016ff2:	bf01      	itttt	eq
 8016ff4:	6819      	ldreq	r1, [r3, #0]
 8016ff6:	685b      	ldreq	r3, [r3, #4]
 8016ff8:	1809      	addeq	r1, r1, r0
 8016ffa:	6021      	streq	r1, [r4, #0]
 8016ffc:	e7ed      	b.n	8016fda <_free_r+0x1e>
 8016ffe:	461a      	mov	r2, r3
 8017000:	685b      	ldr	r3, [r3, #4]
 8017002:	b10b      	cbz	r3, 8017008 <_free_r+0x4c>
 8017004:	42a3      	cmp	r3, r4
 8017006:	d9fa      	bls.n	8016ffe <_free_r+0x42>
 8017008:	6811      	ldr	r1, [r2, #0]
 801700a:	1850      	adds	r0, r2, r1
 801700c:	42a0      	cmp	r0, r4
 801700e:	d10b      	bne.n	8017028 <_free_r+0x6c>
 8017010:	6820      	ldr	r0, [r4, #0]
 8017012:	4401      	add	r1, r0
 8017014:	1850      	adds	r0, r2, r1
 8017016:	4283      	cmp	r3, r0
 8017018:	6011      	str	r1, [r2, #0]
 801701a:	d1e0      	bne.n	8016fde <_free_r+0x22>
 801701c:	6818      	ldr	r0, [r3, #0]
 801701e:	685b      	ldr	r3, [r3, #4]
 8017020:	6053      	str	r3, [r2, #4]
 8017022:	4408      	add	r0, r1
 8017024:	6010      	str	r0, [r2, #0]
 8017026:	e7da      	b.n	8016fde <_free_r+0x22>
 8017028:	d902      	bls.n	8017030 <_free_r+0x74>
 801702a:	230c      	movs	r3, #12
 801702c:	602b      	str	r3, [r5, #0]
 801702e:	e7d6      	b.n	8016fde <_free_r+0x22>
 8017030:	6820      	ldr	r0, [r4, #0]
 8017032:	1821      	adds	r1, r4, r0
 8017034:	428b      	cmp	r3, r1
 8017036:	bf04      	itt	eq
 8017038:	6819      	ldreq	r1, [r3, #0]
 801703a:	685b      	ldreq	r3, [r3, #4]
 801703c:	6063      	str	r3, [r4, #4]
 801703e:	bf04      	itt	eq
 8017040:	1809      	addeq	r1, r1, r0
 8017042:	6021      	streq	r1, [r4, #0]
 8017044:	6054      	str	r4, [r2, #4]
 8017046:	e7ca      	b.n	8016fde <_free_r+0x22>
 8017048:	bd38      	pop	{r3, r4, r5, pc}
 801704a:	bf00      	nop
 801704c:	24005c78 	.word	0x24005c78

08017050 <rshift>:
 8017050:	6903      	ldr	r3, [r0, #16]
 8017052:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8017056:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801705a:	ea4f 1261 	mov.w	r2, r1, asr #5
 801705e:	f100 0414 	add.w	r4, r0, #20
 8017062:	dd45      	ble.n	80170f0 <rshift+0xa0>
 8017064:	f011 011f 	ands.w	r1, r1, #31
 8017068:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801706c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8017070:	d10c      	bne.n	801708c <rshift+0x3c>
 8017072:	f100 0710 	add.w	r7, r0, #16
 8017076:	4629      	mov	r1, r5
 8017078:	42b1      	cmp	r1, r6
 801707a:	d334      	bcc.n	80170e6 <rshift+0x96>
 801707c:	1a9b      	subs	r3, r3, r2
 801707e:	009b      	lsls	r3, r3, #2
 8017080:	1eea      	subs	r2, r5, #3
 8017082:	4296      	cmp	r6, r2
 8017084:	bf38      	it	cc
 8017086:	2300      	movcc	r3, #0
 8017088:	4423      	add	r3, r4
 801708a:	e015      	b.n	80170b8 <rshift+0x68>
 801708c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8017090:	f1c1 0820 	rsb	r8, r1, #32
 8017094:	40cf      	lsrs	r7, r1
 8017096:	f105 0e04 	add.w	lr, r5, #4
 801709a:	46a1      	mov	r9, r4
 801709c:	4576      	cmp	r6, lr
 801709e:	46f4      	mov	ip, lr
 80170a0:	d815      	bhi.n	80170ce <rshift+0x7e>
 80170a2:	1a9a      	subs	r2, r3, r2
 80170a4:	0092      	lsls	r2, r2, #2
 80170a6:	3a04      	subs	r2, #4
 80170a8:	3501      	adds	r5, #1
 80170aa:	42ae      	cmp	r6, r5
 80170ac:	bf38      	it	cc
 80170ae:	2200      	movcc	r2, #0
 80170b0:	18a3      	adds	r3, r4, r2
 80170b2:	50a7      	str	r7, [r4, r2]
 80170b4:	b107      	cbz	r7, 80170b8 <rshift+0x68>
 80170b6:	3304      	adds	r3, #4
 80170b8:	1b1a      	subs	r2, r3, r4
 80170ba:	42a3      	cmp	r3, r4
 80170bc:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80170c0:	bf08      	it	eq
 80170c2:	2300      	moveq	r3, #0
 80170c4:	6102      	str	r2, [r0, #16]
 80170c6:	bf08      	it	eq
 80170c8:	6143      	streq	r3, [r0, #20]
 80170ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80170ce:	f8dc c000 	ldr.w	ip, [ip]
 80170d2:	fa0c fc08 	lsl.w	ip, ip, r8
 80170d6:	ea4c 0707 	orr.w	r7, ip, r7
 80170da:	f849 7b04 	str.w	r7, [r9], #4
 80170de:	f85e 7b04 	ldr.w	r7, [lr], #4
 80170e2:	40cf      	lsrs	r7, r1
 80170e4:	e7da      	b.n	801709c <rshift+0x4c>
 80170e6:	f851 cb04 	ldr.w	ip, [r1], #4
 80170ea:	f847 cf04 	str.w	ip, [r7, #4]!
 80170ee:	e7c3      	b.n	8017078 <rshift+0x28>
 80170f0:	4623      	mov	r3, r4
 80170f2:	e7e1      	b.n	80170b8 <rshift+0x68>

080170f4 <__hexdig_fun>:
 80170f4:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 80170f8:	2b09      	cmp	r3, #9
 80170fa:	d802      	bhi.n	8017102 <__hexdig_fun+0xe>
 80170fc:	3820      	subs	r0, #32
 80170fe:	b2c0      	uxtb	r0, r0
 8017100:	4770      	bx	lr
 8017102:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8017106:	2b05      	cmp	r3, #5
 8017108:	d801      	bhi.n	801710e <__hexdig_fun+0x1a>
 801710a:	3847      	subs	r0, #71	@ 0x47
 801710c:	e7f7      	b.n	80170fe <__hexdig_fun+0xa>
 801710e:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8017112:	2b05      	cmp	r3, #5
 8017114:	d801      	bhi.n	801711a <__hexdig_fun+0x26>
 8017116:	3827      	subs	r0, #39	@ 0x27
 8017118:	e7f1      	b.n	80170fe <__hexdig_fun+0xa>
 801711a:	2000      	movs	r0, #0
 801711c:	4770      	bx	lr
	...

08017120 <__gethex>:
 8017120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017124:	b085      	sub	sp, #20
 8017126:	468a      	mov	sl, r1
 8017128:	9302      	str	r3, [sp, #8]
 801712a:	680b      	ldr	r3, [r1, #0]
 801712c:	9001      	str	r0, [sp, #4]
 801712e:	4690      	mov	r8, r2
 8017130:	1c9c      	adds	r4, r3, #2
 8017132:	46a1      	mov	r9, r4
 8017134:	f814 0b01 	ldrb.w	r0, [r4], #1
 8017138:	2830      	cmp	r0, #48	@ 0x30
 801713a:	d0fa      	beq.n	8017132 <__gethex+0x12>
 801713c:	eba9 0303 	sub.w	r3, r9, r3
 8017140:	f1a3 0b02 	sub.w	fp, r3, #2
 8017144:	f7ff ffd6 	bl	80170f4 <__hexdig_fun>
 8017148:	4605      	mov	r5, r0
 801714a:	2800      	cmp	r0, #0
 801714c:	d168      	bne.n	8017220 <__gethex+0x100>
 801714e:	49a0      	ldr	r1, [pc, #640]	@ (80173d0 <__gethex+0x2b0>)
 8017150:	2201      	movs	r2, #1
 8017152:	4648      	mov	r0, r9
 8017154:	f7ff f8b2 	bl	80162bc <strncmp>
 8017158:	4607      	mov	r7, r0
 801715a:	2800      	cmp	r0, #0
 801715c:	d167      	bne.n	801722e <__gethex+0x10e>
 801715e:	f899 0001 	ldrb.w	r0, [r9, #1]
 8017162:	4626      	mov	r6, r4
 8017164:	f7ff ffc6 	bl	80170f4 <__hexdig_fun>
 8017168:	2800      	cmp	r0, #0
 801716a:	d062      	beq.n	8017232 <__gethex+0x112>
 801716c:	4623      	mov	r3, r4
 801716e:	7818      	ldrb	r0, [r3, #0]
 8017170:	2830      	cmp	r0, #48	@ 0x30
 8017172:	4699      	mov	r9, r3
 8017174:	f103 0301 	add.w	r3, r3, #1
 8017178:	d0f9      	beq.n	801716e <__gethex+0x4e>
 801717a:	f7ff ffbb 	bl	80170f4 <__hexdig_fun>
 801717e:	fab0 f580 	clz	r5, r0
 8017182:	096d      	lsrs	r5, r5, #5
 8017184:	f04f 0b01 	mov.w	fp, #1
 8017188:	464a      	mov	r2, r9
 801718a:	4616      	mov	r6, r2
 801718c:	3201      	adds	r2, #1
 801718e:	7830      	ldrb	r0, [r6, #0]
 8017190:	f7ff ffb0 	bl	80170f4 <__hexdig_fun>
 8017194:	2800      	cmp	r0, #0
 8017196:	d1f8      	bne.n	801718a <__gethex+0x6a>
 8017198:	498d      	ldr	r1, [pc, #564]	@ (80173d0 <__gethex+0x2b0>)
 801719a:	2201      	movs	r2, #1
 801719c:	4630      	mov	r0, r6
 801719e:	f7ff f88d 	bl	80162bc <strncmp>
 80171a2:	2800      	cmp	r0, #0
 80171a4:	d13f      	bne.n	8017226 <__gethex+0x106>
 80171a6:	b944      	cbnz	r4, 80171ba <__gethex+0x9a>
 80171a8:	1c74      	adds	r4, r6, #1
 80171aa:	4622      	mov	r2, r4
 80171ac:	4616      	mov	r6, r2
 80171ae:	3201      	adds	r2, #1
 80171b0:	7830      	ldrb	r0, [r6, #0]
 80171b2:	f7ff ff9f 	bl	80170f4 <__hexdig_fun>
 80171b6:	2800      	cmp	r0, #0
 80171b8:	d1f8      	bne.n	80171ac <__gethex+0x8c>
 80171ba:	1ba4      	subs	r4, r4, r6
 80171bc:	00a7      	lsls	r7, r4, #2
 80171be:	7833      	ldrb	r3, [r6, #0]
 80171c0:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80171c4:	2b50      	cmp	r3, #80	@ 0x50
 80171c6:	d13e      	bne.n	8017246 <__gethex+0x126>
 80171c8:	7873      	ldrb	r3, [r6, #1]
 80171ca:	2b2b      	cmp	r3, #43	@ 0x2b
 80171cc:	d033      	beq.n	8017236 <__gethex+0x116>
 80171ce:	2b2d      	cmp	r3, #45	@ 0x2d
 80171d0:	d034      	beq.n	801723c <__gethex+0x11c>
 80171d2:	1c71      	adds	r1, r6, #1
 80171d4:	2400      	movs	r4, #0
 80171d6:	7808      	ldrb	r0, [r1, #0]
 80171d8:	f7ff ff8c 	bl	80170f4 <__hexdig_fun>
 80171dc:	1e43      	subs	r3, r0, #1
 80171de:	b2db      	uxtb	r3, r3
 80171e0:	2b18      	cmp	r3, #24
 80171e2:	d830      	bhi.n	8017246 <__gethex+0x126>
 80171e4:	f1a0 0210 	sub.w	r2, r0, #16
 80171e8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80171ec:	f7ff ff82 	bl	80170f4 <__hexdig_fun>
 80171f0:	f100 3cff 	add.w	ip, r0, #4294967295
 80171f4:	fa5f fc8c 	uxtb.w	ip, ip
 80171f8:	f1bc 0f18 	cmp.w	ip, #24
 80171fc:	f04f 030a 	mov.w	r3, #10
 8017200:	d91e      	bls.n	8017240 <__gethex+0x120>
 8017202:	b104      	cbz	r4, 8017206 <__gethex+0xe6>
 8017204:	4252      	negs	r2, r2
 8017206:	4417      	add	r7, r2
 8017208:	f8ca 1000 	str.w	r1, [sl]
 801720c:	b1ed      	cbz	r5, 801724a <__gethex+0x12a>
 801720e:	f1bb 0f00 	cmp.w	fp, #0
 8017212:	bf0c      	ite	eq
 8017214:	2506      	moveq	r5, #6
 8017216:	2500      	movne	r5, #0
 8017218:	4628      	mov	r0, r5
 801721a:	b005      	add	sp, #20
 801721c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017220:	2500      	movs	r5, #0
 8017222:	462c      	mov	r4, r5
 8017224:	e7b0      	b.n	8017188 <__gethex+0x68>
 8017226:	2c00      	cmp	r4, #0
 8017228:	d1c7      	bne.n	80171ba <__gethex+0x9a>
 801722a:	4627      	mov	r7, r4
 801722c:	e7c7      	b.n	80171be <__gethex+0x9e>
 801722e:	464e      	mov	r6, r9
 8017230:	462f      	mov	r7, r5
 8017232:	2501      	movs	r5, #1
 8017234:	e7c3      	b.n	80171be <__gethex+0x9e>
 8017236:	2400      	movs	r4, #0
 8017238:	1cb1      	adds	r1, r6, #2
 801723a:	e7cc      	b.n	80171d6 <__gethex+0xb6>
 801723c:	2401      	movs	r4, #1
 801723e:	e7fb      	b.n	8017238 <__gethex+0x118>
 8017240:	fb03 0002 	mla	r0, r3, r2, r0
 8017244:	e7ce      	b.n	80171e4 <__gethex+0xc4>
 8017246:	4631      	mov	r1, r6
 8017248:	e7de      	b.n	8017208 <__gethex+0xe8>
 801724a:	eba6 0309 	sub.w	r3, r6, r9
 801724e:	3b01      	subs	r3, #1
 8017250:	4629      	mov	r1, r5
 8017252:	2b07      	cmp	r3, #7
 8017254:	dc0a      	bgt.n	801726c <__gethex+0x14c>
 8017256:	9801      	ldr	r0, [sp, #4]
 8017258:	f000 fafc 	bl	8017854 <_Balloc>
 801725c:	4604      	mov	r4, r0
 801725e:	b940      	cbnz	r0, 8017272 <__gethex+0x152>
 8017260:	4b5c      	ldr	r3, [pc, #368]	@ (80173d4 <__gethex+0x2b4>)
 8017262:	4602      	mov	r2, r0
 8017264:	21e4      	movs	r1, #228	@ 0xe4
 8017266:	485c      	ldr	r0, [pc, #368]	@ (80173d8 <__gethex+0x2b8>)
 8017268:	f001 f9de 	bl	8018628 <__assert_func>
 801726c:	3101      	adds	r1, #1
 801726e:	105b      	asrs	r3, r3, #1
 8017270:	e7ef      	b.n	8017252 <__gethex+0x132>
 8017272:	f100 0a14 	add.w	sl, r0, #20
 8017276:	2300      	movs	r3, #0
 8017278:	4655      	mov	r5, sl
 801727a:	469b      	mov	fp, r3
 801727c:	45b1      	cmp	r9, r6
 801727e:	d337      	bcc.n	80172f0 <__gethex+0x1d0>
 8017280:	f845 bb04 	str.w	fp, [r5], #4
 8017284:	eba5 050a 	sub.w	r5, r5, sl
 8017288:	10ad      	asrs	r5, r5, #2
 801728a:	6125      	str	r5, [r4, #16]
 801728c:	4658      	mov	r0, fp
 801728e:	f000 fbd3 	bl	8017a38 <__hi0bits>
 8017292:	016d      	lsls	r5, r5, #5
 8017294:	f8d8 6000 	ldr.w	r6, [r8]
 8017298:	1a2d      	subs	r5, r5, r0
 801729a:	42b5      	cmp	r5, r6
 801729c:	dd54      	ble.n	8017348 <__gethex+0x228>
 801729e:	1bad      	subs	r5, r5, r6
 80172a0:	4629      	mov	r1, r5
 80172a2:	4620      	mov	r0, r4
 80172a4:	f000 ff64 	bl	8018170 <__any_on>
 80172a8:	4681      	mov	r9, r0
 80172aa:	b178      	cbz	r0, 80172cc <__gethex+0x1ac>
 80172ac:	1e6b      	subs	r3, r5, #1
 80172ae:	1159      	asrs	r1, r3, #5
 80172b0:	f003 021f 	and.w	r2, r3, #31
 80172b4:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80172b8:	f04f 0901 	mov.w	r9, #1
 80172bc:	fa09 f202 	lsl.w	r2, r9, r2
 80172c0:	420a      	tst	r2, r1
 80172c2:	d003      	beq.n	80172cc <__gethex+0x1ac>
 80172c4:	454b      	cmp	r3, r9
 80172c6:	dc36      	bgt.n	8017336 <__gethex+0x216>
 80172c8:	f04f 0902 	mov.w	r9, #2
 80172cc:	4629      	mov	r1, r5
 80172ce:	4620      	mov	r0, r4
 80172d0:	f7ff febe 	bl	8017050 <rshift>
 80172d4:	442f      	add	r7, r5
 80172d6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80172da:	42bb      	cmp	r3, r7
 80172dc:	da42      	bge.n	8017364 <__gethex+0x244>
 80172de:	9801      	ldr	r0, [sp, #4]
 80172e0:	4621      	mov	r1, r4
 80172e2:	f000 faf7 	bl	80178d4 <_Bfree>
 80172e6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80172e8:	2300      	movs	r3, #0
 80172ea:	6013      	str	r3, [r2, #0]
 80172ec:	25a3      	movs	r5, #163	@ 0xa3
 80172ee:	e793      	b.n	8017218 <__gethex+0xf8>
 80172f0:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 80172f4:	2a2e      	cmp	r2, #46	@ 0x2e
 80172f6:	d012      	beq.n	801731e <__gethex+0x1fe>
 80172f8:	2b20      	cmp	r3, #32
 80172fa:	d104      	bne.n	8017306 <__gethex+0x1e6>
 80172fc:	f845 bb04 	str.w	fp, [r5], #4
 8017300:	f04f 0b00 	mov.w	fp, #0
 8017304:	465b      	mov	r3, fp
 8017306:	7830      	ldrb	r0, [r6, #0]
 8017308:	9303      	str	r3, [sp, #12]
 801730a:	f7ff fef3 	bl	80170f4 <__hexdig_fun>
 801730e:	9b03      	ldr	r3, [sp, #12]
 8017310:	f000 000f 	and.w	r0, r0, #15
 8017314:	4098      	lsls	r0, r3
 8017316:	ea4b 0b00 	orr.w	fp, fp, r0
 801731a:	3304      	adds	r3, #4
 801731c:	e7ae      	b.n	801727c <__gethex+0x15c>
 801731e:	45b1      	cmp	r9, r6
 8017320:	d8ea      	bhi.n	80172f8 <__gethex+0x1d8>
 8017322:	492b      	ldr	r1, [pc, #172]	@ (80173d0 <__gethex+0x2b0>)
 8017324:	9303      	str	r3, [sp, #12]
 8017326:	2201      	movs	r2, #1
 8017328:	4630      	mov	r0, r6
 801732a:	f7fe ffc7 	bl	80162bc <strncmp>
 801732e:	9b03      	ldr	r3, [sp, #12]
 8017330:	2800      	cmp	r0, #0
 8017332:	d1e1      	bne.n	80172f8 <__gethex+0x1d8>
 8017334:	e7a2      	b.n	801727c <__gethex+0x15c>
 8017336:	1ea9      	subs	r1, r5, #2
 8017338:	4620      	mov	r0, r4
 801733a:	f000 ff19 	bl	8018170 <__any_on>
 801733e:	2800      	cmp	r0, #0
 8017340:	d0c2      	beq.n	80172c8 <__gethex+0x1a8>
 8017342:	f04f 0903 	mov.w	r9, #3
 8017346:	e7c1      	b.n	80172cc <__gethex+0x1ac>
 8017348:	da09      	bge.n	801735e <__gethex+0x23e>
 801734a:	1b75      	subs	r5, r6, r5
 801734c:	4621      	mov	r1, r4
 801734e:	9801      	ldr	r0, [sp, #4]
 8017350:	462a      	mov	r2, r5
 8017352:	f000 fcd7 	bl	8017d04 <__lshift>
 8017356:	1b7f      	subs	r7, r7, r5
 8017358:	4604      	mov	r4, r0
 801735a:	f100 0a14 	add.w	sl, r0, #20
 801735e:	f04f 0900 	mov.w	r9, #0
 8017362:	e7b8      	b.n	80172d6 <__gethex+0x1b6>
 8017364:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8017368:	42bd      	cmp	r5, r7
 801736a:	dd6f      	ble.n	801744c <__gethex+0x32c>
 801736c:	1bed      	subs	r5, r5, r7
 801736e:	42ae      	cmp	r6, r5
 8017370:	dc34      	bgt.n	80173dc <__gethex+0x2bc>
 8017372:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8017376:	2b02      	cmp	r3, #2
 8017378:	d022      	beq.n	80173c0 <__gethex+0x2a0>
 801737a:	2b03      	cmp	r3, #3
 801737c:	d024      	beq.n	80173c8 <__gethex+0x2a8>
 801737e:	2b01      	cmp	r3, #1
 8017380:	d115      	bne.n	80173ae <__gethex+0x28e>
 8017382:	42ae      	cmp	r6, r5
 8017384:	d113      	bne.n	80173ae <__gethex+0x28e>
 8017386:	2e01      	cmp	r6, #1
 8017388:	d10b      	bne.n	80173a2 <__gethex+0x282>
 801738a:	9a02      	ldr	r2, [sp, #8]
 801738c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8017390:	6013      	str	r3, [r2, #0]
 8017392:	2301      	movs	r3, #1
 8017394:	6123      	str	r3, [r4, #16]
 8017396:	f8ca 3000 	str.w	r3, [sl]
 801739a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801739c:	2562      	movs	r5, #98	@ 0x62
 801739e:	601c      	str	r4, [r3, #0]
 80173a0:	e73a      	b.n	8017218 <__gethex+0xf8>
 80173a2:	1e71      	subs	r1, r6, #1
 80173a4:	4620      	mov	r0, r4
 80173a6:	f000 fee3 	bl	8018170 <__any_on>
 80173aa:	2800      	cmp	r0, #0
 80173ac:	d1ed      	bne.n	801738a <__gethex+0x26a>
 80173ae:	9801      	ldr	r0, [sp, #4]
 80173b0:	4621      	mov	r1, r4
 80173b2:	f000 fa8f 	bl	80178d4 <_Bfree>
 80173b6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80173b8:	2300      	movs	r3, #0
 80173ba:	6013      	str	r3, [r2, #0]
 80173bc:	2550      	movs	r5, #80	@ 0x50
 80173be:	e72b      	b.n	8017218 <__gethex+0xf8>
 80173c0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80173c2:	2b00      	cmp	r3, #0
 80173c4:	d1f3      	bne.n	80173ae <__gethex+0x28e>
 80173c6:	e7e0      	b.n	801738a <__gethex+0x26a>
 80173c8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80173ca:	2b00      	cmp	r3, #0
 80173cc:	d1dd      	bne.n	801738a <__gethex+0x26a>
 80173ce:	e7ee      	b.n	80173ae <__gethex+0x28e>
 80173d0:	08019dbc 	.word	0x08019dbc
 80173d4:	08019fc9 	.word	0x08019fc9
 80173d8:	08019fda 	.word	0x08019fda
 80173dc:	1e6f      	subs	r7, r5, #1
 80173de:	f1b9 0f00 	cmp.w	r9, #0
 80173e2:	d130      	bne.n	8017446 <__gethex+0x326>
 80173e4:	b127      	cbz	r7, 80173f0 <__gethex+0x2d0>
 80173e6:	4639      	mov	r1, r7
 80173e8:	4620      	mov	r0, r4
 80173ea:	f000 fec1 	bl	8018170 <__any_on>
 80173ee:	4681      	mov	r9, r0
 80173f0:	117a      	asrs	r2, r7, #5
 80173f2:	2301      	movs	r3, #1
 80173f4:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80173f8:	f007 071f 	and.w	r7, r7, #31
 80173fc:	40bb      	lsls	r3, r7
 80173fe:	4213      	tst	r3, r2
 8017400:	4629      	mov	r1, r5
 8017402:	4620      	mov	r0, r4
 8017404:	bf18      	it	ne
 8017406:	f049 0902 	orrne.w	r9, r9, #2
 801740a:	f7ff fe21 	bl	8017050 <rshift>
 801740e:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8017412:	1b76      	subs	r6, r6, r5
 8017414:	2502      	movs	r5, #2
 8017416:	f1b9 0f00 	cmp.w	r9, #0
 801741a:	d047      	beq.n	80174ac <__gethex+0x38c>
 801741c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8017420:	2b02      	cmp	r3, #2
 8017422:	d015      	beq.n	8017450 <__gethex+0x330>
 8017424:	2b03      	cmp	r3, #3
 8017426:	d017      	beq.n	8017458 <__gethex+0x338>
 8017428:	2b01      	cmp	r3, #1
 801742a:	d109      	bne.n	8017440 <__gethex+0x320>
 801742c:	f019 0f02 	tst.w	r9, #2
 8017430:	d006      	beq.n	8017440 <__gethex+0x320>
 8017432:	f8da 3000 	ldr.w	r3, [sl]
 8017436:	ea49 0903 	orr.w	r9, r9, r3
 801743a:	f019 0f01 	tst.w	r9, #1
 801743e:	d10e      	bne.n	801745e <__gethex+0x33e>
 8017440:	f045 0510 	orr.w	r5, r5, #16
 8017444:	e032      	b.n	80174ac <__gethex+0x38c>
 8017446:	f04f 0901 	mov.w	r9, #1
 801744a:	e7d1      	b.n	80173f0 <__gethex+0x2d0>
 801744c:	2501      	movs	r5, #1
 801744e:	e7e2      	b.n	8017416 <__gethex+0x2f6>
 8017450:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017452:	f1c3 0301 	rsb	r3, r3, #1
 8017456:	930f      	str	r3, [sp, #60]	@ 0x3c
 8017458:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801745a:	2b00      	cmp	r3, #0
 801745c:	d0f0      	beq.n	8017440 <__gethex+0x320>
 801745e:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8017462:	f104 0314 	add.w	r3, r4, #20
 8017466:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801746a:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801746e:	f04f 0c00 	mov.w	ip, #0
 8017472:	4618      	mov	r0, r3
 8017474:	f853 2b04 	ldr.w	r2, [r3], #4
 8017478:	f1b2 3fff 	cmp.w	r2, #4294967295
 801747c:	d01b      	beq.n	80174b6 <__gethex+0x396>
 801747e:	3201      	adds	r2, #1
 8017480:	6002      	str	r2, [r0, #0]
 8017482:	2d02      	cmp	r5, #2
 8017484:	f104 0314 	add.w	r3, r4, #20
 8017488:	d13c      	bne.n	8017504 <__gethex+0x3e4>
 801748a:	f8d8 2000 	ldr.w	r2, [r8]
 801748e:	3a01      	subs	r2, #1
 8017490:	42b2      	cmp	r2, r6
 8017492:	d109      	bne.n	80174a8 <__gethex+0x388>
 8017494:	1171      	asrs	r1, r6, #5
 8017496:	2201      	movs	r2, #1
 8017498:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801749c:	f006 061f 	and.w	r6, r6, #31
 80174a0:	fa02 f606 	lsl.w	r6, r2, r6
 80174a4:	421e      	tst	r6, r3
 80174a6:	d13a      	bne.n	801751e <__gethex+0x3fe>
 80174a8:	f045 0520 	orr.w	r5, r5, #32
 80174ac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80174ae:	601c      	str	r4, [r3, #0]
 80174b0:	9b02      	ldr	r3, [sp, #8]
 80174b2:	601f      	str	r7, [r3, #0]
 80174b4:	e6b0      	b.n	8017218 <__gethex+0xf8>
 80174b6:	4299      	cmp	r1, r3
 80174b8:	f843 cc04 	str.w	ip, [r3, #-4]
 80174bc:	d8d9      	bhi.n	8017472 <__gethex+0x352>
 80174be:	68a3      	ldr	r3, [r4, #8]
 80174c0:	459b      	cmp	fp, r3
 80174c2:	db17      	blt.n	80174f4 <__gethex+0x3d4>
 80174c4:	6861      	ldr	r1, [r4, #4]
 80174c6:	9801      	ldr	r0, [sp, #4]
 80174c8:	3101      	adds	r1, #1
 80174ca:	f000 f9c3 	bl	8017854 <_Balloc>
 80174ce:	4681      	mov	r9, r0
 80174d0:	b918      	cbnz	r0, 80174da <__gethex+0x3ba>
 80174d2:	4b1a      	ldr	r3, [pc, #104]	@ (801753c <__gethex+0x41c>)
 80174d4:	4602      	mov	r2, r0
 80174d6:	2184      	movs	r1, #132	@ 0x84
 80174d8:	e6c5      	b.n	8017266 <__gethex+0x146>
 80174da:	6922      	ldr	r2, [r4, #16]
 80174dc:	3202      	adds	r2, #2
 80174de:	f104 010c 	add.w	r1, r4, #12
 80174e2:	0092      	lsls	r2, r2, #2
 80174e4:	300c      	adds	r0, #12
 80174e6:	f7fe ff72 	bl	80163ce <memcpy>
 80174ea:	4621      	mov	r1, r4
 80174ec:	9801      	ldr	r0, [sp, #4]
 80174ee:	f000 f9f1 	bl	80178d4 <_Bfree>
 80174f2:	464c      	mov	r4, r9
 80174f4:	6923      	ldr	r3, [r4, #16]
 80174f6:	1c5a      	adds	r2, r3, #1
 80174f8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80174fc:	6122      	str	r2, [r4, #16]
 80174fe:	2201      	movs	r2, #1
 8017500:	615a      	str	r2, [r3, #20]
 8017502:	e7be      	b.n	8017482 <__gethex+0x362>
 8017504:	6922      	ldr	r2, [r4, #16]
 8017506:	455a      	cmp	r2, fp
 8017508:	dd0b      	ble.n	8017522 <__gethex+0x402>
 801750a:	2101      	movs	r1, #1
 801750c:	4620      	mov	r0, r4
 801750e:	f7ff fd9f 	bl	8017050 <rshift>
 8017512:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8017516:	3701      	adds	r7, #1
 8017518:	42bb      	cmp	r3, r7
 801751a:	f6ff aee0 	blt.w	80172de <__gethex+0x1be>
 801751e:	2501      	movs	r5, #1
 8017520:	e7c2      	b.n	80174a8 <__gethex+0x388>
 8017522:	f016 061f 	ands.w	r6, r6, #31
 8017526:	d0fa      	beq.n	801751e <__gethex+0x3fe>
 8017528:	4453      	add	r3, sl
 801752a:	f1c6 0620 	rsb	r6, r6, #32
 801752e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8017532:	f000 fa81 	bl	8017a38 <__hi0bits>
 8017536:	42b0      	cmp	r0, r6
 8017538:	dbe7      	blt.n	801750a <__gethex+0x3ea>
 801753a:	e7f0      	b.n	801751e <__gethex+0x3fe>
 801753c:	08019fc9 	.word	0x08019fc9

08017540 <L_shift>:
 8017540:	f1c2 0208 	rsb	r2, r2, #8
 8017544:	0092      	lsls	r2, r2, #2
 8017546:	b570      	push	{r4, r5, r6, lr}
 8017548:	f1c2 0620 	rsb	r6, r2, #32
 801754c:	6843      	ldr	r3, [r0, #4]
 801754e:	6804      	ldr	r4, [r0, #0]
 8017550:	fa03 f506 	lsl.w	r5, r3, r6
 8017554:	432c      	orrs	r4, r5
 8017556:	40d3      	lsrs	r3, r2
 8017558:	6004      	str	r4, [r0, #0]
 801755a:	f840 3f04 	str.w	r3, [r0, #4]!
 801755e:	4288      	cmp	r0, r1
 8017560:	d3f4      	bcc.n	801754c <L_shift+0xc>
 8017562:	bd70      	pop	{r4, r5, r6, pc}

08017564 <__match>:
 8017564:	b530      	push	{r4, r5, lr}
 8017566:	6803      	ldr	r3, [r0, #0]
 8017568:	3301      	adds	r3, #1
 801756a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801756e:	b914      	cbnz	r4, 8017576 <__match+0x12>
 8017570:	6003      	str	r3, [r0, #0]
 8017572:	2001      	movs	r0, #1
 8017574:	bd30      	pop	{r4, r5, pc}
 8017576:	f813 2b01 	ldrb.w	r2, [r3], #1
 801757a:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 801757e:	2d19      	cmp	r5, #25
 8017580:	bf98      	it	ls
 8017582:	3220      	addls	r2, #32
 8017584:	42a2      	cmp	r2, r4
 8017586:	d0f0      	beq.n	801756a <__match+0x6>
 8017588:	2000      	movs	r0, #0
 801758a:	e7f3      	b.n	8017574 <__match+0x10>

0801758c <__hexnan>:
 801758c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017590:	680b      	ldr	r3, [r1, #0]
 8017592:	6801      	ldr	r1, [r0, #0]
 8017594:	115e      	asrs	r6, r3, #5
 8017596:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801759a:	f013 031f 	ands.w	r3, r3, #31
 801759e:	b087      	sub	sp, #28
 80175a0:	bf18      	it	ne
 80175a2:	3604      	addne	r6, #4
 80175a4:	2500      	movs	r5, #0
 80175a6:	1f37      	subs	r7, r6, #4
 80175a8:	4682      	mov	sl, r0
 80175aa:	4690      	mov	r8, r2
 80175ac:	9301      	str	r3, [sp, #4]
 80175ae:	f846 5c04 	str.w	r5, [r6, #-4]
 80175b2:	46b9      	mov	r9, r7
 80175b4:	463c      	mov	r4, r7
 80175b6:	9502      	str	r5, [sp, #8]
 80175b8:	46ab      	mov	fp, r5
 80175ba:	784a      	ldrb	r2, [r1, #1]
 80175bc:	1c4b      	adds	r3, r1, #1
 80175be:	9303      	str	r3, [sp, #12]
 80175c0:	b342      	cbz	r2, 8017614 <__hexnan+0x88>
 80175c2:	4610      	mov	r0, r2
 80175c4:	9105      	str	r1, [sp, #20]
 80175c6:	9204      	str	r2, [sp, #16]
 80175c8:	f7ff fd94 	bl	80170f4 <__hexdig_fun>
 80175cc:	2800      	cmp	r0, #0
 80175ce:	d151      	bne.n	8017674 <__hexnan+0xe8>
 80175d0:	9a04      	ldr	r2, [sp, #16]
 80175d2:	9905      	ldr	r1, [sp, #20]
 80175d4:	2a20      	cmp	r2, #32
 80175d6:	d818      	bhi.n	801760a <__hexnan+0x7e>
 80175d8:	9b02      	ldr	r3, [sp, #8]
 80175da:	459b      	cmp	fp, r3
 80175dc:	dd13      	ble.n	8017606 <__hexnan+0x7a>
 80175de:	454c      	cmp	r4, r9
 80175e0:	d206      	bcs.n	80175f0 <__hexnan+0x64>
 80175e2:	2d07      	cmp	r5, #7
 80175e4:	dc04      	bgt.n	80175f0 <__hexnan+0x64>
 80175e6:	462a      	mov	r2, r5
 80175e8:	4649      	mov	r1, r9
 80175ea:	4620      	mov	r0, r4
 80175ec:	f7ff ffa8 	bl	8017540 <L_shift>
 80175f0:	4544      	cmp	r4, r8
 80175f2:	d952      	bls.n	801769a <__hexnan+0x10e>
 80175f4:	2300      	movs	r3, #0
 80175f6:	f1a4 0904 	sub.w	r9, r4, #4
 80175fa:	f844 3c04 	str.w	r3, [r4, #-4]
 80175fe:	f8cd b008 	str.w	fp, [sp, #8]
 8017602:	464c      	mov	r4, r9
 8017604:	461d      	mov	r5, r3
 8017606:	9903      	ldr	r1, [sp, #12]
 8017608:	e7d7      	b.n	80175ba <__hexnan+0x2e>
 801760a:	2a29      	cmp	r2, #41	@ 0x29
 801760c:	d157      	bne.n	80176be <__hexnan+0x132>
 801760e:	3102      	adds	r1, #2
 8017610:	f8ca 1000 	str.w	r1, [sl]
 8017614:	f1bb 0f00 	cmp.w	fp, #0
 8017618:	d051      	beq.n	80176be <__hexnan+0x132>
 801761a:	454c      	cmp	r4, r9
 801761c:	d206      	bcs.n	801762c <__hexnan+0xa0>
 801761e:	2d07      	cmp	r5, #7
 8017620:	dc04      	bgt.n	801762c <__hexnan+0xa0>
 8017622:	462a      	mov	r2, r5
 8017624:	4649      	mov	r1, r9
 8017626:	4620      	mov	r0, r4
 8017628:	f7ff ff8a 	bl	8017540 <L_shift>
 801762c:	4544      	cmp	r4, r8
 801762e:	d936      	bls.n	801769e <__hexnan+0x112>
 8017630:	f1a8 0204 	sub.w	r2, r8, #4
 8017634:	4623      	mov	r3, r4
 8017636:	f853 1b04 	ldr.w	r1, [r3], #4
 801763a:	f842 1f04 	str.w	r1, [r2, #4]!
 801763e:	429f      	cmp	r7, r3
 8017640:	d2f9      	bcs.n	8017636 <__hexnan+0xaa>
 8017642:	1b3b      	subs	r3, r7, r4
 8017644:	f023 0303 	bic.w	r3, r3, #3
 8017648:	3304      	adds	r3, #4
 801764a:	3401      	adds	r4, #1
 801764c:	3e03      	subs	r6, #3
 801764e:	42b4      	cmp	r4, r6
 8017650:	bf88      	it	hi
 8017652:	2304      	movhi	r3, #4
 8017654:	4443      	add	r3, r8
 8017656:	2200      	movs	r2, #0
 8017658:	f843 2b04 	str.w	r2, [r3], #4
 801765c:	429f      	cmp	r7, r3
 801765e:	d2fb      	bcs.n	8017658 <__hexnan+0xcc>
 8017660:	683b      	ldr	r3, [r7, #0]
 8017662:	b91b      	cbnz	r3, 801766c <__hexnan+0xe0>
 8017664:	4547      	cmp	r7, r8
 8017666:	d128      	bne.n	80176ba <__hexnan+0x12e>
 8017668:	2301      	movs	r3, #1
 801766a:	603b      	str	r3, [r7, #0]
 801766c:	2005      	movs	r0, #5
 801766e:	b007      	add	sp, #28
 8017670:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017674:	3501      	adds	r5, #1
 8017676:	2d08      	cmp	r5, #8
 8017678:	f10b 0b01 	add.w	fp, fp, #1
 801767c:	dd06      	ble.n	801768c <__hexnan+0x100>
 801767e:	4544      	cmp	r4, r8
 8017680:	d9c1      	bls.n	8017606 <__hexnan+0x7a>
 8017682:	2300      	movs	r3, #0
 8017684:	f844 3c04 	str.w	r3, [r4, #-4]
 8017688:	2501      	movs	r5, #1
 801768a:	3c04      	subs	r4, #4
 801768c:	6822      	ldr	r2, [r4, #0]
 801768e:	f000 000f 	and.w	r0, r0, #15
 8017692:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8017696:	6020      	str	r0, [r4, #0]
 8017698:	e7b5      	b.n	8017606 <__hexnan+0x7a>
 801769a:	2508      	movs	r5, #8
 801769c:	e7b3      	b.n	8017606 <__hexnan+0x7a>
 801769e:	9b01      	ldr	r3, [sp, #4]
 80176a0:	2b00      	cmp	r3, #0
 80176a2:	d0dd      	beq.n	8017660 <__hexnan+0xd4>
 80176a4:	f1c3 0320 	rsb	r3, r3, #32
 80176a8:	f04f 32ff 	mov.w	r2, #4294967295
 80176ac:	40da      	lsrs	r2, r3
 80176ae:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80176b2:	4013      	ands	r3, r2
 80176b4:	f846 3c04 	str.w	r3, [r6, #-4]
 80176b8:	e7d2      	b.n	8017660 <__hexnan+0xd4>
 80176ba:	3f04      	subs	r7, #4
 80176bc:	e7d0      	b.n	8017660 <__hexnan+0xd4>
 80176be:	2004      	movs	r0, #4
 80176c0:	e7d5      	b.n	801766e <__hexnan+0xe2>
	...

080176c4 <malloc>:
 80176c4:	4b02      	ldr	r3, [pc, #8]	@ (80176d0 <malloc+0xc>)
 80176c6:	4601      	mov	r1, r0
 80176c8:	6818      	ldr	r0, [r3, #0]
 80176ca:	f000 b825 	b.w	8017718 <_malloc_r>
 80176ce:	bf00      	nop
 80176d0:	2400027c 	.word	0x2400027c

080176d4 <sbrk_aligned>:
 80176d4:	b570      	push	{r4, r5, r6, lr}
 80176d6:	4e0f      	ldr	r6, [pc, #60]	@ (8017714 <sbrk_aligned+0x40>)
 80176d8:	460c      	mov	r4, r1
 80176da:	6831      	ldr	r1, [r6, #0]
 80176dc:	4605      	mov	r5, r0
 80176de:	b911      	cbnz	r1, 80176e6 <sbrk_aligned+0x12>
 80176e0:	f000 ff92 	bl	8018608 <_sbrk_r>
 80176e4:	6030      	str	r0, [r6, #0]
 80176e6:	4621      	mov	r1, r4
 80176e8:	4628      	mov	r0, r5
 80176ea:	f000 ff8d 	bl	8018608 <_sbrk_r>
 80176ee:	1c43      	adds	r3, r0, #1
 80176f0:	d103      	bne.n	80176fa <sbrk_aligned+0x26>
 80176f2:	f04f 34ff 	mov.w	r4, #4294967295
 80176f6:	4620      	mov	r0, r4
 80176f8:	bd70      	pop	{r4, r5, r6, pc}
 80176fa:	1cc4      	adds	r4, r0, #3
 80176fc:	f024 0403 	bic.w	r4, r4, #3
 8017700:	42a0      	cmp	r0, r4
 8017702:	d0f8      	beq.n	80176f6 <sbrk_aligned+0x22>
 8017704:	1a21      	subs	r1, r4, r0
 8017706:	4628      	mov	r0, r5
 8017708:	f000 ff7e 	bl	8018608 <_sbrk_r>
 801770c:	3001      	adds	r0, #1
 801770e:	d1f2      	bne.n	80176f6 <sbrk_aligned+0x22>
 8017710:	e7ef      	b.n	80176f2 <sbrk_aligned+0x1e>
 8017712:	bf00      	nop
 8017714:	24005c74 	.word	0x24005c74

08017718 <_malloc_r>:
 8017718:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801771c:	1ccd      	adds	r5, r1, #3
 801771e:	f025 0503 	bic.w	r5, r5, #3
 8017722:	3508      	adds	r5, #8
 8017724:	2d0c      	cmp	r5, #12
 8017726:	bf38      	it	cc
 8017728:	250c      	movcc	r5, #12
 801772a:	2d00      	cmp	r5, #0
 801772c:	4606      	mov	r6, r0
 801772e:	db01      	blt.n	8017734 <_malloc_r+0x1c>
 8017730:	42a9      	cmp	r1, r5
 8017732:	d904      	bls.n	801773e <_malloc_r+0x26>
 8017734:	230c      	movs	r3, #12
 8017736:	6033      	str	r3, [r6, #0]
 8017738:	2000      	movs	r0, #0
 801773a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801773e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8017814 <_malloc_r+0xfc>
 8017742:	f000 f87b 	bl	801783c <__malloc_lock>
 8017746:	f8d8 3000 	ldr.w	r3, [r8]
 801774a:	461c      	mov	r4, r3
 801774c:	bb44      	cbnz	r4, 80177a0 <_malloc_r+0x88>
 801774e:	4629      	mov	r1, r5
 8017750:	4630      	mov	r0, r6
 8017752:	f7ff ffbf 	bl	80176d4 <sbrk_aligned>
 8017756:	1c43      	adds	r3, r0, #1
 8017758:	4604      	mov	r4, r0
 801775a:	d158      	bne.n	801780e <_malloc_r+0xf6>
 801775c:	f8d8 4000 	ldr.w	r4, [r8]
 8017760:	4627      	mov	r7, r4
 8017762:	2f00      	cmp	r7, #0
 8017764:	d143      	bne.n	80177ee <_malloc_r+0xd6>
 8017766:	2c00      	cmp	r4, #0
 8017768:	d04b      	beq.n	8017802 <_malloc_r+0xea>
 801776a:	6823      	ldr	r3, [r4, #0]
 801776c:	4639      	mov	r1, r7
 801776e:	4630      	mov	r0, r6
 8017770:	eb04 0903 	add.w	r9, r4, r3
 8017774:	f000 ff48 	bl	8018608 <_sbrk_r>
 8017778:	4581      	cmp	r9, r0
 801777a:	d142      	bne.n	8017802 <_malloc_r+0xea>
 801777c:	6821      	ldr	r1, [r4, #0]
 801777e:	1a6d      	subs	r5, r5, r1
 8017780:	4629      	mov	r1, r5
 8017782:	4630      	mov	r0, r6
 8017784:	f7ff ffa6 	bl	80176d4 <sbrk_aligned>
 8017788:	3001      	adds	r0, #1
 801778a:	d03a      	beq.n	8017802 <_malloc_r+0xea>
 801778c:	6823      	ldr	r3, [r4, #0]
 801778e:	442b      	add	r3, r5
 8017790:	6023      	str	r3, [r4, #0]
 8017792:	f8d8 3000 	ldr.w	r3, [r8]
 8017796:	685a      	ldr	r2, [r3, #4]
 8017798:	bb62      	cbnz	r2, 80177f4 <_malloc_r+0xdc>
 801779a:	f8c8 7000 	str.w	r7, [r8]
 801779e:	e00f      	b.n	80177c0 <_malloc_r+0xa8>
 80177a0:	6822      	ldr	r2, [r4, #0]
 80177a2:	1b52      	subs	r2, r2, r5
 80177a4:	d420      	bmi.n	80177e8 <_malloc_r+0xd0>
 80177a6:	2a0b      	cmp	r2, #11
 80177a8:	d917      	bls.n	80177da <_malloc_r+0xc2>
 80177aa:	1961      	adds	r1, r4, r5
 80177ac:	42a3      	cmp	r3, r4
 80177ae:	6025      	str	r5, [r4, #0]
 80177b0:	bf18      	it	ne
 80177b2:	6059      	strne	r1, [r3, #4]
 80177b4:	6863      	ldr	r3, [r4, #4]
 80177b6:	bf08      	it	eq
 80177b8:	f8c8 1000 	streq.w	r1, [r8]
 80177bc:	5162      	str	r2, [r4, r5]
 80177be:	604b      	str	r3, [r1, #4]
 80177c0:	4630      	mov	r0, r6
 80177c2:	f000 f841 	bl	8017848 <__malloc_unlock>
 80177c6:	f104 000b 	add.w	r0, r4, #11
 80177ca:	1d23      	adds	r3, r4, #4
 80177cc:	f020 0007 	bic.w	r0, r0, #7
 80177d0:	1ac2      	subs	r2, r0, r3
 80177d2:	bf1c      	itt	ne
 80177d4:	1a1b      	subne	r3, r3, r0
 80177d6:	50a3      	strne	r3, [r4, r2]
 80177d8:	e7af      	b.n	801773a <_malloc_r+0x22>
 80177da:	6862      	ldr	r2, [r4, #4]
 80177dc:	42a3      	cmp	r3, r4
 80177de:	bf0c      	ite	eq
 80177e0:	f8c8 2000 	streq.w	r2, [r8]
 80177e4:	605a      	strne	r2, [r3, #4]
 80177e6:	e7eb      	b.n	80177c0 <_malloc_r+0xa8>
 80177e8:	4623      	mov	r3, r4
 80177ea:	6864      	ldr	r4, [r4, #4]
 80177ec:	e7ae      	b.n	801774c <_malloc_r+0x34>
 80177ee:	463c      	mov	r4, r7
 80177f0:	687f      	ldr	r7, [r7, #4]
 80177f2:	e7b6      	b.n	8017762 <_malloc_r+0x4a>
 80177f4:	461a      	mov	r2, r3
 80177f6:	685b      	ldr	r3, [r3, #4]
 80177f8:	42a3      	cmp	r3, r4
 80177fa:	d1fb      	bne.n	80177f4 <_malloc_r+0xdc>
 80177fc:	2300      	movs	r3, #0
 80177fe:	6053      	str	r3, [r2, #4]
 8017800:	e7de      	b.n	80177c0 <_malloc_r+0xa8>
 8017802:	230c      	movs	r3, #12
 8017804:	6033      	str	r3, [r6, #0]
 8017806:	4630      	mov	r0, r6
 8017808:	f000 f81e 	bl	8017848 <__malloc_unlock>
 801780c:	e794      	b.n	8017738 <_malloc_r+0x20>
 801780e:	6005      	str	r5, [r0, #0]
 8017810:	e7d6      	b.n	80177c0 <_malloc_r+0xa8>
 8017812:	bf00      	nop
 8017814:	24005c78 	.word	0x24005c78

08017818 <__ascii_mbtowc>:
 8017818:	b082      	sub	sp, #8
 801781a:	b901      	cbnz	r1, 801781e <__ascii_mbtowc+0x6>
 801781c:	a901      	add	r1, sp, #4
 801781e:	b142      	cbz	r2, 8017832 <__ascii_mbtowc+0x1a>
 8017820:	b14b      	cbz	r3, 8017836 <__ascii_mbtowc+0x1e>
 8017822:	7813      	ldrb	r3, [r2, #0]
 8017824:	600b      	str	r3, [r1, #0]
 8017826:	7812      	ldrb	r2, [r2, #0]
 8017828:	1e10      	subs	r0, r2, #0
 801782a:	bf18      	it	ne
 801782c:	2001      	movne	r0, #1
 801782e:	b002      	add	sp, #8
 8017830:	4770      	bx	lr
 8017832:	4610      	mov	r0, r2
 8017834:	e7fb      	b.n	801782e <__ascii_mbtowc+0x16>
 8017836:	f06f 0001 	mvn.w	r0, #1
 801783a:	e7f8      	b.n	801782e <__ascii_mbtowc+0x16>

0801783c <__malloc_lock>:
 801783c:	4801      	ldr	r0, [pc, #4]	@ (8017844 <__malloc_lock+0x8>)
 801783e:	f7fe bdc4 	b.w	80163ca <__retarget_lock_acquire_recursive>
 8017842:	bf00      	nop
 8017844:	24005c70 	.word	0x24005c70

08017848 <__malloc_unlock>:
 8017848:	4801      	ldr	r0, [pc, #4]	@ (8017850 <__malloc_unlock+0x8>)
 801784a:	f7fe bdbf 	b.w	80163cc <__retarget_lock_release_recursive>
 801784e:	bf00      	nop
 8017850:	24005c70 	.word	0x24005c70

08017854 <_Balloc>:
 8017854:	b570      	push	{r4, r5, r6, lr}
 8017856:	69c6      	ldr	r6, [r0, #28]
 8017858:	4604      	mov	r4, r0
 801785a:	460d      	mov	r5, r1
 801785c:	b976      	cbnz	r6, 801787c <_Balloc+0x28>
 801785e:	2010      	movs	r0, #16
 8017860:	f7ff ff30 	bl	80176c4 <malloc>
 8017864:	4602      	mov	r2, r0
 8017866:	61e0      	str	r0, [r4, #28]
 8017868:	b920      	cbnz	r0, 8017874 <_Balloc+0x20>
 801786a:	4b18      	ldr	r3, [pc, #96]	@ (80178cc <_Balloc+0x78>)
 801786c:	4818      	ldr	r0, [pc, #96]	@ (80178d0 <_Balloc+0x7c>)
 801786e:	216b      	movs	r1, #107	@ 0x6b
 8017870:	f000 feda 	bl	8018628 <__assert_func>
 8017874:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8017878:	6006      	str	r6, [r0, #0]
 801787a:	60c6      	str	r6, [r0, #12]
 801787c:	69e6      	ldr	r6, [r4, #28]
 801787e:	68f3      	ldr	r3, [r6, #12]
 8017880:	b183      	cbz	r3, 80178a4 <_Balloc+0x50>
 8017882:	69e3      	ldr	r3, [r4, #28]
 8017884:	68db      	ldr	r3, [r3, #12]
 8017886:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801788a:	b9b8      	cbnz	r0, 80178bc <_Balloc+0x68>
 801788c:	2101      	movs	r1, #1
 801788e:	fa01 f605 	lsl.w	r6, r1, r5
 8017892:	1d72      	adds	r2, r6, #5
 8017894:	0092      	lsls	r2, r2, #2
 8017896:	4620      	mov	r0, r4
 8017898:	f000 fee4 	bl	8018664 <_calloc_r>
 801789c:	b160      	cbz	r0, 80178b8 <_Balloc+0x64>
 801789e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80178a2:	e00e      	b.n	80178c2 <_Balloc+0x6e>
 80178a4:	2221      	movs	r2, #33	@ 0x21
 80178a6:	2104      	movs	r1, #4
 80178a8:	4620      	mov	r0, r4
 80178aa:	f000 fedb 	bl	8018664 <_calloc_r>
 80178ae:	69e3      	ldr	r3, [r4, #28]
 80178b0:	60f0      	str	r0, [r6, #12]
 80178b2:	68db      	ldr	r3, [r3, #12]
 80178b4:	2b00      	cmp	r3, #0
 80178b6:	d1e4      	bne.n	8017882 <_Balloc+0x2e>
 80178b8:	2000      	movs	r0, #0
 80178ba:	bd70      	pop	{r4, r5, r6, pc}
 80178bc:	6802      	ldr	r2, [r0, #0]
 80178be:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80178c2:	2300      	movs	r3, #0
 80178c4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80178c8:	e7f7      	b.n	80178ba <_Balloc+0x66>
 80178ca:	bf00      	nop
 80178cc:	08019f5a 	.word	0x08019f5a
 80178d0:	0801a03a 	.word	0x0801a03a

080178d4 <_Bfree>:
 80178d4:	b570      	push	{r4, r5, r6, lr}
 80178d6:	69c6      	ldr	r6, [r0, #28]
 80178d8:	4605      	mov	r5, r0
 80178da:	460c      	mov	r4, r1
 80178dc:	b976      	cbnz	r6, 80178fc <_Bfree+0x28>
 80178de:	2010      	movs	r0, #16
 80178e0:	f7ff fef0 	bl	80176c4 <malloc>
 80178e4:	4602      	mov	r2, r0
 80178e6:	61e8      	str	r0, [r5, #28]
 80178e8:	b920      	cbnz	r0, 80178f4 <_Bfree+0x20>
 80178ea:	4b09      	ldr	r3, [pc, #36]	@ (8017910 <_Bfree+0x3c>)
 80178ec:	4809      	ldr	r0, [pc, #36]	@ (8017914 <_Bfree+0x40>)
 80178ee:	218f      	movs	r1, #143	@ 0x8f
 80178f0:	f000 fe9a 	bl	8018628 <__assert_func>
 80178f4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80178f8:	6006      	str	r6, [r0, #0]
 80178fa:	60c6      	str	r6, [r0, #12]
 80178fc:	b13c      	cbz	r4, 801790e <_Bfree+0x3a>
 80178fe:	69eb      	ldr	r3, [r5, #28]
 8017900:	6862      	ldr	r2, [r4, #4]
 8017902:	68db      	ldr	r3, [r3, #12]
 8017904:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8017908:	6021      	str	r1, [r4, #0]
 801790a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801790e:	bd70      	pop	{r4, r5, r6, pc}
 8017910:	08019f5a 	.word	0x08019f5a
 8017914:	0801a03a 	.word	0x0801a03a

08017918 <__multadd>:
 8017918:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801791c:	690d      	ldr	r5, [r1, #16]
 801791e:	4607      	mov	r7, r0
 8017920:	460c      	mov	r4, r1
 8017922:	461e      	mov	r6, r3
 8017924:	f101 0c14 	add.w	ip, r1, #20
 8017928:	2000      	movs	r0, #0
 801792a:	f8dc 3000 	ldr.w	r3, [ip]
 801792e:	b299      	uxth	r1, r3
 8017930:	fb02 6101 	mla	r1, r2, r1, r6
 8017934:	0c1e      	lsrs	r6, r3, #16
 8017936:	0c0b      	lsrs	r3, r1, #16
 8017938:	fb02 3306 	mla	r3, r2, r6, r3
 801793c:	b289      	uxth	r1, r1
 801793e:	3001      	adds	r0, #1
 8017940:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8017944:	4285      	cmp	r5, r0
 8017946:	f84c 1b04 	str.w	r1, [ip], #4
 801794a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801794e:	dcec      	bgt.n	801792a <__multadd+0x12>
 8017950:	b30e      	cbz	r6, 8017996 <__multadd+0x7e>
 8017952:	68a3      	ldr	r3, [r4, #8]
 8017954:	42ab      	cmp	r3, r5
 8017956:	dc19      	bgt.n	801798c <__multadd+0x74>
 8017958:	6861      	ldr	r1, [r4, #4]
 801795a:	4638      	mov	r0, r7
 801795c:	3101      	adds	r1, #1
 801795e:	f7ff ff79 	bl	8017854 <_Balloc>
 8017962:	4680      	mov	r8, r0
 8017964:	b928      	cbnz	r0, 8017972 <__multadd+0x5a>
 8017966:	4602      	mov	r2, r0
 8017968:	4b0c      	ldr	r3, [pc, #48]	@ (801799c <__multadd+0x84>)
 801796a:	480d      	ldr	r0, [pc, #52]	@ (80179a0 <__multadd+0x88>)
 801796c:	21ba      	movs	r1, #186	@ 0xba
 801796e:	f000 fe5b 	bl	8018628 <__assert_func>
 8017972:	6922      	ldr	r2, [r4, #16]
 8017974:	3202      	adds	r2, #2
 8017976:	f104 010c 	add.w	r1, r4, #12
 801797a:	0092      	lsls	r2, r2, #2
 801797c:	300c      	adds	r0, #12
 801797e:	f7fe fd26 	bl	80163ce <memcpy>
 8017982:	4621      	mov	r1, r4
 8017984:	4638      	mov	r0, r7
 8017986:	f7ff ffa5 	bl	80178d4 <_Bfree>
 801798a:	4644      	mov	r4, r8
 801798c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8017990:	3501      	adds	r5, #1
 8017992:	615e      	str	r6, [r3, #20]
 8017994:	6125      	str	r5, [r4, #16]
 8017996:	4620      	mov	r0, r4
 8017998:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801799c:	08019fc9 	.word	0x08019fc9
 80179a0:	0801a03a 	.word	0x0801a03a

080179a4 <__s2b>:
 80179a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80179a8:	460c      	mov	r4, r1
 80179aa:	4615      	mov	r5, r2
 80179ac:	461f      	mov	r7, r3
 80179ae:	2209      	movs	r2, #9
 80179b0:	3308      	adds	r3, #8
 80179b2:	4606      	mov	r6, r0
 80179b4:	fb93 f3f2 	sdiv	r3, r3, r2
 80179b8:	2100      	movs	r1, #0
 80179ba:	2201      	movs	r2, #1
 80179bc:	429a      	cmp	r2, r3
 80179be:	db09      	blt.n	80179d4 <__s2b+0x30>
 80179c0:	4630      	mov	r0, r6
 80179c2:	f7ff ff47 	bl	8017854 <_Balloc>
 80179c6:	b940      	cbnz	r0, 80179da <__s2b+0x36>
 80179c8:	4602      	mov	r2, r0
 80179ca:	4b19      	ldr	r3, [pc, #100]	@ (8017a30 <__s2b+0x8c>)
 80179cc:	4819      	ldr	r0, [pc, #100]	@ (8017a34 <__s2b+0x90>)
 80179ce:	21d3      	movs	r1, #211	@ 0xd3
 80179d0:	f000 fe2a 	bl	8018628 <__assert_func>
 80179d4:	0052      	lsls	r2, r2, #1
 80179d6:	3101      	adds	r1, #1
 80179d8:	e7f0      	b.n	80179bc <__s2b+0x18>
 80179da:	9b08      	ldr	r3, [sp, #32]
 80179dc:	6143      	str	r3, [r0, #20]
 80179de:	2d09      	cmp	r5, #9
 80179e0:	f04f 0301 	mov.w	r3, #1
 80179e4:	6103      	str	r3, [r0, #16]
 80179e6:	dd16      	ble.n	8017a16 <__s2b+0x72>
 80179e8:	f104 0909 	add.w	r9, r4, #9
 80179ec:	46c8      	mov	r8, r9
 80179ee:	442c      	add	r4, r5
 80179f0:	f818 3b01 	ldrb.w	r3, [r8], #1
 80179f4:	4601      	mov	r1, r0
 80179f6:	3b30      	subs	r3, #48	@ 0x30
 80179f8:	220a      	movs	r2, #10
 80179fa:	4630      	mov	r0, r6
 80179fc:	f7ff ff8c 	bl	8017918 <__multadd>
 8017a00:	45a0      	cmp	r8, r4
 8017a02:	d1f5      	bne.n	80179f0 <__s2b+0x4c>
 8017a04:	f1a5 0408 	sub.w	r4, r5, #8
 8017a08:	444c      	add	r4, r9
 8017a0a:	1b2d      	subs	r5, r5, r4
 8017a0c:	1963      	adds	r3, r4, r5
 8017a0e:	42bb      	cmp	r3, r7
 8017a10:	db04      	blt.n	8017a1c <__s2b+0x78>
 8017a12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017a16:	340a      	adds	r4, #10
 8017a18:	2509      	movs	r5, #9
 8017a1a:	e7f6      	b.n	8017a0a <__s2b+0x66>
 8017a1c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8017a20:	4601      	mov	r1, r0
 8017a22:	3b30      	subs	r3, #48	@ 0x30
 8017a24:	220a      	movs	r2, #10
 8017a26:	4630      	mov	r0, r6
 8017a28:	f7ff ff76 	bl	8017918 <__multadd>
 8017a2c:	e7ee      	b.n	8017a0c <__s2b+0x68>
 8017a2e:	bf00      	nop
 8017a30:	08019fc9 	.word	0x08019fc9
 8017a34:	0801a03a 	.word	0x0801a03a

08017a38 <__hi0bits>:
 8017a38:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8017a3c:	4603      	mov	r3, r0
 8017a3e:	bf36      	itet	cc
 8017a40:	0403      	lslcc	r3, r0, #16
 8017a42:	2000      	movcs	r0, #0
 8017a44:	2010      	movcc	r0, #16
 8017a46:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8017a4a:	bf3c      	itt	cc
 8017a4c:	021b      	lslcc	r3, r3, #8
 8017a4e:	3008      	addcc	r0, #8
 8017a50:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8017a54:	bf3c      	itt	cc
 8017a56:	011b      	lslcc	r3, r3, #4
 8017a58:	3004      	addcc	r0, #4
 8017a5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8017a5e:	bf3c      	itt	cc
 8017a60:	009b      	lslcc	r3, r3, #2
 8017a62:	3002      	addcc	r0, #2
 8017a64:	2b00      	cmp	r3, #0
 8017a66:	db05      	blt.n	8017a74 <__hi0bits+0x3c>
 8017a68:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8017a6c:	f100 0001 	add.w	r0, r0, #1
 8017a70:	bf08      	it	eq
 8017a72:	2020      	moveq	r0, #32
 8017a74:	4770      	bx	lr

08017a76 <__lo0bits>:
 8017a76:	6803      	ldr	r3, [r0, #0]
 8017a78:	4602      	mov	r2, r0
 8017a7a:	f013 0007 	ands.w	r0, r3, #7
 8017a7e:	d00b      	beq.n	8017a98 <__lo0bits+0x22>
 8017a80:	07d9      	lsls	r1, r3, #31
 8017a82:	d421      	bmi.n	8017ac8 <__lo0bits+0x52>
 8017a84:	0798      	lsls	r0, r3, #30
 8017a86:	bf49      	itett	mi
 8017a88:	085b      	lsrmi	r3, r3, #1
 8017a8a:	089b      	lsrpl	r3, r3, #2
 8017a8c:	2001      	movmi	r0, #1
 8017a8e:	6013      	strmi	r3, [r2, #0]
 8017a90:	bf5c      	itt	pl
 8017a92:	6013      	strpl	r3, [r2, #0]
 8017a94:	2002      	movpl	r0, #2
 8017a96:	4770      	bx	lr
 8017a98:	b299      	uxth	r1, r3
 8017a9a:	b909      	cbnz	r1, 8017aa0 <__lo0bits+0x2a>
 8017a9c:	0c1b      	lsrs	r3, r3, #16
 8017a9e:	2010      	movs	r0, #16
 8017aa0:	b2d9      	uxtb	r1, r3
 8017aa2:	b909      	cbnz	r1, 8017aa8 <__lo0bits+0x32>
 8017aa4:	3008      	adds	r0, #8
 8017aa6:	0a1b      	lsrs	r3, r3, #8
 8017aa8:	0719      	lsls	r1, r3, #28
 8017aaa:	bf04      	itt	eq
 8017aac:	091b      	lsreq	r3, r3, #4
 8017aae:	3004      	addeq	r0, #4
 8017ab0:	0799      	lsls	r1, r3, #30
 8017ab2:	bf04      	itt	eq
 8017ab4:	089b      	lsreq	r3, r3, #2
 8017ab6:	3002      	addeq	r0, #2
 8017ab8:	07d9      	lsls	r1, r3, #31
 8017aba:	d403      	bmi.n	8017ac4 <__lo0bits+0x4e>
 8017abc:	085b      	lsrs	r3, r3, #1
 8017abe:	f100 0001 	add.w	r0, r0, #1
 8017ac2:	d003      	beq.n	8017acc <__lo0bits+0x56>
 8017ac4:	6013      	str	r3, [r2, #0]
 8017ac6:	4770      	bx	lr
 8017ac8:	2000      	movs	r0, #0
 8017aca:	4770      	bx	lr
 8017acc:	2020      	movs	r0, #32
 8017ace:	4770      	bx	lr

08017ad0 <__i2b>:
 8017ad0:	b510      	push	{r4, lr}
 8017ad2:	460c      	mov	r4, r1
 8017ad4:	2101      	movs	r1, #1
 8017ad6:	f7ff febd 	bl	8017854 <_Balloc>
 8017ada:	4602      	mov	r2, r0
 8017adc:	b928      	cbnz	r0, 8017aea <__i2b+0x1a>
 8017ade:	4b05      	ldr	r3, [pc, #20]	@ (8017af4 <__i2b+0x24>)
 8017ae0:	4805      	ldr	r0, [pc, #20]	@ (8017af8 <__i2b+0x28>)
 8017ae2:	f240 1145 	movw	r1, #325	@ 0x145
 8017ae6:	f000 fd9f 	bl	8018628 <__assert_func>
 8017aea:	2301      	movs	r3, #1
 8017aec:	6144      	str	r4, [r0, #20]
 8017aee:	6103      	str	r3, [r0, #16]
 8017af0:	bd10      	pop	{r4, pc}
 8017af2:	bf00      	nop
 8017af4:	08019fc9 	.word	0x08019fc9
 8017af8:	0801a03a 	.word	0x0801a03a

08017afc <__multiply>:
 8017afc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017b00:	4614      	mov	r4, r2
 8017b02:	690a      	ldr	r2, [r1, #16]
 8017b04:	6923      	ldr	r3, [r4, #16]
 8017b06:	429a      	cmp	r2, r3
 8017b08:	bfa8      	it	ge
 8017b0a:	4623      	movge	r3, r4
 8017b0c:	460f      	mov	r7, r1
 8017b0e:	bfa4      	itt	ge
 8017b10:	460c      	movge	r4, r1
 8017b12:	461f      	movge	r7, r3
 8017b14:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8017b18:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8017b1c:	68a3      	ldr	r3, [r4, #8]
 8017b1e:	6861      	ldr	r1, [r4, #4]
 8017b20:	eb0a 0609 	add.w	r6, sl, r9
 8017b24:	42b3      	cmp	r3, r6
 8017b26:	b085      	sub	sp, #20
 8017b28:	bfb8      	it	lt
 8017b2a:	3101      	addlt	r1, #1
 8017b2c:	f7ff fe92 	bl	8017854 <_Balloc>
 8017b30:	b930      	cbnz	r0, 8017b40 <__multiply+0x44>
 8017b32:	4602      	mov	r2, r0
 8017b34:	4b44      	ldr	r3, [pc, #272]	@ (8017c48 <__multiply+0x14c>)
 8017b36:	4845      	ldr	r0, [pc, #276]	@ (8017c4c <__multiply+0x150>)
 8017b38:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8017b3c:	f000 fd74 	bl	8018628 <__assert_func>
 8017b40:	f100 0514 	add.w	r5, r0, #20
 8017b44:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8017b48:	462b      	mov	r3, r5
 8017b4a:	2200      	movs	r2, #0
 8017b4c:	4543      	cmp	r3, r8
 8017b4e:	d321      	bcc.n	8017b94 <__multiply+0x98>
 8017b50:	f107 0114 	add.w	r1, r7, #20
 8017b54:	f104 0214 	add.w	r2, r4, #20
 8017b58:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8017b5c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8017b60:	9302      	str	r3, [sp, #8]
 8017b62:	1b13      	subs	r3, r2, r4
 8017b64:	3b15      	subs	r3, #21
 8017b66:	f023 0303 	bic.w	r3, r3, #3
 8017b6a:	3304      	adds	r3, #4
 8017b6c:	f104 0715 	add.w	r7, r4, #21
 8017b70:	42ba      	cmp	r2, r7
 8017b72:	bf38      	it	cc
 8017b74:	2304      	movcc	r3, #4
 8017b76:	9301      	str	r3, [sp, #4]
 8017b78:	9b02      	ldr	r3, [sp, #8]
 8017b7a:	9103      	str	r1, [sp, #12]
 8017b7c:	428b      	cmp	r3, r1
 8017b7e:	d80c      	bhi.n	8017b9a <__multiply+0x9e>
 8017b80:	2e00      	cmp	r6, #0
 8017b82:	dd03      	ble.n	8017b8c <__multiply+0x90>
 8017b84:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8017b88:	2b00      	cmp	r3, #0
 8017b8a:	d05b      	beq.n	8017c44 <__multiply+0x148>
 8017b8c:	6106      	str	r6, [r0, #16]
 8017b8e:	b005      	add	sp, #20
 8017b90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017b94:	f843 2b04 	str.w	r2, [r3], #4
 8017b98:	e7d8      	b.n	8017b4c <__multiply+0x50>
 8017b9a:	f8b1 a000 	ldrh.w	sl, [r1]
 8017b9e:	f1ba 0f00 	cmp.w	sl, #0
 8017ba2:	d024      	beq.n	8017bee <__multiply+0xf2>
 8017ba4:	f104 0e14 	add.w	lr, r4, #20
 8017ba8:	46a9      	mov	r9, r5
 8017baa:	f04f 0c00 	mov.w	ip, #0
 8017bae:	f85e 7b04 	ldr.w	r7, [lr], #4
 8017bb2:	f8d9 3000 	ldr.w	r3, [r9]
 8017bb6:	fa1f fb87 	uxth.w	fp, r7
 8017bba:	b29b      	uxth	r3, r3
 8017bbc:	fb0a 330b 	mla	r3, sl, fp, r3
 8017bc0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8017bc4:	f8d9 7000 	ldr.w	r7, [r9]
 8017bc8:	4463      	add	r3, ip
 8017bca:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8017bce:	fb0a c70b 	mla	r7, sl, fp, ip
 8017bd2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8017bd6:	b29b      	uxth	r3, r3
 8017bd8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8017bdc:	4572      	cmp	r2, lr
 8017bde:	f849 3b04 	str.w	r3, [r9], #4
 8017be2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8017be6:	d8e2      	bhi.n	8017bae <__multiply+0xb2>
 8017be8:	9b01      	ldr	r3, [sp, #4]
 8017bea:	f845 c003 	str.w	ip, [r5, r3]
 8017bee:	9b03      	ldr	r3, [sp, #12]
 8017bf0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8017bf4:	3104      	adds	r1, #4
 8017bf6:	f1b9 0f00 	cmp.w	r9, #0
 8017bfa:	d021      	beq.n	8017c40 <__multiply+0x144>
 8017bfc:	682b      	ldr	r3, [r5, #0]
 8017bfe:	f104 0c14 	add.w	ip, r4, #20
 8017c02:	46ae      	mov	lr, r5
 8017c04:	f04f 0a00 	mov.w	sl, #0
 8017c08:	f8bc b000 	ldrh.w	fp, [ip]
 8017c0c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8017c10:	fb09 770b 	mla	r7, r9, fp, r7
 8017c14:	4457      	add	r7, sl
 8017c16:	b29b      	uxth	r3, r3
 8017c18:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8017c1c:	f84e 3b04 	str.w	r3, [lr], #4
 8017c20:	f85c 3b04 	ldr.w	r3, [ip], #4
 8017c24:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8017c28:	f8be 3000 	ldrh.w	r3, [lr]
 8017c2c:	fb09 330a 	mla	r3, r9, sl, r3
 8017c30:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8017c34:	4562      	cmp	r2, ip
 8017c36:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8017c3a:	d8e5      	bhi.n	8017c08 <__multiply+0x10c>
 8017c3c:	9f01      	ldr	r7, [sp, #4]
 8017c3e:	51eb      	str	r3, [r5, r7]
 8017c40:	3504      	adds	r5, #4
 8017c42:	e799      	b.n	8017b78 <__multiply+0x7c>
 8017c44:	3e01      	subs	r6, #1
 8017c46:	e79b      	b.n	8017b80 <__multiply+0x84>
 8017c48:	08019fc9 	.word	0x08019fc9
 8017c4c:	0801a03a 	.word	0x0801a03a

08017c50 <__pow5mult>:
 8017c50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017c54:	4615      	mov	r5, r2
 8017c56:	f012 0203 	ands.w	r2, r2, #3
 8017c5a:	4607      	mov	r7, r0
 8017c5c:	460e      	mov	r6, r1
 8017c5e:	d007      	beq.n	8017c70 <__pow5mult+0x20>
 8017c60:	4c25      	ldr	r4, [pc, #148]	@ (8017cf8 <__pow5mult+0xa8>)
 8017c62:	3a01      	subs	r2, #1
 8017c64:	2300      	movs	r3, #0
 8017c66:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8017c6a:	f7ff fe55 	bl	8017918 <__multadd>
 8017c6e:	4606      	mov	r6, r0
 8017c70:	10ad      	asrs	r5, r5, #2
 8017c72:	d03d      	beq.n	8017cf0 <__pow5mult+0xa0>
 8017c74:	69fc      	ldr	r4, [r7, #28]
 8017c76:	b97c      	cbnz	r4, 8017c98 <__pow5mult+0x48>
 8017c78:	2010      	movs	r0, #16
 8017c7a:	f7ff fd23 	bl	80176c4 <malloc>
 8017c7e:	4602      	mov	r2, r0
 8017c80:	61f8      	str	r0, [r7, #28]
 8017c82:	b928      	cbnz	r0, 8017c90 <__pow5mult+0x40>
 8017c84:	4b1d      	ldr	r3, [pc, #116]	@ (8017cfc <__pow5mult+0xac>)
 8017c86:	481e      	ldr	r0, [pc, #120]	@ (8017d00 <__pow5mult+0xb0>)
 8017c88:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8017c8c:	f000 fccc 	bl	8018628 <__assert_func>
 8017c90:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8017c94:	6004      	str	r4, [r0, #0]
 8017c96:	60c4      	str	r4, [r0, #12]
 8017c98:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8017c9c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8017ca0:	b94c      	cbnz	r4, 8017cb6 <__pow5mult+0x66>
 8017ca2:	f240 2171 	movw	r1, #625	@ 0x271
 8017ca6:	4638      	mov	r0, r7
 8017ca8:	f7ff ff12 	bl	8017ad0 <__i2b>
 8017cac:	2300      	movs	r3, #0
 8017cae:	f8c8 0008 	str.w	r0, [r8, #8]
 8017cb2:	4604      	mov	r4, r0
 8017cb4:	6003      	str	r3, [r0, #0]
 8017cb6:	f04f 0900 	mov.w	r9, #0
 8017cba:	07eb      	lsls	r3, r5, #31
 8017cbc:	d50a      	bpl.n	8017cd4 <__pow5mult+0x84>
 8017cbe:	4631      	mov	r1, r6
 8017cc0:	4622      	mov	r2, r4
 8017cc2:	4638      	mov	r0, r7
 8017cc4:	f7ff ff1a 	bl	8017afc <__multiply>
 8017cc8:	4631      	mov	r1, r6
 8017cca:	4680      	mov	r8, r0
 8017ccc:	4638      	mov	r0, r7
 8017cce:	f7ff fe01 	bl	80178d4 <_Bfree>
 8017cd2:	4646      	mov	r6, r8
 8017cd4:	106d      	asrs	r5, r5, #1
 8017cd6:	d00b      	beq.n	8017cf0 <__pow5mult+0xa0>
 8017cd8:	6820      	ldr	r0, [r4, #0]
 8017cda:	b938      	cbnz	r0, 8017cec <__pow5mult+0x9c>
 8017cdc:	4622      	mov	r2, r4
 8017cde:	4621      	mov	r1, r4
 8017ce0:	4638      	mov	r0, r7
 8017ce2:	f7ff ff0b 	bl	8017afc <__multiply>
 8017ce6:	6020      	str	r0, [r4, #0]
 8017ce8:	f8c0 9000 	str.w	r9, [r0]
 8017cec:	4604      	mov	r4, r0
 8017cee:	e7e4      	b.n	8017cba <__pow5mult+0x6a>
 8017cf0:	4630      	mov	r0, r6
 8017cf2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017cf6:	bf00      	nop
 8017cf8:	0801a094 	.word	0x0801a094
 8017cfc:	08019f5a 	.word	0x08019f5a
 8017d00:	0801a03a 	.word	0x0801a03a

08017d04 <__lshift>:
 8017d04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017d08:	460c      	mov	r4, r1
 8017d0a:	6849      	ldr	r1, [r1, #4]
 8017d0c:	6923      	ldr	r3, [r4, #16]
 8017d0e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8017d12:	68a3      	ldr	r3, [r4, #8]
 8017d14:	4607      	mov	r7, r0
 8017d16:	4691      	mov	r9, r2
 8017d18:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8017d1c:	f108 0601 	add.w	r6, r8, #1
 8017d20:	42b3      	cmp	r3, r6
 8017d22:	db0b      	blt.n	8017d3c <__lshift+0x38>
 8017d24:	4638      	mov	r0, r7
 8017d26:	f7ff fd95 	bl	8017854 <_Balloc>
 8017d2a:	4605      	mov	r5, r0
 8017d2c:	b948      	cbnz	r0, 8017d42 <__lshift+0x3e>
 8017d2e:	4602      	mov	r2, r0
 8017d30:	4b28      	ldr	r3, [pc, #160]	@ (8017dd4 <__lshift+0xd0>)
 8017d32:	4829      	ldr	r0, [pc, #164]	@ (8017dd8 <__lshift+0xd4>)
 8017d34:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8017d38:	f000 fc76 	bl	8018628 <__assert_func>
 8017d3c:	3101      	adds	r1, #1
 8017d3e:	005b      	lsls	r3, r3, #1
 8017d40:	e7ee      	b.n	8017d20 <__lshift+0x1c>
 8017d42:	2300      	movs	r3, #0
 8017d44:	f100 0114 	add.w	r1, r0, #20
 8017d48:	f100 0210 	add.w	r2, r0, #16
 8017d4c:	4618      	mov	r0, r3
 8017d4e:	4553      	cmp	r3, sl
 8017d50:	db33      	blt.n	8017dba <__lshift+0xb6>
 8017d52:	6920      	ldr	r0, [r4, #16]
 8017d54:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8017d58:	f104 0314 	add.w	r3, r4, #20
 8017d5c:	f019 091f 	ands.w	r9, r9, #31
 8017d60:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8017d64:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8017d68:	d02b      	beq.n	8017dc2 <__lshift+0xbe>
 8017d6a:	f1c9 0e20 	rsb	lr, r9, #32
 8017d6e:	468a      	mov	sl, r1
 8017d70:	2200      	movs	r2, #0
 8017d72:	6818      	ldr	r0, [r3, #0]
 8017d74:	fa00 f009 	lsl.w	r0, r0, r9
 8017d78:	4310      	orrs	r0, r2
 8017d7a:	f84a 0b04 	str.w	r0, [sl], #4
 8017d7e:	f853 2b04 	ldr.w	r2, [r3], #4
 8017d82:	459c      	cmp	ip, r3
 8017d84:	fa22 f20e 	lsr.w	r2, r2, lr
 8017d88:	d8f3      	bhi.n	8017d72 <__lshift+0x6e>
 8017d8a:	ebac 0304 	sub.w	r3, ip, r4
 8017d8e:	3b15      	subs	r3, #21
 8017d90:	f023 0303 	bic.w	r3, r3, #3
 8017d94:	3304      	adds	r3, #4
 8017d96:	f104 0015 	add.w	r0, r4, #21
 8017d9a:	4584      	cmp	ip, r0
 8017d9c:	bf38      	it	cc
 8017d9e:	2304      	movcc	r3, #4
 8017da0:	50ca      	str	r2, [r1, r3]
 8017da2:	b10a      	cbz	r2, 8017da8 <__lshift+0xa4>
 8017da4:	f108 0602 	add.w	r6, r8, #2
 8017da8:	3e01      	subs	r6, #1
 8017daa:	4638      	mov	r0, r7
 8017dac:	612e      	str	r6, [r5, #16]
 8017dae:	4621      	mov	r1, r4
 8017db0:	f7ff fd90 	bl	80178d4 <_Bfree>
 8017db4:	4628      	mov	r0, r5
 8017db6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017dba:	f842 0f04 	str.w	r0, [r2, #4]!
 8017dbe:	3301      	adds	r3, #1
 8017dc0:	e7c5      	b.n	8017d4e <__lshift+0x4a>
 8017dc2:	3904      	subs	r1, #4
 8017dc4:	f853 2b04 	ldr.w	r2, [r3], #4
 8017dc8:	f841 2f04 	str.w	r2, [r1, #4]!
 8017dcc:	459c      	cmp	ip, r3
 8017dce:	d8f9      	bhi.n	8017dc4 <__lshift+0xc0>
 8017dd0:	e7ea      	b.n	8017da8 <__lshift+0xa4>
 8017dd2:	bf00      	nop
 8017dd4:	08019fc9 	.word	0x08019fc9
 8017dd8:	0801a03a 	.word	0x0801a03a

08017ddc <__mcmp>:
 8017ddc:	690a      	ldr	r2, [r1, #16]
 8017dde:	4603      	mov	r3, r0
 8017de0:	6900      	ldr	r0, [r0, #16]
 8017de2:	1a80      	subs	r0, r0, r2
 8017de4:	b530      	push	{r4, r5, lr}
 8017de6:	d10e      	bne.n	8017e06 <__mcmp+0x2a>
 8017de8:	3314      	adds	r3, #20
 8017dea:	3114      	adds	r1, #20
 8017dec:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8017df0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8017df4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8017df8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8017dfc:	4295      	cmp	r5, r2
 8017dfe:	d003      	beq.n	8017e08 <__mcmp+0x2c>
 8017e00:	d205      	bcs.n	8017e0e <__mcmp+0x32>
 8017e02:	f04f 30ff 	mov.w	r0, #4294967295
 8017e06:	bd30      	pop	{r4, r5, pc}
 8017e08:	42a3      	cmp	r3, r4
 8017e0a:	d3f3      	bcc.n	8017df4 <__mcmp+0x18>
 8017e0c:	e7fb      	b.n	8017e06 <__mcmp+0x2a>
 8017e0e:	2001      	movs	r0, #1
 8017e10:	e7f9      	b.n	8017e06 <__mcmp+0x2a>
	...

08017e14 <__mdiff>:
 8017e14:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017e18:	4689      	mov	r9, r1
 8017e1a:	4606      	mov	r6, r0
 8017e1c:	4611      	mov	r1, r2
 8017e1e:	4648      	mov	r0, r9
 8017e20:	4614      	mov	r4, r2
 8017e22:	f7ff ffdb 	bl	8017ddc <__mcmp>
 8017e26:	1e05      	subs	r5, r0, #0
 8017e28:	d112      	bne.n	8017e50 <__mdiff+0x3c>
 8017e2a:	4629      	mov	r1, r5
 8017e2c:	4630      	mov	r0, r6
 8017e2e:	f7ff fd11 	bl	8017854 <_Balloc>
 8017e32:	4602      	mov	r2, r0
 8017e34:	b928      	cbnz	r0, 8017e42 <__mdiff+0x2e>
 8017e36:	4b3f      	ldr	r3, [pc, #252]	@ (8017f34 <__mdiff+0x120>)
 8017e38:	f240 2137 	movw	r1, #567	@ 0x237
 8017e3c:	483e      	ldr	r0, [pc, #248]	@ (8017f38 <__mdiff+0x124>)
 8017e3e:	f000 fbf3 	bl	8018628 <__assert_func>
 8017e42:	2301      	movs	r3, #1
 8017e44:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8017e48:	4610      	mov	r0, r2
 8017e4a:	b003      	add	sp, #12
 8017e4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017e50:	bfbc      	itt	lt
 8017e52:	464b      	movlt	r3, r9
 8017e54:	46a1      	movlt	r9, r4
 8017e56:	4630      	mov	r0, r6
 8017e58:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8017e5c:	bfba      	itte	lt
 8017e5e:	461c      	movlt	r4, r3
 8017e60:	2501      	movlt	r5, #1
 8017e62:	2500      	movge	r5, #0
 8017e64:	f7ff fcf6 	bl	8017854 <_Balloc>
 8017e68:	4602      	mov	r2, r0
 8017e6a:	b918      	cbnz	r0, 8017e74 <__mdiff+0x60>
 8017e6c:	4b31      	ldr	r3, [pc, #196]	@ (8017f34 <__mdiff+0x120>)
 8017e6e:	f240 2145 	movw	r1, #581	@ 0x245
 8017e72:	e7e3      	b.n	8017e3c <__mdiff+0x28>
 8017e74:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8017e78:	6926      	ldr	r6, [r4, #16]
 8017e7a:	60c5      	str	r5, [r0, #12]
 8017e7c:	f109 0310 	add.w	r3, r9, #16
 8017e80:	f109 0514 	add.w	r5, r9, #20
 8017e84:	f104 0e14 	add.w	lr, r4, #20
 8017e88:	f100 0b14 	add.w	fp, r0, #20
 8017e8c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8017e90:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8017e94:	9301      	str	r3, [sp, #4]
 8017e96:	46d9      	mov	r9, fp
 8017e98:	f04f 0c00 	mov.w	ip, #0
 8017e9c:	9b01      	ldr	r3, [sp, #4]
 8017e9e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8017ea2:	f853 af04 	ldr.w	sl, [r3, #4]!
 8017ea6:	9301      	str	r3, [sp, #4]
 8017ea8:	fa1f f38a 	uxth.w	r3, sl
 8017eac:	4619      	mov	r1, r3
 8017eae:	b283      	uxth	r3, r0
 8017eb0:	1acb      	subs	r3, r1, r3
 8017eb2:	0c00      	lsrs	r0, r0, #16
 8017eb4:	4463      	add	r3, ip
 8017eb6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8017eba:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8017ebe:	b29b      	uxth	r3, r3
 8017ec0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8017ec4:	4576      	cmp	r6, lr
 8017ec6:	f849 3b04 	str.w	r3, [r9], #4
 8017eca:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8017ece:	d8e5      	bhi.n	8017e9c <__mdiff+0x88>
 8017ed0:	1b33      	subs	r3, r6, r4
 8017ed2:	3b15      	subs	r3, #21
 8017ed4:	f023 0303 	bic.w	r3, r3, #3
 8017ed8:	3415      	adds	r4, #21
 8017eda:	3304      	adds	r3, #4
 8017edc:	42a6      	cmp	r6, r4
 8017ede:	bf38      	it	cc
 8017ee0:	2304      	movcc	r3, #4
 8017ee2:	441d      	add	r5, r3
 8017ee4:	445b      	add	r3, fp
 8017ee6:	461e      	mov	r6, r3
 8017ee8:	462c      	mov	r4, r5
 8017eea:	4544      	cmp	r4, r8
 8017eec:	d30e      	bcc.n	8017f0c <__mdiff+0xf8>
 8017eee:	f108 0103 	add.w	r1, r8, #3
 8017ef2:	1b49      	subs	r1, r1, r5
 8017ef4:	f021 0103 	bic.w	r1, r1, #3
 8017ef8:	3d03      	subs	r5, #3
 8017efa:	45a8      	cmp	r8, r5
 8017efc:	bf38      	it	cc
 8017efe:	2100      	movcc	r1, #0
 8017f00:	440b      	add	r3, r1
 8017f02:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8017f06:	b191      	cbz	r1, 8017f2e <__mdiff+0x11a>
 8017f08:	6117      	str	r7, [r2, #16]
 8017f0a:	e79d      	b.n	8017e48 <__mdiff+0x34>
 8017f0c:	f854 1b04 	ldr.w	r1, [r4], #4
 8017f10:	46e6      	mov	lr, ip
 8017f12:	0c08      	lsrs	r0, r1, #16
 8017f14:	fa1c fc81 	uxtah	ip, ip, r1
 8017f18:	4471      	add	r1, lr
 8017f1a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8017f1e:	b289      	uxth	r1, r1
 8017f20:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8017f24:	f846 1b04 	str.w	r1, [r6], #4
 8017f28:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8017f2c:	e7dd      	b.n	8017eea <__mdiff+0xd6>
 8017f2e:	3f01      	subs	r7, #1
 8017f30:	e7e7      	b.n	8017f02 <__mdiff+0xee>
 8017f32:	bf00      	nop
 8017f34:	08019fc9 	.word	0x08019fc9
 8017f38:	0801a03a 	.word	0x0801a03a

08017f3c <__ulp>:
 8017f3c:	b082      	sub	sp, #8
 8017f3e:	ed8d 0b00 	vstr	d0, [sp]
 8017f42:	9a01      	ldr	r2, [sp, #4]
 8017f44:	4b0f      	ldr	r3, [pc, #60]	@ (8017f84 <__ulp+0x48>)
 8017f46:	4013      	ands	r3, r2
 8017f48:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8017f4c:	2b00      	cmp	r3, #0
 8017f4e:	dc08      	bgt.n	8017f62 <__ulp+0x26>
 8017f50:	425b      	negs	r3, r3
 8017f52:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8017f56:	ea4f 5223 	mov.w	r2, r3, asr #20
 8017f5a:	da04      	bge.n	8017f66 <__ulp+0x2a>
 8017f5c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8017f60:	4113      	asrs	r3, r2
 8017f62:	2200      	movs	r2, #0
 8017f64:	e008      	b.n	8017f78 <__ulp+0x3c>
 8017f66:	f1a2 0314 	sub.w	r3, r2, #20
 8017f6a:	2b1e      	cmp	r3, #30
 8017f6c:	bfda      	itte	le
 8017f6e:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8017f72:	40da      	lsrle	r2, r3
 8017f74:	2201      	movgt	r2, #1
 8017f76:	2300      	movs	r3, #0
 8017f78:	4619      	mov	r1, r3
 8017f7a:	4610      	mov	r0, r2
 8017f7c:	ec41 0b10 	vmov	d0, r0, r1
 8017f80:	b002      	add	sp, #8
 8017f82:	4770      	bx	lr
 8017f84:	7ff00000 	.word	0x7ff00000

08017f88 <__b2d>:
 8017f88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017f8c:	6906      	ldr	r6, [r0, #16]
 8017f8e:	f100 0814 	add.w	r8, r0, #20
 8017f92:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8017f96:	1f37      	subs	r7, r6, #4
 8017f98:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8017f9c:	4610      	mov	r0, r2
 8017f9e:	f7ff fd4b 	bl	8017a38 <__hi0bits>
 8017fa2:	f1c0 0320 	rsb	r3, r0, #32
 8017fa6:	280a      	cmp	r0, #10
 8017fa8:	600b      	str	r3, [r1, #0]
 8017faa:	491b      	ldr	r1, [pc, #108]	@ (8018018 <__b2d+0x90>)
 8017fac:	dc15      	bgt.n	8017fda <__b2d+0x52>
 8017fae:	f1c0 0c0b 	rsb	ip, r0, #11
 8017fb2:	fa22 f30c 	lsr.w	r3, r2, ip
 8017fb6:	45b8      	cmp	r8, r7
 8017fb8:	ea43 0501 	orr.w	r5, r3, r1
 8017fbc:	bf34      	ite	cc
 8017fbe:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8017fc2:	2300      	movcs	r3, #0
 8017fc4:	3015      	adds	r0, #21
 8017fc6:	fa02 f000 	lsl.w	r0, r2, r0
 8017fca:	fa23 f30c 	lsr.w	r3, r3, ip
 8017fce:	4303      	orrs	r3, r0
 8017fd0:	461c      	mov	r4, r3
 8017fd2:	ec45 4b10 	vmov	d0, r4, r5
 8017fd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017fda:	45b8      	cmp	r8, r7
 8017fdc:	bf3a      	itte	cc
 8017fde:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8017fe2:	f1a6 0708 	subcc.w	r7, r6, #8
 8017fe6:	2300      	movcs	r3, #0
 8017fe8:	380b      	subs	r0, #11
 8017fea:	d012      	beq.n	8018012 <__b2d+0x8a>
 8017fec:	f1c0 0120 	rsb	r1, r0, #32
 8017ff0:	fa23 f401 	lsr.w	r4, r3, r1
 8017ff4:	4082      	lsls	r2, r0
 8017ff6:	4322      	orrs	r2, r4
 8017ff8:	4547      	cmp	r7, r8
 8017ffa:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8017ffe:	bf8c      	ite	hi
 8018000:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8018004:	2200      	movls	r2, #0
 8018006:	4083      	lsls	r3, r0
 8018008:	40ca      	lsrs	r2, r1
 801800a:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 801800e:	4313      	orrs	r3, r2
 8018010:	e7de      	b.n	8017fd0 <__b2d+0x48>
 8018012:	ea42 0501 	orr.w	r5, r2, r1
 8018016:	e7db      	b.n	8017fd0 <__b2d+0x48>
 8018018:	3ff00000 	.word	0x3ff00000

0801801c <__d2b>:
 801801c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8018020:	460f      	mov	r7, r1
 8018022:	2101      	movs	r1, #1
 8018024:	ec59 8b10 	vmov	r8, r9, d0
 8018028:	4616      	mov	r6, r2
 801802a:	f7ff fc13 	bl	8017854 <_Balloc>
 801802e:	4604      	mov	r4, r0
 8018030:	b930      	cbnz	r0, 8018040 <__d2b+0x24>
 8018032:	4602      	mov	r2, r0
 8018034:	4b23      	ldr	r3, [pc, #140]	@ (80180c4 <__d2b+0xa8>)
 8018036:	4824      	ldr	r0, [pc, #144]	@ (80180c8 <__d2b+0xac>)
 8018038:	f240 310f 	movw	r1, #783	@ 0x30f
 801803c:	f000 faf4 	bl	8018628 <__assert_func>
 8018040:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8018044:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8018048:	b10d      	cbz	r5, 801804e <__d2b+0x32>
 801804a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801804e:	9301      	str	r3, [sp, #4]
 8018050:	f1b8 0300 	subs.w	r3, r8, #0
 8018054:	d023      	beq.n	801809e <__d2b+0x82>
 8018056:	4668      	mov	r0, sp
 8018058:	9300      	str	r3, [sp, #0]
 801805a:	f7ff fd0c 	bl	8017a76 <__lo0bits>
 801805e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8018062:	b1d0      	cbz	r0, 801809a <__d2b+0x7e>
 8018064:	f1c0 0320 	rsb	r3, r0, #32
 8018068:	fa02 f303 	lsl.w	r3, r2, r3
 801806c:	430b      	orrs	r3, r1
 801806e:	40c2      	lsrs	r2, r0
 8018070:	6163      	str	r3, [r4, #20]
 8018072:	9201      	str	r2, [sp, #4]
 8018074:	9b01      	ldr	r3, [sp, #4]
 8018076:	61a3      	str	r3, [r4, #24]
 8018078:	2b00      	cmp	r3, #0
 801807a:	bf0c      	ite	eq
 801807c:	2201      	moveq	r2, #1
 801807e:	2202      	movne	r2, #2
 8018080:	6122      	str	r2, [r4, #16]
 8018082:	b1a5      	cbz	r5, 80180ae <__d2b+0x92>
 8018084:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8018088:	4405      	add	r5, r0
 801808a:	603d      	str	r5, [r7, #0]
 801808c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8018090:	6030      	str	r0, [r6, #0]
 8018092:	4620      	mov	r0, r4
 8018094:	b003      	add	sp, #12
 8018096:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801809a:	6161      	str	r1, [r4, #20]
 801809c:	e7ea      	b.n	8018074 <__d2b+0x58>
 801809e:	a801      	add	r0, sp, #4
 80180a0:	f7ff fce9 	bl	8017a76 <__lo0bits>
 80180a4:	9b01      	ldr	r3, [sp, #4]
 80180a6:	6163      	str	r3, [r4, #20]
 80180a8:	3020      	adds	r0, #32
 80180aa:	2201      	movs	r2, #1
 80180ac:	e7e8      	b.n	8018080 <__d2b+0x64>
 80180ae:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80180b2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80180b6:	6038      	str	r0, [r7, #0]
 80180b8:	6918      	ldr	r0, [r3, #16]
 80180ba:	f7ff fcbd 	bl	8017a38 <__hi0bits>
 80180be:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80180c2:	e7e5      	b.n	8018090 <__d2b+0x74>
 80180c4:	08019fc9 	.word	0x08019fc9
 80180c8:	0801a03a 	.word	0x0801a03a

080180cc <__ratio>:
 80180cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80180d0:	4688      	mov	r8, r1
 80180d2:	4669      	mov	r1, sp
 80180d4:	4681      	mov	r9, r0
 80180d6:	f7ff ff57 	bl	8017f88 <__b2d>
 80180da:	a901      	add	r1, sp, #4
 80180dc:	4640      	mov	r0, r8
 80180de:	ec55 4b10 	vmov	r4, r5, d0
 80180e2:	f7ff ff51 	bl	8017f88 <__b2d>
 80180e6:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80180ea:	f8d9 2010 	ldr.w	r2, [r9, #16]
 80180ee:	1ad2      	subs	r2, r2, r3
 80180f0:	e9dd 3100 	ldrd	r3, r1, [sp]
 80180f4:	1a5b      	subs	r3, r3, r1
 80180f6:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 80180fa:	ec57 6b10 	vmov	r6, r7, d0
 80180fe:	2b00      	cmp	r3, #0
 8018100:	bfd6      	itet	le
 8018102:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8018106:	462a      	movgt	r2, r5
 8018108:	463a      	movle	r2, r7
 801810a:	46ab      	mov	fp, r5
 801810c:	46a2      	mov	sl, r4
 801810e:	bfce      	itee	gt
 8018110:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8018114:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 8018118:	ee00 3a90 	vmovle	s1, r3
 801811c:	ec4b ab17 	vmov	d7, sl, fp
 8018120:	ee87 0b00 	vdiv.f64	d0, d7, d0
 8018124:	b003      	add	sp, #12
 8018126:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801812a <__copybits>:
 801812a:	3901      	subs	r1, #1
 801812c:	b570      	push	{r4, r5, r6, lr}
 801812e:	1149      	asrs	r1, r1, #5
 8018130:	6914      	ldr	r4, [r2, #16]
 8018132:	3101      	adds	r1, #1
 8018134:	f102 0314 	add.w	r3, r2, #20
 8018138:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801813c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8018140:	1f05      	subs	r5, r0, #4
 8018142:	42a3      	cmp	r3, r4
 8018144:	d30c      	bcc.n	8018160 <__copybits+0x36>
 8018146:	1aa3      	subs	r3, r4, r2
 8018148:	3b11      	subs	r3, #17
 801814a:	f023 0303 	bic.w	r3, r3, #3
 801814e:	3211      	adds	r2, #17
 8018150:	42a2      	cmp	r2, r4
 8018152:	bf88      	it	hi
 8018154:	2300      	movhi	r3, #0
 8018156:	4418      	add	r0, r3
 8018158:	2300      	movs	r3, #0
 801815a:	4288      	cmp	r0, r1
 801815c:	d305      	bcc.n	801816a <__copybits+0x40>
 801815e:	bd70      	pop	{r4, r5, r6, pc}
 8018160:	f853 6b04 	ldr.w	r6, [r3], #4
 8018164:	f845 6f04 	str.w	r6, [r5, #4]!
 8018168:	e7eb      	b.n	8018142 <__copybits+0x18>
 801816a:	f840 3b04 	str.w	r3, [r0], #4
 801816e:	e7f4      	b.n	801815a <__copybits+0x30>

08018170 <__any_on>:
 8018170:	f100 0214 	add.w	r2, r0, #20
 8018174:	6900      	ldr	r0, [r0, #16]
 8018176:	114b      	asrs	r3, r1, #5
 8018178:	4298      	cmp	r0, r3
 801817a:	b510      	push	{r4, lr}
 801817c:	db11      	blt.n	80181a2 <__any_on+0x32>
 801817e:	dd0a      	ble.n	8018196 <__any_on+0x26>
 8018180:	f011 011f 	ands.w	r1, r1, #31
 8018184:	d007      	beq.n	8018196 <__any_on+0x26>
 8018186:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801818a:	fa24 f001 	lsr.w	r0, r4, r1
 801818e:	fa00 f101 	lsl.w	r1, r0, r1
 8018192:	428c      	cmp	r4, r1
 8018194:	d10b      	bne.n	80181ae <__any_on+0x3e>
 8018196:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801819a:	4293      	cmp	r3, r2
 801819c:	d803      	bhi.n	80181a6 <__any_on+0x36>
 801819e:	2000      	movs	r0, #0
 80181a0:	bd10      	pop	{r4, pc}
 80181a2:	4603      	mov	r3, r0
 80181a4:	e7f7      	b.n	8018196 <__any_on+0x26>
 80181a6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80181aa:	2900      	cmp	r1, #0
 80181ac:	d0f5      	beq.n	801819a <__any_on+0x2a>
 80181ae:	2001      	movs	r0, #1
 80181b0:	e7f6      	b.n	80181a0 <__any_on+0x30>

080181b2 <__ascii_wctomb>:
 80181b2:	4603      	mov	r3, r0
 80181b4:	4608      	mov	r0, r1
 80181b6:	b141      	cbz	r1, 80181ca <__ascii_wctomb+0x18>
 80181b8:	2aff      	cmp	r2, #255	@ 0xff
 80181ba:	d904      	bls.n	80181c6 <__ascii_wctomb+0x14>
 80181bc:	228a      	movs	r2, #138	@ 0x8a
 80181be:	601a      	str	r2, [r3, #0]
 80181c0:	f04f 30ff 	mov.w	r0, #4294967295
 80181c4:	4770      	bx	lr
 80181c6:	700a      	strb	r2, [r1, #0]
 80181c8:	2001      	movs	r0, #1
 80181ca:	4770      	bx	lr

080181cc <__ssputs_r>:
 80181cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80181d0:	688e      	ldr	r6, [r1, #8]
 80181d2:	461f      	mov	r7, r3
 80181d4:	42be      	cmp	r6, r7
 80181d6:	680b      	ldr	r3, [r1, #0]
 80181d8:	4682      	mov	sl, r0
 80181da:	460c      	mov	r4, r1
 80181dc:	4690      	mov	r8, r2
 80181de:	d82d      	bhi.n	801823c <__ssputs_r+0x70>
 80181e0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80181e4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80181e8:	d026      	beq.n	8018238 <__ssputs_r+0x6c>
 80181ea:	6965      	ldr	r5, [r4, #20]
 80181ec:	6909      	ldr	r1, [r1, #16]
 80181ee:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80181f2:	eba3 0901 	sub.w	r9, r3, r1
 80181f6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80181fa:	1c7b      	adds	r3, r7, #1
 80181fc:	444b      	add	r3, r9
 80181fe:	106d      	asrs	r5, r5, #1
 8018200:	429d      	cmp	r5, r3
 8018202:	bf38      	it	cc
 8018204:	461d      	movcc	r5, r3
 8018206:	0553      	lsls	r3, r2, #21
 8018208:	d527      	bpl.n	801825a <__ssputs_r+0x8e>
 801820a:	4629      	mov	r1, r5
 801820c:	f7ff fa84 	bl	8017718 <_malloc_r>
 8018210:	4606      	mov	r6, r0
 8018212:	b360      	cbz	r0, 801826e <__ssputs_r+0xa2>
 8018214:	6921      	ldr	r1, [r4, #16]
 8018216:	464a      	mov	r2, r9
 8018218:	f7fe f8d9 	bl	80163ce <memcpy>
 801821c:	89a3      	ldrh	r3, [r4, #12]
 801821e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8018222:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8018226:	81a3      	strh	r3, [r4, #12]
 8018228:	6126      	str	r6, [r4, #16]
 801822a:	6165      	str	r5, [r4, #20]
 801822c:	444e      	add	r6, r9
 801822e:	eba5 0509 	sub.w	r5, r5, r9
 8018232:	6026      	str	r6, [r4, #0]
 8018234:	60a5      	str	r5, [r4, #8]
 8018236:	463e      	mov	r6, r7
 8018238:	42be      	cmp	r6, r7
 801823a:	d900      	bls.n	801823e <__ssputs_r+0x72>
 801823c:	463e      	mov	r6, r7
 801823e:	6820      	ldr	r0, [r4, #0]
 8018240:	4632      	mov	r2, r6
 8018242:	4641      	mov	r1, r8
 8018244:	f000 f9c6 	bl	80185d4 <memmove>
 8018248:	68a3      	ldr	r3, [r4, #8]
 801824a:	1b9b      	subs	r3, r3, r6
 801824c:	60a3      	str	r3, [r4, #8]
 801824e:	6823      	ldr	r3, [r4, #0]
 8018250:	4433      	add	r3, r6
 8018252:	6023      	str	r3, [r4, #0]
 8018254:	2000      	movs	r0, #0
 8018256:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801825a:	462a      	mov	r2, r5
 801825c:	f000 fa16 	bl	801868c <_realloc_r>
 8018260:	4606      	mov	r6, r0
 8018262:	2800      	cmp	r0, #0
 8018264:	d1e0      	bne.n	8018228 <__ssputs_r+0x5c>
 8018266:	6921      	ldr	r1, [r4, #16]
 8018268:	4650      	mov	r0, sl
 801826a:	f7fe fea7 	bl	8016fbc <_free_r>
 801826e:	230c      	movs	r3, #12
 8018270:	f8ca 3000 	str.w	r3, [sl]
 8018274:	89a3      	ldrh	r3, [r4, #12]
 8018276:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801827a:	81a3      	strh	r3, [r4, #12]
 801827c:	f04f 30ff 	mov.w	r0, #4294967295
 8018280:	e7e9      	b.n	8018256 <__ssputs_r+0x8a>
	...

08018284 <_svfiprintf_r>:
 8018284:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018288:	4698      	mov	r8, r3
 801828a:	898b      	ldrh	r3, [r1, #12]
 801828c:	061b      	lsls	r3, r3, #24
 801828e:	b09d      	sub	sp, #116	@ 0x74
 8018290:	4607      	mov	r7, r0
 8018292:	460d      	mov	r5, r1
 8018294:	4614      	mov	r4, r2
 8018296:	d510      	bpl.n	80182ba <_svfiprintf_r+0x36>
 8018298:	690b      	ldr	r3, [r1, #16]
 801829a:	b973      	cbnz	r3, 80182ba <_svfiprintf_r+0x36>
 801829c:	2140      	movs	r1, #64	@ 0x40
 801829e:	f7ff fa3b 	bl	8017718 <_malloc_r>
 80182a2:	6028      	str	r0, [r5, #0]
 80182a4:	6128      	str	r0, [r5, #16]
 80182a6:	b930      	cbnz	r0, 80182b6 <_svfiprintf_r+0x32>
 80182a8:	230c      	movs	r3, #12
 80182aa:	603b      	str	r3, [r7, #0]
 80182ac:	f04f 30ff 	mov.w	r0, #4294967295
 80182b0:	b01d      	add	sp, #116	@ 0x74
 80182b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80182b6:	2340      	movs	r3, #64	@ 0x40
 80182b8:	616b      	str	r3, [r5, #20]
 80182ba:	2300      	movs	r3, #0
 80182bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80182be:	2320      	movs	r3, #32
 80182c0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80182c4:	f8cd 800c 	str.w	r8, [sp, #12]
 80182c8:	2330      	movs	r3, #48	@ 0x30
 80182ca:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8018468 <_svfiprintf_r+0x1e4>
 80182ce:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80182d2:	f04f 0901 	mov.w	r9, #1
 80182d6:	4623      	mov	r3, r4
 80182d8:	469a      	mov	sl, r3
 80182da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80182de:	b10a      	cbz	r2, 80182e4 <_svfiprintf_r+0x60>
 80182e0:	2a25      	cmp	r2, #37	@ 0x25
 80182e2:	d1f9      	bne.n	80182d8 <_svfiprintf_r+0x54>
 80182e4:	ebba 0b04 	subs.w	fp, sl, r4
 80182e8:	d00b      	beq.n	8018302 <_svfiprintf_r+0x7e>
 80182ea:	465b      	mov	r3, fp
 80182ec:	4622      	mov	r2, r4
 80182ee:	4629      	mov	r1, r5
 80182f0:	4638      	mov	r0, r7
 80182f2:	f7ff ff6b 	bl	80181cc <__ssputs_r>
 80182f6:	3001      	adds	r0, #1
 80182f8:	f000 80a7 	beq.w	801844a <_svfiprintf_r+0x1c6>
 80182fc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80182fe:	445a      	add	r2, fp
 8018300:	9209      	str	r2, [sp, #36]	@ 0x24
 8018302:	f89a 3000 	ldrb.w	r3, [sl]
 8018306:	2b00      	cmp	r3, #0
 8018308:	f000 809f 	beq.w	801844a <_svfiprintf_r+0x1c6>
 801830c:	2300      	movs	r3, #0
 801830e:	f04f 32ff 	mov.w	r2, #4294967295
 8018312:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018316:	f10a 0a01 	add.w	sl, sl, #1
 801831a:	9304      	str	r3, [sp, #16]
 801831c:	9307      	str	r3, [sp, #28]
 801831e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8018322:	931a      	str	r3, [sp, #104]	@ 0x68
 8018324:	4654      	mov	r4, sl
 8018326:	2205      	movs	r2, #5
 8018328:	f814 1b01 	ldrb.w	r1, [r4], #1
 801832c:	484e      	ldr	r0, [pc, #312]	@ (8018468 <_svfiprintf_r+0x1e4>)
 801832e:	f7e7 ffff 	bl	8000330 <memchr>
 8018332:	9a04      	ldr	r2, [sp, #16]
 8018334:	b9d8      	cbnz	r0, 801836e <_svfiprintf_r+0xea>
 8018336:	06d0      	lsls	r0, r2, #27
 8018338:	bf44      	itt	mi
 801833a:	2320      	movmi	r3, #32
 801833c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8018340:	0711      	lsls	r1, r2, #28
 8018342:	bf44      	itt	mi
 8018344:	232b      	movmi	r3, #43	@ 0x2b
 8018346:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801834a:	f89a 3000 	ldrb.w	r3, [sl]
 801834e:	2b2a      	cmp	r3, #42	@ 0x2a
 8018350:	d015      	beq.n	801837e <_svfiprintf_r+0xfa>
 8018352:	9a07      	ldr	r2, [sp, #28]
 8018354:	4654      	mov	r4, sl
 8018356:	2000      	movs	r0, #0
 8018358:	f04f 0c0a 	mov.w	ip, #10
 801835c:	4621      	mov	r1, r4
 801835e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018362:	3b30      	subs	r3, #48	@ 0x30
 8018364:	2b09      	cmp	r3, #9
 8018366:	d94b      	bls.n	8018400 <_svfiprintf_r+0x17c>
 8018368:	b1b0      	cbz	r0, 8018398 <_svfiprintf_r+0x114>
 801836a:	9207      	str	r2, [sp, #28]
 801836c:	e014      	b.n	8018398 <_svfiprintf_r+0x114>
 801836e:	eba0 0308 	sub.w	r3, r0, r8
 8018372:	fa09 f303 	lsl.w	r3, r9, r3
 8018376:	4313      	orrs	r3, r2
 8018378:	9304      	str	r3, [sp, #16]
 801837a:	46a2      	mov	sl, r4
 801837c:	e7d2      	b.n	8018324 <_svfiprintf_r+0xa0>
 801837e:	9b03      	ldr	r3, [sp, #12]
 8018380:	1d19      	adds	r1, r3, #4
 8018382:	681b      	ldr	r3, [r3, #0]
 8018384:	9103      	str	r1, [sp, #12]
 8018386:	2b00      	cmp	r3, #0
 8018388:	bfbb      	ittet	lt
 801838a:	425b      	neglt	r3, r3
 801838c:	f042 0202 	orrlt.w	r2, r2, #2
 8018390:	9307      	strge	r3, [sp, #28]
 8018392:	9307      	strlt	r3, [sp, #28]
 8018394:	bfb8      	it	lt
 8018396:	9204      	strlt	r2, [sp, #16]
 8018398:	7823      	ldrb	r3, [r4, #0]
 801839a:	2b2e      	cmp	r3, #46	@ 0x2e
 801839c:	d10a      	bne.n	80183b4 <_svfiprintf_r+0x130>
 801839e:	7863      	ldrb	r3, [r4, #1]
 80183a0:	2b2a      	cmp	r3, #42	@ 0x2a
 80183a2:	d132      	bne.n	801840a <_svfiprintf_r+0x186>
 80183a4:	9b03      	ldr	r3, [sp, #12]
 80183a6:	1d1a      	adds	r2, r3, #4
 80183a8:	681b      	ldr	r3, [r3, #0]
 80183aa:	9203      	str	r2, [sp, #12]
 80183ac:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80183b0:	3402      	adds	r4, #2
 80183b2:	9305      	str	r3, [sp, #20]
 80183b4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8018478 <_svfiprintf_r+0x1f4>
 80183b8:	7821      	ldrb	r1, [r4, #0]
 80183ba:	2203      	movs	r2, #3
 80183bc:	4650      	mov	r0, sl
 80183be:	f7e7 ffb7 	bl	8000330 <memchr>
 80183c2:	b138      	cbz	r0, 80183d4 <_svfiprintf_r+0x150>
 80183c4:	9b04      	ldr	r3, [sp, #16]
 80183c6:	eba0 000a 	sub.w	r0, r0, sl
 80183ca:	2240      	movs	r2, #64	@ 0x40
 80183cc:	4082      	lsls	r2, r0
 80183ce:	4313      	orrs	r3, r2
 80183d0:	3401      	adds	r4, #1
 80183d2:	9304      	str	r3, [sp, #16]
 80183d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80183d8:	4824      	ldr	r0, [pc, #144]	@ (801846c <_svfiprintf_r+0x1e8>)
 80183da:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80183de:	2206      	movs	r2, #6
 80183e0:	f7e7 ffa6 	bl	8000330 <memchr>
 80183e4:	2800      	cmp	r0, #0
 80183e6:	d036      	beq.n	8018456 <_svfiprintf_r+0x1d2>
 80183e8:	4b21      	ldr	r3, [pc, #132]	@ (8018470 <_svfiprintf_r+0x1ec>)
 80183ea:	bb1b      	cbnz	r3, 8018434 <_svfiprintf_r+0x1b0>
 80183ec:	9b03      	ldr	r3, [sp, #12]
 80183ee:	3307      	adds	r3, #7
 80183f0:	f023 0307 	bic.w	r3, r3, #7
 80183f4:	3308      	adds	r3, #8
 80183f6:	9303      	str	r3, [sp, #12]
 80183f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80183fa:	4433      	add	r3, r6
 80183fc:	9309      	str	r3, [sp, #36]	@ 0x24
 80183fe:	e76a      	b.n	80182d6 <_svfiprintf_r+0x52>
 8018400:	fb0c 3202 	mla	r2, ip, r2, r3
 8018404:	460c      	mov	r4, r1
 8018406:	2001      	movs	r0, #1
 8018408:	e7a8      	b.n	801835c <_svfiprintf_r+0xd8>
 801840a:	2300      	movs	r3, #0
 801840c:	3401      	adds	r4, #1
 801840e:	9305      	str	r3, [sp, #20]
 8018410:	4619      	mov	r1, r3
 8018412:	f04f 0c0a 	mov.w	ip, #10
 8018416:	4620      	mov	r0, r4
 8018418:	f810 2b01 	ldrb.w	r2, [r0], #1
 801841c:	3a30      	subs	r2, #48	@ 0x30
 801841e:	2a09      	cmp	r2, #9
 8018420:	d903      	bls.n	801842a <_svfiprintf_r+0x1a6>
 8018422:	2b00      	cmp	r3, #0
 8018424:	d0c6      	beq.n	80183b4 <_svfiprintf_r+0x130>
 8018426:	9105      	str	r1, [sp, #20]
 8018428:	e7c4      	b.n	80183b4 <_svfiprintf_r+0x130>
 801842a:	fb0c 2101 	mla	r1, ip, r1, r2
 801842e:	4604      	mov	r4, r0
 8018430:	2301      	movs	r3, #1
 8018432:	e7f0      	b.n	8018416 <_svfiprintf_r+0x192>
 8018434:	ab03      	add	r3, sp, #12
 8018436:	9300      	str	r3, [sp, #0]
 8018438:	462a      	mov	r2, r5
 801843a:	4b0e      	ldr	r3, [pc, #56]	@ (8018474 <_svfiprintf_r+0x1f0>)
 801843c:	a904      	add	r1, sp, #16
 801843e:	4638      	mov	r0, r7
 8018440:	f7fd fa5a 	bl	80158f8 <_printf_float>
 8018444:	1c42      	adds	r2, r0, #1
 8018446:	4606      	mov	r6, r0
 8018448:	d1d6      	bne.n	80183f8 <_svfiprintf_r+0x174>
 801844a:	89ab      	ldrh	r3, [r5, #12]
 801844c:	065b      	lsls	r3, r3, #25
 801844e:	f53f af2d 	bmi.w	80182ac <_svfiprintf_r+0x28>
 8018452:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8018454:	e72c      	b.n	80182b0 <_svfiprintf_r+0x2c>
 8018456:	ab03      	add	r3, sp, #12
 8018458:	9300      	str	r3, [sp, #0]
 801845a:	462a      	mov	r2, r5
 801845c:	4b05      	ldr	r3, [pc, #20]	@ (8018474 <_svfiprintf_r+0x1f0>)
 801845e:	a904      	add	r1, sp, #16
 8018460:	4638      	mov	r0, r7
 8018462:	f7fd fcd1 	bl	8015e08 <_printf_i>
 8018466:	e7ed      	b.n	8018444 <_svfiprintf_r+0x1c0>
 8018468:	0801a190 	.word	0x0801a190
 801846c:	0801a19a 	.word	0x0801a19a
 8018470:	080158f9 	.word	0x080158f9
 8018474:	080181cd 	.word	0x080181cd
 8018478:	0801a196 	.word	0x0801a196

0801847c <__sflush_r>:
 801847c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8018480:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018484:	0716      	lsls	r6, r2, #28
 8018486:	4605      	mov	r5, r0
 8018488:	460c      	mov	r4, r1
 801848a:	d454      	bmi.n	8018536 <__sflush_r+0xba>
 801848c:	684b      	ldr	r3, [r1, #4]
 801848e:	2b00      	cmp	r3, #0
 8018490:	dc02      	bgt.n	8018498 <__sflush_r+0x1c>
 8018492:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8018494:	2b00      	cmp	r3, #0
 8018496:	dd48      	ble.n	801852a <__sflush_r+0xae>
 8018498:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801849a:	2e00      	cmp	r6, #0
 801849c:	d045      	beq.n	801852a <__sflush_r+0xae>
 801849e:	2300      	movs	r3, #0
 80184a0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80184a4:	682f      	ldr	r7, [r5, #0]
 80184a6:	6a21      	ldr	r1, [r4, #32]
 80184a8:	602b      	str	r3, [r5, #0]
 80184aa:	d030      	beq.n	801850e <__sflush_r+0x92>
 80184ac:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80184ae:	89a3      	ldrh	r3, [r4, #12]
 80184b0:	0759      	lsls	r1, r3, #29
 80184b2:	d505      	bpl.n	80184c0 <__sflush_r+0x44>
 80184b4:	6863      	ldr	r3, [r4, #4]
 80184b6:	1ad2      	subs	r2, r2, r3
 80184b8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80184ba:	b10b      	cbz	r3, 80184c0 <__sflush_r+0x44>
 80184bc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80184be:	1ad2      	subs	r2, r2, r3
 80184c0:	2300      	movs	r3, #0
 80184c2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80184c4:	6a21      	ldr	r1, [r4, #32]
 80184c6:	4628      	mov	r0, r5
 80184c8:	47b0      	blx	r6
 80184ca:	1c43      	adds	r3, r0, #1
 80184cc:	89a3      	ldrh	r3, [r4, #12]
 80184ce:	d106      	bne.n	80184de <__sflush_r+0x62>
 80184d0:	6829      	ldr	r1, [r5, #0]
 80184d2:	291d      	cmp	r1, #29
 80184d4:	d82b      	bhi.n	801852e <__sflush_r+0xb2>
 80184d6:	4a2a      	ldr	r2, [pc, #168]	@ (8018580 <__sflush_r+0x104>)
 80184d8:	410a      	asrs	r2, r1
 80184da:	07d6      	lsls	r6, r2, #31
 80184dc:	d427      	bmi.n	801852e <__sflush_r+0xb2>
 80184de:	2200      	movs	r2, #0
 80184e0:	6062      	str	r2, [r4, #4]
 80184e2:	04d9      	lsls	r1, r3, #19
 80184e4:	6922      	ldr	r2, [r4, #16]
 80184e6:	6022      	str	r2, [r4, #0]
 80184e8:	d504      	bpl.n	80184f4 <__sflush_r+0x78>
 80184ea:	1c42      	adds	r2, r0, #1
 80184ec:	d101      	bne.n	80184f2 <__sflush_r+0x76>
 80184ee:	682b      	ldr	r3, [r5, #0]
 80184f0:	b903      	cbnz	r3, 80184f4 <__sflush_r+0x78>
 80184f2:	6560      	str	r0, [r4, #84]	@ 0x54
 80184f4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80184f6:	602f      	str	r7, [r5, #0]
 80184f8:	b1b9      	cbz	r1, 801852a <__sflush_r+0xae>
 80184fa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80184fe:	4299      	cmp	r1, r3
 8018500:	d002      	beq.n	8018508 <__sflush_r+0x8c>
 8018502:	4628      	mov	r0, r5
 8018504:	f7fe fd5a 	bl	8016fbc <_free_r>
 8018508:	2300      	movs	r3, #0
 801850a:	6363      	str	r3, [r4, #52]	@ 0x34
 801850c:	e00d      	b.n	801852a <__sflush_r+0xae>
 801850e:	2301      	movs	r3, #1
 8018510:	4628      	mov	r0, r5
 8018512:	47b0      	blx	r6
 8018514:	4602      	mov	r2, r0
 8018516:	1c50      	adds	r0, r2, #1
 8018518:	d1c9      	bne.n	80184ae <__sflush_r+0x32>
 801851a:	682b      	ldr	r3, [r5, #0]
 801851c:	2b00      	cmp	r3, #0
 801851e:	d0c6      	beq.n	80184ae <__sflush_r+0x32>
 8018520:	2b1d      	cmp	r3, #29
 8018522:	d001      	beq.n	8018528 <__sflush_r+0xac>
 8018524:	2b16      	cmp	r3, #22
 8018526:	d11e      	bne.n	8018566 <__sflush_r+0xea>
 8018528:	602f      	str	r7, [r5, #0]
 801852a:	2000      	movs	r0, #0
 801852c:	e022      	b.n	8018574 <__sflush_r+0xf8>
 801852e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8018532:	b21b      	sxth	r3, r3
 8018534:	e01b      	b.n	801856e <__sflush_r+0xf2>
 8018536:	690f      	ldr	r7, [r1, #16]
 8018538:	2f00      	cmp	r7, #0
 801853a:	d0f6      	beq.n	801852a <__sflush_r+0xae>
 801853c:	0793      	lsls	r3, r2, #30
 801853e:	680e      	ldr	r6, [r1, #0]
 8018540:	bf08      	it	eq
 8018542:	694b      	ldreq	r3, [r1, #20]
 8018544:	600f      	str	r7, [r1, #0]
 8018546:	bf18      	it	ne
 8018548:	2300      	movne	r3, #0
 801854a:	eba6 0807 	sub.w	r8, r6, r7
 801854e:	608b      	str	r3, [r1, #8]
 8018550:	f1b8 0f00 	cmp.w	r8, #0
 8018554:	dde9      	ble.n	801852a <__sflush_r+0xae>
 8018556:	6a21      	ldr	r1, [r4, #32]
 8018558:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801855a:	4643      	mov	r3, r8
 801855c:	463a      	mov	r2, r7
 801855e:	4628      	mov	r0, r5
 8018560:	47b0      	blx	r6
 8018562:	2800      	cmp	r0, #0
 8018564:	dc08      	bgt.n	8018578 <__sflush_r+0xfc>
 8018566:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801856a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801856e:	81a3      	strh	r3, [r4, #12]
 8018570:	f04f 30ff 	mov.w	r0, #4294967295
 8018574:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018578:	4407      	add	r7, r0
 801857a:	eba8 0800 	sub.w	r8, r8, r0
 801857e:	e7e7      	b.n	8018550 <__sflush_r+0xd4>
 8018580:	dfbffffe 	.word	0xdfbffffe

08018584 <_fflush_r>:
 8018584:	b538      	push	{r3, r4, r5, lr}
 8018586:	690b      	ldr	r3, [r1, #16]
 8018588:	4605      	mov	r5, r0
 801858a:	460c      	mov	r4, r1
 801858c:	b913      	cbnz	r3, 8018594 <_fflush_r+0x10>
 801858e:	2500      	movs	r5, #0
 8018590:	4628      	mov	r0, r5
 8018592:	bd38      	pop	{r3, r4, r5, pc}
 8018594:	b118      	cbz	r0, 801859e <_fflush_r+0x1a>
 8018596:	6a03      	ldr	r3, [r0, #32]
 8018598:	b90b      	cbnz	r3, 801859e <_fflush_r+0x1a>
 801859a:	f7fd fde1 	bl	8016160 <__sinit>
 801859e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80185a2:	2b00      	cmp	r3, #0
 80185a4:	d0f3      	beq.n	801858e <_fflush_r+0xa>
 80185a6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80185a8:	07d0      	lsls	r0, r2, #31
 80185aa:	d404      	bmi.n	80185b6 <_fflush_r+0x32>
 80185ac:	0599      	lsls	r1, r3, #22
 80185ae:	d402      	bmi.n	80185b6 <_fflush_r+0x32>
 80185b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80185b2:	f7fd ff0a 	bl	80163ca <__retarget_lock_acquire_recursive>
 80185b6:	4628      	mov	r0, r5
 80185b8:	4621      	mov	r1, r4
 80185ba:	f7ff ff5f 	bl	801847c <__sflush_r>
 80185be:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80185c0:	07da      	lsls	r2, r3, #31
 80185c2:	4605      	mov	r5, r0
 80185c4:	d4e4      	bmi.n	8018590 <_fflush_r+0xc>
 80185c6:	89a3      	ldrh	r3, [r4, #12]
 80185c8:	059b      	lsls	r3, r3, #22
 80185ca:	d4e1      	bmi.n	8018590 <_fflush_r+0xc>
 80185cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80185ce:	f7fd fefd 	bl	80163cc <__retarget_lock_release_recursive>
 80185d2:	e7dd      	b.n	8018590 <_fflush_r+0xc>

080185d4 <memmove>:
 80185d4:	4288      	cmp	r0, r1
 80185d6:	b510      	push	{r4, lr}
 80185d8:	eb01 0402 	add.w	r4, r1, r2
 80185dc:	d902      	bls.n	80185e4 <memmove+0x10>
 80185de:	4284      	cmp	r4, r0
 80185e0:	4623      	mov	r3, r4
 80185e2:	d807      	bhi.n	80185f4 <memmove+0x20>
 80185e4:	1e43      	subs	r3, r0, #1
 80185e6:	42a1      	cmp	r1, r4
 80185e8:	d008      	beq.n	80185fc <memmove+0x28>
 80185ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 80185ee:	f803 2f01 	strb.w	r2, [r3, #1]!
 80185f2:	e7f8      	b.n	80185e6 <memmove+0x12>
 80185f4:	4402      	add	r2, r0
 80185f6:	4601      	mov	r1, r0
 80185f8:	428a      	cmp	r2, r1
 80185fa:	d100      	bne.n	80185fe <memmove+0x2a>
 80185fc:	bd10      	pop	{r4, pc}
 80185fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8018602:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8018606:	e7f7      	b.n	80185f8 <memmove+0x24>

08018608 <_sbrk_r>:
 8018608:	b538      	push	{r3, r4, r5, lr}
 801860a:	4d06      	ldr	r5, [pc, #24]	@ (8018624 <_sbrk_r+0x1c>)
 801860c:	2300      	movs	r3, #0
 801860e:	4604      	mov	r4, r0
 8018610:	4608      	mov	r0, r1
 8018612:	602b      	str	r3, [r5, #0]
 8018614:	f7e9 ff36 	bl	8002484 <_sbrk>
 8018618:	1c43      	adds	r3, r0, #1
 801861a:	d102      	bne.n	8018622 <_sbrk_r+0x1a>
 801861c:	682b      	ldr	r3, [r5, #0]
 801861e:	b103      	cbz	r3, 8018622 <_sbrk_r+0x1a>
 8018620:	6023      	str	r3, [r4, #0]
 8018622:	bd38      	pop	{r3, r4, r5, pc}
 8018624:	24005c6c 	.word	0x24005c6c

08018628 <__assert_func>:
 8018628:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801862a:	4614      	mov	r4, r2
 801862c:	461a      	mov	r2, r3
 801862e:	4b09      	ldr	r3, [pc, #36]	@ (8018654 <__assert_func+0x2c>)
 8018630:	681b      	ldr	r3, [r3, #0]
 8018632:	4605      	mov	r5, r0
 8018634:	68d8      	ldr	r0, [r3, #12]
 8018636:	b954      	cbnz	r4, 801864e <__assert_func+0x26>
 8018638:	4b07      	ldr	r3, [pc, #28]	@ (8018658 <__assert_func+0x30>)
 801863a:	461c      	mov	r4, r3
 801863c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8018640:	9100      	str	r1, [sp, #0]
 8018642:	462b      	mov	r3, r5
 8018644:	4905      	ldr	r1, [pc, #20]	@ (801865c <__assert_func+0x34>)
 8018646:	f000 f84f 	bl	80186e8 <fiprintf>
 801864a:	f000 f85f 	bl	801870c <abort>
 801864e:	4b04      	ldr	r3, [pc, #16]	@ (8018660 <__assert_func+0x38>)
 8018650:	e7f4      	b.n	801863c <__assert_func+0x14>
 8018652:	bf00      	nop
 8018654:	2400027c 	.word	0x2400027c
 8018658:	0801a1dc 	.word	0x0801a1dc
 801865c:	0801a1ae 	.word	0x0801a1ae
 8018660:	0801a1a1 	.word	0x0801a1a1

08018664 <_calloc_r>:
 8018664:	b570      	push	{r4, r5, r6, lr}
 8018666:	fba1 5402 	umull	r5, r4, r1, r2
 801866a:	b93c      	cbnz	r4, 801867c <_calloc_r+0x18>
 801866c:	4629      	mov	r1, r5
 801866e:	f7ff f853 	bl	8017718 <_malloc_r>
 8018672:	4606      	mov	r6, r0
 8018674:	b928      	cbnz	r0, 8018682 <_calloc_r+0x1e>
 8018676:	2600      	movs	r6, #0
 8018678:	4630      	mov	r0, r6
 801867a:	bd70      	pop	{r4, r5, r6, pc}
 801867c:	220c      	movs	r2, #12
 801867e:	6002      	str	r2, [r0, #0]
 8018680:	e7f9      	b.n	8018676 <_calloc_r+0x12>
 8018682:	462a      	mov	r2, r5
 8018684:	4621      	mov	r1, r4
 8018686:	f7fd fe04 	bl	8016292 <memset>
 801868a:	e7f5      	b.n	8018678 <_calloc_r+0x14>

0801868c <_realloc_r>:
 801868c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018690:	4680      	mov	r8, r0
 8018692:	4615      	mov	r5, r2
 8018694:	460c      	mov	r4, r1
 8018696:	b921      	cbnz	r1, 80186a2 <_realloc_r+0x16>
 8018698:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801869c:	4611      	mov	r1, r2
 801869e:	f7ff b83b 	b.w	8017718 <_malloc_r>
 80186a2:	b92a      	cbnz	r2, 80186b0 <_realloc_r+0x24>
 80186a4:	f7fe fc8a 	bl	8016fbc <_free_r>
 80186a8:	2400      	movs	r4, #0
 80186aa:	4620      	mov	r0, r4
 80186ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80186b0:	f000 f833 	bl	801871a <_malloc_usable_size_r>
 80186b4:	4285      	cmp	r5, r0
 80186b6:	4606      	mov	r6, r0
 80186b8:	d802      	bhi.n	80186c0 <_realloc_r+0x34>
 80186ba:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80186be:	d8f4      	bhi.n	80186aa <_realloc_r+0x1e>
 80186c0:	4629      	mov	r1, r5
 80186c2:	4640      	mov	r0, r8
 80186c4:	f7ff f828 	bl	8017718 <_malloc_r>
 80186c8:	4607      	mov	r7, r0
 80186ca:	2800      	cmp	r0, #0
 80186cc:	d0ec      	beq.n	80186a8 <_realloc_r+0x1c>
 80186ce:	42b5      	cmp	r5, r6
 80186d0:	462a      	mov	r2, r5
 80186d2:	4621      	mov	r1, r4
 80186d4:	bf28      	it	cs
 80186d6:	4632      	movcs	r2, r6
 80186d8:	f7fd fe79 	bl	80163ce <memcpy>
 80186dc:	4621      	mov	r1, r4
 80186de:	4640      	mov	r0, r8
 80186e0:	f7fe fc6c 	bl	8016fbc <_free_r>
 80186e4:	463c      	mov	r4, r7
 80186e6:	e7e0      	b.n	80186aa <_realloc_r+0x1e>

080186e8 <fiprintf>:
 80186e8:	b40e      	push	{r1, r2, r3}
 80186ea:	b503      	push	{r0, r1, lr}
 80186ec:	4601      	mov	r1, r0
 80186ee:	ab03      	add	r3, sp, #12
 80186f0:	4805      	ldr	r0, [pc, #20]	@ (8018708 <fiprintf+0x20>)
 80186f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80186f6:	6800      	ldr	r0, [r0, #0]
 80186f8:	9301      	str	r3, [sp, #4]
 80186fa:	f000 f83f 	bl	801877c <_vfiprintf_r>
 80186fe:	b002      	add	sp, #8
 8018700:	f85d eb04 	ldr.w	lr, [sp], #4
 8018704:	b003      	add	sp, #12
 8018706:	4770      	bx	lr
 8018708:	2400027c 	.word	0x2400027c

0801870c <abort>:
 801870c:	b508      	push	{r3, lr}
 801870e:	2006      	movs	r0, #6
 8018710:	f000 fa08 	bl	8018b24 <raise>
 8018714:	2001      	movs	r0, #1
 8018716:	f7e9 fe3d 	bl	8002394 <_exit>

0801871a <_malloc_usable_size_r>:
 801871a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801871e:	1f18      	subs	r0, r3, #4
 8018720:	2b00      	cmp	r3, #0
 8018722:	bfbc      	itt	lt
 8018724:	580b      	ldrlt	r3, [r1, r0]
 8018726:	18c0      	addlt	r0, r0, r3
 8018728:	4770      	bx	lr

0801872a <__sfputc_r>:
 801872a:	6893      	ldr	r3, [r2, #8]
 801872c:	3b01      	subs	r3, #1
 801872e:	2b00      	cmp	r3, #0
 8018730:	b410      	push	{r4}
 8018732:	6093      	str	r3, [r2, #8]
 8018734:	da08      	bge.n	8018748 <__sfputc_r+0x1e>
 8018736:	6994      	ldr	r4, [r2, #24]
 8018738:	42a3      	cmp	r3, r4
 801873a:	db01      	blt.n	8018740 <__sfputc_r+0x16>
 801873c:	290a      	cmp	r1, #10
 801873e:	d103      	bne.n	8018748 <__sfputc_r+0x1e>
 8018740:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018744:	f000 b932 	b.w	80189ac <__swbuf_r>
 8018748:	6813      	ldr	r3, [r2, #0]
 801874a:	1c58      	adds	r0, r3, #1
 801874c:	6010      	str	r0, [r2, #0]
 801874e:	7019      	strb	r1, [r3, #0]
 8018750:	4608      	mov	r0, r1
 8018752:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018756:	4770      	bx	lr

08018758 <__sfputs_r>:
 8018758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801875a:	4606      	mov	r6, r0
 801875c:	460f      	mov	r7, r1
 801875e:	4614      	mov	r4, r2
 8018760:	18d5      	adds	r5, r2, r3
 8018762:	42ac      	cmp	r4, r5
 8018764:	d101      	bne.n	801876a <__sfputs_r+0x12>
 8018766:	2000      	movs	r0, #0
 8018768:	e007      	b.n	801877a <__sfputs_r+0x22>
 801876a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801876e:	463a      	mov	r2, r7
 8018770:	4630      	mov	r0, r6
 8018772:	f7ff ffda 	bl	801872a <__sfputc_r>
 8018776:	1c43      	adds	r3, r0, #1
 8018778:	d1f3      	bne.n	8018762 <__sfputs_r+0xa>
 801877a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801877c <_vfiprintf_r>:
 801877c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018780:	460d      	mov	r5, r1
 8018782:	b09d      	sub	sp, #116	@ 0x74
 8018784:	4614      	mov	r4, r2
 8018786:	4698      	mov	r8, r3
 8018788:	4606      	mov	r6, r0
 801878a:	b118      	cbz	r0, 8018794 <_vfiprintf_r+0x18>
 801878c:	6a03      	ldr	r3, [r0, #32]
 801878e:	b90b      	cbnz	r3, 8018794 <_vfiprintf_r+0x18>
 8018790:	f7fd fce6 	bl	8016160 <__sinit>
 8018794:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8018796:	07d9      	lsls	r1, r3, #31
 8018798:	d405      	bmi.n	80187a6 <_vfiprintf_r+0x2a>
 801879a:	89ab      	ldrh	r3, [r5, #12]
 801879c:	059a      	lsls	r2, r3, #22
 801879e:	d402      	bmi.n	80187a6 <_vfiprintf_r+0x2a>
 80187a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80187a2:	f7fd fe12 	bl	80163ca <__retarget_lock_acquire_recursive>
 80187a6:	89ab      	ldrh	r3, [r5, #12]
 80187a8:	071b      	lsls	r3, r3, #28
 80187aa:	d501      	bpl.n	80187b0 <_vfiprintf_r+0x34>
 80187ac:	692b      	ldr	r3, [r5, #16]
 80187ae:	b99b      	cbnz	r3, 80187d8 <_vfiprintf_r+0x5c>
 80187b0:	4629      	mov	r1, r5
 80187b2:	4630      	mov	r0, r6
 80187b4:	f000 f938 	bl	8018a28 <__swsetup_r>
 80187b8:	b170      	cbz	r0, 80187d8 <_vfiprintf_r+0x5c>
 80187ba:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80187bc:	07dc      	lsls	r4, r3, #31
 80187be:	d504      	bpl.n	80187ca <_vfiprintf_r+0x4e>
 80187c0:	f04f 30ff 	mov.w	r0, #4294967295
 80187c4:	b01d      	add	sp, #116	@ 0x74
 80187c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80187ca:	89ab      	ldrh	r3, [r5, #12]
 80187cc:	0598      	lsls	r0, r3, #22
 80187ce:	d4f7      	bmi.n	80187c0 <_vfiprintf_r+0x44>
 80187d0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80187d2:	f7fd fdfb 	bl	80163cc <__retarget_lock_release_recursive>
 80187d6:	e7f3      	b.n	80187c0 <_vfiprintf_r+0x44>
 80187d8:	2300      	movs	r3, #0
 80187da:	9309      	str	r3, [sp, #36]	@ 0x24
 80187dc:	2320      	movs	r3, #32
 80187de:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80187e2:	f8cd 800c 	str.w	r8, [sp, #12]
 80187e6:	2330      	movs	r3, #48	@ 0x30
 80187e8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8018998 <_vfiprintf_r+0x21c>
 80187ec:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80187f0:	f04f 0901 	mov.w	r9, #1
 80187f4:	4623      	mov	r3, r4
 80187f6:	469a      	mov	sl, r3
 80187f8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80187fc:	b10a      	cbz	r2, 8018802 <_vfiprintf_r+0x86>
 80187fe:	2a25      	cmp	r2, #37	@ 0x25
 8018800:	d1f9      	bne.n	80187f6 <_vfiprintf_r+0x7a>
 8018802:	ebba 0b04 	subs.w	fp, sl, r4
 8018806:	d00b      	beq.n	8018820 <_vfiprintf_r+0xa4>
 8018808:	465b      	mov	r3, fp
 801880a:	4622      	mov	r2, r4
 801880c:	4629      	mov	r1, r5
 801880e:	4630      	mov	r0, r6
 8018810:	f7ff ffa2 	bl	8018758 <__sfputs_r>
 8018814:	3001      	adds	r0, #1
 8018816:	f000 80a7 	beq.w	8018968 <_vfiprintf_r+0x1ec>
 801881a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801881c:	445a      	add	r2, fp
 801881e:	9209      	str	r2, [sp, #36]	@ 0x24
 8018820:	f89a 3000 	ldrb.w	r3, [sl]
 8018824:	2b00      	cmp	r3, #0
 8018826:	f000 809f 	beq.w	8018968 <_vfiprintf_r+0x1ec>
 801882a:	2300      	movs	r3, #0
 801882c:	f04f 32ff 	mov.w	r2, #4294967295
 8018830:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018834:	f10a 0a01 	add.w	sl, sl, #1
 8018838:	9304      	str	r3, [sp, #16]
 801883a:	9307      	str	r3, [sp, #28]
 801883c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8018840:	931a      	str	r3, [sp, #104]	@ 0x68
 8018842:	4654      	mov	r4, sl
 8018844:	2205      	movs	r2, #5
 8018846:	f814 1b01 	ldrb.w	r1, [r4], #1
 801884a:	4853      	ldr	r0, [pc, #332]	@ (8018998 <_vfiprintf_r+0x21c>)
 801884c:	f7e7 fd70 	bl	8000330 <memchr>
 8018850:	9a04      	ldr	r2, [sp, #16]
 8018852:	b9d8      	cbnz	r0, 801888c <_vfiprintf_r+0x110>
 8018854:	06d1      	lsls	r1, r2, #27
 8018856:	bf44      	itt	mi
 8018858:	2320      	movmi	r3, #32
 801885a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801885e:	0713      	lsls	r3, r2, #28
 8018860:	bf44      	itt	mi
 8018862:	232b      	movmi	r3, #43	@ 0x2b
 8018864:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8018868:	f89a 3000 	ldrb.w	r3, [sl]
 801886c:	2b2a      	cmp	r3, #42	@ 0x2a
 801886e:	d015      	beq.n	801889c <_vfiprintf_r+0x120>
 8018870:	9a07      	ldr	r2, [sp, #28]
 8018872:	4654      	mov	r4, sl
 8018874:	2000      	movs	r0, #0
 8018876:	f04f 0c0a 	mov.w	ip, #10
 801887a:	4621      	mov	r1, r4
 801887c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018880:	3b30      	subs	r3, #48	@ 0x30
 8018882:	2b09      	cmp	r3, #9
 8018884:	d94b      	bls.n	801891e <_vfiprintf_r+0x1a2>
 8018886:	b1b0      	cbz	r0, 80188b6 <_vfiprintf_r+0x13a>
 8018888:	9207      	str	r2, [sp, #28]
 801888a:	e014      	b.n	80188b6 <_vfiprintf_r+0x13a>
 801888c:	eba0 0308 	sub.w	r3, r0, r8
 8018890:	fa09 f303 	lsl.w	r3, r9, r3
 8018894:	4313      	orrs	r3, r2
 8018896:	9304      	str	r3, [sp, #16]
 8018898:	46a2      	mov	sl, r4
 801889a:	e7d2      	b.n	8018842 <_vfiprintf_r+0xc6>
 801889c:	9b03      	ldr	r3, [sp, #12]
 801889e:	1d19      	adds	r1, r3, #4
 80188a0:	681b      	ldr	r3, [r3, #0]
 80188a2:	9103      	str	r1, [sp, #12]
 80188a4:	2b00      	cmp	r3, #0
 80188a6:	bfbb      	ittet	lt
 80188a8:	425b      	neglt	r3, r3
 80188aa:	f042 0202 	orrlt.w	r2, r2, #2
 80188ae:	9307      	strge	r3, [sp, #28]
 80188b0:	9307      	strlt	r3, [sp, #28]
 80188b2:	bfb8      	it	lt
 80188b4:	9204      	strlt	r2, [sp, #16]
 80188b6:	7823      	ldrb	r3, [r4, #0]
 80188b8:	2b2e      	cmp	r3, #46	@ 0x2e
 80188ba:	d10a      	bne.n	80188d2 <_vfiprintf_r+0x156>
 80188bc:	7863      	ldrb	r3, [r4, #1]
 80188be:	2b2a      	cmp	r3, #42	@ 0x2a
 80188c0:	d132      	bne.n	8018928 <_vfiprintf_r+0x1ac>
 80188c2:	9b03      	ldr	r3, [sp, #12]
 80188c4:	1d1a      	adds	r2, r3, #4
 80188c6:	681b      	ldr	r3, [r3, #0]
 80188c8:	9203      	str	r2, [sp, #12]
 80188ca:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80188ce:	3402      	adds	r4, #2
 80188d0:	9305      	str	r3, [sp, #20]
 80188d2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80189a8 <_vfiprintf_r+0x22c>
 80188d6:	7821      	ldrb	r1, [r4, #0]
 80188d8:	2203      	movs	r2, #3
 80188da:	4650      	mov	r0, sl
 80188dc:	f7e7 fd28 	bl	8000330 <memchr>
 80188e0:	b138      	cbz	r0, 80188f2 <_vfiprintf_r+0x176>
 80188e2:	9b04      	ldr	r3, [sp, #16]
 80188e4:	eba0 000a 	sub.w	r0, r0, sl
 80188e8:	2240      	movs	r2, #64	@ 0x40
 80188ea:	4082      	lsls	r2, r0
 80188ec:	4313      	orrs	r3, r2
 80188ee:	3401      	adds	r4, #1
 80188f0:	9304      	str	r3, [sp, #16]
 80188f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80188f6:	4829      	ldr	r0, [pc, #164]	@ (801899c <_vfiprintf_r+0x220>)
 80188f8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80188fc:	2206      	movs	r2, #6
 80188fe:	f7e7 fd17 	bl	8000330 <memchr>
 8018902:	2800      	cmp	r0, #0
 8018904:	d03f      	beq.n	8018986 <_vfiprintf_r+0x20a>
 8018906:	4b26      	ldr	r3, [pc, #152]	@ (80189a0 <_vfiprintf_r+0x224>)
 8018908:	bb1b      	cbnz	r3, 8018952 <_vfiprintf_r+0x1d6>
 801890a:	9b03      	ldr	r3, [sp, #12]
 801890c:	3307      	adds	r3, #7
 801890e:	f023 0307 	bic.w	r3, r3, #7
 8018912:	3308      	adds	r3, #8
 8018914:	9303      	str	r3, [sp, #12]
 8018916:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018918:	443b      	add	r3, r7
 801891a:	9309      	str	r3, [sp, #36]	@ 0x24
 801891c:	e76a      	b.n	80187f4 <_vfiprintf_r+0x78>
 801891e:	fb0c 3202 	mla	r2, ip, r2, r3
 8018922:	460c      	mov	r4, r1
 8018924:	2001      	movs	r0, #1
 8018926:	e7a8      	b.n	801887a <_vfiprintf_r+0xfe>
 8018928:	2300      	movs	r3, #0
 801892a:	3401      	adds	r4, #1
 801892c:	9305      	str	r3, [sp, #20]
 801892e:	4619      	mov	r1, r3
 8018930:	f04f 0c0a 	mov.w	ip, #10
 8018934:	4620      	mov	r0, r4
 8018936:	f810 2b01 	ldrb.w	r2, [r0], #1
 801893a:	3a30      	subs	r2, #48	@ 0x30
 801893c:	2a09      	cmp	r2, #9
 801893e:	d903      	bls.n	8018948 <_vfiprintf_r+0x1cc>
 8018940:	2b00      	cmp	r3, #0
 8018942:	d0c6      	beq.n	80188d2 <_vfiprintf_r+0x156>
 8018944:	9105      	str	r1, [sp, #20]
 8018946:	e7c4      	b.n	80188d2 <_vfiprintf_r+0x156>
 8018948:	fb0c 2101 	mla	r1, ip, r1, r2
 801894c:	4604      	mov	r4, r0
 801894e:	2301      	movs	r3, #1
 8018950:	e7f0      	b.n	8018934 <_vfiprintf_r+0x1b8>
 8018952:	ab03      	add	r3, sp, #12
 8018954:	9300      	str	r3, [sp, #0]
 8018956:	462a      	mov	r2, r5
 8018958:	4b12      	ldr	r3, [pc, #72]	@ (80189a4 <_vfiprintf_r+0x228>)
 801895a:	a904      	add	r1, sp, #16
 801895c:	4630      	mov	r0, r6
 801895e:	f7fc ffcb 	bl	80158f8 <_printf_float>
 8018962:	4607      	mov	r7, r0
 8018964:	1c78      	adds	r0, r7, #1
 8018966:	d1d6      	bne.n	8018916 <_vfiprintf_r+0x19a>
 8018968:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801896a:	07d9      	lsls	r1, r3, #31
 801896c:	d405      	bmi.n	801897a <_vfiprintf_r+0x1fe>
 801896e:	89ab      	ldrh	r3, [r5, #12]
 8018970:	059a      	lsls	r2, r3, #22
 8018972:	d402      	bmi.n	801897a <_vfiprintf_r+0x1fe>
 8018974:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8018976:	f7fd fd29 	bl	80163cc <__retarget_lock_release_recursive>
 801897a:	89ab      	ldrh	r3, [r5, #12]
 801897c:	065b      	lsls	r3, r3, #25
 801897e:	f53f af1f 	bmi.w	80187c0 <_vfiprintf_r+0x44>
 8018982:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8018984:	e71e      	b.n	80187c4 <_vfiprintf_r+0x48>
 8018986:	ab03      	add	r3, sp, #12
 8018988:	9300      	str	r3, [sp, #0]
 801898a:	462a      	mov	r2, r5
 801898c:	4b05      	ldr	r3, [pc, #20]	@ (80189a4 <_vfiprintf_r+0x228>)
 801898e:	a904      	add	r1, sp, #16
 8018990:	4630      	mov	r0, r6
 8018992:	f7fd fa39 	bl	8015e08 <_printf_i>
 8018996:	e7e4      	b.n	8018962 <_vfiprintf_r+0x1e6>
 8018998:	0801a190 	.word	0x0801a190
 801899c:	0801a19a 	.word	0x0801a19a
 80189a0:	080158f9 	.word	0x080158f9
 80189a4:	08018759 	.word	0x08018759
 80189a8:	0801a196 	.word	0x0801a196

080189ac <__swbuf_r>:
 80189ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80189ae:	460e      	mov	r6, r1
 80189b0:	4614      	mov	r4, r2
 80189b2:	4605      	mov	r5, r0
 80189b4:	b118      	cbz	r0, 80189be <__swbuf_r+0x12>
 80189b6:	6a03      	ldr	r3, [r0, #32]
 80189b8:	b90b      	cbnz	r3, 80189be <__swbuf_r+0x12>
 80189ba:	f7fd fbd1 	bl	8016160 <__sinit>
 80189be:	69a3      	ldr	r3, [r4, #24]
 80189c0:	60a3      	str	r3, [r4, #8]
 80189c2:	89a3      	ldrh	r3, [r4, #12]
 80189c4:	071a      	lsls	r2, r3, #28
 80189c6:	d501      	bpl.n	80189cc <__swbuf_r+0x20>
 80189c8:	6923      	ldr	r3, [r4, #16]
 80189ca:	b943      	cbnz	r3, 80189de <__swbuf_r+0x32>
 80189cc:	4621      	mov	r1, r4
 80189ce:	4628      	mov	r0, r5
 80189d0:	f000 f82a 	bl	8018a28 <__swsetup_r>
 80189d4:	b118      	cbz	r0, 80189de <__swbuf_r+0x32>
 80189d6:	f04f 37ff 	mov.w	r7, #4294967295
 80189da:	4638      	mov	r0, r7
 80189dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80189de:	6823      	ldr	r3, [r4, #0]
 80189e0:	6922      	ldr	r2, [r4, #16]
 80189e2:	1a98      	subs	r0, r3, r2
 80189e4:	6963      	ldr	r3, [r4, #20]
 80189e6:	b2f6      	uxtb	r6, r6
 80189e8:	4283      	cmp	r3, r0
 80189ea:	4637      	mov	r7, r6
 80189ec:	dc05      	bgt.n	80189fa <__swbuf_r+0x4e>
 80189ee:	4621      	mov	r1, r4
 80189f0:	4628      	mov	r0, r5
 80189f2:	f7ff fdc7 	bl	8018584 <_fflush_r>
 80189f6:	2800      	cmp	r0, #0
 80189f8:	d1ed      	bne.n	80189d6 <__swbuf_r+0x2a>
 80189fa:	68a3      	ldr	r3, [r4, #8]
 80189fc:	3b01      	subs	r3, #1
 80189fe:	60a3      	str	r3, [r4, #8]
 8018a00:	6823      	ldr	r3, [r4, #0]
 8018a02:	1c5a      	adds	r2, r3, #1
 8018a04:	6022      	str	r2, [r4, #0]
 8018a06:	701e      	strb	r6, [r3, #0]
 8018a08:	6962      	ldr	r2, [r4, #20]
 8018a0a:	1c43      	adds	r3, r0, #1
 8018a0c:	429a      	cmp	r2, r3
 8018a0e:	d004      	beq.n	8018a1a <__swbuf_r+0x6e>
 8018a10:	89a3      	ldrh	r3, [r4, #12]
 8018a12:	07db      	lsls	r3, r3, #31
 8018a14:	d5e1      	bpl.n	80189da <__swbuf_r+0x2e>
 8018a16:	2e0a      	cmp	r6, #10
 8018a18:	d1df      	bne.n	80189da <__swbuf_r+0x2e>
 8018a1a:	4621      	mov	r1, r4
 8018a1c:	4628      	mov	r0, r5
 8018a1e:	f7ff fdb1 	bl	8018584 <_fflush_r>
 8018a22:	2800      	cmp	r0, #0
 8018a24:	d0d9      	beq.n	80189da <__swbuf_r+0x2e>
 8018a26:	e7d6      	b.n	80189d6 <__swbuf_r+0x2a>

08018a28 <__swsetup_r>:
 8018a28:	b538      	push	{r3, r4, r5, lr}
 8018a2a:	4b29      	ldr	r3, [pc, #164]	@ (8018ad0 <__swsetup_r+0xa8>)
 8018a2c:	4605      	mov	r5, r0
 8018a2e:	6818      	ldr	r0, [r3, #0]
 8018a30:	460c      	mov	r4, r1
 8018a32:	b118      	cbz	r0, 8018a3c <__swsetup_r+0x14>
 8018a34:	6a03      	ldr	r3, [r0, #32]
 8018a36:	b90b      	cbnz	r3, 8018a3c <__swsetup_r+0x14>
 8018a38:	f7fd fb92 	bl	8016160 <__sinit>
 8018a3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018a40:	0719      	lsls	r1, r3, #28
 8018a42:	d422      	bmi.n	8018a8a <__swsetup_r+0x62>
 8018a44:	06da      	lsls	r2, r3, #27
 8018a46:	d407      	bmi.n	8018a58 <__swsetup_r+0x30>
 8018a48:	2209      	movs	r2, #9
 8018a4a:	602a      	str	r2, [r5, #0]
 8018a4c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8018a50:	81a3      	strh	r3, [r4, #12]
 8018a52:	f04f 30ff 	mov.w	r0, #4294967295
 8018a56:	e033      	b.n	8018ac0 <__swsetup_r+0x98>
 8018a58:	0758      	lsls	r0, r3, #29
 8018a5a:	d512      	bpl.n	8018a82 <__swsetup_r+0x5a>
 8018a5c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8018a5e:	b141      	cbz	r1, 8018a72 <__swsetup_r+0x4a>
 8018a60:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8018a64:	4299      	cmp	r1, r3
 8018a66:	d002      	beq.n	8018a6e <__swsetup_r+0x46>
 8018a68:	4628      	mov	r0, r5
 8018a6a:	f7fe faa7 	bl	8016fbc <_free_r>
 8018a6e:	2300      	movs	r3, #0
 8018a70:	6363      	str	r3, [r4, #52]	@ 0x34
 8018a72:	89a3      	ldrh	r3, [r4, #12]
 8018a74:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8018a78:	81a3      	strh	r3, [r4, #12]
 8018a7a:	2300      	movs	r3, #0
 8018a7c:	6063      	str	r3, [r4, #4]
 8018a7e:	6923      	ldr	r3, [r4, #16]
 8018a80:	6023      	str	r3, [r4, #0]
 8018a82:	89a3      	ldrh	r3, [r4, #12]
 8018a84:	f043 0308 	orr.w	r3, r3, #8
 8018a88:	81a3      	strh	r3, [r4, #12]
 8018a8a:	6923      	ldr	r3, [r4, #16]
 8018a8c:	b94b      	cbnz	r3, 8018aa2 <__swsetup_r+0x7a>
 8018a8e:	89a3      	ldrh	r3, [r4, #12]
 8018a90:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8018a94:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8018a98:	d003      	beq.n	8018aa2 <__swsetup_r+0x7a>
 8018a9a:	4621      	mov	r1, r4
 8018a9c:	4628      	mov	r0, r5
 8018a9e:	f000 f883 	bl	8018ba8 <__smakebuf_r>
 8018aa2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018aa6:	f013 0201 	ands.w	r2, r3, #1
 8018aaa:	d00a      	beq.n	8018ac2 <__swsetup_r+0x9a>
 8018aac:	2200      	movs	r2, #0
 8018aae:	60a2      	str	r2, [r4, #8]
 8018ab0:	6962      	ldr	r2, [r4, #20]
 8018ab2:	4252      	negs	r2, r2
 8018ab4:	61a2      	str	r2, [r4, #24]
 8018ab6:	6922      	ldr	r2, [r4, #16]
 8018ab8:	b942      	cbnz	r2, 8018acc <__swsetup_r+0xa4>
 8018aba:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8018abe:	d1c5      	bne.n	8018a4c <__swsetup_r+0x24>
 8018ac0:	bd38      	pop	{r3, r4, r5, pc}
 8018ac2:	0799      	lsls	r1, r3, #30
 8018ac4:	bf58      	it	pl
 8018ac6:	6962      	ldrpl	r2, [r4, #20]
 8018ac8:	60a2      	str	r2, [r4, #8]
 8018aca:	e7f4      	b.n	8018ab6 <__swsetup_r+0x8e>
 8018acc:	2000      	movs	r0, #0
 8018ace:	e7f7      	b.n	8018ac0 <__swsetup_r+0x98>
 8018ad0:	2400027c 	.word	0x2400027c

08018ad4 <_raise_r>:
 8018ad4:	291f      	cmp	r1, #31
 8018ad6:	b538      	push	{r3, r4, r5, lr}
 8018ad8:	4605      	mov	r5, r0
 8018ada:	460c      	mov	r4, r1
 8018adc:	d904      	bls.n	8018ae8 <_raise_r+0x14>
 8018ade:	2316      	movs	r3, #22
 8018ae0:	6003      	str	r3, [r0, #0]
 8018ae2:	f04f 30ff 	mov.w	r0, #4294967295
 8018ae6:	bd38      	pop	{r3, r4, r5, pc}
 8018ae8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8018aea:	b112      	cbz	r2, 8018af2 <_raise_r+0x1e>
 8018aec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8018af0:	b94b      	cbnz	r3, 8018b06 <_raise_r+0x32>
 8018af2:	4628      	mov	r0, r5
 8018af4:	f000 f830 	bl	8018b58 <_getpid_r>
 8018af8:	4622      	mov	r2, r4
 8018afa:	4601      	mov	r1, r0
 8018afc:	4628      	mov	r0, r5
 8018afe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018b02:	f000 b817 	b.w	8018b34 <_kill_r>
 8018b06:	2b01      	cmp	r3, #1
 8018b08:	d00a      	beq.n	8018b20 <_raise_r+0x4c>
 8018b0a:	1c59      	adds	r1, r3, #1
 8018b0c:	d103      	bne.n	8018b16 <_raise_r+0x42>
 8018b0e:	2316      	movs	r3, #22
 8018b10:	6003      	str	r3, [r0, #0]
 8018b12:	2001      	movs	r0, #1
 8018b14:	e7e7      	b.n	8018ae6 <_raise_r+0x12>
 8018b16:	2100      	movs	r1, #0
 8018b18:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8018b1c:	4620      	mov	r0, r4
 8018b1e:	4798      	blx	r3
 8018b20:	2000      	movs	r0, #0
 8018b22:	e7e0      	b.n	8018ae6 <_raise_r+0x12>

08018b24 <raise>:
 8018b24:	4b02      	ldr	r3, [pc, #8]	@ (8018b30 <raise+0xc>)
 8018b26:	4601      	mov	r1, r0
 8018b28:	6818      	ldr	r0, [r3, #0]
 8018b2a:	f7ff bfd3 	b.w	8018ad4 <_raise_r>
 8018b2e:	bf00      	nop
 8018b30:	2400027c 	.word	0x2400027c

08018b34 <_kill_r>:
 8018b34:	b538      	push	{r3, r4, r5, lr}
 8018b36:	4d07      	ldr	r5, [pc, #28]	@ (8018b54 <_kill_r+0x20>)
 8018b38:	2300      	movs	r3, #0
 8018b3a:	4604      	mov	r4, r0
 8018b3c:	4608      	mov	r0, r1
 8018b3e:	4611      	mov	r1, r2
 8018b40:	602b      	str	r3, [r5, #0]
 8018b42:	f7e9 fc17 	bl	8002374 <_kill>
 8018b46:	1c43      	adds	r3, r0, #1
 8018b48:	d102      	bne.n	8018b50 <_kill_r+0x1c>
 8018b4a:	682b      	ldr	r3, [r5, #0]
 8018b4c:	b103      	cbz	r3, 8018b50 <_kill_r+0x1c>
 8018b4e:	6023      	str	r3, [r4, #0]
 8018b50:	bd38      	pop	{r3, r4, r5, pc}
 8018b52:	bf00      	nop
 8018b54:	24005c6c 	.word	0x24005c6c

08018b58 <_getpid_r>:
 8018b58:	f7e9 bc04 	b.w	8002364 <_getpid>

08018b5c <__swhatbuf_r>:
 8018b5c:	b570      	push	{r4, r5, r6, lr}
 8018b5e:	460c      	mov	r4, r1
 8018b60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018b64:	2900      	cmp	r1, #0
 8018b66:	b096      	sub	sp, #88	@ 0x58
 8018b68:	4615      	mov	r5, r2
 8018b6a:	461e      	mov	r6, r3
 8018b6c:	da0d      	bge.n	8018b8a <__swhatbuf_r+0x2e>
 8018b6e:	89a3      	ldrh	r3, [r4, #12]
 8018b70:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8018b74:	f04f 0100 	mov.w	r1, #0
 8018b78:	bf14      	ite	ne
 8018b7a:	2340      	movne	r3, #64	@ 0x40
 8018b7c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8018b80:	2000      	movs	r0, #0
 8018b82:	6031      	str	r1, [r6, #0]
 8018b84:	602b      	str	r3, [r5, #0]
 8018b86:	b016      	add	sp, #88	@ 0x58
 8018b88:	bd70      	pop	{r4, r5, r6, pc}
 8018b8a:	466a      	mov	r2, sp
 8018b8c:	f000 f848 	bl	8018c20 <_fstat_r>
 8018b90:	2800      	cmp	r0, #0
 8018b92:	dbec      	blt.n	8018b6e <__swhatbuf_r+0x12>
 8018b94:	9901      	ldr	r1, [sp, #4]
 8018b96:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8018b9a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8018b9e:	4259      	negs	r1, r3
 8018ba0:	4159      	adcs	r1, r3
 8018ba2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8018ba6:	e7eb      	b.n	8018b80 <__swhatbuf_r+0x24>

08018ba8 <__smakebuf_r>:
 8018ba8:	898b      	ldrh	r3, [r1, #12]
 8018baa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018bac:	079d      	lsls	r5, r3, #30
 8018bae:	4606      	mov	r6, r0
 8018bb0:	460c      	mov	r4, r1
 8018bb2:	d507      	bpl.n	8018bc4 <__smakebuf_r+0x1c>
 8018bb4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8018bb8:	6023      	str	r3, [r4, #0]
 8018bba:	6123      	str	r3, [r4, #16]
 8018bbc:	2301      	movs	r3, #1
 8018bbe:	6163      	str	r3, [r4, #20]
 8018bc0:	b003      	add	sp, #12
 8018bc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018bc4:	ab01      	add	r3, sp, #4
 8018bc6:	466a      	mov	r2, sp
 8018bc8:	f7ff ffc8 	bl	8018b5c <__swhatbuf_r>
 8018bcc:	9f00      	ldr	r7, [sp, #0]
 8018bce:	4605      	mov	r5, r0
 8018bd0:	4639      	mov	r1, r7
 8018bd2:	4630      	mov	r0, r6
 8018bd4:	f7fe fda0 	bl	8017718 <_malloc_r>
 8018bd8:	b948      	cbnz	r0, 8018bee <__smakebuf_r+0x46>
 8018bda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018bde:	059a      	lsls	r2, r3, #22
 8018be0:	d4ee      	bmi.n	8018bc0 <__smakebuf_r+0x18>
 8018be2:	f023 0303 	bic.w	r3, r3, #3
 8018be6:	f043 0302 	orr.w	r3, r3, #2
 8018bea:	81a3      	strh	r3, [r4, #12]
 8018bec:	e7e2      	b.n	8018bb4 <__smakebuf_r+0xc>
 8018bee:	89a3      	ldrh	r3, [r4, #12]
 8018bf0:	6020      	str	r0, [r4, #0]
 8018bf2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8018bf6:	81a3      	strh	r3, [r4, #12]
 8018bf8:	9b01      	ldr	r3, [sp, #4]
 8018bfa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8018bfe:	b15b      	cbz	r3, 8018c18 <__smakebuf_r+0x70>
 8018c00:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018c04:	4630      	mov	r0, r6
 8018c06:	f000 f81d 	bl	8018c44 <_isatty_r>
 8018c0a:	b128      	cbz	r0, 8018c18 <__smakebuf_r+0x70>
 8018c0c:	89a3      	ldrh	r3, [r4, #12]
 8018c0e:	f023 0303 	bic.w	r3, r3, #3
 8018c12:	f043 0301 	orr.w	r3, r3, #1
 8018c16:	81a3      	strh	r3, [r4, #12]
 8018c18:	89a3      	ldrh	r3, [r4, #12]
 8018c1a:	431d      	orrs	r5, r3
 8018c1c:	81a5      	strh	r5, [r4, #12]
 8018c1e:	e7cf      	b.n	8018bc0 <__smakebuf_r+0x18>

08018c20 <_fstat_r>:
 8018c20:	b538      	push	{r3, r4, r5, lr}
 8018c22:	4d07      	ldr	r5, [pc, #28]	@ (8018c40 <_fstat_r+0x20>)
 8018c24:	2300      	movs	r3, #0
 8018c26:	4604      	mov	r4, r0
 8018c28:	4608      	mov	r0, r1
 8018c2a:	4611      	mov	r1, r2
 8018c2c:	602b      	str	r3, [r5, #0]
 8018c2e:	f7e9 fc01 	bl	8002434 <_fstat>
 8018c32:	1c43      	adds	r3, r0, #1
 8018c34:	d102      	bne.n	8018c3c <_fstat_r+0x1c>
 8018c36:	682b      	ldr	r3, [r5, #0]
 8018c38:	b103      	cbz	r3, 8018c3c <_fstat_r+0x1c>
 8018c3a:	6023      	str	r3, [r4, #0]
 8018c3c:	bd38      	pop	{r3, r4, r5, pc}
 8018c3e:	bf00      	nop
 8018c40:	24005c6c 	.word	0x24005c6c

08018c44 <_isatty_r>:
 8018c44:	b538      	push	{r3, r4, r5, lr}
 8018c46:	4d06      	ldr	r5, [pc, #24]	@ (8018c60 <_isatty_r+0x1c>)
 8018c48:	2300      	movs	r3, #0
 8018c4a:	4604      	mov	r4, r0
 8018c4c:	4608      	mov	r0, r1
 8018c4e:	602b      	str	r3, [r5, #0]
 8018c50:	f7e9 fc00 	bl	8002454 <_isatty>
 8018c54:	1c43      	adds	r3, r0, #1
 8018c56:	d102      	bne.n	8018c5e <_isatty_r+0x1a>
 8018c58:	682b      	ldr	r3, [r5, #0]
 8018c5a:	b103      	cbz	r3, 8018c5e <_isatty_r+0x1a>
 8018c5c:	6023      	str	r3, [r4, #0]
 8018c5e:	bd38      	pop	{r3, r4, r5, pc}
 8018c60:	24005c6c 	.word	0x24005c6c
 8018c64:	00000000 	.word	0x00000000

08018c68 <sin>:
 8018c68:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8018c6a:	eeb0 7b40 	vmov.f64	d7, d0
 8018c6e:	ee17 3a90 	vmov	r3, s15
 8018c72:	4a21      	ldr	r2, [pc, #132]	@ (8018cf8 <sin+0x90>)
 8018c74:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8018c78:	4293      	cmp	r3, r2
 8018c7a:	d807      	bhi.n	8018c8c <sin+0x24>
 8018c7c:	ed9f 1b1c 	vldr	d1, [pc, #112]	@ 8018cf0 <sin+0x88>
 8018c80:	2000      	movs	r0, #0
 8018c82:	b005      	add	sp, #20
 8018c84:	f85d eb04 	ldr.w	lr, [sp], #4
 8018c88:	f000 b986 	b.w	8018f98 <__kernel_sin>
 8018c8c:	4a1b      	ldr	r2, [pc, #108]	@ (8018cfc <sin+0x94>)
 8018c8e:	4293      	cmp	r3, r2
 8018c90:	d904      	bls.n	8018c9c <sin+0x34>
 8018c92:	ee30 0b40 	vsub.f64	d0, d0, d0
 8018c96:	b005      	add	sp, #20
 8018c98:	f85d fb04 	ldr.w	pc, [sp], #4
 8018c9c:	4668      	mov	r0, sp
 8018c9e:	f000 f9d3 	bl	8019048 <__ieee754_rem_pio2>
 8018ca2:	f000 0003 	and.w	r0, r0, #3
 8018ca6:	2801      	cmp	r0, #1
 8018ca8:	d00a      	beq.n	8018cc0 <sin+0x58>
 8018caa:	2802      	cmp	r0, #2
 8018cac:	d00f      	beq.n	8018cce <sin+0x66>
 8018cae:	b9c0      	cbnz	r0, 8018ce2 <sin+0x7a>
 8018cb0:	ed9d 1b02 	vldr	d1, [sp, #8]
 8018cb4:	ed9d 0b00 	vldr	d0, [sp]
 8018cb8:	2001      	movs	r0, #1
 8018cba:	f000 f96d 	bl	8018f98 <__kernel_sin>
 8018cbe:	e7ea      	b.n	8018c96 <sin+0x2e>
 8018cc0:	ed9d 1b02 	vldr	d1, [sp, #8]
 8018cc4:	ed9d 0b00 	vldr	d0, [sp]
 8018cc8:	f000 f8fe 	bl	8018ec8 <__kernel_cos>
 8018ccc:	e7e3      	b.n	8018c96 <sin+0x2e>
 8018cce:	ed9d 1b02 	vldr	d1, [sp, #8]
 8018cd2:	ed9d 0b00 	vldr	d0, [sp]
 8018cd6:	2001      	movs	r0, #1
 8018cd8:	f000 f95e 	bl	8018f98 <__kernel_sin>
 8018cdc:	eeb1 0b40 	vneg.f64	d0, d0
 8018ce0:	e7d9      	b.n	8018c96 <sin+0x2e>
 8018ce2:	ed9d 1b02 	vldr	d1, [sp, #8]
 8018ce6:	ed9d 0b00 	vldr	d0, [sp]
 8018cea:	f000 f8ed 	bl	8018ec8 <__kernel_cos>
 8018cee:	e7f5      	b.n	8018cdc <sin+0x74>
	...
 8018cf8:	3fe921fb 	.word	0x3fe921fb
 8018cfc:	7fefffff 	.word	0x7fefffff

08018d00 <sinf_poly>:
 8018d00:	07cb      	lsls	r3, r1, #31
 8018d02:	d412      	bmi.n	8018d2a <sinf_poly+0x2a>
 8018d04:	ee21 5b00 	vmul.f64	d5, d1, d0
 8018d08:	ed90 6b1a 	vldr	d6, [r0, #104]	@ 0x68
 8018d0c:	ed90 7b18 	vldr	d7, [r0, #96]	@ 0x60
 8018d10:	eea6 7b01 	vfma.f64	d7, d6, d1
 8018d14:	ed90 6b16 	vldr	d6, [r0, #88]	@ 0x58
 8018d18:	ee21 1b05 	vmul.f64	d1, d1, d5
 8018d1c:	eea6 0b05 	vfma.f64	d0, d6, d5
 8018d20:	eea7 0b01 	vfma.f64	d0, d7, d1
 8018d24:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8018d28:	4770      	bx	lr
 8018d2a:	ed90 6b14 	vldr	d6, [r0, #80]	@ 0x50
 8018d2e:	ee21 5b01 	vmul.f64	d5, d1, d1
 8018d32:	ed90 7b12 	vldr	d7, [r0, #72]	@ 0x48
 8018d36:	ed90 0b0c 	vldr	d0, [r0, #48]	@ 0x30
 8018d3a:	eea1 7b06 	vfma.f64	d7, d1, d6
 8018d3e:	ed90 6b0e 	vldr	d6, [r0, #56]	@ 0x38
 8018d42:	eea1 0b06 	vfma.f64	d0, d1, d6
 8018d46:	ed90 6b10 	vldr	d6, [r0, #64]	@ 0x40
 8018d4a:	ee21 1b05 	vmul.f64	d1, d1, d5
 8018d4e:	eea5 0b06 	vfma.f64	d0, d5, d6
 8018d52:	e7e5      	b.n	8018d20 <sinf_poly+0x20>
 8018d54:	0000      	movs	r0, r0
	...

08018d58 <sinf>:
 8018d58:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8018d5a:	ee10 4a10 	vmov	r4, s0
 8018d5e:	f3c4 530a 	ubfx	r3, r4, #20, #11
 8018d62:	f5b3 7f7d 	cmp.w	r3, #1012	@ 0x3f4
 8018d66:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 8018d6a:	eef0 7a40 	vmov.f32	s15, s0
 8018d6e:	ea4f 5214 	mov.w	r2, r4, lsr #20
 8018d72:	d218      	bcs.n	8018da6 <sinf+0x4e>
 8018d74:	ee26 1b06 	vmul.f64	d1, d6, d6
 8018d78:	f5b3 7f66 	cmp.w	r3, #920	@ 0x398
 8018d7c:	d20a      	bcs.n	8018d94 <sinf+0x3c>
 8018d7e:	f412 6fff 	tst.w	r2, #2040	@ 0x7f8
 8018d82:	d103      	bne.n	8018d8c <sinf+0x34>
 8018d84:	eeb7 1bc1 	vcvt.f32.f64	s2, d1
 8018d88:	ed8d 1a01 	vstr	s2, [sp, #4]
 8018d8c:	eeb0 0a67 	vmov.f32	s0, s15
 8018d90:	b003      	add	sp, #12
 8018d92:	bd30      	pop	{r4, r5, pc}
 8018d94:	483a      	ldr	r0, [pc, #232]	@ (8018e80 <sinf+0x128>)
 8018d96:	eeb0 0b46 	vmov.f64	d0, d6
 8018d9a:	2100      	movs	r1, #0
 8018d9c:	b003      	add	sp, #12
 8018d9e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8018da2:	f7ff bfad 	b.w	8018d00 <sinf_poly>
 8018da6:	f240 422e 	movw	r2, #1070	@ 0x42e
 8018daa:	4293      	cmp	r3, r2
 8018dac:	d824      	bhi.n	8018df8 <sinf+0xa0>
 8018dae:	4b34      	ldr	r3, [pc, #208]	@ (8018e80 <sinf+0x128>)
 8018db0:	ed93 7b08 	vldr	d7, [r3, #32]
 8018db4:	ee26 7b07 	vmul.f64	d7, d6, d7
 8018db8:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8018dbc:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 8018dc0:	ee17 1a90 	vmov	r1, s15
 8018dc4:	f501 0100 	add.w	r1, r1, #8388608	@ 0x800000
 8018dc8:	1609      	asrs	r1, r1, #24
 8018dca:	ee07 1a90 	vmov	s15, r1
 8018dce:	f001 0203 	and.w	r2, r1, #3
 8018dd2:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8018dd6:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8018dda:	ed92 0b00 	vldr	d0, [r2]
 8018dde:	ed93 7b0a 	vldr	d7, [r3, #40]	@ 0x28
 8018de2:	f011 0f02 	tst.w	r1, #2
 8018de6:	eea5 6b47 	vfms.f64	d6, d5, d7
 8018dea:	bf08      	it	eq
 8018dec:	4618      	moveq	r0, r3
 8018dee:	ee26 1b06 	vmul.f64	d1, d6, d6
 8018df2:	ee20 0b06 	vmul.f64	d0, d0, d6
 8018df6:	e7d1      	b.n	8018d9c <sinf+0x44>
 8018df8:	f5b3 6fff 	cmp.w	r3, #2040	@ 0x7f8
 8018dfc:	d237      	bcs.n	8018e6e <sinf+0x116>
 8018dfe:	4921      	ldr	r1, [pc, #132]	@ (8018e84 <sinf+0x12c>)
 8018e00:	f3c4 6083 	ubfx	r0, r4, #26, #4
 8018e04:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 8018e08:	f3c4 0316 	ubfx	r3, r4, #0, #23
 8018e0c:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 8018e10:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8018e14:	6a10      	ldr	r0, [r2, #32]
 8018e16:	6912      	ldr	r2, [r2, #16]
 8018e18:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8018e1c:	40ab      	lsls	r3, r5
 8018e1e:	fba0 5003 	umull	r5, r0, r0, r3
 8018e22:	4359      	muls	r1, r3
 8018e24:	fbe3 0102 	umlal	r0, r1, r3, r2
 8018e28:	f101 5300 	add.w	r3, r1, #536870912	@ 0x20000000
 8018e2c:	0f9d      	lsrs	r5, r3, #30
 8018e2e:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8018e32:	1ac9      	subs	r1, r1, r3
 8018e34:	f7e7 fc62 	bl	80006fc <__aeabi_l2d>
 8018e38:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 8018e3c:	4b10      	ldr	r3, [pc, #64]	@ (8018e80 <sinf+0x128>)
 8018e3e:	f004 0203 	and.w	r2, r4, #3
 8018e42:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8018e46:	ed9f 6b0c 	vldr	d6, [pc, #48]	@ 8018e78 <sinf+0x120>
 8018e4a:	ed92 0b00 	vldr	d0, [r2]
 8018e4e:	ec41 0b17 	vmov	d7, r0, r1
 8018e52:	f014 0f02 	tst.w	r4, #2
 8018e56:	ee27 7b06 	vmul.f64	d7, d7, d6
 8018e5a:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 8018e5e:	4629      	mov	r1, r5
 8018e60:	bf08      	it	eq
 8018e62:	4618      	moveq	r0, r3
 8018e64:	ee27 1b07 	vmul.f64	d1, d7, d7
 8018e68:	ee20 0b07 	vmul.f64	d0, d0, d7
 8018e6c:	e796      	b.n	8018d9c <sinf+0x44>
 8018e6e:	b003      	add	sp, #12
 8018e70:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8018e74:	f000 b816 	b.w	8018ea4 <__math_invalidf>
 8018e78:	54442d18 	.word	0x54442d18
 8018e7c:	3c1921fb 	.word	0x3c1921fb
 8018e80:	0801a240 	.word	0x0801a240
 8018e84:	0801a1e0 	.word	0x0801a1e0

08018e88 <with_errnof>:
 8018e88:	b510      	push	{r4, lr}
 8018e8a:	ed2d 8b02 	vpush	{d8}
 8018e8e:	eeb0 8a40 	vmov.f32	s16, s0
 8018e92:	4604      	mov	r4, r0
 8018e94:	f7fd fa6e 	bl	8016374 <__errno>
 8018e98:	eeb0 0a48 	vmov.f32	s0, s16
 8018e9c:	ecbd 8b02 	vpop	{d8}
 8018ea0:	6004      	str	r4, [r0, #0]
 8018ea2:	bd10      	pop	{r4, pc}

08018ea4 <__math_invalidf>:
 8018ea4:	eef0 7a40 	vmov.f32	s15, s0
 8018ea8:	ee30 7a40 	vsub.f32	s14, s0, s0
 8018eac:	eef4 7a67 	vcmp.f32	s15, s15
 8018eb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018eb4:	ee87 0a07 	vdiv.f32	s0, s14, s14
 8018eb8:	d602      	bvs.n	8018ec0 <__math_invalidf+0x1c>
 8018eba:	2021      	movs	r0, #33	@ 0x21
 8018ebc:	f7ff bfe4 	b.w	8018e88 <with_errnof>
 8018ec0:	4770      	bx	lr
 8018ec2:	0000      	movs	r0, r0
 8018ec4:	0000      	movs	r0, r0
	...

08018ec8 <__kernel_cos>:
 8018ec8:	eeb0 5b40 	vmov.f64	d5, d0
 8018ecc:	ee15 1a90 	vmov	r1, s11
 8018ed0:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 8018ed4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8018ed8:	f1b1 5f79 	cmp.w	r1, #1044381696	@ 0x3e400000
 8018edc:	d204      	bcs.n	8018ee8 <__kernel_cos+0x20>
 8018ede:	eefd 7bc5 	vcvt.s32.f64	s15, d5
 8018ee2:	ee17 3a90 	vmov	r3, s15
 8018ee6:	b343      	cbz	r3, 8018f3a <__kernel_cos+0x72>
 8018ee8:	ee25 6b05 	vmul.f64	d6, d5, d5
 8018eec:	ee21 1b45 	vnmul.f64	d1, d1, d5
 8018ef0:	ed9f 7b1b 	vldr	d7, [pc, #108]	@ 8018f60 <__kernel_cos+0x98>
 8018ef4:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 8018f68 <__kernel_cos+0xa0>
 8018ef8:	eea6 4b07 	vfma.f64	d4, d6, d7
 8018efc:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 8018f70 <__kernel_cos+0xa8>
 8018f00:	eea4 7b06 	vfma.f64	d7, d4, d6
 8018f04:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 8018f78 <__kernel_cos+0xb0>
 8018f08:	eea7 4b06 	vfma.f64	d4, d7, d6
 8018f0c:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 8018f80 <__kernel_cos+0xb8>
 8018f10:	4b1f      	ldr	r3, [pc, #124]	@ (8018f90 <__kernel_cos+0xc8>)
 8018f12:	eea4 7b06 	vfma.f64	d7, d4, d6
 8018f16:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 8018f88 <__kernel_cos+0xc0>
 8018f1a:	4299      	cmp	r1, r3
 8018f1c:	eea7 4b06 	vfma.f64	d4, d7, d6
 8018f20:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 8018f24:	ee24 4b06 	vmul.f64	d4, d4, d6
 8018f28:	ee26 7b07 	vmul.f64	d7, d6, d7
 8018f2c:	eea6 1b04 	vfma.f64	d1, d6, d4
 8018f30:	d804      	bhi.n	8018f3c <__kernel_cos+0x74>
 8018f32:	ee37 7b41 	vsub.f64	d7, d7, d1
 8018f36:	ee30 0b47 	vsub.f64	d0, d0, d7
 8018f3a:	4770      	bx	lr
 8018f3c:	4b15      	ldr	r3, [pc, #84]	@ (8018f94 <__kernel_cos+0xcc>)
 8018f3e:	4299      	cmp	r1, r3
 8018f40:	d809      	bhi.n	8018f56 <__kernel_cos+0x8e>
 8018f42:	2200      	movs	r2, #0
 8018f44:	f5a1 1300 	sub.w	r3, r1, #2097152	@ 0x200000
 8018f48:	ec43 2b16 	vmov	d6, r2, r3
 8018f4c:	ee30 0b46 	vsub.f64	d0, d0, d6
 8018f50:	ee37 7b46 	vsub.f64	d7, d7, d6
 8018f54:	e7ed      	b.n	8018f32 <__kernel_cos+0x6a>
 8018f56:	eeb5 6b02 	vmov.f64	d6, #82	@ 0x3e900000  0.2812500
 8018f5a:	e7f7      	b.n	8018f4c <__kernel_cos+0x84>
 8018f5c:	f3af 8000 	nop.w
 8018f60:	be8838d4 	.word	0xbe8838d4
 8018f64:	bda8fae9 	.word	0xbda8fae9
 8018f68:	bdb4b1c4 	.word	0xbdb4b1c4
 8018f6c:	3e21ee9e 	.word	0x3e21ee9e
 8018f70:	809c52ad 	.word	0x809c52ad
 8018f74:	be927e4f 	.word	0xbe927e4f
 8018f78:	19cb1590 	.word	0x19cb1590
 8018f7c:	3efa01a0 	.word	0x3efa01a0
 8018f80:	16c15177 	.word	0x16c15177
 8018f84:	bf56c16c 	.word	0xbf56c16c
 8018f88:	5555554c 	.word	0x5555554c
 8018f8c:	3fa55555 	.word	0x3fa55555
 8018f90:	3fd33332 	.word	0x3fd33332
 8018f94:	3fe90000 	.word	0x3fe90000

08018f98 <__kernel_sin>:
 8018f98:	ee10 3a90 	vmov	r3, s1
 8018f9c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8018fa0:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 8018fa4:	d204      	bcs.n	8018fb0 <__kernel_sin+0x18>
 8018fa6:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 8018faa:	ee17 3a90 	vmov	r3, s15
 8018fae:	b35b      	cbz	r3, 8019008 <__kernel_sin+0x70>
 8018fb0:	ee20 6b00 	vmul.f64	d6, d0, d0
 8018fb4:	ee20 5b06 	vmul.f64	d5, d0, d6
 8018fb8:	ed9f 7b15 	vldr	d7, [pc, #84]	@ 8019010 <__kernel_sin+0x78>
 8018fbc:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 8019018 <__kernel_sin+0x80>
 8018fc0:	eea6 4b07 	vfma.f64	d4, d6, d7
 8018fc4:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 8019020 <__kernel_sin+0x88>
 8018fc8:	eea4 7b06 	vfma.f64	d7, d4, d6
 8018fcc:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 8019028 <__kernel_sin+0x90>
 8018fd0:	eea7 4b06 	vfma.f64	d4, d7, d6
 8018fd4:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 8019030 <__kernel_sin+0x98>
 8018fd8:	eea4 7b06 	vfma.f64	d7, d4, d6
 8018fdc:	b930      	cbnz	r0, 8018fec <__kernel_sin+0x54>
 8018fde:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 8019038 <__kernel_sin+0xa0>
 8018fe2:	eea6 4b07 	vfma.f64	d4, d6, d7
 8018fe6:	eea4 0b05 	vfma.f64	d0, d4, d5
 8018fea:	4770      	bx	lr
 8018fec:	ee27 7b45 	vnmul.f64	d7, d7, d5
 8018ff0:	eeb6 4b00 	vmov.f64	d4, #96	@ 0x3f000000  0.5
 8018ff4:	eea1 7b04 	vfma.f64	d7, d1, d4
 8018ff8:	ee97 1b06 	vfnms.f64	d1, d7, d6
 8018ffc:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 8019040 <__kernel_sin+0xa8>
 8019000:	eea5 1b07 	vfma.f64	d1, d5, d7
 8019004:	ee30 0b41 	vsub.f64	d0, d0, d1
 8019008:	4770      	bx	lr
 801900a:	bf00      	nop
 801900c:	f3af 8000 	nop.w
 8019010:	5acfd57c 	.word	0x5acfd57c
 8019014:	3de5d93a 	.word	0x3de5d93a
 8019018:	8a2b9ceb 	.word	0x8a2b9ceb
 801901c:	be5ae5e6 	.word	0xbe5ae5e6
 8019020:	57b1fe7d 	.word	0x57b1fe7d
 8019024:	3ec71de3 	.word	0x3ec71de3
 8019028:	19c161d5 	.word	0x19c161d5
 801902c:	bf2a01a0 	.word	0xbf2a01a0
 8019030:	1110f8a6 	.word	0x1110f8a6
 8019034:	3f811111 	.word	0x3f811111
 8019038:	55555549 	.word	0x55555549
 801903c:	bfc55555 	.word	0xbfc55555
 8019040:	55555549 	.word	0x55555549
 8019044:	3fc55555 	.word	0x3fc55555

08019048 <__ieee754_rem_pio2>:
 8019048:	b570      	push	{r4, r5, r6, lr}
 801904a:	eeb0 7b40 	vmov.f64	d7, d0
 801904e:	ee17 5a90 	vmov	r5, s15
 8019052:	4b99      	ldr	r3, [pc, #612]	@ (80192b8 <__ieee754_rem_pio2+0x270>)
 8019054:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 8019058:	429e      	cmp	r6, r3
 801905a:	b088      	sub	sp, #32
 801905c:	4604      	mov	r4, r0
 801905e:	d807      	bhi.n	8019070 <__ieee754_rem_pio2+0x28>
 8019060:	2200      	movs	r2, #0
 8019062:	2300      	movs	r3, #0
 8019064:	ed84 0b00 	vstr	d0, [r4]
 8019068:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801906c:	2000      	movs	r0, #0
 801906e:	e01b      	b.n	80190a8 <__ieee754_rem_pio2+0x60>
 8019070:	4b92      	ldr	r3, [pc, #584]	@ (80192bc <__ieee754_rem_pio2+0x274>)
 8019072:	429e      	cmp	r6, r3
 8019074:	d83b      	bhi.n	80190ee <__ieee754_rem_pio2+0xa6>
 8019076:	f5a3 231b 	sub.w	r3, r3, #634880	@ 0x9b000
 801907a:	2d00      	cmp	r5, #0
 801907c:	ed9f 6b7e 	vldr	d6, [pc, #504]	@ 8019278 <__ieee754_rem_pio2+0x230>
 8019080:	f5a3 63f0 	sub.w	r3, r3, #1920	@ 0x780
 8019084:	dd19      	ble.n	80190ba <__ieee754_rem_pio2+0x72>
 8019086:	ee30 7b46 	vsub.f64	d7, d0, d6
 801908a:	429e      	cmp	r6, r3
 801908c:	d00e      	beq.n	80190ac <__ieee754_rem_pio2+0x64>
 801908e:	ed9f 5b7c 	vldr	d5, [pc, #496]	@ 8019280 <__ieee754_rem_pio2+0x238>
 8019092:	ee37 6b45 	vsub.f64	d6, d7, d5
 8019096:	ee37 7b46 	vsub.f64	d7, d7, d6
 801909a:	ed84 6b00 	vstr	d6, [r4]
 801909e:	ee37 7b45 	vsub.f64	d7, d7, d5
 80190a2:	ed84 7b02 	vstr	d7, [r4, #8]
 80190a6:	2001      	movs	r0, #1
 80190a8:	b008      	add	sp, #32
 80190aa:	bd70      	pop	{r4, r5, r6, pc}
 80190ac:	ed9f 6b76 	vldr	d6, [pc, #472]	@ 8019288 <__ieee754_rem_pio2+0x240>
 80190b0:	ed9f 5b77 	vldr	d5, [pc, #476]	@ 8019290 <__ieee754_rem_pio2+0x248>
 80190b4:	ee37 7b46 	vsub.f64	d7, d7, d6
 80190b8:	e7eb      	b.n	8019092 <__ieee754_rem_pio2+0x4a>
 80190ba:	429e      	cmp	r6, r3
 80190bc:	ee30 7b06 	vadd.f64	d7, d0, d6
 80190c0:	d00e      	beq.n	80190e0 <__ieee754_rem_pio2+0x98>
 80190c2:	ed9f 5b6f 	vldr	d5, [pc, #444]	@ 8019280 <__ieee754_rem_pio2+0x238>
 80190c6:	ee37 6b05 	vadd.f64	d6, d7, d5
 80190ca:	ee37 7b46 	vsub.f64	d7, d7, d6
 80190ce:	ed84 6b00 	vstr	d6, [r4]
 80190d2:	ee37 7b05 	vadd.f64	d7, d7, d5
 80190d6:	f04f 30ff 	mov.w	r0, #4294967295
 80190da:	ed84 7b02 	vstr	d7, [r4, #8]
 80190de:	e7e3      	b.n	80190a8 <__ieee754_rem_pio2+0x60>
 80190e0:	ed9f 6b69 	vldr	d6, [pc, #420]	@ 8019288 <__ieee754_rem_pio2+0x240>
 80190e4:	ed9f 5b6a 	vldr	d5, [pc, #424]	@ 8019290 <__ieee754_rem_pio2+0x248>
 80190e8:	ee37 7b06 	vadd.f64	d7, d7, d6
 80190ec:	e7eb      	b.n	80190c6 <__ieee754_rem_pio2+0x7e>
 80190ee:	4b74      	ldr	r3, [pc, #464]	@ (80192c0 <__ieee754_rem_pio2+0x278>)
 80190f0:	429e      	cmp	r6, r3
 80190f2:	d870      	bhi.n	80191d6 <__ieee754_rem_pio2+0x18e>
 80190f4:	f000 f8ec 	bl	80192d0 <fabs>
 80190f8:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 80190fc:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8019298 <__ieee754_rem_pio2+0x250>
 8019100:	eea0 7b06 	vfma.f64	d7, d0, d6
 8019104:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8019108:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 801910c:	ee17 0a90 	vmov	r0, s15
 8019110:	eeb1 4b45 	vneg.f64	d4, d5
 8019114:	ed9f 7b58 	vldr	d7, [pc, #352]	@ 8019278 <__ieee754_rem_pio2+0x230>
 8019118:	eea5 0b47 	vfms.f64	d0, d5, d7
 801911c:	ed9f 7b58 	vldr	d7, [pc, #352]	@ 8019280 <__ieee754_rem_pio2+0x238>
 8019120:	281f      	cmp	r0, #31
 8019122:	ee25 7b07 	vmul.f64	d7, d5, d7
 8019126:	ee30 6b47 	vsub.f64	d6, d0, d7
 801912a:	dc05      	bgt.n	8019138 <__ieee754_rem_pio2+0xf0>
 801912c:	4b65      	ldr	r3, [pc, #404]	@ (80192c4 <__ieee754_rem_pio2+0x27c>)
 801912e:	1e42      	subs	r2, r0, #1
 8019130:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8019134:	42b3      	cmp	r3, r6
 8019136:	d109      	bne.n	801914c <__ieee754_rem_pio2+0x104>
 8019138:	ee16 3a90 	vmov	r3, s13
 801913c:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8019140:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 8019144:	2b10      	cmp	r3, #16
 8019146:	ea4f 5226 	mov.w	r2, r6, asr #20
 801914a:	dc02      	bgt.n	8019152 <__ieee754_rem_pio2+0x10a>
 801914c:	ed84 6b00 	vstr	d6, [r4]
 8019150:	e01a      	b.n	8019188 <__ieee754_rem_pio2+0x140>
 8019152:	ed9f 3b4d 	vldr	d3, [pc, #308]	@ 8019288 <__ieee754_rem_pio2+0x240>
 8019156:	eeb0 6b40 	vmov.f64	d6, d0
 801915a:	eea4 6b03 	vfma.f64	d6, d4, d3
 801915e:	ee30 7b46 	vsub.f64	d7, d0, d6
 8019162:	eea4 7b03 	vfma.f64	d7, d4, d3
 8019166:	ed9f 3b4a 	vldr	d3, [pc, #296]	@ 8019290 <__ieee754_rem_pio2+0x248>
 801916a:	ee95 7b03 	vfnms.f64	d7, d5, d3
 801916e:	ee36 3b47 	vsub.f64	d3, d6, d7
 8019172:	ee13 3a90 	vmov	r3, s7
 8019176:	f3c3 530a 	ubfx	r3, r3, #20, #11
 801917a:	1ad3      	subs	r3, r2, r3
 801917c:	2b31      	cmp	r3, #49	@ 0x31
 801917e:	dc17      	bgt.n	80191b0 <__ieee754_rem_pio2+0x168>
 8019180:	eeb0 0b46 	vmov.f64	d0, d6
 8019184:	ed84 3b00 	vstr	d3, [r4]
 8019188:	ed94 6b00 	vldr	d6, [r4]
 801918c:	2d00      	cmp	r5, #0
 801918e:	ee30 0b46 	vsub.f64	d0, d0, d6
 8019192:	ee30 0b47 	vsub.f64	d0, d0, d7
 8019196:	ed84 0b02 	vstr	d0, [r4, #8]
 801919a:	da85      	bge.n	80190a8 <__ieee754_rem_pio2+0x60>
 801919c:	eeb1 6b46 	vneg.f64	d6, d6
 80191a0:	eeb1 0b40 	vneg.f64	d0, d0
 80191a4:	ed84 6b00 	vstr	d6, [r4]
 80191a8:	ed84 0b02 	vstr	d0, [r4, #8]
 80191ac:	4240      	negs	r0, r0
 80191ae:	e77b      	b.n	80190a8 <__ieee754_rem_pio2+0x60>
 80191b0:	ed9f 7b3b 	vldr	d7, [pc, #236]	@ 80192a0 <__ieee754_rem_pio2+0x258>
 80191b4:	eeb0 0b46 	vmov.f64	d0, d6
 80191b8:	eea4 0b07 	vfma.f64	d0, d4, d7
 80191bc:	ee36 6b40 	vsub.f64	d6, d6, d0
 80191c0:	eea4 6b07 	vfma.f64	d6, d4, d7
 80191c4:	ed9f 4b38 	vldr	d4, [pc, #224]	@ 80192a8 <__ieee754_rem_pio2+0x260>
 80191c8:	eeb0 7b46 	vmov.f64	d7, d6
 80191cc:	ee95 7b04 	vfnms.f64	d7, d5, d4
 80191d0:	ee30 6b47 	vsub.f64	d6, d0, d7
 80191d4:	e7ba      	b.n	801914c <__ieee754_rem_pio2+0x104>
 80191d6:	4b3c      	ldr	r3, [pc, #240]	@ (80192c8 <__ieee754_rem_pio2+0x280>)
 80191d8:	429e      	cmp	r6, r3
 80191da:	d906      	bls.n	80191ea <__ieee754_rem_pio2+0x1a2>
 80191dc:	ee30 7b40 	vsub.f64	d7, d0, d0
 80191e0:	ed80 7b02 	vstr	d7, [r0, #8]
 80191e4:	ed80 7b00 	vstr	d7, [r0]
 80191e8:	e740      	b.n	801906c <__ieee754_rem_pio2+0x24>
 80191ea:	ee10 3a10 	vmov	r3, s0
 80191ee:	1532      	asrs	r2, r6, #20
 80191f0:	f2a2 4216 	subw	r2, r2, #1046	@ 0x416
 80191f4:	4618      	mov	r0, r3
 80191f6:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 80191fa:	ec41 0b17 	vmov	d7, r0, r1
 80191fe:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8019202:	ed9f 5b2b 	vldr	d5, [pc, #172]	@ 80192b0 <__ieee754_rem_pio2+0x268>
 8019206:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 801920a:	ee37 7b46 	vsub.f64	d7, d7, d6
 801920e:	ed8d 6b02 	vstr	d6, [sp, #8]
 8019212:	ee27 7b05 	vmul.f64	d7, d7, d5
 8019216:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 801921a:	a808      	add	r0, sp, #32
 801921c:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8019220:	ee37 7b46 	vsub.f64	d7, d7, d6
 8019224:	ed8d 6b04 	vstr	d6, [sp, #16]
 8019228:	ee27 7b05 	vmul.f64	d7, d7, d5
 801922c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8019230:	2103      	movs	r1, #3
 8019232:	ed30 7b02 	vldmdb	r0!, {d7}
 8019236:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801923a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801923e:	460b      	mov	r3, r1
 8019240:	f101 31ff 	add.w	r1, r1, #4294967295
 8019244:	d0f5      	beq.n	8019232 <__ieee754_rem_pio2+0x1ea>
 8019246:	4921      	ldr	r1, [pc, #132]	@ (80192cc <__ieee754_rem_pio2+0x284>)
 8019248:	9101      	str	r1, [sp, #4]
 801924a:	2102      	movs	r1, #2
 801924c:	9100      	str	r1, [sp, #0]
 801924e:	a802      	add	r0, sp, #8
 8019250:	4621      	mov	r1, r4
 8019252:	f000 f845 	bl	80192e0 <__kernel_rem_pio2>
 8019256:	2d00      	cmp	r5, #0
 8019258:	f6bf af26 	bge.w	80190a8 <__ieee754_rem_pio2+0x60>
 801925c:	ed94 7b00 	vldr	d7, [r4]
 8019260:	eeb1 7b47 	vneg.f64	d7, d7
 8019264:	ed84 7b00 	vstr	d7, [r4]
 8019268:	ed94 7b02 	vldr	d7, [r4, #8]
 801926c:	eeb1 7b47 	vneg.f64	d7, d7
 8019270:	ed84 7b02 	vstr	d7, [r4, #8]
 8019274:	e79a      	b.n	80191ac <__ieee754_rem_pio2+0x164>
 8019276:	bf00      	nop
 8019278:	54400000 	.word	0x54400000
 801927c:	3ff921fb 	.word	0x3ff921fb
 8019280:	1a626331 	.word	0x1a626331
 8019284:	3dd0b461 	.word	0x3dd0b461
 8019288:	1a600000 	.word	0x1a600000
 801928c:	3dd0b461 	.word	0x3dd0b461
 8019290:	2e037073 	.word	0x2e037073
 8019294:	3ba3198a 	.word	0x3ba3198a
 8019298:	6dc9c883 	.word	0x6dc9c883
 801929c:	3fe45f30 	.word	0x3fe45f30
 80192a0:	2e000000 	.word	0x2e000000
 80192a4:	3ba3198a 	.word	0x3ba3198a
 80192a8:	252049c1 	.word	0x252049c1
 80192ac:	397b839a 	.word	0x397b839a
 80192b0:	00000000 	.word	0x00000000
 80192b4:	41700000 	.word	0x41700000
 80192b8:	3fe921fb 	.word	0x3fe921fb
 80192bc:	4002d97b 	.word	0x4002d97b
 80192c0:	413921fb 	.word	0x413921fb
 80192c4:	0801a320 	.word	0x0801a320
 80192c8:	7fefffff 	.word	0x7fefffff
 80192cc:	0801a3a0 	.word	0x0801a3a0

080192d0 <fabs>:
 80192d0:	ec51 0b10 	vmov	r0, r1, d0
 80192d4:	4602      	mov	r2, r0
 80192d6:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80192da:	ec43 2b10 	vmov	d0, r2, r3
 80192de:	4770      	bx	lr

080192e0 <__kernel_rem_pio2>:
 80192e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80192e4:	ed2d 8b06 	vpush	{d8-d10}
 80192e8:	f5ad 7d13 	sub.w	sp, sp, #588	@ 0x24c
 80192ec:	469b      	mov	fp, r3
 80192ee:	9001      	str	r0, [sp, #4]
 80192f0:	4bbb      	ldr	r3, [pc, #748]	@ (80195e0 <__kernel_rem_pio2+0x300>)
 80192f2:	98a2      	ldr	r0, [sp, #648]	@ 0x288
 80192f4:	f8dd 828c 	ldr.w	r8, [sp, #652]	@ 0x28c
 80192f8:	f853 9020 	ldr.w	r9, [r3, r0, lsl #2]
 80192fc:	f112 0f14 	cmn.w	r2, #20
 8019300:	bfa8      	it	ge
 8019302:	1ed3      	subge	r3, r2, #3
 8019304:	f10b 3aff 	add.w	sl, fp, #4294967295
 8019308:	bfb8      	it	lt
 801930a:	2300      	movlt	r3, #0
 801930c:	f06f 0517 	mvn.w	r5, #23
 8019310:	ed9f 6bad 	vldr	d6, [pc, #692]	@ 80195c8 <__kernel_rem_pio2+0x2e8>
 8019314:	bfa4      	itt	ge
 8019316:	2018      	movge	r0, #24
 8019318:	fb93 f3f0 	sdivge	r3, r3, r0
 801931c:	fb03 5505 	mla	r5, r3, r5, r5
 8019320:	eba3 040a 	sub.w	r4, r3, sl
 8019324:	4415      	add	r5, r2
 8019326:	460f      	mov	r7, r1
 8019328:	eb09 060a 	add.w	r6, r9, sl
 801932c:	a81a      	add	r0, sp, #104	@ 0x68
 801932e:	eb08 0c84 	add.w	ip, r8, r4, lsl #2
 8019332:	2200      	movs	r2, #0
 8019334:	42b2      	cmp	r2, r6
 8019336:	dd0e      	ble.n	8019356 <__kernel_rem_pio2+0x76>
 8019338:	aa1a      	add	r2, sp, #104	@ 0x68
 801933a:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 801933e:	f50d 7ed4 	add.w	lr, sp, #424	@ 0x1a8
 8019342:	2600      	movs	r6, #0
 8019344:	454e      	cmp	r6, r9
 8019346:	dc25      	bgt.n	8019394 <__kernel_rem_pio2+0xb4>
 8019348:	ed9f 7b9f 	vldr	d7, [pc, #636]	@ 80195c8 <__kernel_rem_pio2+0x2e8>
 801934c:	f8dd c004 	ldr.w	ip, [sp, #4]
 8019350:	4614      	mov	r4, r2
 8019352:	2000      	movs	r0, #0
 8019354:	e015      	b.n	8019382 <__kernel_rem_pio2+0xa2>
 8019356:	42d4      	cmn	r4, r2
 8019358:	d409      	bmi.n	801936e <__kernel_rem_pio2+0x8e>
 801935a:	f85c 1022 	ldr.w	r1, [ip, r2, lsl #2]
 801935e:	ee07 1a90 	vmov	s15, r1
 8019362:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8019366:	eca0 7b02 	vstmia	r0!, {d7}
 801936a:	3201      	adds	r2, #1
 801936c:	e7e2      	b.n	8019334 <__kernel_rem_pio2+0x54>
 801936e:	eeb0 7b46 	vmov.f64	d7, d6
 8019372:	e7f8      	b.n	8019366 <__kernel_rem_pio2+0x86>
 8019374:	ecbc 5b02 	vldmia	ip!, {d5}
 8019378:	ed94 6b00 	vldr	d6, [r4]
 801937c:	3001      	adds	r0, #1
 801937e:	eea5 7b06 	vfma.f64	d7, d5, d6
 8019382:	4550      	cmp	r0, sl
 8019384:	f1a4 0408 	sub.w	r4, r4, #8
 8019388:	ddf4      	ble.n	8019374 <__kernel_rem_pio2+0x94>
 801938a:	ecae 7b02 	vstmia	lr!, {d7}
 801938e:	3601      	adds	r6, #1
 8019390:	3208      	adds	r2, #8
 8019392:	e7d7      	b.n	8019344 <__kernel_rem_pio2+0x64>
 8019394:	aa06      	add	r2, sp, #24
 8019396:	ed9f 9b8e 	vldr	d9, [pc, #568]	@ 80195d0 <__kernel_rem_pio2+0x2f0>
 801939a:	ed9f ab8f 	vldr	d10, [pc, #572]	@ 80195d8 <__kernel_rem_pio2+0x2f8>
 801939e:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 80193a2:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 80193a6:	9203      	str	r2, [sp, #12]
 80193a8:	9302      	str	r3, [sp, #8]
 80193aa:	464c      	mov	r4, r9
 80193ac:	00e3      	lsls	r3, r4, #3
 80193ae:	9304      	str	r3, [sp, #16]
 80193b0:	ab92      	add	r3, sp, #584	@ 0x248
 80193b2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80193b6:	ed13 0b28 	vldr	d0, [r3, #-160]	@ 0xffffff60
 80193ba:	aa6a      	add	r2, sp, #424	@ 0x1a8
 80193bc:	ab06      	add	r3, sp, #24
 80193be:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 80193c2:	461e      	mov	r6, r3
 80193c4:	4620      	mov	r0, r4
 80193c6:	2800      	cmp	r0, #0
 80193c8:	f1a2 0208 	sub.w	r2, r2, #8
 80193cc:	dc4a      	bgt.n	8019464 <__kernel_rem_pio2+0x184>
 80193ce:	4628      	mov	r0, r5
 80193d0:	9305      	str	r3, [sp, #20]
 80193d2:	f000 fa01 	bl	80197d8 <scalbn>
 80193d6:	eeb0 8b40 	vmov.f64	d8, d0
 80193da:	eeb4 0b00 	vmov.f64	d0, #64	@ 0x3e000000  0.125
 80193de:	ee28 0b00 	vmul.f64	d0, d8, d0
 80193e2:	f000 fa79 	bl	80198d8 <floor>
 80193e6:	eeb2 7b00 	vmov.f64	d7, #32	@ 0x41000000  8.0
 80193ea:	eea0 8b47 	vfms.f64	d8, d0, d7
 80193ee:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 80193f2:	2d00      	cmp	r5, #0
 80193f4:	ee17 8a90 	vmov	r8, s15
 80193f8:	9b05      	ldr	r3, [sp, #20]
 80193fa:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80193fe:	ee38 8b47 	vsub.f64	d8, d8, d7
 8019402:	dd41      	ble.n	8019488 <__kernel_rem_pio2+0x1a8>
 8019404:	1e60      	subs	r0, r4, #1
 8019406:	aa06      	add	r2, sp, #24
 8019408:	f1c5 0c18 	rsb	ip, r5, #24
 801940c:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 8019410:	fa46 f20c 	asr.w	r2, r6, ip
 8019414:	4490      	add	r8, r2
 8019416:	fa02 f20c 	lsl.w	r2, r2, ip
 801941a:	1ab6      	subs	r6, r6, r2
 801941c:	aa06      	add	r2, sp, #24
 801941e:	f842 6020 	str.w	r6, [r2, r0, lsl #2]
 8019422:	f1c5 0217 	rsb	r2, r5, #23
 8019426:	4116      	asrs	r6, r2
 8019428:	2e00      	cmp	r6, #0
 801942a:	dd3c      	ble.n	80194a6 <__kernel_rem_pio2+0x1c6>
 801942c:	f04f 0c00 	mov.w	ip, #0
 8019430:	f108 0801 	add.w	r8, r8, #1
 8019434:	4660      	mov	r0, ip
 8019436:	f06f 4e7f 	mvn.w	lr, #4278190080	@ 0xff000000
 801943a:	4564      	cmp	r4, ip
 801943c:	dc66      	bgt.n	801950c <__kernel_rem_pio2+0x22c>
 801943e:	2d00      	cmp	r5, #0
 8019440:	dd03      	ble.n	801944a <__kernel_rem_pio2+0x16a>
 8019442:	2d01      	cmp	r5, #1
 8019444:	d072      	beq.n	801952c <__kernel_rem_pio2+0x24c>
 8019446:	2d02      	cmp	r5, #2
 8019448:	d07a      	beq.n	8019540 <__kernel_rem_pio2+0x260>
 801944a:	2e02      	cmp	r6, #2
 801944c:	d12b      	bne.n	80194a6 <__kernel_rem_pio2+0x1c6>
 801944e:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 8019452:	ee30 8b48 	vsub.f64	d8, d0, d8
 8019456:	b330      	cbz	r0, 80194a6 <__kernel_rem_pio2+0x1c6>
 8019458:	4628      	mov	r0, r5
 801945a:	f000 f9bd 	bl	80197d8 <scalbn>
 801945e:	ee38 8b40 	vsub.f64	d8, d8, d0
 8019462:	e020      	b.n	80194a6 <__kernel_rem_pio2+0x1c6>
 8019464:	ee20 7b09 	vmul.f64	d7, d0, d9
 8019468:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 801946c:	3801      	subs	r0, #1
 801946e:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 8019472:	eea7 0b4a 	vfms.f64	d0, d7, d10
 8019476:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 801947a:	eca6 0a01 	vstmia	r6!, {s0}
 801947e:	ed92 0b00 	vldr	d0, [r2]
 8019482:	ee37 0b00 	vadd.f64	d0, d7, d0
 8019486:	e79e      	b.n	80193c6 <__kernel_rem_pio2+0xe6>
 8019488:	d105      	bne.n	8019496 <__kernel_rem_pio2+0x1b6>
 801948a:	1e62      	subs	r2, r4, #1
 801948c:	a906      	add	r1, sp, #24
 801948e:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 8019492:	15f6      	asrs	r6, r6, #23
 8019494:	e7c8      	b.n	8019428 <__kernel_rem_pio2+0x148>
 8019496:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 801949a:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801949e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80194a2:	da31      	bge.n	8019508 <__kernel_rem_pio2+0x228>
 80194a4:	2600      	movs	r6, #0
 80194a6:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80194aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80194ae:	f040 809b 	bne.w	80195e8 <__kernel_rem_pio2+0x308>
 80194b2:	1e62      	subs	r2, r4, #1
 80194b4:	2000      	movs	r0, #0
 80194b6:	454a      	cmp	r2, r9
 80194b8:	da49      	bge.n	801954e <__kernel_rem_pio2+0x26e>
 80194ba:	2800      	cmp	r0, #0
 80194bc:	d062      	beq.n	8019584 <__kernel_rem_pio2+0x2a4>
 80194be:	3c01      	subs	r4, #1
 80194c0:	ab06      	add	r3, sp, #24
 80194c2:	3d18      	subs	r5, #24
 80194c4:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80194c8:	2b00      	cmp	r3, #0
 80194ca:	d0f8      	beq.n	80194be <__kernel_rem_pio2+0x1de>
 80194cc:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 80194d0:	4628      	mov	r0, r5
 80194d2:	f000 f981 	bl	80197d8 <scalbn>
 80194d6:	ed9f 6b3e 	vldr	d6, [pc, #248]	@ 80195d0 <__kernel_rem_pio2+0x2f0>
 80194da:	1c62      	adds	r2, r4, #1
 80194dc:	a96a      	add	r1, sp, #424	@ 0x1a8
 80194de:	00d3      	lsls	r3, r2, #3
 80194e0:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 80194e4:	4622      	mov	r2, r4
 80194e6:	2a00      	cmp	r2, #0
 80194e8:	f280 80a8 	bge.w	801963c <__kernel_rem_pio2+0x35c>
 80194ec:	4622      	mov	r2, r4
 80194ee:	2a00      	cmp	r2, #0
 80194f0:	f2c0 80c6 	blt.w	8019680 <__kernel_rem_pio2+0x3a0>
 80194f4:	a96a      	add	r1, sp, #424	@ 0x1a8
 80194f6:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 80194fa:	ed9f 7b33 	vldr	d7, [pc, #204]	@ 80195c8 <__kernel_rem_pio2+0x2e8>
 80194fe:	f8df c0e4 	ldr.w	ip, [pc, #228]	@ 80195e4 <__kernel_rem_pio2+0x304>
 8019502:	2000      	movs	r0, #0
 8019504:	1aa1      	subs	r1, r4, r2
 8019506:	e0b0      	b.n	801966a <__kernel_rem_pio2+0x38a>
 8019508:	2602      	movs	r6, #2
 801950a:	e78f      	b.n	801942c <__kernel_rem_pio2+0x14c>
 801950c:	f853 2b04 	ldr.w	r2, [r3], #4
 8019510:	b948      	cbnz	r0, 8019526 <__kernel_rem_pio2+0x246>
 8019512:	b122      	cbz	r2, 801951e <__kernel_rem_pio2+0x23e>
 8019514:	f1c2 7280 	rsb	r2, r2, #16777216	@ 0x1000000
 8019518:	f843 2c04 	str.w	r2, [r3, #-4]
 801951c:	2201      	movs	r2, #1
 801951e:	f10c 0c01 	add.w	ip, ip, #1
 8019522:	4610      	mov	r0, r2
 8019524:	e789      	b.n	801943a <__kernel_rem_pio2+0x15a>
 8019526:	ebae 0202 	sub.w	r2, lr, r2
 801952a:	e7f5      	b.n	8019518 <__kernel_rem_pio2+0x238>
 801952c:	1e62      	subs	r2, r4, #1
 801952e:	ab06      	add	r3, sp, #24
 8019530:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8019534:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8019538:	a906      	add	r1, sp, #24
 801953a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 801953e:	e784      	b.n	801944a <__kernel_rem_pio2+0x16a>
 8019540:	1e62      	subs	r2, r4, #1
 8019542:	ab06      	add	r3, sp, #24
 8019544:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8019548:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801954c:	e7f4      	b.n	8019538 <__kernel_rem_pio2+0x258>
 801954e:	ab06      	add	r3, sp, #24
 8019550:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8019554:	3a01      	subs	r2, #1
 8019556:	4318      	orrs	r0, r3
 8019558:	e7ad      	b.n	80194b6 <__kernel_rem_pio2+0x1d6>
 801955a:	3301      	adds	r3, #1
 801955c:	f852 0d04 	ldr.w	r0, [r2, #-4]!
 8019560:	2800      	cmp	r0, #0
 8019562:	d0fa      	beq.n	801955a <__kernel_rem_pio2+0x27a>
 8019564:	9a04      	ldr	r2, [sp, #16]
 8019566:	f502 7212 	add.w	r2, r2, #584	@ 0x248
 801956a:	446a      	add	r2, sp
 801956c:	eb04 000b 	add.w	r0, r4, fp
 8019570:	a91a      	add	r1, sp, #104	@ 0x68
 8019572:	1c66      	adds	r6, r4, #1
 8019574:	3a98      	subs	r2, #152	@ 0x98
 8019576:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 801957a:	4423      	add	r3, r4
 801957c:	42b3      	cmp	r3, r6
 801957e:	da04      	bge.n	801958a <__kernel_rem_pio2+0x2aa>
 8019580:	461c      	mov	r4, r3
 8019582:	e713      	b.n	80193ac <__kernel_rem_pio2+0xcc>
 8019584:	9a03      	ldr	r2, [sp, #12]
 8019586:	2301      	movs	r3, #1
 8019588:	e7e8      	b.n	801955c <__kernel_rem_pio2+0x27c>
 801958a:	9902      	ldr	r1, [sp, #8]
 801958c:	f8dd c004 	ldr.w	ip, [sp, #4]
 8019590:	f851 1026 	ldr.w	r1, [r1, r6, lsl #2]
 8019594:	9104      	str	r1, [sp, #16]
 8019596:	ee07 1a90 	vmov	s15, r1
 801959a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801959e:	2400      	movs	r4, #0
 80195a0:	eca0 7b02 	vstmia	r0!, {d7}
 80195a4:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 80195c8 <__kernel_rem_pio2+0x2e8>
 80195a8:	4686      	mov	lr, r0
 80195aa:	4554      	cmp	r4, sl
 80195ac:	dd03      	ble.n	80195b6 <__kernel_rem_pio2+0x2d6>
 80195ae:	eca2 7b02 	vstmia	r2!, {d7}
 80195b2:	3601      	adds	r6, #1
 80195b4:	e7e2      	b.n	801957c <__kernel_rem_pio2+0x29c>
 80195b6:	ecbc 5b02 	vldmia	ip!, {d5}
 80195ba:	ed3e 6b02 	vldmdb	lr!, {d6}
 80195be:	3401      	adds	r4, #1
 80195c0:	eea5 7b06 	vfma.f64	d7, d5, d6
 80195c4:	e7f1      	b.n	80195aa <__kernel_rem_pio2+0x2ca>
 80195c6:	bf00      	nop
	...
 80195d4:	3e700000 	.word	0x3e700000
 80195d8:	00000000 	.word	0x00000000
 80195dc:	41700000 	.word	0x41700000
 80195e0:	0801a4e8 	.word	0x0801a4e8
 80195e4:	0801a4a8 	.word	0x0801a4a8
 80195e8:	4268      	negs	r0, r5
 80195ea:	eeb0 0b48 	vmov.f64	d0, d8
 80195ee:	f000 f8f3 	bl	80197d8 <scalbn>
 80195f2:	ed9f 6b73 	vldr	d6, [pc, #460]	@ 80197c0 <__kernel_rem_pio2+0x4e0>
 80195f6:	eeb4 0bc6 	vcmpe.f64	d0, d6
 80195fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80195fe:	db17      	blt.n	8019630 <__kernel_rem_pio2+0x350>
 8019600:	ed9f 7b71 	vldr	d7, [pc, #452]	@ 80197c8 <__kernel_rem_pio2+0x4e8>
 8019604:	ee20 7b07 	vmul.f64	d7, d0, d7
 8019608:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 801960c:	aa06      	add	r2, sp, #24
 801960e:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 8019612:	eea5 0b46 	vfms.f64	d0, d5, d6
 8019616:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 801961a:	3518      	adds	r5, #24
 801961c:	ee10 3a10 	vmov	r3, s0
 8019620:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8019624:	ee17 3a10 	vmov	r3, s14
 8019628:	3401      	adds	r4, #1
 801962a:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 801962e:	e74d      	b.n	80194cc <__kernel_rem_pio2+0x1ec>
 8019630:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8019634:	aa06      	add	r2, sp, #24
 8019636:	ee10 3a10 	vmov	r3, s0
 801963a:	e7f6      	b.n	801962a <__kernel_rem_pio2+0x34a>
 801963c:	a806      	add	r0, sp, #24
 801963e:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 8019642:	9001      	str	r0, [sp, #4]
 8019644:	ee07 0a90 	vmov	s15, r0
 8019648:	3a01      	subs	r2, #1
 801964a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801964e:	ee27 7b00 	vmul.f64	d7, d7, d0
 8019652:	ee20 0b06 	vmul.f64	d0, d0, d6
 8019656:	ed21 7b02 	vstmdb	r1!, {d7}
 801965a:	e744      	b.n	80194e6 <__kernel_rem_pio2+0x206>
 801965c:	ecbc 5b02 	vldmia	ip!, {d5}
 8019660:	ecb5 6b02 	vldmia	r5!, {d6}
 8019664:	3001      	adds	r0, #1
 8019666:	eea5 7b06 	vfma.f64	d7, d5, d6
 801966a:	4548      	cmp	r0, r9
 801966c:	dc01      	bgt.n	8019672 <__kernel_rem_pio2+0x392>
 801966e:	4281      	cmp	r1, r0
 8019670:	daf4      	bge.n	801965c <__kernel_rem_pio2+0x37c>
 8019672:	a842      	add	r0, sp, #264	@ 0x108
 8019674:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8019678:	ed81 7b00 	vstr	d7, [r1]
 801967c:	3a01      	subs	r2, #1
 801967e:	e736      	b.n	80194ee <__kernel_rem_pio2+0x20e>
 8019680:	9aa2      	ldr	r2, [sp, #648]	@ 0x288
 8019682:	2a02      	cmp	r2, #2
 8019684:	dc0a      	bgt.n	801969c <__kernel_rem_pio2+0x3bc>
 8019686:	2a00      	cmp	r2, #0
 8019688:	dc2d      	bgt.n	80196e6 <__kernel_rem_pio2+0x406>
 801968a:	d046      	beq.n	801971a <__kernel_rem_pio2+0x43a>
 801968c:	f008 0007 	and.w	r0, r8, #7
 8019690:	f50d 7d13 	add.w	sp, sp, #588	@ 0x24c
 8019694:	ecbd 8b06 	vpop	{d8-d10}
 8019698:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801969c:	9aa2      	ldr	r2, [sp, #648]	@ 0x288
 801969e:	2a03      	cmp	r2, #3
 80196a0:	d1f4      	bne.n	801968c <__kernel_rem_pio2+0x3ac>
 80196a2:	a942      	add	r1, sp, #264	@ 0x108
 80196a4:	f1a3 0208 	sub.w	r2, r3, #8
 80196a8:	440a      	add	r2, r1
 80196aa:	4611      	mov	r1, r2
 80196ac:	4620      	mov	r0, r4
 80196ae:	2800      	cmp	r0, #0
 80196b0:	f1a1 0108 	sub.w	r1, r1, #8
 80196b4:	dc52      	bgt.n	801975c <__kernel_rem_pio2+0x47c>
 80196b6:	4621      	mov	r1, r4
 80196b8:	2901      	cmp	r1, #1
 80196ba:	f1a2 0208 	sub.w	r2, r2, #8
 80196be:	dc5d      	bgt.n	801977c <__kernel_rem_pio2+0x49c>
 80196c0:	ed9f 7b43 	vldr	d7, [pc, #268]	@ 80197d0 <__kernel_rem_pio2+0x4f0>
 80196c4:	aa42      	add	r2, sp, #264	@ 0x108
 80196c6:	4413      	add	r3, r2
 80196c8:	2c01      	cmp	r4, #1
 80196ca:	dc67      	bgt.n	801979c <__kernel_rem_pio2+0x4bc>
 80196cc:	ed9d 5b42 	vldr	d5, [sp, #264]	@ 0x108
 80196d0:	ed9d 6b44 	vldr	d6, [sp, #272]	@ 0x110
 80196d4:	2e00      	cmp	r6, #0
 80196d6:	d167      	bne.n	80197a8 <__kernel_rem_pio2+0x4c8>
 80196d8:	ed87 5b00 	vstr	d5, [r7]
 80196dc:	ed87 6b02 	vstr	d6, [r7, #8]
 80196e0:	ed87 7b04 	vstr	d7, [r7, #16]
 80196e4:	e7d2      	b.n	801968c <__kernel_rem_pio2+0x3ac>
 80196e6:	ed9f 6b3a 	vldr	d6, [pc, #232]	@ 80197d0 <__kernel_rem_pio2+0x4f0>
 80196ea:	aa42      	add	r2, sp, #264	@ 0x108
 80196ec:	4413      	add	r3, r2
 80196ee:	4622      	mov	r2, r4
 80196f0:	2a00      	cmp	r2, #0
 80196f2:	da24      	bge.n	801973e <__kernel_rem_pio2+0x45e>
 80196f4:	b34e      	cbz	r6, 801974a <__kernel_rem_pio2+0x46a>
 80196f6:	eeb1 7b46 	vneg.f64	d7, d6
 80196fa:	ed87 7b00 	vstr	d7, [r7]
 80196fe:	ed9d 7b42 	vldr	d7, [sp, #264]	@ 0x108
 8019702:	aa44      	add	r2, sp, #272	@ 0x110
 8019704:	2301      	movs	r3, #1
 8019706:	ee37 7b46 	vsub.f64	d7, d7, d6
 801970a:	429c      	cmp	r4, r3
 801970c:	da20      	bge.n	8019750 <__kernel_rem_pio2+0x470>
 801970e:	b10e      	cbz	r6, 8019714 <__kernel_rem_pio2+0x434>
 8019710:	eeb1 7b47 	vneg.f64	d7, d7
 8019714:	ed87 7b02 	vstr	d7, [r7, #8]
 8019718:	e7b8      	b.n	801968c <__kernel_rem_pio2+0x3ac>
 801971a:	ed9f 7b2d 	vldr	d7, [pc, #180]	@ 80197d0 <__kernel_rem_pio2+0x4f0>
 801971e:	aa42      	add	r2, sp, #264	@ 0x108
 8019720:	4413      	add	r3, r2
 8019722:	2c00      	cmp	r4, #0
 8019724:	da05      	bge.n	8019732 <__kernel_rem_pio2+0x452>
 8019726:	b10e      	cbz	r6, 801972c <__kernel_rem_pio2+0x44c>
 8019728:	eeb1 7b47 	vneg.f64	d7, d7
 801972c:	ed87 7b00 	vstr	d7, [r7]
 8019730:	e7ac      	b.n	801968c <__kernel_rem_pio2+0x3ac>
 8019732:	ed33 6b02 	vldmdb	r3!, {d6}
 8019736:	3c01      	subs	r4, #1
 8019738:	ee37 7b06 	vadd.f64	d7, d7, d6
 801973c:	e7f1      	b.n	8019722 <__kernel_rem_pio2+0x442>
 801973e:	ed33 7b02 	vldmdb	r3!, {d7}
 8019742:	3a01      	subs	r2, #1
 8019744:	ee36 6b07 	vadd.f64	d6, d6, d7
 8019748:	e7d2      	b.n	80196f0 <__kernel_rem_pio2+0x410>
 801974a:	eeb0 7b46 	vmov.f64	d7, d6
 801974e:	e7d4      	b.n	80196fa <__kernel_rem_pio2+0x41a>
 8019750:	ecb2 6b02 	vldmia	r2!, {d6}
 8019754:	3301      	adds	r3, #1
 8019756:	ee37 7b06 	vadd.f64	d7, d7, d6
 801975a:	e7d6      	b.n	801970a <__kernel_rem_pio2+0x42a>
 801975c:	ed91 7b00 	vldr	d7, [r1]
 8019760:	ed91 5b02 	vldr	d5, [r1, #8]
 8019764:	3801      	subs	r0, #1
 8019766:	ee37 6b05 	vadd.f64	d6, d7, d5
 801976a:	ee37 7b46 	vsub.f64	d7, d7, d6
 801976e:	ed81 6b00 	vstr	d6, [r1]
 8019772:	ee37 7b05 	vadd.f64	d7, d7, d5
 8019776:	ed81 7b02 	vstr	d7, [r1, #8]
 801977a:	e798      	b.n	80196ae <__kernel_rem_pio2+0x3ce>
 801977c:	ed92 7b00 	vldr	d7, [r2]
 8019780:	ed92 5b02 	vldr	d5, [r2, #8]
 8019784:	3901      	subs	r1, #1
 8019786:	ee37 6b05 	vadd.f64	d6, d7, d5
 801978a:	ee37 7b46 	vsub.f64	d7, d7, d6
 801978e:	ed82 6b00 	vstr	d6, [r2]
 8019792:	ee37 7b05 	vadd.f64	d7, d7, d5
 8019796:	ed82 7b02 	vstr	d7, [r2, #8]
 801979a:	e78d      	b.n	80196b8 <__kernel_rem_pio2+0x3d8>
 801979c:	ed33 6b02 	vldmdb	r3!, {d6}
 80197a0:	3c01      	subs	r4, #1
 80197a2:	ee37 7b06 	vadd.f64	d7, d7, d6
 80197a6:	e78f      	b.n	80196c8 <__kernel_rem_pio2+0x3e8>
 80197a8:	eeb1 5b45 	vneg.f64	d5, d5
 80197ac:	eeb1 6b46 	vneg.f64	d6, d6
 80197b0:	ed87 5b00 	vstr	d5, [r7]
 80197b4:	eeb1 7b47 	vneg.f64	d7, d7
 80197b8:	ed87 6b02 	vstr	d6, [r7, #8]
 80197bc:	e790      	b.n	80196e0 <__kernel_rem_pio2+0x400>
 80197be:	bf00      	nop
 80197c0:	00000000 	.word	0x00000000
 80197c4:	41700000 	.word	0x41700000
 80197c8:	00000000 	.word	0x00000000
 80197cc:	3e700000 	.word	0x3e700000
	...

080197d8 <scalbn>:
 80197d8:	ee10 1a90 	vmov	r1, s1
 80197dc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80197e0:	b98b      	cbnz	r3, 8019806 <scalbn+0x2e>
 80197e2:	ee10 3a10 	vmov	r3, s0
 80197e6:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80197ea:	4319      	orrs	r1, r3
 80197ec:	d00a      	beq.n	8019804 <scalbn+0x2c>
 80197ee:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 80198a0 <scalbn+0xc8>
 80197f2:	4b37      	ldr	r3, [pc, #220]	@ (80198d0 <scalbn+0xf8>)
 80197f4:	ee20 0b07 	vmul.f64	d0, d0, d7
 80197f8:	4298      	cmp	r0, r3
 80197fa:	da0b      	bge.n	8019814 <scalbn+0x3c>
 80197fc:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 80198a8 <scalbn+0xd0>
 8019800:	ee20 0b07 	vmul.f64	d0, d0, d7
 8019804:	4770      	bx	lr
 8019806:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 801980a:	4293      	cmp	r3, r2
 801980c:	d107      	bne.n	801981e <scalbn+0x46>
 801980e:	ee30 0b00 	vadd.f64	d0, d0, d0
 8019812:	4770      	bx	lr
 8019814:	ee10 1a90 	vmov	r1, s1
 8019818:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801981c:	3b36      	subs	r3, #54	@ 0x36
 801981e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8019822:	4290      	cmp	r0, r2
 8019824:	dd0d      	ble.n	8019842 <scalbn+0x6a>
 8019826:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 80198b0 <scalbn+0xd8>
 801982a:	ee10 3a90 	vmov	r3, s1
 801982e:	eeb0 6b47 	vmov.f64	d6, d7
 8019832:	ed9f 5b21 	vldr	d5, [pc, #132]	@ 80198b8 <scalbn+0xe0>
 8019836:	2b00      	cmp	r3, #0
 8019838:	fe27 7b05 	vselge.f64	d7, d7, d5
 801983c:	ee27 0b06 	vmul.f64	d0, d7, d6
 8019840:	4770      	bx	lr
 8019842:	4418      	add	r0, r3
 8019844:	f240 73fe 	movw	r3, #2046	@ 0x7fe
 8019848:	4298      	cmp	r0, r3
 801984a:	dcec      	bgt.n	8019826 <scalbn+0x4e>
 801984c:	2800      	cmp	r0, #0
 801984e:	dd0a      	ble.n	8019866 <scalbn+0x8e>
 8019850:	f021 41ff 	bic.w	r1, r1, #2139095040	@ 0x7f800000
 8019854:	ec53 2b10 	vmov	r2, r3, d0
 8019858:	f421 01e0 	bic.w	r1, r1, #7340032	@ 0x700000
 801985c:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 8019860:	ec43 2b10 	vmov	d0, r2, r3
 8019864:	4770      	bx	lr
 8019866:	f110 0f35 	cmn.w	r0, #53	@ 0x35
 801986a:	da09      	bge.n	8019880 <scalbn+0xa8>
 801986c:	ed9f 7b0e 	vldr	d7, [pc, #56]	@ 80198a8 <scalbn+0xd0>
 8019870:	ee10 3a90 	vmov	r3, s1
 8019874:	eeb0 6b47 	vmov.f64	d6, d7
 8019878:	ed9f 5b11 	vldr	d5, [pc, #68]	@ 80198c0 <scalbn+0xe8>
 801987c:	2b00      	cmp	r3, #0
 801987e:	e7db      	b.n	8019838 <scalbn+0x60>
 8019880:	f021 41ff 	bic.w	r1, r1, #2139095040	@ 0x7f800000
 8019884:	ec53 2b10 	vmov	r2, r3, d0
 8019888:	3036      	adds	r0, #54	@ 0x36
 801988a:	f421 01e0 	bic.w	r1, r1, #7340032	@ 0x700000
 801988e:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 8019892:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 80198c8 <scalbn+0xf0>
 8019896:	ec43 2b10 	vmov	d0, r2, r3
 801989a:	e7b1      	b.n	8019800 <scalbn+0x28>
 801989c:	f3af 8000 	nop.w
 80198a0:	00000000 	.word	0x00000000
 80198a4:	43500000 	.word	0x43500000
 80198a8:	c2f8f359 	.word	0xc2f8f359
 80198ac:	01a56e1f 	.word	0x01a56e1f
 80198b0:	8800759c 	.word	0x8800759c
 80198b4:	7e37e43c 	.word	0x7e37e43c
 80198b8:	8800759c 	.word	0x8800759c
 80198bc:	fe37e43c 	.word	0xfe37e43c
 80198c0:	c2f8f359 	.word	0xc2f8f359
 80198c4:	81a56e1f 	.word	0x81a56e1f
 80198c8:	00000000 	.word	0x00000000
 80198cc:	3c900000 	.word	0x3c900000
 80198d0:	ffff3cb0 	.word	0xffff3cb0
 80198d4:	00000000 	.word	0x00000000

080198d8 <floor>:
 80198d8:	ee10 3a90 	vmov	r3, s1
 80198dc:	f3c3 500a 	ubfx	r0, r3, #20, #11
 80198e0:	ee10 2a10 	vmov	r2, s0
 80198e4:	f2a0 31ff 	subw	r1, r0, #1023	@ 0x3ff
 80198e8:	2913      	cmp	r1, #19
 80198ea:	b530      	push	{r4, r5, lr}
 80198ec:	4615      	mov	r5, r2
 80198ee:	dc33      	bgt.n	8019958 <floor+0x80>
 80198f0:	2900      	cmp	r1, #0
 80198f2:	da18      	bge.n	8019926 <floor+0x4e>
 80198f4:	ed9f 7b30 	vldr	d7, [pc, #192]	@ 80199b8 <floor+0xe0>
 80198f8:	ee30 0b07 	vadd.f64	d0, d0, d7
 80198fc:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8019900:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019904:	dd0a      	ble.n	801991c <floor+0x44>
 8019906:	2b00      	cmp	r3, #0
 8019908:	da50      	bge.n	80199ac <floor+0xd4>
 801990a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801990e:	4313      	orrs	r3, r2
 8019910:	2200      	movs	r2, #0
 8019912:	4293      	cmp	r3, r2
 8019914:	4b2a      	ldr	r3, [pc, #168]	@ (80199c0 <floor+0xe8>)
 8019916:	bf08      	it	eq
 8019918:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 801991c:	4619      	mov	r1, r3
 801991e:	4610      	mov	r0, r2
 8019920:	ec41 0b10 	vmov	d0, r0, r1
 8019924:	e01f      	b.n	8019966 <floor+0x8e>
 8019926:	4827      	ldr	r0, [pc, #156]	@ (80199c4 <floor+0xec>)
 8019928:	4108      	asrs	r0, r1
 801992a:	ea03 0400 	and.w	r4, r3, r0
 801992e:	4314      	orrs	r4, r2
 8019930:	d019      	beq.n	8019966 <floor+0x8e>
 8019932:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 80199b8 <floor+0xe0>
 8019936:	ee30 0b07 	vadd.f64	d0, d0, d7
 801993a:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801993e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019942:	ddeb      	ble.n	801991c <floor+0x44>
 8019944:	2b00      	cmp	r3, #0
 8019946:	bfbe      	ittt	lt
 8019948:	f44f 1280 	movlt.w	r2, #1048576	@ 0x100000
 801994c:	410a      	asrlt	r2, r1
 801994e:	189b      	addlt	r3, r3, r2
 8019950:	ea23 0300 	bic.w	r3, r3, r0
 8019954:	2200      	movs	r2, #0
 8019956:	e7e1      	b.n	801991c <floor+0x44>
 8019958:	2933      	cmp	r1, #51	@ 0x33
 801995a:	dd05      	ble.n	8019968 <floor+0x90>
 801995c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8019960:	d101      	bne.n	8019966 <floor+0x8e>
 8019962:	ee30 0b00 	vadd.f64	d0, d0, d0
 8019966:	bd30      	pop	{r4, r5, pc}
 8019968:	f2a0 4413 	subw	r4, r0, #1043	@ 0x413
 801996c:	f04f 30ff 	mov.w	r0, #4294967295
 8019970:	40e0      	lsrs	r0, r4
 8019972:	4210      	tst	r0, r2
 8019974:	d0f7      	beq.n	8019966 <floor+0x8e>
 8019976:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 80199b8 <floor+0xe0>
 801997a:	ee30 0b07 	vadd.f64	d0, d0, d7
 801997e:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8019982:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019986:	ddc9      	ble.n	801991c <floor+0x44>
 8019988:	2b00      	cmp	r3, #0
 801998a:	da02      	bge.n	8019992 <floor+0xba>
 801998c:	2914      	cmp	r1, #20
 801998e:	d103      	bne.n	8019998 <floor+0xc0>
 8019990:	3301      	adds	r3, #1
 8019992:	ea22 0200 	bic.w	r2, r2, r0
 8019996:	e7c1      	b.n	801991c <floor+0x44>
 8019998:	2401      	movs	r4, #1
 801999a:	f1c1 0134 	rsb	r1, r1, #52	@ 0x34
 801999e:	fa04 f101 	lsl.w	r1, r4, r1
 80199a2:	440a      	add	r2, r1
 80199a4:	42aa      	cmp	r2, r5
 80199a6:	bf38      	it	cc
 80199a8:	191b      	addcc	r3, r3, r4
 80199aa:	e7f2      	b.n	8019992 <floor+0xba>
 80199ac:	2200      	movs	r2, #0
 80199ae:	4613      	mov	r3, r2
 80199b0:	e7b4      	b.n	801991c <floor+0x44>
 80199b2:	bf00      	nop
 80199b4:	f3af 8000 	nop.w
 80199b8:	8800759c 	.word	0x8800759c
 80199bc:	7e37e43c 	.word	0x7e37e43c
 80199c0:	bff00000 	.word	0xbff00000
 80199c4:	000fffff 	.word	0x000fffff

080199c8 <_init>:
 80199c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80199ca:	bf00      	nop
 80199cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80199ce:	bc08      	pop	{r3}
 80199d0:	469e      	mov	lr, r3
 80199d2:	4770      	bx	lr

080199d4 <_fini>:
 80199d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80199d6:	bf00      	nop
 80199d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80199da:	bc08      	pop	{r3}
 80199dc:	469e      	mov	lr, r3
 80199de:	4770      	bx	lr
