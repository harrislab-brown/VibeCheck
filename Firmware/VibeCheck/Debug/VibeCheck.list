
VibeCheck.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000180d8  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000858  080183a8  080183a8  000193a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08018c00  08018c00  00019c00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08018c08  08018c08  00019c08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08018c0c  08018c0c  00019c0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000002cc  24000000  08018c10  0001a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000698c  240002cc  08018edc  0001a2cc  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24006c58  08018edc  0001ac58  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0001a2cc  2**0
                  CONTENTS, READONLY
 10 .debug_info   00031cbc  00000000  00000000  0001a2fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000613b  00000000  00000000  0004bfb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002570  00000000  00000000  000520f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001d23  00000000  00000000  00054668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0000a450  00000000  00000000  0005638b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00038de1  00000000  00000000  000607db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00171375  00000000  00000000  000995bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  0020a931  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000b61c  00000000  00000000  0020a974  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000072  00000000  00000000  00215f90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240002cc 	.word	0x240002cc
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08018390 	.word	0x08018390

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240002d0 	.word	0x240002d0
 800030c:	08018390 	.word	0x08018390

08000310 <strcmp>:
 8000310:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000314:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000318:	2a01      	cmp	r2, #1
 800031a:	bf28      	it	cs
 800031c:	429a      	cmpcs	r2, r3
 800031e:	d0f7      	beq.n	8000310 <strcmp>
 8000320:	1ad0      	subs	r0, r2, r3
 8000322:	4770      	bx	lr
	...

08000330 <memchr>:
 8000330:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000334:	2a10      	cmp	r2, #16
 8000336:	db2b      	blt.n	8000390 <memchr+0x60>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	d008      	beq.n	8000350 <memchr+0x20>
 800033e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000342:	3a01      	subs	r2, #1
 8000344:	428b      	cmp	r3, r1
 8000346:	d02d      	beq.n	80003a4 <memchr+0x74>
 8000348:	f010 0f07 	tst.w	r0, #7
 800034c:	b342      	cbz	r2, 80003a0 <memchr+0x70>
 800034e:	d1f6      	bne.n	800033e <memchr+0xe>
 8000350:	b4f0      	push	{r4, r5, r6, r7}
 8000352:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000356:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800035a:	f022 0407 	bic.w	r4, r2, #7
 800035e:	f07f 0700 	mvns.w	r7, #0
 8000362:	2300      	movs	r3, #0
 8000364:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000368:	3c08      	subs	r4, #8
 800036a:	ea85 0501 	eor.w	r5, r5, r1
 800036e:	ea86 0601 	eor.w	r6, r6, r1
 8000372:	fa85 f547 	uadd8	r5, r5, r7
 8000376:	faa3 f587 	sel	r5, r3, r7
 800037a:	fa86 f647 	uadd8	r6, r6, r7
 800037e:	faa5 f687 	sel	r6, r5, r7
 8000382:	b98e      	cbnz	r6, 80003a8 <memchr+0x78>
 8000384:	d1ee      	bne.n	8000364 <memchr+0x34>
 8000386:	bcf0      	pop	{r4, r5, r6, r7}
 8000388:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800038c:	f002 0207 	and.w	r2, r2, #7
 8000390:	b132      	cbz	r2, 80003a0 <memchr+0x70>
 8000392:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000396:	3a01      	subs	r2, #1
 8000398:	ea83 0301 	eor.w	r3, r3, r1
 800039c:	b113      	cbz	r3, 80003a4 <memchr+0x74>
 800039e:	d1f8      	bne.n	8000392 <memchr+0x62>
 80003a0:	2000      	movs	r0, #0
 80003a2:	4770      	bx	lr
 80003a4:	3801      	subs	r0, #1
 80003a6:	4770      	bx	lr
 80003a8:	2d00      	cmp	r5, #0
 80003aa:	bf06      	itte	eq
 80003ac:	4635      	moveq	r5, r6
 80003ae:	3803      	subeq	r0, #3
 80003b0:	3807      	subne	r0, #7
 80003b2:	f015 0f01 	tst.w	r5, #1
 80003b6:	d107      	bne.n	80003c8 <memchr+0x98>
 80003b8:	3001      	adds	r0, #1
 80003ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80003be:	bf02      	ittt	eq
 80003c0:	3001      	addeq	r0, #1
 80003c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003c6:	3001      	addeq	r0, #1
 80003c8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ca:	3801      	subs	r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	bf00      	nop

080003d0 <strlen>:
 80003d0:	4603      	mov	r3, r0
 80003d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003d6:	2a00      	cmp	r2, #0
 80003d8:	d1fb      	bne.n	80003d2 <strlen+0x2>
 80003da:	1a18      	subs	r0, r3, r0
 80003dc:	3801      	subs	r0, #1
 80003de:	4770      	bx	lr

080003e0 <__aeabi_drsub>:
 80003e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80003e4:	e002      	b.n	80003ec <__adddf3>
 80003e6:	bf00      	nop

080003e8 <__aeabi_dsub>:
 80003e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080003ec <__adddf3>:
 80003ec:	b530      	push	{r4, r5, lr}
 80003ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	bf1f      	itttt	ne
 8000402:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000406:	ea55 0c02 	orrsne.w	ip, r5, r2
 800040a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800040e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000412:	f000 80e2 	beq.w	80005da <__adddf3+0x1ee>
 8000416:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800041a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800041e:	bfb8      	it	lt
 8000420:	426d      	neglt	r5, r5
 8000422:	dd0c      	ble.n	800043e <__adddf3+0x52>
 8000424:	442c      	add	r4, r5
 8000426:	ea80 0202 	eor.w	r2, r0, r2
 800042a:	ea81 0303 	eor.w	r3, r1, r3
 800042e:	ea82 0000 	eor.w	r0, r2, r0
 8000432:	ea83 0101 	eor.w	r1, r3, r1
 8000436:	ea80 0202 	eor.w	r2, r0, r2
 800043a:	ea81 0303 	eor.w	r3, r1, r3
 800043e:	2d36      	cmp	r5, #54	@ 0x36
 8000440:	bf88      	it	hi
 8000442:	bd30      	pophi	{r4, r5, pc}
 8000444:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000448:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800044c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000450:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000454:	d002      	beq.n	800045c <__adddf3+0x70>
 8000456:	4240      	negs	r0, r0
 8000458:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800045c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000460:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000464:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000468:	d002      	beq.n	8000470 <__adddf3+0x84>
 800046a:	4252      	negs	r2, r2
 800046c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000470:	ea94 0f05 	teq	r4, r5
 8000474:	f000 80a7 	beq.w	80005c6 <__adddf3+0x1da>
 8000478:	f1a4 0401 	sub.w	r4, r4, #1
 800047c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000480:	db0d      	blt.n	800049e <__adddf3+0xb2>
 8000482:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000486:	fa22 f205 	lsr.w	r2, r2, r5
 800048a:	1880      	adds	r0, r0, r2
 800048c:	f141 0100 	adc.w	r1, r1, #0
 8000490:	fa03 f20e 	lsl.w	r2, r3, lr
 8000494:	1880      	adds	r0, r0, r2
 8000496:	fa43 f305 	asr.w	r3, r3, r5
 800049a:	4159      	adcs	r1, r3
 800049c:	e00e      	b.n	80004bc <__adddf3+0xd0>
 800049e:	f1a5 0520 	sub.w	r5, r5, #32
 80004a2:	f10e 0e20 	add.w	lr, lr, #32
 80004a6:	2a01      	cmp	r2, #1
 80004a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004ac:	bf28      	it	cs
 80004ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004b2:	fa43 f305 	asr.w	r3, r3, r5
 80004b6:	18c0      	adds	r0, r0, r3
 80004b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004c0:	d507      	bpl.n	80004d2 <__adddf3+0xe6>
 80004c2:	f04f 0e00 	mov.w	lr, #0
 80004c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80004ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80004d2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80004d6:	d31b      	bcc.n	8000510 <__adddf3+0x124>
 80004d8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80004dc:	d30c      	bcc.n	80004f8 <__adddf3+0x10c>
 80004de:	0849      	lsrs	r1, r1, #1
 80004e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004e8:	f104 0401 	add.w	r4, r4, #1
 80004ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004f0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004f4:	f080 809a 	bcs.w	800062c <__adddf3+0x240>
 80004f8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004fc:	bf08      	it	eq
 80004fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000502:	f150 0000 	adcs.w	r0, r0, #0
 8000506:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800050a:	ea41 0105 	orr.w	r1, r1, r5
 800050e:	bd30      	pop	{r4, r5, pc}
 8000510:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000514:	4140      	adcs	r0, r0
 8000516:	eb41 0101 	adc.w	r1, r1, r1
 800051a:	3c01      	subs	r4, #1
 800051c:	bf28      	it	cs
 800051e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000522:	d2e9      	bcs.n	80004f8 <__adddf3+0x10c>
 8000524:	f091 0f00 	teq	r1, #0
 8000528:	bf04      	itt	eq
 800052a:	4601      	moveq	r1, r0
 800052c:	2000      	moveq	r0, #0
 800052e:	fab1 f381 	clz	r3, r1
 8000532:	bf08      	it	eq
 8000534:	3320      	addeq	r3, #32
 8000536:	f1a3 030b 	sub.w	r3, r3, #11
 800053a:	f1b3 0220 	subs.w	r2, r3, #32
 800053e:	da0c      	bge.n	800055a <__adddf3+0x16e>
 8000540:	320c      	adds	r2, #12
 8000542:	dd08      	ble.n	8000556 <__adddf3+0x16a>
 8000544:	f102 0c14 	add.w	ip, r2, #20
 8000548:	f1c2 020c 	rsb	r2, r2, #12
 800054c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000550:	fa21 f102 	lsr.w	r1, r1, r2
 8000554:	e00c      	b.n	8000570 <__adddf3+0x184>
 8000556:	f102 0214 	add.w	r2, r2, #20
 800055a:	bfd8      	it	le
 800055c:	f1c2 0c20 	rsble	ip, r2, #32
 8000560:	fa01 f102 	lsl.w	r1, r1, r2
 8000564:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000568:	bfdc      	itt	le
 800056a:	ea41 010c 	orrle.w	r1, r1, ip
 800056e:	4090      	lslle	r0, r2
 8000570:	1ae4      	subs	r4, r4, r3
 8000572:	bfa2      	ittt	ge
 8000574:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000578:	4329      	orrge	r1, r5
 800057a:	bd30      	popge	{r4, r5, pc}
 800057c:	ea6f 0404 	mvn.w	r4, r4
 8000580:	3c1f      	subs	r4, #31
 8000582:	da1c      	bge.n	80005be <__adddf3+0x1d2>
 8000584:	340c      	adds	r4, #12
 8000586:	dc0e      	bgt.n	80005a6 <__adddf3+0x1ba>
 8000588:	f104 0414 	add.w	r4, r4, #20
 800058c:	f1c4 0220 	rsb	r2, r4, #32
 8000590:	fa20 f004 	lsr.w	r0, r0, r4
 8000594:	fa01 f302 	lsl.w	r3, r1, r2
 8000598:	ea40 0003 	orr.w	r0, r0, r3
 800059c:	fa21 f304 	lsr.w	r3, r1, r4
 80005a0:	ea45 0103 	orr.w	r1, r5, r3
 80005a4:	bd30      	pop	{r4, r5, pc}
 80005a6:	f1c4 040c 	rsb	r4, r4, #12
 80005aa:	f1c4 0220 	rsb	r2, r4, #32
 80005ae:	fa20 f002 	lsr.w	r0, r0, r2
 80005b2:	fa01 f304 	lsl.w	r3, r1, r4
 80005b6:	ea40 0003 	orr.w	r0, r0, r3
 80005ba:	4629      	mov	r1, r5
 80005bc:	bd30      	pop	{r4, r5, pc}
 80005be:	fa21 f004 	lsr.w	r0, r1, r4
 80005c2:	4629      	mov	r1, r5
 80005c4:	bd30      	pop	{r4, r5, pc}
 80005c6:	f094 0f00 	teq	r4, #0
 80005ca:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80005ce:	bf06      	itte	eq
 80005d0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80005d4:	3401      	addeq	r4, #1
 80005d6:	3d01      	subne	r5, #1
 80005d8:	e74e      	b.n	8000478 <__adddf3+0x8c>
 80005da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005de:	bf18      	it	ne
 80005e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005e4:	d029      	beq.n	800063a <__adddf3+0x24e>
 80005e6:	ea94 0f05 	teq	r4, r5
 80005ea:	bf08      	it	eq
 80005ec:	ea90 0f02 	teqeq	r0, r2
 80005f0:	d005      	beq.n	80005fe <__adddf3+0x212>
 80005f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005f6:	bf04      	itt	eq
 80005f8:	4619      	moveq	r1, r3
 80005fa:	4610      	moveq	r0, r2
 80005fc:	bd30      	pop	{r4, r5, pc}
 80005fe:	ea91 0f03 	teq	r1, r3
 8000602:	bf1e      	ittt	ne
 8000604:	2100      	movne	r1, #0
 8000606:	2000      	movne	r0, #0
 8000608:	bd30      	popne	{r4, r5, pc}
 800060a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800060e:	d105      	bne.n	800061c <__adddf3+0x230>
 8000610:	0040      	lsls	r0, r0, #1
 8000612:	4149      	adcs	r1, r1
 8000614:	bf28      	it	cs
 8000616:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800061a:	bd30      	pop	{r4, r5, pc}
 800061c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000620:	bf3c      	itt	cc
 8000622:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000626:	bd30      	popcc	{r4, r5, pc}
 8000628:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800062c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000630:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000634:	f04f 0000 	mov.w	r0, #0
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800063e:	bf1a      	itte	ne
 8000640:	4619      	movne	r1, r3
 8000642:	4610      	movne	r0, r2
 8000644:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000648:	bf1c      	itt	ne
 800064a:	460b      	movne	r3, r1
 800064c:	4602      	movne	r2, r0
 800064e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000652:	bf06      	itte	eq
 8000654:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000658:	ea91 0f03 	teqeq	r1, r3
 800065c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000660:	bd30      	pop	{r4, r5, pc}
 8000662:	bf00      	nop

08000664 <__aeabi_ui2d>:
 8000664:	f090 0f00 	teq	r0, #0
 8000668:	bf04      	itt	eq
 800066a:	2100      	moveq	r1, #0
 800066c:	4770      	bxeq	lr
 800066e:	b530      	push	{r4, r5, lr}
 8000670:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000674:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000678:	f04f 0500 	mov.w	r5, #0
 800067c:	f04f 0100 	mov.w	r1, #0
 8000680:	e750      	b.n	8000524 <__adddf3+0x138>
 8000682:	bf00      	nop

08000684 <__aeabi_i2d>:
 8000684:	f090 0f00 	teq	r0, #0
 8000688:	bf04      	itt	eq
 800068a:	2100      	moveq	r1, #0
 800068c:	4770      	bxeq	lr
 800068e:	b530      	push	{r4, r5, lr}
 8000690:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000694:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000698:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800069c:	bf48      	it	mi
 800069e:	4240      	negmi	r0, r0
 80006a0:	f04f 0100 	mov.w	r1, #0
 80006a4:	e73e      	b.n	8000524 <__adddf3+0x138>
 80006a6:	bf00      	nop

080006a8 <__aeabi_f2d>:
 80006a8:	0042      	lsls	r2, r0, #1
 80006aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80006b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006b6:	bf1f      	itttt	ne
 80006b8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80006bc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80006c0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80006c4:	4770      	bxne	lr
 80006c6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80006ca:	bf08      	it	eq
 80006cc:	4770      	bxeq	lr
 80006ce:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80006d2:	bf04      	itt	eq
 80006d4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80006d8:	4770      	bxeq	lr
 80006da:	b530      	push	{r4, r5, lr}
 80006dc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80006e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006e8:	e71c      	b.n	8000524 <__adddf3+0x138>
 80006ea:	bf00      	nop

080006ec <__aeabi_ul2d>:
 80006ec:	ea50 0201 	orrs.w	r2, r0, r1
 80006f0:	bf08      	it	eq
 80006f2:	4770      	bxeq	lr
 80006f4:	b530      	push	{r4, r5, lr}
 80006f6:	f04f 0500 	mov.w	r5, #0
 80006fa:	e00a      	b.n	8000712 <__aeabi_l2d+0x16>

080006fc <__aeabi_l2d>:
 80006fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000700:	bf08      	it	eq
 8000702:	4770      	bxeq	lr
 8000704:	b530      	push	{r4, r5, lr}
 8000706:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800070a:	d502      	bpl.n	8000712 <__aeabi_l2d+0x16>
 800070c:	4240      	negs	r0, r0
 800070e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000712:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000716:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800071a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800071e:	f43f aed8 	beq.w	80004d2 <__adddf3+0xe6>
 8000722:	f04f 0203 	mov.w	r2, #3
 8000726:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800072a:	bf18      	it	ne
 800072c:	3203      	addne	r2, #3
 800072e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000732:	bf18      	it	ne
 8000734:	3203      	addne	r2, #3
 8000736:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800073a:	f1c2 0320 	rsb	r3, r2, #32
 800073e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000742:	fa20 f002 	lsr.w	r0, r0, r2
 8000746:	fa01 fe03 	lsl.w	lr, r1, r3
 800074a:	ea40 000e 	orr.w	r0, r0, lr
 800074e:	fa21 f102 	lsr.w	r1, r1, r2
 8000752:	4414      	add	r4, r2
 8000754:	e6bd      	b.n	80004d2 <__adddf3+0xe6>
 8000756:	bf00      	nop

08000758 <__aeabi_uldivmod>:
 8000758:	b953      	cbnz	r3, 8000770 <__aeabi_uldivmod+0x18>
 800075a:	b94a      	cbnz	r2, 8000770 <__aeabi_uldivmod+0x18>
 800075c:	2900      	cmp	r1, #0
 800075e:	bf08      	it	eq
 8000760:	2800      	cmpeq	r0, #0
 8000762:	bf1c      	itt	ne
 8000764:	f04f 31ff 	movne.w	r1, #4294967295
 8000768:	f04f 30ff 	movne.w	r0, #4294967295
 800076c:	f000 b9a2 	b.w	8000ab4 <__aeabi_idiv0>
 8000770:	f1ad 0c08 	sub.w	ip, sp, #8
 8000774:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000778:	f000 f83e 	bl	80007f8 <__udivmoddi4>
 800077c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000780:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000784:	b004      	add	sp, #16
 8000786:	4770      	bx	lr

08000788 <__aeabi_d2lz>:
 8000788:	b508      	push	{r3, lr}
 800078a:	4602      	mov	r2, r0
 800078c:	460b      	mov	r3, r1
 800078e:	ec43 2b17 	vmov	d7, r2, r3
 8000792:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000796:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800079a:	d403      	bmi.n	80007a4 <__aeabi_d2lz+0x1c>
 800079c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80007a0:	f000 b80a 	b.w	80007b8 <__aeabi_d2ulz>
 80007a4:	eeb1 7b47 	vneg.f64	d7, d7
 80007a8:	ec51 0b17 	vmov	r0, r1, d7
 80007ac:	f000 f804 	bl	80007b8 <__aeabi_d2ulz>
 80007b0:	4240      	negs	r0, r0
 80007b2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007b6:	bd08      	pop	{r3, pc}

080007b8 <__aeabi_d2ulz>:
 80007b8:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 80007e8 <__aeabi_d2ulz+0x30>
 80007bc:	ec41 0b17 	vmov	d7, r0, r1
 80007c0:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 80007f0 <__aeabi_d2ulz+0x38>
 80007c4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80007c8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80007cc:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80007d0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80007d4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80007d8:	ee16 1a10 	vmov	r1, s12
 80007dc:	ee17 0a90 	vmov	r0, s15
 80007e0:	4770      	bx	lr
 80007e2:	bf00      	nop
 80007e4:	f3af 8000 	nop.w
 80007e8:	00000000 	.word	0x00000000
 80007ec:	3df00000 	.word	0x3df00000
 80007f0:	00000000 	.word	0x00000000
 80007f4:	41f00000 	.word	0x41f00000

080007f8 <__udivmoddi4>:
 80007f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007fc:	9d08      	ldr	r5, [sp, #32]
 80007fe:	460c      	mov	r4, r1
 8000800:	2b00      	cmp	r3, #0
 8000802:	d14e      	bne.n	80008a2 <__udivmoddi4+0xaa>
 8000804:	4694      	mov	ip, r2
 8000806:	458c      	cmp	ip, r1
 8000808:	4686      	mov	lr, r0
 800080a:	fab2 f282 	clz	r2, r2
 800080e:	d962      	bls.n	80008d6 <__udivmoddi4+0xde>
 8000810:	b14a      	cbz	r2, 8000826 <__udivmoddi4+0x2e>
 8000812:	f1c2 0320 	rsb	r3, r2, #32
 8000816:	4091      	lsls	r1, r2
 8000818:	fa20 f303 	lsr.w	r3, r0, r3
 800081c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000820:	4319      	orrs	r1, r3
 8000822:	fa00 fe02 	lsl.w	lr, r0, r2
 8000826:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800082a:	fa1f f68c 	uxth.w	r6, ip
 800082e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000832:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000836:	fb07 1114 	mls	r1, r7, r4, r1
 800083a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800083e:	fb04 f106 	mul.w	r1, r4, r6
 8000842:	4299      	cmp	r1, r3
 8000844:	d90a      	bls.n	800085c <__udivmoddi4+0x64>
 8000846:	eb1c 0303 	adds.w	r3, ip, r3
 800084a:	f104 30ff 	add.w	r0, r4, #4294967295
 800084e:	f080 8112 	bcs.w	8000a76 <__udivmoddi4+0x27e>
 8000852:	4299      	cmp	r1, r3
 8000854:	f240 810f 	bls.w	8000a76 <__udivmoddi4+0x27e>
 8000858:	3c02      	subs	r4, #2
 800085a:	4463      	add	r3, ip
 800085c:	1a59      	subs	r1, r3, r1
 800085e:	fa1f f38e 	uxth.w	r3, lr
 8000862:	fbb1 f0f7 	udiv	r0, r1, r7
 8000866:	fb07 1110 	mls	r1, r7, r0, r1
 800086a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800086e:	fb00 f606 	mul.w	r6, r0, r6
 8000872:	429e      	cmp	r6, r3
 8000874:	d90a      	bls.n	800088c <__udivmoddi4+0x94>
 8000876:	eb1c 0303 	adds.w	r3, ip, r3
 800087a:	f100 31ff 	add.w	r1, r0, #4294967295
 800087e:	f080 80fc 	bcs.w	8000a7a <__udivmoddi4+0x282>
 8000882:	429e      	cmp	r6, r3
 8000884:	f240 80f9 	bls.w	8000a7a <__udivmoddi4+0x282>
 8000888:	4463      	add	r3, ip
 800088a:	3802      	subs	r0, #2
 800088c:	1b9b      	subs	r3, r3, r6
 800088e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000892:	2100      	movs	r1, #0
 8000894:	b11d      	cbz	r5, 800089e <__udivmoddi4+0xa6>
 8000896:	40d3      	lsrs	r3, r2
 8000898:	2200      	movs	r2, #0
 800089a:	e9c5 3200 	strd	r3, r2, [r5]
 800089e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008a2:	428b      	cmp	r3, r1
 80008a4:	d905      	bls.n	80008b2 <__udivmoddi4+0xba>
 80008a6:	b10d      	cbz	r5, 80008ac <__udivmoddi4+0xb4>
 80008a8:	e9c5 0100 	strd	r0, r1, [r5]
 80008ac:	2100      	movs	r1, #0
 80008ae:	4608      	mov	r0, r1
 80008b0:	e7f5      	b.n	800089e <__udivmoddi4+0xa6>
 80008b2:	fab3 f183 	clz	r1, r3
 80008b6:	2900      	cmp	r1, #0
 80008b8:	d146      	bne.n	8000948 <__udivmoddi4+0x150>
 80008ba:	42a3      	cmp	r3, r4
 80008bc:	d302      	bcc.n	80008c4 <__udivmoddi4+0xcc>
 80008be:	4290      	cmp	r0, r2
 80008c0:	f0c0 80f0 	bcc.w	8000aa4 <__udivmoddi4+0x2ac>
 80008c4:	1a86      	subs	r6, r0, r2
 80008c6:	eb64 0303 	sbc.w	r3, r4, r3
 80008ca:	2001      	movs	r0, #1
 80008cc:	2d00      	cmp	r5, #0
 80008ce:	d0e6      	beq.n	800089e <__udivmoddi4+0xa6>
 80008d0:	e9c5 6300 	strd	r6, r3, [r5]
 80008d4:	e7e3      	b.n	800089e <__udivmoddi4+0xa6>
 80008d6:	2a00      	cmp	r2, #0
 80008d8:	f040 8090 	bne.w	80009fc <__udivmoddi4+0x204>
 80008dc:	eba1 040c 	sub.w	r4, r1, ip
 80008e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80008e4:	fa1f f78c 	uxth.w	r7, ip
 80008e8:	2101      	movs	r1, #1
 80008ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80008ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80008f2:	fb08 4416 	mls	r4, r8, r6, r4
 80008f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80008fa:	fb07 f006 	mul.w	r0, r7, r6
 80008fe:	4298      	cmp	r0, r3
 8000900:	d908      	bls.n	8000914 <__udivmoddi4+0x11c>
 8000902:	eb1c 0303 	adds.w	r3, ip, r3
 8000906:	f106 34ff 	add.w	r4, r6, #4294967295
 800090a:	d202      	bcs.n	8000912 <__udivmoddi4+0x11a>
 800090c:	4298      	cmp	r0, r3
 800090e:	f200 80cd 	bhi.w	8000aac <__udivmoddi4+0x2b4>
 8000912:	4626      	mov	r6, r4
 8000914:	1a1c      	subs	r4, r3, r0
 8000916:	fa1f f38e 	uxth.w	r3, lr
 800091a:	fbb4 f0f8 	udiv	r0, r4, r8
 800091e:	fb08 4410 	mls	r4, r8, r0, r4
 8000922:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000926:	fb00 f707 	mul.w	r7, r0, r7
 800092a:	429f      	cmp	r7, r3
 800092c:	d908      	bls.n	8000940 <__udivmoddi4+0x148>
 800092e:	eb1c 0303 	adds.w	r3, ip, r3
 8000932:	f100 34ff 	add.w	r4, r0, #4294967295
 8000936:	d202      	bcs.n	800093e <__udivmoddi4+0x146>
 8000938:	429f      	cmp	r7, r3
 800093a:	f200 80b0 	bhi.w	8000a9e <__udivmoddi4+0x2a6>
 800093e:	4620      	mov	r0, r4
 8000940:	1bdb      	subs	r3, r3, r7
 8000942:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000946:	e7a5      	b.n	8000894 <__udivmoddi4+0x9c>
 8000948:	f1c1 0620 	rsb	r6, r1, #32
 800094c:	408b      	lsls	r3, r1
 800094e:	fa22 f706 	lsr.w	r7, r2, r6
 8000952:	431f      	orrs	r7, r3
 8000954:	fa20 fc06 	lsr.w	ip, r0, r6
 8000958:	fa04 f301 	lsl.w	r3, r4, r1
 800095c:	ea43 030c 	orr.w	r3, r3, ip
 8000960:	40f4      	lsrs	r4, r6
 8000962:	fa00 f801 	lsl.w	r8, r0, r1
 8000966:	0c38      	lsrs	r0, r7, #16
 8000968:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800096c:	fbb4 fef0 	udiv	lr, r4, r0
 8000970:	fa1f fc87 	uxth.w	ip, r7
 8000974:	fb00 441e 	mls	r4, r0, lr, r4
 8000978:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800097c:	fb0e f90c 	mul.w	r9, lr, ip
 8000980:	45a1      	cmp	r9, r4
 8000982:	fa02 f201 	lsl.w	r2, r2, r1
 8000986:	d90a      	bls.n	800099e <__udivmoddi4+0x1a6>
 8000988:	193c      	adds	r4, r7, r4
 800098a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800098e:	f080 8084 	bcs.w	8000a9a <__udivmoddi4+0x2a2>
 8000992:	45a1      	cmp	r9, r4
 8000994:	f240 8081 	bls.w	8000a9a <__udivmoddi4+0x2a2>
 8000998:	f1ae 0e02 	sub.w	lr, lr, #2
 800099c:	443c      	add	r4, r7
 800099e:	eba4 0409 	sub.w	r4, r4, r9
 80009a2:	fa1f f983 	uxth.w	r9, r3
 80009a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80009aa:	fb00 4413 	mls	r4, r0, r3, r4
 80009ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80009b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80009b6:	45a4      	cmp	ip, r4
 80009b8:	d907      	bls.n	80009ca <__udivmoddi4+0x1d2>
 80009ba:	193c      	adds	r4, r7, r4
 80009bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80009c0:	d267      	bcs.n	8000a92 <__udivmoddi4+0x29a>
 80009c2:	45a4      	cmp	ip, r4
 80009c4:	d965      	bls.n	8000a92 <__udivmoddi4+0x29a>
 80009c6:	3b02      	subs	r3, #2
 80009c8:	443c      	add	r4, r7
 80009ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80009ce:	fba0 9302 	umull	r9, r3, r0, r2
 80009d2:	eba4 040c 	sub.w	r4, r4, ip
 80009d6:	429c      	cmp	r4, r3
 80009d8:	46ce      	mov	lr, r9
 80009da:	469c      	mov	ip, r3
 80009dc:	d351      	bcc.n	8000a82 <__udivmoddi4+0x28a>
 80009de:	d04e      	beq.n	8000a7e <__udivmoddi4+0x286>
 80009e0:	b155      	cbz	r5, 80009f8 <__udivmoddi4+0x200>
 80009e2:	ebb8 030e 	subs.w	r3, r8, lr
 80009e6:	eb64 040c 	sbc.w	r4, r4, ip
 80009ea:	fa04 f606 	lsl.w	r6, r4, r6
 80009ee:	40cb      	lsrs	r3, r1
 80009f0:	431e      	orrs	r6, r3
 80009f2:	40cc      	lsrs	r4, r1
 80009f4:	e9c5 6400 	strd	r6, r4, [r5]
 80009f8:	2100      	movs	r1, #0
 80009fa:	e750      	b.n	800089e <__udivmoddi4+0xa6>
 80009fc:	f1c2 0320 	rsb	r3, r2, #32
 8000a00:	fa20 f103 	lsr.w	r1, r0, r3
 8000a04:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a08:	fa24 f303 	lsr.w	r3, r4, r3
 8000a0c:	4094      	lsls	r4, r2
 8000a0e:	430c      	orrs	r4, r1
 8000a10:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a14:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a18:	fa1f f78c 	uxth.w	r7, ip
 8000a1c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a20:	fb08 3110 	mls	r1, r8, r0, r3
 8000a24:	0c23      	lsrs	r3, r4, #16
 8000a26:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a2a:	fb00 f107 	mul.w	r1, r0, r7
 8000a2e:	4299      	cmp	r1, r3
 8000a30:	d908      	bls.n	8000a44 <__udivmoddi4+0x24c>
 8000a32:	eb1c 0303 	adds.w	r3, ip, r3
 8000a36:	f100 36ff 	add.w	r6, r0, #4294967295
 8000a3a:	d22c      	bcs.n	8000a96 <__udivmoddi4+0x29e>
 8000a3c:	4299      	cmp	r1, r3
 8000a3e:	d92a      	bls.n	8000a96 <__udivmoddi4+0x29e>
 8000a40:	3802      	subs	r0, #2
 8000a42:	4463      	add	r3, ip
 8000a44:	1a5b      	subs	r3, r3, r1
 8000a46:	b2a4      	uxth	r4, r4
 8000a48:	fbb3 f1f8 	udiv	r1, r3, r8
 8000a4c:	fb08 3311 	mls	r3, r8, r1, r3
 8000a50:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a54:	fb01 f307 	mul.w	r3, r1, r7
 8000a58:	42a3      	cmp	r3, r4
 8000a5a:	d908      	bls.n	8000a6e <__udivmoddi4+0x276>
 8000a5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000a60:	f101 36ff 	add.w	r6, r1, #4294967295
 8000a64:	d213      	bcs.n	8000a8e <__udivmoddi4+0x296>
 8000a66:	42a3      	cmp	r3, r4
 8000a68:	d911      	bls.n	8000a8e <__udivmoddi4+0x296>
 8000a6a:	3902      	subs	r1, #2
 8000a6c:	4464      	add	r4, ip
 8000a6e:	1ae4      	subs	r4, r4, r3
 8000a70:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000a74:	e739      	b.n	80008ea <__udivmoddi4+0xf2>
 8000a76:	4604      	mov	r4, r0
 8000a78:	e6f0      	b.n	800085c <__udivmoddi4+0x64>
 8000a7a:	4608      	mov	r0, r1
 8000a7c:	e706      	b.n	800088c <__udivmoddi4+0x94>
 8000a7e:	45c8      	cmp	r8, r9
 8000a80:	d2ae      	bcs.n	80009e0 <__udivmoddi4+0x1e8>
 8000a82:	ebb9 0e02 	subs.w	lr, r9, r2
 8000a86:	eb63 0c07 	sbc.w	ip, r3, r7
 8000a8a:	3801      	subs	r0, #1
 8000a8c:	e7a8      	b.n	80009e0 <__udivmoddi4+0x1e8>
 8000a8e:	4631      	mov	r1, r6
 8000a90:	e7ed      	b.n	8000a6e <__udivmoddi4+0x276>
 8000a92:	4603      	mov	r3, r0
 8000a94:	e799      	b.n	80009ca <__udivmoddi4+0x1d2>
 8000a96:	4630      	mov	r0, r6
 8000a98:	e7d4      	b.n	8000a44 <__udivmoddi4+0x24c>
 8000a9a:	46d6      	mov	lr, sl
 8000a9c:	e77f      	b.n	800099e <__udivmoddi4+0x1a6>
 8000a9e:	4463      	add	r3, ip
 8000aa0:	3802      	subs	r0, #2
 8000aa2:	e74d      	b.n	8000940 <__udivmoddi4+0x148>
 8000aa4:	4606      	mov	r6, r0
 8000aa6:	4623      	mov	r3, r4
 8000aa8:	4608      	mov	r0, r1
 8000aaa:	e70f      	b.n	80008cc <__udivmoddi4+0xd4>
 8000aac:	3e02      	subs	r6, #2
 8000aae:	4463      	add	r3, ip
 8000ab0:	e730      	b.n	8000914 <__udivmoddi4+0x11c>
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_idiv0>:
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <HAL_TIM_PeriodElapsedCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
	VibeCheckStrobe_PeriodElapsedUpdate(&vc.strobe);
 8000ac0:	4803      	ldr	r0, [pc, #12]	@ (8000ad0 <HAL_TIM_PeriodElapsedCallback+0x18>)
 8000ac2:	f002 fcf2 	bl	80034aa <VibeCheckStrobe_PeriodElapsedUpdate>
}
 8000ac6:	bf00      	nop
 8000ac8:	3708      	adds	r7, #8
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	24002d34 	.word	0x24002d34

08000ad4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000ad8:	f000 feb2 	bl	8001840 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000adc:	f003 f9cc 	bl	8003e78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ae0:	f000 f834 	bl	8000b4c <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000ae4:	f000 f8a2 	bl	8000c2c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ae8:	f000 fda0 	bl	800162c <MX_GPIO_Init>
  MX_DMA_Init();
 8000aec:	f000 fd76 	bl	80015dc <MX_DMA_Init>
  MX_DAC1_Init();
 8000af0:	f000 f9b2 	bl	8000e58 <MX_DAC1_Init>
  MX_I2C2_Init();
 8000af4:	f000 f9ee 	bl	8000ed4 <MX_I2C2_Init>
  MX_SPI2_Init();
 8000af8:	f000 fa2c 	bl	8000f54 <MX_SPI2_Init>
  MX_SPI3_Init();
 8000afc:	f000 fa80 	bl	8001000 <MX_SPI3_Init>
  MX_SPI4_Init();
 8000b00:	f000 fad4 	bl	80010ac <MX_SPI4_Init>
  MX_TIM4_Init();
 8000b04:	f000 fc58 	bl	80013b8 <MX_TIM4_Init>
  MX_TIM3_Init();
 8000b08:	f000 fbc8 	bl	800129c <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000b0c:	f000 fd1a 	bl	8001544 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8000b10:	f000 fb22 	bl	8001158 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000b14:	f000 fb74 	bl	8001200 <MX_TIM2_Init>
  MX_ADC1_Init();
 8000b18:	f000 f8b8 	bl	8000c8c <MX_ADC1_Init>
  MX_ADC2_Init();
 8000b1c:	f000 f932 	bl	8000d84 <MX_ADC2_Init>
  MX_UART7_Init();
 8000b20:	f000 fcc2 	bl	80014a8 <MX_UART7_Init>
  MX_USB_DEVICE_Init();
 8000b24:	f012 f860 	bl	8012be8 <MX_USB_DEVICE_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  VibeCheck_Init(&vc, &htim3, &htim1, &hdac1);
 8000b28:	4b04      	ldr	r3, [pc, #16]	@ (8000b3c <main+0x68>)
 8000b2a:	4a05      	ldr	r2, [pc, #20]	@ (8000b40 <main+0x6c>)
 8000b2c:	4905      	ldr	r1, [pc, #20]	@ (8000b44 <main+0x70>)
 8000b2e:	4806      	ldr	r0, [pc, #24]	@ (8000b48 <main+0x74>)
 8000b30:	f001 fca2 	bl	8002478 <VibeCheck_Init>

  while (1)
  {

	  VibeCheck_Loop(&vc);
 8000b34:	4804      	ldr	r0, [pc, #16]	@ (8000b48 <main+0x74>)
 8000b36:	f001 fd35 	bl	80025a4 <VibeCheck_Loop>
 8000b3a:	e7fb      	b.n	8000b34 <main+0x60>
 8000b3c:	240003c8 	.word	0x240003c8
 8000b40:	240006b8 	.word	0x240006b8
 8000b44:	24000750 	.word	0x24000750
 8000b48:	24000910 	.word	0x24000910

08000b4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b09c      	sub	sp, #112	@ 0x70
 8000b50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b52:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b56:	224c      	movs	r2, #76	@ 0x4c
 8000b58:	2100      	movs	r1, #0
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f014 f87d 	bl	8014c5a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b60:	1d3b      	adds	r3, r7, #4
 8000b62:	2220      	movs	r2, #32
 8000b64:	2100      	movs	r1, #0
 8000b66:	4618      	mov	r0, r3
 8000b68:	f014 f877 	bl	8014c5a <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000b6c:	2002      	movs	r0, #2
 8000b6e:	f008 fb03 	bl	8009178 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000b72:	2300      	movs	r3, #0
 8000b74:	603b      	str	r3, [r7, #0]
 8000b76:	4b2c      	ldr	r3, [pc, #176]	@ (8000c28 <SystemClock_Config+0xdc>)
 8000b78:	699b      	ldr	r3, [r3, #24]
 8000b7a:	4a2b      	ldr	r2, [pc, #172]	@ (8000c28 <SystemClock_Config+0xdc>)
 8000b7c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000b80:	6193      	str	r3, [r2, #24]
 8000b82:	4b29      	ldr	r3, [pc, #164]	@ (8000c28 <SystemClock_Config+0xdc>)
 8000b84:	699b      	ldr	r3, [r3, #24]
 8000b86:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000b8a:	603b      	str	r3, [r7, #0]
 8000b8c:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000b8e:	bf00      	nop
 8000b90:	4b25      	ldr	r3, [pc, #148]	@ (8000c28 <SystemClock_Config+0xdc>)
 8000b92:	699b      	ldr	r3, [r3, #24]
 8000b94:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000b98:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000b9c:	d1f8      	bne.n	8000b90 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000b9e:	2321      	movs	r3, #33	@ 0x21
 8000ba0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ba2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000ba6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000ba8:	2301      	movs	r3, #1
 8000baa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bac:	2302      	movs	r3, #2
 8000bae:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bb0:	2302      	movs	r3, #2
 8000bb2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000bb4:	2302      	movs	r3, #2
 8000bb6:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000bb8:	2328      	movs	r3, #40	@ 0x28
 8000bba:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000bbc:	2301      	movs	r3, #1
 8000bbe:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000bc0:	2302      	movs	r3, #2
 8000bc2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000bc4:	2302      	movs	r3, #2
 8000bc6:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000bc8:	230c      	movs	r3, #12
 8000bca:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bd4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f008 fb17 	bl	800920c <HAL_RCC_OscConfig>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d001      	beq.n	8000be8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000be4:	f000 fe58 	bl	8001898 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000be8:	233f      	movs	r3, #63	@ 0x3f
 8000bea:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bec:	2303      	movs	r3, #3
 8000bee:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000bf4:	2308      	movs	r3, #8
 8000bf6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000bf8:	2340      	movs	r3, #64	@ 0x40
 8000bfa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000bfc:	2340      	movs	r3, #64	@ 0x40
 8000bfe:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000c00:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c04:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000c06:	2340      	movs	r3, #64	@ 0x40
 8000c08:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000c0a:	1d3b      	adds	r3, r7, #4
 8000c0c:	2103      	movs	r1, #3
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f008 fed6 	bl	80099c0 <HAL_RCC_ClockConfig>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d001      	beq.n	8000c1e <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000c1a:	f000 fe3d 	bl	8001898 <Error_Handler>
  }
}
 8000c1e:	bf00      	nop
 8000c20:	3770      	adds	r7, #112	@ 0x70
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	58024800 	.word	0x58024800

08000c2c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b0ae      	sub	sp, #184	@ 0xb8
 8000c30:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c32:	463b      	mov	r3, r7
 8000c34:	22b8      	movs	r2, #184	@ 0xb8
 8000c36:	2100      	movs	r1, #0
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f014 f80e 	bl	8014c5a <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000c3e:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000c42:	f04f 0300 	mov.w	r3, #0
 8000c46:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 8000c4a:	2302      	movs	r3, #2
 8000c4c:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 16;
 8000c4e:	2310      	movs	r3, #16
 8000c50:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000c52:	2302      	movs	r3, #2
 8000c54:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000c56:	2302      	movs	r3, #2
 8000c58:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000c5a:	2302      	movs	r3, #2
 8000c5c:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000c5e:	23c0      	movs	r3, #192	@ 0xc0
 8000c60:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000c62:	2300      	movs	r3, #0
 8000c64:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000c66:	2300      	movs	r3, #0
 8000c68:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c70:	463b      	mov	r3, r7
 8000c72:	4618      	mov	r0, r3
 8000c74:	f009 fa30 	bl	800a0d8 <HAL_RCCEx_PeriphCLKConfig>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d001      	beq.n	8000c82 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8000c7e:	f000 fe0b 	bl	8001898 <Error_Handler>
  }
}
 8000c82:	bf00      	nop
 8000c84:	37b8      	adds	r7, #184	@ 0xb8
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
	...

08000c8c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b08c      	sub	sp, #48	@ 0x30
 8000c90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000c92:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c96:	2200      	movs	r2, #0
 8000c98:	601a      	str	r2, [r3, #0]
 8000c9a:	605a      	str	r2, [r3, #4]
 8000c9c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000c9e:	463b      	mov	r3, r7
 8000ca0:	2224      	movs	r2, #36	@ 0x24
 8000ca2:	2100      	movs	r1, #0
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f013 ffd8 	bl	8014c5a <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000caa:	4b32      	ldr	r3, [pc, #200]	@ (8000d74 <MX_ADC1_Init+0xe8>)
 8000cac:	4a32      	ldr	r2, [pc, #200]	@ (8000d78 <MX_ADC1_Init+0xec>)
 8000cae:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000cb0:	4b30      	ldr	r3, [pc, #192]	@ (8000d74 <MX_ADC1_Init+0xe8>)
 8000cb2:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000cb6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000cb8:	4b2e      	ldr	r3, [pc, #184]	@ (8000d74 <MX_ADC1_Init+0xe8>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000cbe:	4b2d      	ldr	r3, [pc, #180]	@ (8000d74 <MX_ADC1_Init+0xe8>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000cc4:	4b2b      	ldr	r3, [pc, #172]	@ (8000d74 <MX_ADC1_Init+0xe8>)
 8000cc6:	2204      	movs	r2, #4
 8000cc8:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000cca:	4b2a      	ldr	r3, [pc, #168]	@ (8000d74 <MX_ADC1_Init+0xe8>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000cd0:	4b28      	ldr	r3, [pc, #160]	@ (8000d74 <MX_ADC1_Init+0xe8>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000cd6:	4b27      	ldr	r3, [pc, #156]	@ (8000d74 <MX_ADC1_Init+0xe8>)
 8000cd8:	2201      	movs	r2, #1
 8000cda:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000cdc:	4b25      	ldr	r3, [pc, #148]	@ (8000d74 <MX_ADC1_Init+0xe8>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ce4:	4b23      	ldr	r3, [pc, #140]	@ (8000d74 <MX_ADC1_Init+0xe8>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000cea:	4b22      	ldr	r3, [pc, #136]	@ (8000d74 <MX_ADC1_Init+0xe8>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000cf0:	4b20      	ldr	r3, [pc, #128]	@ (8000d74 <MX_ADC1_Init+0xe8>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000cf6:	4b1f      	ldr	r3, [pc, #124]	@ (8000d74 <MX_ADC1_Init+0xe8>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000cfc:	4b1d      	ldr	r3, [pc, #116]	@ (8000d74 <MX_ADC1_Init+0xe8>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 8000d02:	4b1c      	ldr	r3, [pc, #112]	@ (8000d74 <MX_ADC1_Init+0xe8>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc1.Init.Oversampling.Ratio = 1;
 8000d0a:	4b1a      	ldr	r3, [pc, #104]	@ (8000d74 <MX_ADC1_Init+0xe8>)
 8000d0c:	2201      	movs	r2, #1
 8000d0e:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d10:	4818      	ldr	r0, [pc, #96]	@ (8000d74 <MX_ADC1_Init+0xe8>)
 8000d12:	f003 fbad 	bl	8004470 <HAL_ADC_Init>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d001      	beq.n	8000d20 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000d1c:	f000 fdbc 	bl	8001898 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000d20:	2300      	movs	r3, #0
 8000d22:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000d24:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d28:	4619      	mov	r1, r3
 8000d2a:	4812      	ldr	r0, [pc, #72]	@ (8000d74 <MX_ADC1_Init+0xe8>)
 8000d2c:	f004 fbec 	bl	8005508 <HAL_ADCEx_MultiModeConfigChannel>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d001      	beq.n	8000d3a <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8000d36:	f000 fdaf 	bl	8001898 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000d3a:	4b10      	ldr	r3, [pc, #64]	@ (8000d7c <MX_ADC1_Init+0xf0>)
 8000d3c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d3e:	2306      	movs	r3, #6
 8000d40:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000d42:	2300      	movs	r3, #0
 8000d44:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8000d46:	4b0e      	ldr	r3, [pc, #56]	@ (8000d80 <MX_ADC1_Init+0xf4>)
 8000d48:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000d4a:	2304      	movs	r3, #4
 8000d4c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000d52:	2300      	movs	r3, #0
 8000d54:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d58:	463b      	mov	r3, r7
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	4805      	ldr	r0, [pc, #20]	@ (8000d74 <MX_ADC1_Init+0xe8>)
 8000d5e:	f003 fd8f 	bl	8004880 <HAL_ADC_ConfigChannel>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d001      	beq.n	8000d6c <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 8000d68:	f000 fd96 	bl	8001898 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d6c:	bf00      	nop
 8000d6e:	3730      	adds	r7, #48	@ 0x30
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	240002e8 	.word	0x240002e8
 8000d78:	40022000 	.word	0x40022000
 8000d7c:	10c00010 	.word	0x10c00010
 8000d80:	47ff0000 	.word	0x47ff0000

08000d84 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b08a      	sub	sp, #40	@ 0x28
 8000d88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d8a:	1d3b      	adds	r3, r7, #4
 8000d8c:	2224      	movs	r2, #36	@ 0x24
 8000d8e:	2100      	movs	r1, #0
 8000d90:	4618      	mov	r0, r3
 8000d92:	f013 ff62 	bl	8014c5a <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000d96:	4b2c      	ldr	r3, [pc, #176]	@ (8000e48 <MX_ADC2_Init+0xc4>)
 8000d98:	4a2c      	ldr	r2, [pc, #176]	@ (8000e4c <MX_ADC2_Init+0xc8>)
 8000d9a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000d9c:	4b2a      	ldr	r3, [pc, #168]	@ (8000e48 <MX_ADC2_Init+0xc4>)
 8000d9e:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000da2:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 8000da4:	4b28      	ldr	r3, [pc, #160]	@ (8000e48 <MX_ADC2_Init+0xc4>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000daa:	4b27      	ldr	r3, [pc, #156]	@ (8000e48 <MX_ADC2_Init+0xc4>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000db0:	4b25      	ldr	r3, [pc, #148]	@ (8000e48 <MX_ADC2_Init+0xc4>)
 8000db2:	2204      	movs	r2, #4
 8000db4:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000db6:	4b24      	ldr	r3, [pc, #144]	@ (8000e48 <MX_ADC2_Init+0xc4>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000dbc:	4b22      	ldr	r3, [pc, #136]	@ (8000e48 <MX_ADC2_Init+0xc4>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 8000dc2:	4b21      	ldr	r3, [pc, #132]	@ (8000e48 <MX_ADC2_Init+0xc4>)
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000dc8:	4b1f      	ldr	r3, [pc, #124]	@ (8000e48 <MX_ADC2_Init+0xc4>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000dd0:	4b1d      	ldr	r3, [pc, #116]	@ (8000e48 <MX_ADC2_Init+0xc4>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000dd6:	4b1c      	ldr	r3, [pc, #112]	@ (8000e48 <MX_ADC2_Init+0xc4>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000ddc:	4b1a      	ldr	r3, [pc, #104]	@ (8000e48 <MX_ADC2_Init+0xc4>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000de2:	4b19      	ldr	r3, [pc, #100]	@ (8000e48 <MX_ADC2_Init+0xc4>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000de8:	4b17      	ldr	r3, [pc, #92]	@ (8000e48 <MX_ADC2_Init+0xc4>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc2.Init.OversamplingMode = DISABLE;
 8000dee:	4b16      	ldr	r3, [pc, #88]	@ (8000e48 <MX_ADC2_Init+0xc4>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc2.Init.Oversampling.Ratio = 1;
 8000df6:	4b14      	ldr	r3, [pc, #80]	@ (8000e48 <MX_ADC2_Init+0xc4>)
 8000df8:	2201      	movs	r2, #1
 8000dfa:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000dfc:	4812      	ldr	r0, [pc, #72]	@ (8000e48 <MX_ADC2_Init+0xc4>)
 8000dfe:	f003 fb37 	bl	8004470 <HAL_ADC_Init>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d001      	beq.n	8000e0c <MX_ADC2_Init+0x88>
  {
    Error_Handler();
 8000e08:	f000 fd46 	bl	8001898 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000e0c:	4b10      	ldr	r3, [pc, #64]	@ (8000e50 <MX_ADC2_Init+0xcc>)
 8000e0e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e10:	2306      	movs	r3, #6
 8000e12:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000e14:	2300      	movs	r3, #0
 8000e16:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8000e18:	4b0e      	ldr	r3, [pc, #56]	@ (8000e54 <MX_ADC2_Init+0xd0>)
 8000e1a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000e1c:	2304      	movs	r3, #4
 8000e1e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000e20:	2300      	movs	r3, #0
 8000e22:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000e24:	2300      	movs	r3, #0
 8000e26:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000e2a:	1d3b      	adds	r3, r7, #4
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	4806      	ldr	r0, [pc, #24]	@ (8000e48 <MX_ADC2_Init+0xc4>)
 8000e30:	f003 fd26 	bl	8004880 <HAL_ADC_ConfigChannel>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d001      	beq.n	8000e3e <MX_ADC2_Init+0xba>
  {
    Error_Handler();
 8000e3a:	f000 fd2d 	bl	8001898 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000e3e:	bf00      	nop
 8000e40:	3728      	adds	r7, #40	@ 0x28
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	24000358 	.word	0x24000358
 8000e4c:	40022100 	.word	0x40022100
 8000e50:	0c900008 	.word	0x0c900008
 8000e54:	47ff0000 	.word	0x47ff0000

08000e58 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b08a      	sub	sp, #40	@ 0x28
 8000e5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000e5e:	1d3b      	adds	r3, r7, #4
 8000e60:	2224      	movs	r2, #36	@ 0x24
 8000e62:	2100      	movs	r1, #0
 8000e64:	4618      	mov	r0, r3
 8000e66:	f013 fef8 	bl	8014c5a <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000e6a:	4b18      	ldr	r3, [pc, #96]	@ (8000ecc <MX_DAC1_Init+0x74>)
 8000e6c:	4a18      	ldr	r2, [pc, #96]	@ (8000ed0 <MX_DAC1_Init+0x78>)
 8000e6e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000e70:	4816      	ldr	r0, [pc, #88]	@ (8000ecc <MX_DAC1_Init+0x74>)
 8000e72:	f004 fdb3 	bl	80059dc <HAL_DAC_Init>
 8000e76:	4603      	mov	r3, r0
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d001      	beq.n	8000e80 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000e7c:	f000 fd0c 	bl	8001898 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000e80:	2300      	movs	r3, #0
 8000e82:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T1_TRGO;
 8000e84:	2306      	movs	r3, #6
 8000e86:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000e8c:	2301      	movs	r3, #1
 8000e8e:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000e90:	2300      	movs	r3, #0
 8000e92:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000e94:	1d3b      	adds	r3, r7, #4
 8000e96:	2200      	movs	r2, #0
 8000e98:	4619      	mov	r1, r3
 8000e9a:	480c      	ldr	r0, [pc, #48]	@ (8000ecc <MX_DAC1_Init+0x74>)
 8000e9c:	f004 fdc0 	bl	8005a20 <HAL_DAC_ConfigChannel>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d001      	beq.n	8000eaa <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000ea6:	f000 fcf7 	bl	8001898 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	60bb      	str	r3, [r7, #8]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000eae:	1d3b      	adds	r3, r7, #4
 8000eb0:	2210      	movs	r2, #16
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	4805      	ldr	r0, [pc, #20]	@ (8000ecc <MX_DAC1_Init+0x74>)
 8000eb6:	f004 fdb3 	bl	8005a20 <HAL_DAC_ConfigChannel>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d001      	beq.n	8000ec4 <MX_DAC1_Init+0x6c>
  {
    Error_Handler();
 8000ec0:	f000 fcea 	bl	8001898 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000ec4:	bf00      	nop
 8000ec6:	3728      	adds	r7, #40	@ 0x28
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	240003c8 	.word	0x240003c8
 8000ed0:	40007400 	.word	0x40007400

08000ed4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000ed8:	4b1b      	ldr	r3, [pc, #108]	@ (8000f48 <MX_I2C2_Init+0x74>)
 8000eda:	4a1c      	ldr	r2, [pc, #112]	@ (8000f4c <MX_I2C2_Init+0x78>)
 8000edc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x307075B1;
 8000ede:	4b1a      	ldr	r3, [pc, #104]	@ (8000f48 <MX_I2C2_Init+0x74>)
 8000ee0:	4a1b      	ldr	r2, [pc, #108]	@ (8000f50 <MX_I2C2_Init+0x7c>)
 8000ee2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000ee4:	4b18      	ldr	r3, [pc, #96]	@ (8000f48 <MX_I2C2_Init+0x74>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000eea:	4b17      	ldr	r3, [pc, #92]	@ (8000f48 <MX_I2C2_Init+0x74>)
 8000eec:	2201      	movs	r2, #1
 8000eee:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ef0:	4b15      	ldr	r3, [pc, #84]	@ (8000f48 <MX_I2C2_Init+0x74>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000ef6:	4b14      	ldr	r3, [pc, #80]	@ (8000f48 <MX_I2C2_Init+0x74>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000efc:	4b12      	ldr	r3, [pc, #72]	@ (8000f48 <MX_I2C2_Init+0x74>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f02:	4b11      	ldr	r3, [pc, #68]	@ (8000f48 <MX_I2C2_Init+0x74>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f08:	4b0f      	ldr	r3, [pc, #60]	@ (8000f48 <MX_I2C2_Init+0x74>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000f0e:	480e      	ldr	r0, [pc, #56]	@ (8000f48 <MX_I2C2_Init+0x74>)
 8000f10:	f006 fd60 	bl	80079d4 <HAL_I2C_Init>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d001      	beq.n	8000f1e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000f1a:	f000 fcbd 	bl	8001898 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f1e:	2100      	movs	r1, #0
 8000f20:	4809      	ldr	r0, [pc, #36]	@ (8000f48 <MX_I2C2_Init+0x74>)
 8000f22:	f006 fdf3 	bl	8007b0c <HAL_I2CEx_ConfigAnalogFilter>
 8000f26:	4603      	mov	r3, r0
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d001      	beq.n	8000f30 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000f2c:	f000 fcb4 	bl	8001898 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000f30:	2100      	movs	r1, #0
 8000f32:	4805      	ldr	r0, [pc, #20]	@ (8000f48 <MX_I2C2_Init+0x74>)
 8000f34:	f006 fe35 	bl	8007ba2 <HAL_I2CEx_ConfigDigitalFilter>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d001      	beq.n	8000f42 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000f3e:	f000 fcab 	bl	8001898 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000f42:	bf00      	nop
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	240004cc 	.word	0x240004cc
 8000f4c:	40005800 	.word	0x40005800
 8000f50:	307075b1 	.word	0x307075b1

08000f54 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000f58:	4b27      	ldr	r3, [pc, #156]	@ (8000ff8 <MX_SPI2_Init+0xa4>)
 8000f5a:	4a28      	ldr	r2, [pc, #160]	@ (8000ffc <MX_SPI2_Init+0xa8>)
 8000f5c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000f5e:	4b26      	ldr	r3, [pc, #152]	@ (8000ff8 <MX_SPI2_Init+0xa4>)
 8000f60:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000f64:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000f66:	4b24      	ldr	r3, [pc, #144]	@ (8000ff8 <MX_SPI2_Init+0xa4>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8000f6c:	4b22      	ldr	r3, [pc, #136]	@ (8000ff8 <MX_SPI2_Init+0xa4>)
 8000f6e:	2203      	movs	r2, #3
 8000f70:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f72:	4b21      	ldr	r3, [pc, #132]	@ (8000ff8 <MX_SPI2_Init+0xa4>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f78:	4b1f      	ldr	r3, [pc, #124]	@ (8000ff8 <MX_SPI2_Init+0xa4>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000f7e:	4b1e      	ldr	r3, [pc, #120]	@ (8000ff8 <MX_SPI2_Init+0xa4>)
 8000f80:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000f84:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000f86:	4b1c      	ldr	r3, [pc, #112]	@ (8000ff8 <MX_SPI2_Init+0xa4>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f8c:	4b1a      	ldr	r3, [pc, #104]	@ (8000ff8 <MX_SPI2_Init+0xa4>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f92:	4b19      	ldr	r3, [pc, #100]	@ (8000ff8 <MX_SPI2_Init+0xa4>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f98:	4b17      	ldr	r3, [pc, #92]	@ (8000ff8 <MX_SPI2_Init+0xa4>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8000f9e:	4b16      	ldr	r3, [pc, #88]	@ (8000ff8 <MX_SPI2_Init+0xa4>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000fa4:	4b14      	ldr	r3, [pc, #80]	@ (8000ff8 <MX_SPI2_Init+0xa4>)
 8000fa6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000faa:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000fac:	4b12      	ldr	r3, [pc, #72]	@ (8000ff8 <MX_SPI2_Init+0xa4>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000fb2:	4b11      	ldr	r3, [pc, #68]	@ (8000ff8 <MX_SPI2_Init+0xa4>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000fb8:	4b0f      	ldr	r3, [pc, #60]	@ (8000ff8 <MX_SPI2_Init+0xa4>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000fbe:	4b0e      	ldr	r3, [pc, #56]	@ (8000ff8 <MX_SPI2_Init+0xa4>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000fc4:	4b0c      	ldr	r3, [pc, #48]	@ (8000ff8 <MX_SPI2_Init+0xa4>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000fca:	4b0b      	ldr	r3, [pc, #44]	@ (8000ff8 <MX_SPI2_Init+0xa4>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000fd0:	4b09      	ldr	r3, [pc, #36]	@ (8000ff8 <MX_SPI2_Init+0xa4>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000fd6:	4b08      	ldr	r3, [pc, #32]	@ (8000ff8 <MX_SPI2_Init+0xa4>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000fdc:	4b06      	ldr	r3, [pc, #24]	@ (8000ff8 <MX_SPI2_Init+0xa4>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000fe2:	4805      	ldr	r0, [pc, #20]	@ (8000ff8 <MX_SPI2_Init+0xa4>)
 8000fe4:	f00b fc5e 	bl	800c8a4 <HAL_SPI_Init>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d001      	beq.n	8000ff2 <MX_SPI2_Init+0x9e>
  {
    Error_Handler();
 8000fee:	f000 fc53 	bl	8001898 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000ff2:	bf00      	nop
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	24000520 	.word	0x24000520
 8000ffc:	40003800 	.word	0x40003800

08001000 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001004:	4b27      	ldr	r3, [pc, #156]	@ (80010a4 <MX_SPI3_Init+0xa4>)
 8001006:	4a28      	ldr	r2, [pc, #160]	@ (80010a8 <MX_SPI3_Init+0xa8>)
 8001008:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800100a:	4b26      	ldr	r3, [pc, #152]	@ (80010a4 <MX_SPI3_Init+0xa4>)
 800100c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001010:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001012:	4b24      	ldr	r3, [pc, #144]	@ (80010a4 <MX_SPI3_Init+0xa4>)
 8001014:	2200      	movs	r2, #0
 8001016:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8001018:	4b22      	ldr	r3, [pc, #136]	@ (80010a4 <MX_SPI3_Init+0xa4>)
 800101a:	2203      	movs	r2, #3
 800101c:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800101e:	4b21      	ldr	r3, [pc, #132]	@ (80010a4 <MX_SPI3_Init+0xa4>)
 8001020:	2200      	movs	r2, #0
 8001022:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001024:	4b1f      	ldr	r3, [pc, #124]	@ (80010a4 <MX_SPI3_Init+0xa4>)
 8001026:	2200      	movs	r2, #0
 8001028:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800102a:	4b1e      	ldr	r3, [pc, #120]	@ (80010a4 <MX_SPI3_Init+0xa4>)
 800102c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001030:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001032:	4b1c      	ldr	r3, [pc, #112]	@ (80010a4 <MX_SPI3_Init+0xa4>)
 8001034:	2200      	movs	r2, #0
 8001036:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001038:	4b1a      	ldr	r3, [pc, #104]	@ (80010a4 <MX_SPI3_Init+0xa4>)
 800103a:	2200      	movs	r2, #0
 800103c:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800103e:	4b19      	ldr	r3, [pc, #100]	@ (80010a4 <MX_SPI3_Init+0xa4>)
 8001040:	2200      	movs	r2, #0
 8001042:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001044:	4b17      	ldr	r3, [pc, #92]	@ (80010a4 <MX_SPI3_Init+0xa4>)
 8001046:	2200      	movs	r2, #0
 8001048:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 800104a:	4b16      	ldr	r3, [pc, #88]	@ (80010a4 <MX_SPI3_Init+0xa4>)
 800104c:	2200      	movs	r2, #0
 800104e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001050:	4b14      	ldr	r3, [pc, #80]	@ (80010a4 <MX_SPI3_Init+0xa4>)
 8001052:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001056:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001058:	4b12      	ldr	r3, [pc, #72]	@ (80010a4 <MX_SPI3_Init+0xa4>)
 800105a:	2200      	movs	r2, #0
 800105c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800105e:	4b11      	ldr	r3, [pc, #68]	@ (80010a4 <MX_SPI3_Init+0xa4>)
 8001060:	2200      	movs	r2, #0
 8001062:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001064:	4b0f      	ldr	r3, [pc, #60]	@ (80010a4 <MX_SPI3_Init+0xa4>)
 8001066:	2200      	movs	r2, #0
 8001068:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800106a:	4b0e      	ldr	r3, [pc, #56]	@ (80010a4 <MX_SPI3_Init+0xa4>)
 800106c:	2200      	movs	r2, #0
 800106e:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001070:	4b0c      	ldr	r3, [pc, #48]	@ (80010a4 <MX_SPI3_Init+0xa4>)
 8001072:	2200      	movs	r2, #0
 8001074:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001076:	4b0b      	ldr	r3, [pc, #44]	@ (80010a4 <MX_SPI3_Init+0xa4>)
 8001078:	2200      	movs	r2, #0
 800107a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800107c:	4b09      	ldr	r3, [pc, #36]	@ (80010a4 <MX_SPI3_Init+0xa4>)
 800107e:	2200      	movs	r2, #0
 8001080:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001082:	4b08      	ldr	r3, [pc, #32]	@ (80010a4 <MX_SPI3_Init+0xa4>)
 8001084:	2200      	movs	r2, #0
 8001086:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001088:	4b06      	ldr	r3, [pc, #24]	@ (80010a4 <MX_SPI3_Init+0xa4>)
 800108a:	2200      	movs	r2, #0
 800108c:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800108e:	4805      	ldr	r0, [pc, #20]	@ (80010a4 <MX_SPI3_Init+0xa4>)
 8001090:	f00b fc08 	bl	800c8a4 <HAL_SPI_Init>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <MX_SPI3_Init+0x9e>
  {
    Error_Handler();
 800109a:	f000 fbfd 	bl	8001898 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800109e:	bf00      	nop
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	240005a8 	.word	0x240005a8
 80010a8:	40003c00 	.word	0x40003c00

080010ac <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 80010b0:	4b27      	ldr	r3, [pc, #156]	@ (8001150 <MX_SPI4_Init+0xa4>)
 80010b2:	4a28      	ldr	r2, [pc, #160]	@ (8001154 <MX_SPI4_Init+0xa8>)
 80010b4:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 80010b6:	4b26      	ldr	r3, [pc, #152]	@ (8001150 <MX_SPI4_Init+0xa4>)
 80010b8:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80010bc:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 80010be:	4b24      	ldr	r3, [pc, #144]	@ (8001150 <MX_SPI4_Init+0xa4>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_4BIT;
 80010c4:	4b22      	ldr	r3, [pc, #136]	@ (8001150 <MX_SPI4_Init+0xa4>)
 80010c6:	2203      	movs	r2, #3
 80010c8:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010ca:	4b21      	ldr	r3, [pc, #132]	@ (8001150 <MX_SPI4_Init+0xa4>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 80010d0:	4b1f      	ldr	r3, [pc, #124]	@ (8001150 <MX_SPI4_Init+0xa4>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 80010d6:	4b1e      	ldr	r3, [pc, #120]	@ (8001150 <MX_SPI4_Init+0xa4>)
 80010d8:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80010dc:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80010de:	4b1c      	ldr	r3, [pc, #112]	@ (8001150 <MX_SPI4_Init+0xa4>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010e4:	4b1a      	ldr	r3, [pc, #104]	@ (8001150 <MX_SPI4_Init+0xa4>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 80010ea:	4b19      	ldr	r3, [pc, #100]	@ (8001150 <MX_SPI4_Init+0xa4>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010f0:	4b17      	ldr	r3, [pc, #92]	@ (8001150 <MX_SPI4_Init+0xa4>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 80010f6:	4b16      	ldr	r3, [pc, #88]	@ (8001150 <MX_SPI4_Init+0xa4>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80010fc:	4b14      	ldr	r3, [pc, #80]	@ (8001150 <MX_SPI4_Init+0xa4>)
 80010fe:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001102:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001104:	4b12      	ldr	r3, [pc, #72]	@ (8001150 <MX_SPI4_Init+0xa4>)
 8001106:	2200      	movs	r2, #0
 8001108:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800110a:	4b11      	ldr	r3, [pc, #68]	@ (8001150 <MX_SPI4_Init+0xa4>)
 800110c:	2200      	movs	r2, #0
 800110e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001110:	4b0f      	ldr	r3, [pc, #60]	@ (8001150 <MX_SPI4_Init+0xa4>)
 8001112:	2200      	movs	r2, #0
 8001114:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001116:	4b0e      	ldr	r3, [pc, #56]	@ (8001150 <MX_SPI4_Init+0xa4>)
 8001118:	2200      	movs	r2, #0
 800111a:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800111c:	4b0c      	ldr	r3, [pc, #48]	@ (8001150 <MX_SPI4_Init+0xa4>)
 800111e:	2200      	movs	r2, #0
 8001120:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001122:	4b0b      	ldr	r3, [pc, #44]	@ (8001150 <MX_SPI4_Init+0xa4>)
 8001124:	2200      	movs	r2, #0
 8001126:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001128:	4b09      	ldr	r3, [pc, #36]	@ (8001150 <MX_SPI4_Init+0xa4>)
 800112a:	2200      	movs	r2, #0
 800112c:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800112e:	4b08      	ldr	r3, [pc, #32]	@ (8001150 <MX_SPI4_Init+0xa4>)
 8001130:	2200      	movs	r2, #0
 8001132:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001134:	4b06      	ldr	r3, [pc, #24]	@ (8001150 <MX_SPI4_Init+0xa4>)
 8001136:	2200      	movs	r2, #0
 8001138:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 800113a:	4805      	ldr	r0, [pc, #20]	@ (8001150 <MX_SPI4_Init+0xa4>)
 800113c:	f00b fbb2 	bl	800c8a4 <HAL_SPI_Init>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d001      	beq.n	800114a <MX_SPI4_Init+0x9e>
  {
    Error_Handler();
 8001146:	f000 fba7 	bl	8001898 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 800114a:	bf00      	nop
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	24000630 	.word	0x24000630
 8001154:	40013400 	.word	0x40013400

08001158 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b088      	sub	sp, #32
 800115c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800115e:	f107 0310 	add.w	r3, r7, #16
 8001162:	2200      	movs	r2, #0
 8001164:	601a      	str	r2, [r3, #0]
 8001166:	605a      	str	r2, [r3, #4]
 8001168:	609a      	str	r2, [r3, #8]
 800116a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800116c:	1d3b      	adds	r3, r7, #4
 800116e:	2200      	movs	r2, #0
 8001170:	601a      	str	r2, [r3, #0]
 8001172:	605a      	str	r2, [r3, #4]
 8001174:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001176:	4b20      	ldr	r3, [pc, #128]	@ (80011f8 <MX_TIM1_Init+0xa0>)
 8001178:	4a20      	ldr	r2, [pc, #128]	@ (80011fc <MX_TIM1_Init+0xa4>)
 800117a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800117c:	4b1e      	ldr	r3, [pc, #120]	@ (80011f8 <MX_TIM1_Init+0xa0>)
 800117e:	2200      	movs	r2, #0
 8001180:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001182:	4b1d      	ldr	r3, [pc, #116]	@ (80011f8 <MX_TIM1_Init+0xa0>)
 8001184:	2200      	movs	r2, #0
 8001186:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001188:	4b1b      	ldr	r3, [pc, #108]	@ (80011f8 <MX_TIM1_Init+0xa0>)
 800118a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800118e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001190:	4b19      	ldr	r3, [pc, #100]	@ (80011f8 <MX_TIM1_Init+0xa0>)
 8001192:	2200      	movs	r2, #0
 8001194:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001196:	4b18      	ldr	r3, [pc, #96]	@ (80011f8 <MX_TIM1_Init+0xa0>)
 8001198:	2200      	movs	r2, #0
 800119a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800119c:	4b16      	ldr	r3, [pc, #88]	@ (80011f8 <MX_TIM1_Init+0xa0>)
 800119e:	2200      	movs	r2, #0
 80011a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80011a2:	4815      	ldr	r0, [pc, #84]	@ (80011f8 <MX_TIM1_Init+0xa0>)
 80011a4:	f00b fcbd 	bl	800cb22 <HAL_TIM_Base_Init>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80011ae:	f000 fb73 	bl	8001898 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011b2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011b6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80011b8:	f107 0310 	add.w	r3, r7, #16
 80011bc:	4619      	mov	r1, r3
 80011be:	480e      	ldr	r0, [pc, #56]	@ (80011f8 <MX_TIM1_Init+0xa0>)
 80011c0:	f00c f9bc 	bl	800d53c <HAL_TIM_ConfigClockSource>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d001      	beq.n	80011ce <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80011ca:	f000 fb65 	bl	8001898 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80011ce:	2320      	movs	r3, #32
 80011d0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80011d2:	2300      	movs	r3, #0
 80011d4:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011d6:	2300      	movs	r3, #0
 80011d8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80011da:	1d3b      	adds	r3, r7, #4
 80011dc:	4619      	mov	r1, r3
 80011de:	4806      	ldr	r0, [pc, #24]	@ (80011f8 <MX_TIM1_Init+0xa0>)
 80011e0:	f00c ff18 	bl	800e014 <HAL_TIMEx_MasterConfigSynchronization>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d001      	beq.n	80011ee <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80011ea:	f000 fb55 	bl	8001898 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80011ee:	bf00      	nop
 80011f0:	3720      	adds	r7, #32
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	240006b8 	.word	0x240006b8
 80011fc:	40010000 	.word	0x40010000

08001200 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b088      	sub	sp, #32
 8001204:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001206:	f107 0310 	add.w	r3, r7, #16
 800120a:	2200      	movs	r2, #0
 800120c:	601a      	str	r2, [r3, #0]
 800120e:	605a      	str	r2, [r3, #4]
 8001210:	609a      	str	r2, [r3, #8]
 8001212:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001214:	1d3b      	adds	r3, r7, #4
 8001216:	2200      	movs	r2, #0
 8001218:	601a      	str	r2, [r3, #0]
 800121a:	605a      	str	r2, [r3, #4]
 800121c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800121e:	4b1e      	ldr	r3, [pc, #120]	@ (8001298 <MX_TIM2_Init+0x98>)
 8001220:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001224:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001226:	4b1c      	ldr	r3, [pc, #112]	@ (8001298 <MX_TIM2_Init+0x98>)
 8001228:	2200      	movs	r2, #0
 800122a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800122c:	4b1a      	ldr	r3, [pc, #104]	@ (8001298 <MX_TIM2_Init+0x98>)
 800122e:	2200      	movs	r2, #0
 8001230:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001232:	4b19      	ldr	r3, [pc, #100]	@ (8001298 <MX_TIM2_Init+0x98>)
 8001234:	f04f 32ff 	mov.w	r2, #4294967295
 8001238:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800123a:	4b17      	ldr	r3, [pc, #92]	@ (8001298 <MX_TIM2_Init+0x98>)
 800123c:	2200      	movs	r2, #0
 800123e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001240:	4b15      	ldr	r3, [pc, #84]	@ (8001298 <MX_TIM2_Init+0x98>)
 8001242:	2200      	movs	r2, #0
 8001244:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001246:	4814      	ldr	r0, [pc, #80]	@ (8001298 <MX_TIM2_Init+0x98>)
 8001248:	f00b fc6b 	bl	800cb22 <HAL_TIM_Base_Init>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001252:	f000 fb21 	bl	8001898 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001256:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800125a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800125c:	f107 0310 	add.w	r3, r7, #16
 8001260:	4619      	mov	r1, r3
 8001262:	480d      	ldr	r0, [pc, #52]	@ (8001298 <MX_TIM2_Init+0x98>)
 8001264:	f00c f96a 	bl	800d53c <HAL_TIM_ConfigClockSource>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800126e:	f000 fb13 	bl	8001898 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001272:	2320      	movs	r3, #32
 8001274:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001276:	2300      	movs	r3, #0
 8001278:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800127a:	1d3b      	adds	r3, r7, #4
 800127c:	4619      	mov	r1, r3
 800127e:	4806      	ldr	r0, [pc, #24]	@ (8001298 <MX_TIM2_Init+0x98>)
 8001280:	f00c fec8 	bl	800e014 <HAL_TIMEx_MasterConfigSynchronization>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800128a:	f000 fb05 	bl	8001898 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800128e:	bf00      	nop
 8001290:	3720      	adds	r7, #32
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	24000704 	.word	0x24000704

0800129c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b08e      	sub	sp, #56	@ 0x38
 80012a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012a2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80012a6:	2200      	movs	r2, #0
 80012a8:	601a      	str	r2, [r3, #0]
 80012aa:	605a      	str	r2, [r3, #4]
 80012ac:	609a      	str	r2, [r3, #8]
 80012ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012b0:	f107 031c 	add.w	r3, r7, #28
 80012b4:	2200      	movs	r2, #0
 80012b6:	601a      	str	r2, [r3, #0]
 80012b8:	605a      	str	r2, [r3, #4]
 80012ba:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012bc:	463b      	mov	r3, r7
 80012be:	2200      	movs	r2, #0
 80012c0:	601a      	str	r2, [r3, #0]
 80012c2:	605a      	str	r2, [r3, #4]
 80012c4:	609a      	str	r2, [r3, #8]
 80012c6:	60da      	str	r2, [r3, #12]
 80012c8:	611a      	str	r2, [r3, #16]
 80012ca:	615a      	str	r2, [r3, #20]
 80012cc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80012ce:	4b38      	ldr	r3, [pc, #224]	@ (80013b0 <MX_TIM3_Init+0x114>)
 80012d0:	4a38      	ldr	r2, [pc, #224]	@ (80013b4 <MX_TIM3_Init+0x118>)
 80012d2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80012d4:	4b36      	ldr	r3, [pc, #216]	@ (80013b0 <MX_TIM3_Init+0x114>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012da:	4b35      	ldr	r3, [pc, #212]	@ (80013b0 <MX_TIM3_Init+0x114>)
 80012dc:	2200      	movs	r2, #0
 80012de:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80012e0:	4b33      	ldr	r3, [pc, #204]	@ (80013b0 <MX_TIM3_Init+0x114>)
 80012e2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80012e6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012e8:	4b31      	ldr	r3, [pc, #196]	@ (80013b0 <MX_TIM3_Init+0x114>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012ee:	4b30      	ldr	r3, [pc, #192]	@ (80013b0 <MX_TIM3_Init+0x114>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80012f4:	482e      	ldr	r0, [pc, #184]	@ (80013b0 <MX_TIM3_Init+0x114>)
 80012f6:	f00b fc14 	bl	800cb22 <HAL_TIM_Base_Init>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d001      	beq.n	8001304 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001300:	f000 faca 	bl	8001898 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001304:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001308:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800130a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800130e:	4619      	mov	r1, r3
 8001310:	4827      	ldr	r0, [pc, #156]	@ (80013b0 <MX_TIM3_Init+0x114>)
 8001312:	f00c f913 	bl	800d53c <HAL_TIM_ConfigClockSource>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d001      	beq.n	8001320 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 800131c:	f000 fabc 	bl	8001898 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001320:	4823      	ldr	r0, [pc, #140]	@ (80013b0 <MX_TIM3_Init+0x114>)
 8001322:	f00b fcdb 	bl	800ccdc <HAL_TIM_PWM_Init>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d001      	beq.n	8001330 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 800132c:	f000 fab4 	bl	8001898 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001330:	2300      	movs	r3, #0
 8001332:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001334:	2300      	movs	r3, #0
 8001336:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001338:	f107 031c 	add.w	r3, r7, #28
 800133c:	4619      	mov	r1, r3
 800133e:	481c      	ldr	r0, [pc, #112]	@ (80013b0 <MX_TIM3_Init+0x114>)
 8001340:	f00c fe68 	bl	800e014 <HAL_TIMEx_MasterConfigSynchronization>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800134a:	f000 faa5 	bl	8001898 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800134e:	2360      	movs	r3, #96	@ 0x60
 8001350:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001352:	2300      	movs	r3, #0
 8001354:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001356:	2300      	movs	r3, #0
 8001358:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800135a:	2300      	movs	r3, #0
 800135c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800135e:	463b      	mov	r3, r7
 8001360:	2200      	movs	r2, #0
 8001362:	4619      	mov	r1, r3
 8001364:	4812      	ldr	r0, [pc, #72]	@ (80013b0 <MX_TIM3_Init+0x114>)
 8001366:	f00b ffd5 	bl	800d314 <HAL_TIM_PWM_ConfigChannel>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d001      	beq.n	8001374 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001370:	f000 fa92 	bl	8001898 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001374:	463b      	mov	r3, r7
 8001376:	2204      	movs	r2, #4
 8001378:	4619      	mov	r1, r3
 800137a:	480d      	ldr	r0, [pc, #52]	@ (80013b0 <MX_TIM3_Init+0x114>)
 800137c:	f00b ffca 	bl	800d314 <HAL_TIM_PWM_ConfigChannel>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d001      	beq.n	800138a <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8001386:	f000 fa87 	bl	8001898 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800138a:	463b      	mov	r3, r7
 800138c:	2208      	movs	r2, #8
 800138e:	4619      	mov	r1, r3
 8001390:	4807      	ldr	r0, [pc, #28]	@ (80013b0 <MX_TIM3_Init+0x114>)
 8001392:	f00b ffbf 	bl	800d314 <HAL_TIM_PWM_ConfigChannel>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d001      	beq.n	80013a0 <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 800139c:	f000 fa7c 	bl	8001898 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80013a0:	4803      	ldr	r0, [pc, #12]	@ (80013b0 <MX_TIM3_Init+0x114>)
 80013a2:	f000 fdb3 	bl	8001f0c <HAL_TIM_MspPostInit>

}
 80013a6:	bf00      	nop
 80013a8:	3738      	adds	r7, #56	@ 0x38
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	24000750 	.word	0x24000750
 80013b4:	40000400 	.word	0x40000400

080013b8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b08e      	sub	sp, #56	@ 0x38
 80013bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013be:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80013c2:	2200      	movs	r2, #0
 80013c4:	601a      	str	r2, [r3, #0]
 80013c6:	605a      	str	r2, [r3, #4]
 80013c8:	609a      	str	r2, [r3, #8]
 80013ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013cc:	f107 031c 	add.w	r3, r7, #28
 80013d0:	2200      	movs	r2, #0
 80013d2:	601a      	str	r2, [r3, #0]
 80013d4:	605a      	str	r2, [r3, #4]
 80013d6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013d8:	463b      	mov	r3, r7
 80013da:	2200      	movs	r2, #0
 80013dc:	601a      	str	r2, [r3, #0]
 80013de:	605a      	str	r2, [r3, #4]
 80013e0:	609a      	str	r2, [r3, #8]
 80013e2:	60da      	str	r2, [r3, #12]
 80013e4:	611a      	str	r2, [r3, #16]
 80013e6:	615a      	str	r2, [r3, #20]
 80013e8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80013ea:	4b2d      	ldr	r3, [pc, #180]	@ (80014a0 <MX_TIM4_Init+0xe8>)
 80013ec:	4a2d      	ldr	r2, [pc, #180]	@ (80014a4 <MX_TIM4_Init+0xec>)
 80013ee:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80013f0:	4b2b      	ldr	r3, [pc, #172]	@ (80014a0 <MX_TIM4_Init+0xe8>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013f6:	4b2a      	ldr	r3, [pc, #168]	@ (80014a0 <MX_TIM4_Init+0xe8>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80013fc:	4b28      	ldr	r3, [pc, #160]	@ (80014a0 <MX_TIM4_Init+0xe8>)
 80013fe:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001402:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001404:	4b26      	ldr	r3, [pc, #152]	@ (80014a0 <MX_TIM4_Init+0xe8>)
 8001406:	2200      	movs	r2, #0
 8001408:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800140a:	4b25      	ldr	r3, [pc, #148]	@ (80014a0 <MX_TIM4_Init+0xe8>)
 800140c:	2200      	movs	r2, #0
 800140e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001410:	4823      	ldr	r0, [pc, #140]	@ (80014a0 <MX_TIM4_Init+0xe8>)
 8001412:	f00b fb86 	bl	800cb22 <HAL_TIM_Base_Init>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d001      	beq.n	8001420 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 800141c:	f000 fa3c 	bl	8001898 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001420:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001424:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001426:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800142a:	4619      	mov	r1, r3
 800142c:	481c      	ldr	r0, [pc, #112]	@ (80014a0 <MX_TIM4_Init+0xe8>)
 800142e:	f00c f885 	bl	800d53c <HAL_TIM_ConfigClockSource>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d001      	beq.n	800143c <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8001438:	f000 fa2e 	bl	8001898 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800143c:	4818      	ldr	r0, [pc, #96]	@ (80014a0 <MX_TIM4_Init+0xe8>)
 800143e:	f00b fc4d 	bl	800ccdc <HAL_TIM_PWM_Init>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d001      	beq.n	800144c <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8001448:	f000 fa26 	bl	8001898 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800144c:	2300      	movs	r3, #0
 800144e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001450:	2300      	movs	r3, #0
 8001452:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001454:	f107 031c 	add.w	r3, r7, #28
 8001458:	4619      	mov	r1, r3
 800145a:	4811      	ldr	r0, [pc, #68]	@ (80014a0 <MX_TIM4_Init+0xe8>)
 800145c:	f00c fdda 	bl	800e014 <HAL_TIMEx_MasterConfigSynchronization>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d001      	beq.n	800146a <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8001466:	f000 fa17 	bl	8001898 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800146a:	2360      	movs	r3, #96	@ 0x60
 800146c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800146e:	2300      	movs	r3, #0
 8001470:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001472:	2300      	movs	r3, #0
 8001474:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001476:	2300      	movs	r3, #0
 8001478:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800147a:	463b      	mov	r3, r7
 800147c:	2200      	movs	r2, #0
 800147e:	4619      	mov	r1, r3
 8001480:	4807      	ldr	r0, [pc, #28]	@ (80014a0 <MX_TIM4_Init+0xe8>)
 8001482:	f00b ff47 	bl	800d314 <HAL_TIM_PWM_ConfigChannel>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d001      	beq.n	8001490 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 800148c:	f000 fa04 	bl	8001898 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001490:	4803      	ldr	r0, [pc, #12]	@ (80014a0 <MX_TIM4_Init+0xe8>)
 8001492:	f000 fd3b 	bl	8001f0c <HAL_TIM_MspPostInit>

}
 8001496:	bf00      	nop
 8001498:	3738      	adds	r7, #56	@ 0x38
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	2400079c 	.word	0x2400079c
 80014a4:	40000800 	.word	0x40000800

080014a8 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 80014ac:	4b23      	ldr	r3, [pc, #140]	@ (800153c <MX_UART7_Init+0x94>)
 80014ae:	4a24      	ldr	r2, [pc, #144]	@ (8001540 <MX_UART7_Init+0x98>)
 80014b0:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 80014b2:	4b22      	ldr	r3, [pc, #136]	@ (800153c <MX_UART7_Init+0x94>)
 80014b4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80014b8:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 80014ba:	4b20      	ldr	r3, [pc, #128]	@ (800153c <MX_UART7_Init+0x94>)
 80014bc:	2200      	movs	r2, #0
 80014be:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 80014c0:	4b1e      	ldr	r3, [pc, #120]	@ (800153c <MX_UART7_Init+0x94>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 80014c6:	4b1d      	ldr	r3, [pc, #116]	@ (800153c <MX_UART7_Init+0x94>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 80014cc:	4b1b      	ldr	r3, [pc, #108]	@ (800153c <MX_UART7_Init+0x94>)
 80014ce:	220c      	movs	r2, #12
 80014d0:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 80014d2:	4b1a      	ldr	r3, [pc, #104]	@ (800153c <MX_UART7_Init+0x94>)
 80014d4:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80014d8:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 80014da:	4b18      	ldr	r3, [pc, #96]	@ (800153c <MX_UART7_Init+0x94>)
 80014dc:	2200      	movs	r2, #0
 80014de:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014e0:	4b16      	ldr	r3, [pc, #88]	@ (800153c <MX_UART7_Init+0x94>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80014e6:	4b15      	ldr	r3, [pc, #84]	@ (800153c <MX_UART7_Init+0x94>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	625a      	str	r2, [r3, #36]	@ 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014ec:	4b13      	ldr	r3, [pc, #76]	@ (800153c <MX_UART7_Init+0x94>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 80014f2:	4812      	ldr	r0, [pc, #72]	@ (800153c <MX_UART7_Init+0x94>)
 80014f4:	f00c fe48 	bl	800e188 <HAL_UART_Init>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d001      	beq.n	8001502 <MX_UART7_Init+0x5a>
  {
    Error_Handler();
 80014fe:	f000 f9cb 	bl	8001898 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001502:	2100      	movs	r1, #0
 8001504:	480d      	ldr	r0, [pc, #52]	@ (800153c <MX_UART7_Init+0x94>)
 8001506:	f00d ff54 	bl	800f3b2 <HAL_UARTEx_SetTxFifoThreshold>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d001      	beq.n	8001514 <MX_UART7_Init+0x6c>
  {
    Error_Handler();
 8001510:	f000 f9c2 	bl	8001898 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001514:	2100      	movs	r1, #0
 8001516:	4809      	ldr	r0, [pc, #36]	@ (800153c <MX_UART7_Init+0x94>)
 8001518:	f00d ff89 	bl	800f42e <HAL_UARTEx_SetRxFifoThreshold>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d001      	beq.n	8001526 <MX_UART7_Init+0x7e>
  {
    Error_Handler();
 8001522:	f000 f9b9 	bl	8001898 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 8001526:	4805      	ldr	r0, [pc, #20]	@ (800153c <MX_UART7_Init+0x94>)
 8001528:	f00d ff0a 	bl	800f340 <HAL_UARTEx_DisableFifoMode>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d001      	beq.n	8001536 <MX_UART7_Init+0x8e>
  {
    Error_Handler();
 8001532:	f000 f9b1 	bl	8001898 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8001536:	bf00      	nop
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	240007e8 	.word	0x240007e8
 8001540:	40007800 	.word	0x40007800

08001544 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001548:	4b22      	ldr	r3, [pc, #136]	@ (80015d4 <MX_USART1_UART_Init+0x90>)
 800154a:	4a23      	ldr	r2, [pc, #140]	@ (80015d8 <MX_USART1_UART_Init+0x94>)
 800154c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800154e:	4b21      	ldr	r3, [pc, #132]	@ (80015d4 <MX_USART1_UART_Init+0x90>)
 8001550:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001554:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001556:	4b1f      	ldr	r3, [pc, #124]	@ (80015d4 <MX_USART1_UART_Init+0x90>)
 8001558:	2200      	movs	r2, #0
 800155a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800155c:	4b1d      	ldr	r3, [pc, #116]	@ (80015d4 <MX_USART1_UART_Init+0x90>)
 800155e:	2200      	movs	r2, #0
 8001560:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001562:	4b1c      	ldr	r3, [pc, #112]	@ (80015d4 <MX_USART1_UART_Init+0x90>)
 8001564:	2200      	movs	r2, #0
 8001566:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001568:	4b1a      	ldr	r3, [pc, #104]	@ (80015d4 <MX_USART1_UART_Init+0x90>)
 800156a:	220c      	movs	r2, #12
 800156c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800156e:	4b19      	ldr	r3, [pc, #100]	@ (80015d4 <MX_USART1_UART_Init+0x90>)
 8001570:	2200      	movs	r2, #0
 8001572:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001574:	4b17      	ldr	r3, [pc, #92]	@ (80015d4 <MX_USART1_UART_Init+0x90>)
 8001576:	2200      	movs	r2, #0
 8001578:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800157a:	4b16      	ldr	r3, [pc, #88]	@ (80015d4 <MX_USART1_UART_Init+0x90>)
 800157c:	2200      	movs	r2, #0
 800157e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001580:	4b14      	ldr	r3, [pc, #80]	@ (80015d4 <MX_USART1_UART_Init+0x90>)
 8001582:	2200      	movs	r2, #0
 8001584:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001586:	4b13      	ldr	r3, [pc, #76]	@ (80015d4 <MX_USART1_UART_Init+0x90>)
 8001588:	2200      	movs	r2, #0
 800158a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800158c:	4811      	ldr	r0, [pc, #68]	@ (80015d4 <MX_USART1_UART_Init+0x90>)
 800158e:	f00c fdfb 	bl	800e188 <HAL_UART_Init>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d001      	beq.n	800159c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001598:	f000 f97e 	bl	8001898 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800159c:	2100      	movs	r1, #0
 800159e:	480d      	ldr	r0, [pc, #52]	@ (80015d4 <MX_USART1_UART_Init+0x90>)
 80015a0:	f00d ff07 	bl	800f3b2 <HAL_UARTEx_SetTxFifoThreshold>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d001      	beq.n	80015ae <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80015aa:	f000 f975 	bl	8001898 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015ae:	2100      	movs	r1, #0
 80015b0:	4808      	ldr	r0, [pc, #32]	@ (80015d4 <MX_USART1_UART_Init+0x90>)
 80015b2:	f00d ff3c 	bl	800f42e <HAL_UARTEx_SetRxFifoThreshold>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d001      	beq.n	80015c0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80015bc:	f000 f96c 	bl	8001898 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80015c0:	4804      	ldr	r0, [pc, #16]	@ (80015d4 <MX_USART1_UART_Init+0x90>)
 80015c2:	f00d febd 	bl	800f340 <HAL_UARTEx_DisableFifoMode>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d001      	beq.n	80015d0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80015cc:	f000 f964 	bl	8001898 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80015d0:	bf00      	nop
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	2400087c 	.word	0x2400087c
 80015d8:	40011000 	.word	0x40011000

080015dc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80015e2:	4b11      	ldr	r3, [pc, #68]	@ (8001628 <MX_DMA_Init+0x4c>)
 80015e4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80015e8:	4a0f      	ldr	r2, [pc, #60]	@ (8001628 <MX_DMA_Init+0x4c>)
 80015ea:	f043 0301 	orr.w	r3, r3, #1
 80015ee:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80015f2:	4b0d      	ldr	r3, [pc, #52]	@ (8001628 <MX_DMA_Init+0x4c>)
 80015f4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80015f8:	f003 0301 	and.w	r3, r3, #1
 80015fc:	607b      	str	r3, [r7, #4]
 80015fe:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001600:	2200      	movs	r2, #0
 8001602:	2100      	movs	r1, #0
 8001604:	200b      	movs	r0, #11
 8001606:	f004 f93c 	bl	8005882 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800160a:	200b      	movs	r0, #11
 800160c:	f004 f953 	bl	80058b6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001610:	2200      	movs	r2, #0
 8001612:	2100      	movs	r1, #0
 8001614:	200c      	movs	r0, #12
 8001616:	f004 f934 	bl	8005882 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800161a:	200c      	movs	r0, #12
 800161c:	f004 f94b 	bl	80058b6 <HAL_NVIC_EnableIRQ>

}
 8001620:	bf00      	nop
 8001622:	3708      	adds	r7, #8
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}
 8001628:	58024400 	.word	0x58024400

0800162c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b08c      	sub	sp, #48	@ 0x30
 8001630:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001632:	f107 031c 	add.w	r3, r7, #28
 8001636:	2200      	movs	r2, #0
 8001638:	601a      	str	r2, [r3, #0]
 800163a:	605a      	str	r2, [r3, #4]
 800163c:	609a      	str	r2, [r3, #8]
 800163e:	60da      	str	r2, [r3, #12]
 8001640:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001642:	4b79      	ldr	r3, [pc, #484]	@ (8001828 <MX_GPIO_Init+0x1fc>)
 8001644:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001648:	4a77      	ldr	r2, [pc, #476]	@ (8001828 <MX_GPIO_Init+0x1fc>)
 800164a:	f043 0310 	orr.w	r3, r3, #16
 800164e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001652:	4b75      	ldr	r3, [pc, #468]	@ (8001828 <MX_GPIO_Init+0x1fc>)
 8001654:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001658:	f003 0310 	and.w	r3, r3, #16
 800165c:	61bb      	str	r3, [r7, #24]
 800165e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001660:	4b71      	ldr	r3, [pc, #452]	@ (8001828 <MX_GPIO_Init+0x1fc>)
 8001662:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001666:	4a70      	ldr	r2, [pc, #448]	@ (8001828 <MX_GPIO_Init+0x1fc>)
 8001668:	f043 0304 	orr.w	r3, r3, #4
 800166c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001670:	4b6d      	ldr	r3, [pc, #436]	@ (8001828 <MX_GPIO_Init+0x1fc>)
 8001672:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001676:	f003 0304 	and.w	r3, r3, #4
 800167a:	617b      	str	r3, [r7, #20]
 800167c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800167e:	4b6a      	ldr	r3, [pc, #424]	@ (8001828 <MX_GPIO_Init+0x1fc>)
 8001680:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001684:	4a68      	ldr	r2, [pc, #416]	@ (8001828 <MX_GPIO_Init+0x1fc>)
 8001686:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800168a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800168e:	4b66      	ldr	r3, [pc, #408]	@ (8001828 <MX_GPIO_Init+0x1fc>)
 8001690:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001694:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001698:	613b      	str	r3, [r7, #16]
 800169a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800169c:	4b62      	ldr	r3, [pc, #392]	@ (8001828 <MX_GPIO_Init+0x1fc>)
 800169e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016a2:	4a61      	ldr	r2, [pc, #388]	@ (8001828 <MX_GPIO_Init+0x1fc>)
 80016a4:	f043 0301 	orr.w	r3, r3, #1
 80016a8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80016ac:	4b5e      	ldr	r3, [pc, #376]	@ (8001828 <MX_GPIO_Init+0x1fc>)
 80016ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016b2:	f003 0301 	and.w	r3, r3, #1
 80016b6:	60fb      	str	r3, [r7, #12]
 80016b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016ba:	4b5b      	ldr	r3, [pc, #364]	@ (8001828 <MX_GPIO_Init+0x1fc>)
 80016bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016c0:	4a59      	ldr	r2, [pc, #356]	@ (8001828 <MX_GPIO_Init+0x1fc>)
 80016c2:	f043 0302 	orr.w	r3, r3, #2
 80016c6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80016ca:	4b57      	ldr	r3, [pc, #348]	@ (8001828 <MX_GPIO_Init+0x1fc>)
 80016cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016d0:	f003 0302 	and.w	r3, r3, #2
 80016d4:	60bb      	str	r3, [r7, #8]
 80016d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016d8:	4b53      	ldr	r3, [pc, #332]	@ (8001828 <MX_GPIO_Init+0x1fc>)
 80016da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016de:	4a52      	ldr	r2, [pc, #328]	@ (8001828 <MX_GPIO_Init+0x1fc>)
 80016e0:	f043 0308 	orr.w	r3, r3, #8
 80016e4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80016e8:	4b4f      	ldr	r3, [pc, #316]	@ (8001828 <MX_GPIO_Init+0x1fc>)
 80016ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016ee:	f003 0308 	and.w	r3, r3, #8
 80016f2:	607b      	str	r3, [r7, #4]
 80016f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI4_CS_GPIO_Port, SPI4_CS_Pin, GPIO_PIN_RESET);
 80016f6:	2200      	movs	r2, #0
 80016f8:	2110      	movs	r1, #16
 80016fa:	484c      	ldr	r0, [pc, #304]	@ (800182c <MX_GPIO_Init+0x200>)
 80016fc:	f006 f950 	bl	80079a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIO_TIMING2_GPIO_Port, GPIO_TIMING2_Pin, GPIO_PIN_RESET);
 8001700:	2200      	movs	r2, #0
 8001702:	2104      	movs	r1, #4
 8001704:	484a      	ldr	r0, [pc, #296]	@ (8001830 <MX_GPIO_Init+0x204>)
 8001706:	f006 f94b 	bl	80079a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_TIMING1_Pin|MUTE_INDICATOR_Pin|MUTE_SIGNAL_Pin, GPIO_PIN_RESET);
 800170a:	2200      	movs	r2, #0
 800170c:	210b      	movs	r1, #11
 800170e:	4849      	ldr	r0, [pc, #292]	@ (8001834 <MX_GPIO_Init+0x208>)
 8001710:	f006 f946 	bl	80079a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ACCEL_NCS1_Pin|RECORD_INDICATOR_Pin, GPIO_PIN_RESET);
 8001714:	2200      	movs	r2, #0
 8001716:	f44f 5188 	mov.w	r1, #4352	@ 0x1100
 800171a:	4847      	ldr	r0, [pc, #284]	@ (8001838 <MX_GPIO_Init+0x20c>)
 800171c:	f006 f940 	bl	80079a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 8001720:	2200      	movs	r2, #0
 8001722:	2101      	movs	r1, #1
 8001724:	4845      	ldr	r0, [pc, #276]	@ (800183c <MX_GPIO_Init+0x210>)
 8001726:	f006 f93b 	bl	80079a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI4_INT1_Pin */
  GPIO_InitStruct.Pin = SPI4_INT1_Pin;
 800172a:	2308      	movs	r3, #8
 800172c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800172e:	2300      	movs	r3, #0
 8001730:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001732:	2300      	movs	r3, #0
 8001734:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(SPI4_INT1_GPIO_Port, &GPIO_InitStruct);
 8001736:	f107 031c 	add.w	r3, r7, #28
 800173a:	4619      	mov	r1, r3
 800173c:	483b      	ldr	r0, [pc, #236]	@ (800182c <MX_GPIO_Init+0x200>)
 800173e:	f005 ff6f 	bl	8007620 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI4_CS_Pin */
  GPIO_InitStruct.Pin = SPI4_CS_Pin;
 8001742:	2310      	movs	r3, #16
 8001744:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001746:	2301      	movs	r3, #1
 8001748:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174a:	2300      	movs	r3, #0
 800174c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800174e:	2300      	movs	r3, #0
 8001750:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(SPI4_CS_GPIO_Port, &GPIO_InitStruct);
 8001752:	f107 031c 	add.w	r3, r7, #28
 8001756:	4619      	mov	r1, r3
 8001758:	4834      	ldr	r0, [pc, #208]	@ (800182c <MX_GPIO_Init+0x200>)
 800175a:	f005 ff61 	bl	8007620 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 DAC_EXT_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_13|DAC_EXT_Pin;
 800175e:	f44f 5308 	mov.w	r3, #8704	@ 0x2200
 8001762:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001764:	2300      	movs	r3, #0
 8001766:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001768:	2300      	movs	r3, #0
 800176a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800176c:	f107 031c 	add.w	r3, r7, #28
 8001770:	4619      	mov	r1, r3
 8001772:	482f      	ldr	r0, [pc, #188]	@ (8001830 <MX_GPIO_Init+0x204>)
 8001774:	f005 ff54 	bl	8007620 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_TIMING2_Pin */
  GPIO_InitStruct.Pin = GPIO_TIMING2_Pin;
 8001778:	2304      	movs	r3, #4
 800177a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800177c:	2301      	movs	r3, #1
 800177e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001780:	2300      	movs	r3, #0
 8001782:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001784:	2300      	movs	r3, #0
 8001786:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIO_TIMING2_GPIO_Port, &GPIO_InitStruct);
 8001788:	f107 031c 	add.w	r3, r7, #28
 800178c:	4619      	mov	r1, r3
 800178e:	4828      	ldr	r0, [pc, #160]	@ (8001830 <MX_GPIO_Init+0x204>)
 8001790:	f005 ff46 	bl	8007620 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_TIMING1_Pin MUTE_INDICATOR_Pin MUTE_SIGNAL_Pin */
  GPIO_InitStruct.Pin = GPIO_TIMING1_Pin|MUTE_INDICATOR_Pin|MUTE_SIGNAL_Pin;
 8001794:	230b      	movs	r3, #11
 8001796:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001798:	2301      	movs	r3, #1
 800179a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179c:	2300      	movs	r3, #0
 800179e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017a0:	2300      	movs	r3, #0
 80017a2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017a4:	f107 031c 	add.w	r3, r7, #28
 80017a8:	4619      	mov	r1, r3
 80017aa:	4822      	ldr	r0, [pc, #136]	@ (8001834 <MX_GPIO_Init+0x208>)
 80017ac:	f005 ff38 	bl	8007620 <HAL_GPIO_Init>

  /*Configure GPIO pins : MUTE_BUTTON_Pin BIG_RED_BUTTON_Pin */
  GPIO_InitStruct.Pin = MUTE_BUTTON_Pin|BIG_RED_BUTTON_Pin;
 80017b0:	f248 0304 	movw	r3, #32772	@ 0x8004
 80017b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017b6:	2300      	movs	r3, #0
 80017b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ba:	2300      	movs	r3, #0
 80017bc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017be:	f107 031c 	add.w	r3, r7, #28
 80017c2:	4619      	mov	r1, r3
 80017c4:	481b      	ldr	r0, [pc, #108]	@ (8001834 <MX_GPIO_Init+0x208>)
 80017c6:	f005 ff2b 	bl	8007620 <HAL_GPIO_Init>

  /*Configure GPIO pins : ACCEL_NCS1_Pin RECORD_INDICATOR_Pin */
  GPIO_InitStruct.Pin = ACCEL_NCS1_Pin|RECORD_INDICATOR_Pin;
 80017ca:	f44f 5388 	mov.w	r3, #4352	@ 0x1100
 80017ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017d0:	2301      	movs	r3, #1
 80017d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d4:	2300      	movs	r3, #0
 80017d6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017d8:	2300      	movs	r3, #0
 80017da:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017dc:	f107 031c 	add.w	r3, r7, #28
 80017e0:	4619      	mov	r1, r3
 80017e2:	4815      	ldr	r0, [pc, #84]	@ (8001838 <MX_GPIO_Init+0x20c>)
 80017e4:	f005 ff1c 	bl	8007620 <HAL_GPIO_Init>

  /*Configure GPIO pins : ACCEL_INTA1_Pin ACCEL_INTB1_Pin SPI3_INT1_Pin SPI3_INT2_Pin */
  GPIO_InitStruct.Pin = ACCEL_INTA1_Pin|ACCEL_INTB1_Pin|SPI3_INT1_Pin|SPI3_INT2_Pin;
 80017e8:	f240 3306 	movw	r3, #774	@ 0x306
 80017ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017ee:	2300      	movs	r3, #0
 80017f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f2:	2300      	movs	r3, #0
 80017f4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017f6:	f107 031c 	add.w	r3, r7, #28
 80017fa:	4619      	mov	r1, r3
 80017fc:	480f      	ldr	r0, [pc, #60]	@ (800183c <MX_GPIO_Init+0x210>)
 80017fe:	f005 ff0f 	bl	8007620 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI3_CS_Pin */
  GPIO_InitStruct.Pin = SPI3_CS_Pin;
 8001802:	2301      	movs	r3, #1
 8001804:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001806:	2301      	movs	r3, #1
 8001808:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180a:	2300      	movs	r3, #0
 800180c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800180e:	2300      	movs	r3, #0
 8001810:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(SPI3_CS_GPIO_Port, &GPIO_InitStruct);
 8001812:	f107 031c 	add.w	r3, r7, #28
 8001816:	4619      	mov	r1, r3
 8001818:	4808      	ldr	r0, [pc, #32]	@ (800183c <MX_GPIO_Init+0x210>)
 800181a:	f005 ff01 	bl	8007620 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800181e:	bf00      	nop
 8001820:	3730      	adds	r7, #48	@ 0x30
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	58024400 	.word	0x58024400
 800182c:	58021000 	.word	0x58021000
 8001830:	58020800 	.word	0x58020800
 8001834:	58020000 	.word	0x58020000
 8001838:	58020400 	.word	0x58020400
 800183c:	58020c00 	.word	0x58020c00

08001840 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b084      	sub	sp, #16
 8001844:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001846:	463b      	mov	r3, r7
 8001848:	2200      	movs	r2, #0
 800184a:	601a      	str	r2, [r3, #0]
 800184c:	605a      	str	r2, [r3, #4]
 800184e:	609a      	str	r2, [r3, #8]
 8001850:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8001852:	f004 f84b 	bl	80058ec <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001856:	2301      	movs	r3, #1
 8001858:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800185a:	2300      	movs	r3, #0
 800185c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 800185e:	2300      	movs	r3, #0
 8001860:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8001862:	231f      	movs	r3, #31
 8001864:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8001866:	2387      	movs	r3, #135	@ 0x87
 8001868:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800186a:	2300      	movs	r3, #0
 800186c:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800186e:	2300      	movs	r3, #0
 8001870:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001872:	2301      	movs	r3, #1
 8001874:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001876:	2301      	movs	r3, #1
 8001878:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800187a:	2300      	movs	r3, #0
 800187c:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800187e:	2300      	movs	r3, #0
 8001880:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001882:	463b      	mov	r3, r7
 8001884:	4618      	mov	r0, r3
 8001886:	f004 f869 	bl	800595c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800188a:	2004      	movs	r0, #4
 800188c:	f004 f846 	bl	800591c <HAL_MPU_Enable>

}
 8001890:	bf00      	nop
 8001892:	3710      	adds	r7, #16
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}

08001898 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800189c:	b672      	cpsid	i
}
 800189e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018a0:	bf00      	nop
 80018a2:	e7fd      	b.n	80018a0 <Error_Handler+0x8>

080018a4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b083      	sub	sp, #12
 80018a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018aa:	4b0a      	ldr	r3, [pc, #40]	@ (80018d4 <HAL_MspInit+0x30>)
 80018ac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80018b0:	4a08      	ldr	r2, [pc, #32]	@ (80018d4 <HAL_MspInit+0x30>)
 80018b2:	f043 0302 	orr.w	r3, r3, #2
 80018b6:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80018ba:	4b06      	ldr	r3, [pc, #24]	@ (80018d4 <HAL_MspInit+0x30>)
 80018bc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80018c0:	f003 0302 	and.w	r3, r3, #2
 80018c4:	607b      	str	r3, [r7, #4]
 80018c6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018c8:	bf00      	nop
 80018ca:	370c      	adds	r7, #12
 80018cc:	46bd      	mov	sp, r7
 80018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d2:	4770      	bx	lr
 80018d4:	58024400 	.word	0x58024400

080018d8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b08c      	sub	sp, #48	@ 0x30
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018e0:	f107 031c 	add.w	r3, r7, #28
 80018e4:	2200      	movs	r2, #0
 80018e6:	601a      	str	r2, [r3, #0]
 80018e8:	605a      	str	r2, [r3, #4]
 80018ea:	609a      	str	r2, [r3, #8]
 80018ec:	60da      	str	r2, [r3, #12]
 80018ee:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a39      	ldr	r2, [pc, #228]	@ (80019dc <HAL_ADC_MspInit+0x104>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d133      	bne.n	8001962 <HAL_ADC_MspInit+0x8a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80018fa:	4b39      	ldr	r3, [pc, #228]	@ (80019e0 <HAL_ADC_MspInit+0x108>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	3301      	adds	r3, #1
 8001900:	4a37      	ldr	r2, [pc, #220]	@ (80019e0 <HAL_ADC_MspInit+0x108>)
 8001902:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001904:	4b36      	ldr	r3, [pc, #216]	@ (80019e0 <HAL_ADC_MspInit+0x108>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	2b01      	cmp	r3, #1
 800190a:	d10e      	bne.n	800192a <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800190c:	4b35      	ldr	r3, [pc, #212]	@ (80019e4 <HAL_ADC_MspInit+0x10c>)
 800190e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001912:	4a34      	ldr	r2, [pc, #208]	@ (80019e4 <HAL_ADC_MspInit+0x10c>)
 8001914:	f043 0320 	orr.w	r3, r3, #32
 8001918:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800191c:	4b31      	ldr	r3, [pc, #196]	@ (80019e4 <HAL_ADC_MspInit+0x10c>)
 800191e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001922:	f003 0320 	and.w	r3, r3, #32
 8001926:	61bb      	str	r3, [r7, #24]
 8001928:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800192a:	4b2e      	ldr	r3, [pc, #184]	@ (80019e4 <HAL_ADC_MspInit+0x10c>)
 800192c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001930:	4a2c      	ldr	r2, [pc, #176]	@ (80019e4 <HAL_ADC_MspInit+0x10c>)
 8001932:	f043 0304 	orr.w	r3, r3, #4
 8001936:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800193a:	4b2a      	ldr	r3, [pc, #168]	@ (80019e4 <HAL_ADC_MspInit+0x10c>)
 800193c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001940:	f003 0304 	and.w	r3, r3, #4
 8001944:	617b      	str	r3, [r7, #20]
 8001946:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001948:	2330      	movs	r3, #48	@ 0x30
 800194a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800194c:	2303      	movs	r3, #3
 800194e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001950:	2300      	movs	r3, #0
 8001952:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001954:	f107 031c 	add.w	r3, r7, #28
 8001958:	4619      	mov	r1, r3
 800195a:	4823      	ldr	r0, [pc, #140]	@ (80019e8 <HAL_ADC_MspInit+0x110>)
 800195c:	f005 fe60 	bl	8007620 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001960:	e037      	b.n	80019d2 <HAL_ADC_MspInit+0xfa>
  else if(hadc->Instance==ADC2)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4a21      	ldr	r2, [pc, #132]	@ (80019ec <HAL_ADC_MspInit+0x114>)
 8001968:	4293      	cmp	r3, r2
 800196a:	d132      	bne.n	80019d2 <HAL_ADC_MspInit+0xfa>
    HAL_RCC_ADC12_CLK_ENABLED++;
 800196c:	4b1c      	ldr	r3, [pc, #112]	@ (80019e0 <HAL_ADC_MspInit+0x108>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	3301      	adds	r3, #1
 8001972:	4a1b      	ldr	r2, [pc, #108]	@ (80019e0 <HAL_ADC_MspInit+0x108>)
 8001974:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001976:	4b1a      	ldr	r3, [pc, #104]	@ (80019e0 <HAL_ADC_MspInit+0x108>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	2b01      	cmp	r3, #1
 800197c:	d10e      	bne.n	800199c <HAL_ADC_MspInit+0xc4>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800197e:	4b19      	ldr	r3, [pc, #100]	@ (80019e4 <HAL_ADC_MspInit+0x10c>)
 8001980:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001984:	4a17      	ldr	r2, [pc, #92]	@ (80019e4 <HAL_ADC_MspInit+0x10c>)
 8001986:	f043 0320 	orr.w	r3, r3, #32
 800198a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800198e:	4b15      	ldr	r3, [pc, #84]	@ (80019e4 <HAL_ADC_MspInit+0x10c>)
 8001990:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001994:	f003 0320 	and.w	r3, r3, #32
 8001998:	613b      	str	r3, [r7, #16]
 800199a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800199c:	4b11      	ldr	r3, [pc, #68]	@ (80019e4 <HAL_ADC_MspInit+0x10c>)
 800199e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80019a2:	4a10      	ldr	r2, [pc, #64]	@ (80019e4 <HAL_ADC_MspInit+0x10c>)
 80019a4:	f043 0301 	orr.w	r3, r3, #1
 80019a8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80019ac:	4b0d      	ldr	r3, [pc, #52]	@ (80019e4 <HAL_ADC_MspInit+0x10c>)
 80019ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80019b2:	f003 0301 	and.w	r3, r3, #1
 80019b6:	60fb      	str	r3, [r7, #12]
 80019b8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80019ba:	23c0      	movs	r3, #192	@ 0xc0
 80019bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019be:	2303      	movs	r3, #3
 80019c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c2:	2300      	movs	r3, #0
 80019c4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019c6:	f107 031c 	add.w	r3, r7, #28
 80019ca:	4619      	mov	r1, r3
 80019cc:	4808      	ldr	r0, [pc, #32]	@ (80019f0 <HAL_ADC_MspInit+0x118>)
 80019ce:	f005 fe27 	bl	8007620 <HAL_GPIO_Init>
}
 80019d2:	bf00      	nop
 80019d4:	3730      	adds	r7, #48	@ 0x30
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	40022000 	.word	0x40022000
 80019e0:	24004f1c 	.word	0x24004f1c
 80019e4:	58024400 	.word	0x58024400
 80019e8:	58020800 	.word	0x58020800
 80019ec:	40022100 	.word	0x40022100
 80019f0:	58020000 	.word	0x58020000

080019f4 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b08a      	sub	sp, #40	@ 0x28
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019fc:	f107 0314 	add.w	r3, r7, #20
 8001a00:	2200      	movs	r2, #0
 8001a02:	601a      	str	r2, [r3, #0]
 8001a04:	605a      	str	r2, [r3, #4]
 8001a06:	609a      	str	r2, [r3, #8]
 8001a08:	60da      	str	r2, [r3, #12]
 8001a0a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a48      	ldr	r2, [pc, #288]	@ (8001b34 <HAL_DAC_MspInit+0x140>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	f040 808a 	bne.w	8001b2c <HAL_DAC_MspInit+0x138>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8001a18:	4b47      	ldr	r3, [pc, #284]	@ (8001b38 <HAL_DAC_MspInit+0x144>)
 8001a1a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001a1e:	4a46      	ldr	r2, [pc, #280]	@ (8001b38 <HAL_DAC_MspInit+0x144>)
 8001a20:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001a24:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001a28:	4b43      	ldr	r3, [pc, #268]	@ (8001b38 <HAL_DAC_MspInit+0x144>)
 8001a2a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001a2e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001a32:	613b      	str	r3, [r7, #16]
 8001a34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a36:	4b40      	ldr	r3, [pc, #256]	@ (8001b38 <HAL_DAC_MspInit+0x144>)
 8001a38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a3c:	4a3e      	ldr	r2, [pc, #248]	@ (8001b38 <HAL_DAC_MspInit+0x144>)
 8001a3e:	f043 0301 	orr.w	r3, r3, #1
 8001a42:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001a46:	4b3c      	ldr	r3, [pc, #240]	@ (8001b38 <HAL_DAC_MspInit+0x144>)
 8001a48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a4c:	f003 0301 	and.w	r3, r3, #1
 8001a50:	60fb      	str	r3, [r7, #12]
 8001a52:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001a54:	2330      	movs	r3, #48	@ 0x30
 8001a56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a58:	2303      	movs	r3, #3
 8001a5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a60:	f107 0314 	add.w	r3, r7, #20
 8001a64:	4619      	mov	r1, r3
 8001a66:	4835      	ldr	r0, [pc, #212]	@ (8001b3c <HAL_DAC_MspInit+0x148>)
 8001a68:	f005 fdda 	bl	8007620 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Stream0;
 8001a6c:	4b34      	ldr	r3, [pc, #208]	@ (8001b40 <HAL_DAC_MspInit+0x14c>)
 8001a6e:	4a35      	ldr	r2, [pc, #212]	@ (8001b44 <HAL_DAC_MspInit+0x150>)
 8001a70:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 8001a72:	4b33      	ldr	r3, [pc, #204]	@ (8001b40 <HAL_DAC_MspInit+0x14c>)
 8001a74:	2243      	movs	r2, #67	@ 0x43
 8001a76:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001a78:	4b31      	ldr	r3, [pc, #196]	@ (8001b40 <HAL_DAC_MspInit+0x14c>)
 8001a7a:	2240      	movs	r2, #64	@ 0x40
 8001a7c:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a7e:	4b30      	ldr	r3, [pc, #192]	@ (8001b40 <HAL_DAC_MspInit+0x14c>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001a84:	4b2e      	ldr	r3, [pc, #184]	@ (8001b40 <HAL_DAC_MspInit+0x14c>)
 8001a86:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001a8a:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001a8c:	4b2c      	ldr	r3, [pc, #176]	@ (8001b40 <HAL_DAC_MspInit+0x14c>)
 8001a8e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001a92:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001a94:	4b2a      	ldr	r3, [pc, #168]	@ (8001b40 <HAL_DAC_MspInit+0x14c>)
 8001a96:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001a9a:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8001a9c:	4b28      	ldr	r3, [pc, #160]	@ (8001b40 <HAL_DAC_MspInit+0x14c>)
 8001a9e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001aa2:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001aa4:	4b26      	ldr	r3, [pc, #152]	@ (8001b40 <HAL_DAC_MspInit+0x14c>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001aaa:	4b25      	ldr	r3, [pc, #148]	@ (8001b40 <HAL_DAC_MspInit+0x14c>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8001ab0:	4823      	ldr	r0, [pc, #140]	@ (8001b40 <HAL_DAC_MspInit+0x14c>)
 8001ab2:	f004 f8f7 	bl	8005ca4 <HAL_DMA_Init>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d001      	beq.n	8001ac0 <HAL_DAC_MspInit+0xcc>
    {
      Error_Handler();
 8001abc:	f7ff feec 	bl	8001898 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	4a1f      	ldr	r2, [pc, #124]	@ (8001b40 <HAL_DAC_MspInit+0x14c>)
 8001ac4:	609a      	str	r2, [r3, #8]
 8001ac6:	4a1e      	ldr	r2, [pc, #120]	@ (8001b40 <HAL_DAC_MspInit+0x14c>)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6393      	str	r3, [r2, #56]	@ 0x38

    /* DAC1_CH2 Init */
    hdma_dac1_ch2.Instance = DMA1_Stream1;
 8001acc:	4b1e      	ldr	r3, [pc, #120]	@ (8001b48 <HAL_DAC_MspInit+0x154>)
 8001ace:	4a1f      	ldr	r2, [pc, #124]	@ (8001b4c <HAL_DAC_MspInit+0x158>)
 8001ad0:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch2.Init.Request = DMA_REQUEST_DAC2;
 8001ad2:	4b1d      	ldr	r3, [pc, #116]	@ (8001b48 <HAL_DAC_MspInit+0x154>)
 8001ad4:	2244      	movs	r2, #68	@ 0x44
 8001ad6:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001ad8:	4b1b      	ldr	r3, [pc, #108]	@ (8001b48 <HAL_DAC_MspInit+0x154>)
 8001ada:	2240      	movs	r2, #64	@ 0x40
 8001adc:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ade:	4b1a      	ldr	r3, [pc, #104]	@ (8001b48 <HAL_DAC_MspInit+0x154>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8001ae4:	4b18      	ldr	r3, [pc, #96]	@ (8001b48 <HAL_DAC_MspInit+0x154>)
 8001ae6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001aea:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001aec:	4b16      	ldr	r3, [pc, #88]	@ (8001b48 <HAL_DAC_MspInit+0x154>)
 8001aee:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001af2:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001af4:	4b14      	ldr	r3, [pc, #80]	@ (8001b48 <HAL_DAC_MspInit+0x154>)
 8001af6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001afa:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch2.Init.Mode = DMA_CIRCULAR;
 8001afc:	4b12      	ldr	r3, [pc, #72]	@ (8001b48 <HAL_DAC_MspInit+0x154>)
 8001afe:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001b02:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8001b04:	4b10      	ldr	r3, [pc, #64]	@ (8001b48 <HAL_DAC_MspInit+0x154>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b0a:	4b0f      	ldr	r3, [pc, #60]	@ (8001b48 <HAL_DAC_MspInit+0x154>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch2) != HAL_OK)
 8001b10:	480d      	ldr	r0, [pc, #52]	@ (8001b48 <HAL_DAC_MspInit+0x154>)
 8001b12:	f004 f8c7 	bl	8005ca4 <HAL_DMA_Init>
 8001b16:	4603      	mov	r3, r0
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d001      	beq.n	8001b20 <HAL_DAC_MspInit+0x12c>
    {
      Error_Handler();
 8001b1c:	f7ff febc 	bl	8001898 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle2,hdma_dac1_ch2);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	4a09      	ldr	r2, [pc, #36]	@ (8001b48 <HAL_DAC_MspInit+0x154>)
 8001b24:	60da      	str	r2, [r3, #12]
 8001b26:	4a08      	ldr	r2, [pc, #32]	@ (8001b48 <HAL_DAC_MspInit+0x154>)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END DAC1_MspInit 1 */

  }

}
 8001b2c:	bf00      	nop
 8001b2e:	3728      	adds	r7, #40	@ 0x28
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	40007400 	.word	0x40007400
 8001b38:	58024400 	.word	0x58024400
 8001b3c:	58020000 	.word	0x58020000
 8001b40:	240003dc 	.word	0x240003dc
 8001b44:	40020010 	.word	0x40020010
 8001b48:	24000454 	.word	0x24000454
 8001b4c:	40020028 	.word	0x40020028

08001b50 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b0b8      	sub	sp, #224	@ 0xe0
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b58:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	601a      	str	r2, [r3, #0]
 8001b60:	605a      	str	r2, [r3, #4]
 8001b62:	609a      	str	r2, [r3, #8]
 8001b64:	60da      	str	r2, [r3, #12]
 8001b66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b68:	f107 0310 	add.w	r3, r7, #16
 8001b6c:	22b8      	movs	r2, #184	@ 0xb8
 8001b6e:	2100      	movs	r1, #0
 8001b70:	4618      	mov	r0, r3
 8001b72:	f013 f872 	bl	8014c5a <memset>
  if(hi2c->Instance==I2C2)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4a27      	ldr	r2, [pc, #156]	@ (8001c18 <HAL_I2C_MspInit+0xc8>)
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d146      	bne.n	8001c0e <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001b80:	f04f 0208 	mov.w	r2, #8
 8001b84:	f04f 0300 	mov.w	r3, #0
 8001b88:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b92:	f107 0310 	add.w	r3, r7, #16
 8001b96:	4618      	mov	r0, r3
 8001b98:	f008 fa9e 	bl	800a0d8 <HAL_RCCEx_PeriphCLKConfig>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d001      	beq.n	8001ba6 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8001ba2:	f7ff fe79 	bl	8001898 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ba6:	4b1d      	ldr	r3, [pc, #116]	@ (8001c1c <HAL_I2C_MspInit+0xcc>)
 8001ba8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001bac:	4a1b      	ldr	r2, [pc, #108]	@ (8001c1c <HAL_I2C_MspInit+0xcc>)
 8001bae:	f043 0302 	orr.w	r3, r3, #2
 8001bb2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001bb6:	4b19      	ldr	r3, [pc, #100]	@ (8001c1c <HAL_I2C_MspInit+0xcc>)
 8001bb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001bbc:	f003 0302 	and.w	r3, r3, #2
 8001bc0:	60fb      	str	r3, [r7, #12]
 8001bc2:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001bc4:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001bc8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bcc:	2312      	movs	r3, #18
 8001bce:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001bde:	2304      	movs	r3, #4
 8001be0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001be4:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8001be8:	4619      	mov	r1, r3
 8001bea:	480d      	ldr	r0, [pc, #52]	@ (8001c20 <HAL_I2C_MspInit+0xd0>)
 8001bec:	f005 fd18 	bl	8007620 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001bf0:	4b0a      	ldr	r3, [pc, #40]	@ (8001c1c <HAL_I2C_MspInit+0xcc>)
 8001bf2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001bf6:	4a09      	ldr	r2, [pc, #36]	@ (8001c1c <HAL_I2C_MspInit+0xcc>)
 8001bf8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001bfc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001c00:	4b06      	ldr	r3, [pc, #24]	@ (8001c1c <HAL_I2C_MspInit+0xcc>)
 8001c02:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001c06:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c0a:	60bb      	str	r3, [r7, #8]
 8001c0c:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 8001c0e:	bf00      	nop
 8001c10:	37e0      	adds	r7, #224	@ 0xe0
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	40005800 	.word	0x40005800
 8001c1c:	58024400 	.word	0x58024400
 8001c20:	58020400 	.word	0x58020400

08001c24 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b0bc      	sub	sp, #240	@ 0xf0
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c2c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001c30:	2200      	movs	r2, #0
 8001c32:	601a      	str	r2, [r3, #0]
 8001c34:	605a      	str	r2, [r3, #4]
 8001c36:	609a      	str	r2, [r3, #8]
 8001c38:	60da      	str	r2, [r3, #12]
 8001c3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c3c:	f107 0320 	add.w	r3, r7, #32
 8001c40:	22b8      	movs	r2, #184	@ 0xb8
 8001c42:	2100      	movs	r1, #0
 8001c44:	4618      	mov	r0, r3
 8001c46:	f013 f808 	bl	8014c5a <memset>
  if(hspi->Instance==SPI2)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a72      	ldr	r2, [pc, #456]	@ (8001e18 <HAL_SPI_MspInit+0x1f4>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d146      	bne.n	8001ce2 <HAL_SPI_MspInit+0xbe>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8001c54:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001c58:	f04f 0300 	mov.w	r3, #0
 8001c5c:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001c60:	2300      	movs	r3, #0
 8001c62:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c64:	f107 0320 	add.w	r3, r7, #32
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f008 fa35 	bl	800a0d8 <HAL_RCCEx_PeriphCLKConfig>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d001      	beq.n	8001c78 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8001c74:	f7ff fe10 	bl	8001898 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001c78:	4b68      	ldr	r3, [pc, #416]	@ (8001e1c <HAL_SPI_MspInit+0x1f8>)
 8001c7a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001c7e:	4a67      	ldr	r2, [pc, #412]	@ (8001e1c <HAL_SPI_MspInit+0x1f8>)
 8001c80:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c84:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001c88:	4b64      	ldr	r3, [pc, #400]	@ (8001e1c <HAL_SPI_MspInit+0x1f8>)
 8001c8a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001c8e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c92:	61fb      	str	r3, [r7, #28]
 8001c94:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c96:	4b61      	ldr	r3, [pc, #388]	@ (8001e1c <HAL_SPI_MspInit+0x1f8>)
 8001c98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c9c:	4a5f      	ldr	r2, [pc, #380]	@ (8001e1c <HAL_SPI_MspInit+0x1f8>)
 8001c9e:	f043 0302 	orr.w	r3, r3, #2
 8001ca2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001ca6:	4b5d      	ldr	r3, [pc, #372]	@ (8001e1c <HAL_SPI_MspInit+0x1f8>)
 8001ca8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001cac:	f003 0302 	and.w	r3, r3, #2
 8001cb0:	61bb      	str	r3, [r7, #24]
 8001cb2:	69bb      	ldr	r3, [r7, #24]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = ACCEL_SCK1_Pin|ACCEL_MISO1_Pin|ACCEL_MOSI1_Pin;
 8001cb4:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8001cb8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cbc:	2302      	movs	r3, #2
 8001cbe:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001cce:	2305      	movs	r3, #5
 8001cd0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cd4:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001cd8:	4619      	mov	r1, r3
 8001cda:	4851      	ldr	r0, [pc, #324]	@ (8001e20 <HAL_SPI_MspInit+0x1fc>)
 8001cdc:	f005 fca0 	bl	8007620 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 8001ce0:	e096      	b.n	8001e10 <HAL_SPI_MspInit+0x1ec>
  else if(hspi->Instance==SPI3)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4a4f      	ldr	r2, [pc, #316]	@ (8001e24 <HAL_SPI_MspInit+0x200>)
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d146      	bne.n	8001d7a <HAL_SPI_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8001cec:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001cf0:	f04f 0300 	mov.w	r3, #0
 8001cf4:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001cfc:	f107 0320 	add.w	r3, r7, #32
 8001d00:	4618      	mov	r0, r3
 8001d02:	f008 f9e9 	bl	800a0d8 <HAL_RCCEx_PeriphCLKConfig>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d001      	beq.n	8001d10 <HAL_SPI_MspInit+0xec>
      Error_Handler();
 8001d0c:	f7ff fdc4 	bl	8001898 <Error_Handler>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001d10:	4b42      	ldr	r3, [pc, #264]	@ (8001e1c <HAL_SPI_MspInit+0x1f8>)
 8001d12:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001d16:	4a41      	ldr	r2, [pc, #260]	@ (8001e1c <HAL_SPI_MspInit+0x1f8>)
 8001d18:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001d1c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001d20:	4b3e      	ldr	r3, [pc, #248]	@ (8001e1c <HAL_SPI_MspInit+0x1f8>)
 8001d22:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001d26:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001d2a:	617b      	str	r3, [r7, #20]
 8001d2c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d2e:	4b3b      	ldr	r3, [pc, #236]	@ (8001e1c <HAL_SPI_MspInit+0x1f8>)
 8001d30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d34:	4a39      	ldr	r2, [pc, #228]	@ (8001e1c <HAL_SPI_MspInit+0x1f8>)
 8001d36:	f043 0304 	orr.w	r3, r3, #4
 8001d3a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001d3e:	4b37      	ldr	r3, [pc, #220]	@ (8001e1c <HAL_SPI_MspInit+0x1f8>)
 8001d40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d44:	f003 0304 	and.w	r3, r3, #4
 8001d48:	613b      	str	r3, [r7, #16]
 8001d4a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001d4c:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001d50:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d54:	2302      	movs	r3, #2
 8001d56:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d60:	2300      	movs	r3, #0
 8001d62:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001d66:	2306      	movs	r3, #6
 8001d68:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d6c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001d70:	4619      	mov	r1, r3
 8001d72:	482d      	ldr	r0, [pc, #180]	@ (8001e28 <HAL_SPI_MspInit+0x204>)
 8001d74:	f005 fc54 	bl	8007620 <HAL_GPIO_Init>
}
 8001d78:	e04a      	b.n	8001e10 <HAL_SPI_MspInit+0x1ec>
  else if(hspi->Instance==SPI4)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4a2b      	ldr	r2, [pc, #172]	@ (8001e2c <HAL_SPI_MspInit+0x208>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d145      	bne.n	8001e10 <HAL_SPI_MspInit+0x1ec>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 8001d84:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001d88:	f04f 0300 	mov.w	r3, #0
 8001d8c:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 8001d90:	2300      	movs	r3, #0
 8001d92:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d96:	f107 0320 	add.w	r3, r7, #32
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f008 f99c 	bl	800a0d8 <HAL_RCCEx_PeriphCLKConfig>
 8001da0:	4603      	mov	r3, r0
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d001      	beq.n	8001daa <HAL_SPI_MspInit+0x186>
      Error_Handler();
 8001da6:	f7ff fd77 	bl	8001898 <Error_Handler>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8001daa:	4b1c      	ldr	r3, [pc, #112]	@ (8001e1c <HAL_SPI_MspInit+0x1f8>)
 8001dac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001db0:	4a1a      	ldr	r2, [pc, #104]	@ (8001e1c <HAL_SPI_MspInit+0x1f8>)
 8001db2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001db6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001dba:	4b18      	ldr	r3, [pc, #96]	@ (8001e1c <HAL_SPI_MspInit+0x1f8>)
 8001dbc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001dc0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001dc4:	60fb      	str	r3, [r7, #12]
 8001dc6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001dc8:	4b14      	ldr	r3, [pc, #80]	@ (8001e1c <HAL_SPI_MspInit+0x1f8>)
 8001dca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001dce:	4a13      	ldr	r2, [pc, #76]	@ (8001e1c <HAL_SPI_MspInit+0x1f8>)
 8001dd0:	f043 0310 	orr.w	r3, r3, #16
 8001dd4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001dd8:	4b10      	ldr	r3, [pc, #64]	@ (8001e1c <HAL_SPI_MspInit+0x1f8>)
 8001dda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001dde:	f003 0310 	and.w	r3, r3, #16
 8001de2:	60bb      	str	r3, [r7, #8]
 8001de4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8001de6:	2364      	movs	r3, #100	@ 0x64
 8001de8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dec:	2302      	movs	r3, #2
 8001dee:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df2:	2300      	movs	r3, #0
 8001df4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8001dfe:	2305      	movs	r3, #5
 8001e00:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e04:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001e08:	4619      	mov	r1, r3
 8001e0a:	4809      	ldr	r0, [pc, #36]	@ (8001e30 <HAL_SPI_MspInit+0x20c>)
 8001e0c:	f005 fc08 	bl	8007620 <HAL_GPIO_Init>
}
 8001e10:	bf00      	nop
 8001e12:	37f0      	adds	r7, #240	@ 0xf0
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	40003800 	.word	0x40003800
 8001e1c:	58024400 	.word	0x58024400
 8001e20:	58020400 	.word	0x58020400
 8001e24:	40003c00 	.word	0x40003c00
 8001e28:	58020800 	.word	0x58020800
 8001e2c:	40013400 	.word	0x40013400
 8001e30:	58021000 	.word	0x58021000

08001e34 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b086      	sub	sp, #24
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a2e      	ldr	r2, [pc, #184]	@ (8001efc <HAL_TIM_Base_MspInit+0xc8>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d10f      	bne.n	8001e66 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001e46:	4b2e      	ldr	r3, [pc, #184]	@ (8001f00 <HAL_TIM_Base_MspInit+0xcc>)
 8001e48:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001e4c:	4a2c      	ldr	r2, [pc, #176]	@ (8001f00 <HAL_TIM_Base_MspInit+0xcc>)
 8001e4e:	f043 0301 	orr.w	r3, r3, #1
 8001e52:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001e56:	4b2a      	ldr	r3, [pc, #168]	@ (8001f00 <HAL_TIM_Base_MspInit+0xcc>)
 8001e58:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001e5c:	f003 0301 	and.w	r3, r3, #1
 8001e60:	617b      	str	r3, [r7, #20]
 8001e62:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001e64:	e045      	b.n	8001ef2 <HAL_TIM_Base_MspInit+0xbe>
  else if(htim_base->Instance==TIM2)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e6e:	d10f      	bne.n	8001e90 <HAL_TIM_Base_MspInit+0x5c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e70:	4b23      	ldr	r3, [pc, #140]	@ (8001f00 <HAL_TIM_Base_MspInit+0xcc>)
 8001e72:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001e76:	4a22      	ldr	r2, [pc, #136]	@ (8001f00 <HAL_TIM_Base_MspInit+0xcc>)
 8001e78:	f043 0301 	orr.w	r3, r3, #1
 8001e7c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001e80:	4b1f      	ldr	r3, [pc, #124]	@ (8001f00 <HAL_TIM_Base_MspInit+0xcc>)
 8001e82:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001e86:	f003 0301 	and.w	r3, r3, #1
 8001e8a:	613b      	str	r3, [r7, #16]
 8001e8c:	693b      	ldr	r3, [r7, #16]
}
 8001e8e:	e030      	b.n	8001ef2 <HAL_TIM_Base_MspInit+0xbe>
  else if(htim_base->Instance==TIM3)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a1b      	ldr	r2, [pc, #108]	@ (8001f04 <HAL_TIM_Base_MspInit+0xd0>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d117      	bne.n	8001eca <HAL_TIM_Base_MspInit+0x96>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001e9a:	4b19      	ldr	r3, [pc, #100]	@ (8001f00 <HAL_TIM_Base_MspInit+0xcc>)
 8001e9c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001ea0:	4a17      	ldr	r2, [pc, #92]	@ (8001f00 <HAL_TIM_Base_MspInit+0xcc>)
 8001ea2:	f043 0302 	orr.w	r3, r3, #2
 8001ea6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001eaa:	4b15      	ldr	r3, [pc, #84]	@ (8001f00 <HAL_TIM_Base_MspInit+0xcc>)
 8001eac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001eb0:	f003 0302 	and.w	r3, r3, #2
 8001eb4:	60fb      	str	r3, [r7, #12]
 8001eb6:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001eb8:	2200      	movs	r2, #0
 8001eba:	2100      	movs	r1, #0
 8001ebc:	201d      	movs	r0, #29
 8001ebe:	f003 fce0 	bl	8005882 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001ec2:	201d      	movs	r0, #29
 8001ec4:	f003 fcf7 	bl	80058b6 <HAL_NVIC_EnableIRQ>
}
 8001ec8:	e013      	b.n	8001ef2 <HAL_TIM_Base_MspInit+0xbe>
  else if(htim_base->Instance==TIM4)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4a0e      	ldr	r2, [pc, #56]	@ (8001f08 <HAL_TIM_Base_MspInit+0xd4>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d10e      	bne.n	8001ef2 <HAL_TIM_Base_MspInit+0xbe>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001ed4:	4b0a      	ldr	r3, [pc, #40]	@ (8001f00 <HAL_TIM_Base_MspInit+0xcc>)
 8001ed6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001eda:	4a09      	ldr	r2, [pc, #36]	@ (8001f00 <HAL_TIM_Base_MspInit+0xcc>)
 8001edc:	f043 0304 	orr.w	r3, r3, #4
 8001ee0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001ee4:	4b06      	ldr	r3, [pc, #24]	@ (8001f00 <HAL_TIM_Base_MspInit+0xcc>)
 8001ee6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001eea:	f003 0304 	and.w	r3, r3, #4
 8001eee:	60bb      	str	r3, [r7, #8]
 8001ef0:	68bb      	ldr	r3, [r7, #8]
}
 8001ef2:	bf00      	nop
 8001ef4:	3718      	adds	r7, #24
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	40010000 	.word	0x40010000
 8001f00:	58024400 	.word	0x58024400
 8001f04:	40000400 	.word	0x40000400
 8001f08:	40000800 	.word	0x40000800

08001f0c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b08a      	sub	sp, #40	@ 0x28
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f14:	f107 0314 	add.w	r3, r7, #20
 8001f18:	2200      	movs	r2, #0
 8001f1a:	601a      	str	r2, [r3, #0]
 8001f1c:	605a      	str	r2, [r3, #4]
 8001f1e:	609a      	str	r2, [r3, #8]
 8001f20:	60da      	str	r2, [r3, #12]
 8001f22:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a26      	ldr	r2, [pc, #152]	@ (8001fc4 <HAL_TIM_MspPostInit+0xb8>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d120      	bne.n	8001f70 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f2e:	4b26      	ldr	r3, [pc, #152]	@ (8001fc8 <HAL_TIM_MspPostInit+0xbc>)
 8001f30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f34:	4a24      	ldr	r2, [pc, #144]	@ (8001fc8 <HAL_TIM_MspPostInit+0xbc>)
 8001f36:	f043 0304 	orr.w	r3, r3, #4
 8001f3a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001f3e:	4b22      	ldr	r3, [pc, #136]	@ (8001fc8 <HAL_TIM_MspPostInit+0xbc>)
 8001f40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f44:	f003 0304 	and.w	r3, r3, #4
 8001f48:	613b      	str	r3, [r7, #16]
 8001f4a:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = LED_STROBE_1_Pin|LED_STROBE_2_Pin|LED_STROBE_3_Pin;
 8001f4c:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 8001f50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f52:	2302      	movs	r3, #2
 8001f54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f56:	2300      	movs	r3, #0
 8001f58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001f5e:	2302      	movs	r3, #2
 8001f60:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f62:	f107 0314 	add.w	r3, r7, #20
 8001f66:	4619      	mov	r1, r3
 8001f68:	4818      	ldr	r0, [pc, #96]	@ (8001fcc <HAL_TIM_MspPostInit+0xc0>)
 8001f6a:	f005 fb59 	bl	8007620 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001f6e:	e024      	b.n	8001fba <HAL_TIM_MspPostInit+0xae>
  else if(htim->Instance==TIM4)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a16      	ldr	r2, [pc, #88]	@ (8001fd0 <HAL_TIM_MspPostInit+0xc4>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d11f      	bne.n	8001fba <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f7a:	4b13      	ldr	r3, [pc, #76]	@ (8001fc8 <HAL_TIM_MspPostInit+0xbc>)
 8001f7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f80:	4a11      	ldr	r2, [pc, #68]	@ (8001fc8 <HAL_TIM_MspPostInit+0xbc>)
 8001f82:	f043 0308 	orr.w	r3, r3, #8
 8001f86:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001f8a:	4b0f      	ldr	r3, [pc, #60]	@ (8001fc8 <HAL_TIM_MspPostInit+0xbc>)
 8001f8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f90:	f003 0308 	and.w	r3, r3, #8
 8001f94:	60fb      	str	r3, [r7, #12]
 8001f96:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LED_ACCEL_Pin;
 8001f98:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f9e:	2302      	movs	r3, #2
 8001fa0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001faa:	2302      	movs	r3, #2
 8001fac:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(LED_ACCEL_GPIO_Port, &GPIO_InitStruct);
 8001fae:	f107 0314 	add.w	r3, r7, #20
 8001fb2:	4619      	mov	r1, r3
 8001fb4:	4807      	ldr	r0, [pc, #28]	@ (8001fd4 <HAL_TIM_MspPostInit+0xc8>)
 8001fb6:	f005 fb33 	bl	8007620 <HAL_GPIO_Init>
}
 8001fba:	bf00      	nop
 8001fbc:	3728      	adds	r7, #40	@ 0x28
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	40000400 	.word	0x40000400
 8001fc8:	58024400 	.word	0x58024400
 8001fcc:	58020800 	.word	0x58020800
 8001fd0:	40000800 	.word	0x40000800
 8001fd4:	58020c00 	.word	0x58020c00

08001fd8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b0ba      	sub	sp, #232	@ 0xe8
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fe0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	601a      	str	r2, [r3, #0]
 8001fe8:	605a      	str	r2, [r3, #4]
 8001fea:	609a      	str	r2, [r3, #8]
 8001fec:	60da      	str	r2, [r3, #12]
 8001fee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ff0:	f107 0318 	add.w	r3, r7, #24
 8001ff4:	22b8      	movs	r2, #184	@ 0xb8
 8001ff6:	2100      	movs	r1, #0
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f012 fe2e 	bl	8014c5a <memset>
  if(huart->Instance==UART7)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a4d      	ldr	r2, [pc, #308]	@ (8002138 <HAL_UART_MspInit+0x160>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d147      	bne.n	8002098 <HAL_UART_MspInit+0xc0>

  /* USER CODE END UART7_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8002008:	f04f 0202 	mov.w	r2, #2
 800200c:	f04f 0300 	mov.w	r3, #0
 8002010:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002014:	2300      	movs	r3, #0
 8002016:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800201a:	f107 0318 	add.w	r3, r7, #24
 800201e:	4618      	mov	r0, r3
 8002020:	f008 f85a 	bl	800a0d8 <HAL_RCCEx_PeriphCLKConfig>
 8002024:	4603      	mov	r3, r0
 8002026:	2b00      	cmp	r3, #0
 8002028:	d001      	beq.n	800202e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800202a:	f7ff fc35 	bl	8001898 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 800202e:	4b43      	ldr	r3, [pc, #268]	@ (800213c <HAL_UART_MspInit+0x164>)
 8002030:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002034:	4a41      	ldr	r2, [pc, #260]	@ (800213c <HAL_UART_MspInit+0x164>)
 8002036:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800203a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800203e:	4b3f      	ldr	r3, [pc, #252]	@ (800213c <HAL_UART_MspInit+0x164>)
 8002040:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002044:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002048:	617b      	str	r3, [r7, #20]
 800204a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800204c:	4b3b      	ldr	r3, [pc, #236]	@ (800213c <HAL_UART_MspInit+0x164>)
 800204e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002052:	4a3a      	ldr	r2, [pc, #232]	@ (800213c <HAL_UART_MspInit+0x164>)
 8002054:	f043 0310 	orr.w	r3, r3, #16
 8002058:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800205c:	4b37      	ldr	r3, [pc, #220]	@ (800213c <HAL_UART_MspInit+0x164>)
 800205e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002062:	f003 0310 	and.w	r3, r3, #16
 8002066:	613b      	str	r3, [r7, #16]
 8002068:	693b      	ldr	r3, [r7, #16]
    PE7     ------> UART7_RX
    PE8     ------> UART7_TX
    PE9     ------> UART7_RTS
    PE10     ------> UART7_CTS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 800206a:	f44f 63f0 	mov.w	r3, #1920	@ 0x780
 800206e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002072:	2302      	movs	r3, #2
 8002074:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002078:	2300      	movs	r3, #0
 800207a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800207e:	2300      	movs	r3, #0
 8002080:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 8002084:	2307      	movs	r3, #7
 8002086:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800208a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800208e:	4619      	mov	r1, r3
 8002090:	482b      	ldr	r0, [pc, #172]	@ (8002140 <HAL_UART_MspInit+0x168>)
 8002092:	f005 fac5 	bl	8007620 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002096:	e04a      	b.n	800212e <HAL_UART_MspInit+0x156>
  else if(huart->Instance==USART1)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a29      	ldr	r2, [pc, #164]	@ (8002144 <HAL_UART_MspInit+0x16c>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d145      	bne.n	800212e <HAL_UART_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80020a2:	f04f 0201 	mov.w	r2, #1
 80020a6:	f04f 0300 	mov.w	r3, #0
 80020aa:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 80020ae:	2300      	movs	r3, #0
 80020b0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80020b4:	f107 0318 	add.w	r3, r7, #24
 80020b8:	4618      	mov	r0, r3
 80020ba:	f008 f80d 	bl	800a0d8 <HAL_RCCEx_PeriphCLKConfig>
 80020be:	4603      	mov	r3, r0
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d001      	beq.n	80020c8 <HAL_UART_MspInit+0xf0>
      Error_Handler();
 80020c4:	f7ff fbe8 	bl	8001898 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 80020c8:	4b1c      	ldr	r3, [pc, #112]	@ (800213c <HAL_UART_MspInit+0x164>)
 80020ca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80020ce:	4a1b      	ldr	r2, [pc, #108]	@ (800213c <HAL_UART_MspInit+0x164>)
 80020d0:	f043 0310 	orr.w	r3, r3, #16
 80020d4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80020d8:	4b18      	ldr	r3, [pc, #96]	@ (800213c <HAL_UART_MspInit+0x164>)
 80020da:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80020de:	f003 0310 	and.w	r3, r3, #16
 80020e2:	60fb      	str	r3, [r7, #12]
 80020e4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020e6:	4b15      	ldr	r3, [pc, #84]	@ (800213c <HAL_UART_MspInit+0x164>)
 80020e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020ec:	4a13      	ldr	r2, [pc, #76]	@ (800213c <HAL_UART_MspInit+0x164>)
 80020ee:	f043 0302 	orr.w	r3, r3, #2
 80020f2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80020f6:	4b11      	ldr	r3, [pc, #68]	@ (800213c <HAL_UART_MspInit+0x164>)
 80020f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020fc:	f003 0302 	and.w	r3, r3, #2
 8002100:	60bb      	str	r3, [r7, #8]
 8002102:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8002104:	23c0      	movs	r3, #192	@ 0xc0
 8002106:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800210a:	2302      	movs	r3, #2
 800210c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002110:	2300      	movs	r3, #0
 8002112:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002116:	2300      	movs	r3, #0
 8002118:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800211c:	2307      	movs	r3, #7
 800211e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002122:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002126:	4619      	mov	r1, r3
 8002128:	4807      	ldr	r0, [pc, #28]	@ (8002148 <HAL_UART_MspInit+0x170>)
 800212a:	f005 fa79 	bl	8007620 <HAL_GPIO_Init>
}
 800212e:	bf00      	nop
 8002130:	37e8      	adds	r7, #232	@ 0xe8
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}
 8002136:	bf00      	nop
 8002138:	40007800 	.word	0x40007800
 800213c:	58024400 	.word	0x58024400
 8002140:	58021000 	.word	0x58021000
 8002144:	40011000 	.word	0x40011000
 8002148:	58020400 	.word	0x58020400

0800214c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800214c:	b480      	push	{r7}
 800214e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002150:	bf00      	nop
 8002152:	e7fd      	b.n	8002150 <NMI_Handler+0x4>

08002154 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002154:	b480      	push	{r7}
 8002156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002158:	bf00      	nop
 800215a:	e7fd      	b.n	8002158 <HardFault_Handler+0x4>

0800215c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800215c:	b480      	push	{r7}
 800215e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002160:	bf00      	nop
 8002162:	e7fd      	b.n	8002160 <MemManage_Handler+0x4>

08002164 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002164:	b480      	push	{r7}
 8002166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002168:	bf00      	nop
 800216a:	e7fd      	b.n	8002168 <BusFault_Handler+0x4>

0800216c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800216c:	b480      	push	{r7}
 800216e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002170:	bf00      	nop
 8002172:	e7fd      	b.n	8002170 <UsageFault_Handler+0x4>

08002174 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002174:	b480      	push	{r7}
 8002176:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002178:	bf00      	nop
 800217a:	46bd      	mov	sp, r7
 800217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002180:	4770      	bx	lr

08002182 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002182:	b480      	push	{r7}
 8002184:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002186:	bf00      	nop
 8002188:	46bd      	mov	sp, r7
 800218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218e:	4770      	bx	lr

08002190 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002190:	b480      	push	{r7}
 8002192:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002194:	bf00      	nop
 8002196:	46bd      	mov	sp, r7
 8002198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219c:	4770      	bx	lr

0800219e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800219e:	b580      	push	{r7, lr}
 80021a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021a2:	f001 fedb 	bl	8003f5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021a6:	bf00      	nop
 80021a8:	bd80      	pop	{r7, pc}
	...

080021ac <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 80021b0:	4802      	ldr	r0, [pc, #8]	@ (80021bc <DMA1_Stream0_IRQHandler+0x10>)
 80021b2:	f004 f8cf 	bl	8006354 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80021b6:	bf00      	nop
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	bf00      	nop
 80021bc:	240003dc 	.word	0x240003dc

080021c0 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch2);
 80021c4:	4802      	ldr	r0, [pc, #8]	@ (80021d0 <DMA1_Stream1_IRQHandler+0x10>)
 80021c6:	f004 f8c5 	bl	8006354 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80021ca:	bf00      	nop
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	24000454 	.word	0x24000454

080021d4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80021d8:	4802      	ldr	r0, [pc, #8]	@ (80021e4 <TIM3_IRQHandler+0x10>)
 80021da:	f00a ff93 	bl	800d104 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80021de:	bf00      	nop
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	bf00      	nop
 80021e4:	24000750 	.word	0x24000750

080021e8 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 80021ec:	4802      	ldr	r0, [pc, #8]	@ (80021f8 <OTG_HS_IRQHandler+0x10>)
 80021ee:	f005 fe65 	bl	8007ebc <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 80021f2:	bf00      	nop
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	24006408 	.word	0x24006408

080021fc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80021fc:	b480      	push	{r7}
 80021fe:	af00      	add	r7, sp, #0
  return 1;
 8002200:	2301      	movs	r3, #1
}
 8002202:	4618      	mov	r0, r3
 8002204:	46bd      	mov	sp, r7
 8002206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220a:	4770      	bx	lr

0800220c <_kill>:

int _kill(int pid, int sig)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b082      	sub	sp, #8
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
 8002214:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002216:	f012 fd91 	bl	8014d3c <__errno>
 800221a:	4603      	mov	r3, r0
 800221c:	2216      	movs	r2, #22
 800221e:	601a      	str	r2, [r3, #0]
  return -1;
 8002220:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002224:	4618      	mov	r0, r3
 8002226:	3708      	adds	r7, #8
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}

0800222c <_exit>:

void _exit (int status)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b082      	sub	sp, #8
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002234:	f04f 31ff 	mov.w	r1, #4294967295
 8002238:	6878      	ldr	r0, [r7, #4]
 800223a:	f7ff ffe7 	bl	800220c <_kill>
  while (1) {}    /* Make sure we hang here */
 800223e:	bf00      	nop
 8002240:	e7fd      	b.n	800223e <_exit+0x12>

08002242 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002242:	b580      	push	{r7, lr}
 8002244:	b086      	sub	sp, #24
 8002246:	af00      	add	r7, sp, #0
 8002248:	60f8      	str	r0, [r7, #12]
 800224a:	60b9      	str	r1, [r7, #8]
 800224c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800224e:	2300      	movs	r3, #0
 8002250:	617b      	str	r3, [r7, #20]
 8002252:	e00a      	b.n	800226a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002254:	f3af 8000 	nop.w
 8002258:	4601      	mov	r1, r0
 800225a:	68bb      	ldr	r3, [r7, #8]
 800225c:	1c5a      	adds	r2, r3, #1
 800225e:	60ba      	str	r2, [r7, #8]
 8002260:	b2ca      	uxtb	r2, r1
 8002262:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	3301      	adds	r3, #1
 8002268:	617b      	str	r3, [r7, #20]
 800226a:	697a      	ldr	r2, [r7, #20]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	429a      	cmp	r2, r3
 8002270:	dbf0      	blt.n	8002254 <_read+0x12>
  }

  return len;
 8002272:	687b      	ldr	r3, [r7, #4]
}
 8002274:	4618      	mov	r0, r3
 8002276:	3718      	adds	r7, #24
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}

0800227c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b086      	sub	sp, #24
 8002280:	af00      	add	r7, sp, #0
 8002282:	60f8      	str	r0, [r7, #12]
 8002284:	60b9      	str	r1, [r7, #8]
 8002286:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002288:	2300      	movs	r3, #0
 800228a:	617b      	str	r3, [r7, #20]
 800228c:	e009      	b.n	80022a2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800228e:	68bb      	ldr	r3, [r7, #8]
 8002290:	1c5a      	adds	r2, r3, #1
 8002292:	60ba      	str	r2, [r7, #8]
 8002294:	781b      	ldrb	r3, [r3, #0]
 8002296:	4618      	mov	r0, r3
 8002298:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800229c:	697b      	ldr	r3, [r7, #20]
 800229e:	3301      	adds	r3, #1
 80022a0:	617b      	str	r3, [r7, #20]
 80022a2:	697a      	ldr	r2, [r7, #20]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	429a      	cmp	r2, r3
 80022a8:	dbf1      	blt.n	800228e <_write+0x12>
  }
  return len;
 80022aa:	687b      	ldr	r3, [r7, #4]
}
 80022ac:	4618      	mov	r0, r3
 80022ae:	3718      	adds	r7, #24
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}

080022b4 <_close>:

int _close(int file)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b083      	sub	sp, #12
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80022bc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	370c      	adds	r7, #12
 80022c4:	46bd      	mov	sp, r7
 80022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ca:	4770      	bx	lr

080022cc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b083      	sub	sp, #12
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
 80022d4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80022dc:	605a      	str	r2, [r3, #4]
  return 0;
 80022de:	2300      	movs	r3, #0
}
 80022e0:	4618      	mov	r0, r3
 80022e2:	370c      	adds	r7, #12
 80022e4:	46bd      	mov	sp, r7
 80022e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ea:	4770      	bx	lr

080022ec <_isatty>:

int _isatty(int file)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b083      	sub	sp, #12
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80022f4:	2301      	movs	r3, #1
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	370c      	adds	r7, #12
 80022fa:	46bd      	mov	sp, r7
 80022fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002300:	4770      	bx	lr

08002302 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002302:	b480      	push	{r7}
 8002304:	b085      	sub	sp, #20
 8002306:	af00      	add	r7, sp, #0
 8002308:	60f8      	str	r0, [r7, #12]
 800230a:	60b9      	str	r1, [r7, #8]
 800230c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800230e:	2300      	movs	r3, #0
}
 8002310:	4618      	mov	r0, r3
 8002312:	3714      	adds	r7, #20
 8002314:	46bd      	mov	sp, r7
 8002316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231a:	4770      	bx	lr

0800231c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b086      	sub	sp, #24
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002324:	4a14      	ldr	r2, [pc, #80]	@ (8002378 <_sbrk+0x5c>)
 8002326:	4b15      	ldr	r3, [pc, #84]	@ (800237c <_sbrk+0x60>)
 8002328:	1ad3      	subs	r3, r2, r3
 800232a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002330:	4b13      	ldr	r3, [pc, #76]	@ (8002380 <_sbrk+0x64>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d102      	bne.n	800233e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002338:	4b11      	ldr	r3, [pc, #68]	@ (8002380 <_sbrk+0x64>)
 800233a:	4a12      	ldr	r2, [pc, #72]	@ (8002384 <_sbrk+0x68>)
 800233c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800233e:	4b10      	ldr	r3, [pc, #64]	@ (8002380 <_sbrk+0x64>)
 8002340:	681a      	ldr	r2, [r3, #0]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	4413      	add	r3, r2
 8002346:	693a      	ldr	r2, [r7, #16]
 8002348:	429a      	cmp	r2, r3
 800234a:	d207      	bcs.n	800235c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800234c:	f012 fcf6 	bl	8014d3c <__errno>
 8002350:	4603      	mov	r3, r0
 8002352:	220c      	movs	r2, #12
 8002354:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002356:	f04f 33ff 	mov.w	r3, #4294967295
 800235a:	e009      	b.n	8002370 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800235c:	4b08      	ldr	r3, [pc, #32]	@ (8002380 <_sbrk+0x64>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002362:	4b07      	ldr	r3, [pc, #28]	@ (8002380 <_sbrk+0x64>)
 8002364:	681a      	ldr	r2, [r3, #0]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	4413      	add	r3, r2
 800236a:	4a05      	ldr	r2, [pc, #20]	@ (8002380 <_sbrk+0x64>)
 800236c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800236e:	68fb      	ldr	r3, [r7, #12]
}
 8002370:	4618      	mov	r0, r3
 8002372:	3718      	adds	r7, #24
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}
 8002378:	24050000 	.word	0x24050000
 800237c:	00000400 	.word	0x00000400
 8002380:	24004f20 	.word	0x24004f20
 8002384:	24006c58 	.word	0x24006c58

08002388 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002388:	b480      	push	{r7}
 800238a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800238c:	4b32      	ldr	r3, [pc, #200]	@ (8002458 <SystemInit+0xd0>)
 800238e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002392:	4a31      	ldr	r2, [pc, #196]	@ (8002458 <SystemInit+0xd0>)
 8002394:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002398:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800239c:	4b2f      	ldr	r3, [pc, #188]	@ (800245c <SystemInit+0xd4>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f003 030f 	and.w	r3, r3, #15
 80023a4:	2b06      	cmp	r3, #6
 80023a6:	d807      	bhi.n	80023b8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80023a8:	4b2c      	ldr	r3, [pc, #176]	@ (800245c <SystemInit+0xd4>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f023 030f 	bic.w	r3, r3, #15
 80023b0:	4a2a      	ldr	r2, [pc, #168]	@ (800245c <SystemInit+0xd4>)
 80023b2:	f043 0307 	orr.w	r3, r3, #7
 80023b6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80023b8:	4b29      	ldr	r3, [pc, #164]	@ (8002460 <SystemInit+0xd8>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a28      	ldr	r2, [pc, #160]	@ (8002460 <SystemInit+0xd8>)
 80023be:	f043 0301 	orr.w	r3, r3, #1
 80023c2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80023c4:	4b26      	ldr	r3, [pc, #152]	@ (8002460 <SystemInit+0xd8>)
 80023c6:	2200      	movs	r2, #0
 80023c8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80023ca:	4b25      	ldr	r3, [pc, #148]	@ (8002460 <SystemInit+0xd8>)
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	4924      	ldr	r1, [pc, #144]	@ (8002460 <SystemInit+0xd8>)
 80023d0:	4b24      	ldr	r3, [pc, #144]	@ (8002464 <SystemInit+0xdc>)
 80023d2:	4013      	ands	r3, r2
 80023d4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80023d6:	4b21      	ldr	r3, [pc, #132]	@ (800245c <SystemInit+0xd4>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f003 0308 	and.w	r3, r3, #8
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d007      	beq.n	80023f2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80023e2:	4b1e      	ldr	r3, [pc, #120]	@ (800245c <SystemInit+0xd4>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f023 030f 	bic.w	r3, r3, #15
 80023ea:	4a1c      	ldr	r2, [pc, #112]	@ (800245c <SystemInit+0xd4>)
 80023ec:	f043 0307 	orr.w	r3, r3, #7
 80023f0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80023f2:	4b1b      	ldr	r3, [pc, #108]	@ (8002460 <SystemInit+0xd8>)
 80023f4:	2200      	movs	r2, #0
 80023f6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80023f8:	4b19      	ldr	r3, [pc, #100]	@ (8002460 <SystemInit+0xd8>)
 80023fa:	2200      	movs	r2, #0
 80023fc:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80023fe:	4b18      	ldr	r3, [pc, #96]	@ (8002460 <SystemInit+0xd8>)
 8002400:	2200      	movs	r2, #0
 8002402:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002404:	4b16      	ldr	r3, [pc, #88]	@ (8002460 <SystemInit+0xd8>)
 8002406:	4a18      	ldr	r2, [pc, #96]	@ (8002468 <SystemInit+0xe0>)
 8002408:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800240a:	4b15      	ldr	r3, [pc, #84]	@ (8002460 <SystemInit+0xd8>)
 800240c:	4a17      	ldr	r2, [pc, #92]	@ (800246c <SystemInit+0xe4>)
 800240e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002410:	4b13      	ldr	r3, [pc, #76]	@ (8002460 <SystemInit+0xd8>)
 8002412:	4a17      	ldr	r2, [pc, #92]	@ (8002470 <SystemInit+0xe8>)
 8002414:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002416:	4b12      	ldr	r3, [pc, #72]	@ (8002460 <SystemInit+0xd8>)
 8002418:	2200      	movs	r2, #0
 800241a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800241c:	4b10      	ldr	r3, [pc, #64]	@ (8002460 <SystemInit+0xd8>)
 800241e:	4a14      	ldr	r2, [pc, #80]	@ (8002470 <SystemInit+0xe8>)
 8002420:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002422:	4b0f      	ldr	r3, [pc, #60]	@ (8002460 <SystemInit+0xd8>)
 8002424:	2200      	movs	r2, #0
 8002426:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002428:	4b0d      	ldr	r3, [pc, #52]	@ (8002460 <SystemInit+0xd8>)
 800242a:	4a11      	ldr	r2, [pc, #68]	@ (8002470 <SystemInit+0xe8>)
 800242c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800242e:	4b0c      	ldr	r3, [pc, #48]	@ (8002460 <SystemInit+0xd8>)
 8002430:	2200      	movs	r2, #0
 8002432:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002434:	4b0a      	ldr	r3, [pc, #40]	@ (8002460 <SystemInit+0xd8>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a09      	ldr	r2, [pc, #36]	@ (8002460 <SystemInit+0xd8>)
 800243a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800243e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002440:	4b07      	ldr	r3, [pc, #28]	@ (8002460 <SystemInit+0xd8>)
 8002442:	2200      	movs	r2, #0
 8002444:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002446:	4b0b      	ldr	r3, [pc, #44]	@ (8002474 <SystemInit+0xec>)
 8002448:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800244c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800244e:	bf00      	nop
 8002450:	46bd      	mov	sp, r7
 8002452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002456:	4770      	bx	lr
 8002458:	e000ed00 	.word	0xe000ed00
 800245c:	52002000 	.word	0x52002000
 8002460:	58024400 	.word	0x58024400
 8002464:	eaf6ed7f 	.word	0xeaf6ed7f
 8002468:	02020200 	.word	0x02020200
 800246c:	01ff0000 	.word	0x01ff0000
 8002470:	01010280 	.word	0x01010280
 8002474:	52004000 	.word	0x52004000

08002478 <VibeCheck_Init>:

void VibeCheck_Init(VibeCheck* vc,
		TIM_HandleTypeDef* htim_strobe,
		TIM_HandleTypeDef* htim_wavegen,
		DAC_HandleTypeDef* hdac_wavegen)
{
 8002478:	b5f0      	push	{r4, r5, r6, r7, lr}
 800247a:	b0bb      	sub	sp, #236	@ 0xec
 800247c:	af10      	add	r7, sp, #64	@ 0x40
 800247e:	60f8      	str	r0, [r7, #12]
 8002480:	60b9      	str	r1, [r7, #8]
 8002482:	607a      	str	r2, [r7, #4]
 8002484:	603b      	str	r3, [r7, #0]
	VibeCheckShell_Init(&vc->shell);  /* the shell is linked to the USB middle-ware in usbd_cdc_if.c */
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	4618      	mov	r0, r3
 800248a:	f000 fac9 	bl	8002a20 <VibeCheckShell_Init>

	VibeCheckShell_InputHandler strobe_cmd = {
 800248e:	4a40      	ldr	r2, [pc, #256]	@ (8002590 <VibeCheck_Init+0x118>)
 8002490:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8002494:	6810      	ldr	r0, [r2, #0]
 8002496:	6018      	str	r0, [r3, #0]
 8002498:	8891      	ldrh	r1, [r2, #4]
 800249a:	7992      	ldrb	r2, [r2, #6]
 800249c:	8099      	strh	r1, [r3, #4]
 800249e:	719a      	strb	r2, [r3, #6]
 80024a0:	f107 0367 	add.w	r3, r7, #103	@ 0x67
 80024a4:	2239      	movs	r2, #57	@ 0x39
 80024a6:	2100      	movs	r1, #0
 80024a8:	4618      	mov	r0, r3
 80024aa:	f012 fbd6 	bl	8014c5a <memset>
 80024ae:	4b39      	ldr	r3, [pc, #228]	@ (8002594 <VibeCheck_Init+0x11c>)
 80024b0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
			.name = "strobe",
			.execute = VibeCheckStrobeCMD_Execute,
			.obj = &vc->strobe
 80024b4:	68fa      	ldr	r2, [r7, #12]
 80024b6:	f242 4324 	movw	r3, #9252	@ 0x2424
 80024ba:	4413      	add	r3, r2
	VibeCheckShell_InputHandler strobe_cmd = {
 80024bc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
	};

	VibeCheckShell_RegisterInputHandler(&vc->shell, strobe_cmd);
 80024c0:	68fe      	ldr	r6, [r7, #12]
 80024c2:	466d      	mov	r5, sp
 80024c4:	f107 046c 	add.w	r4, r7, #108	@ 0x6c
 80024c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80024ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80024cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80024ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80024d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80024d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80024d4:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80024d8:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80024dc:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80024e0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80024e2:	4630      	mov	r0, r6
 80024e4:	f000 fbca 	bl	8002c7c <VibeCheckShell_RegisterInputHandler>

	VibeCheckShell_InputHandler accel_cmd = {
 80024e8:	4a2b      	ldr	r2, [pc, #172]	@ (8002598 <VibeCheck_Init+0x120>)
 80024ea:	f107 0318 	add.w	r3, r7, #24
 80024ee:	6810      	ldr	r0, [r2, #0]
 80024f0:	6018      	str	r0, [r3, #0]
 80024f2:	8892      	ldrh	r2, [r2, #4]
 80024f4:	809a      	strh	r2, [r3, #4]
 80024f6:	f107 031e 	add.w	r3, r7, #30
 80024fa:	223a      	movs	r2, #58	@ 0x3a
 80024fc:	2100      	movs	r1, #0
 80024fe:	4618      	mov	r0, r3
 8002500:	f012 fbab 	bl	8014c5a <memset>
 8002504:	4b25      	ldr	r3, [pc, #148]	@ (800259c <VibeCheck_Init+0x124>)
 8002506:	65bb      	str	r3, [r7, #88]	@ 0x58
			.name = "accel",
			.execute = VibeCheckAccelCMD_Execute,
			.obj = &vc->accel
 8002508:	68fa      	ldr	r2, [r7, #12]
 800250a:	f244 436c 	movw	r3, #17516	@ 0x446c
 800250e:	4413      	add	r3, r2
	VibeCheckShell_InputHandler accel_cmd = {
 8002510:	65fb      	str	r3, [r7, #92]	@ 0x5c
	};

	VibeCheckShell_OutputHandler accel_sender = {
 8002512:	4b23      	ldr	r3, [pc, #140]	@ (80025a0 <VibeCheck_Init+0x128>)
 8002514:	613b      	str	r3, [r7, #16]
			.execute = VibeCheckAccelSender_Execute,
			.obj = &vc->accel
 8002516:	68fa      	ldr	r2, [r7, #12]
 8002518:	f244 436c 	movw	r3, #17516	@ 0x446c
 800251c:	4413      	add	r3, r2
	VibeCheckShell_OutputHandler accel_sender = {
 800251e:	617b      	str	r3, [r7, #20]
	};

	VibeCheckShell_RegisterInputHandler(&vc->shell, accel_cmd);
 8002520:	68fe      	ldr	r6, [r7, #12]
 8002522:	466d      	mov	r5, sp
 8002524:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 8002528:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800252a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800252c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800252e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002530:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002532:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002534:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8002538:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800253c:	f107 0318 	add.w	r3, r7, #24
 8002540:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002542:	4630      	mov	r0, r6
 8002544:	f000 fb9a 	bl	8002c7c <VibeCheckShell_RegisterInputHandler>
	VibeCheckShell_RegisterOutputHandler(&vc->shell, accel_sender);
 8002548:	68f8      	ldr	r0, [r7, #12]
 800254a:	f107 0310 	add.w	r3, r7, #16
 800254e:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002552:	f000 fbc5 	bl	8002ce0 <VibeCheckShell_RegisterOutputHandler>

	VibeCheckStrobe_Init(&vc->strobe, htim_strobe);
 8002556:	68fa      	ldr	r2, [r7, #12]
 8002558:	f242 4324 	movw	r3, #9252	@ 0x2424
 800255c:	4413      	add	r3, r2
 800255e:	68b9      	ldr	r1, [r7, #8]
 8002560:	4618      	mov	r0, r3
 8002562:	f000 fdf5 	bl	8003150 <VibeCheckStrobe_Init>
	VibeCheckWaveGen_Init(&vc->wavegen, hdac_wavegen, htim_wavegen);
 8002566:	68fa      	ldr	r2, [r7, #12]
 8002568:	f242 4344 	movw	r3, #9284	@ 0x2444
 800256c:	4413      	add	r3, r2
 800256e:	687a      	ldr	r2, [r7, #4]
 8002570:	6839      	ldr	r1, [r7, #0]
 8002572:	4618      	mov	r0, r3
 8002574:	f001 fb3a 	bl	8003bec <VibeCheckWaveGen_Init>
	VibeCheckAccel_Init(&vc->accel);
 8002578:	68fa      	ldr	r2, [r7, #12]
 800257a:	f244 436c 	movw	r3, #17516	@ 0x446c
 800257e:	4413      	add	r3, r2
 8002580:	4618      	mov	r0, r3
 8002582:	f000 f83d 	bl	8002600 <VibeCheckAccel_Init>
}
 8002586:	bf00      	nop
 8002588:	37ac      	adds	r7, #172	@ 0xac
 800258a:	46bd      	mov	sp, r7
 800258c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800258e:	bf00      	nop
 8002590:	080183a8 	.word	0x080183a8
 8002594:	080034f9 	.word	0x080034f9
 8002598:	080183b0 	.word	0x080183b0
 800259c:	08002895 	.word	0x08002895
 80025a0:	0800294d 	.word	0x0800294d

080025a4 <VibeCheck_Loop>:

void VibeCheck_Loop(VibeCheck* vc)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b086      	sub	sp, #24
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
	VibeCheckWaveGen_Update(&vc->wavegen);
 80025ac:	687a      	ldr	r2, [r7, #4]
 80025ae:	f242 4344 	movw	r3, #9284	@ 0x2444
 80025b2:	4413      	add	r3, r2
 80025b4:	4618      	mov	r0, r3
 80025b6:	f001 fb83 	bl	8003cc0 <VibeCheckWaveGen_Update>
	VibeCheckAccel_Update(&vc->accel);
 80025ba:	687a      	ldr	r2, [r7, #4]
 80025bc:	f244 436c 	movw	r3, #17516	@ 0x446c
 80025c0:	4413      	add	r3, r2
 80025c2:	4618      	mov	r0, r3
 80025c4:	f000 f836 	bl	8002634 <VibeCheckAccel_Update>

	VibeCheckShell_Status shell_status = VibeCheckShell_Update(&vc->shell);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	4618      	mov	r0, r3
 80025cc:	f000 fa62 	bl	8002a94 <VibeCheckShell_Update>
 80025d0:	4603      	mov	r3, r0
 80025d2:	617b      	str	r3, [r7, #20]

	char* usb_tx;
	uint32_t usb_tx_len;
	if (VibeCheckShell_GetOutput(&vc->shell, &usb_tx, &usb_tx_len))
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	f107 020c 	add.w	r2, r7, #12
 80025da:	f107 0110 	add.w	r1, r7, #16
 80025de:	4618      	mov	r0, r3
 80025e0:	f000 fbf4 	bl	8002dcc <VibeCheckShell_GetOutput>
 80025e4:	4603      	mov	r3, r0
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d006      	beq.n	80025f8 <VibeCheck_Loop+0x54>
	{
		CDC_Transmit_HS((uint8_t*)usb_tx, usb_tx_len);
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	68fa      	ldr	r2, [r7, #12]
 80025ee:	b292      	uxth	r2, r2
 80025f0:	4611      	mov	r1, r2
 80025f2:	4618      	mov	r0, r3
 80025f4:	f010 fbc0 	bl	8012d78 <CDC_Transmit_HS>
	}
}
 80025f8:	bf00      	nop
 80025fa:	3718      	adds	r7, #24
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}

08002600 <VibeCheckAccel_Init>:
 */

#include "vibecheck_accel.h"

void VibeCheckAccel_Init(VibeCheckAccel* accel)
{
 8002600:	b480      	push	{r7}
 8002602:	b083      	sub	sp, #12
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
	accel->data_ind = 0;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2200      	movs	r2, #0
 800260c:	f8c3 2190 	str.w	r2, [r3, #400]	@ 0x190
	accel->data_ready = 0;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2200      	movs	r2, #0
 8002614:	f8c3 2194 	str.w	r2, [r3, #404]	@ 0x194
	accel->time_prev_update = 0;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2200      	movs	r2, #0
 800261c:	f8c3 2198 	str.w	r2, [r3, #408]	@ 0x198
	accel->generate_fake_data = 0;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2200      	movs	r2, #0
 8002624:	f8c3 219c 	str.w	r2, [r3, #412]	@ 0x19c
}
 8002628:	bf00      	nop
 800262a:	370c      	adds	r7, #12
 800262c:	46bd      	mov	sp, r7
 800262e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002632:	4770      	bx	lr

08002634 <VibeCheckAccel_Update>:

void VibeCheckAccel_Update(VibeCheckAccel* accel)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b086      	sub	sp, #24
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
	uint32_t time = HAL_GetTick();
 800263c:	f001 fca2 	bl	8003f84 <HAL_GetTick>
 8002640:	6178      	str	r0, [r7, #20]
	if (time - accel->time_prev_update > VC_ACCEL_UPDATE_INTERVAL_MS)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	f8d3 3198 	ldr.w	r3, [r3, #408]	@ 0x198
 8002648:	697a      	ldr	r2, [r7, #20]
 800264a:	1ad3      	subs	r3, r2, r3
 800264c:	2b0a      	cmp	r3, #10
 800264e:	d95e      	bls.n	800270e <VibeCheckAccel_Update+0xda>
	{
		/* TODO: check if accelerometers have been plugged/unplugged */

		if (accel->generate_fake_data)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	f8d3 319c 	ldr.w	r3, [r3, #412]	@ 0x19c
 8002656:	2b00      	cmp	r3, #0
 8002658:	d055      	beq.n	8002706 <VibeCheckAccel_Update+0xd2>
		{
			float val1 = sinf(2.0f * 3.14159f * time);
 800265a:	697b      	ldr	r3, [r7, #20]
 800265c:	ee07 3a90 	vmov	s15, r3
 8002660:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002664:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 8002718 <VibeCheckAccel_Update+0xe4>
 8002668:	ee67 7a87 	vmul.f32	s15, s15, s14
 800266c:	eeb0 0a67 	vmov.f32	s0, s15
 8002670:	f015 f856 	bl	8017720 <sinf>
 8002674:	ed87 0a04 	vstr	s0, [r7, #16]
			float val2 = sinf(2.0f * 3.14159f * time + 3.14159f / 3.0f);
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	ee07 3a90 	vmov	s15, r3
 800267e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002682:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 8002718 <VibeCheckAccel_Update+0xe4>
 8002686:	ee67 7a87 	vmul.f32	s15, s15, s14
 800268a:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 800271c <VibeCheckAccel_Update+0xe8>
 800268e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002692:	eeb0 0a67 	vmov.f32	s0, s15
 8002696:	f015 f843 	bl	8017720 <sinf>
 800269a:	ed87 0a03 	vstr	s0, [r7, #12]
			float val3 = sinf(2.0f * 3.14159f * time + 2.0f * 3.14159f / 3.0f);
 800269e:	697b      	ldr	r3, [r7, #20]
 80026a0:	ee07 3a90 	vmov	s15, r3
 80026a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80026a8:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8002718 <VibeCheckAccel_Update+0xe4>
 80026ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 80026b0:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8002720 <VibeCheckAccel_Update+0xec>
 80026b4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80026b8:	eeb0 0a67 	vmov.f32	s0, s15
 80026bc:	f015 f830 	bl	8017720 <sinf>
 80026c0:	ed87 0a02 	vstr	s0, [r7, #8]

			VibeCheckAccel_AddData(accel, 1, time, val1, val2, val3);
 80026c4:	ed97 1a02 	vldr	s2, [r7, #8]
 80026c8:	edd7 0a03 	vldr	s1, [r7, #12]
 80026cc:	ed97 0a04 	vldr	s0, [r7, #16]
 80026d0:	697a      	ldr	r2, [r7, #20]
 80026d2:	2101      	movs	r1, #1
 80026d4:	6878      	ldr	r0, [r7, #4]
 80026d6:	f000 f825 	bl	8002724 <VibeCheckAccel_AddData>
			VibeCheckAccel_AddData(accel, 2, time, val3, val1, val2);
 80026da:	ed97 1a03 	vldr	s2, [r7, #12]
 80026de:	edd7 0a04 	vldr	s1, [r7, #16]
 80026e2:	ed97 0a02 	vldr	s0, [r7, #8]
 80026e6:	697a      	ldr	r2, [r7, #20]
 80026e8:	2102      	movs	r1, #2
 80026ea:	6878      	ldr	r0, [r7, #4]
 80026ec:	f000 f81a 	bl	8002724 <VibeCheckAccel_AddData>
			VibeCheckAccel_AddData(accel, 3, time, val2, val3, val1);
 80026f0:	ed97 1a04 	vldr	s2, [r7, #16]
 80026f4:	edd7 0a02 	vldr	s1, [r7, #8]
 80026f8:	ed97 0a03 	vldr	s0, [r7, #12]
 80026fc:	697a      	ldr	r2, [r7, #20]
 80026fe:	2103      	movs	r1, #3
 8002700:	6878      	ldr	r0, [r7, #4]
 8002702:	f000 f80f 	bl	8002724 <VibeCheckAccel_AddData>
		}

		accel->time_prev_update = time;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	697a      	ldr	r2, [r7, #20]
 800270a:	f8c3 2198 	str.w	r2, [r3, #408]	@ 0x198
	}
}
 800270e:	bf00      	nop
 8002710:	3718      	adds	r7, #24
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}
 8002716:	bf00      	nop
 8002718:	40c90fd0 	.word	0x40c90fd0
 800271c:	3f860a8b 	.word	0x3f860a8b
 8002720:	40060a8b 	.word	0x40060a8b

08002724 <VibeCheckAccel_AddData>:

void VibeCheckAccel_AddData(VibeCheckAccel* accel, uint8_t id, uint32_t time, float x, float y, float z)
{
 8002724:	b480      	push	{r7}
 8002726:	b087      	sub	sp, #28
 8002728:	af00      	add	r7, sp, #0
 800272a:	6178      	str	r0, [r7, #20]
 800272c:	460b      	mov	r3, r1
 800272e:	60fa      	str	r2, [r7, #12]
 8002730:	ed87 0a02 	vstr	s0, [r7, #8]
 8002734:	edc7 0a01 	vstr	s1, [r7, #4]
 8002738:	ed87 1a00 	vstr	s2, [r7]
 800273c:	74fb      	strb	r3, [r7, #19]
	accel->data[accel->data_ind].id = id;
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	f8d3 2190 	ldr.w	r2, [r3, #400]	@ 0x190
 8002744:	6979      	ldr	r1, [r7, #20]
 8002746:	4613      	mov	r3, r2
 8002748:	009b      	lsls	r3, r3, #2
 800274a:	4413      	add	r3, r2
 800274c:	009b      	lsls	r3, r3, #2
 800274e:	440b      	add	r3, r1
 8002750:	7cfa      	ldrb	r2, [r7, #19]
 8002752:	701a      	strb	r2, [r3, #0]
	accel->data[accel->data_ind].time = time;
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	f8d3 2190 	ldr.w	r2, [r3, #400]	@ 0x190
 800275a:	6979      	ldr	r1, [r7, #20]
 800275c:	4613      	mov	r3, r2
 800275e:	009b      	lsls	r3, r3, #2
 8002760:	4413      	add	r3, r2
 8002762:	009b      	lsls	r3, r3, #2
 8002764:	440b      	add	r3, r1
 8002766:	3304      	adds	r3, #4
 8002768:	68fa      	ldr	r2, [r7, #12]
 800276a:	601a      	str	r2, [r3, #0]
	accel->data[accel->data_ind].x = x;
 800276c:	697b      	ldr	r3, [r7, #20]
 800276e:	f8d3 2190 	ldr.w	r2, [r3, #400]	@ 0x190
 8002772:	6979      	ldr	r1, [r7, #20]
 8002774:	4613      	mov	r3, r2
 8002776:	009b      	lsls	r3, r3, #2
 8002778:	4413      	add	r3, r2
 800277a:	009b      	lsls	r3, r3, #2
 800277c:	440b      	add	r3, r1
 800277e:	3308      	adds	r3, #8
 8002780:	68ba      	ldr	r2, [r7, #8]
 8002782:	601a      	str	r2, [r3, #0]
	accel->data[accel->data_ind].y = y;
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	f8d3 2190 	ldr.w	r2, [r3, #400]	@ 0x190
 800278a:	6979      	ldr	r1, [r7, #20]
 800278c:	4613      	mov	r3, r2
 800278e:	009b      	lsls	r3, r3, #2
 8002790:	4413      	add	r3, r2
 8002792:	009b      	lsls	r3, r3, #2
 8002794:	440b      	add	r3, r1
 8002796:	330c      	adds	r3, #12
 8002798:	687a      	ldr	r2, [r7, #4]
 800279a:	601a      	str	r2, [r3, #0]
	accel->data[accel->data_ind].z = z;
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	f8d3 2190 	ldr.w	r2, [r3, #400]	@ 0x190
 80027a2:	6979      	ldr	r1, [r7, #20]
 80027a4:	4613      	mov	r3, r2
 80027a6:	009b      	lsls	r3, r3, #2
 80027a8:	4413      	add	r3, r2
 80027aa:	009b      	lsls	r3, r3, #2
 80027ac:	440b      	add	r3, r1
 80027ae:	3310      	adds	r3, #16
 80027b0:	683a      	ldr	r2, [r7, #0]
 80027b2:	601a      	str	r2, [r3, #0]

	accel->data_ind++;
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	f8d3 3190 	ldr.w	r3, [r3, #400]	@ 0x190
 80027ba:	1c5a      	adds	r2, r3, #1
 80027bc:	697b      	ldr	r3, [r7, #20]
 80027be:	f8c3 2190 	str.w	r2, [r3, #400]	@ 0x190
	if (accel->data_ind == VC_ACCEL_DATA_PER_PACKET)
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	f8d3 3190 	ldr.w	r3, [r3, #400]	@ 0x190
 80027c8:	2b0a      	cmp	r3, #10
 80027ca:	d104      	bne.n	80027d6 <VibeCheckAccel_AddData+0xb2>
	{
		accel->data_ready = 1;
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	2201      	movs	r2, #1
 80027d0:	f8c3 2194 	str.w	r2, [r3, #404]	@ 0x194
	else if (accel->data_ind == 2 * VC_ACCEL_DATA_PER_PACKET)
	{
		accel->data_ind = 0;
		accel->data_ready = 1;
	}
}
 80027d4:	e00c      	b.n	80027f0 <VibeCheckAccel_AddData+0xcc>
	else if (accel->data_ind == 2 * VC_ACCEL_DATA_PER_PACKET)
 80027d6:	697b      	ldr	r3, [r7, #20]
 80027d8:	f8d3 3190 	ldr.w	r3, [r3, #400]	@ 0x190
 80027dc:	2b14      	cmp	r3, #20
 80027de:	d107      	bne.n	80027f0 <VibeCheckAccel_AddData+0xcc>
		accel->data_ind = 0;
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	2200      	movs	r2, #0
 80027e4:	f8c3 2190 	str.w	r2, [r3, #400]	@ 0x190
		accel->data_ready = 1;
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	2201      	movs	r2, #1
 80027ec:	f8c3 2194 	str.w	r2, [r3, #404]	@ 0x194
}
 80027f0:	bf00      	nop
 80027f2:	371c      	adds	r7, #28
 80027f4:	46bd      	mov	sp, r7
 80027f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fa:	4770      	bx	lr

080027fc <VibeCheckAccel_StartFakeData>:

void VibeCheckAccel_StartFakeData(VibeCheckAccel* accel)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b083      	sub	sp, #12
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
	accel->generate_fake_data = 1;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2201      	movs	r2, #1
 8002808:	f8c3 219c 	str.w	r2, [r3, #412]	@ 0x19c
}
 800280c:	bf00      	nop
 800280e:	370c      	adds	r7, #12
 8002810:	46bd      	mov	sp, r7
 8002812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002816:	4770      	bx	lr

08002818 <VibeCheckAccel_StopFakeData>:

void VibeCheckAccel_StopFakeData(VibeCheckAccel* accel)
{
 8002818:	b480      	push	{r7}
 800281a:	b083      	sub	sp, #12
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
	accel->generate_fake_data = 0;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2200      	movs	r2, #0
 8002824:	f8c3 219c 	str.w	r2, [r3, #412]	@ 0x19c
}
 8002828:	bf00      	nop
 800282a:	370c      	adds	r7, #12
 800282c:	46bd      	mov	sp, r7
 800282e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002832:	4770      	bx	lr

08002834 <VibeCheckAccel_GetDataReady>:

uint32_t VibeCheckAccel_GetDataReady(VibeCheckAccel* accel, VibeCheckAccel_Data** data)
{
 8002834:	b480      	push	{r7}
 8002836:	b083      	sub	sp, #12
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
 800283c:	6039      	str	r1, [r7, #0]
	if (accel->data_ready)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	f8d3 3194 	ldr.w	r3, [r3, #404]	@ 0x194
 8002844:	2b00      	cmp	r3, #0
 8002846:	d00f      	beq.n	8002868 <VibeCheckAccel_GetDataReady+0x34>
	{
		if (accel->data_ind < VC_ACCEL_DATA_PER_PACKET)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	f8d3 3190 	ldr.w	r3, [r3, #400]	@ 0x190
 800284e:	2b09      	cmp	r3, #9
 8002850:	d805      	bhi.n	800285e <VibeCheckAccel_GetDataReady+0x2a>
		{
			/* ready to send the second half */
			*data = &accel->data[VC_ACCEL_DATA_PER_PACKET];
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	f103 02c8 	add.w	r2, r3, #200	@ 0xc8
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	601a      	str	r2, [r3, #0]
 800285c:	e002      	b.n	8002864 <VibeCheckAccel_GetDataReady+0x30>
		}
		else
		{
			/* ready to send the first half */
			*data = &accel->data[0];
 800285e:	687a      	ldr	r2, [r7, #4]
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	601a      	str	r2, [r3, #0]
		}
		return 1;
 8002864:	2301      	movs	r3, #1
 8002866:	e000      	b.n	800286a <VibeCheckAccel_GetDataReady+0x36>
	}
	return 0;
 8002868:	2300      	movs	r3, #0
}
 800286a:	4618      	mov	r0, r3
 800286c:	370c      	adds	r7, #12
 800286e:	46bd      	mov	sp, r7
 8002870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002874:	4770      	bx	lr

08002876 <VibeCheckAccel_ResetDataReady>:

void VibeCheckAccel_ResetDataReady(VibeCheckAccel* accel)
{
 8002876:	b480      	push	{r7}
 8002878:	b083      	sub	sp, #12
 800287a:	af00      	add	r7, sp, #0
 800287c:	6078      	str	r0, [r7, #4]
	accel->data_ready = 0;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2200      	movs	r2, #0
 8002882:	f8c3 2194 	str.w	r2, [r3, #404]	@ 0x194
}
 8002886:	bf00      	nop
 8002888:	370c      	adds	r7, #12
 800288a:	46bd      	mov	sp, r7
 800288c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002890:	4770      	bx	lr
	...

08002894 <VibeCheckAccelCMD_Execute>:
 */

#include "vibecheck_accel_handler.h"

uint32_t VibeCheckAccelCMD_Execute(void* obj, VibeCheckShell* shell)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b094      	sub	sp, #80	@ 0x50
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
 800289c:	6039      	str	r1, [r7, #0]
	VibeCheckAccel* accel = (VibeCheckAccel*)obj;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	64fb      	str	r3, [r7, #76]	@ 0x4c

	char str[VC_SHELL_MAX_TOKEN_LEN];
	if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 80028a2:	f107 030c 	add.w	r3, r7, #12
 80028a6:	2240      	movs	r2, #64	@ 0x40
 80028a8:	4619      	mov	r1, r3
 80028aa:	6838      	ldr	r0, [r7, #0]
 80028ac:	f000 fb0a 	bl	8002ec4 <VibeCheckShell_GetNextString>
 80028b0:	4603      	mov	r3, r0
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d03c      	beq.n	8002930 <VibeCheckAccelCMD_Execute+0x9c>
	{
		if (!strcmp(str, "fakedata"))
 80028b6:	f107 030c 	add.w	r3, r7, #12
 80028ba:	4920      	ldr	r1, [pc, #128]	@ (800293c <VibeCheckAccelCMD_Execute+0xa8>)
 80028bc:	4618      	mov	r0, r3
 80028be:	f7fd fd27 	bl	8000310 <strcmp>
 80028c2:	4603      	mov	r3, r0
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d133      	bne.n	8002930 <VibeCheckAccelCMD_Execute+0x9c>
		{
			if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 80028c8:	f107 030c 	add.w	r3, r7, #12
 80028cc:	2240      	movs	r2, #64	@ 0x40
 80028ce:	4619      	mov	r1, r3
 80028d0:	6838      	ldr	r0, [r7, #0]
 80028d2:	f000 faf7 	bl	8002ec4 <VibeCheckShell_GetNextString>
 80028d6:	4603      	mov	r3, r0
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d029      	beq.n	8002930 <VibeCheckAccelCMD_Execute+0x9c>
			{
				if (!strcmp(str, "start"))
 80028dc:	f107 030c 	add.w	r3, r7, #12
 80028e0:	4917      	ldr	r1, [pc, #92]	@ (8002940 <VibeCheckAccelCMD_Execute+0xac>)
 80028e2:	4618      	mov	r0, r3
 80028e4:	f7fd fd14 	bl	8000310 <strcmp>
 80028e8:	4603      	mov	r3, r0
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d10b      	bne.n	8002906 <VibeCheckAccelCMD_Execute+0x72>
				{
					VibeCheckAccel_StartFakeData(accel);
 80028ee:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80028f0:	f7ff ff84 	bl	80027fc <VibeCheckAccel_StartFakeData>
					VibeCheckShell_PutOutputString(shell, "ack");
 80028f4:	4913      	ldr	r1, [pc, #76]	@ (8002944 <VibeCheckAccelCMD_Execute+0xb0>)
 80028f6:	6838      	ldr	r0, [r7, #0]
 80028f8:	f000 fb9e 	bl	8003038 <VibeCheckShell_PutOutputString>
					VibeCheckShell_PutOutputDelimiter(shell);
 80028fc:	6838      	ldr	r0, [r7, #0]
 80028fe:	f000 fc19 	bl	8003134 <VibeCheckShell_PutOutputDelimiter>
					return 1;
 8002902:	2301      	movs	r3, #1
 8002904:	e015      	b.n	8002932 <VibeCheckAccelCMD_Execute+0x9e>
				}
				else if (!strcmp(str, "stop"))
 8002906:	f107 030c 	add.w	r3, r7, #12
 800290a:	490f      	ldr	r1, [pc, #60]	@ (8002948 <VibeCheckAccelCMD_Execute+0xb4>)
 800290c:	4618      	mov	r0, r3
 800290e:	f7fd fcff 	bl	8000310 <strcmp>
 8002912:	4603      	mov	r3, r0
 8002914:	2b00      	cmp	r3, #0
 8002916:	d10b      	bne.n	8002930 <VibeCheckAccelCMD_Execute+0x9c>
				{
					VibeCheckAccel_StopFakeData(accel);
 8002918:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800291a:	f7ff ff7d 	bl	8002818 <VibeCheckAccel_StopFakeData>
					VibeCheckShell_PutOutputString(shell, "ack");
 800291e:	4909      	ldr	r1, [pc, #36]	@ (8002944 <VibeCheckAccelCMD_Execute+0xb0>)
 8002920:	6838      	ldr	r0, [r7, #0]
 8002922:	f000 fb89 	bl	8003038 <VibeCheckShell_PutOutputString>
					VibeCheckShell_PutOutputDelimiter(shell);
 8002926:	6838      	ldr	r0, [r7, #0]
 8002928:	f000 fc04 	bl	8003134 <VibeCheckShell_PutOutputDelimiter>
					return 1;
 800292c:	2301      	movs	r3, #1
 800292e:	e000      	b.n	8002932 <VibeCheckAccelCMD_Execute+0x9e>
				}
			}
		}
	}

	return 0;
 8002930:	2300      	movs	r3, #0
}
 8002932:	4618      	mov	r0, r3
 8002934:	3750      	adds	r7, #80	@ 0x50
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}
 800293a:	bf00      	nop
 800293c:	080183b8 	.word	0x080183b8
 8002940:	080183c4 	.word	0x080183c4
 8002944:	080183cc 	.word	0x080183cc
 8002948:	080183d0 	.word	0x080183d0

0800294c <VibeCheckAccelSender_Execute>:


uint32_t VibeCheckAccelSender_Execute(void* obj, VibeCheckShell* shell)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b086      	sub	sp, #24
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
 8002954:	6039      	str	r1, [r7, #0]
	VibeCheckAccel* accel = (VibeCheckAccel*)obj;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	613b      	str	r3, [r7, #16]

	VibeCheckAccel_Data* data;
	if (VibeCheckAccel_GetDataReady(accel, &data))
 800295a:	f107 030c 	add.w	r3, r7, #12
 800295e:	4619      	mov	r1, r3
 8002960:	6938      	ldr	r0, [r7, #16]
 8002962:	f7ff ff67 	bl	8002834 <VibeCheckAccel_GetDataReady>
 8002966:	4603      	mov	r3, r0
 8002968:	2b00      	cmp	r3, #0
 800296a:	d051      	beq.n	8002a10 <VibeCheckAccelSender_Execute+0xc4>
	{
		VibeCheckAccel_ResetDataReady(accel);
 800296c:	6938      	ldr	r0, [r7, #16]
 800296e:	f7ff ff82 	bl	8002876 <VibeCheckAccel_ResetDataReady>

		VibeCheckShell_PutOutputString(shell, "data");
 8002972:	492a      	ldr	r1, [pc, #168]	@ (8002a1c <VibeCheckAccelSender_Execute+0xd0>)
 8002974:	6838      	ldr	r0, [r7, #0]
 8002976:	f000 fb5f 	bl	8003038 <VibeCheckShell_PutOutputString>
		VibeCheckShell_PutOutputSeparator(shell);
 800297a:	6838      	ldr	r0, [r7, #0]
 800297c:	f000 fbcc 	bl	8003118 <VibeCheckShell_PutOutputSeparator>
		VibeCheckShell_PutOutputInt(shell, VC_ACCEL_DATA_PER_PACKET);
 8002980:	210a      	movs	r1, #10
 8002982:	6838      	ldr	r0, [r7, #0]
 8002984:	f000 fb92 	bl	80030ac <VibeCheckShell_PutOutputInt>

		uint32_t data_written = 0;
 8002988:	2300      	movs	r3, #0
 800298a:	617b      	str	r3, [r7, #20]
		while (data_written < VC_ACCEL_DATA_PER_PACKET)
 800298c:	e038      	b.n	8002a00 <VibeCheckAccelSender_Execute+0xb4>
		{
			VibeCheckShell_PutOutputSeparator(shell);
 800298e:	6838      	ldr	r0, [r7, #0]
 8002990:	f000 fbc2 	bl	8003118 <VibeCheckShell_PutOutputSeparator>
			VibeCheckShell_PutOutputInt(shell, data->id);
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	781b      	ldrb	r3, [r3, #0]
 8002998:	4619      	mov	r1, r3
 800299a:	6838      	ldr	r0, [r7, #0]
 800299c:	f000 fb86 	bl	80030ac <VibeCheckShell_PutOutputInt>
			VibeCheckShell_PutOutputSeparator(shell);
 80029a0:	6838      	ldr	r0, [r7, #0]
 80029a2:	f000 fbb9 	bl	8003118 <VibeCheckShell_PutOutputSeparator>
			VibeCheckShell_PutOutputInt(shell, data->time);
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	4619      	mov	r1, r3
 80029ac:	6838      	ldr	r0, [r7, #0]
 80029ae:	f000 fb7d 	bl	80030ac <VibeCheckShell_PutOutputInt>
			VibeCheckShell_PutOutputSeparator(shell);
 80029b2:	6838      	ldr	r0, [r7, #0]
 80029b4:	f000 fbb0 	bl	8003118 <VibeCheckShell_PutOutputSeparator>
			VibeCheckShell_PutOutputFloat(shell, data->x);
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	edd3 7a02 	vldr	s15, [r3, #8]
 80029be:	eeb0 0a67 	vmov.f32	s0, s15
 80029c2:	6838      	ldr	r0, [r7, #0]
 80029c4:	f000 fb8a 	bl	80030dc <VibeCheckShell_PutOutputFloat>
			VibeCheckShell_PutOutputSeparator(shell);
 80029c8:	6838      	ldr	r0, [r7, #0]
 80029ca:	f000 fba5 	bl	8003118 <VibeCheckShell_PutOutputSeparator>
			VibeCheckShell_PutOutputFloat(shell, data->y);
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	edd3 7a03 	vldr	s15, [r3, #12]
 80029d4:	eeb0 0a67 	vmov.f32	s0, s15
 80029d8:	6838      	ldr	r0, [r7, #0]
 80029da:	f000 fb7f 	bl	80030dc <VibeCheckShell_PutOutputFloat>
			VibeCheckShell_PutOutputSeparator(shell);
 80029de:	6838      	ldr	r0, [r7, #0]
 80029e0:	f000 fb9a 	bl	8003118 <VibeCheckShell_PutOutputSeparator>
			VibeCheckShell_PutOutputFloat(shell, data->z);
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	edd3 7a04 	vldr	s15, [r3, #16]
 80029ea:	eeb0 0a67 	vmov.f32	s0, s15
 80029ee:	6838      	ldr	r0, [r7, #0]
 80029f0:	f000 fb74 	bl	80030dc <VibeCheckShell_PutOutputFloat>

			data++;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	3314      	adds	r3, #20
 80029f8:	60fb      	str	r3, [r7, #12]
			data_written++;
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	3301      	adds	r3, #1
 80029fe:	617b      	str	r3, [r7, #20]
		while (data_written < VC_ACCEL_DATA_PER_PACKET)
 8002a00:	697b      	ldr	r3, [r7, #20]
 8002a02:	2b09      	cmp	r3, #9
 8002a04:	d9c3      	bls.n	800298e <VibeCheckAccelSender_Execute+0x42>
		}

		VibeCheckShell_PutOutputDelimiter(shell);
 8002a06:	6838      	ldr	r0, [r7, #0]
 8002a08:	f000 fb94 	bl	8003134 <VibeCheckShell_PutOutputDelimiter>

		return 1;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	e000      	b.n	8002a12 <VibeCheckAccelSender_Execute+0xc6>
	}
	else
	{
		return 0;
 8002a10:	2300      	movs	r3, #0
	}
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	3718      	adds	r7, #24
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}
 8002a1a:	bf00      	nop
 8002a1c:	080183d8 	.word	0x080183d8

08002a20 <VibeCheckShell_Init>:

#include "vibecheck_shell.h"


void VibeCheckShell_Init(VibeCheckShell* shell)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b083      	sub	sp, #12
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
	shell->input_head = 0;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
	shell->input_tail = 0;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2200      	movs	r2, #0
 8002a34:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804
	shell->input_count = 0;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	f8c3 2808 	str.w	r2, [r3, #2056]	@ 0x808
	shell->input_delimiter_count = 0;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2200      	movs	r2, #0
 8002a44:	f8c3 280c 	str.w	r2, [r3, #2060]	@ 0x80c

	shell->output_head = 0;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002a4e:	461a      	mov	r2, r3
 8002a50:	2300      	movs	r3, #0
 8002a52:	6113      	str	r3, [r2, #16]
	shell->output_tail = 0;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002a5a:	461a      	mov	r2, r3
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	6153      	str	r3, [r2, #20]
	shell->output_count = 0;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002a66:	461a      	mov	r2, r3
 8002a68:	2300      	movs	r3, #0
 8002a6a:	6193      	str	r3, [r2, #24]

	shell->ih_count = 0;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002a72:	461a      	mov	r2, r3
 8002a74:	2300      	movs	r3, #0
 8002a76:	f8c2 321c 	str.w	r3, [r2, #540]	@ 0x21c
	shell->oh_count = 0;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002a80:	461a      	mov	r2, r3
 8002a82:	2300      	movs	r3, #0
 8002a84:	f8c2 3420 	str.w	r3, [r2, #1056]	@ 0x420
}
 8002a88:	bf00      	nop
 8002a8a:	370c      	adds	r7, #12
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a92:	4770      	bx	lr

08002a94 <VibeCheckShell_Update>:

VibeCheckShell_Status VibeCheckShell_Update(VibeCheckShell* shell)
{
 8002a94:	b590      	push	{r4, r7, lr}
 8002a96:	b099      	sub	sp, #100	@ 0x64
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]

	VibeCheckShell_Status status = {
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
			.ibuf_status = VC_SHELL_INPUT_BUFFER_OK,
			.obuf_status = VC_SHELL_OUTPUT_BUFFER_OK
	};

	/* check if character buffer overflow */
	if (shell->input_count >= VC_SHELL_IO_BUF_LEN)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
 8002aa6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002aaa:	d302      	bcc.n	8002ab2 <VibeCheckShell_Update+0x1e>
		status.ibuf_status = VC_SHELL_INPUT_BUFFER_OVERFLOW;
 8002aac:	2301      	movs	r3, #1
 8002aae:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e


	/* handle the inputs */
	if (shell->input_delimiter_count)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	f8d3 380c 	ldr.w	r3, [r3, #2060]	@ 0x80c
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	f000 8092 	beq.w	8002be2 <VibeCheckShell_Update+0x14e>
		status.ihandl_status = VC_SHELL_INPUT_PROCESSED;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c

	while (shell->input_delimiter_count)
 8002ac4:	e08d      	b.n	8002be2 <VibeCheckShell_Update+0x14e>
	{
		/* look for a handler */
		char ih_name[VC_SHELL_MAX_TOKEN_LEN];
		if (VibeCheckShell_GetNextString(shell, ih_name, VC_SHELL_MAX_TOKEN_LEN))
 8002ac6:	f107 030c 	add.w	r3, r7, #12
 8002aca:	2240      	movs	r2, #64	@ 0x40
 8002acc:	4619      	mov	r1, r3
 8002ace:	6878      	ldr	r0, [r7, #4]
 8002ad0:	f000 f9f8 	bl	8002ec4 <VibeCheckShell_GetNextString>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d04d      	beq.n	8002b76 <VibeCheckShell_Update+0xe2>
		{
			for (uint32_t i = 0; i < shell->ih_count; i++)
 8002ada:	2300      	movs	r3, #0
 8002adc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002ade:	e041      	b.n	8002b64 <VibeCheckShell_Update+0xd0>
			{
				if (!strcmp(shell->input_handlers[i].name, ih_name))
 8002ae0:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8002ae2:	4613      	mov	r3, r2
 8002ae4:	00db      	lsls	r3, r3, #3
 8002ae6:	4413      	add	r3, r2
 8002ae8:	00db      	lsls	r3, r3, #3
 8002aea:	f241 0218 	movw	r2, #4120	@ 0x1018
 8002aee:	441a      	add	r2, r3
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	4413      	add	r3, r2
 8002af4:	3304      	adds	r3, #4
 8002af6:	f107 020c 	add.w	r2, r7, #12
 8002afa:	4611      	mov	r1, r2
 8002afc:	4618      	mov	r0, r3
 8002afe:	f7fd fc07 	bl	8000310 <strcmp>
 8002b02:	4603      	mov	r3, r0
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d11e      	bne.n	8002b46 <VibeCheckShell_Update+0xb2>
				{
					/* found a handler for this input */
					if (!shell->input_handlers[i].execute(shell->input_handlers[i].obj, shell))
 8002b08:	6879      	ldr	r1, [r7, #4]
 8002b0a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8002b0c:	4613      	mov	r3, r2
 8002b0e:	00db      	lsls	r3, r3, #3
 8002b10:	4413      	add	r3, r2
 8002b12:	00db      	lsls	r3, r3, #3
 8002b14:	18ca      	adds	r2, r1, r3
 8002b16:	f241 035c 	movw	r3, #4188	@ 0x105c
 8002b1a:	4413      	add	r3, r2
 8002b1c:	681c      	ldr	r4, [r3, #0]
 8002b1e:	6879      	ldr	r1, [r7, #4]
 8002b20:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8002b22:	4613      	mov	r3, r2
 8002b24:	00db      	lsls	r3, r3, #3
 8002b26:	4413      	add	r3, r2
 8002b28:	00db      	lsls	r3, r3, #3
 8002b2a:	440b      	add	r3, r1
 8002b2c:	f503 5383 	add.w	r3, r3, #4192	@ 0x1060
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	6879      	ldr	r1, [r7, #4]
 8002b34:	4618      	mov	r0, r3
 8002b36:	47a0      	blx	r4
 8002b38:	4603      	mov	r3, r0
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d11f      	bne.n	8002b7e <VibeCheckShell_Update+0xea>
						status.ihandl_status = VC_SHELL_INPUT_ERROR_EXECUTING;
 8002b3e:	2303      	movs	r3, #3
 8002b40:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
					break;
 8002b44:	e01b      	b.n	8002b7e <VibeCheckShell_Update+0xea>
				}

				if (i == shell->ih_count - 1)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002b4c:	f8d3 321c 	ldr.w	r3, [r3, #540]	@ 0x21c
 8002b50:	3b01      	subs	r3, #1
 8002b52:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8002b54:	429a      	cmp	r2, r3
 8002b56:	d102      	bne.n	8002b5e <VibeCheckShell_Update+0xca>
					status.ihandl_status = VC_SHELL_INPUT_ERROR_NO_HANDLER;
 8002b58:	2302      	movs	r3, #2
 8002b5a:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
			for (uint32_t i = 0; i < shell->ih_count; i++)
 8002b5e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002b60:	3301      	adds	r3, #1
 8002b62:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002b6a:	f8d3 321c 	ldr.w	r3, [r3, #540]	@ 0x21c
 8002b6e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8002b70:	429a      	cmp	r2, r3
 8002b72:	d3b5      	bcc.n	8002ae0 <VibeCheckShell_Update+0x4c>
 8002b74:	e004      	b.n	8002b80 <VibeCheckShell_Update+0xec>
			}
		}
		else
		{
			/* couldn't get a string from the input for handler name */
			status.ihandl_status = VC_SHELL_INPUT_ERROR_NO_HANDLER;
 8002b76:	2302      	movs	r3, #2
 8002b78:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
 8002b7c:	e000      	b.n	8002b80 <VibeCheckShell_Update+0xec>
					break;
 8002b7e:	bf00      	nop
		}

		/* clean up the remainder of the previous message */
		while (1)
		{
			char x = shell->input[shell->input_tail];
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 8002b86:	687a      	ldr	r2, [r7, #4]
 8002b88:	5cd3      	ldrb	r3, [r2, r3]
 8002b8a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

			shell->input_count--;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
 8002b94:	1e5a      	subs	r2, r3, #1
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	f8c3 2808 	str.w	r2, [r3, #2056]	@ 0x808
			shell->input_tail++;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 8002ba2:	1c5a      	adds	r2, r3, #1
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804
			if (shell->input_tail == VC_SHELL_IO_BUF_LEN)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 8002bb0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002bb4:	d103      	bne.n	8002bbe <VibeCheckShell_Update+0x12a>
				shell->input_tail = 0;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804

			if(strchr(VC_SHELL_DELIMITER, x) != NULL)
 8002bbe:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8002bc2:	4619      	mov	r1, r3
 8002bc4:	482c      	ldr	r0, [pc, #176]	@ (8002c78 <VibeCheckShell_Update+0x1e4>)
 8002bc6:	f012 f850 	bl	8014c6a <strchr>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d100      	bne.n	8002bd2 <VibeCheckShell_Update+0x13e>
		{
 8002bd0:	e7d6      	b.n	8002b80 <VibeCheckShell_Update+0xec>
				break;  /* found the delimiter */
 8002bd2:	bf00      	nop
		}


		shell->input_delimiter_count--;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	f8d3 380c 	ldr.w	r3, [r3, #2060]	@ 0x80c
 8002bda:	1e5a      	subs	r2, r3, #1
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	f8c3 280c 	str.w	r2, [r3, #2060]	@ 0x80c
	while (shell->input_delimiter_count)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	f8d3 380c 	ldr.w	r3, [r3, #2060]	@ 0x80c
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	f47f af6c 	bne.w	8002ac6 <VibeCheckShell_Update+0x32>
	}


	/* handle the outputs */
	for (uint32_t i = 0; i < shell->oh_count; i++)
 8002bee:	2300      	movs	r3, #0
 8002bf0:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002bf2:	e018      	b.n	8002c26 <VibeCheckShell_Update+0x192>
	{
		if (shell->output_handlers[i].execute(shell->output_handlers[i].obj, shell))
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002bf8:	f202 4244 	addw	r2, r2, #1092	@ 0x444
 8002bfc:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
 8002c00:	6879      	ldr	r1, [r7, #4]
 8002c02:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002c04:	f203 4344 	addw	r3, r3, #1092	@ 0x444
 8002c08:	00db      	lsls	r3, r3, #3
 8002c0a:	440b      	add	r3, r1
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	6879      	ldr	r1, [r7, #4]
 8002c10:	4618      	mov	r0, r3
 8002c12:	4790      	blx	r2
 8002c14:	4603      	mov	r3, r0
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d002      	beq.n	8002c20 <VibeCheckShell_Update+0x18c>
		{
			status.ohandl_status = VC_SHELL_OUTPUT_PROCESSED;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
	for (uint32_t i = 0; i < shell->oh_count; i++)
 8002c20:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002c22:	3301      	adds	r3, #1
 8002c24:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002c2c:	f8d3 3420 	ldr.w	r3, [r3, #1056]	@ 0x420
 8002c30:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002c32:	429a      	cmp	r2, r3
 8002c34:	d3de      	bcc.n	8002bf4 <VibeCheckShell_Update+0x160>
		}
	}

	/* check if character buffer overflow */
	if (shell->output_count >= VC_SHELL_IO_BUF_LEN)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002c3c:	699b      	ldr	r3, [r3, #24]
 8002c3e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002c42:	d302      	bcc.n	8002c4a <VibeCheckShell_Update+0x1b6>
		status.obuf_status = VC_SHELL_OUTPUT_BUFFER_OVERFLOW;
 8002c44:	2301      	movs	r3, #1
 8002c46:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f


	return status;
 8002c4a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002c4c:	653b      	str	r3, [r7, #80]	@ 0x50
 8002c4e:	2300      	movs	r3, #0
 8002c50:	f897 2050 	ldrb.w	r2, [r7, #80]	@ 0x50
 8002c54:	f362 0307 	bfi	r3, r2, #0, #8
 8002c58:	f897 2051 	ldrb.w	r2, [r7, #81]	@ 0x51
 8002c5c:	f362 230f 	bfi	r3, r2, #8, #8
 8002c60:	f897 2052 	ldrb.w	r2, [r7, #82]	@ 0x52
 8002c64:	f362 4317 	bfi	r3, r2, #16, #8
 8002c68:	f897 2053 	ldrb.w	r2, [r7, #83]	@ 0x53
 8002c6c:	f362 631f 	bfi	r3, r2, #24, #8
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	3764      	adds	r7, #100	@ 0x64
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd90      	pop	{r4, r7, pc}
 8002c78:	080183e0 	.word	0x080183e0

08002c7c <VibeCheckShell_RegisterInputHandler>:

void VibeCheckShell_RegisterInputHandler(VibeCheckShell* shell, VibeCheckShell_InputHandler handler)
{
 8002c7c:	b084      	sub	sp, #16
 8002c7e:	b580      	push	{r7, lr}
 8002c80:	b082      	sub	sp, #8
 8002c82:	af00      	add	r7, sp, #0
 8002c84:	6078      	str	r0, [r7, #4]
 8002c86:	f107 0014 	add.w	r0, r7, #20
 8002c8a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	if (shell->ih_count < VC_SHELL_MAX_NUM_HANDLERS)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002c94:	f8d3 321c 	ldr.w	r3, [r3, #540]	@ 0x21c
 8002c98:	2b3f      	cmp	r3, #63	@ 0x3f
 8002c9a:	d81a      	bhi.n	8002cd2 <VibeCheckShell_RegisterInputHandler+0x56>
		shell->input_handlers[shell->ih_count++] = handler;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002ca2:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8002ca6:	1c53      	adds	r3, r2, #1
 8002ca8:	6879      	ldr	r1, [r7, #4]
 8002caa:	f501 5100 	add.w	r1, r1, #8192	@ 0x2000
 8002cae:	f8c1 321c 	str.w	r3, [r1, #540]	@ 0x21c
 8002cb2:	6879      	ldr	r1, [r7, #4]
 8002cb4:	4613      	mov	r3, r2
 8002cb6:	00db      	lsls	r3, r3, #3
 8002cb8:	4413      	add	r3, r2
 8002cba:	00db      	lsls	r3, r3, #3
 8002cbc:	18ca      	adds	r2, r1, r3
 8002cbe:	f241 0318 	movw	r3, #4120	@ 0x1018
 8002cc2:	4413      	add	r3, r2
 8002cc4:	3304      	adds	r3, #4
 8002cc6:	f107 0114 	add.w	r1, r7, #20
 8002cca:	2248      	movs	r2, #72	@ 0x48
 8002ccc:	4618      	mov	r0, r3
 8002cce:	f012 f862 	bl	8014d96 <memcpy>
}
 8002cd2:	bf00      	nop
 8002cd4:	3708      	adds	r7, #8
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002cdc:	b004      	add	sp, #16
 8002cde:	4770      	bx	lr

08002ce0 <VibeCheckShell_RegisterOutputHandler>:

void VibeCheckShell_RegisterOutputHandler(VibeCheckShell* shell, VibeCheckShell_OutputHandler handler)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b085      	sub	sp, #20
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	60f8      	str	r0, [r7, #12]
 8002ce8:	1d3b      	adds	r3, r7, #4
 8002cea:	e883 0006 	stmia.w	r3, {r1, r2}
	if (shell->oh_count < VC_SHELL_MAX_NUM_HANDLERS)
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002cf4:	f8d3 3420 	ldr.w	r3, [r3, #1056]	@ 0x420
 8002cf8:	2b3f      	cmp	r3, #63	@ 0x3f
 8002cfa:	d814      	bhi.n	8002d26 <VibeCheckShell_RegisterOutputHandler+0x46>
		shell->output_handlers[shell->oh_count++] = handler;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002d02:	f8d3 3420 	ldr.w	r3, [r3, #1056]	@ 0x420
 8002d06:	1c5a      	adds	r2, r3, #1
 8002d08:	68f9      	ldr	r1, [r7, #12]
 8002d0a:	f501 5100 	add.w	r1, r1, #8192	@ 0x2000
 8002d0e:	f8c1 2420 	str.w	r2, [r1, #1056]	@ 0x420
 8002d12:	68fa      	ldr	r2, [r7, #12]
 8002d14:	f203 4344 	addw	r3, r3, #1092	@ 0x444
 8002d18:	00db      	lsls	r3, r3, #3
 8002d1a:	4413      	add	r3, r2
 8002d1c:	1d3a      	adds	r2, r7, #4
 8002d1e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002d22:	e883 0003 	stmia.w	r3, {r0, r1}
}
 8002d26:	bf00      	nop
 8002d28:	3714      	adds	r7, #20
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d30:	4770      	bx	lr
	...

08002d34 <VibeCheckShell_PutInput>:

void VibeCheckShell_PutInput(VibeCheckShell* shell, char* input, uint32_t input_max_len)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b086      	sub	sp, #24
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	60f8      	str	r0, [r7, #12]
 8002d3c:	60b9      	str	r1, [r7, #8]
 8002d3e:	607a      	str	r2, [r7, #4]
	/* add to the input buffer */
	for (uint32_t i = 0; i < input_max_len; i++)
 8002d40:	2300      	movs	r3, #0
 8002d42:	617b      	str	r3, [r7, #20]
 8002d44:	e035      	b.n	8002db2 <VibeCheckShell_PutInput+0x7e>
	{
		if (*input)
 8002d46:	68bb      	ldr	r3, [r7, #8]
 8002d48:	781b      	ldrb	r3, [r3, #0]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d036      	beq.n	8002dbc <VibeCheckShell_PutInput+0x88>
		{
			shell->input[shell->input_head++] = *input;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 8002d54:	1c59      	adds	r1, r3, #1
 8002d56:	68fa      	ldr	r2, [r7, #12]
 8002d58:	f8c2 1800 	str.w	r1, [r2, #2048]	@ 0x800
 8002d5c:	68ba      	ldr	r2, [r7, #8]
 8002d5e:	7811      	ldrb	r1, [r2, #0]
 8002d60:	68fa      	ldr	r2, [r7, #12]
 8002d62:	54d1      	strb	r1, [r2, r3]
			if (shell->input_head == VC_SHELL_IO_BUF_LEN)
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 8002d6a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002d6e:	d103      	bne.n	8002d78 <VibeCheckShell_PutInput+0x44>
					shell->input_head = 0;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	2200      	movs	r2, #0
 8002d74:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
			shell->input_count++;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
 8002d7e:	1c5a      	adds	r2, r3, #1
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	f8c3 2808 	str.w	r2, [r3, #2056]	@ 0x808

			if (strchr(VC_SHELL_DELIMITER, *input) != NULL)
 8002d86:	68bb      	ldr	r3, [r7, #8]
 8002d88:	781b      	ldrb	r3, [r3, #0]
 8002d8a:	4619      	mov	r1, r3
 8002d8c:	480e      	ldr	r0, [pc, #56]	@ (8002dc8 <VibeCheckShell_PutInput+0x94>)
 8002d8e:	f011 ff6c 	bl	8014c6a <strchr>
 8002d92:	4603      	mov	r3, r0
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d006      	beq.n	8002da6 <VibeCheckShell_PutInput+0x72>
				shell->input_delimiter_count++;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	f8d3 380c 	ldr.w	r3, [r3, #2060]	@ 0x80c
 8002d9e:	1c5a      	adds	r2, r3, #1
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	f8c3 280c 	str.w	r2, [r3, #2060]	@ 0x80c

			input++;
 8002da6:	68bb      	ldr	r3, [r7, #8]
 8002da8:	3301      	adds	r3, #1
 8002daa:	60bb      	str	r3, [r7, #8]
	for (uint32_t i = 0; i < input_max_len; i++)
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	3301      	adds	r3, #1
 8002db0:	617b      	str	r3, [r7, #20]
 8002db2:	697a      	ldr	r2, [r7, #20]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	429a      	cmp	r2, r3
 8002db8:	d3c5      	bcc.n	8002d46 <VibeCheckShell_PutInput+0x12>
		}
		else
			break;
	}
}
 8002dba:	e000      	b.n	8002dbe <VibeCheckShell_PutInput+0x8a>
			break;
 8002dbc:	bf00      	nop
}
 8002dbe:	bf00      	nop
 8002dc0:	3718      	adds	r7, #24
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}
 8002dc6:	bf00      	nop
 8002dc8:	080183e0 	.word	0x080183e0

08002dcc <VibeCheckShell_GetOutput>:


uint32_t VibeCheckShell_GetOutput(VibeCheckShell* shell, char** output, uint32_t* len)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b085      	sub	sp, #20
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	60f8      	str	r0, [r7, #12]
 8002dd4:	60b9      	str	r1, [r7, #8]
 8002dd6:	607a      	str	r2, [r7, #4]
	/* returns true if there is stuff in the output buffer we haven't yet sent */
	if (shell->output_head == shell->output_tail)
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002dde:	691a      	ldr	r2, [r3, #16]
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002de6:	695b      	ldr	r3, [r3, #20]
 8002de8:	429a      	cmp	r2, r3
 8002dea:	d101      	bne.n	8002df0 <VibeCheckShell_GetOutput+0x24>
		return 0;
 8002dec:	2300      	movs	r3, #0
 8002dee:	e062      	b.n	8002eb6 <VibeCheckShell_GetOutput+0xea>

	if (shell->output_head > shell->output_tail)
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002df6:	691a      	ldr	r2, [r3, #16]
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002dfe:	695b      	ldr	r3, [r3, #20]
 8002e00:	429a      	cmp	r2, r3
 8002e02:	d930      	bls.n	8002e66 <VibeCheckShell_GetOutput+0x9a>
	{
		/* the output doesn't wrap so send it 'normally' */
		*output = &shell->output[shell->output_tail];
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002e0a:	695b      	ldr	r3, [r3, #20]
 8002e0c:	f503 6301 	add.w	r3, r3, #2064	@ 0x810
 8002e10:	68fa      	ldr	r2, [r7, #12]
 8002e12:	441a      	add	r2, r3
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	601a      	str	r2, [r3, #0]
		*len = shell->output_head - shell->output_tail;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002e1e:	691a      	ldr	r2, [r3, #16]
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002e26:	695b      	ldr	r3, [r3, #20]
 8002e28:	1ad2      	subs	r2, r2, r3
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	601a      	str	r2, [r3, #0]
		shell->output_count -= shell->output_head - shell->output_tail;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002e34:	699a      	ldr	r2, [r3, #24]
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002e3c:	6959      	ldr	r1, [r3, #20]
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002e44:	691b      	ldr	r3, [r3, #16]
 8002e46:	1acb      	subs	r3, r1, r3
 8002e48:	4413      	add	r3, r2
 8002e4a:	68fa      	ldr	r2, [r7, #12]
 8002e4c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002e50:	6193      	str	r3, [r2, #24]
		shell->output_tail = shell->output_head;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002e58:	691b      	ldr	r3, [r3, #16]
 8002e5a:	68fa      	ldr	r2, [r7, #12]
 8002e5c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002e60:	6153      	str	r3, [r2, #20]
		return 1;
 8002e62:	2301      	movs	r3, #1
 8002e64:	e027      	b.n	8002eb6 <VibeCheckShell_GetOutput+0xea>
	}
	else
	{
		/* the output wraps: only return up to the end of the buffer region so our output is contiguous in memory */
		*output = &shell->output[shell->output_tail];
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002e6c:	695b      	ldr	r3, [r3, #20]
 8002e6e:	f503 6301 	add.w	r3, r3, #2064	@ 0x810
 8002e72:	68fa      	ldr	r2, [r7, #12]
 8002e74:	441a      	add	r2, r3
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	601a      	str	r2, [r3, #0]
		*len = VC_SHELL_IO_BUF_LEN - shell->output_tail;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002e80:	695b      	ldr	r3, [r3, #20]
 8002e82:	f5c3 6200 	rsb	r2, r3, #2048	@ 0x800
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	601a      	str	r2, [r3, #0]
		shell->output_count -= VC_SHELL_IO_BUF_LEN - shell->output_tail;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002e90:	699a      	ldr	r2, [r3, #24]
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002e98:	695b      	ldr	r3, [r3, #20]
 8002e9a:	4413      	add	r3, r2
 8002e9c:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 8002ea0:	68fa      	ldr	r2, [r7, #12]
 8002ea2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002ea6:	6193      	str	r3, [r2, #24]
		shell->output_tail = 0;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002eae:	461a      	mov	r2, r3
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	6153      	str	r3, [r2, #20]
		return 1;
 8002eb4:	2301      	movs	r3, #1
	}

}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	3714      	adds	r7, #20
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec0:	4770      	bx	lr
	...

08002ec4 <VibeCheckShell_GetNextString>:


/* these return true if they successfully get the next token */
uint32_t VibeCheckShell_GetNextString(VibeCheckShell* shell, char* next, uint32_t max_len)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b086      	sub	sp, #24
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	60f8      	str	r0, [r7, #12]
 8002ecc:	60b9      	str	r1, [r7, #8]
 8002ece:	607a      	str	r2, [r7, #4]

	for (uint32_t i = 0; i < max_len; )
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	617b      	str	r3, [r7, #20]
 8002ed4:	e057      	b.n	8002f86 <VibeCheckShell_GetNextString+0xc2>
	{

		char x = shell->input[shell->input_tail];
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 8002edc:	68fa      	ldr	r2, [r7, #12]
 8002ede:	5cd3      	ldrb	r3, [r2, r3]
 8002ee0:	74fb      	strb	r3, [r7, #19]

		if (strchr(VC_SHELL_DELIMITER, x) != NULL)
 8002ee2:	7cfb      	ldrb	r3, [r7, #19]
 8002ee4:	4619      	mov	r1, r3
 8002ee6:	482c      	ldr	r0, [pc, #176]	@ (8002f98 <VibeCheckShell_GetNextString+0xd4>)
 8002ee8:	f011 febf 	bl	8014c6a <strchr>
 8002eec:	4603      	mov	r3, r0
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d009      	beq.n	8002f06 <VibeCheckShell_GetNextString+0x42>
		{
			/* this is a delimiter */
			if (i)  /* we have something in the token so return it */
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d004      	beq.n	8002f02 <VibeCheckShell_GetNextString+0x3e>
			{
				*next = '\0';
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	2200      	movs	r2, #0
 8002efc:	701a      	strb	r2, [r3, #0]
				return 1;
 8002efe:	2301      	movs	r3, #1
 8002f00:	e046      	b.n	8002f90 <VibeCheckShell_GetNextString+0xcc>
			}
			else
				return 0;  /* don't go any further than the delimiter */
 8002f02:	2300      	movs	r3, #0
 8002f04:	e044      	b.n	8002f90 <VibeCheckShell_GetNextString+0xcc>
		}
		else
		{
			shell->input_count--;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
 8002f0c:	1e5a      	subs	r2, r3, #1
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	f8c3 2808 	str.w	r2, [r3, #2056]	@ 0x808
			shell->input_tail++;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 8002f1a:	1c5a      	adds	r2, r3, #1
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804
			if (shell->input_tail == VC_SHELL_IO_BUF_LEN)
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 8002f28:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002f2c:	d103      	bne.n	8002f36 <VibeCheckShell_GetNextString+0x72>
				shell->input_tail = 0;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	2200      	movs	r2, #0
 8002f32:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804

			if (strchr(VC_SHELL_INPUT_SEPARATORS, x) != NULL)
 8002f36:	7cfb      	ldrb	r3, [r7, #19]
 8002f38:	4619      	mov	r1, r3
 8002f3a:	4818      	ldr	r0, [pc, #96]	@ (8002f9c <VibeCheckShell_GetNextString+0xd8>)
 8002f3c:	f011 fe95 	bl	8014c6a <strchr>
 8002f40:	4603      	mov	r3, r0
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d007      	beq.n	8002f56 <VibeCheckShell_GetNextString+0x92>
			{
				/* this is a separator */
				if (i) /* if we have something in the token return it, otherwise just continue in order to skip leading separators */
 8002f46:	697b      	ldr	r3, [r7, #20]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d01c      	beq.n	8002f86 <VibeCheckShell_GetNextString+0xc2>
				{
					*next = '\0';
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	701a      	strb	r2, [r3, #0]
					return 1;
 8002f52:	2301      	movs	r3, #1
 8002f54:	e01c      	b.n	8002f90 <VibeCheckShell_GetNextString+0xcc>
				}
			}
			else
			{
				/* this is a character */
				*(next++) = tolower(x);  /* turn to all lower case letters */
 8002f56:	7cfb      	ldrb	r3, [r7, #19]
 8002f58:	74bb      	strb	r3, [r7, #18]
 8002f5a:	7cbb      	ldrb	r3, [r7, #18]
 8002f5c:	3301      	adds	r3, #1
 8002f5e:	4a10      	ldr	r2, [pc, #64]	@ (8002fa0 <VibeCheckShell_GetNextString+0xdc>)
 8002f60:	4413      	add	r3, r2
 8002f62:	781b      	ldrb	r3, [r3, #0]
 8002f64:	f003 0303 	and.w	r3, r3, #3
 8002f68:	2b01      	cmp	r3, #1
 8002f6a:	d103      	bne.n	8002f74 <VibeCheckShell_GetNextString+0xb0>
 8002f6c:	7cbb      	ldrb	r3, [r7, #18]
 8002f6e:	f103 0220 	add.w	r2, r3, #32
 8002f72:	e000      	b.n	8002f76 <VibeCheckShell_GetNextString+0xb2>
 8002f74:	7cba      	ldrb	r2, [r7, #18]
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	1c59      	adds	r1, r3, #1
 8002f7a:	60b9      	str	r1, [r7, #8]
 8002f7c:	b2d2      	uxtb	r2, r2
 8002f7e:	701a      	strb	r2, [r3, #0]
				i++;
 8002f80:	697b      	ldr	r3, [r7, #20]
 8002f82:	3301      	adds	r3, #1
 8002f84:	617b      	str	r3, [r7, #20]
	for (uint32_t i = 0; i < max_len; )
 8002f86:	697a      	ldr	r2, [r7, #20]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	429a      	cmp	r2, r3
 8002f8c:	d3a3      	bcc.n	8002ed6 <VibeCheckShell_GetNextString+0x12>
			}
		}
	}

	return 0;
 8002f8e:	2300      	movs	r3, #0
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	3718      	adds	r7, #24
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd80      	pop	{r7, pc}
 8002f98:	080183e0 	.word	0x080183e0
 8002f9c:	080183e4 	.word	0x080183e4
 8002fa0:	08018518 	.word	0x08018518

08002fa4 <VibeCheckShell_GetNextFloat>:
	return 0;
}


uint32_t VibeCheckShell_GetNextFloat(VibeCheckShell* shell, float* next)
{
 8002fa4:	b590      	push	{r4, r7, lr}
 8002fa6:	b099      	sub	sp, #100	@ 0x64
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
 8002fac:	6039      	str	r1, [r7, #0]
	char str[VC_SHELL_MAX_TOKEN_LEN];
	if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 8002fae:	f107 031c 	add.w	r3, r7, #28
 8002fb2:	2240      	movs	r2, #64	@ 0x40
 8002fb4:	4619      	mov	r1, r3
 8002fb6:	6878      	ldr	r0, [r7, #4]
 8002fb8:	f7ff ff84 	bl	8002ec4 <VibeCheckShell_GetNextString>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d033      	beq.n	800302a <VibeCheckShell_GetNextFloat+0x86>
	{
		char valid[] = ".-0123456789";
 8002fc2:	4b1c      	ldr	r3, [pc, #112]	@ (8003034 <VibeCheckShell_GetNextFloat+0x90>)
 8002fc4:	f107 040c 	add.w	r4, r7, #12
 8002fc8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002fca:	c407      	stmia	r4!, {r0, r1, r2}
 8002fcc:	7023      	strb	r3, [r4, #0]
		for (uint32_t i = 0; i < strlen(str); i++)
 8002fce:	2300      	movs	r3, #0
 8002fd0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002fd2:	e013      	b.n	8002ffc <VibeCheckShell_GetNextFloat+0x58>
			if (strchr(valid, str[i]) == NULL)
 8002fd4:	f107 021c 	add.w	r2, r7, #28
 8002fd8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002fda:	4413      	add	r3, r2
 8002fdc:	781b      	ldrb	r3, [r3, #0]
 8002fde:	461a      	mov	r2, r3
 8002fe0:	f107 030c 	add.w	r3, r7, #12
 8002fe4:	4611      	mov	r1, r2
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f011 fe3f 	bl	8014c6a <strchr>
 8002fec:	4603      	mov	r3, r0
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d101      	bne.n	8002ff6 <VibeCheckShell_GetNextFloat+0x52>
				return 0;  /* next token contains non-numeric characters */
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	e01a      	b.n	800302c <VibeCheckShell_GetNextFloat+0x88>
		for (uint32_t i = 0; i < strlen(str); i++)
 8002ff6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002ff8:	3301      	adds	r3, #1
 8002ffa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002ffc:	f107 031c 	add.w	r3, r7, #28
 8003000:	4618      	mov	r0, r3
 8003002:	f7fd f9e5 	bl	80003d0 <strlen>
 8003006:	4602      	mov	r2, r0
 8003008:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800300a:	4293      	cmp	r3, r2
 800300c:	d3e2      	bcc.n	8002fd4 <VibeCheckShell_GetNextFloat+0x30>
		*next = atof(str);
 800300e:	f107 031c 	add.w	r3, r7, #28
 8003012:	4618      	mov	r0, r3
 8003014:	f010 fb04 	bl	8013620 <atof>
 8003018:	eeb0 7b40 	vmov.f64	d7, d0
 800301c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	edc3 7a00 	vstr	s15, [r3]
		return 1;
 8003026:	2301      	movs	r3, #1
 8003028:	e000      	b.n	800302c <VibeCheckShell_GetNextFloat+0x88>
	}

	return 0;
 800302a:	2300      	movs	r3, #0
}
 800302c:	4618      	mov	r0, r3
 800302e:	3764      	adds	r7, #100	@ 0x64
 8003030:	46bd      	mov	sp, r7
 8003032:	bd90      	pop	{r4, r7, pc}
 8003034:	080183f4 	.word	0x080183f4

08003038 <VibeCheckShell_PutOutputString>:



/* add things to the output */
void VibeCheckShell_PutOutputString(VibeCheckShell* shell, char* str)
{
 8003038:	b480      	push	{r7}
 800303a:	b083      	sub	sp, #12
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
 8003040:	6039      	str	r1, [r7, #0]
	while (*str)
 8003042:	e027      	b.n	8003094 <VibeCheckShell_PutOutputString+0x5c>
	{
		shell->output[shell->output_head++] = *(str++);
 8003044:	683a      	ldr	r2, [r7, #0]
 8003046:	1c53      	adds	r3, r2, #1
 8003048:	603b      	str	r3, [r7, #0]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003050:	691b      	ldr	r3, [r3, #16]
 8003052:	1c59      	adds	r1, r3, #1
 8003054:	6878      	ldr	r0, [r7, #4]
 8003056:	f500 5080 	add.w	r0, r0, #4096	@ 0x1000
 800305a:	6101      	str	r1, [r0, #16]
 800305c:	7811      	ldrb	r1, [r2, #0]
 800305e:	687a      	ldr	r2, [r7, #4]
 8003060:	4413      	add	r3, r2
 8003062:	460a      	mov	r2, r1
 8003064:	f883 2810 	strb.w	r2, [r3, #2064]	@ 0x810
		shell->output_count++;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800306e:	699b      	ldr	r3, [r3, #24]
 8003070:	3301      	adds	r3, #1
 8003072:	687a      	ldr	r2, [r7, #4]
 8003074:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003078:	6193      	str	r3, [r2, #24]
		if (shell->output_head == VC_SHELL_IO_BUF_LEN)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003080:	691b      	ldr	r3, [r3, #16]
 8003082:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003086:	d105      	bne.n	8003094 <VibeCheckShell_PutOutputString+0x5c>
			shell->output_head = 0;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800308e:	461a      	mov	r2, r3
 8003090:	2300      	movs	r3, #0
 8003092:	6113      	str	r3, [r2, #16]
	while (*str)
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	781b      	ldrb	r3, [r3, #0]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d1d3      	bne.n	8003044 <VibeCheckShell_PutOutputString+0xc>
	}
}
 800309c:	bf00      	nop
 800309e:	bf00      	nop
 80030a0:	370c      	adds	r7, #12
 80030a2:	46bd      	mov	sp, r7
 80030a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a8:	4770      	bx	lr
	...

080030ac <VibeCheckShell_PutOutputInt>:

void VibeCheckShell_PutOutputInt(VibeCheckShell* shell, uint32_t val)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b092      	sub	sp, #72	@ 0x48
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
 80030b4:	6039      	str	r1, [r7, #0]
	char str[VC_SHELL_MAX_TOKEN_LEN];
	sprintf(str, "%ld", val);
 80030b6:	f107 0308 	add.w	r3, r7, #8
 80030ba:	683a      	ldr	r2, [r7, #0]
 80030bc:	4906      	ldr	r1, [pc, #24]	@ (80030d8 <VibeCheckShell_PutOutputInt+0x2c>)
 80030be:	4618      	mov	r0, r3
 80030c0:	f011 fd68 	bl	8014b94 <siprintf>
	VibeCheckShell_PutOutputString(shell, str);
 80030c4:	f107 0308 	add.w	r3, r7, #8
 80030c8:	4619      	mov	r1, r3
 80030ca:	6878      	ldr	r0, [r7, #4]
 80030cc:	f7ff ffb4 	bl	8003038 <VibeCheckShell_PutOutputString>
}
 80030d0:	bf00      	nop
 80030d2:	3748      	adds	r7, #72	@ 0x48
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bd80      	pop	{r7, pc}
 80030d8:	08018404 	.word	0x08018404

080030dc <VibeCheckShell_PutOutputFloat>:

void VibeCheckShell_PutOutputFloat(VibeCheckShell* shell, float val)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b092      	sub	sp, #72	@ 0x48
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
 80030e4:	ed87 0a00 	vstr	s0, [r7]
	char str[VC_SHELL_MAX_TOKEN_LEN];
	sprintf(str, "%f", val);
 80030e8:	edd7 7a00 	vldr	s15, [r7]
 80030ec:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80030f0:	f107 0008 	add.w	r0, r7, #8
 80030f4:	ec53 2b17 	vmov	r2, r3, d7
 80030f8:	4906      	ldr	r1, [pc, #24]	@ (8003114 <VibeCheckShell_PutOutputFloat+0x38>)
 80030fa:	f011 fd4b 	bl	8014b94 <siprintf>
	VibeCheckShell_PutOutputString(shell, str);
 80030fe:	f107 0308 	add.w	r3, r7, #8
 8003102:	4619      	mov	r1, r3
 8003104:	6878      	ldr	r0, [r7, #4]
 8003106:	f7ff ff97 	bl	8003038 <VibeCheckShell_PutOutputString>
}
 800310a:	bf00      	nop
 800310c:	3748      	adds	r7, #72	@ 0x48
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}
 8003112:	bf00      	nop
 8003114:	08018408 	.word	0x08018408

08003118 <VibeCheckShell_PutOutputSeparator>:

void VibeCheckShell_PutOutputSeparator(VibeCheckShell* shell)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b082      	sub	sp, #8
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
	VibeCheckShell_PutOutputString(shell, VC_SHELL_OUTPUT_SEPARATOR);
 8003120:	4903      	ldr	r1, [pc, #12]	@ (8003130 <VibeCheckShell_PutOutputSeparator+0x18>)
 8003122:	6878      	ldr	r0, [r7, #4]
 8003124:	f7ff ff88 	bl	8003038 <VibeCheckShell_PutOutputString>
}
 8003128:	bf00      	nop
 800312a:	3708      	adds	r7, #8
 800312c:	46bd      	mov	sp, r7
 800312e:	bd80      	pop	{r7, pc}
 8003130:	0801840c 	.word	0x0801840c

08003134 <VibeCheckShell_PutOutputDelimiter>:

void VibeCheckShell_PutOutputDelimiter(VibeCheckShell* shell)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b082      	sub	sp, #8
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
	VibeCheckShell_PutOutputString(shell, VC_SHELL_DELIMITER);
 800313c:	4903      	ldr	r1, [pc, #12]	@ (800314c <VibeCheckShell_PutOutputDelimiter+0x18>)
 800313e:	6878      	ldr	r0, [r7, #4]
 8003140:	f7ff ff7a 	bl	8003038 <VibeCheckShell_PutOutputString>
}
 8003144:	bf00      	nop
 8003146:	3708      	adds	r7, #8
 8003148:	46bd      	mov	sp, r7
 800314a:	bd80      	pop	{r7, pc}
 800314c:	080183e0 	.word	0x080183e0

08003150 <VibeCheckStrobe_Init>:

#include "vibecheck_strobe.h"


void VibeCheckStrobe_Init(VibeCheckStrobe* strobe, TIM_HandleTypeDef* htim)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b082      	sub	sp, #8
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
 8003158:	6039      	str	r1, [r7, #0]
	strobe->htim = htim;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	683a      	ldr	r2, [r7, #0]
 800315e:	601a      	str	r2, [r3, #0]
	strobe->freq_hz = VC_STROBE_MIN_FREQ_HZ;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003166:	605a      	str	r2, [r3, #4]
	strobe->exposure_ms = 1.0f;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800316e:	609a      	str	r2, [r3, #8]
	strobe->phase_deg = 0.0f;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	f04f 0200 	mov.w	r2, #0
 8003176:	60da      	str	r2, [r3, #12]

	/* set up the timer registers */
	strobe->htim->Instance->PSC = VC_STROBE_TIM_PSC - 1;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f640 125f 	movw	r2, #2399	@ 0x95f
 8003182:	629a      	str	r2, [r3, #40]	@ 0x28

	VibeCheckStrobe_SetFrequency(strobe, strobe->freq_hz);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	edd3 7a01 	vldr	s15, [r3, #4]
 800318a:	eeb0 0a67 	vmov.f32	s0, s15
 800318e:	6878      	ldr	r0, [r7, #4]
 8003190:	f000 f84a 	bl	8003228 <VibeCheckStrobe_SetFrequency>
	VibeCheckStrobe_SetExposure(strobe, strobe->exposure_ms);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	edd3 7a02 	vldr	s15, [r3, #8]
 800319a:	eeb0 0a67 	vmov.f32	s0, s15
 800319e:	6878      	ldr	r0, [r7, #4]
 80031a0:	f000 f928 	bl	80033f4 <VibeCheckStrobe_SetExposure>

}
 80031a4:	bf00      	nop
 80031a6:	3708      	adds	r7, #8
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bd80      	pop	{r7, pc}

080031ac <VibeCheckStrobe_Start>:

void VibeCheckStrobe_Start(VibeCheckStrobe* strobe)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b082      	sub	sp, #8
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
	/* start the timers with interrupts when period completes */
	HAL_TIM_Base_Start_IT(strobe->htim);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4618      	mov	r0, r3
 80031ba:	f009 fd09 	bl	800cbd0 <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start(strobe->htim, TIM_CHANNEL_1);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	2100      	movs	r1, #0
 80031c4:	4618      	mov	r0, r3
 80031c6:	f009 fdeb 	bl	800cda0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(strobe->htim, TIM_CHANNEL_2);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	2104      	movs	r1, #4
 80031d0:	4618      	mov	r0, r3
 80031d2:	f009 fde5 	bl	800cda0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(strobe->htim, TIM_CHANNEL_3);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	2108      	movs	r1, #8
 80031dc:	4618      	mov	r0, r3
 80031de:	f009 fddf 	bl	800cda0 <HAL_TIM_PWM_Start>
}
 80031e2:	bf00      	nop
 80031e4:	3708      	adds	r7, #8
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}

080031ea <VibeCheckStrobe_Stop>:

void VibeCheckStrobe_Stop(VibeCheckStrobe* strobe)
{
 80031ea:	b580      	push	{r7, lr}
 80031ec:	b082      	sub	sp, #8
 80031ee:	af00      	add	r7, sp, #0
 80031f0:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Start_IT(strobe->htim);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4618      	mov	r0, r3
 80031f8:	f009 fcea 	bl	800cbd0 <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Stop(strobe->htim, TIM_CHANNEL_1);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	2100      	movs	r1, #0
 8003202:	4618      	mov	r0, r3
 8003204:	f009 fee8 	bl	800cfd8 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(strobe->htim, TIM_CHANNEL_2);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	2104      	movs	r1, #4
 800320e:	4618      	mov	r0, r3
 8003210:	f009 fee2 	bl	800cfd8 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(strobe->htim, TIM_CHANNEL_3);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	2108      	movs	r1, #8
 800321a:	4618      	mov	r0, r3
 800321c:	f009 fedc 	bl	800cfd8 <HAL_TIM_PWM_Stop>
}
 8003220:	bf00      	nop
 8003222:	3708      	adds	r7, #8
 8003224:	46bd      	mov	sp, r7
 8003226:	bd80      	pop	{r7, pc}

08003228 <VibeCheckStrobe_SetFrequency>:

void VibeCheckStrobe_SetFrequency(VibeCheckStrobe* strobe, float freq_hz)
{
 8003228:	b480      	push	{r7}
 800322a:	b083      	sub	sp, #12
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
 8003230:	ed87 0a00 	vstr	s0, [r7]
	if (freq_hz < VC_STROBE_MIN_FREQ_HZ)
 8003234:	edd7 7a00 	vldr	s15, [r7]
 8003238:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 800323c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003240:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003244:	d502      	bpl.n	800324c <VibeCheckStrobe_SetFrequency+0x24>
		freq_hz = VC_STROBE_MIN_FREQ_HZ;
 8003246:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800324a:	603b      	str	r3, [r7, #0]
	if (freq_hz > VC_STROBE_MAX_FREQ_HZ)
 800324c:	edd7 7a00 	vldr	s15, [r7]
 8003250:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 80032bc <VibeCheckStrobe_SetFrequency+0x94>
 8003254:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003258:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800325c:	dd01      	ble.n	8003262 <VibeCheckStrobe_SetFrequency+0x3a>
		freq_hz = VC_STROBE_MAX_FREQ_HZ;
 800325e:	4b18      	ldr	r3, [pc, #96]	@ (80032c0 <VibeCheckStrobe_SetFrequency+0x98>)
 8003260:	603b      	str	r3, [r7, #0]

	strobe->arr_steady = VC_STROBE_TIM_COUNTS_PER_SECOND / freq_hz - 1;
 8003262:	eddf 6a18 	vldr	s13, [pc, #96]	@ 80032c4 <VibeCheckStrobe_SetFrequency+0x9c>
 8003266:	ed97 7a00 	vldr	s14, [r7]
 800326a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800326e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003272:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003276:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800327a:	ee17 2a90 	vmov	r2, s15
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	611a      	str	r2, [r3, #16]
	strobe->freq_hz = VC_STROBE_TIM_COUNTS_PER_SECOND / ((float)strobe->arr_steady + 1.0f);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	691b      	ldr	r3, [r3, #16]
 8003286:	ee07 3a90 	vmov	s15, r3
 800328a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800328e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003292:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003296:	eddf 6a0b 	vldr	s13, [pc, #44]	@ 80032c4 <VibeCheckStrobe_SetFrequency+0x9c>
 800329a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	edc3 7a01 	vstr	s15, [r3, #4]
	strobe->htim->Instance->ARR = strobe->arr_steady;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	687a      	ldr	r2, [r7, #4]
 80032ac:	6912      	ldr	r2, [r2, #16]
 80032ae:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 80032b0:	bf00      	nop
 80032b2:	370c      	adds	r7, #12
 80032b4:	46bd      	mov	sp, r7
 80032b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ba:	4770      	bx	lr
 80032bc:	447a0000 	.word	0x447a0000
 80032c0:	447a0000 	.word	0x447a0000
 80032c4:	47c35000 	.word	0x47c35000

080032c8 <VibeCheckStrobe_GetFrequency>:

float VibeCheckStrobe_GetFrequency(VibeCheckStrobe* strobe)
{
 80032c8:	b480      	push	{r7}
 80032ca:	b083      	sub	sp, #12
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
	return strobe->freq_hz;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	ee07 3a90 	vmov	s15, r3
}
 80032d8:	eeb0 0a67 	vmov.f32	s0, s15
 80032dc:	370c      	adds	r7, #12
 80032de:	46bd      	mov	sp, r7
 80032e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e4:	4770      	bx	lr
	...

080032e8 <VibeCheckStrobe_SetPhase>:

void VibeCheckStrobe_SetPhase(VibeCheckStrobe* strobe, float phase_deg)
{
 80032e8:	b480      	push	{r7}
 80032ea:	b085      	sub	sp, #20
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
 80032f0:	ed87 0a00 	vstr	s0, [r7]
	 * To shift the phase, update ARR for a single period and then put it back
	 * The most reliable way would probably by with DMA into the ARR register, but this seems more complicated
	 * Instead let's try with an interrupt at the end of each period, and some struct variables to keep track of the phase update sequence
	 */

	if (phase_deg < VC_STROBE_MIN_PHASE_DEG)
 80032f4:	edd7 7a00 	vldr	s15, [r7]
 80032f8:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 80033c0 <VibeCheckStrobe_SetPhase+0xd8>
 80032fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003300:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003304:	d501      	bpl.n	800330a <VibeCheckStrobe_SetPhase+0x22>
		phase_deg = VC_STROBE_MIN_PHASE_DEG;
 8003306:	4b2f      	ldr	r3, [pc, #188]	@ (80033c4 <VibeCheckStrobe_SetPhase+0xdc>)
 8003308:	603b      	str	r3, [r7, #0]
	if (phase_deg > VC_STROBE_MAX_PHASE_DEG)
 800330a:	edd7 7a00 	vldr	s15, [r7]
 800330e:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 80033c8 <VibeCheckStrobe_SetPhase+0xe0>
 8003312:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003316:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800331a:	dd01      	ble.n	8003320 <VibeCheckStrobe_SetPhase+0x38>
		phase_deg = VC_STROBE_MAX_PHASE_DEG;
 800331c:	4b2b      	ldr	r3, [pc, #172]	@ (80033cc <VibeCheckStrobe_SetPhase+0xe4>)
 800331e:	603b      	str	r3, [r7, #0]


	/* TODO: need to test if this works */
	float deg_shift = phase_deg - strobe->phase_deg;  /* how many degrees we want to shift the phase */
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	edd3 7a03 	vldr	s15, [r3, #12]
 8003326:	ed97 7a00 	vldr	s14, [r7]
 800332a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800332e:	edc7 7a03 	vstr	s15, [r7, #12]
	int32_t arr_shift = deg_shift / 360.0f * strobe->arr_steady;  /* how much we need to alter the ARR for a single period to achieve the target phase shift */
 8003332:	edd7 7a03 	vldr	s15, [r7, #12]
 8003336:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80033d0 <VibeCheckStrobe_SetPhase+0xe8>
 800333a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	691b      	ldr	r3, [r3, #16]
 8003342:	ee07 3a90 	vmov	s15, r3
 8003346:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800334a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800334e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003352:	ee17 3a90 	vmov	r3, s15
 8003356:	60bb      	str	r3, [r7, #8]

	if (arr_shift && !strobe->phase_change_pending && !strobe->revert_arr_pending)
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d029      	beq.n	80033b2 <VibeCheckStrobe_SetPhase+0xca>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	699b      	ldr	r3, [r3, #24]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d125      	bne.n	80033b2 <VibeCheckStrobe_SetPhase+0xca>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	69db      	ldr	r3, [r3, #28]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d121      	bne.n	80033b2 <VibeCheckStrobe_SetPhase+0xca>
	{
		strobe->phase_deg += (float)arr_shift / (float)strobe->arr_steady * 360.0f;  /* calculate the actual phase shift accounting for rounding error */
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	ed93 7a03 	vldr	s14, [r3, #12]
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	ee07 3a90 	vmov	s15, r3
 800337a:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	691b      	ldr	r3, [r3, #16]
 8003382:	ee07 3a90 	vmov	s15, r3
 8003386:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800338a:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800338e:	eddf 6a10 	vldr	s13, [pc, #64]	@ 80033d0 <VibeCheckStrobe_SetPhase+0xe8>
 8003392:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003396:	ee77 7a27 	vadd.f32	s15, s14, s15
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	edc3 7a03 	vstr	s15, [r3, #12]
		strobe->arr_phase = strobe->arr_steady + arr_shift;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	691a      	ldr	r2, [r3, #16]
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	441a      	add	r2, r3
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	615a      	str	r2, [r3, #20]
		strobe->phase_change_pending = 1;  /* set the flag to enact the phase shift on the ARR interrupt */
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2201      	movs	r2, #1
 80033b0:	619a      	str	r2, [r3, #24]
	}
}
 80033b2:	bf00      	nop
 80033b4:	3714      	adds	r7, #20
 80033b6:	46bd      	mov	sp, r7
 80033b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033bc:	4770      	bx	lr
 80033be:	bf00      	nop
 80033c0:	c3340000 	.word	0xc3340000
 80033c4:	c3340000 	.word	0xc3340000
 80033c8:	43340000 	.word	0x43340000
 80033cc:	43340000 	.word	0x43340000
 80033d0:	43b40000 	.word	0x43b40000

080033d4 <VibeCheckStrobe_GetPhase>:

float VibeCheckStrobe_GetPhase(VibeCheckStrobe* strobe)
{
 80033d4:	b480      	push	{r7}
 80033d6:	b083      	sub	sp, #12
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
	return strobe->phase_deg;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	68db      	ldr	r3, [r3, #12]
 80033e0:	ee07 3a90 	vmov	s15, r3
}
 80033e4:	eeb0 0a67 	vmov.f32	s0, s15
 80033e8:	370c      	adds	r7, #12
 80033ea:	46bd      	mov	sp, r7
 80033ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f0:	4770      	bx	lr
	...

080033f4 <VibeCheckStrobe_SetExposure>:

void VibeCheckStrobe_SetExposure(VibeCheckStrobe* strobe, float exposure_ms)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b085      	sub	sp, #20
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
 80033fc:	ed87 0a00 	vstr	s0, [r7]

	uint32_t ccr_val = exposure_ms * 0.001f * VC_STROBE_TIM_COUNTS_PER_SECOND;
 8003400:	edd7 7a00 	vldr	s15, [r7]
 8003404:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 8003480 <VibeCheckStrobe_SetExposure+0x8c>
 8003408:	ee67 7a87 	vmul.f32	s15, s15, s14
 800340c:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8003484 <VibeCheckStrobe_SetExposure+0x90>
 8003410:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003414:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003418:	ee17 3a90 	vmov	r3, s15
 800341c:	60fb      	str	r3, [r7, #12]
	if (ccr_val > strobe->htim->Instance->ARR)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003426:	68fa      	ldr	r2, [r7, #12]
 8003428:	429a      	cmp	r2, r3
 800342a:	d904      	bls.n	8003436 <VibeCheckStrobe_SetExposure+0x42>
		ccr_val = strobe->htim->Instance->ARR;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003434:	60fb      	str	r3, [r7, #12]
	strobe->exposure_ms = (float)ccr_val / (float)VC_STROBE_TIM_COUNTS_PER_SECOND * 1000.0f;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	ee07 3a90 	vmov	s15, r3
 800343c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003440:	eddf 6a10 	vldr	s13, [pc, #64]	@ 8003484 <VibeCheckStrobe_SetExposure+0x90>
 8003444:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003448:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8003488 <VibeCheckStrobe_SetExposure+0x94>
 800344c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	edc3 7a02 	vstr	s15, [r3, #8]
	strobe->htim->Instance->CCR1 = ccr_val;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	68fa      	ldr	r2, [r7, #12]
 800345e:	635a      	str	r2, [r3, #52]	@ 0x34
	strobe->htim->Instance->CCR2 = ccr_val;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	68fa      	ldr	r2, [r7, #12]
 8003468:	639a      	str	r2, [r3, #56]	@ 0x38
	strobe->htim->Instance->CCR3 = ccr_val;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	68fa      	ldr	r2, [r7, #12]
 8003472:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8003474:	bf00      	nop
 8003476:	3714      	adds	r7, #20
 8003478:	46bd      	mov	sp, r7
 800347a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347e:	4770      	bx	lr
 8003480:	3a83126f 	.word	0x3a83126f
 8003484:	47c35000 	.word	0x47c35000
 8003488:	447a0000 	.word	0x447a0000

0800348c <VibeCheckStrobe_GetExposure>:

float VibeCheckStrobe_GetExposure(VibeCheckStrobe* strobe)
{
 800348c:	b480      	push	{r7}
 800348e:	b083      	sub	sp, #12
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
	return strobe->exposure_ms;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	ee07 3a90 	vmov	s15, r3
}
 800349c:	eeb0 0a67 	vmov.f32	s0, s15
 80034a0:	370c      	adds	r7, #12
 80034a2:	46bd      	mov	sp, r7
 80034a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a8:	4770      	bx	lr

080034aa <VibeCheckStrobe_PeriodElapsedUpdate>:


/* use an interrupt to make sure this is called each period */
void VibeCheckStrobe_PeriodElapsedUpdate(VibeCheckStrobe* strobe)
{
 80034aa:	b480      	push	{r7}
 80034ac:	b083      	sub	sp, #12
 80034ae:	af00      	add	r7, sp, #0
 80034b0:	6078      	str	r0, [r7, #4]
	if (strobe->revert_arr_pending)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	69db      	ldr	r3, [r3, #28]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d008      	beq.n	80034cc <VibeCheckStrobe_PeriodElapsedUpdate+0x22>
	{
		strobe->htim->Instance->ARR = strobe->arr_steady;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	687a      	ldr	r2, [r7, #4]
 80034c2:	6912      	ldr	r2, [r2, #16]
 80034c4:	62da      	str	r2, [r3, #44]	@ 0x2c
		strobe->revert_arr_pending = 0;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2200      	movs	r2, #0
 80034ca:	61da      	str	r2, [r3, #28]
	}

	if (strobe->phase_change_pending)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	699b      	ldr	r3, [r3, #24]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d00b      	beq.n	80034ec <VibeCheckStrobe_PeriodElapsedUpdate+0x42>
	{
		strobe->htim->Instance->ARR = strobe->arr_phase;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	687a      	ldr	r2, [r7, #4]
 80034dc:	6952      	ldr	r2, [r2, #20]
 80034de:	62da      	str	r2, [r3, #44]	@ 0x2c
		strobe->revert_arr_pending = 1;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2201      	movs	r2, #1
 80034e4:	61da      	str	r2, [r3, #28]
		strobe->phase_change_pending = 0;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2200      	movs	r2, #0
 80034ea:	619a      	str	r2, [r3, #24]
	}
}
 80034ec:	bf00      	nop
 80034ee:	370c      	adds	r7, #12
 80034f0:	46bd      	mov	sp, r7
 80034f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f6:	4770      	bx	lr

080034f8 <VibeCheckStrobeCMD_Execute>:
>>strobe get exposure

*/

uint32_t VibeCheckStrobeCMD_Execute(void* obj, VibeCheckShell* shell)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b094      	sub	sp, #80	@ 0x50
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
 8003500:	6039      	str	r1, [r7, #0]
	VibeCheckStrobe* strobe = (VibeCheckStrobe*)obj;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	64fb      	str	r3, [r7, #76]	@ 0x4c

	char str[VC_SHELL_MAX_TOKEN_LEN];
	if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 8003506:	f107 030c 	add.w	r3, r7, #12
 800350a:	2240      	movs	r2, #64	@ 0x40
 800350c:	4619      	mov	r1, r3
 800350e:	6838      	ldr	r0, [r7, #0]
 8003510:	f7ff fcd8 	bl	8002ec4 <VibeCheckShell_GetNextString>
 8003514:	4603      	mov	r3, r0
 8003516:	2b00      	cmp	r3, #0
 8003518:	d04d      	beq.n	80035b6 <VibeCheckStrobeCMD_Execute+0xbe>
	{
		if (!strcmp(str, "start"))
 800351a:	f107 030c 	add.w	r3, r7, #12
 800351e:	4928      	ldr	r1, [pc, #160]	@ (80035c0 <VibeCheckStrobeCMD_Execute+0xc8>)
 8003520:	4618      	mov	r0, r3
 8003522:	f7fc fef5 	bl	8000310 <strcmp>
 8003526:	4603      	mov	r3, r0
 8003528:	2b00      	cmp	r3, #0
 800352a:	d10b      	bne.n	8003544 <VibeCheckStrobeCMD_Execute+0x4c>
		{
			VibeCheckStrobe_Start(strobe);
 800352c:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800352e:	f7ff fe3d 	bl	80031ac <VibeCheckStrobe_Start>
			VibeCheckShell_PutOutputString(shell, "ack");
 8003532:	4924      	ldr	r1, [pc, #144]	@ (80035c4 <VibeCheckStrobeCMD_Execute+0xcc>)
 8003534:	6838      	ldr	r0, [r7, #0]
 8003536:	f7ff fd7f 	bl	8003038 <VibeCheckShell_PutOutputString>
			VibeCheckShell_PutOutputDelimiter(shell);
 800353a:	6838      	ldr	r0, [r7, #0]
 800353c:	f7ff fdfa 	bl	8003134 <VibeCheckShell_PutOutputDelimiter>
			return 1;
 8003540:	2301      	movs	r3, #1
 8003542:	e039      	b.n	80035b8 <VibeCheckStrobeCMD_Execute+0xc0>
		}
		else if (!strcmp(str, "stop"))
 8003544:	f107 030c 	add.w	r3, r7, #12
 8003548:	491f      	ldr	r1, [pc, #124]	@ (80035c8 <VibeCheckStrobeCMD_Execute+0xd0>)
 800354a:	4618      	mov	r0, r3
 800354c:	f7fc fee0 	bl	8000310 <strcmp>
 8003550:	4603      	mov	r3, r0
 8003552:	2b00      	cmp	r3, #0
 8003554:	d10b      	bne.n	800356e <VibeCheckStrobeCMD_Execute+0x76>
		{
			VibeCheckStrobe_Stop(strobe);
 8003556:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8003558:	f7ff fe47 	bl	80031ea <VibeCheckStrobe_Stop>
			VibeCheckShell_PutOutputString(shell, "ack");
 800355c:	4919      	ldr	r1, [pc, #100]	@ (80035c4 <VibeCheckStrobeCMD_Execute+0xcc>)
 800355e:	6838      	ldr	r0, [r7, #0]
 8003560:	f7ff fd6a 	bl	8003038 <VibeCheckShell_PutOutputString>
			VibeCheckShell_PutOutputDelimiter(shell);
 8003564:	6838      	ldr	r0, [r7, #0]
 8003566:	f7ff fde5 	bl	8003134 <VibeCheckShell_PutOutputDelimiter>
			return 1;
 800356a:	2301      	movs	r3, #1
 800356c:	e024      	b.n	80035b8 <VibeCheckStrobeCMD_Execute+0xc0>
		}
		else if (!strcmp(str, "set"))
 800356e:	f107 030c 	add.w	r3, r7, #12
 8003572:	4916      	ldr	r1, [pc, #88]	@ (80035cc <VibeCheckStrobeCMD_Execute+0xd4>)
 8003574:	4618      	mov	r0, r3
 8003576:	f7fc fecb 	bl	8000310 <strcmp>
 800357a:	4603      	mov	r3, r0
 800357c:	2b00      	cmp	r3, #0
 800357e:	d108      	bne.n	8003592 <VibeCheckStrobeCMD_Execute+0x9a>
		{
			if (VibeCheckStrobeCMD_Set(strobe, shell))
 8003580:	6839      	ldr	r1, [r7, #0]
 8003582:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8003584:	f000 f826 	bl	80035d4 <VibeCheckStrobeCMD_Set>
 8003588:	4603      	mov	r3, r0
 800358a:	2b00      	cmp	r3, #0
 800358c:	d013      	beq.n	80035b6 <VibeCheckStrobeCMD_Execute+0xbe>
			{
				return 1;
 800358e:	2301      	movs	r3, #1
 8003590:	e012      	b.n	80035b8 <VibeCheckStrobeCMD_Execute+0xc0>
			}
		}
		else if (!strcmp(str, "get"))
 8003592:	f107 030c 	add.w	r3, r7, #12
 8003596:	490e      	ldr	r1, [pc, #56]	@ (80035d0 <VibeCheckStrobeCMD_Execute+0xd8>)
 8003598:	4618      	mov	r0, r3
 800359a:	f7fc feb9 	bl	8000310 <strcmp>
 800359e:	4603      	mov	r3, r0
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d108      	bne.n	80035b6 <VibeCheckStrobeCMD_Execute+0xbe>
		{
			if (VibeCheckStrobeCMD_Get(strobe, shell))
 80035a4:	6839      	ldr	r1, [r7, #0]
 80035a6:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80035a8:	f000 f896 	bl	80036d8 <VibeCheckStrobeCMD_Get>
 80035ac:	4603      	mov	r3, r0
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d001      	beq.n	80035b6 <VibeCheckStrobeCMD_Execute+0xbe>
			{
				return 1;
 80035b2:	2301      	movs	r3, #1
 80035b4:	e000      	b.n	80035b8 <VibeCheckStrobeCMD_Execute+0xc0>
			}
		}
	}

	return 0;
 80035b6:	2300      	movs	r3, #0
}
 80035b8:	4618      	mov	r0, r3
 80035ba:	3750      	adds	r7, #80	@ 0x50
 80035bc:	46bd      	mov	sp, r7
 80035be:	bd80      	pop	{r7, pc}
 80035c0:	08018410 	.word	0x08018410
 80035c4:	08018418 	.word	0x08018418
 80035c8:	0801841c 	.word	0x0801841c
 80035cc:	08018424 	.word	0x08018424
 80035d0:	08018428 	.word	0x08018428

080035d4 <VibeCheckStrobeCMD_Set>:

uint32_t VibeCheckStrobeCMD_Set(VibeCheckStrobe* strobe, VibeCheckShell* shell)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b096      	sub	sp, #88	@ 0x58
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
 80035dc:	6039      	str	r1, [r7, #0]
	char str[VC_SHELL_MAX_TOKEN_LEN];
	if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 80035de:	f107 0318 	add.w	r3, r7, #24
 80035e2:	2240      	movs	r2, #64	@ 0x40
 80035e4:	4619      	mov	r1, r3
 80035e6:	6838      	ldr	r0, [r7, #0]
 80035e8:	f7ff fc6c 	bl	8002ec4 <VibeCheckShell_GetNextString>
 80035ec:	4603      	mov	r3, r0
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d065      	beq.n	80036be <VibeCheckStrobeCMD_Set+0xea>
	{
		if (!strcmp(str, "frequency"))
 80035f2:	f107 0318 	add.w	r3, r7, #24
 80035f6:	4934      	ldr	r1, [pc, #208]	@ (80036c8 <VibeCheckStrobeCMD_Set+0xf4>)
 80035f8:	4618      	mov	r0, r3
 80035fa:	f7fc fe89 	bl	8000310 <strcmp>
 80035fe:	4603      	mov	r3, r0
 8003600:	2b00      	cmp	r3, #0
 8003602:	d118      	bne.n	8003636 <VibeCheckStrobeCMD_Set+0x62>
		{
			float val;
			if (VibeCheckShell_GetNextFloat(shell, &val))
 8003604:	f107 0314 	add.w	r3, r7, #20
 8003608:	4619      	mov	r1, r3
 800360a:	6838      	ldr	r0, [r7, #0]
 800360c:	f7ff fcca 	bl	8002fa4 <VibeCheckShell_GetNextFloat>
 8003610:	4603      	mov	r3, r0
 8003612:	2b00      	cmp	r3, #0
 8003614:	d053      	beq.n	80036be <VibeCheckStrobeCMD_Set+0xea>
			{
				VibeCheckStrobe_SetFrequency(strobe, val);
 8003616:	edd7 7a05 	vldr	s15, [r7, #20]
 800361a:	eeb0 0a67 	vmov.f32	s0, s15
 800361e:	6878      	ldr	r0, [r7, #4]
 8003620:	f7ff fe02 	bl	8003228 <VibeCheckStrobe_SetFrequency>
				VibeCheckShell_PutOutputString(shell, "ack");
 8003624:	4929      	ldr	r1, [pc, #164]	@ (80036cc <VibeCheckStrobeCMD_Set+0xf8>)
 8003626:	6838      	ldr	r0, [r7, #0]
 8003628:	f7ff fd06 	bl	8003038 <VibeCheckShell_PutOutputString>
				VibeCheckShell_PutOutputDelimiter(shell);
 800362c:	6838      	ldr	r0, [r7, #0]
 800362e:	f7ff fd81 	bl	8003134 <VibeCheckShell_PutOutputDelimiter>
				return 1;
 8003632:	2301      	movs	r3, #1
 8003634:	e044      	b.n	80036c0 <VibeCheckStrobeCMD_Set+0xec>
			}
		}
		else if (!strcmp(str, "phase"))
 8003636:	f107 0318 	add.w	r3, r7, #24
 800363a:	4925      	ldr	r1, [pc, #148]	@ (80036d0 <VibeCheckStrobeCMD_Set+0xfc>)
 800363c:	4618      	mov	r0, r3
 800363e:	f7fc fe67 	bl	8000310 <strcmp>
 8003642:	4603      	mov	r3, r0
 8003644:	2b00      	cmp	r3, #0
 8003646:	d118      	bne.n	800367a <VibeCheckStrobeCMD_Set+0xa6>
		{
			float val;
			if (VibeCheckShell_GetNextFloat(shell, &val))
 8003648:	f107 0310 	add.w	r3, r7, #16
 800364c:	4619      	mov	r1, r3
 800364e:	6838      	ldr	r0, [r7, #0]
 8003650:	f7ff fca8 	bl	8002fa4 <VibeCheckShell_GetNextFloat>
 8003654:	4603      	mov	r3, r0
 8003656:	2b00      	cmp	r3, #0
 8003658:	d031      	beq.n	80036be <VibeCheckStrobeCMD_Set+0xea>
			{
				VibeCheckStrobe_SetPhase(strobe, val);
 800365a:	edd7 7a04 	vldr	s15, [r7, #16]
 800365e:	eeb0 0a67 	vmov.f32	s0, s15
 8003662:	6878      	ldr	r0, [r7, #4]
 8003664:	f7ff fe40 	bl	80032e8 <VibeCheckStrobe_SetPhase>
				VibeCheckShell_PutOutputString(shell, "ack");
 8003668:	4918      	ldr	r1, [pc, #96]	@ (80036cc <VibeCheckStrobeCMD_Set+0xf8>)
 800366a:	6838      	ldr	r0, [r7, #0]
 800366c:	f7ff fce4 	bl	8003038 <VibeCheckShell_PutOutputString>
				VibeCheckShell_PutOutputDelimiter(shell);
 8003670:	6838      	ldr	r0, [r7, #0]
 8003672:	f7ff fd5f 	bl	8003134 <VibeCheckShell_PutOutputDelimiter>
				return 1;
 8003676:	2301      	movs	r3, #1
 8003678:	e022      	b.n	80036c0 <VibeCheckStrobeCMD_Set+0xec>
			}
		}
		else if (!strcmp(str, "exposure"))
 800367a:	f107 0318 	add.w	r3, r7, #24
 800367e:	4915      	ldr	r1, [pc, #84]	@ (80036d4 <VibeCheckStrobeCMD_Set+0x100>)
 8003680:	4618      	mov	r0, r3
 8003682:	f7fc fe45 	bl	8000310 <strcmp>
 8003686:	4603      	mov	r3, r0
 8003688:	2b00      	cmp	r3, #0
 800368a:	d118      	bne.n	80036be <VibeCheckStrobeCMD_Set+0xea>
		{
			float val;
			if (VibeCheckShell_GetNextFloat(shell, &val))
 800368c:	f107 030c 	add.w	r3, r7, #12
 8003690:	4619      	mov	r1, r3
 8003692:	6838      	ldr	r0, [r7, #0]
 8003694:	f7ff fc86 	bl	8002fa4 <VibeCheckShell_GetNextFloat>
 8003698:	4603      	mov	r3, r0
 800369a:	2b00      	cmp	r3, #0
 800369c:	d00f      	beq.n	80036be <VibeCheckStrobeCMD_Set+0xea>
			{
				VibeCheckStrobe_SetExposure(strobe, val);
 800369e:	edd7 7a03 	vldr	s15, [r7, #12]
 80036a2:	eeb0 0a67 	vmov.f32	s0, s15
 80036a6:	6878      	ldr	r0, [r7, #4]
 80036a8:	f7ff fea4 	bl	80033f4 <VibeCheckStrobe_SetExposure>
				VibeCheckShell_PutOutputString(shell, "ack");
 80036ac:	4907      	ldr	r1, [pc, #28]	@ (80036cc <VibeCheckStrobeCMD_Set+0xf8>)
 80036ae:	6838      	ldr	r0, [r7, #0]
 80036b0:	f7ff fcc2 	bl	8003038 <VibeCheckShell_PutOutputString>
				VibeCheckShell_PutOutputDelimiter(shell);
 80036b4:	6838      	ldr	r0, [r7, #0]
 80036b6:	f7ff fd3d 	bl	8003134 <VibeCheckShell_PutOutputDelimiter>
				return 1;
 80036ba:	2301      	movs	r3, #1
 80036bc:	e000      	b.n	80036c0 <VibeCheckStrobeCMD_Set+0xec>
			}
		}
	}

	return 0;
 80036be:	2300      	movs	r3, #0
}
 80036c0:	4618      	mov	r0, r3
 80036c2:	3758      	adds	r7, #88	@ 0x58
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bd80      	pop	{r7, pc}
 80036c8:	0801842c 	.word	0x0801842c
 80036cc:	08018418 	.word	0x08018418
 80036d0:	08018438 	.word	0x08018438
 80036d4:	08018440 	.word	0x08018440

080036d8 <VibeCheckStrobeCMD_Get>:

uint32_t VibeCheckStrobeCMD_Get(VibeCheckStrobe* strobe, VibeCheckShell* shell)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b092      	sub	sp, #72	@ 0x48
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
 80036e0:	6039      	str	r1, [r7, #0]
	char str[VC_SHELL_MAX_TOKEN_LEN];
	if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 80036e2:	f107 0308 	add.w	r3, r7, #8
 80036e6:	2240      	movs	r2, #64	@ 0x40
 80036e8:	4619      	mov	r1, r3
 80036ea:	6838      	ldr	r0, [r7, #0]
 80036ec:	f7ff fbea 	bl	8002ec4 <VibeCheckShell_GetNextString>
 80036f0:	4603      	mov	r3, r0
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d05c      	beq.n	80037b0 <VibeCheckStrobeCMD_Get+0xd8>
	{
		if (!strcmp(str, "frequency"))
 80036f6:	f107 0308 	add.w	r3, r7, #8
 80036fa:	4930      	ldr	r1, [pc, #192]	@ (80037bc <VibeCheckStrobeCMD_Get+0xe4>)
 80036fc:	4618      	mov	r0, r3
 80036fe:	f7fc fe07 	bl	8000310 <strcmp>
 8003702:	4603      	mov	r3, r0
 8003704:	2b00      	cmp	r3, #0
 8003706:	d115      	bne.n	8003734 <VibeCheckStrobeCMD_Get+0x5c>
		{
			VibeCheckShell_PutOutputString(shell, "ack");
 8003708:	492d      	ldr	r1, [pc, #180]	@ (80037c0 <VibeCheckStrobeCMD_Get+0xe8>)
 800370a:	6838      	ldr	r0, [r7, #0]
 800370c:	f7ff fc94 	bl	8003038 <VibeCheckShell_PutOutputString>
			VibeCheckShell_PutOutputSeparator(shell);
 8003710:	6838      	ldr	r0, [r7, #0]
 8003712:	f7ff fd01 	bl	8003118 <VibeCheckShell_PutOutputSeparator>
			VibeCheckShell_PutOutputFloat(shell, VibeCheckStrobe_GetFrequency(strobe));
 8003716:	6878      	ldr	r0, [r7, #4]
 8003718:	f7ff fdd6 	bl	80032c8 <VibeCheckStrobe_GetFrequency>
 800371c:	eef0 7a40 	vmov.f32	s15, s0
 8003720:	eeb0 0a67 	vmov.f32	s0, s15
 8003724:	6838      	ldr	r0, [r7, #0]
 8003726:	f7ff fcd9 	bl	80030dc <VibeCheckShell_PutOutputFloat>
			VibeCheckShell_PutOutputDelimiter(shell);
 800372a:	6838      	ldr	r0, [r7, #0]
 800372c:	f7ff fd02 	bl	8003134 <VibeCheckShell_PutOutputDelimiter>
			return 1;
 8003730:	2301      	movs	r3, #1
 8003732:	e03e      	b.n	80037b2 <VibeCheckStrobeCMD_Get+0xda>
		}
		else if (!strcmp(str, "phase"))
 8003734:	f107 0308 	add.w	r3, r7, #8
 8003738:	4922      	ldr	r1, [pc, #136]	@ (80037c4 <VibeCheckStrobeCMD_Get+0xec>)
 800373a:	4618      	mov	r0, r3
 800373c:	f7fc fde8 	bl	8000310 <strcmp>
 8003740:	4603      	mov	r3, r0
 8003742:	2b00      	cmp	r3, #0
 8003744:	d115      	bne.n	8003772 <VibeCheckStrobeCMD_Get+0x9a>
		{
			VibeCheckShell_PutOutputString(shell, "ack");
 8003746:	491e      	ldr	r1, [pc, #120]	@ (80037c0 <VibeCheckStrobeCMD_Get+0xe8>)
 8003748:	6838      	ldr	r0, [r7, #0]
 800374a:	f7ff fc75 	bl	8003038 <VibeCheckShell_PutOutputString>
			VibeCheckShell_PutOutputSeparator(shell);
 800374e:	6838      	ldr	r0, [r7, #0]
 8003750:	f7ff fce2 	bl	8003118 <VibeCheckShell_PutOutputSeparator>
			VibeCheckShell_PutOutputFloat(shell, VibeCheckStrobe_GetPhase(strobe));
 8003754:	6878      	ldr	r0, [r7, #4]
 8003756:	f7ff fe3d 	bl	80033d4 <VibeCheckStrobe_GetPhase>
 800375a:	eef0 7a40 	vmov.f32	s15, s0
 800375e:	eeb0 0a67 	vmov.f32	s0, s15
 8003762:	6838      	ldr	r0, [r7, #0]
 8003764:	f7ff fcba 	bl	80030dc <VibeCheckShell_PutOutputFloat>
			VibeCheckShell_PutOutputDelimiter(shell);
 8003768:	6838      	ldr	r0, [r7, #0]
 800376a:	f7ff fce3 	bl	8003134 <VibeCheckShell_PutOutputDelimiter>
			return 1;
 800376e:	2301      	movs	r3, #1
 8003770:	e01f      	b.n	80037b2 <VibeCheckStrobeCMD_Get+0xda>
		}
		else if (!strcmp(str, "exposure"))
 8003772:	f107 0308 	add.w	r3, r7, #8
 8003776:	4914      	ldr	r1, [pc, #80]	@ (80037c8 <VibeCheckStrobeCMD_Get+0xf0>)
 8003778:	4618      	mov	r0, r3
 800377a:	f7fc fdc9 	bl	8000310 <strcmp>
 800377e:	4603      	mov	r3, r0
 8003780:	2b00      	cmp	r3, #0
 8003782:	d115      	bne.n	80037b0 <VibeCheckStrobeCMD_Get+0xd8>
		{
			VibeCheckShell_PutOutputString(shell, "ack");
 8003784:	490e      	ldr	r1, [pc, #56]	@ (80037c0 <VibeCheckStrobeCMD_Get+0xe8>)
 8003786:	6838      	ldr	r0, [r7, #0]
 8003788:	f7ff fc56 	bl	8003038 <VibeCheckShell_PutOutputString>
			VibeCheckShell_PutOutputSeparator(shell);
 800378c:	6838      	ldr	r0, [r7, #0]
 800378e:	f7ff fcc3 	bl	8003118 <VibeCheckShell_PutOutputSeparator>
			VibeCheckShell_PutOutputFloat(shell, VibeCheckStrobe_GetExposure(strobe));
 8003792:	6878      	ldr	r0, [r7, #4]
 8003794:	f7ff fe7a 	bl	800348c <VibeCheckStrobe_GetExposure>
 8003798:	eef0 7a40 	vmov.f32	s15, s0
 800379c:	eeb0 0a67 	vmov.f32	s0, s15
 80037a0:	6838      	ldr	r0, [r7, #0]
 80037a2:	f7ff fc9b 	bl	80030dc <VibeCheckShell_PutOutputFloat>
			VibeCheckShell_PutOutputDelimiter(shell);
 80037a6:	6838      	ldr	r0, [r7, #0]
 80037a8:	f7ff fcc4 	bl	8003134 <VibeCheckShell_PutOutputDelimiter>
			return 1;
 80037ac:	2301      	movs	r3, #1
 80037ae:	e000      	b.n	80037b2 <VibeCheckStrobeCMD_Get+0xda>
		}
	}

	return 0;
 80037b0:	2300      	movs	r3, #0
}
 80037b2:	4618      	mov	r0, r3
 80037b4:	3748      	adds	r7, #72	@ 0x48
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}
 80037ba:	bf00      	nop
 80037bc:	0801842c 	.word	0x0801842c
 80037c0:	08018418 	.word	0x08018418
 80037c4:	08018438 	.word	0x08018438
 80037c8:	08018440 	.word	0x08018440
 80037cc:	00000000 	.word	0x00000000

080037d0 <ComputeSineWave>:




static void ComputeSineWave(uint32_t* buf, uint32_t len, float amplitude)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	ed2d 8b02 	vpush	{d8}
 80037d6:	b086      	sub	sp, #24
 80037d8:	af00      	add	r7, sp, #0
 80037da:	60f8      	str	r0, [r7, #12]
 80037dc:	60b9      	str	r1, [r7, #8]
 80037de:	ed87 0a01 	vstr	s0, [r7, #4]
	for (uint32_t i = 0; i < len; i++)
 80037e2:	2300      	movs	r3, #0
 80037e4:	617b      	str	r3, [r7, #20]
 80037e6:	e032      	b.n	800384e <ComputeSineWave+0x7e>
		*buf++ = 0.5f * VC_WAVE_DAC_FULL_SCALE * (1.0f + amplitude * sin((float)i * 2.0f * 3.14159f / (float)len));
 80037e8:	edd7 7a01 	vldr	s15, [r7, #4]
 80037ec:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 80037f0:	697b      	ldr	r3, [r7, #20]
 80037f2:	ee07 3a90 	vmov	s15, r3
 80037f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037fa:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80037fe:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 8003870 <ComputeSineWave+0xa0>
 8003802:	ee67 6a87 	vmul.f32	s13, s15, s14
 8003806:	68bb      	ldr	r3, [r7, #8]
 8003808:	ee07 3a90 	vmov	s15, r3
 800380c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003810:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003814:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003818:	eeb0 0b47 	vmov.f64	d0, d7
 800381c:	f013 ff08 	bl	8017630 <sin>
 8003820:	eeb0 7b40 	vmov.f64	d7, d0
 8003824:	ee28 7b07 	vmul.f64	d7, d8, d7
 8003828:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800382c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003830:	ed9f 6b0d 	vldr	d6, [pc, #52]	@ 8003868 <ComputeSineWave+0x98>
 8003834:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	1d1a      	adds	r2, r3, #4
 800383c:	60fa      	str	r2, [r7, #12]
 800383e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8003842:	ee17 2a90 	vmov	r2, s15
 8003846:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < len; i++)
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	3301      	adds	r3, #1
 800384c:	617b      	str	r3, [r7, #20]
 800384e:	697a      	ldr	r2, [r7, #20]
 8003850:	68bb      	ldr	r3, [r7, #8]
 8003852:	429a      	cmp	r2, r3
 8003854:	d3c8      	bcc.n	80037e8 <ComputeSineWave+0x18>
}
 8003856:	bf00      	nop
 8003858:	bf00      	nop
 800385a:	3718      	adds	r7, #24
 800385c:	46bd      	mov	sp, r7
 800385e:	ecbd 8b02 	vpop	{d8}
 8003862:	bd80      	pop	{r7, pc}
 8003864:	f3af 8000 	nop.w
 8003868:	00000000 	.word	0x00000000
 800386c:	409ffe00 	.word	0x409ffe00
 8003870:	40490fd0 	.word	0x40490fd0

08003874 <ComputeSquareWave>:

static void ComputeSquareWave(uint32_t* buf, uint32_t len, float amplitude)
{
 8003874:	b480      	push	{r7}
 8003876:	b087      	sub	sp, #28
 8003878:	af00      	add	r7, sp, #0
 800387a:	60f8      	str	r0, [r7, #12]
 800387c:	60b9      	str	r1, [r7, #8]
 800387e:	ed87 0a01 	vstr	s0, [r7, #4]
	for (uint32_t i = 0; i < len; i++)
 8003882:	2300      	movs	r3, #0
 8003884:	617b      	str	r3, [r7, #20]
 8003886:	e02c      	b.n	80038e2 <ComputeSquareWave+0x6e>
		if (i < len / 2)
 8003888:	68bb      	ldr	r3, [r7, #8]
 800388a:	085b      	lsrs	r3, r3, #1
 800388c:	697a      	ldr	r2, [r7, #20]
 800388e:	429a      	cmp	r2, r3
 8003890:	d212      	bcs.n	80038b8 <ComputeSquareWave+0x44>
			*buf++ = 0.5f * VC_WAVE_DAC_FULL_SCALE * (1 + amplitude);
 8003892:	edd7 7a01 	vldr	s15, [r7, #4]
 8003896:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800389a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800389e:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 80038f8 <ComputeSquareWave+0x84>
 80038a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	1d1a      	adds	r2, r3, #4
 80038aa:	60fa      	str	r2, [r7, #12]
 80038ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80038b0:	ee17 2a90 	vmov	r2, s15
 80038b4:	601a      	str	r2, [r3, #0]
 80038b6:	e011      	b.n	80038dc <ComputeSquareWave+0x68>
		else
			*buf++ = 0.5f * VC_WAVE_DAC_FULL_SCALE * (1 - amplitude);
 80038b8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80038bc:	edd7 7a01 	vldr	s15, [r7, #4]
 80038c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80038c4:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 80038f8 <ComputeSquareWave+0x84>
 80038c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	1d1a      	adds	r2, r3, #4
 80038d0:	60fa      	str	r2, [r7, #12]
 80038d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80038d6:	ee17 2a90 	vmov	r2, s15
 80038da:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < len; i++)
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	3301      	adds	r3, #1
 80038e0:	617b      	str	r3, [r7, #20]
 80038e2:	697a      	ldr	r2, [r7, #20]
 80038e4:	68bb      	ldr	r3, [r7, #8]
 80038e6:	429a      	cmp	r2, r3
 80038e8:	d3ce      	bcc.n	8003888 <ComputeSquareWave+0x14>
}
 80038ea:	bf00      	nop
 80038ec:	bf00      	nop
 80038ee:	371c      	adds	r7, #28
 80038f0:	46bd      	mov	sp, r7
 80038f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f6:	4770      	bx	lr
 80038f8:	44fff000 	.word	0x44fff000

080038fc <ComputeSawWave>:

static void ComputeSawWave(uint32_t* buf, uint32_t len, float amplitude)
{
 80038fc:	b480      	push	{r7}
 80038fe:	b087      	sub	sp, #28
 8003900:	af00      	add	r7, sp, #0
 8003902:	60f8      	str	r0, [r7, #12]
 8003904:	60b9      	str	r1, [r7, #8]
 8003906:	ed87 0a01 	vstr	s0, [r7, #4]
	for (uint32_t i = 0; i < len; i++)
 800390a:	2300      	movs	r3, #0
 800390c:	617b      	str	r3, [r7, #20]
 800390e:	e052      	b.n	80039b6 <ComputeSawWave+0xba>
		if (i < len / 2)
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	085b      	lsrs	r3, r3, #1
 8003914:	697a      	ldr	r2, [r7, #20]
 8003916:	429a      	cmp	r2, r3
 8003918:	d222      	bcs.n	8003960 <ComputeSawWave+0x64>
			*buf++ = 0.5f * VC_WAVE_DAC_FULL_SCALE * (1 + 2 * (float)i * amplitude / (float)len);
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	ee07 3a90 	vmov	s15, r3
 8003920:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003924:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8003928:	edd7 7a01 	vldr	s15, [r7, #4]
 800392c:	ee67 6a27 	vmul.f32	s13, s14, s15
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	ee07 3a90 	vmov	s15, r3
 8003936:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800393a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800393e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003942:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003946:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 80039cc <ComputeSawWave+0xd0>
 800394a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	1d1a      	adds	r2, r3, #4
 8003952:	60fa      	str	r2, [r7, #12]
 8003954:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003958:	ee17 2a90 	vmov	r2, s15
 800395c:	601a      	str	r2, [r3, #0]
 800395e:	e027      	b.n	80039b0 <ComputeSawWave+0xb4>
		else
			*buf++ = 0.5f * VC_WAVE_DAC_FULL_SCALE * (1 - 2 * amplitude + 2 * (float)i * amplitude / (float)len);
 8003960:	edd7 7a01 	vldr	s15, [r7, #4]
 8003964:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003968:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800396c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	ee07 3a90 	vmov	s15, r3
 8003976:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800397a:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800397e:	edd7 7a01 	vldr	s15, [r7, #4]
 8003982:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8003986:	68bb      	ldr	r3, [r7, #8]
 8003988:	ee07 3a90 	vmov	s15, r3
 800398c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003990:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8003994:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003998:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 80039cc <ComputeSawWave+0xd0>
 800399c:	ee67 7a87 	vmul.f32	s15, s15, s14
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	1d1a      	adds	r2, r3, #4
 80039a4:	60fa      	str	r2, [r7, #12]
 80039a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80039aa:	ee17 2a90 	vmov	r2, s15
 80039ae:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < len; i++)
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	3301      	adds	r3, #1
 80039b4:	617b      	str	r3, [r7, #20]
 80039b6:	697a      	ldr	r2, [r7, #20]
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	429a      	cmp	r2, r3
 80039bc:	d3a8      	bcc.n	8003910 <ComputeSawWave+0x14>
}
 80039be:	bf00      	nop
 80039c0:	bf00      	nop
 80039c2:	371c      	adds	r7, #28
 80039c4:	46bd      	mov	sp, r7
 80039c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ca:	4770      	bx	lr
 80039cc:	44fff000 	.word	0x44fff000

080039d0 <ComputeTriangleWave>:

static void ComputeTriangleWave(uint32_t* buf, uint32_t len, float amplitude)
{
 80039d0:	b480      	push	{r7}
 80039d2:	b087      	sub	sp, #28
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	60f8      	str	r0, [r7, #12]
 80039d8:	60b9      	str	r1, [r7, #8]
 80039da:	ed87 0a01 	vstr	s0, [r7, #4]
	for (uint32_t i = 0; i < len; i++)
 80039de:	2300      	movs	r3, #0
 80039e0:	617b      	str	r3, [r7, #20]
 80039e2:	e082      	b.n	8003aea <ComputeTriangleWave+0x11a>
		if (i < len / 4)
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	089b      	lsrs	r3, r3, #2
 80039e8:	697a      	ldr	r2, [r7, #20]
 80039ea:	429a      	cmp	r2, r3
 80039ec:	d221      	bcs.n	8003a32 <ComputeTriangleWave+0x62>
			*buf++ = 0.5f * VC_WAVE_DAC_FULL_SCALE * (1 + 4 * i * amplitude / (float)len);
 80039ee:	697b      	ldr	r3, [r7, #20]
 80039f0:	009b      	lsls	r3, r3, #2
 80039f2:	ee07 3a90 	vmov	s15, r3
 80039f6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80039fa:	edd7 7a01 	vldr	s15, [r7, #4]
 80039fe:	ee67 6a27 	vmul.f32	s13, s14, s15
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	ee07 3a90 	vmov	s15, r3
 8003a08:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003a0c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a10:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003a14:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003a18:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 8003b04 <ComputeTriangleWave+0x134>
 8003a1c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	1d1a      	adds	r2, r3, #4
 8003a24:	60fa      	str	r2, [r7, #12]
 8003a26:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a2a:	ee17 2a90 	vmov	r2, s15
 8003a2e:	601a      	str	r2, [r3, #0]
 8003a30:	e058      	b.n	8003ae4 <ComputeTriangleWave+0x114>
		else if (i < 3 * len / 4)
 8003a32:	68ba      	ldr	r2, [r7, #8]
 8003a34:	4613      	mov	r3, r2
 8003a36:	005b      	lsls	r3, r3, #1
 8003a38:	4413      	add	r3, r2
 8003a3a:	089b      	lsrs	r3, r3, #2
 8003a3c:	697a      	ldr	r2, [r7, #20]
 8003a3e:	429a      	cmp	r2, r3
 8003a40:	d227      	bcs.n	8003a92 <ComputeTriangleWave+0xc2>
			*buf++ = 0.5f * VC_WAVE_DAC_FULL_SCALE * (1 + 2 * amplitude - 4 * i * amplitude / (float)len);
 8003a42:	edd7 7a01 	vldr	s15, [r7, #4]
 8003a46:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003a4a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003a4e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003a52:	697b      	ldr	r3, [r7, #20]
 8003a54:	009b      	lsls	r3, r3, #2
 8003a56:	ee07 3a90 	vmov	s15, r3
 8003a5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a5e:	edd7 7a01 	vldr	s15, [r7, #4]
 8003a62:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8003a66:	68bb      	ldr	r3, [r7, #8]
 8003a68:	ee07 3a90 	vmov	s15, r3
 8003a6c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a70:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8003a74:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003a78:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8003b04 <ComputeTriangleWave+0x134>
 8003a7c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	1d1a      	adds	r2, r3, #4
 8003a84:	60fa      	str	r2, [r7, #12]
 8003a86:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a8a:	ee17 2a90 	vmov	r2, s15
 8003a8e:	601a      	str	r2, [r3, #0]
 8003a90:	e028      	b.n	8003ae4 <ComputeTriangleWave+0x114>
		else
			*buf++ = 0.5f * VC_WAVE_DAC_FULL_SCALE * (1 - 4 * amplitude + 4 * i * amplitude / (float)len);
 8003a92:	edd7 7a01 	vldr	s15, [r7, #4]
 8003a96:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8003a9a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003a9e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003aa2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	009b      	lsls	r3, r3, #2
 8003aaa:	ee07 3a90 	vmov	s15, r3
 8003aae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ab2:	edd7 7a01 	vldr	s15, [r7, #4]
 8003ab6:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8003aba:	68bb      	ldr	r3, [r7, #8]
 8003abc:	ee07 3a90 	vmov	s15, r3
 8003ac0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ac4:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8003ac8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003acc:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8003b04 <ComputeTriangleWave+0x134>
 8003ad0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	1d1a      	adds	r2, r3, #4
 8003ad8:	60fa      	str	r2, [r7, #12]
 8003ada:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ade:	ee17 2a90 	vmov	r2, s15
 8003ae2:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < len; i++)
 8003ae4:	697b      	ldr	r3, [r7, #20]
 8003ae6:	3301      	adds	r3, #1
 8003ae8:	617b      	str	r3, [r7, #20]
 8003aea:	697a      	ldr	r2, [r7, #20]
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	429a      	cmp	r2, r3
 8003af0:	f4ff af78 	bcc.w	80039e4 <ComputeTriangleWave+0x14>
}
 8003af4:	bf00      	nop
 8003af6:	bf00      	nop
 8003af8:	371c      	adds	r7, #28
 8003afa:	46bd      	mov	sp, r7
 8003afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b00:	4770      	bx	lr
 8003b02:	bf00      	nop
 8003b04:	44fff000 	.word	0x44fff000

08003b08 <VibeCheckWaveGen_RecomputeWave>:




static void VibeCheckWaveGen_RecomputeWave(VibeCheckWaveGen* wavegen)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b082      	sub	sp, #8
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
	switch (wavegen->waveform)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003b16:	7d1b      	ldrb	r3, [r3, #20]
 8003b18:	2b03      	cmp	r3, #3
 8003b1a:	d863      	bhi.n	8003be4 <VibeCheckWaveGen_RecomputeWave+0xdc>
 8003b1c:	a201      	add	r2, pc, #4	@ (adr r2, 8003b24 <VibeCheckWaveGen_RecomputeWave+0x1c>)
 8003b1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b22:	bf00      	nop
 8003b24:	08003b35 	.word	0x08003b35
 8003b28:	08003b61 	.word	0x08003b61
 8003b2c:	08003b8d 	.word	0x08003b8d
 8003b30:	08003bb9 	.word	0x08003bb9
	{
	case VC_WAVE_SINE:
		ComputeSineWave(&wavegen->wave[wavegen->wave_buf_index * VC_WAVE_BUF_LEN], VC_WAVE_BUF_LEN, wavegen->amplitude);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003b3a:	689b      	ldr	r3, [r3, #8]
 8003b3c:	029b      	lsls	r3, r3, #10
 8003b3e:	3302      	adds	r3, #2
 8003b40:	009b      	lsls	r3, r3, #2
 8003b42:	687a      	ldr	r2, [r7, #4]
 8003b44:	441a      	add	r2, r3
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003b4c:	edd3 7a07 	vldr	s15, [r3, #28]
 8003b50:	eeb0 0a67 	vmov.f32	s0, s15
 8003b54:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003b58:	4610      	mov	r0, r2
 8003b5a:	f7ff fe39 	bl	80037d0 <ComputeSineWave>
		break;
 8003b5e:	e041      	b.n	8003be4 <VibeCheckWaveGen_RecomputeWave+0xdc>
	case VC_WAVE_SQUARE:
		ComputeSquareWave(&wavegen->wave[wavegen->wave_buf_index * VC_WAVE_BUF_LEN], VC_WAVE_BUF_LEN, wavegen->amplitude);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003b66:	689b      	ldr	r3, [r3, #8]
 8003b68:	029b      	lsls	r3, r3, #10
 8003b6a:	3302      	adds	r3, #2
 8003b6c:	009b      	lsls	r3, r3, #2
 8003b6e:	687a      	ldr	r2, [r7, #4]
 8003b70:	441a      	add	r2, r3
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003b78:	edd3 7a07 	vldr	s15, [r3, #28]
 8003b7c:	eeb0 0a67 	vmov.f32	s0, s15
 8003b80:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003b84:	4610      	mov	r0, r2
 8003b86:	f7ff fe75 	bl	8003874 <ComputeSquareWave>
		break;
 8003b8a:	e02b      	b.n	8003be4 <VibeCheckWaveGen_RecomputeWave+0xdc>
	case VC_WAVE_SAW:
		ComputeSawWave(&wavegen->wave[wavegen->wave_buf_index * VC_WAVE_BUF_LEN], VC_WAVE_BUF_LEN, wavegen->amplitude);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003b92:	689b      	ldr	r3, [r3, #8]
 8003b94:	029b      	lsls	r3, r3, #10
 8003b96:	3302      	adds	r3, #2
 8003b98:	009b      	lsls	r3, r3, #2
 8003b9a:	687a      	ldr	r2, [r7, #4]
 8003b9c:	441a      	add	r2, r3
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003ba4:	edd3 7a07 	vldr	s15, [r3, #28]
 8003ba8:	eeb0 0a67 	vmov.f32	s0, s15
 8003bac:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003bb0:	4610      	mov	r0, r2
 8003bb2:	f7ff fea3 	bl	80038fc <ComputeSawWave>
		break;
 8003bb6:	e015      	b.n	8003be4 <VibeCheckWaveGen_RecomputeWave+0xdc>
	case VC_WAVE_TRIANGLE:
		ComputeTriangleWave(&wavegen->wave[wavegen->wave_buf_index * VC_WAVE_BUF_LEN], VC_WAVE_BUF_LEN, wavegen->amplitude);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003bbe:	689b      	ldr	r3, [r3, #8]
 8003bc0:	029b      	lsls	r3, r3, #10
 8003bc2:	3302      	adds	r3, #2
 8003bc4:	009b      	lsls	r3, r3, #2
 8003bc6:	687a      	ldr	r2, [r7, #4]
 8003bc8:	441a      	add	r2, r3
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003bd0:	edd3 7a07 	vldr	s15, [r3, #28]
 8003bd4:	eeb0 0a67 	vmov.f32	s0, s15
 8003bd8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003bdc:	4610      	mov	r0, r2
 8003bde:	f7ff fef7 	bl	80039d0 <ComputeTriangleWave>
		break;
 8003be2:	bf00      	nop
	}
}
 8003be4:	bf00      	nop
 8003be6:	3708      	adds	r7, #8
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bd80      	pop	{r7, pc}

08003bec <VibeCheckWaveGen_Init>:


void VibeCheckWaveGen_Init(VibeCheckWaveGen* wavegen, DAC_HandleTypeDef *hdac, TIM_HandleTypeDef* htim)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b084      	sub	sp, #16
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	60f8      	str	r0, [r7, #12]
 8003bf4:	60b9      	str	r1, [r7, #8]
 8003bf6:	607a      	str	r2, [r7, #4]
	wavegen->hdac = hdac;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	68ba      	ldr	r2, [r7, #8]
 8003bfc:	605a      	str	r2, [r3, #4]
	wavegen->htim = htim;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	687a      	ldr	r2, [r7, #4]
 8003c02:	601a      	str	r2, [r3, #0]
	wavegen->freq_hz = VC_WAVE_MIN_FREQ_HZ;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003c0a:	461a      	mov	r2, r3
 8003c0c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8003c10:	6193      	str	r3, [r2, #24]
	wavegen->amplitude = 0.1f;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003c18:	461a      	mov	r2, r3
 8003c1a:	4b27      	ldr	r3, [pc, #156]	@ (8003cb8 <VibeCheckWaveGen_Init+0xcc>)
 8003c1c:	61d3      	str	r3, [r2, #28]
	wavegen->waveform = VC_WAVE_SINE;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003c24:	2200      	movs	r2, #0
 8003c26:	751a      	strb	r2, [r3, #20]
	wavegen->wave_compute_pending = 0;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003c2e:	461a      	mov	r2, r3
 8003c30:	2300      	movs	r3, #0
 8003c32:	60d3      	str	r3, [r2, #12]
	wavegen->wave_compute_ready = 0;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003c3a:	461a      	mov	r2, r3
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	6113      	str	r3, [r2, #16]

	wavegen->is_muted = 0;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003c46:	461a      	mov	r2, r3
 8003c48:	2300      	movs	r3, #0
 8003c4a:	6213      	str	r3, [r2, #32]
	wavegen->time_prev_button_press = 0;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003c52:	461a      	mov	r2, r3
 8003c54:	2300      	movs	r3, #0
 8003c56:	6253      	str	r3, [r2, #36]	@ 0x24

	HAL_GPIO_WritePin(MUTE_SIGNAL_GPIO_Port, MUTE_SIGNAL_Pin, GPIO_PIN_RESET);  /* un-mute the output */
 8003c58:	2200      	movs	r2, #0
 8003c5a:	2108      	movs	r1, #8
 8003c5c:	4817      	ldr	r0, [pc, #92]	@ (8003cbc <VibeCheckWaveGen_Init+0xd0>)
 8003c5e:	f003 fe9f 	bl	80079a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MUTE_INDICATOR_GPIO_Port, MUTE_INDICATOR_Pin, GPIO_PIN_RESET);  /* turn off the mute LED */
 8003c62:	2200      	movs	r2, #0
 8003c64:	2102      	movs	r1, #2
 8003c66:	4815      	ldr	r0, [pc, #84]	@ (8003cbc <VibeCheckWaveGen_Init+0xd0>)
 8003c68:	f003 fe9a 	bl	80079a0 <HAL_GPIO_WritePin>

	/* set up timer registers */
	wavegen->htim->Instance->PSC = VC_WAVE_TIM_PSC - 1;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f640 125f 	movw	r2, #2399	@ 0x95f
 8003c76:	629a      	str	r2, [r3, #40]	@ 0x28
	VibeCheckWaveGen_SetFrequency(wavegen, wavegen->freq_hz);
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003c7e:	edd3 7a06 	vldr	s15, [r3, #24]
 8003c82:	eeb0 0a67 	vmov.f32	s0, s15
 8003c86:	68f8      	ldr	r0, [r7, #12]
 8003c88:	f000 f872 	bl	8003d70 <VibeCheckWaveGen_SetFrequency>

	/* compute the wave */
	wavegen->wave_buf_index = 0;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003c92:	461a      	mov	r2, r3
 8003c94:	2300      	movs	r3, #0
 8003c96:	6093      	str	r3, [r2, #8]
	VibeCheckWaveGen_RecomputeWave(wavegen);
 8003c98:	68f8      	ldr	r0, [r7, #12]
 8003c9a:	f7ff ff35 	bl	8003b08 <VibeCheckWaveGen_RecomputeWave>
	wavegen->wave_buf_index = 1;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003ca4:	461a      	mov	r2, r3
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	6093      	str	r3, [r2, #8]
	VibeCheckWaveGen_RecomputeWave(wavegen);
 8003caa:	68f8      	ldr	r0, [r7, #12]
 8003cac:	f7ff ff2c 	bl	8003b08 <VibeCheckWaveGen_RecomputeWave>
}
 8003cb0:	bf00      	nop
 8003cb2:	3710      	adds	r7, #16
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bd80      	pop	{r7, pc}
 8003cb8:	3dcccccd 	.word	0x3dcccccd
 8003cbc:	58020000 	.word	0x58020000

08003cc0 <VibeCheckWaveGen_Update>:

void VibeCheckWaveGen_Update(VibeCheckWaveGen* wavegen)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b084      	sub	sp, #16
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
	/* call in the main loop */

	/* check the mute button */
	uint32_t time = HAL_GetTick();
 8003cc8:	f000 f95c 	bl	8003f84 <HAL_GetTick>
 8003ccc:	60f8      	str	r0, [r7, #12]
	if (time - wavegen->time_prev_button_press > VC_WAVE_BUTTON_DEBOUNCE_MS && HAL_GPIO_ReadPin(MUTE_BUTTON_GPIO_Port, MUTE_BUTTON_Pin))
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003cd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cd6:	68fa      	ldr	r2, [r7, #12]
 8003cd8:	1ad3      	subs	r3, r2, r3
 8003cda:	2bfa      	cmp	r3, #250	@ 0xfa
 8003cdc:	d933      	bls.n	8003d46 <VibeCheckWaveGen_Update+0x86>
 8003cde:	2104      	movs	r1, #4
 8003ce0:	4822      	ldr	r0, [pc, #136]	@ (8003d6c <VibeCheckWaveGen_Update+0xac>)
 8003ce2:	f003 fe45 	bl	8007970 <HAL_GPIO_ReadPin>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d02c      	beq.n	8003d46 <VibeCheckWaveGen_Update+0x86>
	{
		/* TODO: need to alert the shell when we press the mute button */

		if (wavegen->is_muted)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003cf2:	6a1b      	ldr	r3, [r3, #32]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d010      	beq.n	8003d1a <VibeCheckWaveGen_Update+0x5a>
		{
			wavegen->is_muted = 0;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003cfe:	461a      	mov	r2, r3
 8003d00:	2300      	movs	r3, #0
 8003d02:	6213      	str	r3, [r2, #32]
			HAL_GPIO_WritePin(MUTE_SIGNAL_GPIO_Port, MUTE_SIGNAL_Pin, GPIO_PIN_RESET);  /* un-mute the output */
 8003d04:	2200      	movs	r2, #0
 8003d06:	2108      	movs	r1, #8
 8003d08:	4818      	ldr	r0, [pc, #96]	@ (8003d6c <VibeCheckWaveGen_Update+0xac>)
 8003d0a:	f003 fe49 	bl	80079a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MUTE_INDICATOR_GPIO_Port, MUTE_INDICATOR_Pin, GPIO_PIN_RESET);  /* turn off the LED */
 8003d0e:	2200      	movs	r2, #0
 8003d10:	2102      	movs	r1, #2
 8003d12:	4816      	ldr	r0, [pc, #88]	@ (8003d6c <VibeCheckWaveGen_Update+0xac>)
 8003d14:	f003 fe44 	bl	80079a0 <HAL_GPIO_WritePin>
 8003d18:	e00f      	b.n	8003d3a <VibeCheckWaveGen_Update+0x7a>
		}
		else
		{
			wavegen->is_muted = 1;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003d20:	461a      	mov	r2, r3
 8003d22:	2301      	movs	r3, #1
 8003d24:	6213      	str	r3, [r2, #32]
			HAL_GPIO_WritePin(MUTE_SIGNAL_GPIO_Port, MUTE_SIGNAL_Pin, GPIO_PIN_SET);  /* mute the output */
 8003d26:	2201      	movs	r2, #1
 8003d28:	2108      	movs	r1, #8
 8003d2a:	4810      	ldr	r0, [pc, #64]	@ (8003d6c <VibeCheckWaveGen_Update+0xac>)
 8003d2c:	f003 fe38 	bl	80079a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MUTE_INDICATOR_GPIO_Port, MUTE_INDICATOR_Pin, GPIO_PIN_SET);  /* turn on the LED */
 8003d30:	2201      	movs	r2, #1
 8003d32:	2102      	movs	r1, #2
 8003d34:	480d      	ldr	r0, [pc, #52]	@ (8003d6c <VibeCheckWaveGen_Update+0xac>)
 8003d36:	f003 fe33 	bl	80079a0 <HAL_GPIO_WritePin>
		}

		wavegen->time_prev_button_press = time;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003d40:	461a      	mov	r2, r3
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	6253      	str	r3, [r2, #36]	@ 0x24
	 * to make a smooth transition between waves when a parameter is changed, first compute the safe half of the double buffer
	 * immediately. Set a pending flag that the other half also needs to be updated when its safe. The pending flag will be turned
	 * into a ready flag when the DMA callback fires. When we see the ready flag in the update function, compute the other half of the
	 * double buffer with the new wave.
	 */
	if (wavegen->wave_compute_ready)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003d4c:	691b      	ldr	r3, [r3, #16]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d008      	beq.n	8003d64 <VibeCheckWaveGen_Update+0xa4>
	{
		VibeCheckWaveGen_RecomputeWave(wavegen);
 8003d52:	6878      	ldr	r0, [r7, #4]
 8003d54:	f7ff fed8 	bl	8003b08 <VibeCheckWaveGen_RecomputeWave>
		wavegen->wave_compute_ready = 0;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003d5e:	461a      	mov	r2, r3
 8003d60:	2300      	movs	r3, #0
 8003d62:	6113      	str	r3, [r2, #16]
	}


}
 8003d64:	bf00      	nop
 8003d66:	3710      	adds	r7, #16
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bd80      	pop	{r7, pc}
 8003d6c:	58020000 	.word	0x58020000

08003d70 <VibeCheckWaveGen_SetFrequency>:
	HAL_DAC_Stop_DMA(wavegen->hdac, DAC_CHANNEL_1);
	HAL_DAC_Stop_DMA(wavegen->hdac, DAC_CHANNEL_2);
}

void VibeCheckWaveGen_SetFrequency(VibeCheckWaveGen* wavegen, float freq_hz)
{
 8003d70:	b480      	push	{r7}
 8003d72:	b085      	sub	sp, #20
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
 8003d78:	ed87 0a00 	vstr	s0, [r7]
	if (freq_hz < VC_WAVE_MIN_FREQ_HZ)
 8003d7c:	edd7 7a00 	vldr	s15, [r7]
 8003d80:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8003d84:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003d88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d8c:	d502      	bpl.n	8003d94 <VibeCheckWaveGen_SetFrequency+0x24>
		freq_hz = VC_WAVE_MIN_FREQ_HZ;
 8003d8e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8003d92:	603b      	str	r3, [r7, #0]
	if (freq_hz > VC_WAVE_MAX_FREQ_HZ)
 8003d94:	edd7 7a00 	vldr	s15, [r7]
 8003d98:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 8003e14 <VibeCheckWaveGen_SetFrequency+0xa4>
 8003d9c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003da0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003da4:	dd01      	ble.n	8003daa <VibeCheckWaveGen_SetFrequency+0x3a>
		freq_hz = VC_WAVE_MAX_FREQ_HZ;
 8003da6:	4b1c      	ldr	r3, [pc, #112]	@ (8003e18 <VibeCheckWaveGen_SetFrequency+0xa8>)
 8003da8:	603b      	str	r3, [r7, #0]

	uint32_t arr = VC_WAVE_TIM_COUNTS_PER_SECOND / (VC_WAVE_BUF_LEN * freq_hz) - 1;
 8003daa:	edd7 7a00 	vldr	s15, [r7]
 8003dae:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8003e1c <VibeCheckWaveGen_SetFrequency+0xac>
 8003db2:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003db6:	eddf 6a1a 	vldr	s13, [pc, #104]	@ 8003e20 <VibeCheckWaveGen_SetFrequency+0xb0>
 8003dba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003dbe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003dc2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003dc6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003dca:	ee17 3a90 	vmov	r3, s15
 8003dce:	60fb      	str	r3, [r7, #12]
	wavegen->freq_hz = VC_WAVE_TIM_COUNTS_PER_SECOND / ((float)arr + 1.0f) / VC_WAVE_BUF_LEN;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	ee07 3a90 	vmov	s15, r3
 8003dd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003dda:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003dde:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003de2:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 8003e20 <VibeCheckWaveGen_SetFrequency+0xb0>
 8003de6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003dea:	eddf 6a0c 	vldr	s13, [pc, #48]	@ 8003e1c <VibeCheckWaveGen_SetFrequency+0xac>
 8003dee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003df8:	edc3 7a06 	vstr	s15, [r3, #24]
	wavegen->htim->Instance->ARR = arr;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	68fa      	ldr	r2, [r7, #12]
 8003e04:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8003e06:	bf00      	nop
 8003e08:	3714      	adds	r7, #20
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e10:	4770      	bx	lr
 8003e12:	bf00      	nop
 8003e14:	447a0000 	.word	0x447a0000
 8003e18:	447a0000 	.word	0x447a0000
 8003e1c:	44800000 	.word	0x44800000
 8003e20:	47c35000 	.word	0x47c35000

08003e24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8003e24:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003e5c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003e28:	f7fe faae 	bl	8002388 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003e2c:	480c      	ldr	r0, [pc, #48]	@ (8003e60 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003e2e:	490d      	ldr	r1, [pc, #52]	@ (8003e64 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003e30:	4a0d      	ldr	r2, [pc, #52]	@ (8003e68 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003e32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003e34:	e002      	b.n	8003e3c <LoopCopyDataInit>

08003e36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003e36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003e38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003e3a:	3304      	adds	r3, #4

08003e3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003e3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003e3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003e40:	d3f9      	bcc.n	8003e36 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003e42:	4a0a      	ldr	r2, [pc, #40]	@ (8003e6c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003e44:	4c0a      	ldr	r4, [pc, #40]	@ (8003e70 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003e46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003e48:	e001      	b.n	8003e4e <LoopFillZerobss>

08003e4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003e4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003e4c:	3204      	adds	r2, #4

08003e4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003e4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003e50:	d3fb      	bcc.n	8003e4a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003e52:	f010 ff79 	bl	8014d48 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003e56:	f7fc fe3d 	bl	8000ad4 <main>
  bx  lr
 8003e5a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003e5c:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8003e60:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8003e64:	240002cc 	.word	0x240002cc
  ldr r2, =_sidata
 8003e68:	08018c10 	.word	0x08018c10
  ldr r2, =_sbss
 8003e6c:	240002cc 	.word	0x240002cc
  ldr r4, =_ebss
 8003e70:	24006c58 	.word	0x24006c58

08003e74 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003e74:	e7fe      	b.n	8003e74 <ADC3_IRQHandler>
	...

08003e78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b082      	sub	sp, #8
 8003e7c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003e7e:	2003      	movs	r0, #3
 8003e80:	f001 fcf4 	bl	800586c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003e84:	f005 ff52 	bl	8009d2c <HAL_RCC_GetSysClockFreq>
 8003e88:	4602      	mov	r2, r0
 8003e8a:	4b15      	ldr	r3, [pc, #84]	@ (8003ee0 <HAL_Init+0x68>)
 8003e8c:	699b      	ldr	r3, [r3, #24]
 8003e8e:	0a1b      	lsrs	r3, r3, #8
 8003e90:	f003 030f 	and.w	r3, r3, #15
 8003e94:	4913      	ldr	r1, [pc, #76]	@ (8003ee4 <HAL_Init+0x6c>)
 8003e96:	5ccb      	ldrb	r3, [r1, r3]
 8003e98:	f003 031f 	and.w	r3, r3, #31
 8003e9c:	fa22 f303 	lsr.w	r3, r2, r3
 8003ea0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003ea2:	4b0f      	ldr	r3, [pc, #60]	@ (8003ee0 <HAL_Init+0x68>)
 8003ea4:	699b      	ldr	r3, [r3, #24]
 8003ea6:	f003 030f 	and.w	r3, r3, #15
 8003eaa:	4a0e      	ldr	r2, [pc, #56]	@ (8003ee4 <HAL_Init+0x6c>)
 8003eac:	5cd3      	ldrb	r3, [r2, r3]
 8003eae:	f003 031f 	and.w	r3, r3, #31
 8003eb2:	687a      	ldr	r2, [r7, #4]
 8003eb4:	fa22 f303 	lsr.w	r3, r2, r3
 8003eb8:	4a0b      	ldr	r2, [pc, #44]	@ (8003ee8 <HAL_Init+0x70>)
 8003eba:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003ebc:	4a0b      	ldr	r2, [pc, #44]	@ (8003eec <HAL_Init+0x74>)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003ec2:	200f      	movs	r0, #15
 8003ec4:	f000 f814 	bl	8003ef0 <HAL_InitTick>
 8003ec8:	4603      	mov	r3, r0
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d001      	beq.n	8003ed2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	e002      	b.n	8003ed8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003ed2:	f7fd fce7 	bl	80018a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003ed6:	2300      	movs	r3, #0
}
 8003ed8:	4618      	mov	r0, r3
 8003eda:	3708      	adds	r7, #8
 8003edc:	46bd      	mov	sp, r7
 8003ede:	bd80      	pop	{r7, pc}
 8003ee0:	58024400 	.word	0x58024400
 8003ee4:	08018480 	.word	0x08018480
 8003ee8:	24000004 	.word	0x24000004
 8003eec:	24000000 	.word	0x24000000

08003ef0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b082      	sub	sp, #8
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8003ef8:	4b15      	ldr	r3, [pc, #84]	@ (8003f50 <HAL_InitTick+0x60>)
 8003efa:	781b      	ldrb	r3, [r3, #0]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d101      	bne.n	8003f04 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8003f00:	2301      	movs	r3, #1
 8003f02:	e021      	b.n	8003f48 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8003f04:	4b13      	ldr	r3, [pc, #76]	@ (8003f54 <HAL_InitTick+0x64>)
 8003f06:	681a      	ldr	r2, [r3, #0]
 8003f08:	4b11      	ldr	r3, [pc, #68]	@ (8003f50 <HAL_InitTick+0x60>)
 8003f0a:	781b      	ldrb	r3, [r3, #0]
 8003f0c:	4619      	mov	r1, r3
 8003f0e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003f12:	fbb3 f3f1 	udiv	r3, r3, r1
 8003f16:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	f001 fcd9 	bl	80058d2 <HAL_SYSTICK_Config>
 8003f20:	4603      	mov	r3, r0
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d001      	beq.n	8003f2a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8003f26:	2301      	movs	r3, #1
 8003f28:	e00e      	b.n	8003f48 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2b0f      	cmp	r3, #15
 8003f2e:	d80a      	bhi.n	8003f46 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003f30:	2200      	movs	r2, #0
 8003f32:	6879      	ldr	r1, [r7, #4]
 8003f34:	f04f 30ff 	mov.w	r0, #4294967295
 8003f38:	f001 fca3 	bl	8005882 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003f3c:	4a06      	ldr	r2, [pc, #24]	@ (8003f58 <HAL_InitTick+0x68>)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003f42:	2300      	movs	r3, #0
 8003f44:	e000      	b.n	8003f48 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8003f46:	2301      	movs	r3, #1
}
 8003f48:	4618      	mov	r0, r3
 8003f4a:	3708      	adds	r7, #8
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bd80      	pop	{r7, pc}
 8003f50:	2400000c 	.word	0x2400000c
 8003f54:	24000000 	.word	0x24000000
 8003f58:	24000008 	.word	0x24000008

08003f5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003f60:	4b06      	ldr	r3, [pc, #24]	@ (8003f7c <HAL_IncTick+0x20>)
 8003f62:	781b      	ldrb	r3, [r3, #0]
 8003f64:	461a      	mov	r2, r3
 8003f66:	4b06      	ldr	r3, [pc, #24]	@ (8003f80 <HAL_IncTick+0x24>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4413      	add	r3, r2
 8003f6c:	4a04      	ldr	r2, [pc, #16]	@ (8003f80 <HAL_IncTick+0x24>)
 8003f6e:	6013      	str	r3, [r2, #0]
}
 8003f70:	bf00      	nop
 8003f72:	46bd      	mov	sp, r7
 8003f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f78:	4770      	bx	lr
 8003f7a:	bf00      	nop
 8003f7c:	2400000c 	.word	0x2400000c
 8003f80:	24004f24 	.word	0x24004f24

08003f84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003f84:	b480      	push	{r7}
 8003f86:	af00      	add	r7, sp, #0
  return uwTick;
 8003f88:	4b03      	ldr	r3, [pc, #12]	@ (8003f98 <HAL_GetTick+0x14>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
}
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f94:	4770      	bx	lr
 8003f96:	bf00      	nop
 8003f98:	24004f24 	.word	0x24004f24

08003f9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b084      	sub	sp, #16
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003fa4:	f7ff ffee 	bl	8003f84 <HAL_GetTick>
 8003fa8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fb4:	d005      	beq.n	8003fc2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003fb6:	4b0a      	ldr	r3, [pc, #40]	@ (8003fe0 <HAL_Delay+0x44>)
 8003fb8:	781b      	ldrb	r3, [r3, #0]
 8003fba:	461a      	mov	r2, r3
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	4413      	add	r3, r2
 8003fc0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003fc2:	bf00      	nop
 8003fc4:	f7ff ffde 	bl	8003f84 <HAL_GetTick>
 8003fc8:	4602      	mov	r2, r0
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	1ad3      	subs	r3, r2, r3
 8003fce:	68fa      	ldr	r2, [r7, #12]
 8003fd0:	429a      	cmp	r2, r3
 8003fd2:	d8f7      	bhi.n	8003fc4 <HAL_Delay+0x28>
  {
  }
}
 8003fd4:	bf00      	nop
 8003fd6:	bf00      	nop
 8003fd8:	3710      	adds	r7, #16
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bd80      	pop	{r7, pc}
 8003fde:	bf00      	nop
 8003fe0:	2400000c 	.word	0x2400000c

08003fe4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b083      	sub	sp, #12
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
 8003fec:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	689b      	ldr	r3, [r3, #8]
 8003ff2:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	431a      	orrs	r2, r3
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	609a      	str	r2, [r3, #8]
}
 8003ffe:	bf00      	nop
 8004000:	370c      	adds	r7, #12
 8004002:	46bd      	mov	sp, r7
 8004004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004008:	4770      	bx	lr

0800400a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800400a:	b480      	push	{r7}
 800400c:	b083      	sub	sp, #12
 800400e:	af00      	add	r7, sp, #0
 8004010:	6078      	str	r0, [r7, #4]
 8004012:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	689b      	ldr	r3, [r3, #8]
 8004018:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	431a      	orrs	r2, r3
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	609a      	str	r2, [r3, #8]
}
 8004024:	bf00      	nop
 8004026:	370c      	adds	r7, #12
 8004028:	46bd      	mov	sp, r7
 800402a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402e:	4770      	bx	lr

08004030 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004030:	b480      	push	{r7}
 8004032:	b083      	sub	sp, #12
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	689b      	ldr	r3, [r3, #8]
 800403c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8004040:	4618      	mov	r0, r3
 8004042:	370c      	adds	r7, #12
 8004044:	46bd      	mov	sp, r7
 8004046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404a:	4770      	bx	lr

0800404c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800404c:	b480      	push	{r7}
 800404e:	b087      	sub	sp, #28
 8004050:	af00      	add	r7, sp, #0
 8004052:	60f8      	str	r0, [r7, #12]
 8004054:	60b9      	str	r1, [r7, #8]
 8004056:	607a      	str	r2, [r7, #4]
 8004058:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	3360      	adds	r3, #96	@ 0x60
 800405e:	461a      	mov	r2, r3
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	009b      	lsls	r3, r3, #2
 8004064:	4413      	add	r3, r2
 8004066:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	4a10      	ldr	r2, [pc, #64]	@ (80040ac <LL_ADC_SetOffset+0x60>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d10b      	bne.n	8004088 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	4313      	orrs	r3, r2
 800407e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004082:	697b      	ldr	r3, [r7, #20]
 8004084:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8004086:	e00b      	b.n	80040a0 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8004088:	697b      	ldr	r3, [r7, #20]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	430b      	orrs	r3, r1
 800409a:	431a      	orrs	r2, r3
 800409c:	697b      	ldr	r3, [r7, #20]
 800409e:	601a      	str	r2, [r3, #0]
}
 80040a0:	bf00      	nop
 80040a2:	371c      	adds	r7, #28
 80040a4:	46bd      	mov	sp, r7
 80040a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040aa:	4770      	bx	lr
 80040ac:	58026000 	.word	0x58026000

080040b0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80040b0:	b480      	push	{r7}
 80040b2:	b085      	sub	sp, #20
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
 80040b8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	3360      	adds	r3, #96	@ 0x60
 80040be:	461a      	mov	r2, r3
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	009b      	lsls	r3, r3, #2
 80040c4:	4413      	add	r3, r2
 80040c6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80040d0:	4618      	mov	r0, r3
 80040d2:	3714      	adds	r7, #20
 80040d4:	46bd      	mov	sp, r7
 80040d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040da:	4770      	bx	lr

080040dc <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80040dc:	b480      	push	{r7}
 80040de:	b085      	sub	sp, #20
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	60f8      	str	r0, [r7, #12]
 80040e4:	60b9      	str	r1, [r7, #8]
 80040e6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	691b      	ldr	r3, [r3, #16]
 80040ec:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	f003 031f 	and.w	r3, r3, #31
 80040f6:	6879      	ldr	r1, [r7, #4]
 80040f8:	fa01 f303 	lsl.w	r3, r1, r3
 80040fc:	431a      	orrs	r2, r3
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	611a      	str	r2, [r3, #16]
}
 8004102:	bf00      	nop
 8004104:	3714      	adds	r7, #20
 8004106:	46bd      	mov	sp, r7
 8004108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410c:	4770      	bx	lr
	...

08004110 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8004110:	b480      	push	{r7}
 8004112:	b087      	sub	sp, #28
 8004114:	af00      	add	r7, sp, #0
 8004116:	60f8      	str	r0, [r7, #12]
 8004118:	60b9      	str	r1, [r7, #8]
 800411a:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	4a0c      	ldr	r2, [pc, #48]	@ (8004150 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d00e      	beq.n	8004142 <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	3360      	adds	r3, #96	@ 0x60
 8004128:	461a      	mov	r2, r3
 800412a:	68bb      	ldr	r3, [r7, #8]
 800412c:	009b      	lsls	r3, r3, #2
 800412e:	4413      	add	r3, r2
 8004130:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8004132:	697b      	ldr	r3, [r7, #20]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	431a      	orrs	r2, r3
 800413e:	697b      	ldr	r3, [r7, #20]
 8004140:	601a      	str	r2, [r3, #0]
  }
}
 8004142:	bf00      	nop
 8004144:	371c      	adds	r7, #28
 8004146:	46bd      	mov	sp, r7
 8004148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414c:	4770      	bx	lr
 800414e:	bf00      	nop
 8004150:	58026000 	.word	0x58026000

08004154 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8004154:	b480      	push	{r7}
 8004156:	b087      	sub	sp, #28
 8004158:	af00      	add	r7, sp, #0
 800415a:	60f8      	str	r0, [r7, #12]
 800415c:	60b9      	str	r1, [r7, #8]
 800415e:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	4a0c      	ldr	r2, [pc, #48]	@ (8004194 <LL_ADC_SetOffsetSaturation+0x40>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d10e      	bne.n	8004186 <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	3360      	adds	r3, #96	@ 0x60
 800416c:	461a      	mov	r2, r3
 800416e:	68bb      	ldr	r3, [r7, #8]
 8004170:	009b      	lsls	r3, r3, #2
 8004172:	4413      	add	r3, r2
 8004174:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8004176:	697b      	ldr	r3, [r7, #20]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	431a      	orrs	r2, r3
 8004182:	697b      	ldr	r3, [r7, #20]
 8004184:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 8004186:	bf00      	nop
 8004188:	371c      	adds	r7, #28
 800418a:	46bd      	mov	sp, r7
 800418c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004190:	4770      	bx	lr
 8004192:	bf00      	nop
 8004194:	58026000 	.word	0x58026000

08004198 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8004198:	b480      	push	{r7}
 800419a:	b087      	sub	sp, #28
 800419c:	af00      	add	r7, sp, #0
 800419e:	60f8      	str	r0, [r7, #12]
 80041a0:	60b9      	str	r1, [r7, #8]
 80041a2:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	4a0c      	ldr	r2, [pc, #48]	@ (80041d8 <LL_ADC_SetOffsetSign+0x40>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d10e      	bne.n	80041ca <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	3360      	adds	r3, #96	@ 0x60
 80041b0:	461a      	mov	r2, r3
 80041b2:	68bb      	ldr	r3, [r7, #8]
 80041b4:	009b      	lsls	r3, r3, #2
 80041b6:	4413      	add	r3, r2
 80041b8:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 80041ba:	697b      	ldr	r3, [r7, #20]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	431a      	orrs	r2, r3
 80041c6:	697b      	ldr	r3, [r7, #20]
 80041c8:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 80041ca:	bf00      	nop
 80041cc:	371c      	adds	r7, #28
 80041ce:	46bd      	mov	sp, r7
 80041d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d4:	4770      	bx	lr
 80041d6:	bf00      	nop
 80041d8:	58026000 	.word	0x58026000

080041dc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80041dc:	b480      	push	{r7}
 80041de:	b087      	sub	sp, #28
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	60f8      	str	r0, [r7, #12]
 80041e4:	60b9      	str	r1, [r7, #8]
 80041e6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	3360      	adds	r3, #96	@ 0x60
 80041ec:	461a      	mov	r2, r3
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	009b      	lsls	r3, r3, #2
 80041f2:	4413      	add	r3, r2
 80041f4:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	4a0c      	ldr	r2, [pc, #48]	@ (800422c <LL_ADC_SetOffsetState+0x50>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d108      	bne.n	8004210 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 80041fe:	697b      	ldr	r3, [r7, #20]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	431a      	orrs	r2, r3
 800420a:	697b      	ldr	r3, [r7, #20]
 800420c:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 800420e:	e007      	b.n	8004220 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	431a      	orrs	r2, r3
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	601a      	str	r2, [r3, #0]
}
 8004220:	bf00      	nop
 8004222:	371c      	adds	r7, #28
 8004224:	46bd      	mov	sp, r7
 8004226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422a:	4770      	bx	lr
 800422c:	58026000 	.word	0x58026000

08004230 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004230:	b480      	push	{r7}
 8004232:	b087      	sub	sp, #28
 8004234:	af00      	add	r7, sp, #0
 8004236:	60f8      	str	r0, [r7, #12]
 8004238:	60b9      	str	r1, [r7, #8]
 800423a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	3330      	adds	r3, #48	@ 0x30
 8004240:	461a      	mov	r2, r3
 8004242:	68bb      	ldr	r3, [r7, #8]
 8004244:	0a1b      	lsrs	r3, r3, #8
 8004246:	009b      	lsls	r3, r3, #2
 8004248:	f003 030c 	and.w	r3, r3, #12
 800424c:	4413      	add	r3, r2
 800424e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	681a      	ldr	r2, [r3, #0]
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	f003 031f 	and.w	r3, r3, #31
 800425a:	211f      	movs	r1, #31
 800425c:	fa01 f303 	lsl.w	r3, r1, r3
 8004260:	43db      	mvns	r3, r3
 8004262:	401a      	ands	r2, r3
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	0e9b      	lsrs	r3, r3, #26
 8004268:	f003 011f 	and.w	r1, r3, #31
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	f003 031f 	and.w	r3, r3, #31
 8004272:	fa01 f303 	lsl.w	r3, r1, r3
 8004276:	431a      	orrs	r2, r3
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800427c:	bf00      	nop
 800427e:	371c      	adds	r7, #28
 8004280:	46bd      	mov	sp, r7
 8004282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004286:	4770      	bx	lr

08004288 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8004288:	b480      	push	{r7}
 800428a:	b087      	sub	sp, #28
 800428c:	af00      	add	r7, sp, #0
 800428e:	60f8      	str	r0, [r7, #12]
 8004290:	60b9      	str	r1, [r7, #8]
 8004292:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	3314      	adds	r3, #20
 8004298:	461a      	mov	r2, r3
 800429a:	68bb      	ldr	r3, [r7, #8]
 800429c:	0e5b      	lsrs	r3, r3, #25
 800429e:	009b      	lsls	r3, r3, #2
 80042a0:	f003 0304 	and.w	r3, r3, #4
 80042a4:	4413      	add	r3, r2
 80042a6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80042a8:	697b      	ldr	r3, [r7, #20]
 80042aa:	681a      	ldr	r2, [r3, #0]
 80042ac:	68bb      	ldr	r3, [r7, #8]
 80042ae:	0d1b      	lsrs	r3, r3, #20
 80042b0:	f003 031f 	and.w	r3, r3, #31
 80042b4:	2107      	movs	r1, #7
 80042b6:	fa01 f303 	lsl.w	r3, r1, r3
 80042ba:	43db      	mvns	r3, r3
 80042bc:	401a      	ands	r2, r3
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	0d1b      	lsrs	r3, r3, #20
 80042c2:	f003 031f 	and.w	r3, r3, #31
 80042c6:	6879      	ldr	r1, [r7, #4]
 80042c8:	fa01 f303 	lsl.w	r3, r1, r3
 80042cc:	431a      	orrs	r2, r3
 80042ce:	697b      	ldr	r3, [r7, #20]
 80042d0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80042d2:	bf00      	nop
 80042d4:	371c      	adds	r7, #28
 80042d6:	46bd      	mov	sp, r7
 80042d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042dc:	4770      	bx	lr
	...

080042e0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80042e0:	b480      	push	{r7}
 80042e2:	b085      	sub	sp, #20
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	60f8      	str	r0, [r7, #12]
 80042e8:	60b9      	str	r1, [r7, #8]
 80042ea:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	4a1a      	ldr	r2, [pc, #104]	@ (8004358 <LL_ADC_SetChannelSingleDiff+0x78>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d115      	bne.n	8004320 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80042fa:	68bb      	ldr	r3, [r7, #8]
 80042fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004300:	43db      	mvns	r3, r3
 8004302:	401a      	ands	r2, r3
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	f003 0318 	and.w	r3, r3, #24
 800430a:	4914      	ldr	r1, [pc, #80]	@ (800435c <LL_ADC_SetChannelSingleDiff+0x7c>)
 800430c:	40d9      	lsrs	r1, r3
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	400b      	ands	r3, r1
 8004312:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004316:	431a      	orrs	r2, r3
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 800431e:	e014      	b.n	800434a <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800432c:	43db      	mvns	r3, r3
 800432e:	401a      	ands	r2, r3
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	f003 0318 	and.w	r3, r3, #24
 8004336:	4909      	ldr	r1, [pc, #36]	@ (800435c <LL_ADC_SetChannelSingleDiff+0x7c>)
 8004338:	40d9      	lsrs	r1, r3
 800433a:	68bb      	ldr	r3, [r7, #8]
 800433c:	400b      	ands	r3, r1
 800433e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004342:	431a      	orrs	r2, r3
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
}
 800434a:	bf00      	nop
 800434c:	3714      	adds	r7, #20
 800434e:	46bd      	mov	sp, r7
 8004350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004354:	4770      	bx	lr
 8004356:	bf00      	nop
 8004358:	58026000 	.word	0x58026000
 800435c:	000fffff 	.word	0x000fffff

08004360 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004360:	b480      	push	{r7}
 8004362:	b083      	sub	sp, #12
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	689a      	ldr	r2, [r3, #8]
 800436c:	4b04      	ldr	r3, [pc, #16]	@ (8004380 <LL_ADC_DisableDeepPowerDown+0x20>)
 800436e:	4013      	ands	r3, r2
 8004370:	687a      	ldr	r2, [r7, #4]
 8004372:	6093      	str	r3, [r2, #8]
}
 8004374:	bf00      	nop
 8004376:	370c      	adds	r7, #12
 8004378:	46bd      	mov	sp, r7
 800437a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437e:	4770      	bx	lr
 8004380:	5fffffc0 	.word	0x5fffffc0

08004384 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8004384:	b480      	push	{r7}
 8004386:	b083      	sub	sp, #12
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	689b      	ldr	r3, [r3, #8]
 8004390:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004394:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004398:	d101      	bne.n	800439e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800439a:	2301      	movs	r3, #1
 800439c:	e000      	b.n	80043a0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800439e:	2300      	movs	r3, #0
}
 80043a0:	4618      	mov	r0, r3
 80043a2:	370c      	adds	r7, #12
 80043a4:	46bd      	mov	sp, r7
 80043a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043aa:	4770      	bx	lr

080043ac <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80043ac:	b480      	push	{r7}
 80043ae:	b083      	sub	sp, #12
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	689a      	ldr	r2, [r3, #8]
 80043b8:	4b05      	ldr	r3, [pc, #20]	@ (80043d0 <LL_ADC_EnableInternalRegulator+0x24>)
 80043ba:	4013      	ands	r3, r2
 80043bc:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80043c4:	bf00      	nop
 80043c6:	370c      	adds	r7, #12
 80043c8:	46bd      	mov	sp, r7
 80043ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ce:	4770      	bx	lr
 80043d0:	6fffffc0 	.word	0x6fffffc0

080043d4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80043d4:	b480      	push	{r7}
 80043d6:	b083      	sub	sp, #12
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	689b      	ldr	r3, [r3, #8]
 80043e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80043e4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80043e8:	d101      	bne.n	80043ee <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80043ea:	2301      	movs	r3, #1
 80043ec:	e000      	b.n	80043f0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80043ee:	2300      	movs	r3, #0
}
 80043f0:	4618      	mov	r0, r3
 80043f2:	370c      	adds	r7, #12
 80043f4:	46bd      	mov	sp, r7
 80043f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fa:	4770      	bx	lr

080043fc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80043fc:	b480      	push	{r7}
 80043fe:	b083      	sub	sp, #12
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	689b      	ldr	r3, [r3, #8]
 8004408:	f003 0301 	and.w	r3, r3, #1
 800440c:	2b01      	cmp	r3, #1
 800440e:	d101      	bne.n	8004414 <LL_ADC_IsEnabled+0x18>
 8004410:	2301      	movs	r3, #1
 8004412:	e000      	b.n	8004416 <LL_ADC_IsEnabled+0x1a>
 8004414:	2300      	movs	r3, #0
}
 8004416:	4618      	mov	r0, r3
 8004418:	370c      	adds	r7, #12
 800441a:	46bd      	mov	sp, r7
 800441c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004420:	4770      	bx	lr

08004422 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004422:	b480      	push	{r7}
 8004424:	b083      	sub	sp, #12
 8004426:	af00      	add	r7, sp, #0
 8004428:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	689b      	ldr	r3, [r3, #8]
 800442e:	f003 0304 	and.w	r3, r3, #4
 8004432:	2b04      	cmp	r3, #4
 8004434:	d101      	bne.n	800443a <LL_ADC_REG_IsConversionOngoing+0x18>
 8004436:	2301      	movs	r3, #1
 8004438:	e000      	b.n	800443c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800443a:	2300      	movs	r3, #0
}
 800443c:	4618      	mov	r0, r3
 800443e:	370c      	adds	r7, #12
 8004440:	46bd      	mov	sp, r7
 8004442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004446:	4770      	bx	lr

08004448 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004448:	b480      	push	{r7}
 800444a:	b083      	sub	sp, #12
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	689b      	ldr	r3, [r3, #8]
 8004454:	f003 0308 	and.w	r3, r3, #8
 8004458:	2b08      	cmp	r3, #8
 800445a:	d101      	bne.n	8004460 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800445c:	2301      	movs	r3, #1
 800445e:	e000      	b.n	8004462 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004460:	2300      	movs	r3, #0
}
 8004462:	4618      	mov	r0, r3
 8004464:	370c      	adds	r7, #12
 8004466:	46bd      	mov	sp, r7
 8004468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446c:	4770      	bx	lr
	...

08004470 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004470:	b590      	push	{r4, r7, lr}
 8004472:	b089      	sub	sp, #36	@ 0x24
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004478:	2300      	movs	r3, #0
 800447a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800447c:	2300      	movs	r3, #0
 800447e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d101      	bne.n	800448a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8004486:	2301      	movs	r3, #1
 8004488:	e1ee      	b.n	8004868 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	691b      	ldr	r3, [r3, #16]
 800448e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004494:	2b00      	cmp	r3, #0
 8004496:	d109      	bne.n	80044ac <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004498:	6878      	ldr	r0, [r7, #4]
 800449a:	f7fd fa1d 	bl	80018d8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2200      	movs	r2, #0
 80044a2:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2200      	movs	r2, #0
 80044a8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4618      	mov	r0, r3
 80044b2:	f7ff ff67 	bl	8004384 <LL_ADC_IsDeepPowerDownEnabled>
 80044b6:	4603      	mov	r3, r0
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d004      	beq.n	80044c6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4618      	mov	r0, r3
 80044c2:	f7ff ff4d 	bl	8004360 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4618      	mov	r0, r3
 80044cc:	f7ff ff82 	bl	80043d4 <LL_ADC_IsInternalRegulatorEnabled>
 80044d0:	4603      	mov	r3, r0
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d114      	bne.n	8004500 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4618      	mov	r0, r3
 80044dc:	f7ff ff66 	bl	80043ac <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80044e0:	4b8e      	ldr	r3, [pc, #568]	@ (800471c <HAL_ADC_Init+0x2ac>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	099b      	lsrs	r3, r3, #6
 80044e6:	4a8e      	ldr	r2, [pc, #568]	@ (8004720 <HAL_ADC_Init+0x2b0>)
 80044e8:	fba2 2303 	umull	r2, r3, r2, r3
 80044ec:	099b      	lsrs	r3, r3, #6
 80044ee:	3301      	adds	r3, #1
 80044f0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80044f2:	e002      	b.n	80044fa <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	3b01      	subs	r3, #1
 80044f8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80044fa:	68bb      	ldr	r3, [r7, #8]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d1f9      	bne.n	80044f4 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4618      	mov	r0, r3
 8004506:	f7ff ff65 	bl	80043d4 <LL_ADC_IsInternalRegulatorEnabled>
 800450a:	4603      	mov	r3, r0
 800450c:	2b00      	cmp	r3, #0
 800450e:	d10d      	bne.n	800452c <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004514:	f043 0210 	orr.w	r2, r3, #16
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004520:	f043 0201 	orr.w	r2, r3, #1
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	665a      	str	r2, [r3, #100]	@ 0x64

    tmp_hal_status = HAL_ERROR;
 8004528:	2301      	movs	r3, #1
 800452a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4618      	mov	r0, r3
 8004532:	f7ff ff76 	bl	8004422 <LL_ADC_REG_IsConversionOngoing>
 8004536:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800453c:	f003 0310 	and.w	r3, r3, #16
 8004540:	2b00      	cmp	r3, #0
 8004542:	f040 8188 	bne.w	8004856 <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8004546:	697b      	ldr	r3, [r7, #20]
 8004548:	2b00      	cmp	r3, #0
 800454a:	f040 8184 	bne.w	8004856 <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004552:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8004556:	f043 0202 	orr.w	r2, r3, #2
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4618      	mov	r0, r3
 8004564:	f7ff ff4a 	bl	80043fc <LL_ADC_IsEnabled>
 8004568:	4603      	mov	r3, r0
 800456a:	2b00      	cmp	r3, #0
 800456c:	d136      	bne.n	80045dc <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	4a6c      	ldr	r2, [pc, #432]	@ (8004724 <HAL_ADC_Init+0x2b4>)
 8004574:	4293      	cmp	r3, r2
 8004576:	d004      	beq.n	8004582 <HAL_ADC_Init+0x112>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4a6a      	ldr	r2, [pc, #424]	@ (8004728 <HAL_ADC_Init+0x2b8>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d10e      	bne.n	80045a0 <HAL_ADC_Init+0x130>
 8004582:	4868      	ldr	r0, [pc, #416]	@ (8004724 <HAL_ADC_Init+0x2b4>)
 8004584:	f7ff ff3a 	bl	80043fc <LL_ADC_IsEnabled>
 8004588:	4604      	mov	r4, r0
 800458a:	4867      	ldr	r0, [pc, #412]	@ (8004728 <HAL_ADC_Init+0x2b8>)
 800458c:	f7ff ff36 	bl	80043fc <LL_ADC_IsEnabled>
 8004590:	4603      	mov	r3, r0
 8004592:	4323      	orrs	r3, r4
 8004594:	2b00      	cmp	r3, #0
 8004596:	bf0c      	ite	eq
 8004598:	2301      	moveq	r3, #1
 800459a:	2300      	movne	r3, #0
 800459c:	b2db      	uxtb	r3, r3
 800459e:	e008      	b.n	80045b2 <HAL_ADC_Init+0x142>
 80045a0:	4862      	ldr	r0, [pc, #392]	@ (800472c <HAL_ADC_Init+0x2bc>)
 80045a2:	f7ff ff2b 	bl	80043fc <LL_ADC_IsEnabled>
 80045a6:	4603      	mov	r3, r0
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	bf0c      	ite	eq
 80045ac:	2301      	moveq	r3, #1
 80045ae:	2300      	movne	r3, #0
 80045b0:	b2db      	uxtb	r3, r3
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d012      	beq.n	80045dc <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4a5a      	ldr	r2, [pc, #360]	@ (8004724 <HAL_ADC_Init+0x2b4>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d004      	beq.n	80045ca <HAL_ADC_Init+0x15a>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4a58      	ldr	r2, [pc, #352]	@ (8004728 <HAL_ADC_Init+0x2b8>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d101      	bne.n	80045ce <HAL_ADC_Init+0x15e>
 80045ca:	4a59      	ldr	r2, [pc, #356]	@ (8004730 <HAL_ADC_Init+0x2c0>)
 80045cc:	e000      	b.n	80045d0 <HAL_ADC_Init+0x160>
 80045ce:	4a59      	ldr	r2, [pc, #356]	@ (8004734 <HAL_ADC_Init+0x2c4>)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	4619      	mov	r1, r3
 80045d6:	4610      	mov	r0, r2
 80045d8:	f7ff fd04 	bl	8003fe4 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a52      	ldr	r2, [pc, #328]	@ (800472c <HAL_ADC_Init+0x2bc>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d129      	bne.n	800463a <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	7e5b      	ldrb	r3, [r3, #25]
 80045ea:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80045f0:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 80045f6:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	689b      	ldr	r3, [r3, #8]
 80045fc:	2b08      	cmp	r3, #8
 80045fe:	d013      	beq.n	8004628 <HAL_ADC_Init+0x1b8>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	689b      	ldr	r3, [r3, #8]
 8004604:	2b0c      	cmp	r3, #12
 8004606:	d00d      	beq.n	8004624 <HAL_ADC_Init+0x1b4>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	689b      	ldr	r3, [r3, #8]
 800460c:	2b1c      	cmp	r3, #28
 800460e:	d007      	beq.n	8004620 <HAL_ADC_Init+0x1b0>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	689b      	ldr	r3, [r3, #8]
 8004614:	2b18      	cmp	r3, #24
 8004616:	d101      	bne.n	800461c <HAL_ADC_Init+0x1ac>
 8004618:	2318      	movs	r3, #24
 800461a:	e006      	b.n	800462a <HAL_ADC_Init+0x1ba>
 800461c:	2300      	movs	r3, #0
 800461e:	e004      	b.n	800462a <HAL_ADC_Init+0x1ba>
 8004620:	2310      	movs	r3, #16
 8004622:	e002      	b.n	800462a <HAL_ADC_Init+0x1ba>
 8004624:	2308      	movs	r3, #8
 8004626:	e000      	b.n	800462a <HAL_ADC_Init+0x1ba>
 8004628:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 800462a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004632:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8004634:	4313      	orrs	r3, r2
 8004636:	61bb      	str	r3, [r7, #24]
 8004638:	e00e      	b.n	8004658 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	7e5b      	ldrb	r3, [r3, #25]
 800463e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004644:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800464a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004652:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004654:	4313      	orrs	r3, r2
 8004656:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800465e:	2b01      	cmp	r3, #1
 8004660:	d106      	bne.n	8004670 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004666:	3b01      	subs	r3, #1
 8004668:	045b      	lsls	r3, r3, #17
 800466a:	69ba      	ldr	r2, [r7, #24]
 800466c:	4313      	orrs	r3, r2
 800466e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004674:	2b00      	cmp	r3, #0
 8004676:	d009      	beq.n	800468c <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800467c:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004684:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004686:	69ba      	ldr	r2, [r7, #24]
 8004688:	4313      	orrs	r3, r2
 800468a:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a26      	ldr	r2, [pc, #152]	@ (800472c <HAL_ADC_Init+0x2bc>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d115      	bne.n	80046c2 <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	68da      	ldr	r2, [r3, #12]
 800469c:	4b26      	ldr	r3, [pc, #152]	@ (8004738 <HAL_ADC_Init+0x2c8>)
 800469e:	4013      	ands	r3, r2
 80046a0:	687a      	ldr	r2, [r7, #4]
 80046a2:	6812      	ldr	r2, [r2, #0]
 80046a4:	69b9      	ldr	r1, [r7, #24]
 80046a6:	430b      	orrs	r3, r1
 80046a8:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	691b      	ldr	r3, [r3, #16]
 80046b0:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	430a      	orrs	r2, r1
 80046be:	611a      	str	r2, [r3, #16]
 80046c0:	e009      	b.n	80046d6 <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	68da      	ldr	r2, [r3, #12]
 80046c8:	4b1c      	ldr	r3, [pc, #112]	@ (800473c <HAL_ADC_Init+0x2cc>)
 80046ca:	4013      	ands	r3, r2
 80046cc:	687a      	ldr	r2, [r7, #4]
 80046ce:	6812      	ldr	r2, [r2, #0]
 80046d0:	69b9      	ldr	r1, [r7, #24]
 80046d2:	430b      	orrs	r3, r1
 80046d4:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4618      	mov	r0, r3
 80046dc:	f7ff fea1 	bl	8004422 <LL_ADC_REG_IsConversionOngoing>
 80046e0:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4618      	mov	r0, r3
 80046e8:	f7ff feae 	bl	8004448 <LL_ADC_INJ_IsConversionOngoing>
 80046ec:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80046ee:	693b      	ldr	r3, [r7, #16]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	f040 808e 	bne.w	8004812 <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	f040 808a 	bne.w	8004812 <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4a0a      	ldr	r2, [pc, #40]	@ (800472c <HAL_ADC_Init+0x2bc>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d11b      	bne.n	8004740 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	7e1b      	ldrb	r3, [r3, #24]
 800470c:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004714:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 8004716:	4313      	orrs	r3, r2
 8004718:	61bb      	str	r3, [r7, #24]
 800471a:	e018      	b.n	800474e <HAL_ADC_Init+0x2de>
 800471c:	24000000 	.word	0x24000000
 8004720:	053e2d63 	.word	0x053e2d63
 8004724:	40022000 	.word	0x40022000
 8004728:	40022100 	.word	0x40022100
 800472c:	58026000 	.word	0x58026000
 8004730:	40022300 	.word	0x40022300
 8004734:	58026300 	.word	0x58026300
 8004738:	fff04007 	.word	0xfff04007
 800473c:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	7e1b      	ldrb	r3, [r3, #24]
 8004744:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        tmpCFGR = (
 800474a:	4313      	orrs	r3, r2
 800474c:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	68da      	ldr	r2, [r3, #12]
 8004754:	4b46      	ldr	r3, [pc, #280]	@ (8004870 <HAL_ADC_Init+0x400>)
 8004756:	4013      	ands	r3, r2
 8004758:	687a      	ldr	r2, [r7, #4]
 800475a:	6812      	ldr	r2, [r2, #0]
 800475c:	69b9      	ldr	r1, [r7, #24]
 800475e:	430b      	orrs	r3, r1
 8004760:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004768:	2b01      	cmp	r3, #1
 800476a:	d137      	bne.n	80047dc <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004770:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4a3f      	ldr	r2, [pc, #252]	@ (8004874 <HAL_ADC_Init+0x404>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d116      	bne.n	80047aa <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	691a      	ldr	r2, [r3, #16]
 8004782:	4b3d      	ldr	r3, [pc, #244]	@ (8004878 <HAL_ADC_Init+0x408>)
 8004784:	4013      	ands	r3, r2
 8004786:	687a      	ldr	r2, [r7, #4]
 8004788:	6c91      	ldr	r1, [r2, #72]	@ 0x48
 800478a:	687a      	ldr	r2, [r7, #4]
 800478c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800478e:	4311      	orrs	r1, r2
 8004790:	687a      	ldr	r2, [r7, #4]
 8004792:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004794:	4311      	orrs	r1, r2
 8004796:	687a      	ldr	r2, [r7, #4]
 8004798:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800479a:	430a      	orrs	r2, r1
 800479c:	431a      	orrs	r2, r3
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f042 0201 	orr.w	r2, r2, #1
 80047a6:	611a      	str	r2, [r3, #16]
 80047a8:	e020      	b.n	80047ec <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	691a      	ldr	r2, [r3, #16]
 80047b0:	4b32      	ldr	r3, [pc, #200]	@ (800487c <HAL_ADC_Init+0x40c>)
 80047b2:	4013      	ands	r3, r2
 80047b4:	687a      	ldr	r2, [r7, #4]
 80047b6:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80047b8:	3a01      	subs	r2, #1
 80047ba:	0411      	lsls	r1, r2, #16
 80047bc:	687a      	ldr	r2, [r7, #4]
 80047be:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80047c0:	4311      	orrs	r1, r2
 80047c2:	687a      	ldr	r2, [r7, #4]
 80047c4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80047c6:	4311      	orrs	r1, r2
 80047c8:	687a      	ldr	r2, [r7, #4]
 80047ca:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80047cc:	430a      	orrs	r2, r1
 80047ce:	431a      	orrs	r2, r3
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f042 0201 	orr.w	r2, r2, #1
 80047d8:	611a      	str	r2, [r3, #16]
 80047da:	e007      	b.n	80047ec <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	691a      	ldr	r2, [r3, #16]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f022 0201 	bic.w	r2, r2, #1
 80047ea:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	691b      	ldr	r3, [r3, #16]
 80047f2:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	430a      	orrs	r2, r1
 8004800:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4a1b      	ldr	r2, [pc, #108]	@ (8004874 <HAL_ADC_Init+0x404>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d002      	beq.n	8004812 <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 800480c:	6878      	ldr	r0, [r7, #4]
 800480e:	f000 fd67 	bl	80052e0 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	691b      	ldr	r3, [r3, #16]
 8004816:	2b01      	cmp	r3, #1
 8004818:	d10c      	bne.n	8004834 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004820:	f023 010f 	bic.w	r1, r3, #15
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	69db      	ldr	r3, [r3, #28]
 8004828:	1e5a      	subs	r2, r3, #1
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	430a      	orrs	r2, r1
 8004830:	631a      	str	r2, [r3, #48]	@ 0x30
 8004832:	e007      	b.n	8004844 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f022 020f 	bic.w	r2, r2, #15
 8004842:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004848:	f023 0303 	bic.w	r3, r3, #3
 800484c:	f043 0201 	orr.w	r2, r3, #1
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	661a      	str	r2, [r3, #96]	@ 0x60
 8004854:	e007      	b.n	8004866 <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800485a:	f043 0210 	orr.w	r2, r3, #16
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8004862:	2301      	movs	r3, #1
 8004864:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004866:	7ffb      	ldrb	r3, [r7, #31]
}
 8004868:	4618      	mov	r0, r3
 800486a:	3724      	adds	r7, #36	@ 0x24
 800486c:	46bd      	mov	sp, r7
 800486e:	bd90      	pop	{r4, r7, pc}
 8004870:	ffffbffc 	.word	0xffffbffc
 8004874:	58026000 	.word	0x58026000
 8004878:	fc00f81f 	.word	0xfc00f81f
 800487c:	fc00f81e 	.word	0xfc00f81e

08004880 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004880:	b590      	push	{r4, r7, lr}
 8004882:	b0b9      	sub	sp, #228	@ 0xe4
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
 8004888:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800488a:	2300      	movs	r3, #0
 800488c:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8004890:	2300      	movs	r3, #0
 8004892:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800489a:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	68db      	ldr	r3, [r3, #12]
 80048a0:	4aab      	ldr	r2, [pc, #684]	@ (8004b50 <HAL_ADC_ConfigChannel+0x2d0>)
 80048a2:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80048aa:	2b01      	cmp	r3, #1
 80048ac:	d102      	bne.n	80048b4 <HAL_ADC_ConfigChannel+0x34>
 80048ae:	2302      	movs	r3, #2
 80048b0:	f000 bcfe 	b.w	80052b0 <HAL_ADC_ConfigChannel+0xa30>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2201      	movs	r2, #1
 80048b8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4618      	mov	r0, r3
 80048c2:	f7ff fdae 	bl	8004422 <LL_ADC_REG_IsConversionOngoing>
 80048c6:	4603      	mov	r3, r0
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	f040 84e2 	bne.w	8005292 <HAL_ADC_ConfigChannel+0xa12>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	db38      	blt.n	8004948 <HAL_ADC_ConfigChannel+0xc8>
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4a9e      	ldr	r2, [pc, #632]	@ (8004b54 <HAL_ADC_ConfigChannel+0x2d4>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d033      	beq.n	8004948 <HAL_ADC_ConfigChannel+0xc8>
      {
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d108      	bne.n	80048fe <HAL_ADC_ConfigChannel+0x7e>
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	0e9b      	lsrs	r3, r3, #26
 80048f2:	f003 031f 	and.w	r3, r3, #31
 80048f6:	2201      	movs	r2, #1
 80048f8:	fa02 f303 	lsl.w	r3, r2, r3
 80048fc:	e01d      	b.n	800493a <HAL_ADC_ConfigChannel+0xba>
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004906:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800490a:	fa93 f3a3 	rbit	r3, r3
 800490e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004912:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004916:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800491a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800491e:	2b00      	cmp	r3, #0
 8004920:	d101      	bne.n	8004926 <HAL_ADC_ConfigChannel+0xa6>
  {
    return 32U;
 8004922:	2320      	movs	r3, #32
 8004924:	e004      	b.n	8004930 <HAL_ADC_ConfigChannel+0xb0>
  }
  return __builtin_clz(value);
 8004926:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800492a:	fab3 f383 	clz	r3, r3
 800492e:	b2db      	uxtb	r3, r3
 8004930:	f003 031f 	and.w	r3, r3, #31
 8004934:	2201      	movs	r2, #1
 8004936:	fa02 f303 	lsl.w	r3, r2, r3
 800493a:	687a      	ldr	r2, [r7, #4]
 800493c:	6812      	ldr	r2, [r2, #0]
 800493e:	69d1      	ldr	r1, [r2, #28]
 8004940:	687a      	ldr	r2, [r7, #4]
 8004942:	6812      	ldr	r2, [r2, #0]
 8004944:	430b      	orrs	r3, r1
 8004946:	61d3      	str	r3, [r2, #28]
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6818      	ldr	r0, [r3, #0]
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	6859      	ldr	r1, [r3, #4]
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	461a      	mov	r2, r3
 8004956:	f7ff fc6b 	bl	8004230 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4618      	mov	r0, r3
 8004960:	f7ff fd5f 	bl	8004422 <LL_ADC_REG_IsConversionOngoing>
 8004964:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4618      	mov	r0, r3
 800496e:	f7ff fd6b 	bl	8004448 <LL_ADC_INJ_IsConversionOngoing>
 8004972:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004976:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800497a:	2b00      	cmp	r3, #0
 800497c:	f040 8270 	bne.w	8004e60 <HAL_ADC_ConfigChannel+0x5e0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004980:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8004984:	2b00      	cmp	r3, #0
 8004986:	f040 826b 	bne.w	8004e60 <HAL_ADC_ConfigChannel+0x5e0>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6818      	ldr	r0, [r3, #0]
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	6819      	ldr	r1, [r3, #0]
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	689b      	ldr	r3, [r3, #8]
 8004996:	461a      	mov	r2, r3
 8004998:	f7ff fc76 	bl	8004288 <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4a6c      	ldr	r2, [pc, #432]	@ (8004b54 <HAL_ADC_ConfigChannel+0x2d4>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d10d      	bne.n	80049c2 <HAL_ADC_ConfigChannel+0x142>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	695a      	ldr	r2, [r3, #20]
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	68db      	ldr	r3, [r3, #12]
 80049b0:	08db      	lsrs	r3, r3, #3
 80049b2:	f003 0303 	and.w	r3, r3, #3
 80049b6:	005b      	lsls	r3, r3, #1
 80049b8:	fa02 f303 	lsl.w	r3, r2, r3
 80049bc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80049c0:	e032      	b.n	8004a28 <HAL_ADC_ConfigChannel+0x1a8>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80049c2:	4b65      	ldr	r3, [pc, #404]	@ (8004b58 <HAL_ADC_ConfigChannel+0x2d8>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80049ca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80049ce:	d10b      	bne.n	80049e8 <HAL_ADC_ConfigChannel+0x168>
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	695a      	ldr	r2, [r3, #20]
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	68db      	ldr	r3, [r3, #12]
 80049da:	089b      	lsrs	r3, r3, #2
 80049dc:	f003 0307 	and.w	r3, r3, #7
 80049e0:	005b      	lsls	r3, r3, #1
 80049e2:	fa02 f303 	lsl.w	r3, r2, r3
 80049e6:	e01d      	b.n	8004a24 <HAL_ADC_ConfigChannel+0x1a4>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	68db      	ldr	r3, [r3, #12]
 80049ee:	f003 0310 	and.w	r3, r3, #16
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d10b      	bne.n	8004a0e <HAL_ADC_ConfigChannel+0x18e>
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	695a      	ldr	r2, [r3, #20]
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	68db      	ldr	r3, [r3, #12]
 8004a00:	089b      	lsrs	r3, r3, #2
 8004a02:	f003 0307 	and.w	r3, r3, #7
 8004a06:	005b      	lsls	r3, r3, #1
 8004a08:	fa02 f303 	lsl.w	r3, r2, r3
 8004a0c:	e00a      	b.n	8004a24 <HAL_ADC_ConfigChannel+0x1a4>
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	695a      	ldr	r2, [r3, #20]
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	68db      	ldr	r3, [r3, #12]
 8004a18:	089b      	lsrs	r3, r3, #2
 8004a1a:	f003 0304 	and.w	r3, r3, #4
 8004a1e:	005b      	lsls	r3, r3, #1
 8004a20:	fa02 f303 	lsl.w	r3, r2, r3
 8004a24:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	691b      	ldr	r3, [r3, #16]
 8004a2c:	2b04      	cmp	r3, #4
 8004a2e:	d048      	beq.n	8004ac2 <HAL_ADC_ConfigChannel+0x242>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6818      	ldr	r0, [r3, #0]
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	6919      	ldr	r1, [r3, #16]
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	681a      	ldr	r2, [r3, #0]
 8004a3c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004a40:	f7ff fb04 	bl	800404c <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4a42      	ldr	r2, [pc, #264]	@ (8004b54 <HAL_ADC_ConfigChannel+0x2d4>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d119      	bne.n	8004a82 <HAL_ADC_ConfigChannel+0x202>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6818      	ldr	r0, [r3, #0]
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	6919      	ldr	r1, [r3, #16]
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	69db      	ldr	r3, [r3, #28]
 8004a5a:	461a      	mov	r2, r3
 8004a5c:	f7ff fb9c 	bl	8004198 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6818      	ldr	r0, [r3, #0]
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	6919      	ldr	r1, [r3, #16]
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004a6e:	2b01      	cmp	r3, #1
 8004a70:	d102      	bne.n	8004a78 <HAL_ADC_ConfigChannel+0x1f8>
 8004a72:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004a76:	e000      	b.n	8004a7a <HAL_ADC_ConfigChannel+0x1fa>
 8004a78:	2300      	movs	r3, #0
 8004a7a:	461a      	mov	r2, r3
 8004a7c:	f7ff fb6a 	bl	8004154 <LL_ADC_SetOffsetSaturation>
 8004a80:	e1ee      	b.n	8004e60 <HAL_ADC_ConfigChannel+0x5e0>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6818      	ldr	r0, [r3, #0]
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	6919      	ldr	r1, [r3, #16]
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8004a90:	2b01      	cmp	r3, #1
 8004a92:	d102      	bne.n	8004a9a <HAL_ADC_ConfigChannel+0x21a>
 8004a94:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8004a98:	e000      	b.n	8004a9c <HAL_ADC_ConfigChannel+0x21c>
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	461a      	mov	r2, r3
 8004a9e:	f7ff fb37 	bl	8004110 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6818      	ldr	r0, [r3, #0]
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	6919      	ldr	r1, [r3, #16]
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	7e1b      	ldrb	r3, [r3, #24]
 8004aae:	2b01      	cmp	r3, #1
 8004ab0:	d102      	bne.n	8004ab8 <HAL_ADC_ConfigChannel+0x238>
 8004ab2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004ab6:	e000      	b.n	8004aba <HAL_ADC_ConfigChannel+0x23a>
 8004ab8:	2300      	movs	r3, #0
 8004aba:	461a      	mov	r2, r3
 8004abc:	f7ff fb0e 	bl	80040dc <LL_ADC_SetDataRightShift>
 8004ac0:	e1ce      	b.n	8004e60 <HAL_ADC_ConfigChannel+0x5e0>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4a23      	ldr	r2, [pc, #140]	@ (8004b54 <HAL_ADC_ConfigChannel+0x2d4>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	f040 8181 	bne.w	8004dd0 <HAL_ADC_ConfigChannel+0x550>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	2100      	movs	r1, #0
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	f7ff faeb 	bl	80040b0 <LL_ADC_GetOffsetChannel>
 8004ada:	4603      	mov	r3, r0
 8004adc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d10a      	bne.n	8004afa <HAL_ADC_ConfigChannel+0x27a>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	2100      	movs	r1, #0
 8004aea:	4618      	mov	r0, r3
 8004aec:	f7ff fae0 	bl	80040b0 <LL_ADC_GetOffsetChannel>
 8004af0:	4603      	mov	r3, r0
 8004af2:	0e9b      	lsrs	r3, r3, #26
 8004af4:	f003 021f 	and.w	r2, r3, #31
 8004af8:	e01e      	b.n	8004b38 <HAL_ADC_ConfigChannel+0x2b8>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	2100      	movs	r1, #0
 8004b00:	4618      	mov	r0, r3
 8004b02:	f7ff fad5 	bl	80040b0 <LL_ADC_GetOffsetChannel>
 8004b06:	4603      	mov	r3, r0
 8004b08:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b0c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004b10:	fa93 f3a3 	rbit	r3, r3
 8004b14:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  return result;
 8004b18:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004b1c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  if (value == 0U)
 8004b20:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d101      	bne.n	8004b2c <HAL_ADC_ConfigChannel+0x2ac>
    return 32U;
 8004b28:	2320      	movs	r3, #32
 8004b2a:	e004      	b.n	8004b36 <HAL_ADC_ConfigChannel+0x2b6>
  return __builtin_clz(value);
 8004b2c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004b30:	fab3 f383 	clz	r3, r3
 8004b34:	b2db      	uxtb	r3, r3
 8004b36:	461a      	mov	r2, r3
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d10b      	bne.n	8004b5c <HAL_ADC_ConfigChannel+0x2dc>
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	0e9b      	lsrs	r3, r3, #26
 8004b4a:	f003 031f 	and.w	r3, r3, #31
 8004b4e:	e01e      	b.n	8004b8e <HAL_ADC_ConfigChannel+0x30e>
 8004b50:	47ff0000 	.word	0x47ff0000
 8004b54:	58026000 	.word	0x58026000
 8004b58:	5c001000 	.word	0x5c001000
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b64:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004b68:	fa93 f3a3 	rbit	r3, r3
 8004b6c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8004b70:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004b74:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8004b78:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d101      	bne.n	8004b84 <HAL_ADC_ConfigChannel+0x304>
    return 32U;
 8004b80:	2320      	movs	r3, #32
 8004b82:	e004      	b.n	8004b8e <HAL_ADC_ConfigChannel+0x30e>
  return __builtin_clz(value);
 8004b84:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004b88:	fab3 f383 	clz	r3, r3
 8004b8c:	b2db      	uxtb	r3, r3
 8004b8e:	429a      	cmp	r2, r3
 8004b90:	d106      	bne.n	8004ba0 <HAL_ADC_ConfigChannel+0x320>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	2200      	movs	r2, #0
 8004b98:	2100      	movs	r1, #0
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	f7ff fb1e 	bl	80041dc <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	2101      	movs	r1, #1
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	f7ff fa82 	bl	80040b0 <LL_ADC_GetOffsetChannel>
 8004bac:	4603      	mov	r3, r0
 8004bae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d10a      	bne.n	8004bcc <HAL_ADC_ConfigChannel+0x34c>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	2101      	movs	r1, #1
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	f7ff fa77 	bl	80040b0 <LL_ADC_GetOffsetChannel>
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	0e9b      	lsrs	r3, r3, #26
 8004bc6:	f003 021f 	and.w	r2, r3, #31
 8004bca:	e01e      	b.n	8004c0a <HAL_ADC_ConfigChannel+0x38a>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	2101      	movs	r1, #1
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	f7ff fa6c 	bl	80040b0 <LL_ADC_GetOffsetChannel>
 8004bd8:	4603      	mov	r3, r0
 8004bda:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bde:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004be2:	fa93 f3a3 	rbit	r3, r3
 8004be6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8004bea:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004bee:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8004bf2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d101      	bne.n	8004bfe <HAL_ADC_ConfigChannel+0x37e>
    return 32U;
 8004bfa:	2320      	movs	r3, #32
 8004bfc:	e004      	b.n	8004c08 <HAL_ADC_ConfigChannel+0x388>
  return __builtin_clz(value);
 8004bfe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004c02:	fab3 f383 	clz	r3, r3
 8004c06:	b2db      	uxtb	r3, r3
 8004c08:	461a      	mov	r2, r3
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d105      	bne.n	8004c22 <HAL_ADC_ConfigChannel+0x3a2>
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	0e9b      	lsrs	r3, r3, #26
 8004c1c:	f003 031f 	and.w	r3, r3, #31
 8004c20:	e018      	b.n	8004c54 <HAL_ADC_ConfigChannel+0x3d4>
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c2a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004c2e:	fa93 f3a3 	rbit	r3, r3
 8004c32:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8004c36:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004c3a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8004c3e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d101      	bne.n	8004c4a <HAL_ADC_ConfigChannel+0x3ca>
    return 32U;
 8004c46:	2320      	movs	r3, #32
 8004c48:	e004      	b.n	8004c54 <HAL_ADC_ConfigChannel+0x3d4>
  return __builtin_clz(value);
 8004c4a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004c4e:	fab3 f383 	clz	r3, r3
 8004c52:	b2db      	uxtb	r3, r3
 8004c54:	429a      	cmp	r2, r3
 8004c56:	d106      	bne.n	8004c66 <HAL_ADC_ConfigChannel+0x3e6>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	2101      	movs	r1, #1
 8004c60:	4618      	mov	r0, r3
 8004c62:	f7ff fabb 	bl	80041dc <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	2102      	movs	r1, #2
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	f7ff fa1f 	bl	80040b0 <LL_ADC_GetOffsetChannel>
 8004c72:	4603      	mov	r3, r0
 8004c74:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d10a      	bne.n	8004c92 <HAL_ADC_ConfigChannel+0x412>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	2102      	movs	r1, #2
 8004c82:	4618      	mov	r0, r3
 8004c84:	f7ff fa14 	bl	80040b0 <LL_ADC_GetOffsetChannel>
 8004c88:	4603      	mov	r3, r0
 8004c8a:	0e9b      	lsrs	r3, r3, #26
 8004c8c:	f003 021f 	and.w	r2, r3, #31
 8004c90:	e01e      	b.n	8004cd0 <HAL_ADC_ConfigChannel+0x450>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	2102      	movs	r1, #2
 8004c98:	4618      	mov	r0, r3
 8004c9a:	f7ff fa09 	bl	80040b0 <LL_ADC_GetOffsetChannel>
 8004c9e:	4603      	mov	r3, r0
 8004ca0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ca4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004ca8:	fa93 f3a3 	rbit	r3, r3
 8004cac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8004cb0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004cb4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8004cb8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d101      	bne.n	8004cc4 <HAL_ADC_ConfigChannel+0x444>
    return 32U;
 8004cc0:	2320      	movs	r3, #32
 8004cc2:	e004      	b.n	8004cce <HAL_ADC_ConfigChannel+0x44e>
  return __builtin_clz(value);
 8004cc4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004cc8:	fab3 f383 	clz	r3, r3
 8004ccc:	b2db      	uxtb	r3, r3
 8004cce:	461a      	mov	r2, r3
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d105      	bne.n	8004ce8 <HAL_ADC_ConfigChannel+0x468>
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	0e9b      	lsrs	r3, r3, #26
 8004ce2:	f003 031f 	and.w	r3, r3, #31
 8004ce6:	e014      	b.n	8004d12 <HAL_ADC_ConfigChannel+0x492>
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cee:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004cf0:	fa93 f3a3 	rbit	r3, r3
 8004cf4:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8004cf6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004cf8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8004cfc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d101      	bne.n	8004d08 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8004d04:	2320      	movs	r3, #32
 8004d06:	e004      	b.n	8004d12 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8004d08:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004d0c:	fab3 f383 	clz	r3, r3
 8004d10:	b2db      	uxtb	r3, r3
 8004d12:	429a      	cmp	r2, r3
 8004d14:	d106      	bne.n	8004d24 <HAL_ADC_ConfigChannel+0x4a4>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	2102      	movs	r1, #2
 8004d1e:	4618      	mov	r0, r3
 8004d20:	f7ff fa5c 	bl	80041dc <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	2103      	movs	r1, #3
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	f7ff f9c0 	bl	80040b0 <LL_ADC_GetOffsetChannel>
 8004d30:	4603      	mov	r3, r0
 8004d32:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d10a      	bne.n	8004d50 <HAL_ADC_ConfigChannel+0x4d0>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	2103      	movs	r1, #3
 8004d40:	4618      	mov	r0, r3
 8004d42:	f7ff f9b5 	bl	80040b0 <LL_ADC_GetOffsetChannel>
 8004d46:	4603      	mov	r3, r0
 8004d48:	0e9b      	lsrs	r3, r3, #26
 8004d4a:	f003 021f 	and.w	r2, r3, #31
 8004d4e:	e017      	b.n	8004d80 <HAL_ADC_ConfigChannel+0x500>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	2103      	movs	r1, #3
 8004d56:	4618      	mov	r0, r3
 8004d58:	f7ff f9aa 	bl	80040b0 <LL_ADC_GetOffsetChannel>
 8004d5c:	4603      	mov	r3, r0
 8004d5e:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d60:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004d62:	fa93 f3a3 	rbit	r3, r3
 8004d66:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8004d68:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004d6a:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8004d6c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d101      	bne.n	8004d76 <HAL_ADC_ConfigChannel+0x4f6>
    return 32U;
 8004d72:	2320      	movs	r3, #32
 8004d74:	e003      	b.n	8004d7e <HAL_ADC_ConfigChannel+0x4fe>
  return __builtin_clz(value);
 8004d76:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004d78:	fab3 f383 	clz	r3, r3
 8004d7c:	b2db      	uxtb	r3, r3
 8004d7e:	461a      	mov	r2, r3
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d105      	bne.n	8004d98 <HAL_ADC_ConfigChannel+0x518>
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	0e9b      	lsrs	r3, r3, #26
 8004d92:	f003 031f 	and.w	r3, r3, #31
 8004d96:	e011      	b.n	8004dbc <HAL_ADC_ConfigChannel+0x53c>
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d9e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004da0:	fa93 f3a3 	rbit	r3, r3
 8004da4:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8004da6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004da8:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8004daa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d101      	bne.n	8004db4 <HAL_ADC_ConfigChannel+0x534>
    return 32U;
 8004db0:	2320      	movs	r3, #32
 8004db2:	e003      	b.n	8004dbc <HAL_ADC_ConfigChannel+0x53c>
  return __builtin_clz(value);
 8004db4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004db6:	fab3 f383 	clz	r3, r3
 8004dba:	b2db      	uxtb	r3, r3
 8004dbc:	429a      	cmp	r2, r3
 8004dbe:	d14f      	bne.n	8004e60 <HAL_ADC_ConfigChannel+0x5e0>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	2103      	movs	r1, #3
 8004dc8:	4618      	mov	r0, r3
 8004dca:	f7ff fa07 	bl	80041dc <LL_ADC_SetOffsetState>
 8004dce:	e047      	b.n	8004e60 <HAL_ADC_ConfigChannel+0x5e0>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004dd6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	069b      	lsls	r3, r3, #26
 8004de0:	429a      	cmp	r2, r3
 8004de2:	d107      	bne.n	8004df4 <HAL_ADC_ConfigChannel+0x574>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8004df2:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004dfa:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	069b      	lsls	r3, r3, #26
 8004e04:	429a      	cmp	r2, r3
 8004e06:	d107      	bne.n	8004e18 <HAL_ADC_ConfigChannel+0x598>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8004e16:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004e1e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	069b      	lsls	r3, r3, #26
 8004e28:	429a      	cmp	r2, r3
 8004e2a:	d107      	bne.n	8004e3c <HAL_ADC_ConfigChannel+0x5bc>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8004e3a:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004e42:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	069b      	lsls	r3, r3, #26
 8004e4c:	429a      	cmp	r2, r3
 8004e4e:	d107      	bne.n	8004e60 <HAL_ADC_ConfigChannel+0x5e0>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8004e5e:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4618      	mov	r0, r3
 8004e66:	f7ff fac9 	bl	80043fc <LL_ADC_IsEnabled>
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	f040 8219 	bne.w	80052a4 <HAL_ADC_ConfigChannel+0xa24>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6818      	ldr	r0, [r3, #0]
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	6819      	ldr	r1, [r3, #0]
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	68db      	ldr	r3, [r3, #12]
 8004e7e:	461a      	mov	r2, r3
 8004e80:	f7ff fa2e 	bl	80042e0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	68db      	ldr	r3, [r3, #12]
 8004e88:	4aa1      	ldr	r2, [pc, #644]	@ (8005110 <HAL_ADC_ConfigChannel+0x890>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	f040 812e 	bne.w	80050ec <HAL_ADC_ConfigChannel+0x86c>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d10b      	bne.n	8004eb8 <HAL_ADC_ConfigChannel+0x638>
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	0e9b      	lsrs	r3, r3, #26
 8004ea6:	3301      	adds	r3, #1
 8004ea8:	f003 031f 	and.w	r3, r3, #31
 8004eac:	2b09      	cmp	r3, #9
 8004eae:	bf94      	ite	ls
 8004eb0:	2301      	movls	r3, #1
 8004eb2:	2300      	movhi	r3, #0
 8004eb4:	b2db      	uxtb	r3, r3
 8004eb6:	e019      	b.n	8004eec <HAL_ADC_ConfigChannel+0x66c>
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ebe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004ec0:	fa93 f3a3 	rbit	r3, r3
 8004ec4:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8004ec6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ec8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8004eca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d101      	bne.n	8004ed4 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8004ed0:	2320      	movs	r3, #32
 8004ed2:	e003      	b.n	8004edc <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8004ed4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004ed6:	fab3 f383 	clz	r3, r3
 8004eda:	b2db      	uxtb	r3, r3
 8004edc:	3301      	adds	r3, #1
 8004ede:	f003 031f 	and.w	r3, r3, #31
 8004ee2:	2b09      	cmp	r3, #9
 8004ee4:	bf94      	ite	ls
 8004ee6:	2301      	movls	r3, #1
 8004ee8:	2300      	movhi	r3, #0
 8004eea:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d079      	beq.n	8004fe4 <HAL_ADC_ConfigChannel+0x764>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d107      	bne.n	8004f0c <HAL_ADC_ConfigChannel+0x68c>
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	0e9b      	lsrs	r3, r3, #26
 8004f02:	3301      	adds	r3, #1
 8004f04:	069b      	lsls	r3, r3, #26
 8004f06:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004f0a:	e015      	b.n	8004f38 <HAL_ADC_ConfigChannel+0x6b8>
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f12:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004f14:	fa93 f3a3 	rbit	r3, r3
 8004f18:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8004f1a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004f1c:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8004f1e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d101      	bne.n	8004f28 <HAL_ADC_ConfigChannel+0x6a8>
    return 32U;
 8004f24:	2320      	movs	r3, #32
 8004f26:	e003      	b.n	8004f30 <HAL_ADC_ConfigChannel+0x6b0>
  return __builtin_clz(value);
 8004f28:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004f2a:	fab3 f383 	clz	r3, r3
 8004f2e:	b2db      	uxtb	r3, r3
 8004f30:	3301      	adds	r3, #1
 8004f32:	069b      	lsls	r3, r3, #26
 8004f34:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d109      	bne.n	8004f58 <HAL_ADC_ConfigChannel+0x6d8>
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	0e9b      	lsrs	r3, r3, #26
 8004f4a:	3301      	adds	r3, #1
 8004f4c:	f003 031f 	and.w	r3, r3, #31
 8004f50:	2101      	movs	r1, #1
 8004f52:	fa01 f303 	lsl.w	r3, r1, r3
 8004f56:	e017      	b.n	8004f88 <HAL_ADC_ConfigChannel+0x708>
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f5e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004f60:	fa93 f3a3 	rbit	r3, r3
 8004f64:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8004f66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f68:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8004f6a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d101      	bne.n	8004f74 <HAL_ADC_ConfigChannel+0x6f4>
    return 32U;
 8004f70:	2320      	movs	r3, #32
 8004f72:	e003      	b.n	8004f7c <HAL_ADC_ConfigChannel+0x6fc>
  return __builtin_clz(value);
 8004f74:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004f76:	fab3 f383 	clz	r3, r3
 8004f7a:	b2db      	uxtb	r3, r3
 8004f7c:	3301      	adds	r3, #1
 8004f7e:	f003 031f 	and.w	r3, r3, #31
 8004f82:	2101      	movs	r1, #1
 8004f84:	fa01 f303 	lsl.w	r3, r1, r3
 8004f88:	ea42 0103 	orr.w	r1, r2, r3
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d10a      	bne.n	8004fae <HAL_ADC_ConfigChannel+0x72e>
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	0e9b      	lsrs	r3, r3, #26
 8004f9e:	3301      	adds	r3, #1
 8004fa0:	f003 021f 	and.w	r2, r3, #31
 8004fa4:	4613      	mov	r3, r2
 8004fa6:	005b      	lsls	r3, r3, #1
 8004fa8:	4413      	add	r3, r2
 8004faa:	051b      	lsls	r3, r3, #20
 8004fac:	e018      	b.n	8004fe0 <HAL_ADC_ConfigChannel+0x760>
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004fb6:	fa93 f3a3 	rbit	r3, r3
 8004fba:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8004fbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fbe:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8004fc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d101      	bne.n	8004fca <HAL_ADC_ConfigChannel+0x74a>
    return 32U;
 8004fc6:	2320      	movs	r3, #32
 8004fc8:	e003      	b.n	8004fd2 <HAL_ADC_ConfigChannel+0x752>
  return __builtin_clz(value);
 8004fca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fcc:	fab3 f383 	clz	r3, r3
 8004fd0:	b2db      	uxtb	r3, r3
 8004fd2:	3301      	adds	r3, #1
 8004fd4:	f003 021f 	and.w	r2, r3, #31
 8004fd8:	4613      	mov	r3, r2
 8004fda:	005b      	lsls	r3, r3, #1
 8004fdc:	4413      	add	r3, r2
 8004fde:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004fe0:	430b      	orrs	r3, r1
 8004fe2:	e07e      	b.n	80050e2 <HAL_ADC_ConfigChannel+0x862>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d107      	bne.n	8005000 <HAL_ADC_ConfigChannel+0x780>
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	0e9b      	lsrs	r3, r3, #26
 8004ff6:	3301      	adds	r3, #1
 8004ff8:	069b      	lsls	r3, r3, #26
 8004ffa:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004ffe:	e015      	b.n	800502c <HAL_ADC_ConfigChannel+0x7ac>
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005006:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005008:	fa93 f3a3 	rbit	r3, r3
 800500c:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 800500e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005010:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8005012:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005014:	2b00      	cmp	r3, #0
 8005016:	d101      	bne.n	800501c <HAL_ADC_ConfigChannel+0x79c>
    return 32U;
 8005018:	2320      	movs	r3, #32
 800501a:	e003      	b.n	8005024 <HAL_ADC_ConfigChannel+0x7a4>
  return __builtin_clz(value);
 800501c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800501e:	fab3 f383 	clz	r3, r3
 8005022:	b2db      	uxtb	r3, r3
 8005024:	3301      	adds	r3, #1
 8005026:	069b      	lsls	r3, r3, #26
 8005028:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005034:	2b00      	cmp	r3, #0
 8005036:	d109      	bne.n	800504c <HAL_ADC_ConfigChannel+0x7cc>
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	0e9b      	lsrs	r3, r3, #26
 800503e:	3301      	adds	r3, #1
 8005040:	f003 031f 	and.w	r3, r3, #31
 8005044:	2101      	movs	r1, #1
 8005046:	fa01 f303 	lsl.w	r3, r1, r3
 800504a:	e017      	b.n	800507c <HAL_ADC_ConfigChannel+0x7fc>
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005052:	69fb      	ldr	r3, [r7, #28]
 8005054:	fa93 f3a3 	rbit	r3, r3
 8005058:	61bb      	str	r3, [r7, #24]
  return result;
 800505a:	69bb      	ldr	r3, [r7, #24]
 800505c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800505e:	6a3b      	ldr	r3, [r7, #32]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d101      	bne.n	8005068 <HAL_ADC_ConfigChannel+0x7e8>
    return 32U;
 8005064:	2320      	movs	r3, #32
 8005066:	e003      	b.n	8005070 <HAL_ADC_ConfigChannel+0x7f0>
  return __builtin_clz(value);
 8005068:	6a3b      	ldr	r3, [r7, #32]
 800506a:	fab3 f383 	clz	r3, r3
 800506e:	b2db      	uxtb	r3, r3
 8005070:	3301      	adds	r3, #1
 8005072:	f003 031f 	and.w	r3, r3, #31
 8005076:	2101      	movs	r1, #1
 8005078:	fa01 f303 	lsl.w	r3, r1, r3
 800507c:	ea42 0103 	orr.w	r1, r2, r3
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005088:	2b00      	cmp	r3, #0
 800508a:	d10d      	bne.n	80050a8 <HAL_ADC_ConfigChannel+0x828>
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	0e9b      	lsrs	r3, r3, #26
 8005092:	3301      	adds	r3, #1
 8005094:	f003 021f 	and.w	r2, r3, #31
 8005098:	4613      	mov	r3, r2
 800509a:	005b      	lsls	r3, r3, #1
 800509c:	4413      	add	r3, r2
 800509e:	3b1e      	subs	r3, #30
 80050a0:	051b      	lsls	r3, r3, #20
 80050a2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80050a6:	e01b      	b.n	80050e0 <HAL_ADC_ConfigChannel+0x860>
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050ae:	693b      	ldr	r3, [r7, #16]
 80050b0:	fa93 f3a3 	rbit	r3, r3
 80050b4:	60fb      	str	r3, [r7, #12]
  return result;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80050ba:	697b      	ldr	r3, [r7, #20]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d101      	bne.n	80050c4 <HAL_ADC_ConfigChannel+0x844>
    return 32U;
 80050c0:	2320      	movs	r3, #32
 80050c2:	e003      	b.n	80050cc <HAL_ADC_ConfigChannel+0x84c>
  return __builtin_clz(value);
 80050c4:	697b      	ldr	r3, [r7, #20]
 80050c6:	fab3 f383 	clz	r3, r3
 80050ca:	b2db      	uxtb	r3, r3
 80050cc:	3301      	adds	r3, #1
 80050ce:	f003 021f 	and.w	r2, r3, #31
 80050d2:	4613      	mov	r3, r2
 80050d4:	005b      	lsls	r3, r3, #1
 80050d6:	4413      	add	r3, r2
 80050d8:	3b1e      	subs	r3, #30
 80050da:	051b      	lsls	r3, r3, #20
 80050dc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80050e0:	430b      	orrs	r3, r1
 80050e2:	683a      	ldr	r2, [r7, #0]
 80050e4:	6892      	ldr	r2, [r2, #8]
 80050e6:	4619      	mov	r1, r3
 80050e8:	f7ff f8ce 	bl	8004288 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	f280 80d7 	bge.w	80052a4 <HAL_ADC_ConfigChannel+0xa24>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4a06      	ldr	r2, [pc, #24]	@ (8005114 <HAL_ADC_ConfigChannel+0x894>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d004      	beq.n	800510a <HAL_ADC_ConfigChannel+0x88a>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4a04      	ldr	r2, [pc, #16]	@ (8005118 <HAL_ADC_ConfigChannel+0x898>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d10a      	bne.n	8005120 <HAL_ADC_ConfigChannel+0x8a0>
 800510a:	4b04      	ldr	r3, [pc, #16]	@ (800511c <HAL_ADC_ConfigChannel+0x89c>)
 800510c:	e009      	b.n	8005122 <HAL_ADC_ConfigChannel+0x8a2>
 800510e:	bf00      	nop
 8005110:	47ff0000 	.word	0x47ff0000
 8005114:	40022000 	.word	0x40022000
 8005118:	40022100 	.word	0x40022100
 800511c:	40022300 	.word	0x40022300
 8005120:	4b65      	ldr	r3, [pc, #404]	@ (80052b8 <HAL_ADC_ConfigChannel+0xa38>)
 8005122:	4618      	mov	r0, r3
 8005124:	f7fe ff84 	bl	8004030 <LL_ADC_GetCommonPathInternalCh>
 8005128:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4a62      	ldr	r2, [pc, #392]	@ (80052bc <HAL_ADC_ConfigChannel+0xa3c>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d004      	beq.n	8005140 <HAL_ADC_ConfigChannel+0x8c0>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4a61      	ldr	r2, [pc, #388]	@ (80052c0 <HAL_ADC_ConfigChannel+0xa40>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d10e      	bne.n	800515e <HAL_ADC_ConfigChannel+0x8de>
 8005140:	485e      	ldr	r0, [pc, #376]	@ (80052bc <HAL_ADC_ConfigChannel+0xa3c>)
 8005142:	f7ff f95b 	bl	80043fc <LL_ADC_IsEnabled>
 8005146:	4604      	mov	r4, r0
 8005148:	485d      	ldr	r0, [pc, #372]	@ (80052c0 <HAL_ADC_ConfigChannel+0xa40>)
 800514a:	f7ff f957 	bl	80043fc <LL_ADC_IsEnabled>
 800514e:	4603      	mov	r3, r0
 8005150:	4323      	orrs	r3, r4
 8005152:	2b00      	cmp	r3, #0
 8005154:	bf0c      	ite	eq
 8005156:	2301      	moveq	r3, #1
 8005158:	2300      	movne	r3, #0
 800515a:	b2db      	uxtb	r3, r3
 800515c:	e008      	b.n	8005170 <HAL_ADC_ConfigChannel+0x8f0>
 800515e:	4859      	ldr	r0, [pc, #356]	@ (80052c4 <HAL_ADC_ConfigChannel+0xa44>)
 8005160:	f7ff f94c 	bl	80043fc <LL_ADC_IsEnabled>
 8005164:	4603      	mov	r3, r0
 8005166:	2b00      	cmp	r3, #0
 8005168:	bf0c      	ite	eq
 800516a:	2301      	moveq	r3, #1
 800516c:	2300      	movne	r3, #0
 800516e:	b2db      	uxtb	r3, r3
 8005170:	2b00      	cmp	r3, #0
 8005172:	f000 8084 	beq.w	800527e <HAL_ADC_ConfigChannel+0x9fe>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4a53      	ldr	r2, [pc, #332]	@ (80052c8 <HAL_ADC_ConfigChannel+0xa48>)
 800517c:	4293      	cmp	r3, r2
 800517e:	d132      	bne.n	80051e6 <HAL_ADC_ConfigChannel+0x966>
 8005180:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005184:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005188:	2b00      	cmp	r3, #0
 800518a:	d12c      	bne.n	80051e6 <HAL_ADC_ConfigChannel+0x966>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4a4c      	ldr	r2, [pc, #304]	@ (80052c4 <HAL_ADC_ConfigChannel+0xa44>)
 8005192:	4293      	cmp	r3, r2
 8005194:	f040 8086 	bne.w	80052a4 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4a47      	ldr	r2, [pc, #284]	@ (80052bc <HAL_ADC_ConfigChannel+0xa3c>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d004      	beq.n	80051ac <HAL_ADC_ConfigChannel+0x92c>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4a46      	ldr	r2, [pc, #280]	@ (80052c0 <HAL_ADC_ConfigChannel+0xa40>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d101      	bne.n	80051b0 <HAL_ADC_ConfigChannel+0x930>
 80051ac:	4a47      	ldr	r2, [pc, #284]	@ (80052cc <HAL_ADC_ConfigChannel+0xa4c>)
 80051ae:	e000      	b.n	80051b2 <HAL_ADC_ConfigChannel+0x932>
 80051b0:	4a41      	ldr	r2, [pc, #260]	@ (80052b8 <HAL_ADC_ConfigChannel+0xa38>)
 80051b2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80051b6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80051ba:	4619      	mov	r1, r3
 80051bc:	4610      	mov	r0, r2
 80051be:	f7fe ff24 	bl	800400a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80051c2:	4b43      	ldr	r3, [pc, #268]	@ (80052d0 <HAL_ADC_ConfigChannel+0xa50>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	099b      	lsrs	r3, r3, #6
 80051c8:	4a42      	ldr	r2, [pc, #264]	@ (80052d4 <HAL_ADC_ConfigChannel+0xa54>)
 80051ca:	fba2 2303 	umull	r2, r3, r2, r3
 80051ce:	099b      	lsrs	r3, r3, #6
 80051d0:	3301      	adds	r3, #1
 80051d2:	005b      	lsls	r3, r3, #1
 80051d4:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80051d6:	e002      	b.n	80051de <HAL_ADC_ConfigChannel+0x95e>
              {
                wait_loop_index--;
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	3b01      	subs	r3, #1
 80051dc:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80051de:	68bb      	ldr	r3, [r7, #8]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d1f9      	bne.n	80051d8 <HAL_ADC_ConfigChannel+0x958>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80051e4:	e05e      	b.n	80052a4 <HAL_ADC_ConfigChannel+0xa24>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	4a3b      	ldr	r2, [pc, #236]	@ (80052d8 <HAL_ADC_ConfigChannel+0xa58>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d120      	bne.n	8005232 <HAL_ADC_ConfigChannel+0x9b2>
 80051f0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80051f4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d11a      	bne.n	8005232 <HAL_ADC_ConfigChannel+0x9b2>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4a30      	ldr	r2, [pc, #192]	@ (80052c4 <HAL_ADC_ConfigChannel+0xa44>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d14e      	bne.n	80052a4 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4a2c      	ldr	r2, [pc, #176]	@ (80052bc <HAL_ADC_ConfigChannel+0xa3c>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d004      	beq.n	800521a <HAL_ADC_ConfigChannel+0x99a>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4a2a      	ldr	r2, [pc, #168]	@ (80052c0 <HAL_ADC_ConfigChannel+0xa40>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d101      	bne.n	800521e <HAL_ADC_ConfigChannel+0x99e>
 800521a:	4a2c      	ldr	r2, [pc, #176]	@ (80052cc <HAL_ADC_ConfigChannel+0xa4c>)
 800521c:	e000      	b.n	8005220 <HAL_ADC_ConfigChannel+0x9a0>
 800521e:	4a26      	ldr	r2, [pc, #152]	@ (80052b8 <HAL_ADC_ConfigChannel+0xa38>)
 8005220:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005224:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005228:	4619      	mov	r1, r3
 800522a:	4610      	mov	r0, r2
 800522c:	f7fe feed 	bl	800400a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005230:	e038      	b.n	80052a4 <HAL_ADC_ConfigChannel+0xa24>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	4a29      	ldr	r2, [pc, #164]	@ (80052dc <HAL_ADC_ConfigChannel+0xa5c>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d133      	bne.n	80052a4 <HAL_ADC_ConfigChannel+0xa24>
 800523c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005240:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005244:	2b00      	cmp	r3, #0
 8005246:	d12d      	bne.n	80052a4 <HAL_ADC_ConfigChannel+0xa24>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4a1d      	ldr	r2, [pc, #116]	@ (80052c4 <HAL_ADC_ConfigChannel+0xa44>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d128      	bne.n	80052a4 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	4a19      	ldr	r2, [pc, #100]	@ (80052bc <HAL_ADC_ConfigChannel+0xa3c>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d004      	beq.n	8005266 <HAL_ADC_ConfigChannel+0x9e6>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4a17      	ldr	r2, [pc, #92]	@ (80052c0 <HAL_ADC_ConfigChannel+0xa40>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d101      	bne.n	800526a <HAL_ADC_ConfigChannel+0x9ea>
 8005266:	4a19      	ldr	r2, [pc, #100]	@ (80052cc <HAL_ADC_ConfigChannel+0xa4c>)
 8005268:	e000      	b.n	800526c <HAL_ADC_ConfigChannel+0x9ec>
 800526a:	4a13      	ldr	r2, [pc, #76]	@ (80052b8 <HAL_ADC_ConfigChannel+0xa38>)
 800526c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005270:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005274:	4619      	mov	r1, r3
 8005276:	4610      	mov	r0, r2
 8005278:	f7fe fec7 	bl	800400a <LL_ADC_SetCommonPathInternalCh>
 800527c:	e012      	b.n	80052a4 <HAL_ADC_ConfigChannel+0xa24>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005282:	f043 0220 	orr.w	r2, r3, #32
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	661a      	str	r2, [r3, #96]	@ 0x60

          tmp_hal_status = HAL_ERROR;
 800528a:	2301      	movs	r3, #1
 800528c:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
 8005290:	e008      	b.n	80052a4 <HAL_ADC_ConfigChannel+0xa24>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005296:	f043 0220 	orr.w	r2, r3, #32
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800529e:	2301      	movs	r3, #1
 80052a0:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2200      	movs	r2, #0
 80052a8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 80052ac:	f897 30df 	ldrb.w	r3, [r7, #223]	@ 0xdf
}
 80052b0:	4618      	mov	r0, r3
 80052b2:	37e4      	adds	r7, #228	@ 0xe4
 80052b4:	46bd      	mov	sp, r7
 80052b6:	bd90      	pop	{r4, r7, pc}
 80052b8:	58026300 	.word	0x58026300
 80052bc:	40022000 	.word	0x40022000
 80052c0:	40022100 	.word	0x40022100
 80052c4:	58026000 	.word	0x58026000
 80052c8:	c7520000 	.word	0xc7520000
 80052cc:	40022300 	.word	0x40022300
 80052d0:	24000000 	.word	0x24000000
 80052d4:	053e2d63 	.word	0x053e2d63
 80052d8:	c3210000 	.word	0xc3210000
 80052dc:	cb840000 	.word	0xcb840000

080052e0 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b084      	sub	sp, #16
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	4a6c      	ldr	r2, [pc, #432]	@ (80054a0 <ADC_ConfigureBoostMode+0x1c0>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d004      	beq.n	80052fc <ADC_ConfigureBoostMode+0x1c>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	4a6b      	ldr	r2, [pc, #428]	@ (80054a4 <ADC_ConfigureBoostMode+0x1c4>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d109      	bne.n	8005310 <ADC_ConfigureBoostMode+0x30>
 80052fc:	4b6a      	ldr	r3, [pc, #424]	@ (80054a8 <ADC_ConfigureBoostMode+0x1c8>)
 80052fe:	689b      	ldr	r3, [r3, #8]
 8005300:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005304:	2b00      	cmp	r3, #0
 8005306:	bf14      	ite	ne
 8005308:	2301      	movne	r3, #1
 800530a:	2300      	moveq	r3, #0
 800530c:	b2db      	uxtb	r3, r3
 800530e:	e008      	b.n	8005322 <ADC_ConfigureBoostMode+0x42>
 8005310:	4b66      	ldr	r3, [pc, #408]	@ (80054ac <ADC_ConfigureBoostMode+0x1cc>)
 8005312:	689b      	ldr	r3, [r3, #8]
 8005314:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005318:	2b00      	cmp	r3, #0
 800531a:	bf14      	ite	ne
 800531c:	2301      	movne	r3, #1
 800531e:	2300      	moveq	r3, #0
 8005320:	b2db      	uxtb	r3, r3
 8005322:	2b00      	cmp	r3, #0
 8005324:	d01c      	beq.n	8005360 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8005326:	f004 fe7b 	bl	800a020 <HAL_RCC_GetHCLKFreq>
 800532a:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	685b      	ldr	r3, [r3, #4]
 8005330:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005334:	d010      	beq.n	8005358 <ADC_ConfigureBoostMode+0x78>
 8005336:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800533a:	d873      	bhi.n	8005424 <ADC_ConfigureBoostMode+0x144>
 800533c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005340:	d002      	beq.n	8005348 <ADC_ConfigureBoostMode+0x68>
 8005342:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005346:	d16d      	bne.n	8005424 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	685b      	ldr	r3, [r3, #4]
 800534c:	0c1b      	lsrs	r3, r3, #16
 800534e:	68fa      	ldr	r2, [r7, #12]
 8005350:	fbb2 f3f3 	udiv	r3, r2, r3
 8005354:	60fb      	str	r3, [r7, #12]
        break;
 8005356:	e068      	b.n	800542a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	089b      	lsrs	r3, r3, #2
 800535c:	60fb      	str	r3, [r7, #12]
        break;
 800535e:	e064      	b.n	800542a <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8005360:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8005364:	f04f 0100 	mov.w	r1, #0
 8005368:	f006 f856 	bl	800b418 <HAL_RCCEx_GetPeriphCLKFreq>
 800536c:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	685b      	ldr	r3, [r3, #4]
 8005372:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8005376:	d051      	beq.n	800541c <ADC_ConfigureBoostMode+0x13c>
 8005378:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 800537c:	d854      	bhi.n	8005428 <ADC_ConfigureBoostMode+0x148>
 800537e:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8005382:	d047      	beq.n	8005414 <ADC_ConfigureBoostMode+0x134>
 8005384:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8005388:	d84e      	bhi.n	8005428 <ADC_ConfigureBoostMode+0x148>
 800538a:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 800538e:	d03d      	beq.n	800540c <ADC_ConfigureBoostMode+0x12c>
 8005390:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8005394:	d848      	bhi.n	8005428 <ADC_ConfigureBoostMode+0x148>
 8005396:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800539a:	d033      	beq.n	8005404 <ADC_ConfigureBoostMode+0x124>
 800539c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80053a0:	d842      	bhi.n	8005428 <ADC_ConfigureBoostMode+0x148>
 80053a2:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80053a6:	d029      	beq.n	80053fc <ADC_ConfigureBoostMode+0x11c>
 80053a8:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80053ac:	d83c      	bhi.n	8005428 <ADC_ConfigureBoostMode+0x148>
 80053ae:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80053b2:	d01a      	beq.n	80053ea <ADC_ConfigureBoostMode+0x10a>
 80053b4:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80053b8:	d836      	bhi.n	8005428 <ADC_ConfigureBoostMode+0x148>
 80053ba:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80053be:	d014      	beq.n	80053ea <ADC_ConfigureBoostMode+0x10a>
 80053c0:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80053c4:	d830      	bhi.n	8005428 <ADC_ConfigureBoostMode+0x148>
 80053c6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80053ca:	d00e      	beq.n	80053ea <ADC_ConfigureBoostMode+0x10a>
 80053cc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80053d0:	d82a      	bhi.n	8005428 <ADC_ConfigureBoostMode+0x148>
 80053d2:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80053d6:	d008      	beq.n	80053ea <ADC_ConfigureBoostMode+0x10a>
 80053d8:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80053dc:	d824      	bhi.n	8005428 <ADC_ConfigureBoostMode+0x148>
 80053de:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80053e2:	d002      	beq.n	80053ea <ADC_ConfigureBoostMode+0x10a>
 80053e4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80053e8:	d11e      	bne.n	8005428 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	685b      	ldr	r3, [r3, #4]
 80053ee:	0c9b      	lsrs	r3, r3, #18
 80053f0:	005b      	lsls	r3, r3, #1
 80053f2:	68fa      	ldr	r2, [r7, #12]
 80053f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80053f8:	60fb      	str	r3, [r7, #12]
        break;
 80053fa:	e016      	b.n	800542a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	091b      	lsrs	r3, r3, #4
 8005400:	60fb      	str	r3, [r7, #12]
        break;
 8005402:	e012      	b.n	800542a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	095b      	lsrs	r3, r3, #5
 8005408:	60fb      	str	r3, [r7, #12]
        break;
 800540a:	e00e      	b.n	800542a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	099b      	lsrs	r3, r3, #6
 8005410:	60fb      	str	r3, [r7, #12]
        break;
 8005412:	e00a      	b.n	800542a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	09db      	lsrs	r3, r3, #7
 8005418:	60fb      	str	r3, [r7, #12]
        break;
 800541a:	e006      	b.n	800542a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	0a1b      	lsrs	r3, r3, #8
 8005420:	60fb      	str	r3, [r7, #12]
        break;
 8005422:	e002      	b.n	800542a <ADC_ConfigureBoostMode+0x14a>
        break;
 8005424:	bf00      	nop
 8005426:	e000      	b.n	800542a <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8005428:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	085b      	lsrs	r3, r3, #1
 800542e:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	4a1f      	ldr	r2, [pc, #124]	@ (80054b0 <ADC_ConfigureBoostMode+0x1d0>)
 8005434:	4293      	cmp	r3, r2
 8005436:	d808      	bhi.n	800544a <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	689a      	ldr	r2, [r3, #8]
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8005446:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8005448:	e025      	b.n	8005496 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	4a19      	ldr	r2, [pc, #100]	@ (80054b4 <ADC_ConfigureBoostMode+0x1d4>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d80a      	bhi.n	8005468 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	689b      	ldr	r3, [r3, #8]
 8005458:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005464:	609a      	str	r2, [r3, #8]
}
 8005466:	e016      	b.n	8005496 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	4a13      	ldr	r2, [pc, #76]	@ (80054b8 <ADC_ConfigureBoostMode+0x1d8>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d80a      	bhi.n	8005486 <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	689b      	ldr	r3, [r3, #8]
 8005476:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005482:	609a      	str	r2, [r3, #8]
}
 8005484:	e007      	b.n	8005496 <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	689a      	ldr	r2, [r3, #8]
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8005494:	609a      	str	r2, [r3, #8]
}
 8005496:	bf00      	nop
 8005498:	3710      	adds	r7, #16
 800549a:	46bd      	mov	sp, r7
 800549c:	bd80      	pop	{r7, pc}
 800549e:	bf00      	nop
 80054a0:	40022000 	.word	0x40022000
 80054a4:	40022100 	.word	0x40022100
 80054a8:	40022300 	.word	0x40022300
 80054ac:	58026300 	.word	0x58026300
 80054b0:	005f5e10 	.word	0x005f5e10
 80054b4:	00bebc20 	.word	0x00bebc20
 80054b8:	017d7840 	.word	0x017d7840

080054bc <LL_ADC_IsEnabled>:
{
 80054bc:	b480      	push	{r7}
 80054be:	b083      	sub	sp, #12
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	689b      	ldr	r3, [r3, #8]
 80054c8:	f003 0301 	and.w	r3, r3, #1
 80054cc:	2b01      	cmp	r3, #1
 80054ce:	d101      	bne.n	80054d4 <LL_ADC_IsEnabled+0x18>
 80054d0:	2301      	movs	r3, #1
 80054d2:	e000      	b.n	80054d6 <LL_ADC_IsEnabled+0x1a>
 80054d4:	2300      	movs	r3, #0
}
 80054d6:	4618      	mov	r0, r3
 80054d8:	370c      	adds	r7, #12
 80054da:	46bd      	mov	sp, r7
 80054dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e0:	4770      	bx	lr

080054e2 <LL_ADC_REG_IsConversionOngoing>:
{
 80054e2:	b480      	push	{r7}
 80054e4:	b083      	sub	sp, #12
 80054e6:	af00      	add	r7, sp, #0
 80054e8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	689b      	ldr	r3, [r3, #8]
 80054ee:	f003 0304 	and.w	r3, r3, #4
 80054f2:	2b04      	cmp	r3, #4
 80054f4:	d101      	bne.n	80054fa <LL_ADC_REG_IsConversionOngoing+0x18>
 80054f6:	2301      	movs	r3, #1
 80054f8:	e000      	b.n	80054fc <LL_ADC_REG_IsConversionOngoing+0x1a>
 80054fa:	2300      	movs	r3, #0
}
 80054fc:	4618      	mov	r0, r3
 80054fe:	370c      	adds	r7, #12
 8005500:	46bd      	mov	sp, r7
 8005502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005506:	4770      	bx	lr

08005508 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8005508:	b590      	push	{r4, r7, lr}
 800550a:	b0a3      	sub	sp, #140	@ 0x8c
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
 8005510:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005512:	2300      	movs	r3, #0
 8005514:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800551e:	2b01      	cmp	r3, #1
 8005520:	d101      	bne.n	8005526 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8005522:	2302      	movs	r3, #2
 8005524:	e0c1      	b.n	80056aa <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2201      	movs	r2, #1
 800552a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800552e:	2300      	movs	r3, #0
 8005530:	66fb      	str	r3, [r7, #108]	@ 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8005532:	2300      	movs	r3, #0
 8005534:	673b      	str	r3, [r7, #112]	@ 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	4a5e      	ldr	r2, [pc, #376]	@ (80056b4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d102      	bne.n	8005546 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8005540:	4b5d      	ldr	r3, [pc, #372]	@ (80056b8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005542:	60fb      	str	r3, [r7, #12]
 8005544:	e001      	b.n	800554a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8005546:	2300      	movs	r3, #0
 8005548:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d10b      	bne.n	8005568 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005554:	f043 0220 	orr.w	r2, r3, #32
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2200      	movs	r2, #0
 8005560:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    return HAL_ERROR;
 8005564:	2301      	movs	r3, #1
 8005566:	e0a0      	b.n	80056aa <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	4618      	mov	r0, r3
 800556c:	f7ff ffb9 	bl	80054e2 <LL_ADC_REG_IsConversionOngoing>
 8005570:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	4618      	mov	r0, r3
 800557a:	f7ff ffb2 	bl	80054e2 <LL_ADC_REG_IsConversionOngoing>
 800557e:	4603      	mov	r3, r0
 8005580:	2b00      	cmp	r3, #0
 8005582:	f040 8081 	bne.w	8005688 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8005586:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800558a:	2b00      	cmp	r3, #0
 800558c:	d17c      	bne.n	8005688 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	4a48      	ldr	r2, [pc, #288]	@ (80056b4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d004      	beq.n	80055a2 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	4a46      	ldr	r2, [pc, #280]	@ (80056b8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d101      	bne.n	80055a6 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 80055a2:	4b46      	ldr	r3, [pc, #280]	@ (80056bc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80055a4:	e000      	b.n	80055a8 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 80055a6:	4b46      	ldr	r3, [pc, #280]	@ (80056c0 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80055a8:	67fb      	str	r3, [r7, #124]	@ 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d039      	beq.n	8005626 <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80055b2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80055b4:	689b      	ldr	r3, [r3, #8]
 80055b6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	685b      	ldr	r3, [r3, #4]
 80055be:	431a      	orrs	r2, r3
 80055c0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80055c2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	4a3a      	ldr	r2, [pc, #232]	@ (80056b4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d004      	beq.n	80055d8 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	4a39      	ldr	r2, [pc, #228]	@ (80056b8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d10e      	bne.n	80055f6 <HAL_ADCEx_MultiModeConfigChannel+0xee>
 80055d8:	4836      	ldr	r0, [pc, #216]	@ (80056b4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80055da:	f7ff ff6f 	bl	80054bc <LL_ADC_IsEnabled>
 80055de:	4604      	mov	r4, r0
 80055e0:	4835      	ldr	r0, [pc, #212]	@ (80056b8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80055e2:	f7ff ff6b 	bl	80054bc <LL_ADC_IsEnabled>
 80055e6:	4603      	mov	r3, r0
 80055e8:	4323      	orrs	r3, r4
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	bf0c      	ite	eq
 80055ee:	2301      	moveq	r3, #1
 80055f0:	2300      	movne	r3, #0
 80055f2:	b2db      	uxtb	r3, r3
 80055f4:	e008      	b.n	8005608 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 80055f6:	4833      	ldr	r0, [pc, #204]	@ (80056c4 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 80055f8:	f7ff ff60 	bl	80054bc <LL_ADC_IsEnabled>
 80055fc:	4603      	mov	r3, r0
 80055fe:	2b00      	cmp	r3, #0
 8005600:	bf0c      	ite	eq
 8005602:	2301      	moveq	r3, #1
 8005604:	2300      	movne	r3, #0
 8005606:	b2db      	uxtb	r3, r3
 8005608:	2b00      	cmp	r3, #0
 800560a:	d047      	beq.n	800569c <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800560c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800560e:	689a      	ldr	r2, [r3, #8]
 8005610:	4b2d      	ldr	r3, [pc, #180]	@ (80056c8 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8005612:	4013      	ands	r3, r2
 8005614:	683a      	ldr	r2, [r7, #0]
 8005616:	6811      	ldr	r1, [r2, #0]
 8005618:	683a      	ldr	r2, [r7, #0]
 800561a:	6892      	ldr	r2, [r2, #8]
 800561c:	430a      	orrs	r2, r1
 800561e:	431a      	orrs	r2, r3
 8005620:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005622:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005624:	e03a      	b.n	800569c <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8005626:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005628:	689b      	ldr	r3, [r3, #8]
 800562a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800562e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005630:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	4a1f      	ldr	r2, [pc, #124]	@ (80056b4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005638:	4293      	cmp	r3, r2
 800563a:	d004      	beq.n	8005646 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	4a1d      	ldr	r2, [pc, #116]	@ (80056b8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d10e      	bne.n	8005664 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 8005646:	481b      	ldr	r0, [pc, #108]	@ (80056b4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005648:	f7ff ff38 	bl	80054bc <LL_ADC_IsEnabled>
 800564c:	4604      	mov	r4, r0
 800564e:	481a      	ldr	r0, [pc, #104]	@ (80056b8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005650:	f7ff ff34 	bl	80054bc <LL_ADC_IsEnabled>
 8005654:	4603      	mov	r3, r0
 8005656:	4323      	orrs	r3, r4
 8005658:	2b00      	cmp	r3, #0
 800565a:	bf0c      	ite	eq
 800565c:	2301      	moveq	r3, #1
 800565e:	2300      	movne	r3, #0
 8005660:	b2db      	uxtb	r3, r3
 8005662:	e008      	b.n	8005676 <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 8005664:	4817      	ldr	r0, [pc, #92]	@ (80056c4 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8005666:	f7ff ff29 	bl	80054bc <LL_ADC_IsEnabled>
 800566a:	4603      	mov	r3, r0
 800566c:	2b00      	cmp	r3, #0
 800566e:	bf0c      	ite	eq
 8005670:	2301      	moveq	r3, #1
 8005672:	2300      	movne	r3, #0
 8005674:	b2db      	uxtb	r3, r3
 8005676:	2b00      	cmp	r3, #0
 8005678:	d010      	beq.n	800569c <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800567a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800567c:	689a      	ldr	r2, [r3, #8]
 800567e:	4b12      	ldr	r3, [pc, #72]	@ (80056c8 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8005680:	4013      	ands	r3, r2
 8005682:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8005684:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005686:	e009      	b.n	800569c <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800568c:	f043 0220 	orr.w	r2, r3, #32
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8005694:	2301      	movs	r3, #1
 8005696:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 800569a:	e000      	b.n	800569e <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800569c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2200      	movs	r2, #0
 80056a2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 80056a6:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 80056aa:	4618      	mov	r0, r3
 80056ac:	378c      	adds	r7, #140	@ 0x8c
 80056ae:	46bd      	mov	sp, r7
 80056b0:	bd90      	pop	{r4, r7, pc}
 80056b2:	bf00      	nop
 80056b4:	40022000 	.word	0x40022000
 80056b8:	40022100 	.word	0x40022100
 80056bc:	40022300 	.word	0x40022300
 80056c0:	58026300 	.word	0x58026300
 80056c4:	58026000 	.word	0x58026000
 80056c8:	fffff0e0 	.word	0xfffff0e0

080056cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80056cc:	b480      	push	{r7}
 80056ce:	b085      	sub	sp, #20
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	f003 0307 	and.w	r3, r3, #7
 80056da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80056dc:	4b0b      	ldr	r3, [pc, #44]	@ (800570c <__NVIC_SetPriorityGrouping+0x40>)
 80056de:	68db      	ldr	r3, [r3, #12]
 80056e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80056e2:	68ba      	ldr	r2, [r7, #8]
 80056e4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80056e8:	4013      	ands	r3, r2
 80056ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80056f4:	4b06      	ldr	r3, [pc, #24]	@ (8005710 <__NVIC_SetPriorityGrouping+0x44>)
 80056f6:	4313      	orrs	r3, r2
 80056f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80056fa:	4a04      	ldr	r2, [pc, #16]	@ (800570c <__NVIC_SetPriorityGrouping+0x40>)
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	60d3      	str	r3, [r2, #12]
}
 8005700:	bf00      	nop
 8005702:	3714      	adds	r7, #20
 8005704:	46bd      	mov	sp, r7
 8005706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570a:	4770      	bx	lr
 800570c:	e000ed00 	.word	0xe000ed00
 8005710:	05fa0000 	.word	0x05fa0000

08005714 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005714:	b480      	push	{r7}
 8005716:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005718:	4b04      	ldr	r3, [pc, #16]	@ (800572c <__NVIC_GetPriorityGrouping+0x18>)
 800571a:	68db      	ldr	r3, [r3, #12]
 800571c:	0a1b      	lsrs	r3, r3, #8
 800571e:	f003 0307 	and.w	r3, r3, #7
}
 8005722:	4618      	mov	r0, r3
 8005724:	46bd      	mov	sp, r7
 8005726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572a:	4770      	bx	lr
 800572c:	e000ed00 	.word	0xe000ed00

08005730 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005730:	b480      	push	{r7}
 8005732:	b083      	sub	sp, #12
 8005734:	af00      	add	r7, sp, #0
 8005736:	4603      	mov	r3, r0
 8005738:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800573a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800573e:	2b00      	cmp	r3, #0
 8005740:	db0b      	blt.n	800575a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005742:	88fb      	ldrh	r3, [r7, #6]
 8005744:	f003 021f 	and.w	r2, r3, #31
 8005748:	4907      	ldr	r1, [pc, #28]	@ (8005768 <__NVIC_EnableIRQ+0x38>)
 800574a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800574e:	095b      	lsrs	r3, r3, #5
 8005750:	2001      	movs	r0, #1
 8005752:	fa00 f202 	lsl.w	r2, r0, r2
 8005756:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800575a:	bf00      	nop
 800575c:	370c      	adds	r7, #12
 800575e:	46bd      	mov	sp, r7
 8005760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005764:	4770      	bx	lr
 8005766:	bf00      	nop
 8005768:	e000e100 	.word	0xe000e100

0800576c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800576c:	b480      	push	{r7}
 800576e:	b083      	sub	sp, #12
 8005770:	af00      	add	r7, sp, #0
 8005772:	4603      	mov	r3, r0
 8005774:	6039      	str	r1, [r7, #0]
 8005776:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005778:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800577c:	2b00      	cmp	r3, #0
 800577e:	db0a      	blt.n	8005796 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	b2da      	uxtb	r2, r3
 8005784:	490c      	ldr	r1, [pc, #48]	@ (80057b8 <__NVIC_SetPriority+0x4c>)
 8005786:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800578a:	0112      	lsls	r2, r2, #4
 800578c:	b2d2      	uxtb	r2, r2
 800578e:	440b      	add	r3, r1
 8005790:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005794:	e00a      	b.n	80057ac <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	b2da      	uxtb	r2, r3
 800579a:	4908      	ldr	r1, [pc, #32]	@ (80057bc <__NVIC_SetPriority+0x50>)
 800579c:	88fb      	ldrh	r3, [r7, #6]
 800579e:	f003 030f 	and.w	r3, r3, #15
 80057a2:	3b04      	subs	r3, #4
 80057a4:	0112      	lsls	r2, r2, #4
 80057a6:	b2d2      	uxtb	r2, r2
 80057a8:	440b      	add	r3, r1
 80057aa:	761a      	strb	r2, [r3, #24]
}
 80057ac:	bf00      	nop
 80057ae:	370c      	adds	r7, #12
 80057b0:	46bd      	mov	sp, r7
 80057b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b6:	4770      	bx	lr
 80057b8:	e000e100 	.word	0xe000e100
 80057bc:	e000ed00 	.word	0xe000ed00

080057c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80057c0:	b480      	push	{r7}
 80057c2:	b089      	sub	sp, #36	@ 0x24
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	60f8      	str	r0, [r7, #12]
 80057c8:	60b9      	str	r1, [r7, #8]
 80057ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	f003 0307 	and.w	r3, r3, #7
 80057d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80057d4:	69fb      	ldr	r3, [r7, #28]
 80057d6:	f1c3 0307 	rsb	r3, r3, #7
 80057da:	2b04      	cmp	r3, #4
 80057dc:	bf28      	it	cs
 80057de:	2304      	movcs	r3, #4
 80057e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80057e2:	69fb      	ldr	r3, [r7, #28]
 80057e4:	3304      	adds	r3, #4
 80057e6:	2b06      	cmp	r3, #6
 80057e8:	d902      	bls.n	80057f0 <NVIC_EncodePriority+0x30>
 80057ea:	69fb      	ldr	r3, [r7, #28]
 80057ec:	3b03      	subs	r3, #3
 80057ee:	e000      	b.n	80057f2 <NVIC_EncodePriority+0x32>
 80057f0:	2300      	movs	r3, #0
 80057f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80057f4:	f04f 32ff 	mov.w	r2, #4294967295
 80057f8:	69bb      	ldr	r3, [r7, #24]
 80057fa:	fa02 f303 	lsl.w	r3, r2, r3
 80057fe:	43da      	mvns	r2, r3
 8005800:	68bb      	ldr	r3, [r7, #8]
 8005802:	401a      	ands	r2, r3
 8005804:	697b      	ldr	r3, [r7, #20]
 8005806:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005808:	f04f 31ff 	mov.w	r1, #4294967295
 800580c:	697b      	ldr	r3, [r7, #20]
 800580e:	fa01 f303 	lsl.w	r3, r1, r3
 8005812:	43d9      	mvns	r1, r3
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005818:	4313      	orrs	r3, r2
         );
}
 800581a:	4618      	mov	r0, r3
 800581c:	3724      	adds	r7, #36	@ 0x24
 800581e:	46bd      	mov	sp, r7
 8005820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005824:	4770      	bx	lr
	...

08005828 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005828:	b580      	push	{r7, lr}
 800582a:	b082      	sub	sp, #8
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	3b01      	subs	r3, #1
 8005834:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005838:	d301      	bcc.n	800583e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800583a:	2301      	movs	r3, #1
 800583c:	e00f      	b.n	800585e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800583e:	4a0a      	ldr	r2, [pc, #40]	@ (8005868 <SysTick_Config+0x40>)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	3b01      	subs	r3, #1
 8005844:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005846:	210f      	movs	r1, #15
 8005848:	f04f 30ff 	mov.w	r0, #4294967295
 800584c:	f7ff ff8e 	bl	800576c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005850:	4b05      	ldr	r3, [pc, #20]	@ (8005868 <SysTick_Config+0x40>)
 8005852:	2200      	movs	r2, #0
 8005854:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005856:	4b04      	ldr	r3, [pc, #16]	@ (8005868 <SysTick_Config+0x40>)
 8005858:	2207      	movs	r2, #7
 800585a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800585c:	2300      	movs	r3, #0
}
 800585e:	4618      	mov	r0, r3
 8005860:	3708      	adds	r7, #8
 8005862:	46bd      	mov	sp, r7
 8005864:	bd80      	pop	{r7, pc}
 8005866:	bf00      	nop
 8005868:	e000e010 	.word	0xe000e010

0800586c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800586c:	b580      	push	{r7, lr}
 800586e:	b082      	sub	sp, #8
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005874:	6878      	ldr	r0, [r7, #4]
 8005876:	f7ff ff29 	bl	80056cc <__NVIC_SetPriorityGrouping>
}
 800587a:	bf00      	nop
 800587c:	3708      	adds	r7, #8
 800587e:	46bd      	mov	sp, r7
 8005880:	bd80      	pop	{r7, pc}

08005882 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005882:	b580      	push	{r7, lr}
 8005884:	b086      	sub	sp, #24
 8005886:	af00      	add	r7, sp, #0
 8005888:	4603      	mov	r3, r0
 800588a:	60b9      	str	r1, [r7, #8]
 800588c:	607a      	str	r2, [r7, #4]
 800588e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005890:	f7ff ff40 	bl	8005714 <__NVIC_GetPriorityGrouping>
 8005894:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005896:	687a      	ldr	r2, [r7, #4]
 8005898:	68b9      	ldr	r1, [r7, #8]
 800589a:	6978      	ldr	r0, [r7, #20]
 800589c:	f7ff ff90 	bl	80057c0 <NVIC_EncodePriority>
 80058a0:	4602      	mov	r2, r0
 80058a2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80058a6:	4611      	mov	r1, r2
 80058a8:	4618      	mov	r0, r3
 80058aa:	f7ff ff5f 	bl	800576c <__NVIC_SetPriority>
}
 80058ae:	bf00      	nop
 80058b0:	3718      	adds	r7, #24
 80058b2:	46bd      	mov	sp, r7
 80058b4:	bd80      	pop	{r7, pc}

080058b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80058b6:	b580      	push	{r7, lr}
 80058b8:	b082      	sub	sp, #8
 80058ba:	af00      	add	r7, sp, #0
 80058bc:	4603      	mov	r3, r0
 80058be:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80058c0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80058c4:	4618      	mov	r0, r3
 80058c6:	f7ff ff33 	bl	8005730 <__NVIC_EnableIRQ>
}
 80058ca:	bf00      	nop
 80058cc:	3708      	adds	r7, #8
 80058ce:	46bd      	mov	sp, r7
 80058d0:	bd80      	pop	{r7, pc}

080058d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80058d2:	b580      	push	{r7, lr}
 80058d4:	b082      	sub	sp, #8
 80058d6:	af00      	add	r7, sp, #0
 80058d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80058da:	6878      	ldr	r0, [r7, #4]
 80058dc:	f7ff ffa4 	bl	8005828 <SysTick_Config>
 80058e0:	4603      	mov	r3, r0
}
 80058e2:	4618      	mov	r0, r3
 80058e4:	3708      	adds	r7, #8
 80058e6:	46bd      	mov	sp, r7
 80058e8:	bd80      	pop	{r7, pc}
	...

080058ec <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80058ec:	b480      	push	{r7}
 80058ee:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 80058f0:	f3bf 8f5f 	dmb	sy
}
 80058f4:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80058f6:	4b07      	ldr	r3, [pc, #28]	@ (8005914 <HAL_MPU_Disable+0x28>)
 80058f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058fa:	4a06      	ldr	r2, [pc, #24]	@ (8005914 <HAL_MPU_Disable+0x28>)
 80058fc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005900:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8005902:	4b05      	ldr	r3, [pc, #20]	@ (8005918 <HAL_MPU_Disable+0x2c>)
 8005904:	2200      	movs	r2, #0
 8005906:	605a      	str	r2, [r3, #4]
}
 8005908:	bf00      	nop
 800590a:	46bd      	mov	sp, r7
 800590c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005910:	4770      	bx	lr
 8005912:	bf00      	nop
 8005914:	e000ed00 	.word	0xe000ed00
 8005918:	e000ed90 	.word	0xe000ed90

0800591c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 800591c:	b480      	push	{r7}
 800591e:	b083      	sub	sp, #12
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8005924:	4a0b      	ldr	r2, [pc, #44]	@ (8005954 <HAL_MPU_Enable+0x38>)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	f043 0301 	orr.w	r3, r3, #1
 800592c:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800592e:	4b0a      	ldr	r3, [pc, #40]	@ (8005958 <HAL_MPU_Enable+0x3c>)
 8005930:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005932:	4a09      	ldr	r2, [pc, #36]	@ (8005958 <HAL_MPU_Enable+0x3c>)
 8005934:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005938:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800593a:	f3bf 8f4f 	dsb	sy
}
 800593e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005940:	f3bf 8f6f 	isb	sy
}
 8005944:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8005946:	bf00      	nop
 8005948:	370c      	adds	r7, #12
 800594a:	46bd      	mov	sp, r7
 800594c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005950:	4770      	bx	lr
 8005952:	bf00      	nop
 8005954:	e000ed90 	.word	0xe000ed90
 8005958:	e000ed00 	.word	0xe000ed00

0800595c <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 800595c:	b480      	push	{r7}
 800595e:	b083      	sub	sp, #12
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	785a      	ldrb	r2, [r3, #1]
 8005968:	4b1b      	ldr	r3, [pc, #108]	@ (80059d8 <HAL_MPU_ConfigRegion+0x7c>)
 800596a:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 800596c:	4b1a      	ldr	r3, [pc, #104]	@ (80059d8 <HAL_MPU_ConfigRegion+0x7c>)
 800596e:	691b      	ldr	r3, [r3, #16]
 8005970:	4a19      	ldr	r2, [pc, #100]	@ (80059d8 <HAL_MPU_ConfigRegion+0x7c>)
 8005972:	f023 0301 	bic.w	r3, r3, #1
 8005976:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8005978:	4a17      	ldr	r2, [pc, #92]	@ (80059d8 <HAL_MPU_ConfigRegion+0x7c>)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	685b      	ldr	r3, [r3, #4]
 800597e:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	7b1b      	ldrb	r3, [r3, #12]
 8005984:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	7adb      	ldrb	r3, [r3, #11]
 800598a:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800598c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	7a9b      	ldrb	r3, [r3, #10]
 8005992:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8005994:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	7b5b      	ldrb	r3, [r3, #13]
 800599a:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800599c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	7b9b      	ldrb	r3, [r3, #14]
 80059a2:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80059a4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	7bdb      	ldrb	r3, [r3, #15]
 80059aa:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80059ac:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	7a5b      	ldrb	r3, [r3, #9]
 80059b2:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80059b4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	7a1b      	ldrb	r3, [r3, #8]
 80059ba:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80059bc:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80059be:	687a      	ldr	r2, [r7, #4]
 80059c0:	7812      	ldrb	r2, [r2, #0]
 80059c2:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80059c4:	4a04      	ldr	r2, [pc, #16]	@ (80059d8 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80059c6:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80059c8:	6113      	str	r3, [r2, #16]
}
 80059ca:	bf00      	nop
 80059cc:	370c      	adds	r7, #12
 80059ce:	46bd      	mov	sp, r7
 80059d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d4:	4770      	bx	lr
 80059d6:	bf00      	nop
 80059d8:	e000ed90 	.word	0xe000ed90

080059dc <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b082      	sub	sp, #8
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d101      	bne.n	80059ee <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80059ea:	2301      	movs	r3, #1
 80059ec:	e014      	b.n	8005a18 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	791b      	ldrb	r3, [r3, #4]
 80059f2:	b2db      	uxtb	r3, r3
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d105      	bne.n	8005a04 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2200      	movs	r2, #0
 80059fc:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80059fe:	6878      	ldr	r0, [r7, #4]
 8005a00:	f7fb fff8 	bl	80019f4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2202      	movs	r2, #2
 8005a08:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2201      	movs	r2, #1
 8005a14:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8005a16:	2300      	movs	r3, #0
}
 8005a18:	4618      	mov	r0, r3
 8005a1a:	3708      	adds	r7, #8
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	bd80      	pop	{r7, pc}

08005a20 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b08a      	sub	sp, #40	@ 0x28
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	60f8      	str	r0, [r7, #12]
 8005a28:	60b9      	str	r1, [r7, #8]
 8005a2a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d002      	beq.n	8005a3e <HAL_DAC_ConfigChannel+0x1e>
 8005a38:	68bb      	ldr	r3, [r7, #8]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d101      	bne.n	8005a42 <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 8005a3e:	2301      	movs	r3, #1
 8005a40:	e12a      	b.n	8005c98 <HAL_DAC_ConfigChannel+0x278>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	795b      	ldrb	r3, [r3, #5]
 8005a46:	2b01      	cmp	r3, #1
 8005a48:	d101      	bne.n	8005a4e <HAL_DAC_ConfigChannel+0x2e>
 8005a4a:	2302      	movs	r3, #2
 8005a4c:	e124      	b.n	8005c98 <HAL_DAC_ConfigChannel+0x278>
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	2201      	movs	r2, #1
 8005a52:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	2202      	movs	r2, #2
 8005a58:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8005a5a:	68bb      	ldr	r3, [r7, #8]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	2b04      	cmp	r3, #4
 8005a60:	d17a      	bne.n	8005b58 <HAL_DAC_ConfigChannel+0x138>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8005a62:	f7fe fa8f 	bl	8003f84 <HAL_GetTick>
 8005a66:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d13d      	bne.n	8005aea <HAL_DAC_ConfigChannel+0xca>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005a6e:	e018      	b.n	8005aa2 <HAL_DAC_ConfigChannel+0x82>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8005a70:	f7fe fa88 	bl	8003f84 <HAL_GetTick>
 8005a74:	4602      	mov	r2, r0
 8005a76:	69fb      	ldr	r3, [r7, #28]
 8005a78:	1ad3      	subs	r3, r2, r3
 8005a7a:	2b01      	cmp	r3, #1
 8005a7c:	d911      	bls.n	8005aa2 <HAL_DAC_ConfigChannel+0x82>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005a84:	4b86      	ldr	r3, [pc, #536]	@ (8005ca0 <HAL_DAC_ConfigChannel+0x280>)
 8005a86:	4013      	ands	r3, r2
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d00a      	beq.n	8005aa2 <HAL_DAC_ConfigChannel+0x82>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	691b      	ldr	r3, [r3, #16]
 8005a90:	f043 0208 	orr.w	r2, r3, #8
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	2203      	movs	r2, #3
 8005a9c:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8005a9e:	2303      	movs	r3, #3
 8005aa0:	e0fa      	b.n	8005c98 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005aa8:	4b7d      	ldr	r3, [pc, #500]	@ (8005ca0 <HAL_DAC_ConfigChannel+0x280>)
 8005aaa:	4013      	ands	r3, r2
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d1df      	bne.n	8005a70 <HAL_DAC_ConfigChannel+0x50>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	68ba      	ldr	r2, [r7, #8]
 8005ab6:	6992      	ldr	r2, [r2, #24]
 8005ab8:	641a      	str	r2, [r3, #64]	@ 0x40
 8005aba:	e020      	b.n	8005afe <HAL_DAC_ConfigChannel+0xde>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8005abc:	f7fe fa62 	bl	8003f84 <HAL_GetTick>
 8005ac0:	4602      	mov	r2, r0
 8005ac2:	69fb      	ldr	r3, [r7, #28]
 8005ac4:	1ad3      	subs	r3, r2, r3
 8005ac6:	2b01      	cmp	r3, #1
 8005ac8:	d90f      	bls.n	8005aea <HAL_DAC_ConfigChannel+0xca>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	da0a      	bge.n	8005aea <HAL_DAC_ConfigChannel+0xca>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	691b      	ldr	r3, [r3, #16]
 8005ad8:	f043 0208 	orr.w	r2, r3, #8
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	2203      	movs	r2, #3
 8005ae4:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8005ae6:	2303      	movs	r3, #3
 8005ae8:	e0d6      	b.n	8005c98 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	dbe3      	blt.n	8005abc <HAL_DAC_ConfigChannel+0x9c>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	68ba      	ldr	r2, [r7, #8]
 8005afa:	6992      	ldr	r2, [r2, #24]
 8005afc:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	f003 0310 	and.w	r3, r3, #16
 8005b0a:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8005b0e:	fa01 f303 	lsl.w	r3, r1, r3
 8005b12:	43db      	mvns	r3, r3
 8005b14:	ea02 0103 	and.w	r1, r2, r3
 8005b18:	68bb      	ldr	r3, [r7, #8]
 8005b1a:	69da      	ldr	r2, [r3, #28]
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	f003 0310 	and.w	r3, r3, #16
 8005b22:	409a      	lsls	r2, r3
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	430a      	orrs	r2, r1
 8005b2a:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	f003 0310 	and.w	r3, r3, #16
 8005b38:	21ff      	movs	r1, #255	@ 0xff
 8005b3a:	fa01 f303 	lsl.w	r3, r1, r3
 8005b3e:	43db      	mvns	r3, r3
 8005b40:	ea02 0103 	and.w	r1, r2, r3
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	6a1a      	ldr	r2, [r3, #32]
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	f003 0310 	and.w	r3, r3, #16
 8005b4e:	409a      	lsls	r2, r3
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	430a      	orrs	r2, r1
 8005b56:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	691b      	ldr	r3, [r3, #16]
 8005b5c:	2b01      	cmp	r3, #1
 8005b5e:	d11d      	bne.n	8005b9c <HAL_DAC_ConfigChannel+0x17c>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b66:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	f003 0310 	and.w	r3, r3, #16
 8005b6e:	221f      	movs	r2, #31
 8005b70:	fa02 f303 	lsl.w	r3, r2, r3
 8005b74:	43db      	mvns	r3, r3
 8005b76:	69ba      	ldr	r2, [r7, #24]
 8005b78:	4013      	ands	r3, r2
 8005b7a:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8005b7c:	68bb      	ldr	r3, [r7, #8]
 8005b7e:	695b      	ldr	r3, [r3, #20]
 8005b80:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	f003 0310 	and.w	r3, r3, #16
 8005b88:	697a      	ldr	r2, [r7, #20]
 8005b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8005b8e:	69ba      	ldr	r2, [r7, #24]
 8005b90:	4313      	orrs	r3, r2
 8005b92:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	69ba      	ldr	r2, [r7, #24]
 8005b9a:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ba2:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	f003 0310 	and.w	r3, r3, #16
 8005baa:	2207      	movs	r2, #7
 8005bac:	fa02 f303 	lsl.w	r3, r2, r3
 8005bb0:	43db      	mvns	r3, r3
 8005bb2:	69ba      	ldr	r2, [r7, #24]
 8005bb4:	4013      	ands	r3, r2
 8005bb6:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8005bb8:	68bb      	ldr	r3, [r7, #8]
 8005bba:	68db      	ldr	r3, [r3, #12]
 8005bbc:	2b01      	cmp	r3, #1
 8005bbe:	d102      	bne.n	8005bc6 <HAL_DAC_ConfigChannel+0x1a6>
  {
    connectOnChip = 0x00000000UL;
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	627b      	str	r3, [r7, #36]	@ 0x24
 8005bc4:	e00f      	b.n	8005be6 <HAL_DAC_ConfigChannel+0x1c6>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8005bc6:	68bb      	ldr	r3, [r7, #8]
 8005bc8:	68db      	ldr	r3, [r3, #12]
 8005bca:	2b02      	cmp	r3, #2
 8005bcc:	d102      	bne.n	8005bd4 <HAL_DAC_ConfigChannel+0x1b4>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8005bce:	2301      	movs	r3, #1
 8005bd0:	627b      	str	r3, [r7, #36]	@ 0x24
 8005bd2:	e008      	b.n	8005be6 <HAL_DAC_ConfigChannel+0x1c6>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8005bd4:	68bb      	ldr	r3, [r7, #8]
 8005bd6:	689b      	ldr	r3, [r3, #8]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d102      	bne.n	8005be2 <HAL_DAC_ConfigChannel+0x1c2>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8005bdc:	2301      	movs	r3, #1
 8005bde:	627b      	str	r3, [r7, #36]	@ 0x24
 8005be0:	e001      	b.n	8005be6 <HAL_DAC_ConfigChannel+0x1c6>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8005be2:	2300      	movs	r3, #0
 8005be4:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8005be6:	68bb      	ldr	r3, [r7, #8]
 8005be8:	681a      	ldr	r2, [r3, #0]
 8005bea:	68bb      	ldr	r3, [r7, #8]
 8005bec:	689b      	ldr	r3, [r3, #8]
 8005bee:	4313      	orrs	r3, r2
 8005bf0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005bf2:	4313      	orrs	r3, r2
 8005bf4:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	f003 0310 	and.w	r3, r3, #16
 8005bfc:	697a      	ldr	r2, [r7, #20]
 8005bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8005c02:	69ba      	ldr	r2, [r7, #24]
 8005c04:	4313      	orrs	r3, r2
 8005c06:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	69ba      	ldr	r2, [r7, #24]
 8005c0e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	6819      	ldr	r1, [r3, #0]
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	f003 0310 	and.w	r3, r3, #16
 8005c1c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8005c20:	fa02 f303 	lsl.w	r3, r2, r3
 8005c24:	43da      	mvns	r2, r3
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	400a      	ands	r2, r1
 8005c2c:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	f003 0310 	and.w	r3, r3, #16
 8005c3c:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8005c40:	fa02 f303 	lsl.w	r3, r2, r3
 8005c44:	43db      	mvns	r3, r3
 8005c46:	69ba      	ldr	r2, [r7, #24]
 8005c48:	4013      	ands	r3, r2
 8005c4a:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	685b      	ldr	r3, [r3, #4]
 8005c50:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	f003 0310 	and.w	r3, r3, #16
 8005c58:	697a      	ldr	r2, [r7, #20]
 8005c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8005c5e:	69ba      	ldr	r2, [r7, #24]
 8005c60:	4313      	orrs	r3, r2
 8005c62:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	69ba      	ldr	r2, [r7, #24]
 8005c6a:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	6819      	ldr	r1, [r3, #0]
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	f003 0310 	and.w	r3, r3, #16
 8005c78:	22c0      	movs	r2, #192	@ 0xc0
 8005c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8005c7e:	43da      	mvns	r2, r3
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	400a      	ands	r2, r1
 8005c86:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	2201      	movs	r2, #1
 8005c8c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	2200      	movs	r2, #0
 8005c92:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8005c94:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8005c98:	4618      	mov	r0, r3
 8005c9a:	3728      	adds	r7, #40	@ 0x28
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	bd80      	pop	{r7, pc}
 8005ca0:	20008000 	.word	0x20008000

08005ca4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b086      	sub	sp, #24
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8005cac:	f7fe f96a 	bl	8003f84 <HAL_GetTick>
 8005cb0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d101      	bne.n	8005cbc <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8005cb8:	2301      	movs	r3, #1
 8005cba:	e312      	b.n	80062e2 <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	4a66      	ldr	r2, [pc, #408]	@ (8005e5c <HAL_DMA_Init+0x1b8>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d04a      	beq.n	8005d5c <HAL_DMA_Init+0xb8>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	4a65      	ldr	r2, [pc, #404]	@ (8005e60 <HAL_DMA_Init+0x1bc>)
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d045      	beq.n	8005d5c <HAL_DMA_Init+0xb8>
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	4a63      	ldr	r2, [pc, #396]	@ (8005e64 <HAL_DMA_Init+0x1c0>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d040      	beq.n	8005d5c <HAL_DMA_Init+0xb8>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	4a62      	ldr	r2, [pc, #392]	@ (8005e68 <HAL_DMA_Init+0x1c4>)
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d03b      	beq.n	8005d5c <HAL_DMA_Init+0xb8>
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	4a60      	ldr	r2, [pc, #384]	@ (8005e6c <HAL_DMA_Init+0x1c8>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d036      	beq.n	8005d5c <HAL_DMA_Init+0xb8>
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	4a5f      	ldr	r2, [pc, #380]	@ (8005e70 <HAL_DMA_Init+0x1cc>)
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d031      	beq.n	8005d5c <HAL_DMA_Init+0xb8>
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	4a5d      	ldr	r2, [pc, #372]	@ (8005e74 <HAL_DMA_Init+0x1d0>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d02c      	beq.n	8005d5c <HAL_DMA_Init+0xb8>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	4a5c      	ldr	r2, [pc, #368]	@ (8005e78 <HAL_DMA_Init+0x1d4>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d027      	beq.n	8005d5c <HAL_DMA_Init+0xb8>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	4a5a      	ldr	r2, [pc, #360]	@ (8005e7c <HAL_DMA_Init+0x1d8>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d022      	beq.n	8005d5c <HAL_DMA_Init+0xb8>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	4a59      	ldr	r2, [pc, #356]	@ (8005e80 <HAL_DMA_Init+0x1dc>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d01d      	beq.n	8005d5c <HAL_DMA_Init+0xb8>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	4a57      	ldr	r2, [pc, #348]	@ (8005e84 <HAL_DMA_Init+0x1e0>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d018      	beq.n	8005d5c <HAL_DMA_Init+0xb8>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	4a56      	ldr	r2, [pc, #344]	@ (8005e88 <HAL_DMA_Init+0x1e4>)
 8005d30:	4293      	cmp	r3, r2
 8005d32:	d013      	beq.n	8005d5c <HAL_DMA_Init+0xb8>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	4a54      	ldr	r2, [pc, #336]	@ (8005e8c <HAL_DMA_Init+0x1e8>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d00e      	beq.n	8005d5c <HAL_DMA_Init+0xb8>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	4a53      	ldr	r2, [pc, #332]	@ (8005e90 <HAL_DMA_Init+0x1ec>)
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d009      	beq.n	8005d5c <HAL_DMA_Init+0xb8>
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	4a51      	ldr	r2, [pc, #324]	@ (8005e94 <HAL_DMA_Init+0x1f0>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d004      	beq.n	8005d5c <HAL_DMA_Init+0xb8>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	4a50      	ldr	r2, [pc, #320]	@ (8005e98 <HAL_DMA_Init+0x1f4>)
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	d101      	bne.n	8005d60 <HAL_DMA_Init+0xbc>
 8005d5c:	2301      	movs	r3, #1
 8005d5e:	e000      	b.n	8005d62 <HAL_DMA_Init+0xbe>
 8005d60:	2300      	movs	r3, #0
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	f000 813c 	beq.w	8005fe0 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2202      	movs	r2, #2
 8005d6c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2200      	movs	r2, #0
 8005d74:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	4a37      	ldr	r2, [pc, #220]	@ (8005e5c <HAL_DMA_Init+0x1b8>)
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d04a      	beq.n	8005e18 <HAL_DMA_Init+0x174>
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	4a36      	ldr	r2, [pc, #216]	@ (8005e60 <HAL_DMA_Init+0x1bc>)
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d045      	beq.n	8005e18 <HAL_DMA_Init+0x174>
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	4a34      	ldr	r2, [pc, #208]	@ (8005e64 <HAL_DMA_Init+0x1c0>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d040      	beq.n	8005e18 <HAL_DMA_Init+0x174>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	4a33      	ldr	r2, [pc, #204]	@ (8005e68 <HAL_DMA_Init+0x1c4>)
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d03b      	beq.n	8005e18 <HAL_DMA_Init+0x174>
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	4a31      	ldr	r2, [pc, #196]	@ (8005e6c <HAL_DMA_Init+0x1c8>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d036      	beq.n	8005e18 <HAL_DMA_Init+0x174>
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	4a30      	ldr	r2, [pc, #192]	@ (8005e70 <HAL_DMA_Init+0x1cc>)
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d031      	beq.n	8005e18 <HAL_DMA_Init+0x174>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4a2e      	ldr	r2, [pc, #184]	@ (8005e74 <HAL_DMA_Init+0x1d0>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d02c      	beq.n	8005e18 <HAL_DMA_Init+0x174>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	4a2d      	ldr	r2, [pc, #180]	@ (8005e78 <HAL_DMA_Init+0x1d4>)
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d027      	beq.n	8005e18 <HAL_DMA_Init+0x174>
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4a2b      	ldr	r2, [pc, #172]	@ (8005e7c <HAL_DMA_Init+0x1d8>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d022      	beq.n	8005e18 <HAL_DMA_Init+0x174>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	4a2a      	ldr	r2, [pc, #168]	@ (8005e80 <HAL_DMA_Init+0x1dc>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d01d      	beq.n	8005e18 <HAL_DMA_Init+0x174>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4a28      	ldr	r2, [pc, #160]	@ (8005e84 <HAL_DMA_Init+0x1e0>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d018      	beq.n	8005e18 <HAL_DMA_Init+0x174>
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	4a27      	ldr	r2, [pc, #156]	@ (8005e88 <HAL_DMA_Init+0x1e4>)
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d013      	beq.n	8005e18 <HAL_DMA_Init+0x174>
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	4a25      	ldr	r2, [pc, #148]	@ (8005e8c <HAL_DMA_Init+0x1e8>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d00e      	beq.n	8005e18 <HAL_DMA_Init+0x174>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	4a24      	ldr	r2, [pc, #144]	@ (8005e90 <HAL_DMA_Init+0x1ec>)
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d009      	beq.n	8005e18 <HAL_DMA_Init+0x174>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	4a22      	ldr	r2, [pc, #136]	@ (8005e94 <HAL_DMA_Init+0x1f0>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d004      	beq.n	8005e18 <HAL_DMA_Init+0x174>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	4a21      	ldr	r2, [pc, #132]	@ (8005e98 <HAL_DMA_Init+0x1f4>)
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d108      	bne.n	8005e2a <HAL_DMA_Init+0x186>
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	681a      	ldr	r2, [r3, #0]
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f022 0201 	bic.w	r2, r2, #1
 8005e26:	601a      	str	r2, [r3, #0]
 8005e28:	e007      	b.n	8005e3a <HAL_DMA_Init+0x196>
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	681a      	ldr	r2, [r3, #0]
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f022 0201 	bic.w	r2, r2, #1
 8005e38:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005e3a:	e02f      	b.n	8005e9c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005e3c:	f7fe f8a2 	bl	8003f84 <HAL_GetTick>
 8005e40:	4602      	mov	r2, r0
 8005e42:	693b      	ldr	r3, [r7, #16]
 8005e44:	1ad3      	subs	r3, r2, r3
 8005e46:	2b05      	cmp	r3, #5
 8005e48:	d928      	bls.n	8005e9c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2220      	movs	r2, #32
 8005e4e:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2203      	movs	r2, #3
 8005e54:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8005e58:	2301      	movs	r3, #1
 8005e5a:	e242      	b.n	80062e2 <HAL_DMA_Init+0x63e>
 8005e5c:	40020010 	.word	0x40020010
 8005e60:	40020028 	.word	0x40020028
 8005e64:	40020040 	.word	0x40020040
 8005e68:	40020058 	.word	0x40020058
 8005e6c:	40020070 	.word	0x40020070
 8005e70:	40020088 	.word	0x40020088
 8005e74:	400200a0 	.word	0x400200a0
 8005e78:	400200b8 	.word	0x400200b8
 8005e7c:	40020410 	.word	0x40020410
 8005e80:	40020428 	.word	0x40020428
 8005e84:	40020440 	.word	0x40020440
 8005e88:	40020458 	.word	0x40020458
 8005e8c:	40020470 	.word	0x40020470
 8005e90:	40020488 	.word	0x40020488
 8005e94:	400204a0 	.word	0x400204a0
 8005e98:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f003 0301 	and.w	r3, r3, #1
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d1c8      	bne.n	8005e3c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005eb2:	697a      	ldr	r2, [r7, #20]
 8005eb4:	4b83      	ldr	r3, [pc, #524]	@ (80060c4 <HAL_DMA_Init+0x420>)
 8005eb6:	4013      	ands	r3, r2
 8005eb8:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8005ec2:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	691b      	ldr	r3, [r3, #16]
 8005ec8:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005ece:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	699b      	ldr	r3, [r3, #24]
 8005ed4:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005eda:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6a1b      	ldr	r3, [r3, #32]
 8005ee0:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8005ee2:	697a      	ldr	r2, [r7, #20]
 8005ee4:	4313      	orrs	r3, r2
 8005ee6:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005eec:	2b04      	cmp	r3, #4
 8005eee:	d107      	bne.n	8005f00 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ef8:	4313      	orrs	r3, r2
 8005efa:	697a      	ldr	r2, [r7, #20]
 8005efc:	4313      	orrs	r3, r2
 8005efe:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	685b      	ldr	r3, [r3, #4]
 8005f04:	2b28      	cmp	r3, #40	@ 0x28
 8005f06:	d903      	bls.n	8005f10 <HAL_DMA_Init+0x26c>
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	685b      	ldr	r3, [r3, #4]
 8005f0c:	2b2e      	cmp	r3, #46	@ 0x2e
 8005f0e:	d91f      	bls.n	8005f50 <HAL_DMA_Init+0x2ac>
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	685b      	ldr	r3, [r3, #4]
 8005f14:	2b3e      	cmp	r3, #62	@ 0x3e
 8005f16:	d903      	bls.n	8005f20 <HAL_DMA_Init+0x27c>
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	685b      	ldr	r3, [r3, #4]
 8005f1c:	2b42      	cmp	r3, #66	@ 0x42
 8005f1e:	d917      	bls.n	8005f50 <HAL_DMA_Init+0x2ac>
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	685b      	ldr	r3, [r3, #4]
 8005f24:	2b46      	cmp	r3, #70	@ 0x46
 8005f26:	d903      	bls.n	8005f30 <HAL_DMA_Init+0x28c>
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	685b      	ldr	r3, [r3, #4]
 8005f2c:	2b48      	cmp	r3, #72	@ 0x48
 8005f2e:	d90f      	bls.n	8005f50 <HAL_DMA_Init+0x2ac>
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	685b      	ldr	r3, [r3, #4]
 8005f34:	2b4e      	cmp	r3, #78	@ 0x4e
 8005f36:	d903      	bls.n	8005f40 <HAL_DMA_Init+0x29c>
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	685b      	ldr	r3, [r3, #4]
 8005f3c:	2b52      	cmp	r3, #82	@ 0x52
 8005f3e:	d907      	bls.n	8005f50 <HAL_DMA_Init+0x2ac>
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	685b      	ldr	r3, [r3, #4]
 8005f44:	2b73      	cmp	r3, #115	@ 0x73
 8005f46:	d905      	bls.n	8005f54 <HAL_DMA_Init+0x2b0>
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	685b      	ldr	r3, [r3, #4]
 8005f4c:	2b77      	cmp	r3, #119	@ 0x77
 8005f4e:	d801      	bhi.n	8005f54 <HAL_DMA_Init+0x2b0>
 8005f50:	2301      	movs	r3, #1
 8005f52:	e000      	b.n	8005f56 <HAL_DMA_Init+0x2b2>
 8005f54:	2300      	movs	r3, #0
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d003      	beq.n	8005f62 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8005f5a:	697b      	ldr	r3, [r7, #20]
 8005f5c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005f60:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	697a      	ldr	r2, [r7, #20]
 8005f68:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	695b      	ldr	r3, [r3, #20]
 8005f70:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005f72:	697b      	ldr	r3, [r7, #20]
 8005f74:	f023 0307 	bic.w	r3, r3, #7
 8005f78:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f7e:	697a      	ldr	r2, [r7, #20]
 8005f80:	4313      	orrs	r3, r2
 8005f82:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f88:	2b04      	cmp	r3, #4
 8005f8a:	d117      	bne.n	8005fbc <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f90:	697a      	ldr	r2, [r7, #20]
 8005f92:	4313      	orrs	r3, r2
 8005f94:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d00e      	beq.n	8005fbc <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005f9e:	6878      	ldr	r0, [r7, #4]
 8005fa0:	f001 f9b4 	bl	800730c <DMA_CheckFifoParam>
 8005fa4:	4603      	mov	r3, r0
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d008      	beq.n	8005fbc <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	2240      	movs	r2, #64	@ 0x40
 8005fae:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2201      	movs	r2, #1
 8005fb4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8005fb8:	2301      	movs	r3, #1
 8005fba:	e192      	b.n	80062e2 <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	697a      	ldr	r2, [r7, #20]
 8005fc2:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005fc4:	6878      	ldr	r0, [r7, #4]
 8005fc6:	f001 f8ef 	bl	80071a8 <DMA_CalcBaseAndBitshift>
 8005fca:	4603      	mov	r3, r0
 8005fcc:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005fd2:	f003 031f 	and.w	r3, r3, #31
 8005fd6:	223f      	movs	r2, #63	@ 0x3f
 8005fd8:	409a      	lsls	r2, r3
 8005fda:	68bb      	ldr	r3, [r7, #8]
 8005fdc:	609a      	str	r2, [r3, #8]
 8005fde:	e0c8      	b.n	8006172 <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	4a38      	ldr	r2, [pc, #224]	@ (80060c8 <HAL_DMA_Init+0x424>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d022      	beq.n	8006030 <HAL_DMA_Init+0x38c>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	4a37      	ldr	r2, [pc, #220]	@ (80060cc <HAL_DMA_Init+0x428>)
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d01d      	beq.n	8006030 <HAL_DMA_Init+0x38c>
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	4a35      	ldr	r2, [pc, #212]	@ (80060d0 <HAL_DMA_Init+0x42c>)
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d018      	beq.n	8006030 <HAL_DMA_Init+0x38c>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	4a34      	ldr	r2, [pc, #208]	@ (80060d4 <HAL_DMA_Init+0x430>)
 8006004:	4293      	cmp	r3, r2
 8006006:	d013      	beq.n	8006030 <HAL_DMA_Init+0x38c>
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	4a32      	ldr	r2, [pc, #200]	@ (80060d8 <HAL_DMA_Init+0x434>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d00e      	beq.n	8006030 <HAL_DMA_Init+0x38c>
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	4a31      	ldr	r2, [pc, #196]	@ (80060dc <HAL_DMA_Init+0x438>)
 8006018:	4293      	cmp	r3, r2
 800601a:	d009      	beq.n	8006030 <HAL_DMA_Init+0x38c>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	4a2f      	ldr	r2, [pc, #188]	@ (80060e0 <HAL_DMA_Init+0x43c>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d004      	beq.n	8006030 <HAL_DMA_Init+0x38c>
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	4a2e      	ldr	r2, [pc, #184]	@ (80060e4 <HAL_DMA_Init+0x440>)
 800602c:	4293      	cmp	r3, r2
 800602e:	d101      	bne.n	8006034 <HAL_DMA_Init+0x390>
 8006030:	2301      	movs	r3, #1
 8006032:	e000      	b.n	8006036 <HAL_DMA_Init+0x392>
 8006034:	2300      	movs	r3, #0
 8006036:	2b00      	cmp	r3, #0
 8006038:	f000 8092 	beq.w	8006160 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	4a21      	ldr	r2, [pc, #132]	@ (80060c8 <HAL_DMA_Init+0x424>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d021      	beq.n	800608a <HAL_DMA_Init+0x3e6>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	4a20      	ldr	r2, [pc, #128]	@ (80060cc <HAL_DMA_Init+0x428>)
 800604c:	4293      	cmp	r3, r2
 800604e:	d01c      	beq.n	800608a <HAL_DMA_Init+0x3e6>
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	4a1e      	ldr	r2, [pc, #120]	@ (80060d0 <HAL_DMA_Init+0x42c>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d017      	beq.n	800608a <HAL_DMA_Init+0x3e6>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	4a1d      	ldr	r2, [pc, #116]	@ (80060d4 <HAL_DMA_Init+0x430>)
 8006060:	4293      	cmp	r3, r2
 8006062:	d012      	beq.n	800608a <HAL_DMA_Init+0x3e6>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	4a1b      	ldr	r2, [pc, #108]	@ (80060d8 <HAL_DMA_Init+0x434>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d00d      	beq.n	800608a <HAL_DMA_Init+0x3e6>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	4a1a      	ldr	r2, [pc, #104]	@ (80060dc <HAL_DMA_Init+0x438>)
 8006074:	4293      	cmp	r3, r2
 8006076:	d008      	beq.n	800608a <HAL_DMA_Init+0x3e6>
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	4a18      	ldr	r2, [pc, #96]	@ (80060e0 <HAL_DMA_Init+0x43c>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d003      	beq.n	800608a <HAL_DMA_Init+0x3e6>
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	4a17      	ldr	r2, [pc, #92]	@ (80060e4 <HAL_DMA_Init+0x440>)
 8006088:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2202      	movs	r2, #2
 800608e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2200      	movs	r2, #0
 8006096:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80060a2:	697a      	ldr	r2, [r7, #20]
 80060a4:	4b10      	ldr	r3, [pc, #64]	@ (80060e8 <HAL_DMA_Init+0x444>)
 80060a6:	4013      	ands	r3, r2
 80060a8:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	689b      	ldr	r3, [r3, #8]
 80060ae:	2b40      	cmp	r3, #64	@ 0x40
 80060b0:	d01c      	beq.n	80060ec <HAL_DMA_Init+0x448>
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	689b      	ldr	r3, [r3, #8]
 80060b6:	2b80      	cmp	r3, #128	@ 0x80
 80060b8:	d102      	bne.n	80060c0 <HAL_DMA_Init+0x41c>
 80060ba:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80060be:	e016      	b.n	80060ee <HAL_DMA_Init+0x44a>
 80060c0:	2300      	movs	r3, #0
 80060c2:	e014      	b.n	80060ee <HAL_DMA_Init+0x44a>
 80060c4:	fe10803f 	.word	0xfe10803f
 80060c8:	58025408 	.word	0x58025408
 80060cc:	5802541c 	.word	0x5802541c
 80060d0:	58025430 	.word	0x58025430
 80060d4:	58025444 	.word	0x58025444
 80060d8:	58025458 	.word	0x58025458
 80060dc:	5802546c 	.word	0x5802546c
 80060e0:	58025480 	.word	0x58025480
 80060e4:	58025494 	.word	0x58025494
 80060e8:	fffe000f 	.word	0xfffe000f
 80060ec:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80060ee:	687a      	ldr	r2, [r7, #4]
 80060f0:	68d2      	ldr	r2, [r2, #12]
 80060f2:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80060f4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	691b      	ldr	r3, [r3, #16]
 80060fa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80060fc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	695b      	ldr	r3, [r3, #20]
 8006102:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8006104:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	699b      	ldr	r3, [r3, #24]
 800610a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800610c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	69db      	ldr	r3, [r3, #28]
 8006112:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8006114:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6a1b      	ldr	r3, [r3, #32]
 800611a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800611c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800611e:	697a      	ldr	r2, [r7, #20]
 8006120:	4313      	orrs	r3, r2
 8006122:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	697a      	ldr	r2, [r7, #20]
 800612a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	461a      	mov	r2, r3
 8006132:	4b6e      	ldr	r3, [pc, #440]	@ (80062ec <HAL_DMA_Init+0x648>)
 8006134:	4413      	add	r3, r2
 8006136:	4a6e      	ldr	r2, [pc, #440]	@ (80062f0 <HAL_DMA_Init+0x64c>)
 8006138:	fba2 2303 	umull	r2, r3, r2, r3
 800613c:	091b      	lsrs	r3, r3, #4
 800613e:	009a      	lsls	r2, r3, #2
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006144:	6878      	ldr	r0, [r7, #4]
 8006146:	f001 f82f 	bl	80071a8 <DMA_CalcBaseAndBitshift>
 800614a:	4603      	mov	r3, r0
 800614c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006152:	f003 031f 	and.w	r3, r3, #31
 8006156:	2201      	movs	r2, #1
 8006158:	409a      	lsls	r2, r3
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	605a      	str	r2, [r3, #4]
 800615e:	e008      	b.n	8006172 <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2240      	movs	r2, #64	@ 0x40
 8006164:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2203      	movs	r2, #3
 800616a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 800616e:	2301      	movs	r3, #1
 8006170:	e0b7      	b.n	80062e2 <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	4a5f      	ldr	r2, [pc, #380]	@ (80062f4 <HAL_DMA_Init+0x650>)
 8006178:	4293      	cmp	r3, r2
 800617a:	d072      	beq.n	8006262 <HAL_DMA_Init+0x5be>
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	4a5d      	ldr	r2, [pc, #372]	@ (80062f8 <HAL_DMA_Init+0x654>)
 8006182:	4293      	cmp	r3, r2
 8006184:	d06d      	beq.n	8006262 <HAL_DMA_Init+0x5be>
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	4a5c      	ldr	r2, [pc, #368]	@ (80062fc <HAL_DMA_Init+0x658>)
 800618c:	4293      	cmp	r3, r2
 800618e:	d068      	beq.n	8006262 <HAL_DMA_Init+0x5be>
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	4a5a      	ldr	r2, [pc, #360]	@ (8006300 <HAL_DMA_Init+0x65c>)
 8006196:	4293      	cmp	r3, r2
 8006198:	d063      	beq.n	8006262 <HAL_DMA_Init+0x5be>
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	4a59      	ldr	r2, [pc, #356]	@ (8006304 <HAL_DMA_Init+0x660>)
 80061a0:	4293      	cmp	r3, r2
 80061a2:	d05e      	beq.n	8006262 <HAL_DMA_Init+0x5be>
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	4a57      	ldr	r2, [pc, #348]	@ (8006308 <HAL_DMA_Init+0x664>)
 80061aa:	4293      	cmp	r3, r2
 80061ac:	d059      	beq.n	8006262 <HAL_DMA_Init+0x5be>
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	4a56      	ldr	r2, [pc, #344]	@ (800630c <HAL_DMA_Init+0x668>)
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d054      	beq.n	8006262 <HAL_DMA_Init+0x5be>
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	4a54      	ldr	r2, [pc, #336]	@ (8006310 <HAL_DMA_Init+0x66c>)
 80061be:	4293      	cmp	r3, r2
 80061c0:	d04f      	beq.n	8006262 <HAL_DMA_Init+0x5be>
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	4a53      	ldr	r2, [pc, #332]	@ (8006314 <HAL_DMA_Init+0x670>)
 80061c8:	4293      	cmp	r3, r2
 80061ca:	d04a      	beq.n	8006262 <HAL_DMA_Init+0x5be>
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	4a51      	ldr	r2, [pc, #324]	@ (8006318 <HAL_DMA_Init+0x674>)
 80061d2:	4293      	cmp	r3, r2
 80061d4:	d045      	beq.n	8006262 <HAL_DMA_Init+0x5be>
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	4a50      	ldr	r2, [pc, #320]	@ (800631c <HAL_DMA_Init+0x678>)
 80061dc:	4293      	cmp	r3, r2
 80061de:	d040      	beq.n	8006262 <HAL_DMA_Init+0x5be>
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	4a4e      	ldr	r2, [pc, #312]	@ (8006320 <HAL_DMA_Init+0x67c>)
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d03b      	beq.n	8006262 <HAL_DMA_Init+0x5be>
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	4a4d      	ldr	r2, [pc, #308]	@ (8006324 <HAL_DMA_Init+0x680>)
 80061f0:	4293      	cmp	r3, r2
 80061f2:	d036      	beq.n	8006262 <HAL_DMA_Init+0x5be>
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	4a4b      	ldr	r2, [pc, #300]	@ (8006328 <HAL_DMA_Init+0x684>)
 80061fa:	4293      	cmp	r3, r2
 80061fc:	d031      	beq.n	8006262 <HAL_DMA_Init+0x5be>
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	4a4a      	ldr	r2, [pc, #296]	@ (800632c <HAL_DMA_Init+0x688>)
 8006204:	4293      	cmp	r3, r2
 8006206:	d02c      	beq.n	8006262 <HAL_DMA_Init+0x5be>
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	4a48      	ldr	r2, [pc, #288]	@ (8006330 <HAL_DMA_Init+0x68c>)
 800620e:	4293      	cmp	r3, r2
 8006210:	d027      	beq.n	8006262 <HAL_DMA_Init+0x5be>
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	4a47      	ldr	r2, [pc, #284]	@ (8006334 <HAL_DMA_Init+0x690>)
 8006218:	4293      	cmp	r3, r2
 800621a:	d022      	beq.n	8006262 <HAL_DMA_Init+0x5be>
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	4a45      	ldr	r2, [pc, #276]	@ (8006338 <HAL_DMA_Init+0x694>)
 8006222:	4293      	cmp	r3, r2
 8006224:	d01d      	beq.n	8006262 <HAL_DMA_Init+0x5be>
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	4a44      	ldr	r2, [pc, #272]	@ (800633c <HAL_DMA_Init+0x698>)
 800622c:	4293      	cmp	r3, r2
 800622e:	d018      	beq.n	8006262 <HAL_DMA_Init+0x5be>
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	4a42      	ldr	r2, [pc, #264]	@ (8006340 <HAL_DMA_Init+0x69c>)
 8006236:	4293      	cmp	r3, r2
 8006238:	d013      	beq.n	8006262 <HAL_DMA_Init+0x5be>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	4a41      	ldr	r2, [pc, #260]	@ (8006344 <HAL_DMA_Init+0x6a0>)
 8006240:	4293      	cmp	r3, r2
 8006242:	d00e      	beq.n	8006262 <HAL_DMA_Init+0x5be>
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	4a3f      	ldr	r2, [pc, #252]	@ (8006348 <HAL_DMA_Init+0x6a4>)
 800624a:	4293      	cmp	r3, r2
 800624c:	d009      	beq.n	8006262 <HAL_DMA_Init+0x5be>
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	4a3e      	ldr	r2, [pc, #248]	@ (800634c <HAL_DMA_Init+0x6a8>)
 8006254:	4293      	cmp	r3, r2
 8006256:	d004      	beq.n	8006262 <HAL_DMA_Init+0x5be>
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	4a3c      	ldr	r2, [pc, #240]	@ (8006350 <HAL_DMA_Init+0x6ac>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d101      	bne.n	8006266 <HAL_DMA_Init+0x5c2>
 8006262:	2301      	movs	r3, #1
 8006264:	e000      	b.n	8006268 <HAL_DMA_Init+0x5c4>
 8006266:	2300      	movs	r3, #0
 8006268:	2b00      	cmp	r3, #0
 800626a:	d032      	beq.n	80062d2 <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800626c:	6878      	ldr	r0, [r7, #4]
 800626e:	f001 f8c9 	bl	8007404 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	689b      	ldr	r3, [r3, #8]
 8006276:	2b80      	cmp	r3, #128	@ 0x80
 8006278:	d102      	bne.n	8006280 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	2200      	movs	r2, #0
 800627e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	685a      	ldr	r2, [r3, #4]
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006288:	b2d2      	uxtb	r2, r2
 800628a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006290:	687a      	ldr	r2, [r7, #4]
 8006292:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8006294:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	685b      	ldr	r3, [r3, #4]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d010      	beq.n	80062c0 <HAL_DMA_Init+0x61c>
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	685b      	ldr	r3, [r3, #4]
 80062a2:	2b08      	cmp	r3, #8
 80062a4:	d80c      	bhi.n	80062c0 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80062a6:	6878      	ldr	r0, [r7, #4]
 80062a8:	f001 f946 	bl	8007538 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80062b0:	2200      	movs	r2, #0
 80062b2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062b8:	687a      	ldr	r2, [r7, #4]
 80062ba:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80062bc:	605a      	str	r2, [r3, #4]
 80062be:	e008      	b.n	80062d2 <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2200      	movs	r2, #0
 80062c4:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2200      	movs	r2, #0
 80062ca:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2200      	movs	r2, #0
 80062d0:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	2200      	movs	r2, #0
 80062d6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2201      	movs	r2, #1
 80062dc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80062e0:	2300      	movs	r3, #0
}
 80062e2:	4618      	mov	r0, r3
 80062e4:	3718      	adds	r7, #24
 80062e6:	46bd      	mov	sp, r7
 80062e8:	bd80      	pop	{r7, pc}
 80062ea:	bf00      	nop
 80062ec:	a7fdabf8 	.word	0xa7fdabf8
 80062f0:	cccccccd 	.word	0xcccccccd
 80062f4:	40020010 	.word	0x40020010
 80062f8:	40020028 	.word	0x40020028
 80062fc:	40020040 	.word	0x40020040
 8006300:	40020058 	.word	0x40020058
 8006304:	40020070 	.word	0x40020070
 8006308:	40020088 	.word	0x40020088
 800630c:	400200a0 	.word	0x400200a0
 8006310:	400200b8 	.word	0x400200b8
 8006314:	40020410 	.word	0x40020410
 8006318:	40020428 	.word	0x40020428
 800631c:	40020440 	.word	0x40020440
 8006320:	40020458 	.word	0x40020458
 8006324:	40020470 	.word	0x40020470
 8006328:	40020488 	.word	0x40020488
 800632c:	400204a0 	.word	0x400204a0
 8006330:	400204b8 	.word	0x400204b8
 8006334:	58025408 	.word	0x58025408
 8006338:	5802541c 	.word	0x5802541c
 800633c:	58025430 	.word	0x58025430
 8006340:	58025444 	.word	0x58025444
 8006344:	58025458 	.word	0x58025458
 8006348:	5802546c 	.word	0x5802546c
 800634c:	58025480 	.word	0x58025480
 8006350:	58025494 	.word	0x58025494

08006354 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006354:	b580      	push	{r7, lr}
 8006356:	b08a      	sub	sp, #40	@ 0x28
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800635c:	2300      	movs	r3, #0
 800635e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006360:	4b67      	ldr	r3, [pc, #412]	@ (8006500 <HAL_DMA_IRQHandler+0x1ac>)
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	4a67      	ldr	r2, [pc, #412]	@ (8006504 <HAL_DMA_IRQHandler+0x1b0>)
 8006366:	fba2 2303 	umull	r2, r3, r2, r3
 800636a:	0a9b      	lsrs	r3, r3, #10
 800636c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006372:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006378:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800637a:	6a3b      	ldr	r3, [r7, #32]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8006380:	69fb      	ldr	r3, [r7, #28]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	4a5f      	ldr	r2, [pc, #380]	@ (8006508 <HAL_DMA_IRQHandler+0x1b4>)
 800638c:	4293      	cmp	r3, r2
 800638e:	d04a      	beq.n	8006426 <HAL_DMA_IRQHandler+0xd2>
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	4a5d      	ldr	r2, [pc, #372]	@ (800650c <HAL_DMA_IRQHandler+0x1b8>)
 8006396:	4293      	cmp	r3, r2
 8006398:	d045      	beq.n	8006426 <HAL_DMA_IRQHandler+0xd2>
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	4a5c      	ldr	r2, [pc, #368]	@ (8006510 <HAL_DMA_IRQHandler+0x1bc>)
 80063a0:	4293      	cmp	r3, r2
 80063a2:	d040      	beq.n	8006426 <HAL_DMA_IRQHandler+0xd2>
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	4a5a      	ldr	r2, [pc, #360]	@ (8006514 <HAL_DMA_IRQHandler+0x1c0>)
 80063aa:	4293      	cmp	r3, r2
 80063ac:	d03b      	beq.n	8006426 <HAL_DMA_IRQHandler+0xd2>
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	4a59      	ldr	r2, [pc, #356]	@ (8006518 <HAL_DMA_IRQHandler+0x1c4>)
 80063b4:	4293      	cmp	r3, r2
 80063b6:	d036      	beq.n	8006426 <HAL_DMA_IRQHandler+0xd2>
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	4a57      	ldr	r2, [pc, #348]	@ (800651c <HAL_DMA_IRQHandler+0x1c8>)
 80063be:	4293      	cmp	r3, r2
 80063c0:	d031      	beq.n	8006426 <HAL_DMA_IRQHandler+0xd2>
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	4a56      	ldr	r2, [pc, #344]	@ (8006520 <HAL_DMA_IRQHandler+0x1cc>)
 80063c8:	4293      	cmp	r3, r2
 80063ca:	d02c      	beq.n	8006426 <HAL_DMA_IRQHandler+0xd2>
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	4a54      	ldr	r2, [pc, #336]	@ (8006524 <HAL_DMA_IRQHandler+0x1d0>)
 80063d2:	4293      	cmp	r3, r2
 80063d4:	d027      	beq.n	8006426 <HAL_DMA_IRQHandler+0xd2>
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	4a53      	ldr	r2, [pc, #332]	@ (8006528 <HAL_DMA_IRQHandler+0x1d4>)
 80063dc:	4293      	cmp	r3, r2
 80063de:	d022      	beq.n	8006426 <HAL_DMA_IRQHandler+0xd2>
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	4a51      	ldr	r2, [pc, #324]	@ (800652c <HAL_DMA_IRQHandler+0x1d8>)
 80063e6:	4293      	cmp	r3, r2
 80063e8:	d01d      	beq.n	8006426 <HAL_DMA_IRQHandler+0xd2>
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	4a50      	ldr	r2, [pc, #320]	@ (8006530 <HAL_DMA_IRQHandler+0x1dc>)
 80063f0:	4293      	cmp	r3, r2
 80063f2:	d018      	beq.n	8006426 <HAL_DMA_IRQHandler+0xd2>
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	4a4e      	ldr	r2, [pc, #312]	@ (8006534 <HAL_DMA_IRQHandler+0x1e0>)
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d013      	beq.n	8006426 <HAL_DMA_IRQHandler+0xd2>
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	4a4d      	ldr	r2, [pc, #308]	@ (8006538 <HAL_DMA_IRQHandler+0x1e4>)
 8006404:	4293      	cmp	r3, r2
 8006406:	d00e      	beq.n	8006426 <HAL_DMA_IRQHandler+0xd2>
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	4a4b      	ldr	r2, [pc, #300]	@ (800653c <HAL_DMA_IRQHandler+0x1e8>)
 800640e:	4293      	cmp	r3, r2
 8006410:	d009      	beq.n	8006426 <HAL_DMA_IRQHandler+0xd2>
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	4a4a      	ldr	r2, [pc, #296]	@ (8006540 <HAL_DMA_IRQHandler+0x1ec>)
 8006418:	4293      	cmp	r3, r2
 800641a:	d004      	beq.n	8006426 <HAL_DMA_IRQHandler+0xd2>
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	4a48      	ldr	r2, [pc, #288]	@ (8006544 <HAL_DMA_IRQHandler+0x1f0>)
 8006422:	4293      	cmp	r3, r2
 8006424:	d101      	bne.n	800642a <HAL_DMA_IRQHandler+0xd6>
 8006426:	2301      	movs	r3, #1
 8006428:	e000      	b.n	800642c <HAL_DMA_IRQHandler+0xd8>
 800642a:	2300      	movs	r3, #0
 800642c:	2b00      	cmp	r3, #0
 800642e:	f000 842b 	beq.w	8006c88 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006436:	f003 031f 	and.w	r3, r3, #31
 800643a:	2208      	movs	r2, #8
 800643c:	409a      	lsls	r2, r3
 800643e:	69bb      	ldr	r3, [r7, #24]
 8006440:	4013      	ands	r3, r2
 8006442:	2b00      	cmp	r3, #0
 8006444:	f000 80a2 	beq.w	800658c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	4a2e      	ldr	r2, [pc, #184]	@ (8006508 <HAL_DMA_IRQHandler+0x1b4>)
 800644e:	4293      	cmp	r3, r2
 8006450:	d04a      	beq.n	80064e8 <HAL_DMA_IRQHandler+0x194>
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	4a2d      	ldr	r2, [pc, #180]	@ (800650c <HAL_DMA_IRQHandler+0x1b8>)
 8006458:	4293      	cmp	r3, r2
 800645a:	d045      	beq.n	80064e8 <HAL_DMA_IRQHandler+0x194>
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	4a2b      	ldr	r2, [pc, #172]	@ (8006510 <HAL_DMA_IRQHandler+0x1bc>)
 8006462:	4293      	cmp	r3, r2
 8006464:	d040      	beq.n	80064e8 <HAL_DMA_IRQHandler+0x194>
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	4a2a      	ldr	r2, [pc, #168]	@ (8006514 <HAL_DMA_IRQHandler+0x1c0>)
 800646c:	4293      	cmp	r3, r2
 800646e:	d03b      	beq.n	80064e8 <HAL_DMA_IRQHandler+0x194>
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	4a28      	ldr	r2, [pc, #160]	@ (8006518 <HAL_DMA_IRQHandler+0x1c4>)
 8006476:	4293      	cmp	r3, r2
 8006478:	d036      	beq.n	80064e8 <HAL_DMA_IRQHandler+0x194>
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	4a27      	ldr	r2, [pc, #156]	@ (800651c <HAL_DMA_IRQHandler+0x1c8>)
 8006480:	4293      	cmp	r3, r2
 8006482:	d031      	beq.n	80064e8 <HAL_DMA_IRQHandler+0x194>
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	4a25      	ldr	r2, [pc, #148]	@ (8006520 <HAL_DMA_IRQHandler+0x1cc>)
 800648a:	4293      	cmp	r3, r2
 800648c:	d02c      	beq.n	80064e8 <HAL_DMA_IRQHandler+0x194>
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	4a24      	ldr	r2, [pc, #144]	@ (8006524 <HAL_DMA_IRQHandler+0x1d0>)
 8006494:	4293      	cmp	r3, r2
 8006496:	d027      	beq.n	80064e8 <HAL_DMA_IRQHandler+0x194>
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	4a22      	ldr	r2, [pc, #136]	@ (8006528 <HAL_DMA_IRQHandler+0x1d4>)
 800649e:	4293      	cmp	r3, r2
 80064a0:	d022      	beq.n	80064e8 <HAL_DMA_IRQHandler+0x194>
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	4a21      	ldr	r2, [pc, #132]	@ (800652c <HAL_DMA_IRQHandler+0x1d8>)
 80064a8:	4293      	cmp	r3, r2
 80064aa:	d01d      	beq.n	80064e8 <HAL_DMA_IRQHandler+0x194>
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	4a1f      	ldr	r2, [pc, #124]	@ (8006530 <HAL_DMA_IRQHandler+0x1dc>)
 80064b2:	4293      	cmp	r3, r2
 80064b4:	d018      	beq.n	80064e8 <HAL_DMA_IRQHandler+0x194>
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	4a1e      	ldr	r2, [pc, #120]	@ (8006534 <HAL_DMA_IRQHandler+0x1e0>)
 80064bc:	4293      	cmp	r3, r2
 80064be:	d013      	beq.n	80064e8 <HAL_DMA_IRQHandler+0x194>
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	4a1c      	ldr	r2, [pc, #112]	@ (8006538 <HAL_DMA_IRQHandler+0x1e4>)
 80064c6:	4293      	cmp	r3, r2
 80064c8:	d00e      	beq.n	80064e8 <HAL_DMA_IRQHandler+0x194>
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	4a1b      	ldr	r2, [pc, #108]	@ (800653c <HAL_DMA_IRQHandler+0x1e8>)
 80064d0:	4293      	cmp	r3, r2
 80064d2:	d009      	beq.n	80064e8 <HAL_DMA_IRQHandler+0x194>
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	4a19      	ldr	r2, [pc, #100]	@ (8006540 <HAL_DMA_IRQHandler+0x1ec>)
 80064da:	4293      	cmp	r3, r2
 80064dc:	d004      	beq.n	80064e8 <HAL_DMA_IRQHandler+0x194>
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	4a18      	ldr	r2, [pc, #96]	@ (8006544 <HAL_DMA_IRQHandler+0x1f0>)
 80064e4:	4293      	cmp	r3, r2
 80064e6:	d12f      	bne.n	8006548 <HAL_DMA_IRQHandler+0x1f4>
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f003 0304 	and.w	r3, r3, #4
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	bf14      	ite	ne
 80064f6:	2301      	movne	r3, #1
 80064f8:	2300      	moveq	r3, #0
 80064fa:	b2db      	uxtb	r3, r3
 80064fc:	e02e      	b.n	800655c <HAL_DMA_IRQHandler+0x208>
 80064fe:	bf00      	nop
 8006500:	24000000 	.word	0x24000000
 8006504:	1b4e81b5 	.word	0x1b4e81b5
 8006508:	40020010 	.word	0x40020010
 800650c:	40020028 	.word	0x40020028
 8006510:	40020040 	.word	0x40020040
 8006514:	40020058 	.word	0x40020058
 8006518:	40020070 	.word	0x40020070
 800651c:	40020088 	.word	0x40020088
 8006520:	400200a0 	.word	0x400200a0
 8006524:	400200b8 	.word	0x400200b8
 8006528:	40020410 	.word	0x40020410
 800652c:	40020428 	.word	0x40020428
 8006530:	40020440 	.word	0x40020440
 8006534:	40020458 	.word	0x40020458
 8006538:	40020470 	.word	0x40020470
 800653c:	40020488 	.word	0x40020488
 8006540:	400204a0 	.word	0x400204a0
 8006544:	400204b8 	.word	0x400204b8
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f003 0308 	and.w	r3, r3, #8
 8006552:	2b00      	cmp	r3, #0
 8006554:	bf14      	ite	ne
 8006556:	2301      	movne	r3, #1
 8006558:	2300      	moveq	r3, #0
 800655a:	b2db      	uxtb	r3, r3
 800655c:	2b00      	cmp	r3, #0
 800655e:	d015      	beq.n	800658c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	681a      	ldr	r2, [r3, #0]
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f022 0204 	bic.w	r2, r2, #4
 800656e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006574:	f003 031f 	and.w	r3, r3, #31
 8006578:	2208      	movs	r2, #8
 800657a:	409a      	lsls	r2, r3
 800657c:	6a3b      	ldr	r3, [r7, #32]
 800657e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006584:	f043 0201 	orr.w	r2, r3, #1
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006590:	f003 031f 	and.w	r3, r3, #31
 8006594:	69ba      	ldr	r2, [r7, #24]
 8006596:	fa22 f303 	lsr.w	r3, r2, r3
 800659a:	f003 0301 	and.w	r3, r3, #1
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d06e      	beq.n	8006680 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	4a69      	ldr	r2, [pc, #420]	@ (800674c <HAL_DMA_IRQHandler+0x3f8>)
 80065a8:	4293      	cmp	r3, r2
 80065aa:	d04a      	beq.n	8006642 <HAL_DMA_IRQHandler+0x2ee>
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	4a67      	ldr	r2, [pc, #412]	@ (8006750 <HAL_DMA_IRQHandler+0x3fc>)
 80065b2:	4293      	cmp	r3, r2
 80065b4:	d045      	beq.n	8006642 <HAL_DMA_IRQHandler+0x2ee>
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	4a66      	ldr	r2, [pc, #408]	@ (8006754 <HAL_DMA_IRQHandler+0x400>)
 80065bc:	4293      	cmp	r3, r2
 80065be:	d040      	beq.n	8006642 <HAL_DMA_IRQHandler+0x2ee>
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	4a64      	ldr	r2, [pc, #400]	@ (8006758 <HAL_DMA_IRQHandler+0x404>)
 80065c6:	4293      	cmp	r3, r2
 80065c8:	d03b      	beq.n	8006642 <HAL_DMA_IRQHandler+0x2ee>
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	4a63      	ldr	r2, [pc, #396]	@ (800675c <HAL_DMA_IRQHandler+0x408>)
 80065d0:	4293      	cmp	r3, r2
 80065d2:	d036      	beq.n	8006642 <HAL_DMA_IRQHandler+0x2ee>
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	4a61      	ldr	r2, [pc, #388]	@ (8006760 <HAL_DMA_IRQHandler+0x40c>)
 80065da:	4293      	cmp	r3, r2
 80065dc:	d031      	beq.n	8006642 <HAL_DMA_IRQHandler+0x2ee>
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	4a60      	ldr	r2, [pc, #384]	@ (8006764 <HAL_DMA_IRQHandler+0x410>)
 80065e4:	4293      	cmp	r3, r2
 80065e6:	d02c      	beq.n	8006642 <HAL_DMA_IRQHandler+0x2ee>
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	4a5e      	ldr	r2, [pc, #376]	@ (8006768 <HAL_DMA_IRQHandler+0x414>)
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d027      	beq.n	8006642 <HAL_DMA_IRQHandler+0x2ee>
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	4a5d      	ldr	r2, [pc, #372]	@ (800676c <HAL_DMA_IRQHandler+0x418>)
 80065f8:	4293      	cmp	r3, r2
 80065fa:	d022      	beq.n	8006642 <HAL_DMA_IRQHandler+0x2ee>
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	4a5b      	ldr	r2, [pc, #364]	@ (8006770 <HAL_DMA_IRQHandler+0x41c>)
 8006602:	4293      	cmp	r3, r2
 8006604:	d01d      	beq.n	8006642 <HAL_DMA_IRQHandler+0x2ee>
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	4a5a      	ldr	r2, [pc, #360]	@ (8006774 <HAL_DMA_IRQHandler+0x420>)
 800660c:	4293      	cmp	r3, r2
 800660e:	d018      	beq.n	8006642 <HAL_DMA_IRQHandler+0x2ee>
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	4a58      	ldr	r2, [pc, #352]	@ (8006778 <HAL_DMA_IRQHandler+0x424>)
 8006616:	4293      	cmp	r3, r2
 8006618:	d013      	beq.n	8006642 <HAL_DMA_IRQHandler+0x2ee>
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	4a57      	ldr	r2, [pc, #348]	@ (800677c <HAL_DMA_IRQHandler+0x428>)
 8006620:	4293      	cmp	r3, r2
 8006622:	d00e      	beq.n	8006642 <HAL_DMA_IRQHandler+0x2ee>
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	4a55      	ldr	r2, [pc, #340]	@ (8006780 <HAL_DMA_IRQHandler+0x42c>)
 800662a:	4293      	cmp	r3, r2
 800662c:	d009      	beq.n	8006642 <HAL_DMA_IRQHandler+0x2ee>
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	4a54      	ldr	r2, [pc, #336]	@ (8006784 <HAL_DMA_IRQHandler+0x430>)
 8006634:	4293      	cmp	r3, r2
 8006636:	d004      	beq.n	8006642 <HAL_DMA_IRQHandler+0x2ee>
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	4a52      	ldr	r2, [pc, #328]	@ (8006788 <HAL_DMA_IRQHandler+0x434>)
 800663e:	4293      	cmp	r3, r2
 8006640:	d10a      	bne.n	8006658 <HAL_DMA_IRQHandler+0x304>
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	695b      	ldr	r3, [r3, #20]
 8006648:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800664c:	2b00      	cmp	r3, #0
 800664e:	bf14      	ite	ne
 8006650:	2301      	movne	r3, #1
 8006652:	2300      	moveq	r3, #0
 8006654:	b2db      	uxtb	r3, r3
 8006656:	e003      	b.n	8006660 <HAL_DMA_IRQHandler+0x30c>
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	2300      	movs	r3, #0
 8006660:	2b00      	cmp	r3, #0
 8006662:	d00d      	beq.n	8006680 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006668:	f003 031f 	and.w	r3, r3, #31
 800666c:	2201      	movs	r2, #1
 800666e:	409a      	lsls	r2, r3
 8006670:	6a3b      	ldr	r3, [r7, #32]
 8006672:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006678:	f043 0202 	orr.w	r2, r3, #2
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006684:	f003 031f 	and.w	r3, r3, #31
 8006688:	2204      	movs	r2, #4
 800668a:	409a      	lsls	r2, r3
 800668c:	69bb      	ldr	r3, [r7, #24]
 800668e:	4013      	ands	r3, r2
 8006690:	2b00      	cmp	r3, #0
 8006692:	f000 808f 	beq.w	80067b4 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	4a2c      	ldr	r2, [pc, #176]	@ (800674c <HAL_DMA_IRQHandler+0x3f8>)
 800669c:	4293      	cmp	r3, r2
 800669e:	d04a      	beq.n	8006736 <HAL_DMA_IRQHandler+0x3e2>
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	4a2a      	ldr	r2, [pc, #168]	@ (8006750 <HAL_DMA_IRQHandler+0x3fc>)
 80066a6:	4293      	cmp	r3, r2
 80066a8:	d045      	beq.n	8006736 <HAL_DMA_IRQHandler+0x3e2>
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	4a29      	ldr	r2, [pc, #164]	@ (8006754 <HAL_DMA_IRQHandler+0x400>)
 80066b0:	4293      	cmp	r3, r2
 80066b2:	d040      	beq.n	8006736 <HAL_DMA_IRQHandler+0x3e2>
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	4a27      	ldr	r2, [pc, #156]	@ (8006758 <HAL_DMA_IRQHandler+0x404>)
 80066ba:	4293      	cmp	r3, r2
 80066bc:	d03b      	beq.n	8006736 <HAL_DMA_IRQHandler+0x3e2>
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	4a26      	ldr	r2, [pc, #152]	@ (800675c <HAL_DMA_IRQHandler+0x408>)
 80066c4:	4293      	cmp	r3, r2
 80066c6:	d036      	beq.n	8006736 <HAL_DMA_IRQHandler+0x3e2>
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	4a24      	ldr	r2, [pc, #144]	@ (8006760 <HAL_DMA_IRQHandler+0x40c>)
 80066ce:	4293      	cmp	r3, r2
 80066d0:	d031      	beq.n	8006736 <HAL_DMA_IRQHandler+0x3e2>
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	4a23      	ldr	r2, [pc, #140]	@ (8006764 <HAL_DMA_IRQHandler+0x410>)
 80066d8:	4293      	cmp	r3, r2
 80066da:	d02c      	beq.n	8006736 <HAL_DMA_IRQHandler+0x3e2>
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	4a21      	ldr	r2, [pc, #132]	@ (8006768 <HAL_DMA_IRQHandler+0x414>)
 80066e2:	4293      	cmp	r3, r2
 80066e4:	d027      	beq.n	8006736 <HAL_DMA_IRQHandler+0x3e2>
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	4a20      	ldr	r2, [pc, #128]	@ (800676c <HAL_DMA_IRQHandler+0x418>)
 80066ec:	4293      	cmp	r3, r2
 80066ee:	d022      	beq.n	8006736 <HAL_DMA_IRQHandler+0x3e2>
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	4a1e      	ldr	r2, [pc, #120]	@ (8006770 <HAL_DMA_IRQHandler+0x41c>)
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d01d      	beq.n	8006736 <HAL_DMA_IRQHandler+0x3e2>
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	4a1d      	ldr	r2, [pc, #116]	@ (8006774 <HAL_DMA_IRQHandler+0x420>)
 8006700:	4293      	cmp	r3, r2
 8006702:	d018      	beq.n	8006736 <HAL_DMA_IRQHandler+0x3e2>
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	4a1b      	ldr	r2, [pc, #108]	@ (8006778 <HAL_DMA_IRQHandler+0x424>)
 800670a:	4293      	cmp	r3, r2
 800670c:	d013      	beq.n	8006736 <HAL_DMA_IRQHandler+0x3e2>
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	4a1a      	ldr	r2, [pc, #104]	@ (800677c <HAL_DMA_IRQHandler+0x428>)
 8006714:	4293      	cmp	r3, r2
 8006716:	d00e      	beq.n	8006736 <HAL_DMA_IRQHandler+0x3e2>
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	4a18      	ldr	r2, [pc, #96]	@ (8006780 <HAL_DMA_IRQHandler+0x42c>)
 800671e:	4293      	cmp	r3, r2
 8006720:	d009      	beq.n	8006736 <HAL_DMA_IRQHandler+0x3e2>
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	4a17      	ldr	r2, [pc, #92]	@ (8006784 <HAL_DMA_IRQHandler+0x430>)
 8006728:	4293      	cmp	r3, r2
 800672a:	d004      	beq.n	8006736 <HAL_DMA_IRQHandler+0x3e2>
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	4a15      	ldr	r2, [pc, #84]	@ (8006788 <HAL_DMA_IRQHandler+0x434>)
 8006732:	4293      	cmp	r3, r2
 8006734:	d12a      	bne.n	800678c <HAL_DMA_IRQHandler+0x438>
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f003 0302 	and.w	r3, r3, #2
 8006740:	2b00      	cmp	r3, #0
 8006742:	bf14      	ite	ne
 8006744:	2301      	movne	r3, #1
 8006746:	2300      	moveq	r3, #0
 8006748:	b2db      	uxtb	r3, r3
 800674a:	e023      	b.n	8006794 <HAL_DMA_IRQHandler+0x440>
 800674c:	40020010 	.word	0x40020010
 8006750:	40020028 	.word	0x40020028
 8006754:	40020040 	.word	0x40020040
 8006758:	40020058 	.word	0x40020058
 800675c:	40020070 	.word	0x40020070
 8006760:	40020088 	.word	0x40020088
 8006764:	400200a0 	.word	0x400200a0
 8006768:	400200b8 	.word	0x400200b8
 800676c:	40020410 	.word	0x40020410
 8006770:	40020428 	.word	0x40020428
 8006774:	40020440 	.word	0x40020440
 8006778:	40020458 	.word	0x40020458
 800677c:	40020470 	.word	0x40020470
 8006780:	40020488 	.word	0x40020488
 8006784:	400204a0 	.word	0x400204a0
 8006788:	400204b8 	.word	0x400204b8
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	2300      	movs	r3, #0
 8006794:	2b00      	cmp	r3, #0
 8006796:	d00d      	beq.n	80067b4 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800679c:	f003 031f 	and.w	r3, r3, #31
 80067a0:	2204      	movs	r2, #4
 80067a2:	409a      	lsls	r2, r3
 80067a4:	6a3b      	ldr	r3, [r7, #32]
 80067a6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067ac:	f043 0204 	orr.w	r2, r3, #4
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80067b8:	f003 031f 	and.w	r3, r3, #31
 80067bc:	2210      	movs	r2, #16
 80067be:	409a      	lsls	r2, r3
 80067c0:	69bb      	ldr	r3, [r7, #24]
 80067c2:	4013      	ands	r3, r2
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	f000 80a6 	beq.w	8006916 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	4a85      	ldr	r2, [pc, #532]	@ (80069e4 <HAL_DMA_IRQHandler+0x690>)
 80067d0:	4293      	cmp	r3, r2
 80067d2:	d04a      	beq.n	800686a <HAL_DMA_IRQHandler+0x516>
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	4a83      	ldr	r2, [pc, #524]	@ (80069e8 <HAL_DMA_IRQHandler+0x694>)
 80067da:	4293      	cmp	r3, r2
 80067dc:	d045      	beq.n	800686a <HAL_DMA_IRQHandler+0x516>
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	4a82      	ldr	r2, [pc, #520]	@ (80069ec <HAL_DMA_IRQHandler+0x698>)
 80067e4:	4293      	cmp	r3, r2
 80067e6:	d040      	beq.n	800686a <HAL_DMA_IRQHandler+0x516>
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	4a80      	ldr	r2, [pc, #512]	@ (80069f0 <HAL_DMA_IRQHandler+0x69c>)
 80067ee:	4293      	cmp	r3, r2
 80067f0:	d03b      	beq.n	800686a <HAL_DMA_IRQHandler+0x516>
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	4a7f      	ldr	r2, [pc, #508]	@ (80069f4 <HAL_DMA_IRQHandler+0x6a0>)
 80067f8:	4293      	cmp	r3, r2
 80067fa:	d036      	beq.n	800686a <HAL_DMA_IRQHandler+0x516>
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	4a7d      	ldr	r2, [pc, #500]	@ (80069f8 <HAL_DMA_IRQHandler+0x6a4>)
 8006802:	4293      	cmp	r3, r2
 8006804:	d031      	beq.n	800686a <HAL_DMA_IRQHandler+0x516>
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	4a7c      	ldr	r2, [pc, #496]	@ (80069fc <HAL_DMA_IRQHandler+0x6a8>)
 800680c:	4293      	cmp	r3, r2
 800680e:	d02c      	beq.n	800686a <HAL_DMA_IRQHandler+0x516>
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	4a7a      	ldr	r2, [pc, #488]	@ (8006a00 <HAL_DMA_IRQHandler+0x6ac>)
 8006816:	4293      	cmp	r3, r2
 8006818:	d027      	beq.n	800686a <HAL_DMA_IRQHandler+0x516>
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	4a79      	ldr	r2, [pc, #484]	@ (8006a04 <HAL_DMA_IRQHandler+0x6b0>)
 8006820:	4293      	cmp	r3, r2
 8006822:	d022      	beq.n	800686a <HAL_DMA_IRQHandler+0x516>
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	4a77      	ldr	r2, [pc, #476]	@ (8006a08 <HAL_DMA_IRQHandler+0x6b4>)
 800682a:	4293      	cmp	r3, r2
 800682c:	d01d      	beq.n	800686a <HAL_DMA_IRQHandler+0x516>
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	4a76      	ldr	r2, [pc, #472]	@ (8006a0c <HAL_DMA_IRQHandler+0x6b8>)
 8006834:	4293      	cmp	r3, r2
 8006836:	d018      	beq.n	800686a <HAL_DMA_IRQHandler+0x516>
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	4a74      	ldr	r2, [pc, #464]	@ (8006a10 <HAL_DMA_IRQHandler+0x6bc>)
 800683e:	4293      	cmp	r3, r2
 8006840:	d013      	beq.n	800686a <HAL_DMA_IRQHandler+0x516>
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	4a73      	ldr	r2, [pc, #460]	@ (8006a14 <HAL_DMA_IRQHandler+0x6c0>)
 8006848:	4293      	cmp	r3, r2
 800684a:	d00e      	beq.n	800686a <HAL_DMA_IRQHandler+0x516>
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	4a71      	ldr	r2, [pc, #452]	@ (8006a18 <HAL_DMA_IRQHandler+0x6c4>)
 8006852:	4293      	cmp	r3, r2
 8006854:	d009      	beq.n	800686a <HAL_DMA_IRQHandler+0x516>
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	4a70      	ldr	r2, [pc, #448]	@ (8006a1c <HAL_DMA_IRQHandler+0x6c8>)
 800685c:	4293      	cmp	r3, r2
 800685e:	d004      	beq.n	800686a <HAL_DMA_IRQHandler+0x516>
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	4a6e      	ldr	r2, [pc, #440]	@ (8006a20 <HAL_DMA_IRQHandler+0x6cc>)
 8006866:	4293      	cmp	r3, r2
 8006868:	d10a      	bne.n	8006880 <HAL_DMA_IRQHandler+0x52c>
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	f003 0308 	and.w	r3, r3, #8
 8006874:	2b00      	cmp	r3, #0
 8006876:	bf14      	ite	ne
 8006878:	2301      	movne	r3, #1
 800687a:	2300      	moveq	r3, #0
 800687c:	b2db      	uxtb	r3, r3
 800687e:	e009      	b.n	8006894 <HAL_DMA_IRQHandler+0x540>
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f003 0304 	and.w	r3, r3, #4
 800688a:	2b00      	cmp	r3, #0
 800688c:	bf14      	ite	ne
 800688e:	2301      	movne	r3, #1
 8006890:	2300      	moveq	r3, #0
 8006892:	b2db      	uxtb	r3, r3
 8006894:	2b00      	cmp	r3, #0
 8006896:	d03e      	beq.n	8006916 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800689c:	f003 031f 	and.w	r3, r3, #31
 80068a0:	2210      	movs	r2, #16
 80068a2:	409a      	lsls	r2, r3
 80068a4:	6a3b      	ldr	r3, [r7, #32]
 80068a6:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d018      	beq.n	80068e8 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d108      	bne.n	80068d6 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d024      	beq.n	8006916 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068d0:	6878      	ldr	r0, [r7, #4]
 80068d2:	4798      	blx	r3
 80068d4:	e01f      	b.n	8006916 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d01b      	beq.n	8006916 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80068e2:	6878      	ldr	r0, [r7, #4]
 80068e4:	4798      	blx	r3
 80068e6:	e016      	b.n	8006916 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d107      	bne.n	8006906 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	681a      	ldr	r2, [r3, #0]
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f022 0208 	bic.w	r2, r2, #8
 8006904:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800690a:	2b00      	cmp	r3, #0
 800690c:	d003      	beq.n	8006916 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006912:	6878      	ldr	r0, [r7, #4]
 8006914:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800691a:	f003 031f 	and.w	r3, r3, #31
 800691e:	2220      	movs	r2, #32
 8006920:	409a      	lsls	r2, r3
 8006922:	69bb      	ldr	r3, [r7, #24]
 8006924:	4013      	ands	r3, r2
 8006926:	2b00      	cmp	r3, #0
 8006928:	f000 8110 	beq.w	8006b4c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	4a2c      	ldr	r2, [pc, #176]	@ (80069e4 <HAL_DMA_IRQHandler+0x690>)
 8006932:	4293      	cmp	r3, r2
 8006934:	d04a      	beq.n	80069cc <HAL_DMA_IRQHandler+0x678>
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	4a2b      	ldr	r2, [pc, #172]	@ (80069e8 <HAL_DMA_IRQHandler+0x694>)
 800693c:	4293      	cmp	r3, r2
 800693e:	d045      	beq.n	80069cc <HAL_DMA_IRQHandler+0x678>
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	4a29      	ldr	r2, [pc, #164]	@ (80069ec <HAL_DMA_IRQHandler+0x698>)
 8006946:	4293      	cmp	r3, r2
 8006948:	d040      	beq.n	80069cc <HAL_DMA_IRQHandler+0x678>
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	4a28      	ldr	r2, [pc, #160]	@ (80069f0 <HAL_DMA_IRQHandler+0x69c>)
 8006950:	4293      	cmp	r3, r2
 8006952:	d03b      	beq.n	80069cc <HAL_DMA_IRQHandler+0x678>
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	4a26      	ldr	r2, [pc, #152]	@ (80069f4 <HAL_DMA_IRQHandler+0x6a0>)
 800695a:	4293      	cmp	r3, r2
 800695c:	d036      	beq.n	80069cc <HAL_DMA_IRQHandler+0x678>
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	4a25      	ldr	r2, [pc, #148]	@ (80069f8 <HAL_DMA_IRQHandler+0x6a4>)
 8006964:	4293      	cmp	r3, r2
 8006966:	d031      	beq.n	80069cc <HAL_DMA_IRQHandler+0x678>
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	4a23      	ldr	r2, [pc, #140]	@ (80069fc <HAL_DMA_IRQHandler+0x6a8>)
 800696e:	4293      	cmp	r3, r2
 8006970:	d02c      	beq.n	80069cc <HAL_DMA_IRQHandler+0x678>
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	4a22      	ldr	r2, [pc, #136]	@ (8006a00 <HAL_DMA_IRQHandler+0x6ac>)
 8006978:	4293      	cmp	r3, r2
 800697a:	d027      	beq.n	80069cc <HAL_DMA_IRQHandler+0x678>
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	4a20      	ldr	r2, [pc, #128]	@ (8006a04 <HAL_DMA_IRQHandler+0x6b0>)
 8006982:	4293      	cmp	r3, r2
 8006984:	d022      	beq.n	80069cc <HAL_DMA_IRQHandler+0x678>
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	4a1f      	ldr	r2, [pc, #124]	@ (8006a08 <HAL_DMA_IRQHandler+0x6b4>)
 800698c:	4293      	cmp	r3, r2
 800698e:	d01d      	beq.n	80069cc <HAL_DMA_IRQHandler+0x678>
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	4a1d      	ldr	r2, [pc, #116]	@ (8006a0c <HAL_DMA_IRQHandler+0x6b8>)
 8006996:	4293      	cmp	r3, r2
 8006998:	d018      	beq.n	80069cc <HAL_DMA_IRQHandler+0x678>
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	4a1c      	ldr	r2, [pc, #112]	@ (8006a10 <HAL_DMA_IRQHandler+0x6bc>)
 80069a0:	4293      	cmp	r3, r2
 80069a2:	d013      	beq.n	80069cc <HAL_DMA_IRQHandler+0x678>
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	4a1a      	ldr	r2, [pc, #104]	@ (8006a14 <HAL_DMA_IRQHandler+0x6c0>)
 80069aa:	4293      	cmp	r3, r2
 80069ac:	d00e      	beq.n	80069cc <HAL_DMA_IRQHandler+0x678>
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	4a19      	ldr	r2, [pc, #100]	@ (8006a18 <HAL_DMA_IRQHandler+0x6c4>)
 80069b4:	4293      	cmp	r3, r2
 80069b6:	d009      	beq.n	80069cc <HAL_DMA_IRQHandler+0x678>
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	4a17      	ldr	r2, [pc, #92]	@ (8006a1c <HAL_DMA_IRQHandler+0x6c8>)
 80069be:	4293      	cmp	r3, r2
 80069c0:	d004      	beq.n	80069cc <HAL_DMA_IRQHandler+0x678>
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	4a16      	ldr	r2, [pc, #88]	@ (8006a20 <HAL_DMA_IRQHandler+0x6cc>)
 80069c8:	4293      	cmp	r3, r2
 80069ca:	d12b      	bne.n	8006a24 <HAL_DMA_IRQHandler+0x6d0>
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f003 0310 	and.w	r3, r3, #16
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	bf14      	ite	ne
 80069da:	2301      	movne	r3, #1
 80069dc:	2300      	moveq	r3, #0
 80069de:	b2db      	uxtb	r3, r3
 80069e0:	e02a      	b.n	8006a38 <HAL_DMA_IRQHandler+0x6e4>
 80069e2:	bf00      	nop
 80069e4:	40020010 	.word	0x40020010
 80069e8:	40020028 	.word	0x40020028
 80069ec:	40020040 	.word	0x40020040
 80069f0:	40020058 	.word	0x40020058
 80069f4:	40020070 	.word	0x40020070
 80069f8:	40020088 	.word	0x40020088
 80069fc:	400200a0 	.word	0x400200a0
 8006a00:	400200b8 	.word	0x400200b8
 8006a04:	40020410 	.word	0x40020410
 8006a08:	40020428 	.word	0x40020428
 8006a0c:	40020440 	.word	0x40020440
 8006a10:	40020458 	.word	0x40020458
 8006a14:	40020470 	.word	0x40020470
 8006a18:	40020488 	.word	0x40020488
 8006a1c:	400204a0 	.word	0x400204a0
 8006a20:	400204b8 	.word	0x400204b8
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	f003 0302 	and.w	r3, r3, #2
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	bf14      	ite	ne
 8006a32:	2301      	movne	r3, #1
 8006a34:	2300      	moveq	r3, #0
 8006a36:	b2db      	uxtb	r3, r3
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	f000 8087 	beq.w	8006b4c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a42:	f003 031f 	and.w	r3, r3, #31
 8006a46:	2220      	movs	r2, #32
 8006a48:	409a      	lsls	r2, r3
 8006a4a:	6a3b      	ldr	r3, [r7, #32]
 8006a4c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006a54:	b2db      	uxtb	r3, r3
 8006a56:	2b04      	cmp	r3, #4
 8006a58:	d139      	bne.n	8006ace <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	681a      	ldr	r2, [r3, #0]
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f022 0216 	bic.w	r2, r2, #22
 8006a68:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	695a      	ldr	r2, [r3, #20]
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006a78:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d103      	bne.n	8006a8a <HAL_DMA_IRQHandler+0x736>
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d007      	beq.n	8006a9a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	681a      	ldr	r2, [r3, #0]
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f022 0208 	bic.w	r2, r2, #8
 8006a98:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a9e:	f003 031f 	and.w	r3, r3, #31
 8006aa2:	223f      	movs	r2, #63	@ 0x3f
 8006aa4:	409a      	lsls	r2, r3
 8006aa6:	6a3b      	ldr	r3, [r7, #32]
 8006aa8:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	2201      	movs	r2, #1
 8006aae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	f000 834a 	beq.w	8007158 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ac8:	6878      	ldr	r0, [r7, #4]
 8006aca:	4798      	blx	r3
          }
          return;
 8006acc:	e344      	b.n	8007158 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d018      	beq.n	8006b0e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d108      	bne.n	8006afc <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d02c      	beq.n	8006b4c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006af6:	6878      	ldr	r0, [r7, #4]
 8006af8:	4798      	blx	r3
 8006afa:	e027      	b.n	8006b4c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d023      	beq.n	8006b4c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b08:	6878      	ldr	r0, [r7, #4]
 8006b0a:	4798      	blx	r3
 8006b0c:	e01e      	b.n	8006b4c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d10f      	bne.n	8006b3c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	681a      	ldr	r2, [r3, #0]
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f022 0210 	bic.w	r2, r2, #16
 8006b2a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2201      	movs	r2, #1
 8006b30:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2200      	movs	r2, #0
 8006b38:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d003      	beq.n	8006b4c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b48:	6878      	ldr	r0, [r7, #4]
 8006b4a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	f000 8306 	beq.w	8007162 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b5a:	f003 0301 	and.w	r3, r3, #1
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	f000 8088 	beq.w	8006c74 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2204      	movs	r2, #4
 8006b68:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	4a7a      	ldr	r2, [pc, #488]	@ (8006d5c <HAL_DMA_IRQHandler+0xa08>)
 8006b72:	4293      	cmp	r3, r2
 8006b74:	d04a      	beq.n	8006c0c <HAL_DMA_IRQHandler+0x8b8>
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	4a79      	ldr	r2, [pc, #484]	@ (8006d60 <HAL_DMA_IRQHandler+0xa0c>)
 8006b7c:	4293      	cmp	r3, r2
 8006b7e:	d045      	beq.n	8006c0c <HAL_DMA_IRQHandler+0x8b8>
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	4a77      	ldr	r2, [pc, #476]	@ (8006d64 <HAL_DMA_IRQHandler+0xa10>)
 8006b86:	4293      	cmp	r3, r2
 8006b88:	d040      	beq.n	8006c0c <HAL_DMA_IRQHandler+0x8b8>
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	4a76      	ldr	r2, [pc, #472]	@ (8006d68 <HAL_DMA_IRQHandler+0xa14>)
 8006b90:	4293      	cmp	r3, r2
 8006b92:	d03b      	beq.n	8006c0c <HAL_DMA_IRQHandler+0x8b8>
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	4a74      	ldr	r2, [pc, #464]	@ (8006d6c <HAL_DMA_IRQHandler+0xa18>)
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	d036      	beq.n	8006c0c <HAL_DMA_IRQHandler+0x8b8>
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	4a73      	ldr	r2, [pc, #460]	@ (8006d70 <HAL_DMA_IRQHandler+0xa1c>)
 8006ba4:	4293      	cmp	r3, r2
 8006ba6:	d031      	beq.n	8006c0c <HAL_DMA_IRQHandler+0x8b8>
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	4a71      	ldr	r2, [pc, #452]	@ (8006d74 <HAL_DMA_IRQHandler+0xa20>)
 8006bae:	4293      	cmp	r3, r2
 8006bb0:	d02c      	beq.n	8006c0c <HAL_DMA_IRQHandler+0x8b8>
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	4a70      	ldr	r2, [pc, #448]	@ (8006d78 <HAL_DMA_IRQHandler+0xa24>)
 8006bb8:	4293      	cmp	r3, r2
 8006bba:	d027      	beq.n	8006c0c <HAL_DMA_IRQHandler+0x8b8>
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	4a6e      	ldr	r2, [pc, #440]	@ (8006d7c <HAL_DMA_IRQHandler+0xa28>)
 8006bc2:	4293      	cmp	r3, r2
 8006bc4:	d022      	beq.n	8006c0c <HAL_DMA_IRQHandler+0x8b8>
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	4a6d      	ldr	r2, [pc, #436]	@ (8006d80 <HAL_DMA_IRQHandler+0xa2c>)
 8006bcc:	4293      	cmp	r3, r2
 8006bce:	d01d      	beq.n	8006c0c <HAL_DMA_IRQHandler+0x8b8>
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	4a6b      	ldr	r2, [pc, #428]	@ (8006d84 <HAL_DMA_IRQHandler+0xa30>)
 8006bd6:	4293      	cmp	r3, r2
 8006bd8:	d018      	beq.n	8006c0c <HAL_DMA_IRQHandler+0x8b8>
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	4a6a      	ldr	r2, [pc, #424]	@ (8006d88 <HAL_DMA_IRQHandler+0xa34>)
 8006be0:	4293      	cmp	r3, r2
 8006be2:	d013      	beq.n	8006c0c <HAL_DMA_IRQHandler+0x8b8>
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	4a68      	ldr	r2, [pc, #416]	@ (8006d8c <HAL_DMA_IRQHandler+0xa38>)
 8006bea:	4293      	cmp	r3, r2
 8006bec:	d00e      	beq.n	8006c0c <HAL_DMA_IRQHandler+0x8b8>
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	4a67      	ldr	r2, [pc, #412]	@ (8006d90 <HAL_DMA_IRQHandler+0xa3c>)
 8006bf4:	4293      	cmp	r3, r2
 8006bf6:	d009      	beq.n	8006c0c <HAL_DMA_IRQHandler+0x8b8>
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	4a65      	ldr	r2, [pc, #404]	@ (8006d94 <HAL_DMA_IRQHandler+0xa40>)
 8006bfe:	4293      	cmp	r3, r2
 8006c00:	d004      	beq.n	8006c0c <HAL_DMA_IRQHandler+0x8b8>
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	4a64      	ldr	r2, [pc, #400]	@ (8006d98 <HAL_DMA_IRQHandler+0xa44>)
 8006c08:	4293      	cmp	r3, r2
 8006c0a:	d108      	bne.n	8006c1e <HAL_DMA_IRQHandler+0x8ca>
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	681a      	ldr	r2, [r3, #0]
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f022 0201 	bic.w	r2, r2, #1
 8006c1a:	601a      	str	r2, [r3, #0]
 8006c1c:	e007      	b.n	8006c2e <HAL_DMA_IRQHandler+0x8da>
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	681a      	ldr	r2, [r3, #0]
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f022 0201 	bic.w	r2, r2, #1
 8006c2c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	3301      	adds	r3, #1
 8006c32:	60fb      	str	r3, [r7, #12]
 8006c34:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006c36:	429a      	cmp	r2, r3
 8006c38:	d307      	bcc.n	8006c4a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f003 0301 	and.w	r3, r3, #1
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d1f2      	bne.n	8006c2e <HAL_DMA_IRQHandler+0x8da>
 8006c48:	e000      	b.n	8006c4c <HAL_DMA_IRQHandler+0x8f8>
            break;
 8006c4a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f003 0301 	and.w	r3, r3, #1
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d004      	beq.n	8006c64 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	2203      	movs	r2, #3
 8006c5e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8006c62:	e003      	b.n	8006c6c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2201      	movs	r2, #1
 8006c68:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2200      	movs	r2, #0
 8006c70:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	f000 8272 	beq.w	8007162 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006c82:	6878      	ldr	r0, [r7, #4]
 8006c84:	4798      	blx	r3
 8006c86:	e26c      	b.n	8007162 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	4a43      	ldr	r2, [pc, #268]	@ (8006d9c <HAL_DMA_IRQHandler+0xa48>)
 8006c8e:	4293      	cmp	r3, r2
 8006c90:	d022      	beq.n	8006cd8 <HAL_DMA_IRQHandler+0x984>
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	4a42      	ldr	r2, [pc, #264]	@ (8006da0 <HAL_DMA_IRQHandler+0xa4c>)
 8006c98:	4293      	cmp	r3, r2
 8006c9a:	d01d      	beq.n	8006cd8 <HAL_DMA_IRQHandler+0x984>
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	4a40      	ldr	r2, [pc, #256]	@ (8006da4 <HAL_DMA_IRQHandler+0xa50>)
 8006ca2:	4293      	cmp	r3, r2
 8006ca4:	d018      	beq.n	8006cd8 <HAL_DMA_IRQHandler+0x984>
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	4a3f      	ldr	r2, [pc, #252]	@ (8006da8 <HAL_DMA_IRQHandler+0xa54>)
 8006cac:	4293      	cmp	r3, r2
 8006cae:	d013      	beq.n	8006cd8 <HAL_DMA_IRQHandler+0x984>
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	4a3d      	ldr	r2, [pc, #244]	@ (8006dac <HAL_DMA_IRQHandler+0xa58>)
 8006cb6:	4293      	cmp	r3, r2
 8006cb8:	d00e      	beq.n	8006cd8 <HAL_DMA_IRQHandler+0x984>
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	4a3c      	ldr	r2, [pc, #240]	@ (8006db0 <HAL_DMA_IRQHandler+0xa5c>)
 8006cc0:	4293      	cmp	r3, r2
 8006cc2:	d009      	beq.n	8006cd8 <HAL_DMA_IRQHandler+0x984>
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	4a3a      	ldr	r2, [pc, #232]	@ (8006db4 <HAL_DMA_IRQHandler+0xa60>)
 8006cca:	4293      	cmp	r3, r2
 8006ccc:	d004      	beq.n	8006cd8 <HAL_DMA_IRQHandler+0x984>
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	4a39      	ldr	r2, [pc, #228]	@ (8006db8 <HAL_DMA_IRQHandler+0xa64>)
 8006cd4:	4293      	cmp	r3, r2
 8006cd6:	d101      	bne.n	8006cdc <HAL_DMA_IRQHandler+0x988>
 8006cd8:	2301      	movs	r3, #1
 8006cda:	e000      	b.n	8006cde <HAL_DMA_IRQHandler+0x98a>
 8006cdc:	2300      	movs	r3, #0
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	f000 823f 	beq.w	8007162 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006cf0:	f003 031f 	and.w	r3, r3, #31
 8006cf4:	2204      	movs	r2, #4
 8006cf6:	409a      	lsls	r2, r3
 8006cf8:	697b      	ldr	r3, [r7, #20]
 8006cfa:	4013      	ands	r3, r2
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	f000 80cd 	beq.w	8006e9c <HAL_DMA_IRQHandler+0xb48>
 8006d02:	693b      	ldr	r3, [r7, #16]
 8006d04:	f003 0304 	and.w	r3, r3, #4
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	f000 80c7 	beq.w	8006e9c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006d12:	f003 031f 	and.w	r3, r3, #31
 8006d16:	2204      	movs	r2, #4
 8006d18:	409a      	lsls	r2, r3
 8006d1a:	69fb      	ldr	r3, [r7, #28]
 8006d1c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006d1e:	693b      	ldr	r3, [r7, #16]
 8006d20:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d049      	beq.n	8006dbc <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006d28:	693b      	ldr	r3, [r7, #16]
 8006d2a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d109      	bne.n	8006d46 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	f000 8210 	beq.w	800715c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006d40:	6878      	ldr	r0, [r7, #4]
 8006d42:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006d44:	e20a      	b.n	800715c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	f000 8206 	beq.w	800715c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d54:	6878      	ldr	r0, [r7, #4]
 8006d56:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006d58:	e200      	b.n	800715c <HAL_DMA_IRQHandler+0xe08>
 8006d5a:	bf00      	nop
 8006d5c:	40020010 	.word	0x40020010
 8006d60:	40020028 	.word	0x40020028
 8006d64:	40020040 	.word	0x40020040
 8006d68:	40020058 	.word	0x40020058
 8006d6c:	40020070 	.word	0x40020070
 8006d70:	40020088 	.word	0x40020088
 8006d74:	400200a0 	.word	0x400200a0
 8006d78:	400200b8 	.word	0x400200b8
 8006d7c:	40020410 	.word	0x40020410
 8006d80:	40020428 	.word	0x40020428
 8006d84:	40020440 	.word	0x40020440
 8006d88:	40020458 	.word	0x40020458
 8006d8c:	40020470 	.word	0x40020470
 8006d90:	40020488 	.word	0x40020488
 8006d94:	400204a0 	.word	0x400204a0
 8006d98:	400204b8 	.word	0x400204b8
 8006d9c:	58025408 	.word	0x58025408
 8006da0:	5802541c 	.word	0x5802541c
 8006da4:	58025430 	.word	0x58025430
 8006da8:	58025444 	.word	0x58025444
 8006dac:	58025458 	.word	0x58025458
 8006db0:	5802546c 	.word	0x5802546c
 8006db4:	58025480 	.word	0x58025480
 8006db8:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006dbc:	693b      	ldr	r3, [r7, #16]
 8006dbe:	f003 0320 	and.w	r3, r3, #32
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d160      	bne.n	8006e88 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	4a7f      	ldr	r2, [pc, #508]	@ (8006fc8 <HAL_DMA_IRQHandler+0xc74>)
 8006dcc:	4293      	cmp	r3, r2
 8006dce:	d04a      	beq.n	8006e66 <HAL_DMA_IRQHandler+0xb12>
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	4a7d      	ldr	r2, [pc, #500]	@ (8006fcc <HAL_DMA_IRQHandler+0xc78>)
 8006dd6:	4293      	cmp	r3, r2
 8006dd8:	d045      	beq.n	8006e66 <HAL_DMA_IRQHandler+0xb12>
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	4a7c      	ldr	r2, [pc, #496]	@ (8006fd0 <HAL_DMA_IRQHandler+0xc7c>)
 8006de0:	4293      	cmp	r3, r2
 8006de2:	d040      	beq.n	8006e66 <HAL_DMA_IRQHandler+0xb12>
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	4a7a      	ldr	r2, [pc, #488]	@ (8006fd4 <HAL_DMA_IRQHandler+0xc80>)
 8006dea:	4293      	cmp	r3, r2
 8006dec:	d03b      	beq.n	8006e66 <HAL_DMA_IRQHandler+0xb12>
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	4a79      	ldr	r2, [pc, #484]	@ (8006fd8 <HAL_DMA_IRQHandler+0xc84>)
 8006df4:	4293      	cmp	r3, r2
 8006df6:	d036      	beq.n	8006e66 <HAL_DMA_IRQHandler+0xb12>
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	4a77      	ldr	r2, [pc, #476]	@ (8006fdc <HAL_DMA_IRQHandler+0xc88>)
 8006dfe:	4293      	cmp	r3, r2
 8006e00:	d031      	beq.n	8006e66 <HAL_DMA_IRQHandler+0xb12>
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	4a76      	ldr	r2, [pc, #472]	@ (8006fe0 <HAL_DMA_IRQHandler+0xc8c>)
 8006e08:	4293      	cmp	r3, r2
 8006e0a:	d02c      	beq.n	8006e66 <HAL_DMA_IRQHandler+0xb12>
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	4a74      	ldr	r2, [pc, #464]	@ (8006fe4 <HAL_DMA_IRQHandler+0xc90>)
 8006e12:	4293      	cmp	r3, r2
 8006e14:	d027      	beq.n	8006e66 <HAL_DMA_IRQHandler+0xb12>
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	4a73      	ldr	r2, [pc, #460]	@ (8006fe8 <HAL_DMA_IRQHandler+0xc94>)
 8006e1c:	4293      	cmp	r3, r2
 8006e1e:	d022      	beq.n	8006e66 <HAL_DMA_IRQHandler+0xb12>
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	4a71      	ldr	r2, [pc, #452]	@ (8006fec <HAL_DMA_IRQHandler+0xc98>)
 8006e26:	4293      	cmp	r3, r2
 8006e28:	d01d      	beq.n	8006e66 <HAL_DMA_IRQHandler+0xb12>
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	4a70      	ldr	r2, [pc, #448]	@ (8006ff0 <HAL_DMA_IRQHandler+0xc9c>)
 8006e30:	4293      	cmp	r3, r2
 8006e32:	d018      	beq.n	8006e66 <HAL_DMA_IRQHandler+0xb12>
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	4a6e      	ldr	r2, [pc, #440]	@ (8006ff4 <HAL_DMA_IRQHandler+0xca0>)
 8006e3a:	4293      	cmp	r3, r2
 8006e3c:	d013      	beq.n	8006e66 <HAL_DMA_IRQHandler+0xb12>
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	4a6d      	ldr	r2, [pc, #436]	@ (8006ff8 <HAL_DMA_IRQHandler+0xca4>)
 8006e44:	4293      	cmp	r3, r2
 8006e46:	d00e      	beq.n	8006e66 <HAL_DMA_IRQHandler+0xb12>
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	4a6b      	ldr	r2, [pc, #428]	@ (8006ffc <HAL_DMA_IRQHandler+0xca8>)
 8006e4e:	4293      	cmp	r3, r2
 8006e50:	d009      	beq.n	8006e66 <HAL_DMA_IRQHandler+0xb12>
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	4a6a      	ldr	r2, [pc, #424]	@ (8007000 <HAL_DMA_IRQHandler+0xcac>)
 8006e58:	4293      	cmp	r3, r2
 8006e5a:	d004      	beq.n	8006e66 <HAL_DMA_IRQHandler+0xb12>
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	4a68      	ldr	r2, [pc, #416]	@ (8007004 <HAL_DMA_IRQHandler+0xcb0>)
 8006e62:	4293      	cmp	r3, r2
 8006e64:	d108      	bne.n	8006e78 <HAL_DMA_IRQHandler+0xb24>
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	681a      	ldr	r2, [r3, #0]
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	f022 0208 	bic.w	r2, r2, #8
 8006e74:	601a      	str	r2, [r3, #0]
 8006e76:	e007      	b.n	8006e88 <HAL_DMA_IRQHandler+0xb34>
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	681a      	ldr	r2, [r3, #0]
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	f022 0204 	bic.w	r2, r2, #4
 8006e86:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	f000 8165 	beq.w	800715c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e96:	6878      	ldr	r0, [r7, #4]
 8006e98:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006e9a:	e15f      	b.n	800715c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006ea0:	f003 031f 	and.w	r3, r3, #31
 8006ea4:	2202      	movs	r2, #2
 8006ea6:	409a      	lsls	r2, r3
 8006ea8:	697b      	ldr	r3, [r7, #20]
 8006eaa:	4013      	ands	r3, r2
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	f000 80c5 	beq.w	800703c <HAL_DMA_IRQHandler+0xce8>
 8006eb2:	693b      	ldr	r3, [r7, #16]
 8006eb4:	f003 0302 	and.w	r3, r3, #2
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	f000 80bf 	beq.w	800703c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006ec2:	f003 031f 	and.w	r3, r3, #31
 8006ec6:	2202      	movs	r2, #2
 8006ec8:	409a      	lsls	r2, r3
 8006eca:	69fb      	ldr	r3, [r7, #28]
 8006ecc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006ece:	693b      	ldr	r3, [r7, #16]
 8006ed0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d018      	beq.n	8006f0a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006ed8:	693b      	ldr	r3, [r7, #16]
 8006eda:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d109      	bne.n	8006ef6 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	f000 813a 	beq.w	8007160 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ef0:	6878      	ldr	r0, [r7, #4]
 8006ef2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006ef4:	e134      	b.n	8007160 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	f000 8130 	beq.w	8007160 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f04:	6878      	ldr	r0, [r7, #4]
 8006f06:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006f08:	e12a      	b.n	8007160 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006f0a:	693b      	ldr	r3, [r7, #16]
 8006f0c:	f003 0320 	and.w	r3, r3, #32
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	f040 8089 	bne.w	8007028 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	4a2b      	ldr	r2, [pc, #172]	@ (8006fc8 <HAL_DMA_IRQHandler+0xc74>)
 8006f1c:	4293      	cmp	r3, r2
 8006f1e:	d04a      	beq.n	8006fb6 <HAL_DMA_IRQHandler+0xc62>
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	4a29      	ldr	r2, [pc, #164]	@ (8006fcc <HAL_DMA_IRQHandler+0xc78>)
 8006f26:	4293      	cmp	r3, r2
 8006f28:	d045      	beq.n	8006fb6 <HAL_DMA_IRQHandler+0xc62>
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	4a28      	ldr	r2, [pc, #160]	@ (8006fd0 <HAL_DMA_IRQHandler+0xc7c>)
 8006f30:	4293      	cmp	r3, r2
 8006f32:	d040      	beq.n	8006fb6 <HAL_DMA_IRQHandler+0xc62>
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	4a26      	ldr	r2, [pc, #152]	@ (8006fd4 <HAL_DMA_IRQHandler+0xc80>)
 8006f3a:	4293      	cmp	r3, r2
 8006f3c:	d03b      	beq.n	8006fb6 <HAL_DMA_IRQHandler+0xc62>
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	4a25      	ldr	r2, [pc, #148]	@ (8006fd8 <HAL_DMA_IRQHandler+0xc84>)
 8006f44:	4293      	cmp	r3, r2
 8006f46:	d036      	beq.n	8006fb6 <HAL_DMA_IRQHandler+0xc62>
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	4a23      	ldr	r2, [pc, #140]	@ (8006fdc <HAL_DMA_IRQHandler+0xc88>)
 8006f4e:	4293      	cmp	r3, r2
 8006f50:	d031      	beq.n	8006fb6 <HAL_DMA_IRQHandler+0xc62>
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	4a22      	ldr	r2, [pc, #136]	@ (8006fe0 <HAL_DMA_IRQHandler+0xc8c>)
 8006f58:	4293      	cmp	r3, r2
 8006f5a:	d02c      	beq.n	8006fb6 <HAL_DMA_IRQHandler+0xc62>
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	4a20      	ldr	r2, [pc, #128]	@ (8006fe4 <HAL_DMA_IRQHandler+0xc90>)
 8006f62:	4293      	cmp	r3, r2
 8006f64:	d027      	beq.n	8006fb6 <HAL_DMA_IRQHandler+0xc62>
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	4a1f      	ldr	r2, [pc, #124]	@ (8006fe8 <HAL_DMA_IRQHandler+0xc94>)
 8006f6c:	4293      	cmp	r3, r2
 8006f6e:	d022      	beq.n	8006fb6 <HAL_DMA_IRQHandler+0xc62>
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	4a1d      	ldr	r2, [pc, #116]	@ (8006fec <HAL_DMA_IRQHandler+0xc98>)
 8006f76:	4293      	cmp	r3, r2
 8006f78:	d01d      	beq.n	8006fb6 <HAL_DMA_IRQHandler+0xc62>
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	4a1c      	ldr	r2, [pc, #112]	@ (8006ff0 <HAL_DMA_IRQHandler+0xc9c>)
 8006f80:	4293      	cmp	r3, r2
 8006f82:	d018      	beq.n	8006fb6 <HAL_DMA_IRQHandler+0xc62>
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	4a1a      	ldr	r2, [pc, #104]	@ (8006ff4 <HAL_DMA_IRQHandler+0xca0>)
 8006f8a:	4293      	cmp	r3, r2
 8006f8c:	d013      	beq.n	8006fb6 <HAL_DMA_IRQHandler+0xc62>
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	4a19      	ldr	r2, [pc, #100]	@ (8006ff8 <HAL_DMA_IRQHandler+0xca4>)
 8006f94:	4293      	cmp	r3, r2
 8006f96:	d00e      	beq.n	8006fb6 <HAL_DMA_IRQHandler+0xc62>
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	4a17      	ldr	r2, [pc, #92]	@ (8006ffc <HAL_DMA_IRQHandler+0xca8>)
 8006f9e:	4293      	cmp	r3, r2
 8006fa0:	d009      	beq.n	8006fb6 <HAL_DMA_IRQHandler+0xc62>
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	4a16      	ldr	r2, [pc, #88]	@ (8007000 <HAL_DMA_IRQHandler+0xcac>)
 8006fa8:	4293      	cmp	r3, r2
 8006faa:	d004      	beq.n	8006fb6 <HAL_DMA_IRQHandler+0xc62>
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	4a14      	ldr	r2, [pc, #80]	@ (8007004 <HAL_DMA_IRQHandler+0xcb0>)
 8006fb2:	4293      	cmp	r3, r2
 8006fb4:	d128      	bne.n	8007008 <HAL_DMA_IRQHandler+0xcb4>
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	681a      	ldr	r2, [r3, #0]
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	f022 0214 	bic.w	r2, r2, #20
 8006fc4:	601a      	str	r2, [r3, #0]
 8006fc6:	e027      	b.n	8007018 <HAL_DMA_IRQHandler+0xcc4>
 8006fc8:	40020010 	.word	0x40020010
 8006fcc:	40020028 	.word	0x40020028
 8006fd0:	40020040 	.word	0x40020040
 8006fd4:	40020058 	.word	0x40020058
 8006fd8:	40020070 	.word	0x40020070
 8006fdc:	40020088 	.word	0x40020088
 8006fe0:	400200a0 	.word	0x400200a0
 8006fe4:	400200b8 	.word	0x400200b8
 8006fe8:	40020410 	.word	0x40020410
 8006fec:	40020428 	.word	0x40020428
 8006ff0:	40020440 	.word	0x40020440
 8006ff4:	40020458 	.word	0x40020458
 8006ff8:	40020470 	.word	0x40020470
 8006ffc:	40020488 	.word	0x40020488
 8007000:	400204a0 	.word	0x400204a0
 8007004:	400204b8 	.word	0x400204b8
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	681a      	ldr	r2, [r3, #0]
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	f022 020a 	bic.w	r2, r2, #10
 8007016:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2201      	movs	r2, #1
 800701c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2200      	movs	r2, #0
 8007024:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800702c:	2b00      	cmp	r3, #0
 800702e:	f000 8097 	beq.w	8007160 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007036:	6878      	ldr	r0, [r7, #4]
 8007038:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800703a:	e091      	b.n	8007160 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007040:	f003 031f 	and.w	r3, r3, #31
 8007044:	2208      	movs	r2, #8
 8007046:	409a      	lsls	r2, r3
 8007048:	697b      	ldr	r3, [r7, #20]
 800704a:	4013      	ands	r3, r2
 800704c:	2b00      	cmp	r3, #0
 800704e:	f000 8088 	beq.w	8007162 <HAL_DMA_IRQHandler+0xe0e>
 8007052:	693b      	ldr	r3, [r7, #16]
 8007054:	f003 0308 	and.w	r3, r3, #8
 8007058:	2b00      	cmp	r3, #0
 800705a:	f000 8082 	beq.w	8007162 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	4a41      	ldr	r2, [pc, #260]	@ (8007168 <HAL_DMA_IRQHandler+0xe14>)
 8007064:	4293      	cmp	r3, r2
 8007066:	d04a      	beq.n	80070fe <HAL_DMA_IRQHandler+0xdaa>
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	4a3f      	ldr	r2, [pc, #252]	@ (800716c <HAL_DMA_IRQHandler+0xe18>)
 800706e:	4293      	cmp	r3, r2
 8007070:	d045      	beq.n	80070fe <HAL_DMA_IRQHandler+0xdaa>
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	4a3e      	ldr	r2, [pc, #248]	@ (8007170 <HAL_DMA_IRQHandler+0xe1c>)
 8007078:	4293      	cmp	r3, r2
 800707a:	d040      	beq.n	80070fe <HAL_DMA_IRQHandler+0xdaa>
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	4a3c      	ldr	r2, [pc, #240]	@ (8007174 <HAL_DMA_IRQHandler+0xe20>)
 8007082:	4293      	cmp	r3, r2
 8007084:	d03b      	beq.n	80070fe <HAL_DMA_IRQHandler+0xdaa>
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	4a3b      	ldr	r2, [pc, #236]	@ (8007178 <HAL_DMA_IRQHandler+0xe24>)
 800708c:	4293      	cmp	r3, r2
 800708e:	d036      	beq.n	80070fe <HAL_DMA_IRQHandler+0xdaa>
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	4a39      	ldr	r2, [pc, #228]	@ (800717c <HAL_DMA_IRQHandler+0xe28>)
 8007096:	4293      	cmp	r3, r2
 8007098:	d031      	beq.n	80070fe <HAL_DMA_IRQHandler+0xdaa>
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	4a38      	ldr	r2, [pc, #224]	@ (8007180 <HAL_DMA_IRQHandler+0xe2c>)
 80070a0:	4293      	cmp	r3, r2
 80070a2:	d02c      	beq.n	80070fe <HAL_DMA_IRQHandler+0xdaa>
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	4a36      	ldr	r2, [pc, #216]	@ (8007184 <HAL_DMA_IRQHandler+0xe30>)
 80070aa:	4293      	cmp	r3, r2
 80070ac:	d027      	beq.n	80070fe <HAL_DMA_IRQHandler+0xdaa>
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	4a35      	ldr	r2, [pc, #212]	@ (8007188 <HAL_DMA_IRQHandler+0xe34>)
 80070b4:	4293      	cmp	r3, r2
 80070b6:	d022      	beq.n	80070fe <HAL_DMA_IRQHandler+0xdaa>
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	4a33      	ldr	r2, [pc, #204]	@ (800718c <HAL_DMA_IRQHandler+0xe38>)
 80070be:	4293      	cmp	r3, r2
 80070c0:	d01d      	beq.n	80070fe <HAL_DMA_IRQHandler+0xdaa>
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	4a32      	ldr	r2, [pc, #200]	@ (8007190 <HAL_DMA_IRQHandler+0xe3c>)
 80070c8:	4293      	cmp	r3, r2
 80070ca:	d018      	beq.n	80070fe <HAL_DMA_IRQHandler+0xdaa>
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	4a30      	ldr	r2, [pc, #192]	@ (8007194 <HAL_DMA_IRQHandler+0xe40>)
 80070d2:	4293      	cmp	r3, r2
 80070d4:	d013      	beq.n	80070fe <HAL_DMA_IRQHandler+0xdaa>
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	4a2f      	ldr	r2, [pc, #188]	@ (8007198 <HAL_DMA_IRQHandler+0xe44>)
 80070dc:	4293      	cmp	r3, r2
 80070de:	d00e      	beq.n	80070fe <HAL_DMA_IRQHandler+0xdaa>
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	4a2d      	ldr	r2, [pc, #180]	@ (800719c <HAL_DMA_IRQHandler+0xe48>)
 80070e6:	4293      	cmp	r3, r2
 80070e8:	d009      	beq.n	80070fe <HAL_DMA_IRQHandler+0xdaa>
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	4a2c      	ldr	r2, [pc, #176]	@ (80071a0 <HAL_DMA_IRQHandler+0xe4c>)
 80070f0:	4293      	cmp	r3, r2
 80070f2:	d004      	beq.n	80070fe <HAL_DMA_IRQHandler+0xdaa>
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	4a2a      	ldr	r2, [pc, #168]	@ (80071a4 <HAL_DMA_IRQHandler+0xe50>)
 80070fa:	4293      	cmp	r3, r2
 80070fc:	d108      	bne.n	8007110 <HAL_DMA_IRQHandler+0xdbc>
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	681a      	ldr	r2, [r3, #0]
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	f022 021c 	bic.w	r2, r2, #28
 800710c:	601a      	str	r2, [r3, #0]
 800710e:	e007      	b.n	8007120 <HAL_DMA_IRQHandler+0xdcc>
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	681a      	ldr	r2, [r3, #0]
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	f022 020e 	bic.w	r2, r2, #14
 800711e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007124:	f003 031f 	and.w	r3, r3, #31
 8007128:	2201      	movs	r2, #1
 800712a:	409a      	lsls	r2, r3
 800712c:	69fb      	ldr	r3, [r7, #28]
 800712e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2201      	movs	r2, #1
 8007134:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	2201      	movs	r2, #1
 800713a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	2200      	movs	r2, #0
 8007142:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800714a:	2b00      	cmp	r3, #0
 800714c:	d009      	beq.n	8007162 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007152:	6878      	ldr	r0, [r7, #4]
 8007154:	4798      	blx	r3
 8007156:	e004      	b.n	8007162 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8007158:	bf00      	nop
 800715a:	e002      	b.n	8007162 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800715c:	bf00      	nop
 800715e:	e000      	b.n	8007162 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007160:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007162:	3728      	adds	r7, #40	@ 0x28
 8007164:	46bd      	mov	sp, r7
 8007166:	bd80      	pop	{r7, pc}
 8007168:	40020010 	.word	0x40020010
 800716c:	40020028 	.word	0x40020028
 8007170:	40020040 	.word	0x40020040
 8007174:	40020058 	.word	0x40020058
 8007178:	40020070 	.word	0x40020070
 800717c:	40020088 	.word	0x40020088
 8007180:	400200a0 	.word	0x400200a0
 8007184:	400200b8 	.word	0x400200b8
 8007188:	40020410 	.word	0x40020410
 800718c:	40020428 	.word	0x40020428
 8007190:	40020440 	.word	0x40020440
 8007194:	40020458 	.word	0x40020458
 8007198:	40020470 	.word	0x40020470
 800719c:	40020488 	.word	0x40020488
 80071a0:	400204a0 	.word	0x400204a0
 80071a4:	400204b8 	.word	0x400204b8

080071a8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80071a8:	b480      	push	{r7}
 80071aa:	b085      	sub	sp, #20
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	4a42      	ldr	r2, [pc, #264]	@ (80072c0 <DMA_CalcBaseAndBitshift+0x118>)
 80071b6:	4293      	cmp	r3, r2
 80071b8:	d04a      	beq.n	8007250 <DMA_CalcBaseAndBitshift+0xa8>
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	4a41      	ldr	r2, [pc, #260]	@ (80072c4 <DMA_CalcBaseAndBitshift+0x11c>)
 80071c0:	4293      	cmp	r3, r2
 80071c2:	d045      	beq.n	8007250 <DMA_CalcBaseAndBitshift+0xa8>
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	4a3f      	ldr	r2, [pc, #252]	@ (80072c8 <DMA_CalcBaseAndBitshift+0x120>)
 80071ca:	4293      	cmp	r3, r2
 80071cc:	d040      	beq.n	8007250 <DMA_CalcBaseAndBitshift+0xa8>
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	4a3e      	ldr	r2, [pc, #248]	@ (80072cc <DMA_CalcBaseAndBitshift+0x124>)
 80071d4:	4293      	cmp	r3, r2
 80071d6:	d03b      	beq.n	8007250 <DMA_CalcBaseAndBitshift+0xa8>
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	4a3c      	ldr	r2, [pc, #240]	@ (80072d0 <DMA_CalcBaseAndBitshift+0x128>)
 80071de:	4293      	cmp	r3, r2
 80071e0:	d036      	beq.n	8007250 <DMA_CalcBaseAndBitshift+0xa8>
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	4a3b      	ldr	r2, [pc, #236]	@ (80072d4 <DMA_CalcBaseAndBitshift+0x12c>)
 80071e8:	4293      	cmp	r3, r2
 80071ea:	d031      	beq.n	8007250 <DMA_CalcBaseAndBitshift+0xa8>
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	4a39      	ldr	r2, [pc, #228]	@ (80072d8 <DMA_CalcBaseAndBitshift+0x130>)
 80071f2:	4293      	cmp	r3, r2
 80071f4:	d02c      	beq.n	8007250 <DMA_CalcBaseAndBitshift+0xa8>
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	4a38      	ldr	r2, [pc, #224]	@ (80072dc <DMA_CalcBaseAndBitshift+0x134>)
 80071fc:	4293      	cmp	r3, r2
 80071fe:	d027      	beq.n	8007250 <DMA_CalcBaseAndBitshift+0xa8>
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	4a36      	ldr	r2, [pc, #216]	@ (80072e0 <DMA_CalcBaseAndBitshift+0x138>)
 8007206:	4293      	cmp	r3, r2
 8007208:	d022      	beq.n	8007250 <DMA_CalcBaseAndBitshift+0xa8>
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	4a35      	ldr	r2, [pc, #212]	@ (80072e4 <DMA_CalcBaseAndBitshift+0x13c>)
 8007210:	4293      	cmp	r3, r2
 8007212:	d01d      	beq.n	8007250 <DMA_CalcBaseAndBitshift+0xa8>
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	4a33      	ldr	r2, [pc, #204]	@ (80072e8 <DMA_CalcBaseAndBitshift+0x140>)
 800721a:	4293      	cmp	r3, r2
 800721c:	d018      	beq.n	8007250 <DMA_CalcBaseAndBitshift+0xa8>
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	4a32      	ldr	r2, [pc, #200]	@ (80072ec <DMA_CalcBaseAndBitshift+0x144>)
 8007224:	4293      	cmp	r3, r2
 8007226:	d013      	beq.n	8007250 <DMA_CalcBaseAndBitshift+0xa8>
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	4a30      	ldr	r2, [pc, #192]	@ (80072f0 <DMA_CalcBaseAndBitshift+0x148>)
 800722e:	4293      	cmp	r3, r2
 8007230:	d00e      	beq.n	8007250 <DMA_CalcBaseAndBitshift+0xa8>
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	4a2f      	ldr	r2, [pc, #188]	@ (80072f4 <DMA_CalcBaseAndBitshift+0x14c>)
 8007238:	4293      	cmp	r3, r2
 800723a:	d009      	beq.n	8007250 <DMA_CalcBaseAndBitshift+0xa8>
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	4a2d      	ldr	r2, [pc, #180]	@ (80072f8 <DMA_CalcBaseAndBitshift+0x150>)
 8007242:	4293      	cmp	r3, r2
 8007244:	d004      	beq.n	8007250 <DMA_CalcBaseAndBitshift+0xa8>
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	4a2c      	ldr	r2, [pc, #176]	@ (80072fc <DMA_CalcBaseAndBitshift+0x154>)
 800724c:	4293      	cmp	r3, r2
 800724e:	d101      	bne.n	8007254 <DMA_CalcBaseAndBitshift+0xac>
 8007250:	2301      	movs	r3, #1
 8007252:	e000      	b.n	8007256 <DMA_CalcBaseAndBitshift+0xae>
 8007254:	2300      	movs	r3, #0
 8007256:	2b00      	cmp	r3, #0
 8007258:	d024      	beq.n	80072a4 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	b2db      	uxtb	r3, r3
 8007260:	3b10      	subs	r3, #16
 8007262:	4a27      	ldr	r2, [pc, #156]	@ (8007300 <DMA_CalcBaseAndBitshift+0x158>)
 8007264:	fba2 2303 	umull	r2, r3, r2, r3
 8007268:	091b      	lsrs	r3, r3, #4
 800726a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	f003 0307 	and.w	r3, r3, #7
 8007272:	4a24      	ldr	r2, [pc, #144]	@ (8007304 <DMA_CalcBaseAndBitshift+0x15c>)
 8007274:	5cd3      	ldrb	r3, [r2, r3]
 8007276:	461a      	mov	r2, r3
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	2b03      	cmp	r3, #3
 8007280:	d908      	bls.n	8007294 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	461a      	mov	r2, r3
 8007288:	4b1f      	ldr	r3, [pc, #124]	@ (8007308 <DMA_CalcBaseAndBitshift+0x160>)
 800728a:	4013      	ands	r3, r2
 800728c:	1d1a      	adds	r2, r3, #4
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	659a      	str	r2, [r3, #88]	@ 0x58
 8007292:	e00d      	b.n	80072b0 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	461a      	mov	r2, r3
 800729a:	4b1b      	ldr	r3, [pc, #108]	@ (8007308 <DMA_CalcBaseAndBitshift+0x160>)
 800729c:	4013      	ands	r3, r2
 800729e:	687a      	ldr	r2, [r7, #4]
 80072a0:	6593      	str	r3, [r2, #88]	@ 0x58
 80072a2:	e005      	b.n	80072b0 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80072b4:	4618      	mov	r0, r3
 80072b6:	3714      	adds	r7, #20
 80072b8:	46bd      	mov	sp, r7
 80072ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072be:	4770      	bx	lr
 80072c0:	40020010 	.word	0x40020010
 80072c4:	40020028 	.word	0x40020028
 80072c8:	40020040 	.word	0x40020040
 80072cc:	40020058 	.word	0x40020058
 80072d0:	40020070 	.word	0x40020070
 80072d4:	40020088 	.word	0x40020088
 80072d8:	400200a0 	.word	0x400200a0
 80072dc:	400200b8 	.word	0x400200b8
 80072e0:	40020410 	.word	0x40020410
 80072e4:	40020428 	.word	0x40020428
 80072e8:	40020440 	.word	0x40020440
 80072ec:	40020458 	.word	0x40020458
 80072f0:	40020470 	.word	0x40020470
 80072f4:	40020488 	.word	0x40020488
 80072f8:	400204a0 	.word	0x400204a0
 80072fc:	400204b8 	.word	0x400204b8
 8007300:	aaaaaaab 	.word	0xaaaaaaab
 8007304:	08018490 	.word	0x08018490
 8007308:	fffffc00 	.word	0xfffffc00

0800730c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800730c:	b480      	push	{r7}
 800730e:	b085      	sub	sp, #20
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007314:	2300      	movs	r3, #0
 8007316:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	699b      	ldr	r3, [r3, #24]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d120      	bne.n	8007362 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007324:	2b03      	cmp	r3, #3
 8007326:	d858      	bhi.n	80073da <DMA_CheckFifoParam+0xce>
 8007328:	a201      	add	r2, pc, #4	@ (adr r2, 8007330 <DMA_CheckFifoParam+0x24>)
 800732a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800732e:	bf00      	nop
 8007330:	08007341 	.word	0x08007341
 8007334:	08007353 	.word	0x08007353
 8007338:	08007341 	.word	0x08007341
 800733c:	080073db 	.word	0x080073db
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007344:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007348:	2b00      	cmp	r3, #0
 800734a:	d048      	beq.n	80073de <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800734c:	2301      	movs	r3, #1
 800734e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007350:	e045      	b.n	80073de <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007356:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800735a:	d142      	bne.n	80073e2 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800735c:	2301      	movs	r3, #1
 800735e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007360:	e03f      	b.n	80073e2 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	699b      	ldr	r3, [r3, #24]
 8007366:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800736a:	d123      	bne.n	80073b4 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007370:	2b03      	cmp	r3, #3
 8007372:	d838      	bhi.n	80073e6 <DMA_CheckFifoParam+0xda>
 8007374:	a201      	add	r2, pc, #4	@ (adr r2, 800737c <DMA_CheckFifoParam+0x70>)
 8007376:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800737a:	bf00      	nop
 800737c:	0800738d 	.word	0x0800738d
 8007380:	08007393 	.word	0x08007393
 8007384:	0800738d 	.word	0x0800738d
 8007388:	080073a5 	.word	0x080073a5
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800738c:	2301      	movs	r3, #1
 800738e:	73fb      	strb	r3, [r7, #15]
        break;
 8007390:	e030      	b.n	80073f4 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007396:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800739a:	2b00      	cmp	r3, #0
 800739c:	d025      	beq.n	80073ea <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800739e:	2301      	movs	r3, #1
 80073a0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80073a2:	e022      	b.n	80073ea <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073a8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80073ac:	d11f      	bne.n	80073ee <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80073ae:	2301      	movs	r3, #1
 80073b0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80073b2:	e01c      	b.n	80073ee <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073b8:	2b02      	cmp	r3, #2
 80073ba:	d902      	bls.n	80073c2 <DMA_CheckFifoParam+0xb6>
 80073bc:	2b03      	cmp	r3, #3
 80073be:	d003      	beq.n	80073c8 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80073c0:	e018      	b.n	80073f4 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80073c2:	2301      	movs	r3, #1
 80073c4:	73fb      	strb	r3, [r7, #15]
        break;
 80073c6:	e015      	b.n	80073f4 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073cc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d00e      	beq.n	80073f2 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80073d4:	2301      	movs	r3, #1
 80073d6:	73fb      	strb	r3, [r7, #15]
    break;
 80073d8:	e00b      	b.n	80073f2 <DMA_CheckFifoParam+0xe6>
        break;
 80073da:	bf00      	nop
 80073dc:	e00a      	b.n	80073f4 <DMA_CheckFifoParam+0xe8>
        break;
 80073de:	bf00      	nop
 80073e0:	e008      	b.n	80073f4 <DMA_CheckFifoParam+0xe8>
        break;
 80073e2:	bf00      	nop
 80073e4:	e006      	b.n	80073f4 <DMA_CheckFifoParam+0xe8>
        break;
 80073e6:	bf00      	nop
 80073e8:	e004      	b.n	80073f4 <DMA_CheckFifoParam+0xe8>
        break;
 80073ea:	bf00      	nop
 80073ec:	e002      	b.n	80073f4 <DMA_CheckFifoParam+0xe8>
        break;
 80073ee:	bf00      	nop
 80073f0:	e000      	b.n	80073f4 <DMA_CheckFifoParam+0xe8>
    break;
 80073f2:	bf00      	nop
    }
  }

  return status;
 80073f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80073f6:	4618      	mov	r0, r3
 80073f8:	3714      	adds	r7, #20
 80073fa:	46bd      	mov	sp, r7
 80073fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007400:	4770      	bx	lr
 8007402:	bf00      	nop

08007404 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007404:	b480      	push	{r7}
 8007406:	b085      	sub	sp, #20
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	4a38      	ldr	r2, [pc, #224]	@ (80074f8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8007418:	4293      	cmp	r3, r2
 800741a:	d022      	beq.n	8007462 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	4a36      	ldr	r2, [pc, #216]	@ (80074fc <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8007422:	4293      	cmp	r3, r2
 8007424:	d01d      	beq.n	8007462 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	4a35      	ldr	r2, [pc, #212]	@ (8007500 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800742c:	4293      	cmp	r3, r2
 800742e:	d018      	beq.n	8007462 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	4a33      	ldr	r2, [pc, #204]	@ (8007504 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8007436:	4293      	cmp	r3, r2
 8007438:	d013      	beq.n	8007462 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	4a32      	ldr	r2, [pc, #200]	@ (8007508 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8007440:	4293      	cmp	r3, r2
 8007442:	d00e      	beq.n	8007462 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	4a30      	ldr	r2, [pc, #192]	@ (800750c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800744a:	4293      	cmp	r3, r2
 800744c:	d009      	beq.n	8007462 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	4a2f      	ldr	r2, [pc, #188]	@ (8007510 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8007454:	4293      	cmp	r3, r2
 8007456:	d004      	beq.n	8007462 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	4a2d      	ldr	r2, [pc, #180]	@ (8007514 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800745e:	4293      	cmp	r3, r2
 8007460:	d101      	bne.n	8007466 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8007462:	2301      	movs	r3, #1
 8007464:	e000      	b.n	8007468 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8007466:	2300      	movs	r3, #0
 8007468:	2b00      	cmp	r3, #0
 800746a:	d01a      	beq.n	80074a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	b2db      	uxtb	r3, r3
 8007472:	3b08      	subs	r3, #8
 8007474:	4a28      	ldr	r2, [pc, #160]	@ (8007518 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8007476:	fba2 2303 	umull	r2, r3, r2, r3
 800747a:	091b      	lsrs	r3, r3, #4
 800747c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800747e:	68fa      	ldr	r2, [r7, #12]
 8007480:	4b26      	ldr	r3, [pc, #152]	@ (800751c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8007482:	4413      	add	r3, r2
 8007484:	009b      	lsls	r3, r3, #2
 8007486:	461a      	mov	r2, r3
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	4a24      	ldr	r2, [pc, #144]	@ (8007520 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8007490:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	f003 031f 	and.w	r3, r3, #31
 8007498:	2201      	movs	r2, #1
 800749a:	409a      	lsls	r2, r3
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80074a0:	e024      	b.n	80074ec <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	b2db      	uxtb	r3, r3
 80074a8:	3b10      	subs	r3, #16
 80074aa:	4a1e      	ldr	r2, [pc, #120]	@ (8007524 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80074ac:	fba2 2303 	umull	r2, r3, r2, r3
 80074b0:	091b      	lsrs	r3, r3, #4
 80074b2:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80074b4:	68bb      	ldr	r3, [r7, #8]
 80074b6:	4a1c      	ldr	r2, [pc, #112]	@ (8007528 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80074b8:	4293      	cmp	r3, r2
 80074ba:	d806      	bhi.n	80074ca <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80074bc:	68bb      	ldr	r3, [r7, #8]
 80074be:	4a1b      	ldr	r2, [pc, #108]	@ (800752c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80074c0:	4293      	cmp	r3, r2
 80074c2:	d902      	bls.n	80074ca <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	3308      	adds	r3, #8
 80074c8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80074ca:	68fa      	ldr	r2, [r7, #12]
 80074cc:	4b18      	ldr	r3, [pc, #96]	@ (8007530 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80074ce:	4413      	add	r3, r2
 80074d0:	009b      	lsls	r3, r3, #2
 80074d2:	461a      	mov	r2, r3
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	4a16      	ldr	r2, [pc, #88]	@ (8007534 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80074dc:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	f003 031f 	and.w	r3, r3, #31
 80074e4:	2201      	movs	r2, #1
 80074e6:	409a      	lsls	r2, r3
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80074ec:	bf00      	nop
 80074ee:	3714      	adds	r7, #20
 80074f0:	46bd      	mov	sp, r7
 80074f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f6:	4770      	bx	lr
 80074f8:	58025408 	.word	0x58025408
 80074fc:	5802541c 	.word	0x5802541c
 8007500:	58025430 	.word	0x58025430
 8007504:	58025444 	.word	0x58025444
 8007508:	58025458 	.word	0x58025458
 800750c:	5802546c 	.word	0x5802546c
 8007510:	58025480 	.word	0x58025480
 8007514:	58025494 	.word	0x58025494
 8007518:	cccccccd 	.word	0xcccccccd
 800751c:	16009600 	.word	0x16009600
 8007520:	58025880 	.word	0x58025880
 8007524:	aaaaaaab 	.word	0xaaaaaaab
 8007528:	400204b8 	.word	0x400204b8
 800752c:	4002040f 	.word	0x4002040f
 8007530:	10008200 	.word	0x10008200
 8007534:	40020880 	.word	0x40020880

08007538 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007538:	b480      	push	{r7}
 800753a:	b085      	sub	sp, #20
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	685b      	ldr	r3, [r3, #4]
 8007544:	b2db      	uxtb	r3, r3
 8007546:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	2b00      	cmp	r3, #0
 800754c:	d04a      	beq.n	80075e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	2b08      	cmp	r3, #8
 8007552:	d847      	bhi.n	80075e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	4a25      	ldr	r2, [pc, #148]	@ (80075f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800755a:	4293      	cmp	r3, r2
 800755c:	d022      	beq.n	80075a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	4a24      	ldr	r2, [pc, #144]	@ (80075f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8007564:	4293      	cmp	r3, r2
 8007566:	d01d      	beq.n	80075a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	4a22      	ldr	r2, [pc, #136]	@ (80075f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800756e:	4293      	cmp	r3, r2
 8007570:	d018      	beq.n	80075a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	4a21      	ldr	r2, [pc, #132]	@ (80075fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8007578:	4293      	cmp	r3, r2
 800757a:	d013      	beq.n	80075a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	4a1f      	ldr	r2, [pc, #124]	@ (8007600 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8007582:	4293      	cmp	r3, r2
 8007584:	d00e      	beq.n	80075a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	4a1e      	ldr	r2, [pc, #120]	@ (8007604 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800758c:	4293      	cmp	r3, r2
 800758e:	d009      	beq.n	80075a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	4a1c      	ldr	r2, [pc, #112]	@ (8007608 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8007596:	4293      	cmp	r3, r2
 8007598:	d004      	beq.n	80075a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	4a1b      	ldr	r2, [pc, #108]	@ (800760c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80075a0:	4293      	cmp	r3, r2
 80075a2:	d101      	bne.n	80075a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80075a4:	2301      	movs	r3, #1
 80075a6:	e000      	b.n	80075aa <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80075a8:	2300      	movs	r3, #0
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d00a      	beq.n	80075c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80075ae:	68fa      	ldr	r2, [r7, #12]
 80075b0:	4b17      	ldr	r3, [pc, #92]	@ (8007610 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80075b2:	4413      	add	r3, r2
 80075b4:	009b      	lsls	r3, r3, #2
 80075b6:	461a      	mov	r2, r3
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	4a15      	ldr	r2, [pc, #84]	@ (8007614 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80075c0:	671a      	str	r2, [r3, #112]	@ 0x70
 80075c2:	e009      	b.n	80075d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80075c4:	68fa      	ldr	r2, [r7, #12]
 80075c6:	4b14      	ldr	r3, [pc, #80]	@ (8007618 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80075c8:	4413      	add	r3, r2
 80075ca:	009b      	lsls	r3, r3, #2
 80075cc:	461a      	mov	r2, r3
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	4a11      	ldr	r2, [pc, #68]	@ (800761c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80075d6:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	3b01      	subs	r3, #1
 80075dc:	2201      	movs	r2, #1
 80075de:	409a      	lsls	r2, r3
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 80075e4:	bf00      	nop
 80075e6:	3714      	adds	r7, #20
 80075e8:	46bd      	mov	sp, r7
 80075ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ee:	4770      	bx	lr
 80075f0:	58025408 	.word	0x58025408
 80075f4:	5802541c 	.word	0x5802541c
 80075f8:	58025430 	.word	0x58025430
 80075fc:	58025444 	.word	0x58025444
 8007600:	58025458 	.word	0x58025458
 8007604:	5802546c 	.word	0x5802546c
 8007608:	58025480 	.word	0x58025480
 800760c:	58025494 	.word	0x58025494
 8007610:	1600963f 	.word	0x1600963f
 8007614:	58025940 	.word	0x58025940
 8007618:	1000823f 	.word	0x1000823f
 800761c:	40020940 	.word	0x40020940

08007620 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007620:	b480      	push	{r7}
 8007622:	b089      	sub	sp, #36	@ 0x24
 8007624:	af00      	add	r7, sp, #0
 8007626:	6078      	str	r0, [r7, #4]
 8007628:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800762a:	2300      	movs	r3, #0
 800762c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800762e:	4b86      	ldr	r3, [pc, #536]	@ (8007848 <HAL_GPIO_Init+0x228>)
 8007630:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007632:	e18c      	b.n	800794e <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007634:	683b      	ldr	r3, [r7, #0]
 8007636:	681a      	ldr	r2, [r3, #0]
 8007638:	2101      	movs	r1, #1
 800763a:	69fb      	ldr	r3, [r7, #28]
 800763c:	fa01 f303 	lsl.w	r3, r1, r3
 8007640:	4013      	ands	r3, r2
 8007642:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8007644:	693b      	ldr	r3, [r7, #16]
 8007646:	2b00      	cmp	r3, #0
 8007648:	f000 817e 	beq.w	8007948 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800764c:	683b      	ldr	r3, [r7, #0]
 800764e:	685b      	ldr	r3, [r3, #4]
 8007650:	f003 0303 	and.w	r3, r3, #3
 8007654:	2b01      	cmp	r3, #1
 8007656:	d005      	beq.n	8007664 <HAL_GPIO_Init+0x44>
 8007658:	683b      	ldr	r3, [r7, #0]
 800765a:	685b      	ldr	r3, [r3, #4]
 800765c:	f003 0303 	and.w	r3, r3, #3
 8007660:	2b02      	cmp	r3, #2
 8007662:	d130      	bne.n	80076c6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	689b      	ldr	r3, [r3, #8]
 8007668:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800766a:	69fb      	ldr	r3, [r7, #28]
 800766c:	005b      	lsls	r3, r3, #1
 800766e:	2203      	movs	r2, #3
 8007670:	fa02 f303 	lsl.w	r3, r2, r3
 8007674:	43db      	mvns	r3, r3
 8007676:	69ba      	ldr	r2, [r7, #24]
 8007678:	4013      	ands	r3, r2
 800767a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800767c:	683b      	ldr	r3, [r7, #0]
 800767e:	68da      	ldr	r2, [r3, #12]
 8007680:	69fb      	ldr	r3, [r7, #28]
 8007682:	005b      	lsls	r3, r3, #1
 8007684:	fa02 f303 	lsl.w	r3, r2, r3
 8007688:	69ba      	ldr	r2, [r7, #24]
 800768a:	4313      	orrs	r3, r2
 800768c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	69ba      	ldr	r2, [r7, #24]
 8007692:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	685b      	ldr	r3, [r3, #4]
 8007698:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800769a:	2201      	movs	r2, #1
 800769c:	69fb      	ldr	r3, [r7, #28]
 800769e:	fa02 f303 	lsl.w	r3, r2, r3
 80076a2:	43db      	mvns	r3, r3
 80076a4:	69ba      	ldr	r2, [r7, #24]
 80076a6:	4013      	ands	r3, r2
 80076a8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80076aa:	683b      	ldr	r3, [r7, #0]
 80076ac:	685b      	ldr	r3, [r3, #4]
 80076ae:	091b      	lsrs	r3, r3, #4
 80076b0:	f003 0201 	and.w	r2, r3, #1
 80076b4:	69fb      	ldr	r3, [r7, #28]
 80076b6:	fa02 f303 	lsl.w	r3, r2, r3
 80076ba:	69ba      	ldr	r2, [r7, #24]
 80076bc:	4313      	orrs	r3, r2
 80076be:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	69ba      	ldr	r2, [r7, #24]
 80076c4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80076c6:	683b      	ldr	r3, [r7, #0]
 80076c8:	685b      	ldr	r3, [r3, #4]
 80076ca:	f003 0303 	and.w	r3, r3, #3
 80076ce:	2b03      	cmp	r3, #3
 80076d0:	d017      	beq.n	8007702 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	68db      	ldr	r3, [r3, #12]
 80076d6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80076d8:	69fb      	ldr	r3, [r7, #28]
 80076da:	005b      	lsls	r3, r3, #1
 80076dc:	2203      	movs	r2, #3
 80076de:	fa02 f303 	lsl.w	r3, r2, r3
 80076e2:	43db      	mvns	r3, r3
 80076e4:	69ba      	ldr	r2, [r7, #24]
 80076e6:	4013      	ands	r3, r2
 80076e8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80076ea:	683b      	ldr	r3, [r7, #0]
 80076ec:	689a      	ldr	r2, [r3, #8]
 80076ee:	69fb      	ldr	r3, [r7, #28]
 80076f0:	005b      	lsls	r3, r3, #1
 80076f2:	fa02 f303 	lsl.w	r3, r2, r3
 80076f6:	69ba      	ldr	r2, [r7, #24]
 80076f8:	4313      	orrs	r3, r2
 80076fa:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	69ba      	ldr	r2, [r7, #24]
 8007700:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007702:	683b      	ldr	r3, [r7, #0]
 8007704:	685b      	ldr	r3, [r3, #4]
 8007706:	f003 0303 	and.w	r3, r3, #3
 800770a:	2b02      	cmp	r3, #2
 800770c:	d123      	bne.n	8007756 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800770e:	69fb      	ldr	r3, [r7, #28]
 8007710:	08da      	lsrs	r2, r3, #3
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	3208      	adds	r2, #8
 8007716:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800771a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800771c:	69fb      	ldr	r3, [r7, #28]
 800771e:	f003 0307 	and.w	r3, r3, #7
 8007722:	009b      	lsls	r3, r3, #2
 8007724:	220f      	movs	r2, #15
 8007726:	fa02 f303 	lsl.w	r3, r2, r3
 800772a:	43db      	mvns	r3, r3
 800772c:	69ba      	ldr	r2, [r7, #24]
 800772e:	4013      	ands	r3, r2
 8007730:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007732:	683b      	ldr	r3, [r7, #0]
 8007734:	691a      	ldr	r2, [r3, #16]
 8007736:	69fb      	ldr	r3, [r7, #28]
 8007738:	f003 0307 	and.w	r3, r3, #7
 800773c:	009b      	lsls	r3, r3, #2
 800773e:	fa02 f303 	lsl.w	r3, r2, r3
 8007742:	69ba      	ldr	r2, [r7, #24]
 8007744:	4313      	orrs	r3, r2
 8007746:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007748:	69fb      	ldr	r3, [r7, #28]
 800774a:	08da      	lsrs	r2, r3, #3
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	3208      	adds	r2, #8
 8007750:	69b9      	ldr	r1, [r7, #24]
 8007752:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800775c:	69fb      	ldr	r3, [r7, #28]
 800775e:	005b      	lsls	r3, r3, #1
 8007760:	2203      	movs	r2, #3
 8007762:	fa02 f303 	lsl.w	r3, r2, r3
 8007766:	43db      	mvns	r3, r3
 8007768:	69ba      	ldr	r2, [r7, #24]
 800776a:	4013      	ands	r3, r2
 800776c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800776e:	683b      	ldr	r3, [r7, #0]
 8007770:	685b      	ldr	r3, [r3, #4]
 8007772:	f003 0203 	and.w	r2, r3, #3
 8007776:	69fb      	ldr	r3, [r7, #28]
 8007778:	005b      	lsls	r3, r3, #1
 800777a:	fa02 f303 	lsl.w	r3, r2, r3
 800777e:	69ba      	ldr	r2, [r7, #24]
 8007780:	4313      	orrs	r3, r2
 8007782:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	69ba      	ldr	r2, [r7, #24]
 8007788:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800778a:	683b      	ldr	r3, [r7, #0]
 800778c:	685b      	ldr	r3, [r3, #4]
 800778e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007792:	2b00      	cmp	r3, #0
 8007794:	f000 80d8 	beq.w	8007948 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007798:	4b2c      	ldr	r3, [pc, #176]	@ (800784c <HAL_GPIO_Init+0x22c>)
 800779a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800779e:	4a2b      	ldr	r2, [pc, #172]	@ (800784c <HAL_GPIO_Init+0x22c>)
 80077a0:	f043 0302 	orr.w	r3, r3, #2
 80077a4:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80077a8:	4b28      	ldr	r3, [pc, #160]	@ (800784c <HAL_GPIO_Init+0x22c>)
 80077aa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80077ae:	f003 0302 	and.w	r3, r3, #2
 80077b2:	60fb      	str	r3, [r7, #12]
 80077b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80077b6:	4a26      	ldr	r2, [pc, #152]	@ (8007850 <HAL_GPIO_Init+0x230>)
 80077b8:	69fb      	ldr	r3, [r7, #28]
 80077ba:	089b      	lsrs	r3, r3, #2
 80077bc:	3302      	adds	r3, #2
 80077be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80077c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80077c4:	69fb      	ldr	r3, [r7, #28]
 80077c6:	f003 0303 	and.w	r3, r3, #3
 80077ca:	009b      	lsls	r3, r3, #2
 80077cc:	220f      	movs	r2, #15
 80077ce:	fa02 f303 	lsl.w	r3, r2, r3
 80077d2:	43db      	mvns	r3, r3
 80077d4:	69ba      	ldr	r2, [r7, #24]
 80077d6:	4013      	ands	r3, r2
 80077d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	4a1d      	ldr	r2, [pc, #116]	@ (8007854 <HAL_GPIO_Init+0x234>)
 80077de:	4293      	cmp	r3, r2
 80077e0:	d04a      	beq.n	8007878 <HAL_GPIO_Init+0x258>
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	4a1c      	ldr	r2, [pc, #112]	@ (8007858 <HAL_GPIO_Init+0x238>)
 80077e6:	4293      	cmp	r3, r2
 80077e8:	d02b      	beq.n	8007842 <HAL_GPIO_Init+0x222>
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	4a1b      	ldr	r2, [pc, #108]	@ (800785c <HAL_GPIO_Init+0x23c>)
 80077ee:	4293      	cmp	r3, r2
 80077f0:	d025      	beq.n	800783e <HAL_GPIO_Init+0x21e>
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	4a1a      	ldr	r2, [pc, #104]	@ (8007860 <HAL_GPIO_Init+0x240>)
 80077f6:	4293      	cmp	r3, r2
 80077f8:	d01f      	beq.n	800783a <HAL_GPIO_Init+0x21a>
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	4a19      	ldr	r2, [pc, #100]	@ (8007864 <HAL_GPIO_Init+0x244>)
 80077fe:	4293      	cmp	r3, r2
 8007800:	d019      	beq.n	8007836 <HAL_GPIO_Init+0x216>
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	4a18      	ldr	r2, [pc, #96]	@ (8007868 <HAL_GPIO_Init+0x248>)
 8007806:	4293      	cmp	r3, r2
 8007808:	d013      	beq.n	8007832 <HAL_GPIO_Init+0x212>
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	4a17      	ldr	r2, [pc, #92]	@ (800786c <HAL_GPIO_Init+0x24c>)
 800780e:	4293      	cmp	r3, r2
 8007810:	d00d      	beq.n	800782e <HAL_GPIO_Init+0x20e>
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	4a16      	ldr	r2, [pc, #88]	@ (8007870 <HAL_GPIO_Init+0x250>)
 8007816:	4293      	cmp	r3, r2
 8007818:	d007      	beq.n	800782a <HAL_GPIO_Init+0x20a>
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	4a15      	ldr	r2, [pc, #84]	@ (8007874 <HAL_GPIO_Init+0x254>)
 800781e:	4293      	cmp	r3, r2
 8007820:	d101      	bne.n	8007826 <HAL_GPIO_Init+0x206>
 8007822:	2309      	movs	r3, #9
 8007824:	e029      	b.n	800787a <HAL_GPIO_Init+0x25a>
 8007826:	230a      	movs	r3, #10
 8007828:	e027      	b.n	800787a <HAL_GPIO_Init+0x25a>
 800782a:	2307      	movs	r3, #7
 800782c:	e025      	b.n	800787a <HAL_GPIO_Init+0x25a>
 800782e:	2306      	movs	r3, #6
 8007830:	e023      	b.n	800787a <HAL_GPIO_Init+0x25a>
 8007832:	2305      	movs	r3, #5
 8007834:	e021      	b.n	800787a <HAL_GPIO_Init+0x25a>
 8007836:	2304      	movs	r3, #4
 8007838:	e01f      	b.n	800787a <HAL_GPIO_Init+0x25a>
 800783a:	2303      	movs	r3, #3
 800783c:	e01d      	b.n	800787a <HAL_GPIO_Init+0x25a>
 800783e:	2302      	movs	r3, #2
 8007840:	e01b      	b.n	800787a <HAL_GPIO_Init+0x25a>
 8007842:	2301      	movs	r3, #1
 8007844:	e019      	b.n	800787a <HAL_GPIO_Init+0x25a>
 8007846:	bf00      	nop
 8007848:	58000080 	.word	0x58000080
 800784c:	58024400 	.word	0x58024400
 8007850:	58000400 	.word	0x58000400
 8007854:	58020000 	.word	0x58020000
 8007858:	58020400 	.word	0x58020400
 800785c:	58020800 	.word	0x58020800
 8007860:	58020c00 	.word	0x58020c00
 8007864:	58021000 	.word	0x58021000
 8007868:	58021400 	.word	0x58021400
 800786c:	58021800 	.word	0x58021800
 8007870:	58021c00 	.word	0x58021c00
 8007874:	58022400 	.word	0x58022400
 8007878:	2300      	movs	r3, #0
 800787a:	69fa      	ldr	r2, [r7, #28]
 800787c:	f002 0203 	and.w	r2, r2, #3
 8007880:	0092      	lsls	r2, r2, #2
 8007882:	4093      	lsls	r3, r2
 8007884:	69ba      	ldr	r2, [r7, #24]
 8007886:	4313      	orrs	r3, r2
 8007888:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800788a:	4938      	ldr	r1, [pc, #224]	@ (800796c <HAL_GPIO_Init+0x34c>)
 800788c:	69fb      	ldr	r3, [r7, #28]
 800788e:	089b      	lsrs	r3, r3, #2
 8007890:	3302      	adds	r3, #2
 8007892:	69ba      	ldr	r2, [r7, #24]
 8007894:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007898:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80078a0:	693b      	ldr	r3, [r7, #16]
 80078a2:	43db      	mvns	r3, r3
 80078a4:	69ba      	ldr	r2, [r7, #24]
 80078a6:	4013      	ands	r3, r2
 80078a8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80078aa:	683b      	ldr	r3, [r7, #0]
 80078ac:	685b      	ldr	r3, [r3, #4]
 80078ae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d003      	beq.n	80078be <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80078b6:	69ba      	ldr	r2, [r7, #24]
 80078b8:	693b      	ldr	r3, [r7, #16]
 80078ba:	4313      	orrs	r3, r2
 80078bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80078be:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80078c2:	69bb      	ldr	r3, [r7, #24]
 80078c4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80078c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80078ca:	685b      	ldr	r3, [r3, #4]
 80078cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80078ce:	693b      	ldr	r3, [r7, #16]
 80078d0:	43db      	mvns	r3, r3
 80078d2:	69ba      	ldr	r2, [r7, #24]
 80078d4:	4013      	ands	r3, r2
 80078d6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80078d8:	683b      	ldr	r3, [r7, #0]
 80078da:	685b      	ldr	r3, [r3, #4]
 80078dc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d003      	beq.n	80078ec <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 80078e4:	69ba      	ldr	r2, [r7, #24]
 80078e6:	693b      	ldr	r3, [r7, #16]
 80078e8:	4313      	orrs	r3, r2
 80078ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80078ec:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80078f0:	69bb      	ldr	r3, [r7, #24]
 80078f2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80078f4:	697b      	ldr	r3, [r7, #20]
 80078f6:	685b      	ldr	r3, [r3, #4]
 80078f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80078fa:	693b      	ldr	r3, [r7, #16]
 80078fc:	43db      	mvns	r3, r3
 80078fe:	69ba      	ldr	r2, [r7, #24]
 8007900:	4013      	ands	r3, r2
 8007902:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007904:	683b      	ldr	r3, [r7, #0]
 8007906:	685b      	ldr	r3, [r3, #4]
 8007908:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800790c:	2b00      	cmp	r3, #0
 800790e:	d003      	beq.n	8007918 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8007910:	69ba      	ldr	r2, [r7, #24]
 8007912:	693b      	ldr	r3, [r7, #16]
 8007914:	4313      	orrs	r3, r2
 8007916:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8007918:	697b      	ldr	r3, [r7, #20]
 800791a:	69ba      	ldr	r2, [r7, #24]
 800791c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800791e:	697b      	ldr	r3, [r7, #20]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007924:	693b      	ldr	r3, [r7, #16]
 8007926:	43db      	mvns	r3, r3
 8007928:	69ba      	ldr	r2, [r7, #24]
 800792a:	4013      	ands	r3, r2
 800792c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800792e:	683b      	ldr	r3, [r7, #0]
 8007930:	685b      	ldr	r3, [r3, #4]
 8007932:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007936:	2b00      	cmp	r3, #0
 8007938:	d003      	beq.n	8007942 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 800793a:	69ba      	ldr	r2, [r7, #24]
 800793c:	693b      	ldr	r3, [r7, #16]
 800793e:	4313      	orrs	r3, r2
 8007940:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8007942:	697b      	ldr	r3, [r7, #20]
 8007944:	69ba      	ldr	r2, [r7, #24]
 8007946:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8007948:	69fb      	ldr	r3, [r7, #28]
 800794a:	3301      	adds	r3, #1
 800794c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800794e:	683b      	ldr	r3, [r7, #0]
 8007950:	681a      	ldr	r2, [r3, #0]
 8007952:	69fb      	ldr	r3, [r7, #28]
 8007954:	fa22 f303 	lsr.w	r3, r2, r3
 8007958:	2b00      	cmp	r3, #0
 800795a:	f47f ae6b 	bne.w	8007634 <HAL_GPIO_Init+0x14>
  }
}
 800795e:	bf00      	nop
 8007960:	bf00      	nop
 8007962:	3724      	adds	r7, #36	@ 0x24
 8007964:	46bd      	mov	sp, r7
 8007966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796a:	4770      	bx	lr
 800796c:	58000400 	.word	0x58000400

08007970 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007970:	b480      	push	{r7}
 8007972:	b085      	sub	sp, #20
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
 8007978:	460b      	mov	r3, r1
 800797a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	691a      	ldr	r2, [r3, #16]
 8007980:	887b      	ldrh	r3, [r7, #2]
 8007982:	4013      	ands	r3, r2
 8007984:	2b00      	cmp	r3, #0
 8007986:	d002      	beq.n	800798e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007988:	2301      	movs	r3, #1
 800798a:	73fb      	strb	r3, [r7, #15]
 800798c:	e001      	b.n	8007992 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800798e:	2300      	movs	r3, #0
 8007990:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007992:	7bfb      	ldrb	r3, [r7, #15]
}
 8007994:	4618      	mov	r0, r3
 8007996:	3714      	adds	r7, #20
 8007998:	46bd      	mov	sp, r7
 800799a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799e:	4770      	bx	lr

080079a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80079a0:	b480      	push	{r7}
 80079a2:	b083      	sub	sp, #12
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	6078      	str	r0, [r7, #4]
 80079a8:	460b      	mov	r3, r1
 80079aa:	807b      	strh	r3, [r7, #2]
 80079ac:	4613      	mov	r3, r2
 80079ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80079b0:	787b      	ldrb	r3, [r7, #1]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d003      	beq.n	80079be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80079b6:	887a      	ldrh	r2, [r7, #2]
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80079bc:	e003      	b.n	80079c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80079be:	887b      	ldrh	r3, [r7, #2]
 80079c0:	041a      	lsls	r2, r3, #16
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	619a      	str	r2, [r3, #24]
}
 80079c6:	bf00      	nop
 80079c8:	370c      	adds	r7, #12
 80079ca:	46bd      	mov	sp, r7
 80079cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d0:	4770      	bx	lr
	...

080079d4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80079d4:	b580      	push	{r7, lr}
 80079d6:	b082      	sub	sp, #8
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d101      	bne.n	80079e6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80079e2:	2301      	movs	r3, #1
 80079e4:	e08b      	b.n	8007afe <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80079ec:	b2db      	uxtb	r3, r3
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d106      	bne.n	8007a00 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	2200      	movs	r2, #0
 80079f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80079fa:	6878      	ldr	r0, [r7, #4]
 80079fc:	f7fa f8a8 	bl	8001b50 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	2224      	movs	r2, #36	@ 0x24
 8007a04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	681a      	ldr	r2, [r3, #0]
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	f022 0201 	bic.w	r2, r2, #1
 8007a16:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	685a      	ldr	r2, [r3, #4]
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8007a24:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	689a      	ldr	r2, [r3, #8]
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007a34:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	68db      	ldr	r3, [r3, #12]
 8007a3a:	2b01      	cmp	r3, #1
 8007a3c:	d107      	bne.n	8007a4e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	689a      	ldr	r2, [r3, #8]
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007a4a:	609a      	str	r2, [r3, #8]
 8007a4c:	e006      	b.n	8007a5c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	689a      	ldr	r2, [r3, #8]
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8007a5a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	68db      	ldr	r3, [r3, #12]
 8007a60:	2b02      	cmp	r3, #2
 8007a62:	d108      	bne.n	8007a76 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	685a      	ldr	r2, [r3, #4]
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007a72:	605a      	str	r2, [r3, #4]
 8007a74:	e007      	b.n	8007a86 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	685a      	ldr	r2, [r3, #4]
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007a84:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	6859      	ldr	r1, [r3, #4]
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681a      	ldr	r2, [r3, #0]
 8007a90:	4b1d      	ldr	r3, [pc, #116]	@ (8007b08 <HAL_I2C_Init+0x134>)
 8007a92:	430b      	orrs	r3, r1
 8007a94:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	68da      	ldr	r2, [r3, #12]
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007aa4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	691a      	ldr	r2, [r3, #16]
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	695b      	ldr	r3, [r3, #20]
 8007aae:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	699b      	ldr	r3, [r3, #24]
 8007ab6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	430a      	orrs	r2, r1
 8007abe:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	69d9      	ldr	r1, [r3, #28]
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	6a1a      	ldr	r2, [r3, #32]
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	430a      	orrs	r2, r1
 8007ace:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	681a      	ldr	r2, [r3, #0]
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	f042 0201 	orr.w	r2, r2, #1
 8007ade:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	2200      	movs	r2, #0
 8007ae4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	2220      	movs	r2, #32
 8007aea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	2200      	movs	r2, #0
 8007af2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2200      	movs	r2, #0
 8007af8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8007afc:	2300      	movs	r3, #0
}
 8007afe:	4618      	mov	r0, r3
 8007b00:	3708      	adds	r7, #8
 8007b02:	46bd      	mov	sp, r7
 8007b04:	bd80      	pop	{r7, pc}
 8007b06:	bf00      	nop
 8007b08:	02008000 	.word	0x02008000

08007b0c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007b0c:	b480      	push	{r7}
 8007b0e:	b083      	sub	sp, #12
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	6078      	str	r0, [r7, #4]
 8007b14:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007b1c:	b2db      	uxtb	r3, r3
 8007b1e:	2b20      	cmp	r3, #32
 8007b20:	d138      	bne.n	8007b94 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007b28:	2b01      	cmp	r3, #1
 8007b2a:	d101      	bne.n	8007b30 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007b2c:	2302      	movs	r3, #2
 8007b2e:	e032      	b.n	8007b96 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	2201      	movs	r2, #1
 8007b34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	2224      	movs	r2, #36	@ 0x24
 8007b3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	681a      	ldr	r2, [r3, #0]
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	f022 0201 	bic.w	r2, r2, #1
 8007b4e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	681a      	ldr	r2, [r3, #0]
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007b5e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	6819      	ldr	r1, [r3, #0]
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	683a      	ldr	r2, [r7, #0]
 8007b6c:	430a      	orrs	r2, r1
 8007b6e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	681a      	ldr	r2, [r3, #0]
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	f042 0201 	orr.w	r2, r2, #1
 8007b7e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	2220      	movs	r2, #32
 8007b84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007b90:	2300      	movs	r3, #0
 8007b92:	e000      	b.n	8007b96 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007b94:	2302      	movs	r3, #2
  }
}
 8007b96:	4618      	mov	r0, r3
 8007b98:	370c      	adds	r7, #12
 8007b9a:	46bd      	mov	sp, r7
 8007b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba0:	4770      	bx	lr

08007ba2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007ba2:	b480      	push	{r7}
 8007ba4:	b085      	sub	sp, #20
 8007ba6:	af00      	add	r7, sp, #0
 8007ba8:	6078      	str	r0, [r7, #4]
 8007baa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007bb2:	b2db      	uxtb	r3, r3
 8007bb4:	2b20      	cmp	r3, #32
 8007bb6:	d139      	bne.n	8007c2c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007bbe:	2b01      	cmp	r3, #1
 8007bc0:	d101      	bne.n	8007bc6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007bc2:	2302      	movs	r3, #2
 8007bc4:	e033      	b.n	8007c2e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	2201      	movs	r2, #1
 8007bca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	2224      	movs	r2, #36	@ 0x24
 8007bd2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	681a      	ldr	r2, [r3, #0]
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	f022 0201 	bic.w	r2, r2, #1
 8007be4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8007bf4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007bf6:	683b      	ldr	r3, [r7, #0]
 8007bf8:	021b      	lsls	r3, r3, #8
 8007bfa:	68fa      	ldr	r2, [r7, #12]
 8007bfc:	4313      	orrs	r3, r2
 8007bfe:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	68fa      	ldr	r2, [r7, #12]
 8007c06:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	681a      	ldr	r2, [r3, #0]
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	f042 0201 	orr.w	r2, r2, #1
 8007c16:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2220      	movs	r2, #32
 8007c1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	2200      	movs	r2, #0
 8007c24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007c28:	2300      	movs	r3, #0
 8007c2a:	e000      	b.n	8007c2e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007c2c:	2302      	movs	r3, #2
  }
}
 8007c2e:	4618      	mov	r0, r3
 8007c30:	3714      	adds	r7, #20
 8007c32:	46bd      	mov	sp, r7
 8007c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c38:	4770      	bx	lr

08007c3a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8007c3a:	b580      	push	{r7, lr}
 8007c3c:	b086      	sub	sp, #24
 8007c3e:	af02      	add	r7, sp, #8
 8007c40:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d101      	bne.n	8007c4c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8007c48:	2301      	movs	r3, #1
 8007c4a:	e0fe      	b.n	8007e4a <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8007c52:	b2db      	uxtb	r3, r3
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d106      	bne.n	8007c66 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8007c60:	6878      	ldr	r0, [r7, #4]
 8007c62:	f00b f9d1 	bl	8013008 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	2203      	movs	r2, #3
 8007c6a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	4618      	mov	r0, r3
 8007c74:	f007 fd8d 	bl	800f792 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	6818      	ldr	r0, [r3, #0]
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	7c1a      	ldrb	r2, [r3, #16]
 8007c80:	f88d 2000 	strb.w	r2, [sp]
 8007c84:	3304      	adds	r3, #4
 8007c86:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007c88:	f007 fc5e 	bl	800f548 <USB_CoreInit>
 8007c8c:	4603      	mov	r3, r0
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d005      	beq.n	8007c9e <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	2202      	movs	r2, #2
 8007c96:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8007c9a:	2301      	movs	r3, #1
 8007c9c:	e0d5      	b.n	8007e4a <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	2100      	movs	r1, #0
 8007ca4:	4618      	mov	r0, r3
 8007ca6:	f007 fd85 	bl	800f7b4 <USB_SetCurrentMode>
 8007caa:	4603      	mov	r3, r0
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d005      	beq.n	8007cbc <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	2202      	movs	r2, #2
 8007cb4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8007cb8:	2301      	movs	r3, #1
 8007cba:	e0c6      	b.n	8007e4a <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007cbc:	2300      	movs	r3, #0
 8007cbe:	73fb      	strb	r3, [r7, #15]
 8007cc0:	e04a      	b.n	8007d58 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8007cc2:	7bfa      	ldrb	r2, [r7, #15]
 8007cc4:	6879      	ldr	r1, [r7, #4]
 8007cc6:	4613      	mov	r3, r2
 8007cc8:	00db      	lsls	r3, r3, #3
 8007cca:	4413      	add	r3, r2
 8007ccc:	009b      	lsls	r3, r3, #2
 8007cce:	440b      	add	r3, r1
 8007cd0:	3315      	adds	r3, #21
 8007cd2:	2201      	movs	r2, #1
 8007cd4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8007cd6:	7bfa      	ldrb	r2, [r7, #15]
 8007cd8:	6879      	ldr	r1, [r7, #4]
 8007cda:	4613      	mov	r3, r2
 8007cdc:	00db      	lsls	r3, r3, #3
 8007cde:	4413      	add	r3, r2
 8007ce0:	009b      	lsls	r3, r3, #2
 8007ce2:	440b      	add	r3, r1
 8007ce4:	3314      	adds	r3, #20
 8007ce6:	7bfa      	ldrb	r2, [r7, #15]
 8007ce8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8007cea:	7bfa      	ldrb	r2, [r7, #15]
 8007cec:	7bfb      	ldrb	r3, [r7, #15]
 8007cee:	b298      	uxth	r0, r3
 8007cf0:	6879      	ldr	r1, [r7, #4]
 8007cf2:	4613      	mov	r3, r2
 8007cf4:	00db      	lsls	r3, r3, #3
 8007cf6:	4413      	add	r3, r2
 8007cf8:	009b      	lsls	r3, r3, #2
 8007cfa:	440b      	add	r3, r1
 8007cfc:	332e      	adds	r3, #46	@ 0x2e
 8007cfe:	4602      	mov	r2, r0
 8007d00:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8007d02:	7bfa      	ldrb	r2, [r7, #15]
 8007d04:	6879      	ldr	r1, [r7, #4]
 8007d06:	4613      	mov	r3, r2
 8007d08:	00db      	lsls	r3, r3, #3
 8007d0a:	4413      	add	r3, r2
 8007d0c:	009b      	lsls	r3, r3, #2
 8007d0e:	440b      	add	r3, r1
 8007d10:	3318      	adds	r3, #24
 8007d12:	2200      	movs	r2, #0
 8007d14:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8007d16:	7bfa      	ldrb	r2, [r7, #15]
 8007d18:	6879      	ldr	r1, [r7, #4]
 8007d1a:	4613      	mov	r3, r2
 8007d1c:	00db      	lsls	r3, r3, #3
 8007d1e:	4413      	add	r3, r2
 8007d20:	009b      	lsls	r3, r3, #2
 8007d22:	440b      	add	r3, r1
 8007d24:	331c      	adds	r3, #28
 8007d26:	2200      	movs	r2, #0
 8007d28:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8007d2a:	7bfa      	ldrb	r2, [r7, #15]
 8007d2c:	6879      	ldr	r1, [r7, #4]
 8007d2e:	4613      	mov	r3, r2
 8007d30:	00db      	lsls	r3, r3, #3
 8007d32:	4413      	add	r3, r2
 8007d34:	009b      	lsls	r3, r3, #2
 8007d36:	440b      	add	r3, r1
 8007d38:	3320      	adds	r3, #32
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8007d3e:	7bfa      	ldrb	r2, [r7, #15]
 8007d40:	6879      	ldr	r1, [r7, #4]
 8007d42:	4613      	mov	r3, r2
 8007d44:	00db      	lsls	r3, r3, #3
 8007d46:	4413      	add	r3, r2
 8007d48:	009b      	lsls	r3, r3, #2
 8007d4a:	440b      	add	r3, r1
 8007d4c:	3324      	adds	r3, #36	@ 0x24
 8007d4e:	2200      	movs	r2, #0
 8007d50:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007d52:	7bfb      	ldrb	r3, [r7, #15]
 8007d54:	3301      	adds	r3, #1
 8007d56:	73fb      	strb	r3, [r7, #15]
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	791b      	ldrb	r3, [r3, #4]
 8007d5c:	7bfa      	ldrb	r2, [r7, #15]
 8007d5e:	429a      	cmp	r2, r3
 8007d60:	d3af      	bcc.n	8007cc2 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007d62:	2300      	movs	r3, #0
 8007d64:	73fb      	strb	r3, [r7, #15]
 8007d66:	e044      	b.n	8007df2 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8007d68:	7bfa      	ldrb	r2, [r7, #15]
 8007d6a:	6879      	ldr	r1, [r7, #4]
 8007d6c:	4613      	mov	r3, r2
 8007d6e:	00db      	lsls	r3, r3, #3
 8007d70:	4413      	add	r3, r2
 8007d72:	009b      	lsls	r3, r3, #2
 8007d74:	440b      	add	r3, r1
 8007d76:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8007d7e:	7bfa      	ldrb	r2, [r7, #15]
 8007d80:	6879      	ldr	r1, [r7, #4]
 8007d82:	4613      	mov	r3, r2
 8007d84:	00db      	lsls	r3, r3, #3
 8007d86:	4413      	add	r3, r2
 8007d88:	009b      	lsls	r3, r3, #2
 8007d8a:	440b      	add	r3, r1
 8007d8c:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8007d90:	7bfa      	ldrb	r2, [r7, #15]
 8007d92:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8007d94:	7bfa      	ldrb	r2, [r7, #15]
 8007d96:	6879      	ldr	r1, [r7, #4]
 8007d98:	4613      	mov	r3, r2
 8007d9a:	00db      	lsls	r3, r3, #3
 8007d9c:	4413      	add	r3, r2
 8007d9e:	009b      	lsls	r3, r3, #2
 8007da0:	440b      	add	r3, r1
 8007da2:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8007da6:	2200      	movs	r2, #0
 8007da8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8007daa:	7bfa      	ldrb	r2, [r7, #15]
 8007dac:	6879      	ldr	r1, [r7, #4]
 8007dae:	4613      	mov	r3, r2
 8007db0:	00db      	lsls	r3, r3, #3
 8007db2:	4413      	add	r3, r2
 8007db4:	009b      	lsls	r3, r3, #2
 8007db6:	440b      	add	r3, r1
 8007db8:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8007dbc:	2200      	movs	r2, #0
 8007dbe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8007dc0:	7bfa      	ldrb	r2, [r7, #15]
 8007dc2:	6879      	ldr	r1, [r7, #4]
 8007dc4:	4613      	mov	r3, r2
 8007dc6:	00db      	lsls	r3, r3, #3
 8007dc8:	4413      	add	r3, r2
 8007dca:	009b      	lsls	r3, r3, #2
 8007dcc:	440b      	add	r3, r1
 8007dce:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8007dd2:	2200      	movs	r2, #0
 8007dd4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8007dd6:	7bfa      	ldrb	r2, [r7, #15]
 8007dd8:	6879      	ldr	r1, [r7, #4]
 8007dda:	4613      	mov	r3, r2
 8007ddc:	00db      	lsls	r3, r3, #3
 8007dde:	4413      	add	r3, r2
 8007de0:	009b      	lsls	r3, r3, #2
 8007de2:	440b      	add	r3, r1
 8007de4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8007de8:	2200      	movs	r2, #0
 8007dea:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007dec:	7bfb      	ldrb	r3, [r7, #15]
 8007dee:	3301      	adds	r3, #1
 8007df0:	73fb      	strb	r3, [r7, #15]
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	791b      	ldrb	r3, [r3, #4]
 8007df6:	7bfa      	ldrb	r2, [r7, #15]
 8007df8:	429a      	cmp	r2, r3
 8007dfa:	d3b5      	bcc.n	8007d68 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	6818      	ldr	r0, [r3, #0]
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	7c1a      	ldrb	r2, [r3, #16]
 8007e04:	f88d 2000 	strb.w	r2, [sp]
 8007e08:	3304      	adds	r3, #4
 8007e0a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007e0c:	f007 fd1e 	bl	800f84c <USB_DevInit>
 8007e10:	4603      	mov	r3, r0
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d005      	beq.n	8007e22 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	2202      	movs	r2, #2
 8007e1a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8007e1e:	2301      	movs	r3, #1
 8007e20:	e013      	b.n	8007e4a <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	2200      	movs	r2, #0
 8007e26:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	2201      	movs	r2, #1
 8007e2c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	7b1b      	ldrb	r3, [r3, #12]
 8007e34:	2b01      	cmp	r3, #1
 8007e36:	d102      	bne.n	8007e3e <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8007e38:	6878      	ldr	r0, [r7, #4]
 8007e3a:	f001 f96d 	bl	8009118 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	4618      	mov	r0, r3
 8007e44:	f008 fd5d 	bl	8010902 <USB_DevDisconnect>

  return HAL_OK;
 8007e48:	2300      	movs	r3, #0
}
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	3710      	adds	r7, #16
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	bd80      	pop	{r7, pc}

08007e52 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8007e52:	b580      	push	{r7, lr}
 8007e54:	b084      	sub	sp, #16
 8007e56:	af00      	add	r7, sp, #0
 8007e58:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8007e66:	2b01      	cmp	r3, #1
 8007e68:	d101      	bne.n	8007e6e <HAL_PCD_Start+0x1c>
 8007e6a:	2302      	movs	r3, #2
 8007e6c:	e022      	b.n	8007eb4 <HAL_PCD_Start+0x62>
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	2201      	movs	r2, #1
 8007e72:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	68db      	ldr	r3, [r3, #12]
 8007e7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d009      	beq.n	8007e96 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8007e86:	2b01      	cmp	r3, #1
 8007e88:	d105      	bne.n	8007e96 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e8e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	f007 fc68 	bl	800f770 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	f008 fd0b 	bl	80108c0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	2200      	movs	r2, #0
 8007eae:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8007eb2:	2300      	movs	r3, #0
}
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	3710      	adds	r7, #16
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	bd80      	pop	{r7, pc}

08007ebc <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8007ebc:	b590      	push	{r4, r7, lr}
 8007ebe:	b08d      	sub	sp, #52	@ 0x34
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007eca:	6a3b      	ldr	r3, [r7, #32]
 8007ecc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	f008 fdc9 	bl	8010a6a <USB_GetMode>
 8007ed8:	4603      	mov	r3, r0
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	f040 84b9 	bne.w	8008852 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	f008 fd2d 	bl	8010944 <USB_ReadInterrupts>
 8007eea:	4603      	mov	r3, r0
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	f000 84af 	beq.w	8008850 <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8007ef2:	69fb      	ldr	r3, [r7, #28]
 8007ef4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007ef8:	689b      	ldr	r3, [r3, #8]
 8007efa:	0a1b      	lsrs	r3, r3, #8
 8007efc:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	f008 fd1a 	bl	8010944 <USB_ReadInterrupts>
 8007f10:	4603      	mov	r3, r0
 8007f12:	f003 0302 	and.w	r3, r3, #2
 8007f16:	2b02      	cmp	r3, #2
 8007f18:	d107      	bne.n	8007f2a <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	695a      	ldr	r2, [r3, #20]
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	f002 0202 	and.w	r2, r2, #2
 8007f28:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	4618      	mov	r0, r3
 8007f30:	f008 fd08 	bl	8010944 <USB_ReadInterrupts>
 8007f34:	4603      	mov	r3, r0
 8007f36:	f003 0310 	and.w	r3, r3, #16
 8007f3a:	2b10      	cmp	r3, #16
 8007f3c:	d161      	bne.n	8008002 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	699a      	ldr	r2, [r3, #24]
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	f022 0210 	bic.w	r2, r2, #16
 8007f4c:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8007f4e:	6a3b      	ldr	r3, [r7, #32]
 8007f50:	6a1b      	ldr	r3, [r3, #32]
 8007f52:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8007f54:	69bb      	ldr	r3, [r7, #24]
 8007f56:	f003 020f 	and.w	r2, r3, #15
 8007f5a:	4613      	mov	r3, r2
 8007f5c:	00db      	lsls	r3, r3, #3
 8007f5e:	4413      	add	r3, r2
 8007f60:	009b      	lsls	r3, r3, #2
 8007f62:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007f66:	687a      	ldr	r2, [r7, #4]
 8007f68:	4413      	add	r3, r2
 8007f6a:	3304      	adds	r3, #4
 8007f6c:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8007f6e:	69bb      	ldr	r3, [r7, #24]
 8007f70:	0c5b      	lsrs	r3, r3, #17
 8007f72:	f003 030f 	and.w	r3, r3, #15
 8007f76:	2b02      	cmp	r3, #2
 8007f78:	d124      	bne.n	8007fc4 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8007f7a:	69ba      	ldr	r2, [r7, #24]
 8007f7c:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8007f80:	4013      	ands	r3, r2
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d035      	beq.n	8007ff2 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8007f86:	697b      	ldr	r3, [r7, #20]
 8007f88:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8007f8a:	69bb      	ldr	r3, [r7, #24]
 8007f8c:	091b      	lsrs	r3, r3, #4
 8007f8e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8007f90:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007f94:	b29b      	uxth	r3, r3
 8007f96:	461a      	mov	r2, r3
 8007f98:	6a38      	ldr	r0, [r7, #32]
 8007f9a:	f008 fb3f 	bl	801061c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007f9e:	697b      	ldr	r3, [r7, #20]
 8007fa0:	68da      	ldr	r2, [r3, #12]
 8007fa2:	69bb      	ldr	r3, [r7, #24]
 8007fa4:	091b      	lsrs	r3, r3, #4
 8007fa6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007faa:	441a      	add	r2, r3
 8007fac:	697b      	ldr	r3, [r7, #20]
 8007fae:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007fb0:	697b      	ldr	r3, [r7, #20]
 8007fb2:	695a      	ldr	r2, [r3, #20]
 8007fb4:	69bb      	ldr	r3, [r7, #24]
 8007fb6:	091b      	lsrs	r3, r3, #4
 8007fb8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007fbc:	441a      	add	r2, r3
 8007fbe:	697b      	ldr	r3, [r7, #20]
 8007fc0:	615a      	str	r2, [r3, #20]
 8007fc2:	e016      	b.n	8007ff2 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8007fc4:	69bb      	ldr	r3, [r7, #24]
 8007fc6:	0c5b      	lsrs	r3, r3, #17
 8007fc8:	f003 030f 	and.w	r3, r3, #15
 8007fcc:	2b06      	cmp	r3, #6
 8007fce:	d110      	bne.n	8007ff2 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007fd6:	2208      	movs	r2, #8
 8007fd8:	4619      	mov	r1, r3
 8007fda:	6a38      	ldr	r0, [r7, #32]
 8007fdc:	f008 fb1e 	bl	801061c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007fe0:	697b      	ldr	r3, [r7, #20]
 8007fe2:	695a      	ldr	r2, [r3, #20]
 8007fe4:	69bb      	ldr	r3, [r7, #24]
 8007fe6:	091b      	lsrs	r3, r3, #4
 8007fe8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007fec:	441a      	add	r2, r3
 8007fee:	697b      	ldr	r3, [r7, #20]
 8007ff0:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	699a      	ldr	r2, [r3, #24]
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	f042 0210 	orr.w	r2, r2, #16
 8008000:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	4618      	mov	r0, r3
 8008008:	f008 fc9c 	bl	8010944 <USB_ReadInterrupts>
 800800c:	4603      	mov	r3, r0
 800800e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008012:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8008016:	f040 80a7 	bne.w	8008168 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800801a:	2300      	movs	r3, #0
 800801c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	4618      	mov	r0, r3
 8008024:	f008 fca1 	bl	801096a <USB_ReadDevAllOutEpInterrupt>
 8008028:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800802a:	e099      	b.n	8008160 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800802c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800802e:	f003 0301 	and.w	r3, r3, #1
 8008032:	2b00      	cmp	r3, #0
 8008034:	f000 808e 	beq.w	8008154 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800803e:	b2d2      	uxtb	r2, r2
 8008040:	4611      	mov	r1, r2
 8008042:	4618      	mov	r0, r3
 8008044:	f008 fcc5 	bl	80109d2 <USB_ReadDevOutEPInterrupt>
 8008048:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800804a:	693b      	ldr	r3, [r7, #16]
 800804c:	f003 0301 	and.w	r3, r3, #1
 8008050:	2b00      	cmp	r3, #0
 8008052:	d00c      	beq.n	800806e <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8008054:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008056:	015a      	lsls	r2, r3, #5
 8008058:	69fb      	ldr	r3, [r7, #28]
 800805a:	4413      	add	r3, r2
 800805c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008060:	461a      	mov	r2, r3
 8008062:	2301      	movs	r3, #1
 8008064:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8008066:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008068:	6878      	ldr	r0, [r7, #4]
 800806a:	f000 fecf 	bl	8008e0c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800806e:	693b      	ldr	r3, [r7, #16]
 8008070:	f003 0308 	and.w	r3, r3, #8
 8008074:	2b00      	cmp	r3, #0
 8008076:	d00c      	beq.n	8008092 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8008078:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800807a:	015a      	lsls	r2, r3, #5
 800807c:	69fb      	ldr	r3, [r7, #28]
 800807e:	4413      	add	r3, r2
 8008080:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008084:	461a      	mov	r2, r3
 8008086:	2308      	movs	r3, #8
 8008088:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800808a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800808c:	6878      	ldr	r0, [r7, #4]
 800808e:	f000 ffa5 	bl	8008fdc <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8008092:	693b      	ldr	r3, [r7, #16]
 8008094:	f003 0310 	and.w	r3, r3, #16
 8008098:	2b00      	cmp	r3, #0
 800809a:	d008      	beq.n	80080ae <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800809c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800809e:	015a      	lsls	r2, r3, #5
 80080a0:	69fb      	ldr	r3, [r7, #28]
 80080a2:	4413      	add	r3, r2
 80080a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80080a8:	461a      	mov	r2, r3
 80080aa:	2310      	movs	r3, #16
 80080ac:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80080ae:	693b      	ldr	r3, [r7, #16]
 80080b0:	f003 0302 	and.w	r3, r3, #2
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d030      	beq.n	800811a <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80080b8:	6a3b      	ldr	r3, [r7, #32]
 80080ba:	695b      	ldr	r3, [r3, #20]
 80080bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80080c0:	2b80      	cmp	r3, #128	@ 0x80
 80080c2:	d109      	bne.n	80080d8 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80080c4:	69fb      	ldr	r3, [r7, #28]
 80080c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80080ca:	685b      	ldr	r3, [r3, #4]
 80080cc:	69fa      	ldr	r2, [r7, #28]
 80080ce:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80080d2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80080d6:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80080d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80080da:	4613      	mov	r3, r2
 80080dc:	00db      	lsls	r3, r3, #3
 80080de:	4413      	add	r3, r2
 80080e0:	009b      	lsls	r3, r3, #2
 80080e2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80080e6:	687a      	ldr	r2, [r7, #4]
 80080e8:	4413      	add	r3, r2
 80080ea:	3304      	adds	r3, #4
 80080ec:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80080ee:	697b      	ldr	r3, [r7, #20]
 80080f0:	78db      	ldrb	r3, [r3, #3]
 80080f2:	2b01      	cmp	r3, #1
 80080f4:	d108      	bne.n	8008108 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80080f6:	697b      	ldr	r3, [r7, #20]
 80080f8:	2200      	movs	r2, #0
 80080fa:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80080fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080fe:	b2db      	uxtb	r3, r3
 8008100:	4619      	mov	r1, r3
 8008102:	6878      	ldr	r0, [r7, #4]
 8008104:	f00b f878 	bl	80131f8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8008108:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800810a:	015a      	lsls	r2, r3, #5
 800810c:	69fb      	ldr	r3, [r7, #28]
 800810e:	4413      	add	r3, r2
 8008110:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008114:	461a      	mov	r2, r3
 8008116:	2302      	movs	r3, #2
 8008118:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800811a:	693b      	ldr	r3, [r7, #16]
 800811c:	f003 0320 	and.w	r3, r3, #32
 8008120:	2b00      	cmp	r3, #0
 8008122:	d008      	beq.n	8008136 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008124:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008126:	015a      	lsls	r2, r3, #5
 8008128:	69fb      	ldr	r3, [r7, #28]
 800812a:	4413      	add	r3, r2
 800812c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008130:	461a      	mov	r2, r3
 8008132:	2320      	movs	r3, #32
 8008134:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8008136:	693b      	ldr	r3, [r7, #16]
 8008138:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800813c:	2b00      	cmp	r3, #0
 800813e:	d009      	beq.n	8008154 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8008140:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008142:	015a      	lsls	r2, r3, #5
 8008144:	69fb      	ldr	r3, [r7, #28]
 8008146:	4413      	add	r3, r2
 8008148:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800814c:	461a      	mov	r2, r3
 800814e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8008152:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8008154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008156:	3301      	adds	r3, #1
 8008158:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800815a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800815c:	085b      	lsrs	r3, r3, #1
 800815e:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8008160:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008162:	2b00      	cmp	r3, #0
 8008164:	f47f af62 	bne.w	800802c <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	4618      	mov	r0, r3
 800816e:	f008 fbe9 	bl	8010944 <USB_ReadInterrupts>
 8008172:	4603      	mov	r3, r0
 8008174:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008178:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800817c:	f040 80db 	bne.w	8008336 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	4618      	mov	r0, r3
 8008186:	f008 fc0a 	bl	801099e <USB_ReadDevAllInEpInterrupt>
 800818a:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800818c:	2300      	movs	r3, #0
 800818e:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8008190:	e0cd      	b.n	800832e <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8008192:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008194:	f003 0301 	and.w	r3, r3, #1
 8008198:	2b00      	cmp	r3, #0
 800819a:	f000 80c2 	beq.w	8008322 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80081a4:	b2d2      	uxtb	r2, r2
 80081a6:	4611      	mov	r1, r2
 80081a8:	4618      	mov	r0, r3
 80081aa:	f008 fc30 	bl	8010a0e <USB_ReadDevInEPInterrupt>
 80081ae:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80081b0:	693b      	ldr	r3, [r7, #16]
 80081b2:	f003 0301 	and.w	r3, r3, #1
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d057      	beq.n	800826a <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80081ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081bc:	f003 030f 	and.w	r3, r3, #15
 80081c0:	2201      	movs	r2, #1
 80081c2:	fa02 f303 	lsl.w	r3, r2, r3
 80081c6:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80081c8:	69fb      	ldr	r3, [r7, #28]
 80081ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80081ce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	43db      	mvns	r3, r3
 80081d4:	69f9      	ldr	r1, [r7, #28]
 80081d6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80081da:	4013      	ands	r3, r2
 80081dc:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80081de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081e0:	015a      	lsls	r2, r3, #5
 80081e2:	69fb      	ldr	r3, [r7, #28]
 80081e4:	4413      	add	r3, r2
 80081e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80081ea:	461a      	mov	r2, r3
 80081ec:	2301      	movs	r3, #1
 80081ee:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	799b      	ldrb	r3, [r3, #6]
 80081f4:	2b01      	cmp	r3, #1
 80081f6:	d132      	bne.n	800825e <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80081f8:	6879      	ldr	r1, [r7, #4]
 80081fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80081fc:	4613      	mov	r3, r2
 80081fe:	00db      	lsls	r3, r3, #3
 8008200:	4413      	add	r3, r2
 8008202:	009b      	lsls	r3, r3, #2
 8008204:	440b      	add	r3, r1
 8008206:	3320      	adds	r3, #32
 8008208:	6819      	ldr	r1, [r3, #0]
 800820a:	6878      	ldr	r0, [r7, #4]
 800820c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800820e:	4613      	mov	r3, r2
 8008210:	00db      	lsls	r3, r3, #3
 8008212:	4413      	add	r3, r2
 8008214:	009b      	lsls	r3, r3, #2
 8008216:	4403      	add	r3, r0
 8008218:	331c      	adds	r3, #28
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	4419      	add	r1, r3
 800821e:	6878      	ldr	r0, [r7, #4]
 8008220:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008222:	4613      	mov	r3, r2
 8008224:	00db      	lsls	r3, r3, #3
 8008226:	4413      	add	r3, r2
 8008228:	009b      	lsls	r3, r3, #2
 800822a:	4403      	add	r3, r0
 800822c:	3320      	adds	r3, #32
 800822e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8008230:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008232:	2b00      	cmp	r3, #0
 8008234:	d113      	bne.n	800825e <HAL_PCD_IRQHandler+0x3a2>
 8008236:	6879      	ldr	r1, [r7, #4]
 8008238:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800823a:	4613      	mov	r3, r2
 800823c:	00db      	lsls	r3, r3, #3
 800823e:	4413      	add	r3, r2
 8008240:	009b      	lsls	r3, r3, #2
 8008242:	440b      	add	r3, r1
 8008244:	3324      	adds	r3, #36	@ 0x24
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	2b00      	cmp	r3, #0
 800824a:	d108      	bne.n	800825e <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	6818      	ldr	r0, [r3, #0]
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8008256:	461a      	mov	r2, r3
 8008258:	2101      	movs	r1, #1
 800825a:	f008 fc39 	bl	8010ad0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800825e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008260:	b2db      	uxtb	r3, r3
 8008262:	4619      	mov	r1, r3
 8008264:	6878      	ldr	r0, [r7, #4]
 8008266:	f00a ff42 	bl	80130ee <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800826a:	693b      	ldr	r3, [r7, #16]
 800826c:	f003 0308 	and.w	r3, r3, #8
 8008270:	2b00      	cmp	r3, #0
 8008272:	d008      	beq.n	8008286 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8008274:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008276:	015a      	lsls	r2, r3, #5
 8008278:	69fb      	ldr	r3, [r7, #28]
 800827a:	4413      	add	r3, r2
 800827c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008280:	461a      	mov	r2, r3
 8008282:	2308      	movs	r3, #8
 8008284:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8008286:	693b      	ldr	r3, [r7, #16]
 8008288:	f003 0310 	and.w	r3, r3, #16
 800828c:	2b00      	cmp	r3, #0
 800828e:	d008      	beq.n	80082a2 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8008290:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008292:	015a      	lsls	r2, r3, #5
 8008294:	69fb      	ldr	r3, [r7, #28]
 8008296:	4413      	add	r3, r2
 8008298:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800829c:	461a      	mov	r2, r3
 800829e:	2310      	movs	r3, #16
 80082a0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80082a2:	693b      	ldr	r3, [r7, #16]
 80082a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d008      	beq.n	80082be <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80082ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082ae:	015a      	lsls	r2, r3, #5
 80082b0:	69fb      	ldr	r3, [r7, #28]
 80082b2:	4413      	add	r3, r2
 80082b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80082b8:	461a      	mov	r2, r3
 80082ba:	2340      	movs	r3, #64	@ 0x40
 80082bc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80082be:	693b      	ldr	r3, [r7, #16]
 80082c0:	f003 0302 	and.w	r3, r3, #2
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d023      	beq.n	8008310 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80082c8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80082ca:	6a38      	ldr	r0, [r7, #32]
 80082cc:	f007 fc1c 	bl	800fb08 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80082d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80082d2:	4613      	mov	r3, r2
 80082d4:	00db      	lsls	r3, r3, #3
 80082d6:	4413      	add	r3, r2
 80082d8:	009b      	lsls	r3, r3, #2
 80082da:	3310      	adds	r3, #16
 80082dc:	687a      	ldr	r2, [r7, #4]
 80082de:	4413      	add	r3, r2
 80082e0:	3304      	adds	r3, #4
 80082e2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80082e4:	697b      	ldr	r3, [r7, #20]
 80082e6:	78db      	ldrb	r3, [r3, #3]
 80082e8:	2b01      	cmp	r3, #1
 80082ea:	d108      	bne.n	80082fe <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80082ec:	697b      	ldr	r3, [r7, #20]
 80082ee:	2200      	movs	r2, #0
 80082f0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80082f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082f4:	b2db      	uxtb	r3, r3
 80082f6:	4619      	mov	r1, r3
 80082f8:	6878      	ldr	r0, [r7, #4]
 80082fa:	f00a ff8f 	bl	801321c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80082fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008300:	015a      	lsls	r2, r3, #5
 8008302:	69fb      	ldr	r3, [r7, #28]
 8008304:	4413      	add	r3, r2
 8008306:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800830a:	461a      	mov	r2, r3
 800830c:	2302      	movs	r3, #2
 800830e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8008310:	693b      	ldr	r3, [r7, #16]
 8008312:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008316:	2b00      	cmp	r3, #0
 8008318:	d003      	beq.n	8008322 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800831a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800831c:	6878      	ldr	r0, [r7, #4]
 800831e:	f000 fce8 	bl	8008cf2 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8008322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008324:	3301      	adds	r3, #1
 8008326:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8008328:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800832a:	085b      	lsrs	r3, r3, #1
 800832c:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800832e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008330:	2b00      	cmp	r3, #0
 8008332:	f47f af2e 	bne.w	8008192 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	4618      	mov	r0, r3
 800833c:	f008 fb02 	bl	8010944 <USB_ReadInterrupts>
 8008340:	4603      	mov	r3, r0
 8008342:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008346:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800834a:	d122      	bne.n	8008392 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800834c:	69fb      	ldr	r3, [r7, #28]
 800834e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008352:	685b      	ldr	r3, [r3, #4]
 8008354:	69fa      	ldr	r2, [r7, #28]
 8008356:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800835a:	f023 0301 	bic.w	r3, r3, #1
 800835e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8008366:	2b01      	cmp	r3, #1
 8008368:	d108      	bne.n	800837c <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	2200      	movs	r2, #0
 800836e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8008372:	2100      	movs	r1, #0
 8008374:	6878      	ldr	r0, [r7, #4]
 8008376:	f000 fef3 	bl	8009160 <HAL_PCDEx_LPM_Callback>
 800837a:	e002      	b.n	8008382 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800837c:	6878      	ldr	r0, [r7, #4]
 800837e:	f00a ff2d 	bl	80131dc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	695a      	ldr	r2, [r3, #20]
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8008390:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	4618      	mov	r0, r3
 8008398:	f008 fad4 	bl	8010944 <USB_ReadInterrupts>
 800839c:	4603      	mov	r3, r0
 800839e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80083a2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80083a6:	d112      	bne.n	80083ce <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80083a8:	69fb      	ldr	r3, [r7, #28]
 80083aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80083ae:	689b      	ldr	r3, [r3, #8]
 80083b0:	f003 0301 	and.w	r3, r3, #1
 80083b4:	2b01      	cmp	r3, #1
 80083b6:	d102      	bne.n	80083be <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80083b8:	6878      	ldr	r0, [r7, #4]
 80083ba:	f00a fee9 	bl	8013190 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	695a      	ldr	r2, [r3, #20]
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80083cc:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	4618      	mov	r0, r3
 80083d4:	f008 fab6 	bl	8010944 <USB_ReadInterrupts>
 80083d8:	4603      	mov	r3, r0
 80083da:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80083de:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80083e2:	d121      	bne.n	8008428 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	695a      	ldr	r2, [r3, #20]
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 80083f2:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d111      	bne.n	8008422 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	2201      	movs	r2, #1
 8008402:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800840c:	089b      	lsrs	r3, r3, #2
 800840e:	f003 020f 	and.w	r2, r3, #15
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8008418:	2101      	movs	r1, #1
 800841a:	6878      	ldr	r0, [r7, #4]
 800841c:	f000 fea0 	bl	8009160 <HAL_PCDEx_LPM_Callback>
 8008420:	e002      	b.n	8008428 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8008422:	6878      	ldr	r0, [r7, #4]
 8008424:	f00a feb4 	bl	8013190 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	4618      	mov	r0, r3
 800842e:	f008 fa89 	bl	8010944 <USB_ReadInterrupts>
 8008432:	4603      	mov	r3, r0
 8008434:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008438:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800843c:	f040 80b7 	bne.w	80085ae <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8008440:	69fb      	ldr	r3, [r7, #28]
 8008442:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008446:	685b      	ldr	r3, [r3, #4]
 8008448:	69fa      	ldr	r2, [r7, #28]
 800844a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800844e:	f023 0301 	bic.w	r3, r3, #1
 8008452:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	2110      	movs	r1, #16
 800845a:	4618      	mov	r0, r3
 800845c:	f007 fb54 	bl	800fb08 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008460:	2300      	movs	r3, #0
 8008462:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008464:	e046      	b.n	80084f4 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8008466:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008468:	015a      	lsls	r2, r3, #5
 800846a:	69fb      	ldr	r3, [r7, #28]
 800846c:	4413      	add	r3, r2
 800846e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008472:	461a      	mov	r2, r3
 8008474:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8008478:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800847a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800847c:	015a      	lsls	r2, r3, #5
 800847e:	69fb      	ldr	r3, [r7, #28]
 8008480:	4413      	add	r3, r2
 8008482:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800848a:	0151      	lsls	r1, r2, #5
 800848c:	69fa      	ldr	r2, [r7, #28]
 800848e:	440a      	add	r2, r1
 8008490:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008494:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008498:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800849a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800849c:	015a      	lsls	r2, r3, #5
 800849e:	69fb      	ldr	r3, [r7, #28]
 80084a0:	4413      	add	r3, r2
 80084a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80084a6:	461a      	mov	r2, r3
 80084a8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80084ac:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80084ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084b0:	015a      	lsls	r2, r3, #5
 80084b2:	69fb      	ldr	r3, [r7, #28]
 80084b4:	4413      	add	r3, r2
 80084b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80084be:	0151      	lsls	r1, r2, #5
 80084c0:	69fa      	ldr	r2, [r7, #28]
 80084c2:	440a      	add	r2, r1
 80084c4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80084c8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80084cc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80084ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084d0:	015a      	lsls	r2, r3, #5
 80084d2:	69fb      	ldr	r3, [r7, #28]
 80084d4:	4413      	add	r3, r2
 80084d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80084de:	0151      	lsls	r1, r2, #5
 80084e0:	69fa      	ldr	r2, [r7, #28]
 80084e2:	440a      	add	r2, r1
 80084e4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80084e8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80084ec:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80084ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084f0:	3301      	adds	r3, #1
 80084f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	791b      	ldrb	r3, [r3, #4]
 80084f8:	461a      	mov	r2, r3
 80084fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084fc:	4293      	cmp	r3, r2
 80084fe:	d3b2      	bcc.n	8008466 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8008500:	69fb      	ldr	r3, [r7, #28]
 8008502:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008506:	69db      	ldr	r3, [r3, #28]
 8008508:	69fa      	ldr	r2, [r7, #28]
 800850a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800850e:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8008512:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	7bdb      	ldrb	r3, [r3, #15]
 8008518:	2b00      	cmp	r3, #0
 800851a:	d016      	beq.n	800854a <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800851c:	69fb      	ldr	r3, [r7, #28]
 800851e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008522:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008526:	69fa      	ldr	r2, [r7, #28]
 8008528:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800852c:	f043 030b 	orr.w	r3, r3, #11
 8008530:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8008534:	69fb      	ldr	r3, [r7, #28]
 8008536:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800853a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800853c:	69fa      	ldr	r2, [r7, #28]
 800853e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008542:	f043 030b 	orr.w	r3, r3, #11
 8008546:	6453      	str	r3, [r2, #68]	@ 0x44
 8008548:	e015      	b.n	8008576 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800854a:	69fb      	ldr	r3, [r7, #28]
 800854c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008550:	695a      	ldr	r2, [r3, #20]
 8008552:	69fb      	ldr	r3, [r7, #28]
 8008554:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008558:	4619      	mov	r1, r3
 800855a:	f242 032b 	movw	r3, #8235	@ 0x202b
 800855e:	4313      	orrs	r3, r2
 8008560:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8008562:	69fb      	ldr	r3, [r7, #28]
 8008564:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008568:	691b      	ldr	r3, [r3, #16]
 800856a:	69fa      	ldr	r2, [r7, #28]
 800856c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008570:	f043 030b 	orr.w	r3, r3, #11
 8008574:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8008576:	69fb      	ldr	r3, [r7, #28]
 8008578:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	69fa      	ldr	r2, [r7, #28]
 8008580:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008584:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8008588:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	6818      	ldr	r0, [r3, #0]
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8008598:	461a      	mov	r2, r3
 800859a:	f008 fa99 	bl	8010ad0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	695a      	ldr	r2, [r3, #20]
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80085ac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	4618      	mov	r0, r3
 80085b4:	f008 f9c6 	bl	8010944 <USB_ReadInterrupts>
 80085b8:	4603      	mov	r3, r0
 80085ba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80085be:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80085c2:	d123      	bne.n	800860c <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	4618      	mov	r0, r3
 80085ca:	f008 fa5d 	bl	8010a88 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	4618      	mov	r0, r3
 80085d4:	f007 fb11 	bl	800fbfa <USB_GetDevSpeed>
 80085d8:	4603      	mov	r3, r0
 80085da:	461a      	mov	r2, r3
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681c      	ldr	r4, [r3, #0]
 80085e4:	f001 fd1c 	bl	800a020 <HAL_RCC_GetHCLKFreq>
 80085e8:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80085ee:	461a      	mov	r2, r3
 80085f0:	4620      	mov	r0, r4
 80085f2:	f007 f81b 	bl	800f62c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80085f6:	6878      	ldr	r0, [r7, #4]
 80085f8:	f00a fda1 	bl	801313e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	695a      	ldr	r2, [r3, #20]
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800860a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	4618      	mov	r0, r3
 8008612:	f008 f997 	bl	8010944 <USB_ReadInterrupts>
 8008616:	4603      	mov	r3, r0
 8008618:	f003 0308 	and.w	r3, r3, #8
 800861c:	2b08      	cmp	r3, #8
 800861e:	d10a      	bne.n	8008636 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8008620:	6878      	ldr	r0, [r7, #4]
 8008622:	f00a fd7e 	bl	8013122 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	695a      	ldr	r2, [r3, #20]
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	f002 0208 	and.w	r2, r2, #8
 8008634:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	4618      	mov	r0, r3
 800863c:	f008 f982 	bl	8010944 <USB_ReadInterrupts>
 8008640:	4603      	mov	r3, r0
 8008642:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008646:	2b80      	cmp	r3, #128	@ 0x80
 8008648:	d123      	bne.n	8008692 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800864a:	6a3b      	ldr	r3, [r7, #32]
 800864c:	699b      	ldr	r3, [r3, #24]
 800864e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008652:	6a3b      	ldr	r3, [r7, #32]
 8008654:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008656:	2301      	movs	r3, #1
 8008658:	627b      	str	r3, [r7, #36]	@ 0x24
 800865a:	e014      	b.n	8008686 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800865c:	6879      	ldr	r1, [r7, #4]
 800865e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008660:	4613      	mov	r3, r2
 8008662:	00db      	lsls	r3, r3, #3
 8008664:	4413      	add	r3, r2
 8008666:	009b      	lsls	r3, r3, #2
 8008668:	440b      	add	r3, r1
 800866a:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800866e:	781b      	ldrb	r3, [r3, #0]
 8008670:	2b01      	cmp	r3, #1
 8008672:	d105      	bne.n	8008680 <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8008674:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008676:	b2db      	uxtb	r3, r3
 8008678:	4619      	mov	r1, r3
 800867a:	6878      	ldr	r0, [r7, #4]
 800867c:	f000 fb08 	bl	8008c90 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008680:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008682:	3301      	adds	r3, #1
 8008684:	627b      	str	r3, [r7, #36]	@ 0x24
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	791b      	ldrb	r3, [r3, #4]
 800868a:	461a      	mov	r2, r3
 800868c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800868e:	4293      	cmp	r3, r2
 8008690:	d3e4      	bcc.n	800865c <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	4618      	mov	r0, r3
 8008698:	f008 f954 	bl	8010944 <USB_ReadInterrupts>
 800869c:	4603      	mov	r3, r0
 800869e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80086a2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80086a6:	d13c      	bne.n	8008722 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80086a8:	2301      	movs	r3, #1
 80086aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80086ac:	e02b      	b.n	8008706 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80086ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086b0:	015a      	lsls	r2, r3, #5
 80086b2:	69fb      	ldr	r3, [r7, #28]
 80086b4:	4413      	add	r3, r2
 80086b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80086be:	6879      	ldr	r1, [r7, #4]
 80086c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80086c2:	4613      	mov	r3, r2
 80086c4:	00db      	lsls	r3, r3, #3
 80086c6:	4413      	add	r3, r2
 80086c8:	009b      	lsls	r3, r3, #2
 80086ca:	440b      	add	r3, r1
 80086cc:	3318      	adds	r3, #24
 80086ce:	781b      	ldrb	r3, [r3, #0]
 80086d0:	2b01      	cmp	r3, #1
 80086d2:	d115      	bne.n	8008700 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80086d4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	da12      	bge.n	8008700 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80086da:	6879      	ldr	r1, [r7, #4]
 80086dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80086de:	4613      	mov	r3, r2
 80086e0:	00db      	lsls	r3, r3, #3
 80086e2:	4413      	add	r3, r2
 80086e4:	009b      	lsls	r3, r3, #2
 80086e6:	440b      	add	r3, r1
 80086e8:	3317      	adds	r3, #23
 80086ea:	2201      	movs	r2, #1
 80086ec:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80086ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086f0:	b2db      	uxtb	r3, r3
 80086f2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80086f6:	b2db      	uxtb	r3, r3
 80086f8:	4619      	mov	r1, r3
 80086fa:	6878      	ldr	r0, [r7, #4]
 80086fc:	f000 fac8 	bl	8008c90 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008700:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008702:	3301      	adds	r3, #1
 8008704:	627b      	str	r3, [r7, #36]	@ 0x24
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	791b      	ldrb	r3, [r3, #4]
 800870a:	461a      	mov	r2, r3
 800870c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800870e:	4293      	cmp	r3, r2
 8008710:	d3cd      	bcc.n	80086ae <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	695a      	ldr	r2, [r3, #20]
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8008720:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	4618      	mov	r0, r3
 8008728:	f008 f90c 	bl	8010944 <USB_ReadInterrupts>
 800872c:	4603      	mov	r3, r0
 800872e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008732:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008736:	d156      	bne.n	80087e6 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008738:	2301      	movs	r3, #1
 800873a:	627b      	str	r3, [r7, #36]	@ 0x24
 800873c:	e045      	b.n	80087ca <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800873e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008740:	015a      	lsls	r2, r3, #5
 8008742:	69fb      	ldr	r3, [r7, #28]
 8008744:	4413      	add	r3, r2
 8008746:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800874e:	6879      	ldr	r1, [r7, #4]
 8008750:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008752:	4613      	mov	r3, r2
 8008754:	00db      	lsls	r3, r3, #3
 8008756:	4413      	add	r3, r2
 8008758:	009b      	lsls	r3, r3, #2
 800875a:	440b      	add	r3, r1
 800875c:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8008760:	781b      	ldrb	r3, [r3, #0]
 8008762:	2b01      	cmp	r3, #1
 8008764:	d12e      	bne.n	80087c4 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8008766:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8008768:	2b00      	cmp	r3, #0
 800876a:	da2b      	bge.n	80087c4 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800876c:	69bb      	ldr	r3, [r7, #24]
 800876e:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8008778:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800877c:	429a      	cmp	r2, r3
 800877e:	d121      	bne.n	80087c4 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8008780:	6879      	ldr	r1, [r7, #4]
 8008782:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008784:	4613      	mov	r3, r2
 8008786:	00db      	lsls	r3, r3, #3
 8008788:	4413      	add	r3, r2
 800878a:	009b      	lsls	r3, r3, #2
 800878c:	440b      	add	r3, r1
 800878e:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8008792:	2201      	movs	r2, #1
 8008794:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8008796:	6a3b      	ldr	r3, [r7, #32]
 8008798:	699b      	ldr	r3, [r3, #24]
 800879a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800879e:	6a3b      	ldr	r3, [r7, #32]
 80087a0:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80087a2:	6a3b      	ldr	r3, [r7, #32]
 80087a4:	695b      	ldr	r3, [r3, #20]
 80087a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d10a      	bne.n	80087c4 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80087ae:	69fb      	ldr	r3, [r7, #28]
 80087b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80087b4:	685b      	ldr	r3, [r3, #4]
 80087b6:	69fa      	ldr	r2, [r7, #28]
 80087b8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80087bc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80087c0:	6053      	str	r3, [r2, #4]
            break;
 80087c2:	e008      	b.n	80087d6 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80087c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087c6:	3301      	adds	r3, #1
 80087c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	791b      	ldrb	r3, [r3, #4]
 80087ce:	461a      	mov	r2, r3
 80087d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087d2:	4293      	cmp	r3, r2
 80087d4:	d3b3      	bcc.n	800873e <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	695a      	ldr	r2, [r3, #20]
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80087e4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	4618      	mov	r0, r3
 80087ec:	f008 f8aa 	bl	8010944 <USB_ReadInterrupts>
 80087f0:	4603      	mov	r3, r0
 80087f2:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80087f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80087fa:	d10a      	bne.n	8008812 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80087fc:	6878      	ldr	r0, [r7, #4]
 80087fe:	f00a fd1f 	bl	8013240 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	695a      	ldr	r2, [r3, #20]
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8008810:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	4618      	mov	r0, r3
 8008818:	f008 f894 	bl	8010944 <USB_ReadInterrupts>
 800881c:	4603      	mov	r3, r0
 800881e:	f003 0304 	and.w	r3, r3, #4
 8008822:	2b04      	cmp	r3, #4
 8008824:	d115      	bne.n	8008852 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	685b      	ldr	r3, [r3, #4]
 800882c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800882e:	69bb      	ldr	r3, [r7, #24]
 8008830:	f003 0304 	and.w	r3, r3, #4
 8008834:	2b00      	cmp	r3, #0
 8008836:	d002      	beq.n	800883e <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8008838:	6878      	ldr	r0, [r7, #4]
 800883a:	f00a fd0f 	bl	801325c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	6859      	ldr	r1, [r3, #4]
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	69ba      	ldr	r2, [r7, #24]
 800884a:	430a      	orrs	r2, r1
 800884c:	605a      	str	r2, [r3, #4]
 800884e:	e000      	b.n	8008852 <HAL_PCD_IRQHandler+0x996>
      return;
 8008850:	bf00      	nop
    }
  }
}
 8008852:	3734      	adds	r7, #52	@ 0x34
 8008854:	46bd      	mov	sp, r7
 8008856:	bd90      	pop	{r4, r7, pc}

08008858 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8008858:	b580      	push	{r7, lr}
 800885a:	b082      	sub	sp, #8
 800885c:	af00      	add	r7, sp, #0
 800885e:	6078      	str	r0, [r7, #4]
 8008860:	460b      	mov	r3, r1
 8008862:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800886a:	2b01      	cmp	r3, #1
 800886c:	d101      	bne.n	8008872 <HAL_PCD_SetAddress+0x1a>
 800886e:	2302      	movs	r3, #2
 8008870:	e012      	b.n	8008898 <HAL_PCD_SetAddress+0x40>
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	2201      	movs	r2, #1
 8008876:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	78fa      	ldrb	r2, [r7, #3]
 800887e:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	78fa      	ldrb	r2, [r7, #3]
 8008886:	4611      	mov	r1, r2
 8008888:	4618      	mov	r0, r3
 800888a:	f007 fff3 	bl	8010874 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	2200      	movs	r2, #0
 8008892:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8008896:	2300      	movs	r3, #0
}
 8008898:	4618      	mov	r0, r3
 800889a:	3708      	adds	r7, #8
 800889c:	46bd      	mov	sp, r7
 800889e:	bd80      	pop	{r7, pc}

080088a0 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80088a0:	b580      	push	{r7, lr}
 80088a2:	b084      	sub	sp, #16
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	6078      	str	r0, [r7, #4]
 80088a8:	4608      	mov	r0, r1
 80088aa:	4611      	mov	r1, r2
 80088ac:	461a      	mov	r2, r3
 80088ae:	4603      	mov	r3, r0
 80088b0:	70fb      	strb	r3, [r7, #3]
 80088b2:	460b      	mov	r3, r1
 80088b4:	803b      	strh	r3, [r7, #0]
 80088b6:	4613      	mov	r3, r2
 80088b8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80088ba:	2300      	movs	r3, #0
 80088bc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80088be:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	da0f      	bge.n	80088e6 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80088c6:	78fb      	ldrb	r3, [r7, #3]
 80088c8:	f003 020f 	and.w	r2, r3, #15
 80088cc:	4613      	mov	r3, r2
 80088ce:	00db      	lsls	r3, r3, #3
 80088d0:	4413      	add	r3, r2
 80088d2:	009b      	lsls	r3, r3, #2
 80088d4:	3310      	adds	r3, #16
 80088d6:	687a      	ldr	r2, [r7, #4]
 80088d8:	4413      	add	r3, r2
 80088da:	3304      	adds	r3, #4
 80088dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	2201      	movs	r2, #1
 80088e2:	705a      	strb	r2, [r3, #1]
 80088e4:	e00f      	b.n	8008906 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80088e6:	78fb      	ldrb	r3, [r7, #3]
 80088e8:	f003 020f 	and.w	r2, r3, #15
 80088ec:	4613      	mov	r3, r2
 80088ee:	00db      	lsls	r3, r3, #3
 80088f0:	4413      	add	r3, r2
 80088f2:	009b      	lsls	r3, r3, #2
 80088f4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80088f8:	687a      	ldr	r2, [r7, #4]
 80088fa:	4413      	add	r3, r2
 80088fc:	3304      	adds	r3, #4
 80088fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	2200      	movs	r2, #0
 8008904:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8008906:	78fb      	ldrb	r3, [r7, #3]
 8008908:	f003 030f 	and.w	r3, r3, #15
 800890c:	b2da      	uxtb	r2, r3
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8008912:	883a      	ldrh	r2, [r7, #0]
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	78ba      	ldrb	r2, [r7, #2]
 800891c:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	785b      	ldrb	r3, [r3, #1]
 8008922:	2b00      	cmp	r3, #0
 8008924:	d004      	beq.n	8008930 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	781b      	ldrb	r3, [r3, #0]
 800892a:	461a      	mov	r2, r3
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8008930:	78bb      	ldrb	r3, [r7, #2]
 8008932:	2b02      	cmp	r3, #2
 8008934:	d102      	bne.n	800893c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	2200      	movs	r2, #0
 800893a:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8008942:	2b01      	cmp	r3, #1
 8008944:	d101      	bne.n	800894a <HAL_PCD_EP_Open+0xaa>
 8008946:	2302      	movs	r3, #2
 8008948:	e00e      	b.n	8008968 <HAL_PCD_EP_Open+0xc8>
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	2201      	movs	r2, #1
 800894e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	68f9      	ldr	r1, [r7, #12]
 8008958:	4618      	mov	r0, r3
 800895a:	f007 f973 	bl	800fc44 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	2200      	movs	r2, #0
 8008962:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8008966:	7afb      	ldrb	r3, [r7, #11]
}
 8008968:	4618      	mov	r0, r3
 800896a:	3710      	adds	r7, #16
 800896c:	46bd      	mov	sp, r7
 800896e:	bd80      	pop	{r7, pc}

08008970 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008970:	b580      	push	{r7, lr}
 8008972:	b084      	sub	sp, #16
 8008974:	af00      	add	r7, sp, #0
 8008976:	6078      	str	r0, [r7, #4]
 8008978:	460b      	mov	r3, r1
 800897a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800897c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008980:	2b00      	cmp	r3, #0
 8008982:	da0f      	bge.n	80089a4 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008984:	78fb      	ldrb	r3, [r7, #3]
 8008986:	f003 020f 	and.w	r2, r3, #15
 800898a:	4613      	mov	r3, r2
 800898c:	00db      	lsls	r3, r3, #3
 800898e:	4413      	add	r3, r2
 8008990:	009b      	lsls	r3, r3, #2
 8008992:	3310      	adds	r3, #16
 8008994:	687a      	ldr	r2, [r7, #4]
 8008996:	4413      	add	r3, r2
 8008998:	3304      	adds	r3, #4
 800899a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	2201      	movs	r2, #1
 80089a0:	705a      	strb	r2, [r3, #1]
 80089a2:	e00f      	b.n	80089c4 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80089a4:	78fb      	ldrb	r3, [r7, #3]
 80089a6:	f003 020f 	and.w	r2, r3, #15
 80089aa:	4613      	mov	r3, r2
 80089ac:	00db      	lsls	r3, r3, #3
 80089ae:	4413      	add	r3, r2
 80089b0:	009b      	lsls	r3, r3, #2
 80089b2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80089b6:	687a      	ldr	r2, [r7, #4]
 80089b8:	4413      	add	r3, r2
 80089ba:	3304      	adds	r3, #4
 80089bc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	2200      	movs	r2, #0
 80089c2:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80089c4:	78fb      	ldrb	r3, [r7, #3]
 80089c6:	f003 030f 	and.w	r3, r3, #15
 80089ca:	b2da      	uxtb	r2, r3
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80089d6:	2b01      	cmp	r3, #1
 80089d8:	d101      	bne.n	80089de <HAL_PCD_EP_Close+0x6e>
 80089da:	2302      	movs	r3, #2
 80089dc:	e00e      	b.n	80089fc <HAL_PCD_EP_Close+0x8c>
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	2201      	movs	r2, #1
 80089e2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	68f9      	ldr	r1, [r7, #12]
 80089ec:	4618      	mov	r0, r3
 80089ee:	f007 f9b1 	bl	800fd54 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	2200      	movs	r2, #0
 80089f6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 80089fa:	2300      	movs	r3, #0
}
 80089fc:	4618      	mov	r0, r3
 80089fe:	3710      	adds	r7, #16
 8008a00:	46bd      	mov	sp, r7
 8008a02:	bd80      	pop	{r7, pc}

08008a04 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8008a04:	b580      	push	{r7, lr}
 8008a06:	b086      	sub	sp, #24
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	60f8      	str	r0, [r7, #12]
 8008a0c:	607a      	str	r2, [r7, #4]
 8008a0e:	603b      	str	r3, [r7, #0]
 8008a10:	460b      	mov	r3, r1
 8008a12:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008a14:	7afb      	ldrb	r3, [r7, #11]
 8008a16:	f003 020f 	and.w	r2, r3, #15
 8008a1a:	4613      	mov	r3, r2
 8008a1c:	00db      	lsls	r3, r3, #3
 8008a1e:	4413      	add	r3, r2
 8008a20:	009b      	lsls	r3, r3, #2
 8008a22:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8008a26:	68fa      	ldr	r2, [r7, #12]
 8008a28:	4413      	add	r3, r2
 8008a2a:	3304      	adds	r3, #4
 8008a2c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8008a2e:	697b      	ldr	r3, [r7, #20]
 8008a30:	687a      	ldr	r2, [r7, #4]
 8008a32:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8008a34:	697b      	ldr	r3, [r7, #20]
 8008a36:	683a      	ldr	r2, [r7, #0]
 8008a38:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8008a3a:	697b      	ldr	r3, [r7, #20]
 8008a3c:	2200      	movs	r2, #0
 8008a3e:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8008a40:	697b      	ldr	r3, [r7, #20]
 8008a42:	2200      	movs	r2, #0
 8008a44:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008a46:	7afb      	ldrb	r3, [r7, #11]
 8008a48:	f003 030f 	and.w	r3, r3, #15
 8008a4c:	b2da      	uxtb	r2, r3
 8008a4e:	697b      	ldr	r3, [r7, #20]
 8008a50:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	799b      	ldrb	r3, [r3, #6]
 8008a56:	2b01      	cmp	r3, #1
 8008a58:	d102      	bne.n	8008a60 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8008a5a:	687a      	ldr	r2, [r7, #4]
 8008a5c:	697b      	ldr	r3, [r7, #20]
 8008a5e:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	6818      	ldr	r0, [r3, #0]
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	799b      	ldrb	r3, [r3, #6]
 8008a68:	461a      	mov	r2, r3
 8008a6a:	6979      	ldr	r1, [r7, #20]
 8008a6c:	f007 fa4e 	bl	800ff0c <USB_EPStartXfer>

  return HAL_OK;
 8008a70:	2300      	movs	r3, #0
}
 8008a72:	4618      	mov	r0, r3
 8008a74:	3718      	adds	r7, #24
 8008a76:	46bd      	mov	sp, r7
 8008a78:	bd80      	pop	{r7, pc}

08008a7a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8008a7a:	b480      	push	{r7}
 8008a7c:	b083      	sub	sp, #12
 8008a7e:	af00      	add	r7, sp, #0
 8008a80:	6078      	str	r0, [r7, #4]
 8008a82:	460b      	mov	r3, r1
 8008a84:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8008a86:	78fb      	ldrb	r3, [r7, #3]
 8008a88:	f003 020f 	and.w	r2, r3, #15
 8008a8c:	6879      	ldr	r1, [r7, #4]
 8008a8e:	4613      	mov	r3, r2
 8008a90:	00db      	lsls	r3, r3, #3
 8008a92:	4413      	add	r3, r2
 8008a94:	009b      	lsls	r3, r3, #2
 8008a96:	440b      	add	r3, r1
 8008a98:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8008a9c:	681b      	ldr	r3, [r3, #0]
}
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	370c      	adds	r7, #12
 8008aa2:	46bd      	mov	sp, r7
 8008aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa8:	4770      	bx	lr

08008aaa <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8008aaa:	b580      	push	{r7, lr}
 8008aac:	b086      	sub	sp, #24
 8008aae:	af00      	add	r7, sp, #0
 8008ab0:	60f8      	str	r0, [r7, #12]
 8008ab2:	607a      	str	r2, [r7, #4]
 8008ab4:	603b      	str	r3, [r7, #0]
 8008ab6:	460b      	mov	r3, r1
 8008ab8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008aba:	7afb      	ldrb	r3, [r7, #11]
 8008abc:	f003 020f 	and.w	r2, r3, #15
 8008ac0:	4613      	mov	r3, r2
 8008ac2:	00db      	lsls	r3, r3, #3
 8008ac4:	4413      	add	r3, r2
 8008ac6:	009b      	lsls	r3, r3, #2
 8008ac8:	3310      	adds	r3, #16
 8008aca:	68fa      	ldr	r2, [r7, #12]
 8008acc:	4413      	add	r3, r2
 8008ace:	3304      	adds	r3, #4
 8008ad0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8008ad2:	697b      	ldr	r3, [r7, #20]
 8008ad4:	687a      	ldr	r2, [r7, #4]
 8008ad6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8008ad8:	697b      	ldr	r3, [r7, #20]
 8008ada:	683a      	ldr	r2, [r7, #0]
 8008adc:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8008ade:	697b      	ldr	r3, [r7, #20]
 8008ae0:	2200      	movs	r2, #0
 8008ae2:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8008ae4:	697b      	ldr	r3, [r7, #20]
 8008ae6:	2201      	movs	r2, #1
 8008ae8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008aea:	7afb      	ldrb	r3, [r7, #11]
 8008aec:	f003 030f 	and.w	r3, r3, #15
 8008af0:	b2da      	uxtb	r2, r3
 8008af2:	697b      	ldr	r3, [r7, #20]
 8008af4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	799b      	ldrb	r3, [r3, #6]
 8008afa:	2b01      	cmp	r3, #1
 8008afc:	d102      	bne.n	8008b04 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8008afe:	687a      	ldr	r2, [r7, #4]
 8008b00:	697b      	ldr	r3, [r7, #20]
 8008b02:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	6818      	ldr	r0, [r3, #0]
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	799b      	ldrb	r3, [r3, #6]
 8008b0c:	461a      	mov	r2, r3
 8008b0e:	6979      	ldr	r1, [r7, #20]
 8008b10:	f007 f9fc 	bl	800ff0c <USB_EPStartXfer>

  return HAL_OK;
 8008b14:	2300      	movs	r3, #0
}
 8008b16:	4618      	mov	r0, r3
 8008b18:	3718      	adds	r7, #24
 8008b1a:	46bd      	mov	sp, r7
 8008b1c:	bd80      	pop	{r7, pc}

08008b1e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008b1e:	b580      	push	{r7, lr}
 8008b20:	b084      	sub	sp, #16
 8008b22:	af00      	add	r7, sp, #0
 8008b24:	6078      	str	r0, [r7, #4]
 8008b26:	460b      	mov	r3, r1
 8008b28:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8008b2a:	78fb      	ldrb	r3, [r7, #3]
 8008b2c:	f003 030f 	and.w	r3, r3, #15
 8008b30:	687a      	ldr	r2, [r7, #4]
 8008b32:	7912      	ldrb	r2, [r2, #4]
 8008b34:	4293      	cmp	r3, r2
 8008b36:	d901      	bls.n	8008b3c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8008b38:	2301      	movs	r3, #1
 8008b3a:	e04f      	b.n	8008bdc <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8008b3c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	da0f      	bge.n	8008b64 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008b44:	78fb      	ldrb	r3, [r7, #3]
 8008b46:	f003 020f 	and.w	r2, r3, #15
 8008b4a:	4613      	mov	r3, r2
 8008b4c:	00db      	lsls	r3, r3, #3
 8008b4e:	4413      	add	r3, r2
 8008b50:	009b      	lsls	r3, r3, #2
 8008b52:	3310      	adds	r3, #16
 8008b54:	687a      	ldr	r2, [r7, #4]
 8008b56:	4413      	add	r3, r2
 8008b58:	3304      	adds	r3, #4
 8008b5a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	2201      	movs	r2, #1
 8008b60:	705a      	strb	r2, [r3, #1]
 8008b62:	e00d      	b.n	8008b80 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8008b64:	78fa      	ldrb	r2, [r7, #3]
 8008b66:	4613      	mov	r3, r2
 8008b68:	00db      	lsls	r3, r3, #3
 8008b6a:	4413      	add	r3, r2
 8008b6c:	009b      	lsls	r3, r3, #2
 8008b6e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8008b72:	687a      	ldr	r2, [r7, #4]
 8008b74:	4413      	add	r3, r2
 8008b76:	3304      	adds	r3, #4
 8008b78:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	2200      	movs	r2, #0
 8008b7e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	2201      	movs	r2, #1
 8008b84:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008b86:	78fb      	ldrb	r3, [r7, #3]
 8008b88:	f003 030f 	and.w	r3, r3, #15
 8008b8c:	b2da      	uxtb	r2, r3
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8008b98:	2b01      	cmp	r3, #1
 8008b9a:	d101      	bne.n	8008ba0 <HAL_PCD_EP_SetStall+0x82>
 8008b9c:	2302      	movs	r3, #2
 8008b9e:	e01d      	b.n	8008bdc <HAL_PCD_EP_SetStall+0xbe>
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	2201      	movs	r2, #1
 8008ba4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	68f9      	ldr	r1, [r7, #12]
 8008bae:	4618      	mov	r0, r3
 8008bb0:	f007 fd8c 	bl	80106cc <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008bb4:	78fb      	ldrb	r3, [r7, #3]
 8008bb6:	f003 030f 	and.w	r3, r3, #15
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d109      	bne.n	8008bd2 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	6818      	ldr	r0, [r3, #0]
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	7999      	ldrb	r1, [r3, #6]
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8008bcc:	461a      	mov	r2, r3
 8008bce:	f007 ff7f 	bl	8010ad0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	2200      	movs	r2, #0
 8008bd6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8008bda:	2300      	movs	r3, #0
}
 8008bdc:	4618      	mov	r0, r3
 8008bde:	3710      	adds	r7, #16
 8008be0:	46bd      	mov	sp, r7
 8008be2:	bd80      	pop	{r7, pc}

08008be4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008be4:	b580      	push	{r7, lr}
 8008be6:	b084      	sub	sp, #16
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	6078      	str	r0, [r7, #4]
 8008bec:	460b      	mov	r3, r1
 8008bee:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8008bf0:	78fb      	ldrb	r3, [r7, #3]
 8008bf2:	f003 030f 	and.w	r3, r3, #15
 8008bf6:	687a      	ldr	r2, [r7, #4]
 8008bf8:	7912      	ldrb	r2, [r2, #4]
 8008bfa:	4293      	cmp	r3, r2
 8008bfc:	d901      	bls.n	8008c02 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8008bfe:	2301      	movs	r3, #1
 8008c00:	e042      	b.n	8008c88 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8008c02:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	da0f      	bge.n	8008c2a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008c0a:	78fb      	ldrb	r3, [r7, #3]
 8008c0c:	f003 020f 	and.w	r2, r3, #15
 8008c10:	4613      	mov	r3, r2
 8008c12:	00db      	lsls	r3, r3, #3
 8008c14:	4413      	add	r3, r2
 8008c16:	009b      	lsls	r3, r3, #2
 8008c18:	3310      	adds	r3, #16
 8008c1a:	687a      	ldr	r2, [r7, #4]
 8008c1c:	4413      	add	r3, r2
 8008c1e:	3304      	adds	r3, #4
 8008c20:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	2201      	movs	r2, #1
 8008c26:	705a      	strb	r2, [r3, #1]
 8008c28:	e00f      	b.n	8008c4a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008c2a:	78fb      	ldrb	r3, [r7, #3]
 8008c2c:	f003 020f 	and.w	r2, r3, #15
 8008c30:	4613      	mov	r3, r2
 8008c32:	00db      	lsls	r3, r3, #3
 8008c34:	4413      	add	r3, r2
 8008c36:	009b      	lsls	r3, r3, #2
 8008c38:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8008c3c:	687a      	ldr	r2, [r7, #4]
 8008c3e:	4413      	add	r3, r2
 8008c40:	3304      	adds	r3, #4
 8008c42:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	2200      	movs	r2, #0
 8008c48:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	2200      	movs	r2, #0
 8008c4e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008c50:	78fb      	ldrb	r3, [r7, #3]
 8008c52:	f003 030f 	and.w	r3, r3, #15
 8008c56:	b2da      	uxtb	r2, r3
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8008c62:	2b01      	cmp	r3, #1
 8008c64:	d101      	bne.n	8008c6a <HAL_PCD_EP_ClrStall+0x86>
 8008c66:	2302      	movs	r3, #2
 8008c68:	e00e      	b.n	8008c88 <HAL_PCD_EP_ClrStall+0xa4>
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	2201      	movs	r2, #1
 8008c6e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	68f9      	ldr	r1, [r7, #12]
 8008c78:	4618      	mov	r0, r3
 8008c7a:	f007 fd95 	bl	80107a8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	2200      	movs	r2, #0
 8008c82:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8008c86:	2300      	movs	r3, #0
}
 8008c88:	4618      	mov	r0, r3
 8008c8a:	3710      	adds	r7, #16
 8008c8c:	46bd      	mov	sp, r7
 8008c8e:	bd80      	pop	{r7, pc}

08008c90 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008c90:	b580      	push	{r7, lr}
 8008c92:	b084      	sub	sp, #16
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	6078      	str	r0, [r7, #4]
 8008c98:	460b      	mov	r3, r1
 8008c9a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8008c9c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	da0c      	bge.n	8008cbe <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008ca4:	78fb      	ldrb	r3, [r7, #3]
 8008ca6:	f003 020f 	and.w	r2, r3, #15
 8008caa:	4613      	mov	r3, r2
 8008cac:	00db      	lsls	r3, r3, #3
 8008cae:	4413      	add	r3, r2
 8008cb0:	009b      	lsls	r3, r3, #2
 8008cb2:	3310      	adds	r3, #16
 8008cb4:	687a      	ldr	r2, [r7, #4]
 8008cb6:	4413      	add	r3, r2
 8008cb8:	3304      	adds	r3, #4
 8008cba:	60fb      	str	r3, [r7, #12]
 8008cbc:	e00c      	b.n	8008cd8 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008cbe:	78fb      	ldrb	r3, [r7, #3]
 8008cc0:	f003 020f 	and.w	r2, r3, #15
 8008cc4:	4613      	mov	r3, r2
 8008cc6:	00db      	lsls	r3, r3, #3
 8008cc8:	4413      	add	r3, r2
 8008cca:	009b      	lsls	r3, r3, #2
 8008ccc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8008cd0:	687a      	ldr	r2, [r7, #4]
 8008cd2:	4413      	add	r3, r2
 8008cd4:	3304      	adds	r3, #4
 8008cd6:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	68f9      	ldr	r1, [r7, #12]
 8008cde:	4618      	mov	r0, r3
 8008ce0:	f007 fbb4 	bl	801044c <USB_EPStopXfer>
 8008ce4:	4603      	mov	r3, r0
 8008ce6:	72fb      	strb	r3, [r7, #11]

  return ret;
 8008ce8:	7afb      	ldrb	r3, [r7, #11]
}
 8008cea:	4618      	mov	r0, r3
 8008cec:	3710      	adds	r7, #16
 8008cee:	46bd      	mov	sp, r7
 8008cf0:	bd80      	pop	{r7, pc}

08008cf2 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008cf2:	b580      	push	{r7, lr}
 8008cf4:	b08a      	sub	sp, #40	@ 0x28
 8008cf6:	af02      	add	r7, sp, #8
 8008cf8:	6078      	str	r0, [r7, #4]
 8008cfa:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d02:	697b      	ldr	r3, [r7, #20]
 8008d04:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8008d06:	683a      	ldr	r2, [r7, #0]
 8008d08:	4613      	mov	r3, r2
 8008d0a:	00db      	lsls	r3, r3, #3
 8008d0c:	4413      	add	r3, r2
 8008d0e:	009b      	lsls	r3, r3, #2
 8008d10:	3310      	adds	r3, #16
 8008d12:	687a      	ldr	r2, [r7, #4]
 8008d14:	4413      	add	r3, r2
 8008d16:	3304      	adds	r3, #4
 8008d18:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	695a      	ldr	r2, [r3, #20]
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	691b      	ldr	r3, [r3, #16]
 8008d22:	429a      	cmp	r2, r3
 8008d24:	d901      	bls.n	8008d2a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8008d26:	2301      	movs	r3, #1
 8008d28:	e06b      	b.n	8008e02 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	691a      	ldr	r2, [r3, #16]
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	695b      	ldr	r3, [r3, #20]
 8008d32:	1ad3      	subs	r3, r2, r3
 8008d34:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	689b      	ldr	r3, [r3, #8]
 8008d3a:	69fa      	ldr	r2, [r7, #28]
 8008d3c:	429a      	cmp	r2, r3
 8008d3e:	d902      	bls.n	8008d46 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	689b      	ldr	r3, [r3, #8]
 8008d44:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8008d46:	69fb      	ldr	r3, [r7, #28]
 8008d48:	3303      	adds	r3, #3
 8008d4a:	089b      	lsrs	r3, r3, #2
 8008d4c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008d4e:	e02a      	b.n	8008da6 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	691a      	ldr	r2, [r3, #16]
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	695b      	ldr	r3, [r3, #20]
 8008d58:	1ad3      	subs	r3, r2, r3
 8008d5a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	689b      	ldr	r3, [r3, #8]
 8008d60:	69fa      	ldr	r2, [r7, #28]
 8008d62:	429a      	cmp	r2, r3
 8008d64:	d902      	bls.n	8008d6c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	689b      	ldr	r3, [r3, #8]
 8008d6a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8008d6c:	69fb      	ldr	r3, [r7, #28]
 8008d6e:	3303      	adds	r3, #3
 8008d70:	089b      	lsrs	r3, r3, #2
 8008d72:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	68d9      	ldr	r1, [r3, #12]
 8008d78:	683b      	ldr	r3, [r7, #0]
 8008d7a:	b2da      	uxtb	r2, r3
 8008d7c:	69fb      	ldr	r3, [r7, #28]
 8008d7e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8008d84:	9300      	str	r3, [sp, #0]
 8008d86:	4603      	mov	r3, r0
 8008d88:	6978      	ldr	r0, [r7, #20]
 8008d8a:	f007 fc09 	bl	80105a0 <USB_WritePacket>

    ep->xfer_buff  += len;
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	68da      	ldr	r2, [r3, #12]
 8008d92:	69fb      	ldr	r3, [r7, #28]
 8008d94:	441a      	add	r2, r3
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	695a      	ldr	r2, [r3, #20]
 8008d9e:	69fb      	ldr	r3, [r7, #28]
 8008da0:	441a      	add	r2, r3
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008da6:	683b      	ldr	r3, [r7, #0]
 8008da8:	015a      	lsls	r2, r3, #5
 8008daa:	693b      	ldr	r3, [r7, #16]
 8008dac:	4413      	add	r3, r2
 8008dae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008db2:	699b      	ldr	r3, [r3, #24]
 8008db4:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8008db6:	69ba      	ldr	r2, [r7, #24]
 8008db8:	429a      	cmp	r2, r3
 8008dba:	d809      	bhi.n	8008dd0 <PCD_WriteEmptyTxFifo+0xde>
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	695a      	ldr	r2, [r3, #20]
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008dc4:	429a      	cmp	r2, r3
 8008dc6:	d203      	bcs.n	8008dd0 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	691b      	ldr	r3, [r3, #16]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d1bf      	bne.n	8008d50 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	691a      	ldr	r2, [r3, #16]
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	695b      	ldr	r3, [r3, #20]
 8008dd8:	429a      	cmp	r2, r3
 8008dda:	d811      	bhi.n	8008e00 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8008ddc:	683b      	ldr	r3, [r7, #0]
 8008dde:	f003 030f 	and.w	r3, r3, #15
 8008de2:	2201      	movs	r2, #1
 8008de4:	fa02 f303 	lsl.w	r3, r2, r3
 8008de8:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8008dea:	693b      	ldr	r3, [r7, #16]
 8008dec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008df0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008df2:	68bb      	ldr	r3, [r7, #8]
 8008df4:	43db      	mvns	r3, r3
 8008df6:	6939      	ldr	r1, [r7, #16]
 8008df8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008dfc:	4013      	ands	r3, r2
 8008dfe:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8008e00:	2300      	movs	r3, #0
}
 8008e02:	4618      	mov	r0, r3
 8008e04:	3720      	adds	r7, #32
 8008e06:	46bd      	mov	sp, r7
 8008e08:	bd80      	pop	{r7, pc}
	...

08008e0c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008e0c:	b580      	push	{r7, lr}
 8008e0e:	b088      	sub	sp, #32
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	6078      	str	r0, [r7, #4]
 8008e14:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e1c:	69fb      	ldr	r3, [r7, #28]
 8008e1e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8008e20:	69fb      	ldr	r3, [r7, #28]
 8008e22:	333c      	adds	r3, #60	@ 0x3c
 8008e24:	3304      	adds	r3, #4
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8008e2a:	683b      	ldr	r3, [r7, #0]
 8008e2c:	015a      	lsls	r2, r3, #5
 8008e2e:	69bb      	ldr	r3, [r7, #24]
 8008e30:	4413      	add	r3, r2
 8008e32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008e36:	689b      	ldr	r3, [r3, #8]
 8008e38:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	799b      	ldrb	r3, [r3, #6]
 8008e3e:	2b01      	cmp	r3, #1
 8008e40:	d17b      	bne.n	8008f3a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8008e42:	693b      	ldr	r3, [r7, #16]
 8008e44:	f003 0308 	and.w	r3, r3, #8
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d015      	beq.n	8008e78 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008e4c:	697b      	ldr	r3, [r7, #20]
 8008e4e:	4a61      	ldr	r2, [pc, #388]	@ (8008fd4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8008e50:	4293      	cmp	r3, r2
 8008e52:	f240 80b9 	bls.w	8008fc8 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008e56:	693b      	ldr	r3, [r7, #16]
 8008e58:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	f000 80b3 	beq.w	8008fc8 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008e62:	683b      	ldr	r3, [r7, #0]
 8008e64:	015a      	lsls	r2, r3, #5
 8008e66:	69bb      	ldr	r3, [r7, #24]
 8008e68:	4413      	add	r3, r2
 8008e6a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008e6e:	461a      	mov	r2, r3
 8008e70:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008e74:	6093      	str	r3, [r2, #8]
 8008e76:	e0a7      	b.n	8008fc8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8008e78:	693b      	ldr	r3, [r7, #16]
 8008e7a:	f003 0320 	and.w	r3, r3, #32
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d009      	beq.n	8008e96 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008e82:	683b      	ldr	r3, [r7, #0]
 8008e84:	015a      	lsls	r2, r3, #5
 8008e86:	69bb      	ldr	r3, [r7, #24]
 8008e88:	4413      	add	r3, r2
 8008e8a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008e8e:	461a      	mov	r2, r3
 8008e90:	2320      	movs	r3, #32
 8008e92:	6093      	str	r3, [r2, #8]
 8008e94:	e098      	b.n	8008fc8 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8008e96:	693b      	ldr	r3, [r7, #16]
 8008e98:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	f040 8093 	bne.w	8008fc8 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008ea2:	697b      	ldr	r3, [r7, #20]
 8008ea4:	4a4b      	ldr	r2, [pc, #300]	@ (8008fd4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8008ea6:	4293      	cmp	r3, r2
 8008ea8:	d90f      	bls.n	8008eca <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008eaa:	693b      	ldr	r3, [r7, #16]
 8008eac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d00a      	beq.n	8008eca <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008eb4:	683b      	ldr	r3, [r7, #0]
 8008eb6:	015a      	lsls	r2, r3, #5
 8008eb8:	69bb      	ldr	r3, [r7, #24]
 8008eba:	4413      	add	r3, r2
 8008ebc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008ec0:	461a      	mov	r2, r3
 8008ec2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008ec6:	6093      	str	r3, [r2, #8]
 8008ec8:	e07e      	b.n	8008fc8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8008eca:	683a      	ldr	r2, [r7, #0]
 8008ecc:	4613      	mov	r3, r2
 8008ece:	00db      	lsls	r3, r3, #3
 8008ed0:	4413      	add	r3, r2
 8008ed2:	009b      	lsls	r3, r3, #2
 8008ed4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8008ed8:	687a      	ldr	r2, [r7, #4]
 8008eda:	4413      	add	r3, r2
 8008edc:	3304      	adds	r3, #4
 8008ede:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	6a1a      	ldr	r2, [r3, #32]
 8008ee4:	683b      	ldr	r3, [r7, #0]
 8008ee6:	0159      	lsls	r1, r3, #5
 8008ee8:	69bb      	ldr	r3, [r7, #24]
 8008eea:	440b      	add	r3, r1
 8008eec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008ef0:	691b      	ldr	r3, [r3, #16]
 8008ef2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008ef6:	1ad2      	subs	r2, r2, r3
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8008efc:	683b      	ldr	r3, [r7, #0]
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d114      	bne.n	8008f2c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	691b      	ldr	r3, [r3, #16]
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d109      	bne.n	8008f1e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	6818      	ldr	r0, [r3, #0]
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8008f14:	461a      	mov	r2, r3
 8008f16:	2101      	movs	r1, #1
 8008f18:	f007 fdda 	bl	8010ad0 <USB_EP0_OutStart>
 8008f1c:	e006      	b.n	8008f2c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	68da      	ldr	r2, [r3, #12]
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	695b      	ldr	r3, [r3, #20]
 8008f26:	441a      	add	r2, r3
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008f2c:	683b      	ldr	r3, [r7, #0]
 8008f2e:	b2db      	uxtb	r3, r3
 8008f30:	4619      	mov	r1, r3
 8008f32:	6878      	ldr	r0, [r7, #4]
 8008f34:	f00a f8c0 	bl	80130b8 <HAL_PCD_DataOutStageCallback>
 8008f38:	e046      	b.n	8008fc8 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8008f3a:	697b      	ldr	r3, [r7, #20]
 8008f3c:	4a26      	ldr	r2, [pc, #152]	@ (8008fd8 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8008f3e:	4293      	cmp	r3, r2
 8008f40:	d124      	bne.n	8008f8c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8008f42:	693b      	ldr	r3, [r7, #16]
 8008f44:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d00a      	beq.n	8008f62 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008f4c:	683b      	ldr	r3, [r7, #0]
 8008f4e:	015a      	lsls	r2, r3, #5
 8008f50:	69bb      	ldr	r3, [r7, #24]
 8008f52:	4413      	add	r3, r2
 8008f54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008f58:	461a      	mov	r2, r3
 8008f5a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008f5e:	6093      	str	r3, [r2, #8]
 8008f60:	e032      	b.n	8008fc8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8008f62:	693b      	ldr	r3, [r7, #16]
 8008f64:	f003 0320 	and.w	r3, r3, #32
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d008      	beq.n	8008f7e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008f6c:	683b      	ldr	r3, [r7, #0]
 8008f6e:	015a      	lsls	r2, r3, #5
 8008f70:	69bb      	ldr	r3, [r7, #24]
 8008f72:	4413      	add	r3, r2
 8008f74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008f78:	461a      	mov	r2, r3
 8008f7a:	2320      	movs	r3, #32
 8008f7c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008f7e:	683b      	ldr	r3, [r7, #0]
 8008f80:	b2db      	uxtb	r3, r3
 8008f82:	4619      	mov	r1, r3
 8008f84:	6878      	ldr	r0, [r7, #4]
 8008f86:	f00a f897 	bl	80130b8 <HAL_PCD_DataOutStageCallback>
 8008f8a:	e01d      	b.n	8008fc8 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8008f8c:	683b      	ldr	r3, [r7, #0]
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d114      	bne.n	8008fbc <PCD_EP_OutXfrComplete_int+0x1b0>
 8008f92:	6879      	ldr	r1, [r7, #4]
 8008f94:	683a      	ldr	r2, [r7, #0]
 8008f96:	4613      	mov	r3, r2
 8008f98:	00db      	lsls	r3, r3, #3
 8008f9a:	4413      	add	r3, r2
 8008f9c:	009b      	lsls	r3, r3, #2
 8008f9e:	440b      	add	r3, r1
 8008fa0:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d108      	bne.n	8008fbc <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	6818      	ldr	r0, [r3, #0]
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8008fb4:	461a      	mov	r2, r3
 8008fb6:	2100      	movs	r1, #0
 8008fb8:	f007 fd8a 	bl	8010ad0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008fbc:	683b      	ldr	r3, [r7, #0]
 8008fbe:	b2db      	uxtb	r3, r3
 8008fc0:	4619      	mov	r1, r3
 8008fc2:	6878      	ldr	r0, [r7, #4]
 8008fc4:	f00a f878 	bl	80130b8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8008fc8:	2300      	movs	r3, #0
}
 8008fca:	4618      	mov	r0, r3
 8008fcc:	3720      	adds	r7, #32
 8008fce:	46bd      	mov	sp, r7
 8008fd0:	bd80      	pop	{r7, pc}
 8008fd2:	bf00      	nop
 8008fd4:	4f54300a 	.word	0x4f54300a
 8008fd8:	4f54310a 	.word	0x4f54310a

08008fdc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008fdc:	b580      	push	{r7, lr}
 8008fde:	b086      	sub	sp, #24
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	6078      	str	r0, [r7, #4]
 8008fe4:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008fec:	697b      	ldr	r3, [r7, #20]
 8008fee:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8008ff0:	697b      	ldr	r3, [r7, #20]
 8008ff2:	333c      	adds	r3, #60	@ 0x3c
 8008ff4:	3304      	adds	r3, #4
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8008ffa:	683b      	ldr	r3, [r7, #0]
 8008ffc:	015a      	lsls	r2, r3, #5
 8008ffe:	693b      	ldr	r3, [r7, #16]
 8009000:	4413      	add	r3, r2
 8009002:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009006:	689b      	ldr	r3, [r3, #8]
 8009008:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	4a15      	ldr	r2, [pc, #84]	@ (8009064 <PCD_EP_OutSetupPacket_int+0x88>)
 800900e:	4293      	cmp	r3, r2
 8009010:	d90e      	bls.n	8009030 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8009012:	68bb      	ldr	r3, [r7, #8]
 8009014:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009018:	2b00      	cmp	r3, #0
 800901a:	d009      	beq.n	8009030 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800901c:	683b      	ldr	r3, [r7, #0]
 800901e:	015a      	lsls	r2, r3, #5
 8009020:	693b      	ldr	r3, [r7, #16]
 8009022:	4413      	add	r3, r2
 8009024:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009028:	461a      	mov	r2, r3
 800902a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800902e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8009030:	6878      	ldr	r0, [r7, #4]
 8009032:	f00a f82f 	bl	8013094 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	4a0a      	ldr	r2, [pc, #40]	@ (8009064 <PCD_EP_OutSetupPacket_int+0x88>)
 800903a:	4293      	cmp	r3, r2
 800903c:	d90c      	bls.n	8009058 <PCD_EP_OutSetupPacket_int+0x7c>
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	799b      	ldrb	r3, [r3, #6]
 8009042:	2b01      	cmp	r3, #1
 8009044:	d108      	bne.n	8009058 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	6818      	ldr	r0, [r3, #0]
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8009050:	461a      	mov	r2, r3
 8009052:	2101      	movs	r1, #1
 8009054:	f007 fd3c 	bl	8010ad0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8009058:	2300      	movs	r3, #0
}
 800905a:	4618      	mov	r0, r3
 800905c:	3718      	adds	r7, #24
 800905e:	46bd      	mov	sp, r7
 8009060:	bd80      	pop	{r7, pc}
 8009062:	bf00      	nop
 8009064:	4f54300a 	.word	0x4f54300a

08009068 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8009068:	b480      	push	{r7}
 800906a:	b085      	sub	sp, #20
 800906c:	af00      	add	r7, sp, #0
 800906e:	6078      	str	r0, [r7, #4]
 8009070:	460b      	mov	r3, r1
 8009072:	70fb      	strb	r3, [r7, #3]
 8009074:	4613      	mov	r3, r2
 8009076:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800907e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8009080:	78fb      	ldrb	r3, [r7, #3]
 8009082:	2b00      	cmp	r3, #0
 8009084:	d107      	bne.n	8009096 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8009086:	883b      	ldrh	r3, [r7, #0]
 8009088:	0419      	lsls	r1, r3, #16
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	68ba      	ldr	r2, [r7, #8]
 8009090:	430a      	orrs	r2, r1
 8009092:	629a      	str	r2, [r3, #40]	@ 0x28
 8009094:	e028      	b.n	80090e8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800909c:	0c1b      	lsrs	r3, r3, #16
 800909e:	68ba      	ldr	r2, [r7, #8]
 80090a0:	4413      	add	r3, r2
 80090a2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80090a4:	2300      	movs	r3, #0
 80090a6:	73fb      	strb	r3, [r7, #15]
 80090a8:	e00d      	b.n	80090c6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681a      	ldr	r2, [r3, #0]
 80090ae:	7bfb      	ldrb	r3, [r7, #15]
 80090b0:	3340      	adds	r3, #64	@ 0x40
 80090b2:	009b      	lsls	r3, r3, #2
 80090b4:	4413      	add	r3, r2
 80090b6:	685b      	ldr	r3, [r3, #4]
 80090b8:	0c1b      	lsrs	r3, r3, #16
 80090ba:	68ba      	ldr	r2, [r7, #8]
 80090bc:	4413      	add	r3, r2
 80090be:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80090c0:	7bfb      	ldrb	r3, [r7, #15]
 80090c2:	3301      	adds	r3, #1
 80090c4:	73fb      	strb	r3, [r7, #15]
 80090c6:	7bfa      	ldrb	r2, [r7, #15]
 80090c8:	78fb      	ldrb	r3, [r7, #3]
 80090ca:	3b01      	subs	r3, #1
 80090cc:	429a      	cmp	r2, r3
 80090ce:	d3ec      	bcc.n	80090aa <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80090d0:	883b      	ldrh	r3, [r7, #0]
 80090d2:	0418      	lsls	r0, r3, #16
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	6819      	ldr	r1, [r3, #0]
 80090d8:	78fb      	ldrb	r3, [r7, #3]
 80090da:	3b01      	subs	r3, #1
 80090dc:	68ba      	ldr	r2, [r7, #8]
 80090de:	4302      	orrs	r2, r0
 80090e0:	3340      	adds	r3, #64	@ 0x40
 80090e2:	009b      	lsls	r3, r3, #2
 80090e4:	440b      	add	r3, r1
 80090e6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80090e8:	2300      	movs	r3, #0
}
 80090ea:	4618      	mov	r0, r3
 80090ec:	3714      	adds	r7, #20
 80090ee:	46bd      	mov	sp, r7
 80090f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f4:	4770      	bx	lr

080090f6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80090f6:	b480      	push	{r7}
 80090f8:	b083      	sub	sp, #12
 80090fa:	af00      	add	r7, sp, #0
 80090fc:	6078      	str	r0, [r7, #4]
 80090fe:	460b      	mov	r3, r1
 8009100:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	887a      	ldrh	r2, [r7, #2]
 8009108:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800910a:	2300      	movs	r3, #0
}
 800910c:	4618      	mov	r0, r3
 800910e:	370c      	adds	r7, #12
 8009110:	46bd      	mov	sp, r7
 8009112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009116:	4770      	bx	lr

08009118 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8009118:	b480      	push	{r7}
 800911a:	b085      	sub	sp, #20
 800911c:	af00      	add	r7, sp, #0
 800911e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	2201      	movs	r2, #1
 800912a:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	2200      	movs	r2, #0
 8009132:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	699b      	ldr	r3, [r3, #24]
 800913a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009146:	4b05      	ldr	r3, [pc, #20]	@ (800915c <HAL_PCDEx_ActivateLPM+0x44>)
 8009148:	4313      	orrs	r3, r2
 800914a:	68fa      	ldr	r2, [r7, #12]
 800914c:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800914e:	2300      	movs	r3, #0
}
 8009150:	4618      	mov	r0, r3
 8009152:	3714      	adds	r7, #20
 8009154:	46bd      	mov	sp, r7
 8009156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800915a:	4770      	bx	lr
 800915c:	10000003 	.word	0x10000003

08009160 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8009160:	b480      	push	{r7}
 8009162:	b083      	sub	sp, #12
 8009164:	af00      	add	r7, sp, #0
 8009166:	6078      	str	r0, [r7, #4]
 8009168:	460b      	mov	r3, r1
 800916a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800916c:	bf00      	nop
 800916e:	370c      	adds	r7, #12
 8009170:	46bd      	mov	sp, r7
 8009172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009176:	4770      	bx	lr

08009178 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8009178:	b580      	push	{r7, lr}
 800917a:	b084      	sub	sp, #16
 800917c:	af00      	add	r7, sp, #0
 800917e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8009180:	4b19      	ldr	r3, [pc, #100]	@ (80091e8 <HAL_PWREx_ConfigSupply+0x70>)
 8009182:	68db      	ldr	r3, [r3, #12]
 8009184:	f003 0304 	and.w	r3, r3, #4
 8009188:	2b04      	cmp	r3, #4
 800918a:	d00a      	beq.n	80091a2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800918c:	4b16      	ldr	r3, [pc, #88]	@ (80091e8 <HAL_PWREx_ConfigSupply+0x70>)
 800918e:	68db      	ldr	r3, [r3, #12]
 8009190:	f003 0307 	and.w	r3, r3, #7
 8009194:	687a      	ldr	r2, [r7, #4]
 8009196:	429a      	cmp	r2, r3
 8009198:	d001      	beq.n	800919e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800919a:	2301      	movs	r3, #1
 800919c:	e01f      	b.n	80091de <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800919e:	2300      	movs	r3, #0
 80091a0:	e01d      	b.n	80091de <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80091a2:	4b11      	ldr	r3, [pc, #68]	@ (80091e8 <HAL_PWREx_ConfigSupply+0x70>)
 80091a4:	68db      	ldr	r3, [r3, #12]
 80091a6:	f023 0207 	bic.w	r2, r3, #7
 80091aa:	490f      	ldr	r1, [pc, #60]	@ (80091e8 <HAL_PWREx_ConfigSupply+0x70>)
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	4313      	orrs	r3, r2
 80091b0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80091b2:	f7fa fee7 	bl	8003f84 <HAL_GetTick>
 80091b6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80091b8:	e009      	b.n	80091ce <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80091ba:	f7fa fee3 	bl	8003f84 <HAL_GetTick>
 80091be:	4602      	mov	r2, r0
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	1ad3      	subs	r3, r2, r3
 80091c4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80091c8:	d901      	bls.n	80091ce <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80091ca:	2301      	movs	r3, #1
 80091cc:	e007      	b.n	80091de <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80091ce:	4b06      	ldr	r3, [pc, #24]	@ (80091e8 <HAL_PWREx_ConfigSupply+0x70>)
 80091d0:	685b      	ldr	r3, [r3, #4]
 80091d2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80091d6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80091da:	d1ee      	bne.n	80091ba <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80091dc:	2300      	movs	r3, #0
}
 80091de:	4618      	mov	r0, r3
 80091e0:	3710      	adds	r7, #16
 80091e2:	46bd      	mov	sp, r7
 80091e4:	bd80      	pop	{r7, pc}
 80091e6:	bf00      	nop
 80091e8:	58024800 	.word	0x58024800

080091ec <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80091ec:	b480      	push	{r7}
 80091ee:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80091f0:	4b05      	ldr	r3, [pc, #20]	@ (8009208 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80091f2:	68db      	ldr	r3, [r3, #12]
 80091f4:	4a04      	ldr	r2, [pc, #16]	@ (8009208 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80091f6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80091fa:	60d3      	str	r3, [r2, #12]
}
 80091fc:	bf00      	nop
 80091fe:	46bd      	mov	sp, r7
 8009200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009204:	4770      	bx	lr
 8009206:	bf00      	nop
 8009208:	58024800 	.word	0x58024800

0800920c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800920c:	b580      	push	{r7, lr}
 800920e:	b08c      	sub	sp, #48	@ 0x30
 8009210:	af00      	add	r7, sp, #0
 8009212:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	2b00      	cmp	r3, #0
 8009218:	d101      	bne.n	800921e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800921a:	2301      	movs	r3, #1
 800921c:	e3c8      	b.n	80099b0 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	f003 0301 	and.w	r3, r3, #1
 8009226:	2b00      	cmp	r3, #0
 8009228:	f000 8087 	beq.w	800933a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800922c:	4b88      	ldr	r3, [pc, #544]	@ (8009450 <HAL_RCC_OscConfig+0x244>)
 800922e:	691b      	ldr	r3, [r3, #16]
 8009230:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009234:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009236:	4b86      	ldr	r3, [pc, #536]	@ (8009450 <HAL_RCC_OscConfig+0x244>)
 8009238:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800923a:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800923c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800923e:	2b10      	cmp	r3, #16
 8009240:	d007      	beq.n	8009252 <HAL_RCC_OscConfig+0x46>
 8009242:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009244:	2b18      	cmp	r3, #24
 8009246:	d110      	bne.n	800926a <HAL_RCC_OscConfig+0x5e>
 8009248:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800924a:	f003 0303 	and.w	r3, r3, #3
 800924e:	2b02      	cmp	r3, #2
 8009250:	d10b      	bne.n	800926a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009252:	4b7f      	ldr	r3, [pc, #508]	@ (8009450 <HAL_RCC_OscConfig+0x244>)
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800925a:	2b00      	cmp	r3, #0
 800925c:	d06c      	beq.n	8009338 <HAL_RCC_OscConfig+0x12c>
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	685b      	ldr	r3, [r3, #4]
 8009262:	2b00      	cmp	r3, #0
 8009264:	d168      	bne.n	8009338 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8009266:	2301      	movs	r3, #1
 8009268:	e3a2      	b.n	80099b0 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	685b      	ldr	r3, [r3, #4]
 800926e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009272:	d106      	bne.n	8009282 <HAL_RCC_OscConfig+0x76>
 8009274:	4b76      	ldr	r3, [pc, #472]	@ (8009450 <HAL_RCC_OscConfig+0x244>)
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	4a75      	ldr	r2, [pc, #468]	@ (8009450 <HAL_RCC_OscConfig+0x244>)
 800927a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800927e:	6013      	str	r3, [r2, #0]
 8009280:	e02e      	b.n	80092e0 <HAL_RCC_OscConfig+0xd4>
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	685b      	ldr	r3, [r3, #4]
 8009286:	2b00      	cmp	r3, #0
 8009288:	d10c      	bne.n	80092a4 <HAL_RCC_OscConfig+0x98>
 800928a:	4b71      	ldr	r3, [pc, #452]	@ (8009450 <HAL_RCC_OscConfig+0x244>)
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	4a70      	ldr	r2, [pc, #448]	@ (8009450 <HAL_RCC_OscConfig+0x244>)
 8009290:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009294:	6013      	str	r3, [r2, #0]
 8009296:	4b6e      	ldr	r3, [pc, #440]	@ (8009450 <HAL_RCC_OscConfig+0x244>)
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	4a6d      	ldr	r2, [pc, #436]	@ (8009450 <HAL_RCC_OscConfig+0x244>)
 800929c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80092a0:	6013      	str	r3, [r2, #0]
 80092a2:	e01d      	b.n	80092e0 <HAL_RCC_OscConfig+0xd4>
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	685b      	ldr	r3, [r3, #4]
 80092a8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80092ac:	d10c      	bne.n	80092c8 <HAL_RCC_OscConfig+0xbc>
 80092ae:	4b68      	ldr	r3, [pc, #416]	@ (8009450 <HAL_RCC_OscConfig+0x244>)
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	4a67      	ldr	r2, [pc, #412]	@ (8009450 <HAL_RCC_OscConfig+0x244>)
 80092b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80092b8:	6013      	str	r3, [r2, #0]
 80092ba:	4b65      	ldr	r3, [pc, #404]	@ (8009450 <HAL_RCC_OscConfig+0x244>)
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	4a64      	ldr	r2, [pc, #400]	@ (8009450 <HAL_RCC_OscConfig+0x244>)
 80092c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80092c4:	6013      	str	r3, [r2, #0]
 80092c6:	e00b      	b.n	80092e0 <HAL_RCC_OscConfig+0xd4>
 80092c8:	4b61      	ldr	r3, [pc, #388]	@ (8009450 <HAL_RCC_OscConfig+0x244>)
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	4a60      	ldr	r2, [pc, #384]	@ (8009450 <HAL_RCC_OscConfig+0x244>)
 80092ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80092d2:	6013      	str	r3, [r2, #0]
 80092d4:	4b5e      	ldr	r3, [pc, #376]	@ (8009450 <HAL_RCC_OscConfig+0x244>)
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	4a5d      	ldr	r2, [pc, #372]	@ (8009450 <HAL_RCC_OscConfig+0x244>)
 80092da:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80092de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	685b      	ldr	r3, [r3, #4]
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d013      	beq.n	8009310 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80092e8:	f7fa fe4c 	bl	8003f84 <HAL_GetTick>
 80092ec:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80092ee:	e008      	b.n	8009302 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80092f0:	f7fa fe48 	bl	8003f84 <HAL_GetTick>
 80092f4:	4602      	mov	r2, r0
 80092f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092f8:	1ad3      	subs	r3, r2, r3
 80092fa:	2b64      	cmp	r3, #100	@ 0x64
 80092fc:	d901      	bls.n	8009302 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80092fe:	2303      	movs	r3, #3
 8009300:	e356      	b.n	80099b0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009302:	4b53      	ldr	r3, [pc, #332]	@ (8009450 <HAL_RCC_OscConfig+0x244>)
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800930a:	2b00      	cmp	r3, #0
 800930c:	d0f0      	beq.n	80092f0 <HAL_RCC_OscConfig+0xe4>
 800930e:	e014      	b.n	800933a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009310:	f7fa fe38 	bl	8003f84 <HAL_GetTick>
 8009314:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009316:	e008      	b.n	800932a <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009318:	f7fa fe34 	bl	8003f84 <HAL_GetTick>
 800931c:	4602      	mov	r2, r0
 800931e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009320:	1ad3      	subs	r3, r2, r3
 8009322:	2b64      	cmp	r3, #100	@ 0x64
 8009324:	d901      	bls.n	800932a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8009326:	2303      	movs	r3, #3
 8009328:	e342      	b.n	80099b0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800932a:	4b49      	ldr	r3, [pc, #292]	@ (8009450 <HAL_RCC_OscConfig+0x244>)
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009332:	2b00      	cmp	r3, #0
 8009334:	d1f0      	bne.n	8009318 <HAL_RCC_OscConfig+0x10c>
 8009336:	e000      	b.n	800933a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009338:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	f003 0302 	and.w	r3, r3, #2
 8009342:	2b00      	cmp	r3, #0
 8009344:	f000 808c 	beq.w	8009460 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009348:	4b41      	ldr	r3, [pc, #260]	@ (8009450 <HAL_RCC_OscConfig+0x244>)
 800934a:	691b      	ldr	r3, [r3, #16]
 800934c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009350:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009352:	4b3f      	ldr	r3, [pc, #252]	@ (8009450 <HAL_RCC_OscConfig+0x244>)
 8009354:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009356:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8009358:	6a3b      	ldr	r3, [r7, #32]
 800935a:	2b00      	cmp	r3, #0
 800935c:	d007      	beq.n	800936e <HAL_RCC_OscConfig+0x162>
 800935e:	6a3b      	ldr	r3, [r7, #32]
 8009360:	2b18      	cmp	r3, #24
 8009362:	d137      	bne.n	80093d4 <HAL_RCC_OscConfig+0x1c8>
 8009364:	69fb      	ldr	r3, [r7, #28]
 8009366:	f003 0303 	and.w	r3, r3, #3
 800936a:	2b00      	cmp	r3, #0
 800936c:	d132      	bne.n	80093d4 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800936e:	4b38      	ldr	r3, [pc, #224]	@ (8009450 <HAL_RCC_OscConfig+0x244>)
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	f003 0304 	and.w	r3, r3, #4
 8009376:	2b00      	cmp	r3, #0
 8009378:	d005      	beq.n	8009386 <HAL_RCC_OscConfig+0x17a>
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	68db      	ldr	r3, [r3, #12]
 800937e:	2b00      	cmp	r3, #0
 8009380:	d101      	bne.n	8009386 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8009382:	2301      	movs	r3, #1
 8009384:	e314      	b.n	80099b0 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009386:	4b32      	ldr	r3, [pc, #200]	@ (8009450 <HAL_RCC_OscConfig+0x244>)
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	f023 0219 	bic.w	r2, r3, #25
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	68db      	ldr	r3, [r3, #12]
 8009392:	492f      	ldr	r1, [pc, #188]	@ (8009450 <HAL_RCC_OscConfig+0x244>)
 8009394:	4313      	orrs	r3, r2
 8009396:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009398:	f7fa fdf4 	bl	8003f84 <HAL_GetTick>
 800939c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800939e:	e008      	b.n	80093b2 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80093a0:	f7fa fdf0 	bl	8003f84 <HAL_GetTick>
 80093a4:	4602      	mov	r2, r0
 80093a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093a8:	1ad3      	subs	r3, r2, r3
 80093aa:	2b02      	cmp	r3, #2
 80093ac:	d901      	bls.n	80093b2 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80093ae:	2303      	movs	r3, #3
 80093b0:	e2fe      	b.n	80099b0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80093b2:	4b27      	ldr	r3, [pc, #156]	@ (8009450 <HAL_RCC_OscConfig+0x244>)
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	f003 0304 	and.w	r3, r3, #4
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d0f0      	beq.n	80093a0 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80093be:	4b24      	ldr	r3, [pc, #144]	@ (8009450 <HAL_RCC_OscConfig+0x244>)
 80093c0:	685b      	ldr	r3, [r3, #4]
 80093c2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	691b      	ldr	r3, [r3, #16]
 80093ca:	061b      	lsls	r3, r3, #24
 80093cc:	4920      	ldr	r1, [pc, #128]	@ (8009450 <HAL_RCC_OscConfig+0x244>)
 80093ce:	4313      	orrs	r3, r2
 80093d0:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80093d2:	e045      	b.n	8009460 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	68db      	ldr	r3, [r3, #12]
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d026      	beq.n	800942a <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80093dc:	4b1c      	ldr	r3, [pc, #112]	@ (8009450 <HAL_RCC_OscConfig+0x244>)
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	f023 0219 	bic.w	r2, r3, #25
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	68db      	ldr	r3, [r3, #12]
 80093e8:	4919      	ldr	r1, [pc, #100]	@ (8009450 <HAL_RCC_OscConfig+0x244>)
 80093ea:	4313      	orrs	r3, r2
 80093ec:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80093ee:	f7fa fdc9 	bl	8003f84 <HAL_GetTick>
 80093f2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80093f4:	e008      	b.n	8009408 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80093f6:	f7fa fdc5 	bl	8003f84 <HAL_GetTick>
 80093fa:	4602      	mov	r2, r0
 80093fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093fe:	1ad3      	subs	r3, r2, r3
 8009400:	2b02      	cmp	r3, #2
 8009402:	d901      	bls.n	8009408 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8009404:	2303      	movs	r3, #3
 8009406:	e2d3      	b.n	80099b0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009408:	4b11      	ldr	r3, [pc, #68]	@ (8009450 <HAL_RCC_OscConfig+0x244>)
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	f003 0304 	and.w	r3, r3, #4
 8009410:	2b00      	cmp	r3, #0
 8009412:	d0f0      	beq.n	80093f6 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009414:	4b0e      	ldr	r3, [pc, #56]	@ (8009450 <HAL_RCC_OscConfig+0x244>)
 8009416:	685b      	ldr	r3, [r3, #4]
 8009418:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	691b      	ldr	r3, [r3, #16]
 8009420:	061b      	lsls	r3, r3, #24
 8009422:	490b      	ldr	r1, [pc, #44]	@ (8009450 <HAL_RCC_OscConfig+0x244>)
 8009424:	4313      	orrs	r3, r2
 8009426:	604b      	str	r3, [r1, #4]
 8009428:	e01a      	b.n	8009460 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800942a:	4b09      	ldr	r3, [pc, #36]	@ (8009450 <HAL_RCC_OscConfig+0x244>)
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	4a08      	ldr	r2, [pc, #32]	@ (8009450 <HAL_RCC_OscConfig+0x244>)
 8009430:	f023 0301 	bic.w	r3, r3, #1
 8009434:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009436:	f7fa fda5 	bl	8003f84 <HAL_GetTick>
 800943a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800943c:	e00a      	b.n	8009454 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800943e:	f7fa fda1 	bl	8003f84 <HAL_GetTick>
 8009442:	4602      	mov	r2, r0
 8009444:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009446:	1ad3      	subs	r3, r2, r3
 8009448:	2b02      	cmp	r3, #2
 800944a:	d903      	bls.n	8009454 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800944c:	2303      	movs	r3, #3
 800944e:	e2af      	b.n	80099b0 <HAL_RCC_OscConfig+0x7a4>
 8009450:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009454:	4b96      	ldr	r3, [pc, #600]	@ (80096b0 <HAL_RCC_OscConfig+0x4a4>)
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	f003 0304 	and.w	r3, r3, #4
 800945c:	2b00      	cmp	r3, #0
 800945e:	d1ee      	bne.n	800943e <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	f003 0310 	and.w	r3, r3, #16
 8009468:	2b00      	cmp	r3, #0
 800946a:	d06a      	beq.n	8009542 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800946c:	4b90      	ldr	r3, [pc, #576]	@ (80096b0 <HAL_RCC_OscConfig+0x4a4>)
 800946e:	691b      	ldr	r3, [r3, #16]
 8009470:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009474:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009476:	4b8e      	ldr	r3, [pc, #568]	@ (80096b0 <HAL_RCC_OscConfig+0x4a4>)
 8009478:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800947a:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800947c:	69bb      	ldr	r3, [r7, #24]
 800947e:	2b08      	cmp	r3, #8
 8009480:	d007      	beq.n	8009492 <HAL_RCC_OscConfig+0x286>
 8009482:	69bb      	ldr	r3, [r7, #24]
 8009484:	2b18      	cmp	r3, #24
 8009486:	d11b      	bne.n	80094c0 <HAL_RCC_OscConfig+0x2b4>
 8009488:	697b      	ldr	r3, [r7, #20]
 800948a:	f003 0303 	and.w	r3, r3, #3
 800948e:	2b01      	cmp	r3, #1
 8009490:	d116      	bne.n	80094c0 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009492:	4b87      	ldr	r3, [pc, #540]	@ (80096b0 <HAL_RCC_OscConfig+0x4a4>)
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800949a:	2b00      	cmp	r3, #0
 800949c:	d005      	beq.n	80094aa <HAL_RCC_OscConfig+0x29e>
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	69db      	ldr	r3, [r3, #28]
 80094a2:	2b80      	cmp	r3, #128	@ 0x80
 80094a4:	d001      	beq.n	80094aa <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80094a6:	2301      	movs	r3, #1
 80094a8:	e282      	b.n	80099b0 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80094aa:	4b81      	ldr	r3, [pc, #516]	@ (80096b0 <HAL_RCC_OscConfig+0x4a4>)
 80094ac:	68db      	ldr	r3, [r3, #12]
 80094ae:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	6a1b      	ldr	r3, [r3, #32]
 80094b6:	061b      	lsls	r3, r3, #24
 80094b8:	497d      	ldr	r1, [pc, #500]	@ (80096b0 <HAL_RCC_OscConfig+0x4a4>)
 80094ba:	4313      	orrs	r3, r2
 80094bc:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80094be:	e040      	b.n	8009542 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	69db      	ldr	r3, [r3, #28]
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d023      	beq.n	8009510 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80094c8:	4b79      	ldr	r3, [pc, #484]	@ (80096b0 <HAL_RCC_OscConfig+0x4a4>)
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	4a78      	ldr	r2, [pc, #480]	@ (80096b0 <HAL_RCC_OscConfig+0x4a4>)
 80094ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80094d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80094d4:	f7fa fd56 	bl	8003f84 <HAL_GetTick>
 80094d8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80094da:	e008      	b.n	80094ee <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80094dc:	f7fa fd52 	bl	8003f84 <HAL_GetTick>
 80094e0:	4602      	mov	r2, r0
 80094e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094e4:	1ad3      	subs	r3, r2, r3
 80094e6:	2b02      	cmp	r3, #2
 80094e8:	d901      	bls.n	80094ee <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80094ea:	2303      	movs	r3, #3
 80094ec:	e260      	b.n	80099b0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80094ee:	4b70      	ldr	r3, [pc, #448]	@ (80096b0 <HAL_RCC_OscConfig+0x4a4>)
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d0f0      	beq.n	80094dc <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80094fa:	4b6d      	ldr	r3, [pc, #436]	@ (80096b0 <HAL_RCC_OscConfig+0x4a4>)
 80094fc:	68db      	ldr	r3, [r3, #12]
 80094fe:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	6a1b      	ldr	r3, [r3, #32]
 8009506:	061b      	lsls	r3, r3, #24
 8009508:	4969      	ldr	r1, [pc, #420]	@ (80096b0 <HAL_RCC_OscConfig+0x4a4>)
 800950a:	4313      	orrs	r3, r2
 800950c:	60cb      	str	r3, [r1, #12]
 800950e:	e018      	b.n	8009542 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8009510:	4b67      	ldr	r3, [pc, #412]	@ (80096b0 <HAL_RCC_OscConfig+0x4a4>)
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	4a66      	ldr	r2, [pc, #408]	@ (80096b0 <HAL_RCC_OscConfig+0x4a4>)
 8009516:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800951a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800951c:	f7fa fd32 	bl	8003f84 <HAL_GetTick>
 8009520:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009522:	e008      	b.n	8009536 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8009524:	f7fa fd2e 	bl	8003f84 <HAL_GetTick>
 8009528:	4602      	mov	r2, r0
 800952a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800952c:	1ad3      	subs	r3, r2, r3
 800952e:	2b02      	cmp	r3, #2
 8009530:	d901      	bls.n	8009536 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8009532:	2303      	movs	r3, #3
 8009534:	e23c      	b.n	80099b0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009536:	4b5e      	ldr	r3, [pc, #376]	@ (80096b0 <HAL_RCC_OscConfig+0x4a4>)
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800953e:	2b00      	cmp	r3, #0
 8009540:	d1f0      	bne.n	8009524 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	f003 0308 	and.w	r3, r3, #8
 800954a:	2b00      	cmp	r3, #0
 800954c:	d036      	beq.n	80095bc <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	695b      	ldr	r3, [r3, #20]
 8009552:	2b00      	cmp	r3, #0
 8009554:	d019      	beq.n	800958a <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009556:	4b56      	ldr	r3, [pc, #344]	@ (80096b0 <HAL_RCC_OscConfig+0x4a4>)
 8009558:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800955a:	4a55      	ldr	r2, [pc, #340]	@ (80096b0 <HAL_RCC_OscConfig+0x4a4>)
 800955c:	f043 0301 	orr.w	r3, r3, #1
 8009560:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009562:	f7fa fd0f 	bl	8003f84 <HAL_GetTick>
 8009566:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009568:	e008      	b.n	800957c <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800956a:	f7fa fd0b 	bl	8003f84 <HAL_GetTick>
 800956e:	4602      	mov	r2, r0
 8009570:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009572:	1ad3      	subs	r3, r2, r3
 8009574:	2b02      	cmp	r3, #2
 8009576:	d901      	bls.n	800957c <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8009578:	2303      	movs	r3, #3
 800957a:	e219      	b.n	80099b0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800957c:	4b4c      	ldr	r3, [pc, #304]	@ (80096b0 <HAL_RCC_OscConfig+0x4a4>)
 800957e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009580:	f003 0302 	and.w	r3, r3, #2
 8009584:	2b00      	cmp	r3, #0
 8009586:	d0f0      	beq.n	800956a <HAL_RCC_OscConfig+0x35e>
 8009588:	e018      	b.n	80095bc <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800958a:	4b49      	ldr	r3, [pc, #292]	@ (80096b0 <HAL_RCC_OscConfig+0x4a4>)
 800958c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800958e:	4a48      	ldr	r2, [pc, #288]	@ (80096b0 <HAL_RCC_OscConfig+0x4a4>)
 8009590:	f023 0301 	bic.w	r3, r3, #1
 8009594:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009596:	f7fa fcf5 	bl	8003f84 <HAL_GetTick>
 800959a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800959c:	e008      	b.n	80095b0 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800959e:	f7fa fcf1 	bl	8003f84 <HAL_GetTick>
 80095a2:	4602      	mov	r2, r0
 80095a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095a6:	1ad3      	subs	r3, r2, r3
 80095a8:	2b02      	cmp	r3, #2
 80095aa:	d901      	bls.n	80095b0 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 80095ac:	2303      	movs	r3, #3
 80095ae:	e1ff      	b.n	80099b0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80095b0:	4b3f      	ldr	r3, [pc, #252]	@ (80096b0 <HAL_RCC_OscConfig+0x4a4>)
 80095b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80095b4:	f003 0302 	and.w	r3, r3, #2
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d1f0      	bne.n	800959e <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	f003 0320 	and.w	r3, r3, #32
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d036      	beq.n	8009636 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	699b      	ldr	r3, [r3, #24]
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d019      	beq.n	8009604 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80095d0:	4b37      	ldr	r3, [pc, #220]	@ (80096b0 <HAL_RCC_OscConfig+0x4a4>)
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	4a36      	ldr	r2, [pc, #216]	@ (80096b0 <HAL_RCC_OscConfig+0x4a4>)
 80095d6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80095da:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80095dc:	f7fa fcd2 	bl	8003f84 <HAL_GetTick>
 80095e0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80095e2:	e008      	b.n	80095f6 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80095e4:	f7fa fcce 	bl	8003f84 <HAL_GetTick>
 80095e8:	4602      	mov	r2, r0
 80095ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095ec:	1ad3      	subs	r3, r2, r3
 80095ee:	2b02      	cmp	r3, #2
 80095f0:	d901      	bls.n	80095f6 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 80095f2:	2303      	movs	r3, #3
 80095f4:	e1dc      	b.n	80099b0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80095f6:	4b2e      	ldr	r3, [pc, #184]	@ (80096b0 <HAL_RCC_OscConfig+0x4a4>)
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d0f0      	beq.n	80095e4 <HAL_RCC_OscConfig+0x3d8>
 8009602:	e018      	b.n	8009636 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009604:	4b2a      	ldr	r3, [pc, #168]	@ (80096b0 <HAL_RCC_OscConfig+0x4a4>)
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	4a29      	ldr	r2, [pc, #164]	@ (80096b0 <HAL_RCC_OscConfig+0x4a4>)
 800960a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800960e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009610:	f7fa fcb8 	bl	8003f84 <HAL_GetTick>
 8009614:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009616:	e008      	b.n	800962a <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009618:	f7fa fcb4 	bl	8003f84 <HAL_GetTick>
 800961c:	4602      	mov	r2, r0
 800961e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009620:	1ad3      	subs	r3, r2, r3
 8009622:	2b02      	cmp	r3, #2
 8009624:	d901      	bls.n	800962a <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8009626:	2303      	movs	r3, #3
 8009628:	e1c2      	b.n	80099b0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800962a:	4b21      	ldr	r3, [pc, #132]	@ (80096b0 <HAL_RCC_OscConfig+0x4a4>)
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009632:	2b00      	cmp	r3, #0
 8009634:	d1f0      	bne.n	8009618 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	f003 0304 	and.w	r3, r3, #4
 800963e:	2b00      	cmp	r3, #0
 8009640:	f000 8086 	beq.w	8009750 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8009644:	4b1b      	ldr	r3, [pc, #108]	@ (80096b4 <HAL_RCC_OscConfig+0x4a8>)
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	4a1a      	ldr	r2, [pc, #104]	@ (80096b4 <HAL_RCC_OscConfig+0x4a8>)
 800964a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800964e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009650:	f7fa fc98 	bl	8003f84 <HAL_GetTick>
 8009654:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009656:	e008      	b.n	800966a <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009658:	f7fa fc94 	bl	8003f84 <HAL_GetTick>
 800965c:	4602      	mov	r2, r0
 800965e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009660:	1ad3      	subs	r3, r2, r3
 8009662:	2b64      	cmp	r3, #100	@ 0x64
 8009664:	d901      	bls.n	800966a <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8009666:	2303      	movs	r3, #3
 8009668:	e1a2      	b.n	80099b0 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800966a:	4b12      	ldr	r3, [pc, #72]	@ (80096b4 <HAL_RCC_OscConfig+0x4a8>)
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009672:	2b00      	cmp	r3, #0
 8009674:	d0f0      	beq.n	8009658 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	689b      	ldr	r3, [r3, #8]
 800967a:	2b01      	cmp	r3, #1
 800967c:	d106      	bne.n	800968c <HAL_RCC_OscConfig+0x480>
 800967e:	4b0c      	ldr	r3, [pc, #48]	@ (80096b0 <HAL_RCC_OscConfig+0x4a4>)
 8009680:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009682:	4a0b      	ldr	r2, [pc, #44]	@ (80096b0 <HAL_RCC_OscConfig+0x4a4>)
 8009684:	f043 0301 	orr.w	r3, r3, #1
 8009688:	6713      	str	r3, [r2, #112]	@ 0x70
 800968a:	e032      	b.n	80096f2 <HAL_RCC_OscConfig+0x4e6>
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	689b      	ldr	r3, [r3, #8]
 8009690:	2b00      	cmp	r3, #0
 8009692:	d111      	bne.n	80096b8 <HAL_RCC_OscConfig+0x4ac>
 8009694:	4b06      	ldr	r3, [pc, #24]	@ (80096b0 <HAL_RCC_OscConfig+0x4a4>)
 8009696:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009698:	4a05      	ldr	r2, [pc, #20]	@ (80096b0 <HAL_RCC_OscConfig+0x4a4>)
 800969a:	f023 0301 	bic.w	r3, r3, #1
 800969e:	6713      	str	r3, [r2, #112]	@ 0x70
 80096a0:	4b03      	ldr	r3, [pc, #12]	@ (80096b0 <HAL_RCC_OscConfig+0x4a4>)
 80096a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80096a4:	4a02      	ldr	r2, [pc, #8]	@ (80096b0 <HAL_RCC_OscConfig+0x4a4>)
 80096a6:	f023 0304 	bic.w	r3, r3, #4
 80096aa:	6713      	str	r3, [r2, #112]	@ 0x70
 80096ac:	e021      	b.n	80096f2 <HAL_RCC_OscConfig+0x4e6>
 80096ae:	bf00      	nop
 80096b0:	58024400 	.word	0x58024400
 80096b4:	58024800 	.word	0x58024800
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	689b      	ldr	r3, [r3, #8]
 80096bc:	2b05      	cmp	r3, #5
 80096be:	d10c      	bne.n	80096da <HAL_RCC_OscConfig+0x4ce>
 80096c0:	4b83      	ldr	r3, [pc, #524]	@ (80098d0 <HAL_RCC_OscConfig+0x6c4>)
 80096c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80096c4:	4a82      	ldr	r2, [pc, #520]	@ (80098d0 <HAL_RCC_OscConfig+0x6c4>)
 80096c6:	f043 0304 	orr.w	r3, r3, #4
 80096ca:	6713      	str	r3, [r2, #112]	@ 0x70
 80096cc:	4b80      	ldr	r3, [pc, #512]	@ (80098d0 <HAL_RCC_OscConfig+0x6c4>)
 80096ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80096d0:	4a7f      	ldr	r2, [pc, #508]	@ (80098d0 <HAL_RCC_OscConfig+0x6c4>)
 80096d2:	f043 0301 	orr.w	r3, r3, #1
 80096d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80096d8:	e00b      	b.n	80096f2 <HAL_RCC_OscConfig+0x4e6>
 80096da:	4b7d      	ldr	r3, [pc, #500]	@ (80098d0 <HAL_RCC_OscConfig+0x6c4>)
 80096dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80096de:	4a7c      	ldr	r2, [pc, #496]	@ (80098d0 <HAL_RCC_OscConfig+0x6c4>)
 80096e0:	f023 0301 	bic.w	r3, r3, #1
 80096e4:	6713      	str	r3, [r2, #112]	@ 0x70
 80096e6:	4b7a      	ldr	r3, [pc, #488]	@ (80098d0 <HAL_RCC_OscConfig+0x6c4>)
 80096e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80096ea:	4a79      	ldr	r2, [pc, #484]	@ (80098d0 <HAL_RCC_OscConfig+0x6c4>)
 80096ec:	f023 0304 	bic.w	r3, r3, #4
 80096f0:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	689b      	ldr	r3, [r3, #8]
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d015      	beq.n	8009726 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80096fa:	f7fa fc43 	bl	8003f84 <HAL_GetTick>
 80096fe:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009700:	e00a      	b.n	8009718 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009702:	f7fa fc3f 	bl	8003f84 <HAL_GetTick>
 8009706:	4602      	mov	r2, r0
 8009708:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800970a:	1ad3      	subs	r3, r2, r3
 800970c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009710:	4293      	cmp	r3, r2
 8009712:	d901      	bls.n	8009718 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8009714:	2303      	movs	r3, #3
 8009716:	e14b      	b.n	80099b0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009718:	4b6d      	ldr	r3, [pc, #436]	@ (80098d0 <HAL_RCC_OscConfig+0x6c4>)
 800971a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800971c:	f003 0302 	and.w	r3, r3, #2
 8009720:	2b00      	cmp	r3, #0
 8009722:	d0ee      	beq.n	8009702 <HAL_RCC_OscConfig+0x4f6>
 8009724:	e014      	b.n	8009750 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009726:	f7fa fc2d 	bl	8003f84 <HAL_GetTick>
 800972a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800972c:	e00a      	b.n	8009744 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800972e:	f7fa fc29 	bl	8003f84 <HAL_GetTick>
 8009732:	4602      	mov	r2, r0
 8009734:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009736:	1ad3      	subs	r3, r2, r3
 8009738:	f241 3288 	movw	r2, #5000	@ 0x1388
 800973c:	4293      	cmp	r3, r2
 800973e:	d901      	bls.n	8009744 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8009740:	2303      	movs	r3, #3
 8009742:	e135      	b.n	80099b0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009744:	4b62      	ldr	r3, [pc, #392]	@ (80098d0 <HAL_RCC_OscConfig+0x6c4>)
 8009746:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009748:	f003 0302 	and.w	r3, r3, #2
 800974c:	2b00      	cmp	r3, #0
 800974e:	d1ee      	bne.n	800972e <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009754:	2b00      	cmp	r3, #0
 8009756:	f000 812a 	beq.w	80099ae <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800975a:	4b5d      	ldr	r3, [pc, #372]	@ (80098d0 <HAL_RCC_OscConfig+0x6c4>)
 800975c:	691b      	ldr	r3, [r3, #16]
 800975e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009762:	2b18      	cmp	r3, #24
 8009764:	f000 80ba 	beq.w	80098dc <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800976c:	2b02      	cmp	r3, #2
 800976e:	f040 8095 	bne.w	800989c <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009772:	4b57      	ldr	r3, [pc, #348]	@ (80098d0 <HAL_RCC_OscConfig+0x6c4>)
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	4a56      	ldr	r2, [pc, #344]	@ (80098d0 <HAL_RCC_OscConfig+0x6c4>)
 8009778:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800977c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800977e:	f7fa fc01 	bl	8003f84 <HAL_GetTick>
 8009782:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009784:	e008      	b.n	8009798 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009786:	f7fa fbfd 	bl	8003f84 <HAL_GetTick>
 800978a:	4602      	mov	r2, r0
 800978c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800978e:	1ad3      	subs	r3, r2, r3
 8009790:	2b02      	cmp	r3, #2
 8009792:	d901      	bls.n	8009798 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8009794:	2303      	movs	r3, #3
 8009796:	e10b      	b.n	80099b0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009798:	4b4d      	ldr	r3, [pc, #308]	@ (80098d0 <HAL_RCC_OscConfig+0x6c4>)
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d1f0      	bne.n	8009786 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80097a4:	4b4a      	ldr	r3, [pc, #296]	@ (80098d0 <HAL_RCC_OscConfig+0x6c4>)
 80097a6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80097a8:	4b4a      	ldr	r3, [pc, #296]	@ (80098d4 <HAL_RCC_OscConfig+0x6c8>)
 80097aa:	4013      	ands	r3, r2
 80097ac:	687a      	ldr	r2, [r7, #4]
 80097ae:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80097b0:	687a      	ldr	r2, [r7, #4]
 80097b2:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80097b4:	0112      	lsls	r2, r2, #4
 80097b6:	430a      	orrs	r2, r1
 80097b8:	4945      	ldr	r1, [pc, #276]	@ (80098d0 <HAL_RCC_OscConfig+0x6c4>)
 80097ba:	4313      	orrs	r3, r2
 80097bc:	628b      	str	r3, [r1, #40]	@ 0x28
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80097c2:	3b01      	subs	r3, #1
 80097c4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80097cc:	3b01      	subs	r3, #1
 80097ce:	025b      	lsls	r3, r3, #9
 80097d0:	b29b      	uxth	r3, r3
 80097d2:	431a      	orrs	r2, r3
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80097d8:	3b01      	subs	r3, #1
 80097da:	041b      	lsls	r3, r3, #16
 80097dc:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80097e0:	431a      	orrs	r2, r3
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80097e6:	3b01      	subs	r3, #1
 80097e8:	061b      	lsls	r3, r3, #24
 80097ea:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80097ee:	4938      	ldr	r1, [pc, #224]	@ (80098d0 <HAL_RCC_OscConfig+0x6c4>)
 80097f0:	4313      	orrs	r3, r2
 80097f2:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80097f4:	4b36      	ldr	r3, [pc, #216]	@ (80098d0 <HAL_RCC_OscConfig+0x6c4>)
 80097f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097f8:	4a35      	ldr	r2, [pc, #212]	@ (80098d0 <HAL_RCC_OscConfig+0x6c4>)
 80097fa:	f023 0301 	bic.w	r3, r3, #1
 80097fe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009800:	4b33      	ldr	r3, [pc, #204]	@ (80098d0 <HAL_RCC_OscConfig+0x6c4>)
 8009802:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009804:	4b34      	ldr	r3, [pc, #208]	@ (80098d8 <HAL_RCC_OscConfig+0x6cc>)
 8009806:	4013      	ands	r3, r2
 8009808:	687a      	ldr	r2, [r7, #4]
 800980a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800980c:	00d2      	lsls	r2, r2, #3
 800980e:	4930      	ldr	r1, [pc, #192]	@ (80098d0 <HAL_RCC_OscConfig+0x6c4>)
 8009810:	4313      	orrs	r3, r2
 8009812:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8009814:	4b2e      	ldr	r3, [pc, #184]	@ (80098d0 <HAL_RCC_OscConfig+0x6c4>)
 8009816:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009818:	f023 020c 	bic.w	r2, r3, #12
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009820:	492b      	ldr	r1, [pc, #172]	@ (80098d0 <HAL_RCC_OscConfig+0x6c4>)
 8009822:	4313      	orrs	r3, r2
 8009824:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8009826:	4b2a      	ldr	r3, [pc, #168]	@ (80098d0 <HAL_RCC_OscConfig+0x6c4>)
 8009828:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800982a:	f023 0202 	bic.w	r2, r3, #2
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009832:	4927      	ldr	r1, [pc, #156]	@ (80098d0 <HAL_RCC_OscConfig+0x6c4>)
 8009834:	4313      	orrs	r3, r2
 8009836:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009838:	4b25      	ldr	r3, [pc, #148]	@ (80098d0 <HAL_RCC_OscConfig+0x6c4>)
 800983a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800983c:	4a24      	ldr	r2, [pc, #144]	@ (80098d0 <HAL_RCC_OscConfig+0x6c4>)
 800983e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009842:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009844:	4b22      	ldr	r3, [pc, #136]	@ (80098d0 <HAL_RCC_OscConfig+0x6c4>)
 8009846:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009848:	4a21      	ldr	r2, [pc, #132]	@ (80098d0 <HAL_RCC_OscConfig+0x6c4>)
 800984a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800984e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8009850:	4b1f      	ldr	r3, [pc, #124]	@ (80098d0 <HAL_RCC_OscConfig+0x6c4>)
 8009852:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009854:	4a1e      	ldr	r2, [pc, #120]	@ (80098d0 <HAL_RCC_OscConfig+0x6c4>)
 8009856:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800985a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800985c:	4b1c      	ldr	r3, [pc, #112]	@ (80098d0 <HAL_RCC_OscConfig+0x6c4>)
 800985e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009860:	4a1b      	ldr	r2, [pc, #108]	@ (80098d0 <HAL_RCC_OscConfig+0x6c4>)
 8009862:	f043 0301 	orr.w	r3, r3, #1
 8009866:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009868:	4b19      	ldr	r3, [pc, #100]	@ (80098d0 <HAL_RCC_OscConfig+0x6c4>)
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	4a18      	ldr	r2, [pc, #96]	@ (80098d0 <HAL_RCC_OscConfig+0x6c4>)
 800986e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009872:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009874:	f7fa fb86 	bl	8003f84 <HAL_GetTick>
 8009878:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800987a:	e008      	b.n	800988e <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800987c:	f7fa fb82 	bl	8003f84 <HAL_GetTick>
 8009880:	4602      	mov	r2, r0
 8009882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009884:	1ad3      	subs	r3, r2, r3
 8009886:	2b02      	cmp	r3, #2
 8009888:	d901      	bls.n	800988e <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800988a:	2303      	movs	r3, #3
 800988c:	e090      	b.n	80099b0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800988e:	4b10      	ldr	r3, [pc, #64]	@ (80098d0 <HAL_RCC_OscConfig+0x6c4>)
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009896:	2b00      	cmp	r3, #0
 8009898:	d0f0      	beq.n	800987c <HAL_RCC_OscConfig+0x670>
 800989a:	e088      	b.n	80099ae <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800989c:	4b0c      	ldr	r3, [pc, #48]	@ (80098d0 <HAL_RCC_OscConfig+0x6c4>)
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	4a0b      	ldr	r2, [pc, #44]	@ (80098d0 <HAL_RCC_OscConfig+0x6c4>)
 80098a2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80098a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80098a8:	f7fa fb6c 	bl	8003f84 <HAL_GetTick>
 80098ac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80098ae:	e008      	b.n	80098c2 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80098b0:	f7fa fb68 	bl	8003f84 <HAL_GetTick>
 80098b4:	4602      	mov	r2, r0
 80098b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098b8:	1ad3      	subs	r3, r2, r3
 80098ba:	2b02      	cmp	r3, #2
 80098bc:	d901      	bls.n	80098c2 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 80098be:	2303      	movs	r3, #3
 80098c0:	e076      	b.n	80099b0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80098c2:	4b03      	ldr	r3, [pc, #12]	@ (80098d0 <HAL_RCC_OscConfig+0x6c4>)
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d1f0      	bne.n	80098b0 <HAL_RCC_OscConfig+0x6a4>
 80098ce:	e06e      	b.n	80099ae <HAL_RCC_OscConfig+0x7a2>
 80098d0:	58024400 	.word	0x58024400
 80098d4:	fffffc0c 	.word	0xfffffc0c
 80098d8:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80098dc:	4b36      	ldr	r3, [pc, #216]	@ (80099b8 <HAL_RCC_OscConfig+0x7ac>)
 80098de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098e0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80098e2:	4b35      	ldr	r3, [pc, #212]	@ (80099b8 <HAL_RCC_OscConfig+0x7ac>)
 80098e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80098e6:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80098ec:	2b01      	cmp	r3, #1
 80098ee:	d031      	beq.n	8009954 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80098f0:	693b      	ldr	r3, [r7, #16]
 80098f2:	f003 0203 	and.w	r2, r3, #3
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80098fa:	429a      	cmp	r2, r3
 80098fc:	d12a      	bne.n	8009954 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80098fe:	693b      	ldr	r3, [r7, #16]
 8009900:	091b      	lsrs	r3, r3, #4
 8009902:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800990a:	429a      	cmp	r2, r3
 800990c:	d122      	bne.n	8009954 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009918:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800991a:	429a      	cmp	r2, r3
 800991c:	d11a      	bne.n	8009954 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	0a5b      	lsrs	r3, r3, #9
 8009922:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800992a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800992c:	429a      	cmp	r2, r3
 800992e:	d111      	bne.n	8009954 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	0c1b      	lsrs	r3, r3, #16
 8009934:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800993c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800993e:	429a      	cmp	r2, r3
 8009940:	d108      	bne.n	8009954 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	0e1b      	lsrs	r3, r3, #24
 8009946:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800994e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009950:	429a      	cmp	r2, r3
 8009952:	d001      	beq.n	8009958 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8009954:	2301      	movs	r3, #1
 8009956:	e02b      	b.n	80099b0 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8009958:	4b17      	ldr	r3, [pc, #92]	@ (80099b8 <HAL_RCC_OscConfig+0x7ac>)
 800995a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800995c:	08db      	lsrs	r3, r3, #3
 800995e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009962:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009968:	693a      	ldr	r2, [r7, #16]
 800996a:	429a      	cmp	r2, r3
 800996c:	d01f      	beq.n	80099ae <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800996e:	4b12      	ldr	r3, [pc, #72]	@ (80099b8 <HAL_RCC_OscConfig+0x7ac>)
 8009970:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009972:	4a11      	ldr	r2, [pc, #68]	@ (80099b8 <HAL_RCC_OscConfig+0x7ac>)
 8009974:	f023 0301 	bic.w	r3, r3, #1
 8009978:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800997a:	f7fa fb03 	bl	8003f84 <HAL_GetTick>
 800997e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8009980:	bf00      	nop
 8009982:	f7fa faff 	bl	8003f84 <HAL_GetTick>
 8009986:	4602      	mov	r2, r0
 8009988:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800998a:	4293      	cmp	r3, r2
 800998c:	d0f9      	beq.n	8009982 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800998e:	4b0a      	ldr	r3, [pc, #40]	@ (80099b8 <HAL_RCC_OscConfig+0x7ac>)
 8009990:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009992:	4b0a      	ldr	r3, [pc, #40]	@ (80099bc <HAL_RCC_OscConfig+0x7b0>)
 8009994:	4013      	ands	r3, r2
 8009996:	687a      	ldr	r2, [r7, #4]
 8009998:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800999a:	00d2      	lsls	r2, r2, #3
 800999c:	4906      	ldr	r1, [pc, #24]	@ (80099b8 <HAL_RCC_OscConfig+0x7ac>)
 800999e:	4313      	orrs	r3, r2
 80099a0:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80099a2:	4b05      	ldr	r3, [pc, #20]	@ (80099b8 <HAL_RCC_OscConfig+0x7ac>)
 80099a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099a6:	4a04      	ldr	r2, [pc, #16]	@ (80099b8 <HAL_RCC_OscConfig+0x7ac>)
 80099a8:	f043 0301 	orr.w	r3, r3, #1
 80099ac:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80099ae:	2300      	movs	r3, #0
}
 80099b0:	4618      	mov	r0, r3
 80099b2:	3730      	adds	r7, #48	@ 0x30
 80099b4:	46bd      	mov	sp, r7
 80099b6:	bd80      	pop	{r7, pc}
 80099b8:	58024400 	.word	0x58024400
 80099bc:	ffff0007 	.word	0xffff0007

080099c0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80099c0:	b580      	push	{r7, lr}
 80099c2:	b086      	sub	sp, #24
 80099c4:	af00      	add	r7, sp, #0
 80099c6:	6078      	str	r0, [r7, #4]
 80099c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d101      	bne.n	80099d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80099d0:	2301      	movs	r3, #1
 80099d2:	e19c      	b.n	8009d0e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80099d4:	4b8a      	ldr	r3, [pc, #552]	@ (8009c00 <HAL_RCC_ClockConfig+0x240>)
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	f003 030f 	and.w	r3, r3, #15
 80099dc:	683a      	ldr	r2, [r7, #0]
 80099de:	429a      	cmp	r2, r3
 80099e0:	d910      	bls.n	8009a04 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80099e2:	4b87      	ldr	r3, [pc, #540]	@ (8009c00 <HAL_RCC_ClockConfig+0x240>)
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	f023 020f 	bic.w	r2, r3, #15
 80099ea:	4985      	ldr	r1, [pc, #532]	@ (8009c00 <HAL_RCC_ClockConfig+0x240>)
 80099ec:	683b      	ldr	r3, [r7, #0]
 80099ee:	4313      	orrs	r3, r2
 80099f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80099f2:	4b83      	ldr	r3, [pc, #524]	@ (8009c00 <HAL_RCC_ClockConfig+0x240>)
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	f003 030f 	and.w	r3, r3, #15
 80099fa:	683a      	ldr	r2, [r7, #0]
 80099fc:	429a      	cmp	r2, r3
 80099fe:	d001      	beq.n	8009a04 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8009a00:	2301      	movs	r3, #1
 8009a02:	e184      	b.n	8009d0e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	f003 0304 	and.w	r3, r3, #4
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d010      	beq.n	8009a32 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	691a      	ldr	r2, [r3, #16]
 8009a14:	4b7b      	ldr	r3, [pc, #492]	@ (8009c04 <HAL_RCC_ClockConfig+0x244>)
 8009a16:	699b      	ldr	r3, [r3, #24]
 8009a18:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009a1c:	429a      	cmp	r2, r3
 8009a1e:	d908      	bls.n	8009a32 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009a20:	4b78      	ldr	r3, [pc, #480]	@ (8009c04 <HAL_RCC_ClockConfig+0x244>)
 8009a22:	699b      	ldr	r3, [r3, #24]
 8009a24:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	691b      	ldr	r3, [r3, #16]
 8009a2c:	4975      	ldr	r1, [pc, #468]	@ (8009c04 <HAL_RCC_ClockConfig+0x244>)
 8009a2e:	4313      	orrs	r3, r2
 8009a30:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	f003 0308 	and.w	r3, r3, #8
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d010      	beq.n	8009a60 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	695a      	ldr	r2, [r3, #20]
 8009a42:	4b70      	ldr	r3, [pc, #448]	@ (8009c04 <HAL_RCC_ClockConfig+0x244>)
 8009a44:	69db      	ldr	r3, [r3, #28]
 8009a46:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009a4a:	429a      	cmp	r2, r3
 8009a4c:	d908      	bls.n	8009a60 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009a4e:	4b6d      	ldr	r3, [pc, #436]	@ (8009c04 <HAL_RCC_ClockConfig+0x244>)
 8009a50:	69db      	ldr	r3, [r3, #28]
 8009a52:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	695b      	ldr	r3, [r3, #20]
 8009a5a:	496a      	ldr	r1, [pc, #424]	@ (8009c04 <HAL_RCC_ClockConfig+0x244>)
 8009a5c:	4313      	orrs	r3, r2
 8009a5e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	f003 0310 	and.w	r3, r3, #16
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d010      	beq.n	8009a8e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	699a      	ldr	r2, [r3, #24]
 8009a70:	4b64      	ldr	r3, [pc, #400]	@ (8009c04 <HAL_RCC_ClockConfig+0x244>)
 8009a72:	69db      	ldr	r3, [r3, #28]
 8009a74:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009a78:	429a      	cmp	r2, r3
 8009a7a:	d908      	bls.n	8009a8e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009a7c:	4b61      	ldr	r3, [pc, #388]	@ (8009c04 <HAL_RCC_ClockConfig+0x244>)
 8009a7e:	69db      	ldr	r3, [r3, #28]
 8009a80:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	699b      	ldr	r3, [r3, #24]
 8009a88:	495e      	ldr	r1, [pc, #376]	@ (8009c04 <HAL_RCC_ClockConfig+0x244>)
 8009a8a:	4313      	orrs	r3, r2
 8009a8c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	f003 0320 	and.w	r3, r3, #32
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d010      	beq.n	8009abc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	69da      	ldr	r2, [r3, #28]
 8009a9e:	4b59      	ldr	r3, [pc, #356]	@ (8009c04 <HAL_RCC_ClockConfig+0x244>)
 8009aa0:	6a1b      	ldr	r3, [r3, #32]
 8009aa2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009aa6:	429a      	cmp	r2, r3
 8009aa8:	d908      	bls.n	8009abc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8009aaa:	4b56      	ldr	r3, [pc, #344]	@ (8009c04 <HAL_RCC_ClockConfig+0x244>)
 8009aac:	6a1b      	ldr	r3, [r3, #32]
 8009aae:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	69db      	ldr	r3, [r3, #28]
 8009ab6:	4953      	ldr	r1, [pc, #332]	@ (8009c04 <HAL_RCC_ClockConfig+0x244>)
 8009ab8:	4313      	orrs	r3, r2
 8009aba:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	f003 0302 	and.w	r3, r3, #2
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d010      	beq.n	8009aea <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	68da      	ldr	r2, [r3, #12]
 8009acc:	4b4d      	ldr	r3, [pc, #308]	@ (8009c04 <HAL_RCC_ClockConfig+0x244>)
 8009ace:	699b      	ldr	r3, [r3, #24]
 8009ad0:	f003 030f 	and.w	r3, r3, #15
 8009ad4:	429a      	cmp	r2, r3
 8009ad6:	d908      	bls.n	8009aea <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009ad8:	4b4a      	ldr	r3, [pc, #296]	@ (8009c04 <HAL_RCC_ClockConfig+0x244>)
 8009ada:	699b      	ldr	r3, [r3, #24]
 8009adc:	f023 020f 	bic.w	r2, r3, #15
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	68db      	ldr	r3, [r3, #12]
 8009ae4:	4947      	ldr	r1, [pc, #284]	@ (8009c04 <HAL_RCC_ClockConfig+0x244>)
 8009ae6:	4313      	orrs	r3, r2
 8009ae8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	f003 0301 	and.w	r3, r3, #1
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d055      	beq.n	8009ba2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8009af6:	4b43      	ldr	r3, [pc, #268]	@ (8009c04 <HAL_RCC_ClockConfig+0x244>)
 8009af8:	699b      	ldr	r3, [r3, #24]
 8009afa:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	689b      	ldr	r3, [r3, #8]
 8009b02:	4940      	ldr	r1, [pc, #256]	@ (8009c04 <HAL_RCC_ClockConfig+0x244>)
 8009b04:	4313      	orrs	r3, r2
 8009b06:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	685b      	ldr	r3, [r3, #4]
 8009b0c:	2b02      	cmp	r3, #2
 8009b0e:	d107      	bne.n	8009b20 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009b10:	4b3c      	ldr	r3, [pc, #240]	@ (8009c04 <HAL_RCC_ClockConfig+0x244>)
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d121      	bne.n	8009b60 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009b1c:	2301      	movs	r3, #1
 8009b1e:	e0f6      	b.n	8009d0e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	685b      	ldr	r3, [r3, #4]
 8009b24:	2b03      	cmp	r3, #3
 8009b26:	d107      	bne.n	8009b38 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009b28:	4b36      	ldr	r3, [pc, #216]	@ (8009c04 <HAL_RCC_ClockConfig+0x244>)
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d115      	bne.n	8009b60 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009b34:	2301      	movs	r3, #1
 8009b36:	e0ea      	b.n	8009d0e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	685b      	ldr	r3, [r3, #4]
 8009b3c:	2b01      	cmp	r3, #1
 8009b3e:	d107      	bne.n	8009b50 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009b40:	4b30      	ldr	r3, [pc, #192]	@ (8009c04 <HAL_RCC_ClockConfig+0x244>)
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d109      	bne.n	8009b60 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009b4c:	2301      	movs	r3, #1
 8009b4e:	e0de      	b.n	8009d0e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009b50:	4b2c      	ldr	r3, [pc, #176]	@ (8009c04 <HAL_RCC_ClockConfig+0x244>)
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	f003 0304 	and.w	r3, r3, #4
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d101      	bne.n	8009b60 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009b5c:	2301      	movs	r3, #1
 8009b5e:	e0d6      	b.n	8009d0e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009b60:	4b28      	ldr	r3, [pc, #160]	@ (8009c04 <HAL_RCC_ClockConfig+0x244>)
 8009b62:	691b      	ldr	r3, [r3, #16]
 8009b64:	f023 0207 	bic.w	r2, r3, #7
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	685b      	ldr	r3, [r3, #4]
 8009b6c:	4925      	ldr	r1, [pc, #148]	@ (8009c04 <HAL_RCC_ClockConfig+0x244>)
 8009b6e:	4313      	orrs	r3, r2
 8009b70:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009b72:	f7fa fa07 	bl	8003f84 <HAL_GetTick>
 8009b76:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009b78:	e00a      	b.n	8009b90 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009b7a:	f7fa fa03 	bl	8003f84 <HAL_GetTick>
 8009b7e:	4602      	mov	r2, r0
 8009b80:	697b      	ldr	r3, [r7, #20]
 8009b82:	1ad3      	subs	r3, r2, r3
 8009b84:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009b88:	4293      	cmp	r3, r2
 8009b8a:	d901      	bls.n	8009b90 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8009b8c:	2303      	movs	r3, #3
 8009b8e:	e0be      	b.n	8009d0e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009b90:	4b1c      	ldr	r3, [pc, #112]	@ (8009c04 <HAL_RCC_ClockConfig+0x244>)
 8009b92:	691b      	ldr	r3, [r3, #16]
 8009b94:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	685b      	ldr	r3, [r3, #4]
 8009b9c:	00db      	lsls	r3, r3, #3
 8009b9e:	429a      	cmp	r2, r3
 8009ba0:	d1eb      	bne.n	8009b7a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	f003 0302 	and.w	r3, r3, #2
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d010      	beq.n	8009bd0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	68da      	ldr	r2, [r3, #12]
 8009bb2:	4b14      	ldr	r3, [pc, #80]	@ (8009c04 <HAL_RCC_ClockConfig+0x244>)
 8009bb4:	699b      	ldr	r3, [r3, #24]
 8009bb6:	f003 030f 	and.w	r3, r3, #15
 8009bba:	429a      	cmp	r2, r3
 8009bbc:	d208      	bcs.n	8009bd0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009bbe:	4b11      	ldr	r3, [pc, #68]	@ (8009c04 <HAL_RCC_ClockConfig+0x244>)
 8009bc0:	699b      	ldr	r3, [r3, #24]
 8009bc2:	f023 020f 	bic.w	r2, r3, #15
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	68db      	ldr	r3, [r3, #12]
 8009bca:	490e      	ldr	r1, [pc, #56]	@ (8009c04 <HAL_RCC_ClockConfig+0x244>)
 8009bcc:	4313      	orrs	r3, r2
 8009bce:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009bd0:	4b0b      	ldr	r3, [pc, #44]	@ (8009c00 <HAL_RCC_ClockConfig+0x240>)
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	f003 030f 	and.w	r3, r3, #15
 8009bd8:	683a      	ldr	r2, [r7, #0]
 8009bda:	429a      	cmp	r2, r3
 8009bdc:	d214      	bcs.n	8009c08 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009bde:	4b08      	ldr	r3, [pc, #32]	@ (8009c00 <HAL_RCC_ClockConfig+0x240>)
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	f023 020f 	bic.w	r2, r3, #15
 8009be6:	4906      	ldr	r1, [pc, #24]	@ (8009c00 <HAL_RCC_ClockConfig+0x240>)
 8009be8:	683b      	ldr	r3, [r7, #0]
 8009bea:	4313      	orrs	r3, r2
 8009bec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009bee:	4b04      	ldr	r3, [pc, #16]	@ (8009c00 <HAL_RCC_ClockConfig+0x240>)
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	f003 030f 	and.w	r3, r3, #15
 8009bf6:	683a      	ldr	r2, [r7, #0]
 8009bf8:	429a      	cmp	r2, r3
 8009bfa:	d005      	beq.n	8009c08 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8009bfc:	2301      	movs	r3, #1
 8009bfe:	e086      	b.n	8009d0e <HAL_RCC_ClockConfig+0x34e>
 8009c00:	52002000 	.word	0x52002000
 8009c04:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	f003 0304 	and.w	r3, r3, #4
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d010      	beq.n	8009c36 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	691a      	ldr	r2, [r3, #16]
 8009c18:	4b3f      	ldr	r3, [pc, #252]	@ (8009d18 <HAL_RCC_ClockConfig+0x358>)
 8009c1a:	699b      	ldr	r3, [r3, #24]
 8009c1c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009c20:	429a      	cmp	r2, r3
 8009c22:	d208      	bcs.n	8009c36 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009c24:	4b3c      	ldr	r3, [pc, #240]	@ (8009d18 <HAL_RCC_ClockConfig+0x358>)
 8009c26:	699b      	ldr	r3, [r3, #24]
 8009c28:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	691b      	ldr	r3, [r3, #16]
 8009c30:	4939      	ldr	r1, [pc, #228]	@ (8009d18 <HAL_RCC_ClockConfig+0x358>)
 8009c32:	4313      	orrs	r3, r2
 8009c34:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	f003 0308 	and.w	r3, r3, #8
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d010      	beq.n	8009c64 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	695a      	ldr	r2, [r3, #20]
 8009c46:	4b34      	ldr	r3, [pc, #208]	@ (8009d18 <HAL_RCC_ClockConfig+0x358>)
 8009c48:	69db      	ldr	r3, [r3, #28]
 8009c4a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009c4e:	429a      	cmp	r2, r3
 8009c50:	d208      	bcs.n	8009c64 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009c52:	4b31      	ldr	r3, [pc, #196]	@ (8009d18 <HAL_RCC_ClockConfig+0x358>)
 8009c54:	69db      	ldr	r3, [r3, #28]
 8009c56:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	695b      	ldr	r3, [r3, #20]
 8009c5e:	492e      	ldr	r1, [pc, #184]	@ (8009d18 <HAL_RCC_ClockConfig+0x358>)
 8009c60:	4313      	orrs	r3, r2
 8009c62:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	f003 0310 	and.w	r3, r3, #16
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d010      	beq.n	8009c92 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	699a      	ldr	r2, [r3, #24]
 8009c74:	4b28      	ldr	r3, [pc, #160]	@ (8009d18 <HAL_RCC_ClockConfig+0x358>)
 8009c76:	69db      	ldr	r3, [r3, #28]
 8009c78:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009c7c:	429a      	cmp	r2, r3
 8009c7e:	d208      	bcs.n	8009c92 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009c80:	4b25      	ldr	r3, [pc, #148]	@ (8009d18 <HAL_RCC_ClockConfig+0x358>)
 8009c82:	69db      	ldr	r3, [r3, #28]
 8009c84:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	699b      	ldr	r3, [r3, #24]
 8009c8c:	4922      	ldr	r1, [pc, #136]	@ (8009d18 <HAL_RCC_ClockConfig+0x358>)
 8009c8e:	4313      	orrs	r3, r2
 8009c90:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	f003 0320 	and.w	r3, r3, #32
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d010      	beq.n	8009cc0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	69da      	ldr	r2, [r3, #28]
 8009ca2:	4b1d      	ldr	r3, [pc, #116]	@ (8009d18 <HAL_RCC_ClockConfig+0x358>)
 8009ca4:	6a1b      	ldr	r3, [r3, #32]
 8009ca6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009caa:	429a      	cmp	r2, r3
 8009cac:	d208      	bcs.n	8009cc0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8009cae:	4b1a      	ldr	r3, [pc, #104]	@ (8009d18 <HAL_RCC_ClockConfig+0x358>)
 8009cb0:	6a1b      	ldr	r3, [r3, #32]
 8009cb2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	69db      	ldr	r3, [r3, #28]
 8009cba:	4917      	ldr	r1, [pc, #92]	@ (8009d18 <HAL_RCC_ClockConfig+0x358>)
 8009cbc:	4313      	orrs	r3, r2
 8009cbe:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8009cc0:	f000 f834 	bl	8009d2c <HAL_RCC_GetSysClockFreq>
 8009cc4:	4602      	mov	r2, r0
 8009cc6:	4b14      	ldr	r3, [pc, #80]	@ (8009d18 <HAL_RCC_ClockConfig+0x358>)
 8009cc8:	699b      	ldr	r3, [r3, #24]
 8009cca:	0a1b      	lsrs	r3, r3, #8
 8009ccc:	f003 030f 	and.w	r3, r3, #15
 8009cd0:	4912      	ldr	r1, [pc, #72]	@ (8009d1c <HAL_RCC_ClockConfig+0x35c>)
 8009cd2:	5ccb      	ldrb	r3, [r1, r3]
 8009cd4:	f003 031f 	and.w	r3, r3, #31
 8009cd8:	fa22 f303 	lsr.w	r3, r2, r3
 8009cdc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009cde:	4b0e      	ldr	r3, [pc, #56]	@ (8009d18 <HAL_RCC_ClockConfig+0x358>)
 8009ce0:	699b      	ldr	r3, [r3, #24]
 8009ce2:	f003 030f 	and.w	r3, r3, #15
 8009ce6:	4a0d      	ldr	r2, [pc, #52]	@ (8009d1c <HAL_RCC_ClockConfig+0x35c>)
 8009ce8:	5cd3      	ldrb	r3, [r2, r3]
 8009cea:	f003 031f 	and.w	r3, r3, #31
 8009cee:	693a      	ldr	r2, [r7, #16]
 8009cf0:	fa22 f303 	lsr.w	r3, r2, r3
 8009cf4:	4a0a      	ldr	r2, [pc, #40]	@ (8009d20 <HAL_RCC_ClockConfig+0x360>)
 8009cf6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009cf8:	4a0a      	ldr	r2, [pc, #40]	@ (8009d24 <HAL_RCC_ClockConfig+0x364>)
 8009cfa:	693b      	ldr	r3, [r7, #16]
 8009cfc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8009cfe:	4b0a      	ldr	r3, [pc, #40]	@ (8009d28 <HAL_RCC_ClockConfig+0x368>)
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	4618      	mov	r0, r3
 8009d04:	f7fa f8f4 	bl	8003ef0 <HAL_InitTick>
 8009d08:	4603      	mov	r3, r0
 8009d0a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8009d0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d0e:	4618      	mov	r0, r3
 8009d10:	3718      	adds	r7, #24
 8009d12:	46bd      	mov	sp, r7
 8009d14:	bd80      	pop	{r7, pc}
 8009d16:	bf00      	nop
 8009d18:	58024400 	.word	0x58024400
 8009d1c:	08018480 	.word	0x08018480
 8009d20:	24000004 	.word	0x24000004
 8009d24:	24000000 	.word	0x24000000
 8009d28:	24000008 	.word	0x24000008

08009d2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009d2c:	b480      	push	{r7}
 8009d2e:	b089      	sub	sp, #36	@ 0x24
 8009d30:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009d32:	4bb3      	ldr	r3, [pc, #716]	@ (800a000 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009d34:	691b      	ldr	r3, [r3, #16]
 8009d36:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009d3a:	2b18      	cmp	r3, #24
 8009d3c:	f200 8155 	bhi.w	8009fea <HAL_RCC_GetSysClockFreq+0x2be>
 8009d40:	a201      	add	r2, pc, #4	@ (adr r2, 8009d48 <HAL_RCC_GetSysClockFreq+0x1c>)
 8009d42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d46:	bf00      	nop
 8009d48:	08009dad 	.word	0x08009dad
 8009d4c:	08009feb 	.word	0x08009feb
 8009d50:	08009feb 	.word	0x08009feb
 8009d54:	08009feb 	.word	0x08009feb
 8009d58:	08009feb 	.word	0x08009feb
 8009d5c:	08009feb 	.word	0x08009feb
 8009d60:	08009feb 	.word	0x08009feb
 8009d64:	08009feb 	.word	0x08009feb
 8009d68:	08009dd3 	.word	0x08009dd3
 8009d6c:	08009feb 	.word	0x08009feb
 8009d70:	08009feb 	.word	0x08009feb
 8009d74:	08009feb 	.word	0x08009feb
 8009d78:	08009feb 	.word	0x08009feb
 8009d7c:	08009feb 	.word	0x08009feb
 8009d80:	08009feb 	.word	0x08009feb
 8009d84:	08009feb 	.word	0x08009feb
 8009d88:	08009dd9 	.word	0x08009dd9
 8009d8c:	08009feb 	.word	0x08009feb
 8009d90:	08009feb 	.word	0x08009feb
 8009d94:	08009feb 	.word	0x08009feb
 8009d98:	08009feb 	.word	0x08009feb
 8009d9c:	08009feb 	.word	0x08009feb
 8009da0:	08009feb 	.word	0x08009feb
 8009da4:	08009feb 	.word	0x08009feb
 8009da8:	08009ddf 	.word	0x08009ddf
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009dac:	4b94      	ldr	r3, [pc, #592]	@ (800a000 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	f003 0320 	and.w	r3, r3, #32
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d009      	beq.n	8009dcc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009db8:	4b91      	ldr	r3, [pc, #580]	@ (800a000 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	08db      	lsrs	r3, r3, #3
 8009dbe:	f003 0303 	and.w	r3, r3, #3
 8009dc2:	4a90      	ldr	r2, [pc, #576]	@ (800a004 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009dc4:	fa22 f303 	lsr.w	r3, r2, r3
 8009dc8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8009dca:	e111      	b.n	8009ff0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8009dcc:	4b8d      	ldr	r3, [pc, #564]	@ (800a004 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009dce:	61bb      	str	r3, [r7, #24]
      break;
 8009dd0:	e10e      	b.n	8009ff0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8009dd2:	4b8d      	ldr	r3, [pc, #564]	@ (800a008 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009dd4:	61bb      	str	r3, [r7, #24]
      break;
 8009dd6:	e10b      	b.n	8009ff0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8009dd8:	4b8c      	ldr	r3, [pc, #560]	@ (800a00c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8009dda:	61bb      	str	r3, [r7, #24]
      break;
 8009ddc:	e108      	b.n	8009ff0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009dde:	4b88      	ldr	r3, [pc, #544]	@ (800a000 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009de0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009de2:	f003 0303 	and.w	r3, r3, #3
 8009de6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8009de8:	4b85      	ldr	r3, [pc, #532]	@ (800a000 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009dea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009dec:	091b      	lsrs	r3, r3, #4
 8009dee:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009df2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8009df4:	4b82      	ldr	r3, [pc, #520]	@ (800a000 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009df6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009df8:	f003 0301 	and.w	r3, r3, #1
 8009dfc:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8009dfe:	4b80      	ldr	r3, [pc, #512]	@ (800a000 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009e00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009e02:	08db      	lsrs	r3, r3, #3
 8009e04:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009e08:	68fa      	ldr	r2, [r7, #12]
 8009e0a:	fb02 f303 	mul.w	r3, r2, r3
 8009e0e:	ee07 3a90 	vmov	s15, r3
 8009e12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e16:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8009e1a:	693b      	ldr	r3, [r7, #16]
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	f000 80e1 	beq.w	8009fe4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8009e22:	697b      	ldr	r3, [r7, #20]
 8009e24:	2b02      	cmp	r3, #2
 8009e26:	f000 8083 	beq.w	8009f30 <HAL_RCC_GetSysClockFreq+0x204>
 8009e2a:	697b      	ldr	r3, [r7, #20]
 8009e2c:	2b02      	cmp	r3, #2
 8009e2e:	f200 80a1 	bhi.w	8009f74 <HAL_RCC_GetSysClockFreq+0x248>
 8009e32:	697b      	ldr	r3, [r7, #20]
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d003      	beq.n	8009e40 <HAL_RCC_GetSysClockFreq+0x114>
 8009e38:	697b      	ldr	r3, [r7, #20]
 8009e3a:	2b01      	cmp	r3, #1
 8009e3c:	d056      	beq.n	8009eec <HAL_RCC_GetSysClockFreq+0x1c0>
 8009e3e:	e099      	b.n	8009f74 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009e40:	4b6f      	ldr	r3, [pc, #444]	@ (800a000 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	f003 0320 	and.w	r3, r3, #32
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d02d      	beq.n	8009ea8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009e4c:	4b6c      	ldr	r3, [pc, #432]	@ (800a000 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	08db      	lsrs	r3, r3, #3
 8009e52:	f003 0303 	and.w	r3, r3, #3
 8009e56:	4a6b      	ldr	r2, [pc, #428]	@ (800a004 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009e58:	fa22 f303 	lsr.w	r3, r2, r3
 8009e5c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	ee07 3a90 	vmov	s15, r3
 8009e64:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e68:	693b      	ldr	r3, [r7, #16]
 8009e6a:	ee07 3a90 	vmov	s15, r3
 8009e6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e76:	4b62      	ldr	r3, [pc, #392]	@ (800a000 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009e78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009e7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e7e:	ee07 3a90 	vmov	s15, r3
 8009e82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e86:	ed97 6a02 	vldr	s12, [r7, #8]
 8009e8a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800a010 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009e8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009e92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009e96:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009e9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ea2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8009ea6:	e087      	b.n	8009fb8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009ea8:	693b      	ldr	r3, [r7, #16]
 8009eaa:	ee07 3a90 	vmov	s15, r3
 8009eae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009eb2:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800a014 <HAL_RCC_GetSysClockFreq+0x2e8>
 8009eb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009eba:	4b51      	ldr	r3, [pc, #324]	@ (800a000 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009ebc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009ebe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ec2:	ee07 3a90 	vmov	s15, r3
 8009ec6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009eca:	ed97 6a02 	vldr	s12, [r7, #8]
 8009ece:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800a010 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009ed2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009ed6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009eda:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009ede:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009ee2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ee6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009eea:	e065      	b.n	8009fb8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009eec:	693b      	ldr	r3, [r7, #16]
 8009eee:	ee07 3a90 	vmov	s15, r3
 8009ef2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ef6:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800a018 <HAL_RCC_GetSysClockFreq+0x2ec>
 8009efa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009efe:	4b40      	ldr	r3, [pc, #256]	@ (800a000 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009f00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f06:	ee07 3a90 	vmov	s15, r3
 8009f0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009f0e:	ed97 6a02 	vldr	s12, [r7, #8]
 8009f12:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800a010 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009f16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009f1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009f1e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009f22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009f26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f2a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009f2e:	e043      	b.n	8009fb8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009f30:	693b      	ldr	r3, [r7, #16]
 8009f32:	ee07 3a90 	vmov	s15, r3
 8009f36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f3a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800a01c <HAL_RCC_GetSysClockFreq+0x2f0>
 8009f3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009f42:	4b2f      	ldr	r3, [pc, #188]	@ (800a000 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009f44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f4a:	ee07 3a90 	vmov	s15, r3
 8009f4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009f52:	ed97 6a02 	vldr	s12, [r7, #8]
 8009f56:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800a010 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009f5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009f5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009f62:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009f66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009f6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f6e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009f72:	e021      	b.n	8009fb8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009f74:	693b      	ldr	r3, [r7, #16]
 8009f76:	ee07 3a90 	vmov	s15, r3
 8009f7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f7e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800a018 <HAL_RCC_GetSysClockFreq+0x2ec>
 8009f82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009f86:	4b1e      	ldr	r3, [pc, #120]	@ (800a000 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009f88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f8e:	ee07 3a90 	vmov	s15, r3
 8009f92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009f96:	ed97 6a02 	vldr	s12, [r7, #8]
 8009f9a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800a010 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009f9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009fa2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009fa6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009faa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009fae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009fb2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009fb6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8009fb8:	4b11      	ldr	r3, [pc, #68]	@ (800a000 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009fba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009fbc:	0a5b      	lsrs	r3, r3, #9
 8009fbe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009fc2:	3301      	adds	r3, #1
 8009fc4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8009fc6:	683b      	ldr	r3, [r7, #0]
 8009fc8:	ee07 3a90 	vmov	s15, r3
 8009fcc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009fd0:	edd7 6a07 	vldr	s13, [r7, #28]
 8009fd4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009fd8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009fdc:	ee17 3a90 	vmov	r3, s15
 8009fe0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8009fe2:	e005      	b.n	8009ff0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8009fe4:	2300      	movs	r3, #0
 8009fe6:	61bb      	str	r3, [r7, #24]
      break;
 8009fe8:	e002      	b.n	8009ff0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8009fea:	4b07      	ldr	r3, [pc, #28]	@ (800a008 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009fec:	61bb      	str	r3, [r7, #24]
      break;
 8009fee:	bf00      	nop
  }

  return sysclockfreq;
 8009ff0:	69bb      	ldr	r3, [r7, #24]
}
 8009ff2:	4618      	mov	r0, r3
 8009ff4:	3724      	adds	r7, #36	@ 0x24
 8009ff6:	46bd      	mov	sp, r7
 8009ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ffc:	4770      	bx	lr
 8009ffe:	bf00      	nop
 800a000:	58024400 	.word	0x58024400
 800a004:	03d09000 	.word	0x03d09000
 800a008:	003d0900 	.word	0x003d0900
 800a00c:	016e3600 	.word	0x016e3600
 800a010:	46000000 	.word	0x46000000
 800a014:	4c742400 	.word	0x4c742400
 800a018:	4a742400 	.word	0x4a742400
 800a01c:	4bb71b00 	.word	0x4bb71b00

0800a020 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a020:	b580      	push	{r7, lr}
 800a022:	b082      	sub	sp, #8
 800a024:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800a026:	f7ff fe81 	bl	8009d2c <HAL_RCC_GetSysClockFreq>
 800a02a:	4602      	mov	r2, r0
 800a02c:	4b10      	ldr	r3, [pc, #64]	@ (800a070 <HAL_RCC_GetHCLKFreq+0x50>)
 800a02e:	699b      	ldr	r3, [r3, #24]
 800a030:	0a1b      	lsrs	r3, r3, #8
 800a032:	f003 030f 	and.w	r3, r3, #15
 800a036:	490f      	ldr	r1, [pc, #60]	@ (800a074 <HAL_RCC_GetHCLKFreq+0x54>)
 800a038:	5ccb      	ldrb	r3, [r1, r3]
 800a03a:	f003 031f 	and.w	r3, r3, #31
 800a03e:	fa22 f303 	lsr.w	r3, r2, r3
 800a042:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a044:	4b0a      	ldr	r3, [pc, #40]	@ (800a070 <HAL_RCC_GetHCLKFreq+0x50>)
 800a046:	699b      	ldr	r3, [r3, #24]
 800a048:	f003 030f 	and.w	r3, r3, #15
 800a04c:	4a09      	ldr	r2, [pc, #36]	@ (800a074 <HAL_RCC_GetHCLKFreq+0x54>)
 800a04e:	5cd3      	ldrb	r3, [r2, r3]
 800a050:	f003 031f 	and.w	r3, r3, #31
 800a054:	687a      	ldr	r2, [r7, #4]
 800a056:	fa22 f303 	lsr.w	r3, r2, r3
 800a05a:	4a07      	ldr	r2, [pc, #28]	@ (800a078 <HAL_RCC_GetHCLKFreq+0x58>)
 800a05c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a05e:	4a07      	ldr	r2, [pc, #28]	@ (800a07c <HAL_RCC_GetHCLKFreq+0x5c>)
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800a064:	4b04      	ldr	r3, [pc, #16]	@ (800a078 <HAL_RCC_GetHCLKFreq+0x58>)
 800a066:	681b      	ldr	r3, [r3, #0]
}
 800a068:	4618      	mov	r0, r3
 800a06a:	3708      	adds	r7, #8
 800a06c:	46bd      	mov	sp, r7
 800a06e:	bd80      	pop	{r7, pc}
 800a070:	58024400 	.word	0x58024400
 800a074:	08018480 	.word	0x08018480
 800a078:	24000004 	.word	0x24000004
 800a07c:	24000000 	.word	0x24000000

0800a080 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a080:	b580      	push	{r7, lr}
 800a082:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800a084:	f7ff ffcc 	bl	800a020 <HAL_RCC_GetHCLKFreq>
 800a088:	4602      	mov	r2, r0
 800a08a:	4b06      	ldr	r3, [pc, #24]	@ (800a0a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a08c:	69db      	ldr	r3, [r3, #28]
 800a08e:	091b      	lsrs	r3, r3, #4
 800a090:	f003 0307 	and.w	r3, r3, #7
 800a094:	4904      	ldr	r1, [pc, #16]	@ (800a0a8 <HAL_RCC_GetPCLK1Freq+0x28>)
 800a096:	5ccb      	ldrb	r3, [r1, r3]
 800a098:	f003 031f 	and.w	r3, r3, #31
 800a09c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800a0a0:	4618      	mov	r0, r3
 800a0a2:	bd80      	pop	{r7, pc}
 800a0a4:	58024400 	.word	0x58024400
 800a0a8:	08018480 	.word	0x08018480

0800a0ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a0ac:	b580      	push	{r7, lr}
 800a0ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800a0b0:	f7ff ffb6 	bl	800a020 <HAL_RCC_GetHCLKFreq>
 800a0b4:	4602      	mov	r2, r0
 800a0b6:	4b06      	ldr	r3, [pc, #24]	@ (800a0d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a0b8:	69db      	ldr	r3, [r3, #28]
 800a0ba:	0a1b      	lsrs	r3, r3, #8
 800a0bc:	f003 0307 	and.w	r3, r3, #7
 800a0c0:	4904      	ldr	r1, [pc, #16]	@ (800a0d4 <HAL_RCC_GetPCLK2Freq+0x28>)
 800a0c2:	5ccb      	ldrb	r3, [r1, r3]
 800a0c4:	f003 031f 	and.w	r3, r3, #31
 800a0c8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800a0cc:	4618      	mov	r0, r3
 800a0ce:	bd80      	pop	{r7, pc}
 800a0d0:	58024400 	.word	0x58024400
 800a0d4:	08018480 	.word	0x08018480

0800a0d8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a0d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a0dc:	b0c6      	sub	sp, #280	@ 0x118
 800a0de:	af00      	add	r7, sp, #0
 800a0e0:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800a0e4:	2300      	movs	r3, #0
 800a0e6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a0ea:	2300      	movs	r3, #0
 800a0ec:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800a0f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a0f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0f8:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800a0fc:	2500      	movs	r5, #0
 800a0fe:	ea54 0305 	orrs.w	r3, r4, r5
 800a102:	d049      	beq.n	800a198 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800a104:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a108:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a10a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a10e:	d02f      	beq.n	800a170 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800a110:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a114:	d828      	bhi.n	800a168 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800a116:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a11a:	d01a      	beq.n	800a152 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800a11c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a120:	d822      	bhi.n	800a168 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800a122:	2b00      	cmp	r3, #0
 800a124:	d003      	beq.n	800a12e <HAL_RCCEx_PeriphCLKConfig+0x56>
 800a126:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a12a:	d007      	beq.n	800a13c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800a12c:	e01c      	b.n	800a168 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a12e:	4bab      	ldr	r3, [pc, #684]	@ (800a3dc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a130:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a132:	4aaa      	ldr	r2, [pc, #680]	@ (800a3dc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a134:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a138:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a13a:	e01a      	b.n	800a172 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a13c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a140:	3308      	adds	r3, #8
 800a142:	2102      	movs	r1, #2
 800a144:	4618      	mov	r0, r3
 800a146:	f002 fa49 	bl	800c5dc <RCCEx_PLL2_Config>
 800a14a:	4603      	mov	r3, r0
 800a14c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a150:	e00f      	b.n	800a172 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a152:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a156:	3328      	adds	r3, #40	@ 0x28
 800a158:	2102      	movs	r1, #2
 800a15a:	4618      	mov	r0, r3
 800a15c:	f002 faf0 	bl	800c740 <RCCEx_PLL3_Config>
 800a160:	4603      	mov	r3, r0
 800a162:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a166:	e004      	b.n	800a172 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a168:	2301      	movs	r3, #1
 800a16a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a16e:	e000      	b.n	800a172 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800a170:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a172:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a176:	2b00      	cmp	r3, #0
 800a178:	d10a      	bne.n	800a190 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800a17a:	4b98      	ldr	r3, [pc, #608]	@ (800a3dc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a17c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a17e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800a182:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a186:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a188:	4a94      	ldr	r2, [pc, #592]	@ (800a3dc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a18a:	430b      	orrs	r3, r1
 800a18c:	6513      	str	r3, [r2, #80]	@ 0x50
 800a18e:	e003      	b.n	800a198 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a190:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a194:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800a198:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a19c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1a0:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800a1a4:	f04f 0900 	mov.w	r9, #0
 800a1a8:	ea58 0309 	orrs.w	r3, r8, r9
 800a1ac:	d047      	beq.n	800a23e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800a1ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a1b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a1b4:	2b04      	cmp	r3, #4
 800a1b6:	d82a      	bhi.n	800a20e <HAL_RCCEx_PeriphCLKConfig+0x136>
 800a1b8:	a201      	add	r2, pc, #4	@ (adr r2, 800a1c0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800a1ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1be:	bf00      	nop
 800a1c0:	0800a1d5 	.word	0x0800a1d5
 800a1c4:	0800a1e3 	.word	0x0800a1e3
 800a1c8:	0800a1f9 	.word	0x0800a1f9
 800a1cc:	0800a217 	.word	0x0800a217
 800a1d0:	0800a217 	.word	0x0800a217
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a1d4:	4b81      	ldr	r3, [pc, #516]	@ (800a3dc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a1d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a1d8:	4a80      	ldr	r2, [pc, #512]	@ (800a3dc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a1da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a1de:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a1e0:	e01a      	b.n	800a218 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a1e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a1e6:	3308      	adds	r3, #8
 800a1e8:	2100      	movs	r1, #0
 800a1ea:	4618      	mov	r0, r3
 800a1ec:	f002 f9f6 	bl	800c5dc <RCCEx_PLL2_Config>
 800a1f0:	4603      	mov	r3, r0
 800a1f2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a1f6:	e00f      	b.n	800a218 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a1f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a1fc:	3328      	adds	r3, #40	@ 0x28
 800a1fe:	2100      	movs	r1, #0
 800a200:	4618      	mov	r0, r3
 800a202:	f002 fa9d 	bl	800c740 <RCCEx_PLL3_Config>
 800a206:	4603      	mov	r3, r0
 800a208:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a20c:	e004      	b.n	800a218 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a20e:	2301      	movs	r3, #1
 800a210:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a214:	e000      	b.n	800a218 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800a216:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a218:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d10a      	bne.n	800a236 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a220:	4b6e      	ldr	r3, [pc, #440]	@ (800a3dc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a222:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a224:	f023 0107 	bic.w	r1, r3, #7
 800a228:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a22c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a22e:	4a6b      	ldr	r2, [pc, #428]	@ (800a3dc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a230:	430b      	orrs	r3, r1
 800a232:	6513      	str	r3, [r2, #80]	@ 0x50
 800a234:	e003      	b.n	800a23e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a236:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a23a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800a23e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a242:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a246:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 800a24a:	f04f 0b00 	mov.w	fp, #0
 800a24e:	ea5a 030b 	orrs.w	r3, sl, fp
 800a252:	d05b      	beq.n	800a30c <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800a254:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a258:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a25c:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800a260:	d03b      	beq.n	800a2da <HAL_RCCEx_PeriphCLKConfig+0x202>
 800a262:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800a266:	d834      	bhi.n	800a2d2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800a268:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a26c:	d037      	beq.n	800a2de <HAL_RCCEx_PeriphCLKConfig+0x206>
 800a26e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a272:	d82e      	bhi.n	800a2d2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800a274:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800a278:	d033      	beq.n	800a2e2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800a27a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800a27e:	d828      	bhi.n	800a2d2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800a280:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a284:	d01a      	beq.n	800a2bc <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800a286:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a28a:	d822      	bhi.n	800a2d2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d003      	beq.n	800a298 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 800a290:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a294:	d007      	beq.n	800a2a6 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800a296:	e01c      	b.n	800a2d2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a298:	4b50      	ldr	r3, [pc, #320]	@ (800a3dc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a29a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a29c:	4a4f      	ldr	r2, [pc, #316]	@ (800a3dc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a29e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a2a2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a2a4:	e01e      	b.n	800a2e4 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a2a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a2aa:	3308      	adds	r3, #8
 800a2ac:	2100      	movs	r1, #0
 800a2ae:	4618      	mov	r0, r3
 800a2b0:	f002 f994 	bl	800c5dc <RCCEx_PLL2_Config>
 800a2b4:	4603      	mov	r3, r0
 800a2b6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800a2ba:	e013      	b.n	800a2e4 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a2bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a2c0:	3328      	adds	r3, #40	@ 0x28
 800a2c2:	2100      	movs	r1, #0
 800a2c4:	4618      	mov	r0, r3
 800a2c6:	f002 fa3b 	bl	800c740 <RCCEx_PLL3_Config>
 800a2ca:	4603      	mov	r3, r0
 800a2cc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a2d0:	e008      	b.n	800a2e4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800a2d2:	2301      	movs	r3, #1
 800a2d4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a2d8:	e004      	b.n	800a2e4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800a2da:	bf00      	nop
 800a2dc:	e002      	b.n	800a2e4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800a2de:	bf00      	nop
 800a2e0:	e000      	b.n	800a2e4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800a2e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a2e4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d10b      	bne.n	800a304 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800a2ec:	4b3b      	ldr	r3, [pc, #236]	@ (800a3dc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a2ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a2f0:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800a2f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a2f8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a2fc:	4a37      	ldr	r2, [pc, #220]	@ (800a3dc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a2fe:	430b      	orrs	r3, r1
 800a300:	6593      	str	r3, [r2, #88]	@ 0x58
 800a302:	e003      	b.n	800a30c <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a304:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a308:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800a30c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a310:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a314:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800a318:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800a31c:	2300      	movs	r3, #0
 800a31e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800a322:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800a326:	460b      	mov	r3, r1
 800a328:	4313      	orrs	r3, r2
 800a32a:	d05d      	beq.n	800a3e8 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800a32c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a330:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800a334:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800a338:	d03b      	beq.n	800a3b2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800a33a:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800a33e:	d834      	bhi.n	800a3aa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800a340:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a344:	d037      	beq.n	800a3b6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800a346:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a34a:	d82e      	bhi.n	800a3aa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800a34c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a350:	d033      	beq.n	800a3ba <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800a352:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a356:	d828      	bhi.n	800a3aa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800a358:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a35c:	d01a      	beq.n	800a394 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800a35e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a362:	d822      	bhi.n	800a3aa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800a364:	2b00      	cmp	r3, #0
 800a366:	d003      	beq.n	800a370 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800a368:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a36c:	d007      	beq.n	800a37e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800a36e:	e01c      	b.n	800a3aa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a370:	4b1a      	ldr	r3, [pc, #104]	@ (800a3dc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a372:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a374:	4a19      	ldr	r2, [pc, #100]	@ (800a3dc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a376:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a37a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a37c:	e01e      	b.n	800a3bc <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a37e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a382:	3308      	adds	r3, #8
 800a384:	2100      	movs	r1, #0
 800a386:	4618      	mov	r0, r3
 800a388:	f002 f928 	bl	800c5dc <RCCEx_PLL2_Config>
 800a38c:	4603      	mov	r3, r0
 800a38e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800a392:	e013      	b.n	800a3bc <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a394:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a398:	3328      	adds	r3, #40	@ 0x28
 800a39a:	2100      	movs	r1, #0
 800a39c:	4618      	mov	r0, r3
 800a39e:	f002 f9cf 	bl	800c740 <RCCEx_PLL3_Config>
 800a3a2:	4603      	mov	r3, r0
 800a3a4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a3a8:	e008      	b.n	800a3bc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800a3aa:	2301      	movs	r3, #1
 800a3ac:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a3b0:	e004      	b.n	800a3bc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800a3b2:	bf00      	nop
 800a3b4:	e002      	b.n	800a3bc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800a3b6:	bf00      	nop
 800a3b8:	e000      	b.n	800a3bc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800a3ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a3bc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d10d      	bne.n	800a3e0 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800a3c4:	4b05      	ldr	r3, [pc, #20]	@ (800a3dc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a3c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a3c8:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800a3cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a3d0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800a3d4:	4a01      	ldr	r2, [pc, #4]	@ (800a3dc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a3d6:	430b      	orrs	r3, r1
 800a3d8:	6593      	str	r3, [r2, #88]	@ 0x58
 800a3da:	e005      	b.n	800a3e8 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800a3dc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a3e0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a3e4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800a3e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a3ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3f0:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800a3f4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800a3f8:	2300      	movs	r3, #0
 800a3fa:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800a3fe:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800a402:	460b      	mov	r3, r1
 800a404:	4313      	orrs	r3, r2
 800a406:	d03a      	beq.n	800a47e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800a408:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a40c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a40e:	2b30      	cmp	r3, #48	@ 0x30
 800a410:	d01f      	beq.n	800a452 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800a412:	2b30      	cmp	r3, #48	@ 0x30
 800a414:	d819      	bhi.n	800a44a <HAL_RCCEx_PeriphCLKConfig+0x372>
 800a416:	2b20      	cmp	r3, #32
 800a418:	d00c      	beq.n	800a434 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800a41a:	2b20      	cmp	r3, #32
 800a41c:	d815      	bhi.n	800a44a <HAL_RCCEx_PeriphCLKConfig+0x372>
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d019      	beq.n	800a456 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800a422:	2b10      	cmp	r3, #16
 800a424:	d111      	bne.n	800a44a <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a426:	4baa      	ldr	r3, [pc, #680]	@ (800a6d0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a428:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a42a:	4aa9      	ldr	r2, [pc, #676]	@ (800a6d0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a42c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a430:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800a432:	e011      	b.n	800a458 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a434:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a438:	3308      	adds	r3, #8
 800a43a:	2102      	movs	r1, #2
 800a43c:	4618      	mov	r0, r3
 800a43e:	f002 f8cd 	bl	800c5dc <RCCEx_PLL2_Config>
 800a442:	4603      	mov	r3, r0
 800a444:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800a448:	e006      	b.n	800a458 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800a44a:	2301      	movs	r3, #1
 800a44c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a450:	e002      	b.n	800a458 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800a452:	bf00      	nop
 800a454:	e000      	b.n	800a458 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800a456:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a458:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d10a      	bne.n	800a476 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800a460:	4b9b      	ldr	r3, [pc, #620]	@ (800a6d0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a462:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a464:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800a468:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a46c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a46e:	4a98      	ldr	r2, [pc, #608]	@ (800a6d0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a470:	430b      	orrs	r3, r1
 800a472:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800a474:	e003      	b.n	800a47e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a476:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a47a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800a47e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a482:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a486:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800a48a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a48e:	2300      	movs	r3, #0
 800a490:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800a494:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800a498:	460b      	mov	r3, r1
 800a49a:	4313      	orrs	r3, r2
 800a49c:	d051      	beq.n	800a542 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800a49e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a4a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a4a4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a4a8:	d035      	beq.n	800a516 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800a4aa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a4ae:	d82e      	bhi.n	800a50e <HAL_RCCEx_PeriphCLKConfig+0x436>
 800a4b0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a4b4:	d031      	beq.n	800a51a <HAL_RCCEx_PeriphCLKConfig+0x442>
 800a4b6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a4ba:	d828      	bhi.n	800a50e <HAL_RCCEx_PeriphCLKConfig+0x436>
 800a4bc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a4c0:	d01a      	beq.n	800a4f8 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800a4c2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a4c6:	d822      	bhi.n	800a50e <HAL_RCCEx_PeriphCLKConfig+0x436>
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d003      	beq.n	800a4d4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 800a4cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a4d0:	d007      	beq.n	800a4e2 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800a4d2:	e01c      	b.n	800a50e <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a4d4:	4b7e      	ldr	r3, [pc, #504]	@ (800a6d0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a4d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a4d8:	4a7d      	ldr	r2, [pc, #500]	@ (800a6d0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a4da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a4de:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a4e0:	e01c      	b.n	800a51c <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a4e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a4e6:	3308      	adds	r3, #8
 800a4e8:	2100      	movs	r1, #0
 800a4ea:	4618      	mov	r0, r3
 800a4ec:	f002 f876 	bl	800c5dc <RCCEx_PLL2_Config>
 800a4f0:	4603      	mov	r3, r0
 800a4f2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a4f6:	e011      	b.n	800a51c <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a4f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a4fc:	3328      	adds	r3, #40	@ 0x28
 800a4fe:	2100      	movs	r1, #0
 800a500:	4618      	mov	r0, r3
 800a502:	f002 f91d 	bl	800c740 <RCCEx_PLL3_Config>
 800a506:	4603      	mov	r3, r0
 800a508:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a50c:	e006      	b.n	800a51c <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a50e:	2301      	movs	r3, #1
 800a510:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a514:	e002      	b.n	800a51c <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800a516:	bf00      	nop
 800a518:	e000      	b.n	800a51c <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800a51a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a51c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a520:	2b00      	cmp	r3, #0
 800a522:	d10a      	bne.n	800a53a <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800a524:	4b6a      	ldr	r3, [pc, #424]	@ (800a6d0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a526:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a528:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800a52c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a530:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a532:	4a67      	ldr	r2, [pc, #412]	@ (800a6d0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a534:	430b      	orrs	r3, r1
 800a536:	6513      	str	r3, [r2, #80]	@ 0x50
 800a538:	e003      	b.n	800a542 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a53a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a53e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800a542:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a54a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800a54e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a552:	2300      	movs	r3, #0
 800a554:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a558:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800a55c:	460b      	mov	r3, r1
 800a55e:	4313      	orrs	r3, r2
 800a560:	d053      	beq.n	800a60a <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800a562:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a566:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a568:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a56c:	d033      	beq.n	800a5d6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800a56e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a572:	d82c      	bhi.n	800a5ce <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800a574:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a578:	d02f      	beq.n	800a5da <HAL_RCCEx_PeriphCLKConfig+0x502>
 800a57a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a57e:	d826      	bhi.n	800a5ce <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800a580:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a584:	d02b      	beq.n	800a5de <HAL_RCCEx_PeriphCLKConfig+0x506>
 800a586:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a58a:	d820      	bhi.n	800a5ce <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800a58c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a590:	d012      	beq.n	800a5b8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800a592:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a596:	d81a      	bhi.n	800a5ce <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d022      	beq.n	800a5e2 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800a59c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a5a0:	d115      	bne.n	800a5ce <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a5a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a5a6:	3308      	adds	r3, #8
 800a5a8:	2101      	movs	r1, #1
 800a5aa:	4618      	mov	r0, r3
 800a5ac:	f002 f816 	bl	800c5dc <RCCEx_PLL2_Config>
 800a5b0:	4603      	mov	r3, r0
 800a5b2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800a5b6:	e015      	b.n	800a5e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a5b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a5bc:	3328      	adds	r3, #40	@ 0x28
 800a5be:	2101      	movs	r1, #1
 800a5c0:	4618      	mov	r0, r3
 800a5c2:	f002 f8bd 	bl	800c740 <RCCEx_PLL3_Config>
 800a5c6:	4603      	mov	r3, r0
 800a5c8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800a5cc:	e00a      	b.n	800a5e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a5ce:	2301      	movs	r3, #1
 800a5d0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a5d4:	e006      	b.n	800a5e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800a5d6:	bf00      	nop
 800a5d8:	e004      	b.n	800a5e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800a5da:	bf00      	nop
 800a5dc:	e002      	b.n	800a5e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800a5de:	bf00      	nop
 800a5e0:	e000      	b.n	800a5e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800a5e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a5e4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d10a      	bne.n	800a602 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800a5ec:	4b38      	ldr	r3, [pc, #224]	@ (800a6d0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a5ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a5f0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800a5f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a5f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a5fa:	4a35      	ldr	r2, [pc, #212]	@ (800a6d0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a5fc:	430b      	orrs	r3, r1
 800a5fe:	6513      	str	r3, [r2, #80]	@ 0x50
 800a600:	e003      	b.n	800a60a <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a602:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a606:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800a60a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a60e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a612:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800a616:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a61a:	2300      	movs	r3, #0
 800a61c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800a620:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800a624:	460b      	mov	r3, r1
 800a626:	4313      	orrs	r3, r2
 800a628:	d058      	beq.n	800a6dc <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800a62a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a62e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800a632:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a636:	d033      	beq.n	800a6a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800a638:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a63c:	d82c      	bhi.n	800a698 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800a63e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a642:	d02f      	beq.n	800a6a4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800a644:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a648:	d826      	bhi.n	800a698 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800a64a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a64e:	d02b      	beq.n	800a6a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800a650:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a654:	d820      	bhi.n	800a698 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800a656:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a65a:	d012      	beq.n	800a682 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 800a65c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a660:	d81a      	bhi.n	800a698 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800a662:	2b00      	cmp	r3, #0
 800a664:	d022      	beq.n	800a6ac <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800a666:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a66a:	d115      	bne.n	800a698 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a66c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a670:	3308      	adds	r3, #8
 800a672:	2101      	movs	r1, #1
 800a674:	4618      	mov	r0, r3
 800a676:	f001 ffb1 	bl	800c5dc <RCCEx_PLL2_Config>
 800a67a:	4603      	mov	r3, r0
 800a67c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800a680:	e015      	b.n	800a6ae <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a682:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a686:	3328      	adds	r3, #40	@ 0x28
 800a688:	2101      	movs	r1, #1
 800a68a:	4618      	mov	r0, r3
 800a68c:	f002 f858 	bl	800c740 <RCCEx_PLL3_Config>
 800a690:	4603      	mov	r3, r0
 800a692:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800a696:	e00a      	b.n	800a6ae <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800a698:	2301      	movs	r3, #1
 800a69a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a69e:	e006      	b.n	800a6ae <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800a6a0:	bf00      	nop
 800a6a2:	e004      	b.n	800a6ae <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800a6a4:	bf00      	nop
 800a6a6:	e002      	b.n	800a6ae <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800a6a8:	bf00      	nop
 800a6aa:	e000      	b.n	800a6ae <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800a6ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a6ae:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d10e      	bne.n	800a6d4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800a6b6:	4b06      	ldr	r3, [pc, #24]	@ (800a6d0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a6b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a6ba:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800a6be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a6c2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800a6c6:	4a02      	ldr	r2, [pc, #8]	@ (800a6d0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a6c8:	430b      	orrs	r3, r1
 800a6ca:	6593      	str	r3, [r2, #88]	@ 0x58
 800a6cc:	e006      	b.n	800a6dc <HAL_RCCEx_PeriphCLKConfig+0x604>
 800a6ce:	bf00      	nop
 800a6d0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a6d4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a6d8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800a6dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a6e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6e4:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800a6e8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a6ec:	2300      	movs	r3, #0
 800a6ee:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800a6f2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800a6f6:	460b      	mov	r3, r1
 800a6f8:	4313      	orrs	r3, r2
 800a6fa:	d037      	beq.n	800a76c <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800a6fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a700:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a702:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a706:	d00e      	beq.n	800a726 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800a708:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a70c:	d816      	bhi.n	800a73c <HAL_RCCEx_PeriphCLKConfig+0x664>
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d018      	beq.n	800a744 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800a712:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a716:	d111      	bne.n	800a73c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a718:	4bc4      	ldr	r3, [pc, #784]	@ (800aa2c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a71a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a71c:	4ac3      	ldr	r2, [pc, #780]	@ (800aa2c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a71e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a722:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800a724:	e00f      	b.n	800a746 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a726:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a72a:	3308      	adds	r3, #8
 800a72c:	2101      	movs	r1, #1
 800a72e:	4618      	mov	r0, r3
 800a730:	f001 ff54 	bl	800c5dc <RCCEx_PLL2_Config>
 800a734:	4603      	mov	r3, r0
 800a736:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800a73a:	e004      	b.n	800a746 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a73c:	2301      	movs	r3, #1
 800a73e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a742:	e000      	b.n	800a746 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800a744:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a746:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d10a      	bne.n	800a764 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800a74e:	4bb7      	ldr	r3, [pc, #732]	@ (800aa2c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a750:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a752:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800a756:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a75a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a75c:	4ab3      	ldr	r2, [pc, #716]	@ (800aa2c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a75e:	430b      	orrs	r3, r1
 800a760:	6513      	str	r3, [r2, #80]	@ 0x50
 800a762:	e003      	b.n	800a76c <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a764:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a768:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800a76c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a770:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a774:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800a778:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a77c:	2300      	movs	r3, #0
 800a77e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800a782:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800a786:	460b      	mov	r3, r1
 800a788:	4313      	orrs	r3, r2
 800a78a:	d039      	beq.n	800a800 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800a78c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a790:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a792:	2b03      	cmp	r3, #3
 800a794:	d81c      	bhi.n	800a7d0 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800a796:	a201      	add	r2, pc, #4	@ (adr r2, 800a79c <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800a798:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a79c:	0800a7d9 	.word	0x0800a7d9
 800a7a0:	0800a7ad 	.word	0x0800a7ad
 800a7a4:	0800a7bb 	.word	0x0800a7bb
 800a7a8:	0800a7d9 	.word	0x0800a7d9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a7ac:	4b9f      	ldr	r3, [pc, #636]	@ (800aa2c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a7ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a7b0:	4a9e      	ldr	r2, [pc, #632]	@ (800aa2c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a7b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a7b6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800a7b8:	e00f      	b.n	800a7da <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a7ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a7be:	3308      	adds	r3, #8
 800a7c0:	2102      	movs	r1, #2
 800a7c2:	4618      	mov	r0, r3
 800a7c4:	f001 ff0a 	bl	800c5dc <RCCEx_PLL2_Config>
 800a7c8:	4603      	mov	r3, r0
 800a7ca:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800a7ce:	e004      	b.n	800a7da <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800a7d0:	2301      	movs	r3, #1
 800a7d2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a7d6:	e000      	b.n	800a7da <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800a7d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a7da:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d10a      	bne.n	800a7f8 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800a7e2:	4b92      	ldr	r3, [pc, #584]	@ (800aa2c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a7e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a7e6:	f023 0103 	bic.w	r1, r3, #3
 800a7ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a7ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a7f0:	4a8e      	ldr	r2, [pc, #568]	@ (800aa2c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a7f2:	430b      	orrs	r3, r1
 800a7f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800a7f6:	e003      	b.n	800a800 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a7f8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a7fc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a800:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a804:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a808:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800a80c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a810:	2300      	movs	r3, #0
 800a812:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a816:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800a81a:	460b      	mov	r3, r1
 800a81c:	4313      	orrs	r3, r2
 800a81e:	f000 8099 	beq.w	800a954 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a822:	4b83      	ldr	r3, [pc, #524]	@ (800aa30 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	4a82      	ldr	r2, [pc, #520]	@ (800aa30 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800a828:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a82c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a82e:	f7f9 fba9 	bl	8003f84 <HAL_GetTick>
 800a832:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a836:	e00b      	b.n	800a850 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a838:	f7f9 fba4 	bl	8003f84 <HAL_GetTick>
 800a83c:	4602      	mov	r2, r0
 800a83e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800a842:	1ad3      	subs	r3, r2, r3
 800a844:	2b64      	cmp	r3, #100	@ 0x64
 800a846:	d903      	bls.n	800a850 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800a848:	2303      	movs	r3, #3
 800a84a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a84e:	e005      	b.n	800a85c <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a850:	4b77      	ldr	r3, [pc, #476]	@ (800aa30 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d0ed      	beq.n	800a838 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800a85c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a860:	2b00      	cmp	r3, #0
 800a862:	d173      	bne.n	800a94c <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800a864:	4b71      	ldr	r3, [pc, #452]	@ (800aa2c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a866:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800a868:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a86c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a870:	4053      	eors	r3, r2
 800a872:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a876:	2b00      	cmp	r3, #0
 800a878:	d015      	beq.n	800a8a6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a87a:	4b6c      	ldr	r3, [pc, #432]	@ (800aa2c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a87c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a87e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a882:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a886:	4b69      	ldr	r3, [pc, #420]	@ (800aa2c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a888:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a88a:	4a68      	ldr	r2, [pc, #416]	@ (800aa2c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a88c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a890:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a892:	4b66      	ldr	r3, [pc, #408]	@ (800aa2c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a894:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a896:	4a65      	ldr	r2, [pc, #404]	@ (800aa2c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a898:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a89c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800a89e:	4a63      	ldr	r2, [pc, #396]	@ (800aa2c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a8a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a8a4:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800a8a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a8aa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a8ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a8b2:	d118      	bne.n	800a8e6 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a8b4:	f7f9 fb66 	bl	8003f84 <HAL_GetTick>
 800a8b8:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a8bc:	e00d      	b.n	800a8da <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a8be:	f7f9 fb61 	bl	8003f84 <HAL_GetTick>
 800a8c2:	4602      	mov	r2, r0
 800a8c4:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800a8c8:	1ad2      	subs	r2, r2, r3
 800a8ca:	f241 3388 	movw	r3, #5000	@ 0x1388
 800a8ce:	429a      	cmp	r2, r3
 800a8d0:	d903      	bls.n	800a8da <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800a8d2:	2303      	movs	r3, #3
 800a8d4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 800a8d8:	e005      	b.n	800a8e6 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a8da:	4b54      	ldr	r3, [pc, #336]	@ (800aa2c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a8dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a8de:	f003 0302 	and.w	r3, r3, #2
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d0eb      	beq.n	800a8be <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800a8e6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d129      	bne.n	800a942 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a8ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a8f2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a8f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a8fa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a8fe:	d10e      	bne.n	800a91e <HAL_RCCEx_PeriphCLKConfig+0x846>
 800a900:	4b4a      	ldr	r3, [pc, #296]	@ (800aa2c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a902:	691b      	ldr	r3, [r3, #16]
 800a904:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800a908:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a90c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a910:	091a      	lsrs	r2, r3, #4
 800a912:	4b48      	ldr	r3, [pc, #288]	@ (800aa34 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800a914:	4013      	ands	r3, r2
 800a916:	4a45      	ldr	r2, [pc, #276]	@ (800aa2c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a918:	430b      	orrs	r3, r1
 800a91a:	6113      	str	r3, [r2, #16]
 800a91c:	e005      	b.n	800a92a <HAL_RCCEx_PeriphCLKConfig+0x852>
 800a91e:	4b43      	ldr	r3, [pc, #268]	@ (800aa2c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a920:	691b      	ldr	r3, [r3, #16]
 800a922:	4a42      	ldr	r2, [pc, #264]	@ (800aa2c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a924:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800a928:	6113      	str	r3, [r2, #16]
 800a92a:	4b40      	ldr	r3, [pc, #256]	@ (800aa2c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a92c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800a92e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a932:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a936:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a93a:	4a3c      	ldr	r2, [pc, #240]	@ (800aa2c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a93c:	430b      	orrs	r3, r1
 800a93e:	6713      	str	r3, [r2, #112]	@ 0x70
 800a940:	e008      	b.n	800a954 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a942:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a946:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800a94a:	e003      	b.n	800a954 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a94c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a950:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800a954:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a95c:	f002 0301 	and.w	r3, r2, #1
 800a960:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a964:	2300      	movs	r3, #0
 800a966:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800a96a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800a96e:	460b      	mov	r3, r1
 800a970:	4313      	orrs	r3, r2
 800a972:	f000 808f 	beq.w	800aa94 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800a976:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a97a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a97c:	2b28      	cmp	r3, #40	@ 0x28
 800a97e:	d871      	bhi.n	800aa64 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800a980:	a201      	add	r2, pc, #4	@ (adr r2, 800a988 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800a982:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a986:	bf00      	nop
 800a988:	0800aa6d 	.word	0x0800aa6d
 800a98c:	0800aa65 	.word	0x0800aa65
 800a990:	0800aa65 	.word	0x0800aa65
 800a994:	0800aa65 	.word	0x0800aa65
 800a998:	0800aa65 	.word	0x0800aa65
 800a99c:	0800aa65 	.word	0x0800aa65
 800a9a0:	0800aa65 	.word	0x0800aa65
 800a9a4:	0800aa65 	.word	0x0800aa65
 800a9a8:	0800aa39 	.word	0x0800aa39
 800a9ac:	0800aa65 	.word	0x0800aa65
 800a9b0:	0800aa65 	.word	0x0800aa65
 800a9b4:	0800aa65 	.word	0x0800aa65
 800a9b8:	0800aa65 	.word	0x0800aa65
 800a9bc:	0800aa65 	.word	0x0800aa65
 800a9c0:	0800aa65 	.word	0x0800aa65
 800a9c4:	0800aa65 	.word	0x0800aa65
 800a9c8:	0800aa4f 	.word	0x0800aa4f
 800a9cc:	0800aa65 	.word	0x0800aa65
 800a9d0:	0800aa65 	.word	0x0800aa65
 800a9d4:	0800aa65 	.word	0x0800aa65
 800a9d8:	0800aa65 	.word	0x0800aa65
 800a9dc:	0800aa65 	.word	0x0800aa65
 800a9e0:	0800aa65 	.word	0x0800aa65
 800a9e4:	0800aa65 	.word	0x0800aa65
 800a9e8:	0800aa6d 	.word	0x0800aa6d
 800a9ec:	0800aa65 	.word	0x0800aa65
 800a9f0:	0800aa65 	.word	0x0800aa65
 800a9f4:	0800aa65 	.word	0x0800aa65
 800a9f8:	0800aa65 	.word	0x0800aa65
 800a9fc:	0800aa65 	.word	0x0800aa65
 800aa00:	0800aa65 	.word	0x0800aa65
 800aa04:	0800aa65 	.word	0x0800aa65
 800aa08:	0800aa6d 	.word	0x0800aa6d
 800aa0c:	0800aa65 	.word	0x0800aa65
 800aa10:	0800aa65 	.word	0x0800aa65
 800aa14:	0800aa65 	.word	0x0800aa65
 800aa18:	0800aa65 	.word	0x0800aa65
 800aa1c:	0800aa65 	.word	0x0800aa65
 800aa20:	0800aa65 	.word	0x0800aa65
 800aa24:	0800aa65 	.word	0x0800aa65
 800aa28:	0800aa6d 	.word	0x0800aa6d
 800aa2c:	58024400 	.word	0x58024400
 800aa30:	58024800 	.word	0x58024800
 800aa34:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800aa38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aa3c:	3308      	adds	r3, #8
 800aa3e:	2101      	movs	r1, #1
 800aa40:	4618      	mov	r0, r3
 800aa42:	f001 fdcb 	bl	800c5dc <RCCEx_PLL2_Config>
 800aa46:	4603      	mov	r3, r0
 800aa48:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800aa4c:	e00f      	b.n	800aa6e <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800aa4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aa52:	3328      	adds	r3, #40	@ 0x28
 800aa54:	2101      	movs	r1, #1
 800aa56:	4618      	mov	r0, r3
 800aa58:	f001 fe72 	bl	800c740 <RCCEx_PLL3_Config>
 800aa5c:	4603      	mov	r3, r0
 800aa5e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800aa62:	e004      	b.n	800aa6e <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800aa64:	2301      	movs	r3, #1
 800aa66:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800aa6a:	e000      	b.n	800aa6e <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800aa6c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aa6e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d10a      	bne.n	800aa8c <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800aa76:	4bbf      	ldr	r3, [pc, #764]	@ (800ad74 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800aa78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aa7a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800aa7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aa82:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800aa84:	4abb      	ldr	r2, [pc, #748]	@ (800ad74 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800aa86:	430b      	orrs	r3, r1
 800aa88:	6553      	str	r3, [r2, #84]	@ 0x54
 800aa8a:	e003      	b.n	800aa94 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa8c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800aa90:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800aa94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aa98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa9c:	f002 0302 	and.w	r3, r2, #2
 800aaa0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800aaa4:	2300      	movs	r3, #0
 800aaa6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800aaaa:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800aaae:	460b      	mov	r3, r1
 800aab0:	4313      	orrs	r3, r2
 800aab2:	d041      	beq.n	800ab38 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800aab4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aab8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800aaba:	2b05      	cmp	r3, #5
 800aabc:	d824      	bhi.n	800ab08 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800aabe:	a201      	add	r2, pc, #4	@ (adr r2, 800aac4 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 800aac0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aac4:	0800ab11 	.word	0x0800ab11
 800aac8:	0800aadd 	.word	0x0800aadd
 800aacc:	0800aaf3 	.word	0x0800aaf3
 800aad0:	0800ab11 	.word	0x0800ab11
 800aad4:	0800ab11 	.word	0x0800ab11
 800aad8:	0800ab11 	.word	0x0800ab11
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800aadc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aae0:	3308      	adds	r3, #8
 800aae2:	2101      	movs	r1, #1
 800aae4:	4618      	mov	r0, r3
 800aae6:	f001 fd79 	bl	800c5dc <RCCEx_PLL2_Config>
 800aaea:	4603      	mov	r3, r0
 800aaec:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800aaf0:	e00f      	b.n	800ab12 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800aaf2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aaf6:	3328      	adds	r3, #40	@ 0x28
 800aaf8:	2101      	movs	r1, #1
 800aafa:	4618      	mov	r0, r3
 800aafc:	f001 fe20 	bl	800c740 <RCCEx_PLL3_Config>
 800ab00:	4603      	mov	r3, r0
 800ab02:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800ab06:	e004      	b.n	800ab12 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ab08:	2301      	movs	r3, #1
 800ab0a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800ab0e:	e000      	b.n	800ab12 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 800ab10:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ab12:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d10a      	bne.n	800ab30 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800ab1a:	4b96      	ldr	r3, [pc, #600]	@ (800ad74 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800ab1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ab1e:	f023 0107 	bic.w	r1, r3, #7
 800ab22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ab26:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ab28:	4a92      	ldr	r2, [pc, #584]	@ (800ad74 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800ab2a:	430b      	orrs	r3, r1
 800ab2c:	6553      	str	r3, [r2, #84]	@ 0x54
 800ab2e:	e003      	b.n	800ab38 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab30:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ab34:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800ab38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ab3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab40:	f002 0304 	and.w	r3, r2, #4
 800ab44:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800ab48:	2300      	movs	r3, #0
 800ab4a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800ab4e:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800ab52:	460b      	mov	r3, r1
 800ab54:	4313      	orrs	r3, r2
 800ab56:	d044      	beq.n	800abe2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800ab58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ab5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ab60:	2b05      	cmp	r3, #5
 800ab62:	d825      	bhi.n	800abb0 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 800ab64:	a201      	add	r2, pc, #4	@ (adr r2, 800ab6c <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800ab66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab6a:	bf00      	nop
 800ab6c:	0800abb9 	.word	0x0800abb9
 800ab70:	0800ab85 	.word	0x0800ab85
 800ab74:	0800ab9b 	.word	0x0800ab9b
 800ab78:	0800abb9 	.word	0x0800abb9
 800ab7c:	0800abb9 	.word	0x0800abb9
 800ab80:	0800abb9 	.word	0x0800abb9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ab84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ab88:	3308      	adds	r3, #8
 800ab8a:	2101      	movs	r1, #1
 800ab8c:	4618      	mov	r0, r3
 800ab8e:	f001 fd25 	bl	800c5dc <RCCEx_PLL2_Config>
 800ab92:	4603      	mov	r3, r0
 800ab94:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800ab98:	e00f      	b.n	800abba <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ab9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ab9e:	3328      	adds	r3, #40	@ 0x28
 800aba0:	2101      	movs	r1, #1
 800aba2:	4618      	mov	r0, r3
 800aba4:	f001 fdcc 	bl	800c740 <RCCEx_PLL3_Config>
 800aba8:	4603      	mov	r3, r0
 800abaa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800abae:	e004      	b.n	800abba <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800abb0:	2301      	movs	r3, #1
 800abb2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800abb6:	e000      	b.n	800abba <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 800abb8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800abba:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d10b      	bne.n	800abda <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800abc2:	4b6c      	ldr	r3, [pc, #432]	@ (800ad74 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800abc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800abc6:	f023 0107 	bic.w	r1, r3, #7
 800abca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800abce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800abd2:	4a68      	ldr	r2, [pc, #416]	@ (800ad74 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800abd4:	430b      	orrs	r3, r1
 800abd6:	6593      	str	r3, [r2, #88]	@ 0x58
 800abd8:	e003      	b.n	800abe2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800abda:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800abde:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800abe2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800abe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abea:	f002 0320 	and.w	r3, r2, #32
 800abee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800abf2:	2300      	movs	r3, #0
 800abf4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800abf8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800abfc:	460b      	mov	r3, r1
 800abfe:	4313      	orrs	r3, r2
 800ac00:	d055      	beq.n	800acae <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800ac02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ac06:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ac0a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ac0e:	d033      	beq.n	800ac78 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 800ac10:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ac14:	d82c      	bhi.n	800ac70 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800ac16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ac1a:	d02f      	beq.n	800ac7c <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800ac1c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ac20:	d826      	bhi.n	800ac70 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800ac22:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800ac26:	d02b      	beq.n	800ac80 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800ac28:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800ac2c:	d820      	bhi.n	800ac70 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800ac2e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ac32:	d012      	beq.n	800ac5a <HAL_RCCEx_PeriphCLKConfig+0xb82>
 800ac34:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ac38:	d81a      	bhi.n	800ac70 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d022      	beq.n	800ac84 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800ac3e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ac42:	d115      	bne.n	800ac70 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ac44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ac48:	3308      	adds	r3, #8
 800ac4a:	2100      	movs	r1, #0
 800ac4c:	4618      	mov	r0, r3
 800ac4e:	f001 fcc5 	bl	800c5dc <RCCEx_PLL2_Config>
 800ac52:	4603      	mov	r3, r0
 800ac54:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800ac58:	e015      	b.n	800ac86 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ac5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ac5e:	3328      	adds	r3, #40	@ 0x28
 800ac60:	2102      	movs	r1, #2
 800ac62:	4618      	mov	r0, r3
 800ac64:	f001 fd6c 	bl	800c740 <RCCEx_PLL3_Config>
 800ac68:	4603      	mov	r3, r0
 800ac6a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800ac6e:	e00a      	b.n	800ac86 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ac70:	2301      	movs	r3, #1
 800ac72:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800ac76:	e006      	b.n	800ac86 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800ac78:	bf00      	nop
 800ac7a:	e004      	b.n	800ac86 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800ac7c:	bf00      	nop
 800ac7e:	e002      	b.n	800ac86 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800ac80:	bf00      	nop
 800ac82:	e000      	b.n	800ac86 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800ac84:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ac86:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d10b      	bne.n	800aca6 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800ac8e:	4b39      	ldr	r3, [pc, #228]	@ (800ad74 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800ac90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ac92:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800ac96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ac9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ac9e:	4a35      	ldr	r2, [pc, #212]	@ (800ad74 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800aca0:	430b      	orrs	r3, r1
 800aca2:	6553      	str	r3, [r2, #84]	@ 0x54
 800aca4:	e003      	b.n	800acae <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aca6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800acaa:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800acae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800acb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acb6:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800acba:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800acbe:	2300      	movs	r3, #0
 800acc0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800acc4:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800acc8:	460b      	mov	r3, r1
 800acca:	4313      	orrs	r3, r2
 800accc:	d058      	beq.n	800ad80 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800acce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800acd2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800acd6:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800acda:	d033      	beq.n	800ad44 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800acdc:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800ace0:	d82c      	bhi.n	800ad3c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800ace2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ace6:	d02f      	beq.n	800ad48 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800ace8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800acec:	d826      	bhi.n	800ad3c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800acee:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800acf2:	d02b      	beq.n	800ad4c <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800acf4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800acf8:	d820      	bhi.n	800ad3c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800acfa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800acfe:	d012      	beq.n	800ad26 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 800ad00:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ad04:	d81a      	bhi.n	800ad3c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d022      	beq.n	800ad50 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800ad0a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ad0e:	d115      	bne.n	800ad3c <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ad10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ad14:	3308      	adds	r3, #8
 800ad16:	2100      	movs	r1, #0
 800ad18:	4618      	mov	r0, r3
 800ad1a:	f001 fc5f 	bl	800c5dc <RCCEx_PLL2_Config>
 800ad1e:	4603      	mov	r3, r0
 800ad20:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800ad24:	e015      	b.n	800ad52 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ad26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ad2a:	3328      	adds	r3, #40	@ 0x28
 800ad2c:	2102      	movs	r1, #2
 800ad2e:	4618      	mov	r0, r3
 800ad30:	f001 fd06 	bl	800c740 <RCCEx_PLL3_Config>
 800ad34:	4603      	mov	r3, r0
 800ad36:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800ad3a:	e00a      	b.n	800ad52 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ad3c:	2301      	movs	r3, #1
 800ad3e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800ad42:	e006      	b.n	800ad52 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800ad44:	bf00      	nop
 800ad46:	e004      	b.n	800ad52 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800ad48:	bf00      	nop
 800ad4a:	e002      	b.n	800ad52 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800ad4c:	bf00      	nop
 800ad4e:	e000      	b.n	800ad52 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800ad50:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ad52:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d10e      	bne.n	800ad78 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800ad5a:	4b06      	ldr	r3, [pc, #24]	@ (800ad74 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800ad5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ad5e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800ad62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ad66:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800ad6a:	4a02      	ldr	r2, [pc, #8]	@ (800ad74 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800ad6c:	430b      	orrs	r3, r1
 800ad6e:	6593      	str	r3, [r2, #88]	@ 0x58
 800ad70:	e006      	b.n	800ad80 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800ad72:	bf00      	nop
 800ad74:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ad78:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ad7c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800ad80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ad84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad88:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800ad8c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800ad90:	2300      	movs	r3, #0
 800ad92:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800ad96:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800ad9a:	460b      	mov	r3, r1
 800ad9c:	4313      	orrs	r3, r2
 800ad9e:	d055      	beq.n	800ae4c <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800ada0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ada4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800ada8:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800adac:	d033      	beq.n	800ae16 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800adae:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800adb2:	d82c      	bhi.n	800ae0e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800adb4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800adb8:	d02f      	beq.n	800ae1a <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800adba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800adbe:	d826      	bhi.n	800ae0e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800adc0:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800adc4:	d02b      	beq.n	800ae1e <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800adc6:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800adca:	d820      	bhi.n	800ae0e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800adcc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800add0:	d012      	beq.n	800adf8 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800add2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800add6:	d81a      	bhi.n	800ae0e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800add8:	2b00      	cmp	r3, #0
 800adda:	d022      	beq.n	800ae22 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800addc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ade0:	d115      	bne.n	800ae0e <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ade2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ade6:	3308      	adds	r3, #8
 800ade8:	2100      	movs	r1, #0
 800adea:	4618      	mov	r0, r3
 800adec:	f001 fbf6 	bl	800c5dc <RCCEx_PLL2_Config>
 800adf0:	4603      	mov	r3, r0
 800adf2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800adf6:	e015      	b.n	800ae24 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800adf8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800adfc:	3328      	adds	r3, #40	@ 0x28
 800adfe:	2102      	movs	r1, #2
 800ae00:	4618      	mov	r0, r3
 800ae02:	f001 fc9d 	bl	800c740 <RCCEx_PLL3_Config>
 800ae06:	4603      	mov	r3, r0
 800ae08:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800ae0c:	e00a      	b.n	800ae24 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ae0e:	2301      	movs	r3, #1
 800ae10:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800ae14:	e006      	b.n	800ae24 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800ae16:	bf00      	nop
 800ae18:	e004      	b.n	800ae24 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800ae1a:	bf00      	nop
 800ae1c:	e002      	b.n	800ae24 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800ae1e:	bf00      	nop
 800ae20:	e000      	b.n	800ae24 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800ae22:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ae24:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d10b      	bne.n	800ae44 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800ae2c:	4ba0      	ldr	r3, [pc, #640]	@ (800b0b0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ae2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ae30:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800ae34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ae38:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800ae3c:	4a9c      	ldr	r2, [pc, #624]	@ (800b0b0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ae3e:	430b      	orrs	r3, r1
 800ae40:	6593      	str	r3, [r2, #88]	@ 0x58
 800ae42:	e003      	b.n	800ae4c <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ae44:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ae48:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800ae4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ae50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae54:	f002 0308 	and.w	r3, r2, #8
 800ae58:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800ae5c:	2300      	movs	r3, #0
 800ae5e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800ae62:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800ae66:	460b      	mov	r3, r1
 800ae68:	4313      	orrs	r3, r2
 800ae6a:	d01e      	beq.n	800aeaa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800ae6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ae70:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ae74:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ae78:	d10c      	bne.n	800ae94 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800ae7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ae7e:	3328      	adds	r3, #40	@ 0x28
 800ae80:	2102      	movs	r1, #2
 800ae82:	4618      	mov	r0, r3
 800ae84:	f001 fc5c 	bl	800c740 <RCCEx_PLL3_Config>
 800ae88:	4603      	mov	r3, r0
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d002      	beq.n	800ae94 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800ae8e:	2301      	movs	r3, #1
 800ae90:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800ae94:	4b86      	ldr	r3, [pc, #536]	@ (800b0b0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ae96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ae98:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800ae9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aea0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800aea4:	4a82      	ldr	r2, [pc, #520]	@ (800b0b0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800aea6:	430b      	orrs	r3, r1
 800aea8:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800aeaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aeae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aeb2:	f002 0310 	and.w	r3, r2, #16
 800aeb6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800aeba:	2300      	movs	r3, #0
 800aebc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800aec0:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800aec4:	460b      	mov	r3, r1
 800aec6:	4313      	orrs	r3, r2
 800aec8:	d01e      	beq.n	800af08 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800aeca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aece:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800aed2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800aed6:	d10c      	bne.n	800aef2 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800aed8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aedc:	3328      	adds	r3, #40	@ 0x28
 800aede:	2102      	movs	r1, #2
 800aee0:	4618      	mov	r0, r3
 800aee2:	f001 fc2d 	bl	800c740 <RCCEx_PLL3_Config>
 800aee6:	4603      	mov	r3, r0
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d002      	beq.n	800aef2 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 800aeec:	2301      	movs	r3, #1
 800aeee:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800aef2:	4b6f      	ldr	r3, [pc, #444]	@ (800b0b0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800aef4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aef6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800aefa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aefe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800af02:	4a6b      	ldr	r2, [pc, #428]	@ (800b0b0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800af04:	430b      	orrs	r3, r1
 800af06:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800af08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800af0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af10:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800af14:	67bb      	str	r3, [r7, #120]	@ 0x78
 800af16:	2300      	movs	r3, #0
 800af18:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800af1a:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800af1e:	460b      	mov	r3, r1
 800af20:	4313      	orrs	r3, r2
 800af22:	d03e      	beq.n	800afa2 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800af24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800af28:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800af2c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800af30:	d022      	beq.n	800af78 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800af32:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800af36:	d81b      	bhi.n	800af70 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d003      	beq.n	800af44 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 800af3c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800af40:	d00b      	beq.n	800af5a <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800af42:	e015      	b.n	800af70 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800af44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800af48:	3308      	adds	r3, #8
 800af4a:	2100      	movs	r1, #0
 800af4c:	4618      	mov	r0, r3
 800af4e:	f001 fb45 	bl	800c5dc <RCCEx_PLL2_Config>
 800af52:	4603      	mov	r3, r0
 800af54:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800af58:	e00f      	b.n	800af7a <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800af5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800af5e:	3328      	adds	r3, #40	@ 0x28
 800af60:	2102      	movs	r1, #2
 800af62:	4618      	mov	r0, r3
 800af64:	f001 fbec 	bl	800c740 <RCCEx_PLL3_Config>
 800af68:	4603      	mov	r3, r0
 800af6a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800af6e:	e004      	b.n	800af7a <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800af70:	2301      	movs	r3, #1
 800af72:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800af76:	e000      	b.n	800af7a <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800af78:	bf00      	nop
    }

    if (ret == HAL_OK)
 800af7a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d10b      	bne.n	800af9a <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800af82:	4b4b      	ldr	r3, [pc, #300]	@ (800b0b0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800af84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800af86:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800af8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800af8e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800af92:	4a47      	ldr	r2, [pc, #284]	@ (800b0b0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800af94:	430b      	orrs	r3, r1
 800af96:	6593      	str	r3, [r2, #88]	@ 0x58
 800af98:	e003      	b.n	800afa2 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af9a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800af9e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800afa2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800afa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afaa:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800afae:	673b      	str	r3, [r7, #112]	@ 0x70
 800afb0:	2300      	movs	r3, #0
 800afb2:	677b      	str	r3, [r7, #116]	@ 0x74
 800afb4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800afb8:	460b      	mov	r3, r1
 800afba:	4313      	orrs	r3, r2
 800afbc:	d03b      	beq.n	800b036 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800afbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800afc2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800afc6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800afca:	d01f      	beq.n	800b00c <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800afcc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800afd0:	d818      	bhi.n	800b004 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800afd2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800afd6:	d003      	beq.n	800afe0 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 800afd8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800afdc:	d007      	beq.n	800afee <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800afde:	e011      	b.n	800b004 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800afe0:	4b33      	ldr	r3, [pc, #204]	@ (800b0b0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800afe2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800afe4:	4a32      	ldr	r2, [pc, #200]	@ (800b0b0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800afe6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800afea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800afec:	e00f      	b.n	800b00e <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800afee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aff2:	3328      	adds	r3, #40	@ 0x28
 800aff4:	2101      	movs	r1, #1
 800aff6:	4618      	mov	r0, r3
 800aff8:	f001 fba2 	bl	800c740 <RCCEx_PLL3_Config>
 800affc:	4603      	mov	r3, r0
 800affe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800b002:	e004      	b.n	800b00e <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b004:	2301      	movs	r3, #1
 800b006:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800b00a:	e000      	b.n	800b00e <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 800b00c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b00e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b012:	2b00      	cmp	r3, #0
 800b014:	d10b      	bne.n	800b02e <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b016:	4b26      	ldr	r3, [pc, #152]	@ (800b0b0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b018:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b01a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800b01e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b022:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b026:	4a22      	ldr	r2, [pc, #136]	@ (800b0b0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b028:	430b      	orrs	r3, r1
 800b02a:	6553      	str	r3, [r2, #84]	@ 0x54
 800b02c:	e003      	b.n	800b036 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b02e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b032:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800b036:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b03a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b03e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800b042:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b044:	2300      	movs	r3, #0
 800b046:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800b048:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800b04c:	460b      	mov	r3, r1
 800b04e:	4313      	orrs	r3, r2
 800b050:	d034      	beq.n	800b0bc <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800b052:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b056:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d003      	beq.n	800b064 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800b05c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b060:	d007      	beq.n	800b072 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800b062:	e011      	b.n	800b088 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b064:	4b12      	ldr	r3, [pc, #72]	@ (800b0b0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b066:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b068:	4a11      	ldr	r2, [pc, #68]	@ (800b0b0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b06a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b06e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800b070:	e00e      	b.n	800b090 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b072:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b076:	3308      	adds	r3, #8
 800b078:	2102      	movs	r1, #2
 800b07a:	4618      	mov	r0, r3
 800b07c:	f001 faae 	bl	800c5dc <RCCEx_PLL2_Config>
 800b080:	4603      	mov	r3, r0
 800b082:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800b086:	e003      	b.n	800b090 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 800b088:	2301      	movs	r3, #1
 800b08a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800b08e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b090:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b094:	2b00      	cmp	r3, #0
 800b096:	d10d      	bne.n	800b0b4 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800b098:	4b05      	ldr	r3, [pc, #20]	@ (800b0b0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b09a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b09c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800b0a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b0a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b0a6:	4a02      	ldr	r2, [pc, #8]	@ (800b0b0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b0a8:	430b      	orrs	r3, r1
 800b0aa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800b0ac:	e006      	b.n	800b0bc <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800b0ae:	bf00      	nop
 800b0b0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b0b4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b0b8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800b0bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b0c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0c4:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800b0c8:	663b      	str	r3, [r7, #96]	@ 0x60
 800b0ca:	2300      	movs	r3, #0
 800b0cc:	667b      	str	r3, [r7, #100]	@ 0x64
 800b0ce:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800b0d2:	460b      	mov	r3, r1
 800b0d4:	4313      	orrs	r3, r2
 800b0d6:	d00c      	beq.n	800b0f2 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b0d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b0dc:	3328      	adds	r3, #40	@ 0x28
 800b0de:	2102      	movs	r1, #2
 800b0e0:	4618      	mov	r0, r3
 800b0e2:	f001 fb2d 	bl	800c740 <RCCEx_PLL3_Config>
 800b0e6:	4603      	mov	r3, r0
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d002      	beq.n	800b0f2 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 800b0ec:	2301      	movs	r3, #1
 800b0ee:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800b0f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b0f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0fa:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800b0fe:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b100:	2300      	movs	r3, #0
 800b102:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b104:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800b108:	460b      	mov	r3, r1
 800b10a:	4313      	orrs	r3, r2
 800b10c:	d036      	beq.n	800b17c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800b10e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b112:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b114:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b118:	d018      	beq.n	800b14c <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800b11a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b11e:	d811      	bhi.n	800b144 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800b120:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b124:	d014      	beq.n	800b150 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800b126:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b12a:	d80b      	bhi.n	800b144 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d011      	beq.n	800b154 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800b130:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b134:	d106      	bne.n	800b144 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b136:	4bb7      	ldr	r3, [pc, #732]	@ (800b414 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b138:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b13a:	4ab6      	ldr	r2, [pc, #728]	@ (800b414 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b13c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b140:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800b142:	e008      	b.n	800b156 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b144:	2301      	movs	r3, #1
 800b146:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800b14a:	e004      	b.n	800b156 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800b14c:	bf00      	nop
 800b14e:	e002      	b.n	800b156 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800b150:	bf00      	nop
 800b152:	e000      	b.n	800b156 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800b154:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b156:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d10a      	bne.n	800b174 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800b15e:	4bad      	ldr	r3, [pc, #692]	@ (800b414 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b160:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b162:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800b166:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b16a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b16c:	4aa9      	ldr	r2, [pc, #676]	@ (800b414 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b16e:	430b      	orrs	r3, r1
 800b170:	6553      	str	r3, [r2, #84]	@ 0x54
 800b172:	e003      	b.n	800b17c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b174:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b178:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800b17c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b180:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b184:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800b188:	653b      	str	r3, [r7, #80]	@ 0x50
 800b18a:	2300      	movs	r3, #0
 800b18c:	657b      	str	r3, [r7, #84]	@ 0x54
 800b18e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800b192:	460b      	mov	r3, r1
 800b194:	4313      	orrs	r3, r2
 800b196:	d009      	beq.n	800b1ac <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800b198:	4b9e      	ldr	r3, [pc, #632]	@ (800b414 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b19a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b19c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800b1a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b1a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b1a6:	4a9b      	ldr	r2, [pc, #620]	@ (800b414 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b1a8:	430b      	orrs	r3, r1
 800b1aa:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800b1ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b1b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1b4:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800b1b8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b1ba:	2300      	movs	r3, #0
 800b1bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b1be:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800b1c2:	460b      	mov	r3, r1
 800b1c4:	4313      	orrs	r3, r2
 800b1c6:	d009      	beq.n	800b1dc <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800b1c8:	4b92      	ldr	r3, [pc, #584]	@ (800b414 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b1ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b1cc:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800b1d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b1d4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b1d6:	4a8f      	ldr	r2, [pc, #572]	@ (800b414 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b1d8:	430b      	orrs	r3, r1
 800b1da:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800b1dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b1e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1e4:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800b1e8:	643b      	str	r3, [r7, #64]	@ 0x40
 800b1ea:	2300      	movs	r3, #0
 800b1ec:	647b      	str	r3, [r7, #68]	@ 0x44
 800b1ee:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800b1f2:	460b      	mov	r3, r1
 800b1f4:	4313      	orrs	r3, r2
 800b1f6:	d00e      	beq.n	800b216 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800b1f8:	4b86      	ldr	r3, [pc, #536]	@ (800b414 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b1fa:	691b      	ldr	r3, [r3, #16]
 800b1fc:	4a85      	ldr	r2, [pc, #532]	@ (800b414 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b1fe:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800b202:	6113      	str	r3, [r2, #16]
 800b204:	4b83      	ldr	r3, [pc, #524]	@ (800b414 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b206:	6919      	ldr	r1, [r3, #16]
 800b208:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b20c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800b210:	4a80      	ldr	r2, [pc, #512]	@ (800b414 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b212:	430b      	orrs	r3, r1
 800b214:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800b216:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b21a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b21e:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800b222:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b224:	2300      	movs	r3, #0
 800b226:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b228:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800b22c:	460b      	mov	r3, r1
 800b22e:	4313      	orrs	r3, r2
 800b230:	d009      	beq.n	800b246 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800b232:	4b78      	ldr	r3, [pc, #480]	@ (800b414 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b234:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b236:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800b23a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b23e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b240:	4a74      	ldr	r2, [pc, #464]	@ (800b414 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b242:	430b      	orrs	r3, r1
 800b244:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800b246:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b24a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b24e:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800b252:	633b      	str	r3, [r7, #48]	@ 0x30
 800b254:	2300      	movs	r3, #0
 800b256:	637b      	str	r3, [r7, #52]	@ 0x34
 800b258:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800b25c:	460b      	mov	r3, r1
 800b25e:	4313      	orrs	r3, r2
 800b260:	d00a      	beq.n	800b278 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800b262:	4b6c      	ldr	r3, [pc, #432]	@ (800b414 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b264:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b266:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800b26a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b26e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b272:	4a68      	ldr	r2, [pc, #416]	@ (800b414 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b274:	430b      	orrs	r3, r1
 800b276:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800b278:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b27c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b280:	2100      	movs	r1, #0
 800b282:	62b9      	str	r1, [r7, #40]	@ 0x28
 800b284:	f003 0301 	and.w	r3, r3, #1
 800b288:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b28a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800b28e:	460b      	mov	r3, r1
 800b290:	4313      	orrs	r3, r2
 800b292:	d011      	beq.n	800b2b8 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b294:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b298:	3308      	adds	r3, #8
 800b29a:	2100      	movs	r1, #0
 800b29c:	4618      	mov	r0, r3
 800b29e:	f001 f99d 	bl	800c5dc <RCCEx_PLL2_Config>
 800b2a2:	4603      	mov	r3, r0
 800b2a4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800b2a8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d003      	beq.n	800b2b8 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b2b0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b2b4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800b2b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b2bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2c0:	2100      	movs	r1, #0
 800b2c2:	6239      	str	r1, [r7, #32]
 800b2c4:	f003 0302 	and.w	r3, r3, #2
 800b2c8:	627b      	str	r3, [r7, #36]	@ 0x24
 800b2ca:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800b2ce:	460b      	mov	r3, r1
 800b2d0:	4313      	orrs	r3, r2
 800b2d2:	d011      	beq.n	800b2f8 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b2d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b2d8:	3308      	adds	r3, #8
 800b2da:	2101      	movs	r1, #1
 800b2dc:	4618      	mov	r0, r3
 800b2de:	f001 f97d 	bl	800c5dc <RCCEx_PLL2_Config>
 800b2e2:	4603      	mov	r3, r0
 800b2e4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800b2e8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d003      	beq.n	800b2f8 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b2f0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b2f4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800b2f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b2fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b300:	2100      	movs	r1, #0
 800b302:	61b9      	str	r1, [r7, #24]
 800b304:	f003 0304 	and.w	r3, r3, #4
 800b308:	61fb      	str	r3, [r7, #28]
 800b30a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800b30e:	460b      	mov	r3, r1
 800b310:	4313      	orrs	r3, r2
 800b312:	d011      	beq.n	800b338 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b314:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b318:	3308      	adds	r3, #8
 800b31a:	2102      	movs	r1, #2
 800b31c:	4618      	mov	r0, r3
 800b31e:	f001 f95d 	bl	800c5dc <RCCEx_PLL2_Config>
 800b322:	4603      	mov	r3, r0
 800b324:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800b328:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d003      	beq.n	800b338 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b330:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b334:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800b338:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b33c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b340:	2100      	movs	r1, #0
 800b342:	6139      	str	r1, [r7, #16]
 800b344:	f003 0308 	and.w	r3, r3, #8
 800b348:	617b      	str	r3, [r7, #20]
 800b34a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800b34e:	460b      	mov	r3, r1
 800b350:	4313      	orrs	r3, r2
 800b352:	d011      	beq.n	800b378 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b354:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b358:	3328      	adds	r3, #40	@ 0x28
 800b35a:	2100      	movs	r1, #0
 800b35c:	4618      	mov	r0, r3
 800b35e:	f001 f9ef 	bl	800c740 <RCCEx_PLL3_Config>
 800b362:	4603      	mov	r3, r0
 800b364:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 800b368:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d003      	beq.n	800b378 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b370:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b374:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800b378:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b37c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b380:	2100      	movs	r1, #0
 800b382:	60b9      	str	r1, [r7, #8]
 800b384:	f003 0310 	and.w	r3, r3, #16
 800b388:	60fb      	str	r3, [r7, #12]
 800b38a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800b38e:	460b      	mov	r3, r1
 800b390:	4313      	orrs	r3, r2
 800b392:	d011      	beq.n	800b3b8 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b394:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b398:	3328      	adds	r3, #40	@ 0x28
 800b39a:	2101      	movs	r1, #1
 800b39c:	4618      	mov	r0, r3
 800b39e:	f001 f9cf 	bl	800c740 <RCCEx_PLL3_Config>
 800b3a2:	4603      	mov	r3, r0
 800b3a4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800b3a8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d003      	beq.n	800b3b8 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b3b0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b3b4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800b3b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b3bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3c0:	2100      	movs	r1, #0
 800b3c2:	6039      	str	r1, [r7, #0]
 800b3c4:	f003 0320 	and.w	r3, r3, #32
 800b3c8:	607b      	str	r3, [r7, #4]
 800b3ca:	e9d7 1200 	ldrd	r1, r2, [r7]
 800b3ce:	460b      	mov	r3, r1
 800b3d0:	4313      	orrs	r3, r2
 800b3d2:	d011      	beq.n	800b3f8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b3d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b3d8:	3328      	adds	r3, #40	@ 0x28
 800b3da:	2102      	movs	r1, #2
 800b3dc:	4618      	mov	r0, r3
 800b3de:	f001 f9af 	bl	800c740 <RCCEx_PLL3_Config>
 800b3e2:	4603      	mov	r3, r0
 800b3e4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800b3e8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d003      	beq.n	800b3f8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b3f0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b3f4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 800b3f8:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d101      	bne.n	800b404 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800b400:	2300      	movs	r3, #0
 800b402:	e000      	b.n	800b406 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800b404:	2301      	movs	r3, #1
}
 800b406:	4618      	mov	r0, r3
 800b408:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 800b40c:	46bd      	mov	sp, r7
 800b40e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b412:	bf00      	nop
 800b414:	58024400 	.word	0x58024400

0800b418 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800b418:	b580      	push	{r7, lr}
 800b41a:	b090      	sub	sp, #64	@ 0x40
 800b41c:	af00      	add	r7, sp, #0
 800b41e:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800b422:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b426:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800b42a:	430b      	orrs	r3, r1
 800b42c:	f040 8094 	bne.w	800b558 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800b430:	4b9b      	ldr	r3, [pc, #620]	@ (800b6a0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b432:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b434:	f003 0307 	and.w	r3, r3, #7
 800b438:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800b43a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b43c:	2b04      	cmp	r3, #4
 800b43e:	f200 8087 	bhi.w	800b550 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800b442:	a201      	add	r2, pc, #4	@ (adr r2, 800b448 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800b444:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b448:	0800b45d 	.word	0x0800b45d
 800b44c:	0800b485 	.word	0x0800b485
 800b450:	0800b4ad 	.word	0x0800b4ad
 800b454:	0800b549 	.word	0x0800b549
 800b458:	0800b4d5 	.word	0x0800b4d5
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b45c:	4b90      	ldr	r3, [pc, #576]	@ (800b6a0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b464:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b468:	d108      	bne.n	800b47c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b46a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b46e:	4618      	mov	r0, r3
 800b470:	f000 ff62 	bl	800c338 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b474:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b476:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b478:	f000 bc93 	b.w	800bda2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b47c:	2300      	movs	r3, #0
 800b47e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b480:	f000 bc8f 	b.w	800bda2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b484:	4b86      	ldr	r3, [pc, #536]	@ (800b6a0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b48c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b490:	d108      	bne.n	800b4a4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b492:	f107 0318 	add.w	r3, r7, #24
 800b496:	4618      	mov	r0, r3
 800b498:	f000 fca6 	bl	800bde8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b49c:	69bb      	ldr	r3, [r7, #24]
 800b49e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b4a0:	f000 bc7f 	b.w	800bda2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b4a4:	2300      	movs	r3, #0
 800b4a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b4a8:	f000 bc7b 	b.w	800bda2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b4ac:	4b7c      	ldr	r3, [pc, #496]	@ (800b6a0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b4b4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b4b8:	d108      	bne.n	800b4cc <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b4ba:	f107 030c 	add.w	r3, r7, #12
 800b4be:	4618      	mov	r0, r3
 800b4c0:	f000 fde6 	bl	800c090 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b4c8:	f000 bc6b 	b.w	800bda2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b4cc:	2300      	movs	r3, #0
 800b4ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b4d0:	f000 bc67 	b.w	800bda2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b4d4:	4b72      	ldr	r3, [pc, #456]	@ (800b6a0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b4d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b4d8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b4dc:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b4de:	4b70      	ldr	r3, [pc, #448]	@ (800b6a0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	f003 0304 	and.w	r3, r3, #4
 800b4e6:	2b04      	cmp	r3, #4
 800b4e8:	d10c      	bne.n	800b504 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800b4ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d109      	bne.n	800b504 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b4f0:	4b6b      	ldr	r3, [pc, #428]	@ (800b6a0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	08db      	lsrs	r3, r3, #3
 800b4f6:	f003 0303 	and.w	r3, r3, #3
 800b4fa:	4a6a      	ldr	r2, [pc, #424]	@ (800b6a4 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800b4fc:	fa22 f303 	lsr.w	r3, r2, r3
 800b500:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b502:	e01f      	b.n	800b544 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b504:	4b66      	ldr	r3, [pc, #408]	@ (800b6a0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b50c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b510:	d106      	bne.n	800b520 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800b512:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b514:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b518:	d102      	bne.n	800b520 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b51a:	4b63      	ldr	r3, [pc, #396]	@ (800b6a8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800b51c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b51e:	e011      	b.n	800b544 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b520:	4b5f      	ldr	r3, [pc, #380]	@ (800b6a0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b528:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b52c:	d106      	bne.n	800b53c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800b52e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b530:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b534:	d102      	bne.n	800b53c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b536:	4b5d      	ldr	r3, [pc, #372]	@ (800b6ac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b538:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b53a:	e003      	b.n	800b544 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b53c:	2300      	movs	r3, #0
 800b53e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800b540:	f000 bc2f 	b.w	800bda2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b544:	f000 bc2d 	b.w	800bda2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b548:	4b59      	ldr	r3, [pc, #356]	@ (800b6b0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800b54a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b54c:	f000 bc29 	b.w	800bda2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800b550:	2300      	movs	r3, #0
 800b552:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b554:	f000 bc25 	b.w	800bda2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800b558:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b55c:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800b560:	430b      	orrs	r3, r1
 800b562:	f040 80a7 	bne.w	800b6b4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800b566:	4b4e      	ldr	r3, [pc, #312]	@ (800b6a0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b568:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b56a:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800b56e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800b570:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b572:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800b576:	d054      	beq.n	800b622 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 800b578:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b57a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800b57e:	f200 808b 	bhi.w	800b698 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800b582:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b584:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800b588:	f000 8083 	beq.w	800b692 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 800b58c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b58e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800b592:	f200 8081 	bhi.w	800b698 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800b596:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b598:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b59c:	d02f      	beq.n	800b5fe <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800b59e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5a0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b5a4:	d878      	bhi.n	800b698 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800b5a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d004      	beq.n	800b5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 800b5ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5ae:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b5b2:	d012      	beq.n	800b5da <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 800b5b4:	e070      	b.n	800b698 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b5b6:	4b3a      	ldr	r3, [pc, #232]	@ (800b6a0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b5be:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b5c2:	d107      	bne.n	800b5d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b5c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b5c8:	4618      	mov	r0, r3
 800b5ca:	f000 feb5 	bl	800c338 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b5ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b5d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b5d2:	e3e6      	b.n	800bda2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b5d4:	2300      	movs	r3, #0
 800b5d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b5d8:	e3e3      	b.n	800bda2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b5da:	4b31      	ldr	r3, [pc, #196]	@ (800b6a0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b5e2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b5e6:	d107      	bne.n	800b5f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b5e8:	f107 0318 	add.w	r3, r7, #24
 800b5ec:	4618      	mov	r0, r3
 800b5ee:	f000 fbfb 	bl	800bde8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b5f2:	69bb      	ldr	r3, [r7, #24]
 800b5f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b5f6:	e3d4      	b.n	800bda2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b5f8:	2300      	movs	r3, #0
 800b5fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b5fc:	e3d1      	b.n	800bda2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b5fe:	4b28      	ldr	r3, [pc, #160]	@ (800b6a0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b606:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b60a:	d107      	bne.n	800b61c <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b60c:	f107 030c 	add.w	r3, r7, #12
 800b610:	4618      	mov	r0, r3
 800b612:	f000 fd3d 	bl	800c090 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b616:	68fb      	ldr	r3, [r7, #12]
 800b618:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b61a:	e3c2      	b.n	800bda2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b61c:	2300      	movs	r3, #0
 800b61e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b620:	e3bf      	b.n	800bda2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b622:	4b1f      	ldr	r3, [pc, #124]	@ (800b6a0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b624:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b626:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b62a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b62c:	4b1c      	ldr	r3, [pc, #112]	@ (800b6a0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	f003 0304 	and.w	r3, r3, #4
 800b634:	2b04      	cmp	r3, #4
 800b636:	d10c      	bne.n	800b652 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 800b638:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d109      	bne.n	800b652 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b63e:	4b18      	ldr	r3, [pc, #96]	@ (800b6a0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	08db      	lsrs	r3, r3, #3
 800b644:	f003 0303 	and.w	r3, r3, #3
 800b648:	4a16      	ldr	r2, [pc, #88]	@ (800b6a4 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800b64a:	fa22 f303 	lsr.w	r3, r2, r3
 800b64e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b650:	e01e      	b.n	800b690 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b652:	4b13      	ldr	r3, [pc, #76]	@ (800b6a0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b65a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b65e:	d106      	bne.n	800b66e <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 800b660:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b662:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b666:	d102      	bne.n	800b66e <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b668:	4b0f      	ldr	r3, [pc, #60]	@ (800b6a8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800b66a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b66c:	e010      	b.n	800b690 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b66e:	4b0c      	ldr	r3, [pc, #48]	@ (800b6a0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b676:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b67a:	d106      	bne.n	800b68a <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800b67c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b67e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b682:	d102      	bne.n	800b68a <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b684:	4b09      	ldr	r3, [pc, #36]	@ (800b6ac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b686:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b688:	e002      	b.n	800b690 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b68a:	2300      	movs	r3, #0
 800b68c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800b68e:	e388      	b.n	800bda2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b690:	e387      	b.n	800bda2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b692:	4b07      	ldr	r3, [pc, #28]	@ (800b6b0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800b694:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b696:	e384      	b.n	800bda2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800b698:	2300      	movs	r3, #0
 800b69a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b69c:	e381      	b.n	800bda2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b69e:	bf00      	nop
 800b6a0:	58024400 	.word	0x58024400
 800b6a4:	03d09000 	.word	0x03d09000
 800b6a8:	003d0900 	.word	0x003d0900
 800b6ac:	016e3600 	.word	0x016e3600
 800b6b0:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800b6b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b6b8:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800b6bc:	430b      	orrs	r3, r1
 800b6be:	f040 809c 	bne.w	800b7fa <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800b6c2:	4b9e      	ldr	r3, [pc, #632]	@ (800b93c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b6c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b6c6:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800b6ca:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800b6cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6ce:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b6d2:	d054      	beq.n	800b77e <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 800b6d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6d6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b6da:	f200 808b 	bhi.w	800b7f4 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800b6de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6e0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800b6e4:	f000 8083 	beq.w	800b7ee <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 800b6e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6ea:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800b6ee:	f200 8081 	bhi.w	800b7f4 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800b6f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6f4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b6f8:	d02f      	beq.n	800b75a <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800b6fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6fc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b700:	d878      	bhi.n	800b7f4 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800b702:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b704:	2b00      	cmp	r3, #0
 800b706:	d004      	beq.n	800b712 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800b708:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b70a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b70e:	d012      	beq.n	800b736 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800b710:	e070      	b.n	800b7f4 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b712:	4b8a      	ldr	r3, [pc, #552]	@ (800b93c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b71a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b71e:	d107      	bne.n	800b730 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b720:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b724:	4618      	mov	r0, r3
 800b726:	f000 fe07 	bl	800c338 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b72a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b72c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b72e:	e338      	b.n	800bda2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b730:	2300      	movs	r3, #0
 800b732:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b734:	e335      	b.n	800bda2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b736:	4b81      	ldr	r3, [pc, #516]	@ (800b93c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b73e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b742:	d107      	bne.n	800b754 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b744:	f107 0318 	add.w	r3, r7, #24
 800b748:	4618      	mov	r0, r3
 800b74a:	f000 fb4d 	bl	800bde8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b74e:	69bb      	ldr	r3, [r7, #24]
 800b750:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b752:	e326      	b.n	800bda2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b754:	2300      	movs	r3, #0
 800b756:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b758:	e323      	b.n	800bda2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b75a:	4b78      	ldr	r3, [pc, #480]	@ (800b93c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b762:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b766:	d107      	bne.n	800b778 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b768:	f107 030c 	add.w	r3, r7, #12
 800b76c:	4618      	mov	r0, r3
 800b76e:	f000 fc8f 	bl	800c090 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b776:	e314      	b.n	800bda2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b778:	2300      	movs	r3, #0
 800b77a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b77c:	e311      	b.n	800bda2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b77e:	4b6f      	ldr	r3, [pc, #444]	@ (800b93c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b780:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b782:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b786:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b788:	4b6c      	ldr	r3, [pc, #432]	@ (800b93c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	f003 0304 	and.w	r3, r3, #4
 800b790:	2b04      	cmp	r3, #4
 800b792:	d10c      	bne.n	800b7ae <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800b794:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b796:	2b00      	cmp	r3, #0
 800b798:	d109      	bne.n	800b7ae <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b79a:	4b68      	ldr	r3, [pc, #416]	@ (800b93c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	08db      	lsrs	r3, r3, #3
 800b7a0:	f003 0303 	and.w	r3, r3, #3
 800b7a4:	4a66      	ldr	r2, [pc, #408]	@ (800b940 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800b7a6:	fa22 f303 	lsr.w	r3, r2, r3
 800b7aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b7ac:	e01e      	b.n	800b7ec <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b7ae:	4b63      	ldr	r3, [pc, #396]	@ (800b93c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b7b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b7ba:	d106      	bne.n	800b7ca <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800b7bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b7be:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b7c2:	d102      	bne.n	800b7ca <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b7c4:	4b5f      	ldr	r3, [pc, #380]	@ (800b944 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800b7c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b7c8:	e010      	b.n	800b7ec <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b7ca:	4b5c      	ldr	r3, [pc, #368]	@ (800b93c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b7d2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b7d6:	d106      	bne.n	800b7e6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 800b7d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b7da:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b7de:	d102      	bne.n	800b7e6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b7e0:	4b59      	ldr	r3, [pc, #356]	@ (800b948 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b7e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b7e4:	e002      	b.n	800b7ec <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b7e6:	2300      	movs	r3, #0
 800b7e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800b7ea:	e2da      	b.n	800bda2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b7ec:	e2d9      	b.n	800bda2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b7ee:	4b57      	ldr	r3, [pc, #348]	@ (800b94c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800b7f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b7f2:	e2d6      	b.n	800bda2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800b7f4:	2300      	movs	r3, #0
 800b7f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b7f8:	e2d3      	b.n	800bda2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800b7fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b7fe:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800b802:	430b      	orrs	r3, r1
 800b804:	f040 80a7 	bne.w	800b956 <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800b808:	4b4c      	ldr	r3, [pc, #304]	@ (800b93c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b80a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b80c:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800b810:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800b812:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b814:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b818:	d055      	beq.n	800b8c6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 800b81a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b81c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b820:	f200 8096 	bhi.w	800b950 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800b824:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b826:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b82a:	f000 8084 	beq.w	800b936 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 800b82e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b830:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b834:	f200 808c 	bhi.w	800b950 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800b838:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b83a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b83e:	d030      	beq.n	800b8a2 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800b840:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b842:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b846:	f200 8083 	bhi.w	800b950 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800b84a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d004      	beq.n	800b85a <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 800b850:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b852:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b856:	d012      	beq.n	800b87e <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800b858:	e07a      	b.n	800b950 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b85a:	4b38      	ldr	r3, [pc, #224]	@ (800b93c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b862:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b866:	d107      	bne.n	800b878 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b868:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b86c:	4618      	mov	r0, r3
 800b86e:	f000 fd63 	bl	800c338 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b872:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b874:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b876:	e294      	b.n	800bda2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b878:	2300      	movs	r3, #0
 800b87a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b87c:	e291      	b.n	800bda2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b87e:	4b2f      	ldr	r3, [pc, #188]	@ (800b93c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b886:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b88a:	d107      	bne.n	800b89c <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b88c:	f107 0318 	add.w	r3, r7, #24
 800b890:	4618      	mov	r0, r3
 800b892:	f000 faa9 	bl	800bde8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b896:	69bb      	ldr	r3, [r7, #24]
 800b898:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b89a:	e282      	b.n	800bda2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b89c:	2300      	movs	r3, #0
 800b89e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b8a0:	e27f      	b.n	800bda2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b8a2:	4b26      	ldr	r3, [pc, #152]	@ (800b93c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b8aa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b8ae:	d107      	bne.n	800b8c0 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b8b0:	f107 030c 	add.w	r3, r7, #12
 800b8b4:	4618      	mov	r0, r3
 800b8b6:	f000 fbeb 	bl	800c090 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b8be:	e270      	b.n	800bda2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b8c0:	2300      	movs	r3, #0
 800b8c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b8c4:	e26d      	b.n	800bda2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b8c6:	4b1d      	ldr	r3, [pc, #116]	@ (800b93c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b8c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b8ca:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b8ce:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b8d0:	4b1a      	ldr	r3, [pc, #104]	@ (800b93c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	f003 0304 	and.w	r3, r3, #4
 800b8d8:	2b04      	cmp	r3, #4
 800b8da:	d10c      	bne.n	800b8f6 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 800b8dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d109      	bne.n	800b8f6 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b8e2:	4b16      	ldr	r3, [pc, #88]	@ (800b93c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	08db      	lsrs	r3, r3, #3
 800b8e8:	f003 0303 	and.w	r3, r3, #3
 800b8ec:	4a14      	ldr	r2, [pc, #80]	@ (800b940 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800b8ee:	fa22 f303 	lsr.w	r3, r2, r3
 800b8f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b8f4:	e01e      	b.n	800b934 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b8f6:	4b11      	ldr	r3, [pc, #68]	@ (800b93c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b8fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b902:	d106      	bne.n	800b912 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800b904:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b906:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b90a:	d102      	bne.n	800b912 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b90c:	4b0d      	ldr	r3, [pc, #52]	@ (800b944 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800b90e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b910:	e010      	b.n	800b934 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b912:	4b0a      	ldr	r3, [pc, #40]	@ (800b93c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b91a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b91e:	d106      	bne.n	800b92e <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 800b920:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b922:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b926:	d102      	bne.n	800b92e <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b928:	4b07      	ldr	r3, [pc, #28]	@ (800b948 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b92a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b92c:	e002      	b.n	800b934 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b92e:	2300      	movs	r3, #0
 800b930:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800b932:	e236      	b.n	800bda2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b934:	e235      	b.n	800bda2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b936:	4b05      	ldr	r3, [pc, #20]	@ (800b94c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800b938:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b93a:	e232      	b.n	800bda2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b93c:	58024400 	.word	0x58024400
 800b940:	03d09000 	.word	0x03d09000
 800b944:	003d0900 	.word	0x003d0900
 800b948:	016e3600 	.word	0x016e3600
 800b94c:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 800b950:	2300      	movs	r3, #0
 800b952:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b954:	e225      	b.n	800bda2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800b956:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b95a:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800b95e:	430b      	orrs	r3, r1
 800b960:	f040 8085 	bne.w	800ba6e <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800b964:	4b9c      	ldr	r3, [pc, #624]	@ (800bbd8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b966:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b968:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800b96c:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800b96e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b970:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800b974:	d06b      	beq.n	800ba4e <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800b976:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b978:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800b97c:	d874      	bhi.n	800ba68 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800b97e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b980:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b984:	d056      	beq.n	800ba34 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 800b986:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b988:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b98c:	d86c      	bhi.n	800ba68 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800b98e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b990:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b994:	d03b      	beq.n	800ba0e <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800b996:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b998:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b99c:	d864      	bhi.n	800ba68 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800b99e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9a0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b9a4:	d021      	beq.n	800b9ea <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800b9a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9a8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b9ac:	d85c      	bhi.n	800ba68 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800b9ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d004      	beq.n	800b9be <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 800b9b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9b6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b9ba:	d004      	beq.n	800b9c6 <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 800b9bc:	e054      	b.n	800ba68 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800b9be:	f7fe fb5f 	bl	800a080 <HAL_RCC_GetPCLK1Freq>
 800b9c2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b9c4:	e1ed      	b.n	800bda2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b9c6:	4b84      	ldr	r3, [pc, #528]	@ (800bbd8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b9ce:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b9d2:	d107      	bne.n	800b9e4 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b9d4:	f107 0318 	add.w	r3, r7, #24
 800b9d8:	4618      	mov	r0, r3
 800b9da:	f000 fa05 	bl	800bde8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b9de:	69fb      	ldr	r3, [r7, #28]
 800b9e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b9e2:	e1de      	b.n	800bda2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b9e4:	2300      	movs	r3, #0
 800b9e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b9e8:	e1db      	b.n	800bda2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b9ea:	4b7b      	ldr	r3, [pc, #492]	@ (800bbd8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b9f2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b9f6:	d107      	bne.n	800ba08 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b9f8:	f107 030c 	add.w	r3, r7, #12
 800b9fc:	4618      	mov	r0, r3
 800b9fe:	f000 fb47 	bl	800c090 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800ba02:	693b      	ldr	r3, [r7, #16]
 800ba04:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ba06:	e1cc      	b.n	800bda2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ba08:	2300      	movs	r3, #0
 800ba0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ba0c:	e1c9      	b.n	800bda2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ba0e:	4b72      	ldr	r3, [pc, #456]	@ (800bbd8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	f003 0304 	and.w	r3, r3, #4
 800ba16:	2b04      	cmp	r3, #4
 800ba18:	d109      	bne.n	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ba1a:	4b6f      	ldr	r3, [pc, #444]	@ (800bbd8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	08db      	lsrs	r3, r3, #3
 800ba20:	f003 0303 	and.w	r3, r3, #3
 800ba24:	4a6d      	ldr	r2, [pc, #436]	@ (800bbdc <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800ba26:	fa22 f303 	lsr.w	r3, r2, r3
 800ba2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ba2c:	e1b9      	b.n	800bda2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ba2e:	2300      	movs	r3, #0
 800ba30:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ba32:	e1b6      	b.n	800bda2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800ba34:	4b68      	ldr	r3, [pc, #416]	@ (800bbd8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ba3c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ba40:	d102      	bne.n	800ba48 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 800ba42:	4b67      	ldr	r3, [pc, #412]	@ (800bbe0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800ba44:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ba46:	e1ac      	b.n	800bda2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ba48:	2300      	movs	r3, #0
 800ba4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ba4c:	e1a9      	b.n	800bda2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800ba4e:	4b62      	ldr	r3, [pc, #392]	@ (800bbd8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ba56:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ba5a:	d102      	bne.n	800ba62 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 800ba5c:	4b61      	ldr	r3, [pc, #388]	@ (800bbe4 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800ba5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ba60:	e19f      	b.n	800bda2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ba62:	2300      	movs	r3, #0
 800ba64:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ba66:	e19c      	b.n	800bda2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800ba68:	2300      	movs	r3, #0
 800ba6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ba6c:	e199      	b.n	800bda2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800ba6e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ba72:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800ba76:	430b      	orrs	r3, r1
 800ba78:	d173      	bne.n	800bb62 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800ba7a:	4b57      	ldr	r3, [pc, #348]	@ (800bbd8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800ba7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ba7e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800ba82:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800ba84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba86:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ba8a:	d02f      	beq.n	800baec <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 800ba8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba8e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ba92:	d863      	bhi.n	800bb5c <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 800ba94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d004      	beq.n	800baa4 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 800ba9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800baa0:	d012      	beq.n	800bac8 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 800baa2:	e05b      	b.n	800bb5c <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800baa4:	4b4c      	ldr	r3, [pc, #304]	@ (800bbd8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800baac:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800bab0:	d107      	bne.n	800bac2 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bab2:	f107 0318 	add.w	r3, r7, #24
 800bab6:	4618      	mov	r0, r3
 800bab8:	f000 f996 	bl	800bde8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800babc:	69bb      	ldr	r3, [r7, #24]
 800babe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bac0:	e16f      	b.n	800bda2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bac2:	2300      	movs	r3, #0
 800bac4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bac6:	e16c      	b.n	800bda2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bac8:	4b43      	ldr	r3, [pc, #268]	@ (800bbd8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800bad0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bad4:	d107      	bne.n	800bae6 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bad6:	f107 030c 	add.w	r3, r7, #12
 800bada:	4618      	mov	r0, r3
 800badc:	f000 fad8 	bl	800c090 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800bae0:	697b      	ldr	r3, [r7, #20]
 800bae2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bae4:	e15d      	b.n	800bda2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bae6:	2300      	movs	r3, #0
 800bae8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800baea:	e15a      	b.n	800bda2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800baec:	4b3a      	ldr	r3, [pc, #232]	@ (800bbd8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800baee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800baf0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800baf4:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800baf6:	4b38      	ldr	r3, [pc, #224]	@ (800bbd8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	f003 0304 	and.w	r3, r3, #4
 800bafe:	2b04      	cmp	r3, #4
 800bb00:	d10c      	bne.n	800bb1c <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800bb02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d109      	bne.n	800bb1c <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bb08:	4b33      	ldr	r3, [pc, #204]	@ (800bbd8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	08db      	lsrs	r3, r3, #3
 800bb0e:	f003 0303 	and.w	r3, r3, #3
 800bb12:	4a32      	ldr	r2, [pc, #200]	@ (800bbdc <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800bb14:	fa22 f303 	lsr.w	r3, r2, r3
 800bb18:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bb1a:	e01e      	b.n	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800bb1c:	4b2e      	ldr	r3, [pc, #184]	@ (800bbd8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bb24:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bb28:	d106      	bne.n	800bb38 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800bb2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bb2c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bb30:	d102      	bne.n	800bb38 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800bb32:	4b2b      	ldr	r3, [pc, #172]	@ (800bbe0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800bb34:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bb36:	e010      	b.n	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800bb38:	4b27      	ldr	r3, [pc, #156]	@ (800bbd8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bb40:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bb44:	d106      	bne.n	800bb54 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 800bb46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bb48:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bb4c:	d102      	bne.n	800bb54 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800bb4e:	4b25      	ldr	r3, [pc, #148]	@ (800bbe4 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800bb50:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bb52:	e002      	b.n	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800bb54:	2300      	movs	r3, #0
 800bb56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800bb58:	e123      	b.n	800bda2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800bb5a:	e122      	b.n	800bda2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800bb5c:	2300      	movs	r3, #0
 800bb5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bb60:	e11f      	b.n	800bda2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800bb62:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bb66:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800bb6a:	430b      	orrs	r3, r1
 800bb6c:	d13c      	bne.n	800bbe8 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800bb6e:	4b1a      	ldr	r3, [pc, #104]	@ (800bbd8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800bb70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bb72:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800bb76:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800bb78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d004      	beq.n	800bb88 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800bb7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bb84:	d012      	beq.n	800bbac <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 800bb86:	e023      	b.n	800bbd0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bb88:	4b13      	ldr	r3, [pc, #76]	@ (800bbd8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800bb90:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800bb94:	d107      	bne.n	800bba6 <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bb96:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800bb9a:	4618      	mov	r0, r3
 800bb9c:	f000 fbcc 	bl	800c338 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bba0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bba2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bba4:	e0fd      	b.n	800bda2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bba6:	2300      	movs	r3, #0
 800bba8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bbaa:	e0fa      	b.n	800bda2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bbac:	4b0a      	ldr	r3, [pc, #40]	@ (800bbd8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800bbb4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800bbb8:	d107      	bne.n	800bbca <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bbba:	f107 0318 	add.w	r3, r7, #24
 800bbbe:	4618      	mov	r0, r3
 800bbc0:	f000 f912 	bl	800bde8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800bbc4:	6a3b      	ldr	r3, [r7, #32]
 800bbc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bbc8:	e0eb      	b.n	800bda2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bbca:	2300      	movs	r3, #0
 800bbcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bbce:	e0e8      	b.n	800bda2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800bbd0:	2300      	movs	r3, #0
 800bbd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bbd4:	e0e5      	b.n	800bda2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800bbd6:	bf00      	nop
 800bbd8:	58024400 	.word	0x58024400
 800bbdc:	03d09000 	.word	0x03d09000
 800bbe0:	003d0900 	.word	0x003d0900
 800bbe4:	016e3600 	.word	0x016e3600
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800bbe8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bbec:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800bbf0:	430b      	orrs	r3, r1
 800bbf2:	f040 8085 	bne.w	800bd00 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800bbf6:	4b6d      	ldr	r3, [pc, #436]	@ (800bdac <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800bbf8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bbfa:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800bbfe:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800bc00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc02:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800bc06:	d06b      	beq.n	800bce0 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 800bc08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc0a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800bc0e:	d874      	bhi.n	800bcfa <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800bc10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc12:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bc16:	d056      	beq.n	800bcc6 <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 800bc18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc1a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bc1e:	d86c      	bhi.n	800bcfa <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800bc20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc22:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800bc26:	d03b      	beq.n	800bca0 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 800bc28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc2a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800bc2e:	d864      	bhi.n	800bcfa <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800bc30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc32:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bc36:	d021      	beq.n	800bc7c <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 800bc38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc3a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bc3e:	d85c      	bhi.n	800bcfa <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800bc40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d004      	beq.n	800bc50 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 800bc46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc48:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bc4c:	d004      	beq.n	800bc58 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800bc4e:	e054      	b.n	800bcfa <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800bc50:	f000 f8b4 	bl	800bdbc <HAL_RCCEx_GetD3PCLK1Freq>
 800bc54:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800bc56:	e0a4      	b.n	800bda2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bc58:	4b54      	ldr	r3, [pc, #336]	@ (800bdac <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800bc60:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800bc64:	d107      	bne.n	800bc76 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bc66:	f107 0318 	add.w	r3, r7, #24
 800bc6a:	4618      	mov	r0, r3
 800bc6c:	f000 f8bc 	bl	800bde8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800bc70:	69fb      	ldr	r3, [r7, #28]
 800bc72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bc74:	e095      	b.n	800bda2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bc76:	2300      	movs	r3, #0
 800bc78:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bc7a:	e092      	b.n	800bda2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bc7c:	4b4b      	ldr	r3, [pc, #300]	@ (800bdac <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800bc84:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bc88:	d107      	bne.n	800bc9a <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bc8a:	f107 030c 	add.w	r3, r7, #12
 800bc8e:	4618      	mov	r0, r3
 800bc90:	f000 f9fe 	bl	800c090 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800bc94:	693b      	ldr	r3, [r7, #16]
 800bc96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bc98:	e083      	b.n	800bda2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bc9a:	2300      	movs	r3, #0
 800bc9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bc9e:	e080      	b.n	800bda2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800bca0:	4b42      	ldr	r3, [pc, #264]	@ (800bdac <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	f003 0304 	and.w	r3, r3, #4
 800bca8:	2b04      	cmp	r3, #4
 800bcaa:	d109      	bne.n	800bcc0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bcac:	4b3f      	ldr	r3, [pc, #252]	@ (800bdac <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	08db      	lsrs	r3, r3, #3
 800bcb2:	f003 0303 	and.w	r3, r3, #3
 800bcb6:	4a3e      	ldr	r2, [pc, #248]	@ (800bdb0 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800bcb8:	fa22 f303 	lsr.w	r3, r2, r3
 800bcbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bcbe:	e070      	b.n	800bda2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bcc0:	2300      	movs	r3, #0
 800bcc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bcc4:	e06d      	b.n	800bda2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800bcc6:	4b39      	ldr	r3, [pc, #228]	@ (800bdac <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bcce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bcd2:	d102      	bne.n	800bcda <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 800bcd4:	4b37      	ldr	r3, [pc, #220]	@ (800bdb4 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800bcd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bcd8:	e063      	b.n	800bda2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bcda:	2300      	movs	r3, #0
 800bcdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bcde:	e060      	b.n	800bda2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800bce0:	4b32      	ldr	r3, [pc, #200]	@ (800bdac <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bce8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bcec:	d102      	bne.n	800bcf4 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 800bcee:	4b32      	ldr	r3, [pc, #200]	@ (800bdb8 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800bcf0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bcf2:	e056      	b.n	800bda2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bcf4:	2300      	movs	r3, #0
 800bcf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bcf8:	e053      	b.n	800bda2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800bcfa:	2300      	movs	r3, #0
 800bcfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bcfe:	e050      	b.n	800bda2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800bd00:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bd04:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800bd08:	430b      	orrs	r3, r1
 800bd0a:	d148      	bne.n	800bd9e <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800bd0c:	4b27      	ldr	r3, [pc, #156]	@ (800bdac <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800bd0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bd10:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800bd14:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800bd16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd18:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bd1c:	d02a      	beq.n	800bd74 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800bd1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd20:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bd24:	d838      	bhi.n	800bd98 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800bd26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d004      	beq.n	800bd36 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800bd2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd2e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bd32:	d00d      	beq.n	800bd50 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800bd34:	e030      	b.n	800bd98 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800bd36:	4b1d      	ldr	r3, [pc, #116]	@ (800bdac <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bd3e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bd42:	d102      	bne.n	800bd4a <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 800bd44:	4b1c      	ldr	r3, [pc, #112]	@ (800bdb8 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800bd46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bd48:	e02b      	b.n	800bda2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bd4a:	2300      	movs	r3, #0
 800bd4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bd4e:	e028      	b.n	800bda2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bd50:	4b16      	ldr	r3, [pc, #88]	@ (800bdac <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800bd58:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800bd5c:	d107      	bne.n	800bd6e <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bd5e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800bd62:	4618      	mov	r0, r3
 800bd64:	f000 fae8 	bl	800c338 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bd68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bd6c:	e019      	b.n	800bda2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bd6e:	2300      	movs	r3, #0
 800bd70:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bd72:	e016      	b.n	800bda2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bd74:	4b0d      	ldr	r3, [pc, #52]	@ (800bdac <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800bd7c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800bd80:	d107      	bne.n	800bd92 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bd82:	f107 0318 	add.w	r3, r7, #24
 800bd86:	4618      	mov	r0, r3
 800bd88:	f000 f82e 	bl	800bde8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800bd8c:	69fb      	ldr	r3, [r7, #28]
 800bd8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bd90:	e007      	b.n	800bda2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bd92:	2300      	movs	r3, #0
 800bd94:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bd96:	e004      	b.n	800bda2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800bd98:	2300      	movs	r3, #0
 800bd9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bd9c:	e001      	b.n	800bda2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 800bd9e:	2300      	movs	r3, #0
 800bda0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800bda2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800bda4:	4618      	mov	r0, r3
 800bda6:	3740      	adds	r7, #64	@ 0x40
 800bda8:	46bd      	mov	sp, r7
 800bdaa:	bd80      	pop	{r7, pc}
 800bdac:	58024400 	.word	0x58024400
 800bdb0:	03d09000 	.word	0x03d09000
 800bdb4:	003d0900 	.word	0x003d0900
 800bdb8:	016e3600 	.word	0x016e3600

0800bdbc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800bdbc:	b580      	push	{r7, lr}
 800bdbe:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800bdc0:	f7fe f92e 	bl	800a020 <HAL_RCC_GetHCLKFreq>
 800bdc4:	4602      	mov	r2, r0
 800bdc6:	4b06      	ldr	r3, [pc, #24]	@ (800bde0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800bdc8:	6a1b      	ldr	r3, [r3, #32]
 800bdca:	091b      	lsrs	r3, r3, #4
 800bdcc:	f003 0307 	and.w	r3, r3, #7
 800bdd0:	4904      	ldr	r1, [pc, #16]	@ (800bde4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800bdd2:	5ccb      	ldrb	r3, [r1, r3]
 800bdd4:	f003 031f 	and.w	r3, r3, #31
 800bdd8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800bddc:	4618      	mov	r0, r3
 800bdde:	bd80      	pop	{r7, pc}
 800bde0:	58024400 	.word	0x58024400
 800bde4:	08018480 	.word	0x08018480

0800bde8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800bde8:	b480      	push	{r7}
 800bdea:	b089      	sub	sp, #36	@ 0x24
 800bdec:	af00      	add	r7, sp, #0
 800bdee:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800bdf0:	4ba1      	ldr	r3, [pc, #644]	@ (800c078 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bdf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bdf4:	f003 0303 	and.w	r3, r3, #3
 800bdf8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800bdfa:	4b9f      	ldr	r3, [pc, #636]	@ (800c078 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bdfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bdfe:	0b1b      	lsrs	r3, r3, #12
 800be00:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800be04:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800be06:	4b9c      	ldr	r3, [pc, #624]	@ (800c078 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800be08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be0a:	091b      	lsrs	r3, r3, #4
 800be0c:	f003 0301 	and.w	r3, r3, #1
 800be10:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800be12:	4b99      	ldr	r3, [pc, #612]	@ (800c078 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800be14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800be16:	08db      	lsrs	r3, r3, #3
 800be18:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800be1c:	693a      	ldr	r2, [r7, #16]
 800be1e:	fb02 f303 	mul.w	r3, r2, r3
 800be22:	ee07 3a90 	vmov	s15, r3
 800be26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be2a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800be2e:	697b      	ldr	r3, [r7, #20]
 800be30:	2b00      	cmp	r3, #0
 800be32:	f000 8111 	beq.w	800c058 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800be36:	69bb      	ldr	r3, [r7, #24]
 800be38:	2b02      	cmp	r3, #2
 800be3a:	f000 8083 	beq.w	800bf44 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800be3e:	69bb      	ldr	r3, [r7, #24]
 800be40:	2b02      	cmp	r3, #2
 800be42:	f200 80a1 	bhi.w	800bf88 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800be46:	69bb      	ldr	r3, [r7, #24]
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d003      	beq.n	800be54 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800be4c:	69bb      	ldr	r3, [r7, #24]
 800be4e:	2b01      	cmp	r3, #1
 800be50:	d056      	beq.n	800bf00 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800be52:	e099      	b.n	800bf88 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800be54:	4b88      	ldr	r3, [pc, #544]	@ (800c078 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	f003 0320 	and.w	r3, r3, #32
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d02d      	beq.n	800bebc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800be60:	4b85      	ldr	r3, [pc, #532]	@ (800c078 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	08db      	lsrs	r3, r3, #3
 800be66:	f003 0303 	and.w	r3, r3, #3
 800be6a:	4a84      	ldr	r2, [pc, #528]	@ (800c07c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800be6c:	fa22 f303 	lsr.w	r3, r2, r3
 800be70:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800be72:	68bb      	ldr	r3, [r7, #8]
 800be74:	ee07 3a90 	vmov	s15, r3
 800be78:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800be7c:	697b      	ldr	r3, [r7, #20]
 800be7e:	ee07 3a90 	vmov	s15, r3
 800be82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800be8a:	4b7b      	ldr	r3, [pc, #492]	@ (800c078 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800be8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800be8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800be92:	ee07 3a90 	vmov	s15, r3
 800be96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800be9a:	ed97 6a03 	vldr	s12, [r7, #12]
 800be9e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800c080 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bea2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bea6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800beaa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800beae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800beb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800beb6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800beba:	e087      	b.n	800bfcc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bebc:	697b      	ldr	r3, [r7, #20]
 800bebe:	ee07 3a90 	vmov	s15, r3
 800bec2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bec6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800c084 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800beca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bece:	4b6a      	ldr	r3, [pc, #424]	@ (800c078 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bed0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bed2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bed6:	ee07 3a90 	vmov	s15, r3
 800beda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bede:	ed97 6a03 	vldr	s12, [r7, #12]
 800bee2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800c080 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bee6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800beea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800beee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bef2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bef6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800befa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800befe:	e065      	b.n	800bfcc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bf00:	697b      	ldr	r3, [r7, #20]
 800bf02:	ee07 3a90 	vmov	s15, r3
 800bf06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf0a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800c088 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800bf0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bf12:	4b59      	ldr	r3, [pc, #356]	@ (800c078 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bf14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bf16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bf1a:	ee07 3a90 	vmov	s15, r3
 800bf1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bf22:	ed97 6a03 	vldr	s12, [r7, #12]
 800bf26:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800c080 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bf2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bf2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bf32:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bf36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bf3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bf3e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bf42:	e043      	b.n	800bfcc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bf44:	697b      	ldr	r3, [r7, #20]
 800bf46:	ee07 3a90 	vmov	s15, r3
 800bf4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf4e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800c08c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800bf52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bf56:	4b48      	ldr	r3, [pc, #288]	@ (800c078 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bf58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bf5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bf5e:	ee07 3a90 	vmov	s15, r3
 800bf62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bf66:	ed97 6a03 	vldr	s12, [r7, #12]
 800bf6a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800c080 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bf6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bf72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bf76:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bf7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bf7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bf82:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bf86:	e021      	b.n	800bfcc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bf88:	697b      	ldr	r3, [r7, #20]
 800bf8a:	ee07 3a90 	vmov	s15, r3
 800bf8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf92:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800c088 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800bf96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bf9a:	4b37      	ldr	r3, [pc, #220]	@ (800c078 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bf9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bf9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bfa2:	ee07 3a90 	vmov	s15, r3
 800bfa6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bfaa:	ed97 6a03 	vldr	s12, [r7, #12]
 800bfae:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800c080 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bfb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bfb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bfba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bfbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bfc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bfc6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bfca:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800bfcc:	4b2a      	ldr	r3, [pc, #168]	@ (800c078 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bfce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bfd0:	0a5b      	lsrs	r3, r3, #9
 800bfd2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bfd6:	ee07 3a90 	vmov	s15, r3
 800bfda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bfde:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bfe2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bfe6:	edd7 6a07 	vldr	s13, [r7, #28]
 800bfea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bfee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bff2:	ee17 2a90 	vmov	r2, s15
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800bffa:	4b1f      	ldr	r3, [pc, #124]	@ (800c078 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bffc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bffe:	0c1b      	lsrs	r3, r3, #16
 800c000:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c004:	ee07 3a90 	vmov	s15, r3
 800c008:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c00c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c010:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c014:	edd7 6a07 	vldr	s13, [r7, #28]
 800c018:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c01c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c020:	ee17 2a90 	vmov	r2, s15
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800c028:	4b13      	ldr	r3, [pc, #76]	@ (800c078 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c02a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c02c:	0e1b      	lsrs	r3, r3, #24
 800c02e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c032:	ee07 3a90 	vmov	s15, r3
 800c036:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c03a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c03e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c042:	edd7 6a07 	vldr	s13, [r7, #28]
 800c046:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c04a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c04e:	ee17 2a90 	vmov	r2, s15
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800c056:	e008      	b.n	800c06a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	2200      	movs	r2, #0
 800c05c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	2200      	movs	r2, #0
 800c062:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	2200      	movs	r2, #0
 800c068:	609a      	str	r2, [r3, #8]
}
 800c06a:	bf00      	nop
 800c06c:	3724      	adds	r7, #36	@ 0x24
 800c06e:	46bd      	mov	sp, r7
 800c070:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c074:	4770      	bx	lr
 800c076:	bf00      	nop
 800c078:	58024400 	.word	0x58024400
 800c07c:	03d09000 	.word	0x03d09000
 800c080:	46000000 	.word	0x46000000
 800c084:	4c742400 	.word	0x4c742400
 800c088:	4a742400 	.word	0x4a742400
 800c08c:	4bb71b00 	.word	0x4bb71b00

0800c090 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800c090:	b480      	push	{r7}
 800c092:	b089      	sub	sp, #36	@ 0x24
 800c094:	af00      	add	r7, sp, #0
 800c096:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c098:	4ba1      	ldr	r3, [pc, #644]	@ (800c320 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c09a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c09c:	f003 0303 	and.w	r3, r3, #3
 800c0a0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800c0a2:	4b9f      	ldr	r3, [pc, #636]	@ (800c320 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c0a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c0a6:	0d1b      	lsrs	r3, r3, #20
 800c0a8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c0ac:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800c0ae:	4b9c      	ldr	r3, [pc, #624]	@ (800c320 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c0b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c0b2:	0a1b      	lsrs	r3, r3, #8
 800c0b4:	f003 0301 	and.w	r3, r3, #1
 800c0b8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800c0ba:	4b99      	ldr	r3, [pc, #612]	@ (800c320 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c0bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c0be:	08db      	lsrs	r3, r3, #3
 800c0c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c0c4:	693a      	ldr	r2, [r7, #16]
 800c0c6:	fb02 f303 	mul.w	r3, r2, r3
 800c0ca:	ee07 3a90 	vmov	s15, r3
 800c0ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c0d2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800c0d6:	697b      	ldr	r3, [r7, #20]
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	f000 8111 	beq.w	800c300 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800c0de:	69bb      	ldr	r3, [r7, #24]
 800c0e0:	2b02      	cmp	r3, #2
 800c0e2:	f000 8083 	beq.w	800c1ec <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800c0e6:	69bb      	ldr	r3, [r7, #24]
 800c0e8:	2b02      	cmp	r3, #2
 800c0ea:	f200 80a1 	bhi.w	800c230 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800c0ee:	69bb      	ldr	r3, [r7, #24]
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d003      	beq.n	800c0fc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800c0f4:	69bb      	ldr	r3, [r7, #24]
 800c0f6:	2b01      	cmp	r3, #1
 800c0f8:	d056      	beq.n	800c1a8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800c0fa:	e099      	b.n	800c230 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c0fc:	4b88      	ldr	r3, [pc, #544]	@ (800c320 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	f003 0320 	and.w	r3, r3, #32
 800c104:	2b00      	cmp	r3, #0
 800c106:	d02d      	beq.n	800c164 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c108:	4b85      	ldr	r3, [pc, #532]	@ (800c320 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	08db      	lsrs	r3, r3, #3
 800c10e:	f003 0303 	and.w	r3, r3, #3
 800c112:	4a84      	ldr	r2, [pc, #528]	@ (800c324 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800c114:	fa22 f303 	lsr.w	r3, r2, r3
 800c118:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c11a:	68bb      	ldr	r3, [r7, #8]
 800c11c:	ee07 3a90 	vmov	s15, r3
 800c120:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c124:	697b      	ldr	r3, [r7, #20]
 800c126:	ee07 3a90 	vmov	s15, r3
 800c12a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c12e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c132:	4b7b      	ldr	r3, [pc, #492]	@ (800c320 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c134:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c136:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c13a:	ee07 3a90 	vmov	s15, r3
 800c13e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c142:	ed97 6a03 	vldr	s12, [r7, #12]
 800c146:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800c328 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c14a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c14e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c152:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c156:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c15a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c15e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800c162:	e087      	b.n	800c274 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c164:	697b      	ldr	r3, [r7, #20]
 800c166:	ee07 3a90 	vmov	s15, r3
 800c16a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c16e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800c32c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800c172:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c176:	4b6a      	ldr	r3, [pc, #424]	@ (800c320 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c178:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c17a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c17e:	ee07 3a90 	vmov	s15, r3
 800c182:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c186:	ed97 6a03 	vldr	s12, [r7, #12]
 800c18a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800c328 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c18e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c192:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c196:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c19a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c19e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c1a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c1a6:	e065      	b.n	800c274 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c1a8:	697b      	ldr	r3, [r7, #20]
 800c1aa:	ee07 3a90 	vmov	s15, r3
 800c1ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c1b2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800c330 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800c1b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c1ba:	4b59      	ldr	r3, [pc, #356]	@ (800c320 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c1bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c1be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c1c2:	ee07 3a90 	vmov	s15, r3
 800c1c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c1ca:	ed97 6a03 	vldr	s12, [r7, #12]
 800c1ce:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800c328 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c1d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c1d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c1da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c1de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c1e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c1e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c1ea:	e043      	b.n	800c274 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c1ec:	697b      	ldr	r3, [r7, #20]
 800c1ee:	ee07 3a90 	vmov	s15, r3
 800c1f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c1f6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800c334 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800c1fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c1fe:	4b48      	ldr	r3, [pc, #288]	@ (800c320 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c200:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c202:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c206:	ee07 3a90 	vmov	s15, r3
 800c20a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c20e:	ed97 6a03 	vldr	s12, [r7, #12]
 800c212:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800c328 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c216:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c21a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c21e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c222:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c226:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c22a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c22e:	e021      	b.n	800c274 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c230:	697b      	ldr	r3, [r7, #20]
 800c232:	ee07 3a90 	vmov	s15, r3
 800c236:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c23a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800c330 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800c23e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c242:	4b37      	ldr	r3, [pc, #220]	@ (800c320 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c244:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c246:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c24a:	ee07 3a90 	vmov	s15, r3
 800c24e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c252:	ed97 6a03 	vldr	s12, [r7, #12]
 800c256:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800c328 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c25a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c25e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c262:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c266:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c26a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c26e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c272:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800c274:	4b2a      	ldr	r3, [pc, #168]	@ (800c320 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c276:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c278:	0a5b      	lsrs	r3, r3, #9
 800c27a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c27e:	ee07 3a90 	vmov	s15, r3
 800c282:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c286:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c28a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c28e:	edd7 6a07 	vldr	s13, [r7, #28]
 800c292:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c296:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c29a:	ee17 2a90 	vmov	r2, s15
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800c2a2:	4b1f      	ldr	r3, [pc, #124]	@ (800c320 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c2a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c2a6:	0c1b      	lsrs	r3, r3, #16
 800c2a8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c2ac:	ee07 3a90 	vmov	s15, r3
 800c2b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c2b4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c2b8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c2bc:	edd7 6a07 	vldr	s13, [r7, #28]
 800c2c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c2c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c2c8:	ee17 2a90 	vmov	r2, s15
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800c2d0:	4b13      	ldr	r3, [pc, #76]	@ (800c320 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c2d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c2d4:	0e1b      	lsrs	r3, r3, #24
 800c2d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c2da:	ee07 3a90 	vmov	s15, r3
 800c2de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c2e2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c2e6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c2ea:	edd7 6a07 	vldr	s13, [r7, #28]
 800c2ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c2f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c2f6:	ee17 2a90 	vmov	r2, s15
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800c2fe:	e008      	b.n	800c312 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	2200      	movs	r2, #0
 800c304:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	2200      	movs	r2, #0
 800c30a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	2200      	movs	r2, #0
 800c310:	609a      	str	r2, [r3, #8]
}
 800c312:	bf00      	nop
 800c314:	3724      	adds	r7, #36	@ 0x24
 800c316:	46bd      	mov	sp, r7
 800c318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c31c:	4770      	bx	lr
 800c31e:	bf00      	nop
 800c320:	58024400 	.word	0x58024400
 800c324:	03d09000 	.word	0x03d09000
 800c328:	46000000 	.word	0x46000000
 800c32c:	4c742400 	.word	0x4c742400
 800c330:	4a742400 	.word	0x4a742400
 800c334:	4bb71b00 	.word	0x4bb71b00

0800c338 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800c338:	b480      	push	{r7}
 800c33a:	b089      	sub	sp, #36	@ 0x24
 800c33c:	af00      	add	r7, sp, #0
 800c33e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c340:	4ba0      	ldr	r3, [pc, #640]	@ (800c5c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c342:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c344:	f003 0303 	and.w	r3, r3, #3
 800c348:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800c34a:	4b9e      	ldr	r3, [pc, #632]	@ (800c5c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c34c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c34e:	091b      	lsrs	r3, r3, #4
 800c350:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c354:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800c356:	4b9b      	ldr	r3, [pc, #620]	@ (800c5c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c358:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c35a:	f003 0301 	and.w	r3, r3, #1
 800c35e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800c360:	4b98      	ldr	r3, [pc, #608]	@ (800c5c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c362:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c364:	08db      	lsrs	r3, r3, #3
 800c366:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c36a:	693a      	ldr	r2, [r7, #16]
 800c36c:	fb02 f303 	mul.w	r3, r2, r3
 800c370:	ee07 3a90 	vmov	s15, r3
 800c374:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c378:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800c37c:	697b      	ldr	r3, [r7, #20]
 800c37e:	2b00      	cmp	r3, #0
 800c380:	f000 8111 	beq.w	800c5a6 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800c384:	69bb      	ldr	r3, [r7, #24]
 800c386:	2b02      	cmp	r3, #2
 800c388:	f000 8083 	beq.w	800c492 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800c38c:	69bb      	ldr	r3, [r7, #24]
 800c38e:	2b02      	cmp	r3, #2
 800c390:	f200 80a1 	bhi.w	800c4d6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800c394:	69bb      	ldr	r3, [r7, #24]
 800c396:	2b00      	cmp	r3, #0
 800c398:	d003      	beq.n	800c3a2 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800c39a:	69bb      	ldr	r3, [r7, #24]
 800c39c:	2b01      	cmp	r3, #1
 800c39e:	d056      	beq.n	800c44e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800c3a0:	e099      	b.n	800c4d6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c3a2:	4b88      	ldr	r3, [pc, #544]	@ (800c5c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	f003 0320 	and.w	r3, r3, #32
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	d02d      	beq.n	800c40a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c3ae:	4b85      	ldr	r3, [pc, #532]	@ (800c5c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	08db      	lsrs	r3, r3, #3
 800c3b4:	f003 0303 	and.w	r3, r3, #3
 800c3b8:	4a83      	ldr	r2, [pc, #524]	@ (800c5c8 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800c3ba:	fa22 f303 	lsr.w	r3, r2, r3
 800c3be:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c3c0:	68bb      	ldr	r3, [r7, #8]
 800c3c2:	ee07 3a90 	vmov	s15, r3
 800c3c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c3ca:	697b      	ldr	r3, [r7, #20]
 800c3cc:	ee07 3a90 	vmov	s15, r3
 800c3d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c3d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c3d8:	4b7a      	ldr	r3, [pc, #488]	@ (800c5c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c3da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c3dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c3e0:	ee07 3a90 	vmov	s15, r3
 800c3e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c3e8:	ed97 6a03 	vldr	s12, [r7, #12]
 800c3ec:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800c5cc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c3f0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c3f4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c3f8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c3fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c400:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c404:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800c408:	e087      	b.n	800c51a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c40a:	697b      	ldr	r3, [r7, #20]
 800c40c:	ee07 3a90 	vmov	s15, r3
 800c410:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c414:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800c5d0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800c418:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c41c:	4b69      	ldr	r3, [pc, #420]	@ (800c5c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c41e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c420:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c424:	ee07 3a90 	vmov	s15, r3
 800c428:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c42c:	ed97 6a03 	vldr	s12, [r7, #12]
 800c430:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800c5cc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c434:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c438:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c43c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c440:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c444:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c448:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c44c:	e065      	b.n	800c51a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c44e:	697b      	ldr	r3, [r7, #20]
 800c450:	ee07 3a90 	vmov	s15, r3
 800c454:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c458:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800c5d4 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800c45c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c460:	4b58      	ldr	r3, [pc, #352]	@ (800c5c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c462:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c464:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c468:	ee07 3a90 	vmov	s15, r3
 800c46c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c470:	ed97 6a03 	vldr	s12, [r7, #12]
 800c474:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800c5cc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c478:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c47c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c480:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c484:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c488:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c48c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c490:	e043      	b.n	800c51a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c492:	697b      	ldr	r3, [r7, #20]
 800c494:	ee07 3a90 	vmov	s15, r3
 800c498:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c49c:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800c5d8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800c4a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c4a4:	4b47      	ldr	r3, [pc, #284]	@ (800c5c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c4a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c4a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c4ac:	ee07 3a90 	vmov	s15, r3
 800c4b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c4b4:	ed97 6a03 	vldr	s12, [r7, #12]
 800c4b8:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800c5cc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c4bc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c4c0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c4c4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c4c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c4cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c4d0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c4d4:	e021      	b.n	800c51a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c4d6:	697b      	ldr	r3, [r7, #20]
 800c4d8:	ee07 3a90 	vmov	s15, r3
 800c4dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c4e0:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800c5d0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800c4e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c4e8:	4b36      	ldr	r3, [pc, #216]	@ (800c5c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c4ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c4ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c4f0:	ee07 3a90 	vmov	s15, r3
 800c4f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c4f8:	ed97 6a03 	vldr	s12, [r7, #12]
 800c4fc:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800c5cc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c500:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c504:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c508:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c50c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c510:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c514:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c518:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800c51a:	4b2a      	ldr	r3, [pc, #168]	@ (800c5c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c51c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c51e:	0a5b      	lsrs	r3, r3, #9
 800c520:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c524:	ee07 3a90 	vmov	s15, r3
 800c528:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c52c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c530:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c534:	edd7 6a07 	vldr	s13, [r7, #28]
 800c538:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c53c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c540:	ee17 2a90 	vmov	r2, s15
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800c548:	4b1e      	ldr	r3, [pc, #120]	@ (800c5c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c54a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c54c:	0c1b      	lsrs	r3, r3, #16
 800c54e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c552:	ee07 3a90 	vmov	s15, r3
 800c556:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c55a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c55e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c562:	edd7 6a07 	vldr	s13, [r7, #28]
 800c566:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c56a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c56e:	ee17 2a90 	vmov	r2, s15
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800c576:	4b13      	ldr	r3, [pc, #76]	@ (800c5c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c578:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c57a:	0e1b      	lsrs	r3, r3, #24
 800c57c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c580:	ee07 3a90 	vmov	s15, r3
 800c584:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c588:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c58c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c590:	edd7 6a07 	vldr	s13, [r7, #28]
 800c594:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c598:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c59c:	ee17 2a90 	vmov	r2, s15
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800c5a4:	e008      	b.n	800c5b8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	2200      	movs	r2, #0
 800c5aa:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	2200      	movs	r2, #0
 800c5b0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	2200      	movs	r2, #0
 800c5b6:	609a      	str	r2, [r3, #8]
}
 800c5b8:	bf00      	nop
 800c5ba:	3724      	adds	r7, #36	@ 0x24
 800c5bc:	46bd      	mov	sp, r7
 800c5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5c2:	4770      	bx	lr
 800c5c4:	58024400 	.word	0x58024400
 800c5c8:	03d09000 	.word	0x03d09000
 800c5cc:	46000000 	.word	0x46000000
 800c5d0:	4c742400 	.word	0x4c742400
 800c5d4:	4a742400 	.word	0x4a742400
 800c5d8:	4bb71b00 	.word	0x4bb71b00

0800c5dc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800c5dc:	b580      	push	{r7, lr}
 800c5de:	b084      	sub	sp, #16
 800c5e0:	af00      	add	r7, sp, #0
 800c5e2:	6078      	str	r0, [r7, #4]
 800c5e4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c5e6:	2300      	movs	r3, #0
 800c5e8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c5ea:	4b53      	ldr	r3, [pc, #332]	@ (800c738 <RCCEx_PLL2_Config+0x15c>)
 800c5ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c5ee:	f003 0303 	and.w	r3, r3, #3
 800c5f2:	2b03      	cmp	r3, #3
 800c5f4:	d101      	bne.n	800c5fa <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800c5f6:	2301      	movs	r3, #1
 800c5f8:	e099      	b.n	800c72e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800c5fa:	4b4f      	ldr	r3, [pc, #316]	@ (800c738 <RCCEx_PLL2_Config+0x15c>)
 800c5fc:	681b      	ldr	r3, [r3, #0]
 800c5fe:	4a4e      	ldr	r2, [pc, #312]	@ (800c738 <RCCEx_PLL2_Config+0x15c>)
 800c600:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800c604:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c606:	f7f7 fcbd 	bl	8003f84 <HAL_GetTick>
 800c60a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c60c:	e008      	b.n	800c620 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800c60e:	f7f7 fcb9 	bl	8003f84 <HAL_GetTick>
 800c612:	4602      	mov	r2, r0
 800c614:	68bb      	ldr	r3, [r7, #8]
 800c616:	1ad3      	subs	r3, r2, r3
 800c618:	2b02      	cmp	r3, #2
 800c61a:	d901      	bls.n	800c620 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c61c:	2303      	movs	r3, #3
 800c61e:	e086      	b.n	800c72e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c620:	4b45      	ldr	r3, [pc, #276]	@ (800c738 <RCCEx_PLL2_Config+0x15c>)
 800c622:	681b      	ldr	r3, [r3, #0]
 800c624:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c628:	2b00      	cmp	r3, #0
 800c62a:	d1f0      	bne.n	800c60e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800c62c:	4b42      	ldr	r3, [pc, #264]	@ (800c738 <RCCEx_PLL2_Config+0x15c>)
 800c62e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c630:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	681b      	ldr	r3, [r3, #0]
 800c638:	031b      	lsls	r3, r3, #12
 800c63a:	493f      	ldr	r1, [pc, #252]	@ (800c738 <RCCEx_PLL2_Config+0x15c>)
 800c63c:	4313      	orrs	r3, r2
 800c63e:	628b      	str	r3, [r1, #40]	@ 0x28
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	685b      	ldr	r3, [r3, #4]
 800c644:	3b01      	subs	r3, #1
 800c646:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	689b      	ldr	r3, [r3, #8]
 800c64e:	3b01      	subs	r3, #1
 800c650:	025b      	lsls	r3, r3, #9
 800c652:	b29b      	uxth	r3, r3
 800c654:	431a      	orrs	r2, r3
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	68db      	ldr	r3, [r3, #12]
 800c65a:	3b01      	subs	r3, #1
 800c65c:	041b      	lsls	r3, r3, #16
 800c65e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800c662:	431a      	orrs	r2, r3
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	691b      	ldr	r3, [r3, #16]
 800c668:	3b01      	subs	r3, #1
 800c66a:	061b      	lsls	r3, r3, #24
 800c66c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800c670:	4931      	ldr	r1, [pc, #196]	@ (800c738 <RCCEx_PLL2_Config+0x15c>)
 800c672:	4313      	orrs	r3, r2
 800c674:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800c676:	4b30      	ldr	r3, [pc, #192]	@ (800c738 <RCCEx_PLL2_Config+0x15c>)
 800c678:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c67a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	695b      	ldr	r3, [r3, #20]
 800c682:	492d      	ldr	r1, [pc, #180]	@ (800c738 <RCCEx_PLL2_Config+0x15c>)
 800c684:	4313      	orrs	r3, r2
 800c686:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800c688:	4b2b      	ldr	r3, [pc, #172]	@ (800c738 <RCCEx_PLL2_Config+0x15c>)
 800c68a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c68c:	f023 0220 	bic.w	r2, r3, #32
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	699b      	ldr	r3, [r3, #24]
 800c694:	4928      	ldr	r1, [pc, #160]	@ (800c738 <RCCEx_PLL2_Config+0x15c>)
 800c696:	4313      	orrs	r3, r2
 800c698:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800c69a:	4b27      	ldr	r3, [pc, #156]	@ (800c738 <RCCEx_PLL2_Config+0x15c>)
 800c69c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c69e:	4a26      	ldr	r2, [pc, #152]	@ (800c738 <RCCEx_PLL2_Config+0x15c>)
 800c6a0:	f023 0310 	bic.w	r3, r3, #16
 800c6a4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800c6a6:	4b24      	ldr	r3, [pc, #144]	@ (800c738 <RCCEx_PLL2_Config+0x15c>)
 800c6a8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c6aa:	4b24      	ldr	r3, [pc, #144]	@ (800c73c <RCCEx_PLL2_Config+0x160>)
 800c6ac:	4013      	ands	r3, r2
 800c6ae:	687a      	ldr	r2, [r7, #4]
 800c6b0:	69d2      	ldr	r2, [r2, #28]
 800c6b2:	00d2      	lsls	r2, r2, #3
 800c6b4:	4920      	ldr	r1, [pc, #128]	@ (800c738 <RCCEx_PLL2_Config+0x15c>)
 800c6b6:	4313      	orrs	r3, r2
 800c6b8:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800c6ba:	4b1f      	ldr	r3, [pc, #124]	@ (800c738 <RCCEx_PLL2_Config+0x15c>)
 800c6bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c6be:	4a1e      	ldr	r2, [pc, #120]	@ (800c738 <RCCEx_PLL2_Config+0x15c>)
 800c6c0:	f043 0310 	orr.w	r3, r3, #16
 800c6c4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800c6c6:	683b      	ldr	r3, [r7, #0]
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d106      	bne.n	800c6da <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800c6cc:	4b1a      	ldr	r3, [pc, #104]	@ (800c738 <RCCEx_PLL2_Config+0x15c>)
 800c6ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c6d0:	4a19      	ldr	r2, [pc, #100]	@ (800c738 <RCCEx_PLL2_Config+0x15c>)
 800c6d2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800c6d6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800c6d8:	e00f      	b.n	800c6fa <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800c6da:	683b      	ldr	r3, [r7, #0]
 800c6dc:	2b01      	cmp	r3, #1
 800c6de:	d106      	bne.n	800c6ee <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800c6e0:	4b15      	ldr	r3, [pc, #84]	@ (800c738 <RCCEx_PLL2_Config+0x15c>)
 800c6e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c6e4:	4a14      	ldr	r2, [pc, #80]	@ (800c738 <RCCEx_PLL2_Config+0x15c>)
 800c6e6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c6ea:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800c6ec:	e005      	b.n	800c6fa <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800c6ee:	4b12      	ldr	r3, [pc, #72]	@ (800c738 <RCCEx_PLL2_Config+0x15c>)
 800c6f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c6f2:	4a11      	ldr	r2, [pc, #68]	@ (800c738 <RCCEx_PLL2_Config+0x15c>)
 800c6f4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800c6f8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800c6fa:	4b0f      	ldr	r3, [pc, #60]	@ (800c738 <RCCEx_PLL2_Config+0x15c>)
 800c6fc:	681b      	ldr	r3, [r3, #0]
 800c6fe:	4a0e      	ldr	r2, [pc, #56]	@ (800c738 <RCCEx_PLL2_Config+0x15c>)
 800c700:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800c704:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c706:	f7f7 fc3d 	bl	8003f84 <HAL_GetTick>
 800c70a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c70c:	e008      	b.n	800c720 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800c70e:	f7f7 fc39 	bl	8003f84 <HAL_GetTick>
 800c712:	4602      	mov	r2, r0
 800c714:	68bb      	ldr	r3, [r7, #8]
 800c716:	1ad3      	subs	r3, r2, r3
 800c718:	2b02      	cmp	r3, #2
 800c71a:	d901      	bls.n	800c720 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c71c:	2303      	movs	r3, #3
 800c71e:	e006      	b.n	800c72e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c720:	4b05      	ldr	r3, [pc, #20]	@ (800c738 <RCCEx_PLL2_Config+0x15c>)
 800c722:	681b      	ldr	r3, [r3, #0]
 800c724:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d0f0      	beq.n	800c70e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800c72c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c72e:	4618      	mov	r0, r3
 800c730:	3710      	adds	r7, #16
 800c732:	46bd      	mov	sp, r7
 800c734:	bd80      	pop	{r7, pc}
 800c736:	bf00      	nop
 800c738:	58024400 	.word	0x58024400
 800c73c:	ffff0007 	.word	0xffff0007

0800c740 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800c740:	b580      	push	{r7, lr}
 800c742:	b084      	sub	sp, #16
 800c744:	af00      	add	r7, sp, #0
 800c746:	6078      	str	r0, [r7, #4]
 800c748:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c74a:	2300      	movs	r3, #0
 800c74c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c74e:	4b53      	ldr	r3, [pc, #332]	@ (800c89c <RCCEx_PLL3_Config+0x15c>)
 800c750:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c752:	f003 0303 	and.w	r3, r3, #3
 800c756:	2b03      	cmp	r3, #3
 800c758:	d101      	bne.n	800c75e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800c75a:	2301      	movs	r3, #1
 800c75c:	e099      	b.n	800c892 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800c75e:	4b4f      	ldr	r3, [pc, #316]	@ (800c89c <RCCEx_PLL3_Config+0x15c>)
 800c760:	681b      	ldr	r3, [r3, #0]
 800c762:	4a4e      	ldr	r2, [pc, #312]	@ (800c89c <RCCEx_PLL3_Config+0x15c>)
 800c764:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c768:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c76a:	f7f7 fc0b 	bl	8003f84 <HAL_GetTick>
 800c76e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c770:	e008      	b.n	800c784 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800c772:	f7f7 fc07 	bl	8003f84 <HAL_GetTick>
 800c776:	4602      	mov	r2, r0
 800c778:	68bb      	ldr	r3, [r7, #8]
 800c77a:	1ad3      	subs	r3, r2, r3
 800c77c:	2b02      	cmp	r3, #2
 800c77e:	d901      	bls.n	800c784 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c780:	2303      	movs	r3, #3
 800c782:	e086      	b.n	800c892 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c784:	4b45      	ldr	r3, [pc, #276]	@ (800c89c <RCCEx_PLL3_Config+0x15c>)
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d1f0      	bne.n	800c772 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800c790:	4b42      	ldr	r3, [pc, #264]	@ (800c89c <RCCEx_PLL3_Config+0x15c>)
 800c792:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c794:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	051b      	lsls	r3, r3, #20
 800c79e:	493f      	ldr	r1, [pc, #252]	@ (800c89c <RCCEx_PLL3_Config+0x15c>)
 800c7a0:	4313      	orrs	r3, r2
 800c7a2:	628b      	str	r3, [r1, #40]	@ 0x28
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	685b      	ldr	r3, [r3, #4]
 800c7a8:	3b01      	subs	r3, #1
 800c7aa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	689b      	ldr	r3, [r3, #8]
 800c7b2:	3b01      	subs	r3, #1
 800c7b4:	025b      	lsls	r3, r3, #9
 800c7b6:	b29b      	uxth	r3, r3
 800c7b8:	431a      	orrs	r2, r3
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	68db      	ldr	r3, [r3, #12]
 800c7be:	3b01      	subs	r3, #1
 800c7c0:	041b      	lsls	r3, r3, #16
 800c7c2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800c7c6:	431a      	orrs	r2, r3
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	691b      	ldr	r3, [r3, #16]
 800c7cc:	3b01      	subs	r3, #1
 800c7ce:	061b      	lsls	r3, r3, #24
 800c7d0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800c7d4:	4931      	ldr	r1, [pc, #196]	@ (800c89c <RCCEx_PLL3_Config+0x15c>)
 800c7d6:	4313      	orrs	r3, r2
 800c7d8:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800c7da:	4b30      	ldr	r3, [pc, #192]	@ (800c89c <RCCEx_PLL3_Config+0x15c>)
 800c7dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c7de:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	695b      	ldr	r3, [r3, #20]
 800c7e6:	492d      	ldr	r1, [pc, #180]	@ (800c89c <RCCEx_PLL3_Config+0x15c>)
 800c7e8:	4313      	orrs	r3, r2
 800c7ea:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800c7ec:	4b2b      	ldr	r3, [pc, #172]	@ (800c89c <RCCEx_PLL3_Config+0x15c>)
 800c7ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c7f0:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	699b      	ldr	r3, [r3, #24]
 800c7f8:	4928      	ldr	r1, [pc, #160]	@ (800c89c <RCCEx_PLL3_Config+0x15c>)
 800c7fa:	4313      	orrs	r3, r2
 800c7fc:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800c7fe:	4b27      	ldr	r3, [pc, #156]	@ (800c89c <RCCEx_PLL3_Config+0x15c>)
 800c800:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c802:	4a26      	ldr	r2, [pc, #152]	@ (800c89c <RCCEx_PLL3_Config+0x15c>)
 800c804:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c808:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800c80a:	4b24      	ldr	r3, [pc, #144]	@ (800c89c <RCCEx_PLL3_Config+0x15c>)
 800c80c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c80e:	4b24      	ldr	r3, [pc, #144]	@ (800c8a0 <RCCEx_PLL3_Config+0x160>)
 800c810:	4013      	ands	r3, r2
 800c812:	687a      	ldr	r2, [r7, #4]
 800c814:	69d2      	ldr	r2, [r2, #28]
 800c816:	00d2      	lsls	r2, r2, #3
 800c818:	4920      	ldr	r1, [pc, #128]	@ (800c89c <RCCEx_PLL3_Config+0x15c>)
 800c81a:	4313      	orrs	r3, r2
 800c81c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800c81e:	4b1f      	ldr	r3, [pc, #124]	@ (800c89c <RCCEx_PLL3_Config+0x15c>)
 800c820:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c822:	4a1e      	ldr	r2, [pc, #120]	@ (800c89c <RCCEx_PLL3_Config+0x15c>)
 800c824:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c828:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800c82a:	683b      	ldr	r3, [r7, #0]
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	d106      	bne.n	800c83e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800c830:	4b1a      	ldr	r3, [pc, #104]	@ (800c89c <RCCEx_PLL3_Config+0x15c>)
 800c832:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c834:	4a19      	ldr	r2, [pc, #100]	@ (800c89c <RCCEx_PLL3_Config+0x15c>)
 800c836:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800c83a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800c83c:	e00f      	b.n	800c85e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800c83e:	683b      	ldr	r3, [r7, #0]
 800c840:	2b01      	cmp	r3, #1
 800c842:	d106      	bne.n	800c852 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800c844:	4b15      	ldr	r3, [pc, #84]	@ (800c89c <RCCEx_PLL3_Config+0x15c>)
 800c846:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c848:	4a14      	ldr	r2, [pc, #80]	@ (800c89c <RCCEx_PLL3_Config+0x15c>)
 800c84a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800c84e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800c850:	e005      	b.n	800c85e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800c852:	4b12      	ldr	r3, [pc, #72]	@ (800c89c <RCCEx_PLL3_Config+0x15c>)
 800c854:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c856:	4a11      	ldr	r2, [pc, #68]	@ (800c89c <RCCEx_PLL3_Config+0x15c>)
 800c858:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800c85c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800c85e:	4b0f      	ldr	r3, [pc, #60]	@ (800c89c <RCCEx_PLL3_Config+0x15c>)
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	4a0e      	ldr	r2, [pc, #56]	@ (800c89c <RCCEx_PLL3_Config+0x15c>)
 800c864:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c868:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c86a:	f7f7 fb8b 	bl	8003f84 <HAL_GetTick>
 800c86e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c870:	e008      	b.n	800c884 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800c872:	f7f7 fb87 	bl	8003f84 <HAL_GetTick>
 800c876:	4602      	mov	r2, r0
 800c878:	68bb      	ldr	r3, [r7, #8]
 800c87a:	1ad3      	subs	r3, r2, r3
 800c87c:	2b02      	cmp	r3, #2
 800c87e:	d901      	bls.n	800c884 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c880:	2303      	movs	r3, #3
 800c882:	e006      	b.n	800c892 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c884:	4b05      	ldr	r3, [pc, #20]	@ (800c89c <RCCEx_PLL3_Config+0x15c>)
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	d0f0      	beq.n	800c872 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800c890:	7bfb      	ldrb	r3, [r7, #15]
}
 800c892:	4618      	mov	r0, r3
 800c894:	3710      	adds	r7, #16
 800c896:	46bd      	mov	sp, r7
 800c898:	bd80      	pop	{r7, pc}
 800c89a:	bf00      	nop
 800c89c:	58024400 	.word	0x58024400
 800c8a0:	ffff0007 	.word	0xffff0007

0800c8a4 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800c8a4:	b580      	push	{r7, lr}
 800c8a6:	b084      	sub	sp, #16
 800c8a8:	af00      	add	r7, sp, #0
 800c8aa:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d101      	bne.n	800c8b6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800c8b2:	2301      	movs	r3, #1
 800c8b4:	e10f      	b.n	800cad6 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	2200      	movs	r2, #0
 800c8ba:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	681b      	ldr	r3, [r3, #0]
 800c8c0:	4a87      	ldr	r2, [pc, #540]	@ (800cae0 <HAL_SPI_Init+0x23c>)
 800c8c2:	4293      	cmp	r3, r2
 800c8c4:	d00f      	beq.n	800c8e6 <HAL_SPI_Init+0x42>
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	681b      	ldr	r3, [r3, #0]
 800c8ca:	4a86      	ldr	r2, [pc, #536]	@ (800cae4 <HAL_SPI_Init+0x240>)
 800c8cc:	4293      	cmp	r3, r2
 800c8ce:	d00a      	beq.n	800c8e6 <HAL_SPI_Init+0x42>
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	681b      	ldr	r3, [r3, #0]
 800c8d4:	4a84      	ldr	r2, [pc, #528]	@ (800cae8 <HAL_SPI_Init+0x244>)
 800c8d6:	4293      	cmp	r3, r2
 800c8d8:	d005      	beq.n	800c8e6 <HAL_SPI_Init+0x42>
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	68db      	ldr	r3, [r3, #12]
 800c8de:	2b0f      	cmp	r3, #15
 800c8e0:	d901      	bls.n	800c8e6 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800c8e2:	2301      	movs	r3, #1
 800c8e4:	e0f7      	b.n	800cad6 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800c8e6:	6878      	ldr	r0, [r7, #4]
 800c8e8:	f000 f900 	bl	800caec <SPI_GetPacketSize>
 800c8ec:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	681b      	ldr	r3, [r3, #0]
 800c8f2:	4a7b      	ldr	r2, [pc, #492]	@ (800cae0 <HAL_SPI_Init+0x23c>)
 800c8f4:	4293      	cmp	r3, r2
 800c8f6:	d00c      	beq.n	800c912 <HAL_SPI_Init+0x6e>
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	4a79      	ldr	r2, [pc, #484]	@ (800cae4 <HAL_SPI_Init+0x240>)
 800c8fe:	4293      	cmp	r3, r2
 800c900:	d007      	beq.n	800c912 <HAL_SPI_Init+0x6e>
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	681b      	ldr	r3, [r3, #0]
 800c906:	4a78      	ldr	r2, [pc, #480]	@ (800cae8 <HAL_SPI_Init+0x244>)
 800c908:	4293      	cmp	r3, r2
 800c90a:	d002      	beq.n	800c912 <HAL_SPI_Init+0x6e>
 800c90c:	68fb      	ldr	r3, [r7, #12]
 800c90e:	2b08      	cmp	r3, #8
 800c910:	d811      	bhi.n	800c936 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800c916:	4a72      	ldr	r2, [pc, #456]	@ (800cae0 <HAL_SPI_Init+0x23c>)
 800c918:	4293      	cmp	r3, r2
 800c91a:	d009      	beq.n	800c930 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	681b      	ldr	r3, [r3, #0]
 800c920:	4a70      	ldr	r2, [pc, #448]	@ (800cae4 <HAL_SPI_Init+0x240>)
 800c922:	4293      	cmp	r3, r2
 800c924:	d004      	beq.n	800c930 <HAL_SPI_Init+0x8c>
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	681b      	ldr	r3, [r3, #0]
 800c92a:	4a6f      	ldr	r2, [pc, #444]	@ (800cae8 <HAL_SPI_Init+0x244>)
 800c92c:	4293      	cmp	r3, r2
 800c92e:	d104      	bne.n	800c93a <HAL_SPI_Init+0x96>
 800c930:	68fb      	ldr	r3, [r7, #12]
 800c932:	2b10      	cmp	r3, #16
 800c934:	d901      	bls.n	800c93a <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800c936:	2301      	movs	r3, #1
 800c938:	e0cd      	b.n	800cad6 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800c940:	b2db      	uxtb	r3, r3
 800c942:	2b00      	cmp	r3, #0
 800c944:	d106      	bne.n	800c954 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	2200      	movs	r2, #0
 800c94a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800c94e:	6878      	ldr	r0, [r7, #4]
 800c950:	f7f5 f968 	bl	8001c24 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	2202      	movs	r2, #2
 800c958:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	681b      	ldr	r3, [r3, #0]
 800c960:	681a      	ldr	r2, [r3, #0]
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	681b      	ldr	r3, [r3, #0]
 800c966:	f022 0201 	bic.w	r2, r2, #1
 800c96a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	681b      	ldr	r3, [r3, #0]
 800c970:	689b      	ldr	r3, [r3, #8]
 800c972:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800c976:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	699b      	ldr	r3, [r3, #24]
 800c97c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800c980:	d119      	bne.n	800c9b6 <HAL_SPI_Init+0x112>
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	685b      	ldr	r3, [r3, #4]
 800c986:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800c98a:	d103      	bne.n	800c994 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800c990:	2b00      	cmp	r3, #0
 800c992:	d008      	beq.n	800c9a6 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800c998:	2b00      	cmp	r3, #0
 800c99a:	d10c      	bne.n	800c9b6 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800c9a0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c9a4:	d107      	bne.n	800c9b6 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	681b      	ldr	r3, [r3, #0]
 800c9aa:	681a      	ldr	r2, [r3, #0]
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800c9b4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	685b      	ldr	r3, [r3, #4]
 800c9ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	d00f      	beq.n	800c9e2 <HAL_SPI_Init+0x13e>
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	68db      	ldr	r3, [r3, #12]
 800c9c6:	2b06      	cmp	r3, #6
 800c9c8:	d90b      	bls.n	800c9e2 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	681b      	ldr	r3, [r3, #0]
 800c9ce:	681b      	ldr	r3, [r3, #0]
 800c9d0:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	681b      	ldr	r3, [r3, #0]
 800c9dc:	430a      	orrs	r2, r1
 800c9de:	601a      	str	r2, [r3, #0]
 800c9e0:	e007      	b.n	800c9f2 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	681a      	ldr	r2, [r3, #0]
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	681b      	ldr	r3, [r3, #0]
 800c9ec:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800c9f0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	69da      	ldr	r2, [r3, #28]
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c9fa:	431a      	orrs	r2, r3
 800c9fc:	68bb      	ldr	r3, [r7, #8]
 800c9fe:	431a      	orrs	r2, r3
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ca04:	ea42 0103 	orr.w	r1, r2, r3
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	68da      	ldr	r2, [r3, #12]
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	430a      	orrs	r2, r1
 800ca12:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ca1c:	431a      	orrs	r2, r3
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ca22:	431a      	orrs	r2, r3
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	699b      	ldr	r3, [r3, #24]
 800ca28:	431a      	orrs	r2, r3
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	691b      	ldr	r3, [r3, #16]
 800ca2e:	431a      	orrs	r2, r3
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	695b      	ldr	r3, [r3, #20]
 800ca34:	431a      	orrs	r2, r3
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	6a1b      	ldr	r3, [r3, #32]
 800ca3a:	431a      	orrs	r2, r3
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	685b      	ldr	r3, [r3, #4]
 800ca40:	431a      	orrs	r2, r3
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ca46:	431a      	orrs	r2, r3
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	689b      	ldr	r3, [r3, #8]
 800ca4c:	431a      	orrs	r2, r3
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ca52:	ea42 0103 	orr.w	r1, r2, r3
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	681b      	ldr	r3, [r3, #0]
 800ca5e:	430a      	orrs	r2, r1
 800ca60:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	685b      	ldr	r3, [r3, #4]
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	d113      	bne.n	800ca92 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	681b      	ldr	r3, [r3, #0]
 800ca6e:	689b      	ldr	r3, [r3, #8]
 800ca70:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	681b      	ldr	r3, [r3, #0]
 800ca78:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ca7c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	681b      	ldr	r3, [r3, #0]
 800ca82:	689b      	ldr	r3, [r3, #8]
 800ca84:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	681b      	ldr	r3, [r3, #0]
 800ca8c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800ca90:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	681b      	ldr	r3, [r3, #0]
 800ca96:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	681b      	ldr	r3, [r3, #0]
 800ca9c:	f022 0201 	bic.w	r2, r2, #1
 800caa0:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	685b      	ldr	r3, [r3, #4]
 800caa6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800caaa:	2b00      	cmp	r3, #0
 800caac:	d00a      	beq.n	800cac4 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	681b      	ldr	r3, [r3, #0]
 800cab2:	68db      	ldr	r3, [r3, #12]
 800cab4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	681b      	ldr	r3, [r3, #0]
 800cac0:	430a      	orrs	r2, r1
 800cac2:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	2200      	movs	r2, #0
 800cac8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	2201      	movs	r2, #1
 800cad0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800cad4:	2300      	movs	r3, #0
}
 800cad6:	4618      	mov	r0, r3
 800cad8:	3710      	adds	r7, #16
 800cada:	46bd      	mov	sp, r7
 800cadc:	bd80      	pop	{r7, pc}
 800cade:	bf00      	nop
 800cae0:	40013000 	.word	0x40013000
 800cae4:	40003800 	.word	0x40003800
 800cae8:	40003c00 	.word	0x40003c00

0800caec <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800caec:	b480      	push	{r7}
 800caee:	b085      	sub	sp, #20
 800caf0:	af00      	add	r7, sp, #0
 800caf2:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800caf8:	095b      	lsrs	r3, r3, #5
 800cafa:	3301      	adds	r3, #1
 800cafc:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	68db      	ldr	r3, [r3, #12]
 800cb02:	3301      	adds	r3, #1
 800cb04:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800cb06:	68bb      	ldr	r3, [r7, #8]
 800cb08:	3307      	adds	r3, #7
 800cb0a:	08db      	lsrs	r3, r3, #3
 800cb0c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800cb0e:	68bb      	ldr	r3, [r7, #8]
 800cb10:	68fa      	ldr	r2, [r7, #12]
 800cb12:	fb02 f303 	mul.w	r3, r2, r3
}
 800cb16:	4618      	mov	r0, r3
 800cb18:	3714      	adds	r7, #20
 800cb1a:	46bd      	mov	sp, r7
 800cb1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb20:	4770      	bx	lr

0800cb22 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800cb22:	b580      	push	{r7, lr}
 800cb24:	b082      	sub	sp, #8
 800cb26:	af00      	add	r7, sp, #0
 800cb28:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	d101      	bne.n	800cb34 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800cb30:	2301      	movs	r3, #1
 800cb32:	e049      	b.n	800cbc8 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800cb3a:	b2db      	uxtb	r3, r3
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d106      	bne.n	800cb4e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	2200      	movs	r2, #0
 800cb44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800cb48:	6878      	ldr	r0, [r7, #4]
 800cb4a:	f7f5 f973 	bl	8001e34 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	2202      	movs	r2, #2
 800cb52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	681a      	ldr	r2, [r3, #0]
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	3304      	adds	r3, #4
 800cb5e:	4619      	mov	r1, r3
 800cb60:	4610      	mov	r0, r2
 800cb62:	f000 fe0b 	bl	800d77c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	2201      	movs	r2, #1
 800cb6a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	2201      	movs	r2, #1
 800cb72:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	2201      	movs	r2, #1
 800cb7a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	2201      	movs	r2, #1
 800cb82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	2201      	movs	r2, #1
 800cb8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	2201      	movs	r2, #1
 800cb92:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	2201      	movs	r2, #1
 800cb9a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	2201      	movs	r2, #1
 800cba2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	2201      	movs	r2, #1
 800cbaa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	2201      	movs	r2, #1
 800cbb2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	2201      	movs	r2, #1
 800cbba:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	2201      	movs	r2, #1
 800cbc2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800cbc6:	2300      	movs	r3, #0
}
 800cbc8:	4618      	mov	r0, r3
 800cbca:	3708      	adds	r7, #8
 800cbcc:	46bd      	mov	sp, r7
 800cbce:	bd80      	pop	{r7, pc}

0800cbd0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800cbd0:	b480      	push	{r7}
 800cbd2:	b085      	sub	sp, #20
 800cbd4:	af00      	add	r7, sp, #0
 800cbd6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800cbde:	b2db      	uxtb	r3, r3
 800cbe0:	2b01      	cmp	r3, #1
 800cbe2:	d001      	beq.n	800cbe8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800cbe4:	2301      	movs	r3, #1
 800cbe6:	e05e      	b.n	800cca6 <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	2202      	movs	r2, #2
 800cbec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	681b      	ldr	r3, [r3, #0]
 800cbf4:	68da      	ldr	r2, [r3, #12]
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	f042 0201 	orr.w	r2, r2, #1
 800cbfe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	681b      	ldr	r3, [r3, #0]
 800cc04:	4a2b      	ldr	r2, [pc, #172]	@ (800ccb4 <HAL_TIM_Base_Start_IT+0xe4>)
 800cc06:	4293      	cmp	r3, r2
 800cc08:	d02c      	beq.n	800cc64 <HAL_TIM_Base_Start_IT+0x94>
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	681b      	ldr	r3, [r3, #0]
 800cc0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cc12:	d027      	beq.n	800cc64 <HAL_TIM_Base_Start_IT+0x94>
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	4a27      	ldr	r2, [pc, #156]	@ (800ccb8 <HAL_TIM_Base_Start_IT+0xe8>)
 800cc1a:	4293      	cmp	r3, r2
 800cc1c:	d022      	beq.n	800cc64 <HAL_TIM_Base_Start_IT+0x94>
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	681b      	ldr	r3, [r3, #0]
 800cc22:	4a26      	ldr	r2, [pc, #152]	@ (800ccbc <HAL_TIM_Base_Start_IT+0xec>)
 800cc24:	4293      	cmp	r3, r2
 800cc26:	d01d      	beq.n	800cc64 <HAL_TIM_Base_Start_IT+0x94>
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	4a24      	ldr	r2, [pc, #144]	@ (800ccc0 <HAL_TIM_Base_Start_IT+0xf0>)
 800cc2e:	4293      	cmp	r3, r2
 800cc30:	d018      	beq.n	800cc64 <HAL_TIM_Base_Start_IT+0x94>
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	681b      	ldr	r3, [r3, #0]
 800cc36:	4a23      	ldr	r2, [pc, #140]	@ (800ccc4 <HAL_TIM_Base_Start_IT+0xf4>)
 800cc38:	4293      	cmp	r3, r2
 800cc3a:	d013      	beq.n	800cc64 <HAL_TIM_Base_Start_IT+0x94>
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	681b      	ldr	r3, [r3, #0]
 800cc40:	4a21      	ldr	r2, [pc, #132]	@ (800ccc8 <HAL_TIM_Base_Start_IT+0xf8>)
 800cc42:	4293      	cmp	r3, r2
 800cc44:	d00e      	beq.n	800cc64 <HAL_TIM_Base_Start_IT+0x94>
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	681b      	ldr	r3, [r3, #0]
 800cc4a:	4a20      	ldr	r2, [pc, #128]	@ (800cccc <HAL_TIM_Base_Start_IT+0xfc>)
 800cc4c:	4293      	cmp	r3, r2
 800cc4e:	d009      	beq.n	800cc64 <HAL_TIM_Base_Start_IT+0x94>
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	681b      	ldr	r3, [r3, #0]
 800cc54:	4a1e      	ldr	r2, [pc, #120]	@ (800ccd0 <HAL_TIM_Base_Start_IT+0x100>)
 800cc56:	4293      	cmp	r3, r2
 800cc58:	d004      	beq.n	800cc64 <HAL_TIM_Base_Start_IT+0x94>
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	681b      	ldr	r3, [r3, #0]
 800cc5e:	4a1d      	ldr	r2, [pc, #116]	@ (800ccd4 <HAL_TIM_Base_Start_IT+0x104>)
 800cc60:	4293      	cmp	r3, r2
 800cc62:	d115      	bne.n	800cc90 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	681b      	ldr	r3, [r3, #0]
 800cc68:	689a      	ldr	r2, [r3, #8]
 800cc6a:	4b1b      	ldr	r3, [pc, #108]	@ (800ccd8 <HAL_TIM_Base_Start_IT+0x108>)
 800cc6c:	4013      	ands	r3, r2
 800cc6e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cc70:	68fb      	ldr	r3, [r7, #12]
 800cc72:	2b06      	cmp	r3, #6
 800cc74:	d015      	beq.n	800cca2 <HAL_TIM_Base_Start_IT+0xd2>
 800cc76:	68fb      	ldr	r3, [r7, #12]
 800cc78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cc7c:	d011      	beq.n	800cca2 <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	681b      	ldr	r3, [r3, #0]
 800cc82:	681a      	ldr	r2, [r3, #0]
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	f042 0201 	orr.w	r2, r2, #1
 800cc8c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cc8e:	e008      	b.n	800cca2 <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	681b      	ldr	r3, [r3, #0]
 800cc94:	681a      	ldr	r2, [r3, #0]
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	681b      	ldr	r3, [r3, #0]
 800cc9a:	f042 0201 	orr.w	r2, r2, #1
 800cc9e:	601a      	str	r2, [r3, #0]
 800cca0:	e000      	b.n	800cca4 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cca2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800cca4:	2300      	movs	r3, #0
}
 800cca6:	4618      	mov	r0, r3
 800cca8:	3714      	adds	r7, #20
 800ccaa:	46bd      	mov	sp, r7
 800ccac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccb0:	4770      	bx	lr
 800ccb2:	bf00      	nop
 800ccb4:	40010000 	.word	0x40010000
 800ccb8:	40000400 	.word	0x40000400
 800ccbc:	40000800 	.word	0x40000800
 800ccc0:	40000c00 	.word	0x40000c00
 800ccc4:	40010400 	.word	0x40010400
 800ccc8:	40001800 	.word	0x40001800
 800cccc:	40014000 	.word	0x40014000
 800ccd0:	4000e000 	.word	0x4000e000
 800ccd4:	4000e400 	.word	0x4000e400
 800ccd8:	00010007 	.word	0x00010007

0800ccdc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800ccdc:	b580      	push	{r7, lr}
 800ccde:	b082      	sub	sp, #8
 800cce0:	af00      	add	r7, sp, #0
 800cce2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	d101      	bne.n	800ccee <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800ccea:	2301      	movs	r3, #1
 800ccec:	e049      	b.n	800cd82 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ccf4:	b2db      	uxtb	r3, r3
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d106      	bne.n	800cd08 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	2200      	movs	r2, #0
 800ccfe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800cd02:	6878      	ldr	r0, [r7, #4]
 800cd04:	f000 f841 	bl	800cd8a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	2202      	movs	r2, #2
 800cd0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	681a      	ldr	r2, [r3, #0]
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	3304      	adds	r3, #4
 800cd18:	4619      	mov	r1, r3
 800cd1a:	4610      	mov	r0, r2
 800cd1c:	f000 fd2e 	bl	800d77c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	2201      	movs	r2, #1
 800cd24:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	2201      	movs	r2, #1
 800cd2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	2201      	movs	r2, #1
 800cd34:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	2201      	movs	r2, #1
 800cd3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	2201      	movs	r2, #1
 800cd44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	2201      	movs	r2, #1
 800cd4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	2201      	movs	r2, #1
 800cd54:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	2201      	movs	r2, #1
 800cd5c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	2201      	movs	r2, #1
 800cd64:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	2201      	movs	r2, #1
 800cd6c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	2201      	movs	r2, #1
 800cd74:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	2201      	movs	r2, #1
 800cd7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800cd80:	2300      	movs	r3, #0
}
 800cd82:	4618      	mov	r0, r3
 800cd84:	3708      	adds	r7, #8
 800cd86:	46bd      	mov	sp, r7
 800cd88:	bd80      	pop	{r7, pc}

0800cd8a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800cd8a:	b480      	push	{r7}
 800cd8c:	b083      	sub	sp, #12
 800cd8e:	af00      	add	r7, sp, #0
 800cd90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800cd92:	bf00      	nop
 800cd94:	370c      	adds	r7, #12
 800cd96:	46bd      	mov	sp, r7
 800cd98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd9c:	4770      	bx	lr
	...

0800cda0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800cda0:	b580      	push	{r7, lr}
 800cda2:	b084      	sub	sp, #16
 800cda4:	af00      	add	r7, sp, #0
 800cda6:	6078      	str	r0, [r7, #4]
 800cda8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800cdaa:	683b      	ldr	r3, [r7, #0]
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	d109      	bne.n	800cdc4 <HAL_TIM_PWM_Start+0x24>
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800cdb6:	b2db      	uxtb	r3, r3
 800cdb8:	2b01      	cmp	r3, #1
 800cdba:	bf14      	ite	ne
 800cdbc:	2301      	movne	r3, #1
 800cdbe:	2300      	moveq	r3, #0
 800cdc0:	b2db      	uxtb	r3, r3
 800cdc2:	e03c      	b.n	800ce3e <HAL_TIM_PWM_Start+0x9e>
 800cdc4:	683b      	ldr	r3, [r7, #0]
 800cdc6:	2b04      	cmp	r3, #4
 800cdc8:	d109      	bne.n	800cdde <HAL_TIM_PWM_Start+0x3e>
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800cdd0:	b2db      	uxtb	r3, r3
 800cdd2:	2b01      	cmp	r3, #1
 800cdd4:	bf14      	ite	ne
 800cdd6:	2301      	movne	r3, #1
 800cdd8:	2300      	moveq	r3, #0
 800cdda:	b2db      	uxtb	r3, r3
 800cddc:	e02f      	b.n	800ce3e <HAL_TIM_PWM_Start+0x9e>
 800cdde:	683b      	ldr	r3, [r7, #0]
 800cde0:	2b08      	cmp	r3, #8
 800cde2:	d109      	bne.n	800cdf8 <HAL_TIM_PWM_Start+0x58>
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800cdea:	b2db      	uxtb	r3, r3
 800cdec:	2b01      	cmp	r3, #1
 800cdee:	bf14      	ite	ne
 800cdf0:	2301      	movne	r3, #1
 800cdf2:	2300      	moveq	r3, #0
 800cdf4:	b2db      	uxtb	r3, r3
 800cdf6:	e022      	b.n	800ce3e <HAL_TIM_PWM_Start+0x9e>
 800cdf8:	683b      	ldr	r3, [r7, #0]
 800cdfa:	2b0c      	cmp	r3, #12
 800cdfc:	d109      	bne.n	800ce12 <HAL_TIM_PWM_Start+0x72>
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ce04:	b2db      	uxtb	r3, r3
 800ce06:	2b01      	cmp	r3, #1
 800ce08:	bf14      	ite	ne
 800ce0a:	2301      	movne	r3, #1
 800ce0c:	2300      	moveq	r3, #0
 800ce0e:	b2db      	uxtb	r3, r3
 800ce10:	e015      	b.n	800ce3e <HAL_TIM_PWM_Start+0x9e>
 800ce12:	683b      	ldr	r3, [r7, #0]
 800ce14:	2b10      	cmp	r3, #16
 800ce16:	d109      	bne.n	800ce2c <HAL_TIM_PWM_Start+0x8c>
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800ce1e:	b2db      	uxtb	r3, r3
 800ce20:	2b01      	cmp	r3, #1
 800ce22:	bf14      	ite	ne
 800ce24:	2301      	movne	r3, #1
 800ce26:	2300      	moveq	r3, #0
 800ce28:	b2db      	uxtb	r3, r3
 800ce2a:	e008      	b.n	800ce3e <HAL_TIM_PWM_Start+0x9e>
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800ce32:	b2db      	uxtb	r3, r3
 800ce34:	2b01      	cmp	r3, #1
 800ce36:	bf14      	ite	ne
 800ce38:	2301      	movne	r3, #1
 800ce3a:	2300      	moveq	r3, #0
 800ce3c:	b2db      	uxtb	r3, r3
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	d001      	beq.n	800ce46 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800ce42:	2301      	movs	r3, #1
 800ce44:	e0ab      	b.n	800cf9e <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800ce46:	683b      	ldr	r3, [r7, #0]
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	d104      	bne.n	800ce56 <HAL_TIM_PWM_Start+0xb6>
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	2202      	movs	r2, #2
 800ce50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800ce54:	e023      	b.n	800ce9e <HAL_TIM_PWM_Start+0xfe>
 800ce56:	683b      	ldr	r3, [r7, #0]
 800ce58:	2b04      	cmp	r3, #4
 800ce5a:	d104      	bne.n	800ce66 <HAL_TIM_PWM_Start+0xc6>
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	2202      	movs	r2, #2
 800ce60:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800ce64:	e01b      	b.n	800ce9e <HAL_TIM_PWM_Start+0xfe>
 800ce66:	683b      	ldr	r3, [r7, #0]
 800ce68:	2b08      	cmp	r3, #8
 800ce6a:	d104      	bne.n	800ce76 <HAL_TIM_PWM_Start+0xd6>
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	2202      	movs	r2, #2
 800ce70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800ce74:	e013      	b.n	800ce9e <HAL_TIM_PWM_Start+0xfe>
 800ce76:	683b      	ldr	r3, [r7, #0]
 800ce78:	2b0c      	cmp	r3, #12
 800ce7a:	d104      	bne.n	800ce86 <HAL_TIM_PWM_Start+0xe6>
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	2202      	movs	r2, #2
 800ce80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800ce84:	e00b      	b.n	800ce9e <HAL_TIM_PWM_Start+0xfe>
 800ce86:	683b      	ldr	r3, [r7, #0]
 800ce88:	2b10      	cmp	r3, #16
 800ce8a:	d104      	bne.n	800ce96 <HAL_TIM_PWM_Start+0xf6>
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	2202      	movs	r2, #2
 800ce90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800ce94:	e003      	b.n	800ce9e <HAL_TIM_PWM_Start+0xfe>
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	2202      	movs	r2, #2
 800ce9a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	681b      	ldr	r3, [r3, #0]
 800cea2:	2201      	movs	r2, #1
 800cea4:	6839      	ldr	r1, [r7, #0]
 800cea6:	4618      	mov	r0, r3
 800cea8:	f001 f88e 	bl	800dfc8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	681b      	ldr	r3, [r3, #0]
 800ceb0:	4a3d      	ldr	r2, [pc, #244]	@ (800cfa8 <HAL_TIM_PWM_Start+0x208>)
 800ceb2:	4293      	cmp	r3, r2
 800ceb4:	d013      	beq.n	800cede <HAL_TIM_PWM_Start+0x13e>
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	681b      	ldr	r3, [r3, #0]
 800ceba:	4a3c      	ldr	r2, [pc, #240]	@ (800cfac <HAL_TIM_PWM_Start+0x20c>)
 800cebc:	4293      	cmp	r3, r2
 800cebe:	d00e      	beq.n	800cede <HAL_TIM_PWM_Start+0x13e>
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	681b      	ldr	r3, [r3, #0]
 800cec4:	4a3a      	ldr	r2, [pc, #232]	@ (800cfb0 <HAL_TIM_PWM_Start+0x210>)
 800cec6:	4293      	cmp	r3, r2
 800cec8:	d009      	beq.n	800cede <HAL_TIM_PWM_Start+0x13e>
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	681b      	ldr	r3, [r3, #0]
 800cece:	4a39      	ldr	r2, [pc, #228]	@ (800cfb4 <HAL_TIM_PWM_Start+0x214>)
 800ced0:	4293      	cmp	r3, r2
 800ced2:	d004      	beq.n	800cede <HAL_TIM_PWM_Start+0x13e>
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	681b      	ldr	r3, [r3, #0]
 800ced8:	4a37      	ldr	r2, [pc, #220]	@ (800cfb8 <HAL_TIM_PWM_Start+0x218>)
 800ceda:	4293      	cmp	r3, r2
 800cedc:	d101      	bne.n	800cee2 <HAL_TIM_PWM_Start+0x142>
 800cede:	2301      	movs	r3, #1
 800cee0:	e000      	b.n	800cee4 <HAL_TIM_PWM_Start+0x144>
 800cee2:	2300      	movs	r3, #0
 800cee4:	2b00      	cmp	r3, #0
 800cee6:	d007      	beq.n	800cef8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	681b      	ldr	r3, [r3, #0]
 800cef2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800cef6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	681b      	ldr	r3, [r3, #0]
 800cefc:	4a2a      	ldr	r2, [pc, #168]	@ (800cfa8 <HAL_TIM_PWM_Start+0x208>)
 800cefe:	4293      	cmp	r3, r2
 800cf00:	d02c      	beq.n	800cf5c <HAL_TIM_PWM_Start+0x1bc>
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	681b      	ldr	r3, [r3, #0]
 800cf06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cf0a:	d027      	beq.n	800cf5c <HAL_TIM_PWM_Start+0x1bc>
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	681b      	ldr	r3, [r3, #0]
 800cf10:	4a2a      	ldr	r2, [pc, #168]	@ (800cfbc <HAL_TIM_PWM_Start+0x21c>)
 800cf12:	4293      	cmp	r3, r2
 800cf14:	d022      	beq.n	800cf5c <HAL_TIM_PWM_Start+0x1bc>
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	681b      	ldr	r3, [r3, #0]
 800cf1a:	4a29      	ldr	r2, [pc, #164]	@ (800cfc0 <HAL_TIM_PWM_Start+0x220>)
 800cf1c:	4293      	cmp	r3, r2
 800cf1e:	d01d      	beq.n	800cf5c <HAL_TIM_PWM_Start+0x1bc>
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	681b      	ldr	r3, [r3, #0]
 800cf24:	4a27      	ldr	r2, [pc, #156]	@ (800cfc4 <HAL_TIM_PWM_Start+0x224>)
 800cf26:	4293      	cmp	r3, r2
 800cf28:	d018      	beq.n	800cf5c <HAL_TIM_PWM_Start+0x1bc>
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	681b      	ldr	r3, [r3, #0]
 800cf2e:	4a1f      	ldr	r2, [pc, #124]	@ (800cfac <HAL_TIM_PWM_Start+0x20c>)
 800cf30:	4293      	cmp	r3, r2
 800cf32:	d013      	beq.n	800cf5c <HAL_TIM_PWM_Start+0x1bc>
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	681b      	ldr	r3, [r3, #0]
 800cf38:	4a23      	ldr	r2, [pc, #140]	@ (800cfc8 <HAL_TIM_PWM_Start+0x228>)
 800cf3a:	4293      	cmp	r3, r2
 800cf3c:	d00e      	beq.n	800cf5c <HAL_TIM_PWM_Start+0x1bc>
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	681b      	ldr	r3, [r3, #0]
 800cf42:	4a1b      	ldr	r2, [pc, #108]	@ (800cfb0 <HAL_TIM_PWM_Start+0x210>)
 800cf44:	4293      	cmp	r3, r2
 800cf46:	d009      	beq.n	800cf5c <HAL_TIM_PWM_Start+0x1bc>
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	681b      	ldr	r3, [r3, #0]
 800cf4c:	4a1f      	ldr	r2, [pc, #124]	@ (800cfcc <HAL_TIM_PWM_Start+0x22c>)
 800cf4e:	4293      	cmp	r3, r2
 800cf50:	d004      	beq.n	800cf5c <HAL_TIM_PWM_Start+0x1bc>
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	681b      	ldr	r3, [r3, #0]
 800cf56:	4a1e      	ldr	r2, [pc, #120]	@ (800cfd0 <HAL_TIM_PWM_Start+0x230>)
 800cf58:	4293      	cmp	r3, r2
 800cf5a:	d115      	bne.n	800cf88 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	681b      	ldr	r3, [r3, #0]
 800cf60:	689a      	ldr	r2, [r3, #8]
 800cf62:	4b1c      	ldr	r3, [pc, #112]	@ (800cfd4 <HAL_TIM_PWM_Start+0x234>)
 800cf64:	4013      	ands	r3, r2
 800cf66:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cf68:	68fb      	ldr	r3, [r7, #12]
 800cf6a:	2b06      	cmp	r3, #6
 800cf6c:	d015      	beq.n	800cf9a <HAL_TIM_PWM_Start+0x1fa>
 800cf6e:	68fb      	ldr	r3, [r7, #12]
 800cf70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cf74:	d011      	beq.n	800cf9a <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	681b      	ldr	r3, [r3, #0]
 800cf7a:	681a      	ldr	r2, [r3, #0]
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	681b      	ldr	r3, [r3, #0]
 800cf80:	f042 0201 	orr.w	r2, r2, #1
 800cf84:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cf86:	e008      	b.n	800cf9a <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	681b      	ldr	r3, [r3, #0]
 800cf8c:	681a      	ldr	r2, [r3, #0]
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	681b      	ldr	r3, [r3, #0]
 800cf92:	f042 0201 	orr.w	r2, r2, #1
 800cf96:	601a      	str	r2, [r3, #0]
 800cf98:	e000      	b.n	800cf9c <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cf9a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800cf9c:	2300      	movs	r3, #0
}
 800cf9e:	4618      	mov	r0, r3
 800cfa0:	3710      	adds	r7, #16
 800cfa2:	46bd      	mov	sp, r7
 800cfa4:	bd80      	pop	{r7, pc}
 800cfa6:	bf00      	nop
 800cfa8:	40010000 	.word	0x40010000
 800cfac:	40010400 	.word	0x40010400
 800cfb0:	40014000 	.word	0x40014000
 800cfb4:	40014400 	.word	0x40014400
 800cfb8:	40014800 	.word	0x40014800
 800cfbc:	40000400 	.word	0x40000400
 800cfc0:	40000800 	.word	0x40000800
 800cfc4:	40000c00 	.word	0x40000c00
 800cfc8:	40001800 	.word	0x40001800
 800cfcc:	4000e000 	.word	0x4000e000
 800cfd0:	4000e400 	.word	0x4000e400
 800cfd4:	00010007 	.word	0x00010007

0800cfd8 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800cfd8:	b580      	push	{r7, lr}
 800cfda:	b082      	sub	sp, #8
 800cfdc:	af00      	add	r7, sp, #0
 800cfde:	6078      	str	r0, [r7, #4]
 800cfe0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	681b      	ldr	r3, [r3, #0]
 800cfe6:	2200      	movs	r2, #0
 800cfe8:	6839      	ldr	r1, [r7, #0]
 800cfea:	4618      	mov	r0, r3
 800cfec:	f000 ffec 	bl	800dfc8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	681b      	ldr	r3, [r3, #0]
 800cff4:	4a3e      	ldr	r2, [pc, #248]	@ (800d0f0 <HAL_TIM_PWM_Stop+0x118>)
 800cff6:	4293      	cmp	r3, r2
 800cff8:	d013      	beq.n	800d022 <HAL_TIM_PWM_Stop+0x4a>
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	681b      	ldr	r3, [r3, #0]
 800cffe:	4a3d      	ldr	r2, [pc, #244]	@ (800d0f4 <HAL_TIM_PWM_Stop+0x11c>)
 800d000:	4293      	cmp	r3, r2
 800d002:	d00e      	beq.n	800d022 <HAL_TIM_PWM_Stop+0x4a>
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	681b      	ldr	r3, [r3, #0]
 800d008:	4a3b      	ldr	r2, [pc, #236]	@ (800d0f8 <HAL_TIM_PWM_Stop+0x120>)
 800d00a:	4293      	cmp	r3, r2
 800d00c:	d009      	beq.n	800d022 <HAL_TIM_PWM_Stop+0x4a>
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	681b      	ldr	r3, [r3, #0]
 800d012:	4a3a      	ldr	r2, [pc, #232]	@ (800d0fc <HAL_TIM_PWM_Stop+0x124>)
 800d014:	4293      	cmp	r3, r2
 800d016:	d004      	beq.n	800d022 <HAL_TIM_PWM_Stop+0x4a>
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	681b      	ldr	r3, [r3, #0]
 800d01c:	4a38      	ldr	r2, [pc, #224]	@ (800d100 <HAL_TIM_PWM_Stop+0x128>)
 800d01e:	4293      	cmp	r3, r2
 800d020:	d101      	bne.n	800d026 <HAL_TIM_PWM_Stop+0x4e>
 800d022:	2301      	movs	r3, #1
 800d024:	e000      	b.n	800d028 <HAL_TIM_PWM_Stop+0x50>
 800d026:	2300      	movs	r3, #0
 800d028:	2b00      	cmp	r3, #0
 800d02a:	d017      	beq.n	800d05c <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	681b      	ldr	r3, [r3, #0]
 800d030:	6a1a      	ldr	r2, [r3, #32]
 800d032:	f241 1311 	movw	r3, #4369	@ 0x1111
 800d036:	4013      	ands	r3, r2
 800d038:	2b00      	cmp	r3, #0
 800d03a:	d10f      	bne.n	800d05c <HAL_TIM_PWM_Stop+0x84>
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	681b      	ldr	r3, [r3, #0]
 800d040:	6a1a      	ldr	r2, [r3, #32]
 800d042:	f240 4344 	movw	r3, #1092	@ 0x444
 800d046:	4013      	ands	r3, r2
 800d048:	2b00      	cmp	r3, #0
 800d04a:	d107      	bne.n	800d05c <HAL_TIM_PWM_Stop+0x84>
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	681b      	ldr	r3, [r3, #0]
 800d050:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	681b      	ldr	r3, [r3, #0]
 800d056:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800d05a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	681b      	ldr	r3, [r3, #0]
 800d060:	6a1a      	ldr	r2, [r3, #32]
 800d062:	f241 1311 	movw	r3, #4369	@ 0x1111
 800d066:	4013      	ands	r3, r2
 800d068:	2b00      	cmp	r3, #0
 800d06a:	d10f      	bne.n	800d08c <HAL_TIM_PWM_Stop+0xb4>
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	681b      	ldr	r3, [r3, #0]
 800d070:	6a1a      	ldr	r2, [r3, #32]
 800d072:	f240 4344 	movw	r3, #1092	@ 0x444
 800d076:	4013      	ands	r3, r2
 800d078:	2b00      	cmp	r3, #0
 800d07a:	d107      	bne.n	800d08c <HAL_TIM_PWM_Stop+0xb4>
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	681b      	ldr	r3, [r3, #0]
 800d080:	681a      	ldr	r2, [r3, #0]
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	681b      	ldr	r3, [r3, #0]
 800d086:	f022 0201 	bic.w	r2, r2, #1
 800d08a:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800d08c:	683b      	ldr	r3, [r7, #0]
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d104      	bne.n	800d09c <HAL_TIM_PWM_Stop+0xc4>
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	2201      	movs	r2, #1
 800d096:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800d09a:	e023      	b.n	800d0e4 <HAL_TIM_PWM_Stop+0x10c>
 800d09c:	683b      	ldr	r3, [r7, #0]
 800d09e:	2b04      	cmp	r3, #4
 800d0a0:	d104      	bne.n	800d0ac <HAL_TIM_PWM_Stop+0xd4>
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	2201      	movs	r2, #1
 800d0a6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800d0aa:	e01b      	b.n	800d0e4 <HAL_TIM_PWM_Stop+0x10c>
 800d0ac:	683b      	ldr	r3, [r7, #0]
 800d0ae:	2b08      	cmp	r3, #8
 800d0b0:	d104      	bne.n	800d0bc <HAL_TIM_PWM_Stop+0xe4>
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	2201      	movs	r2, #1
 800d0b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800d0ba:	e013      	b.n	800d0e4 <HAL_TIM_PWM_Stop+0x10c>
 800d0bc:	683b      	ldr	r3, [r7, #0]
 800d0be:	2b0c      	cmp	r3, #12
 800d0c0:	d104      	bne.n	800d0cc <HAL_TIM_PWM_Stop+0xf4>
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	2201      	movs	r2, #1
 800d0c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800d0ca:	e00b      	b.n	800d0e4 <HAL_TIM_PWM_Stop+0x10c>
 800d0cc:	683b      	ldr	r3, [r7, #0]
 800d0ce:	2b10      	cmp	r3, #16
 800d0d0:	d104      	bne.n	800d0dc <HAL_TIM_PWM_Stop+0x104>
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	2201      	movs	r2, #1
 800d0d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800d0da:	e003      	b.n	800d0e4 <HAL_TIM_PWM_Stop+0x10c>
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	2201      	movs	r2, #1
 800d0e0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 800d0e4:	2300      	movs	r3, #0
}
 800d0e6:	4618      	mov	r0, r3
 800d0e8:	3708      	adds	r7, #8
 800d0ea:	46bd      	mov	sp, r7
 800d0ec:	bd80      	pop	{r7, pc}
 800d0ee:	bf00      	nop
 800d0f0:	40010000 	.word	0x40010000
 800d0f4:	40010400 	.word	0x40010400
 800d0f8:	40014000 	.word	0x40014000
 800d0fc:	40014400 	.word	0x40014400
 800d100:	40014800 	.word	0x40014800

0800d104 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d104:	b580      	push	{r7, lr}
 800d106:	b084      	sub	sp, #16
 800d108:	af00      	add	r7, sp, #0
 800d10a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	681b      	ldr	r3, [r3, #0]
 800d110:	68db      	ldr	r3, [r3, #12]
 800d112:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	681b      	ldr	r3, [r3, #0]
 800d118:	691b      	ldr	r3, [r3, #16]
 800d11a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800d11c:	68bb      	ldr	r3, [r7, #8]
 800d11e:	f003 0302 	and.w	r3, r3, #2
 800d122:	2b00      	cmp	r3, #0
 800d124:	d020      	beq.n	800d168 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800d126:	68fb      	ldr	r3, [r7, #12]
 800d128:	f003 0302 	and.w	r3, r3, #2
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	d01b      	beq.n	800d168 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	681b      	ldr	r3, [r3, #0]
 800d134:	f06f 0202 	mvn.w	r2, #2
 800d138:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	2201      	movs	r2, #1
 800d13e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	681b      	ldr	r3, [r3, #0]
 800d144:	699b      	ldr	r3, [r3, #24]
 800d146:	f003 0303 	and.w	r3, r3, #3
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	d003      	beq.n	800d156 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d14e:	6878      	ldr	r0, [r7, #4]
 800d150:	f000 faf6 	bl	800d740 <HAL_TIM_IC_CaptureCallback>
 800d154:	e005      	b.n	800d162 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d156:	6878      	ldr	r0, [r7, #4]
 800d158:	f000 fae8 	bl	800d72c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d15c:	6878      	ldr	r0, [r7, #4]
 800d15e:	f000 faf9 	bl	800d754 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	2200      	movs	r2, #0
 800d166:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800d168:	68bb      	ldr	r3, [r7, #8]
 800d16a:	f003 0304 	and.w	r3, r3, #4
 800d16e:	2b00      	cmp	r3, #0
 800d170:	d020      	beq.n	800d1b4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800d172:	68fb      	ldr	r3, [r7, #12]
 800d174:	f003 0304 	and.w	r3, r3, #4
 800d178:	2b00      	cmp	r3, #0
 800d17a:	d01b      	beq.n	800d1b4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	681b      	ldr	r3, [r3, #0]
 800d180:	f06f 0204 	mvn.w	r2, #4
 800d184:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	2202      	movs	r2, #2
 800d18a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	681b      	ldr	r3, [r3, #0]
 800d190:	699b      	ldr	r3, [r3, #24]
 800d192:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d196:	2b00      	cmp	r3, #0
 800d198:	d003      	beq.n	800d1a2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d19a:	6878      	ldr	r0, [r7, #4]
 800d19c:	f000 fad0 	bl	800d740 <HAL_TIM_IC_CaptureCallback>
 800d1a0:	e005      	b.n	800d1ae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d1a2:	6878      	ldr	r0, [r7, #4]
 800d1a4:	f000 fac2 	bl	800d72c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d1a8:	6878      	ldr	r0, [r7, #4]
 800d1aa:	f000 fad3 	bl	800d754 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	2200      	movs	r2, #0
 800d1b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800d1b4:	68bb      	ldr	r3, [r7, #8]
 800d1b6:	f003 0308 	and.w	r3, r3, #8
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	d020      	beq.n	800d200 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800d1be:	68fb      	ldr	r3, [r7, #12]
 800d1c0:	f003 0308 	and.w	r3, r3, #8
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	d01b      	beq.n	800d200 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	681b      	ldr	r3, [r3, #0]
 800d1cc:	f06f 0208 	mvn.w	r2, #8
 800d1d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	2204      	movs	r2, #4
 800d1d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	681b      	ldr	r3, [r3, #0]
 800d1dc:	69db      	ldr	r3, [r3, #28]
 800d1de:	f003 0303 	and.w	r3, r3, #3
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	d003      	beq.n	800d1ee <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d1e6:	6878      	ldr	r0, [r7, #4]
 800d1e8:	f000 faaa 	bl	800d740 <HAL_TIM_IC_CaptureCallback>
 800d1ec:	e005      	b.n	800d1fa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d1ee:	6878      	ldr	r0, [r7, #4]
 800d1f0:	f000 fa9c 	bl	800d72c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d1f4:	6878      	ldr	r0, [r7, #4]
 800d1f6:	f000 faad 	bl	800d754 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	2200      	movs	r2, #0
 800d1fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800d200:	68bb      	ldr	r3, [r7, #8]
 800d202:	f003 0310 	and.w	r3, r3, #16
 800d206:	2b00      	cmp	r3, #0
 800d208:	d020      	beq.n	800d24c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800d20a:	68fb      	ldr	r3, [r7, #12]
 800d20c:	f003 0310 	and.w	r3, r3, #16
 800d210:	2b00      	cmp	r3, #0
 800d212:	d01b      	beq.n	800d24c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	681b      	ldr	r3, [r3, #0]
 800d218:	f06f 0210 	mvn.w	r2, #16
 800d21c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	2208      	movs	r2, #8
 800d222:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	681b      	ldr	r3, [r3, #0]
 800d228:	69db      	ldr	r3, [r3, #28]
 800d22a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d22e:	2b00      	cmp	r3, #0
 800d230:	d003      	beq.n	800d23a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d232:	6878      	ldr	r0, [r7, #4]
 800d234:	f000 fa84 	bl	800d740 <HAL_TIM_IC_CaptureCallback>
 800d238:	e005      	b.n	800d246 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d23a:	6878      	ldr	r0, [r7, #4]
 800d23c:	f000 fa76 	bl	800d72c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d240:	6878      	ldr	r0, [r7, #4]
 800d242:	f000 fa87 	bl	800d754 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	2200      	movs	r2, #0
 800d24a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800d24c:	68bb      	ldr	r3, [r7, #8]
 800d24e:	f003 0301 	and.w	r3, r3, #1
 800d252:	2b00      	cmp	r3, #0
 800d254:	d00c      	beq.n	800d270 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800d256:	68fb      	ldr	r3, [r7, #12]
 800d258:	f003 0301 	and.w	r3, r3, #1
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	d007      	beq.n	800d270 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	681b      	ldr	r3, [r3, #0]
 800d264:	f06f 0201 	mvn.w	r2, #1
 800d268:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d26a:	6878      	ldr	r0, [r7, #4]
 800d26c:	f7f3 fc24 	bl	8000ab8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800d270:	68bb      	ldr	r3, [r7, #8]
 800d272:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d276:	2b00      	cmp	r3, #0
 800d278:	d104      	bne.n	800d284 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800d27a:	68bb      	ldr	r3, [r7, #8]
 800d27c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800d280:	2b00      	cmp	r3, #0
 800d282:	d00c      	beq.n	800d29e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800d284:	68fb      	ldr	r3, [r7, #12]
 800d286:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	d007      	beq.n	800d29e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	681b      	ldr	r3, [r3, #0]
 800d292:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800d296:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d298:	6878      	ldr	r0, [r7, #4]
 800d29a:	f000 ff61 	bl	800e160 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800d29e:	68bb      	ldr	r3, [r7, #8]
 800d2a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	d00c      	beq.n	800d2c2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800d2a8:	68fb      	ldr	r3, [r7, #12]
 800d2aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	d007      	beq.n	800d2c2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	681b      	ldr	r3, [r3, #0]
 800d2b6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800d2ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800d2bc:	6878      	ldr	r0, [r7, #4]
 800d2be:	f000 ff59 	bl	800e174 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800d2c2:	68bb      	ldr	r3, [r7, #8]
 800d2c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d2c8:	2b00      	cmp	r3, #0
 800d2ca:	d00c      	beq.n	800d2e6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800d2cc:	68fb      	ldr	r3, [r7, #12]
 800d2ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	d007      	beq.n	800d2e6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	681b      	ldr	r3, [r3, #0]
 800d2da:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800d2de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d2e0:	6878      	ldr	r0, [r7, #4]
 800d2e2:	f000 fa41 	bl	800d768 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800d2e6:	68bb      	ldr	r3, [r7, #8]
 800d2e8:	f003 0320 	and.w	r3, r3, #32
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	d00c      	beq.n	800d30a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800d2f0:	68fb      	ldr	r3, [r7, #12]
 800d2f2:	f003 0320 	and.w	r3, r3, #32
 800d2f6:	2b00      	cmp	r3, #0
 800d2f8:	d007      	beq.n	800d30a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	681b      	ldr	r3, [r3, #0]
 800d2fe:	f06f 0220 	mvn.w	r2, #32
 800d302:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d304:	6878      	ldr	r0, [r7, #4]
 800d306:	f000 ff21 	bl	800e14c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d30a:	bf00      	nop
 800d30c:	3710      	adds	r7, #16
 800d30e:	46bd      	mov	sp, r7
 800d310:	bd80      	pop	{r7, pc}
	...

0800d314 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800d314:	b580      	push	{r7, lr}
 800d316:	b086      	sub	sp, #24
 800d318:	af00      	add	r7, sp, #0
 800d31a:	60f8      	str	r0, [r7, #12]
 800d31c:	60b9      	str	r1, [r7, #8]
 800d31e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d320:	2300      	movs	r3, #0
 800d322:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800d324:	68fb      	ldr	r3, [r7, #12]
 800d326:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d32a:	2b01      	cmp	r3, #1
 800d32c:	d101      	bne.n	800d332 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800d32e:	2302      	movs	r3, #2
 800d330:	e0ff      	b.n	800d532 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800d332:	68fb      	ldr	r3, [r7, #12]
 800d334:	2201      	movs	r2, #1
 800d336:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	2b14      	cmp	r3, #20
 800d33e:	f200 80f0 	bhi.w	800d522 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800d342:	a201      	add	r2, pc, #4	@ (adr r2, 800d348 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800d344:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d348:	0800d39d 	.word	0x0800d39d
 800d34c:	0800d523 	.word	0x0800d523
 800d350:	0800d523 	.word	0x0800d523
 800d354:	0800d523 	.word	0x0800d523
 800d358:	0800d3dd 	.word	0x0800d3dd
 800d35c:	0800d523 	.word	0x0800d523
 800d360:	0800d523 	.word	0x0800d523
 800d364:	0800d523 	.word	0x0800d523
 800d368:	0800d41f 	.word	0x0800d41f
 800d36c:	0800d523 	.word	0x0800d523
 800d370:	0800d523 	.word	0x0800d523
 800d374:	0800d523 	.word	0x0800d523
 800d378:	0800d45f 	.word	0x0800d45f
 800d37c:	0800d523 	.word	0x0800d523
 800d380:	0800d523 	.word	0x0800d523
 800d384:	0800d523 	.word	0x0800d523
 800d388:	0800d4a1 	.word	0x0800d4a1
 800d38c:	0800d523 	.word	0x0800d523
 800d390:	0800d523 	.word	0x0800d523
 800d394:	0800d523 	.word	0x0800d523
 800d398:	0800d4e1 	.word	0x0800d4e1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800d39c:	68fb      	ldr	r3, [r7, #12]
 800d39e:	681b      	ldr	r3, [r3, #0]
 800d3a0:	68b9      	ldr	r1, [r7, #8]
 800d3a2:	4618      	mov	r0, r3
 800d3a4:	f000 fa9c 	bl	800d8e0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800d3a8:	68fb      	ldr	r3, [r7, #12]
 800d3aa:	681b      	ldr	r3, [r3, #0]
 800d3ac:	699a      	ldr	r2, [r3, #24]
 800d3ae:	68fb      	ldr	r3, [r7, #12]
 800d3b0:	681b      	ldr	r3, [r3, #0]
 800d3b2:	f042 0208 	orr.w	r2, r2, #8
 800d3b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800d3b8:	68fb      	ldr	r3, [r7, #12]
 800d3ba:	681b      	ldr	r3, [r3, #0]
 800d3bc:	699a      	ldr	r2, [r3, #24]
 800d3be:	68fb      	ldr	r3, [r7, #12]
 800d3c0:	681b      	ldr	r3, [r3, #0]
 800d3c2:	f022 0204 	bic.w	r2, r2, #4
 800d3c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800d3c8:	68fb      	ldr	r3, [r7, #12]
 800d3ca:	681b      	ldr	r3, [r3, #0]
 800d3cc:	6999      	ldr	r1, [r3, #24]
 800d3ce:	68bb      	ldr	r3, [r7, #8]
 800d3d0:	691a      	ldr	r2, [r3, #16]
 800d3d2:	68fb      	ldr	r3, [r7, #12]
 800d3d4:	681b      	ldr	r3, [r3, #0]
 800d3d6:	430a      	orrs	r2, r1
 800d3d8:	619a      	str	r2, [r3, #24]
      break;
 800d3da:	e0a5      	b.n	800d528 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800d3dc:	68fb      	ldr	r3, [r7, #12]
 800d3de:	681b      	ldr	r3, [r3, #0]
 800d3e0:	68b9      	ldr	r1, [r7, #8]
 800d3e2:	4618      	mov	r0, r3
 800d3e4:	f000 fb0c 	bl	800da00 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800d3e8:	68fb      	ldr	r3, [r7, #12]
 800d3ea:	681b      	ldr	r3, [r3, #0]
 800d3ec:	699a      	ldr	r2, [r3, #24]
 800d3ee:	68fb      	ldr	r3, [r7, #12]
 800d3f0:	681b      	ldr	r3, [r3, #0]
 800d3f2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800d3f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800d3f8:	68fb      	ldr	r3, [r7, #12]
 800d3fa:	681b      	ldr	r3, [r3, #0]
 800d3fc:	699a      	ldr	r2, [r3, #24]
 800d3fe:	68fb      	ldr	r3, [r7, #12]
 800d400:	681b      	ldr	r3, [r3, #0]
 800d402:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800d406:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800d408:	68fb      	ldr	r3, [r7, #12]
 800d40a:	681b      	ldr	r3, [r3, #0]
 800d40c:	6999      	ldr	r1, [r3, #24]
 800d40e:	68bb      	ldr	r3, [r7, #8]
 800d410:	691b      	ldr	r3, [r3, #16]
 800d412:	021a      	lsls	r2, r3, #8
 800d414:	68fb      	ldr	r3, [r7, #12]
 800d416:	681b      	ldr	r3, [r3, #0]
 800d418:	430a      	orrs	r2, r1
 800d41a:	619a      	str	r2, [r3, #24]
      break;
 800d41c:	e084      	b.n	800d528 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800d41e:	68fb      	ldr	r3, [r7, #12]
 800d420:	681b      	ldr	r3, [r3, #0]
 800d422:	68b9      	ldr	r1, [r7, #8]
 800d424:	4618      	mov	r0, r3
 800d426:	f000 fb75 	bl	800db14 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800d42a:	68fb      	ldr	r3, [r7, #12]
 800d42c:	681b      	ldr	r3, [r3, #0]
 800d42e:	69da      	ldr	r2, [r3, #28]
 800d430:	68fb      	ldr	r3, [r7, #12]
 800d432:	681b      	ldr	r3, [r3, #0]
 800d434:	f042 0208 	orr.w	r2, r2, #8
 800d438:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800d43a:	68fb      	ldr	r3, [r7, #12]
 800d43c:	681b      	ldr	r3, [r3, #0]
 800d43e:	69da      	ldr	r2, [r3, #28]
 800d440:	68fb      	ldr	r3, [r7, #12]
 800d442:	681b      	ldr	r3, [r3, #0]
 800d444:	f022 0204 	bic.w	r2, r2, #4
 800d448:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800d44a:	68fb      	ldr	r3, [r7, #12]
 800d44c:	681b      	ldr	r3, [r3, #0]
 800d44e:	69d9      	ldr	r1, [r3, #28]
 800d450:	68bb      	ldr	r3, [r7, #8]
 800d452:	691a      	ldr	r2, [r3, #16]
 800d454:	68fb      	ldr	r3, [r7, #12]
 800d456:	681b      	ldr	r3, [r3, #0]
 800d458:	430a      	orrs	r2, r1
 800d45a:	61da      	str	r2, [r3, #28]
      break;
 800d45c:	e064      	b.n	800d528 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800d45e:	68fb      	ldr	r3, [r7, #12]
 800d460:	681b      	ldr	r3, [r3, #0]
 800d462:	68b9      	ldr	r1, [r7, #8]
 800d464:	4618      	mov	r0, r3
 800d466:	f000 fbdd 	bl	800dc24 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800d46a:	68fb      	ldr	r3, [r7, #12]
 800d46c:	681b      	ldr	r3, [r3, #0]
 800d46e:	69da      	ldr	r2, [r3, #28]
 800d470:	68fb      	ldr	r3, [r7, #12]
 800d472:	681b      	ldr	r3, [r3, #0]
 800d474:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800d478:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800d47a:	68fb      	ldr	r3, [r7, #12]
 800d47c:	681b      	ldr	r3, [r3, #0]
 800d47e:	69da      	ldr	r2, [r3, #28]
 800d480:	68fb      	ldr	r3, [r7, #12]
 800d482:	681b      	ldr	r3, [r3, #0]
 800d484:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800d488:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800d48a:	68fb      	ldr	r3, [r7, #12]
 800d48c:	681b      	ldr	r3, [r3, #0]
 800d48e:	69d9      	ldr	r1, [r3, #28]
 800d490:	68bb      	ldr	r3, [r7, #8]
 800d492:	691b      	ldr	r3, [r3, #16]
 800d494:	021a      	lsls	r2, r3, #8
 800d496:	68fb      	ldr	r3, [r7, #12]
 800d498:	681b      	ldr	r3, [r3, #0]
 800d49a:	430a      	orrs	r2, r1
 800d49c:	61da      	str	r2, [r3, #28]
      break;
 800d49e:	e043      	b.n	800d528 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800d4a0:	68fb      	ldr	r3, [r7, #12]
 800d4a2:	681b      	ldr	r3, [r3, #0]
 800d4a4:	68b9      	ldr	r1, [r7, #8]
 800d4a6:	4618      	mov	r0, r3
 800d4a8:	f000 fc26 	bl	800dcf8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800d4ac:	68fb      	ldr	r3, [r7, #12]
 800d4ae:	681b      	ldr	r3, [r3, #0]
 800d4b0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d4b2:	68fb      	ldr	r3, [r7, #12]
 800d4b4:	681b      	ldr	r3, [r3, #0]
 800d4b6:	f042 0208 	orr.w	r2, r2, #8
 800d4ba:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800d4bc:	68fb      	ldr	r3, [r7, #12]
 800d4be:	681b      	ldr	r3, [r3, #0]
 800d4c0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d4c2:	68fb      	ldr	r3, [r7, #12]
 800d4c4:	681b      	ldr	r3, [r3, #0]
 800d4c6:	f022 0204 	bic.w	r2, r2, #4
 800d4ca:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800d4cc:	68fb      	ldr	r3, [r7, #12]
 800d4ce:	681b      	ldr	r3, [r3, #0]
 800d4d0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800d4d2:	68bb      	ldr	r3, [r7, #8]
 800d4d4:	691a      	ldr	r2, [r3, #16]
 800d4d6:	68fb      	ldr	r3, [r7, #12]
 800d4d8:	681b      	ldr	r3, [r3, #0]
 800d4da:	430a      	orrs	r2, r1
 800d4dc:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800d4de:	e023      	b.n	800d528 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800d4e0:	68fb      	ldr	r3, [r7, #12]
 800d4e2:	681b      	ldr	r3, [r3, #0]
 800d4e4:	68b9      	ldr	r1, [r7, #8]
 800d4e6:	4618      	mov	r0, r3
 800d4e8:	f000 fc6a 	bl	800ddc0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800d4ec:	68fb      	ldr	r3, [r7, #12]
 800d4ee:	681b      	ldr	r3, [r3, #0]
 800d4f0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d4f2:	68fb      	ldr	r3, [r7, #12]
 800d4f4:	681b      	ldr	r3, [r3, #0]
 800d4f6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800d4fa:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800d4fc:	68fb      	ldr	r3, [r7, #12]
 800d4fe:	681b      	ldr	r3, [r3, #0]
 800d500:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d502:	68fb      	ldr	r3, [r7, #12]
 800d504:	681b      	ldr	r3, [r3, #0]
 800d506:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800d50a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800d50c:	68fb      	ldr	r3, [r7, #12]
 800d50e:	681b      	ldr	r3, [r3, #0]
 800d510:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800d512:	68bb      	ldr	r3, [r7, #8]
 800d514:	691b      	ldr	r3, [r3, #16]
 800d516:	021a      	lsls	r2, r3, #8
 800d518:	68fb      	ldr	r3, [r7, #12]
 800d51a:	681b      	ldr	r3, [r3, #0]
 800d51c:	430a      	orrs	r2, r1
 800d51e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800d520:	e002      	b.n	800d528 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800d522:	2301      	movs	r3, #1
 800d524:	75fb      	strb	r3, [r7, #23]
      break;
 800d526:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800d528:	68fb      	ldr	r3, [r7, #12]
 800d52a:	2200      	movs	r2, #0
 800d52c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800d530:	7dfb      	ldrb	r3, [r7, #23]
}
 800d532:	4618      	mov	r0, r3
 800d534:	3718      	adds	r7, #24
 800d536:	46bd      	mov	sp, r7
 800d538:	bd80      	pop	{r7, pc}
 800d53a:	bf00      	nop

0800d53c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800d53c:	b580      	push	{r7, lr}
 800d53e:	b084      	sub	sp, #16
 800d540:	af00      	add	r7, sp, #0
 800d542:	6078      	str	r0, [r7, #4]
 800d544:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d546:	2300      	movs	r3, #0
 800d548:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d550:	2b01      	cmp	r3, #1
 800d552:	d101      	bne.n	800d558 <HAL_TIM_ConfigClockSource+0x1c>
 800d554:	2302      	movs	r3, #2
 800d556:	e0dc      	b.n	800d712 <HAL_TIM_ConfigClockSource+0x1d6>
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	2201      	movs	r2, #1
 800d55c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	2202      	movs	r2, #2
 800d564:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	681b      	ldr	r3, [r3, #0]
 800d56c:	689b      	ldr	r3, [r3, #8]
 800d56e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800d570:	68ba      	ldr	r2, [r7, #8]
 800d572:	4b6a      	ldr	r3, [pc, #424]	@ (800d71c <HAL_TIM_ConfigClockSource+0x1e0>)
 800d574:	4013      	ands	r3, r2
 800d576:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d578:	68bb      	ldr	r3, [r7, #8]
 800d57a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800d57e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	681b      	ldr	r3, [r3, #0]
 800d584:	68ba      	ldr	r2, [r7, #8]
 800d586:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800d588:	683b      	ldr	r3, [r7, #0]
 800d58a:	681b      	ldr	r3, [r3, #0]
 800d58c:	4a64      	ldr	r2, [pc, #400]	@ (800d720 <HAL_TIM_ConfigClockSource+0x1e4>)
 800d58e:	4293      	cmp	r3, r2
 800d590:	f000 80a9 	beq.w	800d6e6 <HAL_TIM_ConfigClockSource+0x1aa>
 800d594:	4a62      	ldr	r2, [pc, #392]	@ (800d720 <HAL_TIM_ConfigClockSource+0x1e4>)
 800d596:	4293      	cmp	r3, r2
 800d598:	f200 80ae 	bhi.w	800d6f8 <HAL_TIM_ConfigClockSource+0x1bc>
 800d59c:	4a61      	ldr	r2, [pc, #388]	@ (800d724 <HAL_TIM_ConfigClockSource+0x1e8>)
 800d59e:	4293      	cmp	r3, r2
 800d5a0:	f000 80a1 	beq.w	800d6e6 <HAL_TIM_ConfigClockSource+0x1aa>
 800d5a4:	4a5f      	ldr	r2, [pc, #380]	@ (800d724 <HAL_TIM_ConfigClockSource+0x1e8>)
 800d5a6:	4293      	cmp	r3, r2
 800d5a8:	f200 80a6 	bhi.w	800d6f8 <HAL_TIM_ConfigClockSource+0x1bc>
 800d5ac:	4a5e      	ldr	r2, [pc, #376]	@ (800d728 <HAL_TIM_ConfigClockSource+0x1ec>)
 800d5ae:	4293      	cmp	r3, r2
 800d5b0:	f000 8099 	beq.w	800d6e6 <HAL_TIM_ConfigClockSource+0x1aa>
 800d5b4:	4a5c      	ldr	r2, [pc, #368]	@ (800d728 <HAL_TIM_ConfigClockSource+0x1ec>)
 800d5b6:	4293      	cmp	r3, r2
 800d5b8:	f200 809e 	bhi.w	800d6f8 <HAL_TIM_ConfigClockSource+0x1bc>
 800d5bc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800d5c0:	f000 8091 	beq.w	800d6e6 <HAL_TIM_ConfigClockSource+0x1aa>
 800d5c4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800d5c8:	f200 8096 	bhi.w	800d6f8 <HAL_TIM_ConfigClockSource+0x1bc>
 800d5cc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d5d0:	f000 8089 	beq.w	800d6e6 <HAL_TIM_ConfigClockSource+0x1aa>
 800d5d4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d5d8:	f200 808e 	bhi.w	800d6f8 <HAL_TIM_ConfigClockSource+0x1bc>
 800d5dc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d5e0:	d03e      	beq.n	800d660 <HAL_TIM_ConfigClockSource+0x124>
 800d5e2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d5e6:	f200 8087 	bhi.w	800d6f8 <HAL_TIM_ConfigClockSource+0x1bc>
 800d5ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d5ee:	f000 8086 	beq.w	800d6fe <HAL_TIM_ConfigClockSource+0x1c2>
 800d5f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d5f6:	d87f      	bhi.n	800d6f8 <HAL_TIM_ConfigClockSource+0x1bc>
 800d5f8:	2b70      	cmp	r3, #112	@ 0x70
 800d5fa:	d01a      	beq.n	800d632 <HAL_TIM_ConfigClockSource+0xf6>
 800d5fc:	2b70      	cmp	r3, #112	@ 0x70
 800d5fe:	d87b      	bhi.n	800d6f8 <HAL_TIM_ConfigClockSource+0x1bc>
 800d600:	2b60      	cmp	r3, #96	@ 0x60
 800d602:	d050      	beq.n	800d6a6 <HAL_TIM_ConfigClockSource+0x16a>
 800d604:	2b60      	cmp	r3, #96	@ 0x60
 800d606:	d877      	bhi.n	800d6f8 <HAL_TIM_ConfigClockSource+0x1bc>
 800d608:	2b50      	cmp	r3, #80	@ 0x50
 800d60a:	d03c      	beq.n	800d686 <HAL_TIM_ConfigClockSource+0x14a>
 800d60c:	2b50      	cmp	r3, #80	@ 0x50
 800d60e:	d873      	bhi.n	800d6f8 <HAL_TIM_ConfigClockSource+0x1bc>
 800d610:	2b40      	cmp	r3, #64	@ 0x40
 800d612:	d058      	beq.n	800d6c6 <HAL_TIM_ConfigClockSource+0x18a>
 800d614:	2b40      	cmp	r3, #64	@ 0x40
 800d616:	d86f      	bhi.n	800d6f8 <HAL_TIM_ConfigClockSource+0x1bc>
 800d618:	2b30      	cmp	r3, #48	@ 0x30
 800d61a:	d064      	beq.n	800d6e6 <HAL_TIM_ConfigClockSource+0x1aa>
 800d61c:	2b30      	cmp	r3, #48	@ 0x30
 800d61e:	d86b      	bhi.n	800d6f8 <HAL_TIM_ConfigClockSource+0x1bc>
 800d620:	2b20      	cmp	r3, #32
 800d622:	d060      	beq.n	800d6e6 <HAL_TIM_ConfigClockSource+0x1aa>
 800d624:	2b20      	cmp	r3, #32
 800d626:	d867      	bhi.n	800d6f8 <HAL_TIM_ConfigClockSource+0x1bc>
 800d628:	2b00      	cmp	r3, #0
 800d62a:	d05c      	beq.n	800d6e6 <HAL_TIM_ConfigClockSource+0x1aa>
 800d62c:	2b10      	cmp	r3, #16
 800d62e:	d05a      	beq.n	800d6e6 <HAL_TIM_ConfigClockSource+0x1aa>
 800d630:	e062      	b.n	800d6f8 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800d636:	683b      	ldr	r3, [r7, #0]
 800d638:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800d63a:	683b      	ldr	r3, [r7, #0]
 800d63c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800d63e:	683b      	ldr	r3, [r7, #0]
 800d640:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800d642:	f000 fca1 	bl	800df88 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	681b      	ldr	r3, [r3, #0]
 800d64a:	689b      	ldr	r3, [r3, #8]
 800d64c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800d64e:	68bb      	ldr	r3, [r7, #8]
 800d650:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800d654:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	681b      	ldr	r3, [r3, #0]
 800d65a:	68ba      	ldr	r2, [r7, #8]
 800d65c:	609a      	str	r2, [r3, #8]
      break;
 800d65e:	e04f      	b.n	800d700 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800d664:	683b      	ldr	r3, [r7, #0]
 800d666:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800d668:	683b      	ldr	r3, [r7, #0]
 800d66a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800d66c:	683b      	ldr	r3, [r7, #0]
 800d66e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800d670:	f000 fc8a 	bl	800df88 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	681b      	ldr	r3, [r3, #0]
 800d678:	689a      	ldr	r2, [r3, #8]
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	681b      	ldr	r3, [r3, #0]
 800d67e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800d682:	609a      	str	r2, [r3, #8]
      break;
 800d684:	e03c      	b.n	800d700 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d68a:	683b      	ldr	r3, [r7, #0]
 800d68c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d68e:	683b      	ldr	r3, [r7, #0]
 800d690:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d692:	461a      	mov	r2, r3
 800d694:	f000 fbfa 	bl	800de8c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	681b      	ldr	r3, [r3, #0]
 800d69c:	2150      	movs	r1, #80	@ 0x50
 800d69e:	4618      	mov	r0, r3
 800d6a0:	f000 fc54 	bl	800df4c <TIM_ITRx_SetConfig>
      break;
 800d6a4:	e02c      	b.n	800d700 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d6aa:	683b      	ldr	r3, [r7, #0]
 800d6ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d6ae:	683b      	ldr	r3, [r7, #0]
 800d6b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800d6b2:	461a      	mov	r2, r3
 800d6b4:	f000 fc19 	bl	800deea <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	681b      	ldr	r3, [r3, #0]
 800d6bc:	2160      	movs	r1, #96	@ 0x60
 800d6be:	4618      	mov	r0, r3
 800d6c0:	f000 fc44 	bl	800df4c <TIM_ITRx_SetConfig>
      break;
 800d6c4:	e01c      	b.n	800d700 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d6ca:	683b      	ldr	r3, [r7, #0]
 800d6cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d6ce:	683b      	ldr	r3, [r7, #0]
 800d6d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d6d2:	461a      	mov	r2, r3
 800d6d4:	f000 fbda 	bl	800de8c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	681b      	ldr	r3, [r3, #0]
 800d6dc:	2140      	movs	r1, #64	@ 0x40
 800d6de:	4618      	mov	r0, r3
 800d6e0:	f000 fc34 	bl	800df4c <TIM_ITRx_SetConfig>
      break;
 800d6e4:	e00c      	b.n	800d700 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	681a      	ldr	r2, [r3, #0]
 800d6ea:	683b      	ldr	r3, [r7, #0]
 800d6ec:	681b      	ldr	r3, [r3, #0]
 800d6ee:	4619      	mov	r1, r3
 800d6f0:	4610      	mov	r0, r2
 800d6f2:	f000 fc2b 	bl	800df4c <TIM_ITRx_SetConfig>
      break;
 800d6f6:	e003      	b.n	800d700 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800d6f8:	2301      	movs	r3, #1
 800d6fa:	73fb      	strb	r3, [r7, #15]
      break;
 800d6fc:	e000      	b.n	800d700 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800d6fe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	2201      	movs	r2, #1
 800d704:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	2200      	movs	r2, #0
 800d70c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800d710:	7bfb      	ldrb	r3, [r7, #15]
}
 800d712:	4618      	mov	r0, r3
 800d714:	3710      	adds	r7, #16
 800d716:	46bd      	mov	sp, r7
 800d718:	bd80      	pop	{r7, pc}
 800d71a:	bf00      	nop
 800d71c:	ffceff88 	.word	0xffceff88
 800d720:	00100040 	.word	0x00100040
 800d724:	00100030 	.word	0x00100030
 800d728:	00100020 	.word	0x00100020

0800d72c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d72c:	b480      	push	{r7}
 800d72e:	b083      	sub	sp, #12
 800d730:	af00      	add	r7, sp, #0
 800d732:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d734:	bf00      	nop
 800d736:	370c      	adds	r7, #12
 800d738:	46bd      	mov	sp, r7
 800d73a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d73e:	4770      	bx	lr

0800d740 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d740:	b480      	push	{r7}
 800d742:	b083      	sub	sp, #12
 800d744:	af00      	add	r7, sp, #0
 800d746:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d748:	bf00      	nop
 800d74a:	370c      	adds	r7, #12
 800d74c:	46bd      	mov	sp, r7
 800d74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d752:	4770      	bx	lr

0800d754 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d754:	b480      	push	{r7}
 800d756:	b083      	sub	sp, #12
 800d758:	af00      	add	r7, sp, #0
 800d75a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d75c:	bf00      	nop
 800d75e:	370c      	adds	r7, #12
 800d760:	46bd      	mov	sp, r7
 800d762:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d766:	4770      	bx	lr

0800d768 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d768:	b480      	push	{r7}
 800d76a:	b083      	sub	sp, #12
 800d76c:	af00      	add	r7, sp, #0
 800d76e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d770:	bf00      	nop
 800d772:	370c      	adds	r7, #12
 800d774:	46bd      	mov	sp, r7
 800d776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d77a:	4770      	bx	lr

0800d77c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800d77c:	b480      	push	{r7}
 800d77e:	b085      	sub	sp, #20
 800d780:	af00      	add	r7, sp, #0
 800d782:	6078      	str	r0, [r7, #4]
 800d784:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	681b      	ldr	r3, [r3, #0]
 800d78a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	4a4a      	ldr	r2, [pc, #296]	@ (800d8b8 <TIM_Base_SetConfig+0x13c>)
 800d790:	4293      	cmp	r3, r2
 800d792:	d013      	beq.n	800d7bc <TIM_Base_SetConfig+0x40>
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d79a:	d00f      	beq.n	800d7bc <TIM_Base_SetConfig+0x40>
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	4a47      	ldr	r2, [pc, #284]	@ (800d8bc <TIM_Base_SetConfig+0x140>)
 800d7a0:	4293      	cmp	r3, r2
 800d7a2:	d00b      	beq.n	800d7bc <TIM_Base_SetConfig+0x40>
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	4a46      	ldr	r2, [pc, #280]	@ (800d8c0 <TIM_Base_SetConfig+0x144>)
 800d7a8:	4293      	cmp	r3, r2
 800d7aa:	d007      	beq.n	800d7bc <TIM_Base_SetConfig+0x40>
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	4a45      	ldr	r2, [pc, #276]	@ (800d8c4 <TIM_Base_SetConfig+0x148>)
 800d7b0:	4293      	cmp	r3, r2
 800d7b2:	d003      	beq.n	800d7bc <TIM_Base_SetConfig+0x40>
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	4a44      	ldr	r2, [pc, #272]	@ (800d8c8 <TIM_Base_SetConfig+0x14c>)
 800d7b8:	4293      	cmp	r3, r2
 800d7ba:	d108      	bne.n	800d7ce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d7bc:	68fb      	ldr	r3, [r7, #12]
 800d7be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d7c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d7c4:	683b      	ldr	r3, [r7, #0]
 800d7c6:	685b      	ldr	r3, [r3, #4]
 800d7c8:	68fa      	ldr	r2, [r7, #12]
 800d7ca:	4313      	orrs	r3, r2
 800d7cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	4a39      	ldr	r2, [pc, #228]	@ (800d8b8 <TIM_Base_SetConfig+0x13c>)
 800d7d2:	4293      	cmp	r3, r2
 800d7d4:	d027      	beq.n	800d826 <TIM_Base_SetConfig+0xaa>
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d7dc:	d023      	beq.n	800d826 <TIM_Base_SetConfig+0xaa>
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	4a36      	ldr	r2, [pc, #216]	@ (800d8bc <TIM_Base_SetConfig+0x140>)
 800d7e2:	4293      	cmp	r3, r2
 800d7e4:	d01f      	beq.n	800d826 <TIM_Base_SetConfig+0xaa>
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	4a35      	ldr	r2, [pc, #212]	@ (800d8c0 <TIM_Base_SetConfig+0x144>)
 800d7ea:	4293      	cmp	r3, r2
 800d7ec:	d01b      	beq.n	800d826 <TIM_Base_SetConfig+0xaa>
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	4a34      	ldr	r2, [pc, #208]	@ (800d8c4 <TIM_Base_SetConfig+0x148>)
 800d7f2:	4293      	cmp	r3, r2
 800d7f4:	d017      	beq.n	800d826 <TIM_Base_SetConfig+0xaa>
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	4a33      	ldr	r2, [pc, #204]	@ (800d8c8 <TIM_Base_SetConfig+0x14c>)
 800d7fa:	4293      	cmp	r3, r2
 800d7fc:	d013      	beq.n	800d826 <TIM_Base_SetConfig+0xaa>
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	4a32      	ldr	r2, [pc, #200]	@ (800d8cc <TIM_Base_SetConfig+0x150>)
 800d802:	4293      	cmp	r3, r2
 800d804:	d00f      	beq.n	800d826 <TIM_Base_SetConfig+0xaa>
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	4a31      	ldr	r2, [pc, #196]	@ (800d8d0 <TIM_Base_SetConfig+0x154>)
 800d80a:	4293      	cmp	r3, r2
 800d80c:	d00b      	beq.n	800d826 <TIM_Base_SetConfig+0xaa>
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	4a30      	ldr	r2, [pc, #192]	@ (800d8d4 <TIM_Base_SetConfig+0x158>)
 800d812:	4293      	cmp	r3, r2
 800d814:	d007      	beq.n	800d826 <TIM_Base_SetConfig+0xaa>
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	4a2f      	ldr	r2, [pc, #188]	@ (800d8d8 <TIM_Base_SetConfig+0x15c>)
 800d81a:	4293      	cmp	r3, r2
 800d81c:	d003      	beq.n	800d826 <TIM_Base_SetConfig+0xaa>
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	4a2e      	ldr	r2, [pc, #184]	@ (800d8dc <TIM_Base_SetConfig+0x160>)
 800d822:	4293      	cmp	r3, r2
 800d824:	d108      	bne.n	800d838 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d826:	68fb      	ldr	r3, [r7, #12]
 800d828:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d82c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d82e:	683b      	ldr	r3, [r7, #0]
 800d830:	68db      	ldr	r3, [r3, #12]
 800d832:	68fa      	ldr	r2, [r7, #12]
 800d834:	4313      	orrs	r3, r2
 800d836:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d838:	68fb      	ldr	r3, [r7, #12]
 800d83a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800d83e:	683b      	ldr	r3, [r7, #0]
 800d840:	695b      	ldr	r3, [r3, #20]
 800d842:	4313      	orrs	r3, r2
 800d844:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	68fa      	ldr	r2, [r7, #12]
 800d84a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d84c:	683b      	ldr	r3, [r7, #0]
 800d84e:	689a      	ldr	r2, [r3, #8]
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d854:	683b      	ldr	r3, [r7, #0]
 800d856:	681a      	ldr	r2, [r3, #0]
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	4a16      	ldr	r2, [pc, #88]	@ (800d8b8 <TIM_Base_SetConfig+0x13c>)
 800d860:	4293      	cmp	r3, r2
 800d862:	d00f      	beq.n	800d884 <TIM_Base_SetConfig+0x108>
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	4a18      	ldr	r2, [pc, #96]	@ (800d8c8 <TIM_Base_SetConfig+0x14c>)
 800d868:	4293      	cmp	r3, r2
 800d86a:	d00b      	beq.n	800d884 <TIM_Base_SetConfig+0x108>
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	4a17      	ldr	r2, [pc, #92]	@ (800d8cc <TIM_Base_SetConfig+0x150>)
 800d870:	4293      	cmp	r3, r2
 800d872:	d007      	beq.n	800d884 <TIM_Base_SetConfig+0x108>
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	4a16      	ldr	r2, [pc, #88]	@ (800d8d0 <TIM_Base_SetConfig+0x154>)
 800d878:	4293      	cmp	r3, r2
 800d87a:	d003      	beq.n	800d884 <TIM_Base_SetConfig+0x108>
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	4a15      	ldr	r2, [pc, #84]	@ (800d8d4 <TIM_Base_SetConfig+0x158>)
 800d880:	4293      	cmp	r3, r2
 800d882:	d103      	bne.n	800d88c <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d884:	683b      	ldr	r3, [r7, #0]
 800d886:	691a      	ldr	r2, [r3, #16]
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	2201      	movs	r2, #1
 800d890:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	691b      	ldr	r3, [r3, #16]
 800d896:	f003 0301 	and.w	r3, r3, #1
 800d89a:	2b01      	cmp	r3, #1
 800d89c:	d105      	bne.n	800d8aa <TIM_Base_SetConfig+0x12e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	691b      	ldr	r3, [r3, #16]
 800d8a2:	f023 0201 	bic.w	r2, r3, #1
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	611a      	str	r2, [r3, #16]
  }
}
 800d8aa:	bf00      	nop
 800d8ac:	3714      	adds	r7, #20
 800d8ae:	46bd      	mov	sp, r7
 800d8b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8b4:	4770      	bx	lr
 800d8b6:	bf00      	nop
 800d8b8:	40010000 	.word	0x40010000
 800d8bc:	40000400 	.word	0x40000400
 800d8c0:	40000800 	.word	0x40000800
 800d8c4:	40000c00 	.word	0x40000c00
 800d8c8:	40010400 	.word	0x40010400
 800d8cc:	40014000 	.word	0x40014000
 800d8d0:	40014400 	.word	0x40014400
 800d8d4:	40014800 	.word	0x40014800
 800d8d8:	4000e000 	.word	0x4000e000
 800d8dc:	4000e400 	.word	0x4000e400

0800d8e0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d8e0:	b480      	push	{r7}
 800d8e2:	b087      	sub	sp, #28
 800d8e4:	af00      	add	r7, sp, #0
 800d8e6:	6078      	str	r0, [r7, #4]
 800d8e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	6a1b      	ldr	r3, [r3, #32]
 800d8ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	6a1b      	ldr	r3, [r3, #32]
 800d8f4:	f023 0201 	bic.w	r2, r3, #1
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	685b      	ldr	r3, [r3, #4]
 800d900:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	699b      	ldr	r3, [r3, #24]
 800d906:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800d908:	68fa      	ldr	r2, [r7, #12]
 800d90a:	4b37      	ldr	r3, [pc, #220]	@ (800d9e8 <TIM_OC1_SetConfig+0x108>)
 800d90c:	4013      	ands	r3, r2
 800d90e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800d910:	68fb      	ldr	r3, [r7, #12]
 800d912:	f023 0303 	bic.w	r3, r3, #3
 800d916:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d918:	683b      	ldr	r3, [r7, #0]
 800d91a:	681b      	ldr	r3, [r3, #0]
 800d91c:	68fa      	ldr	r2, [r7, #12]
 800d91e:	4313      	orrs	r3, r2
 800d920:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800d922:	697b      	ldr	r3, [r7, #20]
 800d924:	f023 0302 	bic.w	r3, r3, #2
 800d928:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800d92a:	683b      	ldr	r3, [r7, #0]
 800d92c:	689b      	ldr	r3, [r3, #8]
 800d92e:	697a      	ldr	r2, [r7, #20]
 800d930:	4313      	orrs	r3, r2
 800d932:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	4a2d      	ldr	r2, [pc, #180]	@ (800d9ec <TIM_OC1_SetConfig+0x10c>)
 800d938:	4293      	cmp	r3, r2
 800d93a:	d00f      	beq.n	800d95c <TIM_OC1_SetConfig+0x7c>
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	4a2c      	ldr	r2, [pc, #176]	@ (800d9f0 <TIM_OC1_SetConfig+0x110>)
 800d940:	4293      	cmp	r3, r2
 800d942:	d00b      	beq.n	800d95c <TIM_OC1_SetConfig+0x7c>
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	4a2b      	ldr	r2, [pc, #172]	@ (800d9f4 <TIM_OC1_SetConfig+0x114>)
 800d948:	4293      	cmp	r3, r2
 800d94a:	d007      	beq.n	800d95c <TIM_OC1_SetConfig+0x7c>
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	4a2a      	ldr	r2, [pc, #168]	@ (800d9f8 <TIM_OC1_SetConfig+0x118>)
 800d950:	4293      	cmp	r3, r2
 800d952:	d003      	beq.n	800d95c <TIM_OC1_SetConfig+0x7c>
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	4a29      	ldr	r2, [pc, #164]	@ (800d9fc <TIM_OC1_SetConfig+0x11c>)
 800d958:	4293      	cmp	r3, r2
 800d95a:	d10c      	bne.n	800d976 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800d95c:	697b      	ldr	r3, [r7, #20]
 800d95e:	f023 0308 	bic.w	r3, r3, #8
 800d962:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800d964:	683b      	ldr	r3, [r7, #0]
 800d966:	68db      	ldr	r3, [r3, #12]
 800d968:	697a      	ldr	r2, [r7, #20]
 800d96a:	4313      	orrs	r3, r2
 800d96c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800d96e:	697b      	ldr	r3, [r7, #20]
 800d970:	f023 0304 	bic.w	r3, r3, #4
 800d974:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	4a1c      	ldr	r2, [pc, #112]	@ (800d9ec <TIM_OC1_SetConfig+0x10c>)
 800d97a:	4293      	cmp	r3, r2
 800d97c:	d00f      	beq.n	800d99e <TIM_OC1_SetConfig+0xbe>
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	4a1b      	ldr	r2, [pc, #108]	@ (800d9f0 <TIM_OC1_SetConfig+0x110>)
 800d982:	4293      	cmp	r3, r2
 800d984:	d00b      	beq.n	800d99e <TIM_OC1_SetConfig+0xbe>
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	4a1a      	ldr	r2, [pc, #104]	@ (800d9f4 <TIM_OC1_SetConfig+0x114>)
 800d98a:	4293      	cmp	r3, r2
 800d98c:	d007      	beq.n	800d99e <TIM_OC1_SetConfig+0xbe>
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	4a19      	ldr	r2, [pc, #100]	@ (800d9f8 <TIM_OC1_SetConfig+0x118>)
 800d992:	4293      	cmp	r3, r2
 800d994:	d003      	beq.n	800d99e <TIM_OC1_SetConfig+0xbe>
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	4a18      	ldr	r2, [pc, #96]	@ (800d9fc <TIM_OC1_SetConfig+0x11c>)
 800d99a:	4293      	cmp	r3, r2
 800d99c:	d111      	bne.n	800d9c2 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800d99e:	693b      	ldr	r3, [r7, #16]
 800d9a0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d9a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800d9a6:	693b      	ldr	r3, [r7, #16]
 800d9a8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800d9ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800d9ae:	683b      	ldr	r3, [r7, #0]
 800d9b0:	695b      	ldr	r3, [r3, #20]
 800d9b2:	693a      	ldr	r2, [r7, #16]
 800d9b4:	4313      	orrs	r3, r2
 800d9b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800d9b8:	683b      	ldr	r3, [r7, #0]
 800d9ba:	699b      	ldr	r3, [r3, #24]
 800d9bc:	693a      	ldr	r2, [r7, #16]
 800d9be:	4313      	orrs	r3, r2
 800d9c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	693a      	ldr	r2, [r7, #16]
 800d9c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	68fa      	ldr	r2, [r7, #12]
 800d9cc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800d9ce:	683b      	ldr	r3, [r7, #0]
 800d9d0:	685a      	ldr	r2, [r3, #4]
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	697a      	ldr	r2, [r7, #20]
 800d9da:	621a      	str	r2, [r3, #32]
}
 800d9dc:	bf00      	nop
 800d9de:	371c      	adds	r7, #28
 800d9e0:	46bd      	mov	sp, r7
 800d9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9e6:	4770      	bx	lr
 800d9e8:	fffeff8f 	.word	0xfffeff8f
 800d9ec:	40010000 	.word	0x40010000
 800d9f0:	40010400 	.word	0x40010400
 800d9f4:	40014000 	.word	0x40014000
 800d9f8:	40014400 	.word	0x40014400
 800d9fc:	40014800 	.word	0x40014800

0800da00 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800da00:	b480      	push	{r7}
 800da02:	b087      	sub	sp, #28
 800da04:	af00      	add	r7, sp, #0
 800da06:	6078      	str	r0, [r7, #4]
 800da08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	6a1b      	ldr	r3, [r3, #32]
 800da0e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	6a1b      	ldr	r3, [r3, #32]
 800da14:	f023 0210 	bic.w	r2, r3, #16
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	685b      	ldr	r3, [r3, #4]
 800da20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	699b      	ldr	r3, [r3, #24]
 800da26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800da28:	68fa      	ldr	r2, [r7, #12]
 800da2a:	4b34      	ldr	r3, [pc, #208]	@ (800dafc <TIM_OC2_SetConfig+0xfc>)
 800da2c:	4013      	ands	r3, r2
 800da2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800da30:	68fb      	ldr	r3, [r7, #12]
 800da32:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800da36:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800da38:	683b      	ldr	r3, [r7, #0]
 800da3a:	681b      	ldr	r3, [r3, #0]
 800da3c:	021b      	lsls	r3, r3, #8
 800da3e:	68fa      	ldr	r2, [r7, #12]
 800da40:	4313      	orrs	r3, r2
 800da42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800da44:	697b      	ldr	r3, [r7, #20]
 800da46:	f023 0320 	bic.w	r3, r3, #32
 800da4a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800da4c:	683b      	ldr	r3, [r7, #0]
 800da4e:	689b      	ldr	r3, [r3, #8]
 800da50:	011b      	lsls	r3, r3, #4
 800da52:	697a      	ldr	r2, [r7, #20]
 800da54:	4313      	orrs	r3, r2
 800da56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	4a29      	ldr	r2, [pc, #164]	@ (800db00 <TIM_OC2_SetConfig+0x100>)
 800da5c:	4293      	cmp	r3, r2
 800da5e:	d003      	beq.n	800da68 <TIM_OC2_SetConfig+0x68>
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	4a28      	ldr	r2, [pc, #160]	@ (800db04 <TIM_OC2_SetConfig+0x104>)
 800da64:	4293      	cmp	r3, r2
 800da66:	d10d      	bne.n	800da84 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800da68:	697b      	ldr	r3, [r7, #20]
 800da6a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800da6e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800da70:	683b      	ldr	r3, [r7, #0]
 800da72:	68db      	ldr	r3, [r3, #12]
 800da74:	011b      	lsls	r3, r3, #4
 800da76:	697a      	ldr	r2, [r7, #20]
 800da78:	4313      	orrs	r3, r2
 800da7a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800da7c:	697b      	ldr	r3, [r7, #20]
 800da7e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800da82:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	4a1e      	ldr	r2, [pc, #120]	@ (800db00 <TIM_OC2_SetConfig+0x100>)
 800da88:	4293      	cmp	r3, r2
 800da8a:	d00f      	beq.n	800daac <TIM_OC2_SetConfig+0xac>
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	4a1d      	ldr	r2, [pc, #116]	@ (800db04 <TIM_OC2_SetConfig+0x104>)
 800da90:	4293      	cmp	r3, r2
 800da92:	d00b      	beq.n	800daac <TIM_OC2_SetConfig+0xac>
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	4a1c      	ldr	r2, [pc, #112]	@ (800db08 <TIM_OC2_SetConfig+0x108>)
 800da98:	4293      	cmp	r3, r2
 800da9a:	d007      	beq.n	800daac <TIM_OC2_SetConfig+0xac>
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	4a1b      	ldr	r2, [pc, #108]	@ (800db0c <TIM_OC2_SetConfig+0x10c>)
 800daa0:	4293      	cmp	r3, r2
 800daa2:	d003      	beq.n	800daac <TIM_OC2_SetConfig+0xac>
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	4a1a      	ldr	r2, [pc, #104]	@ (800db10 <TIM_OC2_SetConfig+0x110>)
 800daa8:	4293      	cmp	r3, r2
 800daaa:	d113      	bne.n	800dad4 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800daac:	693b      	ldr	r3, [r7, #16]
 800daae:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800dab2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800dab4:	693b      	ldr	r3, [r7, #16]
 800dab6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800daba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800dabc:	683b      	ldr	r3, [r7, #0]
 800dabe:	695b      	ldr	r3, [r3, #20]
 800dac0:	009b      	lsls	r3, r3, #2
 800dac2:	693a      	ldr	r2, [r7, #16]
 800dac4:	4313      	orrs	r3, r2
 800dac6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800dac8:	683b      	ldr	r3, [r7, #0]
 800daca:	699b      	ldr	r3, [r3, #24]
 800dacc:	009b      	lsls	r3, r3, #2
 800dace:	693a      	ldr	r2, [r7, #16]
 800dad0:	4313      	orrs	r3, r2
 800dad2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	693a      	ldr	r2, [r7, #16]
 800dad8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	68fa      	ldr	r2, [r7, #12]
 800dade:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800dae0:	683b      	ldr	r3, [r7, #0]
 800dae2:	685a      	ldr	r2, [r3, #4]
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	697a      	ldr	r2, [r7, #20]
 800daec:	621a      	str	r2, [r3, #32]
}
 800daee:	bf00      	nop
 800daf0:	371c      	adds	r7, #28
 800daf2:	46bd      	mov	sp, r7
 800daf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daf8:	4770      	bx	lr
 800dafa:	bf00      	nop
 800dafc:	feff8fff 	.word	0xfeff8fff
 800db00:	40010000 	.word	0x40010000
 800db04:	40010400 	.word	0x40010400
 800db08:	40014000 	.word	0x40014000
 800db0c:	40014400 	.word	0x40014400
 800db10:	40014800 	.word	0x40014800

0800db14 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800db14:	b480      	push	{r7}
 800db16:	b087      	sub	sp, #28
 800db18:	af00      	add	r7, sp, #0
 800db1a:	6078      	str	r0, [r7, #4]
 800db1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	6a1b      	ldr	r3, [r3, #32]
 800db22:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	6a1b      	ldr	r3, [r3, #32]
 800db28:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	685b      	ldr	r3, [r3, #4]
 800db34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	69db      	ldr	r3, [r3, #28]
 800db3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800db3c:	68fa      	ldr	r2, [r7, #12]
 800db3e:	4b33      	ldr	r3, [pc, #204]	@ (800dc0c <TIM_OC3_SetConfig+0xf8>)
 800db40:	4013      	ands	r3, r2
 800db42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800db44:	68fb      	ldr	r3, [r7, #12]
 800db46:	f023 0303 	bic.w	r3, r3, #3
 800db4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800db4c:	683b      	ldr	r3, [r7, #0]
 800db4e:	681b      	ldr	r3, [r3, #0]
 800db50:	68fa      	ldr	r2, [r7, #12]
 800db52:	4313      	orrs	r3, r2
 800db54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800db56:	697b      	ldr	r3, [r7, #20]
 800db58:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800db5c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800db5e:	683b      	ldr	r3, [r7, #0]
 800db60:	689b      	ldr	r3, [r3, #8]
 800db62:	021b      	lsls	r3, r3, #8
 800db64:	697a      	ldr	r2, [r7, #20]
 800db66:	4313      	orrs	r3, r2
 800db68:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	4a28      	ldr	r2, [pc, #160]	@ (800dc10 <TIM_OC3_SetConfig+0xfc>)
 800db6e:	4293      	cmp	r3, r2
 800db70:	d003      	beq.n	800db7a <TIM_OC3_SetConfig+0x66>
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	4a27      	ldr	r2, [pc, #156]	@ (800dc14 <TIM_OC3_SetConfig+0x100>)
 800db76:	4293      	cmp	r3, r2
 800db78:	d10d      	bne.n	800db96 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800db7a:	697b      	ldr	r3, [r7, #20]
 800db7c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800db80:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800db82:	683b      	ldr	r3, [r7, #0]
 800db84:	68db      	ldr	r3, [r3, #12]
 800db86:	021b      	lsls	r3, r3, #8
 800db88:	697a      	ldr	r2, [r7, #20]
 800db8a:	4313      	orrs	r3, r2
 800db8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800db8e:	697b      	ldr	r3, [r7, #20]
 800db90:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800db94:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	4a1d      	ldr	r2, [pc, #116]	@ (800dc10 <TIM_OC3_SetConfig+0xfc>)
 800db9a:	4293      	cmp	r3, r2
 800db9c:	d00f      	beq.n	800dbbe <TIM_OC3_SetConfig+0xaa>
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	4a1c      	ldr	r2, [pc, #112]	@ (800dc14 <TIM_OC3_SetConfig+0x100>)
 800dba2:	4293      	cmp	r3, r2
 800dba4:	d00b      	beq.n	800dbbe <TIM_OC3_SetConfig+0xaa>
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	4a1b      	ldr	r2, [pc, #108]	@ (800dc18 <TIM_OC3_SetConfig+0x104>)
 800dbaa:	4293      	cmp	r3, r2
 800dbac:	d007      	beq.n	800dbbe <TIM_OC3_SetConfig+0xaa>
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	4a1a      	ldr	r2, [pc, #104]	@ (800dc1c <TIM_OC3_SetConfig+0x108>)
 800dbb2:	4293      	cmp	r3, r2
 800dbb4:	d003      	beq.n	800dbbe <TIM_OC3_SetConfig+0xaa>
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	4a19      	ldr	r2, [pc, #100]	@ (800dc20 <TIM_OC3_SetConfig+0x10c>)
 800dbba:	4293      	cmp	r3, r2
 800dbbc:	d113      	bne.n	800dbe6 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800dbbe:	693b      	ldr	r3, [r7, #16]
 800dbc0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800dbc4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800dbc6:	693b      	ldr	r3, [r7, #16]
 800dbc8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800dbcc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800dbce:	683b      	ldr	r3, [r7, #0]
 800dbd0:	695b      	ldr	r3, [r3, #20]
 800dbd2:	011b      	lsls	r3, r3, #4
 800dbd4:	693a      	ldr	r2, [r7, #16]
 800dbd6:	4313      	orrs	r3, r2
 800dbd8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800dbda:	683b      	ldr	r3, [r7, #0]
 800dbdc:	699b      	ldr	r3, [r3, #24]
 800dbde:	011b      	lsls	r3, r3, #4
 800dbe0:	693a      	ldr	r2, [r7, #16]
 800dbe2:	4313      	orrs	r3, r2
 800dbe4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	693a      	ldr	r2, [r7, #16]
 800dbea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	68fa      	ldr	r2, [r7, #12]
 800dbf0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800dbf2:	683b      	ldr	r3, [r7, #0]
 800dbf4:	685a      	ldr	r2, [r3, #4]
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	697a      	ldr	r2, [r7, #20]
 800dbfe:	621a      	str	r2, [r3, #32]
}
 800dc00:	bf00      	nop
 800dc02:	371c      	adds	r7, #28
 800dc04:	46bd      	mov	sp, r7
 800dc06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc0a:	4770      	bx	lr
 800dc0c:	fffeff8f 	.word	0xfffeff8f
 800dc10:	40010000 	.word	0x40010000
 800dc14:	40010400 	.word	0x40010400
 800dc18:	40014000 	.word	0x40014000
 800dc1c:	40014400 	.word	0x40014400
 800dc20:	40014800 	.word	0x40014800

0800dc24 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800dc24:	b480      	push	{r7}
 800dc26:	b087      	sub	sp, #28
 800dc28:	af00      	add	r7, sp, #0
 800dc2a:	6078      	str	r0, [r7, #4]
 800dc2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	6a1b      	ldr	r3, [r3, #32]
 800dc32:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	6a1b      	ldr	r3, [r3, #32]
 800dc38:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	685b      	ldr	r3, [r3, #4]
 800dc44:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	69db      	ldr	r3, [r3, #28]
 800dc4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800dc4c:	68fa      	ldr	r2, [r7, #12]
 800dc4e:	4b24      	ldr	r3, [pc, #144]	@ (800dce0 <TIM_OC4_SetConfig+0xbc>)
 800dc50:	4013      	ands	r3, r2
 800dc52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800dc54:	68fb      	ldr	r3, [r7, #12]
 800dc56:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800dc5a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800dc5c:	683b      	ldr	r3, [r7, #0]
 800dc5e:	681b      	ldr	r3, [r3, #0]
 800dc60:	021b      	lsls	r3, r3, #8
 800dc62:	68fa      	ldr	r2, [r7, #12]
 800dc64:	4313      	orrs	r3, r2
 800dc66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800dc68:	693b      	ldr	r3, [r7, #16]
 800dc6a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800dc6e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800dc70:	683b      	ldr	r3, [r7, #0]
 800dc72:	689b      	ldr	r3, [r3, #8]
 800dc74:	031b      	lsls	r3, r3, #12
 800dc76:	693a      	ldr	r2, [r7, #16]
 800dc78:	4313      	orrs	r3, r2
 800dc7a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	4a19      	ldr	r2, [pc, #100]	@ (800dce4 <TIM_OC4_SetConfig+0xc0>)
 800dc80:	4293      	cmp	r3, r2
 800dc82:	d00f      	beq.n	800dca4 <TIM_OC4_SetConfig+0x80>
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	4a18      	ldr	r2, [pc, #96]	@ (800dce8 <TIM_OC4_SetConfig+0xc4>)
 800dc88:	4293      	cmp	r3, r2
 800dc8a:	d00b      	beq.n	800dca4 <TIM_OC4_SetConfig+0x80>
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	4a17      	ldr	r2, [pc, #92]	@ (800dcec <TIM_OC4_SetConfig+0xc8>)
 800dc90:	4293      	cmp	r3, r2
 800dc92:	d007      	beq.n	800dca4 <TIM_OC4_SetConfig+0x80>
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	4a16      	ldr	r2, [pc, #88]	@ (800dcf0 <TIM_OC4_SetConfig+0xcc>)
 800dc98:	4293      	cmp	r3, r2
 800dc9a:	d003      	beq.n	800dca4 <TIM_OC4_SetConfig+0x80>
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	4a15      	ldr	r2, [pc, #84]	@ (800dcf4 <TIM_OC4_SetConfig+0xd0>)
 800dca0:	4293      	cmp	r3, r2
 800dca2:	d109      	bne.n	800dcb8 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800dca4:	697b      	ldr	r3, [r7, #20]
 800dca6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800dcaa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800dcac:	683b      	ldr	r3, [r7, #0]
 800dcae:	695b      	ldr	r3, [r3, #20]
 800dcb0:	019b      	lsls	r3, r3, #6
 800dcb2:	697a      	ldr	r2, [r7, #20]
 800dcb4:	4313      	orrs	r3, r2
 800dcb6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	697a      	ldr	r2, [r7, #20]
 800dcbc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	68fa      	ldr	r2, [r7, #12]
 800dcc2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800dcc4:	683b      	ldr	r3, [r7, #0]
 800dcc6:	685a      	ldr	r2, [r3, #4]
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	693a      	ldr	r2, [r7, #16]
 800dcd0:	621a      	str	r2, [r3, #32]
}
 800dcd2:	bf00      	nop
 800dcd4:	371c      	adds	r7, #28
 800dcd6:	46bd      	mov	sp, r7
 800dcd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcdc:	4770      	bx	lr
 800dcde:	bf00      	nop
 800dce0:	feff8fff 	.word	0xfeff8fff
 800dce4:	40010000 	.word	0x40010000
 800dce8:	40010400 	.word	0x40010400
 800dcec:	40014000 	.word	0x40014000
 800dcf0:	40014400 	.word	0x40014400
 800dcf4:	40014800 	.word	0x40014800

0800dcf8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800dcf8:	b480      	push	{r7}
 800dcfa:	b087      	sub	sp, #28
 800dcfc:	af00      	add	r7, sp, #0
 800dcfe:	6078      	str	r0, [r7, #4]
 800dd00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	6a1b      	ldr	r3, [r3, #32]
 800dd06:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	6a1b      	ldr	r3, [r3, #32]
 800dd0c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	685b      	ldr	r3, [r3, #4]
 800dd18:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dd1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800dd20:	68fa      	ldr	r2, [r7, #12]
 800dd22:	4b21      	ldr	r3, [pc, #132]	@ (800dda8 <TIM_OC5_SetConfig+0xb0>)
 800dd24:	4013      	ands	r3, r2
 800dd26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800dd28:	683b      	ldr	r3, [r7, #0]
 800dd2a:	681b      	ldr	r3, [r3, #0]
 800dd2c:	68fa      	ldr	r2, [r7, #12]
 800dd2e:	4313      	orrs	r3, r2
 800dd30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800dd32:	693b      	ldr	r3, [r7, #16]
 800dd34:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800dd38:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800dd3a:	683b      	ldr	r3, [r7, #0]
 800dd3c:	689b      	ldr	r3, [r3, #8]
 800dd3e:	041b      	lsls	r3, r3, #16
 800dd40:	693a      	ldr	r2, [r7, #16]
 800dd42:	4313      	orrs	r3, r2
 800dd44:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	4a18      	ldr	r2, [pc, #96]	@ (800ddac <TIM_OC5_SetConfig+0xb4>)
 800dd4a:	4293      	cmp	r3, r2
 800dd4c:	d00f      	beq.n	800dd6e <TIM_OC5_SetConfig+0x76>
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	4a17      	ldr	r2, [pc, #92]	@ (800ddb0 <TIM_OC5_SetConfig+0xb8>)
 800dd52:	4293      	cmp	r3, r2
 800dd54:	d00b      	beq.n	800dd6e <TIM_OC5_SetConfig+0x76>
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	4a16      	ldr	r2, [pc, #88]	@ (800ddb4 <TIM_OC5_SetConfig+0xbc>)
 800dd5a:	4293      	cmp	r3, r2
 800dd5c:	d007      	beq.n	800dd6e <TIM_OC5_SetConfig+0x76>
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	4a15      	ldr	r2, [pc, #84]	@ (800ddb8 <TIM_OC5_SetConfig+0xc0>)
 800dd62:	4293      	cmp	r3, r2
 800dd64:	d003      	beq.n	800dd6e <TIM_OC5_SetConfig+0x76>
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	4a14      	ldr	r2, [pc, #80]	@ (800ddbc <TIM_OC5_SetConfig+0xc4>)
 800dd6a:	4293      	cmp	r3, r2
 800dd6c:	d109      	bne.n	800dd82 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800dd6e:	697b      	ldr	r3, [r7, #20]
 800dd70:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800dd74:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800dd76:	683b      	ldr	r3, [r7, #0]
 800dd78:	695b      	ldr	r3, [r3, #20]
 800dd7a:	021b      	lsls	r3, r3, #8
 800dd7c:	697a      	ldr	r2, [r7, #20]
 800dd7e:	4313      	orrs	r3, r2
 800dd80:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	697a      	ldr	r2, [r7, #20]
 800dd86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	68fa      	ldr	r2, [r7, #12]
 800dd8c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800dd8e:	683b      	ldr	r3, [r7, #0]
 800dd90:	685a      	ldr	r2, [r3, #4]
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	693a      	ldr	r2, [r7, #16]
 800dd9a:	621a      	str	r2, [r3, #32]
}
 800dd9c:	bf00      	nop
 800dd9e:	371c      	adds	r7, #28
 800dda0:	46bd      	mov	sp, r7
 800dda2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dda6:	4770      	bx	lr
 800dda8:	fffeff8f 	.word	0xfffeff8f
 800ddac:	40010000 	.word	0x40010000
 800ddb0:	40010400 	.word	0x40010400
 800ddb4:	40014000 	.word	0x40014000
 800ddb8:	40014400 	.word	0x40014400
 800ddbc:	40014800 	.word	0x40014800

0800ddc0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800ddc0:	b480      	push	{r7}
 800ddc2:	b087      	sub	sp, #28
 800ddc4:	af00      	add	r7, sp, #0
 800ddc6:	6078      	str	r0, [r7, #4]
 800ddc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	6a1b      	ldr	r3, [r3, #32]
 800ddce:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	6a1b      	ldr	r3, [r3, #32]
 800ddd4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	685b      	ldr	r3, [r3, #4]
 800dde0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dde6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800dde8:	68fa      	ldr	r2, [r7, #12]
 800ddea:	4b22      	ldr	r3, [pc, #136]	@ (800de74 <TIM_OC6_SetConfig+0xb4>)
 800ddec:	4013      	ands	r3, r2
 800ddee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ddf0:	683b      	ldr	r3, [r7, #0]
 800ddf2:	681b      	ldr	r3, [r3, #0]
 800ddf4:	021b      	lsls	r3, r3, #8
 800ddf6:	68fa      	ldr	r2, [r7, #12]
 800ddf8:	4313      	orrs	r3, r2
 800ddfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800ddfc:	693b      	ldr	r3, [r7, #16]
 800ddfe:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800de02:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800de04:	683b      	ldr	r3, [r7, #0]
 800de06:	689b      	ldr	r3, [r3, #8]
 800de08:	051b      	lsls	r3, r3, #20
 800de0a:	693a      	ldr	r2, [r7, #16]
 800de0c:	4313      	orrs	r3, r2
 800de0e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	4a19      	ldr	r2, [pc, #100]	@ (800de78 <TIM_OC6_SetConfig+0xb8>)
 800de14:	4293      	cmp	r3, r2
 800de16:	d00f      	beq.n	800de38 <TIM_OC6_SetConfig+0x78>
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	4a18      	ldr	r2, [pc, #96]	@ (800de7c <TIM_OC6_SetConfig+0xbc>)
 800de1c:	4293      	cmp	r3, r2
 800de1e:	d00b      	beq.n	800de38 <TIM_OC6_SetConfig+0x78>
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	4a17      	ldr	r2, [pc, #92]	@ (800de80 <TIM_OC6_SetConfig+0xc0>)
 800de24:	4293      	cmp	r3, r2
 800de26:	d007      	beq.n	800de38 <TIM_OC6_SetConfig+0x78>
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	4a16      	ldr	r2, [pc, #88]	@ (800de84 <TIM_OC6_SetConfig+0xc4>)
 800de2c:	4293      	cmp	r3, r2
 800de2e:	d003      	beq.n	800de38 <TIM_OC6_SetConfig+0x78>
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	4a15      	ldr	r2, [pc, #84]	@ (800de88 <TIM_OC6_SetConfig+0xc8>)
 800de34:	4293      	cmp	r3, r2
 800de36:	d109      	bne.n	800de4c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800de38:	697b      	ldr	r3, [r7, #20]
 800de3a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800de3e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800de40:	683b      	ldr	r3, [r7, #0]
 800de42:	695b      	ldr	r3, [r3, #20]
 800de44:	029b      	lsls	r3, r3, #10
 800de46:	697a      	ldr	r2, [r7, #20]
 800de48:	4313      	orrs	r3, r2
 800de4a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	697a      	ldr	r2, [r7, #20]
 800de50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	68fa      	ldr	r2, [r7, #12]
 800de56:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800de58:	683b      	ldr	r3, [r7, #0]
 800de5a:	685a      	ldr	r2, [r3, #4]
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	693a      	ldr	r2, [r7, #16]
 800de64:	621a      	str	r2, [r3, #32]
}
 800de66:	bf00      	nop
 800de68:	371c      	adds	r7, #28
 800de6a:	46bd      	mov	sp, r7
 800de6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de70:	4770      	bx	lr
 800de72:	bf00      	nop
 800de74:	feff8fff 	.word	0xfeff8fff
 800de78:	40010000 	.word	0x40010000
 800de7c:	40010400 	.word	0x40010400
 800de80:	40014000 	.word	0x40014000
 800de84:	40014400 	.word	0x40014400
 800de88:	40014800 	.word	0x40014800

0800de8c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800de8c:	b480      	push	{r7}
 800de8e:	b087      	sub	sp, #28
 800de90:	af00      	add	r7, sp, #0
 800de92:	60f8      	str	r0, [r7, #12]
 800de94:	60b9      	str	r1, [r7, #8]
 800de96:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800de98:	68fb      	ldr	r3, [r7, #12]
 800de9a:	6a1b      	ldr	r3, [r3, #32]
 800de9c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800de9e:	68fb      	ldr	r3, [r7, #12]
 800dea0:	6a1b      	ldr	r3, [r3, #32]
 800dea2:	f023 0201 	bic.w	r2, r3, #1
 800dea6:	68fb      	ldr	r3, [r7, #12]
 800dea8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800deaa:	68fb      	ldr	r3, [r7, #12]
 800deac:	699b      	ldr	r3, [r3, #24]
 800deae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800deb0:	693b      	ldr	r3, [r7, #16]
 800deb2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800deb6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	011b      	lsls	r3, r3, #4
 800debc:	693a      	ldr	r2, [r7, #16]
 800debe:	4313      	orrs	r3, r2
 800dec0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800dec2:	697b      	ldr	r3, [r7, #20]
 800dec4:	f023 030a 	bic.w	r3, r3, #10
 800dec8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800deca:	697a      	ldr	r2, [r7, #20]
 800decc:	68bb      	ldr	r3, [r7, #8]
 800dece:	4313      	orrs	r3, r2
 800ded0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ded2:	68fb      	ldr	r3, [r7, #12]
 800ded4:	693a      	ldr	r2, [r7, #16]
 800ded6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ded8:	68fb      	ldr	r3, [r7, #12]
 800deda:	697a      	ldr	r2, [r7, #20]
 800dedc:	621a      	str	r2, [r3, #32]
}
 800dede:	bf00      	nop
 800dee0:	371c      	adds	r7, #28
 800dee2:	46bd      	mov	sp, r7
 800dee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dee8:	4770      	bx	lr

0800deea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800deea:	b480      	push	{r7}
 800deec:	b087      	sub	sp, #28
 800deee:	af00      	add	r7, sp, #0
 800def0:	60f8      	str	r0, [r7, #12]
 800def2:	60b9      	str	r1, [r7, #8]
 800def4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800def6:	68fb      	ldr	r3, [r7, #12]
 800def8:	6a1b      	ldr	r3, [r3, #32]
 800defa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800defc:	68fb      	ldr	r3, [r7, #12]
 800defe:	6a1b      	ldr	r3, [r3, #32]
 800df00:	f023 0210 	bic.w	r2, r3, #16
 800df04:	68fb      	ldr	r3, [r7, #12]
 800df06:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800df08:	68fb      	ldr	r3, [r7, #12]
 800df0a:	699b      	ldr	r3, [r3, #24]
 800df0c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800df0e:	693b      	ldr	r3, [r7, #16]
 800df10:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800df14:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	031b      	lsls	r3, r3, #12
 800df1a:	693a      	ldr	r2, [r7, #16]
 800df1c:	4313      	orrs	r3, r2
 800df1e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800df20:	697b      	ldr	r3, [r7, #20]
 800df22:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800df26:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800df28:	68bb      	ldr	r3, [r7, #8]
 800df2a:	011b      	lsls	r3, r3, #4
 800df2c:	697a      	ldr	r2, [r7, #20]
 800df2e:	4313      	orrs	r3, r2
 800df30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800df32:	68fb      	ldr	r3, [r7, #12]
 800df34:	693a      	ldr	r2, [r7, #16]
 800df36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800df38:	68fb      	ldr	r3, [r7, #12]
 800df3a:	697a      	ldr	r2, [r7, #20]
 800df3c:	621a      	str	r2, [r3, #32]
}
 800df3e:	bf00      	nop
 800df40:	371c      	adds	r7, #28
 800df42:	46bd      	mov	sp, r7
 800df44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df48:	4770      	bx	lr
	...

0800df4c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800df4c:	b480      	push	{r7}
 800df4e:	b085      	sub	sp, #20
 800df50:	af00      	add	r7, sp, #0
 800df52:	6078      	str	r0, [r7, #4]
 800df54:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	689b      	ldr	r3, [r3, #8]
 800df5a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800df5c:	68fa      	ldr	r2, [r7, #12]
 800df5e:	4b09      	ldr	r3, [pc, #36]	@ (800df84 <TIM_ITRx_SetConfig+0x38>)
 800df60:	4013      	ands	r3, r2
 800df62:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800df64:	683a      	ldr	r2, [r7, #0]
 800df66:	68fb      	ldr	r3, [r7, #12]
 800df68:	4313      	orrs	r3, r2
 800df6a:	f043 0307 	orr.w	r3, r3, #7
 800df6e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	68fa      	ldr	r2, [r7, #12]
 800df74:	609a      	str	r2, [r3, #8]
}
 800df76:	bf00      	nop
 800df78:	3714      	adds	r7, #20
 800df7a:	46bd      	mov	sp, r7
 800df7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df80:	4770      	bx	lr
 800df82:	bf00      	nop
 800df84:	ffcfff8f 	.word	0xffcfff8f

0800df88 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800df88:	b480      	push	{r7}
 800df8a:	b087      	sub	sp, #28
 800df8c:	af00      	add	r7, sp, #0
 800df8e:	60f8      	str	r0, [r7, #12]
 800df90:	60b9      	str	r1, [r7, #8]
 800df92:	607a      	str	r2, [r7, #4]
 800df94:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800df96:	68fb      	ldr	r3, [r7, #12]
 800df98:	689b      	ldr	r3, [r3, #8]
 800df9a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800df9c:	697b      	ldr	r3, [r7, #20]
 800df9e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800dfa2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800dfa4:	683b      	ldr	r3, [r7, #0]
 800dfa6:	021a      	lsls	r2, r3, #8
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	431a      	orrs	r2, r3
 800dfac:	68bb      	ldr	r3, [r7, #8]
 800dfae:	4313      	orrs	r3, r2
 800dfb0:	697a      	ldr	r2, [r7, #20]
 800dfb2:	4313      	orrs	r3, r2
 800dfb4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800dfb6:	68fb      	ldr	r3, [r7, #12]
 800dfb8:	697a      	ldr	r2, [r7, #20]
 800dfba:	609a      	str	r2, [r3, #8]
}
 800dfbc:	bf00      	nop
 800dfbe:	371c      	adds	r7, #28
 800dfc0:	46bd      	mov	sp, r7
 800dfc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfc6:	4770      	bx	lr

0800dfc8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800dfc8:	b480      	push	{r7}
 800dfca:	b087      	sub	sp, #28
 800dfcc:	af00      	add	r7, sp, #0
 800dfce:	60f8      	str	r0, [r7, #12]
 800dfd0:	60b9      	str	r1, [r7, #8]
 800dfd2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800dfd4:	68bb      	ldr	r3, [r7, #8]
 800dfd6:	f003 031f 	and.w	r3, r3, #31
 800dfda:	2201      	movs	r2, #1
 800dfdc:	fa02 f303 	lsl.w	r3, r2, r3
 800dfe0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800dfe2:	68fb      	ldr	r3, [r7, #12]
 800dfe4:	6a1a      	ldr	r2, [r3, #32]
 800dfe6:	697b      	ldr	r3, [r7, #20]
 800dfe8:	43db      	mvns	r3, r3
 800dfea:	401a      	ands	r2, r3
 800dfec:	68fb      	ldr	r3, [r7, #12]
 800dfee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800dff0:	68fb      	ldr	r3, [r7, #12]
 800dff2:	6a1a      	ldr	r2, [r3, #32]
 800dff4:	68bb      	ldr	r3, [r7, #8]
 800dff6:	f003 031f 	and.w	r3, r3, #31
 800dffa:	6879      	ldr	r1, [r7, #4]
 800dffc:	fa01 f303 	lsl.w	r3, r1, r3
 800e000:	431a      	orrs	r2, r3
 800e002:	68fb      	ldr	r3, [r7, #12]
 800e004:	621a      	str	r2, [r3, #32]
}
 800e006:	bf00      	nop
 800e008:	371c      	adds	r7, #28
 800e00a:	46bd      	mov	sp, r7
 800e00c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e010:	4770      	bx	lr
	...

0800e014 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800e014:	b480      	push	{r7}
 800e016:	b085      	sub	sp, #20
 800e018:	af00      	add	r7, sp, #0
 800e01a:	6078      	str	r0, [r7, #4]
 800e01c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e024:	2b01      	cmp	r3, #1
 800e026:	d101      	bne.n	800e02c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800e028:	2302      	movs	r3, #2
 800e02a:	e077      	b.n	800e11c <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	2201      	movs	r2, #1
 800e030:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	2202      	movs	r2, #2
 800e038:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	681b      	ldr	r3, [r3, #0]
 800e040:	685b      	ldr	r3, [r3, #4]
 800e042:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	681b      	ldr	r3, [r3, #0]
 800e048:	689b      	ldr	r3, [r3, #8]
 800e04a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	681b      	ldr	r3, [r3, #0]
 800e050:	4a35      	ldr	r2, [pc, #212]	@ (800e128 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800e052:	4293      	cmp	r3, r2
 800e054:	d004      	beq.n	800e060 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	681b      	ldr	r3, [r3, #0]
 800e05a:	4a34      	ldr	r2, [pc, #208]	@ (800e12c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800e05c:	4293      	cmp	r3, r2
 800e05e:	d108      	bne.n	800e072 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800e060:	68fb      	ldr	r3, [r7, #12]
 800e062:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800e066:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800e068:	683b      	ldr	r3, [r7, #0]
 800e06a:	685b      	ldr	r3, [r3, #4]
 800e06c:	68fa      	ldr	r2, [r7, #12]
 800e06e:	4313      	orrs	r3, r2
 800e070:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800e072:	68fb      	ldr	r3, [r7, #12]
 800e074:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e078:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800e07a:	683b      	ldr	r3, [r7, #0]
 800e07c:	681b      	ldr	r3, [r3, #0]
 800e07e:	68fa      	ldr	r2, [r7, #12]
 800e080:	4313      	orrs	r3, r2
 800e082:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	681b      	ldr	r3, [r3, #0]
 800e088:	68fa      	ldr	r2, [r7, #12]
 800e08a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	681b      	ldr	r3, [r3, #0]
 800e090:	4a25      	ldr	r2, [pc, #148]	@ (800e128 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800e092:	4293      	cmp	r3, r2
 800e094:	d02c      	beq.n	800e0f0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	681b      	ldr	r3, [r3, #0]
 800e09a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e09e:	d027      	beq.n	800e0f0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	681b      	ldr	r3, [r3, #0]
 800e0a4:	4a22      	ldr	r2, [pc, #136]	@ (800e130 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800e0a6:	4293      	cmp	r3, r2
 800e0a8:	d022      	beq.n	800e0f0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	681b      	ldr	r3, [r3, #0]
 800e0ae:	4a21      	ldr	r2, [pc, #132]	@ (800e134 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800e0b0:	4293      	cmp	r3, r2
 800e0b2:	d01d      	beq.n	800e0f0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	681b      	ldr	r3, [r3, #0]
 800e0b8:	4a1f      	ldr	r2, [pc, #124]	@ (800e138 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800e0ba:	4293      	cmp	r3, r2
 800e0bc:	d018      	beq.n	800e0f0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	681b      	ldr	r3, [r3, #0]
 800e0c2:	4a1a      	ldr	r2, [pc, #104]	@ (800e12c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800e0c4:	4293      	cmp	r3, r2
 800e0c6:	d013      	beq.n	800e0f0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	681b      	ldr	r3, [r3, #0]
 800e0cc:	4a1b      	ldr	r2, [pc, #108]	@ (800e13c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800e0ce:	4293      	cmp	r3, r2
 800e0d0:	d00e      	beq.n	800e0f0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	681b      	ldr	r3, [r3, #0]
 800e0d6:	4a1a      	ldr	r2, [pc, #104]	@ (800e140 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800e0d8:	4293      	cmp	r3, r2
 800e0da:	d009      	beq.n	800e0f0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	681b      	ldr	r3, [r3, #0]
 800e0e0:	4a18      	ldr	r2, [pc, #96]	@ (800e144 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800e0e2:	4293      	cmp	r3, r2
 800e0e4:	d004      	beq.n	800e0f0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	681b      	ldr	r3, [r3, #0]
 800e0ea:	4a17      	ldr	r2, [pc, #92]	@ (800e148 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800e0ec:	4293      	cmp	r3, r2
 800e0ee:	d10c      	bne.n	800e10a <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800e0f0:	68bb      	ldr	r3, [r7, #8]
 800e0f2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e0f6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800e0f8:	683b      	ldr	r3, [r7, #0]
 800e0fa:	689b      	ldr	r3, [r3, #8]
 800e0fc:	68ba      	ldr	r2, [r7, #8]
 800e0fe:	4313      	orrs	r3, r2
 800e100:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	681b      	ldr	r3, [r3, #0]
 800e106:	68ba      	ldr	r2, [r7, #8]
 800e108:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	2201      	movs	r2, #1
 800e10e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	2200      	movs	r2, #0
 800e116:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800e11a:	2300      	movs	r3, #0
}
 800e11c:	4618      	mov	r0, r3
 800e11e:	3714      	adds	r7, #20
 800e120:	46bd      	mov	sp, r7
 800e122:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e126:	4770      	bx	lr
 800e128:	40010000 	.word	0x40010000
 800e12c:	40010400 	.word	0x40010400
 800e130:	40000400 	.word	0x40000400
 800e134:	40000800 	.word	0x40000800
 800e138:	40000c00 	.word	0x40000c00
 800e13c:	40001800 	.word	0x40001800
 800e140:	40014000 	.word	0x40014000
 800e144:	4000e000 	.word	0x4000e000
 800e148:	4000e400 	.word	0x4000e400

0800e14c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800e14c:	b480      	push	{r7}
 800e14e:	b083      	sub	sp, #12
 800e150:	af00      	add	r7, sp, #0
 800e152:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800e154:	bf00      	nop
 800e156:	370c      	adds	r7, #12
 800e158:	46bd      	mov	sp, r7
 800e15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e15e:	4770      	bx	lr

0800e160 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800e160:	b480      	push	{r7}
 800e162:	b083      	sub	sp, #12
 800e164:	af00      	add	r7, sp, #0
 800e166:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800e168:	bf00      	nop
 800e16a:	370c      	adds	r7, #12
 800e16c:	46bd      	mov	sp, r7
 800e16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e172:	4770      	bx	lr

0800e174 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800e174:	b480      	push	{r7}
 800e176:	b083      	sub	sp, #12
 800e178:	af00      	add	r7, sp, #0
 800e17a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800e17c:	bf00      	nop
 800e17e:	370c      	adds	r7, #12
 800e180:	46bd      	mov	sp, r7
 800e182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e186:	4770      	bx	lr

0800e188 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e188:	b580      	push	{r7, lr}
 800e18a:	b082      	sub	sp, #8
 800e18c:	af00      	add	r7, sp, #0
 800e18e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	2b00      	cmp	r3, #0
 800e194:	d101      	bne.n	800e19a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e196:	2301      	movs	r3, #1
 800e198:	e042      	b.n	800e220 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e1a0:	2b00      	cmp	r3, #0
 800e1a2:	d106      	bne.n	800e1b2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	2200      	movs	r2, #0
 800e1a8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e1ac:	6878      	ldr	r0, [r7, #4]
 800e1ae:	f7f3 ff13 	bl	8001fd8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	2224      	movs	r2, #36	@ 0x24
 800e1b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	681b      	ldr	r3, [r3, #0]
 800e1be:	681a      	ldr	r2, [r3, #0]
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	681b      	ldr	r3, [r3, #0]
 800e1c4:	f022 0201 	bic.w	r2, r2, #1
 800e1c8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e1ce:	2b00      	cmp	r3, #0
 800e1d0:	d002      	beq.n	800e1d8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800e1d2:	6878      	ldr	r0, [r7, #4]
 800e1d4:	f000 fe94 	bl	800ef00 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800e1d8:	6878      	ldr	r0, [r7, #4]
 800e1da:	f000 f825 	bl	800e228 <UART_SetConfig>
 800e1de:	4603      	mov	r3, r0
 800e1e0:	2b01      	cmp	r3, #1
 800e1e2:	d101      	bne.n	800e1e8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800e1e4:	2301      	movs	r3, #1
 800e1e6:	e01b      	b.n	800e220 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	681b      	ldr	r3, [r3, #0]
 800e1ec:	685a      	ldr	r2, [r3, #4]
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	681b      	ldr	r3, [r3, #0]
 800e1f2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800e1f6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	681b      	ldr	r3, [r3, #0]
 800e1fc:	689a      	ldr	r2, [r3, #8]
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	681b      	ldr	r3, [r3, #0]
 800e202:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800e206:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	681b      	ldr	r3, [r3, #0]
 800e20c:	681a      	ldr	r2, [r3, #0]
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	681b      	ldr	r3, [r3, #0]
 800e212:	f042 0201 	orr.w	r2, r2, #1
 800e216:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800e218:	6878      	ldr	r0, [r7, #4]
 800e21a:	f000 ff13 	bl	800f044 <UART_CheckIdleState>
 800e21e:	4603      	mov	r3, r0
}
 800e220:	4618      	mov	r0, r3
 800e222:	3708      	adds	r7, #8
 800e224:	46bd      	mov	sp, r7
 800e226:	bd80      	pop	{r7, pc}

0800e228 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e228:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e22c:	b092      	sub	sp, #72	@ 0x48
 800e22e:	af00      	add	r7, sp, #0
 800e230:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800e232:	2300      	movs	r3, #0
 800e234:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e238:	697b      	ldr	r3, [r7, #20]
 800e23a:	689a      	ldr	r2, [r3, #8]
 800e23c:	697b      	ldr	r3, [r7, #20]
 800e23e:	691b      	ldr	r3, [r3, #16]
 800e240:	431a      	orrs	r2, r3
 800e242:	697b      	ldr	r3, [r7, #20]
 800e244:	695b      	ldr	r3, [r3, #20]
 800e246:	431a      	orrs	r2, r3
 800e248:	697b      	ldr	r3, [r7, #20]
 800e24a:	69db      	ldr	r3, [r3, #28]
 800e24c:	4313      	orrs	r3, r2
 800e24e:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e250:	697b      	ldr	r3, [r7, #20]
 800e252:	681b      	ldr	r3, [r3, #0]
 800e254:	681a      	ldr	r2, [r3, #0]
 800e256:	4bbe      	ldr	r3, [pc, #760]	@ (800e550 <UART_SetConfig+0x328>)
 800e258:	4013      	ands	r3, r2
 800e25a:	697a      	ldr	r2, [r7, #20]
 800e25c:	6812      	ldr	r2, [r2, #0]
 800e25e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800e260:	430b      	orrs	r3, r1
 800e262:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e264:	697b      	ldr	r3, [r7, #20]
 800e266:	681b      	ldr	r3, [r3, #0]
 800e268:	685b      	ldr	r3, [r3, #4]
 800e26a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800e26e:	697b      	ldr	r3, [r7, #20]
 800e270:	68da      	ldr	r2, [r3, #12]
 800e272:	697b      	ldr	r3, [r7, #20]
 800e274:	681b      	ldr	r3, [r3, #0]
 800e276:	430a      	orrs	r2, r1
 800e278:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800e27a:	697b      	ldr	r3, [r7, #20]
 800e27c:	699b      	ldr	r3, [r3, #24]
 800e27e:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800e280:	697b      	ldr	r3, [r7, #20]
 800e282:	681b      	ldr	r3, [r3, #0]
 800e284:	4ab3      	ldr	r2, [pc, #716]	@ (800e554 <UART_SetConfig+0x32c>)
 800e286:	4293      	cmp	r3, r2
 800e288:	d004      	beq.n	800e294 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800e28a:	697b      	ldr	r3, [r7, #20]
 800e28c:	6a1b      	ldr	r3, [r3, #32]
 800e28e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e290:	4313      	orrs	r3, r2
 800e292:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e294:	697b      	ldr	r3, [r7, #20]
 800e296:	681b      	ldr	r3, [r3, #0]
 800e298:	689a      	ldr	r2, [r3, #8]
 800e29a:	4baf      	ldr	r3, [pc, #700]	@ (800e558 <UART_SetConfig+0x330>)
 800e29c:	4013      	ands	r3, r2
 800e29e:	697a      	ldr	r2, [r7, #20]
 800e2a0:	6812      	ldr	r2, [r2, #0]
 800e2a2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800e2a4:	430b      	orrs	r3, r1
 800e2a6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800e2a8:	697b      	ldr	r3, [r7, #20]
 800e2aa:	681b      	ldr	r3, [r3, #0]
 800e2ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e2ae:	f023 010f 	bic.w	r1, r3, #15
 800e2b2:	697b      	ldr	r3, [r7, #20]
 800e2b4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e2b6:	697b      	ldr	r3, [r7, #20]
 800e2b8:	681b      	ldr	r3, [r3, #0]
 800e2ba:	430a      	orrs	r2, r1
 800e2bc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e2be:	697b      	ldr	r3, [r7, #20]
 800e2c0:	681b      	ldr	r3, [r3, #0]
 800e2c2:	4aa6      	ldr	r2, [pc, #664]	@ (800e55c <UART_SetConfig+0x334>)
 800e2c4:	4293      	cmp	r3, r2
 800e2c6:	d177      	bne.n	800e3b8 <UART_SetConfig+0x190>
 800e2c8:	4ba5      	ldr	r3, [pc, #660]	@ (800e560 <UART_SetConfig+0x338>)
 800e2ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e2cc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800e2d0:	2b28      	cmp	r3, #40	@ 0x28
 800e2d2:	d86d      	bhi.n	800e3b0 <UART_SetConfig+0x188>
 800e2d4:	a201      	add	r2, pc, #4	@ (adr r2, 800e2dc <UART_SetConfig+0xb4>)
 800e2d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e2da:	bf00      	nop
 800e2dc:	0800e381 	.word	0x0800e381
 800e2e0:	0800e3b1 	.word	0x0800e3b1
 800e2e4:	0800e3b1 	.word	0x0800e3b1
 800e2e8:	0800e3b1 	.word	0x0800e3b1
 800e2ec:	0800e3b1 	.word	0x0800e3b1
 800e2f0:	0800e3b1 	.word	0x0800e3b1
 800e2f4:	0800e3b1 	.word	0x0800e3b1
 800e2f8:	0800e3b1 	.word	0x0800e3b1
 800e2fc:	0800e389 	.word	0x0800e389
 800e300:	0800e3b1 	.word	0x0800e3b1
 800e304:	0800e3b1 	.word	0x0800e3b1
 800e308:	0800e3b1 	.word	0x0800e3b1
 800e30c:	0800e3b1 	.word	0x0800e3b1
 800e310:	0800e3b1 	.word	0x0800e3b1
 800e314:	0800e3b1 	.word	0x0800e3b1
 800e318:	0800e3b1 	.word	0x0800e3b1
 800e31c:	0800e391 	.word	0x0800e391
 800e320:	0800e3b1 	.word	0x0800e3b1
 800e324:	0800e3b1 	.word	0x0800e3b1
 800e328:	0800e3b1 	.word	0x0800e3b1
 800e32c:	0800e3b1 	.word	0x0800e3b1
 800e330:	0800e3b1 	.word	0x0800e3b1
 800e334:	0800e3b1 	.word	0x0800e3b1
 800e338:	0800e3b1 	.word	0x0800e3b1
 800e33c:	0800e399 	.word	0x0800e399
 800e340:	0800e3b1 	.word	0x0800e3b1
 800e344:	0800e3b1 	.word	0x0800e3b1
 800e348:	0800e3b1 	.word	0x0800e3b1
 800e34c:	0800e3b1 	.word	0x0800e3b1
 800e350:	0800e3b1 	.word	0x0800e3b1
 800e354:	0800e3b1 	.word	0x0800e3b1
 800e358:	0800e3b1 	.word	0x0800e3b1
 800e35c:	0800e3a1 	.word	0x0800e3a1
 800e360:	0800e3b1 	.word	0x0800e3b1
 800e364:	0800e3b1 	.word	0x0800e3b1
 800e368:	0800e3b1 	.word	0x0800e3b1
 800e36c:	0800e3b1 	.word	0x0800e3b1
 800e370:	0800e3b1 	.word	0x0800e3b1
 800e374:	0800e3b1 	.word	0x0800e3b1
 800e378:	0800e3b1 	.word	0x0800e3b1
 800e37c:	0800e3a9 	.word	0x0800e3a9
 800e380:	2301      	movs	r3, #1
 800e382:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e386:	e326      	b.n	800e9d6 <UART_SetConfig+0x7ae>
 800e388:	2304      	movs	r3, #4
 800e38a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e38e:	e322      	b.n	800e9d6 <UART_SetConfig+0x7ae>
 800e390:	2308      	movs	r3, #8
 800e392:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e396:	e31e      	b.n	800e9d6 <UART_SetConfig+0x7ae>
 800e398:	2310      	movs	r3, #16
 800e39a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e39e:	e31a      	b.n	800e9d6 <UART_SetConfig+0x7ae>
 800e3a0:	2320      	movs	r3, #32
 800e3a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e3a6:	e316      	b.n	800e9d6 <UART_SetConfig+0x7ae>
 800e3a8:	2340      	movs	r3, #64	@ 0x40
 800e3aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e3ae:	e312      	b.n	800e9d6 <UART_SetConfig+0x7ae>
 800e3b0:	2380      	movs	r3, #128	@ 0x80
 800e3b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e3b6:	e30e      	b.n	800e9d6 <UART_SetConfig+0x7ae>
 800e3b8:	697b      	ldr	r3, [r7, #20]
 800e3ba:	681b      	ldr	r3, [r3, #0]
 800e3bc:	4a69      	ldr	r2, [pc, #420]	@ (800e564 <UART_SetConfig+0x33c>)
 800e3be:	4293      	cmp	r3, r2
 800e3c0:	d130      	bne.n	800e424 <UART_SetConfig+0x1fc>
 800e3c2:	4b67      	ldr	r3, [pc, #412]	@ (800e560 <UART_SetConfig+0x338>)
 800e3c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e3c6:	f003 0307 	and.w	r3, r3, #7
 800e3ca:	2b05      	cmp	r3, #5
 800e3cc:	d826      	bhi.n	800e41c <UART_SetConfig+0x1f4>
 800e3ce:	a201      	add	r2, pc, #4	@ (adr r2, 800e3d4 <UART_SetConfig+0x1ac>)
 800e3d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e3d4:	0800e3ed 	.word	0x0800e3ed
 800e3d8:	0800e3f5 	.word	0x0800e3f5
 800e3dc:	0800e3fd 	.word	0x0800e3fd
 800e3e0:	0800e405 	.word	0x0800e405
 800e3e4:	0800e40d 	.word	0x0800e40d
 800e3e8:	0800e415 	.word	0x0800e415
 800e3ec:	2300      	movs	r3, #0
 800e3ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e3f2:	e2f0      	b.n	800e9d6 <UART_SetConfig+0x7ae>
 800e3f4:	2304      	movs	r3, #4
 800e3f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e3fa:	e2ec      	b.n	800e9d6 <UART_SetConfig+0x7ae>
 800e3fc:	2308      	movs	r3, #8
 800e3fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e402:	e2e8      	b.n	800e9d6 <UART_SetConfig+0x7ae>
 800e404:	2310      	movs	r3, #16
 800e406:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e40a:	e2e4      	b.n	800e9d6 <UART_SetConfig+0x7ae>
 800e40c:	2320      	movs	r3, #32
 800e40e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e412:	e2e0      	b.n	800e9d6 <UART_SetConfig+0x7ae>
 800e414:	2340      	movs	r3, #64	@ 0x40
 800e416:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e41a:	e2dc      	b.n	800e9d6 <UART_SetConfig+0x7ae>
 800e41c:	2380      	movs	r3, #128	@ 0x80
 800e41e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e422:	e2d8      	b.n	800e9d6 <UART_SetConfig+0x7ae>
 800e424:	697b      	ldr	r3, [r7, #20]
 800e426:	681b      	ldr	r3, [r3, #0]
 800e428:	4a4f      	ldr	r2, [pc, #316]	@ (800e568 <UART_SetConfig+0x340>)
 800e42a:	4293      	cmp	r3, r2
 800e42c:	d130      	bne.n	800e490 <UART_SetConfig+0x268>
 800e42e:	4b4c      	ldr	r3, [pc, #304]	@ (800e560 <UART_SetConfig+0x338>)
 800e430:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e432:	f003 0307 	and.w	r3, r3, #7
 800e436:	2b05      	cmp	r3, #5
 800e438:	d826      	bhi.n	800e488 <UART_SetConfig+0x260>
 800e43a:	a201      	add	r2, pc, #4	@ (adr r2, 800e440 <UART_SetConfig+0x218>)
 800e43c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e440:	0800e459 	.word	0x0800e459
 800e444:	0800e461 	.word	0x0800e461
 800e448:	0800e469 	.word	0x0800e469
 800e44c:	0800e471 	.word	0x0800e471
 800e450:	0800e479 	.word	0x0800e479
 800e454:	0800e481 	.word	0x0800e481
 800e458:	2300      	movs	r3, #0
 800e45a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e45e:	e2ba      	b.n	800e9d6 <UART_SetConfig+0x7ae>
 800e460:	2304      	movs	r3, #4
 800e462:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e466:	e2b6      	b.n	800e9d6 <UART_SetConfig+0x7ae>
 800e468:	2308      	movs	r3, #8
 800e46a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e46e:	e2b2      	b.n	800e9d6 <UART_SetConfig+0x7ae>
 800e470:	2310      	movs	r3, #16
 800e472:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e476:	e2ae      	b.n	800e9d6 <UART_SetConfig+0x7ae>
 800e478:	2320      	movs	r3, #32
 800e47a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e47e:	e2aa      	b.n	800e9d6 <UART_SetConfig+0x7ae>
 800e480:	2340      	movs	r3, #64	@ 0x40
 800e482:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e486:	e2a6      	b.n	800e9d6 <UART_SetConfig+0x7ae>
 800e488:	2380      	movs	r3, #128	@ 0x80
 800e48a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e48e:	e2a2      	b.n	800e9d6 <UART_SetConfig+0x7ae>
 800e490:	697b      	ldr	r3, [r7, #20]
 800e492:	681b      	ldr	r3, [r3, #0]
 800e494:	4a35      	ldr	r2, [pc, #212]	@ (800e56c <UART_SetConfig+0x344>)
 800e496:	4293      	cmp	r3, r2
 800e498:	d130      	bne.n	800e4fc <UART_SetConfig+0x2d4>
 800e49a:	4b31      	ldr	r3, [pc, #196]	@ (800e560 <UART_SetConfig+0x338>)
 800e49c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e49e:	f003 0307 	and.w	r3, r3, #7
 800e4a2:	2b05      	cmp	r3, #5
 800e4a4:	d826      	bhi.n	800e4f4 <UART_SetConfig+0x2cc>
 800e4a6:	a201      	add	r2, pc, #4	@ (adr r2, 800e4ac <UART_SetConfig+0x284>)
 800e4a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e4ac:	0800e4c5 	.word	0x0800e4c5
 800e4b0:	0800e4cd 	.word	0x0800e4cd
 800e4b4:	0800e4d5 	.word	0x0800e4d5
 800e4b8:	0800e4dd 	.word	0x0800e4dd
 800e4bc:	0800e4e5 	.word	0x0800e4e5
 800e4c0:	0800e4ed 	.word	0x0800e4ed
 800e4c4:	2300      	movs	r3, #0
 800e4c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e4ca:	e284      	b.n	800e9d6 <UART_SetConfig+0x7ae>
 800e4cc:	2304      	movs	r3, #4
 800e4ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e4d2:	e280      	b.n	800e9d6 <UART_SetConfig+0x7ae>
 800e4d4:	2308      	movs	r3, #8
 800e4d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e4da:	e27c      	b.n	800e9d6 <UART_SetConfig+0x7ae>
 800e4dc:	2310      	movs	r3, #16
 800e4de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e4e2:	e278      	b.n	800e9d6 <UART_SetConfig+0x7ae>
 800e4e4:	2320      	movs	r3, #32
 800e4e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e4ea:	e274      	b.n	800e9d6 <UART_SetConfig+0x7ae>
 800e4ec:	2340      	movs	r3, #64	@ 0x40
 800e4ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e4f2:	e270      	b.n	800e9d6 <UART_SetConfig+0x7ae>
 800e4f4:	2380      	movs	r3, #128	@ 0x80
 800e4f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e4fa:	e26c      	b.n	800e9d6 <UART_SetConfig+0x7ae>
 800e4fc:	697b      	ldr	r3, [r7, #20]
 800e4fe:	681b      	ldr	r3, [r3, #0]
 800e500:	4a1b      	ldr	r2, [pc, #108]	@ (800e570 <UART_SetConfig+0x348>)
 800e502:	4293      	cmp	r3, r2
 800e504:	d142      	bne.n	800e58c <UART_SetConfig+0x364>
 800e506:	4b16      	ldr	r3, [pc, #88]	@ (800e560 <UART_SetConfig+0x338>)
 800e508:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e50a:	f003 0307 	and.w	r3, r3, #7
 800e50e:	2b05      	cmp	r3, #5
 800e510:	d838      	bhi.n	800e584 <UART_SetConfig+0x35c>
 800e512:	a201      	add	r2, pc, #4	@ (adr r2, 800e518 <UART_SetConfig+0x2f0>)
 800e514:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e518:	0800e531 	.word	0x0800e531
 800e51c:	0800e539 	.word	0x0800e539
 800e520:	0800e541 	.word	0x0800e541
 800e524:	0800e549 	.word	0x0800e549
 800e528:	0800e575 	.word	0x0800e575
 800e52c:	0800e57d 	.word	0x0800e57d
 800e530:	2300      	movs	r3, #0
 800e532:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e536:	e24e      	b.n	800e9d6 <UART_SetConfig+0x7ae>
 800e538:	2304      	movs	r3, #4
 800e53a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e53e:	e24a      	b.n	800e9d6 <UART_SetConfig+0x7ae>
 800e540:	2308      	movs	r3, #8
 800e542:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e546:	e246      	b.n	800e9d6 <UART_SetConfig+0x7ae>
 800e548:	2310      	movs	r3, #16
 800e54a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e54e:	e242      	b.n	800e9d6 <UART_SetConfig+0x7ae>
 800e550:	cfff69f3 	.word	0xcfff69f3
 800e554:	58000c00 	.word	0x58000c00
 800e558:	11fff4ff 	.word	0x11fff4ff
 800e55c:	40011000 	.word	0x40011000
 800e560:	58024400 	.word	0x58024400
 800e564:	40004400 	.word	0x40004400
 800e568:	40004800 	.word	0x40004800
 800e56c:	40004c00 	.word	0x40004c00
 800e570:	40005000 	.word	0x40005000
 800e574:	2320      	movs	r3, #32
 800e576:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e57a:	e22c      	b.n	800e9d6 <UART_SetConfig+0x7ae>
 800e57c:	2340      	movs	r3, #64	@ 0x40
 800e57e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e582:	e228      	b.n	800e9d6 <UART_SetConfig+0x7ae>
 800e584:	2380      	movs	r3, #128	@ 0x80
 800e586:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e58a:	e224      	b.n	800e9d6 <UART_SetConfig+0x7ae>
 800e58c:	697b      	ldr	r3, [r7, #20]
 800e58e:	681b      	ldr	r3, [r3, #0]
 800e590:	4ab1      	ldr	r2, [pc, #708]	@ (800e858 <UART_SetConfig+0x630>)
 800e592:	4293      	cmp	r3, r2
 800e594:	d176      	bne.n	800e684 <UART_SetConfig+0x45c>
 800e596:	4bb1      	ldr	r3, [pc, #708]	@ (800e85c <UART_SetConfig+0x634>)
 800e598:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e59a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800e59e:	2b28      	cmp	r3, #40	@ 0x28
 800e5a0:	d86c      	bhi.n	800e67c <UART_SetConfig+0x454>
 800e5a2:	a201      	add	r2, pc, #4	@ (adr r2, 800e5a8 <UART_SetConfig+0x380>)
 800e5a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e5a8:	0800e64d 	.word	0x0800e64d
 800e5ac:	0800e67d 	.word	0x0800e67d
 800e5b0:	0800e67d 	.word	0x0800e67d
 800e5b4:	0800e67d 	.word	0x0800e67d
 800e5b8:	0800e67d 	.word	0x0800e67d
 800e5bc:	0800e67d 	.word	0x0800e67d
 800e5c0:	0800e67d 	.word	0x0800e67d
 800e5c4:	0800e67d 	.word	0x0800e67d
 800e5c8:	0800e655 	.word	0x0800e655
 800e5cc:	0800e67d 	.word	0x0800e67d
 800e5d0:	0800e67d 	.word	0x0800e67d
 800e5d4:	0800e67d 	.word	0x0800e67d
 800e5d8:	0800e67d 	.word	0x0800e67d
 800e5dc:	0800e67d 	.word	0x0800e67d
 800e5e0:	0800e67d 	.word	0x0800e67d
 800e5e4:	0800e67d 	.word	0x0800e67d
 800e5e8:	0800e65d 	.word	0x0800e65d
 800e5ec:	0800e67d 	.word	0x0800e67d
 800e5f0:	0800e67d 	.word	0x0800e67d
 800e5f4:	0800e67d 	.word	0x0800e67d
 800e5f8:	0800e67d 	.word	0x0800e67d
 800e5fc:	0800e67d 	.word	0x0800e67d
 800e600:	0800e67d 	.word	0x0800e67d
 800e604:	0800e67d 	.word	0x0800e67d
 800e608:	0800e665 	.word	0x0800e665
 800e60c:	0800e67d 	.word	0x0800e67d
 800e610:	0800e67d 	.word	0x0800e67d
 800e614:	0800e67d 	.word	0x0800e67d
 800e618:	0800e67d 	.word	0x0800e67d
 800e61c:	0800e67d 	.word	0x0800e67d
 800e620:	0800e67d 	.word	0x0800e67d
 800e624:	0800e67d 	.word	0x0800e67d
 800e628:	0800e66d 	.word	0x0800e66d
 800e62c:	0800e67d 	.word	0x0800e67d
 800e630:	0800e67d 	.word	0x0800e67d
 800e634:	0800e67d 	.word	0x0800e67d
 800e638:	0800e67d 	.word	0x0800e67d
 800e63c:	0800e67d 	.word	0x0800e67d
 800e640:	0800e67d 	.word	0x0800e67d
 800e644:	0800e67d 	.word	0x0800e67d
 800e648:	0800e675 	.word	0x0800e675
 800e64c:	2301      	movs	r3, #1
 800e64e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e652:	e1c0      	b.n	800e9d6 <UART_SetConfig+0x7ae>
 800e654:	2304      	movs	r3, #4
 800e656:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e65a:	e1bc      	b.n	800e9d6 <UART_SetConfig+0x7ae>
 800e65c:	2308      	movs	r3, #8
 800e65e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e662:	e1b8      	b.n	800e9d6 <UART_SetConfig+0x7ae>
 800e664:	2310      	movs	r3, #16
 800e666:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e66a:	e1b4      	b.n	800e9d6 <UART_SetConfig+0x7ae>
 800e66c:	2320      	movs	r3, #32
 800e66e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e672:	e1b0      	b.n	800e9d6 <UART_SetConfig+0x7ae>
 800e674:	2340      	movs	r3, #64	@ 0x40
 800e676:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e67a:	e1ac      	b.n	800e9d6 <UART_SetConfig+0x7ae>
 800e67c:	2380      	movs	r3, #128	@ 0x80
 800e67e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e682:	e1a8      	b.n	800e9d6 <UART_SetConfig+0x7ae>
 800e684:	697b      	ldr	r3, [r7, #20]
 800e686:	681b      	ldr	r3, [r3, #0]
 800e688:	4a75      	ldr	r2, [pc, #468]	@ (800e860 <UART_SetConfig+0x638>)
 800e68a:	4293      	cmp	r3, r2
 800e68c:	d130      	bne.n	800e6f0 <UART_SetConfig+0x4c8>
 800e68e:	4b73      	ldr	r3, [pc, #460]	@ (800e85c <UART_SetConfig+0x634>)
 800e690:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e692:	f003 0307 	and.w	r3, r3, #7
 800e696:	2b05      	cmp	r3, #5
 800e698:	d826      	bhi.n	800e6e8 <UART_SetConfig+0x4c0>
 800e69a:	a201      	add	r2, pc, #4	@ (adr r2, 800e6a0 <UART_SetConfig+0x478>)
 800e69c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e6a0:	0800e6b9 	.word	0x0800e6b9
 800e6a4:	0800e6c1 	.word	0x0800e6c1
 800e6a8:	0800e6c9 	.word	0x0800e6c9
 800e6ac:	0800e6d1 	.word	0x0800e6d1
 800e6b0:	0800e6d9 	.word	0x0800e6d9
 800e6b4:	0800e6e1 	.word	0x0800e6e1
 800e6b8:	2300      	movs	r3, #0
 800e6ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e6be:	e18a      	b.n	800e9d6 <UART_SetConfig+0x7ae>
 800e6c0:	2304      	movs	r3, #4
 800e6c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e6c6:	e186      	b.n	800e9d6 <UART_SetConfig+0x7ae>
 800e6c8:	2308      	movs	r3, #8
 800e6ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e6ce:	e182      	b.n	800e9d6 <UART_SetConfig+0x7ae>
 800e6d0:	2310      	movs	r3, #16
 800e6d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e6d6:	e17e      	b.n	800e9d6 <UART_SetConfig+0x7ae>
 800e6d8:	2320      	movs	r3, #32
 800e6da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e6de:	e17a      	b.n	800e9d6 <UART_SetConfig+0x7ae>
 800e6e0:	2340      	movs	r3, #64	@ 0x40
 800e6e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e6e6:	e176      	b.n	800e9d6 <UART_SetConfig+0x7ae>
 800e6e8:	2380      	movs	r3, #128	@ 0x80
 800e6ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e6ee:	e172      	b.n	800e9d6 <UART_SetConfig+0x7ae>
 800e6f0:	697b      	ldr	r3, [r7, #20]
 800e6f2:	681b      	ldr	r3, [r3, #0]
 800e6f4:	4a5b      	ldr	r2, [pc, #364]	@ (800e864 <UART_SetConfig+0x63c>)
 800e6f6:	4293      	cmp	r3, r2
 800e6f8:	d130      	bne.n	800e75c <UART_SetConfig+0x534>
 800e6fa:	4b58      	ldr	r3, [pc, #352]	@ (800e85c <UART_SetConfig+0x634>)
 800e6fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e6fe:	f003 0307 	and.w	r3, r3, #7
 800e702:	2b05      	cmp	r3, #5
 800e704:	d826      	bhi.n	800e754 <UART_SetConfig+0x52c>
 800e706:	a201      	add	r2, pc, #4	@ (adr r2, 800e70c <UART_SetConfig+0x4e4>)
 800e708:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e70c:	0800e725 	.word	0x0800e725
 800e710:	0800e72d 	.word	0x0800e72d
 800e714:	0800e735 	.word	0x0800e735
 800e718:	0800e73d 	.word	0x0800e73d
 800e71c:	0800e745 	.word	0x0800e745
 800e720:	0800e74d 	.word	0x0800e74d
 800e724:	2300      	movs	r3, #0
 800e726:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e72a:	e154      	b.n	800e9d6 <UART_SetConfig+0x7ae>
 800e72c:	2304      	movs	r3, #4
 800e72e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e732:	e150      	b.n	800e9d6 <UART_SetConfig+0x7ae>
 800e734:	2308      	movs	r3, #8
 800e736:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e73a:	e14c      	b.n	800e9d6 <UART_SetConfig+0x7ae>
 800e73c:	2310      	movs	r3, #16
 800e73e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e742:	e148      	b.n	800e9d6 <UART_SetConfig+0x7ae>
 800e744:	2320      	movs	r3, #32
 800e746:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e74a:	e144      	b.n	800e9d6 <UART_SetConfig+0x7ae>
 800e74c:	2340      	movs	r3, #64	@ 0x40
 800e74e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e752:	e140      	b.n	800e9d6 <UART_SetConfig+0x7ae>
 800e754:	2380      	movs	r3, #128	@ 0x80
 800e756:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e75a:	e13c      	b.n	800e9d6 <UART_SetConfig+0x7ae>
 800e75c:	697b      	ldr	r3, [r7, #20]
 800e75e:	681b      	ldr	r3, [r3, #0]
 800e760:	4a41      	ldr	r2, [pc, #260]	@ (800e868 <UART_SetConfig+0x640>)
 800e762:	4293      	cmp	r3, r2
 800e764:	f040 8082 	bne.w	800e86c <UART_SetConfig+0x644>
 800e768:	4b3c      	ldr	r3, [pc, #240]	@ (800e85c <UART_SetConfig+0x634>)
 800e76a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e76c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800e770:	2b28      	cmp	r3, #40	@ 0x28
 800e772:	d86d      	bhi.n	800e850 <UART_SetConfig+0x628>
 800e774:	a201      	add	r2, pc, #4	@ (adr r2, 800e77c <UART_SetConfig+0x554>)
 800e776:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e77a:	bf00      	nop
 800e77c:	0800e821 	.word	0x0800e821
 800e780:	0800e851 	.word	0x0800e851
 800e784:	0800e851 	.word	0x0800e851
 800e788:	0800e851 	.word	0x0800e851
 800e78c:	0800e851 	.word	0x0800e851
 800e790:	0800e851 	.word	0x0800e851
 800e794:	0800e851 	.word	0x0800e851
 800e798:	0800e851 	.word	0x0800e851
 800e79c:	0800e829 	.word	0x0800e829
 800e7a0:	0800e851 	.word	0x0800e851
 800e7a4:	0800e851 	.word	0x0800e851
 800e7a8:	0800e851 	.word	0x0800e851
 800e7ac:	0800e851 	.word	0x0800e851
 800e7b0:	0800e851 	.word	0x0800e851
 800e7b4:	0800e851 	.word	0x0800e851
 800e7b8:	0800e851 	.word	0x0800e851
 800e7bc:	0800e831 	.word	0x0800e831
 800e7c0:	0800e851 	.word	0x0800e851
 800e7c4:	0800e851 	.word	0x0800e851
 800e7c8:	0800e851 	.word	0x0800e851
 800e7cc:	0800e851 	.word	0x0800e851
 800e7d0:	0800e851 	.word	0x0800e851
 800e7d4:	0800e851 	.word	0x0800e851
 800e7d8:	0800e851 	.word	0x0800e851
 800e7dc:	0800e839 	.word	0x0800e839
 800e7e0:	0800e851 	.word	0x0800e851
 800e7e4:	0800e851 	.word	0x0800e851
 800e7e8:	0800e851 	.word	0x0800e851
 800e7ec:	0800e851 	.word	0x0800e851
 800e7f0:	0800e851 	.word	0x0800e851
 800e7f4:	0800e851 	.word	0x0800e851
 800e7f8:	0800e851 	.word	0x0800e851
 800e7fc:	0800e841 	.word	0x0800e841
 800e800:	0800e851 	.word	0x0800e851
 800e804:	0800e851 	.word	0x0800e851
 800e808:	0800e851 	.word	0x0800e851
 800e80c:	0800e851 	.word	0x0800e851
 800e810:	0800e851 	.word	0x0800e851
 800e814:	0800e851 	.word	0x0800e851
 800e818:	0800e851 	.word	0x0800e851
 800e81c:	0800e849 	.word	0x0800e849
 800e820:	2301      	movs	r3, #1
 800e822:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e826:	e0d6      	b.n	800e9d6 <UART_SetConfig+0x7ae>
 800e828:	2304      	movs	r3, #4
 800e82a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e82e:	e0d2      	b.n	800e9d6 <UART_SetConfig+0x7ae>
 800e830:	2308      	movs	r3, #8
 800e832:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e836:	e0ce      	b.n	800e9d6 <UART_SetConfig+0x7ae>
 800e838:	2310      	movs	r3, #16
 800e83a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e83e:	e0ca      	b.n	800e9d6 <UART_SetConfig+0x7ae>
 800e840:	2320      	movs	r3, #32
 800e842:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e846:	e0c6      	b.n	800e9d6 <UART_SetConfig+0x7ae>
 800e848:	2340      	movs	r3, #64	@ 0x40
 800e84a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e84e:	e0c2      	b.n	800e9d6 <UART_SetConfig+0x7ae>
 800e850:	2380      	movs	r3, #128	@ 0x80
 800e852:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e856:	e0be      	b.n	800e9d6 <UART_SetConfig+0x7ae>
 800e858:	40011400 	.word	0x40011400
 800e85c:	58024400 	.word	0x58024400
 800e860:	40007800 	.word	0x40007800
 800e864:	40007c00 	.word	0x40007c00
 800e868:	40011800 	.word	0x40011800
 800e86c:	697b      	ldr	r3, [r7, #20]
 800e86e:	681b      	ldr	r3, [r3, #0]
 800e870:	4aad      	ldr	r2, [pc, #692]	@ (800eb28 <UART_SetConfig+0x900>)
 800e872:	4293      	cmp	r3, r2
 800e874:	d176      	bne.n	800e964 <UART_SetConfig+0x73c>
 800e876:	4bad      	ldr	r3, [pc, #692]	@ (800eb2c <UART_SetConfig+0x904>)
 800e878:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e87a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800e87e:	2b28      	cmp	r3, #40	@ 0x28
 800e880:	d86c      	bhi.n	800e95c <UART_SetConfig+0x734>
 800e882:	a201      	add	r2, pc, #4	@ (adr r2, 800e888 <UART_SetConfig+0x660>)
 800e884:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e888:	0800e92d 	.word	0x0800e92d
 800e88c:	0800e95d 	.word	0x0800e95d
 800e890:	0800e95d 	.word	0x0800e95d
 800e894:	0800e95d 	.word	0x0800e95d
 800e898:	0800e95d 	.word	0x0800e95d
 800e89c:	0800e95d 	.word	0x0800e95d
 800e8a0:	0800e95d 	.word	0x0800e95d
 800e8a4:	0800e95d 	.word	0x0800e95d
 800e8a8:	0800e935 	.word	0x0800e935
 800e8ac:	0800e95d 	.word	0x0800e95d
 800e8b0:	0800e95d 	.word	0x0800e95d
 800e8b4:	0800e95d 	.word	0x0800e95d
 800e8b8:	0800e95d 	.word	0x0800e95d
 800e8bc:	0800e95d 	.word	0x0800e95d
 800e8c0:	0800e95d 	.word	0x0800e95d
 800e8c4:	0800e95d 	.word	0x0800e95d
 800e8c8:	0800e93d 	.word	0x0800e93d
 800e8cc:	0800e95d 	.word	0x0800e95d
 800e8d0:	0800e95d 	.word	0x0800e95d
 800e8d4:	0800e95d 	.word	0x0800e95d
 800e8d8:	0800e95d 	.word	0x0800e95d
 800e8dc:	0800e95d 	.word	0x0800e95d
 800e8e0:	0800e95d 	.word	0x0800e95d
 800e8e4:	0800e95d 	.word	0x0800e95d
 800e8e8:	0800e945 	.word	0x0800e945
 800e8ec:	0800e95d 	.word	0x0800e95d
 800e8f0:	0800e95d 	.word	0x0800e95d
 800e8f4:	0800e95d 	.word	0x0800e95d
 800e8f8:	0800e95d 	.word	0x0800e95d
 800e8fc:	0800e95d 	.word	0x0800e95d
 800e900:	0800e95d 	.word	0x0800e95d
 800e904:	0800e95d 	.word	0x0800e95d
 800e908:	0800e94d 	.word	0x0800e94d
 800e90c:	0800e95d 	.word	0x0800e95d
 800e910:	0800e95d 	.word	0x0800e95d
 800e914:	0800e95d 	.word	0x0800e95d
 800e918:	0800e95d 	.word	0x0800e95d
 800e91c:	0800e95d 	.word	0x0800e95d
 800e920:	0800e95d 	.word	0x0800e95d
 800e924:	0800e95d 	.word	0x0800e95d
 800e928:	0800e955 	.word	0x0800e955
 800e92c:	2301      	movs	r3, #1
 800e92e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e932:	e050      	b.n	800e9d6 <UART_SetConfig+0x7ae>
 800e934:	2304      	movs	r3, #4
 800e936:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e93a:	e04c      	b.n	800e9d6 <UART_SetConfig+0x7ae>
 800e93c:	2308      	movs	r3, #8
 800e93e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e942:	e048      	b.n	800e9d6 <UART_SetConfig+0x7ae>
 800e944:	2310      	movs	r3, #16
 800e946:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e94a:	e044      	b.n	800e9d6 <UART_SetConfig+0x7ae>
 800e94c:	2320      	movs	r3, #32
 800e94e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e952:	e040      	b.n	800e9d6 <UART_SetConfig+0x7ae>
 800e954:	2340      	movs	r3, #64	@ 0x40
 800e956:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e95a:	e03c      	b.n	800e9d6 <UART_SetConfig+0x7ae>
 800e95c:	2380      	movs	r3, #128	@ 0x80
 800e95e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e962:	e038      	b.n	800e9d6 <UART_SetConfig+0x7ae>
 800e964:	697b      	ldr	r3, [r7, #20]
 800e966:	681b      	ldr	r3, [r3, #0]
 800e968:	4a71      	ldr	r2, [pc, #452]	@ (800eb30 <UART_SetConfig+0x908>)
 800e96a:	4293      	cmp	r3, r2
 800e96c:	d130      	bne.n	800e9d0 <UART_SetConfig+0x7a8>
 800e96e:	4b6f      	ldr	r3, [pc, #444]	@ (800eb2c <UART_SetConfig+0x904>)
 800e970:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e972:	f003 0307 	and.w	r3, r3, #7
 800e976:	2b05      	cmp	r3, #5
 800e978:	d826      	bhi.n	800e9c8 <UART_SetConfig+0x7a0>
 800e97a:	a201      	add	r2, pc, #4	@ (adr r2, 800e980 <UART_SetConfig+0x758>)
 800e97c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e980:	0800e999 	.word	0x0800e999
 800e984:	0800e9a1 	.word	0x0800e9a1
 800e988:	0800e9a9 	.word	0x0800e9a9
 800e98c:	0800e9b1 	.word	0x0800e9b1
 800e990:	0800e9b9 	.word	0x0800e9b9
 800e994:	0800e9c1 	.word	0x0800e9c1
 800e998:	2302      	movs	r3, #2
 800e99a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e99e:	e01a      	b.n	800e9d6 <UART_SetConfig+0x7ae>
 800e9a0:	2304      	movs	r3, #4
 800e9a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e9a6:	e016      	b.n	800e9d6 <UART_SetConfig+0x7ae>
 800e9a8:	2308      	movs	r3, #8
 800e9aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e9ae:	e012      	b.n	800e9d6 <UART_SetConfig+0x7ae>
 800e9b0:	2310      	movs	r3, #16
 800e9b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e9b6:	e00e      	b.n	800e9d6 <UART_SetConfig+0x7ae>
 800e9b8:	2320      	movs	r3, #32
 800e9ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e9be:	e00a      	b.n	800e9d6 <UART_SetConfig+0x7ae>
 800e9c0:	2340      	movs	r3, #64	@ 0x40
 800e9c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e9c6:	e006      	b.n	800e9d6 <UART_SetConfig+0x7ae>
 800e9c8:	2380      	movs	r3, #128	@ 0x80
 800e9ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e9ce:	e002      	b.n	800e9d6 <UART_SetConfig+0x7ae>
 800e9d0:	2380      	movs	r3, #128	@ 0x80
 800e9d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800e9d6:	697b      	ldr	r3, [r7, #20]
 800e9d8:	681b      	ldr	r3, [r3, #0]
 800e9da:	4a55      	ldr	r2, [pc, #340]	@ (800eb30 <UART_SetConfig+0x908>)
 800e9dc:	4293      	cmp	r3, r2
 800e9de:	f040 80f8 	bne.w	800ebd2 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800e9e2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800e9e6:	2b20      	cmp	r3, #32
 800e9e8:	dc46      	bgt.n	800ea78 <UART_SetConfig+0x850>
 800e9ea:	2b02      	cmp	r3, #2
 800e9ec:	db75      	blt.n	800eada <UART_SetConfig+0x8b2>
 800e9ee:	3b02      	subs	r3, #2
 800e9f0:	2b1e      	cmp	r3, #30
 800e9f2:	d872      	bhi.n	800eada <UART_SetConfig+0x8b2>
 800e9f4:	a201      	add	r2, pc, #4	@ (adr r2, 800e9fc <UART_SetConfig+0x7d4>)
 800e9f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e9fa:	bf00      	nop
 800e9fc:	0800ea7f 	.word	0x0800ea7f
 800ea00:	0800eadb 	.word	0x0800eadb
 800ea04:	0800ea87 	.word	0x0800ea87
 800ea08:	0800eadb 	.word	0x0800eadb
 800ea0c:	0800eadb 	.word	0x0800eadb
 800ea10:	0800eadb 	.word	0x0800eadb
 800ea14:	0800ea97 	.word	0x0800ea97
 800ea18:	0800eadb 	.word	0x0800eadb
 800ea1c:	0800eadb 	.word	0x0800eadb
 800ea20:	0800eadb 	.word	0x0800eadb
 800ea24:	0800eadb 	.word	0x0800eadb
 800ea28:	0800eadb 	.word	0x0800eadb
 800ea2c:	0800eadb 	.word	0x0800eadb
 800ea30:	0800eadb 	.word	0x0800eadb
 800ea34:	0800eaa7 	.word	0x0800eaa7
 800ea38:	0800eadb 	.word	0x0800eadb
 800ea3c:	0800eadb 	.word	0x0800eadb
 800ea40:	0800eadb 	.word	0x0800eadb
 800ea44:	0800eadb 	.word	0x0800eadb
 800ea48:	0800eadb 	.word	0x0800eadb
 800ea4c:	0800eadb 	.word	0x0800eadb
 800ea50:	0800eadb 	.word	0x0800eadb
 800ea54:	0800eadb 	.word	0x0800eadb
 800ea58:	0800eadb 	.word	0x0800eadb
 800ea5c:	0800eadb 	.word	0x0800eadb
 800ea60:	0800eadb 	.word	0x0800eadb
 800ea64:	0800eadb 	.word	0x0800eadb
 800ea68:	0800eadb 	.word	0x0800eadb
 800ea6c:	0800eadb 	.word	0x0800eadb
 800ea70:	0800eadb 	.word	0x0800eadb
 800ea74:	0800eacd 	.word	0x0800eacd
 800ea78:	2b40      	cmp	r3, #64	@ 0x40
 800ea7a:	d02a      	beq.n	800ead2 <UART_SetConfig+0x8aa>
 800ea7c:	e02d      	b.n	800eada <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800ea7e:	f7fd f99d 	bl	800bdbc <HAL_RCCEx_GetD3PCLK1Freq>
 800ea82:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ea84:	e02f      	b.n	800eae6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ea86:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ea8a:	4618      	mov	r0, r3
 800ea8c:	f7fd f9ac 	bl	800bde8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ea90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ea94:	e027      	b.n	800eae6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ea96:	f107 0318 	add.w	r3, r7, #24
 800ea9a:	4618      	mov	r0, r3
 800ea9c:	f7fd faf8 	bl	800c090 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800eaa0:	69fb      	ldr	r3, [r7, #28]
 800eaa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800eaa4:	e01f      	b.n	800eae6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800eaa6:	4b21      	ldr	r3, [pc, #132]	@ (800eb2c <UART_SetConfig+0x904>)
 800eaa8:	681b      	ldr	r3, [r3, #0]
 800eaaa:	f003 0320 	and.w	r3, r3, #32
 800eaae:	2b00      	cmp	r3, #0
 800eab0:	d009      	beq.n	800eac6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800eab2:	4b1e      	ldr	r3, [pc, #120]	@ (800eb2c <UART_SetConfig+0x904>)
 800eab4:	681b      	ldr	r3, [r3, #0]
 800eab6:	08db      	lsrs	r3, r3, #3
 800eab8:	f003 0303 	and.w	r3, r3, #3
 800eabc:	4a1d      	ldr	r2, [pc, #116]	@ (800eb34 <UART_SetConfig+0x90c>)
 800eabe:	fa22 f303 	lsr.w	r3, r2, r3
 800eac2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800eac4:	e00f      	b.n	800eae6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800eac6:	4b1b      	ldr	r3, [pc, #108]	@ (800eb34 <UART_SetConfig+0x90c>)
 800eac8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800eaca:	e00c      	b.n	800eae6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800eacc:	4b1a      	ldr	r3, [pc, #104]	@ (800eb38 <UART_SetConfig+0x910>)
 800eace:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ead0:	e009      	b.n	800eae6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ead2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ead6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ead8:	e005      	b.n	800eae6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800eada:	2300      	movs	r3, #0
 800eadc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800eade:	2301      	movs	r3, #1
 800eae0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800eae4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800eae6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800eae8:	2b00      	cmp	r3, #0
 800eaea:	f000 81ee 	beq.w	800eeca <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800eaee:	697b      	ldr	r3, [r7, #20]
 800eaf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eaf2:	4a12      	ldr	r2, [pc, #72]	@ (800eb3c <UART_SetConfig+0x914>)
 800eaf4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800eaf8:	461a      	mov	r2, r3
 800eafa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800eafc:	fbb3 f3f2 	udiv	r3, r3, r2
 800eb00:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800eb02:	697b      	ldr	r3, [r7, #20]
 800eb04:	685a      	ldr	r2, [r3, #4]
 800eb06:	4613      	mov	r3, r2
 800eb08:	005b      	lsls	r3, r3, #1
 800eb0a:	4413      	add	r3, r2
 800eb0c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800eb0e:	429a      	cmp	r2, r3
 800eb10:	d305      	bcc.n	800eb1e <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800eb12:	697b      	ldr	r3, [r7, #20]
 800eb14:	685b      	ldr	r3, [r3, #4]
 800eb16:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800eb18:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800eb1a:	429a      	cmp	r2, r3
 800eb1c:	d910      	bls.n	800eb40 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800eb1e:	2301      	movs	r3, #1
 800eb20:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800eb24:	e1d1      	b.n	800eeca <UART_SetConfig+0xca2>
 800eb26:	bf00      	nop
 800eb28:	40011c00 	.word	0x40011c00
 800eb2c:	58024400 	.word	0x58024400
 800eb30:	58000c00 	.word	0x58000c00
 800eb34:	03d09000 	.word	0x03d09000
 800eb38:	003d0900 	.word	0x003d0900
 800eb3c:	08018498 	.word	0x08018498
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800eb40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800eb42:	2200      	movs	r2, #0
 800eb44:	60bb      	str	r3, [r7, #8]
 800eb46:	60fa      	str	r2, [r7, #12]
 800eb48:	697b      	ldr	r3, [r7, #20]
 800eb4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eb4c:	4ac0      	ldr	r2, [pc, #768]	@ (800ee50 <UART_SetConfig+0xc28>)
 800eb4e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800eb52:	b29b      	uxth	r3, r3
 800eb54:	2200      	movs	r2, #0
 800eb56:	603b      	str	r3, [r7, #0]
 800eb58:	607a      	str	r2, [r7, #4]
 800eb5a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800eb5e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800eb62:	f7f1 fdf9 	bl	8000758 <__aeabi_uldivmod>
 800eb66:	4602      	mov	r2, r0
 800eb68:	460b      	mov	r3, r1
 800eb6a:	4610      	mov	r0, r2
 800eb6c:	4619      	mov	r1, r3
 800eb6e:	f04f 0200 	mov.w	r2, #0
 800eb72:	f04f 0300 	mov.w	r3, #0
 800eb76:	020b      	lsls	r3, r1, #8
 800eb78:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800eb7c:	0202      	lsls	r2, r0, #8
 800eb7e:	6979      	ldr	r1, [r7, #20]
 800eb80:	6849      	ldr	r1, [r1, #4]
 800eb82:	0849      	lsrs	r1, r1, #1
 800eb84:	2000      	movs	r0, #0
 800eb86:	460c      	mov	r4, r1
 800eb88:	4605      	mov	r5, r0
 800eb8a:	eb12 0804 	adds.w	r8, r2, r4
 800eb8e:	eb43 0905 	adc.w	r9, r3, r5
 800eb92:	697b      	ldr	r3, [r7, #20]
 800eb94:	685b      	ldr	r3, [r3, #4]
 800eb96:	2200      	movs	r2, #0
 800eb98:	469a      	mov	sl, r3
 800eb9a:	4693      	mov	fp, r2
 800eb9c:	4652      	mov	r2, sl
 800eb9e:	465b      	mov	r3, fp
 800eba0:	4640      	mov	r0, r8
 800eba2:	4649      	mov	r1, r9
 800eba4:	f7f1 fdd8 	bl	8000758 <__aeabi_uldivmod>
 800eba8:	4602      	mov	r2, r0
 800ebaa:	460b      	mov	r3, r1
 800ebac:	4613      	mov	r3, r2
 800ebae:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ebb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ebb2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ebb6:	d308      	bcc.n	800ebca <UART_SetConfig+0x9a2>
 800ebb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ebba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ebbe:	d204      	bcs.n	800ebca <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800ebc0:	697b      	ldr	r3, [r7, #20]
 800ebc2:	681b      	ldr	r3, [r3, #0]
 800ebc4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ebc6:	60da      	str	r2, [r3, #12]
 800ebc8:	e17f      	b.n	800eeca <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800ebca:	2301      	movs	r3, #1
 800ebcc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800ebd0:	e17b      	b.n	800eeca <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ebd2:	697b      	ldr	r3, [r7, #20]
 800ebd4:	69db      	ldr	r3, [r3, #28]
 800ebd6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ebda:	f040 80bd 	bne.w	800ed58 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800ebde:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800ebe2:	2b20      	cmp	r3, #32
 800ebe4:	dc48      	bgt.n	800ec78 <UART_SetConfig+0xa50>
 800ebe6:	2b00      	cmp	r3, #0
 800ebe8:	db7b      	blt.n	800ece2 <UART_SetConfig+0xaba>
 800ebea:	2b20      	cmp	r3, #32
 800ebec:	d879      	bhi.n	800ece2 <UART_SetConfig+0xaba>
 800ebee:	a201      	add	r2, pc, #4	@ (adr r2, 800ebf4 <UART_SetConfig+0x9cc>)
 800ebf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ebf4:	0800ec7f 	.word	0x0800ec7f
 800ebf8:	0800ec87 	.word	0x0800ec87
 800ebfc:	0800ece3 	.word	0x0800ece3
 800ec00:	0800ece3 	.word	0x0800ece3
 800ec04:	0800ec8f 	.word	0x0800ec8f
 800ec08:	0800ece3 	.word	0x0800ece3
 800ec0c:	0800ece3 	.word	0x0800ece3
 800ec10:	0800ece3 	.word	0x0800ece3
 800ec14:	0800ec9f 	.word	0x0800ec9f
 800ec18:	0800ece3 	.word	0x0800ece3
 800ec1c:	0800ece3 	.word	0x0800ece3
 800ec20:	0800ece3 	.word	0x0800ece3
 800ec24:	0800ece3 	.word	0x0800ece3
 800ec28:	0800ece3 	.word	0x0800ece3
 800ec2c:	0800ece3 	.word	0x0800ece3
 800ec30:	0800ece3 	.word	0x0800ece3
 800ec34:	0800ecaf 	.word	0x0800ecaf
 800ec38:	0800ece3 	.word	0x0800ece3
 800ec3c:	0800ece3 	.word	0x0800ece3
 800ec40:	0800ece3 	.word	0x0800ece3
 800ec44:	0800ece3 	.word	0x0800ece3
 800ec48:	0800ece3 	.word	0x0800ece3
 800ec4c:	0800ece3 	.word	0x0800ece3
 800ec50:	0800ece3 	.word	0x0800ece3
 800ec54:	0800ece3 	.word	0x0800ece3
 800ec58:	0800ece3 	.word	0x0800ece3
 800ec5c:	0800ece3 	.word	0x0800ece3
 800ec60:	0800ece3 	.word	0x0800ece3
 800ec64:	0800ece3 	.word	0x0800ece3
 800ec68:	0800ece3 	.word	0x0800ece3
 800ec6c:	0800ece3 	.word	0x0800ece3
 800ec70:	0800ece3 	.word	0x0800ece3
 800ec74:	0800ecd5 	.word	0x0800ecd5
 800ec78:	2b40      	cmp	r3, #64	@ 0x40
 800ec7a:	d02e      	beq.n	800ecda <UART_SetConfig+0xab2>
 800ec7c:	e031      	b.n	800ece2 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ec7e:	f7fb f9ff 	bl	800a080 <HAL_RCC_GetPCLK1Freq>
 800ec82:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ec84:	e033      	b.n	800ecee <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ec86:	f7fb fa11 	bl	800a0ac <HAL_RCC_GetPCLK2Freq>
 800ec8a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ec8c:	e02f      	b.n	800ecee <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ec8e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ec92:	4618      	mov	r0, r3
 800ec94:	f7fd f8a8 	bl	800bde8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ec98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ec9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ec9c:	e027      	b.n	800ecee <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ec9e:	f107 0318 	add.w	r3, r7, #24
 800eca2:	4618      	mov	r0, r3
 800eca4:	f7fd f9f4 	bl	800c090 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800eca8:	69fb      	ldr	r3, [r7, #28]
 800ecaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ecac:	e01f      	b.n	800ecee <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ecae:	4b69      	ldr	r3, [pc, #420]	@ (800ee54 <UART_SetConfig+0xc2c>)
 800ecb0:	681b      	ldr	r3, [r3, #0]
 800ecb2:	f003 0320 	and.w	r3, r3, #32
 800ecb6:	2b00      	cmp	r3, #0
 800ecb8:	d009      	beq.n	800ecce <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ecba:	4b66      	ldr	r3, [pc, #408]	@ (800ee54 <UART_SetConfig+0xc2c>)
 800ecbc:	681b      	ldr	r3, [r3, #0]
 800ecbe:	08db      	lsrs	r3, r3, #3
 800ecc0:	f003 0303 	and.w	r3, r3, #3
 800ecc4:	4a64      	ldr	r2, [pc, #400]	@ (800ee58 <UART_SetConfig+0xc30>)
 800ecc6:	fa22 f303 	lsr.w	r3, r2, r3
 800ecca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800eccc:	e00f      	b.n	800ecee <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800ecce:	4b62      	ldr	r3, [pc, #392]	@ (800ee58 <UART_SetConfig+0xc30>)
 800ecd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ecd2:	e00c      	b.n	800ecee <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ecd4:	4b61      	ldr	r3, [pc, #388]	@ (800ee5c <UART_SetConfig+0xc34>)
 800ecd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ecd8:	e009      	b.n	800ecee <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ecda:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ecde:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ece0:	e005      	b.n	800ecee <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800ece2:	2300      	movs	r3, #0
 800ece4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800ece6:	2301      	movs	r3, #1
 800ece8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800ecec:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ecee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ecf0:	2b00      	cmp	r3, #0
 800ecf2:	f000 80ea 	beq.w	800eeca <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ecf6:	697b      	ldr	r3, [r7, #20]
 800ecf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ecfa:	4a55      	ldr	r2, [pc, #340]	@ (800ee50 <UART_SetConfig+0xc28>)
 800ecfc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ed00:	461a      	mov	r2, r3
 800ed02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ed04:	fbb3 f3f2 	udiv	r3, r3, r2
 800ed08:	005a      	lsls	r2, r3, #1
 800ed0a:	697b      	ldr	r3, [r7, #20]
 800ed0c:	685b      	ldr	r3, [r3, #4]
 800ed0e:	085b      	lsrs	r3, r3, #1
 800ed10:	441a      	add	r2, r3
 800ed12:	697b      	ldr	r3, [r7, #20]
 800ed14:	685b      	ldr	r3, [r3, #4]
 800ed16:	fbb2 f3f3 	udiv	r3, r2, r3
 800ed1a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ed1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ed1e:	2b0f      	cmp	r3, #15
 800ed20:	d916      	bls.n	800ed50 <UART_SetConfig+0xb28>
 800ed22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ed24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ed28:	d212      	bcs.n	800ed50 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ed2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ed2c:	b29b      	uxth	r3, r3
 800ed2e:	f023 030f 	bic.w	r3, r3, #15
 800ed32:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ed34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ed36:	085b      	lsrs	r3, r3, #1
 800ed38:	b29b      	uxth	r3, r3
 800ed3a:	f003 0307 	and.w	r3, r3, #7
 800ed3e:	b29a      	uxth	r2, r3
 800ed40:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800ed42:	4313      	orrs	r3, r2
 800ed44:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800ed46:	697b      	ldr	r3, [r7, #20]
 800ed48:	681b      	ldr	r3, [r3, #0]
 800ed4a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800ed4c:	60da      	str	r2, [r3, #12]
 800ed4e:	e0bc      	b.n	800eeca <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800ed50:	2301      	movs	r3, #1
 800ed52:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800ed56:	e0b8      	b.n	800eeca <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800ed58:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800ed5c:	2b20      	cmp	r3, #32
 800ed5e:	dc4b      	bgt.n	800edf8 <UART_SetConfig+0xbd0>
 800ed60:	2b00      	cmp	r3, #0
 800ed62:	f2c0 8087 	blt.w	800ee74 <UART_SetConfig+0xc4c>
 800ed66:	2b20      	cmp	r3, #32
 800ed68:	f200 8084 	bhi.w	800ee74 <UART_SetConfig+0xc4c>
 800ed6c:	a201      	add	r2, pc, #4	@ (adr r2, 800ed74 <UART_SetConfig+0xb4c>)
 800ed6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed72:	bf00      	nop
 800ed74:	0800edff 	.word	0x0800edff
 800ed78:	0800ee07 	.word	0x0800ee07
 800ed7c:	0800ee75 	.word	0x0800ee75
 800ed80:	0800ee75 	.word	0x0800ee75
 800ed84:	0800ee0f 	.word	0x0800ee0f
 800ed88:	0800ee75 	.word	0x0800ee75
 800ed8c:	0800ee75 	.word	0x0800ee75
 800ed90:	0800ee75 	.word	0x0800ee75
 800ed94:	0800ee1f 	.word	0x0800ee1f
 800ed98:	0800ee75 	.word	0x0800ee75
 800ed9c:	0800ee75 	.word	0x0800ee75
 800eda0:	0800ee75 	.word	0x0800ee75
 800eda4:	0800ee75 	.word	0x0800ee75
 800eda8:	0800ee75 	.word	0x0800ee75
 800edac:	0800ee75 	.word	0x0800ee75
 800edb0:	0800ee75 	.word	0x0800ee75
 800edb4:	0800ee2f 	.word	0x0800ee2f
 800edb8:	0800ee75 	.word	0x0800ee75
 800edbc:	0800ee75 	.word	0x0800ee75
 800edc0:	0800ee75 	.word	0x0800ee75
 800edc4:	0800ee75 	.word	0x0800ee75
 800edc8:	0800ee75 	.word	0x0800ee75
 800edcc:	0800ee75 	.word	0x0800ee75
 800edd0:	0800ee75 	.word	0x0800ee75
 800edd4:	0800ee75 	.word	0x0800ee75
 800edd8:	0800ee75 	.word	0x0800ee75
 800eddc:	0800ee75 	.word	0x0800ee75
 800ede0:	0800ee75 	.word	0x0800ee75
 800ede4:	0800ee75 	.word	0x0800ee75
 800ede8:	0800ee75 	.word	0x0800ee75
 800edec:	0800ee75 	.word	0x0800ee75
 800edf0:	0800ee75 	.word	0x0800ee75
 800edf4:	0800ee67 	.word	0x0800ee67
 800edf8:	2b40      	cmp	r3, #64	@ 0x40
 800edfa:	d037      	beq.n	800ee6c <UART_SetConfig+0xc44>
 800edfc:	e03a      	b.n	800ee74 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800edfe:	f7fb f93f 	bl	800a080 <HAL_RCC_GetPCLK1Freq>
 800ee02:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ee04:	e03c      	b.n	800ee80 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ee06:	f7fb f951 	bl	800a0ac <HAL_RCC_GetPCLK2Freq>
 800ee0a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ee0c:	e038      	b.n	800ee80 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ee0e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ee12:	4618      	mov	r0, r3
 800ee14:	f7fc ffe8 	bl	800bde8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ee18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ee1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ee1c:	e030      	b.n	800ee80 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ee1e:	f107 0318 	add.w	r3, r7, #24
 800ee22:	4618      	mov	r0, r3
 800ee24:	f7fd f934 	bl	800c090 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ee28:	69fb      	ldr	r3, [r7, #28]
 800ee2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ee2c:	e028      	b.n	800ee80 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ee2e:	4b09      	ldr	r3, [pc, #36]	@ (800ee54 <UART_SetConfig+0xc2c>)
 800ee30:	681b      	ldr	r3, [r3, #0]
 800ee32:	f003 0320 	and.w	r3, r3, #32
 800ee36:	2b00      	cmp	r3, #0
 800ee38:	d012      	beq.n	800ee60 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ee3a:	4b06      	ldr	r3, [pc, #24]	@ (800ee54 <UART_SetConfig+0xc2c>)
 800ee3c:	681b      	ldr	r3, [r3, #0]
 800ee3e:	08db      	lsrs	r3, r3, #3
 800ee40:	f003 0303 	and.w	r3, r3, #3
 800ee44:	4a04      	ldr	r2, [pc, #16]	@ (800ee58 <UART_SetConfig+0xc30>)
 800ee46:	fa22 f303 	lsr.w	r3, r2, r3
 800ee4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ee4c:	e018      	b.n	800ee80 <UART_SetConfig+0xc58>
 800ee4e:	bf00      	nop
 800ee50:	08018498 	.word	0x08018498
 800ee54:	58024400 	.word	0x58024400
 800ee58:	03d09000 	.word	0x03d09000
 800ee5c:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800ee60:	4b24      	ldr	r3, [pc, #144]	@ (800eef4 <UART_SetConfig+0xccc>)
 800ee62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ee64:	e00c      	b.n	800ee80 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ee66:	4b24      	ldr	r3, [pc, #144]	@ (800eef8 <UART_SetConfig+0xcd0>)
 800ee68:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ee6a:	e009      	b.n	800ee80 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ee6c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ee70:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ee72:	e005      	b.n	800ee80 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800ee74:	2300      	movs	r3, #0
 800ee76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800ee78:	2301      	movs	r3, #1
 800ee7a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800ee7e:	bf00      	nop
    }

    if (pclk != 0U)
 800ee80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ee82:	2b00      	cmp	r3, #0
 800ee84:	d021      	beq.n	800eeca <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ee86:	697b      	ldr	r3, [r7, #20]
 800ee88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ee8a:	4a1c      	ldr	r2, [pc, #112]	@ (800eefc <UART_SetConfig+0xcd4>)
 800ee8c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ee90:	461a      	mov	r2, r3
 800ee92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ee94:	fbb3 f2f2 	udiv	r2, r3, r2
 800ee98:	697b      	ldr	r3, [r7, #20]
 800ee9a:	685b      	ldr	r3, [r3, #4]
 800ee9c:	085b      	lsrs	r3, r3, #1
 800ee9e:	441a      	add	r2, r3
 800eea0:	697b      	ldr	r3, [r7, #20]
 800eea2:	685b      	ldr	r3, [r3, #4]
 800eea4:	fbb2 f3f3 	udiv	r3, r2, r3
 800eea8:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800eeaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eeac:	2b0f      	cmp	r3, #15
 800eeae:	d909      	bls.n	800eec4 <UART_SetConfig+0xc9c>
 800eeb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eeb2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800eeb6:	d205      	bcs.n	800eec4 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800eeb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eeba:	b29a      	uxth	r2, r3
 800eebc:	697b      	ldr	r3, [r7, #20]
 800eebe:	681b      	ldr	r3, [r3, #0]
 800eec0:	60da      	str	r2, [r3, #12]
 800eec2:	e002      	b.n	800eeca <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800eec4:	2301      	movs	r3, #1
 800eec6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800eeca:	697b      	ldr	r3, [r7, #20]
 800eecc:	2201      	movs	r2, #1
 800eece:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800eed2:	697b      	ldr	r3, [r7, #20]
 800eed4:	2201      	movs	r2, #1
 800eed6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800eeda:	697b      	ldr	r3, [r7, #20]
 800eedc:	2200      	movs	r2, #0
 800eede:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800eee0:	697b      	ldr	r3, [r7, #20]
 800eee2:	2200      	movs	r2, #0
 800eee4:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800eee6:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800eeea:	4618      	mov	r0, r3
 800eeec:	3748      	adds	r7, #72	@ 0x48
 800eeee:	46bd      	mov	sp, r7
 800eef0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800eef4:	03d09000 	.word	0x03d09000
 800eef8:	003d0900 	.word	0x003d0900
 800eefc:	08018498 	.word	0x08018498

0800ef00 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ef00:	b480      	push	{r7}
 800ef02:	b083      	sub	sp, #12
 800ef04:	af00      	add	r7, sp, #0
 800ef06:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ef08:	687b      	ldr	r3, [r7, #4]
 800ef0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ef0c:	f003 0308 	and.w	r3, r3, #8
 800ef10:	2b00      	cmp	r3, #0
 800ef12:	d00a      	beq.n	800ef2a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	681b      	ldr	r3, [r3, #0]
 800ef18:	685b      	ldr	r3, [r3, #4]
 800ef1a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	681b      	ldr	r3, [r3, #0]
 800ef26:	430a      	orrs	r2, r1
 800ef28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ef2e:	f003 0301 	and.w	r3, r3, #1
 800ef32:	2b00      	cmp	r3, #0
 800ef34:	d00a      	beq.n	800ef4c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	681b      	ldr	r3, [r3, #0]
 800ef3a:	685b      	ldr	r3, [r3, #4]
 800ef3c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	681b      	ldr	r3, [r3, #0]
 800ef48:	430a      	orrs	r2, r1
 800ef4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ef50:	f003 0302 	and.w	r3, r3, #2
 800ef54:	2b00      	cmp	r3, #0
 800ef56:	d00a      	beq.n	800ef6e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	681b      	ldr	r3, [r3, #0]
 800ef5c:	685b      	ldr	r3, [r3, #4]
 800ef5e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	681b      	ldr	r3, [r3, #0]
 800ef6a:	430a      	orrs	r2, r1
 800ef6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ef72:	f003 0304 	and.w	r3, r3, #4
 800ef76:	2b00      	cmp	r3, #0
 800ef78:	d00a      	beq.n	800ef90 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	681b      	ldr	r3, [r3, #0]
 800ef7e:	685b      	ldr	r3, [r3, #4]
 800ef80:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	681b      	ldr	r3, [r3, #0]
 800ef8c:	430a      	orrs	r2, r1
 800ef8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ef94:	f003 0310 	and.w	r3, r3, #16
 800ef98:	2b00      	cmp	r3, #0
 800ef9a:	d00a      	beq.n	800efb2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	681b      	ldr	r3, [r3, #0]
 800efa0:	689b      	ldr	r3, [r3, #8]
 800efa2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800efa6:	687b      	ldr	r3, [r7, #4]
 800efa8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	681b      	ldr	r3, [r3, #0]
 800efae:	430a      	orrs	r2, r1
 800efb0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800efb6:	f003 0320 	and.w	r3, r3, #32
 800efba:	2b00      	cmp	r3, #0
 800efbc:	d00a      	beq.n	800efd4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	681b      	ldr	r3, [r3, #0]
 800efc2:	689b      	ldr	r3, [r3, #8]
 800efc4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	681b      	ldr	r3, [r3, #0]
 800efd0:	430a      	orrs	r2, r1
 800efd2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800efd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800efdc:	2b00      	cmp	r3, #0
 800efde:	d01a      	beq.n	800f016 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	681b      	ldr	r3, [r3, #0]
 800efe4:	685b      	ldr	r3, [r3, #4]
 800efe6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	681b      	ldr	r3, [r3, #0]
 800eff2:	430a      	orrs	r2, r1
 800eff4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800eff6:	687b      	ldr	r3, [r7, #4]
 800eff8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800effa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800effe:	d10a      	bne.n	800f016 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	681b      	ldr	r3, [r3, #0]
 800f004:	685b      	ldr	r3, [r3, #4]
 800f006:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	681b      	ldr	r3, [r3, #0]
 800f012:	430a      	orrs	r2, r1
 800f014:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f01a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f01e:	2b00      	cmp	r3, #0
 800f020:	d00a      	beq.n	800f038 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800f022:	687b      	ldr	r3, [r7, #4]
 800f024:	681b      	ldr	r3, [r3, #0]
 800f026:	685b      	ldr	r3, [r3, #4]
 800f028:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	681b      	ldr	r3, [r3, #0]
 800f034:	430a      	orrs	r2, r1
 800f036:	605a      	str	r2, [r3, #4]
  }
}
 800f038:	bf00      	nop
 800f03a:	370c      	adds	r7, #12
 800f03c:	46bd      	mov	sp, r7
 800f03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f042:	4770      	bx	lr

0800f044 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800f044:	b580      	push	{r7, lr}
 800f046:	b098      	sub	sp, #96	@ 0x60
 800f048:	af02      	add	r7, sp, #8
 800f04a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	2200      	movs	r2, #0
 800f050:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800f054:	f7f4 ff96 	bl	8003f84 <HAL_GetTick>
 800f058:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800f05a:	687b      	ldr	r3, [r7, #4]
 800f05c:	681b      	ldr	r3, [r3, #0]
 800f05e:	681b      	ldr	r3, [r3, #0]
 800f060:	f003 0308 	and.w	r3, r3, #8
 800f064:	2b08      	cmp	r3, #8
 800f066:	d12f      	bne.n	800f0c8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f068:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800f06c:	9300      	str	r3, [sp, #0]
 800f06e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f070:	2200      	movs	r2, #0
 800f072:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800f076:	6878      	ldr	r0, [r7, #4]
 800f078:	f000 f88e 	bl	800f198 <UART_WaitOnFlagUntilTimeout>
 800f07c:	4603      	mov	r3, r0
 800f07e:	2b00      	cmp	r3, #0
 800f080:	d022      	beq.n	800f0c8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	681b      	ldr	r3, [r3, #0]
 800f086:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f088:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f08a:	e853 3f00 	ldrex	r3, [r3]
 800f08e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800f090:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f092:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f096:	653b      	str	r3, [r7, #80]	@ 0x50
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	681b      	ldr	r3, [r3, #0]
 800f09c:	461a      	mov	r2, r3
 800f09e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f0a0:	647b      	str	r3, [r7, #68]	@ 0x44
 800f0a2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f0a4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800f0a6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f0a8:	e841 2300 	strex	r3, r2, [r1]
 800f0ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800f0ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f0b0:	2b00      	cmp	r3, #0
 800f0b2:	d1e6      	bne.n	800f082 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	2220      	movs	r2, #32
 800f0b8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	2200      	movs	r2, #0
 800f0c0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f0c4:	2303      	movs	r3, #3
 800f0c6:	e063      	b.n	800f190 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	681b      	ldr	r3, [r3, #0]
 800f0cc:	681b      	ldr	r3, [r3, #0]
 800f0ce:	f003 0304 	and.w	r3, r3, #4
 800f0d2:	2b04      	cmp	r3, #4
 800f0d4:	d149      	bne.n	800f16a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f0d6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800f0da:	9300      	str	r3, [sp, #0]
 800f0dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f0de:	2200      	movs	r2, #0
 800f0e0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800f0e4:	6878      	ldr	r0, [r7, #4]
 800f0e6:	f000 f857 	bl	800f198 <UART_WaitOnFlagUntilTimeout>
 800f0ea:	4603      	mov	r3, r0
 800f0ec:	2b00      	cmp	r3, #0
 800f0ee:	d03c      	beq.n	800f16a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	681b      	ldr	r3, [r3, #0]
 800f0f4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f0f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f0f8:	e853 3f00 	ldrex	r3, [r3]
 800f0fc:	623b      	str	r3, [r7, #32]
   return(result);
 800f0fe:	6a3b      	ldr	r3, [r7, #32]
 800f100:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800f104:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	681b      	ldr	r3, [r3, #0]
 800f10a:	461a      	mov	r2, r3
 800f10c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f10e:	633b      	str	r3, [r7, #48]	@ 0x30
 800f110:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f112:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800f114:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f116:	e841 2300 	strex	r3, r2, [r1]
 800f11a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800f11c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f11e:	2b00      	cmp	r3, #0
 800f120:	d1e6      	bne.n	800f0f0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	681b      	ldr	r3, [r3, #0]
 800f126:	3308      	adds	r3, #8
 800f128:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f12a:	693b      	ldr	r3, [r7, #16]
 800f12c:	e853 3f00 	ldrex	r3, [r3]
 800f130:	60fb      	str	r3, [r7, #12]
   return(result);
 800f132:	68fb      	ldr	r3, [r7, #12]
 800f134:	f023 0301 	bic.w	r3, r3, #1
 800f138:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	681b      	ldr	r3, [r3, #0]
 800f13e:	3308      	adds	r3, #8
 800f140:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f142:	61fa      	str	r2, [r7, #28]
 800f144:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f146:	69b9      	ldr	r1, [r7, #24]
 800f148:	69fa      	ldr	r2, [r7, #28]
 800f14a:	e841 2300 	strex	r3, r2, [r1]
 800f14e:	617b      	str	r3, [r7, #20]
   return(result);
 800f150:	697b      	ldr	r3, [r7, #20]
 800f152:	2b00      	cmp	r3, #0
 800f154:	d1e5      	bne.n	800f122 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800f156:	687b      	ldr	r3, [r7, #4]
 800f158:	2220      	movs	r2, #32
 800f15a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	2200      	movs	r2, #0
 800f162:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f166:	2303      	movs	r3, #3
 800f168:	e012      	b.n	800f190 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	2220      	movs	r2, #32
 800f16e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800f172:	687b      	ldr	r3, [r7, #4]
 800f174:	2220      	movs	r2, #32
 800f176:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	2200      	movs	r2, #0
 800f17e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	2200      	movs	r2, #0
 800f184:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	2200      	movs	r2, #0
 800f18a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800f18e:	2300      	movs	r3, #0
}
 800f190:	4618      	mov	r0, r3
 800f192:	3758      	adds	r7, #88	@ 0x58
 800f194:	46bd      	mov	sp, r7
 800f196:	bd80      	pop	{r7, pc}

0800f198 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800f198:	b580      	push	{r7, lr}
 800f19a:	b084      	sub	sp, #16
 800f19c:	af00      	add	r7, sp, #0
 800f19e:	60f8      	str	r0, [r7, #12]
 800f1a0:	60b9      	str	r1, [r7, #8]
 800f1a2:	603b      	str	r3, [r7, #0]
 800f1a4:	4613      	mov	r3, r2
 800f1a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f1a8:	e04f      	b.n	800f24a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f1aa:	69bb      	ldr	r3, [r7, #24]
 800f1ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f1b0:	d04b      	beq.n	800f24a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f1b2:	f7f4 fee7 	bl	8003f84 <HAL_GetTick>
 800f1b6:	4602      	mov	r2, r0
 800f1b8:	683b      	ldr	r3, [r7, #0]
 800f1ba:	1ad3      	subs	r3, r2, r3
 800f1bc:	69ba      	ldr	r2, [r7, #24]
 800f1be:	429a      	cmp	r2, r3
 800f1c0:	d302      	bcc.n	800f1c8 <UART_WaitOnFlagUntilTimeout+0x30>
 800f1c2:	69bb      	ldr	r3, [r7, #24]
 800f1c4:	2b00      	cmp	r3, #0
 800f1c6:	d101      	bne.n	800f1cc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800f1c8:	2303      	movs	r3, #3
 800f1ca:	e04e      	b.n	800f26a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800f1cc:	68fb      	ldr	r3, [r7, #12]
 800f1ce:	681b      	ldr	r3, [r3, #0]
 800f1d0:	681b      	ldr	r3, [r3, #0]
 800f1d2:	f003 0304 	and.w	r3, r3, #4
 800f1d6:	2b00      	cmp	r3, #0
 800f1d8:	d037      	beq.n	800f24a <UART_WaitOnFlagUntilTimeout+0xb2>
 800f1da:	68bb      	ldr	r3, [r7, #8]
 800f1dc:	2b80      	cmp	r3, #128	@ 0x80
 800f1de:	d034      	beq.n	800f24a <UART_WaitOnFlagUntilTimeout+0xb2>
 800f1e0:	68bb      	ldr	r3, [r7, #8]
 800f1e2:	2b40      	cmp	r3, #64	@ 0x40
 800f1e4:	d031      	beq.n	800f24a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800f1e6:	68fb      	ldr	r3, [r7, #12]
 800f1e8:	681b      	ldr	r3, [r3, #0]
 800f1ea:	69db      	ldr	r3, [r3, #28]
 800f1ec:	f003 0308 	and.w	r3, r3, #8
 800f1f0:	2b08      	cmp	r3, #8
 800f1f2:	d110      	bne.n	800f216 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800f1f4:	68fb      	ldr	r3, [r7, #12]
 800f1f6:	681b      	ldr	r3, [r3, #0]
 800f1f8:	2208      	movs	r2, #8
 800f1fa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800f1fc:	68f8      	ldr	r0, [r7, #12]
 800f1fe:	f000 f839 	bl	800f274 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800f202:	68fb      	ldr	r3, [r7, #12]
 800f204:	2208      	movs	r2, #8
 800f206:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f20a:	68fb      	ldr	r3, [r7, #12]
 800f20c:	2200      	movs	r2, #0
 800f20e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800f212:	2301      	movs	r3, #1
 800f214:	e029      	b.n	800f26a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800f216:	68fb      	ldr	r3, [r7, #12]
 800f218:	681b      	ldr	r3, [r3, #0]
 800f21a:	69db      	ldr	r3, [r3, #28]
 800f21c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800f220:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800f224:	d111      	bne.n	800f24a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f226:	68fb      	ldr	r3, [r7, #12]
 800f228:	681b      	ldr	r3, [r3, #0]
 800f22a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800f22e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800f230:	68f8      	ldr	r0, [r7, #12]
 800f232:	f000 f81f 	bl	800f274 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800f236:	68fb      	ldr	r3, [r7, #12]
 800f238:	2220      	movs	r2, #32
 800f23a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f23e:	68fb      	ldr	r3, [r7, #12]
 800f240:	2200      	movs	r2, #0
 800f242:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800f246:	2303      	movs	r3, #3
 800f248:	e00f      	b.n	800f26a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f24a:	68fb      	ldr	r3, [r7, #12]
 800f24c:	681b      	ldr	r3, [r3, #0]
 800f24e:	69da      	ldr	r2, [r3, #28]
 800f250:	68bb      	ldr	r3, [r7, #8]
 800f252:	4013      	ands	r3, r2
 800f254:	68ba      	ldr	r2, [r7, #8]
 800f256:	429a      	cmp	r2, r3
 800f258:	bf0c      	ite	eq
 800f25a:	2301      	moveq	r3, #1
 800f25c:	2300      	movne	r3, #0
 800f25e:	b2db      	uxtb	r3, r3
 800f260:	461a      	mov	r2, r3
 800f262:	79fb      	ldrb	r3, [r7, #7]
 800f264:	429a      	cmp	r2, r3
 800f266:	d0a0      	beq.n	800f1aa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800f268:	2300      	movs	r3, #0
}
 800f26a:	4618      	mov	r0, r3
 800f26c:	3710      	adds	r7, #16
 800f26e:	46bd      	mov	sp, r7
 800f270:	bd80      	pop	{r7, pc}
	...

0800f274 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800f274:	b480      	push	{r7}
 800f276:	b095      	sub	sp, #84	@ 0x54
 800f278:	af00      	add	r7, sp, #0
 800f27a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	681b      	ldr	r3, [r3, #0]
 800f280:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f282:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f284:	e853 3f00 	ldrex	r3, [r3]
 800f288:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800f28a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f28c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800f290:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800f292:	687b      	ldr	r3, [r7, #4]
 800f294:	681b      	ldr	r3, [r3, #0]
 800f296:	461a      	mov	r2, r3
 800f298:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f29a:	643b      	str	r3, [r7, #64]	@ 0x40
 800f29c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f29e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800f2a0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800f2a2:	e841 2300 	strex	r3, r2, [r1]
 800f2a6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800f2a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f2aa:	2b00      	cmp	r3, #0
 800f2ac:	d1e6      	bne.n	800f27c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	681b      	ldr	r3, [r3, #0]
 800f2b2:	3308      	adds	r3, #8
 800f2b4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f2b6:	6a3b      	ldr	r3, [r7, #32]
 800f2b8:	e853 3f00 	ldrex	r3, [r3]
 800f2bc:	61fb      	str	r3, [r7, #28]
   return(result);
 800f2be:	69fa      	ldr	r2, [r7, #28]
 800f2c0:	4b1e      	ldr	r3, [pc, #120]	@ (800f33c <UART_EndRxTransfer+0xc8>)
 800f2c2:	4013      	ands	r3, r2
 800f2c4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	681b      	ldr	r3, [r3, #0]
 800f2ca:	3308      	adds	r3, #8
 800f2cc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f2ce:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800f2d0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f2d2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800f2d4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f2d6:	e841 2300 	strex	r3, r2, [r1]
 800f2da:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800f2dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f2de:	2b00      	cmp	r3, #0
 800f2e0:	d1e5      	bne.n	800f2ae <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f2e6:	2b01      	cmp	r3, #1
 800f2e8:	d118      	bne.n	800f31c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	681b      	ldr	r3, [r3, #0]
 800f2ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f2f0:	68fb      	ldr	r3, [r7, #12]
 800f2f2:	e853 3f00 	ldrex	r3, [r3]
 800f2f6:	60bb      	str	r3, [r7, #8]
   return(result);
 800f2f8:	68bb      	ldr	r3, [r7, #8]
 800f2fa:	f023 0310 	bic.w	r3, r3, #16
 800f2fe:	647b      	str	r3, [r7, #68]	@ 0x44
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	681b      	ldr	r3, [r3, #0]
 800f304:	461a      	mov	r2, r3
 800f306:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f308:	61bb      	str	r3, [r7, #24]
 800f30a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f30c:	6979      	ldr	r1, [r7, #20]
 800f30e:	69ba      	ldr	r2, [r7, #24]
 800f310:	e841 2300 	strex	r3, r2, [r1]
 800f314:	613b      	str	r3, [r7, #16]
   return(result);
 800f316:	693b      	ldr	r3, [r7, #16]
 800f318:	2b00      	cmp	r3, #0
 800f31a:	d1e6      	bne.n	800f2ea <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	2220      	movs	r2, #32
 800f320:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	2200      	movs	r2, #0
 800f328:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	2200      	movs	r2, #0
 800f32e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800f330:	bf00      	nop
 800f332:	3754      	adds	r7, #84	@ 0x54
 800f334:	46bd      	mov	sp, r7
 800f336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f33a:	4770      	bx	lr
 800f33c:	effffffe 	.word	0xeffffffe

0800f340 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800f340:	b480      	push	{r7}
 800f342:	b085      	sub	sp, #20
 800f344:	af00      	add	r7, sp, #0
 800f346:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800f34e:	2b01      	cmp	r3, #1
 800f350:	d101      	bne.n	800f356 <HAL_UARTEx_DisableFifoMode+0x16>
 800f352:	2302      	movs	r3, #2
 800f354:	e027      	b.n	800f3a6 <HAL_UARTEx_DisableFifoMode+0x66>
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	2201      	movs	r2, #1
 800f35a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	2224      	movs	r2, #36	@ 0x24
 800f362:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	681b      	ldr	r3, [r3, #0]
 800f36a:	681b      	ldr	r3, [r3, #0]
 800f36c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	681b      	ldr	r3, [r3, #0]
 800f372:	681a      	ldr	r2, [r3, #0]
 800f374:	687b      	ldr	r3, [r7, #4]
 800f376:	681b      	ldr	r3, [r3, #0]
 800f378:	f022 0201 	bic.w	r2, r2, #1
 800f37c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800f37e:	68fb      	ldr	r3, [r7, #12]
 800f380:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800f384:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	2200      	movs	r2, #0
 800f38a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	681b      	ldr	r3, [r3, #0]
 800f390:	68fa      	ldr	r2, [r7, #12]
 800f392:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	2220      	movs	r2, #32
 800f398:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	2200      	movs	r2, #0
 800f3a0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800f3a4:	2300      	movs	r3, #0
}
 800f3a6:	4618      	mov	r0, r3
 800f3a8:	3714      	adds	r7, #20
 800f3aa:	46bd      	mov	sp, r7
 800f3ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3b0:	4770      	bx	lr

0800f3b2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f3b2:	b580      	push	{r7, lr}
 800f3b4:	b084      	sub	sp, #16
 800f3b6:	af00      	add	r7, sp, #0
 800f3b8:	6078      	str	r0, [r7, #4]
 800f3ba:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800f3c2:	2b01      	cmp	r3, #1
 800f3c4:	d101      	bne.n	800f3ca <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800f3c6:	2302      	movs	r3, #2
 800f3c8:	e02d      	b.n	800f426 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800f3ca:	687b      	ldr	r3, [r7, #4]
 800f3cc:	2201      	movs	r2, #1
 800f3ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f3d2:	687b      	ldr	r3, [r7, #4]
 800f3d4:	2224      	movs	r2, #36	@ 0x24
 800f3d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	681b      	ldr	r3, [r3, #0]
 800f3de:	681b      	ldr	r3, [r3, #0]
 800f3e0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f3e2:	687b      	ldr	r3, [r7, #4]
 800f3e4:	681b      	ldr	r3, [r3, #0]
 800f3e6:	681a      	ldr	r2, [r3, #0]
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	681b      	ldr	r3, [r3, #0]
 800f3ec:	f022 0201 	bic.w	r2, r2, #1
 800f3f0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800f3f2:	687b      	ldr	r3, [r7, #4]
 800f3f4:	681b      	ldr	r3, [r3, #0]
 800f3f6:	689b      	ldr	r3, [r3, #8]
 800f3f8:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800f3fc:	687b      	ldr	r3, [r7, #4]
 800f3fe:	681b      	ldr	r3, [r3, #0]
 800f400:	683a      	ldr	r2, [r7, #0]
 800f402:	430a      	orrs	r2, r1
 800f404:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f406:	6878      	ldr	r0, [r7, #4]
 800f408:	f000 f850 	bl	800f4ac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f40c:	687b      	ldr	r3, [r7, #4]
 800f40e:	681b      	ldr	r3, [r3, #0]
 800f410:	68fa      	ldr	r2, [r7, #12]
 800f412:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	2220      	movs	r2, #32
 800f418:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	2200      	movs	r2, #0
 800f420:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800f424:	2300      	movs	r3, #0
}
 800f426:	4618      	mov	r0, r3
 800f428:	3710      	adds	r7, #16
 800f42a:	46bd      	mov	sp, r7
 800f42c:	bd80      	pop	{r7, pc}

0800f42e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f42e:	b580      	push	{r7, lr}
 800f430:	b084      	sub	sp, #16
 800f432:	af00      	add	r7, sp, #0
 800f434:	6078      	str	r0, [r7, #4]
 800f436:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f438:	687b      	ldr	r3, [r7, #4]
 800f43a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800f43e:	2b01      	cmp	r3, #1
 800f440:	d101      	bne.n	800f446 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800f442:	2302      	movs	r3, #2
 800f444:	e02d      	b.n	800f4a2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	2201      	movs	r2, #1
 800f44a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	2224      	movs	r2, #36	@ 0x24
 800f452:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	681b      	ldr	r3, [r3, #0]
 800f45a:	681b      	ldr	r3, [r3, #0]
 800f45c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f45e:	687b      	ldr	r3, [r7, #4]
 800f460:	681b      	ldr	r3, [r3, #0]
 800f462:	681a      	ldr	r2, [r3, #0]
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	681b      	ldr	r3, [r3, #0]
 800f468:	f022 0201 	bic.w	r2, r2, #1
 800f46c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800f46e:	687b      	ldr	r3, [r7, #4]
 800f470:	681b      	ldr	r3, [r3, #0]
 800f472:	689b      	ldr	r3, [r3, #8]
 800f474:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	681b      	ldr	r3, [r3, #0]
 800f47c:	683a      	ldr	r2, [r7, #0]
 800f47e:	430a      	orrs	r2, r1
 800f480:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f482:	6878      	ldr	r0, [r7, #4]
 800f484:	f000 f812 	bl	800f4ac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	681b      	ldr	r3, [r3, #0]
 800f48c:	68fa      	ldr	r2, [r7, #12]
 800f48e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f490:	687b      	ldr	r3, [r7, #4]
 800f492:	2220      	movs	r2, #32
 800f494:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f498:	687b      	ldr	r3, [r7, #4]
 800f49a:	2200      	movs	r2, #0
 800f49c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800f4a0:	2300      	movs	r3, #0
}
 800f4a2:	4618      	mov	r0, r3
 800f4a4:	3710      	adds	r7, #16
 800f4a6:	46bd      	mov	sp, r7
 800f4a8:	bd80      	pop	{r7, pc}
	...

0800f4ac <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800f4ac:	b480      	push	{r7}
 800f4ae:	b085      	sub	sp, #20
 800f4b0:	af00      	add	r7, sp, #0
 800f4b2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f4b8:	2b00      	cmp	r3, #0
 800f4ba:	d108      	bne.n	800f4ce <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	2201      	movs	r2, #1
 800f4c0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	2201      	movs	r2, #1
 800f4c8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800f4cc:	e031      	b.n	800f532 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800f4ce:	2310      	movs	r3, #16
 800f4d0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800f4d2:	2310      	movs	r3, #16
 800f4d4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800f4d6:	687b      	ldr	r3, [r7, #4]
 800f4d8:	681b      	ldr	r3, [r3, #0]
 800f4da:	689b      	ldr	r3, [r3, #8]
 800f4dc:	0e5b      	lsrs	r3, r3, #25
 800f4de:	b2db      	uxtb	r3, r3
 800f4e0:	f003 0307 	and.w	r3, r3, #7
 800f4e4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	681b      	ldr	r3, [r3, #0]
 800f4ea:	689b      	ldr	r3, [r3, #8]
 800f4ec:	0f5b      	lsrs	r3, r3, #29
 800f4ee:	b2db      	uxtb	r3, r3
 800f4f0:	f003 0307 	and.w	r3, r3, #7
 800f4f4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f4f6:	7bbb      	ldrb	r3, [r7, #14]
 800f4f8:	7b3a      	ldrb	r2, [r7, #12]
 800f4fa:	4911      	ldr	r1, [pc, #68]	@ (800f540 <UARTEx_SetNbDataToProcess+0x94>)
 800f4fc:	5c8a      	ldrb	r2, [r1, r2]
 800f4fe:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800f502:	7b3a      	ldrb	r2, [r7, #12]
 800f504:	490f      	ldr	r1, [pc, #60]	@ (800f544 <UARTEx_SetNbDataToProcess+0x98>)
 800f506:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f508:	fb93 f3f2 	sdiv	r3, r3, r2
 800f50c:	b29a      	uxth	r2, r3
 800f50e:	687b      	ldr	r3, [r7, #4]
 800f510:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f514:	7bfb      	ldrb	r3, [r7, #15]
 800f516:	7b7a      	ldrb	r2, [r7, #13]
 800f518:	4909      	ldr	r1, [pc, #36]	@ (800f540 <UARTEx_SetNbDataToProcess+0x94>)
 800f51a:	5c8a      	ldrb	r2, [r1, r2]
 800f51c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800f520:	7b7a      	ldrb	r2, [r7, #13]
 800f522:	4908      	ldr	r1, [pc, #32]	@ (800f544 <UARTEx_SetNbDataToProcess+0x98>)
 800f524:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f526:	fb93 f3f2 	sdiv	r3, r3, r2
 800f52a:	b29a      	uxth	r2, r3
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800f532:	bf00      	nop
 800f534:	3714      	adds	r7, #20
 800f536:	46bd      	mov	sp, r7
 800f538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f53c:	4770      	bx	lr
 800f53e:	bf00      	nop
 800f540:	080184b0 	.word	0x080184b0
 800f544:	080184b8 	.word	0x080184b8

0800f548 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800f548:	b084      	sub	sp, #16
 800f54a:	b580      	push	{r7, lr}
 800f54c:	b084      	sub	sp, #16
 800f54e:	af00      	add	r7, sp, #0
 800f550:	6078      	str	r0, [r7, #4]
 800f552:	f107 001c 	add.w	r0, r7, #28
 800f556:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800f55a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800f55e:	2b01      	cmp	r3, #1
 800f560:	d121      	bne.n	800f5a6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f566:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800f56a:	687b      	ldr	r3, [r7, #4]
 800f56c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	68da      	ldr	r2, [r3, #12]
 800f572:	4b2c      	ldr	r3, [pc, #176]	@ (800f624 <USB_CoreInit+0xdc>)
 800f574:	4013      	ands	r3, r2
 800f576:	687a      	ldr	r2, [r7, #4]
 800f578:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800f57a:	687b      	ldr	r3, [r7, #4]
 800f57c:	68db      	ldr	r3, [r3, #12]
 800f57e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800f582:	687b      	ldr	r3, [r7, #4]
 800f584:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800f586:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800f58a:	2b01      	cmp	r3, #1
 800f58c:	d105      	bne.n	800f59a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800f58e:	687b      	ldr	r3, [r7, #4]
 800f590:	68db      	ldr	r3, [r3, #12]
 800f592:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800f596:	687b      	ldr	r3, [r7, #4]
 800f598:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800f59a:	6878      	ldr	r0, [r7, #4]
 800f59c:	f001 faf6 	bl	8010b8c <USB_CoreReset>
 800f5a0:	4603      	mov	r3, r0
 800f5a2:	73fb      	strb	r3, [r7, #15]
 800f5a4:	e01b      	b.n	800f5de <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	68db      	ldr	r3, [r3, #12]
 800f5aa:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800f5ae:	687b      	ldr	r3, [r7, #4]
 800f5b0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800f5b2:	6878      	ldr	r0, [r7, #4]
 800f5b4:	f001 faea 	bl	8010b8c <USB_CoreReset>
 800f5b8:	4603      	mov	r3, r0
 800f5ba:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800f5bc:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800f5c0:	2b00      	cmp	r3, #0
 800f5c2:	d106      	bne.n	800f5d2 <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f5c8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	639a      	str	r2, [r3, #56]	@ 0x38
 800f5d0:	e005      	b.n	800f5de <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800f5d2:	687b      	ldr	r3, [r7, #4]
 800f5d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f5d6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800f5de:	7fbb      	ldrb	r3, [r7, #30]
 800f5e0:	2b01      	cmp	r3, #1
 800f5e2:	d116      	bne.n	800f612 <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800f5e4:	687b      	ldr	r3, [r7, #4]
 800f5e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f5e8:	b29a      	uxth	r2, r3
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800f5ee:	687b      	ldr	r3, [r7, #4]
 800f5f0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800f5f2:	4b0d      	ldr	r3, [pc, #52]	@ (800f628 <USB_CoreInit+0xe0>)
 800f5f4:	4313      	orrs	r3, r2
 800f5f6:	687a      	ldr	r2, [r7, #4]
 800f5f8:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	689b      	ldr	r3, [r3, #8]
 800f5fe:	f043 0206 	orr.w	r2, r3, #6
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	689b      	ldr	r3, [r3, #8]
 800f60a:	f043 0220 	orr.w	r2, r3, #32
 800f60e:	687b      	ldr	r3, [r7, #4]
 800f610:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800f612:	7bfb      	ldrb	r3, [r7, #15]
}
 800f614:	4618      	mov	r0, r3
 800f616:	3710      	adds	r7, #16
 800f618:	46bd      	mov	sp, r7
 800f61a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f61e:	b004      	add	sp, #16
 800f620:	4770      	bx	lr
 800f622:	bf00      	nop
 800f624:	ffbdffbf 	.word	0xffbdffbf
 800f628:	03ee0000 	.word	0x03ee0000

0800f62c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800f62c:	b480      	push	{r7}
 800f62e:	b087      	sub	sp, #28
 800f630:	af00      	add	r7, sp, #0
 800f632:	60f8      	str	r0, [r7, #12]
 800f634:	60b9      	str	r1, [r7, #8]
 800f636:	4613      	mov	r3, r2
 800f638:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800f63a:	79fb      	ldrb	r3, [r7, #7]
 800f63c:	2b02      	cmp	r3, #2
 800f63e:	d165      	bne.n	800f70c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800f640:	68bb      	ldr	r3, [r7, #8]
 800f642:	4a41      	ldr	r2, [pc, #260]	@ (800f748 <USB_SetTurnaroundTime+0x11c>)
 800f644:	4293      	cmp	r3, r2
 800f646:	d906      	bls.n	800f656 <USB_SetTurnaroundTime+0x2a>
 800f648:	68bb      	ldr	r3, [r7, #8]
 800f64a:	4a40      	ldr	r2, [pc, #256]	@ (800f74c <USB_SetTurnaroundTime+0x120>)
 800f64c:	4293      	cmp	r3, r2
 800f64e:	d202      	bcs.n	800f656 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800f650:	230f      	movs	r3, #15
 800f652:	617b      	str	r3, [r7, #20]
 800f654:	e062      	b.n	800f71c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800f656:	68bb      	ldr	r3, [r7, #8]
 800f658:	4a3c      	ldr	r2, [pc, #240]	@ (800f74c <USB_SetTurnaroundTime+0x120>)
 800f65a:	4293      	cmp	r3, r2
 800f65c:	d306      	bcc.n	800f66c <USB_SetTurnaroundTime+0x40>
 800f65e:	68bb      	ldr	r3, [r7, #8]
 800f660:	4a3b      	ldr	r2, [pc, #236]	@ (800f750 <USB_SetTurnaroundTime+0x124>)
 800f662:	4293      	cmp	r3, r2
 800f664:	d202      	bcs.n	800f66c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800f666:	230e      	movs	r3, #14
 800f668:	617b      	str	r3, [r7, #20]
 800f66a:	e057      	b.n	800f71c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800f66c:	68bb      	ldr	r3, [r7, #8]
 800f66e:	4a38      	ldr	r2, [pc, #224]	@ (800f750 <USB_SetTurnaroundTime+0x124>)
 800f670:	4293      	cmp	r3, r2
 800f672:	d306      	bcc.n	800f682 <USB_SetTurnaroundTime+0x56>
 800f674:	68bb      	ldr	r3, [r7, #8]
 800f676:	4a37      	ldr	r2, [pc, #220]	@ (800f754 <USB_SetTurnaroundTime+0x128>)
 800f678:	4293      	cmp	r3, r2
 800f67a:	d202      	bcs.n	800f682 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800f67c:	230d      	movs	r3, #13
 800f67e:	617b      	str	r3, [r7, #20]
 800f680:	e04c      	b.n	800f71c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800f682:	68bb      	ldr	r3, [r7, #8]
 800f684:	4a33      	ldr	r2, [pc, #204]	@ (800f754 <USB_SetTurnaroundTime+0x128>)
 800f686:	4293      	cmp	r3, r2
 800f688:	d306      	bcc.n	800f698 <USB_SetTurnaroundTime+0x6c>
 800f68a:	68bb      	ldr	r3, [r7, #8]
 800f68c:	4a32      	ldr	r2, [pc, #200]	@ (800f758 <USB_SetTurnaroundTime+0x12c>)
 800f68e:	4293      	cmp	r3, r2
 800f690:	d802      	bhi.n	800f698 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800f692:	230c      	movs	r3, #12
 800f694:	617b      	str	r3, [r7, #20]
 800f696:	e041      	b.n	800f71c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800f698:	68bb      	ldr	r3, [r7, #8]
 800f69a:	4a2f      	ldr	r2, [pc, #188]	@ (800f758 <USB_SetTurnaroundTime+0x12c>)
 800f69c:	4293      	cmp	r3, r2
 800f69e:	d906      	bls.n	800f6ae <USB_SetTurnaroundTime+0x82>
 800f6a0:	68bb      	ldr	r3, [r7, #8]
 800f6a2:	4a2e      	ldr	r2, [pc, #184]	@ (800f75c <USB_SetTurnaroundTime+0x130>)
 800f6a4:	4293      	cmp	r3, r2
 800f6a6:	d802      	bhi.n	800f6ae <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800f6a8:	230b      	movs	r3, #11
 800f6aa:	617b      	str	r3, [r7, #20]
 800f6ac:	e036      	b.n	800f71c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800f6ae:	68bb      	ldr	r3, [r7, #8]
 800f6b0:	4a2a      	ldr	r2, [pc, #168]	@ (800f75c <USB_SetTurnaroundTime+0x130>)
 800f6b2:	4293      	cmp	r3, r2
 800f6b4:	d906      	bls.n	800f6c4 <USB_SetTurnaroundTime+0x98>
 800f6b6:	68bb      	ldr	r3, [r7, #8]
 800f6b8:	4a29      	ldr	r2, [pc, #164]	@ (800f760 <USB_SetTurnaroundTime+0x134>)
 800f6ba:	4293      	cmp	r3, r2
 800f6bc:	d802      	bhi.n	800f6c4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800f6be:	230a      	movs	r3, #10
 800f6c0:	617b      	str	r3, [r7, #20]
 800f6c2:	e02b      	b.n	800f71c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800f6c4:	68bb      	ldr	r3, [r7, #8]
 800f6c6:	4a26      	ldr	r2, [pc, #152]	@ (800f760 <USB_SetTurnaroundTime+0x134>)
 800f6c8:	4293      	cmp	r3, r2
 800f6ca:	d906      	bls.n	800f6da <USB_SetTurnaroundTime+0xae>
 800f6cc:	68bb      	ldr	r3, [r7, #8]
 800f6ce:	4a25      	ldr	r2, [pc, #148]	@ (800f764 <USB_SetTurnaroundTime+0x138>)
 800f6d0:	4293      	cmp	r3, r2
 800f6d2:	d202      	bcs.n	800f6da <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800f6d4:	2309      	movs	r3, #9
 800f6d6:	617b      	str	r3, [r7, #20]
 800f6d8:	e020      	b.n	800f71c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800f6da:	68bb      	ldr	r3, [r7, #8]
 800f6dc:	4a21      	ldr	r2, [pc, #132]	@ (800f764 <USB_SetTurnaroundTime+0x138>)
 800f6de:	4293      	cmp	r3, r2
 800f6e0:	d306      	bcc.n	800f6f0 <USB_SetTurnaroundTime+0xc4>
 800f6e2:	68bb      	ldr	r3, [r7, #8]
 800f6e4:	4a20      	ldr	r2, [pc, #128]	@ (800f768 <USB_SetTurnaroundTime+0x13c>)
 800f6e6:	4293      	cmp	r3, r2
 800f6e8:	d802      	bhi.n	800f6f0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800f6ea:	2308      	movs	r3, #8
 800f6ec:	617b      	str	r3, [r7, #20]
 800f6ee:	e015      	b.n	800f71c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800f6f0:	68bb      	ldr	r3, [r7, #8]
 800f6f2:	4a1d      	ldr	r2, [pc, #116]	@ (800f768 <USB_SetTurnaroundTime+0x13c>)
 800f6f4:	4293      	cmp	r3, r2
 800f6f6:	d906      	bls.n	800f706 <USB_SetTurnaroundTime+0xda>
 800f6f8:	68bb      	ldr	r3, [r7, #8]
 800f6fa:	4a1c      	ldr	r2, [pc, #112]	@ (800f76c <USB_SetTurnaroundTime+0x140>)
 800f6fc:	4293      	cmp	r3, r2
 800f6fe:	d202      	bcs.n	800f706 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800f700:	2307      	movs	r3, #7
 800f702:	617b      	str	r3, [r7, #20]
 800f704:	e00a      	b.n	800f71c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800f706:	2306      	movs	r3, #6
 800f708:	617b      	str	r3, [r7, #20]
 800f70a:	e007      	b.n	800f71c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800f70c:	79fb      	ldrb	r3, [r7, #7]
 800f70e:	2b00      	cmp	r3, #0
 800f710:	d102      	bne.n	800f718 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800f712:	2309      	movs	r3, #9
 800f714:	617b      	str	r3, [r7, #20]
 800f716:	e001      	b.n	800f71c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800f718:	2309      	movs	r3, #9
 800f71a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800f71c:	68fb      	ldr	r3, [r7, #12]
 800f71e:	68db      	ldr	r3, [r3, #12]
 800f720:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800f724:	68fb      	ldr	r3, [r7, #12]
 800f726:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800f728:	68fb      	ldr	r3, [r7, #12]
 800f72a:	68da      	ldr	r2, [r3, #12]
 800f72c:	697b      	ldr	r3, [r7, #20]
 800f72e:	029b      	lsls	r3, r3, #10
 800f730:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800f734:	431a      	orrs	r2, r3
 800f736:	68fb      	ldr	r3, [r7, #12]
 800f738:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800f73a:	2300      	movs	r3, #0
}
 800f73c:	4618      	mov	r0, r3
 800f73e:	371c      	adds	r7, #28
 800f740:	46bd      	mov	sp, r7
 800f742:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f746:	4770      	bx	lr
 800f748:	00d8acbf 	.word	0x00d8acbf
 800f74c:	00e4e1c0 	.word	0x00e4e1c0
 800f750:	00f42400 	.word	0x00f42400
 800f754:	01067380 	.word	0x01067380
 800f758:	011a499f 	.word	0x011a499f
 800f75c:	01312cff 	.word	0x01312cff
 800f760:	014ca43f 	.word	0x014ca43f
 800f764:	016e3600 	.word	0x016e3600
 800f768:	01a6ab1f 	.word	0x01a6ab1f
 800f76c:	01e84800 	.word	0x01e84800

0800f770 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800f770:	b480      	push	{r7}
 800f772:	b083      	sub	sp, #12
 800f774:	af00      	add	r7, sp, #0
 800f776:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	689b      	ldr	r3, [r3, #8]
 800f77c:	f043 0201 	orr.w	r2, r3, #1
 800f780:	687b      	ldr	r3, [r7, #4]
 800f782:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800f784:	2300      	movs	r3, #0
}
 800f786:	4618      	mov	r0, r3
 800f788:	370c      	adds	r7, #12
 800f78a:	46bd      	mov	sp, r7
 800f78c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f790:	4770      	bx	lr

0800f792 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800f792:	b480      	push	{r7}
 800f794:	b083      	sub	sp, #12
 800f796:	af00      	add	r7, sp, #0
 800f798:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800f79a:	687b      	ldr	r3, [r7, #4]
 800f79c:	689b      	ldr	r3, [r3, #8]
 800f79e:	f023 0201 	bic.w	r2, r3, #1
 800f7a2:	687b      	ldr	r3, [r7, #4]
 800f7a4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800f7a6:	2300      	movs	r3, #0
}
 800f7a8:	4618      	mov	r0, r3
 800f7aa:	370c      	adds	r7, #12
 800f7ac:	46bd      	mov	sp, r7
 800f7ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7b2:	4770      	bx	lr

0800f7b4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800f7b4:	b580      	push	{r7, lr}
 800f7b6:	b084      	sub	sp, #16
 800f7b8:	af00      	add	r7, sp, #0
 800f7ba:	6078      	str	r0, [r7, #4]
 800f7bc:	460b      	mov	r3, r1
 800f7be:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800f7c0:	2300      	movs	r3, #0
 800f7c2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	68db      	ldr	r3, [r3, #12]
 800f7c8:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800f7d0:	78fb      	ldrb	r3, [r7, #3]
 800f7d2:	2b01      	cmp	r3, #1
 800f7d4:	d115      	bne.n	800f802 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800f7d6:	687b      	ldr	r3, [r7, #4]
 800f7d8:	68db      	ldr	r3, [r3, #12]
 800f7da:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800f7e2:	200a      	movs	r0, #10
 800f7e4:	f7f4 fbda 	bl	8003f9c <HAL_Delay>
      ms += 10U;
 800f7e8:	68fb      	ldr	r3, [r7, #12]
 800f7ea:	330a      	adds	r3, #10
 800f7ec:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800f7ee:	6878      	ldr	r0, [r7, #4]
 800f7f0:	f001 f93b 	bl	8010a6a <USB_GetMode>
 800f7f4:	4603      	mov	r3, r0
 800f7f6:	2b01      	cmp	r3, #1
 800f7f8:	d01e      	beq.n	800f838 <USB_SetCurrentMode+0x84>
 800f7fa:	68fb      	ldr	r3, [r7, #12]
 800f7fc:	2bc7      	cmp	r3, #199	@ 0xc7
 800f7fe:	d9f0      	bls.n	800f7e2 <USB_SetCurrentMode+0x2e>
 800f800:	e01a      	b.n	800f838 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800f802:	78fb      	ldrb	r3, [r7, #3]
 800f804:	2b00      	cmp	r3, #0
 800f806:	d115      	bne.n	800f834 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800f808:	687b      	ldr	r3, [r7, #4]
 800f80a:	68db      	ldr	r3, [r3, #12]
 800f80c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800f810:	687b      	ldr	r3, [r7, #4]
 800f812:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800f814:	200a      	movs	r0, #10
 800f816:	f7f4 fbc1 	bl	8003f9c <HAL_Delay>
      ms += 10U;
 800f81a:	68fb      	ldr	r3, [r7, #12]
 800f81c:	330a      	adds	r3, #10
 800f81e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800f820:	6878      	ldr	r0, [r7, #4]
 800f822:	f001 f922 	bl	8010a6a <USB_GetMode>
 800f826:	4603      	mov	r3, r0
 800f828:	2b00      	cmp	r3, #0
 800f82a:	d005      	beq.n	800f838 <USB_SetCurrentMode+0x84>
 800f82c:	68fb      	ldr	r3, [r7, #12]
 800f82e:	2bc7      	cmp	r3, #199	@ 0xc7
 800f830:	d9f0      	bls.n	800f814 <USB_SetCurrentMode+0x60>
 800f832:	e001      	b.n	800f838 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800f834:	2301      	movs	r3, #1
 800f836:	e005      	b.n	800f844 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800f838:	68fb      	ldr	r3, [r7, #12]
 800f83a:	2bc8      	cmp	r3, #200	@ 0xc8
 800f83c:	d101      	bne.n	800f842 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800f83e:	2301      	movs	r3, #1
 800f840:	e000      	b.n	800f844 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800f842:	2300      	movs	r3, #0
}
 800f844:	4618      	mov	r0, r3
 800f846:	3710      	adds	r7, #16
 800f848:	46bd      	mov	sp, r7
 800f84a:	bd80      	pop	{r7, pc}

0800f84c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800f84c:	b084      	sub	sp, #16
 800f84e:	b580      	push	{r7, lr}
 800f850:	b086      	sub	sp, #24
 800f852:	af00      	add	r7, sp, #0
 800f854:	6078      	str	r0, [r7, #4]
 800f856:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800f85a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800f85e:	2300      	movs	r3, #0
 800f860:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f862:	687b      	ldr	r3, [r7, #4]
 800f864:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800f866:	2300      	movs	r3, #0
 800f868:	613b      	str	r3, [r7, #16]
 800f86a:	e009      	b.n	800f880 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800f86c:	687a      	ldr	r2, [r7, #4]
 800f86e:	693b      	ldr	r3, [r7, #16]
 800f870:	3340      	adds	r3, #64	@ 0x40
 800f872:	009b      	lsls	r3, r3, #2
 800f874:	4413      	add	r3, r2
 800f876:	2200      	movs	r2, #0
 800f878:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800f87a:	693b      	ldr	r3, [r7, #16]
 800f87c:	3301      	adds	r3, #1
 800f87e:	613b      	str	r3, [r7, #16]
 800f880:	693b      	ldr	r3, [r7, #16]
 800f882:	2b0e      	cmp	r3, #14
 800f884:	d9f2      	bls.n	800f86c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800f886:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800f88a:	2b00      	cmp	r3, #0
 800f88c:	d11c      	bne.n	800f8c8 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800f88e:	68fb      	ldr	r3, [r7, #12]
 800f890:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f894:	685b      	ldr	r3, [r3, #4]
 800f896:	68fa      	ldr	r2, [r7, #12]
 800f898:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800f89c:	f043 0302 	orr.w	r3, r3, #2
 800f8a0:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800f8a2:	687b      	ldr	r3, [r7, #4]
 800f8a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f8a6:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	681b      	ldr	r3, [r3, #0]
 800f8b2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800f8ba:	687b      	ldr	r3, [r7, #4]
 800f8bc:	681b      	ldr	r3, [r3, #0]
 800f8be:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800f8c2:	687b      	ldr	r3, [r7, #4]
 800f8c4:	601a      	str	r2, [r3, #0]
 800f8c6:	e005      	b.n	800f8d4 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f8cc:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800f8d4:	68fb      	ldr	r3, [r7, #12]
 800f8d6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800f8da:	461a      	mov	r2, r3
 800f8dc:	2300      	movs	r3, #0
 800f8de:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800f8e0:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800f8e4:	2b01      	cmp	r3, #1
 800f8e6:	d10d      	bne.n	800f904 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800f8e8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f8ec:	2b00      	cmp	r3, #0
 800f8ee:	d104      	bne.n	800f8fa <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800f8f0:	2100      	movs	r1, #0
 800f8f2:	6878      	ldr	r0, [r7, #4]
 800f8f4:	f000 f968 	bl	800fbc8 <USB_SetDevSpeed>
 800f8f8:	e008      	b.n	800f90c <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800f8fa:	2101      	movs	r1, #1
 800f8fc:	6878      	ldr	r0, [r7, #4]
 800f8fe:	f000 f963 	bl	800fbc8 <USB_SetDevSpeed>
 800f902:	e003      	b.n	800f90c <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800f904:	2103      	movs	r1, #3
 800f906:	6878      	ldr	r0, [r7, #4]
 800f908:	f000 f95e 	bl	800fbc8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800f90c:	2110      	movs	r1, #16
 800f90e:	6878      	ldr	r0, [r7, #4]
 800f910:	f000 f8fa 	bl	800fb08 <USB_FlushTxFifo>
 800f914:	4603      	mov	r3, r0
 800f916:	2b00      	cmp	r3, #0
 800f918:	d001      	beq.n	800f91e <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800f91a:	2301      	movs	r3, #1
 800f91c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800f91e:	6878      	ldr	r0, [r7, #4]
 800f920:	f000 f924 	bl	800fb6c <USB_FlushRxFifo>
 800f924:	4603      	mov	r3, r0
 800f926:	2b00      	cmp	r3, #0
 800f928:	d001      	beq.n	800f92e <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800f92a:	2301      	movs	r3, #1
 800f92c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800f92e:	68fb      	ldr	r3, [r7, #12]
 800f930:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f934:	461a      	mov	r2, r3
 800f936:	2300      	movs	r3, #0
 800f938:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800f93a:	68fb      	ldr	r3, [r7, #12]
 800f93c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f940:	461a      	mov	r2, r3
 800f942:	2300      	movs	r3, #0
 800f944:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800f946:	68fb      	ldr	r3, [r7, #12]
 800f948:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f94c:	461a      	mov	r2, r3
 800f94e:	2300      	movs	r3, #0
 800f950:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f952:	2300      	movs	r3, #0
 800f954:	613b      	str	r3, [r7, #16]
 800f956:	e043      	b.n	800f9e0 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800f958:	693b      	ldr	r3, [r7, #16]
 800f95a:	015a      	lsls	r2, r3, #5
 800f95c:	68fb      	ldr	r3, [r7, #12]
 800f95e:	4413      	add	r3, r2
 800f960:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f964:	681b      	ldr	r3, [r3, #0]
 800f966:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800f96a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800f96e:	d118      	bne.n	800f9a2 <USB_DevInit+0x156>
    {
      if (i == 0U)
 800f970:	693b      	ldr	r3, [r7, #16]
 800f972:	2b00      	cmp	r3, #0
 800f974:	d10a      	bne.n	800f98c <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800f976:	693b      	ldr	r3, [r7, #16]
 800f978:	015a      	lsls	r2, r3, #5
 800f97a:	68fb      	ldr	r3, [r7, #12]
 800f97c:	4413      	add	r3, r2
 800f97e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f982:	461a      	mov	r2, r3
 800f984:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800f988:	6013      	str	r3, [r2, #0]
 800f98a:	e013      	b.n	800f9b4 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800f98c:	693b      	ldr	r3, [r7, #16]
 800f98e:	015a      	lsls	r2, r3, #5
 800f990:	68fb      	ldr	r3, [r7, #12]
 800f992:	4413      	add	r3, r2
 800f994:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f998:	461a      	mov	r2, r3
 800f99a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800f99e:	6013      	str	r3, [r2, #0]
 800f9a0:	e008      	b.n	800f9b4 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800f9a2:	693b      	ldr	r3, [r7, #16]
 800f9a4:	015a      	lsls	r2, r3, #5
 800f9a6:	68fb      	ldr	r3, [r7, #12]
 800f9a8:	4413      	add	r3, r2
 800f9aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f9ae:	461a      	mov	r2, r3
 800f9b0:	2300      	movs	r3, #0
 800f9b2:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800f9b4:	693b      	ldr	r3, [r7, #16]
 800f9b6:	015a      	lsls	r2, r3, #5
 800f9b8:	68fb      	ldr	r3, [r7, #12]
 800f9ba:	4413      	add	r3, r2
 800f9bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f9c0:	461a      	mov	r2, r3
 800f9c2:	2300      	movs	r3, #0
 800f9c4:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800f9c6:	693b      	ldr	r3, [r7, #16]
 800f9c8:	015a      	lsls	r2, r3, #5
 800f9ca:	68fb      	ldr	r3, [r7, #12]
 800f9cc:	4413      	add	r3, r2
 800f9ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f9d2:	461a      	mov	r2, r3
 800f9d4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800f9d8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f9da:	693b      	ldr	r3, [r7, #16]
 800f9dc:	3301      	adds	r3, #1
 800f9de:	613b      	str	r3, [r7, #16]
 800f9e0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800f9e4:	461a      	mov	r2, r3
 800f9e6:	693b      	ldr	r3, [r7, #16]
 800f9e8:	4293      	cmp	r3, r2
 800f9ea:	d3b5      	bcc.n	800f958 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f9ec:	2300      	movs	r3, #0
 800f9ee:	613b      	str	r3, [r7, #16]
 800f9f0:	e043      	b.n	800fa7a <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800f9f2:	693b      	ldr	r3, [r7, #16]
 800f9f4:	015a      	lsls	r2, r3, #5
 800f9f6:	68fb      	ldr	r3, [r7, #12]
 800f9f8:	4413      	add	r3, r2
 800f9fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f9fe:	681b      	ldr	r3, [r3, #0]
 800fa00:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800fa04:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800fa08:	d118      	bne.n	800fa3c <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800fa0a:	693b      	ldr	r3, [r7, #16]
 800fa0c:	2b00      	cmp	r3, #0
 800fa0e:	d10a      	bne.n	800fa26 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800fa10:	693b      	ldr	r3, [r7, #16]
 800fa12:	015a      	lsls	r2, r3, #5
 800fa14:	68fb      	ldr	r3, [r7, #12]
 800fa16:	4413      	add	r3, r2
 800fa18:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fa1c:	461a      	mov	r2, r3
 800fa1e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800fa22:	6013      	str	r3, [r2, #0]
 800fa24:	e013      	b.n	800fa4e <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800fa26:	693b      	ldr	r3, [r7, #16]
 800fa28:	015a      	lsls	r2, r3, #5
 800fa2a:	68fb      	ldr	r3, [r7, #12]
 800fa2c:	4413      	add	r3, r2
 800fa2e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fa32:	461a      	mov	r2, r3
 800fa34:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800fa38:	6013      	str	r3, [r2, #0]
 800fa3a:	e008      	b.n	800fa4e <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800fa3c:	693b      	ldr	r3, [r7, #16]
 800fa3e:	015a      	lsls	r2, r3, #5
 800fa40:	68fb      	ldr	r3, [r7, #12]
 800fa42:	4413      	add	r3, r2
 800fa44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fa48:	461a      	mov	r2, r3
 800fa4a:	2300      	movs	r3, #0
 800fa4c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800fa4e:	693b      	ldr	r3, [r7, #16]
 800fa50:	015a      	lsls	r2, r3, #5
 800fa52:	68fb      	ldr	r3, [r7, #12]
 800fa54:	4413      	add	r3, r2
 800fa56:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fa5a:	461a      	mov	r2, r3
 800fa5c:	2300      	movs	r3, #0
 800fa5e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800fa60:	693b      	ldr	r3, [r7, #16]
 800fa62:	015a      	lsls	r2, r3, #5
 800fa64:	68fb      	ldr	r3, [r7, #12]
 800fa66:	4413      	add	r3, r2
 800fa68:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fa6c:	461a      	mov	r2, r3
 800fa6e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800fa72:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800fa74:	693b      	ldr	r3, [r7, #16]
 800fa76:	3301      	adds	r3, #1
 800fa78:	613b      	str	r3, [r7, #16]
 800fa7a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800fa7e:	461a      	mov	r2, r3
 800fa80:	693b      	ldr	r3, [r7, #16]
 800fa82:	4293      	cmp	r3, r2
 800fa84:	d3b5      	bcc.n	800f9f2 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800fa86:	68fb      	ldr	r3, [r7, #12]
 800fa88:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800fa8c:	691b      	ldr	r3, [r3, #16]
 800fa8e:	68fa      	ldr	r2, [r7, #12]
 800fa90:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800fa94:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800fa98:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	2200      	movs	r2, #0
 800fa9e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800faa6:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800faa8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800faac:	2b00      	cmp	r3, #0
 800faae:	d105      	bne.n	800fabc <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800fab0:	687b      	ldr	r3, [r7, #4]
 800fab2:	699b      	ldr	r3, [r3, #24]
 800fab4:	f043 0210 	orr.w	r2, r3, #16
 800fab8:	687b      	ldr	r3, [r7, #4]
 800faba:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	699a      	ldr	r2, [r3, #24]
 800fac0:	4b0f      	ldr	r3, [pc, #60]	@ (800fb00 <USB_DevInit+0x2b4>)
 800fac2:	4313      	orrs	r3, r2
 800fac4:	687a      	ldr	r2, [r7, #4]
 800fac6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800fac8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800facc:	2b00      	cmp	r3, #0
 800face:	d005      	beq.n	800fadc <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800fad0:	687b      	ldr	r3, [r7, #4]
 800fad2:	699b      	ldr	r3, [r3, #24]
 800fad4:	f043 0208 	orr.w	r2, r3, #8
 800fad8:	687b      	ldr	r3, [r7, #4]
 800fada:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800fadc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800fae0:	2b01      	cmp	r3, #1
 800fae2:	d105      	bne.n	800faf0 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800fae4:	687b      	ldr	r3, [r7, #4]
 800fae6:	699a      	ldr	r2, [r3, #24]
 800fae8:	4b06      	ldr	r3, [pc, #24]	@ (800fb04 <USB_DevInit+0x2b8>)
 800faea:	4313      	orrs	r3, r2
 800faec:	687a      	ldr	r2, [r7, #4]
 800faee:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800faf0:	7dfb      	ldrb	r3, [r7, #23]
}
 800faf2:	4618      	mov	r0, r3
 800faf4:	3718      	adds	r7, #24
 800faf6:	46bd      	mov	sp, r7
 800faf8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800fafc:	b004      	add	sp, #16
 800fafe:	4770      	bx	lr
 800fb00:	803c3800 	.word	0x803c3800
 800fb04:	40000004 	.word	0x40000004

0800fb08 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800fb08:	b480      	push	{r7}
 800fb0a:	b085      	sub	sp, #20
 800fb0c:	af00      	add	r7, sp, #0
 800fb0e:	6078      	str	r0, [r7, #4]
 800fb10:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800fb12:	2300      	movs	r3, #0
 800fb14:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800fb16:	68fb      	ldr	r3, [r7, #12]
 800fb18:	3301      	adds	r3, #1
 800fb1a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800fb1c:	68fb      	ldr	r3, [r7, #12]
 800fb1e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800fb22:	d901      	bls.n	800fb28 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800fb24:	2303      	movs	r3, #3
 800fb26:	e01b      	b.n	800fb60 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800fb28:	687b      	ldr	r3, [r7, #4]
 800fb2a:	691b      	ldr	r3, [r3, #16]
 800fb2c:	2b00      	cmp	r3, #0
 800fb2e:	daf2      	bge.n	800fb16 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800fb30:	2300      	movs	r3, #0
 800fb32:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800fb34:	683b      	ldr	r3, [r7, #0]
 800fb36:	019b      	lsls	r3, r3, #6
 800fb38:	f043 0220 	orr.w	r2, r3, #32
 800fb3c:	687b      	ldr	r3, [r7, #4]
 800fb3e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800fb40:	68fb      	ldr	r3, [r7, #12]
 800fb42:	3301      	adds	r3, #1
 800fb44:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800fb46:	68fb      	ldr	r3, [r7, #12]
 800fb48:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800fb4c:	d901      	bls.n	800fb52 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800fb4e:	2303      	movs	r3, #3
 800fb50:	e006      	b.n	800fb60 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	691b      	ldr	r3, [r3, #16]
 800fb56:	f003 0320 	and.w	r3, r3, #32
 800fb5a:	2b20      	cmp	r3, #32
 800fb5c:	d0f0      	beq.n	800fb40 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800fb5e:	2300      	movs	r3, #0
}
 800fb60:	4618      	mov	r0, r3
 800fb62:	3714      	adds	r7, #20
 800fb64:	46bd      	mov	sp, r7
 800fb66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb6a:	4770      	bx	lr

0800fb6c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800fb6c:	b480      	push	{r7}
 800fb6e:	b085      	sub	sp, #20
 800fb70:	af00      	add	r7, sp, #0
 800fb72:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800fb74:	2300      	movs	r3, #0
 800fb76:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800fb78:	68fb      	ldr	r3, [r7, #12]
 800fb7a:	3301      	adds	r3, #1
 800fb7c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800fb7e:	68fb      	ldr	r3, [r7, #12]
 800fb80:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800fb84:	d901      	bls.n	800fb8a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800fb86:	2303      	movs	r3, #3
 800fb88:	e018      	b.n	800fbbc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	691b      	ldr	r3, [r3, #16]
 800fb8e:	2b00      	cmp	r3, #0
 800fb90:	daf2      	bge.n	800fb78 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800fb92:	2300      	movs	r3, #0
 800fb94:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	2210      	movs	r2, #16
 800fb9a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800fb9c:	68fb      	ldr	r3, [r7, #12]
 800fb9e:	3301      	adds	r3, #1
 800fba0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800fba2:	68fb      	ldr	r3, [r7, #12]
 800fba4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800fba8:	d901      	bls.n	800fbae <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800fbaa:	2303      	movs	r3, #3
 800fbac:	e006      	b.n	800fbbc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	691b      	ldr	r3, [r3, #16]
 800fbb2:	f003 0310 	and.w	r3, r3, #16
 800fbb6:	2b10      	cmp	r3, #16
 800fbb8:	d0f0      	beq.n	800fb9c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800fbba:	2300      	movs	r3, #0
}
 800fbbc:	4618      	mov	r0, r3
 800fbbe:	3714      	adds	r7, #20
 800fbc0:	46bd      	mov	sp, r7
 800fbc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbc6:	4770      	bx	lr

0800fbc8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800fbc8:	b480      	push	{r7}
 800fbca:	b085      	sub	sp, #20
 800fbcc:	af00      	add	r7, sp, #0
 800fbce:	6078      	str	r0, [r7, #4]
 800fbd0:	460b      	mov	r3, r1
 800fbd2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fbd4:	687b      	ldr	r3, [r7, #4]
 800fbd6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800fbd8:	68fb      	ldr	r3, [r7, #12]
 800fbda:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800fbde:	681a      	ldr	r2, [r3, #0]
 800fbe0:	78fb      	ldrb	r3, [r7, #3]
 800fbe2:	68f9      	ldr	r1, [r7, #12]
 800fbe4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800fbe8:	4313      	orrs	r3, r2
 800fbea:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800fbec:	2300      	movs	r3, #0
}
 800fbee:	4618      	mov	r0, r3
 800fbf0:	3714      	adds	r7, #20
 800fbf2:	46bd      	mov	sp, r7
 800fbf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbf8:	4770      	bx	lr

0800fbfa <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800fbfa:	b480      	push	{r7}
 800fbfc:	b087      	sub	sp, #28
 800fbfe:	af00      	add	r7, sp, #0
 800fc00:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fc02:	687b      	ldr	r3, [r7, #4]
 800fc04:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800fc06:	693b      	ldr	r3, [r7, #16]
 800fc08:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800fc0c:	689b      	ldr	r3, [r3, #8]
 800fc0e:	f003 0306 	and.w	r3, r3, #6
 800fc12:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800fc14:	68fb      	ldr	r3, [r7, #12]
 800fc16:	2b00      	cmp	r3, #0
 800fc18:	d102      	bne.n	800fc20 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800fc1a:	2300      	movs	r3, #0
 800fc1c:	75fb      	strb	r3, [r7, #23]
 800fc1e:	e00a      	b.n	800fc36 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800fc20:	68fb      	ldr	r3, [r7, #12]
 800fc22:	2b02      	cmp	r3, #2
 800fc24:	d002      	beq.n	800fc2c <USB_GetDevSpeed+0x32>
 800fc26:	68fb      	ldr	r3, [r7, #12]
 800fc28:	2b06      	cmp	r3, #6
 800fc2a:	d102      	bne.n	800fc32 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800fc2c:	2302      	movs	r3, #2
 800fc2e:	75fb      	strb	r3, [r7, #23]
 800fc30:	e001      	b.n	800fc36 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800fc32:	230f      	movs	r3, #15
 800fc34:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800fc36:	7dfb      	ldrb	r3, [r7, #23]
}
 800fc38:	4618      	mov	r0, r3
 800fc3a:	371c      	adds	r7, #28
 800fc3c:	46bd      	mov	sp, r7
 800fc3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc42:	4770      	bx	lr

0800fc44 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800fc44:	b480      	push	{r7}
 800fc46:	b085      	sub	sp, #20
 800fc48:	af00      	add	r7, sp, #0
 800fc4a:	6078      	str	r0, [r7, #4]
 800fc4c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fc4e:	687b      	ldr	r3, [r7, #4]
 800fc50:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800fc52:	683b      	ldr	r3, [r7, #0]
 800fc54:	781b      	ldrb	r3, [r3, #0]
 800fc56:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800fc58:	683b      	ldr	r3, [r7, #0]
 800fc5a:	785b      	ldrb	r3, [r3, #1]
 800fc5c:	2b01      	cmp	r3, #1
 800fc5e:	d139      	bne.n	800fcd4 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800fc60:	68fb      	ldr	r3, [r7, #12]
 800fc62:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800fc66:	69da      	ldr	r2, [r3, #28]
 800fc68:	683b      	ldr	r3, [r7, #0]
 800fc6a:	781b      	ldrb	r3, [r3, #0]
 800fc6c:	f003 030f 	and.w	r3, r3, #15
 800fc70:	2101      	movs	r1, #1
 800fc72:	fa01 f303 	lsl.w	r3, r1, r3
 800fc76:	b29b      	uxth	r3, r3
 800fc78:	68f9      	ldr	r1, [r7, #12]
 800fc7a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800fc7e:	4313      	orrs	r3, r2
 800fc80:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800fc82:	68bb      	ldr	r3, [r7, #8]
 800fc84:	015a      	lsls	r2, r3, #5
 800fc86:	68fb      	ldr	r3, [r7, #12]
 800fc88:	4413      	add	r3, r2
 800fc8a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fc8e:	681b      	ldr	r3, [r3, #0]
 800fc90:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800fc94:	2b00      	cmp	r3, #0
 800fc96:	d153      	bne.n	800fd40 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800fc98:	68bb      	ldr	r3, [r7, #8]
 800fc9a:	015a      	lsls	r2, r3, #5
 800fc9c:	68fb      	ldr	r3, [r7, #12]
 800fc9e:	4413      	add	r3, r2
 800fca0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fca4:	681a      	ldr	r2, [r3, #0]
 800fca6:	683b      	ldr	r3, [r7, #0]
 800fca8:	689b      	ldr	r3, [r3, #8]
 800fcaa:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800fcae:	683b      	ldr	r3, [r7, #0]
 800fcb0:	791b      	ldrb	r3, [r3, #4]
 800fcb2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800fcb4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800fcb6:	68bb      	ldr	r3, [r7, #8]
 800fcb8:	059b      	lsls	r3, r3, #22
 800fcba:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800fcbc:	431a      	orrs	r2, r3
 800fcbe:	68bb      	ldr	r3, [r7, #8]
 800fcc0:	0159      	lsls	r1, r3, #5
 800fcc2:	68fb      	ldr	r3, [r7, #12]
 800fcc4:	440b      	add	r3, r1
 800fcc6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fcca:	4619      	mov	r1, r3
 800fccc:	4b20      	ldr	r3, [pc, #128]	@ (800fd50 <USB_ActivateEndpoint+0x10c>)
 800fcce:	4313      	orrs	r3, r2
 800fcd0:	600b      	str	r3, [r1, #0]
 800fcd2:	e035      	b.n	800fd40 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800fcd4:	68fb      	ldr	r3, [r7, #12]
 800fcd6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800fcda:	69da      	ldr	r2, [r3, #28]
 800fcdc:	683b      	ldr	r3, [r7, #0]
 800fcde:	781b      	ldrb	r3, [r3, #0]
 800fce0:	f003 030f 	and.w	r3, r3, #15
 800fce4:	2101      	movs	r1, #1
 800fce6:	fa01 f303 	lsl.w	r3, r1, r3
 800fcea:	041b      	lsls	r3, r3, #16
 800fcec:	68f9      	ldr	r1, [r7, #12]
 800fcee:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800fcf2:	4313      	orrs	r3, r2
 800fcf4:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800fcf6:	68bb      	ldr	r3, [r7, #8]
 800fcf8:	015a      	lsls	r2, r3, #5
 800fcfa:	68fb      	ldr	r3, [r7, #12]
 800fcfc:	4413      	add	r3, r2
 800fcfe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fd02:	681b      	ldr	r3, [r3, #0]
 800fd04:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800fd08:	2b00      	cmp	r3, #0
 800fd0a:	d119      	bne.n	800fd40 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800fd0c:	68bb      	ldr	r3, [r7, #8]
 800fd0e:	015a      	lsls	r2, r3, #5
 800fd10:	68fb      	ldr	r3, [r7, #12]
 800fd12:	4413      	add	r3, r2
 800fd14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fd18:	681a      	ldr	r2, [r3, #0]
 800fd1a:	683b      	ldr	r3, [r7, #0]
 800fd1c:	689b      	ldr	r3, [r3, #8]
 800fd1e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800fd22:	683b      	ldr	r3, [r7, #0]
 800fd24:	791b      	ldrb	r3, [r3, #4]
 800fd26:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800fd28:	430b      	orrs	r3, r1
 800fd2a:	431a      	orrs	r2, r3
 800fd2c:	68bb      	ldr	r3, [r7, #8]
 800fd2e:	0159      	lsls	r1, r3, #5
 800fd30:	68fb      	ldr	r3, [r7, #12]
 800fd32:	440b      	add	r3, r1
 800fd34:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fd38:	4619      	mov	r1, r3
 800fd3a:	4b05      	ldr	r3, [pc, #20]	@ (800fd50 <USB_ActivateEndpoint+0x10c>)
 800fd3c:	4313      	orrs	r3, r2
 800fd3e:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800fd40:	2300      	movs	r3, #0
}
 800fd42:	4618      	mov	r0, r3
 800fd44:	3714      	adds	r7, #20
 800fd46:	46bd      	mov	sp, r7
 800fd48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd4c:	4770      	bx	lr
 800fd4e:	bf00      	nop
 800fd50:	10008000 	.word	0x10008000

0800fd54 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800fd54:	b480      	push	{r7}
 800fd56:	b085      	sub	sp, #20
 800fd58:	af00      	add	r7, sp, #0
 800fd5a:	6078      	str	r0, [r7, #4]
 800fd5c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fd5e:	687b      	ldr	r3, [r7, #4]
 800fd60:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800fd62:	683b      	ldr	r3, [r7, #0]
 800fd64:	781b      	ldrb	r3, [r3, #0]
 800fd66:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800fd68:	683b      	ldr	r3, [r7, #0]
 800fd6a:	785b      	ldrb	r3, [r3, #1]
 800fd6c:	2b01      	cmp	r3, #1
 800fd6e:	d161      	bne.n	800fe34 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800fd70:	68bb      	ldr	r3, [r7, #8]
 800fd72:	015a      	lsls	r2, r3, #5
 800fd74:	68fb      	ldr	r3, [r7, #12]
 800fd76:	4413      	add	r3, r2
 800fd78:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fd7c:	681b      	ldr	r3, [r3, #0]
 800fd7e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800fd82:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800fd86:	d11f      	bne.n	800fdc8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800fd88:	68bb      	ldr	r3, [r7, #8]
 800fd8a:	015a      	lsls	r2, r3, #5
 800fd8c:	68fb      	ldr	r3, [r7, #12]
 800fd8e:	4413      	add	r3, r2
 800fd90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fd94:	681b      	ldr	r3, [r3, #0]
 800fd96:	68ba      	ldr	r2, [r7, #8]
 800fd98:	0151      	lsls	r1, r2, #5
 800fd9a:	68fa      	ldr	r2, [r7, #12]
 800fd9c:	440a      	add	r2, r1
 800fd9e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800fda2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800fda6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800fda8:	68bb      	ldr	r3, [r7, #8]
 800fdaa:	015a      	lsls	r2, r3, #5
 800fdac:	68fb      	ldr	r3, [r7, #12]
 800fdae:	4413      	add	r3, r2
 800fdb0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fdb4:	681b      	ldr	r3, [r3, #0]
 800fdb6:	68ba      	ldr	r2, [r7, #8]
 800fdb8:	0151      	lsls	r1, r2, #5
 800fdba:	68fa      	ldr	r2, [r7, #12]
 800fdbc:	440a      	add	r2, r1
 800fdbe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800fdc2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800fdc6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800fdc8:	68fb      	ldr	r3, [r7, #12]
 800fdca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800fdce:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800fdd0:	683b      	ldr	r3, [r7, #0]
 800fdd2:	781b      	ldrb	r3, [r3, #0]
 800fdd4:	f003 030f 	and.w	r3, r3, #15
 800fdd8:	2101      	movs	r1, #1
 800fdda:	fa01 f303 	lsl.w	r3, r1, r3
 800fdde:	b29b      	uxth	r3, r3
 800fde0:	43db      	mvns	r3, r3
 800fde2:	68f9      	ldr	r1, [r7, #12]
 800fde4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800fde8:	4013      	ands	r3, r2
 800fdea:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800fdec:	68fb      	ldr	r3, [r7, #12]
 800fdee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800fdf2:	69da      	ldr	r2, [r3, #28]
 800fdf4:	683b      	ldr	r3, [r7, #0]
 800fdf6:	781b      	ldrb	r3, [r3, #0]
 800fdf8:	f003 030f 	and.w	r3, r3, #15
 800fdfc:	2101      	movs	r1, #1
 800fdfe:	fa01 f303 	lsl.w	r3, r1, r3
 800fe02:	b29b      	uxth	r3, r3
 800fe04:	43db      	mvns	r3, r3
 800fe06:	68f9      	ldr	r1, [r7, #12]
 800fe08:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800fe0c:	4013      	ands	r3, r2
 800fe0e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800fe10:	68bb      	ldr	r3, [r7, #8]
 800fe12:	015a      	lsls	r2, r3, #5
 800fe14:	68fb      	ldr	r3, [r7, #12]
 800fe16:	4413      	add	r3, r2
 800fe18:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fe1c:	681a      	ldr	r2, [r3, #0]
 800fe1e:	68bb      	ldr	r3, [r7, #8]
 800fe20:	0159      	lsls	r1, r3, #5
 800fe22:	68fb      	ldr	r3, [r7, #12]
 800fe24:	440b      	add	r3, r1
 800fe26:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fe2a:	4619      	mov	r1, r3
 800fe2c:	4b35      	ldr	r3, [pc, #212]	@ (800ff04 <USB_DeactivateEndpoint+0x1b0>)
 800fe2e:	4013      	ands	r3, r2
 800fe30:	600b      	str	r3, [r1, #0]
 800fe32:	e060      	b.n	800fef6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800fe34:	68bb      	ldr	r3, [r7, #8]
 800fe36:	015a      	lsls	r2, r3, #5
 800fe38:	68fb      	ldr	r3, [r7, #12]
 800fe3a:	4413      	add	r3, r2
 800fe3c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fe40:	681b      	ldr	r3, [r3, #0]
 800fe42:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800fe46:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800fe4a:	d11f      	bne.n	800fe8c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800fe4c:	68bb      	ldr	r3, [r7, #8]
 800fe4e:	015a      	lsls	r2, r3, #5
 800fe50:	68fb      	ldr	r3, [r7, #12]
 800fe52:	4413      	add	r3, r2
 800fe54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fe58:	681b      	ldr	r3, [r3, #0]
 800fe5a:	68ba      	ldr	r2, [r7, #8]
 800fe5c:	0151      	lsls	r1, r2, #5
 800fe5e:	68fa      	ldr	r2, [r7, #12]
 800fe60:	440a      	add	r2, r1
 800fe62:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800fe66:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800fe6a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800fe6c:	68bb      	ldr	r3, [r7, #8]
 800fe6e:	015a      	lsls	r2, r3, #5
 800fe70:	68fb      	ldr	r3, [r7, #12]
 800fe72:	4413      	add	r3, r2
 800fe74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fe78:	681b      	ldr	r3, [r3, #0]
 800fe7a:	68ba      	ldr	r2, [r7, #8]
 800fe7c:	0151      	lsls	r1, r2, #5
 800fe7e:	68fa      	ldr	r2, [r7, #12]
 800fe80:	440a      	add	r2, r1
 800fe82:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800fe86:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800fe8a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800fe8c:	68fb      	ldr	r3, [r7, #12]
 800fe8e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800fe92:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800fe94:	683b      	ldr	r3, [r7, #0]
 800fe96:	781b      	ldrb	r3, [r3, #0]
 800fe98:	f003 030f 	and.w	r3, r3, #15
 800fe9c:	2101      	movs	r1, #1
 800fe9e:	fa01 f303 	lsl.w	r3, r1, r3
 800fea2:	041b      	lsls	r3, r3, #16
 800fea4:	43db      	mvns	r3, r3
 800fea6:	68f9      	ldr	r1, [r7, #12]
 800fea8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800feac:	4013      	ands	r3, r2
 800feae:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800feb0:	68fb      	ldr	r3, [r7, #12]
 800feb2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800feb6:	69da      	ldr	r2, [r3, #28]
 800feb8:	683b      	ldr	r3, [r7, #0]
 800feba:	781b      	ldrb	r3, [r3, #0]
 800febc:	f003 030f 	and.w	r3, r3, #15
 800fec0:	2101      	movs	r1, #1
 800fec2:	fa01 f303 	lsl.w	r3, r1, r3
 800fec6:	041b      	lsls	r3, r3, #16
 800fec8:	43db      	mvns	r3, r3
 800feca:	68f9      	ldr	r1, [r7, #12]
 800fecc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800fed0:	4013      	ands	r3, r2
 800fed2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800fed4:	68bb      	ldr	r3, [r7, #8]
 800fed6:	015a      	lsls	r2, r3, #5
 800fed8:	68fb      	ldr	r3, [r7, #12]
 800feda:	4413      	add	r3, r2
 800fedc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fee0:	681a      	ldr	r2, [r3, #0]
 800fee2:	68bb      	ldr	r3, [r7, #8]
 800fee4:	0159      	lsls	r1, r3, #5
 800fee6:	68fb      	ldr	r3, [r7, #12]
 800fee8:	440b      	add	r3, r1
 800feea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800feee:	4619      	mov	r1, r3
 800fef0:	4b05      	ldr	r3, [pc, #20]	@ (800ff08 <USB_DeactivateEndpoint+0x1b4>)
 800fef2:	4013      	ands	r3, r2
 800fef4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800fef6:	2300      	movs	r3, #0
}
 800fef8:	4618      	mov	r0, r3
 800fefa:	3714      	adds	r7, #20
 800fefc:	46bd      	mov	sp, r7
 800fefe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff02:	4770      	bx	lr
 800ff04:	ec337800 	.word	0xec337800
 800ff08:	eff37800 	.word	0xeff37800

0800ff0c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800ff0c:	b580      	push	{r7, lr}
 800ff0e:	b08a      	sub	sp, #40	@ 0x28
 800ff10:	af02      	add	r7, sp, #8
 800ff12:	60f8      	str	r0, [r7, #12]
 800ff14:	60b9      	str	r1, [r7, #8]
 800ff16:	4613      	mov	r3, r2
 800ff18:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ff1a:	68fb      	ldr	r3, [r7, #12]
 800ff1c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800ff1e:	68bb      	ldr	r3, [r7, #8]
 800ff20:	781b      	ldrb	r3, [r3, #0]
 800ff22:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800ff24:	68bb      	ldr	r3, [r7, #8]
 800ff26:	785b      	ldrb	r3, [r3, #1]
 800ff28:	2b01      	cmp	r3, #1
 800ff2a:	f040 8181 	bne.w	8010230 <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800ff2e:	68bb      	ldr	r3, [r7, #8]
 800ff30:	691b      	ldr	r3, [r3, #16]
 800ff32:	2b00      	cmp	r3, #0
 800ff34:	d132      	bne.n	800ff9c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ff36:	69bb      	ldr	r3, [r7, #24]
 800ff38:	015a      	lsls	r2, r3, #5
 800ff3a:	69fb      	ldr	r3, [r7, #28]
 800ff3c:	4413      	add	r3, r2
 800ff3e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ff42:	691a      	ldr	r2, [r3, #16]
 800ff44:	69bb      	ldr	r3, [r7, #24]
 800ff46:	0159      	lsls	r1, r3, #5
 800ff48:	69fb      	ldr	r3, [r7, #28]
 800ff4a:	440b      	add	r3, r1
 800ff4c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ff50:	4619      	mov	r1, r3
 800ff52:	4ba5      	ldr	r3, [pc, #660]	@ (80101e8 <USB_EPStartXfer+0x2dc>)
 800ff54:	4013      	ands	r3, r2
 800ff56:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800ff58:	69bb      	ldr	r3, [r7, #24]
 800ff5a:	015a      	lsls	r2, r3, #5
 800ff5c:	69fb      	ldr	r3, [r7, #28]
 800ff5e:	4413      	add	r3, r2
 800ff60:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ff64:	691b      	ldr	r3, [r3, #16]
 800ff66:	69ba      	ldr	r2, [r7, #24]
 800ff68:	0151      	lsls	r1, r2, #5
 800ff6a:	69fa      	ldr	r2, [r7, #28]
 800ff6c:	440a      	add	r2, r1
 800ff6e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ff72:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800ff76:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ff78:	69bb      	ldr	r3, [r7, #24]
 800ff7a:	015a      	lsls	r2, r3, #5
 800ff7c:	69fb      	ldr	r3, [r7, #28]
 800ff7e:	4413      	add	r3, r2
 800ff80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ff84:	691a      	ldr	r2, [r3, #16]
 800ff86:	69bb      	ldr	r3, [r7, #24]
 800ff88:	0159      	lsls	r1, r3, #5
 800ff8a:	69fb      	ldr	r3, [r7, #28]
 800ff8c:	440b      	add	r3, r1
 800ff8e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ff92:	4619      	mov	r1, r3
 800ff94:	4b95      	ldr	r3, [pc, #596]	@ (80101ec <USB_EPStartXfer+0x2e0>)
 800ff96:	4013      	ands	r3, r2
 800ff98:	610b      	str	r3, [r1, #16]
 800ff9a:	e092      	b.n	80100c2 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ff9c:	69bb      	ldr	r3, [r7, #24]
 800ff9e:	015a      	lsls	r2, r3, #5
 800ffa0:	69fb      	ldr	r3, [r7, #28]
 800ffa2:	4413      	add	r3, r2
 800ffa4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ffa8:	691a      	ldr	r2, [r3, #16]
 800ffaa:	69bb      	ldr	r3, [r7, #24]
 800ffac:	0159      	lsls	r1, r3, #5
 800ffae:	69fb      	ldr	r3, [r7, #28]
 800ffb0:	440b      	add	r3, r1
 800ffb2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ffb6:	4619      	mov	r1, r3
 800ffb8:	4b8c      	ldr	r3, [pc, #560]	@ (80101ec <USB_EPStartXfer+0x2e0>)
 800ffba:	4013      	ands	r3, r2
 800ffbc:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ffbe:	69bb      	ldr	r3, [r7, #24]
 800ffc0:	015a      	lsls	r2, r3, #5
 800ffc2:	69fb      	ldr	r3, [r7, #28]
 800ffc4:	4413      	add	r3, r2
 800ffc6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ffca:	691a      	ldr	r2, [r3, #16]
 800ffcc:	69bb      	ldr	r3, [r7, #24]
 800ffce:	0159      	lsls	r1, r3, #5
 800ffd0:	69fb      	ldr	r3, [r7, #28]
 800ffd2:	440b      	add	r3, r1
 800ffd4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ffd8:	4619      	mov	r1, r3
 800ffda:	4b83      	ldr	r3, [pc, #524]	@ (80101e8 <USB_EPStartXfer+0x2dc>)
 800ffdc:	4013      	ands	r3, r2
 800ffde:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 800ffe0:	69bb      	ldr	r3, [r7, #24]
 800ffe2:	2b00      	cmp	r3, #0
 800ffe4:	d11a      	bne.n	801001c <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800ffe6:	68bb      	ldr	r3, [r7, #8]
 800ffe8:	691a      	ldr	r2, [r3, #16]
 800ffea:	68bb      	ldr	r3, [r7, #8]
 800ffec:	689b      	ldr	r3, [r3, #8]
 800ffee:	429a      	cmp	r2, r3
 800fff0:	d903      	bls.n	800fffa <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800fff2:	68bb      	ldr	r3, [r7, #8]
 800fff4:	689a      	ldr	r2, [r3, #8]
 800fff6:	68bb      	ldr	r3, [r7, #8]
 800fff8:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800fffa:	69bb      	ldr	r3, [r7, #24]
 800fffc:	015a      	lsls	r2, r3, #5
 800fffe:	69fb      	ldr	r3, [r7, #28]
 8010000:	4413      	add	r3, r2
 8010002:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010006:	691b      	ldr	r3, [r3, #16]
 8010008:	69ba      	ldr	r2, [r7, #24]
 801000a:	0151      	lsls	r1, r2, #5
 801000c:	69fa      	ldr	r2, [r7, #28]
 801000e:	440a      	add	r2, r1
 8010010:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8010014:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8010018:	6113      	str	r3, [r2, #16]
 801001a:	e01b      	b.n	8010054 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 801001c:	69bb      	ldr	r3, [r7, #24]
 801001e:	015a      	lsls	r2, r3, #5
 8010020:	69fb      	ldr	r3, [r7, #28]
 8010022:	4413      	add	r3, r2
 8010024:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010028:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 801002a:	68bb      	ldr	r3, [r7, #8]
 801002c:	6919      	ldr	r1, [r3, #16]
 801002e:	68bb      	ldr	r3, [r7, #8]
 8010030:	689b      	ldr	r3, [r3, #8]
 8010032:	440b      	add	r3, r1
 8010034:	1e59      	subs	r1, r3, #1
 8010036:	68bb      	ldr	r3, [r7, #8]
 8010038:	689b      	ldr	r3, [r3, #8]
 801003a:	fbb1 f3f3 	udiv	r3, r1, r3
 801003e:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8010040:	4b6b      	ldr	r3, [pc, #428]	@ (80101f0 <USB_EPStartXfer+0x2e4>)
 8010042:	400b      	ands	r3, r1
 8010044:	69b9      	ldr	r1, [r7, #24]
 8010046:	0148      	lsls	r0, r1, #5
 8010048:	69f9      	ldr	r1, [r7, #28]
 801004a:	4401      	add	r1, r0
 801004c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8010050:	4313      	orrs	r3, r2
 8010052:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8010054:	69bb      	ldr	r3, [r7, #24]
 8010056:	015a      	lsls	r2, r3, #5
 8010058:	69fb      	ldr	r3, [r7, #28]
 801005a:	4413      	add	r3, r2
 801005c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010060:	691a      	ldr	r2, [r3, #16]
 8010062:	68bb      	ldr	r3, [r7, #8]
 8010064:	691b      	ldr	r3, [r3, #16]
 8010066:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801006a:	69b9      	ldr	r1, [r7, #24]
 801006c:	0148      	lsls	r0, r1, #5
 801006e:	69f9      	ldr	r1, [r7, #28]
 8010070:	4401      	add	r1, r0
 8010072:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8010076:	4313      	orrs	r3, r2
 8010078:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 801007a:	68bb      	ldr	r3, [r7, #8]
 801007c:	791b      	ldrb	r3, [r3, #4]
 801007e:	2b01      	cmp	r3, #1
 8010080:	d11f      	bne.n	80100c2 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8010082:	69bb      	ldr	r3, [r7, #24]
 8010084:	015a      	lsls	r2, r3, #5
 8010086:	69fb      	ldr	r3, [r7, #28]
 8010088:	4413      	add	r3, r2
 801008a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801008e:	691b      	ldr	r3, [r3, #16]
 8010090:	69ba      	ldr	r2, [r7, #24]
 8010092:	0151      	lsls	r1, r2, #5
 8010094:	69fa      	ldr	r2, [r7, #28]
 8010096:	440a      	add	r2, r1
 8010098:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801009c:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80100a0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80100a2:	69bb      	ldr	r3, [r7, #24]
 80100a4:	015a      	lsls	r2, r3, #5
 80100a6:	69fb      	ldr	r3, [r7, #28]
 80100a8:	4413      	add	r3, r2
 80100aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80100ae:	691b      	ldr	r3, [r3, #16]
 80100b0:	69ba      	ldr	r2, [r7, #24]
 80100b2:	0151      	lsls	r1, r2, #5
 80100b4:	69fa      	ldr	r2, [r7, #28]
 80100b6:	440a      	add	r2, r1
 80100b8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80100bc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80100c0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80100c2:	79fb      	ldrb	r3, [r7, #7]
 80100c4:	2b01      	cmp	r3, #1
 80100c6:	d14b      	bne.n	8010160 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80100c8:	68bb      	ldr	r3, [r7, #8]
 80100ca:	69db      	ldr	r3, [r3, #28]
 80100cc:	2b00      	cmp	r3, #0
 80100ce:	d009      	beq.n	80100e4 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80100d0:	69bb      	ldr	r3, [r7, #24]
 80100d2:	015a      	lsls	r2, r3, #5
 80100d4:	69fb      	ldr	r3, [r7, #28]
 80100d6:	4413      	add	r3, r2
 80100d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80100dc:	461a      	mov	r2, r3
 80100de:	68bb      	ldr	r3, [r7, #8]
 80100e0:	69db      	ldr	r3, [r3, #28]
 80100e2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80100e4:	68bb      	ldr	r3, [r7, #8]
 80100e6:	791b      	ldrb	r3, [r3, #4]
 80100e8:	2b01      	cmp	r3, #1
 80100ea:	d128      	bne.n	801013e <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80100ec:	69fb      	ldr	r3, [r7, #28]
 80100ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80100f2:	689b      	ldr	r3, [r3, #8]
 80100f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80100f8:	2b00      	cmp	r3, #0
 80100fa:	d110      	bne.n	801011e <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80100fc:	69bb      	ldr	r3, [r7, #24]
 80100fe:	015a      	lsls	r2, r3, #5
 8010100:	69fb      	ldr	r3, [r7, #28]
 8010102:	4413      	add	r3, r2
 8010104:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010108:	681b      	ldr	r3, [r3, #0]
 801010a:	69ba      	ldr	r2, [r7, #24]
 801010c:	0151      	lsls	r1, r2, #5
 801010e:	69fa      	ldr	r2, [r7, #28]
 8010110:	440a      	add	r2, r1
 8010112:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8010116:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 801011a:	6013      	str	r3, [r2, #0]
 801011c:	e00f      	b.n	801013e <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 801011e:	69bb      	ldr	r3, [r7, #24]
 8010120:	015a      	lsls	r2, r3, #5
 8010122:	69fb      	ldr	r3, [r7, #28]
 8010124:	4413      	add	r3, r2
 8010126:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801012a:	681b      	ldr	r3, [r3, #0]
 801012c:	69ba      	ldr	r2, [r7, #24]
 801012e:	0151      	lsls	r1, r2, #5
 8010130:	69fa      	ldr	r2, [r7, #28]
 8010132:	440a      	add	r2, r1
 8010134:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8010138:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 801013c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801013e:	69bb      	ldr	r3, [r7, #24]
 8010140:	015a      	lsls	r2, r3, #5
 8010142:	69fb      	ldr	r3, [r7, #28]
 8010144:	4413      	add	r3, r2
 8010146:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801014a:	681b      	ldr	r3, [r3, #0]
 801014c:	69ba      	ldr	r2, [r7, #24]
 801014e:	0151      	lsls	r1, r2, #5
 8010150:	69fa      	ldr	r2, [r7, #28]
 8010152:	440a      	add	r2, r1
 8010154:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8010158:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 801015c:	6013      	str	r3, [r2, #0]
 801015e:	e16a      	b.n	8010436 <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8010160:	69bb      	ldr	r3, [r7, #24]
 8010162:	015a      	lsls	r2, r3, #5
 8010164:	69fb      	ldr	r3, [r7, #28]
 8010166:	4413      	add	r3, r2
 8010168:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801016c:	681b      	ldr	r3, [r3, #0]
 801016e:	69ba      	ldr	r2, [r7, #24]
 8010170:	0151      	lsls	r1, r2, #5
 8010172:	69fa      	ldr	r2, [r7, #28]
 8010174:	440a      	add	r2, r1
 8010176:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801017a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 801017e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8010180:	68bb      	ldr	r3, [r7, #8]
 8010182:	791b      	ldrb	r3, [r3, #4]
 8010184:	2b01      	cmp	r3, #1
 8010186:	d015      	beq.n	80101b4 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8010188:	68bb      	ldr	r3, [r7, #8]
 801018a:	691b      	ldr	r3, [r3, #16]
 801018c:	2b00      	cmp	r3, #0
 801018e:	f000 8152 	beq.w	8010436 <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8010192:	69fb      	ldr	r3, [r7, #28]
 8010194:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010198:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801019a:	68bb      	ldr	r3, [r7, #8]
 801019c:	781b      	ldrb	r3, [r3, #0]
 801019e:	f003 030f 	and.w	r3, r3, #15
 80101a2:	2101      	movs	r1, #1
 80101a4:	fa01 f303 	lsl.w	r3, r1, r3
 80101a8:	69f9      	ldr	r1, [r7, #28]
 80101aa:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80101ae:	4313      	orrs	r3, r2
 80101b0:	634b      	str	r3, [r1, #52]	@ 0x34
 80101b2:	e140      	b.n	8010436 <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80101b4:	69fb      	ldr	r3, [r7, #28]
 80101b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80101ba:	689b      	ldr	r3, [r3, #8]
 80101bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80101c0:	2b00      	cmp	r3, #0
 80101c2:	d117      	bne.n	80101f4 <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80101c4:	69bb      	ldr	r3, [r7, #24]
 80101c6:	015a      	lsls	r2, r3, #5
 80101c8:	69fb      	ldr	r3, [r7, #28]
 80101ca:	4413      	add	r3, r2
 80101cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80101d0:	681b      	ldr	r3, [r3, #0]
 80101d2:	69ba      	ldr	r2, [r7, #24]
 80101d4:	0151      	lsls	r1, r2, #5
 80101d6:	69fa      	ldr	r2, [r7, #28]
 80101d8:	440a      	add	r2, r1
 80101da:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80101de:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80101e2:	6013      	str	r3, [r2, #0]
 80101e4:	e016      	b.n	8010214 <USB_EPStartXfer+0x308>
 80101e6:	bf00      	nop
 80101e8:	e007ffff 	.word	0xe007ffff
 80101ec:	fff80000 	.word	0xfff80000
 80101f0:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80101f4:	69bb      	ldr	r3, [r7, #24]
 80101f6:	015a      	lsls	r2, r3, #5
 80101f8:	69fb      	ldr	r3, [r7, #28]
 80101fa:	4413      	add	r3, r2
 80101fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010200:	681b      	ldr	r3, [r3, #0]
 8010202:	69ba      	ldr	r2, [r7, #24]
 8010204:	0151      	lsls	r1, r2, #5
 8010206:	69fa      	ldr	r2, [r7, #28]
 8010208:	440a      	add	r2, r1
 801020a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801020e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8010212:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8010214:	68bb      	ldr	r3, [r7, #8]
 8010216:	68d9      	ldr	r1, [r3, #12]
 8010218:	68bb      	ldr	r3, [r7, #8]
 801021a:	781a      	ldrb	r2, [r3, #0]
 801021c:	68bb      	ldr	r3, [r7, #8]
 801021e:	691b      	ldr	r3, [r3, #16]
 8010220:	b298      	uxth	r0, r3
 8010222:	79fb      	ldrb	r3, [r7, #7]
 8010224:	9300      	str	r3, [sp, #0]
 8010226:	4603      	mov	r3, r0
 8010228:	68f8      	ldr	r0, [r7, #12]
 801022a:	f000 f9b9 	bl	80105a0 <USB_WritePacket>
 801022e:	e102      	b.n	8010436 <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8010230:	69bb      	ldr	r3, [r7, #24]
 8010232:	015a      	lsls	r2, r3, #5
 8010234:	69fb      	ldr	r3, [r7, #28]
 8010236:	4413      	add	r3, r2
 8010238:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801023c:	691a      	ldr	r2, [r3, #16]
 801023e:	69bb      	ldr	r3, [r7, #24]
 8010240:	0159      	lsls	r1, r3, #5
 8010242:	69fb      	ldr	r3, [r7, #28]
 8010244:	440b      	add	r3, r1
 8010246:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801024a:	4619      	mov	r1, r3
 801024c:	4b7c      	ldr	r3, [pc, #496]	@ (8010440 <USB_EPStartXfer+0x534>)
 801024e:	4013      	ands	r3, r2
 8010250:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8010252:	69bb      	ldr	r3, [r7, #24]
 8010254:	015a      	lsls	r2, r3, #5
 8010256:	69fb      	ldr	r3, [r7, #28]
 8010258:	4413      	add	r3, r2
 801025a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801025e:	691a      	ldr	r2, [r3, #16]
 8010260:	69bb      	ldr	r3, [r7, #24]
 8010262:	0159      	lsls	r1, r3, #5
 8010264:	69fb      	ldr	r3, [r7, #28]
 8010266:	440b      	add	r3, r1
 8010268:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801026c:	4619      	mov	r1, r3
 801026e:	4b75      	ldr	r3, [pc, #468]	@ (8010444 <USB_EPStartXfer+0x538>)
 8010270:	4013      	ands	r3, r2
 8010272:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 8010274:	69bb      	ldr	r3, [r7, #24]
 8010276:	2b00      	cmp	r3, #0
 8010278:	d12f      	bne.n	80102da <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 801027a:	68bb      	ldr	r3, [r7, #8]
 801027c:	691b      	ldr	r3, [r3, #16]
 801027e:	2b00      	cmp	r3, #0
 8010280:	d003      	beq.n	801028a <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 8010282:	68bb      	ldr	r3, [r7, #8]
 8010284:	689a      	ldr	r2, [r3, #8]
 8010286:	68bb      	ldr	r3, [r7, #8]
 8010288:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 801028a:	68bb      	ldr	r3, [r7, #8]
 801028c:	689a      	ldr	r2, [r3, #8]
 801028e:	68bb      	ldr	r3, [r7, #8]
 8010290:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8010292:	69bb      	ldr	r3, [r7, #24]
 8010294:	015a      	lsls	r2, r3, #5
 8010296:	69fb      	ldr	r3, [r7, #28]
 8010298:	4413      	add	r3, r2
 801029a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801029e:	691a      	ldr	r2, [r3, #16]
 80102a0:	68bb      	ldr	r3, [r7, #8]
 80102a2:	6a1b      	ldr	r3, [r3, #32]
 80102a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80102a8:	69b9      	ldr	r1, [r7, #24]
 80102aa:	0148      	lsls	r0, r1, #5
 80102ac:	69f9      	ldr	r1, [r7, #28]
 80102ae:	4401      	add	r1, r0
 80102b0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80102b4:	4313      	orrs	r3, r2
 80102b6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80102b8:	69bb      	ldr	r3, [r7, #24]
 80102ba:	015a      	lsls	r2, r3, #5
 80102bc:	69fb      	ldr	r3, [r7, #28]
 80102be:	4413      	add	r3, r2
 80102c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80102c4:	691b      	ldr	r3, [r3, #16]
 80102c6:	69ba      	ldr	r2, [r7, #24]
 80102c8:	0151      	lsls	r1, r2, #5
 80102ca:	69fa      	ldr	r2, [r7, #28]
 80102cc:	440a      	add	r2, r1
 80102ce:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80102d2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80102d6:	6113      	str	r3, [r2, #16]
 80102d8:	e05f      	b.n	801039a <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 80102da:	68bb      	ldr	r3, [r7, #8]
 80102dc:	691b      	ldr	r3, [r3, #16]
 80102de:	2b00      	cmp	r3, #0
 80102e0:	d123      	bne.n	801032a <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80102e2:	69bb      	ldr	r3, [r7, #24]
 80102e4:	015a      	lsls	r2, r3, #5
 80102e6:	69fb      	ldr	r3, [r7, #28]
 80102e8:	4413      	add	r3, r2
 80102ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80102ee:	691a      	ldr	r2, [r3, #16]
 80102f0:	68bb      	ldr	r3, [r7, #8]
 80102f2:	689b      	ldr	r3, [r3, #8]
 80102f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80102f8:	69b9      	ldr	r1, [r7, #24]
 80102fa:	0148      	lsls	r0, r1, #5
 80102fc:	69f9      	ldr	r1, [r7, #28]
 80102fe:	4401      	add	r1, r0
 8010300:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8010304:	4313      	orrs	r3, r2
 8010306:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8010308:	69bb      	ldr	r3, [r7, #24]
 801030a:	015a      	lsls	r2, r3, #5
 801030c:	69fb      	ldr	r3, [r7, #28]
 801030e:	4413      	add	r3, r2
 8010310:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010314:	691b      	ldr	r3, [r3, #16]
 8010316:	69ba      	ldr	r2, [r7, #24]
 8010318:	0151      	lsls	r1, r2, #5
 801031a:	69fa      	ldr	r2, [r7, #28]
 801031c:	440a      	add	r2, r1
 801031e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010322:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8010326:	6113      	str	r3, [r2, #16]
 8010328:	e037      	b.n	801039a <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 801032a:	68bb      	ldr	r3, [r7, #8]
 801032c:	691a      	ldr	r2, [r3, #16]
 801032e:	68bb      	ldr	r3, [r7, #8]
 8010330:	689b      	ldr	r3, [r3, #8]
 8010332:	4413      	add	r3, r2
 8010334:	1e5a      	subs	r2, r3, #1
 8010336:	68bb      	ldr	r3, [r7, #8]
 8010338:	689b      	ldr	r3, [r3, #8]
 801033a:	fbb2 f3f3 	udiv	r3, r2, r3
 801033e:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8010340:	68bb      	ldr	r3, [r7, #8]
 8010342:	689b      	ldr	r3, [r3, #8]
 8010344:	8afa      	ldrh	r2, [r7, #22]
 8010346:	fb03 f202 	mul.w	r2, r3, r2
 801034a:	68bb      	ldr	r3, [r7, #8]
 801034c:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 801034e:	69bb      	ldr	r3, [r7, #24]
 8010350:	015a      	lsls	r2, r3, #5
 8010352:	69fb      	ldr	r3, [r7, #28]
 8010354:	4413      	add	r3, r2
 8010356:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801035a:	691a      	ldr	r2, [r3, #16]
 801035c:	8afb      	ldrh	r3, [r7, #22]
 801035e:	04d9      	lsls	r1, r3, #19
 8010360:	4b39      	ldr	r3, [pc, #228]	@ (8010448 <USB_EPStartXfer+0x53c>)
 8010362:	400b      	ands	r3, r1
 8010364:	69b9      	ldr	r1, [r7, #24]
 8010366:	0148      	lsls	r0, r1, #5
 8010368:	69f9      	ldr	r1, [r7, #28]
 801036a:	4401      	add	r1, r0
 801036c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8010370:	4313      	orrs	r3, r2
 8010372:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8010374:	69bb      	ldr	r3, [r7, #24]
 8010376:	015a      	lsls	r2, r3, #5
 8010378:	69fb      	ldr	r3, [r7, #28]
 801037a:	4413      	add	r3, r2
 801037c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010380:	691a      	ldr	r2, [r3, #16]
 8010382:	68bb      	ldr	r3, [r7, #8]
 8010384:	6a1b      	ldr	r3, [r3, #32]
 8010386:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801038a:	69b9      	ldr	r1, [r7, #24]
 801038c:	0148      	lsls	r0, r1, #5
 801038e:	69f9      	ldr	r1, [r7, #28]
 8010390:	4401      	add	r1, r0
 8010392:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8010396:	4313      	orrs	r3, r2
 8010398:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 801039a:	79fb      	ldrb	r3, [r7, #7]
 801039c:	2b01      	cmp	r3, #1
 801039e:	d10d      	bne.n	80103bc <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80103a0:	68bb      	ldr	r3, [r7, #8]
 80103a2:	68db      	ldr	r3, [r3, #12]
 80103a4:	2b00      	cmp	r3, #0
 80103a6:	d009      	beq.n	80103bc <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80103a8:	68bb      	ldr	r3, [r7, #8]
 80103aa:	68d9      	ldr	r1, [r3, #12]
 80103ac:	69bb      	ldr	r3, [r7, #24]
 80103ae:	015a      	lsls	r2, r3, #5
 80103b0:	69fb      	ldr	r3, [r7, #28]
 80103b2:	4413      	add	r3, r2
 80103b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80103b8:	460a      	mov	r2, r1
 80103ba:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80103bc:	68bb      	ldr	r3, [r7, #8]
 80103be:	791b      	ldrb	r3, [r3, #4]
 80103c0:	2b01      	cmp	r3, #1
 80103c2:	d128      	bne.n	8010416 <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80103c4:	69fb      	ldr	r3, [r7, #28]
 80103c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80103ca:	689b      	ldr	r3, [r3, #8]
 80103cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80103d0:	2b00      	cmp	r3, #0
 80103d2:	d110      	bne.n	80103f6 <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80103d4:	69bb      	ldr	r3, [r7, #24]
 80103d6:	015a      	lsls	r2, r3, #5
 80103d8:	69fb      	ldr	r3, [r7, #28]
 80103da:	4413      	add	r3, r2
 80103dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80103e0:	681b      	ldr	r3, [r3, #0]
 80103e2:	69ba      	ldr	r2, [r7, #24]
 80103e4:	0151      	lsls	r1, r2, #5
 80103e6:	69fa      	ldr	r2, [r7, #28]
 80103e8:	440a      	add	r2, r1
 80103ea:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80103ee:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80103f2:	6013      	str	r3, [r2, #0]
 80103f4:	e00f      	b.n	8010416 <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80103f6:	69bb      	ldr	r3, [r7, #24]
 80103f8:	015a      	lsls	r2, r3, #5
 80103fa:	69fb      	ldr	r3, [r7, #28]
 80103fc:	4413      	add	r3, r2
 80103fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010402:	681b      	ldr	r3, [r3, #0]
 8010404:	69ba      	ldr	r2, [r7, #24]
 8010406:	0151      	lsls	r1, r2, #5
 8010408:	69fa      	ldr	r2, [r7, #28]
 801040a:	440a      	add	r2, r1
 801040c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010410:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8010414:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8010416:	69bb      	ldr	r3, [r7, #24]
 8010418:	015a      	lsls	r2, r3, #5
 801041a:	69fb      	ldr	r3, [r7, #28]
 801041c:	4413      	add	r3, r2
 801041e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010422:	681b      	ldr	r3, [r3, #0]
 8010424:	69ba      	ldr	r2, [r7, #24]
 8010426:	0151      	lsls	r1, r2, #5
 8010428:	69fa      	ldr	r2, [r7, #28]
 801042a:	440a      	add	r2, r1
 801042c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010430:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8010434:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8010436:	2300      	movs	r3, #0
}
 8010438:	4618      	mov	r0, r3
 801043a:	3720      	adds	r7, #32
 801043c:	46bd      	mov	sp, r7
 801043e:	bd80      	pop	{r7, pc}
 8010440:	fff80000 	.word	0xfff80000
 8010444:	e007ffff 	.word	0xe007ffff
 8010448:	1ff80000 	.word	0x1ff80000

0801044c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801044c:	b480      	push	{r7}
 801044e:	b087      	sub	sp, #28
 8010450:	af00      	add	r7, sp, #0
 8010452:	6078      	str	r0, [r7, #4]
 8010454:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8010456:	2300      	movs	r3, #0
 8010458:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 801045a:	2300      	movs	r3, #0
 801045c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801045e:	687b      	ldr	r3, [r7, #4]
 8010460:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8010462:	683b      	ldr	r3, [r7, #0]
 8010464:	785b      	ldrb	r3, [r3, #1]
 8010466:	2b01      	cmp	r3, #1
 8010468:	d14a      	bne.n	8010500 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 801046a:	683b      	ldr	r3, [r7, #0]
 801046c:	781b      	ldrb	r3, [r3, #0]
 801046e:	015a      	lsls	r2, r3, #5
 8010470:	693b      	ldr	r3, [r7, #16]
 8010472:	4413      	add	r3, r2
 8010474:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010478:	681b      	ldr	r3, [r3, #0]
 801047a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 801047e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8010482:	f040 8086 	bne.w	8010592 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8010486:	683b      	ldr	r3, [r7, #0]
 8010488:	781b      	ldrb	r3, [r3, #0]
 801048a:	015a      	lsls	r2, r3, #5
 801048c:	693b      	ldr	r3, [r7, #16]
 801048e:	4413      	add	r3, r2
 8010490:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010494:	681b      	ldr	r3, [r3, #0]
 8010496:	683a      	ldr	r2, [r7, #0]
 8010498:	7812      	ldrb	r2, [r2, #0]
 801049a:	0151      	lsls	r1, r2, #5
 801049c:	693a      	ldr	r2, [r7, #16]
 801049e:	440a      	add	r2, r1
 80104a0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80104a4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80104a8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80104aa:	683b      	ldr	r3, [r7, #0]
 80104ac:	781b      	ldrb	r3, [r3, #0]
 80104ae:	015a      	lsls	r2, r3, #5
 80104b0:	693b      	ldr	r3, [r7, #16]
 80104b2:	4413      	add	r3, r2
 80104b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80104b8:	681b      	ldr	r3, [r3, #0]
 80104ba:	683a      	ldr	r2, [r7, #0]
 80104bc:	7812      	ldrb	r2, [r2, #0]
 80104be:	0151      	lsls	r1, r2, #5
 80104c0:	693a      	ldr	r2, [r7, #16]
 80104c2:	440a      	add	r2, r1
 80104c4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80104c8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80104cc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80104ce:	68fb      	ldr	r3, [r7, #12]
 80104d0:	3301      	adds	r3, #1
 80104d2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80104d4:	68fb      	ldr	r3, [r7, #12]
 80104d6:	f242 7210 	movw	r2, #10000	@ 0x2710
 80104da:	4293      	cmp	r3, r2
 80104dc:	d902      	bls.n	80104e4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80104de:	2301      	movs	r3, #1
 80104e0:	75fb      	strb	r3, [r7, #23]
          break;
 80104e2:	e056      	b.n	8010592 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80104e4:	683b      	ldr	r3, [r7, #0]
 80104e6:	781b      	ldrb	r3, [r3, #0]
 80104e8:	015a      	lsls	r2, r3, #5
 80104ea:	693b      	ldr	r3, [r7, #16]
 80104ec:	4413      	add	r3, r2
 80104ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80104f2:	681b      	ldr	r3, [r3, #0]
 80104f4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80104f8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80104fc:	d0e7      	beq.n	80104ce <USB_EPStopXfer+0x82>
 80104fe:	e048      	b.n	8010592 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8010500:	683b      	ldr	r3, [r7, #0]
 8010502:	781b      	ldrb	r3, [r3, #0]
 8010504:	015a      	lsls	r2, r3, #5
 8010506:	693b      	ldr	r3, [r7, #16]
 8010508:	4413      	add	r3, r2
 801050a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801050e:	681b      	ldr	r3, [r3, #0]
 8010510:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8010514:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8010518:	d13b      	bne.n	8010592 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 801051a:	683b      	ldr	r3, [r7, #0]
 801051c:	781b      	ldrb	r3, [r3, #0]
 801051e:	015a      	lsls	r2, r3, #5
 8010520:	693b      	ldr	r3, [r7, #16]
 8010522:	4413      	add	r3, r2
 8010524:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010528:	681b      	ldr	r3, [r3, #0]
 801052a:	683a      	ldr	r2, [r7, #0]
 801052c:	7812      	ldrb	r2, [r2, #0]
 801052e:	0151      	lsls	r1, r2, #5
 8010530:	693a      	ldr	r2, [r7, #16]
 8010532:	440a      	add	r2, r1
 8010534:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010538:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 801053c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 801053e:	683b      	ldr	r3, [r7, #0]
 8010540:	781b      	ldrb	r3, [r3, #0]
 8010542:	015a      	lsls	r2, r3, #5
 8010544:	693b      	ldr	r3, [r7, #16]
 8010546:	4413      	add	r3, r2
 8010548:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801054c:	681b      	ldr	r3, [r3, #0]
 801054e:	683a      	ldr	r2, [r7, #0]
 8010550:	7812      	ldrb	r2, [r2, #0]
 8010552:	0151      	lsls	r1, r2, #5
 8010554:	693a      	ldr	r2, [r7, #16]
 8010556:	440a      	add	r2, r1
 8010558:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801055c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8010560:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8010562:	68fb      	ldr	r3, [r7, #12]
 8010564:	3301      	adds	r3, #1
 8010566:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8010568:	68fb      	ldr	r3, [r7, #12]
 801056a:	f242 7210 	movw	r2, #10000	@ 0x2710
 801056e:	4293      	cmp	r3, r2
 8010570:	d902      	bls.n	8010578 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8010572:	2301      	movs	r3, #1
 8010574:	75fb      	strb	r3, [r7, #23]
          break;
 8010576:	e00c      	b.n	8010592 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8010578:	683b      	ldr	r3, [r7, #0]
 801057a:	781b      	ldrb	r3, [r3, #0]
 801057c:	015a      	lsls	r2, r3, #5
 801057e:	693b      	ldr	r3, [r7, #16]
 8010580:	4413      	add	r3, r2
 8010582:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010586:	681b      	ldr	r3, [r3, #0]
 8010588:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 801058c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8010590:	d0e7      	beq.n	8010562 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8010592:	7dfb      	ldrb	r3, [r7, #23]
}
 8010594:	4618      	mov	r0, r3
 8010596:	371c      	adds	r7, #28
 8010598:	46bd      	mov	sp, r7
 801059a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801059e:	4770      	bx	lr

080105a0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80105a0:	b480      	push	{r7}
 80105a2:	b089      	sub	sp, #36	@ 0x24
 80105a4:	af00      	add	r7, sp, #0
 80105a6:	60f8      	str	r0, [r7, #12]
 80105a8:	60b9      	str	r1, [r7, #8]
 80105aa:	4611      	mov	r1, r2
 80105ac:	461a      	mov	r2, r3
 80105ae:	460b      	mov	r3, r1
 80105b0:	71fb      	strb	r3, [r7, #7]
 80105b2:	4613      	mov	r3, r2
 80105b4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80105b6:	68fb      	ldr	r3, [r7, #12]
 80105b8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80105ba:	68bb      	ldr	r3, [r7, #8]
 80105bc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80105be:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80105c2:	2b00      	cmp	r3, #0
 80105c4:	d123      	bne.n	801060e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80105c6:	88bb      	ldrh	r3, [r7, #4]
 80105c8:	3303      	adds	r3, #3
 80105ca:	089b      	lsrs	r3, r3, #2
 80105cc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80105ce:	2300      	movs	r3, #0
 80105d0:	61bb      	str	r3, [r7, #24]
 80105d2:	e018      	b.n	8010606 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80105d4:	79fb      	ldrb	r3, [r7, #7]
 80105d6:	031a      	lsls	r2, r3, #12
 80105d8:	697b      	ldr	r3, [r7, #20]
 80105da:	4413      	add	r3, r2
 80105dc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80105e0:	461a      	mov	r2, r3
 80105e2:	69fb      	ldr	r3, [r7, #28]
 80105e4:	681b      	ldr	r3, [r3, #0]
 80105e6:	6013      	str	r3, [r2, #0]
      pSrc++;
 80105e8:	69fb      	ldr	r3, [r7, #28]
 80105ea:	3301      	adds	r3, #1
 80105ec:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80105ee:	69fb      	ldr	r3, [r7, #28]
 80105f0:	3301      	adds	r3, #1
 80105f2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80105f4:	69fb      	ldr	r3, [r7, #28]
 80105f6:	3301      	adds	r3, #1
 80105f8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80105fa:	69fb      	ldr	r3, [r7, #28]
 80105fc:	3301      	adds	r3, #1
 80105fe:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8010600:	69bb      	ldr	r3, [r7, #24]
 8010602:	3301      	adds	r3, #1
 8010604:	61bb      	str	r3, [r7, #24]
 8010606:	69ba      	ldr	r2, [r7, #24]
 8010608:	693b      	ldr	r3, [r7, #16]
 801060a:	429a      	cmp	r2, r3
 801060c:	d3e2      	bcc.n	80105d4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 801060e:	2300      	movs	r3, #0
}
 8010610:	4618      	mov	r0, r3
 8010612:	3724      	adds	r7, #36	@ 0x24
 8010614:	46bd      	mov	sp, r7
 8010616:	f85d 7b04 	ldr.w	r7, [sp], #4
 801061a:	4770      	bx	lr

0801061c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 801061c:	b480      	push	{r7}
 801061e:	b08b      	sub	sp, #44	@ 0x2c
 8010620:	af00      	add	r7, sp, #0
 8010622:	60f8      	str	r0, [r7, #12]
 8010624:	60b9      	str	r1, [r7, #8]
 8010626:	4613      	mov	r3, r2
 8010628:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801062a:	68fb      	ldr	r3, [r7, #12]
 801062c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 801062e:	68bb      	ldr	r3, [r7, #8]
 8010630:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8010632:	88fb      	ldrh	r3, [r7, #6]
 8010634:	089b      	lsrs	r3, r3, #2
 8010636:	b29b      	uxth	r3, r3
 8010638:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 801063a:	88fb      	ldrh	r3, [r7, #6]
 801063c:	f003 0303 	and.w	r3, r3, #3
 8010640:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8010642:	2300      	movs	r3, #0
 8010644:	623b      	str	r3, [r7, #32]
 8010646:	e014      	b.n	8010672 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8010648:	69bb      	ldr	r3, [r7, #24]
 801064a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801064e:	681a      	ldr	r2, [r3, #0]
 8010650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010652:	601a      	str	r2, [r3, #0]
    pDest++;
 8010654:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010656:	3301      	adds	r3, #1
 8010658:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 801065a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801065c:	3301      	adds	r3, #1
 801065e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8010660:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010662:	3301      	adds	r3, #1
 8010664:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8010666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010668:	3301      	adds	r3, #1
 801066a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 801066c:	6a3b      	ldr	r3, [r7, #32]
 801066e:	3301      	adds	r3, #1
 8010670:	623b      	str	r3, [r7, #32]
 8010672:	6a3a      	ldr	r2, [r7, #32]
 8010674:	697b      	ldr	r3, [r7, #20]
 8010676:	429a      	cmp	r2, r3
 8010678:	d3e6      	bcc.n	8010648 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 801067a:	8bfb      	ldrh	r3, [r7, #30]
 801067c:	2b00      	cmp	r3, #0
 801067e:	d01e      	beq.n	80106be <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8010680:	2300      	movs	r3, #0
 8010682:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8010684:	69bb      	ldr	r3, [r7, #24]
 8010686:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801068a:	461a      	mov	r2, r3
 801068c:	f107 0310 	add.w	r3, r7, #16
 8010690:	6812      	ldr	r2, [r2, #0]
 8010692:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8010694:	693a      	ldr	r2, [r7, #16]
 8010696:	6a3b      	ldr	r3, [r7, #32]
 8010698:	b2db      	uxtb	r3, r3
 801069a:	00db      	lsls	r3, r3, #3
 801069c:	fa22 f303 	lsr.w	r3, r2, r3
 80106a0:	b2da      	uxtb	r2, r3
 80106a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80106a4:	701a      	strb	r2, [r3, #0]
      i++;
 80106a6:	6a3b      	ldr	r3, [r7, #32]
 80106a8:	3301      	adds	r3, #1
 80106aa:	623b      	str	r3, [r7, #32]
      pDest++;
 80106ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80106ae:	3301      	adds	r3, #1
 80106b0:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80106b2:	8bfb      	ldrh	r3, [r7, #30]
 80106b4:	3b01      	subs	r3, #1
 80106b6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80106b8:	8bfb      	ldrh	r3, [r7, #30]
 80106ba:	2b00      	cmp	r3, #0
 80106bc:	d1ea      	bne.n	8010694 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80106be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80106c0:	4618      	mov	r0, r3
 80106c2:	372c      	adds	r7, #44	@ 0x2c
 80106c4:	46bd      	mov	sp, r7
 80106c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106ca:	4770      	bx	lr

080106cc <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80106cc:	b480      	push	{r7}
 80106ce:	b085      	sub	sp, #20
 80106d0:	af00      	add	r7, sp, #0
 80106d2:	6078      	str	r0, [r7, #4]
 80106d4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80106d6:	687b      	ldr	r3, [r7, #4]
 80106d8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80106da:	683b      	ldr	r3, [r7, #0]
 80106dc:	781b      	ldrb	r3, [r3, #0]
 80106de:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80106e0:	683b      	ldr	r3, [r7, #0]
 80106e2:	785b      	ldrb	r3, [r3, #1]
 80106e4:	2b01      	cmp	r3, #1
 80106e6:	d12c      	bne.n	8010742 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80106e8:	68bb      	ldr	r3, [r7, #8]
 80106ea:	015a      	lsls	r2, r3, #5
 80106ec:	68fb      	ldr	r3, [r7, #12]
 80106ee:	4413      	add	r3, r2
 80106f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80106f4:	681b      	ldr	r3, [r3, #0]
 80106f6:	2b00      	cmp	r3, #0
 80106f8:	db12      	blt.n	8010720 <USB_EPSetStall+0x54>
 80106fa:	68bb      	ldr	r3, [r7, #8]
 80106fc:	2b00      	cmp	r3, #0
 80106fe:	d00f      	beq.n	8010720 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8010700:	68bb      	ldr	r3, [r7, #8]
 8010702:	015a      	lsls	r2, r3, #5
 8010704:	68fb      	ldr	r3, [r7, #12]
 8010706:	4413      	add	r3, r2
 8010708:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801070c:	681b      	ldr	r3, [r3, #0]
 801070e:	68ba      	ldr	r2, [r7, #8]
 8010710:	0151      	lsls	r1, r2, #5
 8010712:	68fa      	ldr	r2, [r7, #12]
 8010714:	440a      	add	r2, r1
 8010716:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801071a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 801071e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8010720:	68bb      	ldr	r3, [r7, #8]
 8010722:	015a      	lsls	r2, r3, #5
 8010724:	68fb      	ldr	r3, [r7, #12]
 8010726:	4413      	add	r3, r2
 8010728:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801072c:	681b      	ldr	r3, [r3, #0]
 801072e:	68ba      	ldr	r2, [r7, #8]
 8010730:	0151      	lsls	r1, r2, #5
 8010732:	68fa      	ldr	r2, [r7, #12]
 8010734:	440a      	add	r2, r1
 8010736:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801073a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 801073e:	6013      	str	r3, [r2, #0]
 8010740:	e02b      	b.n	801079a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8010742:	68bb      	ldr	r3, [r7, #8]
 8010744:	015a      	lsls	r2, r3, #5
 8010746:	68fb      	ldr	r3, [r7, #12]
 8010748:	4413      	add	r3, r2
 801074a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801074e:	681b      	ldr	r3, [r3, #0]
 8010750:	2b00      	cmp	r3, #0
 8010752:	db12      	blt.n	801077a <USB_EPSetStall+0xae>
 8010754:	68bb      	ldr	r3, [r7, #8]
 8010756:	2b00      	cmp	r3, #0
 8010758:	d00f      	beq.n	801077a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 801075a:	68bb      	ldr	r3, [r7, #8]
 801075c:	015a      	lsls	r2, r3, #5
 801075e:	68fb      	ldr	r3, [r7, #12]
 8010760:	4413      	add	r3, r2
 8010762:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010766:	681b      	ldr	r3, [r3, #0]
 8010768:	68ba      	ldr	r2, [r7, #8]
 801076a:	0151      	lsls	r1, r2, #5
 801076c:	68fa      	ldr	r2, [r7, #12]
 801076e:	440a      	add	r2, r1
 8010770:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010774:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8010778:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 801077a:	68bb      	ldr	r3, [r7, #8]
 801077c:	015a      	lsls	r2, r3, #5
 801077e:	68fb      	ldr	r3, [r7, #12]
 8010780:	4413      	add	r3, r2
 8010782:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010786:	681b      	ldr	r3, [r3, #0]
 8010788:	68ba      	ldr	r2, [r7, #8]
 801078a:	0151      	lsls	r1, r2, #5
 801078c:	68fa      	ldr	r2, [r7, #12]
 801078e:	440a      	add	r2, r1
 8010790:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010794:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8010798:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801079a:	2300      	movs	r3, #0
}
 801079c:	4618      	mov	r0, r3
 801079e:	3714      	adds	r7, #20
 80107a0:	46bd      	mov	sp, r7
 80107a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107a6:	4770      	bx	lr

080107a8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80107a8:	b480      	push	{r7}
 80107aa:	b085      	sub	sp, #20
 80107ac:	af00      	add	r7, sp, #0
 80107ae:	6078      	str	r0, [r7, #4]
 80107b0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80107b2:	687b      	ldr	r3, [r7, #4]
 80107b4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80107b6:	683b      	ldr	r3, [r7, #0]
 80107b8:	781b      	ldrb	r3, [r3, #0]
 80107ba:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80107bc:	683b      	ldr	r3, [r7, #0]
 80107be:	785b      	ldrb	r3, [r3, #1]
 80107c0:	2b01      	cmp	r3, #1
 80107c2:	d128      	bne.n	8010816 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80107c4:	68bb      	ldr	r3, [r7, #8]
 80107c6:	015a      	lsls	r2, r3, #5
 80107c8:	68fb      	ldr	r3, [r7, #12]
 80107ca:	4413      	add	r3, r2
 80107cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80107d0:	681b      	ldr	r3, [r3, #0]
 80107d2:	68ba      	ldr	r2, [r7, #8]
 80107d4:	0151      	lsls	r1, r2, #5
 80107d6:	68fa      	ldr	r2, [r7, #12]
 80107d8:	440a      	add	r2, r1
 80107da:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80107de:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80107e2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80107e4:	683b      	ldr	r3, [r7, #0]
 80107e6:	791b      	ldrb	r3, [r3, #4]
 80107e8:	2b03      	cmp	r3, #3
 80107ea:	d003      	beq.n	80107f4 <USB_EPClearStall+0x4c>
 80107ec:	683b      	ldr	r3, [r7, #0]
 80107ee:	791b      	ldrb	r3, [r3, #4]
 80107f0:	2b02      	cmp	r3, #2
 80107f2:	d138      	bne.n	8010866 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80107f4:	68bb      	ldr	r3, [r7, #8]
 80107f6:	015a      	lsls	r2, r3, #5
 80107f8:	68fb      	ldr	r3, [r7, #12]
 80107fa:	4413      	add	r3, r2
 80107fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010800:	681b      	ldr	r3, [r3, #0]
 8010802:	68ba      	ldr	r2, [r7, #8]
 8010804:	0151      	lsls	r1, r2, #5
 8010806:	68fa      	ldr	r2, [r7, #12]
 8010808:	440a      	add	r2, r1
 801080a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801080e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8010812:	6013      	str	r3, [r2, #0]
 8010814:	e027      	b.n	8010866 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8010816:	68bb      	ldr	r3, [r7, #8]
 8010818:	015a      	lsls	r2, r3, #5
 801081a:	68fb      	ldr	r3, [r7, #12]
 801081c:	4413      	add	r3, r2
 801081e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010822:	681b      	ldr	r3, [r3, #0]
 8010824:	68ba      	ldr	r2, [r7, #8]
 8010826:	0151      	lsls	r1, r2, #5
 8010828:	68fa      	ldr	r2, [r7, #12]
 801082a:	440a      	add	r2, r1
 801082c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010830:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8010834:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8010836:	683b      	ldr	r3, [r7, #0]
 8010838:	791b      	ldrb	r3, [r3, #4]
 801083a:	2b03      	cmp	r3, #3
 801083c:	d003      	beq.n	8010846 <USB_EPClearStall+0x9e>
 801083e:	683b      	ldr	r3, [r7, #0]
 8010840:	791b      	ldrb	r3, [r3, #4]
 8010842:	2b02      	cmp	r3, #2
 8010844:	d10f      	bne.n	8010866 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8010846:	68bb      	ldr	r3, [r7, #8]
 8010848:	015a      	lsls	r2, r3, #5
 801084a:	68fb      	ldr	r3, [r7, #12]
 801084c:	4413      	add	r3, r2
 801084e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010852:	681b      	ldr	r3, [r3, #0]
 8010854:	68ba      	ldr	r2, [r7, #8]
 8010856:	0151      	lsls	r1, r2, #5
 8010858:	68fa      	ldr	r2, [r7, #12]
 801085a:	440a      	add	r2, r1
 801085c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010860:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8010864:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8010866:	2300      	movs	r3, #0
}
 8010868:	4618      	mov	r0, r3
 801086a:	3714      	adds	r7, #20
 801086c:	46bd      	mov	sp, r7
 801086e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010872:	4770      	bx	lr

08010874 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8010874:	b480      	push	{r7}
 8010876:	b085      	sub	sp, #20
 8010878:	af00      	add	r7, sp, #0
 801087a:	6078      	str	r0, [r7, #4]
 801087c:	460b      	mov	r3, r1
 801087e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010880:	687b      	ldr	r3, [r7, #4]
 8010882:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8010884:	68fb      	ldr	r3, [r7, #12]
 8010886:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801088a:	681b      	ldr	r3, [r3, #0]
 801088c:	68fa      	ldr	r2, [r7, #12]
 801088e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8010892:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8010896:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8010898:	68fb      	ldr	r3, [r7, #12]
 801089a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801089e:	681a      	ldr	r2, [r3, #0]
 80108a0:	78fb      	ldrb	r3, [r7, #3]
 80108a2:	011b      	lsls	r3, r3, #4
 80108a4:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 80108a8:	68f9      	ldr	r1, [r7, #12]
 80108aa:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80108ae:	4313      	orrs	r3, r2
 80108b0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80108b2:	2300      	movs	r3, #0
}
 80108b4:	4618      	mov	r0, r3
 80108b6:	3714      	adds	r7, #20
 80108b8:	46bd      	mov	sp, r7
 80108ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108be:	4770      	bx	lr

080108c0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80108c0:	b480      	push	{r7}
 80108c2:	b085      	sub	sp, #20
 80108c4:	af00      	add	r7, sp, #0
 80108c6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80108c8:	687b      	ldr	r3, [r7, #4]
 80108ca:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80108cc:	68fb      	ldr	r3, [r7, #12]
 80108ce:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80108d2:	681b      	ldr	r3, [r3, #0]
 80108d4:	68fa      	ldr	r2, [r7, #12]
 80108d6:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80108da:	f023 0303 	bic.w	r3, r3, #3
 80108de:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80108e0:	68fb      	ldr	r3, [r7, #12]
 80108e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80108e6:	685b      	ldr	r3, [r3, #4]
 80108e8:	68fa      	ldr	r2, [r7, #12]
 80108ea:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80108ee:	f023 0302 	bic.w	r3, r3, #2
 80108f2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80108f4:	2300      	movs	r3, #0
}
 80108f6:	4618      	mov	r0, r3
 80108f8:	3714      	adds	r7, #20
 80108fa:	46bd      	mov	sp, r7
 80108fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010900:	4770      	bx	lr

08010902 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8010902:	b480      	push	{r7}
 8010904:	b085      	sub	sp, #20
 8010906:	af00      	add	r7, sp, #0
 8010908:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801090a:	687b      	ldr	r3, [r7, #4]
 801090c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 801090e:	68fb      	ldr	r3, [r7, #12]
 8010910:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8010914:	681b      	ldr	r3, [r3, #0]
 8010916:	68fa      	ldr	r2, [r7, #12]
 8010918:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 801091c:	f023 0303 	bic.w	r3, r3, #3
 8010920:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8010922:	68fb      	ldr	r3, [r7, #12]
 8010924:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010928:	685b      	ldr	r3, [r3, #4]
 801092a:	68fa      	ldr	r2, [r7, #12]
 801092c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8010930:	f043 0302 	orr.w	r3, r3, #2
 8010934:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8010936:	2300      	movs	r3, #0
}
 8010938:	4618      	mov	r0, r3
 801093a:	3714      	adds	r7, #20
 801093c:	46bd      	mov	sp, r7
 801093e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010942:	4770      	bx	lr

08010944 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8010944:	b480      	push	{r7}
 8010946:	b085      	sub	sp, #20
 8010948:	af00      	add	r7, sp, #0
 801094a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 801094c:	687b      	ldr	r3, [r7, #4]
 801094e:	695b      	ldr	r3, [r3, #20]
 8010950:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8010952:	687b      	ldr	r3, [r7, #4]
 8010954:	699b      	ldr	r3, [r3, #24]
 8010956:	68fa      	ldr	r2, [r7, #12]
 8010958:	4013      	ands	r3, r2
 801095a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 801095c:	68fb      	ldr	r3, [r7, #12]
}
 801095e:	4618      	mov	r0, r3
 8010960:	3714      	adds	r7, #20
 8010962:	46bd      	mov	sp, r7
 8010964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010968:	4770      	bx	lr

0801096a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 801096a:	b480      	push	{r7}
 801096c:	b085      	sub	sp, #20
 801096e:	af00      	add	r7, sp, #0
 8010970:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010972:	687b      	ldr	r3, [r7, #4]
 8010974:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8010976:	68fb      	ldr	r3, [r7, #12]
 8010978:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801097c:	699b      	ldr	r3, [r3, #24]
 801097e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8010980:	68fb      	ldr	r3, [r7, #12]
 8010982:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010986:	69db      	ldr	r3, [r3, #28]
 8010988:	68ba      	ldr	r2, [r7, #8]
 801098a:	4013      	ands	r3, r2
 801098c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 801098e:	68bb      	ldr	r3, [r7, #8]
 8010990:	0c1b      	lsrs	r3, r3, #16
}
 8010992:	4618      	mov	r0, r3
 8010994:	3714      	adds	r7, #20
 8010996:	46bd      	mov	sp, r7
 8010998:	f85d 7b04 	ldr.w	r7, [sp], #4
 801099c:	4770      	bx	lr

0801099e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 801099e:	b480      	push	{r7}
 80109a0:	b085      	sub	sp, #20
 80109a2:	af00      	add	r7, sp, #0
 80109a4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80109a6:	687b      	ldr	r3, [r7, #4]
 80109a8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80109aa:	68fb      	ldr	r3, [r7, #12]
 80109ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80109b0:	699b      	ldr	r3, [r3, #24]
 80109b2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80109b4:	68fb      	ldr	r3, [r7, #12]
 80109b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80109ba:	69db      	ldr	r3, [r3, #28]
 80109bc:	68ba      	ldr	r2, [r7, #8]
 80109be:	4013      	ands	r3, r2
 80109c0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80109c2:	68bb      	ldr	r3, [r7, #8]
 80109c4:	b29b      	uxth	r3, r3
}
 80109c6:	4618      	mov	r0, r3
 80109c8:	3714      	adds	r7, #20
 80109ca:	46bd      	mov	sp, r7
 80109cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109d0:	4770      	bx	lr

080109d2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80109d2:	b480      	push	{r7}
 80109d4:	b085      	sub	sp, #20
 80109d6:	af00      	add	r7, sp, #0
 80109d8:	6078      	str	r0, [r7, #4]
 80109da:	460b      	mov	r3, r1
 80109dc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80109de:	687b      	ldr	r3, [r7, #4]
 80109e0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80109e2:	78fb      	ldrb	r3, [r7, #3]
 80109e4:	015a      	lsls	r2, r3, #5
 80109e6:	68fb      	ldr	r3, [r7, #12]
 80109e8:	4413      	add	r3, r2
 80109ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80109ee:	689b      	ldr	r3, [r3, #8]
 80109f0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80109f2:	68fb      	ldr	r3, [r7, #12]
 80109f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80109f8:	695b      	ldr	r3, [r3, #20]
 80109fa:	68ba      	ldr	r2, [r7, #8]
 80109fc:	4013      	ands	r3, r2
 80109fe:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8010a00:	68bb      	ldr	r3, [r7, #8]
}
 8010a02:	4618      	mov	r0, r3
 8010a04:	3714      	adds	r7, #20
 8010a06:	46bd      	mov	sp, r7
 8010a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a0c:	4770      	bx	lr

08010a0e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8010a0e:	b480      	push	{r7}
 8010a10:	b087      	sub	sp, #28
 8010a12:	af00      	add	r7, sp, #0
 8010a14:	6078      	str	r0, [r7, #4]
 8010a16:	460b      	mov	r3, r1
 8010a18:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010a1a:	687b      	ldr	r3, [r7, #4]
 8010a1c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8010a1e:	697b      	ldr	r3, [r7, #20]
 8010a20:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010a24:	691b      	ldr	r3, [r3, #16]
 8010a26:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8010a28:	697b      	ldr	r3, [r7, #20]
 8010a2a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010a2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010a30:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8010a32:	78fb      	ldrb	r3, [r7, #3]
 8010a34:	f003 030f 	and.w	r3, r3, #15
 8010a38:	68fa      	ldr	r2, [r7, #12]
 8010a3a:	fa22 f303 	lsr.w	r3, r2, r3
 8010a3e:	01db      	lsls	r3, r3, #7
 8010a40:	b2db      	uxtb	r3, r3
 8010a42:	693a      	ldr	r2, [r7, #16]
 8010a44:	4313      	orrs	r3, r2
 8010a46:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8010a48:	78fb      	ldrb	r3, [r7, #3]
 8010a4a:	015a      	lsls	r2, r3, #5
 8010a4c:	697b      	ldr	r3, [r7, #20]
 8010a4e:	4413      	add	r3, r2
 8010a50:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010a54:	689b      	ldr	r3, [r3, #8]
 8010a56:	693a      	ldr	r2, [r7, #16]
 8010a58:	4013      	ands	r3, r2
 8010a5a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8010a5c:	68bb      	ldr	r3, [r7, #8]
}
 8010a5e:	4618      	mov	r0, r3
 8010a60:	371c      	adds	r7, #28
 8010a62:	46bd      	mov	sp, r7
 8010a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a68:	4770      	bx	lr

08010a6a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8010a6a:	b480      	push	{r7}
 8010a6c:	b083      	sub	sp, #12
 8010a6e:	af00      	add	r7, sp, #0
 8010a70:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8010a72:	687b      	ldr	r3, [r7, #4]
 8010a74:	695b      	ldr	r3, [r3, #20]
 8010a76:	f003 0301 	and.w	r3, r3, #1
}
 8010a7a:	4618      	mov	r0, r3
 8010a7c:	370c      	adds	r7, #12
 8010a7e:	46bd      	mov	sp, r7
 8010a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a84:	4770      	bx	lr
	...

08010a88 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8010a88:	b480      	push	{r7}
 8010a8a:	b085      	sub	sp, #20
 8010a8c:	af00      	add	r7, sp, #0
 8010a8e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010a90:	687b      	ldr	r3, [r7, #4]
 8010a92:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8010a94:	68fb      	ldr	r3, [r7, #12]
 8010a96:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010a9a:	681a      	ldr	r2, [r3, #0]
 8010a9c:	68fb      	ldr	r3, [r7, #12]
 8010a9e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010aa2:	4619      	mov	r1, r3
 8010aa4:	4b09      	ldr	r3, [pc, #36]	@ (8010acc <USB_ActivateSetup+0x44>)
 8010aa6:	4013      	ands	r3, r2
 8010aa8:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8010aaa:	68fb      	ldr	r3, [r7, #12]
 8010aac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010ab0:	685b      	ldr	r3, [r3, #4]
 8010ab2:	68fa      	ldr	r2, [r7, #12]
 8010ab4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8010ab8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8010abc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8010abe:	2300      	movs	r3, #0
}
 8010ac0:	4618      	mov	r0, r3
 8010ac2:	3714      	adds	r7, #20
 8010ac4:	46bd      	mov	sp, r7
 8010ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010aca:	4770      	bx	lr
 8010acc:	fffff800 	.word	0xfffff800

08010ad0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8010ad0:	b480      	push	{r7}
 8010ad2:	b087      	sub	sp, #28
 8010ad4:	af00      	add	r7, sp, #0
 8010ad6:	60f8      	str	r0, [r7, #12]
 8010ad8:	460b      	mov	r3, r1
 8010ada:	607a      	str	r2, [r7, #4]
 8010adc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010ade:	68fb      	ldr	r3, [r7, #12]
 8010ae0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8010ae2:	68fb      	ldr	r3, [r7, #12]
 8010ae4:	333c      	adds	r3, #60	@ 0x3c
 8010ae6:	3304      	adds	r3, #4
 8010ae8:	681b      	ldr	r3, [r3, #0]
 8010aea:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8010aec:	693b      	ldr	r3, [r7, #16]
 8010aee:	4a26      	ldr	r2, [pc, #152]	@ (8010b88 <USB_EP0_OutStart+0xb8>)
 8010af0:	4293      	cmp	r3, r2
 8010af2:	d90a      	bls.n	8010b0a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8010af4:	697b      	ldr	r3, [r7, #20]
 8010af6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010afa:	681b      	ldr	r3, [r3, #0]
 8010afc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8010b00:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8010b04:	d101      	bne.n	8010b0a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8010b06:	2300      	movs	r3, #0
 8010b08:	e037      	b.n	8010b7a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8010b0a:	697b      	ldr	r3, [r7, #20]
 8010b0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010b10:	461a      	mov	r2, r3
 8010b12:	2300      	movs	r3, #0
 8010b14:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8010b16:	697b      	ldr	r3, [r7, #20]
 8010b18:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010b1c:	691b      	ldr	r3, [r3, #16]
 8010b1e:	697a      	ldr	r2, [r7, #20]
 8010b20:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010b24:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8010b28:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8010b2a:	697b      	ldr	r3, [r7, #20]
 8010b2c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010b30:	691b      	ldr	r3, [r3, #16]
 8010b32:	697a      	ldr	r2, [r7, #20]
 8010b34:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010b38:	f043 0318 	orr.w	r3, r3, #24
 8010b3c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8010b3e:	697b      	ldr	r3, [r7, #20]
 8010b40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010b44:	691b      	ldr	r3, [r3, #16]
 8010b46:	697a      	ldr	r2, [r7, #20]
 8010b48:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010b4c:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8010b50:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8010b52:	7afb      	ldrb	r3, [r7, #11]
 8010b54:	2b01      	cmp	r3, #1
 8010b56:	d10f      	bne.n	8010b78 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8010b58:	697b      	ldr	r3, [r7, #20]
 8010b5a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010b5e:	461a      	mov	r2, r3
 8010b60:	687b      	ldr	r3, [r7, #4]
 8010b62:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8010b64:	697b      	ldr	r3, [r7, #20]
 8010b66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010b6a:	681b      	ldr	r3, [r3, #0]
 8010b6c:	697a      	ldr	r2, [r7, #20]
 8010b6e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010b72:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8010b76:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8010b78:	2300      	movs	r3, #0
}
 8010b7a:	4618      	mov	r0, r3
 8010b7c:	371c      	adds	r7, #28
 8010b7e:	46bd      	mov	sp, r7
 8010b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b84:	4770      	bx	lr
 8010b86:	bf00      	nop
 8010b88:	4f54300a 	.word	0x4f54300a

08010b8c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8010b8c:	b480      	push	{r7}
 8010b8e:	b085      	sub	sp, #20
 8010b90:	af00      	add	r7, sp, #0
 8010b92:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8010b94:	2300      	movs	r3, #0
 8010b96:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8010b98:	68fb      	ldr	r3, [r7, #12]
 8010b9a:	3301      	adds	r3, #1
 8010b9c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8010b9e:	68fb      	ldr	r3, [r7, #12]
 8010ba0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8010ba4:	d901      	bls.n	8010baa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8010ba6:	2303      	movs	r3, #3
 8010ba8:	e01b      	b.n	8010be2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8010baa:	687b      	ldr	r3, [r7, #4]
 8010bac:	691b      	ldr	r3, [r3, #16]
 8010bae:	2b00      	cmp	r3, #0
 8010bb0:	daf2      	bge.n	8010b98 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8010bb2:	2300      	movs	r3, #0
 8010bb4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8010bb6:	687b      	ldr	r3, [r7, #4]
 8010bb8:	691b      	ldr	r3, [r3, #16]
 8010bba:	f043 0201 	orr.w	r2, r3, #1
 8010bbe:	687b      	ldr	r3, [r7, #4]
 8010bc0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8010bc2:	68fb      	ldr	r3, [r7, #12]
 8010bc4:	3301      	adds	r3, #1
 8010bc6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8010bc8:	68fb      	ldr	r3, [r7, #12]
 8010bca:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8010bce:	d901      	bls.n	8010bd4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8010bd0:	2303      	movs	r3, #3
 8010bd2:	e006      	b.n	8010be2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8010bd4:	687b      	ldr	r3, [r7, #4]
 8010bd6:	691b      	ldr	r3, [r3, #16]
 8010bd8:	f003 0301 	and.w	r3, r3, #1
 8010bdc:	2b01      	cmp	r3, #1
 8010bde:	d0f0      	beq.n	8010bc2 <USB_CoreReset+0x36>

  return HAL_OK;
 8010be0:	2300      	movs	r3, #0
}
 8010be2:	4618      	mov	r0, r3
 8010be4:	3714      	adds	r7, #20
 8010be6:	46bd      	mov	sp, r7
 8010be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bec:	4770      	bx	lr
	...

08010bf0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010bf0:	b580      	push	{r7, lr}
 8010bf2:	b084      	sub	sp, #16
 8010bf4:	af00      	add	r7, sp, #0
 8010bf6:	6078      	str	r0, [r7, #4]
 8010bf8:	460b      	mov	r3, r1
 8010bfa:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8010bfc:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8010c00:	f002 fcca 	bl	8013598 <USBD_static_malloc>
 8010c04:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8010c06:	68fb      	ldr	r3, [r7, #12]
 8010c08:	2b00      	cmp	r3, #0
 8010c0a:	d109      	bne.n	8010c20 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8010c0c:	687b      	ldr	r3, [r7, #4]
 8010c0e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010c12:	687b      	ldr	r3, [r7, #4]
 8010c14:	32b0      	adds	r2, #176	@ 0xb0
 8010c16:	2100      	movs	r1, #0
 8010c18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8010c1c:	2302      	movs	r3, #2
 8010c1e:	e0d4      	b.n	8010dca <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8010c20:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8010c24:	2100      	movs	r1, #0
 8010c26:	68f8      	ldr	r0, [r7, #12]
 8010c28:	f004 f817 	bl	8014c5a <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8010c2c:	687b      	ldr	r3, [r7, #4]
 8010c2e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010c32:	687b      	ldr	r3, [r7, #4]
 8010c34:	32b0      	adds	r2, #176	@ 0xb0
 8010c36:	68f9      	ldr	r1, [r7, #12]
 8010c38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8010c3c:	687b      	ldr	r3, [r7, #4]
 8010c3e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010c42:	687b      	ldr	r3, [r7, #4]
 8010c44:	32b0      	adds	r2, #176	@ 0xb0
 8010c46:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8010c4a:	687b      	ldr	r3, [r7, #4]
 8010c4c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010c50:	687b      	ldr	r3, [r7, #4]
 8010c52:	7c1b      	ldrb	r3, [r3, #16]
 8010c54:	2b00      	cmp	r3, #0
 8010c56:	d138      	bne.n	8010cca <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8010c58:	4b5e      	ldr	r3, [pc, #376]	@ (8010dd4 <USBD_CDC_Init+0x1e4>)
 8010c5a:	7819      	ldrb	r1, [r3, #0]
 8010c5c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8010c60:	2202      	movs	r2, #2
 8010c62:	6878      	ldr	r0, [r7, #4]
 8010c64:	f002 fb75 	bl	8013352 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8010c68:	4b5a      	ldr	r3, [pc, #360]	@ (8010dd4 <USBD_CDC_Init+0x1e4>)
 8010c6a:	781b      	ldrb	r3, [r3, #0]
 8010c6c:	f003 020f 	and.w	r2, r3, #15
 8010c70:	6879      	ldr	r1, [r7, #4]
 8010c72:	4613      	mov	r3, r2
 8010c74:	009b      	lsls	r3, r3, #2
 8010c76:	4413      	add	r3, r2
 8010c78:	009b      	lsls	r3, r3, #2
 8010c7a:	440b      	add	r3, r1
 8010c7c:	3324      	adds	r3, #36	@ 0x24
 8010c7e:	2201      	movs	r2, #1
 8010c80:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8010c82:	4b55      	ldr	r3, [pc, #340]	@ (8010dd8 <USBD_CDC_Init+0x1e8>)
 8010c84:	7819      	ldrb	r1, [r3, #0]
 8010c86:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8010c8a:	2202      	movs	r2, #2
 8010c8c:	6878      	ldr	r0, [r7, #4]
 8010c8e:	f002 fb60 	bl	8013352 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8010c92:	4b51      	ldr	r3, [pc, #324]	@ (8010dd8 <USBD_CDC_Init+0x1e8>)
 8010c94:	781b      	ldrb	r3, [r3, #0]
 8010c96:	f003 020f 	and.w	r2, r3, #15
 8010c9a:	6879      	ldr	r1, [r7, #4]
 8010c9c:	4613      	mov	r3, r2
 8010c9e:	009b      	lsls	r3, r3, #2
 8010ca0:	4413      	add	r3, r2
 8010ca2:	009b      	lsls	r3, r3, #2
 8010ca4:	440b      	add	r3, r1
 8010ca6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8010caa:	2201      	movs	r2, #1
 8010cac:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8010cae:	4b4b      	ldr	r3, [pc, #300]	@ (8010ddc <USBD_CDC_Init+0x1ec>)
 8010cb0:	781b      	ldrb	r3, [r3, #0]
 8010cb2:	f003 020f 	and.w	r2, r3, #15
 8010cb6:	6879      	ldr	r1, [r7, #4]
 8010cb8:	4613      	mov	r3, r2
 8010cba:	009b      	lsls	r3, r3, #2
 8010cbc:	4413      	add	r3, r2
 8010cbe:	009b      	lsls	r3, r3, #2
 8010cc0:	440b      	add	r3, r1
 8010cc2:	3326      	adds	r3, #38	@ 0x26
 8010cc4:	2210      	movs	r2, #16
 8010cc6:	801a      	strh	r2, [r3, #0]
 8010cc8:	e035      	b.n	8010d36 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8010cca:	4b42      	ldr	r3, [pc, #264]	@ (8010dd4 <USBD_CDC_Init+0x1e4>)
 8010ccc:	7819      	ldrb	r1, [r3, #0]
 8010cce:	2340      	movs	r3, #64	@ 0x40
 8010cd0:	2202      	movs	r2, #2
 8010cd2:	6878      	ldr	r0, [r7, #4]
 8010cd4:	f002 fb3d 	bl	8013352 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8010cd8:	4b3e      	ldr	r3, [pc, #248]	@ (8010dd4 <USBD_CDC_Init+0x1e4>)
 8010cda:	781b      	ldrb	r3, [r3, #0]
 8010cdc:	f003 020f 	and.w	r2, r3, #15
 8010ce0:	6879      	ldr	r1, [r7, #4]
 8010ce2:	4613      	mov	r3, r2
 8010ce4:	009b      	lsls	r3, r3, #2
 8010ce6:	4413      	add	r3, r2
 8010ce8:	009b      	lsls	r3, r3, #2
 8010cea:	440b      	add	r3, r1
 8010cec:	3324      	adds	r3, #36	@ 0x24
 8010cee:	2201      	movs	r2, #1
 8010cf0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8010cf2:	4b39      	ldr	r3, [pc, #228]	@ (8010dd8 <USBD_CDC_Init+0x1e8>)
 8010cf4:	7819      	ldrb	r1, [r3, #0]
 8010cf6:	2340      	movs	r3, #64	@ 0x40
 8010cf8:	2202      	movs	r2, #2
 8010cfa:	6878      	ldr	r0, [r7, #4]
 8010cfc:	f002 fb29 	bl	8013352 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8010d00:	4b35      	ldr	r3, [pc, #212]	@ (8010dd8 <USBD_CDC_Init+0x1e8>)
 8010d02:	781b      	ldrb	r3, [r3, #0]
 8010d04:	f003 020f 	and.w	r2, r3, #15
 8010d08:	6879      	ldr	r1, [r7, #4]
 8010d0a:	4613      	mov	r3, r2
 8010d0c:	009b      	lsls	r3, r3, #2
 8010d0e:	4413      	add	r3, r2
 8010d10:	009b      	lsls	r3, r3, #2
 8010d12:	440b      	add	r3, r1
 8010d14:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8010d18:	2201      	movs	r2, #1
 8010d1a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8010d1c:	4b2f      	ldr	r3, [pc, #188]	@ (8010ddc <USBD_CDC_Init+0x1ec>)
 8010d1e:	781b      	ldrb	r3, [r3, #0]
 8010d20:	f003 020f 	and.w	r2, r3, #15
 8010d24:	6879      	ldr	r1, [r7, #4]
 8010d26:	4613      	mov	r3, r2
 8010d28:	009b      	lsls	r3, r3, #2
 8010d2a:	4413      	add	r3, r2
 8010d2c:	009b      	lsls	r3, r3, #2
 8010d2e:	440b      	add	r3, r1
 8010d30:	3326      	adds	r3, #38	@ 0x26
 8010d32:	2210      	movs	r2, #16
 8010d34:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8010d36:	4b29      	ldr	r3, [pc, #164]	@ (8010ddc <USBD_CDC_Init+0x1ec>)
 8010d38:	7819      	ldrb	r1, [r3, #0]
 8010d3a:	2308      	movs	r3, #8
 8010d3c:	2203      	movs	r2, #3
 8010d3e:	6878      	ldr	r0, [r7, #4]
 8010d40:	f002 fb07 	bl	8013352 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8010d44:	4b25      	ldr	r3, [pc, #148]	@ (8010ddc <USBD_CDC_Init+0x1ec>)
 8010d46:	781b      	ldrb	r3, [r3, #0]
 8010d48:	f003 020f 	and.w	r2, r3, #15
 8010d4c:	6879      	ldr	r1, [r7, #4]
 8010d4e:	4613      	mov	r3, r2
 8010d50:	009b      	lsls	r3, r3, #2
 8010d52:	4413      	add	r3, r2
 8010d54:	009b      	lsls	r3, r3, #2
 8010d56:	440b      	add	r3, r1
 8010d58:	3324      	adds	r3, #36	@ 0x24
 8010d5a:	2201      	movs	r2, #1
 8010d5c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8010d5e:	68fb      	ldr	r3, [r7, #12]
 8010d60:	2200      	movs	r2, #0
 8010d62:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8010d66:	687b      	ldr	r3, [r7, #4]
 8010d68:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8010d6c:	687a      	ldr	r2, [r7, #4]
 8010d6e:	33b0      	adds	r3, #176	@ 0xb0
 8010d70:	009b      	lsls	r3, r3, #2
 8010d72:	4413      	add	r3, r2
 8010d74:	685b      	ldr	r3, [r3, #4]
 8010d76:	681b      	ldr	r3, [r3, #0]
 8010d78:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8010d7a:	68fb      	ldr	r3, [r7, #12]
 8010d7c:	2200      	movs	r2, #0
 8010d7e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8010d82:	68fb      	ldr	r3, [r7, #12]
 8010d84:	2200      	movs	r2, #0
 8010d86:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8010d8a:	68fb      	ldr	r3, [r7, #12]
 8010d8c:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8010d90:	2b00      	cmp	r3, #0
 8010d92:	d101      	bne.n	8010d98 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8010d94:	2302      	movs	r3, #2
 8010d96:	e018      	b.n	8010dca <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010d98:	687b      	ldr	r3, [r7, #4]
 8010d9a:	7c1b      	ldrb	r3, [r3, #16]
 8010d9c:	2b00      	cmp	r3, #0
 8010d9e:	d10a      	bne.n	8010db6 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8010da0:	4b0d      	ldr	r3, [pc, #52]	@ (8010dd8 <USBD_CDC_Init+0x1e8>)
 8010da2:	7819      	ldrb	r1, [r3, #0]
 8010da4:	68fb      	ldr	r3, [r7, #12]
 8010da6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8010daa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8010dae:	6878      	ldr	r0, [r7, #4]
 8010db0:	f002 fbbe 	bl	8013530 <USBD_LL_PrepareReceive>
 8010db4:	e008      	b.n	8010dc8 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8010db6:	4b08      	ldr	r3, [pc, #32]	@ (8010dd8 <USBD_CDC_Init+0x1e8>)
 8010db8:	7819      	ldrb	r1, [r3, #0]
 8010dba:	68fb      	ldr	r3, [r7, #12]
 8010dbc:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8010dc0:	2340      	movs	r3, #64	@ 0x40
 8010dc2:	6878      	ldr	r0, [r7, #4]
 8010dc4:	f002 fbb4 	bl	8013530 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8010dc8:	2300      	movs	r3, #0
}
 8010dca:	4618      	mov	r0, r3
 8010dcc:	3710      	adds	r7, #16
 8010dce:	46bd      	mov	sp, r7
 8010dd0:	bd80      	pop	{r7, pc}
 8010dd2:	bf00      	nop
 8010dd4:	24000097 	.word	0x24000097
 8010dd8:	24000098 	.word	0x24000098
 8010ddc:	24000099 	.word	0x24000099

08010de0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010de0:	b580      	push	{r7, lr}
 8010de2:	b082      	sub	sp, #8
 8010de4:	af00      	add	r7, sp, #0
 8010de6:	6078      	str	r0, [r7, #4]
 8010de8:	460b      	mov	r3, r1
 8010dea:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8010dec:	4b3a      	ldr	r3, [pc, #232]	@ (8010ed8 <USBD_CDC_DeInit+0xf8>)
 8010dee:	781b      	ldrb	r3, [r3, #0]
 8010df0:	4619      	mov	r1, r3
 8010df2:	6878      	ldr	r0, [r7, #4]
 8010df4:	f002 fad3 	bl	801339e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8010df8:	4b37      	ldr	r3, [pc, #220]	@ (8010ed8 <USBD_CDC_DeInit+0xf8>)
 8010dfa:	781b      	ldrb	r3, [r3, #0]
 8010dfc:	f003 020f 	and.w	r2, r3, #15
 8010e00:	6879      	ldr	r1, [r7, #4]
 8010e02:	4613      	mov	r3, r2
 8010e04:	009b      	lsls	r3, r3, #2
 8010e06:	4413      	add	r3, r2
 8010e08:	009b      	lsls	r3, r3, #2
 8010e0a:	440b      	add	r3, r1
 8010e0c:	3324      	adds	r3, #36	@ 0x24
 8010e0e:	2200      	movs	r2, #0
 8010e10:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8010e12:	4b32      	ldr	r3, [pc, #200]	@ (8010edc <USBD_CDC_DeInit+0xfc>)
 8010e14:	781b      	ldrb	r3, [r3, #0]
 8010e16:	4619      	mov	r1, r3
 8010e18:	6878      	ldr	r0, [r7, #4]
 8010e1a:	f002 fac0 	bl	801339e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8010e1e:	4b2f      	ldr	r3, [pc, #188]	@ (8010edc <USBD_CDC_DeInit+0xfc>)
 8010e20:	781b      	ldrb	r3, [r3, #0]
 8010e22:	f003 020f 	and.w	r2, r3, #15
 8010e26:	6879      	ldr	r1, [r7, #4]
 8010e28:	4613      	mov	r3, r2
 8010e2a:	009b      	lsls	r3, r3, #2
 8010e2c:	4413      	add	r3, r2
 8010e2e:	009b      	lsls	r3, r3, #2
 8010e30:	440b      	add	r3, r1
 8010e32:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8010e36:	2200      	movs	r2, #0
 8010e38:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8010e3a:	4b29      	ldr	r3, [pc, #164]	@ (8010ee0 <USBD_CDC_DeInit+0x100>)
 8010e3c:	781b      	ldrb	r3, [r3, #0]
 8010e3e:	4619      	mov	r1, r3
 8010e40:	6878      	ldr	r0, [r7, #4]
 8010e42:	f002 faac 	bl	801339e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8010e46:	4b26      	ldr	r3, [pc, #152]	@ (8010ee0 <USBD_CDC_DeInit+0x100>)
 8010e48:	781b      	ldrb	r3, [r3, #0]
 8010e4a:	f003 020f 	and.w	r2, r3, #15
 8010e4e:	6879      	ldr	r1, [r7, #4]
 8010e50:	4613      	mov	r3, r2
 8010e52:	009b      	lsls	r3, r3, #2
 8010e54:	4413      	add	r3, r2
 8010e56:	009b      	lsls	r3, r3, #2
 8010e58:	440b      	add	r3, r1
 8010e5a:	3324      	adds	r3, #36	@ 0x24
 8010e5c:	2200      	movs	r2, #0
 8010e5e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8010e60:	4b1f      	ldr	r3, [pc, #124]	@ (8010ee0 <USBD_CDC_DeInit+0x100>)
 8010e62:	781b      	ldrb	r3, [r3, #0]
 8010e64:	f003 020f 	and.w	r2, r3, #15
 8010e68:	6879      	ldr	r1, [r7, #4]
 8010e6a:	4613      	mov	r3, r2
 8010e6c:	009b      	lsls	r3, r3, #2
 8010e6e:	4413      	add	r3, r2
 8010e70:	009b      	lsls	r3, r3, #2
 8010e72:	440b      	add	r3, r1
 8010e74:	3326      	adds	r3, #38	@ 0x26
 8010e76:	2200      	movs	r2, #0
 8010e78:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8010e7a:	687b      	ldr	r3, [r7, #4]
 8010e7c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010e80:	687b      	ldr	r3, [r7, #4]
 8010e82:	32b0      	adds	r2, #176	@ 0xb0
 8010e84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010e88:	2b00      	cmp	r3, #0
 8010e8a:	d01f      	beq.n	8010ecc <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8010e8c:	687b      	ldr	r3, [r7, #4]
 8010e8e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8010e92:	687a      	ldr	r2, [r7, #4]
 8010e94:	33b0      	adds	r3, #176	@ 0xb0
 8010e96:	009b      	lsls	r3, r3, #2
 8010e98:	4413      	add	r3, r2
 8010e9a:	685b      	ldr	r3, [r3, #4]
 8010e9c:	685b      	ldr	r3, [r3, #4]
 8010e9e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8010ea0:	687b      	ldr	r3, [r7, #4]
 8010ea2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010ea6:	687b      	ldr	r3, [r7, #4]
 8010ea8:	32b0      	adds	r2, #176	@ 0xb0
 8010eaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010eae:	4618      	mov	r0, r3
 8010eb0:	f002 fb80 	bl	80135b4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8010eb4:	687b      	ldr	r3, [r7, #4]
 8010eb6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010eba:	687b      	ldr	r3, [r7, #4]
 8010ebc:	32b0      	adds	r2, #176	@ 0xb0
 8010ebe:	2100      	movs	r1, #0
 8010ec0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8010ec4:	687b      	ldr	r3, [r7, #4]
 8010ec6:	2200      	movs	r2, #0
 8010ec8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8010ecc:	2300      	movs	r3, #0
}
 8010ece:	4618      	mov	r0, r3
 8010ed0:	3708      	adds	r7, #8
 8010ed2:	46bd      	mov	sp, r7
 8010ed4:	bd80      	pop	{r7, pc}
 8010ed6:	bf00      	nop
 8010ed8:	24000097 	.word	0x24000097
 8010edc:	24000098 	.word	0x24000098
 8010ee0:	24000099 	.word	0x24000099

08010ee4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8010ee4:	b580      	push	{r7, lr}
 8010ee6:	b086      	sub	sp, #24
 8010ee8:	af00      	add	r7, sp, #0
 8010eea:	6078      	str	r0, [r7, #4]
 8010eec:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010eee:	687b      	ldr	r3, [r7, #4]
 8010ef0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010ef4:	687b      	ldr	r3, [r7, #4]
 8010ef6:	32b0      	adds	r2, #176	@ 0xb0
 8010ef8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010efc:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8010efe:	2300      	movs	r3, #0
 8010f00:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8010f02:	2300      	movs	r3, #0
 8010f04:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8010f06:	2300      	movs	r3, #0
 8010f08:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8010f0a:	693b      	ldr	r3, [r7, #16]
 8010f0c:	2b00      	cmp	r3, #0
 8010f0e:	d101      	bne.n	8010f14 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8010f10:	2303      	movs	r3, #3
 8010f12:	e0bf      	b.n	8011094 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010f14:	683b      	ldr	r3, [r7, #0]
 8010f16:	781b      	ldrb	r3, [r3, #0]
 8010f18:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8010f1c:	2b00      	cmp	r3, #0
 8010f1e:	d050      	beq.n	8010fc2 <USBD_CDC_Setup+0xde>
 8010f20:	2b20      	cmp	r3, #32
 8010f22:	f040 80af 	bne.w	8011084 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8010f26:	683b      	ldr	r3, [r7, #0]
 8010f28:	88db      	ldrh	r3, [r3, #6]
 8010f2a:	2b00      	cmp	r3, #0
 8010f2c:	d03a      	beq.n	8010fa4 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8010f2e:	683b      	ldr	r3, [r7, #0]
 8010f30:	781b      	ldrb	r3, [r3, #0]
 8010f32:	b25b      	sxtb	r3, r3
 8010f34:	2b00      	cmp	r3, #0
 8010f36:	da1b      	bge.n	8010f70 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8010f38:	687b      	ldr	r3, [r7, #4]
 8010f3a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8010f3e:	687a      	ldr	r2, [r7, #4]
 8010f40:	33b0      	adds	r3, #176	@ 0xb0
 8010f42:	009b      	lsls	r3, r3, #2
 8010f44:	4413      	add	r3, r2
 8010f46:	685b      	ldr	r3, [r3, #4]
 8010f48:	689b      	ldr	r3, [r3, #8]
 8010f4a:	683a      	ldr	r2, [r7, #0]
 8010f4c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8010f4e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8010f50:	683a      	ldr	r2, [r7, #0]
 8010f52:	88d2      	ldrh	r2, [r2, #6]
 8010f54:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8010f56:	683b      	ldr	r3, [r7, #0]
 8010f58:	88db      	ldrh	r3, [r3, #6]
 8010f5a:	2b07      	cmp	r3, #7
 8010f5c:	bf28      	it	cs
 8010f5e:	2307      	movcs	r3, #7
 8010f60:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8010f62:	693b      	ldr	r3, [r7, #16]
 8010f64:	89fa      	ldrh	r2, [r7, #14]
 8010f66:	4619      	mov	r1, r3
 8010f68:	6878      	ldr	r0, [r7, #4]
 8010f6a:	f001 fdbd 	bl	8012ae8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8010f6e:	e090      	b.n	8011092 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8010f70:	683b      	ldr	r3, [r7, #0]
 8010f72:	785a      	ldrb	r2, [r3, #1]
 8010f74:	693b      	ldr	r3, [r7, #16]
 8010f76:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8010f7a:	683b      	ldr	r3, [r7, #0]
 8010f7c:	88db      	ldrh	r3, [r3, #6]
 8010f7e:	2b3f      	cmp	r3, #63	@ 0x3f
 8010f80:	d803      	bhi.n	8010f8a <USBD_CDC_Setup+0xa6>
 8010f82:	683b      	ldr	r3, [r7, #0]
 8010f84:	88db      	ldrh	r3, [r3, #6]
 8010f86:	b2da      	uxtb	r2, r3
 8010f88:	e000      	b.n	8010f8c <USBD_CDC_Setup+0xa8>
 8010f8a:	2240      	movs	r2, #64	@ 0x40
 8010f8c:	693b      	ldr	r3, [r7, #16]
 8010f8e:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8010f92:	6939      	ldr	r1, [r7, #16]
 8010f94:	693b      	ldr	r3, [r7, #16]
 8010f96:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8010f9a:	461a      	mov	r2, r3
 8010f9c:	6878      	ldr	r0, [r7, #4]
 8010f9e:	f001 fdcf 	bl	8012b40 <USBD_CtlPrepareRx>
      break;
 8010fa2:	e076      	b.n	8011092 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8010fa4:	687b      	ldr	r3, [r7, #4]
 8010fa6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8010faa:	687a      	ldr	r2, [r7, #4]
 8010fac:	33b0      	adds	r3, #176	@ 0xb0
 8010fae:	009b      	lsls	r3, r3, #2
 8010fb0:	4413      	add	r3, r2
 8010fb2:	685b      	ldr	r3, [r3, #4]
 8010fb4:	689b      	ldr	r3, [r3, #8]
 8010fb6:	683a      	ldr	r2, [r7, #0]
 8010fb8:	7850      	ldrb	r0, [r2, #1]
 8010fba:	2200      	movs	r2, #0
 8010fbc:	6839      	ldr	r1, [r7, #0]
 8010fbe:	4798      	blx	r3
      break;
 8010fc0:	e067      	b.n	8011092 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8010fc2:	683b      	ldr	r3, [r7, #0]
 8010fc4:	785b      	ldrb	r3, [r3, #1]
 8010fc6:	2b0b      	cmp	r3, #11
 8010fc8:	d851      	bhi.n	801106e <USBD_CDC_Setup+0x18a>
 8010fca:	a201      	add	r2, pc, #4	@ (adr r2, 8010fd0 <USBD_CDC_Setup+0xec>)
 8010fcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010fd0:	08011001 	.word	0x08011001
 8010fd4:	0801107d 	.word	0x0801107d
 8010fd8:	0801106f 	.word	0x0801106f
 8010fdc:	0801106f 	.word	0x0801106f
 8010fe0:	0801106f 	.word	0x0801106f
 8010fe4:	0801106f 	.word	0x0801106f
 8010fe8:	0801106f 	.word	0x0801106f
 8010fec:	0801106f 	.word	0x0801106f
 8010ff0:	0801106f 	.word	0x0801106f
 8010ff4:	0801106f 	.word	0x0801106f
 8010ff8:	0801102b 	.word	0x0801102b
 8010ffc:	08011055 	.word	0x08011055
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011000:	687b      	ldr	r3, [r7, #4]
 8011002:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011006:	b2db      	uxtb	r3, r3
 8011008:	2b03      	cmp	r3, #3
 801100a:	d107      	bne.n	801101c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 801100c:	f107 030a 	add.w	r3, r7, #10
 8011010:	2202      	movs	r2, #2
 8011012:	4619      	mov	r1, r3
 8011014:	6878      	ldr	r0, [r7, #4]
 8011016:	f001 fd67 	bl	8012ae8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801101a:	e032      	b.n	8011082 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 801101c:	6839      	ldr	r1, [r7, #0]
 801101e:	6878      	ldr	r0, [r7, #4]
 8011020:	f001 fce5 	bl	80129ee <USBD_CtlError>
            ret = USBD_FAIL;
 8011024:	2303      	movs	r3, #3
 8011026:	75fb      	strb	r3, [r7, #23]
          break;
 8011028:	e02b      	b.n	8011082 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801102a:	687b      	ldr	r3, [r7, #4]
 801102c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011030:	b2db      	uxtb	r3, r3
 8011032:	2b03      	cmp	r3, #3
 8011034:	d107      	bne.n	8011046 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8011036:	f107 030d 	add.w	r3, r7, #13
 801103a:	2201      	movs	r2, #1
 801103c:	4619      	mov	r1, r3
 801103e:	6878      	ldr	r0, [r7, #4]
 8011040:	f001 fd52 	bl	8012ae8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8011044:	e01d      	b.n	8011082 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8011046:	6839      	ldr	r1, [r7, #0]
 8011048:	6878      	ldr	r0, [r7, #4]
 801104a:	f001 fcd0 	bl	80129ee <USBD_CtlError>
            ret = USBD_FAIL;
 801104e:	2303      	movs	r3, #3
 8011050:	75fb      	strb	r3, [r7, #23]
          break;
 8011052:	e016      	b.n	8011082 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8011054:	687b      	ldr	r3, [r7, #4]
 8011056:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801105a:	b2db      	uxtb	r3, r3
 801105c:	2b03      	cmp	r3, #3
 801105e:	d00f      	beq.n	8011080 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8011060:	6839      	ldr	r1, [r7, #0]
 8011062:	6878      	ldr	r0, [r7, #4]
 8011064:	f001 fcc3 	bl	80129ee <USBD_CtlError>
            ret = USBD_FAIL;
 8011068:	2303      	movs	r3, #3
 801106a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 801106c:	e008      	b.n	8011080 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 801106e:	6839      	ldr	r1, [r7, #0]
 8011070:	6878      	ldr	r0, [r7, #4]
 8011072:	f001 fcbc 	bl	80129ee <USBD_CtlError>
          ret = USBD_FAIL;
 8011076:	2303      	movs	r3, #3
 8011078:	75fb      	strb	r3, [r7, #23]
          break;
 801107a:	e002      	b.n	8011082 <USBD_CDC_Setup+0x19e>
          break;
 801107c:	bf00      	nop
 801107e:	e008      	b.n	8011092 <USBD_CDC_Setup+0x1ae>
          break;
 8011080:	bf00      	nop
      }
      break;
 8011082:	e006      	b.n	8011092 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8011084:	6839      	ldr	r1, [r7, #0]
 8011086:	6878      	ldr	r0, [r7, #4]
 8011088:	f001 fcb1 	bl	80129ee <USBD_CtlError>
      ret = USBD_FAIL;
 801108c:	2303      	movs	r3, #3
 801108e:	75fb      	strb	r3, [r7, #23]
      break;
 8011090:	bf00      	nop
  }

  return (uint8_t)ret;
 8011092:	7dfb      	ldrb	r3, [r7, #23]
}
 8011094:	4618      	mov	r0, r3
 8011096:	3718      	adds	r7, #24
 8011098:	46bd      	mov	sp, r7
 801109a:	bd80      	pop	{r7, pc}

0801109c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801109c:	b580      	push	{r7, lr}
 801109e:	b084      	sub	sp, #16
 80110a0:	af00      	add	r7, sp, #0
 80110a2:	6078      	str	r0, [r7, #4]
 80110a4:	460b      	mov	r3, r1
 80110a6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80110a8:	687b      	ldr	r3, [r7, #4]
 80110aa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80110ae:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80110b0:	687b      	ldr	r3, [r7, #4]
 80110b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80110b6:	687b      	ldr	r3, [r7, #4]
 80110b8:	32b0      	adds	r2, #176	@ 0xb0
 80110ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80110be:	2b00      	cmp	r3, #0
 80110c0:	d101      	bne.n	80110c6 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80110c2:	2303      	movs	r3, #3
 80110c4:	e065      	b.n	8011192 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80110c6:	687b      	ldr	r3, [r7, #4]
 80110c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80110cc:	687b      	ldr	r3, [r7, #4]
 80110ce:	32b0      	adds	r2, #176	@ 0xb0
 80110d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80110d4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80110d6:	78fb      	ldrb	r3, [r7, #3]
 80110d8:	f003 020f 	and.w	r2, r3, #15
 80110dc:	6879      	ldr	r1, [r7, #4]
 80110de:	4613      	mov	r3, r2
 80110e0:	009b      	lsls	r3, r3, #2
 80110e2:	4413      	add	r3, r2
 80110e4:	009b      	lsls	r3, r3, #2
 80110e6:	440b      	add	r3, r1
 80110e8:	3318      	adds	r3, #24
 80110ea:	681b      	ldr	r3, [r3, #0]
 80110ec:	2b00      	cmp	r3, #0
 80110ee:	d02f      	beq.n	8011150 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80110f0:	78fb      	ldrb	r3, [r7, #3]
 80110f2:	f003 020f 	and.w	r2, r3, #15
 80110f6:	6879      	ldr	r1, [r7, #4]
 80110f8:	4613      	mov	r3, r2
 80110fa:	009b      	lsls	r3, r3, #2
 80110fc:	4413      	add	r3, r2
 80110fe:	009b      	lsls	r3, r3, #2
 8011100:	440b      	add	r3, r1
 8011102:	3318      	adds	r3, #24
 8011104:	681a      	ldr	r2, [r3, #0]
 8011106:	78fb      	ldrb	r3, [r7, #3]
 8011108:	f003 010f 	and.w	r1, r3, #15
 801110c:	68f8      	ldr	r0, [r7, #12]
 801110e:	460b      	mov	r3, r1
 8011110:	00db      	lsls	r3, r3, #3
 8011112:	440b      	add	r3, r1
 8011114:	009b      	lsls	r3, r3, #2
 8011116:	4403      	add	r3, r0
 8011118:	331c      	adds	r3, #28
 801111a:	681b      	ldr	r3, [r3, #0]
 801111c:	fbb2 f1f3 	udiv	r1, r2, r3
 8011120:	fb01 f303 	mul.w	r3, r1, r3
 8011124:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8011126:	2b00      	cmp	r3, #0
 8011128:	d112      	bne.n	8011150 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 801112a:	78fb      	ldrb	r3, [r7, #3]
 801112c:	f003 020f 	and.w	r2, r3, #15
 8011130:	6879      	ldr	r1, [r7, #4]
 8011132:	4613      	mov	r3, r2
 8011134:	009b      	lsls	r3, r3, #2
 8011136:	4413      	add	r3, r2
 8011138:	009b      	lsls	r3, r3, #2
 801113a:	440b      	add	r3, r1
 801113c:	3318      	adds	r3, #24
 801113e:	2200      	movs	r2, #0
 8011140:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8011142:	78f9      	ldrb	r1, [r7, #3]
 8011144:	2300      	movs	r3, #0
 8011146:	2200      	movs	r2, #0
 8011148:	6878      	ldr	r0, [r7, #4]
 801114a:	f002 f9d0 	bl	80134ee <USBD_LL_Transmit>
 801114e:	e01f      	b.n	8011190 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8011150:	68bb      	ldr	r3, [r7, #8]
 8011152:	2200      	movs	r2, #0
 8011154:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8011158:	687b      	ldr	r3, [r7, #4]
 801115a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801115e:	687a      	ldr	r2, [r7, #4]
 8011160:	33b0      	adds	r3, #176	@ 0xb0
 8011162:	009b      	lsls	r3, r3, #2
 8011164:	4413      	add	r3, r2
 8011166:	685b      	ldr	r3, [r3, #4]
 8011168:	691b      	ldr	r3, [r3, #16]
 801116a:	2b00      	cmp	r3, #0
 801116c:	d010      	beq.n	8011190 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 801116e:	687b      	ldr	r3, [r7, #4]
 8011170:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8011174:	687a      	ldr	r2, [r7, #4]
 8011176:	33b0      	adds	r3, #176	@ 0xb0
 8011178:	009b      	lsls	r3, r3, #2
 801117a:	4413      	add	r3, r2
 801117c:	685b      	ldr	r3, [r3, #4]
 801117e:	691b      	ldr	r3, [r3, #16]
 8011180:	68ba      	ldr	r2, [r7, #8]
 8011182:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8011186:	68ba      	ldr	r2, [r7, #8]
 8011188:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 801118c:	78fa      	ldrb	r2, [r7, #3]
 801118e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8011190:	2300      	movs	r3, #0
}
 8011192:	4618      	mov	r0, r3
 8011194:	3710      	adds	r7, #16
 8011196:	46bd      	mov	sp, r7
 8011198:	bd80      	pop	{r7, pc}

0801119a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801119a:	b580      	push	{r7, lr}
 801119c:	b084      	sub	sp, #16
 801119e:	af00      	add	r7, sp, #0
 80111a0:	6078      	str	r0, [r7, #4]
 80111a2:	460b      	mov	r3, r1
 80111a4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80111a6:	687b      	ldr	r3, [r7, #4]
 80111a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80111ac:	687b      	ldr	r3, [r7, #4]
 80111ae:	32b0      	adds	r2, #176	@ 0xb0
 80111b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80111b4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80111b6:	687b      	ldr	r3, [r7, #4]
 80111b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80111bc:	687b      	ldr	r3, [r7, #4]
 80111be:	32b0      	adds	r2, #176	@ 0xb0
 80111c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80111c4:	2b00      	cmp	r3, #0
 80111c6:	d101      	bne.n	80111cc <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80111c8:	2303      	movs	r3, #3
 80111ca:	e01a      	b.n	8011202 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80111cc:	78fb      	ldrb	r3, [r7, #3]
 80111ce:	4619      	mov	r1, r3
 80111d0:	6878      	ldr	r0, [r7, #4]
 80111d2:	f002 f9ce 	bl	8013572 <USBD_LL_GetRxDataSize>
 80111d6:	4602      	mov	r2, r0
 80111d8:	68fb      	ldr	r3, [r7, #12]
 80111da:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80111de:	687b      	ldr	r3, [r7, #4]
 80111e0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80111e4:	687a      	ldr	r2, [r7, #4]
 80111e6:	33b0      	adds	r3, #176	@ 0xb0
 80111e8:	009b      	lsls	r3, r3, #2
 80111ea:	4413      	add	r3, r2
 80111ec:	685b      	ldr	r3, [r3, #4]
 80111ee:	68db      	ldr	r3, [r3, #12]
 80111f0:	68fa      	ldr	r2, [r7, #12]
 80111f2:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 80111f6:	68fa      	ldr	r2, [r7, #12]
 80111f8:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 80111fc:	4611      	mov	r1, r2
 80111fe:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8011200:	2300      	movs	r3, #0
}
 8011202:	4618      	mov	r0, r3
 8011204:	3710      	adds	r7, #16
 8011206:	46bd      	mov	sp, r7
 8011208:	bd80      	pop	{r7, pc}

0801120a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 801120a:	b580      	push	{r7, lr}
 801120c:	b084      	sub	sp, #16
 801120e:	af00      	add	r7, sp, #0
 8011210:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8011212:	687b      	ldr	r3, [r7, #4]
 8011214:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011218:	687b      	ldr	r3, [r7, #4]
 801121a:	32b0      	adds	r2, #176	@ 0xb0
 801121c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011220:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8011222:	68fb      	ldr	r3, [r7, #12]
 8011224:	2b00      	cmp	r3, #0
 8011226:	d101      	bne.n	801122c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8011228:	2303      	movs	r3, #3
 801122a:	e024      	b.n	8011276 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 801122c:	687b      	ldr	r3, [r7, #4]
 801122e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8011232:	687a      	ldr	r2, [r7, #4]
 8011234:	33b0      	adds	r3, #176	@ 0xb0
 8011236:	009b      	lsls	r3, r3, #2
 8011238:	4413      	add	r3, r2
 801123a:	685b      	ldr	r3, [r3, #4]
 801123c:	2b00      	cmp	r3, #0
 801123e:	d019      	beq.n	8011274 <USBD_CDC_EP0_RxReady+0x6a>
 8011240:	68fb      	ldr	r3, [r7, #12]
 8011242:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8011246:	2bff      	cmp	r3, #255	@ 0xff
 8011248:	d014      	beq.n	8011274 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 801124a:	687b      	ldr	r3, [r7, #4]
 801124c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8011250:	687a      	ldr	r2, [r7, #4]
 8011252:	33b0      	adds	r3, #176	@ 0xb0
 8011254:	009b      	lsls	r3, r3, #2
 8011256:	4413      	add	r3, r2
 8011258:	685b      	ldr	r3, [r3, #4]
 801125a:	689b      	ldr	r3, [r3, #8]
 801125c:	68fa      	ldr	r2, [r7, #12]
 801125e:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8011262:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8011264:	68fa      	ldr	r2, [r7, #12]
 8011266:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 801126a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 801126c:	68fb      	ldr	r3, [r7, #12]
 801126e:	22ff      	movs	r2, #255	@ 0xff
 8011270:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8011274:	2300      	movs	r3, #0
}
 8011276:	4618      	mov	r0, r3
 8011278:	3710      	adds	r7, #16
 801127a:	46bd      	mov	sp, r7
 801127c:	bd80      	pop	{r7, pc}
	...

08011280 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8011280:	b580      	push	{r7, lr}
 8011282:	b086      	sub	sp, #24
 8011284:	af00      	add	r7, sp, #0
 8011286:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8011288:	2182      	movs	r1, #130	@ 0x82
 801128a:	4818      	ldr	r0, [pc, #96]	@ (80112ec <USBD_CDC_GetFSCfgDesc+0x6c>)
 801128c:	f000 fd4f 	bl	8011d2e <USBD_GetEpDesc>
 8011290:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8011292:	2101      	movs	r1, #1
 8011294:	4815      	ldr	r0, [pc, #84]	@ (80112ec <USBD_CDC_GetFSCfgDesc+0x6c>)
 8011296:	f000 fd4a 	bl	8011d2e <USBD_GetEpDesc>
 801129a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 801129c:	2181      	movs	r1, #129	@ 0x81
 801129e:	4813      	ldr	r0, [pc, #76]	@ (80112ec <USBD_CDC_GetFSCfgDesc+0x6c>)
 80112a0:	f000 fd45 	bl	8011d2e <USBD_GetEpDesc>
 80112a4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80112a6:	697b      	ldr	r3, [r7, #20]
 80112a8:	2b00      	cmp	r3, #0
 80112aa:	d002      	beq.n	80112b2 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80112ac:	697b      	ldr	r3, [r7, #20]
 80112ae:	2210      	movs	r2, #16
 80112b0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80112b2:	693b      	ldr	r3, [r7, #16]
 80112b4:	2b00      	cmp	r3, #0
 80112b6:	d006      	beq.n	80112c6 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80112b8:	693b      	ldr	r3, [r7, #16]
 80112ba:	2200      	movs	r2, #0
 80112bc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80112c0:	711a      	strb	r2, [r3, #4]
 80112c2:	2200      	movs	r2, #0
 80112c4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80112c6:	68fb      	ldr	r3, [r7, #12]
 80112c8:	2b00      	cmp	r3, #0
 80112ca:	d006      	beq.n	80112da <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80112cc:	68fb      	ldr	r3, [r7, #12]
 80112ce:	2200      	movs	r2, #0
 80112d0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80112d4:	711a      	strb	r2, [r3, #4]
 80112d6:	2200      	movs	r2, #0
 80112d8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80112da:	687b      	ldr	r3, [r7, #4]
 80112dc:	2243      	movs	r2, #67	@ 0x43
 80112de:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80112e0:	4b02      	ldr	r3, [pc, #8]	@ (80112ec <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80112e2:	4618      	mov	r0, r3
 80112e4:	3718      	adds	r7, #24
 80112e6:	46bd      	mov	sp, r7
 80112e8:	bd80      	pop	{r7, pc}
 80112ea:	bf00      	nop
 80112ec:	24000054 	.word	0x24000054

080112f0 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80112f0:	b580      	push	{r7, lr}
 80112f2:	b086      	sub	sp, #24
 80112f4:	af00      	add	r7, sp, #0
 80112f6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80112f8:	2182      	movs	r1, #130	@ 0x82
 80112fa:	4818      	ldr	r0, [pc, #96]	@ (801135c <USBD_CDC_GetHSCfgDesc+0x6c>)
 80112fc:	f000 fd17 	bl	8011d2e <USBD_GetEpDesc>
 8011300:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8011302:	2101      	movs	r1, #1
 8011304:	4815      	ldr	r0, [pc, #84]	@ (801135c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8011306:	f000 fd12 	bl	8011d2e <USBD_GetEpDesc>
 801130a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 801130c:	2181      	movs	r1, #129	@ 0x81
 801130e:	4813      	ldr	r0, [pc, #76]	@ (801135c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8011310:	f000 fd0d 	bl	8011d2e <USBD_GetEpDesc>
 8011314:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8011316:	697b      	ldr	r3, [r7, #20]
 8011318:	2b00      	cmp	r3, #0
 801131a:	d002      	beq.n	8011322 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 801131c:	697b      	ldr	r3, [r7, #20]
 801131e:	2210      	movs	r2, #16
 8011320:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8011322:	693b      	ldr	r3, [r7, #16]
 8011324:	2b00      	cmp	r3, #0
 8011326:	d006      	beq.n	8011336 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8011328:	693b      	ldr	r3, [r7, #16]
 801132a:	2200      	movs	r2, #0
 801132c:	711a      	strb	r2, [r3, #4]
 801132e:	2200      	movs	r2, #0
 8011330:	f042 0202 	orr.w	r2, r2, #2
 8011334:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8011336:	68fb      	ldr	r3, [r7, #12]
 8011338:	2b00      	cmp	r3, #0
 801133a:	d006      	beq.n	801134a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 801133c:	68fb      	ldr	r3, [r7, #12]
 801133e:	2200      	movs	r2, #0
 8011340:	711a      	strb	r2, [r3, #4]
 8011342:	2200      	movs	r2, #0
 8011344:	f042 0202 	orr.w	r2, r2, #2
 8011348:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 801134a:	687b      	ldr	r3, [r7, #4]
 801134c:	2243      	movs	r2, #67	@ 0x43
 801134e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8011350:	4b02      	ldr	r3, [pc, #8]	@ (801135c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8011352:	4618      	mov	r0, r3
 8011354:	3718      	adds	r7, #24
 8011356:	46bd      	mov	sp, r7
 8011358:	bd80      	pop	{r7, pc}
 801135a:	bf00      	nop
 801135c:	24000054 	.word	0x24000054

08011360 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8011360:	b580      	push	{r7, lr}
 8011362:	b086      	sub	sp, #24
 8011364:	af00      	add	r7, sp, #0
 8011366:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8011368:	2182      	movs	r1, #130	@ 0x82
 801136a:	4818      	ldr	r0, [pc, #96]	@ (80113cc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 801136c:	f000 fcdf 	bl	8011d2e <USBD_GetEpDesc>
 8011370:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8011372:	2101      	movs	r1, #1
 8011374:	4815      	ldr	r0, [pc, #84]	@ (80113cc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8011376:	f000 fcda 	bl	8011d2e <USBD_GetEpDesc>
 801137a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 801137c:	2181      	movs	r1, #129	@ 0x81
 801137e:	4813      	ldr	r0, [pc, #76]	@ (80113cc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8011380:	f000 fcd5 	bl	8011d2e <USBD_GetEpDesc>
 8011384:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8011386:	697b      	ldr	r3, [r7, #20]
 8011388:	2b00      	cmp	r3, #0
 801138a:	d002      	beq.n	8011392 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 801138c:	697b      	ldr	r3, [r7, #20]
 801138e:	2210      	movs	r2, #16
 8011390:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8011392:	693b      	ldr	r3, [r7, #16]
 8011394:	2b00      	cmp	r3, #0
 8011396:	d006      	beq.n	80113a6 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8011398:	693b      	ldr	r3, [r7, #16]
 801139a:	2200      	movs	r2, #0
 801139c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80113a0:	711a      	strb	r2, [r3, #4]
 80113a2:	2200      	movs	r2, #0
 80113a4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80113a6:	68fb      	ldr	r3, [r7, #12]
 80113a8:	2b00      	cmp	r3, #0
 80113aa:	d006      	beq.n	80113ba <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80113ac:	68fb      	ldr	r3, [r7, #12]
 80113ae:	2200      	movs	r2, #0
 80113b0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80113b4:	711a      	strb	r2, [r3, #4]
 80113b6:	2200      	movs	r2, #0
 80113b8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80113ba:	687b      	ldr	r3, [r7, #4]
 80113bc:	2243      	movs	r2, #67	@ 0x43
 80113be:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80113c0:	4b02      	ldr	r3, [pc, #8]	@ (80113cc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80113c2:	4618      	mov	r0, r3
 80113c4:	3718      	adds	r7, #24
 80113c6:	46bd      	mov	sp, r7
 80113c8:	bd80      	pop	{r7, pc}
 80113ca:	bf00      	nop
 80113cc:	24000054 	.word	0x24000054

080113d0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80113d0:	b480      	push	{r7}
 80113d2:	b083      	sub	sp, #12
 80113d4:	af00      	add	r7, sp, #0
 80113d6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80113d8:	687b      	ldr	r3, [r7, #4]
 80113da:	220a      	movs	r2, #10
 80113dc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80113de:	4b03      	ldr	r3, [pc, #12]	@ (80113ec <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80113e0:	4618      	mov	r0, r3
 80113e2:	370c      	adds	r7, #12
 80113e4:	46bd      	mov	sp, r7
 80113e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113ea:	4770      	bx	lr
 80113ec:	24000010 	.word	0x24000010

080113f0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80113f0:	b480      	push	{r7}
 80113f2:	b083      	sub	sp, #12
 80113f4:	af00      	add	r7, sp, #0
 80113f6:	6078      	str	r0, [r7, #4]
 80113f8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80113fa:	683b      	ldr	r3, [r7, #0]
 80113fc:	2b00      	cmp	r3, #0
 80113fe:	d101      	bne.n	8011404 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8011400:	2303      	movs	r3, #3
 8011402:	e009      	b.n	8011418 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8011404:	687b      	ldr	r3, [r7, #4]
 8011406:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801140a:	687a      	ldr	r2, [r7, #4]
 801140c:	33b0      	adds	r3, #176	@ 0xb0
 801140e:	009b      	lsls	r3, r3, #2
 8011410:	4413      	add	r3, r2
 8011412:	683a      	ldr	r2, [r7, #0]
 8011414:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8011416:	2300      	movs	r3, #0
}
 8011418:	4618      	mov	r0, r3
 801141a:	370c      	adds	r7, #12
 801141c:	46bd      	mov	sp, r7
 801141e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011422:	4770      	bx	lr

08011424 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8011424:	b480      	push	{r7}
 8011426:	b087      	sub	sp, #28
 8011428:	af00      	add	r7, sp, #0
 801142a:	60f8      	str	r0, [r7, #12]
 801142c:	60b9      	str	r1, [r7, #8]
 801142e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8011430:	68fb      	ldr	r3, [r7, #12]
 8011432:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011436:	68fb      	ldr	r3, [r7, #12]
 8011438:	32b0      	adds	r2, #176	@ 0xb0
 801143a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801143e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8011440:	697b      	ldr	r3, [r7, #20]
 8011442:	2b00      	cmp	r3, #0
 8011444:	d101      	bne.n	801144a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8011446:	2303      	movs	r3, #3
 8011448:	e008      	b.n	801145c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 801144a:	697b      	ldr	r3, [r7, #20]
 801144c:	68ba      	ldr	r2, [r7, #8]
 801144e:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8011452:	697b      	ldr	r3, [r7, #20]
 8011454:	687a      	ldr	r2, [r7, #4]
 8011456:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 801145a:	2300      	movs	r3, #0
}
 801145c:	4618      	mov	r0, r3
 801145e:	371c      	adds	r7, #28
 8011460:	46bd      	mov	sp, r7
 8011462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011466:	4770      	bx	lr

08011468 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8011468:	b480      	push	{r7}
 801146a:	b085      	sub	sp, #20
 801146c:	af00      	add	r7, sp, #0
 801146e:	6078      	str	r0, [r7, #4]
 8011470:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8011472:	687b      	ldr	r3, [r7, #4]
 8011474:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011478:	687b      	ldr	r3, [r7, #4]
 801147a:	32b0      	adds	r2, #176	@ 0xb0
 801147c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011480:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8011482:	68fb      	ldr	r3, [r7, #12]
 8011484:	2b00      	cmp	r3, #0
 8011486:	d101      	bne.n	801148c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8011488:	2303      	movs	r3, #3
 801148a:	e004      	b.n	8011496 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 801148c:	68fb      	ldr	r3, [r7, #12]
 801148e:	683a      	ldr	r2, [r7, #0]
 8011490:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8011494:	2300      	movs	r3, #0
}
 8011496:	4618      	mov	r0, r3
 8011498:	3714      	adds	r7, #20
 801149a:	46bd      	mov	sp, r7
 801149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114a0:	4770      	bx	lr
	...

080114a4 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80114a4:	b580      	push	{r7, lr}
 80114a6:	b084      	sub	sp, #16
 80114a8:	af00      	add	r7, sp, #0
 80114aa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80114ac:	687b      	ldr	r3, [r7, #4]
 80114ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80114b2:	687b      	ldr	r3, [r7, #4]
 80114b4:	32b0      	adds	r2, #176	@ 0xb0
 80114b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80114ba:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 80114bc:	2301      	movs	r3, #1
 80114be:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80114c0:	68bb      	ldr	r3, [r7, #8]
 80114c2:	2b00      	cmp	r3, #0
 80114c4:	d101      	bne.n	80114ca <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80114c6:	2303      	movs	r3, #3
 80114c8:	e025      	b.n	8011516 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 80114ca:	68bb      	ldr	r3, [r7, #8]
 80114cc:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80114d0:	2b00      	cmp	r3, #0
 80114d2:	d11f      	bne.n	8011514 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80114d4:	68bb      	ldr	r3, [r7, #8]
 80114d6:	2201      	movs	r2, #1
 80114d8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80114dc:	4b10      	ldr	r3, [pc, #64]	@ (8011520 <USBD_CDC_TransmitPacket+0x7c>)
 80114de:	781b      	ldrb	r3, [r3, #0]
 80114e0:	f003 020f 	and.w	r2, r3, #15
 80114e4:	68bb      	ldr	r3, [r7, #8]
 80114e6:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 80114ea:	6878      	ldr	r0, [r7, #4]
 80114ec:	4613      	mov	r3, r2
 80114ee:	009b      	lsls	r3, r3, #2
 80114f0:	4413      	add	r3, r2
 80114f2:	009b      	lsls	r3, r3, #2
 80114f4:	4403      	add	r3, r0
 80114f6:	3318      	adds	r3, #24
 80114f8:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80114fa:	4b09      	ldr	r3, [pc, #36]	@ (8011520 <USBD_CDC_TransmitPacket+0x7c>)
 80114fc:	7819      	ldrb	r1, [r3, #0]
 80114fe:	68bb      	ldr	r3, [r7, #8]
 8011500:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8011504:	68bb      	ldr	r3, [r7, #8]
 8011506:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 801150a:	6878      	ldr	r0, [r7, #4]
 801150c:	f001 ffef 	bl	80134ee <USBD_LL_Transmit>

    ret = USBD_OK;
 8011510:	2300      	movs	r3, #0
 8011512:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8011514:	7bfb      	ldrb	r3, [r7, #15]
}
 8011516:	4618      	mov	r0, r3
 8011518:	3710      	adds	r7, #16
 801151a:	46bd      	mov	sp, r7
 801151c:	bd80      	pop	{r7, pc}
 801151e:	bf00      	nop
 8011520:	24000097 	.word	0x24000097

08011524 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8011524:	b580      	push	{r7, lr}
 8011526:	b084      	sub	sp, #16
 8011528:	af00      	add	r7, sp, #0
 801152a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801152c:	687b      	ldr	r3, [r7, #4]
 801152e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011532:	687b      	ldr	r3, [r7, #4]
 8011534:	32b0      	adds	r2, #176	@ 0xb0
 8011536:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801153a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 801153c:	687b      	ldr	r3, [r7, #4]
 801153e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011542:	687b      	ldr	r3, [r7, #4]
 8011544:	32b0      	adds	r2, #176	@ 0xb0
 8011546:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801154a:	2b00      	cmp	r3, #0
 801154c:	d101      	bne.n	8011552 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 801154e:	2303      	movs	r3, #3
 8011550:	e018      	b.n	8011584 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011552:	687b      	ldr	r3, [r7, #4]
 8011554:	7c1b      	ldrb	r3, [r3, #16]
 8011556:	2b00      	cmp	r3, #0
 8011558:	d10a      	bne.n	8011570 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 801155a:	4b0c      	ldr	r3, [pc, #48]	@ (801158c <USBD_CDC_ReceivePacket+0x68>)
 801155c:	7819      	ldrb	r1, [r3, #0]
 801155e:	68fb      	ldr	r3, [r7, #12]
 8011560:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8011564:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8011568:	6878      	ldr	r0, [r7, #4]
 801156a:	f001 ffe1 	bl	8013530 <USBD_LL_PrepareReceive>
 801156e:	e008      	b.n	8011582 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8011570:	4b06      	ldr	r3, [pc, #24]	@ (801158c <USBD_CDC_ReceivePacket+0x68>)
 8011572:	7819      	ldrb	r1, [r3, #0]
 8011574:	68fb      	ldr	r3, [r7, #12]
 8011576:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 801157a:	2340      	movs	r3, #64	@ 0x40
 801157c:	6878      	ldr	r0, [r7, #4]
 801157e:	f001 ffd7 	bl	8013530 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8011582:	2300      	movs	r3, #0
}
 8011584:	4618      	mov	r0, r3
 8011586:	3710      	adds	r7, #16
 8011588:	46bd      	mov	sp, r7
 801158a:	bd80      	pop	{r7, pc}
 801158c:	24000098 	.word	0x24000098

08011590 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8011590:	b580      	push	{r7, lr}
 8011592:	b086      	sub	sp, #24
 8011594:	af00      	add	r7, sp, #0
 8011596:	60f8      	str	r0, [r7, #12]
 8011598:	60b9      	str	r1, [r7, #8]
 801159a:	4613      	mov	r3, r2
 801159c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 801159e:	68fb      	ldr	r3, [r7, #12]
 80115a0:	2b00      	cmp	r3, #0
 80115a2:	d101      	bne.n	80115a8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80115a4:	2303      	movs	r3, #3
 80115a6:	e01f      	b.n	80115e8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80115a8:	68fb      	ldr	r3, [r7, #12]
 80115aa:	2200      	movs	r2, #0
 80115ac:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 80115b0:	68fb      	ldr	r3, [r7, #12]
 80115b2:	2200      	movs	r2, #0
 80115b4:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80115b8:	68fb      	ldr	r3, [r7, #12]
 80115ba:	2200      	movs	r2, #0
 80115bc:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80115c0:	68bb      	ldr	r3, [r7, #8]
 80115c2:	2b00      	cmp	r3, #0
 80115c4:	d003      	beq.n	80115ce <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80115c6:	68fb      	ldr	r3, [r7, #12]
 80115c8:	68ba      	ldr	r2, [r7, #8]
 80115ca:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80115ce:	68fb      	ldr	r3, [r7, #12]
 80115d0:	2201      	movs	r2, #1
 80115d2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80115d6:	68fb      	ldr	r3, [r7, #12]
 80115d8:	79fa      	ldrb	r2, [r7, #7]
 80115da:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80115dc:	68f8      	ldr	r0, [r7, #12]
 80115de:	f001 fe4b 	bl	8013278 <USBD_LL_Init>
 80115e2:	4603      	mov	r3, r0
 80115e4:	75fb      	strb	r3, [r7, #23]

  return ret;
 80115e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80115e8:	4618      	mov	r0, r3
 80115ea:	3718      	adds	r7, #24
 80115ec:	46bd      	mov	sp, r7
 80115ee:	bd80      	pop	{r7, pc}

080115f0 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80115f0:	b580      	push	{r7, lr}
 80115f2:	b084      	sub	sp, #16
 80115f4:	af00      	add	r7, sp, #0
 80115f6:	6078      	str	r0, [r7, #4]
 80115f8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80115fa:	2300      	movs	r3, #0
 80115fc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80115fe:	683b      	ldr	r3, [r7, #0]
 8011600:	2b00      	cmp	r3, #0
 8011602:	d101      	bne.n	8011608 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8011604:	2303      	movs	r3, #3
 8011606:	e025      	b.n	8011654 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8011608:	687b      	ldr	r3, [r7, #4]
 801160a:	683a      	ldr	r2, [r7, #0]
 801160c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8011610:	687b      	ldr	r3, [r7, #4]
 8011612:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011616:	687b      	ldr	r3, [r7, #4]
 8011618:	32ae      	adds	r2, #174	@ 0xae
 801161a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801161e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011620:	2b00      	cmp	r3, #0
 8011622:	d00f      	beq.n	8011644 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8011624:	687b      	ldr	r3, [r7, #4]
 8011626:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801162a:	687b      	ldr	r3, [r7, #4]
 801162c:	32ae      	adds	r2, #174	@ 0xae
 801162e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011632:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011634:	f107 020e 	add.w	r2, r7, #14
 8011638:	4610      	mov	r0, r2
 801163a:	4798      	blx	r3
 801163c:	4602      	mov	r2, r0
 801163e:	687b      	ldr	r3, [r7, #4]
 8011640:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8011644:	687b      	ldr	r3, [r7, #4]
 8011646:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 801164a:	1c5a      	adds	r2, r3, #1
 801164c:	687b      	ldr	r3, [r7, #4]
 801164e:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8011652:	2300      	movs	r3, #0
}
 8011654:	4618      	mov	r0, r3
 8011656:	3710      	adds	r7, #16
 8011658:	46bd      	mov	sp, r7
 801165a:	bd80      	pop	{r7, pc}

0801165c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 801165c:	b580      	push	{r7, lr}
 801165e:	b082      	sub	sp, #8
 8011660:	af00      	add	r7, sp, #0
 8011662:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8011664:	6878      	ldr	r0, [r7, #4]
 8011666:	f001 fe59 	bl	801331c <USBD_LL_Start>
 801166a:	4603      	mov	r3, r0
}
 801166c:	4618      	mov	r0, r3
 801166e:	3708      	adds	r7, #8
 8011670:	46bd      	mov	sp, r7
 8011672:	bd80      	pop	{r7, pc}

08011674 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8011674:	b480      	push	{r7}
 8011676:	b083      	sub	sp, #12
 8011678:	af00      	add	r7, sp, #0
 801167a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801167c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 801167e:	4618      	mov	r0, r3
 8011680:	370c      	adds	r7, #12
 8011682:	46bd      	mov	sp, r7
 8011684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011688:	4770      	bx	lr

0801168a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801168a:	b580      	push	{r7, lr}
 801168c:	b084      	sub	sp, #16
 801168e:	af00      	add	r7, sp, #0
 8011690:	6078      	str	r0, [r7, #4]
 8011692:	460b      	mov	r3, r1
 8011694:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8011696:	2300      	movs	r3, #0
 8011698:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 801169a:	687b      	ldr	r3, [r7, #4]
 801169c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80116a0:	2b00      	cmp	r3, #0
 80116a2:	d009      	beq.n	80116b8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80116a4:	687b      	ldr	r3, [r7, #4]
 80116a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80116aa:	681b      	ldr	r3, [r3, #0]
 80116ac:	78fa      	ldrb	r2, [r7, #3]
 80116ae:	4611      	mov	r1, r2
 80116b0:	6878      	ldr	r0, [r7, #4]
 80116b2:	4798      	blx	r3
 80116b4:	4603      	mov	r3, r0
 80116b6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80116b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80116ba:	4618      	mov	r0, r3
 80116bc:	3710      	adds	r7, #16
 80116be:	46bd      	mov	sp, r7
 80116c0:	bd80      	pop	{r7, pc}

080116c2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80116c2:	b580      	push	{r7, lr}
 80116c4:	b084      	sub	sp, #16
 80116c6:	af00      	add	r7, sp, #0
 80116c8:	6078      	str	r0, [r7, #4]
 80116ca:	460b      	mov	r3, r1
 80116cc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80116ce:	2300      	movs	r3, #0
 80116d0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80116d2:	687b      	ldr	r3, [r7, #4]
 80116d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80116d8:	685b      	ldr	r3, [r3, #4]
 80116da:	78fa      	ldrb	r2, [r7, #3]
 80116dc:	4611      	mov	r1, r2
 80116de:	6878      	ldr	r0, [r7, #4]
 80116e0:	4798      	blx	r3
 80116e2:	4603      	mov	r3, r0
 80116e4:	2b00      	cmp	r3, #0
 80116e6:	d001      	beq.n	80116ec <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80116e8:	2303      	movs	r3, #3
 80116ea:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80116ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80116ee:	4618      	mov	r0, r3
 80116f0:	3710      	adds	r7, #16
 80116f2:	46bd      	mov	sp, r7
 80116f4:	bd80      	pop	{r7, pc}

080116f6 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80116f6:	b580      	push	{r7, lr}
 80116f8:	b084      	sub	sp, #16
 80116fa:	af00      	add	r7, sp, #0
 80116fc:	6078      	str	r0, [r7, #4]
 80116fe:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8011700:	687b      	ldr	r3, [r7, #4]
 8011702:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8011706:	6839      	ldr	r1, [r7, #0]
 8011708:	4618      	mov	r0, r3
 801170a:	f001 f936 	bl	801297a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 801170e:	687b      	ldr	r3, [r7, #4]
 8011710:	2201      	movs	r2, #1
 8011712:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8011716:	687b      	ldr	r3, [r7, #4]
 8011718:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 801171c:	461a      	mov	r2, r3
 801171e:	687b      	ldr	r3, [r7, #4]
 8011720:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8011724:	687b      	ldr	r3, [r7, #4]
 8011726:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 801172a:	f003 031f 	and.w	r3, r3, #31
 801172e:	2b02      	cmp	r3, #2
 8011730:	d01a      	beq.n	8011768 <USBD_LL_SetupStage+0x72>
 8011732:	2b02      	cmp	r3, #2
 8011734:	d822      	bhi.n	801177c <USBD_LL_SetupStage+0x86>
 8011736:	2b00      	cmp	r3, #0
 8011738:	d002      	beq.n	8011740 <USBD_LL_SetupStage+0x4a>
 801173a:	2b01      	cmp	r3, #1
 801173c:	d00a      	beq.n	8011754 <USBD_LL_SetupStage+0x5e>
 801173e:	e01d      	b.n	801177c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8011740:	687b      	ldr	r3, [r7, #4]
 8011742:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8011746:	4619      	mov	r1, r3
 8011748:	6878      	ldr	r0, [r7, #4]
 801174a:	f000 fb63 	bl	8011e14 <USBD_StdDevReq>
 801174e:	4603      	mov	r3, r0
 8011750:	73fb      	strb	r3, [r7, #15]
      break;
 8011752:	e020      	b.n	8011796 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8011754:	687b      	ldr	r3, [r7, #4]
 8011756:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 801175a:	4619      	mov	r1, r3
 801175c:	6878      	ldr	r0, [r7, #4]
 801175e:	f000 fbcb 	bl	8011ef8 <USBD_StdItfReq>
 8011762:	4603      	mov	r3, r0
 8011764:	73fb      	strb	r3, [r7, #15]
      break;
 8011766:	e016      	b.n	8011796 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8011768:	687b      	ldr	r3, [r7, #4]
 801176a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 801176e:	4619      	mov	r1, r3
 8011770:	6878      	ldr	r0, [r7, #4]
 8011772:	f000 fc2d 	bl	8011fd0 <USBD_StdEPReq>
 8011776:	4603      	mov	r3, r0
 8011778:	73fb      	strb	r3, [r7, #15]
      break;
 801177a:	e00c      	b.n	8011796 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 801177c:	687b      	ldr	r3, [r7, #4]
 801177e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8011782:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8011786:	b2db      	uxtb	r3, r3
 8011788:	4619      	mov	r1, r3
 801178a:	6878      	ldr	r0, [r7, #4]
 801178c:	f001 fe26 	bl	80133dc <USBD_LL_StallEP>
 8011790:	4603      	mov	r3, r0
 8011792:	73fb      	strb	r3, [r7, #15]
      break;
 8011794:	bf00      	nop
  }

  return ret;
 8011796:	7bfb      	ldrb	r3, [r7, #15]
}
 8011798:	4618      	mov	r0, r3
 801179a:	3710      	adds	r7, #16
 801179c:	46bd      	mov	sp, r7
 801179e:	bd80      	pop	{r7, pc}

080117a0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80117a0:	b580      	push	{r7, lr}
 80117a2:	b086      	sub	sp, #24
 80117a4:	af00      	add	r7, sp, #0
 80117a6:	60f8      	str	r0, [r7, #12]
 80117a8:	460b      	mov	r3, r1
 80117aa:	607a      	str	r2, [r7, #4]
 80117ac:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80117ae:	2300      	movs	r3, #0
 80117b0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80117b2:	7afb      	ldrb	r3, [r7, #11]
 80117b4:	2b00      	cmp	r3, #0
 80117b6:	d16e      	bne.n	8011896 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80117b8:	68fb      	ldr	r3, [r7, #12]
 80117ba:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80117be:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80117c0:	68fb      	ldr	r3, [r7, #12]
 80117c2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80117c6:	2b03      	cmp	r3, #3
 80117c8:	f040 8098 	bne.w	80118fc <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80117cc:	693b      	ldr	r3, [r7, #16]
 80117ce:	689a      	ldr	r2, [r3, #8]
 80117d0:	693b      	ldr	r3, [r7, #16]
 80117d2:	68db      	ldr	r3, [r3, #12]
 80117d4:	429a      	cmp	r2, r3
 80117d6:	d913      	bls.n	8011800 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80117d8:	693b      	ldr	r3, [r7, #16]
 80117da:	689a      	ldr	r2, [r3, #8]
 80117dc:	693b      	ldr	r3, [r7, #16]
 80117de:	68db      	ldr	r3, [r3, #12]
 80117e0:	1ad2      	subs	r2, r2, r3
 80117e2:	693b      	ldr	r3, [r7, #16]
 80117e4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80117e6:	693b      	ldr	r3, [r7, #16]
 80117e8:	68da      	ldr	r2, [r3, #12]
 80117ea:	693b      	ldr	r3, [r7, #16]
 80117ec:	689b      	ldr	r3, [r3, #8]
 80117ee:	4293      	cmp	r3, r2
 80117f0:	bf28      	it	cs
 80117f2:	4613      	movcs	r3, r2
 80117f4:	461a      	mov	r2, r3
 80117f6:	6879      	ldr	r1, [r7, #4]
 80117f8:	68f8      	ldr	r0, [r7, #12]
 80117fa:	f001 f9be 	bl	8012b7a <USBD_CtlContinueRx>
 80117fe:	e07d      	b.n	80118fc <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8011800:	68fb      	ldr	r3, [r7, #12]
 8011802:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8011806:	f003 031f 	and.w	r3, r3, #31
 801180a:	2b02      	cmp	r3, #2
 801180c:	d014      	beq.n	8011838 <USBD_LL_DataOutStage+0x98>
 801180e:	2b02      	cmp	r3, #2
 8011810:	d81d      	bhi.n	801184e <USBD_LL_DataOutStage+0xae>
 8011812:	2b00      	cmp	r3, #0
 8011814:	d002      	beq.n	801181c <USBD_LL_DataOutStage+0x7c>
 8011816:	2b01      	cmp	r3, #1
 8011818:	d003      	beq.n	8011822 <USBD_LL_DataOutStage+0x82>
 801181a:	e018      	b.n	801184e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 801181c:	2300      	movs	r3, #0
 801181e:	75bb      	strb	r3, [r7, #22]
            break;
 8011820:	e018      	b.n	8011854 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8011822:	68fb      	ldr	r3, [r7, #12]
 8011824:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8011828:	b2db      	uxtb	r3, r3
 801182a:	4619      	mov	r1, r3
 801182c:	68f8      	ldr	r0, [r7, #12]
 801182e:	f000 fa64 	bl	8011cfa <USBD_CoreFindIF>
 8011832:	4603      	mov	r3, r0
 8011834:	75bb      	strb	r3, [r7, #22]
            break;
 8011836:	e00d      	b.n	8011854 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8011838:	68fb      	ldr	r3, [r7, #12]
 801183a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 801183e:	b2db      	uxtb	r3, r3
 8011840:	4619      	mov	r1, r3
 8011842:	68f8      	ldr	r0, [r7, #12]
 8011844:	f000 fa66 	bl	8011d14 <USBD_CoreFindEP>
 8011848:	4603      	mov	r3, r0
 801184a:	75bb      	strb	r3, [r7, #22]
            break;
 801184c:	e002      	b.n	8011854 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 801184e:	2300      	movs	r3, #0
 8011850:	75bb      	strb	r3, [r7, #22]
            break;
 8011852:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8011854:	7dbb      	ldrb	r3, [r7, #22]
 8011856:	2b00      	cmp	r3, #0
 8011858:	d119      	bne.n	801188e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801185a:	68fb      	ldr	r3, [r7, #12]
 801185c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011860:	b2db      	uxtb	r3, r3
 8011862:	2b03      	cmp	r3, #3
 8011864:	d113      	bne.n	801188e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8011866:	7dba      	ldrb	r2, [r7, #22]
 8011868:	68fb      	ldr	r3, [r7, #12]
 801186a:	32ae      	adds	r2, #174	@ 0xae
 801186c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011870:	691b      	ldr	r3, [r3, #16]
 8011872:	2b00      	cmp	r3, #0
 8011874:	d00b      	beq.n	801188e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8011876:	7dba      	ldrb	r2, [r7, #22]
 8011878:	68fb      	ldr	r3, [r7, #12]
 801187a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 801187e:	7dba      	ldrb	r2, [r7, #22]
 8011880:	68fb      	ldr	r3, [r7, #12]
 8011882:	32ae      	adds	r2, #174	@ 0xae
 8011884:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011888:	691b      	ldr	r3, [r3, #16]
 801188a:	68f8      	ldr	r0, [r7, #12]
 801188c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 801188e:	68f8      	ldr	r0, [r7, #12]
 8011890:	f001 f984 	bl	8012b9c <USBD_CtlSendStatus>
 8011894:	e032      	b.n	80118fc <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8011896:	7afb      	ldrb	r3, [r7, #11]
 8011898:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801189c:	b2db      	uxtb	r3, r3
 801189e:	4619      	mov	r1, r3
 80118a0:	68f8      	ldr	r0, [r7, #12]
 80118a2:	f000 fa37 	bl	8011d14 <USBD_CoreFindEP>
 80118a6:	4603      	mov	r3, r0
 80118a8:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80118aa:	7dbb      	ldrb	r3, [r7, #22]
 80118ac:	2bff      	cmp	r3, #255	@ 0xff
 80118ae:	d025      	beq.n	80118fc <USBD_LL_DataOutStage+0x15c>
 80118b0:	7dbb      	ldrb	r3, [r7, #22]
 80118b2:	2b00      	cmp	r3, #0
 80118b4:	d122      	bne.n	80118fc <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80118b6:	68fb      	ldr	r3, [r7, #12]
 80118b8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80118bc:	b2db      	uxtb	r3, r3
 80118be:	2b03      	cmp	r3, #3
 80118c0:	d117      	bne.n	80118f2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80118c2:	7dba      	ldrb	r2, [r7, #22]
 80118c4:	68fb      	ldr	r3, [r7, #12]
 80118c6:	32ae      	adds	r2, #174	@ 0xae
 80118c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80118cc:	699b      	ldr	r3, [r3, #24]
 80118ce:	2b00      	cmp	r3, #0
 80118d0:	d00f      	beq.n	80118f2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80118d2:	7dba      	ldrb	r2, [r7, #22]
 80118d4:	68fb      	ldr	r3, [r7, #12]
 80118d6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80118da:	7dba      	ldrb	r2, [r7, #22]
 80118dc:	68fb      	ldr	r3, [r7, #12]
 80118de:	32ae      	adds	r2, #174	@ 0xae
 80118e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80118e4:	699b      	ldr	r3, [r3, #24]
 80118e6:	7afa      	ldrb	r2, [r7, #11]
 80118e8:	4611      	mov	r1, r2
 80118ea:	68f8      	ldr	r0, [r7, #12]
 80118ec:	4798      	blx	r3
 80118ee:	4603      	mov	r3, r0
 80118f0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80118f2:	7dfb      	ldrb	r3, [r7, #23]
 80118f4:	2b00      	cmp	r3, #0
 80118f6:	d001      	beq.n	80118fc <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80118f8:	7dfb      	ldrb	r3, [r7, #23]
 80118fa:	e000      	b.n	80118fe <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80118fc:	2300      	movs	r3, #0
}
 80118fe:	4618      	mov	r0, r3
 8011900:	3718      	adds	r7, #24
 8011902:	46bd      	mov	sp, r7
 8011904:	bd80      	pop	{r7, pc}

08011906 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8011906:	b580      	push	{r7, lr}
 8011908:	b086      	sub	sp, #24
 801190a:	af00      	add	r7, sp, #0
 801190c:	60f8      	str	r0, [r7, #12]
 801190e:	460b      	mov	r3, r1
 8011910:	607a      	str	r2, [r7, #4]
 8011912:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8011914:	7afb      	ldrb	r3, [r7, #11]
 8011916:	2b00      	cmp	r3, #0
 8011918:	d16f      	bne.n	80119fa <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 801191a:	68fb      	ldr	r3, [r7, #12]
 801191c:	3314      	adds	r3, #20
 801191e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8011920:	68fb      	ldr	r3, [r7, #12]
 8011922:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8011926:	2b02      	cmp	r3, #2
 8011928:	d15a      	bne.n	80119e0 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 801192a:	693b      	ldr	r3, [r7, #16]
 801192c:	689a      	ldr	r2, [r3, #8]
 801192e:	693b      	ldr	r3, [r7, #16]
 8011930:	68db      	ldr	r3, [r3, #12]
 8011932:	429a      	cmp	r2, r3
 8011934:	d914      	bls.n	8011960 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8011936:	693b      	ldr	r3, [r7, #16]
 8011938:	689a      	ldr	r2, [r3, #8]
 801193a:	693b      	ldr	r3, [r7, #16]
 801193c:	68db      	ldr	r3, [r3, #12]
 801193e:	1ad2      	subs	r2, r2, r3
 8011940:	693b      	ldr	r3, [r7, #16]
 8011942:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8011944:	693b      	ldr	r3, [r7, #16]
 8011946:	689b      	ldr	r3, [r3, #8]
 8011948:	461a      	mov	r2, r3
 801194a:	6879      	ldr	r1, [r7, #4]
 801194c:	68f8      	ldr	r0, [r7, #12]
 801194e:	f001 f8e6 	bl	8012b1e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8011952:	2300      	movs	r3, #0
 8011954:	2200      	movs	r2, #0
 8011956:	2100      	movs	r1, #0
 8011958:	68f8      	ldr	r0, [r7, #12]
 801195a:	f001 fde9 	bl	8013530 <USBD_LL_PrepareReceive>
 801195e:	e03f      	b.n	80119e0 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8011960:	693b      	ldr	r3, [r7, #16]
 8011962:	68da      	ldr	r2, [r3, #12]
 8011964:	693b      	ldr	r3, [r7, #16]
 8011966:	689b      	ldr	r3, [r3, #8]
 8011968:	429a      	cmp	r2, r3
 801196a:	d11c      	bne.n	80119a6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 801196c:	693b      	ldr	r3, [r7, #16]
 801196e:	685a      	ldr	r2, [r3, #4]
 8011970:	693b      	ldr	r3, [r7, #16]
 8011972:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8011974:	429a      	cmp	r2, r3
 8011976:	d316      	bcc.n	80119a6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8011978:	693b      	ldr	r3, [r7, #16]
 801197a:	685a      	ldr	r2, [r3, #4]
 801197c:	68fb      	ldr	r3, [r7, #12]
 801197e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8011982:	429a      	cmp	r2, r3
 8011984:	d20f      	bcs.n	80119a6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8011986:	2200      	movs	r2, #0
 8011988:	2100      	movs	r1, #0
 801198a:	68f8      	ldr	r0, [r7, #12]
 801198c:	f001 f8c7 	bl	8012b1e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8011990:	68fb      	ldr	r3, [r7, #12]
 8011992:	2200      	movs	r2, #0
 8011994:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8011998:	2300      	movs	r3, #0
 801199a:	2200      	movs	r2, #0
 801199c:	2100      	movs	r1, #0
 801199e:	68f8      	ldr	r0, [r7, #12]
 80119a0:	f001 fdc6 	bl	8013530 <USBD_LL_PrepareReceive>
 80119a4:	e01c      	b.n	80119e0 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80119a6:	68fb      	ldr	r3, [r7, #12]
 80119a8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80119ac:	b2db      	uxtb	r3, r3
 80119ae:	2b03      	cmp	r3, #3
 80119b0:	d10f      	bne.n	80119d2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80119b2:	68fb      	ldr	r3, [r7, #12]
 80119b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80119b8:	68db      	ldr	r3, [r3, #12]
 80119ba:	2b00      	cmp	r3, #0
 80119bc:	d009      	beq.n	80119d2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80119be:	68fb      	ldr	r3, [r7, #12]
 80119c0:	2200      	movs	r2, #0
 80119c2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80119c6:	68fb      	ldr	r3, [r7, #12]
 80119c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80119cc:	68db      	ldr	r3, [r3, #12]
 80119ce:	68f8      	ldr	r0, [r7, #12]
 80119d0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80119d2:	2180      	movs	r1, #128	@ 0x80
 80119d4:	68f8      	ldr	r0, [r7, #12]
 80119d6:	f001 fd01 	bl	80133dc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80119da:	68f8      	ldr	r0, [r7, #12]
 80119dc:	f001 f8f1 	bl	8012bc2 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80119e0:	68fb      	ldr	r3, [r7, #12]
 80119e2:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80119e6:	2b00      	cmp	r3, #0
 80119e8:	d03a      	beq.n	8011a60 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80119ea:	68f8      	ldr	r0, [r7, #12]
 80119ec:	f7ff fe42 	bl	8011674 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80119f0:	68fb      	ldr	r3, [r7, #12]
 80119f2:	2200      	movs	r2, #0
 80119f4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80119f8:	e032      	b.n	8011a60 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80119fa:	7afb      	ldrb	r3, [r7, #11]
 80119fc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8011a00:	b2db      	uxtb	r3, r3
 8011a02:	4619      	mov	r1, r3
 8011a04:	68f8      	ldr	r0, [r7, #12]
 8011a06:	f000 f985 	bl	8011d14 <USBD_CoreFindEP>
 8011a0a:	4603      	mov	r3, r0
 8011a0c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8011a0e:	7dfb      	ldrb	r3, [r7, #23]
 8011a10:	2bff      	cmp	r3, #255	@ 0xff
 8011a12:	d025      	beq.n	8011a60 <USBD_LL_DataInStage+0x15a>
 8011a14:	7dfb      	ldrb	r3, [r7, #23]
 8011a16:	2b00      	cmp	r3, #0
 8011a18:	d122      	bne.n	8011a60 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011a1a:	68fb      	ldr	r3, [r7, #12]
 8011a1c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011a20:	b2db      	uxtb	r3, r3
 8011a22:	2b03      	cmp	r3, #3
 8011a24:	d11c      	bne.n	8011a60 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8011a26:	7dfa      	ldrb	r2, [r7, #23]
 8011a28:	68fb      	ldr	r3, [r7, #12]
 8011a2a:	32ae      	adds	r2, #174	@ 0xae
 8011a2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011a30:	695b      	ldr	r3, [r3, #20]
 8011a32:	2b00      	cmp	r3, #0
 8011a34:	d014      	beq.n	8011a60 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8011a36:	7dfa      	ldrb	r2, [r7, #23]
 8011a38:	68fb      	ldr	r3, [r7, #12]
 8011a3a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8011a3e:	7dfa      	ldrb	r2, [r7, #23]
 8011a40:	68fb      	ldr	r3, [r7, #12]
 8011a42:	32ae      	adds	r2, #174	@ 0xae
 8011a44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011a48:	695b      	ldr	r3, [r3, #20]
 8011a4a:	7afa      	ldrb	r2, [r7, #11]
 8011a4c:	4611      	mov	r1, r2
 8011a4e:	68f8      	ldr	r0, [r7, #12]
 8011a50:	4798      	blx	r3
 8011a52:	4603      	mov	r3, r0
 8011a54:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8011a56:	7dbb      	ldrb	r3, [r7, #22]
 8011a58:	2b00      	cmp	r3, #0
 8011a5a:	d001      	beq.n	8011a60 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8011a5c:	7dbb      	ldrb	r3, [r7, #22]
 8011a5e:	e000      	b.n	8011a62 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8011a60:	2300      	movs	r3, #0
}
 8011a62:	4618      	mov	r0, r3
 8011a64:	3718      	adds	r7, #24
 8011a66:	46bd      	mov	sp, r7
 8011a68:	bd80      	pop	{r7, pc}

08011a6a <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8011a6a:	b580      	push	{r7, lr}
 8011a6c:	b084      	sub	sp, #16
 8011a6e:	af00      	add	r7, sp, #0
 8011a70:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8011a72:	2300      	movs	r3, #0
 8011a74:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8011a76:	687b      	ldr	r3, [r7, #4]
 8011a78:	2201      	movs	r2, #1
 8011a7a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8011a7e:	687b      	ldr	r3, [r7, #4]
 8011a80:	2200      	movs	r2, #0
 8011a82:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8011a86:	687b      	ldr	r3, [r7, #4]
 8011a88:	2200      	movs	r2, #0
 8011a8a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8011a8c:	687b      	ldr	r3, [r7, #4]
 8011a8e:	2200      	movs	r2, #0
 8011a90:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8011a94:	687b      	ldr	r3, [r7, #4]
 8011a96:	2200      	movs	r2, #0
 8011a98:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8011a9c:	687b      	ldr	r3, [r7, #4]
 8011a9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011aa2:	2b00      	cmp	r3, #0
 8011aa4:	d014      	beq.n	8011ad0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8011aa6:	687b      	ldr	r3, [r7, #4]
 8011aa8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011aac:	685b      	ldr	r3, [r3, #4]
 8011aae:	2b00      	cmp	r3, #0
 8011ab0:	d00e      	beq.n	8011ad0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8011ab2:	687b      	ldr	r3, [r7, #4]
 8011ab4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011ab8:	685b      	ldr	r3, [r3, #4]
 8011aba:	687a      	ldr	r2, [r7, #4]
 8011abc:	6852      	ldr	r2, [r2, #4]
 8011abe:	b2d2      	uxtb	r2, r2
 8011ac0:	4611      	mov	r1, r2
 8011ac2:	6878      	ldr	r0, [r7, #4]
 8011ac4:	4798      	blx	r3
 8011ac6:	4603      	mov	r3, r0
 8011ac8:	2b00      	cmp	r3, #0
 8011aca:	d001      	beq.n	8011ad0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8011acc:	2303      	movs	r3, #3
 8011ace:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8011ad0:	2340      	movs	r3, #64	@ 0x40
 8011ad2:	2200      	movs	r2, #0
 8011ad4:	2100      	movs	r1, #0
 8011ad6:	6878      	ldr	r0, [r7, #4]
 8011ad8:	f001 fc3b 	bl	8013352 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8011adc:	687b      	ldr	r3, [r7, #4]
 8011ade:	2201      	movs	r2, #1
 8011ae0:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8011ae4:	687b      	ldr	r3, [r7, #4]
 8011ae6:	2240      	movs	r2, #64	@ 0x40
 8011ae8:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8011aec:	2340      	movs	r3, #64	@ 0x40
 8011aee:	2200      	movs	r2, #0
 8011af0:	2180      	movs	r1, #128	@ 0x80
 8011af2:	6878      	ldr	r0, [r7, #4]
 8011af4:	f001 fc2d 	bl	8013352 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8011af8:	687b      	ldr	r3, [r7, #4]
 8011afa:	2201      	movs	r2, #1
 8011afc:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8011afe:	687b      	ldr	r3, [r7, #4]
 8011b00:	2240      	movs	r2, #64	@ 0x40
 8011b02:	621a      	str	r2, [r3, #32]

  return ret;
 8011b04:	7bfb      	ldrb	r3, [r7, #15]
}
 8011b06:	4618      	mov	r0, r3
 8011b08:	3710      	adds	r7, #16
 8011b0a:	46bd      	mov	sp, r7
 8011b0c:	bd80      	pop	{r7, pc}

08011b0e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8011b0e:	b480      	push	{r7}
 8011b10:	b083      	sub	sp, #12
 8011b12:	af00      	add	r7, sp, #0
 8011b14:	6078      	str	r0, [r7, #4]
 8011b16:	460b      	mov	r3, r1
 8011b18:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8011b1a:	687b      	ldr	r3, [r7, #4]
 8011b1c:	78fa      	ldrb	r2, [r7, #3]
 8011b1e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8011b20:	2300      	movs	r3, #0
}
 8011b22:	4618      	mov	r0, r3
 8011b24:	370c      	adds	r7, #12
 8011b26:	46bd      	mov	sp, r7
 8011b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b2c:	4770      	bx	lr

08011b2e <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8011b2e:	b480      	push	{r7}
 8011b30:	b083      	sub	sp, #12
 8011b32:	af00      	add	r7, sp, #0
 8011b34:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8011b36:	687b      	ldr	r3, [r7, #4]
 8011b38:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011b3c:	b2db      	uxtb	r3, r3
 8011b3e:	2b04      	cmp	r3, #4
 8011b40:	d006      	beq.n	8011b50 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8011b42:	687b      	ldr	r3, [r7, #4]
 8011b44:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011b48:	b2da      	uxtb	r2, r3
 8011b4a:	687b      	ldr	r3, [r7, #4]
 8011b4c:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8011b50:	687b      	ldr	r3, [r7, #4]
 8011b52:	2204      	movs	r2, #4
 8011b54:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8011b58:	2300      	movs	r3, #0
}
 8011b5a:	4618      	mov	r0, r3
 8011b5c:	370c      	adds	r7, #12
 8011b5e:	46bd      	mov	sp, r7
 8011b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b64:	4770      	bx	lr

08011b66 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8011b66:	b480      	push	{r7}
 8011b68:	b083      	sub	sp, #12
 8011b6a:	af00      	add	r7, sp, #0
 8011b6c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8011b6e:	687b      	ldr	r3, [r7, #4]
 8011b70:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011b74:	b2db      	uxtb	r3, r3
 8011b76:	2b04      	cmp	r3, #4
 8011b78:	d106      	bne.n	8011b88 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8011b7a:	687b      	ldr	r3, [r7, #4]
 8011b7c:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8011b80:	b2da      	uxtb	r2, r3
 8011b82:	687b      	ldr	r3, [r7, #4]
 8011b84:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8011b88:	2300      	movs	r3, #0
}
 8011b8a:	4618      	mov	r0, r3
 8011b8c:	370c      	adds	r7, #12
 8011b8e:	46bd      	mov	sp, r7
 8011b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b94:	4770      	bx	lr

08011b96 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8011b96:	b580      	push	{r7, lr}
 8011b98:	b082      	sub	sp, #8
 8011b9a:	af00      	add	r7, sp, #0
 8011b9c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011b9e:	687b      	ldr	r3, [r7, #4]
 8011ba0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011ba4:	b2db      	uxtb	r3, r3
 8011ba6:	2b03      	cmp	r3, #3
 8011ba8:	d110      	bne.n	8011bcc <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8011baa:	687b      	ldr	r3, [r7, #4]
 8011bac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011bb0:	2b00      	cmp	r3, #0
 8011bb2:	d00b      	beq.n	8011bcc <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8011bb4:	687b      	ldr	r3, [r7, #4]
 8011bb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011bba:	69db      	ldr	r3, [r3, #28]
 8011bbc:	2b00      	cmp	r3, #0
 8011bbe:	d005      	beq.n	8011bcc <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8011bc0:	687b      	ldr	r3, [r7, #4]
 8011bc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011bc6:	69db      	ldr	r3, [r3, #28]
 8011bc8:	6878      	ldr	r0, [r7, #4]
 8011bca:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8011bcc:	2300      	movs	r3, #0
}
 8011bce:	4618      	mov	r0, r3
 8011bd0:	3708      	adds	r7, #8
 8011bd2:	46bd      	mov	sp, r7
 8011bd4:	bd80      	pop	{r7, pc}

08011bd6 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8011bd6:	b580      	push	{r7, lr}
 8011bd8:	b082      	sub	sp, #8
 8011bda:	af00      	add	r7, sp, #0
 8011bdc:	6078      	str	r0, [r7, #4]
 8011bde:	460b      	mov	r3, r1
 8011be0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8011be2:	687b      	ldr	r3, [r7, #4]
 8011be4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011be8:	687b      	ldr	r3, [r7, #4]
 8011bea:	32ae      	adds	r2, #174	@ 0xae
 8011bec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011bf0:	2b00      	cmp	r3, #0
 8011bf2:	d101      	bne.n	8011bf8 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8011bf4:	2303      	movs	r3, #3
 8011bf6:	e01c      	b.n	8011c32 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011bf8:	687b      	ldr	r3, [r7, #4]
 8011bfa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011bfe:	b2db      	uxtb	r3, r3
 8011c00:	2b03      	cmp	r3, #3
 8011c02:	d115      	bne.n	8011c30 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8011c04:	687b      	ldr	r3, [r7, #4]
 8011c06:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011c0a:	687b      	ldr	r3, [r7, #4]
 8011c0c:	32ae      	adds	r2, #174	@ 0xae
 8011c0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011c12:	6a1b      	ldr	r3, [r3, #32]
 8011c14:	2b00      	cmp	r3, #0
 8011c16:	d00b      	beq.n	8011c30 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8011c18:	687b      	ldr	r3, [r7, #4]
 8011c1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011c1e:	687b      	ldr	r3, [r7, #4]
 8011c20:	32ae      	adds	r2, #174	@ 0xae
 8011c22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011c26:	6a1b      	ldr	r3, [r3, #32]
 8011c28:	78fa      	ldrb	r2, [r7, #3]
 8011c2a:	4611      	mov	r1, r2
 8011c2c:	6878      	ldr	r0, [r7, #4]
 8011c2e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8011c30:	2300      	movs	r3, #0
}
 8011c32:	4618      	mov	r0, r3
 8011c34:	3708      	adds	r7, #8
 8011c36:	46bd      	mov	sp, r7
 8011c38:	bd80      	pop	{r7, pc}

08011c3a <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8011c3a:	b580      	push	{r7, lr}
 8011c3c:	b082      	sub	sp, #8
 8011c3e:	af00      	add	r7, sp, #0
 8011c40:	6078      	str	r0, [r7, #4]
 8011c42:	460b      	mov	r3, r1
 8011c44:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8011c46:	687b      	ldr	r3, [r7, #4]
 8011c48:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011c4c:	687b      	ldr	r3, [r7, #4]
 8011c4e:	32ae      	adds	r2, #174	@ 0xae
 8011c50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011c54:	2b00      	cmp	r3, #0
 8011c56:	d101      	bne.n	8011c5c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8011c58:	2303      	movs	r3, #3
 8011c5a:	e01c      	b.n	8011c96 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011c5c:	687b      	ldr	r3, [r7, #4]
 8011c5e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011c62:	b2db      	uxtb	r3, r3
 8011c64:	2b03      	cmp	r3, #3
 8011c66:	d115      	bne.n	8011c94 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8011c68:	687b      	ldr	r3, [r7, #4]
 8011c6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011c6e:	687b      	ldr	r3, [r7, #4]
 8011c70:	32ae      	adds	r2, #174	@ 0xae
 8011c72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011c76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011c78:	2b00      	cmp	r3, #0
 8011c7a:	d00b      	beq.n	8011c94 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8011c7c:	687b      	ldr	r3, [r7, #4]
 8011c7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011c82:	687b      	ldr	r3, [r7, #4]
 8011c84:	32ae      	adds	r2, #174	@ 0xae
 8011c86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011c8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011c8c:	78fa      	ldrb	r2, [r7, #3]
 8011c8e:	4611      	mov	r1, r2
 8011c90:	6878      	ldr	r0, [r7, #4]
 8011c92:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8011c94:	2300      	movs	r3, #0
}
 8011c96:	4618      	mov	r0, r3
 8011c98:	3708      	adds	r7, #8
 8011c9a:	46bd      	mov	sp, r7
 8011c9c:	bd80      	pop	{r7, pc}

08011c9e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8011c9e:	b480      	push	{r7}
 8011ca0:	b083      	sub	sp, #12
 8011ca2:	af00      	add	r7, sp, #0
 8011ca4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8011ca6:	2300      	movs	r3, #0
}
 8011ca8:	4618      	mov	r0, r3
 8011caa:	370c      	adds	r7, #12
 8011cac:	46bd      	mov	sp, r7
 8011cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cb2:	4770      	bx	lr

08011cb4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8011cb4:	b580      	push	{r7, lr}
 8011cb6:	b084      	sub	sp, #16
 8011cb8:	af00      	add	r7, sp, #0
 8011cba:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8011cbc:	2300      	movs	r3, #0
 8011cbe:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8011cc0:	687b      	ldr	r3, [r7, #4]
 8011cc2:	2201      	movs	r2, #1
 8011cc4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8011cc8:	687b      	ldr	r3, [r7, #4]
 8011cca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011cce:	2b00      	cmp	r3, #0
 8011cd0:	d00e      	beq.n	8011cf0 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8011cd2:	687b      	ldr	r3, [r7, #4]
 8011cd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011cd8:	685b      	ldr	r3, [r3, #4]
 8011cda:	687a      	ldr	r2, [r7, #4]
 8011cdc:	6852      	ldr	r2, [r2, #4]
 8011cde:	b2d2      	uxtb	r2, r2
 8011ce0:	4611      	mov	r1, r2
 8011ce2:	6878      	ldr	r0, [r7, #4]
 8011ce4:	4798      	blx	r3
 8011ce6:	4603      	mov	r3, r0
 8011ce8:	2b00      	cmp	r3, #0
 8011cea:	d001      	beq.n	8011cf0 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8011cec:	2303      	movs	r3, #3
 8011cee:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8011cf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8011cf2:	4618      	mov	r0, r3
 8011cf4:	3710      	adds	r7, #16
 8011cf6:	46bd      	mov	sp, r7
 8011cf8:	bd80      	pop	{r7, pc}

08011cfa <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8011cfa:	b480      	push	{r7}
 8011cfc:	b083      	sub	sp, #12
 8011cfe:	af00      	add	r7, sp, #0
 8011d00:	6078      	str	r0, [r7, #4]
 8011d02:	460b      	mov	r3, r1
 8011d04:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8011d06:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8011d08:	4618      	mov	r0, r3
 8011d0a:	370c      	adds	r7, #12
 8011d0c:	46bd      	mov	sp, r7
 8011d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d12:	4770      	bx	lr

08011d14 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8011d14:	b480      	push	{r7}
 8011d16:	b083      	sub	sp, #12
 8011d18:	af00      	add	r7, sp, #0
 8011d1a:	6078      	str	r0, [r7, #4]
 8011d1c:	460b      	mov	r3, r1
 8011d1e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8011d20:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8011d22:	4618      	mov	r0, r3
 8011d24:	370c      	adds	r7, #12
 8011d26:	46bd      	mov	sp, r7
 8011d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d2c:	4770      	bx	lr

08011d2e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8011d2e:	b580      	push	{r7, lr}
 8011d30:	b086      	sub	sp, #24
 8011d32:	af00      	add	r7, sp, #0
 8011d34:	6078      	str	r0, [r7, #4]
 8011d36:	460b      	mov	r3, r1
 8011d38:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8011d3a:	687b      	ldr	r3, [r7, #4]
 8011d3c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8011d3e:	687b      	ldr	r3, [r7, #4]
 8011d40:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8011d42:	2300      	movs	r3, #0
 8011d44:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8011d46:	68fb      	ldr	r3, [r7, #12]
 8011d48:	885b      	ldrh	r3, [r3, #2]
 8011d4a:	b29b      	uxth	r3, r3
 8011d4c:	68fa      	ldr	r2, [r7, #12]
 8011d4e:	7812      	ldrb	r2, [r2, #0]
 8011d50:	4293      	cmp	r3, r2
 8011d52:	d91f      	bls.n	8011d94 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8011d54:	68fb      	ldr	r3, [r7, #12]
 8011d56:	781b      	ldrb	r3, [r3, #0]
 8011d58:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8011d5a:	e013      	b.n	8011d84 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8011d5c:	f107 030a 	add.w	r3, r7, #10
 8011d60:	4619      	mov	r1, r3
 8011d62:	6978      	ldr	r0, [r7, #20]
 8011d64:	f000 f81b 	bl	8011d9e <USBD_GetNextDesc>
 8011d68:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8011d6a:	697b      	ldr	r3, [r7, #20]
 8011d6c:	785b      	ldrb	r3, [r3, #1]
 8011d6e:	2b05      	cmp	r3, #5
 8011d70:	d108      	bne.n	8011d84 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8011d72:	697b      	ldr	r3, [r7, #20]
 8011d74:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8011d76:	693b      	ldr	r3, [r7, #16]
 8011d78:	789b      	ldrb	r3, [r3, #2]
 8011d7a:	78fa      	ldrb	r2, [r7, #3]
 8011d7c:	429a      	cmp	r2, r3
 8011d7e:	d008      	beq.n	8011d92 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8011d80:	2300      	movs	r3, #0
 8011d82:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8011d84:	68fb      	ldr	r3, [r7, #12]
 8011d86:	885b      	ldrh	r3, [r3, #2]
 8011d88:	b29a      	uxth	r2, r3
 8011d8a:	897b      	ldrh	r3, [r7, #10]
 8011d8c:	429a      	cmp	r2, r3
 8011d8e:	d8e5      	bhi.n	8011d5c <USBD_GetEpDesc+0x2e>
 8011d90:	e000      	b.n	8011d94 <USBD_GetEpDesc+0x66>
          break;
 8011d92:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8011d94:	693b      	ldr	r3, [r7, #16]
}
 8011d96:	4618      	mov	r0, r3
 8011d98:	3718      	adds	r7, #24
 8011d9a:	46bd      	mov	sp, r7
 8011d9c:	bd80      	pop	{r7, pc}

08011d9e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8011d9e:	b480      	push	{r7}
 8011da0:	b085      	sub	sp, #20
 8011da2:	af00      	add	r7, sp, #0
 8011da4:	6078      	str	r0, [r7, #4]
 8011da6:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8011da8:	687b      	ldr	r3, [r7, #4]
 8011daa:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8011dac:	683b      	ldr	r3, [r7, #0]
 8011dae:	881b      	ldrh	r3, [r3, #0]
 8011db0:	68fa      	ldr	r2, [r7, #12]
 8011db2:	7812      	ldrb	r2, [r2, #0]
 8011db4:	4413      	add	r3, r2
 8011db6:	b29a      	uxth	r2, r3
 8011db8:	683b      	ldr	r3, [r7, #0]
 8011dba:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8011dbc:	68fb      	ldr	r3, [r7, #12]
 8011dbe:	781b      	ldrb	r3, [r3, #0]
 8011dc0:	461a      	mov	r2, r3
 8011dc2:	687b      	ldr	r3, [r7, #4]
 8011dc4:	4413      	add	r3, r2
 8011dc6:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8011dc8:	68fb      	ldr	r3, [r7, #12]
}
 8011dca:	4618      	mov	r0, r3
 8011dcc:	3714      	adds	r7, #20
 8011dce:	46bd      	mov	sp, r7
 8011dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dd4:	4770      	bx	lr

08011dd6 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8011dd6:	b480      	push	{r7}
 8011dd8:	b087      	sub	sp, #28
 8011dda:	af00      	add	r7, sp, #0
 8011ddc:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8011dde:	687b      	ldr	r3, [r7, #4]
 8011de0:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8011de2:	697b      	ldr	r3, [r7, #20]
 8011de4:	781b      	ldrb	r3, [r3, #0]
 8011de6:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8011de8:	697b      	ldr	r3, [r7, #20]
 8011dea:	3301      	adds	r3, #1
 8011dec:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8011dee:	697b      	ldr	r3, [r7, #20]
 8011df0:	781b      	ldrb	r3, [r3, #0]
 8011df2:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8011df4:	8a3b      	ldrh	r3, [r7, #16]
 8011df6:	021b      	lsls	r3, r3, #8
 8011df8:	b21a      	sxth	r2, r3
 8011dfa:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8011dfe:	4313      	orrs	r3, r2
 8011e00:	b21b      	sxth	r3, r3
 8011e02:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8011e04:	89fb      	ldrh	r3, [r7, #14]
}
 8011e06:	4618      	mov	r0, r3
 8011e08:	371c      	adds	r7, #28
 8011e0a:	46bd      	mov	sp, r7
 8011e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e10:	4770      	bx	lr
	...

08011e14 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011e14:	b580      	push	{r7, lr}
 8011e16:	b084      	sub	sp, #16
 8011e18:	af00      	add	r7, sp, #0
 8011e1a:	6078      	str	r0, [r7, #4]
 8011e1c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8011e1e:	2300      	movs	r3, #0
 8011e20:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011e22:	683b      	ldr	r3, [r7, #0]
 8011e24:	781b      	ldrb	r3, [r3, #0]
 8011e26:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8011e2a:	2b40      	cmp	r3, #64	@ 0x40
 8011e2c:	d005      	beq.n	8011e3a <USBD_StdDevReq+0x26>
 8011e2e:	2b40      	cmp	r3, #64	@ 0x40
 8011e30:	d857      	bhi.n	8011ee2 <USBD_StdDevReq+0xce>
 8011e32:	2b00      	cmp	r3, #0
 8011e34:	d00f      	beq.n	8011e56 <USBD_StdDevReq+0x42>
 8011e36:	2b20      	cmp	r3, #32
 8011e38:	d153      	bne.n	8011ee2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8011e3a:	687b      	ldr	r3, [r7, #4]
 8011e3c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011e40:	687b      	ldr	r3, [r7, #4]
 8011e42:	32ae      	adds	r2, #174	@ 0xae
 8011e44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011e48:	689b      	ldr	r3, [r3, #8]
 8011e4a:	6839      	ldr	r1, [r7, #0]
 8011e4c:	6878      	ldr	r0, [r7, #4]
 8011e4e:	4798      	blx	r3
 8011e50:	4603      	mov	r3, r0
 8011e52:	73fb      	strb	r3, [r7, #15]
      break;
 8011e54:	e04a      	b.n	8011eec <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8011e56:	683b      	ldr	r3, [r7, #0]
 8011e58:	785b      	ldrb	r3, [r3, #1]
 8011e5a:	2b09      	cmp	r3, #9
 8011e5c:	d83b      	bhi.n	8011ed6 <USBD_StdDevReq+0xc2>
 8011e5e:	a201      	add	r2, pc, #4	@ (adr r2, 8011e64 <USBD_StdDevReq+0x50>)
 8011e60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011e64:	08011eb9 	.word	0x08011eb9
 8011e68:	08011ecd 	.word	0x08011ecd
 8011e6c:	08011ed7 	.word	0x08011ed7
 8011e70:	08011ec3 	.word	0x08011ec3
 8011e74:	08011ed7 	.word	0x08011ed7
 8011e78:	08011e97 	.word	0x08011e97
 8011e7c:	08011e8d 	.word	0x08011e8d
 8011e80:	08011ed7 	.word	0x08011ed7
 8011e84:	08011eaf 	.word	0x08011eaf
 8011e88:	08011ea1 	.word	0x08011ea1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8011e8c:	6839      	ldr	r1, [r7, #0]
 8011e8e:	6878      	ldr	r0, [r7, #4]
 8011e90:	f000 fa3c 	bl	801230c <USBD_GetDescriptor>
          break;
 8011e94:	e024      	b.n	8011ee0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8011e96:	6839      	ldr	r1, [r7, #0]
 8011e98:	6878      	ldr	r0, [r7, #4]
 8011e9a:	f000 fbcb 	bl	8012634 <USBD_SetAddress>
          break;
 8011e9e:	e01f      	b.n	8011ee0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8011ea0:	6839      	ldr	r1, [r7, #0]
 8011ea2:	6878      	ldr	r0, [r7, #4]
 8011ea4:	f000 fc0a 	bl	80126bc <USBD_SetConfig>
 8011ea8:	4603      	mov	r3, r0
 8011eaa:	73fb      	strb	r3, [r7, #15]
          break;
 8011eac:	e018      	b.n	8011ee0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8011eae:	6839      	ldr	r1, [r7, #0]
 8011eb0:	6878      	ldr	r0, [r7, #4]
 8011eb2:	f000 fcad 	bl	8012810 <USBD_GetConfig>
          break;
 8011eb6:	e013      	b.n	8011ee0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8011eb8:	6839      	ldr	r1, [r7, #0]
 8011eba:	6878      	ldr	r0, [r7, #4]
 8011ebc:	f000 fcde 	bl	801287c <USBD_GetStatus>
          break;
 8011ec0:	e00e      	b.n	8011ee0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8011ec2:	6839      	ldr	r1, [r7, #0]
 8011ec4:	6878      	ldr	r0, [r7, #4]
 8011ec6:	f000 fd0d 	bl	80128e4 <USBD_SetFeature>
          break;
 8011eca:	e009      	b.n	8011ee0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8011ecc:	6839      	ldr	r1, [r7, #0]
 8011ece:	6878      	ldr	r0, [r7, #4]
 8011ed0:	f000 fd31 	bl	8012936 <USBD_ClrFeature>
          break;
 8011ed4:	e004      	b.n	8011ee0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8011ed6:	6839      	ldr	r1, [r7, #0]
 8011ed8:	6878      	ldr	r0, [r7, #4]
 8011eda:	f000 fd88 	bl	80129ee <USBD_CtlError>
          break;
 8011ede:	bf00      	nop
      }
      break;
 8011ee0:	e004      	b.n	8011eec <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8011ee2:	6839      	ldr	r1, [r7, #0]
 8011ee4:	6878      	ldr	r0, [r7, #4]
 8011ee6:	f000 fd82 	bl	80129ee <USBD_CtlError>
      break;
 8011eea:	bf00      	nop
  }

  return ret;
 8011eec:	7bfb      	ldrb	r3, [r7, #15]
}
 8011eee:	4618      	mov	r0, r3
 8011ef0:	3710      	adds	r7, #16
 8011ef2:	46bd      	mov	sp, r7
 8011ef4:	bd80      	pop	{r7, pc}
 8011ef6:	bf00      	nop

08011ef8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011ef8:	b580      	push	{r7, lr}
 8011efa:	b084      	sub	sp, #16
 8011efc:	af00      	add	r7, sp, #0
 8011efe:	6078      	str	r0, [r7, #4]
 8011f00:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8011f02:	2300      	movs	r3, #0
 8011f04:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011f06:	683b      	ldr	r3, [r7, #0]
 8011f08:	781b      	ldrb	r3, [r3, #0]
 8011f0a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8011f0e:	2b40      	cmp	r3, #64	@ 0x40
 8011f10:	d005      	beq.n	8011f1e <USBD_StdItfReq+0x26>
 8011f12:	2b40      	cmp	r3, #64	@ 0x40
 8011f14:	d852      	bhi.n	8011fbc <USBD_StdItfReq+0xc4>
 8011f16:	2b00      	cmp	r3, #0
 8011f18:	d001      	beq.n	8011f1e <USBD_StdItfReq+0x26>
 8011f1a:	2b20      	cmp	r3, #32
 8011f1c:	d14e      	bne.n	8011fbc <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8011f1e:	687b      	ldr	r3, [r7, #4]
 8011f20:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011f24:	b2db      	uxtb	r3, r3
 8011f26:	3b01      	subs	r3, #1
 8011f28:	2b02      	cmp	r3, #2
 8011f2a:	d840      	bhi.n	8011fae <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8011f2c:	683b      	ldr	r3, [r7, #0]
 8011f2e:	889b      	ldrh	r3, [r3, #4]
 8011f30:	b2db      	uxtb	r3, r3
 8011f32:	2b01      	cmp	r3, #1
 8011f34:	d836      	bhi.n	8011fa4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8011f36:	683b      	ldr	r3, [r7, #0]
 8011f38:	889b      	ldrh	r3, [r3, #4]
 8011f3a:	b2db      	uxtb	r3, r3
 8011f3c:	4619      	mov	r1, r3
 8011f3e:	6878      	ldr	r0, [r7, #4]
 8011f40:	f7ff fedb 	bl	8011cfa <USBD_CoreFindIF>
 8011f44:	4603      	mov	r3, r0
 8011f46:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8011f48:	7bbb      	ldrb	r3, [r7, #14]
 8011f4a:	2bff      	cmp	r3, #255	@ 0xff
 8011f4c:	d01d      	beq.n	8011f8a <USBD_StdItfReq+0x92>
 8011f4e:	7bbb      	ldrb	r3, [r7, #14]
 8011f50:	2b00      	cmp	r3, #0
 8011f52:	d11a      	bne.n	8011f8a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8011f54:	7bba      	ldrb	r2, [r7, #14]
 8011f56:	687b      	ldr	r3, [r7, #4]
 8011f58:	32ae      	adds	r2, #174	@ 0xae
 8011f5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011f5e:	689b      	ldr	r3, [r3, #8]
 8011f60:	2b00      	cmp	r3, #0
 8011f62:	d00f      	beq.n	8011f84 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8011f64:	7bba      	ldrb	r2, [r7, #14]
 8011f66:	687b      	ldr	r3, [r7, #4]
 8011f68:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8011f6c:	7bba      	ldrb	r2, [r7, #14]
 8011f6e:	687b      	ldr	r3, [r7, #4]
 8011f70:	32ae      	adds	r2, #174	@ 0xae
 8011f72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011f76:	689b      	ldr	r3, [r3, #8]
 8011f78:	6839      	ldr	r1, [r7, #0]
 8011f7a:	6878      	ldr	r0, [r7, #4]
 8011f7c:	4798      	blx	r3
 8011f7e:	4603      	mov	r3, r0
 8011f80:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8011f82:	e004      	b.n	8011f8e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8011f84:	2303      	movs	r3, #3
 8011f86:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8011f88:	e001      	b.n	8011f8e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8011f8a:	2303      	movs	r3, #3
 8011f8c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8011f8e:	683b      	ldr	r3, [r7, #0]
 8011f90:	88db      	ldrh	r3, [r3, #6]
 8011f92:	2b00      	cmp	r3, #0
 8011f94:	d110      	bne.n	8011fb8 <USBD_StdItfReq+0xc0>
 8011f96:	7bfb      	ldrb	r3, [r7, #15]
 8011f98:	2b00      	cmp	r3, #0
 8011f9a:	d10d      	bne.n	8011fb8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8011f9c:	6878      	ldr	r0, [r7, #4]
 8011f9e:	f000 fdfd 	bl	8012b9c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8011fa2:	e009      	b.n	8011fb8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8011fa4:	6839      	ldr	r1, [r7, #0]
 8011fa6:	6878      	ldr	r0, [r7, #4]
 8011fa8:	f000 fd21 	bl	80129ee <USBD_CtlError>
          break;
 8011fac:	e004      	b.n	8011fb8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8011fae:	6839      	ldr	r1, [r7, #0]
 8011fb0:	6878      	ldr	r0, [r7, #4]
 8011fb2:	f000 fd1c 	bl	80129ee <USBD_CtlError>
          break;
 8011fb6:	e000      	b.n	8011fba <USBD_StdItfReq+0xc2>
          break;
 8011fb8:	bf00      	nop
      }
      break;
 8011fba:	e004      	b.n	8011fc6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8011fbc:	6839      	ldr	r1, [r7, #0]
 8011fbe:	6878      	ldr	r0, [r7, #4]
 8011fc0:	f000 fd15 	bl	80129ee <USBD_CtlError>
      break;
 8011fc4:	bf00      	nop
  }

  return ret;
 8011fc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8011fc8:	4618      	mov	r0, r3
 8011fca:	3710      	adds	r7, #16
 8011fcc:	46bd      	mov	sp, r7
 8011fce:	bd80      	pop	{r7, pc}

08011fd0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011fd0:	b580      	push	{r7, lr}
 8011fd2:	b084      	sub	sp, #16
 8011fd4:	af00      	add	r7, sp, #0
 8011fd6:	6078      	str	r0, [r7, #4]
 8011fd8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8011fda:	2300      	movs	r3, #0
 8011fdc:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8011fde:	683b      	ldr	r3, [r7, #0]
 8011fe0:	889b      	ldrh	r3, [r3, #4]
 8011fe2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011fe4:	683b      	ldr	r3, [r7, #0]
 8011fe6:	781b      	ldrb	r3, [r3, #0]
 8011fe8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8011fec:	2b40      	cmp	r3, #64	@ 0x40
 8011fee:	d007      	beq.n	8012000 <USBD_StdEPReq+0x30>
 8011ff0:	2b40      	cmp	r3, #64	@ 0x40
 8011ff2:	f200 817f 	bhi.w	80122f4 <USBD_StdEPReq+0x324>
 8011ff6:	2b00      	cmp	r3, #0
 8011ff8:	d02a      	beq.n	8012050 <USBD_StdEPReq+0x80>
 8011ffa:	2b20      	cmp	r3, #32
 8011ffc:	f040 817a 	bne.w	80122f4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8012000:	7bbb      	ldrb	r3, [r7, #14]
 8012002:	4619      	mov	r1, r3
 8012004:	6878      	ldr	r0, [r7, #4]
 8012006:	f7ff fe85 	bl	8011d14 <USBD_CoreFindEP>
 801200a:	4603      	mov	r3, r0
 801200c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801200e:	7b7b      	ldrb	r3, [r7, #13]
 8012010:	2bff      	cmp	r3, #255	@ 0xff
 8012012:	f000 8174 	beq.w	80122fe <USBD_StdEPReq+0x32e>
 8012016:	7b7b      	ldrb	r3, [r7, #13]
 8012018:	2b00      	cmp	r3, #0
 801201a:	f040 8170 	bne.w	80122fe <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 801201e:	7b7a      	ldrb	r2, [r7, #13]
 8012020:	687b      	ldr	r3, [r7, #4]
 8012022:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8012026:	7b7a      	ldrb	r2, [r7, #13]
 8012028:	687b      	ldr	r3, [r7, #4]
 801202a:	32ae      	adds	r2, #174	@ 0xae
 801202c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012030:	689b      	ldr	r3, [r3, #8]
 8012032:	2b00      	cmp	r3, #0
 8012034:	f000 8163 	beq.w	80122fe <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8012038:	7b7a      	ldrb	r2, [r7, #13]
 801203a:	687b      	ldr	r3, [r7, #4]
 801203c:	32ae      	adds	r2, #174	@ 0xae
 801203e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012042:	689b      	ldr	r3, [r3, #8]
 8012044:	6839      	ldr	r1, [r7, #0]
 8012046:	6878      	ldr	r0, [r7, #4]
 8012048:	4798      	blx	r3
 801204a:	4603      	mov	r3, r0
 801204c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 801204e:	e156      	b.n	80122fe <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8012050:	683b      	ldr	r3, [r7, #0]
 8012052:	785b      	ldrb	r3, [r3, #1]
 8012054:	2b03      	cmp	r3, #3
 8012056:	d008      	beq.n	801206a <USBD_StdEPReq+0x9a>
 8012058:	2b03      	cmp	r3, #3
 801205a:	f300 8145 	bgt.w	80122e8 <USBD_StdEPReq+0x318>
 801205e:	2b00      	cmp	r3, #0
 8012060:	f000 809b 	beq.w	801219a <USBD_StdEPReq+0x1ca>
 8012064:	2b01      	cmp	r3, #1
 8012066:	d03c      	beq.n	80120e2 <USBD_StdEPReq+0x112>
 8012068:	e13e      	b.n	80122e8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 801206a:	687b      	ldr	r3, [r7, #4]
 801206c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012070:	b2db      	uxtb	r3, r3
 8012072:	2b02      	cmp	r3, #2
 8012074:	d002      	beq.n	801207c <USBD_StdEPReq+0xac>
 8012076:	2b03      	cmp	r3, #3
 8012078:	d016      	beq.n	80120a8 <USBD_StdEPReq+0xd8>
 801207a:	e02c      	b.n	80120d6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801207c:	7bbb      	ldrb	r3, [r7, #14]
 801207e:	2b00      	cmp	r3, #0
 8012080:	d00d      	beq.n	801209e <USBD_StdEPReq+0xce>
 8012082:	7bbb      	ldrb	r3, [r7, #14]
 8012084:	2b80      	cmp	r3, #128	@ 0x80
 8012086:	d00a      	beq.n	801209e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8012088:	7bbb      	ldrb	r3, [r7, #14]
 801208a:	4619      	mov	r1, r3
 801208c:	6878      	ldr	r0, [r7, #4]
 801208e:	f001 f9a5 	bl	80133dc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8012092:	2180      	movs	r1, #128	@ 0x80
 8012094:	6878      	ldr	r0, [r7, #4]
 8012096:	f001 f9a1 	bl	80133dc <USBD_LL_StallEP>
 801209a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801209c:	e020      	b.n	80120e0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 801209e:	6839      	ldr	r1, [r7, #0]
 80120a0:	6878      	ldr	r0, [r7, #4]
 80120a2:	f000 fca4 	bl	80129ee <USBD_CtlError>
              break;
 80120a6:	e01b      	b.n	80120e0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80120a8:	683b      	ldr	r3, [r7, #0]
 80120aa:	885b      	ldrh	r3, [r3, #2]
 80120ac:	2b00      	cmp	r3, #0
 80120ae:	d10e      	bne.n	80120ce <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80120b0:	7bbb      	ldrb	r3, [r7, #14]
 80120b2:	2b00      	cmp	r3, #0
 80120b4:	d00b      	beq.n	80120ce <USBD_StdEPReq+0xfe>
 80120b6:	7bbb      	ldrb	r3, [r7, #14]
 80120b8:	2b80      	cmp	r3, #128	@ 0x80
 80120ba:	d008      	beq.n	80120ce <USBD_StdEPReq+0xfe>
 80120bc:	683b      	ldr	r3, [r7, #0]
 80120be:	88db      	ldrh	r3, [r3, #6]
 80120c0:	2b00      	cmp	r3, #0
 80120c2:	d104      	bne.n	80120ce <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80120c4:	7bbb      	ldrb	r3, [r7, #14]
 80120c6:	4619      	mov	r1, r3
 80120c8:	6878      	ldr	r0, [r7, #4]
 80120ca:	f001 f987 	bl	80133dc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80120ce:	6878      	ldr	r0, [r7, #4]
 80120d0:	f000 fd64 	bl	8012b9c <USBD_CtlSendStatus>

              break;
 80120d4:	e004      	b.n	80120e0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80120d6:	6839      	ldr	r1, [r7, #0]
 80120d8:	6878      	ldr	r0, [r7, #4]
 80120da:	f000 fc88 	bl	80129ee <USBD_CtlError>
              break;
 80120de:	bf00      	nop
          }
          break;
 80120e0:	e107      	b.n	80122f2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80120e2:	687b      	ldr	r3, [r7, #4]
 80120e4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80120e8:	b2db      	uxtb	r3, r3
 80120ea:	2b02      	cmp	r3, #2
 80120ec:	d002      	beq.n	80120f4 <USBD_StdEPReq+0x124>
 80120ee:	2b03      	cmp	r3, #3
 80120f0:	d016      	beq.n	8012120 <USBD_StdEPReq+0x150>
 80120f2:	e04b      	b.n	801218c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80120f4:	7bbb      	ldrb	r3, [r7, #14]
 80120f6:	2b00      	cmp	r3, #0
 80120f8:	d00d      	beq.n	8012116 <USBD_StdEPReq+0x146>
 80120fa:	7bbb      	ldrb	r3, [r7, #14]
 80120fc:	2b80      	cmp	r3, #128	@ 0x80
 80120fe:	d00a      	beq.n	8012116 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8012100:	7bbb      	ldrb	r3, [r7, #14]
 8012102:	4619      	mov	r1, r3
 8012104:	6878      	ldr	r0, [r7, #4]
 8012106:	f001 f969 	bl	80133dc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801210a:	2180      	movs	r1, #128	@ 0x80
 801210c:	6878      	ldr	r0, [r7, #4]
 801210e:	f001 f965 	bl	80133dc <USBD_LL_StallEP>
 8012112:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8012114:	e040      	b.n	8012198 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8012116:	6839      	ldr	r1, [r7, #0]
 8012118:	6878      	ldr	r0, [r7, #4]
 801211a:	f000 fc68 	bl	80129ee <USBD_CtlError>
              break;
 801211e:	e03b      	b.n	8012198 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8012120:	683b      	ldr	r3, [r7, #0]
 8012122:	885b      	ldrh	r3, [r3, #2]
 8012124:	2b00      	cmp	r3, #0
 8012126:	d136      	bne.n	8012196 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8012128:	7bbb      	ldrb	r3, [r7, #14]
 801212a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801212e:	2b00      	cmp	r3, #0
 8012130:	d004      	beq.n	801213c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8012132:	7bbb      	ldrb	r3, [r7, #14]
 8012134:	4619      	mov	r1, r3
 8012136:	6878      	ldr	r0, [r7, #4]
 8012138:	f001 f96f 	bl	801341a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 801213c:	6878      	ldr	r0, [r7, #4]
 801213e:	f000 fd2d 	bl	8012b9c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8012142:	7bbb      	ldrb	r3, [r7, #14]
 8012144:	4619      	mov	r1, r3
 8012146:	6878      	ldr	r0, [r7, #4]
 8012148:	f7ff fde4 	bl	8011d14 <USBD_CoreFindEP>
 801214c:	4603      	mov	r3, r0
 801214e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8012150:	7b7b      	ldrb	r3, [r7, #13]
 8012152:	2bff      	cmp	r3, #255	@ 0xff
 8012154:	d01f      	beq.n	8012196 <USBD_StdEPReq+0x1c6>
 8012156:	7b7b      	ldrb	r3, [r7, #13]
 8012158:	2b00      	cmp	r3, #0
 801215a:	d11c      	bne.n	8012196 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 801215c:	7b7a      	ldrb	r2, [r7, #13]
 801215e:	687b      	ldr	r3, [r7, #4]
 8012160:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8012164:	7b7a      	ldrb	r2, [r7, #13]
 8012166:	687b      	ldr	r3, [r7, #4]
 8012168:	32ae      	adds	r2, #174	@ 0xae
 801216a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801216e:	689b      	ldr	r3, [r3, #8]
 8012170:	2b00      	cmp	r3, #0
 8012172:	d010      	beq.n	8012196 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8012174:	7b7a      	ldrb	r2, [r7, #13]
 8012176:	687b      	ldr	r3, [r7, #4]
 8012178:	32ae      	adds	r2, #174	@ 0xae
 801217a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801217e:	689b      	ldr	r3, [r3, #8]
 8012180:	6839      	ldr	r1, [r7, #0]
 8012182:	6878      	ldr	r0, [r7, #4]
 8012184:	4798      	blx	r3
 8012186:	4603      	mov	r3, r0
 8012188:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 801218a:	e004      	b.n	8012196 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 801218c:	6839      	ldr	r1, [r7, #0]
 801218e:	6878      	ldr	r0, [r7, #4]
 8012190:	f000 fc2d 	bl	80129ee <USBD_CtlError>
              break;
 8012194:	e000      	b.n	8012198 <USBD_StdEPReq+0x1c8>
              break;
 8012196:	bf00      	nop
          }
          break;
 8012198:	e0ab      	b.n	80122f2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 801219a:	687b      	ldr	r3, [r7, #4]
 801219c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80121a0:	b2db      	uxtb	r3, r3
 80121a2:	2b02      	cmp	r3, #2
 80121a4:	d002      	beq.n	80121ac <USBD_StdEPReq+0x1dc>
 80121a6:	2b03      	cmp	r3, #3
 80121a8:	d032      	beq.n	8012210 <USBD_StdEPReq+0x240>
 80121aa:	e097      	b.n	80122dc <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80121ac:	7bbb      	ldrb	r3, [r7, #14]
 80121ae:	2b00      	cmp	r3, #0
 80121b0:	d007      	beq.n	80121c2 <USBD_StdEPReq+0x1f2>
 80121b2:	7bbb      	ldrb	r3, [r7, #14]
 80121b4:	2b80      	cmp	r3, #128	@ 0x80
 80121b6:	d004      	beq.n	80121c2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80121b8:	6839      	ldr	r1, [r7, #0]
 80121ba:	6878      	ldr	r0, [r7, #4]
 80121bc:	f000 fc17 	bl	80129ee <USBD_CtlError>
                break;
 80121c0:	e091      	b.n	80122e6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80121c2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80121c6:	2b00      	cmp	r3, #0
 80121c8:	da0b      	bge.n	80121e2 <USBD_StdEPReq+0x212>
 80121ca:	7bbb      	ldrb	r3, [r7, #14]
 80121cc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80121d0:	4613      	mov	r3, r2
 80121d2:	009b      	lsls	r3, r3, #2
 80121d4:	4413      	add	r3, r2
 80121d6:	009b      	lsls	r3, r3, #2
 80121d8:	3310      	adds	r3, #16
 80121da:	687a      	ldr	r2, [r7, #4]
 80121dc:	4413      	add	r3, r2
 80121de:	3304      	adds	r3, #4
 80121e0:	e00b      	b.n	80121fa <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80121e2:	7bbb      	ldrb	r3, [r7, #14]
 80121e4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80121e8:	4613      	mov	r3, r2
 80121ea:	009b      	lsls	r3, r3, #2
 80121ec:	4413      	add	r3, r2
 80121ee:	009b      	lsls	r3, r3, #2
 80121f0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80121f4:	687a      	ldr	r2, [r7, #4]
 80121f6:	4413      	add	r3, r2
 80121f8:	3304      	adds	r3, #4
 80121fa:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80121fc:	68bb      	ldr	r3, [r7, #8]
 80121fe:	2200      	movs	r2, #0
 8012200:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8012202:	68bb      	ldr	r3, [r7, #8]
 8012204:	2202      	movs	r2, #2
 8012206:	4619      	mov	r1, r3
 8012208:	6878      	ldr	r0, [r7, #4]
 801220a:	f000 fc6d 	bl	8012ae8 <USBD_CtlSendData>
              break;
 801220e:	e06a      	b.n	80122e6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8012210:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012214:	2b00      	cmp	r3, #0
 8012216:	da11      	bge.n	801223c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8012218:	7bbb      	ldrb	r3, [r7, #14]
 801221a:	f003 020f 	and.w	r2, r3, #15
 801221e:	6879      	ldr	r1, [r7, #4]
 8012220:	4613      	mov	r3, r2
 8012222:	009b      	lsls	r3, r3, #2
 8012224:	4413      	add	r3, r2
 8012226:	009b      	lsls	r3, r3, #2
 8012228:	440b      	add	r3, r1
 801222a:	3324      	adds	r3, #36	@ 0x24
 801222c:	881b      	ldrh	r3, [r3, #0]
 801222e:	2b00      	cmp	r3, #0
 8012230:	d117      	bne.n	8012262 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8012232:	6839      	ldr	r1, [r7, #0]
 8012234:	6878      	ldr	r0, [r7, #4]
 8012236:	f000 fbda 	bl	80129ee <USBD_CtlError>
                  break;
 801223a:	e054      	b.n	80122e6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 801223c:	7bbb      	ldrb	r3, [r7, #14]
 801223e:	f003 020f 	and.w	r2, r3, #15
 8012242:	6879      	ldr	r1, [r7, #4]
 8012244:	4613      	mov	r3, r2
 8012246:	009b      	lsls	r3, r3, #2
 8012248:	4413      	add	r3, r2
 801224a:	009b      	lsls	r3, r3, #2
 801224c:	440b      	add	r3, r1
 801224e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8012252:	881b      	ldrh	r3, [r3, #0]
 8012254:	2b00      	cmp	r3, #0
 8012256:	d104      	bne.n	8012262 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8012258:	6839      	ldr	r1, [r7, #0]
 801225a:	6878      	ldr	r0, [r7, #4]
 801225c:	f000 fbc7 	bl	80129ee <USBD_CtlError>
                  break;
 8012260:	e041      	b.n	80122e6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8012262:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012266:	2b00      	cmp	r3, #0
 8012268:	da0b      	bge.n	8012282 <USBD_StdEPReq+0x2b2>
 801226a:	7bbb      	ldrb	r3, [r7, #14]
 801226c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8012270:	4613      	mov	r3, r2
 8012272:	009b      	lsls	r3, r3, #2
 8012274:	4413      	add	r3, r2
 8012276:	009b      	lsls	r3, r3, #2
 8012278:	3310      	adds	r3, #16
 801227a:	687a      	ldr	r2, [r7, #4]
 801227c:	4413      	add	r3, r2
 801227e:	3304      	adds	r3, #4
 8012280:	e00b      	b.n	801229a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8012282:	7bbb      	ldrb	r3, [r7, #14]
 8012284:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8012288:	4613      	mov	r3, r2
 801228a:	009b      	lsls	r3, r3, #2
 801228c:	4413      	add	r3, r2
 801228e:	009b      	lsls	r3, r3, #2
 8012290:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8012294:	687a      	ldr	r2, [r7, #4]
 8012296:	4413      	add	r3, r2
 8012298:	3304      	adds	r3, #4
 801229a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 801229c:	7bbb      	ldrb	r3, [r7, #14]
 801229e:	2b00      	cmp	r3, #0
 80122a0:	d002      	beq.n	80122a8 <USBD_StdEPReq+0x2d8>
 80122a2:	7bbb      	ldrb	r3, [r7, #14]
 80122a4:	2b80      	cmp	r3, #128	@ 0x80
 80122a6:	d103      	bne.n	80122b0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80122a8:	68bb      	ldr	r3, [r7, #8]
 80122aa:	2200      	movs	r2, #0
 80122ac:	601a      	str	r2, [r3, #0]
 80122ae:	e00e      	b.n	80122ce <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80122b0:	7bbb      	ldrb	r3, [r7, #14]
 80122b2:	4619      	mov	r1, r3
 80122b4:	6878      	ldr	r0, [r7, #4]
 80122b6:	f001 f8cf 	bl	8013458 <USBD_LL_IsStallEP>
 80122ba:	4603      	mov	r3, r0
 80122bc:	2b00      	cmp	r3, #0
 80122be:	d003      	beq.n	80122c8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80122c0:	68bb      	ldr	r3, [r7, #8]
 80122c2:	2201      	movs	r2, #1
 80122c4:	601a      	str	r2, [r3, #0]
 80122c6:	e002      	b.n	80122ce <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80122c8:	68bb      	ldr	r3, [r7, #8]
 80122ca:	2200      	movs	r2, #0
 80122cc:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80122ce:	68bb      	ldr	r3, [r7, #8]
 80122d0:	2202      	movs	r2, #2
 80122d2:	4619      	mov	r1, r3
 80122d4:	6878      	ldr	r0, [r7, #4]
 80122d6:	f000 fc07 	bl	8012ae8 <USBD_CtlSendData>
              break;
 80122da:	e004      	b.n	80122e6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80122dc:	6839      	ldr	r1, [r7, #0]
 80122de:	6878      	ldr	r0, [r7, #4]
 80122e0:	f000 fb85 	bl	80129ee <USBD_CtlError>
              break;
 80122e4:	bf00      	nop
          }
          break;
 80122e6:	e004      	b.n	80122f2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80122e8:	6839      	ldr	r1, [r7, #0]
 80122ea:	6878      	ldr	r0, [r7, #4]
 80122ec:	f000 fb7f 	bl	80129ee <USBD_CtlError>
          break;
 80122f0:	bf00      	nop
      }
      break;
 80122f2:	e005      	b.n	8012300 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80122f4:	6839      	ldr	r1, [r7, #0]
 80122f6:	6878      	ldr	r0, [r7, #4]
 80122f8:	f000 fb79 	bl	80129ee <USBD_CtlError>
      break;
 80122fc:	e000      	b.n	8012300 <USBD_StdEPReq+0x330>
      break;
 80122fe:	bf00      	nop
  }

  return ret;
 8012300:	7bfb      	ldrb	r3, [r7, #15]
}
 8012302:	4618      	mov	r0, r3
 8012304:	3710      	adds	r7, #16
 8012306:	46bd      	mov	sp, r7
 8012308:	bd80      	pop	{r7, pc}
	...

0801230c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801230c:	b580      	push	{r7, lr}
 801230e:	b084      	sub	sp, #16
 8012310:	af00      	add	r7, sp, #0
 8012312:	6078      	str	r0, [r7, #4]
 8012314:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8012316:	2300      	movs	r3, #0
 8012318:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 801231a:	2300      	movs	r3, #0
 801231c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 801231e:	2300      	movs	r3, #0
 8012320:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8012322:	683b      	ldr	r3, [r7, #0]
 8012324:	885b      	ldrh	r3, [r3, #2]
 8012326:	0a1b      	lsrs	r3, r3, #8
 8012328:	b29b      	uxth	r3, r3
 801232a:	3b01      	subs	r3, #1
 801232c:	2b0e      	cmp	r3, #14
 801232e:	f200 8152 	bhi.w	80125d6 <USBD_GetDescriptor+0x2ca>
 8012332:	a201      	add	r2, pc, #4	@ (adr r2, 8012338 <USBD_GetDescriptor+0x2c>)
 8012334:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012338:	080123a9 	.word	0x080123a9
 801233c:	080123c1 	.word	0x080123c1
 8012340:	08012401 	.word	0x08012401
 8012344:	080125d7 	.word	0x080125d7
 8012348:	080125d7 	.word	0x080125d7
 801234c:	08012577 	.word	0x08012577
 8012350:	080125a3 	.word	0x080125a3
 8012354:	080125d7 	.word	0x080125d7
 8012358:	080125d7 	.word	0x080125d7
 801235c:	080125d7 	.word	0x080125d7
 8012360:	080125d7 	.word	0x080125d7
 8012364:	080125d7 	.word	0x080125d7
 8012368:	080125d7 	.word	0x080125d7
 801236c:	080125d7 	.word	0x080125d7
 8012370:	08012375 	.word	0x08012375
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8012374:	687b      	ldr	r3, [r7, #4]
 8012376:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801237a:	69db      	ldr	r3, [r3, #28]
 801237c:	2b00      	cmp	r3, #0
 801237e:	d00b      	beq.n	8012398 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8012380:	687b      	ldr	r3, [r7, #4]
 8012382:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8012386:	69db      	ldr	r3, [r3, #28]
 8012388:	687a      	ldr	r2, [r7, #4]
 801238a:	7c12      	ldrb	r2, [r2, #16]
 801238c:	f107 0108 	add.w	r1, r7, #8
 8012390:	4610      	mov	r0, r2
 8012392:	4798      	blx	r3
 8012394:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8012396:	e126      	b.n	80125e6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8012398:	6839      	ldr	r1, [r7, #0]
 801239a:	6878      	ldr	r0, [r7, #4]
 801239c:	f000 fb27 	bl	80129ee <USBD_CtlError>
        err++;
 80123a0:	7afb      	ldrb	r3, [r7, #11]
 80123a2:	3301      	adds	r3, #1
 80123a4:	72fb      	strb	r3, [r7, #11]
      break;
 80123a6:	e11e      	b.n	80125e6 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80123a8:	687b      	ldr	r3, [r7, #4]
 80123aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80123ae:	681b      	ldr	r3, [r3, #0]
 80123b0:	687a      	ldr	r2, [r7, #4]
 80123b2:	7c12      	ldrb	r2, [r2, #16]
 80123b4:	f107 0108 	add.w	r1, r7, #8
 80123b8:	4610      	mov	r0, r2
 80123ba:	4798      	blx	r3
 80123bc:	60f8      	str	r0, [r7, #12]
      break;
 80123be:	e112      	b.n	80125e6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80123c0:	687b      	ldr	r3, [r7, #4]
 80123c2:	7c1b      	ldrb	r3, [r3, #16]
 80123c4:	2b00      	cmp	r3, #0
 80123c6:	d10d      	bne.n	80123e4 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80123c8:	687b      	ldr	r3, [r7, #4]
 80123ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80123ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80123d0:	f107 0208 	add.w	r2, r7, #8
 80123d4:	4610      	mov	r0, r2
 80123d6:	4798      	blx	r3
 80123d8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80123da:	68fb      	ldr	r3, [r7, #12]
 80123dc:	3301      	adds	r3, #1
 80123de:	2202      	movs	r2, #2
 80123e0:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80123e2:	e100      	b.n	80125e6 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80123e4:	687b      	ldr	r3, [r7, #4]
 80123e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80123ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80123ec:	f107 0208 	add.w	r2, r7, #8
 80123f0:	4610      	mov	r0, r2
 80123f2:	4798      	blx	r3
 80123f4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80123f6:	68fb      	ldr	r3, [r7, #12]
 80123f8:	3301      	adds	r3, #1
 80123fa:	2202      	movs	r2, #2
 80123fc:	701a      	strb	r2, [r3, #0]
      break;
 80123fe:	e0f2      	b.n	80125e6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8012400:	683b      	ldr	r3, [r7, #0]
 8012402:	885b      	ldrh	r3, [r3, #2]
 8012404:	b2db      	uxtb	r3, r3
 8012406:	2b05      	cmp	r3, #5
 8012408:	f200 80ac 	bhi.w	8012564 <USBD_GetDescriptor+0x258>
 801240c:	a201      	add	r2, pc, #4	@ (adr r2, 8012414 <USBD_GetDescriptor+0x108>)
 801240e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012412:	bf00      	nop
 8012414:	0801242d 	.word	0x0801242d
 8012418:	08012461 	.word	0x08012461
 801241c:	08012495 	.word	0x08012495
 8012420:	080124c9 	.word	0x080124c9
 8012424:	080124fd 	.word	0x080124fd
 8012428:	08012531 	.word	0x08012531
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 801242c:	687b      	ldr	r3, [r7, #4]
 801242e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8012432:	685b      	ldr	r3, [r3, #4]
 8012434:	2b00      	cmp	r3, #0
 8012436:	d00b      	beq.n	8012450 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8012438:	687b      	ldr	r3, [r7, #4]
 801243a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801243e:	685b      	ldr	r3, [r3, #4]
 8012440:	687a      	ldr	r2, [r7, #4]
 8012442:	7c12      	ldrb	r2, [r2, #16]
 8012444:	f107 0108 	add.w	r1, r7, #8
 8012448:	4610      	mov	r0, r2
 801244a:	4798      	blx	r3
 801244c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801244e:	e091      	b.n	8012574 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8012450:	6839      	ldr	r1, [r7, #0]
 8012452:	6878      	ldr	r0, [r7, #4]
 8012454:	f000 facb 	bl	80129ee <USBD_CtlError>
            err++;
 8012458:	7afb      	ldrb	r3, [r7, #11]
 801245a:	3301      	adds	r3, #1
 801245c:	72fb      	strb	r3, [r7, #11]
          break;
 801245e:	e089      	b.n	8012574 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8012460:	687b      	ldr	r3, [r7, #4]
 8012462:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8012466:	689b      	ldr	r3, [r3, #8]
 8012468:	2b00      	cmp	r3, #0
 801246a:	d00b      	beq.n	8012484 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 801246c:	687b      	ldr	r3, [r7, #4]
 801246e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8012472:	689b      	ldr	r3, [r3, #8]
 8012474:	687a      	ldr	r2, [r7, #4]
 8012476:	7c12      	ldrb	r2, [r2, #16]
 8012478:	f107 0108 	add.w	r1, r7, #8
 801247c:	4610      	mov	r0, r2
 801247e:	4798      	blx	r3
 8012480:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012482:	e077      	b.n	8012574 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8012484:	6839      	ldr	r1, [r7, #0]
 8012486:	6878      	ldr	r0, [r7, #4]
 8012488:	f000 fab1 	bl	80129ee <USBD_CtlError>
            err++;
 801248c:	7afb      	ldrb	r3, [r7, #11]
 801248e:	3301      	adds	r3, #1
 8012490:	72fb      	strb	r3, [r7, #11]
          break;
 8012492:	e06f      	b.n	8012574 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8012494:	687b      	ldr	r3, [r7, #4]
 8012496:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801249a:	68db      	ldr	r3, [r3, #12]
 801249c:	2b00      	cmp	r3, #0
 801249e:	d00b      	beq.n	80124b8 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80124a0:	687b      	ldr	r3, [r7, #4]
 80124a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80124a6:	68db      	ldr	r3, [r3, #12]
 80124a8:	687a      	ldr	r2, [r7, #4]
 80124aa:	7c12      	ldrb	r2, [r2, #16]
 80124ac:	f107 0108 	add.w	r1, r7, #8
 80124b0:	4610      	mov	r0, r2
 80124b2:	4798      	blx	r3
 80124b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80124b6:	e05d      	b.n	8012574 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80124b8:	6839      	ldr	r1, [r7, #0]
 80124ba:	6878      	ldr	r0, [r7, #4]
 80124bc:	f000 fa97 	bl	80129ee <USBD_CtlError>
            err++;
 80124c0:	7afb      	ldrb	r3, [r7, #11]
 80124c2:	3301      	adds	r3, #1
 80124c4:	72fb      	strb	r3, [r7, #11]
          break;
 80124c6:	e055      	b.n	8012574 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80124c8:	687b      	ldr	r3, [r7, #4]
 80124ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80124ce:	691b      	ldr	r3, [r3, #16]
 80124d0:	2b00      	cmp	r3, #0
 80124d2:	d00b      	beq.n	80124ec <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80124d4:	687b      	ldr	r3, [r7, #4]
 80124d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80124da:	691b      	ldr	r3, [r3, #16]
 80124dc:	687a      	ldr	r2, [r7, #4]
 80124de:	7c12      	ldrb	r2, [r2, #16]
 80124e0:	f107 0108 	add.w	r1, r7, #8
 80124e4:	4610      	mov	r0, r2
 80124e6:	4798      	blx	r3
 80124e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80124ea:	e043      	b.n	8012574 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80124ec:	6839      	ldr	r1, [r7, #0]
 80124ee:	6878      	ldr	r0, [r7, #4]
 80124f0:	f000 fa7d 	bl	80129ee <USBD_CtlError>
            err++;
 80124f4:	7afb      	ldrb	r3, [r7, #11]
 80124f6:	3301      	adds	r3, #1
 80124f8:	72fb      	strb	r3, [r7, #11]
          break;
 80124fa:	e03b      	b.n	8012574 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80124fc:	687b      	ldr	r3, [r7, #4]
 80124fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8012502:	695b      	ldr	r3, [r3, #20]
 8012504:	2b00      	cmp	r3, #0
 8012506:	d00b      	beq.n	8012520 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8012508:	687b      	ldr	r3, [r7, #4]
 801250a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801250e:	695b      	ldr	r3, [r3, #20]
 8012510:	687a      	ldr	r2, [r7, #4]
 8012512:	7c12      	ldrb	r2, [r2, #16]
 8012514:	f107 0108 	add.w	r1, r7, #8
 8012518:	4610      	mov	r0, r2
 801251a:	4798      	blx	r3
 801251c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801251e:	e029      	b.n	8012574 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8012520:	6839      	ldr	r1, [r7, #0]
 8012522:	6878      	ldr	r0, [r7, #4]
 8012524:	f000 fa63 	bl	80129ee <USBD_CtlError>
            err++;
 8012528:	7afb      	ldrb	r3, [r7, #11]
 801252a:	3301      	adds	r3, #1
 801252c:	72fb      	strb	r3, [r7, #11]
          break;
 801252e:	e021      	b.n	8012574 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8012530:	687b      	ldr	r3, [r7, #4]
 8012532:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8012536:	699b      	ldr	r3, [r3, #24]
 8012538:	2b00      	cmp	r3, #0
 801253a:	d00b      	beq.n	8012554 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 801253c:	687b      	ldr	r3, [r7, #4]
 801253e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8012542:	699b      	ldr	r3, [r3, #24]
 8012544:	687a      	ldr	r2, [r7, #4]
 8012546:	7c12      	ldrb	r2, [r2, #16]
 8012548:	f107 0108 	add.w	r1, r7, #8
 801254c:	4610      	mov	r0, r2
 801254e:	4798      	blx	r3
 8012550:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012552:	e00f      	b.n	8012574 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8012554:	6839      	ldr	r1, [r7, #0]
 8012556:	6878      	ldr	r0, [r7, #4]
 8012558:	f000 fa49 	bl	80129ee <USBD_CtlError>
            err++;
 801255c:	7afb      	ldrb	r3, [r7, #11]
 801255e:	3301      	adds	r3, #1
 8012560:	72fb      	strb	r3, [r7, #11]
          break;
 8012562:	e007      	b.n	8012574 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8012564:	6839      	ldr	r1, [r7, #0]
 8012566:	6878      	ldr	r0, [r7, #4]
 8012568:	f000 fa41 	bl	80129ee <USBD_CtlError>
          err++;
 801256c:	7afb      	ldrb	r3, [r7, #11]
 801256e:	3301      	adds	r3, #1
 8012570:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8012572:	bf00      	nop
      }
      break;
 8012574:	e037      	b.n	80125e6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012576:	687b      	ldr	r3, [r7, #4]
 8012578:	7c1b      	ldrb	r3, [r3, #16]
 801257a:	2b00      	cmp	r3, #0
 801257c:	d109      	bne.n	8012592 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 801257e:	687b      	ldr	r3, [r7, #4]
 8012580:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012584:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012586:	f107 0208 	add.w	r2, r7, #8
 801258a:	4610      	mov	r0, r2
 801258c:	4798      	blx	r3
 801258e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8012590:	e029      	b.n	80125e6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8012592:	6839      	ldr	r1, [r7, #0]
 8012594:	6878      	ldr	r0, [r7, #4]
 8012596:	f000 fa2a 	bl	80129ee <USBD_CtlError>
        err++;
 801259a:	7afb      	ldrb	r3, [r7, #11]
 801259c:	3301      	adds	r3, #1
 801259e:	72fb      	strb	r3, [r7, #11]
      break;
 80125a0:	e021      	b.n	80125e6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80125a2:	687b      	ldr	r3, [r7, #4]
 80125a4:	7c1b      	ldrb	r3, [r3, #16]
 80125a6:	2b00      	cmp	r3, #0
 80125a8:	d10d      	bne.n	80125c6 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80125aa:	687b      	ldr	r3, [r7, #4]
 80125ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80125b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80125b2:	f107 0208 	add.w	r2, r7, #8
 80125b6:	4610      	mov	r0, r2
 80125b8:	4798      	blx	r3
 80125ba:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80125bc:	68fb      	ldr	r3, [r7, #12]
 80125be:	3301      	adds	r3, #1
 80125c0:	2207      	movs	r2, #7
 80125c2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80125c4:	e00f      	b.n	80125e6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80125c6:	6839      	ldr	r1, [r7, #0]
 80125c8:	6878      	ldr	r0, [r7, #4]
 80125ca:	f000 fa10 	bl	80129ee <USBD_CtlError>
        err++;
 80125ce:	7afb      	ldrb	r3, [r7, #11]
 80125d0:	3301      	adds	r3, #1
 80125d2:	72fb      	strb	r3, [r7, #11]
      break;
 80125d4:	e007      	b.n	80125e6 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 80125d6:	6839      	ldr	r1, [r7, #0]
 80125d8:	6878      	ldr	r0, [r7, #4]
 80125da:	f000 fa08 	bl	80129ee <USBD_CtlError>
      err++;
 80125de:	7afb      	ldrb	r3, [r7, #11]
 80125e0:	3301      	adds	r3, #1
 80125e2:	72fb      	strb	r3, [r7, #11]
      break;
 80125e4:	bf00      	nop
  }

  if (err != 0U)
 80125e6:	7afb      	ldrb	r3, [r7, #11]
 80125e8:	2b00      	cmp	r3, #0
 80125ea:	d11e      	bne.n	801262a <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 80125ec:	683b      	ldr	r3, [r7, #0]
 80125ee:	88db      	ldrh	r3, [r3, #6]
 80125f0:	2b00      	cmp	r3, #0
 80125f2:	d016      	beq.n	8012622 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 80125f4:	893b      	ldrh	r3, [r7, #8]
 80125f6:	2b00      	cmp	r3, #0
 80125f8:	d00e      	beq.n	8012618 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 80125fa:	683b      	ldr	r3, [r7, #0]
 80125fc:	88da      	ldrh	r2, [r3, #6]
 80125fe:	893b      	ldrh	r3, [r7, #8]
 8012600:	4293      	cmp	r3, r2
 8012602:	bf28      	it	cs
 8012604:	4613      	movcs	r3, r2
 8012606:	b29b      	uxth	r3, r3
 8012608:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 801260a:	893b      	ldrh	r3, [r7, #8]
 801260c:	461a      	mov	r2, r3
 801260e:	68f9      	ldr	r1, [r7, #12]
 8012610:	6878      	ldr	r0, [r7, #4]
 8012612:	f000 fa69 	bl	8012ae8 <USBD_CtlSendData>
 8012616:	e009      	b.n	801262c <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8012618:	6839      	ldr	r1, [r7, #0]
 801261a:	6878      	ldr	r0, [r7, #4]
 801261c:	f000 f9e7 	bl	80129ee <USBD_CtlError>
 8012620:	e004      	b.n	801262c <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8012622:	6878      	ldr	r0, [r7, #4]
 8012624:	f000 faba 	bl	8012b9c <USBD_CtlSendStatus>
 8012628:	e000      	b.n	801262c <USBD_GetDescriptor+0x320>
    return;
 801262a:	bf00      	nop
  }
}
 801262c:	3710      	adds	r7, #16
 801262e:	46bd      	mov	sp, r7
 8012630:	bd80      	pop	{r7, pc}
 8012632:	bf00      	nop

08012634 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012634:	b580      	push	{r7, lr}
 8012636:	b084      	sub	sp, #16
 8012638:	af00      	add	r7, sp, #0
 801263a:	6078      	str	r0, [r7, #4]
 801263c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801263e:	683b      	ldr	r3, [r7, #0]
 8012640:	889b      	ldrh	r3, [r3, #4]
 8012642:	2b00      	cmp	r3, #0
 8012644:	d131      	bne.n	80126aa <USBD_SetAddress+0x76>
 8012646:	683b      	ldr	r3, [r7, #0]
 8012648:	88db      	ldrh	r3, [r3, #6]
 801264a:	2b00      	cmp	r3, #0
 801264c:	d12d      	bne.n	80126aa <USBD_SetAddress+0x76>
 801264e:	683b      	ldr	r3, [r7, #0]
 8012650:	885b      	ldrh	r3, [r3, #2]
 8012652:	2b7f      	cmp	r3, #127	@ 0x7f
 8012654:	d829      	bhi.n	80126aa <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8012656:	683b      	ldr	r3, [r7, #0]
 8012658:	885b      	ldrh	r3, [r3, #2]
 801265a:	b2db      	uxtb	r3, r3
 801265c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8012660:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012662:	687b      	ldr	r3, [r7, #4]
 8012664:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012668:	b2db      	uxtb	r3, r3
 801266a:	2b03      	cmp	r3, #3
 801266c:	d104      	bne.n	8012678 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 801266e:	6839      	ldr	r1, [r7, #0]
 8012670:	6878      	ldr	r0, [r7, #4]
 8012672:	f000 f9bc 	bl	80129ee <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012676:	e01d      	b.n	80126b4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8012678:	687b      	ldr	r3, [r7, #4]
 801267a:	7bfa      	ldrb	r2, [r7, #15]
 801267c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8012680:	7bfb      	ldrb	r3, [r7, #15]
 8012682:	4619      	mov	r1, r3
 8012684:	6878      	ldr	r0, [r7, #4]
 8012686:	f000 ff13 	bl	80134b0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 801268a:	6878      	ldr	r0, [r7, #4]
 801268c:	f000 fa86 	bl	8012b9c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8012690:	7bfb      	ldrb	r3, [r7, #15]
 8012692:	2b00      	cmp	r3, #0
 8012694:	d004      	beq.n	80126a0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8012696:	687b      	ldr	r3, [r7, #4]
 8012698:	2202      	movs	r2, #2
 801269a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801269e:	e009      	b.n	80126b4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80126a0:	687b      	ldr	r3, [r7, #4]
 80126a2:	2201      	movs	r2, #1
 80126a4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80126a8:	e004      	b.n	80126b4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80126aa:	6839      	ldr	r1, [r7, #0]
 80126ac:	6878      	ldr	r0, [r7, #4]
 80126ae:	f000 f99e 	bl	80129ee <USBD_CtlError>
  }
}
 80126b2:	bf00      	nop
 80126b4:	bf00      	nop
 80126b6:	3710      	adds	r7, #16
 80126b8:	46bd      	mov	sp, r7
 80126ba:	bd80      	pop	{r7, pc}

080126bc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80126bc:	b580      	push	{r7, lr}
 80126be:	b084      	sub	sp, #16
 80126c0:	af00      	add	r7, sp, #0
 80126c2:	6078      	str	r0, [r7, #4]
 80126c4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80126c6:	2300      	movs	r3, #0
 80126c8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80126ca:	683b      	ldr	r3, [r7, #0]
 80126cc:	885b      	ldrh	r3, [r3, #2]
 80126ce:	b2da      	uxtb	r2, r3
 80126d0:	4b4e      	ldr	r3, [pc, #312]	@ (801280c <USBD_SetConfig+0x150>)
 80126d2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80126d4:	4b4d      	ldr	r3, [pc, #308]	@ (801280c <USBD_SetConfig+0x150>)
 80126d6:	781b      	ldrb	r3, [r3, #0]
 80126d8:	2b01      	cmp	r3, #1
 80126da:	d905      	bls.n	80126e8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80126dc:	6839      	ldr	r1, [r7, #0]
 80126de:	6878      	ldr	r0, [r7, #4]
 80126e0:	f000 f985 	bl	80129ee <USBD_CtlError>
    return USBD_FAIL;
 80126e4:	2303      	movs	r3, #3
 80126e6:	e08c      	b.n	8012802 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80126e8:	687b      	ldr	r3, [r7, #4]
 80126ea:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80126ee:	b2db      	uxtb	r3, r3
 80126f0:	2b02      	cmp	r3, #2
 80126f2:	d002      	beq.n	80126fa <USBD_SetConfig+0x3e>
 80126f4:	2b03      	cmp	r3, #3
 80126f6:	d029      	beq.n	801274c <USBD_SetConfig+0x90>
 80126f8:	e075      	b.n	80127e6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80126fa:	4b44      	ldr	r3, [pc, #272]	@ (801280c <USBD_SetConfig+0x150>)
 80126fc:	781b      	ldrb	r3, [r3, #0]
 80126fe:	2b00      	cmp	r3, #0
 8012700:	d020      	beq.n	8012744 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8012702:	4b42      	ldr	r3, [pc, #264]	@ (801280c <USBD_SetConfig+0x150>)
 8012704:	781b      	ldrb	r3, [r3, #0]
 8012706:	461a      	mov	r2, r3
 8012708:	687b      	ldr	r3, [r7, #4]
 801270a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 801270c:	4b3f      	ldr	r3, [pc, #252]	@ (801280c <USBD_SetConfig+0x150>)
 801270e:	781b      	ldrb	r3, [r3, #0]
 8012710:	4619      	mov	r1, r3
 8012712:	6878      	ldr	r0, [r7, #4]
 8012714:	f7fe ffb9 	bl	801168a <USBD_SetClassConfig>
 8012718:	4603      	mov	r3, r0
 801271a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 801271c:	7bfb      	ldrb	r3, [r7, #15]
 801271e:	2b00      	cmp	r3, #0
 8012720:	d008      	beq.n	8012734 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8012722:	6839      	ldr	r1, [r7, #0]
 8012724:	6878      	ldr	r0, [r7, #4]
 8012726:	f000 f962 	bl	80129ee <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801272a:	687b      	ldr	r3, [r7, #4]
 801272c:	2202      	movs	r2, #2
 801272e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8012732:	e065      	b.n	8012800 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8012734:	6878      	ldr	r0, [r7, #4]
 8012736:	f000 fa31 	bl	8012b9c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 801273a:	687b      	ldr	r3, [r7, #4]
 801273c:	2203      	movs	r2, #3
 801273e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8012742:	e05d      	b.n	8012800 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8012744:	6878      	ldr	r0, [r7, #4]
 8012746:	f000 fa29 	bl	8012b9c <USBD_CtlSendStatus>
      break;
 801274a:	e059      	b.n	8012800 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 801274c:	4b2f      	ldr	r3, [pc, #188]	@ (801280c <USBD_SetConfig+0x150>)
 801274e:	781b      	ldrb	r3, [r3, #0]
 8012750:	2b00      	cmp	r3, #0
 8012752:	d112      	bne.n	801277a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8012754:	687b      	ldr	r3, [r7, #4]
 8012756:	2202      	movs	r2, #2
 8012758:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 801275c:	4b2b      	ldr	r3, [pc, #172]	@ (801280c <USBD_SetConfig+0x150>)
 801275e:	781b      	ldrb	r3, [r3, #0]
 8012760:	461a      	mov	r2, r3
 8012762:	687b      	ldr	r3, [r7, #4]
 8012764:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8012766:	4b29      	ldr	r3, [pc, #164]	@ (801280c <USBD_SetConfig+0x150>)
 8012768:	781b      	ldrb	r3, [r3, #0]
 801276a:	4619      	mov	r1, r3
 801276c:	6878      	ldr	r0, [r7, #4]
 801276e:	f7fe ffa8 	bl	80116c2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8012772:	6878      	ldr	r0, [r7, #4]
 8012774:	f000 fa12 	bl	8012b9c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8012778:	e042      	b.n	8012800 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 801277a:	4b24      	ldr	r3, [pc, #144]	@ (801280c <USBD_SetConfig+0x150>)
 801277c:	781b      	ldrb	r3, [r3, #0]
 801277e:	461a      	mov	r2, r3
 8012780:	687b      	ldr	r3, [r7, #4]
 8012782:	685b      	ldr	r3, [r3, #4]
 8012784:	429a      	cmp	r2, r3
 8012786:	d02a      	beq.n	80127de <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8012788:	687b      	ldr	r3, [r7, #4]
 801278a:	685b      	ldr	r3, [r3, #4]
 801278c:	b2db      	uxtb	r3, r3
 801278e:	4619      	mov	r1, r3
 8012790:	6878      	ldr	r0, [r7, #4]
 8012792:	f7fe ff96 	bl	80116c2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8012796:	4b1d      	ldr	r3, [pc, #116]	@ (801280c <USBD_SetConfig+0x150>)
 8012798:	781b      	ldrb	r3, [r3, #0]
 801279a:	461a      	mov	r2, r3
 801279c:	687b      	ldr	r3, [r7, #4]
 801279e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80127a0:	4b1a      	ldr	r3, [pc, #104]	@ (801280c <USBD_SetConfig+0x150>)
 80127a2:	781b      	ldrb	r3, [r3, #0]
 80127a4:	4619      	mov	r1, r3
 80127a6:	6878      	ldr	r0, [r7, #4]
 80127a8:	f7fe ff6f 	bl	801168a <USBD_SetClassConfig>
 80127ac:	4603      	mov	r3, r0
 80127ae:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80127b0:	7bfb      	ldrb	r3, [r7, #15]
 80127b2:	2b00      	cmp	r3, #0
 80127b4:	d00f      	beq.n	80127d6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80127b6:	6839      	ldr	r1, [r7, #0]
 80127b8:	6878      	ldr	r0, [r7, #4]
 80127ba:	f000 f918 	bl	80129ee <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80127be:	687b      	ldr	r3, [r7, #4]
 80127c0:	685b      	ldr	r3, [r3, #4]
 80127c2:	b2db      	uxtb	r3, r3
 80127c4:	4619      	mov	r1, r3
 80127c6:	6878      	ldr	r0, [r7, #4]
 80127c8:	f7fe ff7b 	bl	80116c2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80127cc:	687b      	ldr	r3, [r7, #4]
 80127ce:	2202      	movs	r2, #2
 80127d0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80127d4:	e014      	b.n	8012800 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80127d6:	6878      	ldr	r0, [r7, #4]
 80127d8:	f000 f9e0 	bl	8012b9c <USBD_CtlSendStatus>
      break;
 80127dc:	e010      	b.n	8012800 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80127de:	6878      	ldr	r0, [r7, #4]
 80127e0:	f000 f9dc 	bl	8012b9c <USBD_CtlSendStatus>
      break;
 80127e4:	e00c      	b.n	8012800 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80127e6:	6839      	ldr	r1, [r7, #0]
 80127e8:	6878      	ldr	r0, [r7, #4]
 80127ea:	f000 f900 	bl	80129ee <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80127ee:	4b07      	ldr	r3, [pc, #28]	@ (801280c <USBD_SetConfig+0x150>)
 80127f0:	781b      	ldrb	r3, [r3, #0]
 80127f2:	4619      	mov	r1, r3
 80127f4:	6878      	ldr	r0, [r7, #4]
 80127f6:	f7fe ff64 	bl	80116c2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80127fa:	2303      	movs	r3, #3
 80127fc:	73fb      	strb	r3, [r7, #15]
      break;
 80127fe:	bf00      	nop
  }

  return ret;
 8012800:	7bfb      	ldrb	r3, [r7, #15]
}
 8012802:	4618      	mov	r0, r3
 8012804:	3710      	adds	r7, #16
 8012806:	46bd      	mov	sp, r7
 8012808:	bd80      	pop	{r7, pc}
 801280a:	bf00      	nop
 801280c:	24004f28 	.word	0x24004f28

08012810 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012810:	b580      	push	{r7, lr}
 8012812:	b082      	sub	sp, #8
 8012814:	af00      	add	r7, sp, #0
 8012816:	6078      	str	r0, [r7, #4]
 8012818:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 801281a:	683b      	ldr	r3, [r7, #0]
 801281c:	88db      	ldrh	r3, [r3, #6]
 801281e:	2b01      	cmp	r3, #1
 8012820:	d004      	beq.n	801282c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8012822:	6839      	ldr	r1, [r7, #0]
 8012824:	6878      	ldr	r0, [r7, #4]
 8012826:	f000 f8e2 	bl	80129ee <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 801282a:	e023      	b.n	8012874 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 801282c:	687b      	ldr	r3, [r7, #4]
 801282e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012832:	b2db      	uxtb	r3, r3
 8012834:	2b02      	cmp	r3, #2
 8012836:	dc02      	bgt.n	801283e <USBD_GetConfig+0x2e>
 8012838:	2b00      	cmp	r3, #0
 801283a:	dc03      	bgt.n	8012844 <USBD_GetConfig+0x34>
 801283c:	e015      	b.n	801286a <USBD_GetConfig+0x5a>
 801283e:	2b03      	cmp	r3, #3
 8012840:	d00b      	beq.n	801285a <USBD_GetConfig+0x4a>
 8012842:	e012      	b.n	801286a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8012844:	687b      	ldr	r3, [r7, #4]
 8012846:	2200      	movs	r2, #0
 8012848:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 801284a:	687b      	ldr	r3, [r7, #4]
 801284c:	3308      	adds	r3, #8
 801284e:	2201      	movs	r2, #1
 8012850:	4619      	mov	r1, r3
 8012852:	6878      	ldr	r0, [r7, #4]
 8012854:	f000 f948 	bl	8012ae8 <USBD_CtlSendData>
        break;
 8012858:	e00c      	b.n	8012874 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 801285a:	687b      	ldr	r3, [r7, #4]
 801285c:	3304      	adds	r3, #4
 801285e:	2201      	movs	r2, #1
 8012860:	4619      	mov	r1, r3
 8012862:	6878      	ldr	r0, [r7, #4]
 8012864:	f000 f940 	bl	8012ae8 <USBD_CtlSendData>
        break;
 8012868:	e004      	b.n	8012874 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 801286a:	6839      	ldr	r1, [r7, #0]
 801286c:	6878      	ldr	r0, [r7, #4]
 801286e:	f000 f8be 	bl	80129ee <USBD_CtlError>
        break;
 8012872:	bf00      	nop
}
 8012874:	bf00      	nop
 8012876:	3708      	adds	r7, #8
 8012878:	46bd      	mov	sp, r7
 801287a:	bd80      	pop	{r7, pc}

0801287c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801287c:	b580      	push	{r7, lr}
 801287e:	b082      	sub	sp, #8
 8012880:	af00      	add	r7, sp, #0
 8012882:	6078      	str	r0, [r7, #4]
 8012884:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8012886:	687b      	ldr	r3, [r7, #4]
 8012888:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801288c:	b2db      	uxtb	r3, r3
 801288e:	3b01      	subs	r3, #1
 8012890:	2b02      	cmp	r3, #2
 8012892:	d81e      	bhi.n	80128d2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8012894:	683b      	ldr	r3, [r7, #0]
 8012896:	88db      	ldrh	r3, [r3, #6]
 8012898:	2b02      	cmp	r3, #2
 801289a:	d004      	beq.n	80128a6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 801289c:	6839      	ldr	r1, [r7, #0]
 801289e:	6878      	ldr	r0, [r7, #4]
 80128a0:	f000 f8a5 	bl	80129ee <USBD_CtlError>
        break;
 80128a4:	e01a      	b.n	80128dc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80128a6:	687b      	ldr	r3, [r7, #4]
 80128a8:	2201      	movs	r2, #1
 80128aa:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80128ac:	687b      	ldr	r3, [r7, #4]
 80128ae:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 80128b2:	2b00      	cmp	r3, #0
 80128b4:	d005      	beq.n	80128c2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80128b6:	687b      	ldr	r3, [r7, #4]
 80128b8:	68db      	ldr	r3, [r3, #12]
 80128ba:	f043 0202 	orr.w	r2, r3, #2
 80128be:	687b      	ldr	r3, [r7, #4]
 80128c0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80128c2:	687b      	ldr	r3, [r7, #4]
 80128c4:	330c      	adds	r3, #12
 80128c6:	2202      	movs	r2, #2
 80128c8:	4619      	mov	r1, r3
 80128ca:	6878      	ldr	r0, [r7, #4]
 80128cc:	f000 f90c 	bl	8012ae8 <USBD_CtlSendData>
      break;
 80128d0:	e004      	b.n	80128dc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80128d2:	6839      	ldr	r1, [r7, #0]
 80128d4:	6878      	ldr	r0, [r7, #4]
 80128d6:	f000 f88a 	bl	80129ee <USBD_CtlError>
      break;
 80128da:	bf00      	nop
  }
}
 80128dc:	bf00      	nop
 80128de:	3708      	adds	r7, #8
 80128e0:	46bd      	mov	sp, r7
 80128e2:	bd80      	pop	{r7, pc}

080128e4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80128e4:	b580      	push	{r7, lr}
 80128e6:	b082      	sub	sp, #8
 80128e8:	af00      	add	r7, sp, #0
 80128ea:	6078      	str	r0, [r7, #4]
 80128ec:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80128ee:	683b      	ldr	r3, [r7, #0]
 80128f0:	885b      	ldrh	r3, [r3, #2]
 80128f2:	2b01      	cmp	r3, #1
 80128f4:	d107      	bne.n	8012906 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80128f6:	687b      	ldr	r3, [r7, #4]
 80128f8:	2201      	movs	r2, #1
 80128fa:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80128fe:	6878      	ldr	r0, [r7, #4]
 8012900:	f000 f94c 	bl	8012b9c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8012904:	e013      	b.n	801292e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8012906:	683b      	ldr	r3, [r7, #0]
 8012908:	885b      	ldrh	r3, [r3, #2]
 801290a:	2b02      	cmp	r3, #2
 801290c:	d10b      	bne.n	8012926 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 801290e:	683b      	ldr	r3, [r7, #0]
 8012910:	889b      	ldrh	r3, [r3, #4]
 8012912:	0a1b      	lsrs	r3, r3, #8
 8012914:	b29b      	uxth	r3, r3
 8012916:	b2da      	uxtb	r2, r3
 8012918:	687b      	ldr	r3, [r7, #4]
 801291a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 801291e:	6878      	ldr	r0, [r7, #4]
 8012920:	f000 f93c 	bl	8012b9c <USBD_CtlSendStatus>
}
 8012924:	e003      	b.n	801292e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8012926:	6839      	ldr	r1, [r7, #0]
 8012928:	6878      	ldr	r0, [r7, #4]
 801292a:	f000 f860 	bl	80129ee <USBD_CtlError>
}
 801292e:	bf00      	nop
 8012930:	3708      	adds	r7, #8
 8012932:	46bd      	mov	sp, r7
 8012934:	bd80      	pop	{r7, pc}

08012936 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012936:	b580      	push	{r7, lr}
 8012938:	b082      	sub	sp, #8
 801293a:	af00      	add	r7, sp, #0
 801293c:	6078      	str	r0, [r7, #4]
 801293e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8012940:	687b      	ldr	r3, [r7, #4]
 8012942:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012946:	b2db      	uxtb	r3, r3
 8012948:	3b01      	subs	r3, #1
 801294a:	2b02      	cmp	r3, #2
 801294c:	d80b      	bhi.n	8012966 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801294e:	683b      	ldr	r3, [r7, #0]
 8012950:	885b      	ldrh	r3, [r3, #2]
 8012952:	2b01      	cmp	r3, #1
 8012954:	d10c      	bne.n	8012970 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8012956:	687b      	ldr	r3, [r7, #4]
 8012958:	2200      	movs	r2, #0
 801295a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 801295e:	6878      	ldr	r0, [r7, #4]
 8012960:	f000 f91c 	bl	8012b9c <USBD_CtlSendStatus>
      }
      break;
 8012964:	e004      	b.n	8012970 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8012966:	6839      	ldr	r1, [r7, #0]
 8012968:	6878      	ldr	r0, [r7, #4]
 801296a:	f000 f840 	bl	80129ee <USBD_CtlError>
      break;
 801296e:	e000      	b.n	8012972 <USBD_ClrFeature+0x3c>
      break;
 8012970:	bf00      	nop
  }
}
 8012972:	bf00      	nop
 8012974:	3708      	adds	r7, #8
 8012976:	46bd      	mov	sp, r7
 8012978:	bd80      	pop	{r7, pc}

0801297a <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 801297a:	b580      	push	{r7, lr}
 801297c:	b084      	sub	sp, #16
 801297e:	af00      	add	r7, sp, #0
 8012980:	6078      	str	r0, [r7, #4]
 8012982:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8012984:	683b      	ldr	r3, [r7, #0]
 8012986:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8012988:	68fb      	ldr	r3, [r7, #12]
 801298a:	781a      	ldrb	r2, [r3, #0]
 801298c:	687b      	ldr	r3, [r7, #4]
 801298e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8012990:	68fb      	ldr	r3, [r7, #12]
 8012992:	3301      	adds	r3, #1
 8012994:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8012996:	68fb      	ldr	r3, [r7, #12]
 8012998:	781a      	ldrb	r2, [r3, #0]
 801299a:	687b      	ldr	r3, [r7, #4]
 801299c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 801299e:	68fb      	ldr	r3, [r7, #12]
 80129a0:	3301      	adds	r3, #1
 80129a2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80129a4:	68f8      	ldr	r0, [r7, #12]
 80129a6:	f7ff fa16 	bl	8011dd6 <SWAPBYTE>
 80129aa:	4603      	mov	r3, r0
 80129ac:	461a      	mov	r2, r3
 80129ae:	687b      	ldr	r3, [r7, #4]
 80129b0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80129b2:	68fb      	ldr	r3, [r7, #12]
 80129b4:	3301      	adds	r3, #1
 80129b6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80129b8:	68fb      	ldr	r3, [r7, #12]
 80129ba:	3301      	adds	r3, #1
 80129bc:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80129be:	68f8      	ldr	r0, [r7, #12]
 80129c0:	f7ff fa09 	bl	8011dd6 <SWAPBYTE>
 80129c4:	4603      	mov	r3, r0
 80129c6:	461a      	mov	r2, r3
 80129c8:	687b      	ldr	r3, [r7, #4]
 80129ca:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80129cc:	68fb      	ldr	r3, [r7, #12]
 80129ce:	3301      	adds	r3, #1
 80129d0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80129d2:	68fb      	ldr	r3, [r7, #12]
 80129d4:	3301      	adds	r3, #1
 80129d6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80129d8:	68f8      	ldr	r0, [r7, #12]
 80129da:	f7ff f9fc 	bl	8011dd6 <SWAPBYTE>
 80129de:	4603      	mov	r3, r0
 80129e0:	461a      	mov	r2, r3
 80129e2:	687b      	ldr	r3, [r7, #4]
 80129e4:	80da      	strh	r2, [r3, #6]
}
 80129e6:	bf00      	nop
 80129e8:	3710      	adds	r7, #16
 80129ea:	46bd      	mov	sp, r7
 80129ec:	bd80      	pop	{r7, pc}

080129ee <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80129ee:	b580      	push	{r7, lr}
 80129f0:	b082      	sub	sp, #8
 80129f2:	af00      	add	r7, sp, #0
 80129f4:	6078      	str	r0, [r7, #4]
 80129f6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80129f8:	2180      	movs	r1, #128	@ 0x80
 80129fa:	6878      	ldr	r0, [r7, #4]
 80129fc:	f000 fcee 	bl	80133dc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8012a00:	2100      	movs	r1, #0
 8012a02:	6878      	ldr	r0, [r7, #4]
 8012a04:	f000 fcea 	bl	80133dc <USBD_LL_StallEP>
}
 8012a08:	bf00      	nop
 8012a0a:	3708      	adds	r7, #8
 8012a0c:	46bd      	mov	sp, r7
 8012a0e:	bd80      	pop	{r7, pc}

08012a10 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8012a10:	b580      	push	{r7, lr}
 8012a12:	b086      	sub	sp, #24
 8012a14:	af00      	add	r7, sp, #0
 8012a16:	60f8      	str	r0, [r7, #12]
 8012a18:	60b9      	str	r1, [r7, #8]
 8012a1a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8012a1c:	2300      	movs	r3, #0
 8012a1e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8012a20:	68fb      	ldr	r3, [r7, #12]
 8012a22:	2b00      	cmp	r3, #0
 8012a24:	d042      	beq.n	8012aac <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8012a26:	68fb      	ldr	r3, [r7, #12]
 8012a28:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8012a2a:	6938      	ldr	r0, [r7, #16]
 8012a2c:	f000 f842 	bl	8012ab4 <USBD_GetLen>
 8012a30:	4603      	mov	r3, r0
 8012a32:	3301      	adds	r3, #1
 8012a34:	005b      	lsls	r3, r3, #1
 8012a36:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012a3a:	d808      	bhi.n	8012a4e <USBD_GetString+0x3e>
 8012a3c:	6938      	ldr	r0, [r7, #16]
 8012a3e:	f000 f839 	bl	8012ab4 <USBD_GetLen>
 8012a42:	4603      	mov	r3, r0
 8012a44:	3301      	adds	r3, #1
 8012a46:	b29b      	uxth	r3, r3
 8012a48:	005b      	lsls	r3, r3, #1
 8012a4a:	b29a      	uxth	r2, r3
 8012a4c:	e001      	b.n	8012a52 <USBD_GetString+0x42>
 8012a4e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012a52:	687b      	ldr	r3, [r7, #4]
 8012a54:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8012a56:	7dfb      	ldrb	r3, [r7, #23]
 8012a58:	68ba      	ldr	r2, [r7, #8]
 8012a5a:	4413      	add	r3, r2
 8012a5c:	687a      	ldr	r2, [r7, #4]
 8012a5e:	7812      	ldrb	r2, [r2, #0]
 8012a60:	701a      	strb	r2, [r3, #0]
  idx++;
 8012a62:	7dfb      	ldrb	r3, [r7, #23]
 8012a64:	3301      	adds	r3, #1
 8012a66:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8012a68:	7dfb      	ldrb	r3, [r7, #23]
 8012a6a:	68ba      	ldr	r2, [r7, #8]
 8012a6c:	4413      	add	r3, r2
 8012a6e:	2203      	movs	r2, #3
 8012a70:	701a      	strb	r2, [r3, #0]
  idx++;
 8012a72:	7dfb      	ldrb	r3, [r7, #23]
 8012a74:	3301      	adds	r3, #1
 8012a76:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8012a78:	e013      	b.n	8012aa2 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8012a7a:	7dfb      	ldrb	r3, [r7, #23]
 8012a7c:	68ba      	ldr	r2, [r7, #8]
 8012a7e:	4413      	add	r3, r2
 8012a80:	693a      	ldr	r2, [r7, #16]
 8012a82:	7812      	ldrb	r2, [r2, #0]
 8012a84:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8012a86:	693b      	ldr	r3, [r7, #16]
 8012a88:	3301      	adds	r3, #1
 8012a8a:	613b      	str	r3, [r7, #16]
    idx++;
 8012a8c:	7dfb      	ldrb	r3, [r7, #23]
 8012a8e:	3301      	adds	r3, #1
 8012a90:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8012a92:	7dfb      	ldrb	r3, [r7, #23]
 8012a94:	68ba      	ldr	r2, [r7, #8]
 8012a96:	4413      	add	r3, r2
 8012a98:	2200      	movs	r2, #0
 8012a9a:	701a      	strb	r2, [r3, #0]
    idx++;
 8012a9c:	7dfb      	ldrb	r3, [r7, #23]
 8012a9e:	3301      	adds	r3, #1
 8012aa0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8012aa2:	693b      	ldr	r3, [r7, #16]
 8012aa4:	781b      	ldrb	r3, [r3, #0]
 8012aa6:	2b00      	cmp	r3, #0
 8012aa8:	d1e7      	bne.n	8012a7a <USBD_GetString+0x6a>
 8012aaa:	e000      	b.n	8012aae <USBD_GetString+0x9e>
    return;
 8012aac:	bf00      	nop
  }
}
 8012aae:	3718      	adds	r7, #24
 8012ab0:	46bd      	mov	sp, r7
 8012ab2:	bd80      	pop	{r7, pc}

08012ab4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8012ab4:	b480      	push	{r7}
 8012ab6:	b085      	sub	sp, #20
 8012ab8:	af00      	add	r7, sp, #0
 8012aba:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8012abc:	2300      	movs	r3, #0
 8012abe:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8012ac0:	687b      	ldr	r3, [r7, #4]
 8012ac2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8012ac4:	e005      	b.n	8012ad2 <USBD_GetLen+0x1e>
  {
    len++;
 8012ac6:	7bfb      	ldrb	r3, [r7, #15]
 8012ac8:	3301      	adds	r3, #1
 8012aca:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8012acc:	68bb      	ldr	r3, [r7, #8]
 8012ace:	3301      	adds	r3, #1
 8012ad0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8012ad2:	68bb      	ldr	r3, [r7, #8]
 8012ad4:	781b      	ldrb	r3, [r3, #0]
 8012ad6:	2b00      	cmp	r3, #0
 8012ad8:	d1f5      	bne.n	8012ac6 <USBD_GetLen+0x12>
  }

  return len;
 8012ada:	7bfb      	ldrb	r3, [r7, #15]
}
 8012adc:	4618      	mov	r0, r3
 8012ade:	3714      	adds	r7, #20
 8012ae0:	46bd      	mov	sp, r7
 8012ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ae6:	4770      	bx	lr

08012ae8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8012ae8:	b580      	push	{r7, lr}
 8012aea:	b084      	sub	sp, #16
 8012aec:	af00      	add	r7, sp, #0
 8012aee:	60f8      	str	r0, [r7, #12]
 8012af0:	60b9      	str	r1, [r7, #8]
 8012af2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8012af4:	68fb      	ldr	r3, [r7, #12]
 8012af6:	2202      	movs	r2, #2
 8012af8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8012afc:	68fb      	ldr	r3, [r7, #12]
 8012afe:	687a      	ldr	r2, [r7, #4]
 8012b00:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8012b02:	68fb      	ldr	r3, [r7, #12]
 8012b04:	687a      	ldr	r2, [r7, #4]
 8012b06:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8012b08:	687b      	ldr	r3, [r7, #4]
 8012b0a:	68ba      	ldr	r2, [r7, #8]
 8012b0c:	2100      	movs	r1, #0
 8012b0e:	68f8      	ldr	r0, [r7, #12]
 8012b10:	f000 fced 	bl	80134ee <USBD_LL_Transmit>

  return USBD_OK;
 8012b14:	2300      	movs	r3, #0
}
 8012b16:	4618      	mov	r0, r3
 8012b18:	3710      	adds	r7, #16
 8012b1a:	46bd      	mov	sp, r7
 8012b1c:	bd80      	pop	{r7, pc}

08012b1e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8012b1e:	b580      	push	{r7, lr}
 8012b20:	b084      	sub	sp, #16
 8012b22:	af00      	add	r7, sp, #0
 8012b24:	60f8      	str	r0, [r7, #12]
 8012b26:	60b9      	str	r1, [r7, #8]
 8012b28:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8012b2a:	687b      	ldr	r3, [r7, #4]
 8012b2c:	68ba      	ldr	r2, [r7, #8]
 8012b2e:	2100      	movs	r1, #0
 8012b30:	68f8      	ldr	r0, [r7, #12]
 8012b32:	f000 fcdc 	bl	80134ee <USBD_LL_Transmit>

  return USBD_OK;
 8012b36:	2300      	movs	r3, #0
}
 8012b38:	4618      	mov	r0, r3
 8012b3a:	3710      	adds	r7, #16
 8012b3c:	46bd      	mov	sp, r7
 8012b3e:	bd80      	pop	{r7, pc}

08012b40 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8012b40:	b580      	push	{r7, lr}
 8012b42:	b084      	sub	sp, #16
 8012b44:	af00      	add	r7, sp, #0
 8012b46:	60f8      	str	r0, [r7, #12]
 8012b48:	60b9      	str	r1, [r7, #8]
 8012b4a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8012b4c:	68fb      	ldr	r3, [r7, #12]
 8012b4e:	2203      	movs	r2, #3
 8012b50:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8012b54:	68fb      	ldr	r3, [r7, #12]
 8012b56:	687a      	ldr	r2, [r7, #4]
 8012b58:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8012b5c:	68fb      	ldr	r3, [r7, #12]
 8012b5e:	687a      	ldr	r2, [r7, #4]
 8012b60:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8012b64:	687b      	ldr	r3, [r7, #4]
 8012b66:	68ba      	ldr	r2, [r7, #8]
 8012b68:	2100      	movs	r1, #0
 8012b6a:	68f8      	ldr	r0, [r7, #12]
 8012b6c:	f000 fce0 	bl	8013530 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8012b70:	2300      	movs	r3, #0
}
 8012b72:	4618      	mov	r0, r3
 8012b74:	3710      	adds	r7, #16
 8012b76:	46bd      	mov	sp, r7
 8012b78:	bd80      	pop	{r7, pc}

08012b7a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8012b7a:	b580      	push	{r7, lr}
 8012b7c:	b084      	sub	sp, #16
 8012b7e:	af00      	add	r7, sp, #0
 8012b80:	60f8      	str	r0, [r7, #12]
 8012b82:	60b9      	str	r1, [r7, #8]
 8012b84:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8012b86:	687b      	ldr	r3, [r7, #4]
 8012b88:	68ba      	ldr	r2, [r7, #8]
 8012b8a:	2100      	movs	r1, #0
 8012b8c:	68f8      	ldr	r0, [r7, #12]
 8012b8e:	f000 fccf 	bl	8013530 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8012b92:	2300      	movs	r3, #0
}
 8012b94:	4618      	mov	r0, r3
 8012b96:	3710      	adds	r7, #16
 8012b98:	46bd      	mov	sp, r7
 8012b9a:	bd80      	pop	{r7, pc}

08012b9c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8012b9c:	b580      	push	{r7, lr}
 8012b9e:	b082      	sub	sp, #8
 8012ba0:	af00      	add	r7, sp, #0
 8012ba2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8012ba4:	687b      	ldr	r3, [r7, #4]
 8012ba6:	2204      	movs	r2, #4
 8012ba8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8012bac:	2300      	movs	r3, #0
 8012bae:	2200      	movs	r2, #0
 8012bb0:	2100      	movs	r1, #0
 8012bb2:	6878      	ldr	r0, [r7, #4]
 8012bb4:	f000 fc9b 	bl	80134ee <USBD_LL_Transmit>

  return USBD_OK;
 8012bb8:	2300      	movs	r3, #0
}
 8012bba:	4618      	mov	r0, r3
 8012bbc:	3708      	adds	r7, #8
 8012bbe:	46bd      	mov	sp, r7
 8012bc0:	bd80      	pop	{r7, pc}

08012bc2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8012bc2:	b580      	push	{r7, lr}
 8012bc4:	b082      	sub	sp, #8
 8012bc6:	af00      	add	r7, sp, #0
 8012bc8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8012bca:	687b      	ldr	r3, [r7, #4]
 8012bcc:	2205      	movs	r2, #5
 8012bce:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8012bd2:	2300      	movs	r3, #0
 8012bd4:	2200      	movs	r2, #0
 8012bd6:	2100      	movs	r1, #0
 8012bd8:	6878      	ldr	r0, [r7, #4]
 8012bda:	f000 fca9 	bl	8013530 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8012bde:	2300      	movs	r3, #0
}
 8012be0:	4618      	mov	r0, r3
 8012be2:	3708      	adds	r7, #8
 8012be4:	46bd      	mov	sp, r7
 8012be6:	bd80      	pop	{r7, pc}

08012be8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8012be8:	b580      	push	{r7, lr}
 8012bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 8012bec:	2201      	movs	r2, #1
 8012bee:	4913      	ldr	r1, [pc, #76]	@ (8012c3c <MX_USB_DEVICE_Init+0x54>)
 8012bf0:	4813      	ldr	r0, [pc, #76]	@ (8012c40 <MX_USB_DEVICE_Init+0x58>)
 8012bf2:	f7fe fccd 	bl	8011590 <USBD_Init>
 8012bf6:	4603      	mov	r3, r0
 8012bf8:	2b00      	cmp	r3, #0
 8012bfa:	d001      	beq.n	8012c00 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8012bfc:	f7ee fe4c 	bl	8001898 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 8012c00:	4910      	ldr	r1, [pc, #64]	@ (8012c44 <MX_USB_DEVICE_Init+0x5c>)
 8012c02:	480f      	ldr	r0, [pc, #60]	@ (8012c40 <MX_USB_DEVICE_Init+0x58>)
 8012c04:	f7fe fcf4 	bl	80115f0 <USBD_RegisterClass>
 8012c08:	4603      	mov	r3, r0
 8012c0a:	2b00      	cmp	r3, #0
 8012c0c:	d001      	beq.n	8012c12 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8012c0e:	f7ee fe43 	bl	8001898 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 8012c12:	490d      	ldr	r1, [pc, #52]	@ (8012c48 <MX_USB_DEVICE_Init+0x60>)
 8012c14:	480a      	ldr	r0, [pc, #40]	@ (8012c40 <MX_USB_DEVICE_Init+0x58>)
 8012c16:	f7fe fbeb 	bl	80113f0 <USBD_CDC_RegisterInterface>
 8012c1a:	4603      	mov	r3, r0
 8012c1c:	2b00      	cmp	r3, #0
 8012c1e:	d001      	beq.n	8012c24 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8012c20:	f7ee fe3a 	bl	8001898 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 8012c24:	4806      	ldr	r0, [pc, #24]	@ (8012c40 <MX_USB_DEVICE_Init+0x58>)
 8012c26:	f7fe fd19 	bl	801165c <USBD_Start>
 8012c2a:	4603      	mov	r3, r0
 8012c2c:	2b00      	cmp	r3, #0
 8012c2e:	d001      	beq.n	8012c34 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8012c30:	f7ee fe32 	bl	8001898 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 8012c34:	f7f6 fada 	bl	80091ec <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8012c38:	bf00      	nop
 8012c3a:	bd80      	pop	{r7, pc}
 8012c3c:	240000b0 	.word	0x240000b0
 8012c40:	24004f2c 	.word	0x24004f2c
 8012c44:	2400001c 	.word	0x2400001c
 8012c48:	2400009c 	.word	0x2400009c

08012c4c <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 8012c4c:	b580      	push	{r7, lr}
 8012c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 8012c50:	2200      	movs	r2, #0
 8012c52:	4905      	ldr	r1, [pc, #20]	@ (8012c68 <CDC_Init_HS+0x1c>)
 8012c54:	4805      	ldr	r0, [pc, #20]	@ (8012c6c <CDC_Init_HS+0x20>)
 8012c56:	f7fe fbe5 	bl	8011424 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 8012c5a:	4905      	ldr	r1, [pc, #20]	@ (8012c70 <CDC_Init_HS+0x24>)
 8012c5c:	4803      	ldr	r0, [pc, #12]	@ (8012c6c <CDC_Init_HS+0x20>)
 8012c5e:	f7fe fc03 	bl	8011468 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8012c62:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 8012c64:	4618      	mov	r0, r3
 8012c66:	bd80      	pop	{r7, pc}
 8012c68:	24005a08 	.word	0x24005a08
 8012c6c:	24004f2c 	.word	0x24004f2c
 8012c70:	24005208 	.word	0x24005208

08012c74 <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 8012c74:	b480      	push	{r7}
 8012c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 8012c78:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 8012c7a:	4618      	mov	r0, r3
 8012c7c:	46bd      	mov	sp, r7
 8012c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c82:	4770      	bx	lr

08012c84 <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8012c84:	b480      	push	{r7}
 8012c86:	b083      	sub	sp, #12
 8012c88:	af00      	add	r7, sp, #0
 8012c8a:	4603      	mov	r3, r0
 8012c8c:	6039      	str	r1, [r7, #0]
 8012c8e:	71fb      	strb	r3, [r7, #7]
 8012c90:	4613      	mov	r3, r2
 8012c92:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 8012c94:	79fb      	ldrb	r3, [r7, #7]
 8012c96:	2b23      	cmp	r3, #35	@ 0x23
 8012c98:	d84a      	bhi.n	8012d30 <CDC_Control_HS+0xac>
 8012c9a:	a201      	add	r2, pc, #4	@ (adr r2, 8012ca0 <CDC_Control_HS+0x1c>)
 8012c9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012ca0:	08012d31 	.word	0x08012d31
 8012ca4:	08012d31 	.word	0x08012d31
 8012ca8:	08012d31 	.word	0x08012d31
 8012cac:	08012d31 	.word	0x08012d31
 8012cb0:	08012d31 	.word	0x08012d31
 8012cb4:	08012d31 	.word	0x08012d31
 8012cb8:	08012d31 	.word	0x08012d31
 8012cbc:	08012d31 	.word	0x08012d31
 8012cc0:	08012d31 	.word	0x08012d31
 8012cc4:	08012d31 	.word	0x08012d31
 8012cc8:	08012d31 	.word	0x08012d31
 8012ccc:	08012d31 	.word	0x08012d31
 8012cd0:	08012d31 	.word	0x08012d31
 8012cd4:	08012d31 	.word	0x08012d31
 8012cd8:	08012d31 	.word	0x08012d31
 8012cdc:	08012d31 	.word	0x08012d31
 8012ce0:	08012d31 	.word	0x08012d31
 8012ce4:	08012d31 	.word	0x08012d31
 8012ce8:	08012d31 	.word	0x08012d31
 8012cec:	08012d31 	.word	0x08012d31
 8012cf0:	08012d31 	.word	0x08012d31
 8012cf4:	08012d31 	.word	0x08012d31
 8012cf8:	08012d31 	.word	0x08012d31
 8012cfc:	08012d31 	.word	0x08012d31
 8012d00:	08012d31 	.word	0x08012d31
 8012d04:	08012d31 	.word	0x08012d31
 8012d08:	08012d31 	.word	0x08012d31
 8012d0c:	08012d31 	.word	0x08012d31
 8012d10:	08012d31 	.word	0x08012d31
 8012d14:	08012d31 	.word	0x08012d31
 8012d18:	08012d31 	.word	0x08012d31
 8012d1c:	08012d31 	.word	0x08012d31
 8012d20:	08012d31 	.word	0x08012d31
 8012d24:	08012d31 	.word	0x08012d31
 8012d28:	08012d31 	.word	0x08012d31
 8012d2c:	08012d31 	.word	0x08012d31
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 8012d30:	bf00      	nop
  }

  return (USBD_OK);
 8012d32:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 8012d34:	4618      	mov	r0, r3
 8012d36:	370c      	adds	r7, #12
 8012d38:	46bd      	mov	sp, r7
 8012d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d3e:	4770      	bx	lr

08012d40 <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 8012d40:	b580      	push	{r7, lr}
 8012d42:	b082      	sub	sp, #8
 8012d44:	af00      	add	r7, sp, #0
 8012d46:	6078      	str	r0, [r7, #4]
 8012d48:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
	USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 8012d4a:	6879      	ldr	r1, [r7, #4]
 8012d4c:	4808      	ldr	r0, [pc, #32]	@ (8012d70 <CDC_Receive_HS+0x30>)
 8012d4e:	f7fe fb8b 	bl	8011468 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 8012d52:	4807      	ldr	r0, [pc, #28]	@ (8012d70 <CDC_Receive_HS+0x30>)
 8012d54:	f7fe fbe6 	bl	8011524 <USBD_CDC_ReceivePacket>

	VibeCheckShell_PutInput(&vc.shell, (char*)Buf, *Len);
 8012d58:	683b      	ldr	r3, [r7, #0]
 8012d5a:	681b      	ldr	r3, [r3, #0]
 8012d5c:	461a      	mov	r2, r3
 8012d5e:	6879      	ldr	r1, [r7, #4]
 8012d60:	4804      	ldr	r0, [pc, #16]	@ (8012d74 <CDC_Receive_HS+0x34>)
 8012d62:	f7ef ffe7 	bl	8002d34 <VibeCheckShell_PutInput>

	return (USBD_OK);
 8012d66:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 8012d68:	4618      	mov	r0, r3
 8012d6a:	3708      	adds	r7, #8
 8012d6c:	46bd      	mov	sp, r7
 8012d6e:	bd80      	pop	{r7, pc}
 8012d70:	24004f2c 	.word	0x24004f2c
 8012d74:	24000910 	.word	0x24000910

08012d78 <CDC_Transmit_HS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_HS(uint8_t* Buf, uint16_t Len)
{
 8012d78:	b580      	push	{r7, lr}
 8012d7a:	b084      	sub	sp, #16
 8012d7c:	af00      	add	r7, sp, #0
 8012d7e:	6078      	str	r0, [r7, #4]
 8012d80:	460b      	mov	r3, r1
 8012d82:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8012d84:	2300      	movs	r3, #0
 8012d86:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 12 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData;
 8012d88:	4b0d      	ldr	r3, [pc, #52]	@ (8012dc0 <CDC_Transmit_HS+0x48>)
 8012d8a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8012d8e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8012d90:	68bb      	ldr	r3, [r7, #8]
 8012d92:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8012d96:	2b00      	cmp	r3, #0
 8012d98:	d001      	beq.n	8012d9e <CDC_Transmit_HS+0x26>
    return USBD_BUSY;
 8012d9a:	2301      	movs	r3, #1
 8012d9c:	e00b      	b.n	8012db6 <CDC_Transmit_HS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, Buf, Len);
 8012d9e:	887b      	ldrh	r3, [r7, #2]
 8012da0:	461a      	mov	r2, r3
 8012da2:	6879      	ldr	r1, [r7, #4]
 8012da4:	4806      	ldr	r0, [pc, #24]	@ (8012dc0 <CDC_Transmit_HS+0x48>)
 8012da6:	f7fe fb3d 	bl	8011424 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceHS);
 8012daa:	4805      	ldr	r0, [pc, #20]	@ (8012dc0 <CDC_Transmit_HS+0x48>)
 8012dac:	f7fe fb7a 	bl	80114a4 <USBD_CDC_TransmitPacket>
 8012db0:	4603      	mov	r3, r0
 8012db2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 12 */
  return result;
 8012db4:	7bfb      	ldrb	r3, [r7, #15]
}
 8012db6:	4618      	mov	r0, r3
 8012db8:	3710      	adds	r7, #16
 8012dba:	46bd      	mov	sp, r7
 8012dbc:	bd80      	pop	{r7, pc}
 8012dbe:	bf00      	nop
 8012dc0:	24004f2c 	.word	0x24004f2c

08012dc4 <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8012dc4:	b480      	push	{r7}
 8012dc6:	b087      	sub	sp, #28
 8012dc8:	af00      	add	r7, sp, #0
 8012dca:	60f8      	str	r0, [r7, #12]
 8012dcc:	60b9      	str	r1, [r7, #8]
 8012dce:	4613      	mov	r3, r2
 8012dd0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8012dd2:	2300      	movs	r3, #0
 8012dd4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 8012dd6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012dda:	4618      	mov	r0, r3
 8012ddc:	371c      	adds	r7, #28
 8012dde:	46bd      	mov	sp, r7
 8012de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012de4:	4770      	bx	lr
	...

08012de8 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012de8:	b480      	push	{r7}
 8012dea:	b083      	sub	sp, #12
 8012dec:	af00      	add	r7, sp, #0
 8012dee:	4603      	mov	r3, r0
 8012df0:	6039      	str	r1, [r7, #0]
 8012df2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 8012df4:	683b      	ldr	r3, [r7, #0]
 8012df6:	2212      	movs	r2, #18
 8012df8:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 8012dfa:	4b03      	ldr	r3, [pc, #12]	@ (8012e08 <USBD_HS_DeviceDescriptor+0x20>)
}
 8012dfc:	4618      	mov	r0, r3
 8012dfe:	370c      	adds	r7, #12
 8012e00:	46bd      	mov	sp, r7
 8012e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e06:	4770      	bx	lr
 8012e08:	240000d0 	.word	0x240000d0

08012e0c <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012e0c:	b480      	push	{r7}
 8012e0e:	b083      	sub	sp, #12
 8012e10:	af00      	add	r7, sp, #0
 8012e12:	4603      	mov	r3, r0
 8012e14:	6039      	str	r1, [r7, #0]
 8012e16:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8012e18:	683b      	ldr	r3, [r7, #0]
 8012e1a:	2204      	movs	r2, #4
 8012e1c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8012e1e:	4b03      	ldr	r3, [pc, #12]	@ (8012e2c <USBD_HS_LangIDStrDescriptor+0x20>)
}
 8012e20:	4618      	mov	r0, r3
 8012e22:	370c      	adds	r7, #12
 8012e24:	46bd      	mov	sp, r7
 8012e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e2a:	4770      	bx	lr
 8012e2c:	240000e4 	.word	0x240000e4

08012e30 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012e30:	b580      	push	{r7, lr}
 8012e32:	b082      	sub	sp, #8
 8012e34:	af00      	add	r7, sp, #0
 8012e36:	4603      	mov	r3, r0
 8012e38:	6039      	str	r1, [r7, #0]
 8012e3a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8012e3c:	79fb      	ldrb	r3, [r7, #7]
 8012e3e:	2b00      	cmp	r3, #0
 8012e40:	d105      	bne.n	8012e4e <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8012e42:	683a      	ldr	r2, [r7, #0]
 8012e44:	4907      	ldr	r1, [pc, #28]	@ (8012e64 <USBD_HS_ProductStrDescriptor+0x34>)
 8012e46:	4808      	ldr	r0, [pc, #32]	@ (8012e68 <USBD_HS_ProductStrDescriptor+0x38>)
 8012e48:	f7ff fde2 	bl	8012a10 <USBD_GetString>
 8012e4c:	e004      	b.n	8012e58 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8012e4e:	683a      	ldr	r2, [r7, #0]
 8012e50:	4904      	ldr	r1, [pc, #16]	@ (8012e64 <USBD_HS_ProductStrDescriptor+0x34>)
 8012e52:	4805      	ldr	r0, [pc, #20]	@ (8012e68 <USBD_HS_ProductStrDescriptor+0x38>)
 8012e54:	f7ff fddc 	bl	8012a10 <USBD_GetString>
  }
  return USBD_StrDesc;
 8012e58:	4b02      	ldr	r3, [pc, #8]	@ (8012e64 <USBD_HS_ProductStrDescriptor+0x34>)
}
 8012e5a:	4618      	mov	r0, r3
 8012e5c:	3708      	adds	r7, #8
 8012e5e:	46bd      	mov	sp, r7
 8012e60:	bd80      	pop	{r7, pc}
 8012e62:	bf00      	nop
 8012e64:	24006208 	.word	0x24006208
 8012e68:	0801844c 	.word	0x0801844c

08012e6c <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012e6c:	b580      	push	{r7, lr}
 8012e6e:	b082      	sub	sp, #8
 8012e70:	af00      	add	r7, sp, #0
 8012e72:	4603      	mov	r3, r0
 8012e74:	6039      	str	r1, [r7, #0]
 8012e76:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8012e78:	683a      	ldr	r2, [r7, #0]
 8012e7a:	4904      	ldr	r1, [pc, #16]	@ (8012e8c <USBD_HS_ManufacturerStrDescriptor+0x20>)
 8012e7c:	4804      	ldr	r0, [pc, #16]	@ (8012e90 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 8012e7e:	f7ff fdc7 	bl	8012a10 <USBD_GetString>
  return USBD_StrDesc;
 8012e82:	4b02      	ldr	r3, [pc, #8]	@ (8012e8c <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 8012e84:	4618      	mov	r0, r3
 8012e86:	3708      	adds	r7, #8
 8012e88:	46bd      	mov	sp, r7
 8012e8a:	bd80      	pop	{r7, pc}
 8012e8c:	24006208 	.word	0x24006208
 8012e90:	08018458 	.word	0x08018458

08012e94 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012e94:	b580      	push	{r7, lr}
 8012e96:	b082      	sub	sp, #8
 8012e98:	af00      	add	r7, sp, #0
 8012e9a:	4603      	mov	r3, r0
 8012e9c:	6039      	str	r1, [r7, #0]
 8012e9e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8012ea0:	683b      	ldr	r3, [r7, #0]
 8012ea2:	221a      	movs	r2, #26
 8012ea4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8012ea6:	f000 f843 	bl	8012f30 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8012eaa:	4b02      	ldr	r3, [pc, #8]	@ (8012eb4 <USBD_HS_SerialStrDescriptor+0x20>)
}
 8012eac:	4618      	mov	r0, r3
 8012eae:	3708      	adds	r7, #8
 8012eb0:	46bd      	mov	sp, r7
 8012eb2:	bd80      	pop	{r7, pc}
 8012eb4:	240000e8 	.word	0x240000e8

08012eb8 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012eb8:	b580      	push	{r7, lr}
 8012eba:	b082      	sub	sp, #8
 8012ebc:	af00      	add	r7, sp, #0
 8012ebe:	4603      	mov	r3, r0
 8012ec0:	6039      	str	r1, [r7, #0]
 8012ec2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8012ec4:	79fb      	ldrb	r3, [r7, #7]
 8012ec6:	2b00      	cmp	r3, #0
 8012ec8:	d105      	bne.n	8012ed6 <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8012eca:	683a      	ldr	r2, [r7, #0]
 8012ecc:	4907      	ldr	r1, [pc, #28]	@ (8012eec <USBD_HS_ConfigStrDescriptor+0x34>)
 8012ece:	4808      	ldr	r0, [pc, #32]	@ (8012ef0 <USBD_HS_ConfigStrDescriptor+0x38>)
 8012ed0:	f7ff fd9e 	bl	8012a10 <USBD_GetString>
 8012ed4:	e004      	b.n	8012ee0 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8012ed6:	683a      	ldr	r2, [r7, #0]
 8012ed8:	4904      	ldr	r1, [pc, #16]	@ (8012eec <USBD_HS_ConfigStrDescriptor+0x34>)
 8012eda:	4805      	ldr	r0, [pc, #20]	@ (8012ef0 <USBD_HS_ConfigStrDescriptor+0x38>)
 8012edc:	f7ff fd98 	bl	8012a10 <USBD_GetString>
  }
  return USBD_StrDesc;
 8012ee0:	4b02      	ldr	r3, [pc, #8]	@ (8012eec <USBD_HS_ConfigStrDescriptor+0x34>)
}
 8012ee2:	4618      	mov	r0, r3
 8012ee4:	3708      	adds	r7, #8
 8012ee6:	46bd      	mov	sp, r7
 8012ee8:	bd80      	pop	{r7, pc}
 8012eea:	bf00      	nop
 8012eec:	24006208 	.word	0x24006208
 8012ef0:	08018464 	.word	0x08018464

08012ef4 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012ef4:	b580      	push	{r7, lr}
 8012ef6:	b082      	sub	sp, #8
 8012ef8:	af00      	add	r7, sp, #0
 8012efa:	4603      	mov	r3, r0
 8012efc:	6039      	str	r1, [r7, #0]
 8012efe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8012f00:	79fb      	ldrb	r3, [r7, #7]
 8012f02:	2b00      	cmp	r3, #0
 8012f04:	d105      	bne.n	8012f12 <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8012f06:	683a      	ldr	r2, [r7, #0]
 8012f08:	4907      	ldr	r1, [pc, #28]	@ (8012f28 <USBD_HS_InterfaceStrDescriptor+0x34>)
 8012f0a:	4808      	ldr	r0, [pc, #32]	@ (8012f2c <USBD_HS_InterfaceStrDescriptor+0x38>)
 8012f0c:	f7ff fd80 	bl	8012a10 <USBD_GetString>
 8012f10:	e004      	b.n	8012f1c <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8012f12:	683a      	ldr	r2, [r7, #0]
 8012f14:	4904      	ldr	r1, [pc, #16]	@ (8012f28 <USBD_HS_InterfaceStrDescriptor+0x34>)
 8012f16:	4805      	ldr	r0, [pc, #20]	@ (8012f2c <USBD_HS_InterfaceStrDescriptor+0x38>)
 8012f18:	f7ff fd7a 	bl	8012a10 <USBD_GetString>
  }
  return USBD_StrDesc;
 8012f1c:	4b02      	ldr	r3, [pc, #8]	@ (8012f28 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 8012f1e:	4618      	mov	r0, r3
 8012f20:	3708      	adds	r7, #8
 8012f22:	46bd      	mov	sp, r7
 8012f24:	bd80      	pop	{r7, pc}
 8012f26:	bf00      	nop
 8012f28:	24006208 	.word	0x24006208
 8012f2c:	08018470 	.word	0x08018470

08012f30 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8012f30:	b580      	push	{r7, lr}
 8012f32:	b084      	sub	sp, #16
 8012f34:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8012f36:	4b0f      	ldr	r3, [pc, #60]	@ (8012f74 <Get_SerialNum+0x44>)
 8012f38:	681b      	ldr	r3, [r3, #0]
 8012f3a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8012f3c:	4b0e      	ldr	r3, [pc, #56]	@ (8012f78 <Get_SerialNum+0x48>)
 8012f3e:	681b      	ldr	r3, [r3, #0]
 8012f40:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8012f42:	4b0e      	ldr	r3, [pc, #56]	@ (8012f7c <Get_SerialNum+0x4c>)
 8012f44:	681b      	ldr	r3, [r3, #0]
 8012f46:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8012f48:	68fa      	ldr	r2, [r7, #12]
 8012f4a:	687b      	ldr	r3, [r7, #4]
 8012f4c:	4413      	add	r3, r2
 8012f4e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8012f50:	68fb      	ldr	r3, [r7, #12]
 8012f52:	2b00      	cmp	r3, #0
 8012f54:	d009      	beq.n	8012f6a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8012f56:	2208      	movs	r2, #8
 8012f58:	4909      	ldr	r1, [pc, #36]	@ (8012f80 <Get_SerialNum+0x50>)
 8012f5a:	68f8      	ldr	r0, [r7, #12]
 8012f5c:	f000 f814 	bl	8012f88 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8012f60:	2204      	movs	r2, #4
 8012f62:	4908      	ldr	r1, [pc, #32]	@ (8012f84 <Get_SerialNum+0x54>)
 8012f64:	68b8      	ldr	r0, [r7, #8]
 8012f66:	f000 f80f 	bl	8012f88 <IntToUnicode>
  }
}
 8012f6a:	bf00      	nop
 8012f6c:	3710      	adds	r7, #16
 8012f6e:	46bd      	mov	sp, r7
 8012f70:	bd80      	pop	{r7, pc}
 8012f72:	bf00      	nop
 8012f74:	1ff1e800 	.word	0x1ff1e800
 8012f78:	1ff1e804 	.word	0x1ff1e804
 8012f7c:	1ff1e808 	.word	0x1ff1e808
 8012f80:	240000ea 	.word	0x240000ea
 8012f84:	240000fa 	.word	0x240000fa

08012f88 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8012f88:	b480      	push	{r7}
 8012f8a:	b087      	sub	sp, #28
 8012f8c:	af00      	add	r7, sp, #0
 8012f8e:	60f8      	str	r0, [r7, #12]
 8012f90:	60b9      	str	r1, [r7, #8]
 8012f92:	4613      	mov	r3, r2
 8012f94:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8012f96:	2300      	movs	r3, #0
 8012f98:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8012f9a:	2300      	movs	r3, #0
 8012f9c:	75fb      	strb	r3, [r7, #23]
 8012f9e:	e027      	b.n	8012ff0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8012fa0:	68fb      	ldr	r3, [r7, #12]
 8012fa2:	0f1b      	lsrs	r3, r3, #28
 8012fa4:	2b09      	cmp	r3, #9
 8012fa6:	d80b      	bhi.n	8012fc0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8012fa8:	68fb      	ldr	r3, [r7, #12]
 8012faa:	0f1b      	lsrs	r3, r3, #28
 8012fac:	b2da      	uxtb	r2, r3
 8012fae:	7dfb      	ldrb	r3, [r7, #23]
 8012fb0:	005b      	lsls	r3, r3, #1
 8012fb2:	4619      	mov	r1, r3
 8012fb4:	68bb      	ldr	r3, [r7, #8]
 8012fb6:	440b      	add	r3, r1
 8012fb8:	3230      	adds	r2, #48	@ 0x30
 8012fba:	b2d2      	uxtb	r2, r2
 8012fbc:	701a      	strb	r2, [r3, #0]
 8012fbe:	e00a      	b.n	8012fd6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8012fc0:	68fb      	ldr	r3, [r7, #12]
 8012fc2:	0f1b      	lsrs	r3, r3, #28
 8012fc4:	b2da      	uxtb	r2, r3
 8012fc6:	7dfb      	ldrb	r3, [r7, #23]
 8012fc8:	005b      	lsls	r3, r3, #1
 8012fca:	4619      	mov	r1, r3
 8012fcc:	68bb      	ldr	r3, [r7, #8]
 8012fce:	440b      	add	r3, r1
 8012fd0:	3237      	adds	r2, #55	@ 0x37
 8012fd2:	b2d2      	uxtb	r2, r2
 8012fd4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8012fd6:	68fb      	ldr	r3, [r7, #12]
 8012fd8:	011b      	lsls	r3, r3, #4
 8012fda:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8012fdc:	7dfb      	ldrb	r3, [r7, #23]
 8012fde:	005b      	lsls	r3, r3, #1
 8012fe0:	3301      	adds	r3, #1
 8012fe2:	68ba      	ldr	r2, [r7, #8]
 8012fe4:	4413      	add	r3, r2
 8012fe6:	2200      	movs	r2, #0
 8012fe8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8012fea:	7dfb      	ldrb	r3, [r7, #23]
 8012fec:	3301      	adds	r3, #1
 8012fee:	75fb      	strb	r3, [r7, #23]
 8012ff0:	7dfa      	ldrb	r2, [r7, #23]
 8012ff2:	79fb      	ldrb	r3, [r7, #7]
 8012ff4:	429a      	cmp	r2, r3
 8012ff6:	d3d3      	bcc.n	8012fa0 <IntToUnicode+0x18>
  }
}
 8012ff8:	bf00      	nop
 8012ffa:	bf00      	nop
 8012ffc:	371c      	adds	r7, #28
 8012ffe:	46bd      	mov	sp, r7
 8013000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013004:	4770      	bx	lr
	...

08013008 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8013008:	b580      	push	{r7, lr}
 801300a:	b0b2      	sub	sp, #200	@ 0xc8
 801300c:	af00      	add	r7, sp, #0
 801300e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8013010:	f107 0310 	add.w	r3, r7, #16
 8013014:	22b8      	movs	r2, #184	@ 0xb8
 8013016:	2100      	movs	r1, #0
 8013018:	4618      	mov	r0, r3
 801301a:	f001 fe1e 	bl	8014c5a <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 801301e:	687b      	ldr	r3, [r7, #4]
 8013020:	681b      	ldr	r3, [r3, #0]
 8013022:	4a1a      	ldr	r2, [pc, #104]	@ (801308c <HAL_PCD_MspInit+0x84>)
 8013024:	4293      	cmp	r3, r2
 8013026:	d12c      	bne.n	8013082 <HAL_PCD_MspInit+0x7a>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8013028:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 801302c:	f04f 0300 	mov.w	r3, #0
 8013030:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8013034:	f44f 1340 	mov.w	r3, #3145728	@ 0x300000
 8013038:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 801303c:	f107 0310 	add.w	r3, r7, #16
 8013040:	4618      	mov	r0, r3
 8013042:	f7f7 f849 	bl	800a0d8 <HAL_RCCEx_PeriphCLKConfig>
 8013046:	4603      	mov	r3, r0
 8013048:	2b00      	cmp	r3, #0
 801304a:	d001      	beq.n	8013050 <HAL_PCD_MspInit+0x48>
    {
      Error_Handler();
 801304c:	f7ee fc24 	bl	8001898 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8013050:	f7f6 f8cc 	bl	80091ec <HAL_PWREx_EnableUSBVoltageDetector>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8013054:	4b0e      	ldr	r3, [pc, #56]	@ (8013090 <HAL_PCD_MspInit+0x88>)
 8013056:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 801305a:	4a0d      	ldr	r2, [pc, #52]	@ (8013090 <HAL_PCD_MspInit+0x88>)
 801305c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8013060:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8013064:	4b0a      	ldr	r3, [pc, #40]	@ (8013090 <HAL_PCD_MspInit+0x88>)
 8013066:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 801306a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801306e:	60fb      	str	r3, [r7, #12]
 8013070:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 8013072:	2200      	movs	r2, #0
 8013074:	2100      	movs	r1, #0
 8013076:	204d      	movs	r0, #77	@ 0x4d
 8013078:	f7f2 fc03 	bl	8005882 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 801307c:	204d      	movs	r0, #77	@ 0x4d
 801307e:	f7f2 fc1a 	bl	80058b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 8013082:	bf00      	nop
 8013084:	37c8      	adds	r7, #200	@ 0xc8
 8013086:	46bd      	mov	sp, r7
 8013088:	bd80      	pop	{r7, pc}
 801308a:	bf00      	nop
 801308c:	40040000 	.word	0x40040000
 8013090:	58024400 	.word	0x58024400

08013094 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013094:	b580      	push	{r7, lr}
 8013096:	b082      	sub	sp, #8
 8013098:	af00      	add	r7, sp, #0
 801309a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801309c:	687b      	ldr	r3, [r7, #4]
 801309e:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 80130a2:	687b      	ldr	r3, [r7, #4]
 80130a4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80130a8:	4619      	mov	r1, r3
 80130aa:	4610      	mov	r0, r2
 80130ac:	f7fe fb23 	bl	80116f6 <USBD_LL_SetupStage>
}
 80130b0:	bf00      	nop
 80130b2:	3708      	adds	r7, #8
 80130b4:	46bd      	mov	sp, r7
 80130b6:	bd80      	pop	{r7, pc}

080130b8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80130b8:	b580      	push	{r7, lr}
 80130ba:	b082      	sub	sp, #8
 80130bc:	af00      	add	r7, sp, #0
 80130be:	6078      	str	r0, [r7, #4]
 80130c0:	460b      	mov	r3, r1
 80130c2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80130c4:	687b      	ldr	r3, [r7, #4]
 80130c6:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80130ca:	78fa      	ldrb	r2, [r7, #3]
 80130cc:	6879      	ldr	r1, [r7, #4]
 80130ce:	4613      	mov	r3, r2
 80130d0:	00db      	lsls	r3, r3, #3
 80130d2:	4413      	add	r3, r2
 80130d4:	009b      	lsls	r3, r3, #2
 80130d6:	440b      	add	r3, r1
 80130d8:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80130dc:	681a      	ldr	r2, [r3, #0]
 80130de:	78fb      	ldrb	r3, [r7, #3]
 80130e0:	4619      	mov	r1, r3
 80130e2:	f7fe fb5d 	bl	80117a0 <USBD_LL_DataOutStage>
}
 80130e6:	bf00      	nop
 80130e8:	3708      	adds	r7, #8
 80130ea:	46bd      	mov	sp, r7
 80130ec:	bd80      	pop	{r7, pc}

080130ee <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80130ee:	b580      	push	{r7, lr}
 80130f0:	b082      	sub	sp, #8
 80130f2:	af00      	add	r7, sp, #0
 80130f4:	6078      	str	r0, [r7, #4]
 80130f6:	460b      	mov	r3, r1
 80130f8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80130fa:	687b      	ldr	r3, [r7, #4]
 80130fc:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8013100:	78fa      	ldrb	r2, [r7, #3]
 8013102:	6879      	ldr	r1, [r7, #4]
 8013104:	4613      	mov	r3, r2
 8013106:	00db      	lsls	r3, r3, #3
 8013108:	4413      	add	r3, r2
 801310a:	009b      	lsls	r3, r3, #2
 801310c:	440b      	add	r3, r1
 801310e:	3320      	adds	r3, #32
 8013110:	681a      	ldr	r2, [r3, #0]
 8013112:	78fb      	ldrb	r3, [r7, #3]
 8013114:	4619      	mov	r1, r3
 8013116:	f7fe fbf6 	bl	8011906 <USBD_LL_DataInStage>
}
 801311a:	bf00      	nop
 801311c:	3708      	adds	r7, #8
 801311e:	46bd      	mov	sp, r7
 8013120:	bd80      	pop	{r7, pc}

08013122 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013122:	b580      	push	{r7, lr}
 8013124:	b082      	sub	sp, #8
 8013126:	af00      	add	r7, sp, #0
 8013128:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801312a:	687b      	ldr	r3, [r7, #4]
 801312c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8013130:	4618      	mov	r0, r3
 8013132:	f7fe fd30 	bl	8011b96 <USBD_LL_SOF>
}
 8013136:	bf00      	nop
 8013138:	3708      	adds	r7, #8
 801313a:	46bd      	mov	sp, r7
 801313c:	bd80      	pop	{r7, pc}

0801313e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801313e:	b580      	push	{r7, lr}
 8013140:	b084      	sub	sp, #16
 8013142:	af00      	add	r7, sp, #0
 8013144:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8013146:	2301      	movs	r3, #1
 8013148:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 801314a:	687b      	ldr	r3, [r7, #4]
 801314c:	79db      	ldrb	r3, [r3, #7]
 801314e:	2b00      	cmp	r3, #0
 8013150:	d102      	bne.n	8013158 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8013152:	2300      	movs	r3, #0
 8013154:	73fb      	strb	r3, [r7, #15]
 8013156:	e008      	b.n	801316a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8013158:	687b      	ldr	r3, [r7, #4]
 801315a:	79db      	ldrb	r3, [r3, #7]
 801315c:	2b02      	cmp	r3, #2
 801315e:	d102      	bne.n	8013166 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8013160:	2301      	movs	r3, #1
 8013162:	73fb      	strb	r3, [r7, #15]
 8013164:	e001      	b.n	801316a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8013166:	f7ee fb97 	bl	8001898 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801316a:	687b      	ldr	r3, [r7, #4]
 801316c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8013170:	7bfa      	ldrb	r2, [r7, #15]
 8013172:	4611      	mov	r1, r2
 8013174:	4618      	mov	r0, r3
 8013176:	f7fe fcca 	bl	8011b0e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801317a:	687b      	ldr	r3, [r7, #4]
 801317c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8013180:	4618      	mov	r0, r3
 8013182:	f7fe fc72 	bl	8011a6a <USBD_LL_Reset>
}
 8013186:	bf00      	nop
 8013188:	3710      	adds	r7, #16
 801318a:	46bd      	mov	sp, r7
 801318c:	bd80      	pop	{r7, pc}
	...

08013190 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013190:	b580      	push	{r7, lr}
 8013192:	b082      	sub	sp, #8
 8013194:	af00      	add	r7, sp, #0
 8013196:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8013198:	687b      	ldr	r3, [r7, #4]
 801319a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801319e:	4618      	mov	r0, r3
 80131a0:	f7fe fcc5 	bl	8011b2e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80131a4:	687b      	ldr	r3, [r7, #4]
 80131a6:	681b      	ldr	r3, [r3, #0]
 80131a8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80131ac:	681b      	ldr	r3, [r3, #0]
 80131ae:	687a      	ldr	r2, [r7, #4]
 80131b0:	6812      	ldr	r2, [r2, #0]
 80131b2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80131b6:	f043 0301 	orr.w	r3, r3, #1
 80131ba:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80131bc:	687b      	ldr	r3, [r7, #4]
 80131be:	7adb      	ldrb	r3, [r3, #11]
 80131c0:	2b00      	cmp	r3, #0
 80131c2:	d005      	beq.n	80131d0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80131c4:	4b04      	ldr	r3, [pc, #16]	@ (80131d8 <HAL_PCD_SuspendCallback+0x48>)
 80131c6:	691b      	ldr	r3, [r3, #16]
 80131c8:	4a03      	ldr	r2, [pc, #12]	@ (80131d8 <HAL_PCD_SuspendCallback+0x48>)
 80131ca:	f043 0306 	orr.w	r3, r3, #6
 80131ce:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80131d0:	bf00      	nop
 80131d2:	3708      	adds	r7, #8
 80131d4:	46bd      	mov	sp, r7
 80131d6:	bd80      	pop	{r7, pc}
 80131d8:	e000ed00 	.word	0xe000ed00

080131dc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80131dc:	b580      	push	{r7, lr}
 80131de:	b082      	sub	sp, #8
 80131e0:	af00      	add	r7, sp, #0
 80131e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80131e4:	687b      	ldr	r3, [r7, #4]
 80131e6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80131ea:	4618      	mov	r0, r3
 80131ec:	f7fe fcbb 	bl	8011b66 <USBD_LL_Resume>
}
 80131f0:	bf00      	nop
 80131f2:	3708      	adds	r7, #8
 80131f4:	46bd      	mov	sp, r7
 80131f6:	bd80      	pop	{r7, pc}

080131f8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80131f8:	b580      	push	{r7, lr}
 80131fa:	b082      	sub	sp, #8
 80131fc:	af00      	add	r7, sp, #0
 80131fe:	6078      	str	r0, [r7, #4]
 8013200:	460b      	mov	r3, r1
 8013202:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8013204:	687b      	ldr	r3, [r7, #4]
 8013206:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801320a:	78fa      	ldrb	r2, [r7, #3]
 801320c:	4611      	mov	r1, r2
 801320e:	4618      	mov	r0, r3
 8013210:	f7fe fd13 	bl	8011c3a <USBD_LL_IsoOUTIncomplete>
}
 8013214:	bf00      	nop
 8013216:	3708      	adds	r7, #8
 8013218:	46bd      	mov	sp, r7
 801321a:	bd80      	pop	{r7, pc}

0801321c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801321c:	b580      	push	{r7, lr}
 801321e:	b082      	sub	sp, #8
 8013220:	af00      	add	r7, sp, #0
 8013222:	6078      	str	r0, [r7, #4]
 8013224:	460b      	mov	r3, r1
 8013226:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8013228:	687b      	ldr	r3, [r7, #4]
 801322a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801322e:	78fa      	ldrb	r2, [r7, #3]
 8013230:	4611      	mov	r1, r2
 8013232:	4618      	mov	r0, r3
 8013234:	f7fe fccf 	bl	8011bd6 <USBD_LL_IsoINIncomplete>
}
 8013238:	bf00      	nop
 801323a:	3708      	adds	r7, #8
 801323c:	46bd      	mov	sp, r7
 801323e:	bd80      	pop	{r7, pc}

08013240 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013240:	b580      	push	{r7, lr}
 8013242:	b082      	sub	sp, #8
 8013244:	af00      	add	r7, sp, #0
 8013246:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8013248:	687b      	ldr	r3, [r7, #4]
 801324a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801324e:	4618      	mov	r0, r3
 8013250:	f7fe fd25 	bl	8011c9e <USBD_LL_DevConnected>
}
 8013254:	bf00      	nop
 8013256:	3708      	adds	r7, #8
 8013258:	46bd      	mov	sp, r7
 801325a:	bd80      	pop	{r7, pc}

0801325c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801325c:	b580      	push	{r7, lr}
 801325e:	b082      	sub	sp, #8
 8013260:	af00      	add	r7, sp, #0
 8013262:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8013264:	687b      	ldr	r3, [r7, #4]
 8013266:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801326a:	4618      	mov	r0, r3
 801326c:	f7fe fd22 	bl	8011cb4 <USBD_LL_DevDisconnected>
}
 8013270:	bf00      	nop
 8013272:	3708      	adds	r7, #8
 8013274:	46bd      	mov	sp, r7
 8013276:	bd80      	pop	{r7, pc}

08013278 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8013278:	b580      	push	{r7, lr}
 801327a:	b082      	sub	sp, #8
 801327c:	af00      	add	r7, sp, #0
 801327e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 8013280:	687b      	ldr	r3, [r7, #4]
 8013282:	781b      	ldrb	r3, [r3, #0]
 8013284:	2b01      	cmp	r3, #1
 8013286:	d140      	bne.n	801330a <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 8013288:	4a22      	ldr	r2, [pc, #136]	@ (8013314 <USBD_LL_Init+0x9c>)
 801328a:	687b      	ldr	r3, [r7, #4]
 801328c:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_HS;
 8013290:	687b      	ldr	r3, [r7, #4]
 8013292:	4a20      	ldr	r2, [pc, #128]	@ (8013314 <USBD_LL_Init+0x9c>)
 8013294:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8013298:	4b1e      	ldr	r3, [pc, #120]	@ (8013314 <USBD_LL_Init+0x9c>)
 801329a:	4a1f      	ldr	r2, [pc, #124]	@ (8013318 <USBD_LL_Init+0xa0>)
 801329c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 801329e:	4b1d      	ldr	r3, [pc, #116]	@ (8013314 <USBD_LL_Init+0x9c>)
 80132a0:	2209      	movs	r2, #9
 80132a2:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 80132a4:	4b1b      	ldr	r3, [pc, #108]	@ (8013314 <USBD_LL_Init+0x9c>)
 80132a6:	2202      	movs	r2, #2
 80132a8:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 80132aa:	4b1a      	ldr	r3, [pc, #104]	@ (8013314 <USBD_LL_Init+0x9c>)
 80132ac:	2200      	movs	r2, #0
 80132ae:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 80132b0:	4b18      	ldr	r3, [pc, #96]	@ (8013314 <USBD_LL_Init+0x9c>)
 80132b2:	2202      	movs	r2, #2
 80132b4:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 80132b6:	4b17      	ldr	r3, [pc, #92]	@ (8013314 <USBD_LL_Init+0x9c>)
 80132b8:	2200      	movs	r2, #0
 80132ba:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 80132bc:	4b15      	ldr	r3, [pc, #84]	@ (8013314 <USBD_LL_Init+0x9c>)
 80132be:	2200      	movs	r2, #0
 80132c0:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 80132c2:	4b14      	ldr	r3, [pc, #80]	@ (8013314 <USBD_LL_Init+0x9c>)
 80132c4:	2200      	movs	r2, #0
 80132c6:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 80132c8:	4b12      	ldr	r3, [pc, #72]	@ (8013314 <USBD_LL_Init+0x9c>)
 80132ca:	2200      	movs	r2, #0
 80132cc:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 80132ce:	4b11      	ldr	r3, [pc, #68]	@ (8013314 <USBD_LL_Init+0x9c>)
 80132d0:	2200      	movs	r2, #0
 80132d2:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 80132d4:	4b0f      	ldr	r3, [pc, #60]	@ (8013314 <USBD_LL_Init+0x9c>)
 80132d6:	2200      	movs	r2, #0
 80132d8:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 80132da:	480e      	ldr	r0, [pc, #56]	@ (8013314 <USBD_LL_Init+0x9c>)
 80132dc:	f7f4 fcad 	bl	8007c3a <HAL_PCD_Init>
 80132e0:	4603      	mov	r3, r0
 80132e2:	2b00      	cmp	r3, #0
 80132e4:	d001      	beq.n	80132ea <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 80132e6:	f7ee fad7 	bl	8001898 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_HS_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 80132ea:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80132ee:	4809      	ldr	r0, [pc, #36]	@ (8013314 <USBD_LL_Init+0x9c>)
 80132f0:	f7f5 ff01 	bl	80090f6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 80132f4:	2280      	movs	r2, #128	@ 0x80
 80132f6:	2100      	movs	r1, #0
 80132f8:	4806      	ldr	r0, [pc, #24]	@ (8013314 <USBD_LL_Init+0x9c>)
 80132fa:	f7f5 feb5 	bl	8009068 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 80132fe:	f44f 72ba 	mov.w	r2, #372	@ 0x174
 8013302:	2101      	movs	r1, #1
 8013304:	4803      	ldr	r0, [pc, #12]	@ (8013314 <USBD_LL_Init+0x9c>)
 8013306:	f7f5 feaf 	bl	8009068 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_HS_Configuration */
  }
  return USBD_OK;
 801330a:	2300      	movs	r3, #0
}
 801330c:	4618      	mov	r0, r3
 801330e:	3708      	adds	r7, #8
 8013310:	46bd      	mov	sp, r7
 8013312:	bd80      	pop	{r7, pc}
 8013314:	24006408 	.word	0x24006408
 8013318:	40040000 	.word	0x40040000

0801331c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801331c:	b580      	push	{r7, lr}
 801331e:	b084      	sub	sp, #16
 8013320:	af00      	add	r7, sp, #0
 8013322:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013324:	2300      	movs	r3, #0
 8013326:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013328:	2300      	movs	r3, #0
 801332a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 801332c:	687b      	ldr	r3, [r7, #4]
 801332e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8013332:	4618      	mov	r0, r3
 8013334:	f7f4 fd8d 	bl	8007e52 <HAL_PCD_Start>
 8013338:	4603      	mov	r3, r0
 801333a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801333c:	7bfb      	ldrb	r3, [r7, #15]
 801333e:	4618      	mov	r0, r3
 8013340:	f000 f942 	bl	80135c8 <USBD_Get_USB_Status>
 8013344:	4603      	mov	r3, r0
 8013346:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013348:	7bbb      	ldrb	r3, [r7, #14]
}
 801334a:	4618      	mov	r0, r3
 801334c:	3710      	adds	r7, #16
 801334e:	46bd      	mov	sp, r7
 8013350:	bd80      	pop	{r7, pc}

08013352 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8013352:	b580      	push	{r7, lr}
 8013354:	b084      	sub	sp, #16
 8013356:	af00      	add	r7, sp, #0
 8013358:	6078      	str	r0, [r7, #4]
 801335a:	4608      	mov	r0, r1
 801335c:	4611      	mov	r1, r2
 801335e:	461a      	mov	r2, r3
 8013360:	4603      	mov	r3, r0
 8013362:	70fb      	strb	r3, [r7, #3]
 8013364:	460b      	mov	r3, r1
 8013366:	70bb      	strb	r3, [r7, #2]
 8013368:	4613      	mov	r3, r2
 801336a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801336c:	2300      	movs	r3, #0
 801336e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013370:	2300      	movs	r3, #0
 8013372:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8013374:	687b      	ldr	r3, [r7, #4]
 8013376:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801337a:	78bb      	ldrb	r3, [r7, #2]
 801337c:	883a      	ldrh	r2, [r7, #0]
 801337e:	78f9      	ldrb	r1, [r7, #3]
 8013380:	f7f5 fa8e 	bl	80088a0 <HAL_PCD_EP_Open>
 8013384:	4603      	mov	r3, r0
 8013386:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013388:	7bfb      	ldrb	r3, [r7, #15]
 801338a:	4618      	mov	r0, r3
 801338c:	f000 f91c 	bl	80135c8 <USBD_Get_USB_Status>
 8013390:	4603      	mov	r3, r0
 8013392:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013394:	7bbb      	ldrb	r3, [r7, #14]
}
 8013396:	4618      	mov	r0, r3
 8013398:	3710      	adds	r7, #16
 801339a:	46bd      	mov	sp, r7
 801339c:	bd80      	pop	{r7, pc}

0801339e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801339e:	b580      	push	{r7, lr}
 80133a0:	b084      	sub	sp, #16
 80133a2:	af00      	add	r7, sp, #0
 80133a4:	6078      	str	r0, [r7, #4]
 80133a6:	460b      	mov	r3, r1
 80133a8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80133aa:	2300      	movs	r3, #0
 80133ac:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80133ae:	2300      	movs	r3, #0
 80133b0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80133b2:	687b      	ldr	r3, [r7, #4]
 80133b4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80133b8:	78fa      	ldrb	r2, [r7, #3]
 80133ba:	4611      	mov	r1, r2
 80133bc:	4618      	mov	r0, r3
 80133be:	f7f5 fad7 	bl	8008970 <HAL_PCD_EP_Close>
 80133c2:	4603      	mov	r3, r0
 80133c4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80133c6:	7bfb      	ldrb	r3, [r7, #15]
 80133c8:	4618      	mov	r0, r3
 80133ca:	f000 f8fd 	bl	80135c8 <USBD_Get_USB_Status>
 80133ce:	4603      	mov	r3, r0
 80133d0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80133d2:	7bbb      	ldrb	r3, [r7, #14]
}
 80133d4:	4618      	mov	r0, r3
 80133d6:	3710      	adds	r7, #16
 80133d8:	46bd      	mov	sp, r7
 80133da:	bd80      	pop	{r7, pc}

080133dc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80133dc:	b580      	push	{r7, lr}
 80133de:	b084      	sub	sp, #16
 80133e0:	af00      	add	r7, sp, #0
 80133e2:	6078      	str	r0, [r7, #4]
 80133e4:	460b      	mov	r3, r1
 80133e6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80133e8:	2300      	movs	r3, #0
 80133ea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80133ec:	2300      	movs	r3, #0
 80133ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80133f0:	687b      	ldr	r3, [r7, #4]
 80133f2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80133f6:	78fa      	ldrb	r2, [r7, #3]
 80133f8:	4611      	mov	r1, r2
 80133fa:	4618      	mov	r0, r3
 80133fc:	f7f5 fb8f 	bl	8008b1e <HAL_PCD_EP_SetStall>
 8013400:	4603      	mov	r3, r0
 8013402:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013404:	7bfb      	ldrb	r3, [r7, #15]
 8013406:	4618      	mov	r0, r3
 8013408:	f000 f8de 	bl	80135c8 <USBD_Get_USB_Status>
 801340c:	4603      	mov	r3, r0
 801340e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013410:	7bbb      	ldrb	r3, [r7, #14]
}
 8013412:	4618      	mov	r0, r3
 8013414:	3710      	adds	r7, #16
 8013416:	46bd      	mov	sp, r7
 8013418:	bd80      	pop	{r7, pc}

0801341a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801341a:	b580      	push	{r7, lr}
 801341c:	b084      	sub	sp, #16
 801341e:	af00      	add	r7, sp, #0
 8013420:	6078      	str	r0, [r7, #4]
 8013422:	460b      	mov	r3, r1
 8013424:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013426:	2300      	movs	r3, #0
 8013428:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801342a:	2300      	movs	r3, #0
 801342c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801342e:	687b      	ldr	r3, [r7, #4]
 8013430:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8013434:	78fa      	ldrb	r2, [r7, #3]
 8013436:	4611      	mov	r1, r2
 8013438:	4618      	mov	r0, r3
 801343a:	f7f5 fbd3 	bl	8008be4 <HAL_PCD_EP_ClrStall>
 801343e:	4603      	mov	r3, r0
 8013440:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013442:	7bfb      	ldrb	r3, [r7, #15]
 8013444:	4618      	mov	r0, r3
 8013446:	f000 f8bf 	bl	80135c8 <USBD_Get_USB_Status>
 801344a:	4603      	mov	r3, r0
 801344c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801344e:	7bbb      	ldrb	r3, [r7, #14]
}
 8013450:	4618      	mov	r0, r3
 8013452:	3710      	adds	r7, #16
 8013454:	46bd      	mov	sp, r7
 8013456:	bd80      	pop	{r7, pc}

08013458 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013458:	b480      	push	{r7}
 801345a:	b085      	sub	sp, #20
 801345c:	af00      	add	r7, sp, #0
 801345e:	6078      	str	r0, [r7, #4]
 8013460:	460b      	mov	r3, r1
 8013462:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8013464:	687b      	ldr	r3, [r7, #4]
 8013466:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801346a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801346c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8013470:	2b00      	cmp	r3, #0
 8013472:	da0b      	bge.n	801348c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8013474:	78fb      	ldrb	r3, [r7, #3]
 8013476:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801347a:	68f9      	ldr	r1, [r7, #12]
 801347c:	4613      	mov	r3, r2
 801347e:	00db      	lsls	r3, r3, #3
 8013480:	4413      	add	r3, r2
 8013482:	009b      	lsls	r3, r3, #2
 8013484:	440b      	add	r3, r1
 8013486:	3316      	adds	r3, #22
 8013488:	781b      	ldrb	r3, [r3, #0]
 801348a:	e00b      	b.n	80134a4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801348c:	78fb      	ldrb	r3, [r7, #3]
 801348e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8013492:	68f9      	ldr	r1, [r7, #12]
 8013494:	4613      	mov	r3, r2
 8013496:	00db      	lsls	r3, r3, #3
 8013498:	4413      	add	r3, r2
 801349a:	009b      	lsls	r3, r3, #2
 801349c:	440b      	add	r3, r1
 801349e:	f203 2356 	addw	r3, r3, #598	@ 0x256
 80134a2:	781b      	ldrb	r3, [r3, #0]
  }
}
 80134a4:	4618      	mov	r0, r3
 80134a6:	3714      	adds	r7, #20
 80134a8:	46bd      	mov	sp, r7
 80134aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134ae:	4770      	bx	lr

080134b0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80134b0:	b580      	push	{r7, lr}
 80134b2:	b084      	sub	sp, #16
 80134b4:	af00      	add	r7, sp, #0
 80134b6:	6078      	str	r0, [r7, #4]
 80134b8:	460b      	mov	r3, r1
 80134ba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80134bc:	2300      	movs	r3, #0
 80134be:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80134c0:	2300      	movs	r3, #0
 80134c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80134c4:	687b      	ldr	r3, [r7, #4]
 80134c6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80134ca:	78fa      	ldrb	r2, [r7, #3]
 80134cc:	4611      	mov	r1, r2
 80134ce:	4618      	mov	r0, r3
 80134d0:	f7f5 f9c2 	bl	8008858 <HAL_PCD_SetAddress>
 80134d4:	4603      	mov	r3, r0
 80134d6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80134d8:	7bfb      	ldrb	r3, [r7, #15]
 80134da:	4618      	mov	r0, r3
 80134dc:	f000 f874 	bl	80135c8 <USBD_Get_USB_Status>
 80134e0:	4603      	mov	r3, r0
 80134e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80134e4:	7bbb      	ldrb	r3, [r7, #14]
}
 80134e6:	4618      	mov	r0, r3
 80134e8:	3710      	adds	r7, #16
 80134ea:	46bd      	mov	sp, r7
 80134ec:	bd80      	pop	{r7, pc}

080134ee <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80134ee:	b580      	push	{r7, lr}
 80134f0:	b086      	sub	sp, #24
 80134f2:	af00      	add	r7, sp, #0
 80134f4:	60f8      	str	r0, [r7, #12]
 80134f6:	607a      	str	r2, [r7, #4]
 80134f8:	603b      	str	r3, [r7, #0]
 80134fa:	460b      	mov	r3, r1
 80134fc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80134fe:	2300      	movs	r3, #0
 8013500:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013502:	2300      	movs	r3, #0
 8013504:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8013506:	68fb      	ldr	r3, [r7, #12]
 8013508:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801350c:	7af9      	ldrb	r1, [r7, #11]
 801350e:	683b      	ldr	r3, [r7, #0]
 8013510:	687a      	ldr	r2, [r7, #4]
 8013512:	f7f5 faca 	bl	8008aaa <HAL_PCD_EP_Transmit>
 8013516:	4603      	mov	r3, r0
 8013518:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801351a:	7dfb      	ldrb	r3, [r7, #23]
 801351c:	4618      	mov	r0, r3
 801351e:	f000 f853 	bl	80135c8 <USBD_Get_USB_Status>
 8013522:	4603      	mov	r3, r0
 8013524:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8013526:	7dbb      	ldrb	r3, [r7, #22]
}
 8013528:	4618      	mov	r0, r3
 801352a:	3718      	adds	r7, #24
 801352c:	46bd      	mov	sp, r7
 801352e:	bd80      	pop	{r7, pc}

08013530 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8013530:	b580      	push	{r7, lr}
 8013532:	b086      	sub	sp, #24
 8013534:	af00      	add	r7, sp, #0
 8013536:	60f8      	str	r0, [r7, #12]
 8013538:	607a      	str	r2, [r7, #4]
 801353a:	603b      	str	r3, [r7, #0]
 801353c:	460b      	mov	r3, r1
 801353e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013540:	2300      	movs	r3, #0
 8013542:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013544:	2300      	movs	r3, #0
 8013546:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8013548:	68fb      	ldr	r3, [r7, #12]
 801354a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801354e:	7af9      	ldrb	r1, [r7, #11]
 8013550:	683b      	ldr	r3, [r7, #0]
 8013552:	687a      	ldr	r2, [r7, #4]
 8013554:	f7f5 fa56 	bl	8008a04 <HAL_PCD_EP_Receive>
 8013558:	4603      	mov	r3, r0
 801355a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801355c:	7dfb      	ldrb	r3, [r7, #23]
 801355e:	4618      	mov	r0, r3
 8013560:	f000 f832 	bl	80135c8 <USBD_Get_USB_Status>
 8013564:	4603      	mov	r3, r0
 8013566:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8013568:	7dbb      	ldrb	r3, [r7, #22]
}
 801356a:	4618      	mov	r0, r3
 801356c:	3718      	adds	r7, #24
 801356e:	46bd      	mov	sp, r7
 8013570:	bd80      	pop	{r7, pc}

08013572 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013572:	b580      	push	{r7, lr}
 8013574:	b082      	sub	sp, #8
 8013576:	af00      	add	r7, sp, #0
 8013578:	6078      	str	r0, [r7, #4]
 801357a:	460b      	mov	r3, r1
 801357c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801357e:	687b      	ldr	r3, [r7, #4]
 8013580:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8013584:	78fa      	ldrb	r2, [r7, #3]
 8013586:	4611      	mov	r1, r2
 8013588:	4618      	mov	r0, r3
 801358a:	f7f5 fa76 	bl	8008a7a <HAL_PCD_EP_GetRxCount>
 801358e:	4603      	mov	r3, r0
}
 8013590:	4618      	mov	r0, r3
 8013592:	3708      	adds	r7, #8
 8013594:	46bd      	mov	sp, r7
 8013596:	bd80      	pop	{r7, pc}

08013598 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8013598:	b480      	push	{r7}
 801359a:	b083      	sub	sp, #12
 801359c:	af00      	add	r7, sp, #0
 801359e:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80135a0:	4b03      	ldr	r3, [pc, #12]	@ (80135b0 <USBD_static_malloc+0x18>)
}
 80135a2:	4618      	mov	r0, r3
 80135a4:	370c      	adds	r7, #12
 80135a6:	46bd      	mov	sp, r7
 80135a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135ac:	4770      	bx	lr
 80135ae:	bf00      	nop
 80135b0:	240068ec 	.word	0x240068ec

080135b4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80135b4:	b480      	push	{r7}
 80135b6:	b083      	sub	sp, #12
 80135b8:	af00      	add	r7, sp, #0
 80135ba:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 80135bc:	bf00      	nop
 80135be:	370c      	adds	r7, #12
 80135c0:	46bd      	mov	sp, r7
 80135c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135c6:	4770      	bx	lr

080135c8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80135c8:	b480      	push	{r7}
 80135ca:	b085      	sub	sp, #20
 80135cc:	af00      	add	r7, sp, #0
 80135ce:	4603      	mov	r3, r0
 80135d0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80135d2:	2300      	movs	r3, #0
 80135d4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80135d6:	79fb      	ldrb	r3, [r7, #7]
 80135d8:	2b03      	cmp	r3, #3
 80135da:	d817      	bhi.n	801360c <USBD_Get_USB_Status+0x44>
 80135dc:	a201      	add	r2, pc, #4	@ (adr r2, 80135e4 <USBD_Get_USB_Status+0x1c>)
 80135de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80135e2:	bf00      	nop
 80135e4:	080135f5 	.word	0x080135f5
 80135e8:	080135fb 	.word	0x080135fb
 80135ec:	08013601 	.word	0x08013601
 80135f0:	08013607 	.word	0x08013607
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80135f4:	2300      	movs	r3, #0
 80135f6:	73fb      	strb	r3, [r7, #15]
    break;
 80135f8:	e00b      	b.n	8013612 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80135fa:	2303      	movs	r3, #3
 80135fc:	73fb      	strb	r3, [r7, #15]
    break;
 80135fe:	e008      	b.n	8013612 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8013600:	2301      	movs	r3, #1
 8013602:	73fb      	strb	r3, [r7, #15]
    break;
 8013604:	e005      	b.n	8013612 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8013606:	2303      	movs	r3, #3
 8013608:	73fb      	strb	r3, [r7, #15]
    break;
 801360a:	e002      	b.n	8013612 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 801360c:	2303      	movs	r3, #3
 801360e:	73fb      	strb	r3, [r7, #15]
    break;
 8013610:	bf00      	nop
  }
  return usb_status;
 8013612:	7bfb      	ldrb	r3, [r7, #15]
}
 8013614:	4618      	mov	r0, r3
 8013616:	3714      	adds	r7, #20
 8013618:	46bd      	mov	sp, r7
 801361a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801361e:	4770      	bx	lr

08013620 <atof>:
 8013620:	2100      	movs	r1, #0
 8013622:	f000 bdb3 	b.w	801418c <strtod>

08013626 <sulp>:
 8013626:	b570      	push	{r4, r5, r6, lr}
 8013628:	4604      	mov	r4, r0
 801362a:	460d      	mov	r5, r1
 801362c:	4616      	mov	r6, r2
 801362e:	ec45 4b10 	vmov	d0, r4, r5
 8013632:	f003 f967 	bl	8016904 <__ulp>
 8013636:	b17e      	cbz	r6, 8013658 <sulp+0x32>
 8013638:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801363c:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8013640:	2b00      	cmp	r3, #0
 8013642:	dd09      	ble.n	8013658 <sulp+0x32>
 8013644:	051b      	lsls	r3, r3, #20
 8013646:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 801364a:	2000      	movs	r0, #0
 801364c:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 8013650:	ec41 0b17 	vmov	d7, r0, r1
 8013654:	ee20 0b07 	vmul.f64	d0, d0, d7
 8013658:	bd70      	pop	{r4, r5, r6, pc}
 801365a:	0000      	movs	r0, r0
 801365c:	0000      	movs	r0, r0
	...

08013660 <_strtod_l>:
 8013660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013664:	ed2d 8b0a 	vpush	{d8-d12}
 8013668:	b097      	sub	sp, #92	@ 0x5c
 801366a:	4688      	mov	r8, r1
 801366c:	920e      	str	r2, [sp, #56]	@ 0x38
 801366e:	2200      	movs	r2, #0
 8013670:	9212      	str	r2, [sp, #72]	@ 0x48
 8013672:	9005      	str	r0, [sp, #20]
 8013674:	f04f 0a00 	mov.w	sl, #0
 8013678:	f04f 0b00 	mov.w	fp, #0
 801367c:	460a      	mov	r2, r1
 801367e:	9211      	str	r2, [sp, #68]	@ 0x44
 8013680:	7811      	ldrb	r1, [r2, #0]
 8013682:	292b      	cmp	r1, #43	@ 0x2b
 8013684:	d04c      	beq.n	8013720 <_strtod_l+0xc0>
 8013686:	d839      	bhi.n	80136fc <_strtod_l+0x9c>
 8013688:	290d      	cmp	r1, #13
 801368a:	d833      	bhi.n	80136f4 <_strtod_l+0x94>
 801368c:	2908      	cmp	r1, #8
 801368e:	d833      	bhi.n	80136f8 <_strtod_l+0x98>
 8013690:	2900      	cmp	r1, #0
 8013692:	d03c      	beq.n	801370e <_strtod_l+0xae>
 8013694:	2200      	movs	r2, #0
 8013696:	9208      	str	r2, [sp, #32]
 8013698:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 801369a:	782a      	ldrb	r2, [r5, #0]
 801369c:	2a30      	cmp	r2, #48	@ 0x30
 801369e:	f040 80b5 	bne.w	801380c <_strtod_l+0x1ac>
 80136a2:	786a      	ldrb	r2, [r5, #1]
 80136a4:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80136a8:	2a58      	cmp	r2, #88	@ 0x58
 80136aa:	d170      	bne.n	801378e <_strtod_l+0x12e>
 80136ac:	9302      	str	r3, [sp, #8]
 80136ae:	9b08      	ldr	r3, [sp, #32]
 80136b0:	9301      	str	r3, [sp, #4]
 80136b2:	ab12      	add	r3, sp, #72	@ 0x48
 80136b4:	9300      	str	r3, [sp, #0]
 80136b6:	4a8b      	ldr	r2, [pc, #556]	@ (80138e4 <_strtod_l+0x284>)
 80136b8:	9805      	ldr	r0, [sp, #20]
 80136ba:	ab13      	add	r3, sp, #76	@ 0x4c
 80136bc:	a911      	add	r1, sp, #68	@ 0x44
 80136be:	f002 fa13 	bl	8015ae8 <__gethex>
 80136c2:	f010 060f 	ands.w	r6, r0, #15
 80136c6:	4604      	mov	r4, r0
 80136c8:	d005      	beq.n	80136d6 <_strtod_l+0x76>
 80136ca:	2e06      	cmp	r6, #6
 80136cc:	d12a      	bne.n	8013724 <_strtod_l+0xc4>
 80136ce:	3501      	adds	r5, #1
 80136d0:	2300      	movs	r3, #0
 80136d2:	9511      	str	r5, [sp, #68]	@ 0x44
 80136d4:	9308      	str	r3, [sp, #32]
 80136d6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80136d8:	2b00      	cmp	r3, #0
 80136da:	f040 852f 	bne.w	801413c <_strtod_l+0xadc>
 80136de:	9b08      	ldr	r3, [sp, #32]
 80136e0:	ec4b ab10 	vmov	d0, sl, fp
 80136e4:	b1cb      	cbz	r3, 801371a <_strtod_l+0xba>
 80136e6:	eeb1 0b40 	vneg.f64	d0, d0
 80136ea:	b017      	add	sp, #92	@ 0x5c
 80136ec:	ecbd 8b0a 	vpop	{d8-d12}
 80136f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80136f4:	2920      	cmp	r1, #32
 80136f6:	d1cd      	bne.n	8013694 <_strtod_l+0x34>
 80136f8:	3201      	adds	r2, #1
 80136fa:	e7c0      	b.n	801367e <_strtod_l+0x1e>
 80136fc:	292d      	cmp	r1, #45	@ 0x2d
 80136fe:	d1c9      	bne.n	8013694 <_strtod_l+0x34>
 8013700:	2101      	movs	r1, #1
 8013702:	9108      	str	r1, [sp, #32]
 8013704:	1c51      	adds	r1, r2, #1
 8013706:	9111      	str	r1, [sp, #68]	@ 0x44
 8013708:	7852      	ldrb	r2, [r2, #1]
 801370a:	2a00      	cmp	r2, #0
 801370c:	d1c4      	bne.n	8013698 <_strtod_l+0x38>
 801370e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013710:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 8013714:	2b00      	cmp	r3, #0
 8013716:	f040 850f 	bne.w	8014138 <_strtod_l+0xad8>
 801371a:	ec4b ab10 	vmov	d0, sl, fp
 801371e:	e7e4      	b.n	80136ea <_strtod_l+0x8a>
 8013720:	2100      	movs	r1, #0
 8013722:	e7ee      	b.n	8013702 <_strtod_l+0xa2>
 8013724:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8013726:	b13a      	cbz	r2, 8013738 <_strtod_l+0xd8>
 8013728:	2135      	movs	r1, #53	@ 0x35
 801372a:	a814      	add	r0, sp, #80	@ 0x50
 801372c:	f003 f9e1 	bl	8016af2 <__copybits>
 8013730:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8013732:	9805      	ldr	r0, [sp, #20]
 8013734:	f002 fdb2 	bl	801629c <_Bfree>
 8013738:	1e73      	subs	r3, r6, #1
 801373a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801373c:	2b04      	cmp	r3, #4
 801373e:	d806      	bhi.n	801374e <_strtod_l+0xee>
 8013740:	e8df f003 	tbb	[pc, r3]
 8013744:	201d0314 	.word	0x201d0314
 8013748:	14          	.byte	0x14
 8013749:	00          	.byte	0x00
 801374a:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 801374e:	05e3      	lsls	r3, r4, #23
 8013750:	bf48      	it	mi
 8013752:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8013756:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801375a:	0d1b      	lsrs	r3, r3, #20
 801375c:	051b      	lsls	r3, r3, #20
 801375e:	2b00      	cmp	r3, #0
 8013760:	d1b9      	bne.n	80136d6 <_strtod_l+0x76>
 8013762:	f001 faeb 	bl	8014d3c <__errno>
 8013766:	2322      	movs	r3, #34	@ 0x22
 8013768:	6003      	str	r3, [r0, #0]
 801376a:	e7b4      	b.n	80136d6 <_strtod_l+0x76>
 801376c:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 8013770:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8013774:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8013778:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801377c:	e7e7      	b.n	801374e <_strtod_l+0xee>
 801377e:	f8df b16c 	ldr.w	fp, [pc, #364]	@ 80138ec <_strtod_l+0x28c>
 8013782:	e7e4      	b.n	801374e <_strtod_l+0xee>
 8013784:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8013788:	f04f 3aff 	mov.w	sl, #4294967295
 801378c:	e7df      	b.n	801374e <_strtod_l+0xee>
 801378e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8013790:	1c5a      	adds	r2, r3, #1
 8013792:	9211      	str	r2, [sp, #68]	@ 0x44
 8013794:	785b      	ldrb	r3, [r3, #1]
 8013796:	2b30      	cmp	r3, #48	@ 0x30
 8013798:	d0f9      	beq.n	801378e <_strtod_l+0x12e>
 801379a:	2b00      	cmp	r3, #0
 801379c:	d09b      	beq.n	80136d6 <_strtod_l+0x76>
 801379e:	2301      	movs	r3, #1
 80137a0:	2600      	movs	r6, #0
 80137a2:	9307      	str	r3, [sp, #28]
 80137a4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80137a6:	930a      	str	r3, [sp, #40]	@ 0x28
 80137a8:	46b1      	mov	r9, r6
 80137aa:	4635      	mov	r5, r6
 80137ac:	220a      	movs	r2, #10
 80137ae:	9811      	ldr	r0, [sp, #68]	@ 0x44
 80137b0:	7804      	ldrb	r4, [r0, #0]
 80137b2:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 80137b6:	b2d9      	uxtb	r1, r3
 80137b8:	2909      	cmp	r1, #9
 80137ba:	d929      	bls.n	8013810 <_strtod_l+0x1b0>
 80137bc:	494a      	ldr	r1, [pc, #296]	@ (80138e8 <_strtod_l+0x288>)
 80137be:	2201      	movs	r2, #1
 80137c0:	f001 fa60 	bl	8014c84 <strncmp>
 80137c4:	b378      	cbz	r0, 8013826 <_strtod_l+0x1c6>
 80137c6:	2000      	movs	r0, #0
 80137c8:	4622      	mov	r2, r4
 80137ca:	462b      	mov	r3, r5
 80137cc:	4607      	mov	r7, r0
 80137ce:	9006      	str	r0, [sp, #24]
 80137d0:	2a65      	cmp	r2, #101	@ 0x65
 80137d2:	d001      	beq.n	80137d8 <_strtod_l+0x178>
 80137d4:	2a45      	cmp	r2, #69	@ 0x45
 80137d6:	d117      	bne.n	8013808 <_strtod_l+0x1a8>
 80137d8:	b91b      	cbnz	r3, 80137e2 <_strtod_l+0x182>
 80137da:	9b07      	ldr	r3, [sp, #28]
 80137dc:	4303      	orrs	r3, r0
 80137de:	d096      	beq.n	801370e <_strtod_l+0xae>
 80137e0:	2300      	movs	r3, #0
 80137e2:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 80137e6:	f108 0201 	add.w	r2, r8, #1
 80137ea:	9211      	str	r2, [sp, #68]	@ 0x44
 80137ec:	f898 2001 	ldrb.w	r2, [r8, #1]
 80137f0:	2a2b      	cmp	r2, #43	@ 0x2b
 80137f2:	d06b      	beq.n	80138cc <_strtod_l+0x26c>
 80137f4:	2a2d      	cmp	r2, #45	@ 0x2d
 80137f6:	d071      	beq.n	80138dc <_strtod_l+0x27c>
 80137f8:	f04f 0e00 	mov.w	lr, #0
 80137fc:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 8013800:	2c09      	cmp	r4, #9
 8013802:	d979      	bls.n	80138f8 <_strtod_l+0x298>
 8013804:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 8013808:	2400      	movs	r4, #0
 801380a:	e094      	b.n	8013936 <_strtod_l+0x2d6>
 801380c:	2300      	movs	r3, #0
 801380e:	e7c7      	b.n	80137a0 <_strtod_l+0x140>
 8013810:	2d08      	cmp	r5, #8
 8013812:	f100 0001 	add.w	r0, r0, #1
 8013816:	bfd4      	ite	le
 8013818:	fb02 3909 	mlale	r9, r2, r9, r3
 801381c:	fb02 3606 	mlagt	r6, r2, r6, r3
 8013820:	3501      	adds	r5, #1
 8013822:	9011      	str	r0, [sp, #68]	@ 0x44
 8013824:	e7c3      	b.n	80137ae <_strtod_l+0x14e>
 8013826:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8013828:	1c5a      	adds	r2, r3, #1
 801382a:	9211      	str	r2, [sp, #68]	@ 0x44
 801382c:	785a      	ldrb	r2, [r3, #1]
 801382e:	b375      	cbz	r5, 801388e <_strtod_l+0x22e>
 8013830:	4607      	mov	r7, r0
 8013832:	462b      	mov	r3, r5
 8013834:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8013838:	2909      	cmp	r1, #9
 801383a:	d913      	bls.n	8013864 <_strtod_l+0x204>
 801383c:	2101      	movs	r1, #1
 801383e:	9106      	str	r1, [sp, #24]
 8013840:	e7c6      	b.n	80137d0 <_strtod_l+0x170>
 8013842:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8013844:	1c5a      	adds	r2, r3, #1
 8013846:	9211      	str	r2, [sp, #68]	@ 0x44
 8013848:	785a      	ldrb	r2, [r3, #1]
 801384a:	3001      	adds	r0, #1
 801384c:	2a30      	cmp	r2, #48	@ 0x30
 801384e:	d0f8      	beq.n	8013842 <_strtod_l+0x1e2>
 8013850:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8013854:	2b08      	cmp	r3, #8
 8013856:	f200 8476 	bhi.w	8014146 <_strtod_l+0xae6>
 801385a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801385c:	930a      	str	r3, [sp, #40]	@ 0x28
 801385e:	4607      	mov	r7, r0
 8013860:	2000      	movs	r0, #0
 8013862:	4603      	mov	r3, r0
 8013864:	3a30      	subs	r2, #48	@ 0x30
 8013866:	f100 0101 	add.w	r1, r0, #1
 801386a:	d023      	beq.n	80138b4 <_strtod_l+0x254>
 801386c:	440f      	add	r7, r1
 801386e:	eb00 0c03 	add.w	ip, r0, r3
 8013872:	4619      	mov	r1, r3
 8013874:	240a      	movs	r4, #10
 8013876:	4561      	cmp	r1, ip
 8013878:	d10b      	bne.n	8013892 <_strtod_l+0x232>
 801387a:	1c5c      	adds	r4, r3, #1
 801387c:	4403      	add	r3, r0
 801387e:	2b08      	cmp	r3, #8
 8013880:	4404      	add	r4, r0
 8013882:	dc11      	bgt.n	80138a8 <_strtod_l+0x248>
 8013884:	230a      	movs	r3, #10
 8013886:	fb03 2909 	mla	r9, r3, r9, r2
 801388a:	2100      	movs	r1, #0
 801388c:	e013      	b.n	80138b6 <_strtod_l+0x256>
 801388e:	4628      	mov	r0, r5
 8013890:	e7dc      	b.n	801384c <_strtod_l+0x1ec>
 8013892:	2908      	cmp	r1, #8
 8013894:	f101 0101 	add.w	r1, r1, #1
 8013898:	dc02      	bgt.n	80138a0 <_strtod_l+0x240>
 801389a:	fb04 f909 	mul.w	r9, r4, r9
 801389e:	e7ea      	b.n	8013876 <_strtod_l+0x216>
 80138a0:	2910      	cmp	r1, #16
 80138a2:	bfd8      	it	le
 80138a4:	4366      	mulle	r6, r4
 80138a6:	e7e6      	b.n	8013876 <_strtod_l+0x216>
 80138a8:	2b0f      	cmp	r3, #15
 80138aa:	dcee      	bgt.n	801388a <_strtod_l+0x22a>
 80138ac:	230a      	movs	r3, #10
 80138ae:	fb03 2606 	mla	r6, r3, r6, r2
 80138b2:	e7ea      	b.n	801388a <_strtod_l+0x22a>
 80138b4:	461c      	mov	r4, r3
 80138b6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80138b8:	1c5a      	adds	r2, r3, #1
 80138ba:	9211      	str	r2, [sp, #68]	@ 0x44
 80138bc:	785a      	ldrb	r2, [r3, #1]
 80138be:	4608      	mov	r0, r1
 80138c0:	4623      	mov	r3, r4
 80138c2:	e7b7      	b.n	8013834 <_strtod_l+0x1d4>
 80138c4:	2301      	movs	r3, #1
 80138c6:	2700      	movs	r7, #0
 80138c8:	9306      	str	r3, [sp, #24]
 80138ca:	e786      	b.n	80137da <_strtod_l+0x17a>
 80138cc:	f04f 0e00 	mov.w	lr, #0
 80138d0:	f108 0202 	add.w	r2, r8, #2
 80138d4:	9211      	str	r2, [sp, #68]	@ 0x44
 80138d6:	f898 2002 	ldrb.w	r2, [r8, #2]
 80138da:	e78f      	b.n	80137fc <_strtod_l+0x19c>
 80138dc:	f04f 0e01 	mov.w	lr, #1
 80138e0:	e7f6      	b.n	80138d0 <_strtod_l+0x270>
 80138e2:	bf00      	nop
 80138e4:	080184d8 	.word	0x080184d8
 80138e8:	080184c0 	.word	0x080184c0
 80138ec:	7ff00000 	.word	0x7ff00000
 80138f0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80138f2:	1c54      	adds	r4, r2, #1
 80138f4:	9411      	str	r4, [sp, #68]	@ 0x44
 80138f6:	7852      	ldrb	r2, [r2, #1]
 80138f8:	2a30      	cmp	r2, #48	@ 0x30
 80138fa:	d0f9      	beq.n	80138f0 <_strtod_l+0x290>
 80138fc:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 8013900:	2c08      	cmp	r4, #8
 8013902:	d881      	bhi.n	8013808 <_strtod_l+0x1a8>
 8013904:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 8013908:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801390a:	9209      	str	r2, [sp, #36]	@ 0x24
 801390c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801390e:	1c51      	adds	r1, r2, #1
 8013910:	9111      	str	r1, [sp, #68]	@ 0x44
 8013912:	7852      	ldrb	r2, [r2, #1]
 8013914:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 8013918:	2c09      	cmp	r4, #9
 801391a:	d938      	bls.n	801398e <_strtod_l+0x32e>
 801391c:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801391e:	1b0c      	subs	r4, r1, r4
 8013920:	2c08      	cmp	r4, #8
 8013922:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 8013926:	dc02      	bgt.n	801392e <_strtod_l+0x2ce>
 8013928:	4564      	cmp	r4, ip
 801392a:	bfa8      	it	ge
 801392c:	4664      	movge	r4, ip
 801392e:	f1be 0f00 	cmp.w	lr, #0
 8013932:	d000      	beq.n	8013936 <_strtod_l+0x2d6>
 8013934:	4264      	negs	r4, r4
 8013936:	2b00      	cmp	r3, #0
 8013938:	d14e      	bne.n	80139d8 <_strtod_l+0x378>
 801393a:	9b07      	ldr	r3, [sp, #28]
 801393c:	4318      	orrs	r0, r3
 801393e:	f47f aeca 	bne.w	80136d6 <_strtod_l+0x76>
 8013942:	9b06      	ldr	r3, [sp, #24]
 8013944:	2b00      	cmp	r3, #0
 8013946:	f47f aee2 	bne.w	801370e <_strtod_l+0xae>
 801394a:	2a69      	cmp	r2, #105	@ 0x69
 801394c:	d027      	beq.n	801399e <_strtod_l+0x33e>
 801394e:	dc24      	bgt.n	801399a <_strtod_l+0x33a>
 8013950:	2a49      	cmp	r2, #73	@ 0x49
 8013952:	d024      	beq.n	801399e <_strtod_l+0x33e>
 8013954:	2a4e      	cmp	r2, #78	@ 0x4e
 8013956:	f47f aeda 	bne.w	801370e <_strtod_l+0xae>
 801395a:	4997      	ldr	r1, [pc, #604]	@ (8013bb8 <_strtod_l+0x558>)
 801395c:	a811      	add	r0, sp, #68	@ 0x44
 801395e:	f002 fae5 	bl	8015f2c <__match>
 8013962:	2800      	cmp	r0, #0
 8013964:	f43f aed3 	beq.w	801370e <_strtod_l+0xae>
 8013968:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801396a:	781b      	ldrb	r3, [r3, #0]
 801396c:	2b28      	cmp	r3, #40	@ 0x28
 801396e:	d12d      	bne.n	80139cc <_strtod_l+0x36c>
 8013970:	4992      	ldr	r1, [pc, #584]	@ (8013bbc <_strtod_l+0x55c>)
 8013972:	aa14      	add	r2, sp, #80	@ 0x50
 8013974:	a811      	add	r0, sp, #68	@ 0x44
 8013976:	f002 faed 	bl	8015f54 <__hexnan>
 801397a:	2805      	cmp	r0, #5
 801397c:	d126      	bne.n	80139cc <_strtod_l+0x36c>
 801397e:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8013980:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 8013984:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8013988:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 801398c:	e6a3      	b.n	80136d6 <_strtod_l+0x76>
 801398e:	240a      	movs	r4, #10
 8013990:	fb04 2c0c 	mla	ip, r4, ip, r2
 8013994:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 8013998:	e7b8      	b.n	801390c <_strtod_l+0x2ac>
 801399a:	2a6e      	cmp	r2, #110	@ 0x6e
 801399c:	e7db      	b.n	8013956 <_strtod_l+0x2f6>
 801399e:	4988      	ldr	r1, [pc, #544]	@ (8013bc0 <_strtod_l+0x560>)
 80139a0:	a811      	add	r0, sp, #68	@ 0x44
 80139a2:	f002 fac3 	bl	8015f2c <__match>
 80139a6:	2800      	cmp	r0, #0
 80139a8:	f43f aeb1 	beq.w	801370e <_strtod_l+0xae>
 80139ac:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80139ae:	4985      	ldr	r1, [pc, #532]	@ (8013bc4 <_strtod_l+0x564>)
 80139b0:	3b01      	subs	r3, #1
 80139b2:	a811      	add	r0, sp, #68	@ 0x44
 80139b4:	9311      	str	r3, [sp, #68]	@ 0x44
 80139b6:	f002 fab9 	bl	8015f2c <__match>
 80139ba:	b910      	cbnz	r0, 80139c2 <_strtod_l+0x362>
 80139bc:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80139be:	3301      	adds	r3, #1
 80139c0:	9311      	str	r3, [sp, #68]	@ 0x44
 80139c2:	f8df b214 	ldr.w	fp, [pc, #532]	@ 8013bd8 <_strtod_l+0x578>
 80139c6:	f04f 0a00 	mov.w	sl, #0
 80139ca:	e684      	b.n	80136d6 <_strtod_l+0x76>
 80139cc:	487e      	ldr	r0, [pc, #504]	@ (8013bc8 <_strtod_l+0x568>)
 80139ce:	f001 f9f3 	bl	8014db8 <nan>
 80139d2:	ec5b ab10 	vmov	sl, fp, d0
 80139d6:	e67e      	b.n	80136d6 <_strtod_l+0x76>
 80139d8:	ee07 9a90 	vmov	s15, r9
 80139dc:	1be2      	subs	r2, r4, r7
 80139de:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80139e2:	2d00      	cmp	r5, #0
 80139e4:	bf08      	it	eq
 80139e6:	461d      	moveq	r5, r3
 80139e8:	2b10      	cmp	r3, #16
 80139ea:	9209      	str	r2, [sp, #36]	@ 0x24
 80139ec:	461a      	mov	r2, r3
 80139ee:	bfa8      	it	ge
 80139f0:	2210      	movge	r2, #16
 80139f2:	2b09      	cmp	r3, #9
 80139f4:	ec5b ab17 	vmov	sl, fp, d7
 80139f8:	dc15      	bgt.n	8013a26 <_strtod_l+0x3c6>
 80139fa:	1be1      	subs	r1, r4, r7
 80139fc:	2900      	cmp	r1, #0
 80139fe:	f43f ae6a 	beq.w	80136d6 <_strtod_l+0x76>
 8013a02:	eba4 0107 	sub.w	r1, r4, r7
 8013a06:	dd72      	ble.n	8013aee <_strtod_l+0x48e>
 8013a08:	2916      	cmp	r1, #22
 8013a0a:	dc59      	bgt.n	8013ac0 <_strtod_l+0x460>
 8013a0c:	4b6f      	ldr	r3, [pc, #444]	@ (8013bcc <_strtod_l+0x56c>)
 8013a0e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013a10:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013a14:	ed93 7b00 	vldr	d7, [r3]
 8013a18:	ec4b ab16 	vmov	d6, sl, fp
 8013a1c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8013a20:	ec5b ab17 	vmov	sl, fp, d7
 8013a24:	e657      	b.n	80136d6 <_strtod_l+0x76>
 8013a26:	4969      	ldr	r1, [pc, #420]	@ (8013bcc <_strtod_l+0x56c>)
 8013a28:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8013a2c:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 8013a30:	ee06 6a90 	vmov	s13, r6
 8013a34:	2b0f      	cmp	r3, #15
 8013a36:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 8013a3a:	eea7 6b05 	vfma.f64	d6, d7, d5
 8013a3e:	ec5b ab16 	vmov	sl, fp, d6
 8013a42:	ddda      	ble.n	80139fa <_strtod_l+0x39a>
 8013a44:	1a9a      	subs	r2, r3, r2
 8013a46:	1be1      	subs	r1, r4, r7
 8013a48:	440a      	add	r2, r1
 8013a4a:	2a00      	cmp	r2, #0
 8013a4c:	f340 8094 	ble.w	8013b78 <_strtod_l+0x518>
 8013a50:	f012 000f 	ands.w	r0, r2, #15
 8013a54:	d00a      	beq.n	8013a6c <_strtod_l+0x40c>
 8013a56:	495d      	ldr	r1, [pc, #372]	@ (8013bcc <_strtod_l+0x56c>)
 8013a58:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8013a5c:	ed91 7b00 	vldr	d7, [r1]
 8013a60:	ec4b ab16 	vmov	d6, sl, fp
 8013a64:	ee27 7b06 	vmul.f64	d7, d7, d6
 8013a68:	ec5b ab17 	vmov	sl, fp, d7
 8013a6c:	f032 020f 	bics.w	r2, r2, #15
 8013a70:	d073      	beq.n	8013b5a <_strtod_l+0x4fa>
 8013a72:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 8013a76:	dd47      	ble.n	8013b08 <_strtod_l+0x4a8>
 8013a78:	2400      	movs	r4, #0
 8013a7a:	4625      	mov	r5, r4
 8013a7c:	9407      	str	r4, [sp, #28]
 8013a7e:	4626      	mov	r6, r4
 8013a80:	9a05      	ldr	r2, [sp, #20]
 8013a82:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8013bd8 <_strtod_l+0x578>
 8013a86:	2322      	movs	r3, #34	@ 0x22
 8013a88:	6013      	str	r3, [r2, #0]
 8013a8a:	f04f 0a00 	mov.w	sl, #0
 8013a8e:	9b07      	ldr	r3, [sp, #28]
 8013a90:	2b00      	cmp	r3, #0
 8013a92:	f43f ae20 	beq.w	80136d6 <_strtod_l+0x76>
 8013a96:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8013a98:	9805      	ldr	r0, [sp, #20]
 8013a9a:	f002 fbff 	bl	801629c <_Bfree>
 8013a9e:	9805      	ldr	r0, [sp, #20]
 8013aa0:	4631      	mov	r1, r6
 8013aa2:	f002 fbfb 	bl	801629c <_Bfree>
 8013aa6:	9805      	ldr	r0, [sp, #20]
 8013aa8:	4629      	mov	r1, r5
 8013aaa:	f002 fbf7 	bl	801629c <_Bfree>
 8013aae:	9907      	ldr	r1, [sp, #28]
 8013ab0:	9805      	ldr	r0, [sp, #20]
 8013ab2:	f002 fbf3 	bl	801629c <_Bfree>
 8013ab6:	9805      	ldr	r0, [sp, #20]
 8013ab8:	4621      	mov	r1, r4
 8013aba:	f002 fbef 	bl	801629c <_Bfree>
 8013abe:	e60a      	b.n	80136d6 <_strtod_l+0x76>
 8013ac0:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 8013ac4:	1be0      	subs	r0, r4, r7
 8013ac6:	4281      	cmp	r1, r0
 8013ac8:	dbbc      	blt.n	8013a44 <_strtod_l+0x3e4>
 8013aca:	4a40      	ldr	r2, [pc, #256]	@ (8013bcc <_strtod_l+0x56c>)
 8013acc:	f1c3 030f 	rsb	r3, r3, #15
 8013ad0:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8013ad4:	ed91 7b00 	vldr	d7, [r1]
 8013ad8:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8013ada:	ec4b ab16 	vmov	d6, sl, fp
 8013ade:	1acb      	subs	r3, r1, r3
 8013ae0:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8013ae4:	ee27 7b06 	vmul.f64	d7, d7, d6
 8013ae8:	ed92 6b00 	vldr	d6, [r2]
 8013aec:	e796      	b.n	8013a1c <_strtod_l+0x3bc>
 8013aee:	3116      	adds	r1, #22
 8013af0:	dba8      	blt.n	8013a44 <_strtod_l+0x3e4>
 8013af2:	4b36      	ldr	r3, [pc, #216]	@ (8013bcc <_strtod_l+0x56c>)
 8013af4:	1b3c      	subs	r4, r7, r4
 8013af6:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8013afa:	ed94 7b00 	vldr	d7, [r4]
 8013afe:	ec4b ab16 	vmov	d6, sl, fp
 8013b02:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8013b06:	e78b      	b.n	8013a20 <_strtod_l+0x3c0>
 8013b08:	2000      	movs	r0, #0
 8013b0a:	ec4b ab17 	vmov	d7, sl, fp
 8013b0e:	4e30      	ldr	r6, [pc, #192]	@ (8013bd0 <_strtod_l+0x570>)
 8013b10:	1112      	asrs	r2, r2, #4
 8013b12:	4601      	mov	r1, r0
 8013b14:	2a01      	cmp	r2, #1
 8013b16:	dc23      	bgt.n	8013b60 <_strtod_l+0x500>
 8013b18:	b108      	cbz	r0, 8013b1e <_strtod_l+0x4be>
 8013b1a:	ec5b ab17 	vmov	sl, fp, d7
 8013b1e:	4a2c      	ldr	r2, [pc, #176]	@ (8013bd0 <_strtod_l+0x570>)
 8013b20:	482c      	ldr	r0, [pc, #176]	@ (8013bd4 <_strtod_l+0x574>)
 8013b22:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8013b26:	ed92 7b00 	vldr	d7, [r2]
 8013b2a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8013b2e:	ec4b ab16 	vmov	d6, sl, fp
 8013b32:	4a29      	ldr	r2, [pc, #164]	@ (8013bd8 <_strtod_l+0x578>)
 8013b34:	ee27 7b06 	vmul.f64	d7, d7, d6
 8013b38:	ee17 1a90 	vmov	r1, s15
 8013b3c:	400a      	ands	r2, r1
 8013b3e:	4282      	cmp	r2, r0
 8013b40:	ec5b ab17 	vmov	sl, fp, d7
 8013b44:	d898      	bhi.n	8013a78 <_strtod_l+0x418>
 8013b46:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 8013b4a:	4282      	cmp	r2, r0
 8013b4c:	bf86      	itte	hi
 8013b4e:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 8013bdc <_strtod_l+0x57c>
 8013b52:	f04f 3aff 	movhi.w	sl, #4294967295
 8013b56:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 8013b5a:	2200      	movs	r2, #0
 8013b5c:	9206      	str	r2, [sp, #24]
 8013b5e:	e076      	b.n	8013c4e <_strtod_l+0x5ee>
 8013b60:	f012 0f01 	tst.w	r2, #1
 8013b64:	d004      	beq.n	8013b70 <_strtod_l+0x510>
 8013b66:	ed96 6b00 	vldr	d6, [r6]
 8013b6a:	2001      	movs	r0, #1
 8013b6c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8013b70:	3101      	adds	r1, #1
 8013b72:	1052      	asrs	r2, r2, #1
 8013b74:	3608      	adds	r6, #8
 8013b76:	e7cd      	b.n	8013b14 <_strtod_l+0x4b4>
 8013b78:	d0ef      	beq.n	8013b5a <_strtod_l+0x4fa>
 8013b7a:	4252      	negs	r2, r2
 8013b7c:	f012 000f 	ands.w	r0, r2, #15
 8013b80:	d00a      	beq.n	8013b98 <_strtod_l+0x538>
 8013b82:	4912      	ldr	r1, [pc, #72]	@ (8013bcc <_strtod_l+0x56c>)
 8013b84:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8013b88:	ed91 7b00 	vldr	d7, [r1]
 8013b8c:	ec4b ab16 	vmov	d6, sl, fp
 8013b90:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8013b94:	ec5b ab17 	vmov	sl, fp, d7
 8013b98:	1112      	asrs	r2, r2, #4
 8013b9a:	d0de      	beq.n	8013b5a <_strtod_l+0x4fa>
 8013b9c:	2a1f      	cmp	r2, #31
 8013b9e:	dd1f      	ble.n	8013be0 <_strtod_l+0x580>
 8013ba0:	2400      	movs	r4, #0
 8013ba2:	4625      	mov	r5, r4
 8013ba4:	9407      	str	r4, [sp, #28]
 8013ba6:	4626      	mov	r6, r4
 8013ba8:	9a05      	ldr	r2, [sp, #20]
 8013baa:	2322      	movs	r3, #34	@ 0x22
 8013bac:	f04f 0a00 	mov.w	sl, #0
 8013bb0:	f04f 0b00 	mov.w	fp, #0
 8013bb4:	6013      	str	r3, [r2, #0]
 8013bb6:	e76a      	b.n	8013a8e <_strtod_l+0x42e>
 8013bb8:	08018626 	.word	0x08018626
 8013bbc:	080184c4 	.word	0x080184c4
 8013bc0:	0801861e 	.word	0x0801861e
 8013bc4:	08018658 	.word	0x08018658
 8013bc8:	080188e4 	.word	0x080188e4
 8013bcc:	080187d0 	.word	0x080187d0
 8013bd0:	080187a8 	.word	0x080187a8
 8013bd4:	7ca00000 	.word	0x7ca00000
 8013bd8:	7ff00000 	.word	0x7ff00000
 8013bdc:	7fefffff 	.word	0x7fefffff
 8013be0:	f012 0110 	ands.w	r1, r2, #16
 8013be4:	bf18      	it	ne
 8013be6:	216a      	movne	r1, #106	@ 0x6a
 8013be8:	9106      	str	r1, [sp, #24]
 8013bea:	ec4b ab17 	vmov	d7, sl, fp
 8013bee:	49b0      	ldr	r1, [pc, #704]	@ (8013eb0 <_strtod_l+0x850>)
 8013bf0:	2000      	movs	r0, #0
 8013bf2:	07d6      	lsls	r6, r2, #31
 8013bf4:	d504      	bpl.n	8013c00 <_strtod_l+0x5a0>
 8013bf6:	ed91 6b00 	vldr	d6, [r1]
 8013bfa:	2001      	movs	r0, #1
 8013bfc:	ee27 7b06 	vmul.f64	d7, d7, d6
 8013c00:	1052      	asrs	r2, r2, #1
 8013c02:	f101 0108 	add.w	r1, r1, #8
 8013c06:	d1f4      	bne.n	8013bf2 <_strtod_l+0x592>
 8013c08:	b108      	cbz	r0, 8013c0e <_strtod_l+0x5ae>
 8013c0a:	ec5b ab17 	vmov	sl, fp, d7
 8013c0e:	9a06      	ldr	r2, [sp, #24]
 8013c10:	b1b2      	cbz	r2, 8013c40 <_strtod_l+0x5e0>
 8013c12:	f3cb 510a 	ubfx	r1, fp, #20, #11
 8013c16:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 8013c1a:	2a00      	cmp	r2, #0
 8013c1c:	4658      	mov	r0, fp
 8013c1e:	dd0f      	ble.n	8013c40 <_strtod_l+0x5e0>
 8013c20:	2a1f      	cmp	r2, #31
 8013c22:	dd55      	ble.n	8013cd0 <_strtod_l+0x670>
 8013c24:	2a34      	cmp	r2, #52	@ 0x34
 8013c26:	bfde      	ittt	le
 8013c28:	f04f 32ff 	movle.w	r2, #4294967295
 8013c2c:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 8013c30:	408a      	lslle	r2, r1
 8013c32:	f04f 0a00 	mov.w	sl, #0
 8013c36:	bfcc      	ite	gt
 8013c38:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8013c3c:	ea02 0b00 	andle.w	fp, r2, r0
 8013c40:	ec4b ab17 	vmov	d7, sl, fp
 8013c44:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8013c48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013c4c:	d0a8      	beq.n	8013ba0 <_strtod_l+0x540>
 8013c4e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8013c50:	9805      	ldr	r0, [sp, #20]
 8013c52:	f8cd 9000 	str.w	r9, [sp]
 8013c56:	462a      	mov	r2, r5
 8013c58:	f002 fb88 	bl	801636c <__s2b>
 8013c5c:	9007      	str	r0, [sp, #28]
 8013c5e:	2800      	cmp	r0, #0
 8013c60:	f43f af0a 	beq.w	8013a78 <_strtod_l+0x418>
 8013c64:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013c66:	1b3f      	subs	r7, r7, r4
 8013c68:	2b00      	cmp	r3, #0
 8013c6a:	bfb4      	ite	lt
 8013c6c:	463b      	movlt	r3, r7
 8013c6e:	2300      	movge	r3, #0
 8013c70:	930a      	str	r3, [sp, #40]	@ 0x28
 8013c72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013c74:	ed9f bb8a 	vldr	d11, [pc, #552]	@ 8013ea0 <_strtod_l+0x840>
 8013c78:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8013c7c:	2400      	movs	r4, #0
 8013c7e:	930d      	str	r3, [sp, #52]	@ 0x34
 8013c80:	4625      	mov	r5, r4
 8013c82:	9b07      	ldr	r3, [sp, #28]
 8013c84:	9805      	ldr	r0, [sp, #20]
 8013c86:	6859      	ldr	r1, [r3, #4]
 8013c88:	f002 fac8 	bl	801621c <_Balloc>
 8013c8c:	4606      	mov	r6, r0
 8013c8e:	2800      	cmp	r0, #0
 8013c90:	f43f aef6 	beq.w	8013a80 <_strtod_l+0x420>
 8013c94:	9b07      	ldr	r3, [sp, #28]
 8013c96:	691a      	ldr	r2, [r3, #16]
 8013c98:	ec4b ab19 	vmov	d9, sl, fp
 8013c9c:	3202      	adds	r2, #2
 8013c9e:	f103 010c 	add.w	r1, r3, #12
 8013ca2:	0092      	lsls	r2, r2, #2
 8013ca4:	300c      	adds	r0, #12
 8013ca6:	f001 f876 	bl	8014d96 <memcpy>
 8013caa:	eeb0 0b49 	vmov.f64	d0, d9
 8013cae:	9805      	ldr	r0, [sp, #20]
 8013cb0:	aa14      	add	r2, sp, #80	@ 0x50
 8013cb2:	a913      	add	r1, sp, #76	@ 0x4c
 8013cb4:	f002 fe96 	bl	80169e4 <__d2b>
 8013cb8:	9012      	str	r0, [sp, #72]	@ 0x48
 8013cba:	2800      	cmp	r0, #0
 8013cbc:	f43f aee0 	beq.w	8013a80 <_strtod_l+0x420>
 8013cc0:	9805      	ldr	r0, [sp, #20]
 8013cc2:	2101      	movs	r1, #1
 8013cc4:	f002 fbe8 	bl	8016498 <__i2b>
 8013cc8:	4605      	mov	r5, r0
 8013cca:	b940      	cbnz	r0, 8013cde <_strtod_l+0x67e>
 8013ccc:	2500      	movs	r5, #0
 8013cce:	e6d7      	b.n	8013a80 <_strtod_l+0x420>
 8013cd0:	f04f 31ff 	mov.w	r1, #4294967295
 8013cd4:	fa01 f202 	lsl.w	r2, r1, r2
 8013cd8:	ea02 0a0a 	and.w	sl, r2, sl
 8013cdc:	e7b0      	b.n	8013c40 <_strtod_l+0x5e0>
 8013cde:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 8013ce0:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8013ce2:	2f00      	cmp	r7, #0
 8013ce4:	bfab      	itete	ge
 8013ce6:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 8013ce8:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 8013cea:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 8013cee:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 8013cf2:	bfac      	ite	ge
 8013cf4:	eb07 0903 	addge.w	r9, r7, r3
 8013cf8:	eba3 0807 	sublt.w	r8, r3, r7
 8013cfc:	9b06      	ldr	r3, [sp, #24]
 8013cfe:	1aff      	subs	r7, r7, r3
 8013d00:	4417      	add	r7, r2
 8013d02:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 8013d06:	4a6b      	ldr	r2, [pc, #428]	@ (8013eb4 <_strtod_l+0x854>)
 8013d08:	3f01      	subs	r7, #1
 8013d0a:	4297      	cmp	r7, r2
 8013d0c:	da51      	bge.n	8013db2 <_strtod_l+0x752>
 8013d0e:	1bd1      	subs	r1, r2, r7
 8013d10:	291f      	cmp	r1, #31
 8013d12:	eba3 0301 	sub.w	r3, r3, r1
 8013d16:	f04f 0201 	mov.w	r2, #1
 8013d1a:	dc3e      	bgt.n	8013d9a <_strtod_l+0x73a>
 8013d1c:	408a      	lsls	r2, r1
 8013d1e:	920c      	str	r2, [sp, #48]	@ 0x30
 8013d20:	2200      	movs	r2, #0
 8013d22:	920b      	str	r2, [sp, #44]	@ 0x2c
 8013d24:	eb09 0703 	add.w	r7, r9, r3
 8013d28:	4498      	add	r8, r3
 8013d2a:	9b06      	ldr	r3, [sp, #24]
 8013d2c:	45b9      	cmp	r9, r7
 8013d2e:	4498      	add	r8, r3
 8013d30:	464b      	mov	r3, r9
 8013d32:	bfa8      	it	ge
 8013d34:	463b      	movge	r3, r7
 8013d36:	4543      	cmp	r3, r8
 8013d38:	bfa8      	it	ge
 8013d3a:	4643      	movge	r3, r8
 8013d3c:	2b00      	cmp	r3, #0
 8013d3e:	bfc2      	ittt	gt
 8013d40:	1aff      	subgt	r7, r7, r3
 8013d42:	eba8 0803 	subgt.w	r8, r8, r3
 8013d46:	eba9 0903 	subgt.w	r9, r9, r3
 8013d4a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013d4c:	2b00      	cmp	r3, #0
 8013d4e:	dd16      	ble.n	8013d7e <_strtod_l+0x71e>
 8013d50:	4629      	mov	r1, r5
 8013d52:	9805      	ldr	r0, [sp, #20]
 8013d54:	461a      	mov	r2, r3
 8013d56:	f002 fc5f 	bl	8016618 <__pow5mult>
 8013d5a:	4605      	mov	r5, r0
 8013d5c:	2800      	cmp	r0, #0
 8013d5e:	d0b5      	beq.n	8013ccc <_strtod_l+0x66c>
 8013d60:	4601      	mov	r1, r0
 8013d62:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8013d64:	9805      	ldr	r0, [sp, #20]
 8013d66:	f002 fbad 	bl	80164c4 <__multiply>
 8013d6a:	900f      	str	r0, [sp, #60]	@ 0x3c
 8013d6c:	2800      	cmp	r0, #0
 8013d6e:	f43f ae87 	beq.w	8013a80 <_strtod_l+0x420>
 8013d72:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8013d74:	9805      	ldr	r0, [sp, #20]
 8013d76:	f002 fa91 	bl	801629c <_Bfree>
 8013d7a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013d7c:	9312      	str	r3, [sp, #72]	@ 0x48
 8013d7e:	2f00      	cmp	r7, #0
 8013d80:	dc1b      	bgt.n	8013dba <_strtod_l+0x75a>
 8013d82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013d84:	2b00      	cmp	r3, #0
 8013d86:	dd21      	ble.n	8013dcc <_strtod_l+0x76c>
 8013d88:	4631      	mov	r1, r6
 8013d8a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8013d8c:	9805      	ldr	r0, [sp, #20]
 8013d8e:	f002 fc43 	bl	8016618 <__pow5mult>
 8013d92:	4606      	mov	r6, r0
 8013d94:	b9d0      	cbnz	r0, 8013dcc <_strtod_l+0x76c>
 8013d96:	2600      	movs	r6, #0
 8013d98:	e672      	b.n	8013a80 <_strtod_l+0x420>
 8013d9a:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 8013d9e:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 8013da2:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 8013da6:	37e2      	adds	r7, #226	@ 0xe2
 8013da8:	fa02 f107 	lsl.w	r1, r2, r7
 8013dac:	910b      	str	r1, [sp, #44]	@ 0x2c
 8013dae:	920c      	str	r2, [sp, #48]	@ 0x30
 8013db0:	e7b8      	b.n	8013d24 <_strtod_l+0x6c4>
 8013db2:	2200      	movs	r2, #0
 8013db4:	920b      	str	r2, [sp, #44]	@ 0x2c
 8013db6:	2201      	movs	r2, #1
 8013db8:	e7f9      	b.n	8013dae <_strtod_l+0x74e>
 8013dba:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8013dbc:	9805      	ldr	r0, [sp, #20]
 8013dbe:	463a      	mov	r2, r7
 8013dc0:	f002 fc84 	bl	80166cc <__lshift>
 8013dc4:	9012      	str	r0, [sp, #72]	@ 0x48
 8013dc6:	2800      	cmp	r0, #0
 8013dc8:	d1db      	bne.n	8013d82 <_strtod_l+0x722>
 8013dca:	e659      	b.n	8013a80 <_strtod_l+0x420>
 8013dcc:	f1b8 0f00 	cmp.w	r8, #0
 8013dd0:	dd07      	ble.n	8013de2 <_strtod_l+0x782>
 8013dd2:	4631      	mov	r1, r6
 8013dd4:	9805      	ldr	r0, [sp, #20]
 8013dd6:	4642      	mov	r2, r8
 8013dd8:	f002 fc78 	bl	80166cc <__lshift>
 8013ddc:	4606      	mov	r6, r0
 8013dde:	2800      	cmp	r0, #0
 8013de0:	d0d9      	beq.n	8013d96 <_strtod_l+0x736>
 8013de2:	f1b9 0f00 	cmp.w	r9, #0
 8013de6:	dd08      	ble.n	8013dfa <_strtod_l+0x79a>
 8013de8:	4629      	mov	r1, r5
 8013dea:	9805      	ldr	r0, [sp, #20]
 8013dec:	464a      	mov	r2, r9
 8013dee:	f002 fc6d 	bl	80166cc <__lshift>
 8013df2:	4605      	mov	r5, r0
 8013df4:	2800      	cmp	r0, #0
 8013df6:	f43f ae43 	beq.w	8013a80 <_strtod_l+0x420>
 8013dfa:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8013dfc:	9805      	ldr	r0, [sp, #20]
 8013dfe:	4632      	mov	r2, r6
 8013e00:	f002 fcec 	bl	80167dc <__mdiff>
 8013e04:	4604      	mov	r4, r0
 8013e06:	2800      	cmp	r0, #0
 8013e08:	f43f ae3a 	beq.w	8013a80 <_strtod_l+0x420>
 8013e0c:	2300      	movs	r3, #0
 8013e0e:	f8d0 800c 	ldr.w	r8, [r0, #12]
 8013e12:	60c3      	str	r3, [r0, #12]
 8013e14:	4629      	mov	r1, r5
 8013e16:	f002 fcc5 	bl	80167a4 <__mcmp>
 8013e1a:	2800      	cmp	r0, #0
 8013e1c:	da4e      	bge.n	8013ebc <_strtod_l+0x85c>
 8013e1e:	ea58 080a 	orrs.w	r8, r8, sl
 8013e22:	d174      	bne.n	8013f0e <_strtod_l+0x8ae>
 8013e24:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8013e28:	2b00      	cmp	r3, #0
 8013e2a:	d170      	bne.n	8013f0e <_strtod_l+0x8ae>
 8013e2c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8013e30:	0d1b      	lsrs	r3, r3, #20
 8013e32:	051b      	lsls	r3, r3, #20
 8013e34:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8013e38:	d969      	bls.n	8013f0e <_strtod_l+0x8ae>
 8013e3a:	6963      	ldr	r3, [r4, #20]
 8013e3c:	b913      	cbnz	r3, 8013e44 <_strtod_l+0x7e4>
 8013e3e:	6923      	ldr	r3, [r4, #16]
 8013e40:	2b01      	cmp	r3, #1
 8013e42:	dd64      	ble.n	8013f0e <_strtod_l+0x8ae>
 8013e44:	4621      	mov	r1, r4
 8013e46:	2201      	movs	r2, #1
 8013e48:	9805      	ldr	r0, [sp, #20]
 8013e4a:	f002 fc3f 	bl	80166cc <__lshift>
 8013e4e:	4629      	mov	r1, r5
 8013e50:	4604      	mov	r4, r0
 8013e52:	f002 fca7 	bl	80167a4 <__mcmp>
 8013e56:	2800      	cmp	r0, #0
 8013e58:	dd59      	ble.n	8013f0e <_strtod_l+0x8ae>
 8013e5a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8013e5e:	9a06      	ldr	r2, [sp, #24]
 8013e60:	0d1b      	lsrs	r3, r3, #20
 8013e62:	051b      	lsls	r3, r3, #20
 8013e64:	2a00      	cmp	r2, #0
 8013e66:	d070      	beq.n	8013f4a <_strtod_l+0x8ea>
 8013e68:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8013e6c:	d86d      	bhi.n	8013f4a <_strtod_l+0x8ea>
 8013e6e:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8013e72:	f67f ae99 	bls.w	8013ba8 <_strtod_l+0x548>
 8013e76:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 8013ea8 <_strtod_l+0x848>
 8013e7a:	ec4b ab16 	vmov	d6, sl, fp
 8013e7e:	4b0e      	ldr	r3, [pc, #56]	@ (8013eb8 <_strtod_l+0x858>)
 8013e80:	ee26 7b07 	vmul.f64	d7, d6, d7
 8013e84:	ee17 2a90 	vmov	r2, s15
 8013e88:	4013      	ands	r3, r2
 8013e8a:	ec5b ab17 	vmov	sl, fp, d7
 8013e8e:	2b00      	cmp	r3, #0
 8013e90:	f47f ae01 	bne.w	8013a96 <_strtod_l+0x436>
 8013e94:	9a05      	ldr	r2, [sp, #20]
 8013e96:	2322      	movs	r3, #34	@ 0x22
 8013e98:	6013      	str	r3, [r2, #0]
 8013e9a:	e5fc      	b.n	8013a96 <_strtod_l+0x436>
 8013e9c:	f3af 8000 	nop.w
 8013ea0:	ffc00000 	.word	0xffc00000
 8013ea4:	41dfffff 	.word	0x41dfffff
 8013ea8:	00000000 	.word	0x00000000
 8013eac:	39500000 	.word	0x39500000
 8013eb0:	080184f0 	.word	0x080184f0
 8013eb4:	fffffc02 	.word	0xfffffc02
 8013eb8:	7ff00000 	.word	0x7ff00000
 8013ebc:	46d9      	mov	r9, fp
 8013ebe:	d15d      	bne.n	8013f7c <_strtod_l+0x91c>
 8013ec0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8013ec4:	f1b8 0f00 	cmp.w	r8, #0
 8013ec8:	d02a      	beq.n	8013f20 <_strtod_l+0x8c0>
 8013eca:	4aab      	ldr	r2, [pc, #684]	@ (8014178 <_strtod_l+0xb18>)
 8013ecc:	4293      	cmp	r3, r2
 8013ece:	d12a      	bne.n	8013f26 <_strtod_l+0x8c6>
 8013ed0:	9b06      	ldr	r3, [sp, #24]
 8013ed2:	4652      	mov	r2, sl
 8013ed4:	b1fb      	cbz	r3, 8013f16 <_strtod_l+0x8b6>
 8013ed6:	4ba9      	ldr	r3, [pc, #676]	@ (801417c <_strtod_l+0xb1c>)
 8013ed8:	ea0b 0303 	and.w	r3, fp, r3
 8013edc:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8013ee0:	f04f 31ff 	mov.w	r1, #4294967295
 8013ee4:	d81a      	bhi.n	8013f1c <_strtod_l+0x8bc>
 8013ee6:	0d1b      	lsrs	r3, r3, #20
 8013ee8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8013eec:	fa01 f303 	lsl.w	r3, r1, r3
 8013ef0:	429a      	cmp	r2, r3
 8013ef2:	d118      	bne.n	8013f26 <_strtod_l+0x8c6>
 8013ef4:	4ba2      	ldr	r3, [pc, #648]	@ (8014180 <_strtod_l+0xb20>)
 8013ef6:	4599      	cmp	r9, r3
 8013ef8:	d102      	bne.n	8013f00 <_strtod_l+0x8a0>
 8013efa:	3201      	adds	r2, #1
 8013efc:	f43f adc0 	beq.w	8013a80 <_strtod_l+0x420>
 8013f00:	4b9e      	ldr	r3, [pc, #632]	@ (801417c <_strtod_l+0xb1c>)
 8013f02:	ea09 0303 	and.w	r3, r9, r3
 8013f06:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 8013f0a:	f04f 0a00 	mov.w	sl, #0
 8013f0e:	9b06      	ldr	r3, [sp, #24]
 8013f10:	2b00      	cmp	r3, #0
 8013f12:	d1b0      	bne.n	8013e76 <_strtod_l+0x816>
 8013f14:	e5bf      	b.n	8013a96 <_strtod_l+0x436>
 8013f16:	f04f 33ff 	mov.w	r3, #4294967295
 8013f1a:	e7e9      	b.n	8013ef0 <_strtod_l+0x890>
 8013f1c:	460b      	mov	r3, r1
 8013f1e:	e7e7      	b.n	8013ef0 <_strtod_l+0x890>
 8013f20:	ea53 030a 	orrs.w	r3, r3, sl
 8013f24:	d099      	beq.n	8013e5a <_strtod_l+0x7fa>
 8013f26:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013f28:	b1c3      	cbz	r3, 8013f5c <_strtod_l+0x8fc>
 8013f2a:	ea13 0f09 	tst.w	r3, r9
 8013f2e:	d0ee      	beq.n	8013f0e <_strtod_l+0x8ae>
 8013f30:	9a06      	ldr	r2, [sp, #24]
 8013f32:	4650      	mov	r0, sl
 8013f34:	4659      	mov	r1, fp
 8013f36:	f1b8 0f00 	cmp.w	r8, #0
 8013f3a:	d013      	beq.n	8013f64 <_strtod_l+0x904>
 8013f3c:	f7ff fb73 	bl	8013626 <sulp>
 8013f40:	ee39 7b00 	vadd.f64	d7, d9, d0
 8013f44:	ec5b ab17 	vmov	sl, fp, d7
 8013f48:	e7e1      	b.n	8013f0e <_strtod_l+0x8ae>
 8013f4a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8013f4e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8013f52:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8013f56:	f04f 3aff 	mov.w	sl, #4294967295
 8013f5a:	e7d8      	b.n	8013f0e <_strtod_l+0x8ae>
 8013f5c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013f5e:	ea13 0f0a 	tst.w	r3, sl
 8013f62:	e7e4      	b.n	8013f2e <_strtod_l+0x8ce>
 8013f64:	f7ff fb5f 	bl	8013626 <sulp>
 8013f68:	ee39 0b40 	vsub.f64	d0, d9, d0
 8013f6c:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8013f70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f74:	ec5b ab10 	vmov	sl, fp, d0
 8013f78:	d1c9      	bne.n	8013f0e <_strtod_l+0x8ae>
 8013f7a:	e615      	b.n	8013ba8 <_strtod_l+0x548>
 8013f7c:	4629      	mov	r1, r5
 8013f7e:	4620      	mov	r0, r4
 8013f80:	f002 fd88 	bl	8016a94 <__ratio>
 8013f84:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 8013f88:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8013f8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f90:	d85d      	bhi.n	801404e <_strtod_l+0x9ee>
 8013f92:	f1b8 0f00 	cmp.w	r8, #0
 8013f96:	d164      	bne.n	8014062 <_strtod_l+0xa02>
 8013f98:	f1ba 0f00 	cmp.w	sl, #0
 8013f9c:	d14b      	bne.n	8014036 <_strtod_l+0x9d6>
 8013f9e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8013fa2:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 8013fa6:	2b00      	cmp	r3, #0
 8013fa8:	d160      	bne.n	801406c <_strtod_l+0xa0c>
 8013faa:	eeb4 0bc8 	vcmpe.f64	d0, d8
 8013fae:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 8013fb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013fb6:	d401      	bmi.n	8013fbc <_strtod_l+0x95c>
 8013fb8:	ee20 8b08 	vmul.f64	d8, d0, d8
 8013fbc:	eeb1 ab48 	vneg.f64	d10, d8
 8013fc0:	486e      	ldr	r0, [pc, #440]	@ (801417c <_strtod_l+0xb1c>)
 8013fc2:	4970      	ldr	r1, [pc, #448]	@ (8014184 <_strtod_l+0xb24>)
 8013fc4:	ea09 0700 	and.w	r7, r9, r0
 8013fc8:	428f      	cmp	r7, r1
 8013fca:	ec53 2b1a 	vmov	r2, r3, d10
 8013fce:	d17d      	bne.n	80140cc <_strtod_l+0xa6c>
 8013fd0:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 8013fd4:	ec4b ab1c 	vmov	d12, sl, fp
 8013fd8:	eeb0 0b4c 	vmov.f64	d0, d12
 8013fdc:	f002 fc92 	bl	8016904 <__ulp>
 8013fe0:	4866      	ldr	r0, [pc, #408]	@ (801417c <_strtod_l+0xb1c>)
 8013fe2:	eea0 cb0a 	vfma.f64	d12, d0, d10
 8013fe6:	ee1c 3a90 	vmov	r3, s25
 8013fea:	4a67      	ldr	r2, [pc, #412]	@ (8014188 <_strtod_l+0xb28>)
 8013fec:	ea03 0100 	and.w	r1, r3, r0
 8013ff0:	4291      	cmp	r1, r2
 8013ff2:	ec5b ab1c 	vmov	sl, fp, d12
 8013ff6:	d93c      	bls.n	8014072 <_strtod_l+0xa12>
 8013ff8:	ee19 2a90 	vmov	r2, s19
 8013ffc:	4b60      	ldr	r3, [pc, #384]	@ (8014180 <_strtod_l+0xb20>)
 8013ffe:	429a      	cmp	r2, r3
 8014000:	d104      	bne.n	801400c <_strtod_l+0x9ac>
 8014002:	ee19 3a10 	vmov	r3, s18
 8014006:	3301      	adds	r3, #1
 8014008:	f43f ad3a 	beq.w	8013a80 <_strtod_l+0x420>
 801400c:	f8df b170 	ldr.w	fp, [pc, #368]	@ 8014180 <_strtod_l+0xb20>
 8014010:	f04f 3aff 	mov.w	sl, #4294967295
 8014014:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8014016:	9805      	ldr	r0, [sp, #20]
 8014018:	f002 f940 	bl	801629c <_Bfree>
 801401c:	9805      	ldr	r0, [sp, #20]
 801401e:	4631      	mov	r1, r6
 8014020:	f002 f93c 	bl	801629c <_Bfree>
 8014024:	9805      	ldr	r0, [sp, #20]
 8014026:	4629      	mov	r1, r5
 8014028:	f002 f938 	bl	801629c <_Bfree>
 801402c:	9805      	ldr	r0, [sp, #20]
 801402e:	4621      	mov	r1, r4
 8014030:	f002 f934 	bl	801629c <_Bfree>
 8014034:	e625      	b.n	8013c82 <_strtod_l+0x622>
 8014036:	f1ba 0f01 	cmp.w	sl, #1
 801403a:	d103      	bne.n	8014044 <_strtod_l+0x9e4>
 801403c:	f1bb 0f00 	cmp.w	fp, #0
 8014040:	f43f adb2 	beq.w	8013ba8 <_strtod_l+0x548>
 8014044:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 8014048:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 801404c:	e7b8      	b.n	8013fc0 <_strtod_l+0x960>
 801404e:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 8014052:	ee20 8b08 	vmul.f64	d8, d0, d8
 8014056:	f1b8 0f00 	cmp.w	r8, #0
 801405a:	d0af      	beq.n	8013fbc <_strtod_l+0x95c>
 801405c:	eeb0 ab48 	vmov.f64	d10, d8
 8014060:	e7ae      	b.n	8013fc0 <_strtod_l+0x960>
 8014062:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 8014066:	eeb0 8b4a 	vmov.f64	d8, d10
 801406a:	e7a9      	b.n	8013fc0 <_strtod_l+0x960>
 801406c:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 8014070:	e7a6      	b.n	8013fc0 <_strtod_l+0x960>
 8014072:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8014076:	9b06      	ldr	r3, [sp, #24]
 8014078:	46d9      	mov	r9, fp
 801407a:	2b00      	cmp	r3, #0
 801407c:	d1ca      	bne.n	8014014 <_strtod_l+0x9b4>
 801407e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8014082:	0d1b      	lsrs	r3, r3, #20
 8014084:	051b      	lsls	r3, r3, #20
 8014086:	429f      	cmp	r7, r3
 8014088:	d1c4      	bne.n	8014014 <_strtod_l+0x9b4>
 801408a:	ec51 0b18 	vmov	r0, r1, d8
 801408e:	f7ec fb7b 	bl	8000788 <__aeabi_d2lz>
 8014092:	f7ec fb33 	bl	80006fc <__aeabi_l2d>
 8014096:	f3cb 0913 	ubfx	r9, fp, #0, #20
 801409a:	ec41 0b17 	vmov	d7, r0, r1
 801409e:	ea49 090a 	orr.w	r9, r9, sl
 80140a2:	ea59 0908 	orrs.w	r9, r9, r8
 80140a6:	ee38 8b47 	vsub.f64	d8, d8, d7
 80140aa:	d03c      	beq.n	8014126 <_strtod_l+0xac6>
 80140ac:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 8014160 <_strtod_l+0xb00>
 80140b0:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80140b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80140b8:	f53f aced 	bmi.w	8013a96 <_strtod_l+0x436>
 80140bc:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 8014168 <_strtod_l+0xb08>
 80140c0:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80140c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80140c8:	dda4      	ble.n	8014014 <_strtod_l+0x9b4>
 80140ca:	e4e4      	b.n	8013a96 <_strtod_l+0x436>
 80140cc:	9906      	ldr	r1, [sp, #24]
 80140ce:	b1e1      	cbz	r1, 801410a <_strtod_l+0xaaa>
 80140d0:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 80140d4:	d819      	bhi.n	801410a <_strtod_l+0xaaa>
 80140d6:	eeb4 8bcb 	vcmpe.f64	d8, d11
 80140da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80140de:	d811      	bhi.n	8014104 <_strtod_l+0xaa4>
 80140e0:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 80140e4:	ee18 3a10 	vmov	r3, s16
 80140e8:	2b01      	cmp	r3, #1
 80140ea:	bf38      	it	cc
 80140ec:	2301      	movcc	r3, #1
 80140ee:	ee08 3a10 	vmov	s16, r3
 80140f2:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 80140f6:	f1b8 0f00 	cmp.w	r8, #0
 80140fa:	d111      	bne.n	8014120 <_strtod_l+0xac0>
 80140fc:	eeb1 7b48 	vneg.f64	d7, d8
 8014100:	ec53 2b17 	vmov	r2, r3, d7
 8014104:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 8014108:	1bcb      	subs	r3, r1, r7
 801410a:	eeb0 0b49 	vmov.f64	d0, d9
 801410e:	ec43 2b1a 	vmov	d10, r2, r3
 8014112:	f002 fbf7 	bl	8016904 <__ulp>
 8014116:	eeaa 9b00 	vfma.f64	d9, d10, d0
 801411a:	ec5b ab19 	vmov	sl, fp, d9
 801411e:	e7aa      	b.n	8014076 <_strtod_l+0xa16>
 8014120:	eeb0 7b48 	vmov.f64	d7, d8
 8014124:	e7ec      	b.n	8014100 <_strtod_l+0xaa0>
 8014126:	ed9f 7b12 	vldr	d7, [pc, #72]	@ 8014170 <_strtod_l+0xb10>
 801412a:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801412e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014132:	f57f af6f 	bpl.w	8014014 <_strtod_l+0x9b4>
 8014136:	e4ae      	b.n	8013a96 <_strtod_l+0x436>
 8014138:	2300      	movs	r3, #0
 801413a:	9308      	str	r3, [sp, #32]
 801413c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801413e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8014140:	6013      	str	r3, [r2, #0]
 8014142:	f7ff bacc 	b.w	80136de <_strtod_l+0x7e>
 8014146:	2a65      	cmp	r2, #101	@ 0x65
 8014148:	f43f abbc 	beq.w	80138c4 <_strtod_l+0x264>
 801414c:	2a45      	cmp	r2, #69	@ 0x45
 801414e:	f43f abb9 	beq.w	80138c4 <_strtod_l+0x264>
 8014152:	2301      	movs	r3, #1
 8014154:	9306      	str	r3, [sp, #24]
 8014156:	f7ff bbf0 	b.w	801393a <_strtod_l+0x2da>
 801415a:	bf00      	nop
 801415c:	f3af 8000 	nop.w
 8014160:	94a03595 	.word	0x94a03595
 8014164:	3fdfffff 	.word	0x3fdfffff
 8014168:	35afe535 	.word	0x35afe535
 801416c:	3fe00000 	.word	0x3fe00000
 8014170:	94a03595 	.word	0x94a03595
 8014174:	3fcfffff 	.word	0x3fcfffff
 8014178:	000fffff 	.word	0x000fffff
 801417c:	7ff00000 	.word	0x7ff00000
 8014180:	7fefffff 	.word	0x7fefffff
 8014184:	7fe00000 	.word	0x7fe00000
 8014188:	7c9fffff 	.word	0x7c9fffff

0801418c <strtod>:
 801418c:	460a      	mov	r2, r1
 801418e:	4601      	mov	r1, r0
 8014190:	4802      	ldr	r0, [pc, #8]	@ (801419c <strtod+0x10>)
 8014192:	4b03      	ldr	r3, [pc, #12]	@ (80141a0 <strtod+0x14>)
 8014194:	6800      	ldr	r0, [r0, #0]
 8014196:	f7ff ba63 	b.w	8013660 <_strtod_l>
 801419a:	bf00      	nop
 801419c:	2400027c 	.word	0x2400027c
 80141a0:	24000110 	.word	0x24000110

080141a4 <__cvt>:
 80141a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80141a6:	ed2d 8b02 	vpush	{d8}
 80141aa:	eeb0 8b40 	vmov.f64	d8, d0
 80141ae:	b085      	sub	sp, #20
 80141b0:	4617      	mov	r7, r2
 80141b2:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 80141b4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80141b6:	ee18 2a90 	vmov	r2, s17
 80141ba:	f025 0520 	bic.w	r5, r5, #32
 80141be:	2a00      	cmp	r2, #0
 80141c0:	bfb6      	itet	lt
 80141c2:	222d      	movlt	r2, #45	@ 0x2d
 80141c4:	2200      	movge	r2, #0
 80141c6:	eeb1 8b40 	vneglt.f64	d8, d0
 80141ca:	2d46      	cmp	r5, #70	@ 0x46
 80141cc:	460c      	mov	r4, r1
 80141ce:	701a      	strb	r2, [r3, #0]
 80141d0:	d004      	beq.n	80141dc <__cvt+0x38>
 80141d2:	2d45      	cmp	r5, #69	@ 0x45
 80141d4:	d100      	bne.n	80141d8 <__cvt+0x34>
 80141d6:	3401      	adds	r4, #1
 80141d8:	2102      	movs	r1, #2
 80141da:	e000      	b.n	80141de <__cvt+0x3a>
 80141dc:	2103      	movs	r1, #3
 80141de:	ab03      	add	r3, sp, #12
 80141e0:	9301      	str	r3, [sp, #4]
 80141e2:	ab02      	add	r3, sp, #8
 80141e4:	9300      	str	r3, [sp, #0]
 80141e6:	4622      	mov	r2, r4
 80141e8:	4633      	mov	r3, r6
 80141ea:	eeb0 0b48 	vmov.f64	d0, d8
 80141ee:	f000 fe73 	bl	8014ed8 <_dtoa_r>
 80141f2:	2d47      	cmp	r5, #71	@ 0x47
 80141f4:	d114      	bne.n	8014220 <__cvt+0x7c>
 80141f6:	07fb      	lsls	r3, r7, #31
 80141f8:	d50a      	bpl.n	8014210 <__cvt+0x6c>
 80141fa:	1902      	adds	r2, r0, r4
 80141fc:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8014200:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014204:	bf08      	it	eq
 8014206:	9203      	streq	r2, [sp, #12]
 8014208:	2130      	movs	r1, #48	@ 0x30
 801420a:	9b03      	ldr	r3, [sp, #12]
 801420c:	4293      	cmp	r3, r2
 801420e:	d319      	bcc.n	8014244 <__cvt+0xa0>
 8014210:	9b03      	ldr	r3, [sp, #12]
 8014212:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8014214:	1a1b      	subs	r3, r3, r0
 8014216:	6013      	str	r3, [r2, #0]
 8014218:	b005      	add	sp, #20
 801421a:	ecbd 8b02 	vpop	{d8}
 801421e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014220:	2d46      	cmp	r5, #70	@ 0x46
 8014222:	eb00 0204 	add.w	r2, r0, r4
 8014226:	d1e9      	bne.n	80141fc <__cvt+0x58>
 8014228:	7803      	ldrb	r3, [r0, #0]
 801422a:	2b30      	cmp	r3, #48	@ 0x30
 801422c:	d107      	bne.n	801423e <__cvt+0x9a>
 801422e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8014232:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014236:	bf1c      	itt	ne
 8014238:	f1c4 0401 	rsbne	r4, r4, #1
 801423c:	6034      	strne	r4, [r6, #0]
 801423e:	6833      	ldr	r3, [r6, #0]
 8014240:	441a      	add	r2, r3
 8014242:	e7db      	b.n	80141fc <__cvt+0x58>
 8014244:	1c5c      	adds	r4, r3, #1
 8014246:	9403      	str	r4, [sp, #12]
 8014248:	7019      	strb	r1, [r3, #0]
 801424a:	e7de      	b.n	801420a <__cvt+0x66>

0801424c <__exponent>:
 801424c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801424e:	2900      	cmp	r1, #0
 8014250:	bfba      	itte	lt
 8014252:	4249      	neglt	r1, r1
 8014254:	232d      	movlt	r3, #45	@ 0x2d
 8014256:	232b      	movge	r3, #43	@ 0x2b
 8014258:	2909      	cmp	r1, #9
 801425a:	7002      	strb	r2, [r0, #0]
 801425c:	7043      	strb	r3, [r0, #1]
 801425e:	dd29      	ble.n	80142b4 <__exponent+0x68>
 8014260:	f10d 0307 	add.w	r3, sp, #7
 8014264:	461d      	mov	r5, r3
 8014266:	270a      	movs	r7, #10
 8014268:	461a      	mov	r2, r3
 801426a:	fbb1 f6f7 	udiv	r6, r1, r7
 801426e:	fb07 1416 	mls	r4, r7, r6, r1
 8014272:	3430      	adds	r4, #48	@ 0x30
 8014274:	f802 4c01 	strb.w	r4, [r2, #-1]
 8014278:	460c      	mov	r4, r1
 801427a:	2c63      	cmp	r4, #99	@ 0x63
 801427c:	f103 33ff 	add.w	r3, r3, #4294967295
 8014280:	4631      	mov	r1, r6
 8014282:	dcf1      	bgt.n	8014268 <__exponent+0x1c>
 8014284:	3130      	adds	r1, #48	@ 0x30
 8014286:	1e94      	subs	r4, r2, #2
 8014288:	f803 1c01 	strb.w	r1, [r3, #-1]
 801428c:	1c41      	adds	r1, r0, #1
 801428e:	4623      	mov	r3, r4
 8014290:	42ab      	cmp	r3, r5
 8014292:	d30a      	bcc.n	80142aa <__exponent+0x5e>
 8014294:	f10d 0309 	add.w	r3, sp, #9
 8014298:	1a9b      	subs	r3, r3, r2
 801429a:	42ac      	cmp	r4, r5
 801429c:	bf88      	it	hi
 801429e:	2300      	movhi	r3, #0
 80142a0:	3302      	adds	r3, #2
 80142a2:	4403      	add	r3, r0
 80142a4:	1a18      	subs	r0, r3, r0
 80142a6:	b003      	add	sp, #12
 80142a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80142aa:	f813 6b01 	ldrb.w	r6, [r3], #1
 80142ae:	f801 6f01 	strb.w	r6, [r1, #1]!
 80142b2:	e7ed      	b.n	8014290 <__exponent+0x44>
 80142b4:	2330      	movs	r3, #48	@ 0x30
 80142b6:	3130      	adds	r1, #48	@ 0x30
 80142b8:	7083      	strb	r3, [r0, #2]
 80142ba:	70c1      	strb	r1, [r0, #3]
 80142bc:	1d03      	adds	r3, r0, #4
 80142be:	e7f1      	b.n	80142a4 <__exponent+0x58>

080142c0 <_printf_float>:
 80142c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80142c4:	b08d      	sub	sp, #52	@ 0x34
 80142c6:	460c      	mov	r4, r1
 80142c8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80142cc:	4616      	mov	r6, r2
 80142ce:	461f      	mov	r7, r3
 80142d0:	4605      	mov	r5, r0
 80142d2:	f000 fce9 	bl	8014ca8 <_localeconv_r>
 80142d6:	f8d0 b000 	ldr.w	fp, [r0]
 80142da:	4658      	mov	r0, fp
 80142dc:	f7ec f878 	bl	80003d0 <strlen>
 80142e0:	2300      	movs	r3, #0
 80142e2:	930a      	str	r3, [sp, #40]	@ 0x28
 80142e4:	f8d8 3000 	ldr.w	r3, [r8]
 80142e8:	f894 9018 	ldrb.w	r9, [r4, #24]
 80142ec:	6822      	ldr	r2, [r4, #0]
 80142ee:	9005      	str	r0, [sp, #20]
 80142f0:	3307      	adds	r3, #7
 80142f2:	f023 0307 	bic.w	r3, r3, #7
 80142f6:	f103 0108 	add.w	r1, r3, #8
 80142fa:	f8c8 1000 	str.w	r1, [r8]
 80142fe:	ed93 0b00 	vldr	d0, [r3]
 8014302:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8014560 <_printf_float+0x2a0>
 8014306:	eeb0 7bc0 	vabs.f64	d7, d0
 801430a:	eeb4 7b46 	vcmp.f64	d7, d6
 801430e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014312:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 8014316:	dd24      	ble.n	8014362 <_printf_float+0xa2>
 8014318:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801431c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014320:	d502      	bpl.n	8014328 <_printf_float+0x68>
 8014322:	232d      	movs	r3, #45	@ 0x2d
 8014324:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8014328:	498f      	ldr	r1, [pc, #572]	@ (8014568 <_printf_float+0x2a8>)
 801432a:	4b90      	ldr	r3, [pc, #576]	@ (801456c <_printf_float+0x2ac>)
 801432c:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8014330:	bf94      	ite	ls
 8014332:	4688      	movls	r8, r1
 8014334:	4698      	movhi	r8, r3
 8014336:	f022 0204 	bic.w	r2, r2, #4
 801433a:	2303      	movs	r3, #3
 801433c:	6123      	str	r3, [r4, #16]
 801433e:	6022      	str	r2, [r4, #0]
 8014340:	f04f 0a00 	mov.w	sl, #0
 8014344:	9700      	str	r7, [sp, #0]
 8014346:	4633      	mov	r3, r6
 8014348:	aa0b      	add	r2, sp, #44	@ 0x2c
 801434a:	4621      	mov	r1, r4
 801434c:	4628      	mov	r0, r5
 801434e:	f000 f9d1 	bl	80146f4 <_printf_common>
 8014352:	3001      	adds	r0, #1
 8014354:	f040 8089 	bne.w	801446a <_printf_float+0x1aa>
 8014358:	f04f 30ff 	mov.w	r0, #4294967295
 801435c:	b00d      	add	sp, #52	@ 0x34
 801435e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014362:	eeb4 0b40 	vcmp.f64	d0, d0
 8014366:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801436a:	d709      	bvc.n	8014380 <_printf_float+0xc0>
 801436c:	ee10 3a90 	vmov	r3, s1
 8014370:	2b00      	cmp	r3, #0
 8014372:	bfbc      	itt	lt
 8014374:	232d      	movlt	r3, #45	@ 0x2d
 8014376:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 801437a:	497d      	ldr	r1, [pc, #500]	@ (8014570 <_printf_float+0x2b0>)
 801437c:	4b7d      	ldr	r3, [pc, #500]	@ (8014574 <_printf_float+0x2b4>)
 801437e:	e7d5      	b.n	801432c <_printf_float+0x6c>
 8014380:	6863      	ldr	r3, [r4, #4]
 8014382:	1c59      	adds	r1, r3, #1
 8014384:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8014388:	d139      	bne.n	80143fe <_printf_float+0x13e>
 801438a:	2306      	movs	r3, #6
 801438c:	6063      	str	r3, [r4, #4]
 801438e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8014392:	2300      	movs	r3, #0
 8014394:	6022      	str	r2, [r4, #0]
 8014396:	9303      	str	r3, [sp, #12]
 8014398:	ab0a      	add	r3, sp, #40	@ 0x28
 801439a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 801439e:	ab09      	add	r3, sp, #36	@ 0x24
 80143a0:	9300      	str	r3, [sp, #0]
 80143a2:	6861      	ldr	r1, [r4, #4]
 80143a4:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80143a8:	4628      	mov	r0, r5
 80143aa:	f7ff fefb 	bl	80141a4 <__cvt>
 80143ae:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80143b2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80143b4:	4680      	mov	r8, r0
 80143b6:	d129      	bne.n	801440c <_printf_float+0x14c>
 80143b8:	1cc8      	adds	r0, r1, #3
 80143ba:	db02      	blt.n	80143c2 <_printf_float+0x102>
 80143bc:	6863      	ldr	r3, [r4, #4]
 80143be:	4299      	cmp	r1, r3
 80143c0:	dd41      	ble.n	8014446 <_printf_float+0x186>
 80143c2:	f1a9 0902 	sub.w	r9, r9, #2
 80143c6:	fa5f f989 	uxtb.w	r9, r9
 80143ca:	3901      	subs	r1, #1
 80143cc:	464a      	mov	r2, r9
 80143ce:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80143d2:	9109      	str	r1, [sp, #36]	@ 0x24
 80143d4:	f7ff ff3a 	bl	801424c <__exponent>
 80143d8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80143da:	1813      	adds	r3, r2, r0
 80143dc:	2a01      	cmp	r2, #1
 80143de:	4682      	mov	sl, r0
 80143e0:	6123      	str	r3, [r4, #16]
 80143e2:	dc02      	bgt.n	80143ea <_printf_float+0x12a>
 80143e4:	6822      	ldr	r2, [r4, #0]
 80143e6:	07d2      	lsls	r2, r2, #31
 80143e8:	d501      	bpl.n	80143ee <_printf_float+0x12e>
 80143ea:	3301      	adds	r3, #1
 80143ec:	6123      	str	r3, [r4, #16]
 80143ee:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80143f2:	2b00      	cmp	r3, #0
 80143f4:	d0a6      	beq.n	8014344 <_printf_float+0x84>
 80143f6:	232d      	movs	r3, #45	@ 0x2d
 80143f8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80143fc:	e7a2      	b.n	8014344 <_printf_float+0x84>
 80143fe:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8014402:	d1c4      	bne.n	801438e <_printf_float+0xce>
 8014404:	2b00      	cmp	r3, #0
 8014406:	d1c2      	bne.n	801438e <_printf_float+0xce>
 8014408:	2301      	movs	r3, #1
 801440a:	e7bf      	b.n	801438c <_printf_float+0xcc>
 801440c:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8014410:	d9db      	bls.n	80143ca <_printf_float+0x10a>
 8014412:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 8014416:	d118      	bne.n	801444a <_printf_float+0x18a>
 8014418:	2900      	cmp	r1, #0
 801441a:	6863      	ldr	r3, [r4, #4]
 801441c:	dd0b      	ble.n	8014436 <_printf_float+0x176>
 801441e:	6121      	str	r1, [r4, #16]
 8014420:	b913      	cbnz	r3, 8014428 <_printf_float+0x168>
 8014422:	6822      	ldr	r2, [r4, #0]
 8014424:	07d0      	lsls	r0, r2, #31
 8014426:	d502      	bpl.n	801442e <_printf_float+0x16e>
 8014428:	3301      	adds	r3, #1
 801442a:	440b      	add	r3, r1
 801442c:	6123      	str	r3, [r4, #16]
 801442e:	65a1      	str	r1, [r4, #88]	@ 0x58
 8014430:	f04f 0a00 	mov.w	sl, #0
 8014434:	e7db      	b.n	80143ee <_printf_float+0x12e>
 8014436:	b913      	cbnz	r3, 801443e <_printf_float+0x17e>
 8014438:	6822      	ldr	r2, [r4, #0]
 801443a:	07d2      	lsls	r2, r2, #31
 801443c:	d501      	bpl.n	8014442 <_printf_float+0x182>
 801443e:	3302      	adds	r3, #2
 8014440:	e7f4      	b.n	801442c <_printf_float+0x16c>
 8014442:	2301      	movs	r3, #1
 8014444:	e7f2      	b.n	801442c <_printf_float+0x16c>
 8014446:	f04f 0967 	mov.w	r9, #103	@ 0x67
 801444a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801444c:	4299      	cmp	r1, r3
 801444e:	db05      	blt.n	801445c <_printf_float+0x19c>
 8014450:	6823      	ldr	r3, [r4, #0]
 8014452:	6121      	str	r1, [r4, #16]
 8014454:	07d8      	lsls	r0, r3, #31
 8014456:	d5ea      	bpl.n	801442e <_printf_float+0x16e>
 8014458:	1c4b      	adds	r3, r1, #1
 801445a:	e7e7      	b.n	801442c <_printf_float+0x16c>
 801445c:	2900      	cmp	r1, #0
 801445e:	bfd4      	ite	le
 8014460:	f1c1 0202 	rsble	r2, r1, #2
 8014464:	2201      	movgt	r2, #1
 8014466:	4413      	add	r3, r2
 8014468:	e7e0      	b.n	801442c <_printf_float+0x16c>
 801446a:	6823      	ldr	r3, [r4, #0]
 801446c:	055a      	lsls	r2, r3, #21
 801446e:	d407      	bmi.n	8014480 <_printf_float+0x1c0>
 8014470:	6923      	ldr	r3, [r4, #16]
 8014472:	4642      	mov	r2, r8
 8014474:	4631      	mov	r1, r6
 8014476:	4628      	mov	r0, r5
 8014478:	47b8      	blx	r7
 801447a:	3001      	adds	r0, #1
 801447c:	d12a      	bne.n	80144d4 <_printf_float+0x214>
 801447e:	e76b      	b.n	8014358 <_printf_float+0x98>
 8014480:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8014484:	f240 80e0 	bls.w	8014648 <_printf_float+0x388>
 8014488:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 801448c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8014490:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014494:	d133      	bne.n	80144fe <_printf_float+0x23e>
 8014496:	4a38      	ldr	r2, [pc, #224]	@ (8014578 <_printf_float+0x2b8>)
 8014498:	2301      	movs	r3, #1
 801449a:	4631      	mov	r1, r6
 801449c:	4628      	mov	r0, r5
 801449e:	47b8      	blx	r7
 80144a0:	3001      	adds	r0, #1
 80144a2:	f43f af59 	beq.w	8014358 <_printf_float+0x98>
 80144a6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80144aa:	4543      	cmp	r3, r8
 80144ac:	db02      	blt.n	80144b4 <_printf_float+0x1f4>
 80144ae:	6823      	ldr	r3, [r4, #0]
 80144b0:	07d8      	lsls	r0, r3, #31
 80144b2:	d50f      	bpl.n	80144d4 <_printf_float+0x214>
 80144b4:	9b05      	ldr	r3, [sp, #20]
 80144b6:	465a      	mov	r2, fp
 80144b8:	4631      	mov	r1, r6
 80144ba:	4628      	mov	r0, r5
 80144bc:	47b8      	blx	r7
 80144be:	3001      	adds	r0, #1
 80144c0:	f43f af4a 	beq.w	8014358 <_printf_float+0x98>
 80144c4:	f04f 0900 	mov.w	r9, #0
 80144c8:	f108 38ff 	add.w	r8, r8, #4294967295
 80144cc:	f104 0a1a 	add.w	sl, r4, #26
 80144d0:	45c8      	cmp	r8, r9
 80144d2:	dc09      	bgt.n	80144e8 <_printf_float+0x228>
 80144d4:	6823      	ldr	r3, [r4, #0]
 80144d6:	079b      	lsls	r3, r3, #30
 80144d8:	f100 8107 	bmi.w	80146ea <_printf_float+0x42a>
 80144dc:	68e0      	ldr	r0, [r4, #12]
 80144de:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80144e0:	4298      	cmp	r0, r3
 80144e2:	bfb8      	it	lt
 80144e4:	4618      	movlt	r0, r3
 80144e6:	e739      	b.n	801435c <_printf_float+0x9c>
 80144e8:	2301      	movs	r3, #1
 80144ea:	4652      	mov	r2, sl
 80144ec:	4631      	mov	r1, r6
 80144ee:	4628      	mov	r0, r5
 80144f0:	47b8      	blx	r7
 80144f2:	3001      	adds	r0, #1
 80144f4:	f43f af30 	beq.w	8014358 <_printf_float+0x98>
 80144f8:	f109 0901 	add.w	r9, r9, #1
 80144fc:	e7e8      	b.n	80144d0 <_printf_float+0x210>
 80144fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014500:	2b00      	cmp	r3, #0
 8014502:	dc3b      	bgt.n	801457c <_printf_float+0x2bc>
 8014504:	4a1c      	ldr	r2, [pc, #112]	@ (8014578 <_printf_float+0x2b8>)
 8014506:	2301      	movs	r3, #1
 8014508:	4631      	mov	r1, r6
 801450a:	4628      	mov	r0, r5
 801450c:	47b8      	blx	r7
 801450e:	3001      	adds	r0, #1
 8014510:	f43f af22 	beq.w	8014358 <_printf_float+0x98>
 8014514:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8014518:	ea59 0303 	orrs.w	r3, r9, r3
 801451c:	d102      	bne.n	8014524 <_printf_float+0x264>
 801451e:	6823      	ldr	r3, [r4, #0]
 8014520:	07d9      	lsls	r1, r3, #31
 8014522:	d5d7      	bpl.n	80144d4 <_printf_float+0x214>
 8014524:	9b05      	ldr	r3, [sp, #20]
 8014526:	465a      	mov	r2, fp
 8014528:	4631      	mov	r1, r6
 801452a:	4628      	mov	r0, r5
 801452c:	47b8      	blx	r7
 801452e:	3001      	adds	r0, #1
 8014530:	f43f af12 	beq.w	8014358 <_printf_float+0x98>
 8014534:	f04f 0a00 	mov.w	sl, #0
 8014538:	f104 0b1a 	add.w	fp, r4, #26
 801453c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801453e:	425b      	negs	r3, r3
 8014540:	4553      	cmp	r3, sl
 8014542:	dc01      	bgt.n	8014548 <_printf_float+0x288>
 8014544:	464b      	mov	r3, r9
 8014546:	e794      	b.n	8014472 <_printf_float+0x1b2>
 8014548:	2301      	movs	r3, #1
 801454a:	465a      	mov	r2, fp
 801454c:	4631      	mov	r1, r6
 801454e:	4628      	mov	r0, r5
 8014550:	47b8      	blx	r7
 8014552:	3001      	adds	r0, #1
 8014554:	f43f af00 	beq.w	8014358 <_printf_float+0x98>
 8014558:	f10a 0a01 	add.w	sl, sl, #1
 801455c:	e7ee      	b.n	801453c <_printf_float+0x27c>
 801455e:	bf00      	nop
 8014560:	ffffffff 	.word	0xffffffff
 8014564:	7fefffff 	.word	0x7fefffff
 8014568:	08018619 	.word	0x08018619
 801456c:	0801861d 	.word	0x0801861d
 8014570:	08018621 	.word	0x08018621
 8014574:	08018625 	.word	0x08018625
 8014578:	08018629 	.word	0x08018629
 801457c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801457e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8014582:	4553      	cmp	r3, sl
 8014584:	bfa8      	it	ge
 8014586:	4653      	movge	r3, sl
 8014588:	2b00      	cmp	r3, #0
 801458a:	4699      	mov	r9, r3
 801458c:	dc37      	bgt.n	80145fe <_printf_float+0x33e>
 801458e:	2300      	movs	r3, #0
 8014590:	9307      	str	r3, [sp, #28]
 8014592:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8014596:	f104 021a 	add.w	r2, r4, #26
 801459a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801459c:	9907      	ldr	r1, [sp, #28]
 801459e:	9306      	str	r3, [sp, #24]
 80145a0:	eba3 0309 	sub.w	r3, r3, r9
 80145a4:	428b      	cmp	r3, r1
 80145a6:	dc31      	bgt.n	801460c <_printf_float+0x34c>
 80145a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80145aa:	459a      	cmp	sl, r3
 80145ac:	dc3b      	bgt.n	8014626 <_printf_float+0x366>
 80145ae:	6823      	ldr	r3, [r4, #0]
 80145b0:	07da      	lsls	r2, r3, #31
 80145b2:	d438      	bmi.n	8014626 <_printf_float+0x366>
 80145b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80145b6:	ebaa 0903 	sub.w	r9, sl, r3
 80145ba:	9b06      	ldr	r3, [sp, #24]
 80145bc:	ebaa 0303 	sub.w	r3, sl, r3
 80145c0:	4599      	cmp	r9, r3
 80145c2:	bfa8      	it	ge
 80145c4:	4699      	movge	r9, r3
 80145c6:	f1b9 0f00 	cmp.w	r9, #0
 80145ca:	dc34      	bgt.n	8014636 <_printf_float+0x376>
 80145cc:	f04f 0800 	mov.w	r8, #0
 80145d0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80145d4:	f104 0b1a 	add.w	fp, r4, #26
 80145d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80145da:	ebaa 0303 	sub.w	r3, sl, r3
 80145de:	eba3 0309 	sub.w	r3, r3, r9
 80145e2:	4543      	cmp	r3, r8
 80145e4:	f77f af76 	ble.w	80144d4 <_printf_float+0x214>
 80145e8:	2301      	movs	r3, #1
 80145ea:	465a      	mov	r2, fp
 80145ec:	4631      	mov	r1, r6
 80145ee:	4628      	mov	r0, r5
 80145f0:	47b8      	blx	r7
 80145f2:	3001      	adds	r0, #1
 80145f4:	f43f aeb0 	beq.w	8014358 <_printf_float+0x98>
 80145f8:	f108 0801 	add.w	r8, r8, #1
 80145fc:	e7ec      	b.n	80145d8 <_printf_float+0x318>
 80145fe:	4642      	mov	r2, r8
 8014600:	4631      	mov	r1, r6
 8014602:	4628      	mov	r0, r5
 8014604:	47b8      	blx	r7
 8014606:	3001      	adds	r0, #1
 8014608:	d1c1      	bne.n	801458e <_printf_float+0x2ce>
 801460a:	e6a5      	b.n	8014358 <_printf_float+0x98>
 801460c:	2301      	movs	r3, #1
 801460e:	4631      	mov	r1, r6
 8014610:	4628      	mov	r0, r5
 8014612:	9206      	str	r2, [sp, #24]
 8014614:	47b8      	blx	r7
 8014616:	3001      	adds	r0, #1
 8014618:	f43f ae9e 	beq.w	8014358 <_printf_float+0x98>
 801461c:	9b07      	ldr	r3, [sp, #28]
 801461e:	9a06      	ldr	r2, [sp, #24]
 8014620:	3301      	adds	r3, #1
 8014622:	9307      	str	r3, [sp, #28]
 8014624:	e7b9      	b.n	801459a <_printf_float+0x2da>
 8014626:	9b05      	ldr	r3, [sp, #20]
 8014628:	465a      	mov	r2, fp
 801462a:	4631      	mov	r1, r6
 801462c:	4628      	mov	r0, r5
 801462e:	47b8      	blx	r7
 8014630:	3001      	adds	r0, #1
 8014632:	d1bf      	bne.n	80145b4 <_printf_float+0x2f4>
 8014634:	e690      	b.n	8014358 <_printf_float+0x98>
 8014636:	9a06      	ldr	r2, [sp, #24]
 8014638:	464b      	mov	r3, r9
 801463a:	4442      	add	r2, r8
 801463c:	4631      	mov	r1, r6
 801463e:	4628      	mov	r0, r5
 8014640:	47b8      	blx	r7
 8014642:	3001      	adds	r0, #1
 8014644:	d1c2      	bne.n	80145cc <_printf_float+0x30c>
 8014646:	e687      	b.n	8014358 <_printf_float+0x98>
 8014648:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 801464c:	f1b9 0f01 	cmp.w	r9, #1
 8014650:	dc01      	bgt.n	8014656 <_printf_float+0x396>
 8014652:	07db      	lsls	r3, r3, #31
 8014654:	d536      	bpl.n	80146c4 <_printf_float+0x404>
 8014656:	2301      	movs	r3, #1
 8014658:	4642      	mov	r2, r8
 801465a:	4631      	mov	r1, r6
 801465c:	4628      	mov	r0, r5
 801465e:	47b8      	blx	r7
 8014660:	3001      	adds	r0, #1
 8014662:	f43f ae79 	beq.w	8014358 <_printf_float+0x98>
 8014666:	9b05      	ldr	r3, [sp, #20]
 8014668:	465a      	mov	r2, fp
 801466a:	4631      	mov	r1, r6
 801466c:	4628      	mov	r0, r5
 801466e:	47b8      	blx	r7
 8014670:	3001      	adds	r0, #1
 8014672:	f43f ae71 	beq.w	8014358 <_printf_float+0x98>
 8014676:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 801467a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801467e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014682:	f109 39ff 	add.w	r9, r9, #4294967295
 8014686:	d018      	beq.n	80146ba <_printf_float+0x3fa>
 8014688:	464b      	mov	r3, r9
 801468a:	f108 0201 	add.w	r2, r8, #1
 801468e:	4631      	mov	r1, r6
 8014690:	4628      	mov	r0, r5
 8014692:	47b8      	blx	r7
 8014694:	3001      	adds	r0, #1
 8014696:	d10c      	bne.n	80146b2 <_printf_float+0x3f2>
 8014698:	e65e      	b.n	8014358 <_printf_float+0x98>
 801469a:	2301      	movs	r3, #1
 801469c:	465a      	mov	r2, fp
 801469e:	4631      	mov	r1, r6
 80146a0:	4628      	mov	r0, r5
 80146a2:	47b8      	blx	r7
 80146a4:	3001      	adds	r0, #1
 80146a6:	f43f ae57 	beq.w	8014358 <_printf_float+0x98>
 80146aa:	f108 0801 	add.w	r8, r8, #1
 80146ae:	45c8      	cmp	r8, r9
 80146b0:	dbf3      	blt.n	801469a <_printf_float+0x3da>
 80146b2:	4653      	mov	r3, sl
 80146b4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80146b8:	e6dc      	b.n	8014474 <_printf_float+0x1b4>
 80146ba:	f04f 0800 	mov.w	r8, #0
 80146be:	f104 0b1a 	add.w	fp, r4, #26
 80146c2:	e7f4      	b.n	80146ae <_printf_float+0x3ee>
 80146c4:	2301      	movs	r3, #1
 80146c6:	4642      	mov	r2, r8
 80146c8:	e7e1      	b.n	801468e <_printf_float+0x3ce>
 80146ca:	2301      	movs	r3, #1
 80146cc:	464a      	mov	r2, r9
 80146ce:	4631      	mov	r1, r6
 80146d0:	4628      	mov	r0, r5
 80146d2:	47b8      	blx	r7
 80146d4:	3001      	adds	r0, #1
 80146d6:	f43f ae3f 	beq.w	8014358 <_printf_float+0x98>
 80146da:	f108 0801 	add.w	r8, r8, #1
 80146de:	68e3      	ldr	r3, [r4, #12]
 80146e0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80146e2:	1a5b      	subs	r3, r3, r1
 80146e4:	4543      	cmp	r3, r8
 80146e6:	dcf0      	bgt.n	80146ca <_printf_float+0x40a>
 80146e8:	e6f8      	b.n	80144dc <_printf_float+0x21c>
 80146ea:	f04f 0800 	mov.w	r8, #0
 80146ee:	f104 0919 	add.w	r9, r4, #25
 80146f2:	e7f4      	b.n	80146de <_printf_float+0x41e>

080146f4 <_printf_common>:
 80146f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80146f8:	4616      	mov	r6, r2
 80146fa:	4698      	mov	r8, r3
 80146fc:	688a      	ldr	r2, [r1, #8]
 80146fe:	690b      	ldr	r3, [r1, #16]
 8014700:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8014704:	4293      	cmp	r3, r2
 8014706:	bfb8      	it	lt
 8014708:	4613      	movlt	r3, r2
 801470a:	6033      	str	r3, [r6, #0]
 801470c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8014710:	4607      	mov	r7, r0
 8014712:	460c      	mov	r4, r1
 8014714:	b10a      	cbz	r2, 801471a <_printf_common+0x26>
 8014716:	3301      	adds	r3, #1
 8014718:	6033      	str	r3, [r6, #0]
 801471a:	6823      	ldr	r3, [r4, #0]
 801471c:	0699      	lsls	r1, r3, #26
 801471e:	bf42      	ittt	mi
 8014720:	6833      	ldrmi	r3, [r6, #0]
 8014722:	3302      	addmi	r3, #2
 8014724:	6033      	strmi	r3, [r6, #0]
 8014726:	6825      	ldr	r5, [r4, #0]
 8014728:	f015 0506 	ands.w	r5, r5, #6
 801472c:	d106      	bne.n	801473c <_printf_common+0x48>
 801472e:	f104 0a19 	add.w	sl, r4, #25
 8014732:	68e3      	ldr	r3, [r4, #12]
 8014734:	6832      	ldr	r2, [r6, #0]
 8014736:	1a9b      	subs	r3, r3, r2
 8014738:	42ab      	cmp	r3, r5
 801473a:	dc26      	bgt.n	801478a <_printf_common+0x96>
 801473c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8014740:	6822      	ldr	r2, [r4, #0]
 8014742:	3b00      	subs	r3, #0
 8014744:	bf18      	it	ne
 8014746:	2301      	movne	r3, #1
 8014748:	0692      	lsls	r2, r2, #26
 801474a:	d42b      	bmi.n	80147a4 <_printf_common+0xb0>
 801474c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8014750:	4641      	mov	r1, r8
 8014752:	4638      	mov	r0, r7
 8014754:	47c8      	blx	r9
 8014756:	3001      	adds	r0, #1
 8014758:	d01e      	beq.n	8014798 <_printf_common+0xa4>
 801475a:	6823      	ldr	r3, [r4, #0]
 801475c:	6922      	ldr	r2, [r4, #16]
 801475e:	f003 0306 	and.w	r3, r3, #6
 8014762:	2b04      	cmp	r3, #4
 8014764:	bf02      	ittt	eq
 8014766:	68e5      	ldreq	r5, [r4, #12]
 8014768:	6833      	ldreq	r3, [r6, #0]
 801476a:	1aed      	subeq	r5, r5, r3
 801476c:	68a3      	ldr	r3, [r4, #8]
 801476e:	bf0c      	ite	eq
 8014770:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014774:	2500      	movne	r5, #0
 8014776:	4293      	cmp	r3, r2
 8014778:	bfc4      	itt	gt
 801477a:	1a9b      	subgt	r3, r3, r2
 801477c:	18ed      	addgt	r5, r5, r3
 801477e:	2600      	movs	r6, #0
 8014780:	341a      	adds	r4, #26
 8014782:	42b5      	cmp	r5, r6
 8014784:	d11a      	bne.n	80147bc <_printf_common+0xc8>
 8014786:	2000      	movs	r0, #0
 8014788:	e008      	b.n	801479c <_printf_common+0xa8>
 801478a:	2301      	movs	r3, #1
 801478c:	4652      	mov	r2, sl
 801478e:	4641      	mov	r1, r8
 8014790:	4638      	mov	r0, r7
 8014792:	47c8      	blx	r9
 8014794:	3001      	adds	r0, #1
 8014796:	d103      	bne.n	80147a0 <_printf_common+0xac>
 8014798:	f04f 30ff 	mov.w	r0, #4294967295
 801479c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80147a0:	3501      	adds	r5, #1
 80147a2:	e7c6      	b.n	8014732 <_printf_common+0x3e>
 80147a4:	18e1      	adds	r1, r4, r3
 80147a6:	1c5a      	adds	r2, r3, #1
 80147a8:	2030      	movs	r0, #48	@ 0x30
 80147aa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80147ae:	4422      	add	r2, r4
 80147b0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80147b4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80147b8:	3302      	adds	r3, #2
 80147ba:	e7c7      	b.n	801474c <_printf_common+0x58>
 80147bc:	2301      	movs	r3, #1
 80147be:	4622      	mov	r2, r4
 80147c0:	4641      	mov	r1, r8
 80147c2:	4638      	mov	r0, r7
 80147c4:	47c8      	blx	r9
 80147c6:	3001      	adds	r0, #1
 80147c8:	d0e6      	beq.n	8014798 <_printf_common+0xa4>
 80147ca:	3601      	adds	r6, #1
 80147cc:	e7d9      	b.n	8014782 <_printf_common+0x8e>
	...

080147d0 <_printf_i>:
 80147d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80147d4:	7e0f      	ldrb	r7, [r1, #24]
 80147d6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80147d8:	2f78      	cmp	r7, #120	@ 0x78
 80147da:	4691      	mov	r9, r2
 80147dc:	4680      	mov	r8, r0
 80147de:	460c      	mov	r4, r1
 80147e0:	469a      	mov	sl, r3
 80147e2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80147e6:	d807      	bhi.n	80147f8 <_printf_i+0x28>
 80147e8:	2f62      	cmp	r7, #98	@ 0x62
 80147ea:	d80a      	bhi.n	8014802 <_printf_i+0x32>
 80147ec:	2f00      	cmp	r7, #0
 80147ee:	f000 80d2 	beq.w	8014996 <_printf_i+0x1c6>
 80147f2:	2f58      	cmp	r7, #88	@ 0x58
 80147f4:	f000 80b9 	beq.w	801496a <_printf_i+0x19a>
 80147f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80147fc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8014800:	e03a      	b.n	8014878 <_printf_i+0xa8>
 8014802:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8014806:	2b15      	cmp	r3, #21
 8014808:	d8f6      	bhi.n	80147f8 <_printf_i+0x28>
 801480a:	a101      	add	r1, pc, #4	@ (adr r1, 8014810 <_printf_i+0x40>)
 801480c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8014810:	08014869 	.word	0x08014869
 8014814:	0801487d 	.word	0x0801487d
 8014818:	080147f9 	.word	0x080147f9
 801481c:	080147f9 	.word	0x080147f9
 8014820:	080147f9 	.word	0x080147f9
 8014824:	080147f9 	.word	0x080147f9
 8014828:	0801487d 	.word	0x0801487d
 801482c:	080147f9 	.word	0x080147f9
 8014830:	080147f9 	.word	0x080147f9
 8014834:	080147f9 	.word	0x080147f9
 8014838:	080147f9 	.word	0x080147f9
 801483c:	0801497d 	.word	0x0801497d
 8014840:	080148a7 	.word	0x080148a7
 8014844:	08014937 	.word	0x08014937
 8014848:	080147f9 	.word	0x080147f9
 801484c:	080147f9 	.word	0x080147f9
 8014850:	0801499f 	.word	0x0801499f
 8014854:	080147f9 	.word	0x080147f9
 8014858:	080148a7 	.word	0x080148a7
 801485c:	080147f9 	.word	0x080147f9
 8014860:	080147f9 	.word	0x080147f9
 8014864:	0801493f 	.word	0x0801493f
 8014868:	6833      	ldr	r3, [r6, #0]
 801486a:	1d1a      	adds	r2, r3, #4
 801486c:	681b      	ldr	r3, [r3, #0]
 801486e:	6032      	str	r2, [r6, #0]
 8014870:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8014874:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8014878:	2301      	movs	r3, #1
 801487a:	e09d      	b.n	80149b8 <_printf_i+0x1e8>
 801487c:	6833      	ldr	r3, [r6, #0]
 801487e:	6820      	ldr	r0, [r4, #0]
 8014880:	1d19      	adds	r1, r3, #4
 8014882:	6031      	str	r1, [r6, #0]
 8014884:	0606      	lsls	r6, r0, #24
 8014886:	d501      	bpl.n	801488c <_printf_i+0xbc>
 8014888:	681d      	ldr	r5, [r3, #0]
 801488a:	e003      	b.n	8014894 <_printf_i+0xc4>
 801488c:	0645      	lsls	r5, r0, #25
 801488e:	d5fb      	bpl.n	8014888 <_printf_i+0xb8>
 8014890:	f9b3 5000 	ldrsh.w	r5, [r3]
 8014894:	2d00      	cmp	r5, #0
 8014896:	da03      	bge.n	80148a0 <_printf_i+0xd0>
 8014898:	232d      	movs	r3, #45	@ 0x2d
 801489a:	426d      	negs	r5, r5
 801489c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80148a0:	4859      	ldr	r0, [pc, #356]	@ (8014a08 <_printf_i+0x238>)
 80148a2:	230a      	movs	r3, #10
 80148a4:	e011      	b.n	80148ca <_printf_i+0xfa>
 80148a6:	6821      	ldr	r1, [r4, #0]
 80148a8:	6833      	ldr	r3, [r6, #0]
 80148aa:	0608      	lsls	r0, r1, #24
 80148ac:	f853 5b04 	ldr.w	r5, [r3], #4
 80148b0:	d402      	bmi.n	80148b8 <_printf_i+0xe8>
 80148b2:	0649      	lsls	r1, r1, #25
 80148b4:	bf48      	it	mi
 80148b6:	b2ad      	uxthmi	r5, r5
 80148b8:	2f6f      	cmp	r7, #111	@ 0x6f
 80148ba:	4853      	ldr	r0, [pc, #332]	@ (8014a08 <_printf_i+0x238>)
 80148bc:	6033      	str	r3, [r6, #0]
 80148be:	bf14      	ite	ne
 80148c0:	230a      	movne	r3, #10
 80148c2:	2308      	moveq	r3, #8
 80148c4:	2100      	movs	r1, #0
 80148c6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80148ca:	6866      	ldr	r6, [r4, #4]
 80148cc:	60a6      	str	r6, [r4, #8]
 80148ce:	2e00      	cmp	r6, #0
 80148d0:	bfa2      	ittt	ge
 80148d2:	6821      	ldrge	r1, [r4, #0]
 80148d4:	f021 0104 	bicge.w	r1, r1, #4
 80148d8:	6021      	strge	r1, [r4, #0]
 80148da:	b90d      	cbnz	r5, 80148e0 <_printf_i+0x110>
 80148dc:	2e00      	cmp	r6, #0
 80148de:	d04b      	beq.n	8014978 <_printf_i+0x1a8>
 80148e0:	4616      	mov	r6, r2
 80148e2:	fbb5 f1f3 	udiv	r1, r5, r3
 80148e6:	fb03 5711 	mls	r7, r3, r1, r5
 80148ea:	5dc7      	ldrb	r7, [r0, r7]
 80148ec:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80148f0:	462f      	mov	r7, r5
 80148f2:	42bb      	cmp	r3, r7
 80148f4:	460d      	mov	r5, r1
 80148f6:	d9f4      	bls.n	80148e2 <_printf_i+0x112>
 80148f8:	2b08      	cmp	r3, #8
 80148fa:	d10b      	bne.n	8014914 <_printf_i+0x144>
 80148fc:	6823      	ldr	r3, [r4, #0]
 80148fe:	07df      	lsls	r7, r3, #31
 8014900:	d508      	bpl.n	8014914 <_printf_i+0x144>
 8014902:	6923      	ldr	r3, [r4, #16]
 8014904:	6861      	ldr	r1, [r4, #4]
 8014906:	4299      	cmp	r1, r3
 8014908:	bfde      	ittt	le
 801490a:	2330      	movle	r3, #48	@ 0x30
 801490c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8014910:	f106 36ff 	addle.w	r6, r6, #4294967295
 8014914:	1b92      	subs	r2, r2, r6
 8014916:	6122      	str	r2, [r4, #16]
 8014918:	f8cd a000 	str.w	sl, [sp]
 801491c:	464b      	mov	r3, r9
 801491e:	aa03      	add	r2, sp, #12
 8014920:	4621      	mov	r1, r4
 8014922:	4640      	mov	r0, r8
 8014924:	f7ff fee6 	bl	80146f4 <_printf_common>
 8014928:	3001      	adds	r0, #1
 801492a:	d14a      	bne.n	80149c2 <_printf_i+0x1f2>
 801492c:	f04f 30ff 	mov.w	r0, #4294967295
 8014930:	b004      	add	sp, #16
 8014932:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014936:	6823      	ldr	r3, [r4, #0]
 8014938:	f043 0320 	orr.w	r3, r3, #32
 801493c:	6023      	str	r3, [r4, #0]
 801493e:	4833      	ldr	r0, [pc, #204]	@ (8014a0c <_printf_i+0x23c>)
 8014940:	2778      	movs	r7, #120	@ 0x78
 8014942:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8014946:	6823      	ldr	r3, [r4, #0]
 8014948:	6831      	ldr	r1, [r6, #0]
 801494a:	061f      	lsls	r7, r3, #24
 801494c:	f851 5b04 	ldr.w	r5, [r1], #4
 8014950:	d402      	bmi.n	8014958 <_printf_i+0x188>
 8014952:	065f      	lsls	r7, r3, #25
 8014954:	bf48      	it	mi
 8014956:	b2ad      	uxthmi	r5, r5
 8014958:	6031      	str	r1, [r6, #0]
 801495a:	07d9      	lsls	r1, r3, #31
 801495c:	bf44      	itt	mi
 801495e:	f043 0320 	orrmi.w	r3, r3, #32
 8014962:	6023      	strmi	r3, [r4, #0]
 8014964:	b11d      	cbz	r5, 801496e <_printf_i+0x19e>
 8014966:	2310      	movs	r3, #16
 8014968:	e7ac      	b.n	80148c4 <_printf_i+0xf4>
 801496a:	4827      	ldr	r0, [pc, #156]	@ (8014a08 <_printf_i+0x238>)
 801496c:	e7e9      	b.n	8014942 <_printf_i+0x172>
 801496e:	6823      	ldr	r3, [r4, #0]
 8014970:	f023 0320 	bic.w	r3, r3, #32
 8014974:	6023      	str	r3, [r4, #0]
 8014976:	e7f6      	b.n	8014966 <_printf_i+0x196>
 8014978:	4616      	mov	r6, r2
 801497a:	e7bd      	b.n	80148f8 <_printf_i+0x128>
 801497c:	6833      	ldr	r3, [r6, #0]
 801497e:	6825      	ldr	r5, [r4, #0]
 8014980:	6961      	ldr	r1, [r4, #20]
 8014982:	1d18      	adds	r0, r3, #4
 8014984:	6030      	str	r0, [r6, #0]
 8014986:	062e      	lsls	r6, r5, #24
 8014988:	681b      	ldr	r3, [r3, #0]
 801498a:	d501      	bpl.n	8014990 <_printf_i+0x1c0>
 801498c:	6019      	str	r1, [r3, #0]
 801498e:	e002      	b.n	8014996 <_printf_i+0x1c6>
 8014990:	0668      	lsls	r0, r5, #25
 8014992:	d5fb      	bpl.n	801498c <_printf_i+0x1bc>
 8014994:	8019      	strh	r1, [r3, #0]
 8014996:	2300      	movs	r3, #0
 8014998:	6123      	str	r3, [r4, #16]
 801499a:	4616      	mov	r6, r2
 801499c:	e7bc      	b.n	8014918 <_printf_i+0x148>
 801499e:	6833      	ldr	r3, [r6, #0]
 80149a0:	1d1a      	adds	r2, r3, #4
 80149a2:	6032      	str	r2, [r6, #0]
 80149a4:	681e      	ldr	r6, [r3, #0]
 80149a6:	6862      	ldr	r2, [r4, #4]
 80149a8:	2100      	movs	r1, #0
 80149aa:	4630      	mov	r0, r6
 80149ac:	f7eb fcc0 	bl	8000330 <memchr>
 80149b0:	b108      	cbz	r0, 80149b6 <_printf_i+0x1e6>
 80149b2:	1b80      	subs	r0, r0, r6
 80149b4:	6060      	str	r0, [r4, #4]
 80149b6:	6863      	ldr	r3, [r4, #4]
 80149b8:	6123      	str	r3, [r4, #16]
 80149ba:	2300      	movs	r3, #0
 80149bc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80149c0:	e7aa      	b.n	8014918 <_printf_i+0x148>
 80149c2:	6923      	ldr	r3, [r4, #16]
 80149c4:	4632      	mov	r2, r6
 80149c6:	4649      	mov	r1, r9
 80149c8:	4640      	mov	r0, r8
 80149ca:	47d0      	blx	sl
 80149cc:	3001      	adds	r0, #1
 80149ce:	d0ad      	beq.n	801492c <_printf_i+0x15c>
 80149d0:	6823      	ldr	r3, [r4, #0]
 80149d2:	079b      	lsls	r3, r3, #30
 80149d4:	d413      	bmi.n	80149fe <_printf_i+0x22e>
 80149d6:	68e0      	ldr	r0, [r4, #12]
 80149d8:	9b03      	ldr	r3, [sp, #12]
 80149da:	4298      	cmp	r0, r3
 80149dc:	bfb8      	it	lt
 80149de:	4618      	movlt	r0, r3
 80149e0:	e7a6      	b.n	8014930 <_printf_i+0x160>
 80149e2:	2301      	movs	r3, #1
 80149e4:	4632      	mov	r2, r6
 80149e6:	4649      	mov	r1, r9
 80149e8:	4640      	mov	r0, r8
 80149ea:	47d0      	blx	sl
 80149ec:	3001      	adds	r0, #1
 80149ee:	d09d      	beq.n	801492c <_printf_i+0x15c>
 80149f0:	3501      	adds	r5, #1
 80149f2:	68e3      	ldr	r3, [r4, #12]
 80149f4:	9903      	ldr	r1, [sp, #12]
 80149f6:	1a5b      	subs	r3, r3, r1
 80149f8:	42ab      	cmp	r3, r5
 80149fa:	dcf2      	bgt.n	80149e2 <_printf_i+0x212>
 80149fc:	e7eb      	b.n	80149d6 <_printf_i+0x206>
 80149fe:	2500      	movs	r5, #0
 8014a00:	f104 0619 	add.w	r6, r4, #25
 8014a04:	e7f5      	b.n	80149f2 <_printf_i+0x222>
 8014a06:	bf00      	nop
 8014a08:	0801862b 	.word	0x0801862b
 8014a0c:	0801863c 	.word	0x0801863c

08014a10 <std>:
 8014a10:	2300      	movs	r3, #0
 8014a12:	b510      	push	{r4, lr}
 8014a14:	4604      	mov	r4, r0
 8014a16:	e9c0 3300 	strd	r3, r3, [r0]
 8014a1a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8014a1e:	6083      	str	r3, [r0, #8]
 8014a20:	8181      	strh	r1, [r0, #12]
 8014a22:	6643      	str	r3, [r0, #100]	@ 0x64
 8014a24:	81c2      	strh	r2, [r0, #14]
 8014a26:	6183      	str	r3, [r0, #24]
 8014a28:	4619      	mov	r1, r3
 8014a2a:	2208      	movs	r2, #8
 8014a2c:	305c      	adds	r0, #92	@ 0x5c
 8014a2e:	f000 f914 	bl	8014c5a <memset>
 8014a32:	4b0d      	ldr	r3, [pc, #52]	@ (8014a68 <std+0x58>)
 8014a34:	6263      	str	r3, [r4, #36]	@ 0x24
 8014a36:	4b0d      	ldr	r3, [pc, #52]	@ (8014a6c <std+0x5c>)
 8014a38:	62a3      	str	r3, [r4, #40]	@ 0x28
 8014a3a:	4b0d      	ldr	r3, [pc, #52]	@ (8014a70 <std+0x60>)
 8014a3c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8014a3e:	4b0d      	ldr	r3, [pc, #52]	@ (8014a74 <std+0x64>)
 8014a40:	6323      	str	r3, [r4, #48]	@ 0x30
 8014a42:	4b0d      	ldr	r3, [pc, #52]	@ (8014a78 <std+0x68>)
 8014a44:	6224      	str	r4, [r4, #32]
 8014a46:	429c      	cmp	r4, r3
 8014a48:	d006      	beq.n	8014a58 <std+0x48>
 8014a4a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8014a4e:	4294      	cmp	r4, r2
 8014a50:	d002      	beq.n	8014a58 <std+0x48>
 8014a52:	33d0      	adds	r3, #208	@ 0xd0
 8014a54:	429c      	cmp	r4, r3
 8014a56:	d105      	bne.n	8014a64 <std+0x54>
 8014a58:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8014a5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014a60:	f000 b996 	b.w	8014d90 <__retarget_lock_init_recursive>
 8014a64:	bd10      	pop	{r4, pc}
 8014a66:	bf00      	nop
 8014a68:	08014bd5 	.word	0x08014bd5
 8014a6c:	08014bf7 	.word	0x08014bf7
 8014a70:	08014c2f 	.word	0x08014c2f
 8014a74:	08014c53 	.word	0x08014c53
 8014a78:	24006b0c 	.word	0x24006b0c

08014a7c <stdio_exit_handler>:
 8014a7c:	4a02      	ldr	r2, [pc, #8]	@ (8014a88 <stdio_exit_handler+0xc>)
 8014a7e:	4903      	ldr	r1, [pc, #12]	@ (8014a8c <stdio_exit_handler+0x10>)
 8014a80:	4803      	ldr	r0, [pc, #12]	@ (8014a90 <stdio_exit_handler+0x14>)
 8014a82:	f000 b869 	b.w	8014b58 <_fwalk_sglue>
 8014a86:	bf00      	nop
 8014a88:	24000104 	.word	0x24000104
 8014a8c:	08016f4d 	.word	0x08016f4d
 8014a90:	24000280 	.word	0x24000280

08014a94 <cleanup_stdio>:
 8014a94:	6841      	ldr	r1, [r0, #4]
 8014a96:	4b0c      	ldr	r3, [pc, #48]	@ (8014ac8 <cleanup_stdio+0x34>)
 8014a98:	4299      	cmp	r1, r3
 8014a9a:	b510      	push	{r4, lr}
 8014a9c:	4604      	mov	r4, r0
 8014a9e:	d001      	beq.n	8014aa4 <cleanup_stdio+0x10>
 8014aa0:	f002 fa54 	bl	8016f4c <_fflush_r>
 8014aa4:	68a1      	ldr	r1, [r4, #8]
 8014aa6:	4b09      	ldr	r3, [pc, #36]	@ (8014acc <cleanup_stdio+0x38>)
 8014aa8:	4299      	cmp	r1, r3
 8014aaa:	d002      	beq.n	8014ab2 <cleanup_stdio+0x1e>
 8014aac:	4620      	mov	r0, r4
 8014aae:	f002 fa4d 	bl	8016f4c <_fflush_r>
 8014ab2:	68e1      	ldr	r1, [r4, #12]
 8014ab4:	4b06      	ldr	r3, [pc, #24]	@ (8014ad0 <cleanup_stdio+0x3c>)
 8014ab6:	4299      	cmp	r1, r3
 8014ab8:	d004      	beq.n	8014ac4 <cleanup_stdio+0x30>
 8014aba:	4620      	mov	r0, r4
 8014abc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014ac0:	f002 ba44 	b.w	8016f4c <_fflush_r>
 8014ac4:	bd10      	pop	{r4, pc}
 8014ac6:	bf00      	nop
 8014ac8:	24006b0c 	.word	0x24006b0c
 8014acc:	24006b74 	.word	0x24006b74
 8014ad0:	24006bdc 	.word	0x24006bdc

08014ad4 <global_stdio_init.part.0>:
 8014ad4:	b510      	push	{r4, lr}
 8014ad6:	4b0b      	ldr	r3, [pc, #44]	@ (8014b04 <global_stdio_init.part.0+0x30>)
 8014ad8:	4c0b      	ldr	r4, [pc, #44]	@ (8014b08 <global_stdio_init.part.0+0x34>)
 8014ada:	4a0c      	ldr	r2, [pc, #48]	@ (8014b0c <global_stdio_init.part.0+0x38>)
 8014adc:	601a      	str	r2, [r3, #0]
 8014ade:	4620      	mov	r0, r4
 8014ae0:	2200      	movs	r2, #0
 8014ae2:	2104      	movs	r1, #4
 8014ae4:	f7ff ff94 	bl	8014a10 <std>
 8014ae8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8014aec:	2201      	movs	r2, #1
 8014aee:	2109      	movs	r1, #9
 8014af0:	f7ff ff8e 	bl	8014a10 <std>
 8014af4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8014af8:	2202      	movs	r2, #2
 8014afa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014afe:	2112      	movs	r1, #18
 8014b00:	f7ff bf86 	b.w	8014a10 <std>
 8014b04:	24006c44 	.word	0x24006c44
 8014b08:	24006b0c 	.word	0x24006b0c
 8014b0c:	08014a7d 	.word	0x08014a7d

08014b10 <__sfp_lock_acquire>:
 8014b10:	4801      	ldr	r0, [pc, #4]	@ (8014b18 <__sfp_lock_acquire+0x8>)
 8014b12:	f000 b93e 	b.w	8014d92 <__retarget_lock_acquire_recursive>
 8014b16:	bf00      	nop
 8014b18:	24006c4d 	.word	0x24006c4d

08014b1c <__sfp_lock_release>:
 8014b1c:	4801      	ldr	r0, [pc, #4]	@ (8014b24 <__sfp_lock_release+0x8>)
 8014b1e:	f000 b939 	b.w	8014d94 <__retarget_lock_release_recursive>
 8014b22:	bf00      	nop
 8014b24:	24006c4d 	.word	0x24006c4d

08014b28 <__sinit>:
 8014b28:	b510      	push	{r4, lr}
 8014b2a:	4604      	mov	r4, r0
 8014b2c:	f7ff fff0 	bl	8014b10 <__sfp_lock_acquire>
 8014b30:	6a23      	ldr	r3, [r4, #32]
 8014b32:	b11b      	cbz	r3, 8014b3c <__sinit+0x14>
 8014b34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014b38:	f7ff bff0 	b.w	8014b1c <__sfp_lock_release>
 8014b3c:	4b04      	ldr	r3, [pc, #16]	@ (8014b50 <__sinit+0x28>)
 8014b3e:	6223      	str	r3, [r4, #32]
 8014b40:	4b04      	ldr	r3, [pc, #16]	@ (8014b54 <__sinit+0x2c>)
 8014b42:	681b      	ldr	r3, [r3, #0]
 8014b44:	2b00      	cmp	r3, #0
 8014b46:	d1f5      	bne.n	8014b34 <__sinit+0xc>
 8014b48:	f7ff ffc4 	bl	8014ad4 <global_stdio_init.part.0>
 8014b4c:	e7f2      	b.n	8014b34 <__sinit+0xc>
 8014b4e:	bf00      	nop
 8014b50:	08014a95 	.word	0x08014a95
 8014b54:	24006c44 	.word	0x24006c44

08014b58 <_fwalk_sglue>:
 8014b58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014b5c:	4607      	mov	r7, r0
 8014b5e:	4688      	mov	r8, r1
 8014b60:	4614      	mov	r4, r2
 8014b62:	2600      	movs	r6, #0
 8014b64:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8014b68:	f1b9 0901 	subs.w	r9, r9, #1
 8014b6c:	d505      	bpl.n	8014b7a <_fwalk_sglue+0x22>
 8014b6e:	6824      	ldr	r4, [r4, #0]
 8014b70:	2c00      	cmp	r4, #0
 8014b72:	d1f7      	bne.n	8014b64 <_fwalk_sglue+0xc>
 8014b74:	4630      	mov	r0, r6
 8014b76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014b7a:	89ab      	ldrh	r3, [r5, #12]
 8014b7c:	2b01      	cmp	r3, #1
 8014b7e:	d907      	bls.n	8014b90 <_fwalk_sglue+0x38>
 8014b80:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8014b84:	3301      	adds	r3, #1
 8014b86:	d003      	beq.n	8014b90 <_fwalk_sglue+0x38>
 8014b88:	4629      	mov	r1, r5
 8014b8a:	4638      	mov	r0, r7
 8014b8c:	47c0      	blx	r8
 8014b8e:	4306      	orrs	r6, r0
 8014b90:	3568      	adds	r5, #104	@ 0x68
 8014b92:	e7e9      	b.n	8014b68 <_fwalk_sglue+0x10>

08014b94 <siprintf>:
 8014b94:	b40e      	push	{r1, r2, r3}
 8014b96:	b500      	push	{lr}
 8014b98:	b09c      	sub	sp, #112	@ 0x70
 8014b9a:	ab1d      	add	r3, sp, #116	@ 0x74
 8014b9c:	9002      	str	r0, [sp, #8]
 8014b9e:	9006      	str	r0, [sp, #24]
 8014ba0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8014ba4:	4809      	ldr	r0, [pc, #36]	@ (8014bcc <siprintf+0x38>)
 8014ba6:	9107      	str	r1, [sp, #28]
 8014ba8:	9104      	str	r1, [sp, #16]
 8014baa:	4909      	ldr	r1, [pc, #36]	@ (8014bd0 <siprintf+0x3c>)
 8014bac:	f853 2b04 	ldr.w	r2, [r3], #4
 8014bb0:	9105      	str	r1, [sp, #20]
 8014bb2:	6800      	ldr	r0, [r0, #0]
 8014bb4:	9301      	str	r3, [sp, #4]
 8014bb6:	a902      	add	r1, sp, #8
 8014bb8:	f002 f848 	bl	8016c4c <_svfiprintf_r>
 8014bbc:	9b02      	ldr	r3, [sp, #8]
 8014bbe:	2200      	movs	r2, #0
 8014bc0:	701a      	strb	r2, [r3, #0]
 8014bc2:	b01c      	add	sp, #112	@ 0x70
 8014bc4:	f85d eb04 	ldr.w	lr, [sp], #4
 8014bc8:	b003      	add	sp, #12
 8014bca:	4770      	bx	lr
 8014bcc:	2400027c 	.word	0x2400027c
 8014bd0:	ffff0208 	.word	0xffff0208

08014bd4 <__sread>:
 8014bd4:	b510      	push	{r4, lr}
 8014bd6:	460c      	mov	r4, r1
 8014bd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014bdc:	f000 f88a 	bl	8014cf4 <_read_r>
 8014be0:	2800      	cmp	r0, #0
 8014be2:	bfab      	itete	ge
 8014be4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8014be6:	89a3      	ldrhlt	r3, [r4, #12]
 8014be8:	181b      	addge	r3, r3, r0
 8014bea:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8014bee:	bfac      	ite	ge
 8014bf0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8014bf2:	81a3      	strhlt	r3, [r4, #12]
 8014bf4:	bd10      	pop	{r4, pc}

08014bf6 <__swrite>:
 8014bf6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014bfa:	461f      	mov	r7, r3
 8014bfc:	898b      	ldrh	r3, [r1, #12]
 8014bfe:	05db      	lsls	r3, r3, #23
 8014c00:	4605      	mov	r5, r0
 8014c02:	460c      	mov	r4, r1
 8014c04:	4616      	mov	r6, r2
 8014c06:	d505      	bpl.n	8014c14 <__swrite+0x1e>
 8014c08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014c0c:	2302      	movs	r3, #2
 8014c0e:	2200      	movs	r2, #0
 8014c10:	f000 f85e 	bl	8014cd0 <_lseek_r>
 8014c14:	89a3      	ldrh	r3, [r4, #12]
 8014c16:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014c1a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8014c1e:	81a3      	strh	r3, [r4, #12]
 8014c20:	4632      	mov	r2, r6
 8014c22:	463b      	mov	r3, r7
 8014c24:	4628      	mov	r0, r5
 8014c26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014c2a:	f000 b875 	b.w	8014d18 <_write_r>

08014c2e <__sseek>:
 8014c2e:	b510      	push	{r4, lr}
 8014c30:	460c      	mov	r4, r1
 8014c32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014c36:	f000 f84b 	bl	8014cd0 <_lseek_r>
 8014c3a:	1c43      	adds	r3, r0, #1
 8014c3c:	89a3      	ldrh	r3, [r4, #12]
 8014c3e:	bf15      	itete	ne
 8014c40:	6560      	strne	r0, [r4, #84]	@ 0x54
 8014c42:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8014c46:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8014c4a:	81a3      	strheq	r3, [r4, #12]
 8014c4c:	bf18      	it	ne
 8014c4e:	81a3      	strhne	r3, [r4, #12]
 8014c50:	bd10      	pop	{r4, pc}

08014c52 <__sclose>:
 8014c52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014c56:	f000 b82b 	b.w	8014cb0 <_close_r>

08014c5a <memset>:
 8014c5a:	4402      	add	r2, r0
 8014c5c:	4603      	mov	r3, r0
 8014c5e:	4293      	cmp	r3, r2
 8014c60:	d100      	bne.n	8014c64 <memset+0xa>
 8014c62:	4770      	bx	lr
 8014c64:	f803 1b01 	strb.w	r1, [r3], #1
 8014c68:	e7f9      	b.n	8014c5e <memset+0x4>

08014c6a <strchr>:
 8014c6a:	b2c9      	uxtb	r1, r1
 8014c6c:	4603      	mov	r3, r0
 8014c6e:	4618      	mov	r0, r3
 8014c70:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014c74:	b112      	cbz	r2, 8014c7c <strchr+0x12>
 8014c76:	428a      	cmp	r2, r1
 8014c78:	d1f9      	bne.n	8014c6e <strchr+0x4>
 8014c7a:	4770      	bx	lr
 8014c7c:	2900      	cmp	r1, #0
 8014c7e:	bf18      	it	ne
 8014c80:	2000      	movne	r0, #0
 8014c82:	4770      	bx	lr

08014c84 <strncmp>:
 8014c84:	b510      	push	{r4, lr}
 8014c86:	b16a      	cbz	r2, 8014ca4 <strncmp+0x20>
 8014c88:	3901      	subs	r1, #1
 8014c8a:	1884      	adds	r4, r0, r2
 8014c8c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014c90:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8014c94:	429a      	cmp	r2, r3
 8014c96:	d103      	bne.n	8014ca0 <strncmp+0x1c>
 8014c98:	42a0      	cmp	r0, r4
 8014c9a:	d001      	beq.n	8014ca0 <strncmp+0x1c>
 8014c9c:	2a00      	cmp	r2, #0
 8014c9e:	d1f5      	bne.n	8014c8c <strncmp+0x8>
 8014ca0:	1ad0      	subs	r0, r2, r3
 8014ca2:	bd10      	pop	{r4, pc}
 8014ca4:	4610      	mov	r0, r2
 8014ca6:	e7fc      	b.n	8014ca2 <strncmp+0x1e>

08014ca8 <_localeconv_r>:
 8014ca8:	4800      	ldr	r0, [pc, #0]	@ (8014cac <_localeconv_r+0x4>)
 8014caa:	4770      	bx	lr
 8014cac:	24000200 	.word	0x24000200

08014cb0 <_close_r>:
 8014cb0:	b538      	push	{r3, r4, r5, lr}
 8014cb2:	4d06      	ldr	r5, [pc, #24]	@ (8014ccc <_close_r+0x1c>)
 8014cb4:	2300      	movs	r3, #0
 8014cb6:	4604      	mov	r4, r0
 8014cb8:	4608      	mov	r0, r1
 8014cba:	602b      	str	r3, [r5, #0]
 8014cbc:	f7ed fafa 	bl	80022b4 <_close>
 8014cc0:	1c43      	adds	r3, r0, #1
 8014cc2:	d102      	bne.n	8014cca <_close_r+0x1a>
 8014cc4:	682b      	ldr	r3, [r5, #0]
 8014cc6:	b103      	cbz	r3, 8014cca <_close_r+0x1a>
 8014cc8:	6023      	str	r3, [r4, #0]
 8014cca:	bd38      	pop	{r3, r4, r5, pc}
 8014ccc:	24006c48 	.word	0x24006c48

08014cd0 <_lseek_r>:
 8014cd0:	b538      	push	{r3, r4, r5, lr}
 8014cd2:	4d07      	ldr	r5, [pc, #28]	@ (8014cf0 <_lseek_r+0x20>)
 8014cd4:	4604      	mov	r4, r0
 8014cd6:	4608      	mov	r0, r1
 8014cd8:	4611      	mov	r1, r2
 8014cda:	2200      	movs	r2, #0
 8014cdc:	602a      	str	r2, [r5, #0]
 8014cde:	461a      	mov	r2, r3
 8014ce0:	f7ed fb0f 	bl	8002302 <_lseek>
 8014ce4:	1c43      	adds	r3, r0, #1
 8014ce6:	d102      	bne.n	8014cee <_lseek_r+0x1e>
 8014ce8:	682b      	ldr	r3, [r5, #0]
 8014cea:	b103      	cbz	r3, 8014cee <_lseek_r+0x1e>
 8014cec:	6023      	str	r3, [r4, #0]
 8014cee:	bd38      	pop	{r3, r4, r5, pc}
 8014cf0:	24006c48 	.word	0x24006c48

08014cf4 <_read_r>:
 8014cf4:	b538      	push	{r3, r4, r5, lr}
 8014cf6:	4d07      	ldr	r5, [pc, #28]	@ (8014d14 <_read_r+0x20>)
 8014cf8:	4604      	mov	r4, r0
 8014cfa:	4608      	mov	r0, r1
 8014cfc:	4611      	mov	r1, r2
 8014cfe:	2200      	movs	r2, #0
 8014d00:	602a      	str	r2, [r5, #0]
 8014d02:	461a      	mov	r2, r3
 8014d04:	f7ed fa9d 	bl	8002242 <_read>
 8014d08:	1c43      	adds	r3, r0, #1
 8014d0a:	d102      	bne.n	8014d12 <_read_r+0x1e>
 8014d0c:	682b      	ldr	r3, [r5, #0]
 8014d0e:	b103      	cbz	r3, 8014d12 <_read_r+0x1e>
 8014d10:	6023      	str	r3, [r4, #0]
 8014d12:	bd38      	pop	{r3, r4, r5, pc}
 8014d14:	24006c48 	.word	0x24006c48

08014d18 <_write_r>:
 8014d18:	b538      	push	{r3, r4, r5, lr}
 8014d1a:	4d07      	ldr	r5, [pc, #28]	@ (8014d38 <_write_r+0x20>)
 8014d1c:	4604      	mov	r4, r0
 8014d1e:	4608      	mov	r0, r1
 8014d20:	4611      	mov	r1, r2
 8014d22:	2200      	movs	r2, #0
 8014d24:	602a      	str	r2, [r5, #0]
 8014d26:	461a      	mov	r2, r3
 8014d28:	f7ed faa8 	bl	800227c <_write>
 8014d2c:	1c43      	adds	r3, r0, #1
 8014d2e:	d102      	bne.n	8014d36 <_write_r+0x1e>
 8014d30:	682b      	ldr	r3, [r5, #0]
 8014d32:	b103      	cbz	r3, 8014d36 <_write_r+0x1e>
 8014d34:	6023      	str	r3, [r4, #0]
 8014d36:	bd38      	pop	{r3, r4, r5, pc}
 8014d38:	24006c48 	.word	0x24006c48

08014d3c <__errno>:
 8014d3c:	4b01      	ldr	r3, [pc, #4]	@ (8014d44 <__errno+0x8>)
 8014d3e:	6818      	ldr	r0, [r3, #0]
 8014d40:	4770      	bx	lr
 8014d42:	bf00      	nop
 8014d44:	2400027c 	.word	0x2400027c

08014d48 <__libc_init_array>:
 8014d48:	b570      	push	{r4, r5, r6, lr}
 8014d4a:	4d0d      	ldr	r5, [pc, #52]	@ (8014d80 <__libc_init_array+0x38>)
 8014d4c:	4c0d      	ldr	r4, [pc, #52]	@ (8014d84 <__libc_init_array+0x3c>)
 8014d4e:	1b64      	subs	r4, r4, r5
 8014d50:	10a4      	asrs	r4, r4, #2
 8014d52:	2600      	movs	r6, #0
 8014d54:	42a6      	cmp	r6, r4
 8014d56:	d109      	bne.n	8014d6c <__libc_init_array+0x24>
 8014d58:	4d0b      	ldr	r5, [pc, #44]	@ (8014d88 <__libc_init_array+0x40>)
 8014d5a:	4c0c      	ldr	r4, [pc, #48]	@ (8014d8c <__libc_init_array+0x44>)
 8014d5c:	f003 fb18 	bl	8018390 <_init>
 8014d60:	1b64      	subs	r4, r4, r5
 8014d62:	10a4      	asrs	r4, r4, #2
 8014d64:	2600      	movs	r6, #0
 8014d66:	42a6      	cmp	r6, r4
 8014d68:	d105      	bne.n	8014d76 <__libc_init_array+0x2e>
 8014d6a:	bd70      	pop	{r4, r5, r6, pc}
 8014d6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8014d70:	4798      	blx	r3
 8014d72:	3601      	adds	r6, #1
 8014d74:	e7ee      	b.n	8014d54 <__libc_init_array+0xc>
 8014d76:	f855 3b04 	ldr.w	r3, [r5], #4
 8014d7a:	4798      	blx	r3
 8014d7c:	3601      	adds	r6, #1
 8014d7e:	e7f2      	b.n	8014d66 <__libc_init_array+0x1e>
 8014d80:	08018c08 	.word	0x08018c08
 8014d84:	08018c08 	.word	0x08018c08
 8014d88:	08018c08 	.word	0x08018c08
 8014d8c:	08018c0c 	.word	0x08018c0c

08014d90 <__retarget_lock_init_recursive>:
 8014d90:	4770      	bx	lr

08014d92 <__retarget_lock_acquire_recursive>:
 8014d92:	4770      	bx	lr

08014d94 <__retarget_lock_release_recursive>:
 8014d94:	4770      	bx	lr

08014d96 <memcpy>:
 8014d96:	440a      	add	r2, r1
 8014d98:	4291      	cmp	r1, r2
 8014d9a:	f100 33ff 	add.w	r3, r0, #4294967295
 8014d9e:	d100      	bne.n	8014da2 <memcpy+0xc>
 8014da0:	4770      	bx	lr
 8014da2:	b510      	push	{r4, lr}
 8014da4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014da8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014dac:	4291      	cmp	r1, r2
 8014dae:	d1f9      	bne.n	8014da4 <memcpy+0xe>
 8014db0:	bd10      	pop	{r4, pc}
 8014db2:	0000      	movs	r0, r0
 8014db4:	0000      	movs	r0, r0
	...

08014db8 <nan>:
 8014db8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8014dc0 <nan+0x8>
 8014dbc:	4770      	bx	lr
 8014dbe:	bf00      	nop
 8014dc0:	00000000 	.word	0x00000000
 8014dc4:	7ff80000 	.word	0x7ff80000

08014dc8 <quorem>:
 8014dc8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014dcc:	6903      	ldr	r3, [r0, #16]
 8014dce:	690c      	ldr	r4, [r1, #16]
 8014dd0:	42a3      	cmp	r3, r4
 8014dd2:	4607      	mov	r7, r0
 8014dd4:	db7e      	blt.n	8014ed4 <quorem+0x10c>
 8014dd6:	3c01      	subs	r4, #1
 8014dd8:	f101 0814 	add.w	r8, r1, #20
 8014ddc:	00a3      	lsls	r3, r4, #2
 8014dde:	f100 0514 	add.w	r5, r0, #20
 8014de2:	9300      	str	r3, [sp, #0]
 8014de4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8014de8:	9301      	str	r3, [sp, #4]
 8014dea:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8014dee:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8014df2:	3301      	adds	r3, #1
 8014df4:	429a      	cmp	r2, r3
 8014df6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8014dfa:	fbb2 f6f3 	udiv	r6, r2, r3
 8014dfe:	d32e      	bcc.n	8014e5e <quorem+0x96>
 8014e00:	f04f 0a00 	mov.w	sl, #0
 8014e04:	46c4      	mov	ip, r8
 8014e06:	46ae      	mov	lr, r5
 8014e08:	46d3      	mov	fp, sl
 8014e0a:	f85c 3b04 	ldr.w	r3, [ip], #4
 8014e0e:	b298      	uxth	r0, r3
 8014e10:	fb06 a000 	mla	r0, r6, r0, sl
 8014e14:	0c02      	lsrs	r2, r0, #16
 8014e16:	0c1b      	lsrs	r3, r3, #16
 8014e18:	fb06 2303 	mla	r3, r6, r3, r2
 8014e1c:	f8de 2000 	ldr.w	r2, [lr]
 8014e20:	b280      	uxth	r0, r0
 8014e22:	b292      	uxth	r2, r2
 8014e24:	1a12      	subs	r2, r2, r0
 8014e26:	445a      	add	r2, fp
 8014e28:	f8de 0000 	ldr.w	r0, [lr]
 8014e2c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8014e30:	b29b      	uxth	r3, r3
 8014e32:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8014e36:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8014e3a:	b292      	uxth	r2, r2
 8014e3c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8014e40:	45e1      	cmp	r9, ip
 8014e42:	f84e 2b04 	str.w	r2, [lr], #4
 8014e46:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8014e4a:	d2de      	bcs.n	8014e0a <quorem+0x42>
 8014e4c:	9b00      	ldr	r3, [sp, #0]
 8014e4e:	58eb      	ldr	r3, [r5, r3]
 8014e50:	b92b      	cbnz	r3, 8014e5e <quorem+0x96>
 8014e52:	9b01      	ldr	r3, [sp, #4]
 8014e54:	3b04      	subs	r3, #4
 8014e56:	429d      	cmp	r5, r3
 8014e58:	461a      	mov	r2, r3
 8014e5a:	d32f      	bcc.n	8014ebc <quorem+0xf4>
 8014e5c:	613c      	str	r4, [r7, #16]
 8014e5e:	4638      	mov	r0, r7
 8014e60:	f001 fca0 	bl	80167a4 <__mcmp>
 8014e64:	2800      	cmp	r0, #0
 8014e66:	db25      	blt.n	8014eb4 <quorem+0xec>
 8014e68:	4629      	mov	r1, r5
 8014e6a:	2000      	movs	r0, #0
 8014e6c:	f858 2b04 	ldr.w	r2, [r8], #4
 8014e70:	f8d1 c000 	ldr.w	ip, [r1]
 8014e74:	fa1f fe82 	uxth.w	lr, r2
 8014e78:	fa1f f38c 	uxth.w	r3, ip
 8014e7c:	eba3 030e 	sub.w	r3, r3, lr
 8014e80:	4403      	add	r3, r0
 8014e82:	0c12      	lsrs	r2, r2, #16
 8014e84:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8014e88:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8014e8c:	b29b      	uxth	r3, r3
 8014e8e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014e92:	45c1      	cmp	r9, r8
 8014e94:	f841 3b04 	str.w	r3, [r1], #4
 8014e98:	ea4f 4022 	mov.w	r0, r2, asr #16
 8014e9c:	d2e6      	bcs.n	8014e6c <quorem+0xa4>
 8014e9e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8014ea2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8014ea6:	b922      	cbnz	r2, 8014eb2 <quorem+0xea>
 8014ea8:	3b04      	subs	r3, #4
 8014eaa:	429d      	cmp	r5, r3
 8014eac:	461a      	mov	r2, r3
 8014eae:	d30b      	bcc.n	8014ec8 <quorem+0x100>
 8014eb0:	613c      	str	r4, [r7, #16]
 8014eb2:	3601      	adds	r6, #1
 8014eb4:	4630      	mov	r0, r6
 8014eb6:	b003      	add	sp, #12
 8014eb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014ebc:	6812      	ldr	r2, [r2, #0]
 8014ebe:	3b04      	subs	r3, #4
 8014ec0:	2a00      	cmp	r2, #0
 8014ec2:	d1cb      	bne.n	8014e5c <quorem+0x94>
 8014ec4:	3c01      	subs	r4, #1
 8014ec6:	e7c6      	b.n	8014e56 <quorem+0x8e>
 8014ec8:	6812      	ldr	r2, [r2, #0]
 8014eca:	3b04      	subs	r3, #4
 8014ecc:	2a00      	cmp	r2, #0
 8014ece:	d1ef      	bne.n	8014eb0 <quorem+0xe8>
 8014ed0:	3c01      	subs	r4, #1
 8014ed2:	e7ea      	b.n	8014eaa <quorem+0xe2>
 8014ed4:	2000      	movs	r0, #0
 8014ed6:	e7ee      	b.n	8014eb6 <quorem+0xee>

08014ed8 <_dtoa_r>:
 8014ed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014edc:	ed2d 8b02 	vpush	{d8}
 8014ee0:	69c7      	ldr	r7, [r0, #28]
 8014ee2:	b091      	sub	sp, #68	@ 0x44
 8014ee4:	ed8d 0b02 	vstr	d0, [sp, #8]
 8014ee8:	ec55 4b10 	vmov	r4, r5, d0
 8014eec:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 8014eee:	9107      	str	r1, [sp, #28]
 8014ef0:	4681      	mov	r9, r0
 8014ef2:	9209      	str	r2, [sp, #36]	@ 0x24
 8014ef4:	930d      	str	r3, [sp, #52]	@ 0x34
 8014ef6:	b97f      	cbnz	r7, 8014f18 <_dtoa_r+0x40>
 8014ef8:	2010      	movs	r0, #16
 8014efa:	f001 f8c7 	bl	801608c <malloc>
 8014efe:	4602      	mov	r2, r0
 8014f00:	f8c9 001c 	str.w	r0, [r9, #28]
 8014f04:	b920      	cbnz	r0, 8014f10 <_dtoa_r+0x38>
 8014f06:	4ba0      	ldr	r3, [pc, #640]	@ (8015188 <_dtoa_r+0x2b0>)
 8014f08:	21ef      	movs	r1, #239	@ 0xef
 8014f0a:	48a0      	ldr	r0, [pc, #640]	@ (801518c <_dtoa_r+0x2b4>)
 8014f0c:	f002 f870 	bl	8016ff0 <__assert_func>
 8014f10:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8014f14:	6007      	str	r7, [r0, #0]
 8014f16:	60c7      	str	r7, [r0, #12]
 8014f18:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8014f1c:	6819      	ldr	r1, [r3, #0]
 8014f1e:	b159      	cbz	r1, 8014f38 <_dtoa_r+0x60>
 8014f20:	685a      	ldr	r2, [r3, #4]
 8014f22:	604a      	str	r2, [r1, #4]
 8014f24:	2301      	movs	r3, #1
 8014f26:	4093      	lsls	r3, r2
 8014f28:	608b      	str	r3, [r1, #8]
 8014f2a:	4648      	mov	r0, r9
 8014f2c:	f001 f9b6 	bl	801629c <_Bfree>
 8014f30:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8014f34:	2200      	movs	r2, #0
 8014f36:	601a      	str	r2, [r3, #0]
 8014f38:	1e2b      	subs	r3, r5, #0
 8014f3a:	bfbb      	ittet	lt
 8014f3c:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8014f40:	9303      	strlt	r3, [sp, #12]
 8014f42:	2300      	movge	r3, #0
 8014f44:	2201      	movlt	r2, #1
 8014f46:	bfac      	ite	ge
 8014f48:	6033      	strge	r3, [r6, #0]
 8014f4a:	6032      	strlt	r2, [r6, #0]
 8014f4c:	4b90      	ldr	r3, [pc, #576]	@ (8015190 <_dtoa_r+0x2b8>)
 8014f4e:	9e03      	ldr	r6, [sp, #12]
 8014f50:	43b3      	bics	r3, r6
 8014f52:	d110      	bne.n	8014f76 <_dtoa_r+0x9e>
 8014f54:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8014f56:	f242 730f 	movw	r3, #9999	@ 0x270f
 8014f5a:	6013      	str	r3, [r2, #0]
 8014f5c:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8014f60:	4323      	orrs	r3, r4
 8014f62:	f000 84de 	beq.w	8015922 <_dtoa_r+0xa4a>
 8014f66:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8014f68:	4f8a      	ldr	r7, [pc, #552]	@ (8015194 <_dtoa_r+0x2bc>)
 8014f6a:	2b00      	cmp	r3, #0
 8014f6c:	f000 84e0 	beq.w	8015930 <_dtoa_r+0xa58>
 8014f70:	1cfb      	adds	r3, r7, #3
 8014f72:	f000 bcdb 	b.w	801592c <_dtoa_r+0xa54>
 8014f76:	ed9d 8b02 	vldr	d8, [sp, #8]
 8014f7a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8014f7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014f82:	d10a      	bne.n	8014f9a <_dtoa_r+0xc2>
 8014f84:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8014f86:	2301      	movs	r3, #1
 8014f88:	6013      	str	r3, [r2, #0]
 8014f8a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8014f8c:	b113      	cbz	r3, 8014f94 <_dtoa_r+0xbc>
 8014f8e:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8014f90:	4b81      	ldr	r3, [pc, #516]	@ (8015198 <_dtoa_r+0x2c0>)
 8014f92:	6013      	str	r3, [r2, #0]
 8014f94:	4f81      	ldr	r7, [pc, #516]	@ (801519c <_dtoa_r+0x2c4>)
 8014f96:	f000 bccb 	b.w	8015930 <_dtoa_r+0xa58>
 8014f9a:	aa0e      	add	r2, sp, #56	@ 0x38
 8014f9c:	a90f      	add	r1, sp, #60	@ 0x3c
 8014f9e:	4648      	mov	r0, r9
 8014fa0:	eeb0 0b48 	vmov.f64	d0, d8
 8014fa4:	f001 fd1e 	bl	80169e4 <__d2b>
 8014fa8:	f3c6 530a 	ubfx	r3, r6, #20, #11
 8014fac:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8014fae:	9001      	str	r0, [sp, #4]
 8014fb0:	2b00      	cmp	r3, #0
 8014fb2:	d045      	beq.n	8015040 <_dtoa_r+0x168>
 8014fb4:	eeb0 7b48 	vmov.f64	d7, d8
 8014fb8:	ee18 1a90 	vmov	r1, s17
 8014fbc:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8014fc0:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 8014fc4:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8014fc8:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8014fcc:	2500      	movs	r5, #0
 8014fce:	ee07 1a90 	vmov	s15, r1
 8014fd2:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 8014fd6:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8015170 <_dtoa_r+0x298>
 8014fda:	ee37 7b46 	vsub.f64	d7, d7, d6
 8014fde:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8015178 <_dtoa_r+0x2a0>
 8014fe2:	eea7 6b05 	vfma.f64	d6, d7, d5
 8014fe6:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8015180 <_dtoa_r+0x2a8>
 8014fea:	ee07 3a90 	vmov	s15, r3
 8014fee:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8014ff2:	eeb0 7b46 	vmov.f64	d7, d6
 8014ff6:	eea4 7b05 	vfma.f64	d7, d4, d5
 8014ffa:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8014ffe:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8015002:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015006:	ee16 8a90 	vmov	r8, s13
 801500a:	d508      	bpl.n	801501e <_dtoa_r+0x146>
 801500c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8015010:	eeb4 6b47 	vcmp.f64	d6, d7
 8015014:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015018:	bf18      	it	ne
 801501a:	f108 38ff 	addne.w	r8, r8, #4294967295
 801501e:	f1b8 0f16 	cmp.w	r8, #22
 8015022:	d82b      	bhi.n	801507c <_dtoa_r+0x1a4>
 8015024:	495e      	ldr	r1, [pc, #376]	@ (80151a0 <_dtoa_r+0x2c8>)
 8015026:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 801502a:	ed91 7b00 	vldr	d7, [r1]
 801502e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8015032:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015036:	d501      	bpl.n	801503c <_dtoa_r+0x164>
 8015038:	f108 38ff 	add.w	r8, r8, #4294967295
 801503c:	2100      	movs	r1, #0
 801503e:	e01e      	b.n	801507e <_dtoa_r+0x1a6>
 8015040:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015042:	4413      	add	r3, r2
 8015044:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8015048:	2920      	cmp	r1, #32
 801504a:	bfc1      	itttt	gt
 801504c:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8015050:	408e      	lslgt	r6, r1
 8015052:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 8015056:	fa24 f101 	lsrgt.w	r1, r4, r1
 801505a:	bfd6      	itet	le
 801505c:	f1c1 0120 	rsble	r1, r1, #32
 8015060:	4331      	orrgt	r1, r6
 8015062:	fa04 f101 	lslle.w	r1, r4, r1
 8015066:	ee07 1a90 	vmov	s15, r1
 801506a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801506e:	3b01      	subs	r3, #1
 8015070:	ee17 1a90 	vmov	r1, s15
 8015074:	2501      	movs	r5, #1
 8015076:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 801507a:	e7a8      	b.n	8014fce <_dtoa_r+0xf6>
 801507c:	2101      	movs	r1, #1
 801507e:	1ad2      	subs	r2, r2, r3
 8015080:	1e53      	subs	r3, r2, #1
 8015082:	9306      	str	r3, [sp, #24]
 8015084:	bf45      	ittet	mi
 8015086:	f1c2 0301 	rsbmi	r3, r2, #1
 801508a:	9305      	strmi	r3, [sp, #20]
 801508c:	2300      	movpl	r3, #0
 801508e:	2300      	movmi	r3, #0
 8015090:	bf4c      	ite	mi
 8015092:	9306      	strmi	r3, [sp, #24]
 8015094:	9305      	strpl	r3, [sp, #20]
 8015096:	f1b8 0f00 	cmp.w	r8, #0
 801509a:	910c      	str	r1, [sp, #48]	@ 0x30
 801509c:	db18      	blt.n	80150d0 <_dtoa_r+0x1f8>
 801509e:	9b06      	ldr	r3, [sp, #24]
 80150a0:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80150a4:	4443      	add	r3, r8
 80150a6:	9306      	str	r3, [sp, #24]
 80150a8:	2300      	movs	r3, #0
 80150aa:	9a07      	ldr	r2, [sp, #28]
 80150ac:	2a09      	cmp	r2, #9
 80150ae:	d849      	bhi.n	8015144 <_dtoa_r+0x26c>
 80150b0:	2a05      	cmp	r2, #5
 80150b2:	bfc4      	itt	gt
 80150b4:	3a04      	subgt	r2, #4
 80150b6:	9207      	strgt	r2, [sp, #28]
 80150b8:	9a07      	ldr	r2, [sp, #28]
 80150ba:	f1a2 0202 	sub.w	r2, r2, #2
 80150be:	bfcc      	ite	gt
 80150c0:	2400      	movgt	r4, #0
 80150c2:	2401      	movle	r4, #1
 80150c4:	2a03      	cmp	r2, #3
 80150c6:	d848      	bhi.n	801515a <_dtoa_r+0x282>
 80150c8:	e8df f002 	tbb	[pc, r2]
 80150cc:	3a2c2e0b 	.word	0x3a2c2e0b
 80150d0:	9b05      	ldr	r3, [sp, #20]
 80150d2:	2200      	movs	r2, #0
 80150d4:	eba3 0308 	sub.w	r3, r3, r8
 80150d8:	9305      	str	r3, [sp, #20]
 80150da:	920a      	str	r2, [sp, #40]	@ 0x28
 80150dc:	f1c8 0300 	rsb	r3, r8, #0
 80150e0:	e7e3      	b.n	80150aa <_dtoa_r+0x1d2>
 80150e2:	2200      	movs	r2, #0
 80150e4:	9208      	str	r2, [sp, #32]
 80150e6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80150e8:	2a00      	cmp	r2, #0
 80150ea:	dc39      	bgt.n	8015160 <_dtoa_r+0x288>
 80150ec:	f04f 0b01 	mov.w	fp, #1
 80150f0:	46da      	mov	sl, fp
 80150f2:	465a      	mov	r2, fp
 80150f4:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 80150f8:	f8d9 701c 	ldr.w	r7, [r9, #28]
 80150fc:	2100      	movs	r1, #0
 80150fe:	2004      	movs	r0, #4
 8015100:	f100 0614 	add.w	r6, r0, #20
 8015104:	4296      	cmp	r6, r2
 8015106:	d930      	bls.n	801516a <_dtoa_r+0x292>
 8015108:	6079      	str	r1, [r7, #4]
 801510a:	4648      	mov	r0, r9
 801510c:	9304      	str	r3, [sp, #16]
 801510e:	f001 f885 	bl	801621c <_Balloc>
 8015112:	9b04      	ldr	r3, [sp, #16]
 8015114:	4607      	mov	r7, r0
 8015116:	2800      	cmp	r0, #0
 8015118:	d146      	bne.n	80151a8 <_dtoa_r+0x2d0>
 801511a:	4b22      	ldr	r3, [pc, #136]	@ (80151a4 <_dtoa_r+0x2cc>)
 801511c:	4602      	mov	r2, r0
 801511e:	f240 11af 	movw	r1, #431	@ 0x1af
 8015122:	e6f2      	b.n	8014f0a <_dtoa_r+0x32>
 8015124:	2201      	movs	r2, #1
 8015126:	e7dd      	b.n	80150e4 <_dtoa_r+0x20c>
 8015128:	2200      	movs	r2, #0
 801512a:	9208      	str	r2, [sp, #32]
 801512c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801512e:	eb08 0b02 	add.w	fp, r8, r2
 8015132:	f10b 0a01 	add.w	sl, fp, #1
 8015136:	4652      	mov	r2, sl
 8015138:	2a01      	cmp	r2, #1
 801513a:	bfb8      	it	lt
 801513c:	2201      	movlt	r2, #1
 801513e:	e7db      	b.n	80150f8 <_dtoa_r+0x220>
 8015140:	2201      	movs	r2, #1
 8015142:	e7f2      	b.n	801512a <_dtoa_r+0x252>
 8015144:	2401      	movs	r4, #1
 8015146:	2200      	movs	r2, #0
 8015148:	e9cd 2407 	strd	r2, r4, [sp, #28]
 801514c:	f04f 3bff 	mov.w	fp, #4294967295
 8015150:	2100      	movs	r1, #0
 8015152:	46da      	mov	sl, fp
 8015154:	2212      	movs	r2, #18
 8015156:	9109      	str	r1, [sp, #36]	@ 0x24
 8015158:	e7ce      	b.n	80150f8 <_dtoa_r+0x220>
 801515a:	2201      	movs	r2, #1
 801515c:	9208      	str	r2, [sp, #32]
 801515e:	e7f5      	b.n	801514c <_dtoa_r+0x274>
 8015160:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 8015164:	46da      	mov	sl, fp
 8015166:	465a      	mov	r2, fp
 8015168:	e7c6      	b.n	80150f8 <_dtoa_r+0x220>
 801516a:	3101      	adds	r1, #1
 801516c:	0040      	lsls	r0, r0, #1
 801516e:	e7c7      	b.n	8015100 <_dtoa_r+0x228>
 8015170:	636f4361 	.word	0x636f4361
 8015174:	3fd287a7 	.word	0x3fd287a7
 8015178:	8b60c8b3 	.word	0x8b60c8b3
 801517c:	3fc68a28 	.word	0x3fc68a28
 8015180:	509f79fb 	.word	0x509f79fb
 8015184:	3fd34413 	.word	0x3fd34413
 8015188:	08018662 	.word	0x08018662
 801518c:	08018679 	.word	0x08018679
 8015190:	7ff00000 	.word	0x7ff00000
 8015194:	0801865e 	.word	0x0801865e
 8015198:	0801862a 	.word	0x0801862a
 801519c:	08018629 	.word	0x08018629
 80151a0:	080187d0 	.word	0x080187d0
 80151a4:	080186d1 	.word	0x080186d1
 80151a8:	f8d9 201c 	ldr.w	r2, [r9, #28]
 80151ac:	f1ba 0f0e 	cmp.w	sl, #14
 80151b0:	6010      	str	r0, [r2, #0]
 80151b2:	d86f      	bhi.n	8015294 <_dtoa_r+0x3bc>
 80151b4:	2c00      	cmp	r4, #0
 80151b6:	d06d      	beq.n	8015294 <_dtoa_r+0x3bc>
 80151b8:	f1b8 0f00 	cmp.w	r8, #0
 80151bc:	f340 80c2 	ble.w	8015344 <_dtoa_r+0x46c>
 80151c0:	4aca      	ldr	r2, [pc, #808]	@ (80154ec <_dtoa_r+0x614>)
 80151c2:	f008 010f 	and.w	r1, r8, #15
 80151c6:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80151ca:	f418 7f80 	tst.w	r8, #256	@ 0x100
 80151ce:	ed92 7b00 	vldr	d7, [r2]
 80151d2:	ea4f 1128 	mov.w	r1, r8, asr #4
 80151d6:	f000 80a9 	beq.w	801532c <_dtoa_r+0x454>
 80151da:	4ac5      	ldr	r2, [pc, #788]	@ (80154f0 <_dtoa_r+0x618>)
 80151dc:	ed92 6b08 	vldr	d6, [r2, #32]
 80151e0:	ee88 6b06 	vdiv.f64	d6, d8, d6
 80151e4:	ed8d 6b02 	vstr	d6, [sp, #8]
 80151e8:	f001 010f 	and.w	r1, r1, #15
 80151ec:	2203      	movs	r2, #3
 80151ee:	48c0      	ldr	r0, [pc, #768]	@ (80154f0 <_dtoa_r+0x618>)
 80151f0:	2900      	cmp	r1, #0
 80151f2:	f040 809d 	bne.w	8015330 <_dtoa_r+0x458>
 80151f6:	ed9d 6b02 	vldr	d6, [sp, #8]
 80151fa:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80151fe:	ed8d 7b02 	vstr	d7, [sp, #8]
 8015202:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8015204:	ed9d 7b02 	vldr	d7, [sp, #8]
 8015208:	2900      	cmp	r1, #0
 801520a:	f000 80c1 	beq.w	8015390 <_dtoa_r+0x4b8>
 801520e:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8015212:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8015216:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801521a:	f140 80b9 	bpl.w	8015390 <_dtoa_r+0x4b8>
 801521e:	f1ba 0f00 	cmp.w	sl, #0
 8015222:	f000 80b5 	beq.w	8015390 <_dtoa_r+0x4b8>
 8015226:	f1bb 0f00 	cmp.w	fp, #0
 801522a:	dd31      	ble.n	8015290 <_dtoa_r+0x3b8>
 801522c:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8015230:	ee27 7b06 	vmul.f64	d7, d7, d6
 8015234:	ed8d 7b02 	vstr	d7, [sp, #8]
 8015238:	f108 31ff 	add.w	r1, r8, #4294967295
 801523c:	9104      	str	r1, [sp, #16]
 801523e:	3201      	adds	r2, #1
 8015240:	465c      	mov	r4, fp
 8015242:	ed9d 6b02 	vldr	d6, [sp, #8]
 8015246:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 801524a:	ee07 2a90 	vmov	s15, r2
 801524e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8015252:	eea7 5b06 	vfma.f64	d5, d7, d6
 8015256:	ee15 2a90 	vmov	r2, s11
 801525a:	ec51 0b15 	vmov	r0, r1, d5
 801525e:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 8015262:	2c00      	cmp	r4, #0
 8015264:	f040 8098 	bne.w	8015398 <_dtoa_r+0x4c0>
 8015268:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 801526c:	ee36 6b47 	vsub.f64	d6, d6, d7
 8015270:	ec41 0b17 	vmov	d7, r0, r1
 8015274:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8015278:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801527c:	f300 8261 	bgt.w	8015742 <_dtoa_r+0x86a>
 8015280:	eeb1 7b47 	vneg.f64	d7, d7
 8015284:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8015288:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801528c:	f100 80f5 	bmi.w	801547a <_dtoa_r+0x5a2>
 8015290:	ed8d 8b02 	vstr	d8, [sp, #8]
 8015294:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8015296:	2a00      	cmp	r2, #0
 8015298:	f2c0 812c 	blt.w	80154f4 <_dtoa_r+0x61c>
 801529c:	f1b8 0f0e 	cmp.w	r8, #14
 80152a0:	f300 8128 	bgt.w	80154f4 <_dtoa_r+0x61c>
 80152a4:	4b91      	ldr	r3, [pc, #580]	@ (80154ec <_dtoa_r+0x614>)
 80152a6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80152aa:	ed93 6b00 	vldr	d6, [r3]
 80152ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80152b0:	2b00      	cmp	r3, #0
 80152b2:	da03      	bge.n	80152bc <_dtoa_r+0x3e4>
 80152b4:	f1ba 0f00 	cmp.w	sl, #0
 80152b8:	f340 80d2 	ble.w	8015460 <_dtoa_r+0x588>
 80152bc:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 80152c0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80152c4:	463e      	mov	r6, r7
 80152c6:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80152ca:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 80152ce:	ee15 3a10 	vmov	r3, s10
 80152d2:	3330      	adds	r3, #48	@ 0x30
 80152d4:	f806 3b01 	strb.w	r3, [r6], #1
 80152d8:	1bf3      	subs	r3, r6, r7
 80152da:	459a      	cmp	sl, r3
 80152dc:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 80152e0:	eea3 7b46 	vfms.f64	d7, d3, d6
 80152e4:	f040 80f8 	bne.w	80154d8 <_dtoa_r+0x600>
 80152e8:	ee37 7b07 	vadd.f64	d7, d7, d7
 80152ec:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80152f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80152f4:	f300 80dd 	bgt.w	80154b2 <_dtoa_r+0x5da>
 80152f8:	eeb4 7b46 	vcmp.f64	d7, d6
 80152fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015300:	d104      	bne.n	801530c <_dtoa_r+0x434>
 8015302:	ee15 3a10 	vmov	r3, s10
 8015306:	07db      	lsls	r3, r3, #31
 8015308:	f100 80d3 	bmi.w	80154b2 <_dtoa_r+0x5da>
 801530c:	9901      	ldr	r1, [sp, #4]
 801530e:	4648      	mov	r0, r9
 8015310:	f000 ffc4 	bl	801629c <_Bfree>
 8015314:	2300      	movs	r3, #0
 8015316:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8015318:	7033      	strb	r3, [r6, #0]
 801531a:	f108 0301 	add.w	r3, r8, #1
 801531e:	6013      	str	r3, [r2, #0]
 8015320:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8015322:	2b00      	cmp	r3, #0
 8015324:	f000 8304 	beq.w	8015930 <_dtoa_r+0xa58>
 8015328:	601e      	str	r6, [r3, #0]
 801532a:	e301      	b.n	8015930 <_dtoa_r+0xa58>
 801532c:	2202      	movs	r2, #2
 801532e:	e75e      	b.n	80151ee <_dtoa_r+0x316>
 8015330:	07cc      	lsls	r4, r1, #31
 8015332:	d504      	bpl.n	801533e <_dtoa_r+0x466>
 8015334:	ed90 6b00 	vldr	d6, [r0]
 8015338:	3201      	adds	r2, #1
 801533a:	ee27 7b06 	vmul.f64	d7, d7, d6
 801533e:	1049      	asrs	r1, r1, #1
 8015340:	3008      	adds	r0, #8
 8015342:	e755      	b.n	80151f0 <_dtoa_r+0x318>
 8015344:	d022      	beq.n	801538c <_dtoa_r+0x4b4>
 8015346:	f1c8 0100 	rsb	r1, r8, #0
 801534a:	4a68      	ldr	r2, [pc, #416]	@ (80154ec <_dtoa_r+0x614>)
 801534c:	f001 000f 	and.w	r0, r1, #15
 8015350:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8015354:	ed92 7b00 	vldr	d7, [r2]
 8015358:	ee28 7b07 	vmul.f64	d7, d8, d7
 801535c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8015360:	4863      	ldr	r0, [pc, #396]	@ (80154f0 <_dtoa_r+0x618>)
 8015362:	1109      	asrs	r1, r1, #4
 8015364:	2400      	movs	r4, #0
 8015366:	2202      	movs	r2, #2
 8015368:	b929      	cbnz	r1, 8015376 <_dtoa_r+0x49e>
 801536a:	2c00      	cmp	r4, #0
 801536c:	f43f af49 	beq.w	8015202 <_dtoa_r+0x32a>
 8015370:	ed8d 7b02 	vstr	d7, [sp, #8]
 8015374:	e745      	b.n	8015202 <_dtoa_r+0x32a>
 8015376:	07ce      	lsls	r6, r1, #31
 8015378:	d505      	bpl.n	8015386 <_dtoa_r+0x4ae>
 801537a:	ed90 6b00 	vldr	d6, [r0]
 801537e:	3201      	adds	r2, #1
 8015380:	2401      	movs	r4, #1
 8015382:	ee27 7b06 	vmul.f64	d7, d7, d6
 8015386:	1049      	asrs	r1, r1, #1
 8015388:	3008      	adds	r0, #8
 801538a:	e7ed      	b.n	8015368 <_dtoa_r+0x490>
 801538c:	2202      	movs	r2, #2
 801538e:	e738      	b.n	8015202 <_dtoa_r+0x32a>
 8015390:	f8cd 8010 	str.w	r8, [sp, #16]
 8015394:	4654      	mov	r4, sl
 8015396:	e754      	b.n	8015242 <_dtoa_r+0x36a>
 8015398:	4a54      	ldr	r2, [pc, #336]	@ (80154ec <_dtoa_r+0x614>)
 801539a:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 801539e:	ed12 4b02 	vldr	d4, [r2, #-8]
 80153a2:	9a08      	ldr	r2, [sp, #32]
 80153a4:	ec41 0b17 	vmov	d7, r0, r1
 80153a8:	443c      	add	r4, r7
 80153aa:	b34a      	cbz	r2, 8015400 <_dtoa_r+0x528>
 80153ac:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 80153b0:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 80153b4:	463e      	mov	r6, r7
 80153b6:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80153ba:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 80153be:	ee35 7b47 	vsub.f64	d7, d5, d7
 80153c2:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80153c6:	ee14 2a90 	vmov	r2, s9
 80153ca:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80153ce:	3230      	adds	r2, #48	@ 0x30
 80153d0:	ee36 6b45 	vsub.f64	d6, d6, d5
 80153d4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80153d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80153dc:	f806 2b01 	strb.w	r2, [r6], #1
 80153e0:	d438      	bmi.n	8015454 <_dtoa_r+0x57c>
 80153e2:	ee32 5b46 	vsub.f64	d5, d2, d6
 80153e6:	eeb4 5bc7 	vcmpe.f64	d5, d7
 80153ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80153ee:	d462      	bmi.n	80154b6 <_dtoa_r+0x5de>
 80153f0:	42a6      	cmp	r6, r4
 80153f2:	f43f af4d 	beq.w	8015290 <_dtoa_r+0x3b8>
 80153f6:	ee27 7b03 	vmul.f64	d7, d7, d3
 80153fa:	ee26 6b03 	vmul.f64	d6, d6, d3
 80153fe:	e7e0      	b.n	80153c2 <_dtoa_r+0x4ea>
 8015400:	4621      	mov	r1, r4
 8015402:	463e      	mov	r6, r7
 8015404:	ee27 7b04 	vmul.f64	d7, d7, d4
 8015408:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 801540c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8015410:	ee14 2a90 	vmov	r2, s9
 8015414:	3230      	adds	r2, #48	@ 0x30
 8015416:	f806 2b01 	strb.w	r2, [r6], #1
 801541a:	42a6      	cmp	r6, r4
 801541c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8015420:	ee36 6b45 	vsub.f64	d6, d6, d5
 8015424:	d119      	bne.n	801545a <_dtoa_r+0x582>
 8015426:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 801542a:	ee37 4b05 	vadd.f64	d4, d7, d5
 801542e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8015432:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015436:	dc3e      	bgt.n	80154b6 <_dtoa_r+0x5de>
 8015438:	ee35 5b47 	vsub.f64	d5, d5, d7
 801543c:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8015440:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015444:	f57f af24 	bpl.w	8015290 <_dtoa_r+0x3b8>
 8015448:	460e      	mov	r6, r1
 801544a:	3901      	subs	r1, #1
 801544c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8015450:	2b30      	cmp	r3, #48	@ 0x30
 8015452:	d0f9      	beq.n	8015448 <_dtoa_r+0x570>
 8015454:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8015458:	e758      	b.n	801530c <_dtoa_r+0x434>
 801545a:	ee26 6b03 	vmul.f64	d6, d6, d3
 801545e:	e7d5      	b.n	801540c <_dtoa_r+0x534>
 8015460:	d10b      	bne.n	801547a <_dtoa_r+0x5a2>
 8015462:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8015466:	ee26 6b07 	vmul.f64	d6, d6, d7
 801546a:	ed9d 7b02 	vldr	d7, [sp, #8]
 801546e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8015472:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015476:	f2c0 8161 	blt.w	801573c <_dtoa_r+0x864>
 801547a:	2400      	movs	r4, #0
 801547c:	4625      	mov	r5, r4
 801547e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015480:	43db      	mvns	r3, r3
 8015482:	9304      	str	r3, [sp, #16]
 8015484:	463e      	mov	r6, r7
 8015486:	f04f 0800 	mov.w	r8, #0
 801548a:	4621      	mov	r1, r4
 801548c:	4648      	mov	r0, r9
 801548e:	f000 ff05 	bl	801629c <_Bfree>
 8015492:	2d00      	cmp	r5, #0
 8015494:	d0de      	beq.n	8015454 <_dtoa_r+0x57c>
 8015496:	f1b8 0f00 	cmp.w	r8, #0
 801549a:	d005      	beq.n	80154a8 <_dtoa_r+0x5d0>
 801549c:	45a8      	cmp	r8, r5
 801549e:	d003      	beq.n	80154a8 <_dtoa_r+0x5d0>
 80154a0:	4641      	mov	r1, r8
 80154a2:	4648      	mov	r0, r9
 80154a4:	f000 fefa 	bl	801629c <_Bfree>
 80154a8:	4629      	mov	r1, r5
 80154aa:	4648      	mov	r0, r9
 80154ac:	f000 fef6 	bl	801629c <_Bfree>
 80154b0:	e7d0      	b.n	8015454 <_dtoa_r+0x57c>
 80154b2:	f8cd 8010 	str.w	r8, [sp, #16]
 80154b6:	4633      	mov	r3, r6
 80154b8:	461e      	mov	r6, r3
 80154ba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80154be:	2a39      	cmp	r2, #57	@ 0x39
 80154c0:	d106      	bne.n	80154d0 <_dtoa_r+0x5f8>
 80154c2:	429f      	cmp	r7, r3
 80154c4:	d1f8      	bne.n	80154b8 <_dtoa_r+0x5e0>
 80154c6:	9a04      	ldr	r2, [sp, #16]
 80154c8:	3201      	adds	r2, #1
 80154ca:	9204      	str	r2, [sp, #16]
 80154cc:	2230      	movs	r2, #48	@ 0x30
 80154ce:	703a      	strb	r2, [r7, #0]
 80154d0:	781a      	ldrb	r2, [r3, #0]
 80154d2:	3201      	adds	r2, #1
 80154d4:	701a      	strb	r2, [r3, #0]
 80154d6:	e7bd      	b.n	8015454 <_dtoa_r+0x57c>
 80154d8:	ee27 7b04 	vmul.f64	d7, d7, d4
 80154dc:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80154e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80154e4:	f47f aeef 	bne.w	80152c6 <_dtoa_r+0x3ee>
 80154e8:	e710      	b.n	801530c <_dtoa_r+0x434>
 80154ea:	bf00      	nop
 80154ec:	080187d0 	.word	0x080187d0
 80154f0:	080187a8 	.word	0x080187a8
 80154f4:	9908      	ldr	r1, [sp, #32]
 80154f6:	2900      	cmp	r1, #0
 80154f8:	f000 80e3 	beq.w	80156c2 <_dtoa_r+0x7ea>
 80154fc:	9907      	ldr	r1, [sp, #28]
 80154fe:	2901      	cmp	r1, #1
 8015500:	f300 80c8 	bgt.w	8015694 <_dtoa_r+0x7bc>
 8015504:	2d00      	cmp	r5, #0
 8015506:	f000 80c1 	beq.w	801568c <_dtoa_r+0x7b4>
 801550a:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 801550e:	9e05      	ldr	r6, [sp, #20]
 8015510:	461c      	mov	r4, r3
 8015512:	9304      	str	r3, [sp, #16]
 8015514:	9b05      	ldr	r3, [sp, #20]
 8015516:	4413      	add	r3, r2
 8015518:	9305      	str	r3, [sp, #20]
 801551a:	9b06      	ldr	r3, [sp, #24]
 801551c:	2101      	movs	r1, #1
 801551e:	4413      	add	r3, r2
 8015520:	4648      	mov	r0, r9
 8015522:	9306      	str	r3, [sp, #24]
 8015524:	f000 ffb8 	bl	8016498 <__i2b>
 8015528:	9b04      	ldr	r3, [sp, #16]
 801552a:	4605      	mov	r5, r0
 801552c:	b166      	cbz	r6, 8015548 <_dtoa_r+0x670>
 801552e:	9a06      	ldr	r2, [sp, #24]
 8015530:	2a00      	cmp	r2, #0
 8015532:	dd09      	ble.n	8015548 <_dtoa_r+0x670>
 8015534:	42b2      	cmp	r2, r6
 8015536:	9905      	ldr	r1, [sp, #20]
 8015538:	bfa8      	it	ge
 801553a:	4632      	movge	r2, r6
 801553c:	1a89      	subs	r1, r1, r2
 801553e:	9105      	str	r1, [sp, #20]
 8015540:	9906      	ldr	r1, [sp, #24]
 8015542:	1ab6      	subs	r6, r6, r2
 8015544:	1a8a      	subs	r2, r1, r2
 8015546:	9206      	str	r2, [sp, #24]
 8015548:	b1fb      	cbz	r3, 801558a <_dtoa_r+0x6b2>
 801554a:	9a08      	ldr	r2, [sp, #32]
 801554c:	2a00      	cmp	r2, #0
 801554e:	f000 80bc 	beq.w	80156ca <_dtoa_r+0x7f2>
 8015552:	b19c      	cbz	r4, 801557c <_dtoa_r+0x6a4>
 8015554:	4629      	mov	r1, r5
 8015556:	4622      	mov	r2, r4
 8015558:	4648      	mov	r0, r9
 801555a:	930b      	str	r3, [sp, #44]	@ 0x2c
 801555c:	f001 f85c 	bl	8016618 <__pow5mult>
 8015560:	9a01      	ldr	r2, [sp, #4]
 8015562:	4601      	mov	r1, r0
 8015564:	4605      	mov	r5, r0
 8015566:	4648      	mov	r0, r9
 8015568:	f000 ffac 	bl	80164c4 <__multiply>
 801556c:	9901      	ldr	r1, [sp, #4]
 801556e:	9004      	str	r0, [sp, #16]
 8015570:	4648      	mov	r0, r9
 8015572:	f000 fe93 	bl	801629c <_Bfree>
 8015576:	9a04      	ldr	r2, [sp, #16]
 8015578:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801557a:	9201      	str	r2, [sp, #4]
 801557c:	1b1a      	subs	r2, r3, r4
 801557e:	d004      	beq.n	801558a <_dtoa_r+0x6b2>
 8015580:	9901      	ldr	r1, [sp, #4]
 8015582:	4648      	mov	r0, r9
 8015584:	f001 f848 	bl	8016618 <__pow5mult>
 8015588:	9001      	str	r0, [sp, #4]
 801558a:	2101      	movs	r1, #1
 801558c:	4648      	mov	r0, r9
 801558e:	f000 ff83 	bl	8016498 <__i2b>
 8015592:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015594:	4604      	mov	r4, r0
 8015596:	2b00      	cmp	r3, #0
 8015598:	f000 81d0 	beq.w	801593c <_dtoa_r+0xa64>
 801559c:	461a      	mov	r2, r3
 801559e:	4601      	mov	r1, r0
 80155a0:	4648      	mov	r0, r9
 80155a2:	f001 f839 	bl	8016618 <__pow5mult>
 80155a6:	9b07      	ldr	r3, [sp, #28]
 80155a8:	2b01      	cmp	r3, #1
 80155aa:	4604      	mov	r4, r0
 80155ac:	f300 8095 	bgt.w	80156da <_dtoa_r+0x802>
 80155b0:	9b02      	ldr	r3, [sp, #8]
 80155b2:	2b00      	cmp	r3, #0
 80155b4:	f040 808b 	bne.w	80156ce <_dtoa_r+0x7f6>
 80155b8:	9b03      	ldr	r3, [sp, #12]
 80155ba:	f3c3 0213 	ubfx	r2, r3, #0, #20
 80155be:	2a00      	cmp	r2, #0
 80155c0:	f040 8087 	bne.w	80156d2 <_dtoa_r+0x7fa>
 80155c4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80155c8:	0d12      	lsrs	r2, r2, #20
 80155ca:	0512      	lsls	r2, r2, #20
 80155cc:	2a00      	cmp	r2, #0
 80155ce:	f000 8082 	beq.w	80156d6 <_dtoa_r+0x7fe>
 80155d2:	9b05      	ldr	r3, [sp, #20]
 80155d4:	3301      	adds	r3, #1
 80155d6:	9305      	str	r3, [sp, #20]
 80155d8:	9b06      	ldr	r3, [sp, #24]
 80155da:	3301      	adds	r3, #1
 80155dc:	9306      	str	r3, [sp, #24]
 80155de:	2301      	movs	r3, #1
 80155e0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80155e2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80155e4:	2b00      	cmp	r3, #0
 80155e6:	f000 81af 	beq.w	8015948 <_dtoa_r+0xa70>
 80155ea:	6922      	ldr	r2, [r4, #16]
 80155ec:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80155f0:	6910      	ldr	r0, [r2, #16]
 80155f2:	f000 ff05 	bl	8016400 <__hi0bits>
 80155f6:	f1c0 0020 	rsb	r0, r0, #32
 80155fa:	9b06      	ldr	r3, [sp, #24]
 80155fc:	4418      	add	r0, r3
 80155fe:	f010 001f 	ands.w	r0, r0, #31
 8015602:	d076      	beq.n	80156f2 <_dtoa_r+0x81a>
 8015604:	f1c0 0220 	rsb	r2, r0, #32
 8015608:	2a04      	cmp	r2, #4
 801560a:	dd69      	ble.n	80156e0 <_dtoa_r+0x808>
 801560c:	9b05      	ldr	r3, [sp, #20]
 801560e:	f1c0 001c 	rsb	r0, r0, #28
 8015612:	4403      	add	r3, r0
 8015614:	9305      	str	r3, [sp, #20]
 8015616:	9b06      	ldr	r3, [sp, #24]
 8015618:	4406      	add	r6, r0
 801561a:	4403      	add	r3, r0
 801561c:	9306      	str	r3, [sp, #24]
 801561e:	9b05      	ldr	r3, [sp, #20]
 8015620:	2b00      	cmp	r3, #0
 8015622:	dd05      	ble.n	8015630 <_dtoa_r+0x758>
 8015624:	9901      	ldr	r1, [sp, #4]
 8015626:	461a      	mov	r2, r3
 8015628:	4648      	mov	r0, r9
 801562a:	f001 f84f 	bl	80166cc <__lshift>
 801562e:	9001      	str	r0, [sp, #4]
 8015630:	9b06      	ldr	r3, [sp, #24]
 8015632:	2b00      	cmp	r3, #0
 8015634:	dd05      	ble.n	8015642 <_dtoa_r+0x76a>
 8015636:	4621      	mov	r1, r4
 8015638:	461a      	mov	r2, r3
 801563a:	4648      	mov	r0, r9
 801563c:	f001 f846 	bl	80166cc <__lshift>
 8015640:	4604      	mov	r4, r0
 8015642:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015644:	2b00      	cmp	r3, #0
 8015646:	d056      	beq.n	80156f6 <_dtoa_r+0x81e>
 8015648:	9801      	ldr	r0, [sp, #4]
 801564a:	4621      	mov	r1, r4
 801564c:	f001 f8aa 	bl	80167a4 <__mcmp>
 8015650:	2800      	cmp	r0, #0
 8015652:	da50      	bge.n	80156f6 <_dtoa_r+0x81e>
 8015654:	f108 33ff 	add.w	r3, r8, #4294967295
 8015658:	9304      	str	r3, [sp, #16]
 801565a:	9901      	ldr	r1, [sp, #4]
 801565c:	2300      	movs	r3, #0
 801565e:	220a      	movs	r2, #10
 8015660:	4648      	mov	r0, r9
 8015662:	f000 fe3d 	bl	80162e0 <__multadd>
 8015666:	9b08      	ldr	r3, [sp, #32]
 8015668:	9001      	str	r0, [sp, #4]
 801566a:	2b00      	cmp	r3, #0
 801566c:	f000 816e 	beq.w	801594c <_dtoa_r+0xa74>
 8015670:	4629      	mov	r1, r5
 8015672:	2300      	movs	r3, #0
 8015674:	220a      	movs	r2, #10
 8015676:	4648      	mov	r0, r9
 8015678:	f000 fe32 	bl	80162e0 <__multadd>
 801567c:	f1bb 0f00 	cmp.w	fp, #0
 8015680:	4605      	mov	r5, r0
 8015682:	dc64      	bgt.n	801574e <_dtoa_r+0x876>
 8015684:	9b07      	ldr	r3, [sp, #28]
 8015686:	2b02      	cmp	r3, #2
 8015688:	dc3e      	bgt.n	8015708 <_dtoa_r+0x830>
 801568a:	e060      	b.n	801574e <_dtoa_r+0x876>
 801568c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801568e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8015692:	e73c      	b.n	801550e <_dtoa_r+0x636>
 8015694:	f10a 34ff 	add.w	r4, sl, #4294967295
 8015698:	42a3      	cmp	r3, r4
 801569a:	bfbf      	itttt	lt
 801569c:	1ae2      	sublt	r2, r4, r3
 801569e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80156a0:	189b      	addlt	r3, r3, r2
 80156a2:	930a      	strlt	r3, [sp, #40]	@ 0x28
 80156a4:	bfae      	itee	ge
 80156a6:	1b1c      	subge	r4, r3, r4
 80156a8:	4623      	movlt	r3, r4
 80156aa:	2400      	movlt	r4, #0
 80156ac:	f1ba 0f00 	cmp.w	sl, #0
 80156b0:	bfb5      	itete	lt
 80156b2:	9a05      	ldrlt	r2, [sp, #20]
 80156b4:	9e05      	ldrge	r6, [sp, #20]
 80156b6:	eba2 060a 	sublt.w	r6, r2, sl
 80156ba:	4652      	movge	r2, sl
 80156bc:	bfb8      	it	lt
 80156be:	2200      	movlt	r2, #0
 80156c0:	e727      	b.n	8015512 <_dtoa_r+0x63a>
 80156c2:	9e05      	ldr	r6, [sp, #20]
 80156c4:	9d08      	ldr	r5, [sp, #32]
 80156c6:	461c      	mov	r4, r3
 80156c8:	e730      	b.n	801552c <_dtoa_r+0x654>
 80156ca:	461a      	mov	r2, r3
 80156cc:	e758      	b.n	8015580 <_dtoa_r+0x6a8>
 80156ce:	2300      	movs	r3, #0
 80156d0:	e786      	b.n	80155e0 <_dtoa_r+0x708>
 80156d2:	9b02      	ldr	r3, [sp, #8]
 80156d4:	e784      	b.n	80155e0 <_dtoa_r+0x708>
 80156d6:	920b      	str	r2, [sp, #44]	@ 0x2c
 80156d8:	e783      	b.n	80155e2 <_dtoa_r+0x70a>
 80156da:	2300      	movs	r3, #0
 80156dc:	930b      	str	r3, [sp, #44]	@ 0x2c
 80156de:	e784      	b.n	80155ea <_dtoa_r+0x712>
 80156e0:	d09d      	beq.n	801561e <_dtoa_r+0x746>
 80156e2:	9b05      	ldr	r3, [sp, #20]
 80156e4:	321c      	adds	r2, #28
 80156e6:	4413      	add	r3, r2
 80156e8:	9305      	str	r3, [sp, #20]
 80156ea:	9b06      	ldr	r3, [sp, #24]
 80156ec:	4416      	add	r6, r2
 80156ee:	4413      	add	r3, r2
 80156f0:	e794      	b.n	801561c <_dtoa_r+0x744>
 80156f2:	4602      	mov	r2, r0
 80156f4:	e7f5      	b.n	80156e2 <_dtoa_r+0x80a>
 80156f6:	f1ba 0f00 	cmp.w	sl, #0
 80156fa:	f8cd 8010 	str.w	r8, [sp, #16]
 80156fe:	46d3      	mov	fp, sl
 8015700:	dc21      	bgt.n	8015746 <_dtoa_r+0x86e>
 8015702:	9b07      	ldr	r3, [sp, #28]
 8015704:	2b02      	cmp	r3, #2
 8015706:	dd1e      	ble.n	8015746 <_dtoa_r+0x86e>
 8015708:	f1bb 0f00 	cmp.w	fp, #0
 801570c:	f47f aeb7 	bne.w	801547e <_dtoa_r+0x5a6>
 8015710:	4621      	mov	r1, r4
 8015712:	465b      	mov	r3, fp
 8015714:	2205      	movs	r2, #5
 8015716:	4648      	mov	r0, r9
 8015718:	f000 fde2 	bl	80162e0 <__multadd>
 801571c:	4601      	mov	r1, r0
 801571e:	4604      	mov	r4, r0
 8015720:	9801      	ldr	r0, [sp, #4]
 8015722:	f001 f83f 	bl	80167a4 <__mcmp>
 8015726:	2800      	cmp	r0, #0
 8015728:	f77f aea9 	ble.w	801547e <_dtoa_r+0x5a6>
 801572c:	463e      	mov	r6, r7
 801572e:	2331      	movs	r3, #49	@ 0x31
 8015730:	f806 3b01 	strb.w	r3, [r6], #1
 8015734:	9b04      	ldr	r3, [sp, #16]
 8015736:	3301      	adds	r3, #1
 8015738:	9304      	str	r3, [sp, #16]
 801573a:	e6a4      	b.n	8015486 <_dtoa_r+0x5ae>
 801573c:	f8cd 8010 	str.w	r8, [sp, #16]
 8015740:	4654      	mov	r4, sl
 8015742:	4625      	mov	r5, r4
 8015744:	e7f2      	b.n	801572c <_dtoa_r+0x854>
 8015746:	9b08      	ldr	r3, [sp, #32]
 8015748:	2b00      	cmp	r3, #0
 801574a:	f000 8103 	beq.w	8015954 <_dtoa_r+0xa7c>
 801574e:	2e00      	cmp	r6, #0
 8015750:	dd05      	ble.n	801575e <_dtoa_r+0x886>
 8015752:	4629      	mov	r1, r5
 8015754:	4632      	mov	r2, r6
 8015756:	4648      	mov	r0, r9
 8015758:	f000 ffb8 	bl	80166cc <__lshift>
 801575c:	4605      	mov	r5, r0
 801575e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8015760:	2b00      	cmp	r3, #0
 8015762:	d058      	beq.n	8015816 <_dtoa_r+0x93e>
 8015764:	6869      	ldr	r1, [r5, #4]
 8015766:	4648      	mov	r0, r9
 8015768:	f000 fd58 	bl	801621c <_Balloc>
 801576c:	4606      	mov	r6, r0
 801576e:	b928      	cbnz	r0, 801577c <_dtoa_r+0x8a4>
 8015770:	4b82      	ldr	r3, [pc, #520]	@ (801597c <_dtoa_r+0xaa4>)
 8015772:	4602      	mov	r2, r0
 8015774:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8015778:	f7ff bbc7 	b.w	8014f0a <_dtoa_r+0x32>
 801577c:	692a      	ldr	r2, [r5, #16]
 801577e:	3202      	adds	r2, #2
 8015780:	0092      	lsls	r2, r2, #2
 8015782:	f105 010c 	add.w	r1, r5, #12
 8015786:	300c      	adds	r0, #12
 8015788:	f7ff fb05 	bl	8014d96 <memcpy>
 801578c:	2201      	movs	r2, #1
 801578e:	4631      	mov	r1, r6
 8015790:	4648      	mov	r0, r9
 8015792:	f000 ff9b 	bl	80166cc <__lshift>
 8015796:	1c7b      	adds	r3, r7, #1
 8015798:	9305      	str	r3, [sp, #20]
 801579a:	eb07 030b 	add.w	r3, r7, fp
 801579e:	9309      	str	r3, [sp, #36]	@ 0x24
 80157a0:	9b02      	ldr	r3, [sp, #8]
 80157a2:	f003 0301 	and.w	r3, r3, #1
 80157a6:	46a8      	mov	r8, r5
 80157a8:	9308      	str	r3, [sp, #32]
 80157aa:	4605      	mov	r5, r0
 80157ac:	9b05      	ldr	r3, [sp, #20]
 80157ae:	9801      	ldr	r0, [sp, #4]
 80157b0:	4621      	mov	r1, r4
 80157b2:	f103 3bff 	add.w	fp, r3, #4294967295
 80157b6:	f7ff fb07 	bl	8014dc8 <quorem>
 80157ba:	4641      	mov	r1, r8
 80157bc:	9002      	str	r0, [sp, #8]
 80157be:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 80157c2:	9801      	ldr	r0, [sp, #4]
 80157c4:	f000 ffee 	bl	80167a4 <__mcmp>
 80157c8:	462a      	mov	r2, r5
 80157ca:	9006      	str	r0, [sp, #24]
 80157cc:	4621      	mov	r1, r4
 80157ce:	4648      	mov	r0, r9
 80157d0:	f001 f804 	bl	80167dc <__mdiff>
 80157d4:	68c2      	ldr	r2, [r0, #12]
 80157d6:	4606      	mov	r6, r0
 80157d8:	b9fa      	cbnz	r2, 801581a <_dtoa_r+0x942>
 80157da:	4601      	mov	r1, r0
 80157dc:	9801      	ldr	r0, [sp, #4]
 80157de:	f000 ffe1 	bl	80167a4 <__mcmp>
 80157e2:	4602      	mov	r2, r0
 80157e4:	4631      	mov	r1, r6
 80157e6:	4648      	mov	r0, r9
 80157e8:	920a      	str	r2, [sp, #40]	@ 0x28
 80157ea:	f000 fd57 	bl	801629c <_Bfree>
 80157ee:	9b07      	ldr	r3, [sp, #28]
 80157f0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80157f2:	9e05      	ldr	r6, [sp, #20]
 80157f4:	ea43 0102 	orr.w	r1, r3, r2
 80157f8:	9b08      	ldr	r3, [sp, #32]
 80157fa:	4319      	orrs	r1, r3
 80157fc:	d10f      	bne.n	801581e <_dtoa_r+0x946>
 80157fe:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8015802:	d028      	beq.n	8015856 <_dtoa_r+0x97e>
 8015804:	9b06      	ldr	r3, [sp, #24]
 8015806:	2b00      	cmp	r3, #0
 8015808:	dd02      	ble.n	8015810 <_dtoa_r+0x938>
 801580a:	9b02      	ldr	r3, [sp, #8]
 801580c:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 8015810:	f88b a000 	strb.w	sl, [fp]
 8015814:	e639      	b.n	801548a <_dtoa_r+0x5b2>
 8015816:	4628      	mov	r0, r5
 8015818:	e7bd      	b.n	8015796 <_dtoa_r+0x8be>
 801581a:	2201      	movs	r2, #1
 801581c:	e7e2      	b.n	80157e4 <_dtoa_r+0x90c>
 801581e:	9b06      	ldr	r3, [sp, #24]
 8015820:	2b00      	cmp	r3, #0
 8015822:	db04      	blt.n	801582e <_dtoa_r+0x956>
 8015824:	9907      	ldr	r1, [sp, #28]
 8015826:	430b      	orrs	r3, r1
 8015828:	9908      	ldr	r1, [sp, #32]
 801582a:	430b      	orrs	r3, r1
 801582c:	d120      	bne.n	8015870 <_dtoa_r+0x998>
 801582e:	2a00      	cmp	r2, #0
 8015830:	ddee      	ble.n	8015810 <_dtoa_r+0x938>
 8015832:	9901      	ldr	r1, [sp, #4]
 8015834:	2201      	movs	r2, #1
 8015836:	4648      	mov	r0, r9
 8015838:	f000 ff48 	bl	80166cc <__lshift>
 801583c:	4621      	mov	r1, r4
 801583e:	9001      	str	r0, [sp, #4]
 8015840:	f000 ffb0 	bl	80167a4 <__mcmp>
 8015844:	2800      	cmp	r0, #0
 8015846:	dc03      	bgt.n	8015850 <_dtoa_r+0x978>
 8015848:	d1e2      	bne.n	8015810 <_dtoa_r+0x938>
 801584a:	f01a 0f01 	tst.w	sl, #1
 801584e:	d0df      	beq.n	8015810 <_dtoa_r+0x938>
 8015850:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8015854:	d1d9      	bne.n	801580a <_dtoa_r+0x932>
 8015856:	2339      	movs	r3, #57	@ 0x39
 8015858:	f88b 3000 	strb.w	r3, [fp]
 801585c:	4633      	mov	r3, r6
 801585e:	461e      	mov	r6, r3
 8015860:	3b01      	subs	r3, #1
 8015862:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8015866:	2a39      	cmp	r2, #57	@ 0x39
 8015868:	d053      	beq.n	8015912 <_dtoa_r+0xa3a>
 801586a:	3201      	adds	r2, #1
 801586c:	701a      	strb	r2, [r3, #0]
 801586e:	e60c      	b.n	801548a <_dtoa_r+0x5b2>
 8015870:	2a00      	cmp	r2, #0
 8015872:	dd07      	ble.n	8015884 <_dtoa_r+0x9ac>
 8015874:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8015878:	d0ed      	beq.n	8015856 <_dtoa_r+0x97e>
 801587a:	f10a 0301 	add.w	r3, sl, #1
 801587e:	f88b 3000 	strb.w	r3, [fp]
 8015882:	e602      	b.n	801548a <_dtoa_r+0x5b2>
 8015884:	9b05      	ldr	r3, [sp, #20]
 8015886:	9a05      	ldr	r2, [sp, #20]
 8015888:	f803 ac01 	strb.w	sl, [r3, #-1]
 801588c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801588e:	4293      	cmp	r3, r2
 8015890:	d029      	beq.n	80158e6 <_dtoa_r+0xa0e>
 8015892:	9901      	ldr	r1, [sp, #4]
 8015894:	2300      	movs	r3, #0
 8015896:	220a      	movs	r2, #10
 8015898:	4648      	mov	r0, r9
 801589a:	f000 fd21 	bl	80162e0 <__multadd>
 801589e:	45a8      	cmp	r8, r5
 80158a0:	9001      	str	r0, [sp, #4]
 80158a2:	f04f 0300 	mov.w	r3, #0
 80158a6:	f04f 020a 	mov.w	r2, #10
 80158aa:	4641      	mov	r1, r8
 80158ac:	4648      	mov	r0, r9
 80158ae:	d107      	bne.n	80158c0 <_dtoa_r+0x9e8>
 80158b0:	f000 fd16 	bl	80162e0 <__multadd>
 80158b4:	4680      	mov	r8, r0
 80158b6:	4605      	mov	r5, r0
 80158b8:	9b05      	ldr	r3, [sp, #20]
 80158ba:	3301      	adds	r3, #1
 80158bc:	9305      	str	r3, [sp, #20]
 80158be:	e775      	b.n	80157ac <_dtoa_r+0x8d4>
 80158c0:	f000 fd0e 	bl	80162e0 <__multadd>
 80158c4:	4629      	mov	r1, r5
 80158c6:	4680      	mov	r8, r0
 80158c8:	2300      	movs	r3, #0
 80158ca:	220a      	movs	r2, #10
 80158cc:	4648      	mov	r0, r9
 80158ce:	f000 fd07 	bl	80162e0 <__multadd>
 80158d2:	4605      	mov	r5, r0
 80158d4:	e7f0      	b.n	80158b8 <_dtoa_r+0x9e0>
 80158d6:	f1bb 0f00 	cmp.w	fp, #0
 80158da:	bfcc      	ite	gt
 80158dc:	465e      	movgt	r6, fp
 80158de:	2601      	movle	r6, #1
 80158e0:	443e      	add	r6, r7
 80158e2:	f04f 0800 	mov.w	r8, #0
 80158e6:	9901      	ldr	r1, [sp, #4]
 80158e8:	2201      	movs	r2, #1
 80158ea:	4648      	mov	r0, r9
 80158ec:	f000 feee 	bl	80166cc <__lshift>
 80158f0:	4621      	mov	r1, r4
 80158f2:	9001      	str	r0, [sp, #4]
 80158f4:	f000 ff56 	bl	80167a4 <__mcmp>
 80158f8:	2800      	cmp	r0, #0
 80158fa:	dcaf      	bgt.n	801585c <_dtoa_r+0x984>
 80158fc:	d102      	bne.n	8015904 <_dtoa_r+0xa2c>
 80158fe:	f01a 0f01 	tst.w	sl, #1
 8015902:	d1ab      	bne.n	801585c <_dtoa_r+0x984>
 8015904:	4633      	mov	r3, r6
 8015906:	461e      	mov	r6, r3
 8015908:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801590c:	2a30      	cmp	r2, #48	@ 0x30
 801590e:	d0fa      	beq.n	8015906 <_dtoa_r+0xa2e>
 8015910:	e5bb      	b.n	801548a <_dtoa_r+0x5b2>
 8015912:	429f      	cmp	r7, r3
 8015914:	d1a3      	bne.n	801585e <_dtoa_r+0x986>
 8015916:	9b04      	ldr	r3, [sp, #16]
 8015918:	3301      	adds	r3, #1
 801591a:	9304      	str	r3, [sp, #16]
 801591c:	2331      	movs	r3, #49	@ 0x31
 801591e:	703b      	strb	r3, [r7, #0]
 8015920:	e5b3      	b.n	801548a <_dtoa_r+0x5b2>
 8015922:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8015924:	4f16      	ldr	r7, [pc, #88]	@ (8015980 <_dtoa_r+0xaa8>)
 8015926:	b11b      	cbz	r3, 8015930 <_dtoa_r+0xa58>
 8015928:	f107 0308 	add.w	r3, r7, #8
 801592c:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 801592e:	6013      	str	r3, [r2, #0]
 8015930:	4638      	mov	r0, r7
 8015932:	b011      	add	sp, #68	@ 0x44
 8015934:	ecbd 8b02 	vpop	{d8}
 8015938:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801593c:	9b07      	ldr	r3, [sp, #28]
 801593e:	2b01      	cmp	r3, #1
 8015940:	f77f ae36 	ble.w	80155b0 <_dtoa_r+0x6d8>
 8015944:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015946:	930b      	str	r3, [sp, #44]	@ 0x2c
 8015948:	2001      	movs	r0, #1
 801594a:	e656      	b.n	80155fa <_dtoa_r+0x722>
 801594c:	f1bb 0f00 	cmp.w	fp, #0
 8015950:	f77f aed7 	ble.w	8015702 <_dtoa_r+0x82a>
 8015954:	463e      	mov	r6, r7
 8015956:	9801      	ldr	r0, [sp, #4]
 8015958:	4621      	mov	r1, r4
 801595a:	f7ff fa35 	bl	8014dc8 <quorem>
 801595e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8015962:	f806 ab01 	strb.w	sl, [r6], #1
 8015966:	1bf2      	subs	r2, r6, r7
 8015968:	4593      	cmp	fp, r2
 801596a:	ddb4      	ble.n	80158d6 <_dtoa_r+0x9fe>
 801596c:	9901      	ldr	r1, [sp, #4]
 801596e:	2300      	movs	r3, #0
 8015970:	220a      	movs	r2, #10
 8015972:	4648      	mov	r0, r9
 8015974:	f000 fcb4 	bl	80162e0 <__multadd>
 8015978:	9001      	str	r0, [sp, #4]
 801597a:	e7ec      	b.n	8015956 <_dtoa_r+0xa7e>
 801597c:	080186d1 	.word	0x080186d1
 8015980:	08018655 	.word	0x08018655

08015984 <_free_r>:
 8015984:	b538      	push	{r3, r4, r5, lr}
 8015986:	4605      	mov	r5, r0
 8015988:	2900      	cmp	r1, #0
 801598a:	d041      	beq.n	8015a10 <_free_r+0x8c>
 801598c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015990:	1f0c      	subs	r4, r1, #4
 8015992:	2b00      	cmp	r3, #0
 8015994:	bfb8      	it	lt
 8015996:	18e4      	addlt	r4, r4, r3
 8015998:	f000 fc34 	bl	8016204 <__malloc_lock>
 801599c:	4a1d      	ldr	r2, [pc, #116]	@ (8015a14 <_free_r+0x90>)
 801599e:	6813      	ldr	r3, [r2, #0]
 80159a0:	b933      	cbnz	r3, 80159b0 <_free_r+0x2c>
 80159a2:	6063      	str	r3, [r4, #4]
 80159a4:	6014      	str	r4, [r2, #0]
 80159a6:	4628      	mov	r0, r5
 80159a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80159ac:	f000 bc30 	b.w	8016210 <__malloc_unlock>
 80159b0:	42a3      	cmp	r3, r4
 80159b2:	d908      	bls.n	80159c6 <_free_r+0x42>
 80159b4:	6820      	ldr	r0, [r4, #0]
 80159b6:	1821      	adds	r1, r4, r0
 80159b8:	428b      	cmp	r3, r1
 80159ba:	bf01      	itttt	eq
 80159bc:	6819      	ldreq	r1, [r3, #0]
 80159be:	685b      	ldreq	r3, [r3, #4]
 80159c0:	1809      	addeq	r1, r1, r0
 80159c2:	6021      	streq	r1, [r4, #0]
 80159c4:	e7ed      	b.n	80159a2 <_free_r+0x1e>
 80159c6:	461a      	mov	r2, r3
 80159c8:	685b      	ldr	r3, [r3, #4]
 80159ca:	b10b      	cbz	r3, 80159d0 <_free_r+0x4c>
 80159cc:	42a3      	cmp	r3, r4
 80159ce:	d9fa      	bls.n	80159c6 <_free_r+0x42>
 80159d0:	6811      	ldr	r1, [r2, #0]
 80159d2:	1850      	adds	r0, r2, r1
 80159d4:	42a0      	cmp	r0, r4
 80159d6:	d10b      	bne.n	80159f0 <_free_r+0x6c>
 80159d8:	6820      	ldr	r0, [r4, #0]
 80159da:	4401      	add	r1, r0
 80159dc:	1850      	adds	r0, r2, r1
 80159de:	4283      	cmp	r3, r0
 80159e0:	6011      	str	r1, [r2, #0]
 80159e2:	d1e0      	bne.n	80159a6 <_free_r+0x22>
 80159e4:	6818      	ldr	r0, [r3, #0]
 80159e6:	685b      	ldr	r3, [r3, #4]
 80159e8:	6053      	str	r3, [r2, #4]
 80159ea:	4408      	add	r0, r1
 80159ec:	6010      	str	r0, [r2, #0]
 80159ee:	e7da      	b.n	80159a6 <_free_r+0x22>
 80159f0:	d902      	bls.n	80159f8 <_free_r+0x74>
 80159f2:	230c      	movs	r3, #12
 80159f4:	602b      	str	r3, [r5, #0]
 80159f6:	e7d6      	b.n	80159a6 <_free_r+0x22>
 80159f8:	6820      	ldr	r0, [r4, #0]
 80159fa:	1821      	adds	r1, r4, r0
 80159fc:	428b      	cmp	r3, r1
 80159fe:	bf04      	itt	eq
 8015a00:	6819      	ldreq	r1, [r3, #0]
 8015a02:	685b      	ldreq	r3, [r3, #4]
 8015a04:	6063      	str	r3, [r4, #4]
 8015a06:	bf04      	itt	eq
 8015a08:	1809      	addeq	r1, r1, r0
 8015a0a:	6021      	streq	r1, [r4, #0]
 8015a0c:	6054      	str	r4, [r2, #4]
 8015a0e:	e7ca      	b.n	80159a6 <_free_r+0x22>
 8015a10:	bd38      	pop	{r3, r4, r5, pc}
 8015a12:	bf00      	nop
 8015a14:	24006c54 	.word	0x24006c54

08015a18 <rshift>:
 8015a18:	6903      	ldr	r3, [r0, #16]
 8015a1a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8015a1e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015a22:	ea4f 1261 	mov.w	r2, r1, asr #5
 8015a26:	f100 0414 	add.w	r4, r0, #20
 8015a2a:	dd45      	ble.n	8015ab8 <rshift+0xa0>
 8015a2c:	f011 011f 	ands.w	r1, r1, #31
 8015a30:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8015a34:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8015a38:	d10c      	bne.n	8015a54 <rshift+0x3c>
 8015a3a:	f100 0710 	add.w	r7, r0, #16
 8015a3e:	4629      	mov	r1, r5
 8015a40:	42b1      	cmp	r1, r6
 8015a42:	d334      	bcc.n	8015aae <rshift+0x96>
 8015a44:	1a9b      	subs	r3, r3, r2
 8015a46:	009b      	lsls	r3, r3, #2
 8015a48:	1eea      	subs	r2, r5, #3
 8015a4a:	4296      	cmp	r6, r2
 8015a4c:	bf38      	it	cc
 8015a4e:	2300      	movcc	r3, #0
 8015a50:	4423      	add	r3, r4
 8015a52:	e015      	b.n	8015a80 <rshift+0x68>
 8015a54:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8015a58:	f1c1 0820 	rsb	r8, r1, #32
 8015a5c:	40cf      	lsrs	r7, r1
 8015a5e:	f105 0e04 	add.w	lr, r5, #4
 8015a62:	46a1      	mov	r9, r4
 8015a64:	4576      	cmp	r6, lr
 8015a66:	46f4      	mov	ip, lr
 8015a68:	d815      	bhi.n	8015a96 <rshift+0x7e>
 8015a6a:	1a9a      	subs	r2, r3, r2
 8015a6c:	0092      	lsls	r2, r2, #2
 8015a6e:	3a04      	subs	r2, #4
 8015a70:	3501      	adds	r5, #1
 8015a72:	42ae      	cmp	r6, r5
 8015a74:	bf38      	it	cc
 8015a76:	2200      	movcc	r2, #0
 8015a78:	18a3      	adds	r3, r4, r2
 8015a7a:	50a7      	str	r7, [r4, r2]
 8015a7c:	b107      	cbz	r7, 8015a80 <rshift+0x68>
 8015a7e:	3304      	adds	r3, #4
 8015a80:	1b1a      	subs	r2, r3, r4
 8015a82:	42a3      	cmp	r3, r4
 8015a84:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8015a88:	bf08      	it	eq
 8015a8a:	2300      	moveq	r3, #0
 8015a8c:	6102      	str	r2, [r0, #16]
 8015a8e:	bf08      	it	eq
 8015a90:	6143      	streq	r3, [r0, #20]
 8015a92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015a96:	f8dc c000 	ldr.w	ip, [ip]
 8015a9a:	fa0c fc08 	lsl.w	ip, ip, r8
 8015a9e:	ea4c 0707 	orr.w	r7, ip, r7
 8015aa2:	f849 7b04 	str.w	r7, [r9], #4
 8015aa6:	f85e 7b04 	ldr.w	r7, [lr], #4
 8015aaa:	40cf      	lsrs	r7, r1
 8015aac:	e7da      	b.n	8015a64 <rshift+0x4c>
 8015aae:	f851 cb04 	ldr.w	ip, [r1], #4
 8015ab2:	f847 cf04 	str.w	ip, [r7, #4]!
 8015ab6:	e7c3      	b.n	8015a40 <rshift+0x28>
 8015ab8:	4623      	mov	r3, r4
 8015aba:	e7e1      	b.n	8015a80 <rshift+0x68>

08015abc <__hexdig_fun>:
 8015abc:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8015ac0:	2b09      	cmp	r3, #9
 8015ac2:	d802      	bhi.n	8015aca <__hexdig_fun+0xe>
 8015ac4:	3820      	subs	r0, #32
 8015ac6:	b2c0      	uxtb	r0, r0
 8015ac8:	4770      	bx	lr
 8015aca:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8015ace:	2b05      	cmp	r3, #5
 8015ad0:	d801      	bhi.n	8015ad6 <__hexdig_fun+0x1a>
 8015ad2:	3847      	subs	r0, #71	@ 0x47
 8015ad4:	e7f7      	b.n	8015ac6 <__hexdig_fun+0xa>
 8015ad6:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8015ada:	2b05      	cmp	r3, #5
 8015adc:	d801      	bhi.n	8015ae2 <__hexdig_fun+0x26>
 8015ade:	3827      	subs	r0, #39	@ 0x27
 8015ae0:	e7f1      	b.n	8015ac6 <__hexdig_fun+0xa>
 8015ae2:	2000      	movs	r0, #0
 8015ae4:	4770      	bx	lr
	...

08015ae8 <__gethex>:
 8015ae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015aec:	b085      	sub	sp, #20
 8015aee:	468a      	mov	sl, r1
 8015af0:	9302      	str	r3, [sp, #8]
 8015af2:	680b      	ldr	r3, [r1, #0]
 8015af4:	9001      	str	r0, [sp, #4]
 8015af6:	4690      	mov	r8, r2
 8015af8:	1c9c      	adds	r4, r3, #2
 8015afa:	46a1      	mov	r9, r4
 8015afc:	f814 0b01 	ldrb.w	r0, [r4], #1
 8015b00:	2830      	cmp	r0, #48	@ 0x30
 8015b02:	d0fa      	beq.n	8015afa <__gethex+0x12>
 8015b04:	eba9 0303 	sub.w	r3, r9, r3
 8015b08:	f1a3 0b02 	sub.w	fp, r3, #2
 8015b0c:	f7ff ffd6 	bl	8015abc <__hexdig_fun>
 8015b10:	4605      	mov	r5, r0
 8015b12:	2800      	cmp	r0, #0
 8015b14:	d168      	bne.n	8015be8 <__gethex+0x100>
 8015b16:	49a0      	ldr	r1, [pc, #640]	@ (8015d98 <__gethex+0x2b0>)
 8015b18:	2201      	movs	r2, #1
 8015b1a:	4648      	mov	r0, r9
 8015b1c:	f7ff f8b2 	bl	8014c84 <strncmp>
 8015b20:	4607      	mov	r7, r0
 8015b22:	2800      	cmp	r0, #0
 8015b24:	d167      	bne.n	8015bf6 <__gethex+0x10e>
 8015b26:	f899 0001 	ldrb.w	r0, [r9, #1]
 8015b2a:	4626      	mov	r6, r4
 8015b2c:	f7ff ffc6 	bl	8015abc <__hexdig_fun>
 8015b30:	2800      	cmp	r0, #0
 8015b32:	d062      	beq.n	8015bfa <__gethex+0x112>
 8015b34:	4623      	mov	r3, r4
 8015b36:	7818      	ldrb	r0, [r3, #0]
 8015b38:	2830      	cmp	r0, #48	@ 0x30
 8015b3a:	4699      	mov	r9, r3
 8015b3c:	f103 0301 	add.w	r3, r3, #1
 8015b40:	d0f9      	beq.n	8015b36 <__gethex+0x4e>
 8015b42:	f7ff ffbb 	bl	8015abc <__hexdig_fun>
 8015b46:	fab0 f580 	clz	r5, r0
 8015b4a:	096d      	lsrs	r5, r5, #5
 8015b4c:	f04f 0b01 	mov.w	fp, #1
 8015b50:	464a      	mov	r2, r9
 8015b52:	4616      	mov	r6, r2
 8015b54:	3201      	adds	r2, #1
 8015b56:	7830      	ldrb	r0, [r6, #0]
 8015b58:	f7ff ffb0 	bl	8015abc <__hexdig_fun>
 8015b5c:	2800      	cmp	r0, #0
 8015b5e:	d1f8      	bne.n	8015b52 <__gethex+0x6a>
 8015b60:	498d      	ldr	r1, [pc, #564]	@ (8015d98 <__gethex+0x2b0>)
 8015b62:	2201      	movs	r2, #1
 8015b64:	4630      	mov	r0, r6
 8015b66:	f7ff f88d 	bl	8014c84 <strncmp>
 8015b6a:	2800      	cmp	r0, #0
 8015b6c:	d13f      	bne.n	8015bee <__gethex+0x106>
 8015b6e:	b944      	cbnz	r4, 8015b82 <__gethex+0x9a>
 8015b70:	1c74      	adds	r4, r6, #1
 8015b72:	4622      	mov	r2, r4
 8015b74:	4616      	mov	r6, r2
 8015b76:	3201      	adds	r2, #1
 8015b78:	7830      	ldrb	r0, [r6, #0]
 8015b7a:	f7ff ff9f 	bl	8015abc <__hexdig_fun>
 8015b7e:	2800      	cmp	r0, #0
 8015b80:	d1f8      	bne.n	8015b74 <__gethex+0x8c>
 8015b82:	1ba4      	subs	r4, r4, r6
 8015b84:	00a7      	lsls	r7, r4, #2
 8015b86:	7833      	ldrb	r3, [r6, #0]
 8015b88:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8015b8c:	2b50      	cmp	r3, #80	@ 0x50
 8015b8e:	d13e      	bne.n	8015c0e <__gethex+0x126>
 8015b90:	7873      	ldrb	r3, [r6, #1]
 8015b92:	2b2b      	cmp	r3, #43	@ 0x2b
 8015b94:	d033      	beq.n	8015bfe <__gethex+0x116>
 8015b96:	2b2d      	cmp	r3, #45	@ 0x2d
 8015b98:	d034      	beq.n	8015c04 <__gethex+0x11c>
 8015b9a:	1c71      	adds	r1, r6, #1
 8015b9c:	2400      	movs	r4, #0
 8015b9e:	7808      	ldrb	r0, [r1, #0]
 8015ba0:	f7ff ff8c 	bl	8015abc <__hexdig_fun>
 8015ba4:	1e43      	subs	r3, r0, #1
 8015ba6:	b2db      	uxtb	r3, r3
 8015ba8:	2b18      	cmp	r3, #24
 8015baa:	d830      	bhi.n	8015c0e <__gethex+0x126>
 8015bac:	f1a0 0210 	sub.w	r2, r0, #16
 8015bb0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8015bb4:	f7ff ff82 	bl	8015abc <__hexdig_fun>
 8015bb8:	f100 3cff 	add.w	ip, r0, #4294967295
 8015bbc:	fa5f fc8c 	uxtb.w	ip, ip
 8015bc0:	f1bc 0f18 	cmp.w	ip, #24
 8015bc4:	f04f 030a 	mov.w	r3, #10
 8015bc8:	d91e      	bls.n	8015c08 <__gethex+0x120>
 8015bca:	b104      	cbz	r4, 8015bce <__gethex+0xe6>
 8015bcc:	4252      	negs	r2, r2
 8015bce:	4417      	add	r7, r2
 8015bd0:	f8ca 1000 	str.w	r1, [sl]
 8015bd4:	b1ed      	cbz	r5, 8015c12 <__gethex+0x12a>
 8015bd6:	f1bb 0f00 	cmp.w	fp, #0
 8015bda:	bf0c      	ite	eq
 8015bdc:	2506      	moveq	r5, #6
 8015bde:	2500      	movne	r5, #0
 8015be0:	4628      	mov	r0, r5
 8015be2:	b005      	add	sp, #20
 8015be4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015be8:	2500      	movs	r5, #0
 8015bea:	462c      	mov	r4, r5
 8015bec:	e7b0      	b.n	8015b50 <__gethex+0x68>
 8015bee:	2c00      	cmp	r4, #0
 8015bf0:	d1c7      	bne.n	8015b82 <__gethex+0x9a>
 8015bf2:	4627      	mov	r7, r4
 8015bf4:	e7c7      	b.n	8015b86 <__gethex+0x9e>
 8015bf6:	464e      	mov	r6, r9
 8015bf8:	462f      	mov	r7, r5
 8015bfa:	2501      	movs	r5, #1
 8015bfc:	e7c3      	b.n	8015b86 <__gethex+0x9e>
 8015bfe:	2400      	movs	r4, #0
 8015c00:	1cb1      	adds	r1, r6, #2
 8015c02:	e7cc      	b.n	8015b9e <__gethex+0xb6>
 8015c04:	2401      	movs	r4, #1
 8015c06:	e7fb      	b.n	8015c00 <__gethex+0x118>
 8015c08:	fb03 0002 	mla	r0, r3, r2, r0
 8015c0c:	e7ce      	b.n	8015bac <__gethex+0xc4>
 8015c0e:	4631      	mov	r1, r6
 8015c10:	e7de      	b.n	8015bd0 <__gethex+0xe8>
 8015c12:	eba6 0309 	sub.w	r3, r6, r9
 8015c16:	3b01      	subs	r3, #1
 8015c18:	4629      	mov	r1, r5
 8015c1a:	2b07      	cmp	r3, #7
 8015c1c:	dc0a      	bgt.n	8015c34 <__gethex+0x14c>
 8015c1e:	9801      	ldr	r0, [sp, #4]
 8015c20:	f000 fafc 	bl	801621c <_Balloc>
 8015c24:	4604      	mov	r4, r0
 8015c26:	b940      	cbnz	r0, 8015c3a <__gethex+0x152>
 8015c28:	4b5c      	ldr	r3, [pc, #368]	@ (8015d9c <__gethex+0x2b4>)
 8015c2a:	4602      	mov	r2, r0
 8015c2c:	21e4      	movs	r1, #228	@ 0xe4
 8015c2e:	485c      	ldr	r0, [pc, #368]	@ (8015da0 <__gethex+0x2b8>)
 8015c30:	f001 f9de 	bl	8016ff0 <__assert_func>
 8015c34:	3101      	adds	r1, #1
 8015c36:	105b      	asrs	r3, r3, #1
 8015c38:	e7ef      	b.n	8015c1a <__gethex+0x132>
 8015c3a:	f100 0a14 	add.w	sl, r0, #20
 8015c3e:	2300      	movs	r3, #0
 8015c40:	4655      	mov	r5, sl
 8015c42:	469b      	mov	fp, r3
 8015c44:	45b1      	cmp	r9, r6
 8015c46:	d337      	bcc.n	8015cb8 <__gethex+0x1d0>
 8015c48:	f845 bb04 	str.w	fp, [r5], #4
 8015c4c:	eba5 050a 	sub.w	r5, r5, sl
 8015c50:	10ad      	asrs	r5, r5, #2
 8015c52:	6125      	str	r5, [r4, #16]
 8015c54:	4658      	mov	r0, fp
 8015c56:	f000 fbd3 	bl	8016400 <__hi0bits>
 8015c5a:	016d      	lsls	r5, r5, #5
 8015c5c:	f8d8 6000 	ldr.w	r6, [r8]
 8015c60:	1a2d      	subs	r5, r5, r0
 8015c62:	42b5      	cmp	r5, r6
 8015c64:	dd54      	ble.n	8015d10 <__gethex+0x228>
 8015c66:	1bad      	subs	r5, r5, r6
 8015c68:	4629      	mov	r1, r5
 8015c6a:	4620      	mov	r0, r4
 8015c6c:	f000 ff64 	bl	8016b38 <__any_on>
 8015c70:	4681      	mov	r9, r0
 8015c72:	b178      	cbz	r0, 8015c94 <__gethex+0x1ac>
 8015c74:	1e6b      	subs	r3, r5, #1
 8015c76:	1159      	asrs	r1, r3, #5
 8015c78:	f003 021f 	and.w	r2, r3, #31
 8015c7c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8015c80:	f04f 0901 	mov.w	r9, #1
 8015c84:	fa09 f202 	lsl.w	r2, r9, r2
 8015c88:	420a      	tst	r2, r1
 8015c8a:	d003      	beq.n	8015c94 <__gethex+0x1ac>
 8015c8c:	454b      	cmp	r3, r9
 8015c8e:	dc36      	bgt.n	8015cfe <__gethex+0x216>
 8015c90:	f04f 0902 	mov.w	r9, #2
 8015c94:	4629      	mov	r1, r5
 8015c96:	4620      	mov	r0, r4
 8015c98:	f7ff febe 	bl	8015a18 <rshift>
 8015c9c:	442f      	add	r7, r5
 8015c9e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8015ca2:	42bb      	cmp	r3, r7
 8015ca4:	da42      	bge.n	8015d2c <__gethex+0x244>
 8015ca6:	9801      	ldr	r0, [sp, #4]
 8015ca8:	4621      	mov	r1, r4
 8015caa:	f000 faf7 	bl	801629c <_Bfree>
 8015cae:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8015cb0:	2300      	movs	r3, #0
 8015cb2:	6013      	str	r3, [r2, #0]
 8015cb4:	25a3      	movs	r5, #163	@ 0xa3
 8015cb6:	e793      	b.n	8015be0 <__gethex+0xf8>
 8015cb8:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8015cbc:	2a2e      	cmp	r2, #46	@ 0x2e
 8015cbe:	d012      	beq.n	8015ce6 <__gethex+0x1fe>
 8015cc0:	2b20      	cmp	r3, #32
 8015cc2:	d104      	bne.n	8015cce <__gethex+0x1e6>
 8015cc4:	f845 bb04 	str.w	fp, [r5], #4
 8015cc8:	f04f 0b00 	mov.w	fp, #0
 8015ccc:	465b      	mov	r3, fp
 8015cce:	7830      	ldrb	r0, [r6, #0]
 8015cd0:	9303      	str	r3, [sp, #12]
 8015cd2:	f7ff fef3 	bl	8015abc <__hexdig_fun>
 8015cd6:	9b03      	ldr	r3, [sp, #12]
 8015cd8:	f000 000f 	and.w	r0, r0, #15
 8015cdc:	4098      	lsls	r0, r3
 8015cde:	ea4b 0b00 	orr.w	fp, fp, r0
 8015ce2:	3304      	adds	r3, #4
 8015ce4:	e7ae      	b.n	8015c44 <__gethex+0x15c>
 8015ce6:	45b1      	cmp	r9, r6
 8015ce8:	d8ea      	bhi.n	8015cc0 <__gethex+0x1d8>
 8015cea:	492b      	ldr	r1, [pc, #172]	@ (8015d98 <__gethex+0x2b0>)
 8015cec:	9303      	str	r3, [sp, #12]
 8015cee:	2201      	movs	r2, #1
 8015cf0:	4630      	mov	r0, r6
 8015cf2:	f7fe ffc7 	bl	8014c84 <strncmp>
 8015cf6:	9b03      	ldr	r3, [sp, #12]
 8015cf8:	2800      	cmp	r0, #0
 8015cfa:	d1e1      	bne.n	8015cc0 <__gethex+0x1d8>
 8015cfc:	e7a2      	b.n	8015c44 <__gethex+0x15c>
 8015cfe:	1ea9      	subs	r1, r5, #2
 8015d00:	4620      	mov	r0, r4
 8015d02:	f000 ff19 	bl	8016b38 <__any_on>
 8015d06:	2800      	cmp	r0, #0
 8015d08:	d0c2      	beq.n	8015c90 <__gethex+0x1a8>
 8015d0a:	f04f 0903 	mov.w	r9, #3
 8015d0e:	e7c1      	b.n	8015c94 <__gethex+0x1ac>
 8015d10:	da09      	bge.n	8015d26 <__gethex+0x23e>
 8015d12:	1b75      	subs	r5, r6, r5
 8015d14:	4621      	mov	r1, r4
 8015d16:	9801      	ldr	r0, [sp, #4]
 8015d18:	462a      	mov	r2, r5
 8015d1a:	f000 fcd7 	bl	80166cc <__lshift>
 8015d1e:	1b7f      	subs	r7, r7, r5
 8015d20:	4604      	mov	r4, r0
 8015d22:	f100 0a14 	add.w	sl, r0, #20
 8015d26:	f04f 0900 	mov.w	r9, #0
 8015d2a:	e7b8      	b.n	8015c9e <__gethex+0x1b6>
 8015d2c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8015d30:	42bd      	cmp	r5, r7
 8015d32:	dd6f      	ble.n	8015e14 <__gethex+0x32c>
 8015d34:	1bed      	subs	r5, r5, r7
 8015d36:	42ae      	cmp	r6, r5
 8015d38:	dc34      	bgt.n	8015da4 <__gethex+0x2bc>
 8015d3a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8015d3e:	2b02      	cmp	r3, #2
 8015d40:	d022      	beq.n	8015d88 <__gethex+0x2a0>
 8015d42:	2b03      	cmp	r3, #3
 8015d44:	d024      	beq.n	8015d90 <__gethex+0x2a8>
 8015d46:	2b01      	cmp	r3, #1
 8015d48:	d115      	bne.n	8015d76 <__gethex+0x28e>
 8015d4a:	42ae      	cmp	r6, r5
 8015d4c:	d113      	bne.n	8015d76 <__gethex+0x28e>
 8015d4e:	2e01      	cmp	r6, #1
 8015d50:	d10b      	bne.n	8015d6a <__gethex+0x282>
 8015d52:	9a02      	ldr	r2, [sp, #8]
 8015d54:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8015d58:	6013      	str	r3, [r2, #0]
 8015d5a:	2301      	movs	r3, #1
 8015d5c:	6123      	str	r3, [r4, #16]
 8015d5e:	f8ca 3000 	str.w	r3, [sl]
 8015d62:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015d64:	2562      	movs	r5, #98	@ 0x62
 8015d66:	601c      	str	r4, [r3, #0]
 8015d68:	e73a      	b.n	8015be0 <__gethex+0xf8>
 8015d6a:	1e71      	subs	r1, r6, #1
 8015d6c:	4620      	mov	r0, r4
 8015d6e:	f000 fee3 	bl	8016b38 <__any_on>
 8015d72:	2800      	cmp	r0, #0
 8015d74:	d1ed      	bne.n	8015d52 <__gethex+0x26a>
 8015d76:	9801      	ldr	r0, [sp, #4]
 8015d78:	4621      	mov	r1, r4
 8015d7a:	f000 fa8f 	bl	801629c <_Bfree>
 8015d7e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8015d80:	2300      	movs	r3, #0
 8015d82:	6013      	str	r3, [r2, #0]
 8015d84:	2550      	movs	r5, #80	@ 0x50
 8015d86:	e72b      	b.n	8015be0 <__gethex+0xf8>
 8015d88:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015d8a:	2b00      	cmp	r3, #0
 8015d8c:	d1f3      	bne.n	8015d76 <__gethex+0x28e>
 8015d8e:	e7e0      	b.n	8015d52 <__gethex+0x26a>
 8015d90:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015d92:	2b00      	cmp	r3, #0
 8015d94:	d1dd      	bne.n	8015d52 <__gethex+0x26a>
 8015d96:	e7ee      	b.n	8015d76 <__gethex+0x28e>
 8015d98:	080184c0 	.word	0x080184c0
 8015d9c:	080186d1 	.word	0x080186d1
 8015da0:	080186e2 	.word	0x080186e2
 8015da4:	1e6f      	subs	r7, r5, #1
 8015da6:	f1b9 0f00 	cmp.w	r9, #0
 8015daa:	d130      	bne.n	8015e0e <__gethex+0x326>
 8015dac:	b127      	cbz	r7, 8015db8 <__gethex+0x2d0>
 8015dae:	4639      	mov	r1, r7
 8015db0:	4620      	mov	r0, r4
 8015db2:	f000 fec1 	bl	8016b38 <__any_on>
 8015db6:	4681      	mov	r9, r0
 8015db8:	117a      	asrs	r2, r7, #5
 8015dba:	2301      	movs	r3, #1
 8015dbc:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8015dc0:	f007 071f 	and.w	r7, r7, #31
 8015dc4:	40bb      	lsls	r3, r7
 8015dc6:	4213      	tst	r3, r2
 8015dc8:	4629      	mov	r1, r5
 8015dca:	4620      	mov	r0, r4
 8015dcc:	bf18      	it	ne
 8015dce:	f049 0902 	orrne.w	r9, r9, #2
 8015dd2:	f7ff fe21 	bl	8015a18 <rshift>
 8015dd6:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8015dda:	1b76      	subs	r6, r6, r5
 8015ddc:	2502      	movs	r5, #2
 8015dde:	f1b9 0f00 	cmp.w	r9, #0
 8015de2:	d047      	beq.n	8015e74 <__gethex+0x38c>
 8015de4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8015de8:	2b02      	cmp	r3, #2
 8015dea:	d015      	beq.n	8015e18 <__gethex+0x330>
 8015dec:	2b03      	cmp	r3, #3
 8015dee:	d017      	beq.n	8015e20 <__gethex+0x338>
 8015df0:	2b01      	cmp	r3, #1
 8015df2:	d109      	bne.n	8015e08 <__gethex+0x320>
 8015df4:	f019 0f02 	tst.w	r9, #2
 8015df8:	d006      	beq.n	8015e08 <__gethex+0x320>
 8015dfa:	f8da 3000 	ldr.w	r3, [sl]
 8015dfe:	ea49 0903 	orr.w	r9, r9, r3
 8015e02:	f019 0f01 	tst.w	r9, #1
 8015e06:	d10e      	bne.n	8015e26 <__gethex+0x33e>
 8015e08:	f045 0510 	orr.w	r5, r5, #16
 8015e0c:	e032      	b.n	8015e74 <__gethex+0x38c>
 8015e0e:	f04f 0901 	mov.w	r9, #1
 8015e12:	e7d1      	b.n	8015db8 <__gethex+0x2d0>
 8015e14:	2501      	movs	r5, #1
 8015e16:	e7e2      	b.n	8015dde <__gethex+0x2f6>
 8015e18:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015e1a:	f1c3 0301 	rsb	r3, r3, #1
 8015e1e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8015e20:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015e22:	2b00      	cmp	r3, #0
 8015e24:	d0f0      	beq.n	8015e08 <__gethex+0x320>
 8015e26:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8015e2a:	f104 0314 	add.w	r3, r4, #20
 8015e2e:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8015e32:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8015e36:	f04f 0c00 	mov.w	ip, #0
 8015e3a:	4618      	mov	r0, r3
 8015e3c:	f853 2b04 	ldr.w	r2, [r3], #4
 8015e40:	f1b2 3fff 	cmp.w	r2, #4294967295
 8015e44:	d01b      	beq.n	8015e7e <__gethex+0x396>
 8015e46:	3201      	adds	r2, #1
 8015e48:	6002      	str	r2, [r0, #0]
 8015e4a:	2d02      	cmp	r5, #2
 8015e4c:	f104 0314 	add.w	r3, r4, #20
 8015e50:	d13c      	bne.n	8015ecc <__gethex+0x3e4>
 8015e52:	f8d8 2000 	ldr.w	r2, [r8]
 8015e56:	3a01      	subs	r2, #1
 8015e58:	42b2      	cmp	r2, r6
 8015e5a:	d109      	bne.n	8015e70 <__gethex+0x388>
 8015e5c:	1171      	asrs	r1, r6, #5
 8015e5e:	2201      	movs	r2, #1
 8015e60:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8015e64:	f006 061f 	and.w	r6, r6, #31
 8015e68:	fa02 f606 	lsl.w	r6, r2, r6
 8015e6c:	421e      	tst	r6, r3
 8015e6e:	d13a      	bne.n	8015ee6 <__gethex+0x3fe>
 8015e70:	f045 0520 	orr.w	r5, r5, #32
 8015e74:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015e76:	601c      	str	r4, [r3, #0]
 8015e78:	9b02      	ldr	r3, [sp, #8]
 8015e7a:	601f      	str	r7, [r3, #0]
 8015e7c:	e6b0      	b.n	8015be0 <__gethex+0xf8>
 8015e7e:	4299      	cmp	r1, r3
 8015e80:	f843 cc04 	str.w	ip, [r3, #-4]
 8015e84:	d8d9      	bhi.n	8015e3a <__gethex+0x352>
 8015e86:	68a3      	ldr	r3, [r4, #8]
 8015e88:	459b      	cmp	fp, r3
 8015e8a:	db17      	blt.n	8015ebc <__gethex+0x3d4>
 8015e8c:	6861      	ldr	r1, [r4, #4]
 8015e8e:	9801      	ldr	r0, [sp, #4]
 8015e90:	3101      	adds	r1, #1
 8015e92:	f000 f9c3 	bl	801621c <_Balloc>
 8015e96:	4681      	mov	r9, r0
 8015e98:	b918      	cbnz	r0, 8015ea2 <__gethex+0x3ba>
 8015e9a:	4b1a      	ldr	r3, [pc, #104]	@ (8015f04 <__gethex+0x41c>)
 8015e9c:	4602      	mov	r2, r0
 8015e9e:	2184      	movs	r1, #132	@ 0x84
 8015ea0:	e6c5      	b.n	8015c2e <__gethex+0x146>
 8015ea2:	6922      	ldr	r2, [r4, #16]
 8015ea4:	3202      	adds	r2, #2
 8015ea6:	f104 010c 	add.w	r1, r4, #12
 8015eaa:	0092      	lsls	r2, r2, #2
 8015eac:	300c      	adds	r0, #12
 8015eae:	f7fe ff72 	bl	8014d96 <memcpy>
 8015eb2:	4621      	mov	r1, r4
 8015eb4:	9801      	ldr	r0, [sp, #4]
 8015eb6:	f000 f9f1 	bl	801629c <_Bfree>
 8015eba:	464c      	mov	r4, r9
 8015ebc:	6923      	ldr	r3, [r4, #16]
 8015ebe:	1c5a      	adds	r2, r3, #1
 8015ec0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8015ec4:	6122      	str	r2, [r4, #16]
 8015ec6:	2201      	movs	r2, #1
 8015ec8:	615a      	str	r2, [r3, #20]
 8015eca:	e7be      	b.n	8015e4a <__gethex+0x362>
 8015ecc:	6922      	ldr	r2, [r4, #16]
 8015ece:	455a      	cmp	r2, fp
 8015ed0:	dd0b      	ble.n	8015eea <__gethex+0x402>
 8015ed2:	2101      	movs	r1, #1
 8015ed4:	4620      	mov	r0, r4
 8015ed6:	f7ff fd9f 	bl	8015a18 <rshift>
 8015eda:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8015ede:	3701      	adds	r7, #1
 8015ee0:	42bb      	cmp	r3, r7
 8015ee2:	f6ff aee0 	blt.w	8015ca6 <__gethex+0x1be>
 8015ee6:	2501      	movs	r5, #1
 8015ee8:	e7c2      	b.n	8015e70 <__gethex+0x388>
 8015eea:	f016 061f 	ands.w	r6, r6, #31
 8015eee:	d0fa      	beq.n	8015ee6 <__gethex+0x3fe>
 8015ef0:	4453      	add	r3, sl
 8015ef2:	f1c6 0620 	rsb	r6, r6, #32
 8015ef6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8015efa:	f000 fa81 	bl	8016400 <__hi0bits>
 8015efe:	42b0      	cmp	r0, r6
 8015f00:	dbe7      	blt.n	8015ed2 <__gethex+0x3ea>
 8015f02:	e7f0      	b.n	8015ee6 <__gethex+0x3fe>
 8015f04:	080186d1 	.word	0x080186d1

08015f08 <L_shift>:
 8015f08:	f1c2 0208 	rsb	r2, r2, #8
 8015f0c:	0092      	lsls	r2, r2, #2
 8015f0e:	b570      	push	{r4, r5, r6, lr}
 8015f10:	f1c2 0620 	rsb	r6, r2, #32
 8015f14:	6843      	ldr	r3, [r0, #4]
 8015f16:	6804      	ldr	r4, [r0, #0]
 8015f18:	fa03 f506 	lsl.w	r5, r3, r6
 8015f1c:	432c      	orrs	r4, r5
 8015f1e:	40d3      	lsrs	r3, r2
 8015f20:	6004      	str	r4, [r0, #0]
 8015f22:	f840 3f04 	str.w	r3, [r0, #4]!
 8015f26:	4288      	cmp	r0, r1
 8015f28:	d3f4      	bcc.n	8015f14 <L_shift+0xc>
 8015f2a:	bd70      	pop	{r4, r5, r6, pc}

08015f2c <__match>:
 8015f2c:	b530      	push	{r4, r5, lr}
 8015f2e:	6803      	ldr	r3, [r0, #0]
 8015f30:	3301      	adds	r3, #1
 8015f32:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015f36:	b914      	cbnz	r4, 8015f3e <__match+0x12>
 8015f38:	6003      	str	r3, [r0, #0]
 8015f3a:	2001      	movs	r0, #1
 8015f3c:	bd30      	pop	{r4, r5, pc}
 8015f3e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015f42:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8015f46:	2d19      	cmp	r5, #25
 8015f48:	bf98      	it	ls
 8015f4a:	3220      	addls	r2, #32
 8015f4c:	42a2      	cmp	r2, r4
 8015f4e:	d0f0      	beq.n	8015f32 <__match+0x6>
 8015f50:	2000      	movs	r0, #0
 8015f52:	e7f3      	b.n	8015f3c <__match+0x10>

08015f54 <__hexnan>:
 8015f54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015f58:	680b      	ldr	r3, [r1, #0]
 8015f5a:	6801      	ldr	r1, [r0, #0]
 8015f5c:	115e      	asrs	r6, r3, #5
 8015f5e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8015f62:	f013 031f 	ands.w	r3, r3, #31
 8015f66:	b087      	sub	sp, #28
 8015f68:	bf18      	it	ne
 8015f6a:	3604      	addne	r6, #4
 8015f6c:	2500      	movs	r5, #0
 8015f6e:	1f37      	subs	r7, r6, #4
 8015f70:	4682      	mov	sl, r0
 8015f72:	4690      	mov	r8, r2
 8015f74:	9301      	str	r3, [sp, #4]
 8015f76:	f846 5c04 	str.w	r5, [r6, #-4]
 8015f7a:	46b9      	mov	r9, r7
 8015f7c:	463c      	mov	r4, r7
 8015f7e:	9502      	str	r5, [sp, #8]
 8015f80:	46ab      	mov	fp, r5
 8015f82:	784a      	ldrb	r2, [r1, #1]
 8015f84:	1c4b      	adds	r3, r1, #1
 8015f86:	9303      	str	r3, [sp, #12]
 8015f88:	b342      	cbz	r2, 8015fdc <__hexnan+0x88>
 8015f8a:	4610      	mov	r0, r2
 8015f8c:	9105      	str	r1, [sp, #20]
 8015f8e:	9204      	str	r2, [sp, #16]
 8015f90:	f7ff fd94 	bl	8015abc <__hexdig_fun>
 8015f94:	2800      	cmp	r0, #0
 8015f96:	d151      	bne.n	801603c <__hexnan+0xe8>
 8015f98:	9a04      	ldr	r2, [sp, #16]
 8015f9a:	9905      	ldr	r1, [sp, #20]
 8015f9c:	2a20      	cmp	r2, #32
 8015f9e:	d818      	bhi.n	8015fd2 <__hexnan+0x7e>
 8015fa0:	9b02      	ldr	r3, [sp, #8]
 8015fa2:	459b      	cmp	fp, r3
 8015fa4:	dd13      	ble.n	8015fce <__hexnan+0x7a>
 8015fa6:	454c      	cmp	r4, r9
 8015fa8:	d206      	bcs.n	8015fb8 <__hexnan+0x64>
 8015faa:	2d07      	cmp	r5, #7
 8015fac:	dc04      	bgt.n	8015fb8 <__hexnan+0x64>
 8015fae:	462a      	mov	r2, r5
 8015fb0:	4649      	mov	r1, r9
 8015fb2:	4620      	mov	r0, r4
 8015fb4:	f7ff ffa8 	bl	8015f08 <L_shift>
 8015fb8:	4544      	cmp	r4, r8
 8015fba:	d952      	bls.n	8016062 <__hexnan+0x10e>
 8015fbc:	2300      	movs	r3, #0
 8015fbe:	f1a4 0904 	sub.w	r9, r4, #4
 8015fc2:	f844 3c04 	str.w	r3, [r4, #-4]
 8015fc6:	f8cd b008 	str.w	fp, [sp, #8]
 8015fca:	464c      	mov	r4, r9
 8015fcc:	461d      	mov	r5, r3
 8015fce:	9903      	ldr	r1, [sp, #12]
 8015fd0:	e7d7      	b.n	8015f82 <__hexnan+0x2e>
 8015fd2:	2a29      	cmp	r2, #41	@ 0x29
 8015fd4:	d157      	bne.n	8016086 <__hexnan+0x132>
 8015fd6:	3102      	adds	r1, #2
 8015fd8:	f8ca 1000 	str.w	r1, [sl]
 8015fdc:	f1bb 0f00 	cmp.w	fp, #0
 8015fe0:	d051      	beq.n	8016086 <__hexnan+0x132>
 8015fe2:	454c      	cmp	r4, r9
 8015fe4:	d206      	bcs.n	8015ff4 <__hexnan+0xa0>
 8015fe6:	2d07      	cmp	r5, #7
 8015fe8:	dc04      	bgt.n	8015ff4 <__hexnan+0xa0>
 8015fea:	462a      	mov	r2, r5
 8015fec:	4649      	mov	r1, r9
 8015fee:	4620      	mov	r0, r4
 8015ff0:	f7ff ff8a 	bl	8015f08 <L_shift>
 8015ff4:	4544      	cmp	r4, r8
 8015ff6:	d936      	bls.n	8016066 <__hexnan+0x112>
 8015ff8:	f1a8 0204 	sub.w	r2, r8, #4
 8015ffc:	4623      	mov	r3, r4
 8015ffe:	f853 1b04 	ldr.w	r1, [r3], #4
 8016002:	f842 1f04 	str.w	r1, [r2, #4]!
 8016006:	429f      	cmp	r7, r3
 8016008:	d2f9      	bcs.n	8015ffe <__hexnan+0xaa>
 801600a:	1b3b      	subs	r3, r7, r4
 801600c:	f023 0303 	bic.w	r3, r3, #3
 8016010:	3304      	adds	r3, #4
 8016012:	3401      	adds	r4, #1
 8016014:	3e03      	subs	r6, #3
 8016016:	42b4      	cmp	r4, r6
 8016018:	bf88      	it	hi
 801601a:	2304      	movhi	r3, #4
 801601c:	4443      	add	r3, r8
 801601e:	2200      	movs	r2, #0
 8016020:	f843 2b04 	str.w	r2, [r3], #4
 8016024:	429f      	cmp	r7, r3
 8016026:	d2fb      	bcs.n	8016020 <__hexnan+0xcc>
 8016028:	683b      	ldr	r3, [r7, #0]
 801602a:	b91b      	cbnz	r3, 8016034 <__hexnan+0xe0>
 801602c:	4547      	cmp	r7, r8
 801602e:	d128      	bne.n	8016082 <__hexnan+0x12e>
 8016030:	2301      	movs	r3, #1
 8016032:	603b      	str	r3, [r7, #0]
 8016034:	2005      	movs	r0, #5
 8016036:	b007      	add	sp, #28
 8016038:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801603c:	3501      	adds	r5, #1
 801603e:	2d08      	cmp	r5, #8
 8016040:	f10b 0b01 	add.w	fp, fp, #1
 8016044:	dd06      	ble.n	8016054 <__hexnan+0x100>
 8016046:	4544      	cmp	r4, r8
 8016048:	d9c1      	bls.n	8015fce <__hexnan+0x7a>
 801604a:	2300      	movs	r3, #0
 801604c:	f844 3c04 	str.w	r3, [r4, #-4]
 8016050:	2501      	movs	r5, #1
 8016052:	3c04      	subs	r4, #4
 8016054:	6822      	ldr	r2, [r4, #0]
 8016056:	f000 000f 	and.w	r0, r0, #15
 801605a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801605e:	6020      	str	r0, [r4, #0]
 8016060:	e7b5      	b.n	8015fce <__hexnan+0x7a>
 8016062:	2508      	movs	r5, #8
 8016064:	e7b3      	b.n	8015fce <__hexnan+0x7a>
 8016066:	9b01      	ldr	r3, [sp, #4]
 8016068:	2b00      	cmp	r3, #0
 801606a:	d0dd      	beq.n	8016028 <__hexnan+0xd4>
 801606c:	f1c3 0320 	rsb	r3, r3, #32
 8016070:	f04f 32ff 	mov.w	r2, #4294967295
 8016074:	40da      	lsrs	r2, r3
 8016076:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801607a:	4013      	ands	r3, r2
 801607c:	f846 3c04 	str.w	r3, [r6, #-4]
 8016080:	e7d2      	b.n	8016028 <__hexnan+0xd4>
 8016082:	3f04      	subs	r7, #4
 8016084:	e7d0      	b.n	8016028 <__hexnan+0xd4>
 8016086:	2004      	movs	r0, #4
 8016088:	e7d5      	b.n	8016036 <__hexnan+0xe2>
	...

0801608c <malloc>:
 801608c:	4b02      	ldr	r3, [pc, #8]	@ (8016098 <malloc+0xc>)
 801608e:	4601      	mov	r1, r0
 8016090:	6818      	ldr	r0, [r3, #0]
 8016092:	f000 b825 	b.w	80160e0 <_malloc_r>
 8016096:	bf00      	nop
 8016098:	2400027c 	.word	0x2400027c

0801609c <sbrk_aligned>:
 801609c:	b570      	push	{r4, r5, r6, lr}
 801609e:	4e0f      	ldr	r6, [pc, #60]	@ (80160dc <sbrk_aligned+0x40>)
 80160a0:	460c      	mov	r4, r1
 80160a2:	6831      	ldr	r1, [r6, #0]
 80160a4:	4605      	mov	r5, r0
 80160a6:	b911      	cbnz	r1, 80160ae <sbrk_aligned+0x12>
 80160a8:	f000 ff92 	bl	8016fd0 <_sbrk_r>
 80160ac:	6030      	str	r0, [r6, #0]
 80160ae:	4621      	mov	r1, r4
 80160b0:	4628      	mov	r0, r5
 80160b2:	f000 ff8d 	bl	8016fd0 <_sbrk_r>
 80160b6:	1c43      	adds	r3, r0, #1
 80160b8:	d103      	bne.n	80160c2 <sbrk_aligned+0x26>
 80160ba:	f04f 34ff 	mov.w	r4, #4294967295
 80160be:	4620      	mov	r0, r4
 80160c0:	bd70      	pop	{r4, r5, r6, pc}
 80160c2:	1cc4      	adds	r4, r0, #3
 80160c4:	f024 0403 	bic.w	r4, r4, #3
 80160c8:	42a0      	cmp	r0, r4
 80160ca:	d0f8      	beq.n	80160be <sbrk_aligned+0x22>
 80160cc:	1a21      	subs	r1, r4, r0
 80160ce:	4628      	mov	r0, r5
 80160d0:	f000 ff7e 	bl	8016fd0 <_sbrk_r>
 80160d4:	3001      	adds	r0, #1
 80160d6:	d1f2      	bne.n	80160be <sbrk_aligned+0x22>
 80160d8:	e7ef      	b.n	80160ba <sbrk_aligned+0x1e>
 80160da:	bf00      	nop
 80160dc:	24006c50 	.word	0x24006c50

080160e0 <_malloc_r>:
 80160e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80160e4:	1ccd      	adds	r5, r1, #3
 80160e6:	f025 0503 	bic.w	r5, r5, #3
 80160ea:	3508      	adds	r5, #8
 80160ec:	2d0c      	cmp	r5, #12
 80160ee:	bf38      	it	cc
 80160f0:	250c      	movcc	r5, #12
 80160f2:	2d00      	cmp	r5, #0
 80160f4:	4606      	mov	r6, r0
 80160f6:	db01      	blt.n	80160fc <_malloc_r+0x1c>
 80160f8:	42a9      	cmp	r1, r5
 80160fa:	d904      	bls.n	8016106 <_malloc_r+0x26>
 80160fc:	230c      	movs	r3, #12
 80160fe:	6033      	str	r3, [r6, #0]
 8016100:	2000      	movs	r0, #0
 8016102:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016106:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80161dc <_malloc_r+0xfc>
 801610a:	f000 f87b 	bl	8016204 <__malloc_lock>
 801610e:	f8d8 3000 	ldr.w	r3, [r8]
 8016112:	461c      	mov	r4, r3
 8016114:	bb44      	cbnz	r4, 8016168 <_malloc_r+0x88>
 8016116:	4629      	mov	r1, r5
 8016118:	4630      	mov	r0, r6
 801611a:	f7ff ffbf 	bl	801609c <sbrk_aligned>
 801611e:	1c43      	adds	r3, r0, #1
 8016120:	4604      	mov	r4, r0
 8016122:	d158      	bne.n	80161d6 <_malloc_r+0xf6>
 8016124:	f8d8 4000 	ldr.w	r4, [r8]
 8016128:	4627      	mov	r7, r4
 801612a:	2f00      	cmp	r7, #0
 801612c:	d143      	bne.n	80161b6 <_malloc_r+0xd6>
 801612e:	2c00      	cmp	r4, #0
 8016130:	d04b      	beq.n	80161ca <_malloc_r+0xea>
 8016132:	6823      	ldr	r3, [r4, #0]
 8016134:	4639      	mov	r1, r7
 8016136:	4630      	mov	r0, r6
 8016138:	eb04 0903 	add.w	r9, r4, r3
 801613c:	f000 ff48 	bl	8016fd0 <_sbrk_r>
 8016140:	4581      	cmp	r9, r0
 8016142:	d142      	bne.n	80161ca <_malloc_r+0xea>
 8016144:	6821      	ldr	r1, [r4, #0]
 8016146:	1a6d      	subs	r5, r5, r1
 8016148:	4629      	mov	r1, r5
 801614a:	4630      	mov	r0, r6
 801614c:	f7ff ffa6 	bl	801609c <sbrk_aligned>
 8016150:	3001      	adds	r0, #1
 8016152:	d03a      	beq.n	80161ca <_malloc_r+0xea>
 8016154:	6823      	ldr	r3, [r4, #0]
 8016156:	442b      	add	r3, r5
 8016158:	6023      	str	r3, [r4, #0]
 801615a:	f8d8 3000 	ldr.w	r3, [r8]
 801615e:	685a      	ldr	r2, [r3, #4]
 8016160:	bb62      	cbnz	r2, 80161bc <_malloc_r+0xdc>
 8016162:	f8c8 7000 	str.w	r7, [r8]
 8016166:	e00f      	b.n	8016188 <_malloc_r+0xa8>
 8016168:	6822      	ldr	r2, [r4, #0]
 801616a:	1b52      	subs	r2, r2, r5
 801616c:	d420      	bmi.n	80161b0 <_malloc_r+0xd0>
 801616e:	2a0b      	cmp	r2, #11
 8016170:	d917      	bls.n	80161a2 <_malloc_r+0xc2>
 8016172:	1961      	adds	r1, r4, r5
 8016174:	42a3      	cmp	r3, r4
 8016176:	6025      	str	r5, [r4, #0]
 8016178:	bf18      	it	ne
 801617a:	6059      	strne	r1, [r3, #4]
 801617c:	6863      	ldr	r3, [r4, #4]
 801617e:	bf08      	it	eq
 8016180:	f8c8 1000 	streq.w	r1, [r8]
 8016184:	5162      	str	r2, [r4, r5]
 8016186:	604b      	str	r3, [r1, #4]
 8016188:	4630      	mov	r0, r6
 801618a:	f000 f841 	bl	8016210 <__malloc_unlock>
 801618e:	f104 000b 	add.w	r0, r4, #11
 8016192:	1d23      	adds	r3, r4, #4
 8016194:	f020 0007 	bic.w	r0, r0, #7
 8016198:	1ac2      	subs	r2, r0, r3
 801619a:	bf1c      	itt	ne
 801619c:	1a1b      	subne	r3, r3, r0
 801619e:	50a3      	strne	r3, [r4, r2]
 80161a0:	e7af      	b.n	8016102 <_malloc_r+0x22>
 80161a2:	6862      	ldr	r2, [r4, #4]
 80161a4:	42a3      	cmp	r3, r4
 80161a6:	bf0c      	ite	eq
 80161a8:	f8c8 2000 	streq.w	r2, [r8]
 80161ac:	605a      	strne	r2, [r3, #4]
 80161ae:	e7eb      	b.n	8016188 <_malloc_r+0xa8>
 80161b0:	4623      	mov	r3, r4
 80161b2:	6864      	ldr	r4, [r4, #4]
 80161b4:	e7ae      	b.n	8016114 <_malloc_r+0x34>
 80161b6:	463c      	mov	r4, r7
 80161b8:	687f      	ldr	r7, [r7, #4]
 80161ba:	e7b6      	b.n	801612a <_malloc_r+0x4a>
 80161bc:	461a      	mov	r2, r3
 80161be:	685b      	ldr	r3, [r3, #4]
 80161c0:	42a3      	cmp	r3, r4
 80161c2:	d1fb      	bne.n	80161bc <_malloc_r+0xdc>
 80161c4:	2300      	movs	r3, #0
 80161c6:	6053      	str	r3, [r2, #4]
 80161c8:	e7de      	b.n	8016188 <_malloc_r+0xa8>
 80161ca:	230c      	movs	r3, #12
 80161cc:	6033      	str	r3, [r6, #0]
 80161ce:	4630      	mov	r0, r6
 80161d0:	f000 f81e 	bl	8016210 <__malloc_unlock>
 80161d4:	e794      	b.n	8016100 <_malloc_r+0x20>
 80161d6:	6005      	str	r5, [r0, #0]
 80161d8:	e7d6      	b.n	8016188 <_malloc_r+0xa8>
 80161da:	bf00      	nop
 80161dc:	24006c54 	.word	0x24006c54

080161e0 <__ascii_mbtowc>:
 80161e0:	b082      	sub	sp, #8
 80161e2:	b901      	cbnz	r1, 80161e6 <__ascii_mbtowc+0x6>
 80161e4:	a901      	add	r1, sp, #4
 80161e6:	b142      	cbz	r2, 80161fa <__ascii_mbtowc+0x1a>
 80161e8:	b14b      	cbz	r3, 80161fe <__ascii_mbtowc+0x1e>
 80161ea:	7813      	ldrb	r3, [r2, #0]
 80161ec:	600b      	str	r3, [r1, #0]
 80161ee:	7812      	ldrb	r2, [r2, #0]
 80161f0:	1e10      	subs	r0, r2, #0
 80161f2:	bf18      	it	ne
 80161f4:	2001      	movne	r0, #1
 80161f6:	b002      	add	sp, #8
 80161f8:	4770      	bx	lr
 80161fa:	4610      	mov	r0, r2
 80161fc:	e7fb      	b.n	80161f6 <__ascii_mbtowc+0x16>
 80161fe:	f06f 0001 	mvn.w	r0, #1
 8016202:	e7f8      	b.n	80161f6 <__ascii_mbtowc+0x16>

08016204 <__malloc_lock>:
 8016204:	4801      	ldr	r0, [pc, #4]	@ (801620c <__malloc_lock+0x8>)
 8016206:	f7fe bdc4 	b.w	8014d92 <__retarget_lock_acquire_recursive>
 801620a:	bf00      	nop
 801620c:	24006c4c 	.word	0x24006c4c

08016210 <__malloc_unlock>:
 8016210:	4801      	ldr	r0, [pc, #4]	@ (8016218 <__malloc_unlock+0x8>)
 8016212:	f7fe bdbf 	b.w	8014d94 <__retarget_lock_release_recursive>
 8016216:	bf00      	nop
 8016218:	24006c4c 	.word	0x24006c4c

0801621c <_Balloc>:
 801621c:	b570      	push	{r4, r5, r6, lr}
 801621e:	69c6      	ldr	r6, [r0, #28]
 8016220:	4604      	mov	r4, r0
 8016222:	460d      	mov	r5, r1
 8016224:	b976      	cbnz	r6, 8016244 <_Balloc+0x28>
 8016226:	2010      	movs	r0, #16
 8016228:	f7ff ff30 	bl	801608c <malloc>
 801622c:	4602      	mov	r2, r0
 801622e:	61e0      	str	r0, [r4, #28]
 8016230:	b920      	cbnz	r0, 801623c <_Balloc+0x20>
 8016232:	4b18      	ldr	r3, [pc, #96]	@ (8016294 <_Balloc+0x78>)
 8016234:	4818      	ldr	r0, [pc, #96]	@ (8016298 <_Balloc+0x7c>)
 8016236:	216b      	movs	r1, #107	@ 0x6b
 8016238:	f000 feda 	bl	8016ff0 <__assert_func>
 801623c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8016240:	6006      	str	r6, [r0, #0]
 8016242:	60c6      	str	r6, [r0, #12]
 8016244:	69e6      	ldr	r6, [r4, #28]
 8016246:	68f3      	ldr	r3, [r6, #12]
 8016248:	b183      	cbz	r3, 801626c <_Balloc+0x50>
 801624a:	69e3      	ldr	r3, [r4, #28]
 801624c:	68db      	ldr	r3, [r3, #12]
 801624e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8016252:	b9b8      	cbnz	r0, 8016284 <_Balloc+0x68>
 8016254:	2101      	movs	r1, #1
 8016256:	fa01 f605 	lsl.w	r6, r1, r5
 801625a:	1d72      	adds	r2, r6, #5
 801625c:	0092      	lsls	r2, r2, #2
 801625e:	4620      	mov	r0, r4
 8016260:	f000 fee4 	bl	801702c <_calloc_r>
 8016264:	b160      	cbz	r0, 8016280 <_Balloc+0x64>
 8016266:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801626a:	e00e      	b.n	801628a <_Balloc+0x6e>
 801626c:	2221      	movs	r2, #33	@ 0x21
 801626e:	2104      	movs	r1, #4
 8016270:	4620      	mov	r0, r4
 8016272:	f000 fedb 	bl	801702c <_calloc_r>
 8016276:	69e3      	ldr	r3, [r4, #28]
 8016278:	60f0      	str	r0, [r6, #12]
 801627a:	68db      	ldr	r3, [r3, #12]
 801627c:	2b00      	cmp	r3, #0
 801627e:	d1e4      	bne.n	801624a <_Balloc+0x2e>
 8016280:	2000      	movs	r0, #0
 8016282:	bd70      	pop	{r4, r5, r6, pc}
 8016284:	6802      	ldr	r2, [r0, #0]
 8016286:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801628a:	2300      	movs	r3, #0
 801628c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8016290:	e7f7      	b.n	8016282 <_Balloc+0x66>
 8016292:	bf00      	nop
 8016294:	08018662 	.word	0x08018662
 8016298:	08018742 	.word	0x08018742

0801629c <_Bfree>:
 801629c:	b570      	push	{r4, r5, r6, lr}
 801629e:	69c6      	ldr	r6, [r0, #28]
 80162a0:	4605      	mov	r5, r0
 80162a2:	460c      	mov	r4, r1
 80162a4:	b976      	cbnz	r6, 80162c4 <_Bfree+0x28>
 80162a6:	2010      	movs	r0, #16
 80162a8:	f7ff fef0 	bl	801608c <malloc>
 80162ac:	4602      	mov	r2, r0
 80162ae:	61e8      	str	r0, [r5, #28]
 80162b0:	b920      	cbnz	r0, 80162bc <_Bfree+0x20>
 80162b2:	4b09      	ldr	r3, [pc, #36]	@ (80162d8 <_Bfree+0x3c>)
 80162b4:	4809      	ldr	r0, [pc, #36]	@ (80162dc <_Bfree+0x40>)
 80162b6:	218f      	movs	r1, #143	@ 0x8f
 80162b8:	f000 fe9a 	bl	8016ff0 <__assert_func>
 80162bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80162c0:	6006      	str	r6, [r0, #0]
 80162c2:	60c6      	str	r6, [r0, #12]
 80162c4:	b13c      	cbz	r4, 80162d6 <_Bfree+0x3a>
 80162c6:	69eb      	ldr	r3, [r5, #28]
 80162c8:	6862      	ldr	r2, [r4, #4]
 80162ca:	68db      	ldr	r3, [r3, #12]
 80162cc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80162d0:	6021      	str	r1, [r4, #0]
 80162d2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80162d6:	bd70      	pop	{r4, r5, r6, pc}
 80162d8:	08018662 	.word	0x08018662
 80162dc:	08018742 	.word	0x08018742

080162e0 <__multadd>:
 80162e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80162e4:	690d      	ldr	r5, [r1, #16]
 80162e6:	4607      	mov	r7, r0
 80162e8:	460c      	mov	r4, r1
 80162ea:	461e      	mov	r6, r3
 80162ec:	f101 0c14 	add.w	ip, r1, #20
 80162f0:	2000      	movs	r0, #0
 80162f2:	f8dc 3000 	ldr.w	r3, [ip]
 80162f6:	b299      	uxth	r1, r3
 80162f8:	fb02 6101 	mla	r1, r2, r1, r6
 80162fc:	0c1e      	lsrs	r6, r3, #16
 80162fe:	0c0b      	lsrs	r3, r1, #16
 8016300:	fb02 3306 	mla	r3, r2, r6, r3
 8016304:	b289      	uxth	r1, r1
 8016306:	3001      	adds	r0, #1
 8016308:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801630c:	4285      	cmp	r5, r0
 801630e:	f84c 1b04 	str.w	r1, [ip], #4
 8016312:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8016316:	dcec      	bgt.n	80162f2 <__multadd+0x12>
 8016318:	b30e      	cbz	r6, 801635e <__multadd+0x7e>
 801631a:	68a3      	ldr	r3, [r4, #8]
 801631c:	42ab      	cmp	r3, r5
 801631e:	dc19      	bgt.n	8016354 <__multadd+0x74>
 8016320:	6861      	ldr	r1, [r4, #4]
 8016322:	4638      	mov	r0, r7
 8016324:	3101      	adds	r1, #1
 8016326:	f7ff ff79 	bl	801621c <_Balloc>
 801632a:	4680      	mov	r8, r0
 801632c:	b928      	cbnz	r0, 801633a <__multadd+0x5a>
 801632e:	4602      	mov	r2, r0
 8016330:	4b0c      	ldr	r3, [pc, #48]	@ (8016364 <__multadd+0x84>)
 8016332:	480d      	ldr	r0, [pc, #52]	@ (8016368 <__multadd+0x88>)
 8016334:	21ba      	movs	r1, #186	@ 0xba
 8016336:	f000 fe5b 	bl	8016ff0 <__assert_func>
 801633a:	6922      	ldr	r2, [r4, #16]
 801633c:	3202      	adds	r2, #2
 801633e:	f104 010c 	add.w	r1, r4, #12
 8016342:	0092      	lsls	r2, r2, #2
 8016344:	300c      	adds	r0, #12
 8016346:	f7fe fd26 	bl	8014d96 <memcpy>
 801634a:	4621      	mov	r1, r4
 801634c:	4638      	mov	r0, r7
 801634e:	f7ff ffa5 	bl	801629c <_Bfree>
 8016352:	4644      	mov	r4, r8
 8016354:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8016358:	3501      	adds	r5, #1
 801635a:	615e      	str	r6, [r3, #20]
 801635c:	6125      	str	r5, [r4, #16]
 801635e:	4620      	mov	r0, r4
 8016360:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016364:	080186d1 	.word	0x080186d1
 8016368:	08018742 	.word	0x08018742

0801636c <__s2b>:
 801636c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016370:	460c      	mov	r4, r1
 8016372:	4615      	mov	r5, r2
 8016374:	461f      	mov	r7, r3
 8016376:	2209      	movs	r2, #9
 8016378:	3308      	adds	r3, #8
 801637a:	4606      	mov	r6, r0
 801637c:	fb93 f3f2 	sdiv	r3, r3, r2
 8016380:	2100      	movs	r1, #0
 8016382:	2201      	movs	r2, #1
 8016384:	429a      	cmp	r2, r3
 8016386:	db09      	blt.n	801639c <__s2b+0x30>
 8016388:	4630      	mov	r0, r6
 801638a:	f7ff ff47 	bl	801621c <_Balloc>
 801638e:	b940      	cbnz	r0, 80163a2 <__s2b+0x36>
 8016390:	4602      	mov	r2, r0
 8016392:	4b19      	ldr	r3, [pc, #100]	@ (80163f8 <__s2b+0x8c>)
 8016394:	4819      	ldr	r0, [pc, #100]	@ (80163fc <__s2b+0x90>)
 8016396:	21d3      	movs	r1, #211	@ 0xd3
 8016398:	f000 fe2a 	bl	8016ff0 <__assert_func>
 801639c:	0052      	lsls	r2, r2, #1
 801639e:	3101      	adds	r1, #1
 80163a0:	e7f0      	b.n	8016384 <__s2b+0x18>
 80163a2:	9b08      	ldr	r3, [sp, #32]
 80163a4:	6143      	str	r3, [r0, #20]
 80163a6:	2d09      	cmp	r5, #9
 80163a8:	f04f 0301 	mov.w	r3, #1
 80163ac:	6103      	str	r3, [r0, #16]
 80163ae:	dd16      	ble.n	80163de <__s2b+0x72>
 80163b0:	f104 0909 	add.w	r9, r4, #9
 80163b4:	46c8      	mov	r8, r9
 80163b6:	442c      	add	r4, r5
 80163b8:	f818 3b01 	ldrb.w	r3, [r8], #1
 80163bc:	4601      	mov	r1, r0
 80163be:	3b30      	subs	r3, #48	@ 0x30
 80163c0:	220a      	movs	r2, #10
 80163c2:	4630      	mov	r0, r6
 80163c4:	f7ff ff8c 	bl	80162e0 <__multadd>
 80163c8:	45a0      	cmp	r8, r4
 80163ca:	d1f5      	bne.n	80163b8 <__s2b+0x4c>
 80163cc:	f1a5 0408 	sub.w	r4, r5, #8
 80163d0:	444c      	add	r4, r9
 80163d2:	1b2d      	subs	r5, r5, r4
 80163d4:	1963      	adds	r3, r4, r5
 80163d6:	42bb      	cmp	r3, r7
 80163d8:	db04      	blt.n	80163e4 <__s2b+0x78>
 80163da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80163de:	340a      	adds	r4, #10
 80163e0:	2509      	movs	r5, #9
 80163e2:	e7f6      	b.n	80163d2 <__s2b+0x66>
 80163e4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80163e8:	4601      	mov	r1, r0
 80163ea:	3b30      	subs	r3, #48	@ 0x30
 80163ec:	220a      	movs	r2, #10
 80163ee:	4630      	mov	r0, r6
 80163f0:	f7ff ff76 	bl	80162e0 <__multadd>
 80163f4:	e7ee      	b.n	80163d4 <__s2b+0x68>
 80163f6:	bf00      	nop
 80163f8:	080186d1 	.word	0x080186d1
 80163fc:	08018742 	.word	0x08018742

08016400 <__hi0bits>:
 8016400:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8016404:	4603      	mov	r3, r0
 8016406:	bf36      	itet	cc
 8016408:	0403      	lslcc	r3, r0, #16
 801640a:	2000      	movcs	r0, #0
 801640c:	2010      	movcc	r0, #16
 801640e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8016412:	bf3c      	itt	cc
 8016414:	021b      	lslcc	r3, r3, #8
 8016416:	3008      	addcc	r0, #8
 8016418:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801641c:	bf3c      	itt	cc
 801641e:	011b      	lslcc	r3, r3, #4
 8016420:	3004      	addcc	r0, #4
 8016422:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8016426:	bf3c      	itt	cc
 8016428:	009b      	lslcc	r3, r3, #2
 801642a:	3002      	addcc	r0, #2
 801642c:	2b00      	cmp	r3, #0
 801642e:	db05      	blt.n	801643c <__hi0bits+0x3c>
 8016430:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8016434:	f100 0001 	add.w	r0, r0, #1
 8016438:	bf08      	it	eq
 801643a:	2020      	moveq	r0, #32
 801643c:	4770      	bx	lr

0801643e <__lo0bits>:
 801643e:	6803      	ldr	r3, [r0, #0]
 8016440:	4602      	mov	r2, r0
 8016442:	f013 0007 	ands.w	r0, r3, #7
 8016446:	d00b      	beq.n	8016460 <__lo0bits+0x22>
 8016448:	07d9      	lsls	r1, r3, #31
 801644a:	d421      	bmi.n	8016490 <__lo0bits+0x52>
 801644c:	0798      	lsls	r0, r3, #30
 801644e:	bf49      	itett	mi
 8016450:	085b      	lsrmi	r3, r3, #1
 8016452:	089b      	lsrpl	r3, r3, #2
 8016454:	2001      	movmi	r0, #1
 8016456:	6013      	strmi	r3, [r2, #0]
 8016458:	bf5c      	itt	pl
 801645a:	6013      	strpl	r3, [r2, #0]
 801645c:	2002      	movpl	r0, #2
 801645e:	4770      	bx	lr
 8016460:	b299      	uxth	r1, r3
 8016462:	b909      	cbnz	r1, 8016468 <__lo0bits+0x2a>
 8016464:	0c1b      	lsrs	r3, r3, #16
 8016466:	2010      	movs	r0, #16
 8016468:	b2d9      	uxtb	r1, r3
 801646a:	b909      	cbnz	r1, 8016470 <__lo0bits+0x32>
 801646c:	3008      	adds	r0, #8
 801646e:	0a1b      	lsrs	r3, r3, #8
 8016470:	0719      	lsls	r1, r3, #28
 8016472:	bf04      	itt	eq
 8016474:	091b      	lsreq	r3, r3, #4
 8016476:	3004      	addeq	r0, #4
 8016478:	0799      	lsls	r1, r3, #30
 801647a:	bf04      	itt	eq
 801647c:	089b      	lsreq	r3, r3, #2
 801647e:	3002      	addeq	r0, #2
 8016480:	07d9      	lsls	r1, r3, #31
 8016482:	d403      	bmi.n	801648c <__lo0bits+0x4e>
 8016484:	085b      	lsrs	r3, r3, #1
 8016486:	f100 0001 	add.w	r0, r0, #1
 801648a:	d003      	beq.n	8016494 <__lo0bits+0x56>
 801648c:	6013      	str	r3, [r2, #0]
 801648e:	4770      	bx	lr
 8016490:	2000      	movs	r0, #0
 8016492:	4770      	bx	lr
 8016494:	2020      	movs	r0, #32
 8016496:	4770      	bx	lr

08016498 <__i2b>:
 8016498:	b510      	push	{r4, lr}
 801649a:	460c      	mov	r4, r1
 801649c:	2101      	movs	r1, #1
 801649e:	f7ff febd 	bl	801621c <_Balloc>
 80164a2:	4602      	mov	r2, r0
 80164a4:	b928      	cbnz	r0, 80164b2 <__i2b+0x1a>
 80164a6:	4b05      	ldr	r3, [pc, #20]	@ (80164bc <__i2b+0x24>)
 80164a8:	4805      	ldr	r0, [pc, #20]	@ (80164c0 <__i2b+0x28>)
 80164aa:	f240 1145 	movw	r1, #325	@ 0x145
 80164ae:	f000 fd9f 	bl	8016ff0 <__assert_func>
 80164b2:	2301      	movs	r3, #1
 80164b4:	6144      	str	r4, [r0, #20]
 80164b6:	6103      	str	r3, [r0, #16]
 80164b8:	bd10      	pop	{r4, pc}
 80164ba:	bf00      	nop
 80164bc:	080186d1 	.word	0x080186d1
 80164c0:	08018742 	.word	0x08018742

080164c4 <__multiply>:
 80164c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80164c8:	4614      	mov	r4, r2
 80164ca:	690a      	ldr	r2, [r1, #16]
 80164cc:	6923      	ldr	r3, [r4, #16]
 80164ce:	429a      	cmp	r2, r3
 80164d0:	bfa8      	it	ge
 80164d2:	4623      	movge	r3, r4
 80164d4:	460f      	mov	r7, r1
 80164d6:	bfa4      	itt	ge
 80164d8:	460c      	movge	r4, r1
 80164da:	461f      	movge	r7, r3
 80164dc:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80164e0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80164e4:	68a3      	ldr	r3, [r4, #8]
 80164e6:	6861      	ldr	r1, [r4, #4]
 80164e8:	eb0a 0609 	add.w	r6, sl, r9
 80164ec:	42b3      	cmp	r3, r6
 80164ee:	b085      	sub	sp, #20
 80164f0:	bfb8      	it	lt
 80164f2:	3101      	addlt	r1, #1
 80164f4:	f7ff fe92 	bl	801621c <_Balloc>
 80164f8:	b930      	cbnz	r0, 8016508 <__multiply+0x44>
 80164fa:	4602      	mov	r2, r0
 80164fc:	4b44      	ldr	r3, [pc, #272]	@ (8016610 <__multiply+0x14c>)
 80164fe:	4845      	ldr	r0, [pc, #276]	@ (8016614 <__multiply+0x150>)
 8016500:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8016504:	f000 fd74 	bl	8016ff0 <__assert_func>
 8016508:	f100 0514 	add.w	r5, r0, #20
 801650c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8016510:	462b      	mov	r3, r5
 8016512:	2200      	movs	r2, #0
 8016514:	4543      	cmp	r3, r8
 8016516:	d321      	bcc.n	801655c <__multiply+0x98>
 8016518:	f107 0114 	add.w	r1, r7, #20
 801651c:	f104 0214 	add.w	r2, r4, #20
 8016520:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8016524:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8016528:	9302      	str	r3, [sp, #8]
 801652a:	1b13      	subs	r3, r2, r4
 801652c:	3b15      	subs	r3, #21
 801652e:	f023 0303 	bic.w	r3, r3, #3
 8016532:	3304      	adds	r3, #4
 8016534:	f104 0715 	add.w	r7, r4, #21
 8016538:	42ba      	cmp	r2, r7
 801653a:	bf38      	it	cc
 801653c:	2304      	movcc	r3, #4
 801653e:	9301      	str	r3, [sp, #4]
 8016540:	9b02      	ldr	r3, [sp, #8]
 8016542:	9103      	str	r1, [sp, #12]
 8016544:	428b      	cmp	r3, r1
 8016546:	d80c      	bhi.n	8016562 <__multiply+0x9e>
 8016548:	2e00      	cmp	r6, #0
 801654a:	dd03      	ble.n	8016554 <__multiply+0x90>
 801654c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8016550:	2b00      	cmp	r3, #0
 8016552:	d05b      	beq.n	801660c <__multiply+0x148>
 8016554:	6106      	str	r6, [r0, #16]
 8016556:	b005      	add	sp, #20
 8016558:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801655c:	f843 2b04 	str.w	r2, [r3], #4
 8016560:	e7d8      	b.n	8016514 <__multiply+0x50>
 8016562:	f8b1 a000 	ldrh.w	sl, [r1]
 8016566:	f1ba 0f00 	cmp.w	sl, #0
 801656a:	d024      	beq.n	80165b6 <__multiply+0xf2>
 801656c:	f104 0e14 	add.w	lr, r4, #20
 8016570:	46a9      	mov	r9, r5
 8016572:	f04f 0c00 	mov.w	ip, #0
 8016576:	f85e 7b04 	ldr.w	r7, [lr], #4
 801657a:	f8d9 3000 	ldr.w	r3, [r9]
 801657e:	fa1f fb87 	uxth.w	fp, r7
 8016582:	b29b      	uxth	r3, r3
 8016584:	fb0a 330b 	mla	r3, sl, fp, r3
 8016588:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 801658c:	f8d9 7000 	ldr.w	r7, [r9]
 8016590:	4463      	add	r3, ip
 8016592:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8016596:	fb0a c70b 	mla	r7, sl, fp, ip
 801659a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 801659e:	b29b      	uxth	r3, r3
 80165a0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80165a4:	4572      	cmp	r2, lr
 80165a6:	f849 3b04 	str.w	r3, [r9], #4
 80165aa:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80165ae:	d8e2      	bhi.n	8016576 <__multiply+0xb2>
 80165b0:	9b01      	ldr	r3, [sp, #4]
 80165b2:	f845 c003 	str.w	ip, [r5, r3]
 80165b6:	9b03      	ldr	r3, [sp, #12]
 80165b8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80165bc:	3104      	adds	r1, #4
 80165be:	f1b9 0f00 	cmp.w	r9, #0
 80165c2:	d021      	beq.n	8016608 <__multiply+0x144>
 80165c4:	682b      	ldr	r3, [r5, #0]
 80165c6:	f104 0c14 	add.w	ip, r4, #20
 80165ca:	46ae      	mov	lr, r5
 80165cc:	f04f 0a00 	mov.w	sl, #0
 80165d0:	f8bc b000 	ldrh.w	fp, [ip]
 80165d4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80165d8:	fb09 770b 	mla	r7, r9, fp, r7
 80165dc:	4457      	add	r7, sl
 80165de:	b29b      	uxth	r3, r3
 80165e0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80165e4:	f84e 3b04 	str.w	r3, [lr], #4
 80165e8:	f85c 3b04 	ldr.w	r3, [ip], #4
 80165ec:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80165f0:	f8be 3000 	ldrh.w	r3, [lr]
 80165f4:	fb09 330a 	mla	r3, r9, sl, r3
 80165f8:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80165fc:	4562      	cmp	r2, ip
 80165fe:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8016602:	d8e5      	bhi.n	80165d0 <__multiply+0x10c>
 8016604:	9f01      	ldr	r7, [sp, #4]
 8016606:	51eb      	str	r3, [r5, r7]
 8016608:	3504      	adds	r5, #4
 801660a:	e799      	b.n	8016540 <__multiply+0x7c>
 801660c:	3e01      	subs	r6, #1
 801660e:	e79b      	b.n	8016548 <__multiply+0x84>
 8016610:	080186d1 	.word	0x080186d1
 8016614:	08018742 	.word	0x08018742

08016618 <__pow5mult>:
 8016618:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801661c:	4615      	mov	r5, r2
 801661e:	f012 0203 	ands.w	r2, r2, #3
 8016622:	4607      	mov	r7, r0
 8016624:	460e      	mov	r6, r1
 8016626:	d007      	beq.n	8016638 <__pow5mult+0x20>
 8016628:	4c25      	ldr	r4, [pc, #148]	@ (80166c0 <__pow5mult+0xa8>)
 801662a:	3a01      	subs	r2, #1
 801662c:	2300      	movs	r3, #0
 801662e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8016632:	f7ff fe55 	bl	80162e0 <__multadd>
 8016636:	4606      	mov	r6, r0
 8016638:	10ad      	asrs	r5, r5, #2
 801663a:	d03d      	beq.n	80166b8 <__pow5mult+0xa0>
 801663c:	69fc      	ldr	r4, [r7, #28]
 801663e:	b97c      	cbnz	r4, 8016660 <__pow5mult+0x48>
 8016640:	2010      	movs	r0, #16
 8016642:	f7ff fd23 	bl	801608c <malloc>
 8016646:	4602      	mov	r2, r0
 8016648:	61f8      	str	r0, [r7, #28]
 801664a:	b928      	cbnz	r0, 8016658 <__pow5mult+0x40>
 801664c:	4b1d      	ldr	r3, [pc, #116]	@ (80166c4 <__pow5mult+0xac>)
 801664e:	481e      	ldr	r0, [pc, #120]	@ (80166c8 <__pow5mult+0xb0>)
 8016650:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8016654:	f000 fccc 	bl	8016ff0 <__assert_func>
 8016658:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801665c:	6004      	str	r4, [r0, #0]
 801665e:	60c4      	str	r4, [r0, #12]
 8016660:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8016664:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8016668:	b94c      	cbnz	r4, 801667e <__pow5mult+0x66>
 801666a:	f240 2171 	movw	r1, #625	@ 0x271
 801666e:	4638      	mov	r0, r7
 8016670:	f7ff ff12 	bl	8016498 <__i2b>
 8016674:	2300      	movs	r3, #0
 8016676:	f8c8 0008 	str.w	r0, [r8, #8]
 801667a:	4604      	mov	r4, r0
 801667c:	6003      	str	r3, [r0, #0]
 801667e:	f04f 0900 	mov.w	r9, #0
 8016682:	07eb      	lsls	r3, r5, #31
 8016684:	d50a      	bpl.n	801669c <__pow5mult+0x84>
 8016686:	4631      	mov	r1, r6
 8016688:	4622      	mov	r2, r4
 801668a:	4638      	mov	r0, r7
 801668c:	f7ff ff1a 	bl	80164c4 <__multiply>
 8016690:	4631      	mov	r1, r6
 8016692:	4680      	mov	r8, r0
 8016694:	4638      	mov	r0, r7
 8016696:	f7ff fe01 	bl	801629c <_Bfree>
 801669a:	4646      	mov	r6, r8
 801669c:	106d      	asrs	r5, r5, #1
 801669e:	d00b      	beq.n	80166b8 <__pow5mult+0xa0>
 80166a0:	6820      	ldr	r0, [r4, #0]
 80166a2:	b938      	cbnz	r0, 80166b4 <__pow5mult+0x9c>
 80166a4:	4622      	mov	r2, r4
 80166a6:	4621      	mov	r1, r4
 80166a8:	4638      	mov	r0, r7
 80166aa:	f7ff ff0b 	bl	80164c4 <__multiply>
 80166ae:	6020      	str	r0, [r4, #0]
 80166b0:	f8c0 9000 	str.w	r9, [r0]
 80166b4:	4604      	mov	r4, r0
 80166b6:	e7e4      	b.n	8016682 <__pow5mult+0x6a>
 80166b8:	4630      	mov	r0, r6
 80166ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80166be:	bf00      	nop
 80166c0:	0801879c 	.word	0x0801879c
 80166c4:	08018662 	.word	0x08018662
 80166c8:	08018742 	.word	0x08018742

080166cc <__lshift>:
 80166cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80166d0:	460c      	mov	r4, r1
 80166d2:	6849      	ldr	r1, [r1, #4]
 80166d4:	6923      	ldr	r3, [r4, #16]
 80166d6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80166da:	68a3      	ldr	r3, [r4, #8]
 80166dc:	4607      	mov	r7, r0
 80166de:	4691      	mov	r9, r2
 80166e0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80166e4:	f108 0601 	add.w	r6, r8, #1
 80166e8:	42b3      	cmp	r3, r6
 80166ea:	db0b      	blt.n	8016704 <__lshift+0x38>
 80166ec:	4638      	mov	r0, r7
 80166ee:	f7ff fd95 	bl	801621c <_Balloc>
 80166f2:	4605      	mov	r5, r0
 80166f4:	b948      	cbnz	r0, 801670a <__lshift+0x3e>
 80166f6:	4602      	mov	r2, r0
 80166f8:	4b28      	ldr	r3, [pc, #160]	@ (801679c <__lshift+0xd0>)
 80166fa:	4829      	ldr	r0, [pc, #164]	@ (80167a0 <__lshift+0xd4>)
 80166fc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8016700:	f000 fc76 	bl	8016ff0 <__assert_func>
 8016704:	3101      	adds	r1, #1
 8016706:	005b      	lsls	r3, r3, #1
 8016708:	e7ee      	b.n	80166e8 <__lshift+0x1c>
 801670a:	2300      	movs	r3, #0
 801670c:	f100 0114 	add.w	r1, r0, #20
 8016710:	f100 0210 	add.w	r2, r0, #16
 8016714:	4618      	mov	r0, r3
 8016716:	4553      	cmp	r3, sl
 8016718:	db33      	blt.n	8016782 <__lshift+0xb6>
 801671a:	6920      	ldr	r0, [r4, #16]
 801671c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8016720:	f104 0314 	add.w	r3, r4, #20
 8016724:	f019 091f 	ands.w	r9, r9, #31
 8016728:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801672c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8016730:	d02b      	beq.n	801678a <__lshift+0xbe>
 8016732:	f1c9 0e20 	rsb	lr, r9, #32
 8016736:	468a      	mov	sl, r1
 8016738:	2200      	movs	r2, #0
 801673a:	6818      	ldr	r0, [r3, #0]
 801673c:	fa00 f009 	lsl.w	r0, r0, r9
 8016740:	4310      	orrs	r0, r2
 8016742:	f84a 0b04 	str.w	r0, [sl], #4
 8016746:	f853 2b04 	ldr.w	r2, [r3], #4
 801674a:	459c      	cmp	ip, r3
 801674c:	fa22 f20e 	lsr.w	r2, r2, lr
 8016750:	d8f3      	bhi.n	801673a <__lshift+0x6e>
 8016752:	ebac 0304 	sub.w	r3, ip, r4
 8016756:	3b15      	subs	r3, #21
 8016758:	f023 0303 	bic.w	r3, r3, #3
 801675c:	3304      	adds	r3, #4
 801675e:	f104 0015 	add.w	r0, r4, #21
 8016762:	4584      	cmp	ip, r0
 8016764:	bf38      	it	cc
 8016766:	2304      	movcc	r3, #4
 8016768:	50ca      	str	r2, [r1, r3]
 801676a:	b10a      	cbz	r2, 8016770 <__lshift+0xa4>
 801676c:	f108 0602 	add.w	r6, r8, #2
 8016770:	3e01      	subs	r6, #1
 8016772:	4638      	mov	r0, r7
 8016774:	612e      	str	r6, [r5, #16]
 8016776:	4621      	mov	r1, r4
 8016778:	f7ff fd90 	bl	801629c <_Bfree>
 801677c:	4628      	mov	r0, r5
 801677e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016782:	f842 0f04 	str.w	r0, [r2, #4]!
 8016786:	3301      	adds	r3, #1
 8016788:	e7c5      	b.n	8016716 <__lshift+0x4a>
 801678a:	3904      	subs	r1, #4
 801678c:	f853 2b04 	ldr.w	r2, [r3], #4
 8016790:	f841 2f04 	str.w	r2, [r1, #4]!
 8016794:	459c      	cmp	ip, r3
 8016796:	d8f9      	bhi.n	801678c <__lshift+0xc0>
 8016798:	e7ea      	b.n	8016770 <__lshift+0xa4>
 801679a:	bf00      	nop
 801679c:	080186d1 	.word	0x080186d1
 80167a0:	08018742 	.word	0x08018742

080167a4 <__mcmp>:
 80167a4:	690a      	ldr	r2, [r1, #16]
 80167a6:	4603      	mov	r3, r0
 80167a8:	6900      	ldr	r0, [r0, #16]
 80167aa:	1a80      	subs	r0, r0, r2
 80167ac:	b530      	push	{r4, r5, lr}
 80167ae:	d10e      	bne.n	80167ce <__mcmp+0x2a>
 80167b0:	3314      	adds	r3, #20
 80167b2:	3114      	adds	r1, #20
 80167b4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80167b8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80167bc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80167c0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80167c4:	4295      	cmp	r5, r2
 80167c6:	d003      	beq.n	80167d0 <__mcmp+0x2c>
 80167c8:	d205      	bcs.n	80167d6 <__mcmp+0x32>
 80167ca:	f04f 30ff 	mov.w	r0, #4294967295
 80167ce:	bd30      	pop	{r4, r5, pc}
 80167d0:	42a3      	cmp	r3, r4
 80167d2:	d3f3      	bcc.n	80167bc <__mcmp+0x18>
 80167d4:	e7fb      	b.n	80167ce <__mcmp+0x2a>
 80167d6:	2001      	movs	r0, #1
 80167d8:	e7f9      	b.n	80167ce <__mcmp+0x2a>
	...

080167dc <__mdiff>:
 80167dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80167e0:	4689      	mov	r9, r1
 80167e2:	4606      	mov	r6, r0
 80167e4:	4611      	mov	r1, r2
 80167e6:	4648      	mov	r0, r9
 80167e8:	4614      	mov	r4, r2
 80167ea:	f7ff ffdb 	bl	80167a4 <__mcmp>
 80167ee:	1e05      	subs	r5, r0, #0
 80167f0:	d112      	bne.n	8016818 <__mdiff+0x3c>
 80167f2:	4629      	mov	r1, r5
 80167f4:	4630      	mov	r0, r6
 80167f6:	f7ff fd11 	bl	801621c <_Balloc>
 80167fa:	4602      	mov	r2, r0
 80167fc:	b928      	cbnz	r0, 801680a <__mdiff+0x2e>
 80167fe:	4b3f      	ldr	r3, [pc, #252]	@ (80168fc <__mdiff+0x120>)
 8016800:	f240 2137 	movw	r1, #567	@ 0x237
 8016804:	483e      	ldr	r0, [pc, #248]	@ (8016900 <__mdiff+0x124>)
 8016806:	f000 fbf3 	bl	8016ff0 <__assert_func>
 801680a:	2301      	movs	r3, #1
 801680c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8016810:	4610      	mov	r0, r2
 8016812:	b003      	add	sp, #12
 8016814:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016818:	bfbc      	itt	lt
 801681a:	464b      	movlt	r3, r9
 801681c:	46a1      	movlt	r9, r4
 801681e:	4630      	mov	r0, r6
 8016820:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8016824:	bfba      	itte	lt
 8016826:	461c      	movlt	r4, r3
 8016828:	2501      	movlt	r5, #1
 801682a:	2500      	movge	r5, #0
 801682c:	f7ff fcf6 	bl	801621c <_Balloc>
 8016830:	4602      	mov	r2, r0
 8016832:	b918      	cbnz	r0, 801683c <__mdiff+0x60>
 8016834:	4b31      	ldr	r3, [pc, #196]	@ (80168fc <__mdiff+0x120>)
 8016836:	f240 2145 	movw	r1, #581	@ 0x245
 801683a:	e7e3      	b.n	8016804 <__mdiff+0x28>
 801683c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8016840:	6926      	ldr	r6, [r4, #16]
 8016842:	60c5      	str	r5, [r0, #12]
 8016844:	f109 0310 	add.w	r3, r9, #16
 8016848:	f109 0514 	add.w	r5, r9, #20
 801684c:	f104 0e14 	add.w	lr, r4, #20
 8016850:	f100 0b14 	add.w	fp, r0, #20
 8016854:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8016858:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 801685c:	9301      	str	r3, [sp, #4]
 801685e:	46d9      	mov	r9, fp
 8016860:	f04f 0c00 	mov.w	ip, #0
 8016864:	9b01      	ldr	r3, [sp, #4]
 8016866:	f85e 0b04 	ldr.w	r0, [lr], #4
 801686a:	f853 af04 	ldr.w	sl, [r3, #4]!
 801686e:	9301      	str	r3, [sp, #4]
 8016870:	fa1f f38a 	uxth.w	r3, sl
 8016874:	4619      	mov	r1, r3
 8016876:	b283      	uxth	r3, r0
 8016878:	1acb      	subs	r3, r1, r3
 801687a:	0c00      	lsrs	r0, r0, #16
 801687c:	4463      	add	r3, ip
 801687e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8016882:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8016886:	b29b      	uxth	r3, r3
 8016888:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 801688c:	4576      	cmp	r6, lr
 801688e:	f849 3b04 	str.w	r3, [r9], #4
 8016892:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8016896:	d8e5      	bhi.n	8016864 <__mdiff+0x88>
 8016898:	1b33      	subs	r3, r6, r4
 801689a:	3b15      	subs	r3, #21
 801689c:	f023 0303 	bic.w	r3, r3, #3
 80168a0:	3415      	adds	r4, #21
 80168a2:	3304      	adds	r3, #4
 80168a4:	42a6      	cmp	r6, r4
 80168a6:	bf38      	it	cc
 80168a8:	2304      	movcc	r3, #4
 80168aa:	441d      	add	r5, r3
 80168ac:	445b      	add	r3, fp
 80168ae:	461e      	mov	r6, r3
 80168b0:	462c      	mov	r4, r5
 80168b2:	4544      	cmp	r4, r8
 80168b4:	d30e      	bcc.n	80168d4 <__mdiff+0xf8>
 80168b6:	f108 0103 	add.w	r1, r8, #3
 80168ba:	1b49      	subs	r1, r1, r5
 80168bc:	f021 0103 	bic.w	r1, r1, #3
 80168c0:	3d03      	subs	r5, #3
 80168c2:	45a8      	cmp	r8, r5
 80168c4:	bf38      	it	cc
 80168c6:	2100      	movcc	r1, #0
 80168c8:	440b      	add	r3, r1
 80168ca:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80168ce:	b191      	cbz	r1, 80168f6 <__mdiff+0x11a>
 80168d0:	6117      	str	r7, [r2, #16]
 80168d2:	e79d      	b.n	8016810 <__mdiff+0x34>
 80168d4:	f854 1b04 	ldr.w	r1, [r4], #4
 80168d8:	46e6      	mov	lr, ip
 80168da:	0c08      	lsrs	r0, r1, #16
 80168dc:	fa1c fc81 	uxtah	ip, ip, r1
 80168e0:	4471      	add	r1, lr
 80168e2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80168e6:	b289      	uxth	r1, r1
 80168e8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80168ec:	f846 1b04 	str.w	r1, [r6], #4
 80168f0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80168f4:	e7dd      	b.n	80168b2 <__mdiff+0xd6>
 80168f6:	3f01      	subs	r7, #1
 80168f8:	e7e7      	b.n	80168ca <__mdiff+0xee>
 80168fa:	bf00      	nop
 80168fc:	080186d1 	.word	0x080186d1
 8016900:	08018742 	.word	0x08018742

08016904 <__ulp>:
 8016904:	b082      	sub	sp, #8
 8016906:	ed8d 0b00 	vstr	d0, [sp]
 801690a:	9a01      	ldr	r2, [sp, #4]
 801690c:	4b0f      	ldr	r3, [pc, #60]	@ (801694c <__ulp+0x48>)
 801690e:	4013      	ands	r3, r2
 8016910:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8016914:	2b00      	cmp	r3, #0
 8016916:	dc08      	bgt.n	801692a <__ulp+0x26>
 8016918:	425b      	negs	r3, r3
 801691a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 801691e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8016922:	da04      	bge.n	801692e <__ulp+0x2a>
 8016924:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8016928:	4113      	asrs	r3, r2
 801692a:	2200      	movs	r2, #0
 801692c:	e008      	b.n	8016940 <__ulp+0x3c>
 801692e:	f1a2 0314 	sub.w	r3, r2, #20
 8016932:	2b1e      	cmp	r3, #30
 8016934:	bfda      	itte	le
 8016936:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 801693a:	40da      	lsrle	r2, r3
 801693c:	2201      	movgt	r2, #1
 801693e:	2300      	movs	r3, #0
 8016940:	4619      	mov	r1, r3
 8016942:	4610      	mov	r0, r2
 8016944:	ec41 0b10 	vmov	d0, r0, r1
 8016948:	b002      	add	sp, #8
 801694a:	4770      	bx	lr
 801694c:	7ff00000 	.word	0x7ff00000

08016950 <__b2d>:
 8016950:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016954:	6906      	ldr	r6, [r0, #16]
 8016956:	f100 0814 	add.w	r8, r0, #20
 801695a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 801695e:	1f37      	subs	r7, r6, #4
 8016960:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8016964:	4610      	mov	r0, r2
 8016966:	f7ff fd4b 	bl	8016400 <__hi0bits>
 801696a:	f1c0 0320 	rsb	r3, r0, #32
 801696e:	280a      	cmp	r0, #10
 8016970:	600b      	str	r3, [r1, #0]
 8016972:	491b      	ldr	r1, [pc, #108]	@ (80169e0 <__b2d+0x90>)
 8016974:	dc15      	bgt.n	80169a2 <__b2d+0x52>
 8016976:	f1c0 0c0b 	rsb	ip, r0, #11
 801697a:	fa22 f30c 	lsr.w	r3, r2, ip
 801697e:	45b8      	cmp	r8, r7
 8016980:	ea43 0501 	orr.w	r5, r3, r1
 8016984:	bf34      	ite	cc
 8016986:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801698a:	2300      	movcs	r3, #0
 801698c:	3015      	adds	r0, #21
 801698e:	fa02 f000 	lsl.w	r0, r2, r0
 8016992:	fa23 f30c 	lsr.w	r3, r3, ip
 8016996:	4303      	orrs	r3, r0
 8016998:	461c      	mov	r4, r3
 801699a:	ec45 4b10 	vmov	d0, r4, r5
 801699e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80169a2:	45b8      	cmp	r8, r7
 80169a4:	bf3a      	itte	cc
 80169a6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80169aa:	f1a6 0708 	subcc.w	r7, r6, #8
 80169ae:	2300      	movcs	r3, #0
 80169b0:	380b      	subs	r0, #11
 80169b2:	d012      	beq.n	80169da <__b2d+0x8a>
 80169b4:	f1c0 0120 	rsb	r1, r0, #32
 80169b8:	fa23 f401 	lsr.w	r4, r3, r1
 80169bc:	4082      	lsls	r2, r0
 80169be:	4322      	orrs	r2, r4
 80169c0:	4547      	cmp	r7, r8
 80169c2:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 80169c6:	bf8c      	ite	hi
 80169c8:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80169cc:	2200      	movls	r2, #0
 80169ce:	4083      	lsls	r3, r0
 80169d0:	40ca      	lsrs	r2, r1
 80169d2:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80169d6:	4313      	orrs	r3, r2
 80169d8:	e7de      	b.n	8016998 <__b2d+0x48>
 80169da:	ea42 0501 	orr.w	r5, r2, r1
 80169de:	e7db      	b.n	8016998 <__b2d+0x48>
 80169e0:	3ff00000 	.word	0x3ff00000

080169e4 <__d2b>:
 80169e4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80169e8:	460f      	mov	r7, r1
 80169ea:	2101      	movs	r1, #1
 80169ec:	ec59 8b10 	vmov	r8, r9, d0
 80169f0:	4616      	mov	r6, r2
 80169f2:	f7ff fc13 	bl	801621c <_Balloc>
 80169f6:	4604      	mov	r4, r0
 80169f8:	b930      	cbnz	r0, 8016a08 <__d2b+0x24>
 80169fa:	4602      	mov	r2, r0
 80169fc:	4b23      	ldr	r3, [pc, #140]	@ (8016a8c <__d2b+0xa8>)
 80169fe:	4824      	ldr	r0, [pc, #144]	@ (8016a90 <__d2b+0xac>)
 8016a00:	f240 310f 	movw	r1, #783	@ 0x30f
 8016a04:	f000 faf4 	bl	8016ff0 <__assert_func>
 8016a08:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8016a0c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8016a10:	b10d      	cbz	r5, 8016a16 <__d2b+0x32>
 8016a12:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8016a16:	9301      	str	r3, [sp, #4]
 8016a18:	f1b8 0300 	subs.w	r3, r8, #0
 8016a1c:	d023      	beq.n	8016a66 <__d2b+0x82>
 8016a1e:	4668      	mov	r0, sp
 8016a20:	9300      	str	r3, [sp, #0]
 8016a22:	f7ff fd0c 	bl	801643e <__lo0bits>
 8016a26:	e9dd 1200 	ldrd	r1, r2, [sp]
 8016a2a:	b1d0      	cbz	r0, 8016a62 <__d2b+0x7e>
 8016a2c:	f1c0 0320 	rsb	r3, r0, #32
 8016a30:	fa02 f303 	lsl.w	r3, r2, r3
 8016a34:	430b      	orrs	r3, r1
 8016a36:	40c2      	lsrs	r2, r0
 8016a38:	6163      	str	r3, [r4, #20]
 8016a3a:	9201      	str	r2, [sp, #4]
 8016a3c:	9b01      	ldr	r3, [sp, #4]
 8016a3e:	61a3      	str	r3, [r4, #24]
 8016a40:	2b00      	cmp	r3, #0
 8016a42:	bf0c      	ite	eq
 8016a44:	2201      	moveq	r2, #1
 8016a46:	2202      	movne	r2, #2
 8016a48:	6122      	str	r2, [r4, #16]
 8016a4a:	b1a5      	cbz	r5, 8016a76 <__d2b+0x92>
 8016a4c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8016a50:	4405      	add	r5, r0
 8016a52:	603d      	str	r5, [r7, #0]
 8016a54:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8016a58:	6030      	str	r0, [r6, #0]
 8016a5a:	4620      	mov	r0, r4
 8016a5c:	b003      	add	sp, #12
 8016a5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016a62:	6161      	str	r1, [r4, #20]
 8016a64:	e7ea      	b.n	8016a3c <__d2b+0x58>
 8016a66:	a801      	add	r0, sp, #4
 8016a68:	f7ff fce9 	bl	801643e <__lo0bits>
 8016a6c:	9b01      	ldr	r3, [sp, #4]
 8016a6e:	6163      	str	r3, [r4, #20]
 8016a70:	3020      	adds	r0, #32
 8016a72:	2201      	movs	r2, #1
 8016a74:	e7e8      	b.n	8016a48 <__d2b+0x64>
 8016a76:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8016a7a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8016a7e:	6038      	str	r0, [r7, #0]
 8016a80:	6918      	ldr	r0, [r3, #16]
 8016a82:	f7ff fcbd 	bl	8016400 <__hi0bits>
 8016a86:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8016a8a:	e7e5      	b.n	8016a58 <__d2b+0x74>
 8016a8c:	080186d1 	.word	0x080186d1
 8016a90:	08018742 	.word	0x08018742

08016a94 <__ratio>:
 8016a94:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016a98:	4688      	mov	r8, r1
 8016a9a:	4669      	mov	r1, sp
 8016a9c:	4681      	mov	r9, r0
 8016a9e:	f7ff ff57 	bl	8016950 <__b2d>
 8016aa2:	a901      	add	r1, sp, #4
 8016aa4:	4640      	mov	r0, r8
 8016aa6:	ec55 4b10 	vmov	r4, r5, d0
 8016aaa:	f7ff ff51 	bl	8016950 <__b2d>
 8016aae:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8016ab2:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8016ab6:	1ad2      	subs	r2, r2, r3
 8016ab8:	e9dd 3100 	ldrd	r3, r1, [sp]
 8016abc:	1a5b      	subs	r3, r3, r1
 8016abe:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 8016ac2:	ec57 6b10 	vmov	r6, r7, d0
 8016ac6:	2b00      	cmp	r3, #0
 8016ac8:	bfd6      	itet	le
 8016aca:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8016ace:	462a      	movgt	r2, r5
 8016ad0:	463a      	movle	r2, r7
 8016ad2:	46ab      	mov	fp, r5
 8016ad4:	46a2      	mov	sl, r4
 8016ad6:	bfce      	itee	gt
 8016ad8:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8016adc:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 8016ae0:	ee00 3a90 	vmovle	s1, r3
 8016ae4:	ec4b ab17 	vmov	d7, sl, fp
 8016ae8:	ee87 0b00 	vdiv.f64	d0, d7, d0
 8016aec:	b003      	add	sp, #12
 8016aee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016af2 <__copybits>:
 8016af2:	3901      	subs	r1, #1
 8016af4:	b570      	push	{r4, r5, r6, lr}
 8016af6:	1149      	asrs	r1, r1, #5
 8016af8:	6914      	ldr	r4, [r2, #16]
 8016afa:	3101      	adds	r1, #1
 8016afc:	f102 0314 	add.w	r3, r2, #20
 8016b00:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8016b04:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8016b08:	1f05      	subs	r5, r0, #4
 8016b0a:	42a3      	cmp	r3, r4
 8016b0c:	d30c      	bcc.n	8016b28 <__copybits+0x36>
 8016b0e:	1aa3      	subs	r3, r4, r2
 8016b10:	3b11      	subs	r3, #17
 8016b12:	f023 0303 	bic.w	r3, r3, #3
 8016b16:	3211      	adds	r2, #17
 8016b18:	42a2      	cmp	r2, r4
 8016b1a:	bf88      	it	hi
 8016b1c:	2300      	movhi	r3, #0
 8016b1e:	4418      	add	r0, r3
 8016b20:	2300      	movs	r3, #0
 8016b22:	4288      	cmp	r0, r1
 8016b24:	d305      	bcc.n	8016b32 <__copybits+0x40>
 8016b26:	bd70      	pop	{r4, r5, r6, pc}
 8016b28:	f853 6b04 	ldr.w	r6, [r3], #4
 8016b2c:	f845 6f04 	str.w	r6, [r5, #4]!
 8016b30:	e7eb      	b.n	8016b0a <__copybits+0x18>
 8016b32:	f840 3b04 	str.w	r3, [r0], #4
 8016b36:	e7f4      	b.n	8016b22 <__copybits+0x30>

08016b38 <__any_on>:
 8016b38:	f100 0214 	add.w	r2, r0, #20
 8016b3c:	6900      	ldr	r0, [r0, #16]
 8016b3e:	114b      	asrs	r3, r1, #5
 8016b40:	4298      	cmp	r0, r3
 8016b42:	b510      	push	{r4, lr}
 8016b44:	db11      	blt.n	8016b6a <__any_on+0x32>
 8016b46:	dd0a      	ble.n	8016b5e <__any_on+0x26>
 8016b48:	f011 011f 	ands.w	r1, r1, #31
 8016b4c:	d007      	beq.n	8016b5e <__any_on+0x26>
 8016b4e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8016b52:	fa24 f001 	lsr.w	r0, r4, r1
 8016b56:	fa00 f101 	lsl.w	r1, r0, r1
 8016b5a:	428c      	cmp	r4, r1
 8016b5c:	d10b      	bne.n	8016b76 <__any_on+0x3e>
 8016b5e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8016b62:	4293      	cmp	r3, r2
 8016b64:	d803      	bhi.n	8016b6e <__any_on+0x36>
 8016b66:	2000      	movs	r0, #0
 8016b68:	bd10      	pop	{r4, pc}
 8016b6a:	4603      	mov	r3, r0
 8016b6c:	e7f7      	b.n	8016b5e <__any_on+0x26>
 8016b6e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8016b72:	2900      	cmp	r1, #0
 8016b74:	d0f5      	beq.n	8016b62 <__any_on+0x2a>
 8016b76:	2001      	movs	r0, #1
 8016b78:	e7f6      	b.n	8016b68 <__any_on+0x30>

08016b7a <__ascii_wctomb>:
 8016b7a:	4603      	mov	r3, r0
 8016b7c:	4608      	mov	r0, r1
 8016b7e:	b141      	cbz	r1, 8016b92 <__ascii_wctomb+0x18>
 8016b80:	2aff      	cmp	r2, #255	@ 0xff
 8016b82:	d904      	bls.n	8016b8e <__ascii_wctomb+0x14>
 8016b84:	228a      	movs	r2, #138	@ 0x8a
 8016b86:	601a      	str	r2, [r3, #0]
 8016b88:	f04f 30ff 	mov.w	r0, #4294967295
 8016b8c:	4770      	bx	lr
 8016b8e:	700a      	strb	r2, [r1, #0]
 8016b90:	2001      	movs	r0, #1
 8016b92:	4770      	bx	lr

08016b94 <__ssputs_r>:
 8016b94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016b98:	688e      	ldr	r6, [r1, #8]
 8016b9a:	461f      	mov	r7, r3
 8016b9c:	42be      	cmp	r6, r7
 8016b9e:	680b      	ldr	r3, [r1, #0]
 8016ba0:	4682      	mov	sl, r0
 8016ba2:	460c      	mov	r4, r1
 8016ba4:	4690      	mov	r8, r2
 8016ba6:	d82d      	bhi.n	8016c04 <__ssputs_r+0x70>
 8016ba8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8016bac:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8016bb0:	d026      	beq.n	8016c00 <__ssputs_r+0x6c>
 8016bb2:	6965      	ldr	r5, [r4, #20]
 8016bb4:	6909      	ldr	r1, [r1, #16]
 8016bb6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016bba:	eba3 0901 	sub.w	r9, r3, r1
 8016bbe:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8016bc2:	1c7b      	adds	r3, r7, #1
 8016bc4:	444b      	add	r3, r9
 8016bc6:	106d      	asrs	r5, r5, #1
 8016bc8:	429d      	cmp	r5, r3
 8016bca:	bf38      	it	cc
 8016bcc:	461d      	movcc	r5, r3
 8016bce:	0553      	lsls	r3, r2, #21
 8016bd0:	d527      	bpl.n	8016c22 <__ssputs_r+0x8e>
 8016bd2:	4629      	mov	r1, r5
 8016bd4:	f7ff fa84 	bl	80160e0 <_malloc_r>
 8016bd8:	4606      	mov	r6, r0
 8016bda:	b360      	cbz	r0, 8016c36 <__ssputs_r+0xa2>
 8016bdc:	6921      	ldr	r1, [r4, #16]
 8016bde:	464a      	mov	r2, r9
 8016be0:	f7fe f8d9 	bl	8014d96 <memcpy>
 8016be4:	89a3      	ldrh	r3, [r4, #12]
 8016be6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8016bea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8016bee:	81a3      	strh	r3, [r4, #12]
 8016bf0:	6126      	str	r6, [r4, #16]
 8016bf2:	6165      	str	r5, [r4, #20]
 8016bf4:	444e      	add	r6, r9
 8016bf6:	eba5 0509 	sub.w	r5, r5, r9
 8016bfa:	6026      	str	r6, [r4, #0]
 8016bfc:	60a5      	str	r5, [r4, #8]
 8016bfe:	463e      	mov	r6, r7
 8016c00:	42be      	cmp	r6, r7
 8016c02:	d900      	bls.n	8016c06 <__ssputs_r+0x72>
 8016c04:	463e      	mov	r6, r7
 8016c06:	6820      	ldr	r0, [r4, #0]
 8016c08:	4632      	mov	r2, r6
 8016c0a:	4641      	mov	r1, r8
 8016c0c:	f000 f9c6 	bl	8016f9c <memmove>
 8016c10:	68a3      	ldr	r3, [r4, #8]
 8016c12:	1b9b      	subs	r3, r3, r6
 8016c14:	60a3      	str	r3, [r4, #8]
 8016c16:	6823      	ldr	r3, [r4, #0]
 8016c18:	4433      	add	r3, r6
 8016c1a:	6023      	str	r3, [r4, #0]
 8016c1c:	2000      	movs	r0, #0
 8016c1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016c22:	462a      	mov	r2, r5
 8016c24:	f000 fa16 	bl	8017054 <_realloc_r>
 8016c28:	4606      	mov	r6, r0
 8016c2a:	2800      	cmp	r0, #0
 8016c2c:	d1e0      	bne.n	8016bf0 <__ssputs_r+0x5c>
 8016c2e:	6921      	ldr	r1, [r4, #16]
 8016c30:	4650      	mov	r0, sl
 8016c32:	f7fe fea7 	bl	8015984 <_free_r>
 8016c36:	230c      	movs	r3, #12
 8016c38:	f8ca 3000 	str.w	r3, [sl]
 8016c3c:	89a3      	ldrh	r3, [r4, #12]
 8016c3e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016c42:	81a3      	strh	r3, [r4, #12]
 8016c44:	f04f 30ff 	mov.w	r0, #4294967295
 8016c48:	e7e9      	b.n	8016c1e <__ssputs_r+0x8a>
	...

08016c4c <_svfiprintf_r>:
 8016c4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016c50:	4698      	mov	r8, r3
 8016c52:	898b      	ldrh	r3, [r1, #12]
 8016c54:	061b      	lsls	r3, r3, #24
 8016c56:	b09d      	sub	sp, #116	@ 0x74
 8016c58:	4607      	mov	r7, r0
 8016c5a:	460d      	mov	r5, r1
 8016c5c:	4614      	mov	r4, r2
 8016c5e:	d510      	bpl.n	8016c82 <_svfiprintf_r+0x36>
 8016c60:	690b      	ldr	r3, [r1, #16]
 8016c62:	b973      	cbnz	r3, 8016c82 <_svfiprintf_r+0x36>
 8016c64:	2140      	movs	r1, #64	@ 0x40
 8016c66:	f7ff fa3b 	bl	80160e0 <_malloc_r>
 8016c6a:	6028      	str	r0, [r5, #0]
 8016c6c:	6128      	str	r0, [r5, #16]
 8016c6e:	b930      	cbnz	r0, 8016c7e <_svfiprintf_r+0x32>
 8016c70:	230c      	movs	r3, #12
 8016c72:	603b      	str	r3, [r7, #0]
 8016c74:	f04f 30ff 	mov.w	r0, #4294967295
 8016c78:	b01d      	add	sp, #116	@ 0x74
 8016c7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016c7e:	2340      	movs	r3, #64	@ 0x40
 8016c80:	616b      	str	r3, [r5, #20]
 8016c82:	2300      	movs	r3, #0
 8016c84:	9309      	str	r3, [sp, #36]	@ 0x24
 8016c86:	2320      	movs	r3, #32
 8016c88:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8016c8c:	f8cd 800c 	str.w	r8, [sp, #12]
 8016c90:	2330      	movs	r3, #48	@ 0x30
 8016c92:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8016e30 <_svfiprintf_r+0x1e4>
 8016c96:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8016c9a:	f04f 0901 	mov.w	r9, #1
 8016c9e:	4623      	mov	r3, r4
 8016ca0:	469a      	mov	sl, r3
 8016ca2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016ca6:	b10a      	cbz	r2, 8016cac <_svfiprintf_r+0x60>
 8016ca8:	2a25      	cmp	r2, #37	@ 0x25
 8016caa:	d1f9      	bne.n	8016ca0 <_svfiprintf_r+0x54>
 8016cac:	ebba 0b04 	subs.w	fp, sl, r4
 8016cb0:	d00b      	beq.n	8016cca <_svfiprintf_r+0x7e>
 8016cb2:	465b      	mov	r3, fp
 8016cb4:	4622      	mov	r2, r4
 8016cb6:	4629      	mov	r1, r5
 8016cb8:	4638      	mov	r0, r7
 8016cba:	f7ff ff6b 	bl	8016b94 <__ssputs_r>
 8016cbe:	3001      	adds	r0, #1
 8016cc0:	f000 80a7 	beq.w	8016e12 <_svfiprintf_r+0x1c6>
 8016cc4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8016cc6:	445a      	add	r2, fp
 8016cc8:	9209      	str	r2, [sp, #36]	@ 0x24
 8016cca:	f89a 3000 	ldrb.w	r3, [sl]
 8016cce:	2b00      	cmp	r3, #0
 8016cd0:	f000 809f 	beq.w	8016e12 <_svfiprintf_r+0x1c6>
 8016cd4:	2300      	movs	r3, #0
 8016cd6:	f04f 32ff 	mov.w	r2, #4294967295
 8016cda:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016cde:	f10a 0a01 	add.w	sl, sl, #1
 8016ce2:	9304      	str	r3, [sp, #16]
 8016ce4:	9307      	str	r3, [sp, #28]
 8016ce6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8016cea:	931a      	str	r3, [sp, #104]	@ 0x68
 8016cec:	4654      	mov	r4, sl
 8016cee:	2205      	movs	r2, #5
 8016cf0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016cf4:	484e      	ldr	r0, [pc, #312]	@ (8016e30 <_svfiprintf_r+0x1e4>)
 8016cf6:	f7e9 fb1b 	bl	8000330 <memchr>
 8016cfa:	9a04      	ldr	r2, [sp, #16]
 8016cfc:	b9d8      	cbnz	r0, 8016d36 <_svfiprintf_r+0xea>
 8016cfe:	06d0      	lsls	r0, r2, #27
 8016d00:	bf44      	itt	mi
 8016d02:	2320      	movmi	r3, #32
 8016d04:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8016d08:	0711      	lsls	r1, r2, #28
 8016d0a:	bf44      	itt	mi
 8016d0c:	232b      	movmi	r3, #43	@ 0x2b
 8016d0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8016d12:	f89a 3000 	ldrb.w	r3, [sl]
 8016d16:	2b2a      	cmp	r3, #42	@ 0x2a
 8016d18:	d015      	beq.n	8016d46 <_svfiprintf_r+0xfa>
 8016d1a:	9a07      	ldr	r2, [sp, #28]
 8016d1c:	4654      	mov	r4, sl
 8016d1e:	2000      	movs	r0, #0
 8016d20:	f04f 0c0a 	mov.w	ip, #10
 8016d24:	4621      	mov	r1, r4
 8016d26:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016d2a:	3b30      	subs	r3, #48	@ 0x30
 8016d2c:	2b09      	cmp	r3, #9
 8016d2e:	d94b      	bls.n	8016dc8 <_svfiprintf_r+0x17c>
 8016d30:	b1b0      	cbz	r0, 8016d60 <_svfiprintf_r+0x114>
 8016d32:	9207      	str	r2, [sp, #28]
 8016d34:	e014      	b.n	8016d60 <_svfiprintf_r+0x114>
 8016d36:	eba0 0308 	sub.w	r3, r0, r8
 8016d3a:	fa09 f303 	lsl.w	r3, r9, r3
 8016d3e:	4313      	orrs	r3, r2
 8016d40:	9304      	str	r3, [sp, #16]
 8016d42:	46a2      	mov	sl, r4
 8016d44:	e7d2      	b.n	8016cec <_svfiprintf_r+0xa0>
 8016d46:	9b03      	ldr	r3, [sp, #12]
 8016d48:	1d19      	adds	r1, r3, #4
 8016d4a:	681b      	ldr	r3, [r3, #0]
 8016d4c:	9103      	str	r1, [sp, #12]
 8016d4e:	2b00      	cmp	r3, #0
 8016d50:	bfbb      	ittet	lt
 8016d52:	425b      	neglt	r3, r3
 8016d54:	f042 0202 	orrlt.w	r2, r2, #2
 8016d58:	9307      	strge	r3, [sp, #28]
 8016d5a:	9307      	strlt	r3, [sp, #28]
 8016d5c:	bfb8      	it	lt
 8016d5e:	9204      	strlt	r2, [sp, #16]
 8016d60:	7823      	ldrb	r3, [r4, #0]
 8016d62:	2b2e      	cmp	r3, #46	@ 0x2e
 8016d64:	d10a      	bne.n	8016d7c <_svfiprintf_r+0x130>
 8016d66:	7863      	ldrb	r3, [r4, #1]
 8016d68:	2b2a      	cmp	r3, #42	@ 0x2a
 8016d6a:	d132      	bne.n	8016dd2 <_svfiprintf_r+0x186>
 8016d6c:	9b03      	ldr	r3, [sp, #12]
 8016d6e:	1d1a      	adds	r2, r3, #4
 8016d70:	681b      	ldr	r3, [r3, #0]
 8016d72:	9203      	str	r2, [sp, #12]
 8016d74:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8016d78:	3402      	adds	r4, #2
 8016d7a:	9305      	str	r3, [sp, #20]
 8016d7c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8016e40 <_svfiprintf_r+0x1f4>
 8016d80:	7821      	ldrb	r1, [r4, #0]
 8016d82:	2203      	movs	r2, #3
 8016d84:	4650      	mov	r0, sl
 8016d86:	f7e9 fad3 	bl	8000330 <memchr>
 8016d8a:	b138      	cbz	r0, 8016d9c <_svfiprintf_r+0x150>
 8016d8c:	9b04      	ldr	r3, [sp, #16]
 8016d8e:	eba0 000a 	sub.w	r0, r0, sl
 8016d92:	2240      	movs	r2, #64	@ 0x40
 8016d94:	4082      	lsls	r2, r0
 8016d96:	4313      	orrs	r3, r2
 8016d98:	3401      	adds	r4, #1
 8016d9a:	9304      	str	r3, [sp, #16]
 8016d9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016da0:	4824      	ldr	r0, [pc, #144]	@ (8016e34 <_svfiprintf_r+0x1e8>)
 8016da2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8016da6:	2206      	movs	r2, #6
 8016da8:	f7e9 fac2 	bl	8000330 <memchr>
 8016dac:	2800      	cmp	r0, #0
 8016dae:	d036      	beq.n	8016e1e <_svfiprintf_r+0x1d2>
 8016db0:	4b21      	ldr	r3, [pc, #132]	@ (8016e38 <_svfiprintf_r+0x1ec>)
 8016db2:	bb1b      	cbnz	r3, 8016dfc <_svfiprintf_r+0x1b0>
 8016db4:	9b03      	ldr	r3, [sp, #12]
 8016db6:	3307      	adds	r3, #7
 8016db8:	f023 0307 	bic.w	r3, r3, #7
 8016dbc:	3308      	adds	r3, #8
 8016dbe:	9303      	str	r3, [sp, #12]
 8016dc0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016dc2:	4433      	add	r3, r6
 8016dc4:	9309      	str	r3, [sp, #36]	@ 0x24
 8016dc6:	e76a      	b.n	8016c9e <_svfiprintf_r+0x52>
 8016dc8:	fb0c 3202 	mla	r2, ip, r2, r3
 8016dcc:	460c      	mov	r4, r1
 8016dce:	2001      	movs	r0, #1
 8016dd0:	e7a8      	b.n	8016d24 <_svfiprintf_r+0xd8>
 8016dd2:	2300      	movs	r3, #0
 8016dd4:	3401      	adds	r4, #1
 8016dd6:	9305      	str	r3, [sp, #20]
 8016dd8:	4619      	mov	r1, r3
 8016dda:	f04f 0c0a 	mov.w	ip, #10
 8016dde:	4620      	mov	r0, r4
 8016de0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016de4:	3a30      	subs	r2, #48	@ 0x30
 8016de6:	2a09      	cmp	r2, #9
 8016de8:	d903      	bls.n	8016df2 <_svfiprintf_r+0x1a6>
 8016dea:	2b00      	cmp	r3, #0
 8016dec:	d0c6      	beq.n	8016d7c <_svfiprintf_r+0x130>
 8016dee:	9105      	str	r1, [sp, #20]
 8016df0:	e7c4      	b.n	8016d7c <_svfiprintf_r+0x130>
 8016df2:	fb0c 2101 	mla	r1, ip, r1, r2
 8016df6:	4604      	mov	r4, r0
 8016df8:	2301      	movs	r3, #1
 8016dfa:	e7f0      	b.n	8016dde <_svfiprintf_r+0x192>
 8016dfc:	ab03      	add	r3, sp, #12
 8016dfe:	9300      	str	r3, [sp, #0]
 8016e00:	462a      	mov	r2, r5
 8016e02:	4b0e      	ldr	r3, [pc, #56]	@ (8016e3c <_svfiprintf_r+0x1f0>)
 8016e04:	a904      	add	r1, sp, #16
 8016e06:	4638      	mov	r0, r7
 8016e08:	f7fd fa5a 	bl	80142c0 <_printf_float>
 8016e0c:	1c42      	adds	r2, r0, #1
 8016e0e:	4606      	mov	r6, r0
 8016e10:	d1d6      	bne.n	8016dc0 <_svfiprintf_r+0x174>
 8016e12:	89ab      	ldrh	r3, [r5, #12]
 8016e14:	065b      	lsls	r3, r3, #25
 8016e16:	f53f af2d 	bmi.w	8016c74 <_svfiprintf_r+0x28>
 8016e1a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8016e1c:	e72c      	b.n	8016c78 <_svfiprintf_r+0x2c>
 8016e1e:	ab03      	add	r3, sp, #12
 8016e20:	9300      	str	r3, [sp, #0]
 8016e22:	462a      	mov	r2, r5
 8016e24:	4b05      	ldr	r3, [pc, #20]	@ (8016e3c <_svfiprintf_r+0x1f0>)
 8016e26:	a904      	add	r1, sp, #16
 8016e28:	4638      	mov	r0, r7
 8016e2a:	f7fd fcd1 	bl	80147d0 <_printf_i>
 8016e2e:	e7ed      	b.n	8016e0c <_svfiprintf_r+0x1c0>
 8016e30:	08018898 	.word	0x08018898
 8016e34:	080188a2 	.word	0x080188a2
 8016e38:	080142c1 	.word	0x080142c1
 8016e3c:	08016b95 	.word	0x08016b95
 8016e40:	0801889e 	.word	0x0801889e

08016e44 <__sflush_r>:
 8016e44:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8016e48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016e4c:	0716      	lsls	r6, r2, #28
 8016e4e:	4605      	mov	r5, r0
 8016e50:	460c      	mov	r4, r1
 8016e52:	d454      	bmi.n	8016efe <__sflush_r+0xba>
 8016e54:	684b      	ldr	r3, [r1, #4]
 8016e56:	2b00      	cmp	r3, #0
 8016e58:	dc02      	bgt.n	8016e60 <__sflush_r+0x1c>
 8016e5a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8016e5c:	2b00      	cmp	r3, #0
 8016e5e:	dd48      	ble.n	8016ef2 <__sflush_r+0xae>
 8016e60:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8016e62:	2e00      	cmp	r6, #0
 8016e64:	d045      	beq.n	8016ef2 <__sflush_r+0xae>
 8016e66:	2300      	movs	r3, #0
 8016e68:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8016e6c:	682f      	ldr	r7, [r5, #0]
 8016e6e:	6a21      	ldr	r1, [r4, #32]
 8016e70:	602b      	str	r3, [r5, #0]
 8016e72:	d030      	beq.n	8016ed6 <__sflush_r+0x92>
 8016e74:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8016e76:	89a3      	ldrh	r3, [r4, #12]
 8016e78:	0759      	lsls	r1, r3, #29
 8016e7a:	d505      	bpl.n	8016e88 <__sflush_r+0x44>
 8016e7c:	6863      	ldr	r3, [r4, #4]
 8016e7e:	1ad2      	subs	r2, r2, r3
 8016e80:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8016e82:	b10b      	cbz	r3, 8016e88 <__sflush_r+0x44>
 8016e84:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8016e86:	1ad2      	subs	r2, r2, r3
 8016e88:	2300      	movs	r3, #0
 8016e8a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8016e8c:	6a21      	ldr	r1, [r4, #32]
 8016e8e:	4628      	mov	r0, r5
 8016e90:	47b0      	blx	r6
 8016e92:	1c43      	adds	r3, r0, #1
 8016e94:	89a3      	ldrh	r3, [r4, #12]
 8016e96:	d106      	bne.n	8016ea6 <__sflush_r+0x62>
 8016e98:	6829      	ldr	r1, [r5, #0]
 8016e9a:	291d      	cmp	r1, #29
 8016e9c:	d82b      	bhi.n	8016ef6 <__sflush_r+0xb2>
 8016e9e:	4a2a      	ldr	r2, [pc, #168]	@ (8016f48 <__sflush_r+0x104>)
 8016ea0:	410a      	asrs	r2, r1
 8016ea2:	07d6      	lsls	r6, r2, #31
 8016ea4:	d427      	bmi.n	8016ef6 <__sflush_r+0xb2>
 8016ea6:	2200      	movs	r2, #0
 8016ea8:	6062      	str	r2, [r4, #4]
 8016eaa:	04d9      	lsls	r1, r3, #19
 8016eac:	6922      	ldr	r2, [r4, #16]
 8016eae:	6022      	str	r2, [r4, #0]
 8016eb0:	d504      	bpl.n	8016ebc <__sflush_r+0x78>
 8016eb2:	1c42      	adds	r2, r0, #1
 8016eb4:	d101      	bne.n	8016eba <__sflush_r+0x76>
 8016eb6:	682b      	ldr	r3, [r5, #0]
 8016eb8:	b903      	cbnz	r3, 8016ebc <__sflush_r+0x78>
 8016eba:	6560      	str	r0, [r4, #84]	@ 0x54
 8016ebc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8016ebe:	602f      	str	r7, [r5, #0]
 8016ec0:	b1b9      	cbz	r1, 8016ef2 <__sflush_r+0xae>
 8016ec2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8016ec6:	4299      	cmp	r1, r3
 8016ec8:	d002      	beq.n	8016ed0 <__sflush_r+0x8c>
 8016eca:	4628      	mov	r0, r5
 8016ecc:	f7fe fd5a 	bl	8015984 <_free_r>
 8016ed0:	2300      	movs	r3, #0
 8016ed2:	6363      	str	r3, [r4, #52]	@ 0x34
 8016ed4:	e00d      	b.n	8016ef2 <__sflush_r+0xae>
 8016ed6:	2301      	movs	r3, #1
 8016ed8:	4628      	mov	r0, r5
 8016eda:	47b0      	blx	r6
 8016edc:	4602      	mov	r2, r0
 8016ede:	1c50      	adds	r0, r2, #1
 8016ee0:	d1c9      	bne.n	8016e76 <__sflush_r+0x32>
 8016ee2:	682b      	ldr	r3, [r5, #0]
 8016ee4:	2b00      	cmp	r3, #0
 8016ee6:	d0c6      	beq.n	8016e76 <__sflush_r+0x32>
 8016ee8:	2b1d      	cmp	r3, #29
 8016eea:	d001      	beq.n	8016ef0 <__sflush_r+0xac>
 8016eec:	2b16      	cmp	r3, #22
 8016eee:	d11e      	bne.n	8016f2e <__sflush_r+0xea>
 8016ef0:	602f      	str	r7, [r5, #0]
 8016ef2:	2000      	movs	r0, #0
 8016ef4:	e022      	b.n	8016f3c <__sflush_r+0xf8>
 8016ef6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016efa:	b21b      	sxth	r3, r3
 8016efc:	e01b      	b.n	8016f36 <__sflush_r+0xf2>
 8016efe:	690f      	ldr	r7, [r1, #16]
 8016f00:	2f00      	cmp	r7, #0
 8016f02:	d0f6      	beq.n	8016ef2 <__sflush_r+0xae>
 8016f04:	0793      	lsls	r3, r2, #30
 8016f06:	680e      	ldr	r6, [r1, #0]
 8016f08:	bf08      	it	eq
 8016f0a:	694b      	ldreq	r3, [r1, #20]
 8016f0c:	600f      	str	r7, [r1, #0]
 8016f0e:	bf18      	it	ne
 8016f10:	2300      	movne	r3, #0
 8016f12:	eba6 0807 	sub.w	r8, r6, r7
 8016f16:	608b      	str	r3, [r1, #8]
 8016f18:	f1b8 0f00 	cmp.w	r8, #0
 8016f1c:	dde9      	ble.n	8016ef2 <__sflush_r+0xae>
 8016f1e:	6a21      	ldr	r1, [r4, #32]
 8016f20:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8016f22:	4643      	mov	r3, r8
 8016f24:	463a      	mov	r2, r7
 8016f26:	4628      	mov	r0, r5
 8016f28:	47b0      	blx	r6
 8016f2a:	2800      	cmp	r0, #0
 8016f2c:	dc08      	bgt.n	8016f40 <__sflush_r+0xfc>
 8016f2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016f32:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016f36:	81a3      	strh	r3, [r4, #12]
 8016f38:	f04f 30ff 	mov.w	r0, #4294967295
 8016f3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016f40:	4407      	add	r7, r0
 8016f42:	eba8 0800 	sub.w	r8, r8, r0
 8016f46:	e7e7      	b.n	8016f18 <__sflush_r+0xd4>
 8016f48:	dfbffffe 	.word	0xdfbffffe

08016f4c <_fflush_r>:
 8016f4c:	b538      	push	{r3, r4, r5, lr}
 8016f4e:	690b      	ldr	r3, [r1, #16]
 8016f50:	4605      	mov	r5, r0
 8016f52:	460c      	mov	r4, r1
 8016f54:	b913      	cbnz	r3, 8016f5c <_fflush_r+0x10>
 8016f56:	2500      	movs	r5, #0
 8016f58:	4628      	mov	r0, r5
 8016f5a:	bd38      	pop	{r3, r4, r5, pc}
 8016f5c:	b118      	cbz	r0, 8016f66 <_fflush_r+0x1a>
 8016f5e:	6a03      	ldr	r3, [r0, #32]
 8016f60:	b90b      	cbnz	r3, 8016f66 <_fflush_r+0x1a>
 8016f62:	f7fd fde1 	bl	8014b28 <__sinit>
 8016f66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016f6a:	2b00      	cmp	r3, #0
 8016f6c:	d0f3      	beq.n	8016f56 <_fflush_r+0xa>
 8016f6e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8016f70:	07d0      	lsls	r0, r2, #31
 8016f72:	d404      	bmi.n	8016f7e <_fflush_r+0x32>
 8016f74:	0599      	lsls	r1, r3, #22
 8016f76:	d402      	bmi.n	8016f7e <_fflush_r+0x32>
 8016f78:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8016f7a:	f7fd ff0a 	bl	8014d92 <__retarget_lock_acquire_recursive>
 8016f7e:	4628      	mov	r0, r5
 8016f80:	4621      	mov	r1, r4
 8016f82:	f7ff ff5f 	bl	8016e44 <__sflush_r>
 8016f86:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8016f88:	07da      	lsls	r2, r3, #31
 8016f8a:	4605      	mov	r5, r0
 8016f8c:	d4e4      	bmi.n	8016f58 <_fflush_r+0xc>
 8016f8e:	89a3      	ldrh	r3, [r4, #12]
 8016f90:	059b      	lsls	r3, r3, #22
 8016f92:	d4e1      	bmi.n	8016f58 <_fflush_r+0xc>
 8016f94:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8016f96:	f7fd fefd 	bl	8014d94 <__retarget_lock_release_recursive>
 8016f9a:	e7dd      	b.n	8016f58 <_fflush_r+0xc>

08016f9c <memmove>:
 8016f9c:	4288      	cmp	r0, r1
 8016f9e:	b510      	push	{r4, lr}
 8016fa0:	eb01 0402 	add.w	r4, r1, r2
 8016fa4:	d902      	bls.n	8016fac <memmove+0x10>
 8016fa6:	4284      	cmp	r4, r0
 8016fa8:	4623      	mov	r3, r4
 8016faa:	d807      	bhi.n	8016fbc <memmove+0x20>
 8016fac:	1e43      	subs	r3, r0, #1
 8016fae:	42a1      	cmp	r1, r4
 8016fb0:	d008      	beq.n	8016fc4 <memmove+0x28>
 8016fb2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016fb6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8016fba:	e7f8      	b.n	8016fae <memmove+0x12>
 8016fbc:	4402      	add	r2, r0
 8016fbe:	4601      	mov	r1, r0
 8016fc0:	428a      	cmp	r2, r1
 8016fc2:	d100      	bne.n	8016fc6 <memmove+0x2a>
 8016fc4:	bd10      	pop	{r4, pc}
 8016fc6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8016fca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8016fce:	e7f7      	b.n	8016fc0 <memmove+0x24>

08016fd0 <_sbrk_r>:
 8016fd0:	b538      	push	{r3, r4, r5, lr}
 8016fd2:	4d06      	ldr	r5, [pc, #24]	@ (8016fec <_sbrk_r+0x1c>)
 8016fd4:	2300      	movs	r3, #0
 8016fd6:	4604      	mov	r4, r0
 8016fd8:	4608      	mov	r0, r1
 8016fda:	602b      	str	r3, [r5, #0]
 8016fdc:	f7eb f99e 	bl	800231c <_sbrk>
 8016fe0:	1c43      	adds	r3, r0, #1
 8016fe2:	d102      	bne.n	8016fea <_sbrk_r+0x1a>
 8016fe4:	682b      	ldr	r3, [r5, #0]
 8016fe6:	b103      	cbz	r3, 8016fea <_sbrk_r+0x1a>
 8016fe8:	6023      	str	r3, [r4, #0]
 8016fea:	bd38      	pop	{r3, r4, r5, pc}
 8016fec:	24006c48 	.word	0x24006c48

08016ff0 <__assert_func>:
 8016ff0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8016ff2:	4614      	mov	r4, r2
 8016ff4:	461a      	mov	r2, r3
 8016ff6:	4b09      	ldr	r3, [pc, #36]	@ (801701c <__assert_func+0x2c>)
 8016ff8:	681b      	ldr	r3, [r3, #0]
 8016ffa:	4605      	mov	r5, r0
 8016ffc:	68d8      	ldr	r0, [r3, #12]
 8016ffe:	b954      	cbnz	r4, 8017016 <__assert_func+0x26>
 8017000:	4b07      	ldr	r3, [pc, #28]	@ (8017020 <__assert_func+0x30>)
 8017002:	461c      	mov	r4, r3
 8017004:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8017008:	9100      	str	r1, [sp, #0]
 801700a:	462b      	mov	r3, r5
 801700c:	4905      	ldr	r1, [pc, #20]	@ (8017024 <__assert_func+0x34>)
 801700e:	f000 f84f 	bl	80170b0 <fiprintf>
 8017012:	f000 f85f 	bl	80170d4 <abort>
 8017016:	4b04      	ldr	r3, [pc, #16]	@ (8017028 <__assert_func+0x38>)
 8017018:	e7f4      	b.n	8017004 <__assert_func+0x14>
 801701a:	bf00      	nop
 801701c:	2400027c 	.word	0x2400027c
 8017020:	080188e4 	.word	0x080188e4
 8017024:	080188b6 	.word	0x080188b6
 8017028:	080188a9 	.word	0x080188a9

0801702c <_calloc_r>:
 801702c:	b570      	push	{r4, r5, r6, lr}
 801702e:	fba1 5402 	umull	r5, r4, r1, r2
 8017032:	b93c      	cbnz	r4, 8017044 <_calloc_r+0x18>
 8017034:	4629      	mov	r1, r5
 8017036:	f7ff f853 	bl	80160e0 <_malloc_r>
 801703a:	4606      	mov	r6, r0
 801703c:	b928      	cbnz	r0, 801704a <_calloc_r+0x1e>
 801703e:	2600      	movs	r6, #0
 8017040:	4630      	mov	r0, r6
 8017042:	bd70      	pop	{r4, r5, r6, pc}
 8017044:	220c      	movs	r2, #12
 8017046:	6002      	str	r2, [r0, #0]
 8017048:	e7f9      	b.n	801703e <_calloc_r+0x12>
 801704a:	462a      	mov	r2, r5
 801704c:	4621      	mov	r1, r4
 801704e:	f7fd fe04 	bl	8014c5a <memset>
 8017052:	e7f5      	b.n	8017040 <_calloc_r+0x14>

08017054 <_realloc_r>:
 8017054:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017058:	4680      	mov	r8, r0
 801705a:	4615      	mov	r5, r2
 801705c:	460c      	mov	r4, r1
 801705e:	b921      	cbnz	r1, 801706a <_realloc_r+0x16>
 8017060:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017064:	4611      	mov	r1, r2
 8017066:	f7ff b83b 	b.w	80160e0 <_malloc_r>
 801706a:	b92a      	cbnz	r2, 8017078 <_realloc_r+0x24>
 801706c:	f7fe fc8a 	bl	8015984 <_free_r>
 8017070:	2400      	movs	r4, #0
 8017072:	4620      	mov	r0, r4
 8017074:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017078:	f000 f833 	bl	80170e2 <_malloc_usable_size_r>
 801707c:	4285      	cmp	r5, r0
 801707e:	4606      	mov	r6, r0
 8017080:	d802      	bhi.n	8017088 <_realloc_r+0x34>
 8017082:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8017086:	d8f4      	bhi.n	8017072 <_realloc_r+0x1e>
 8017088:	4629      	mov	r1, r5
 801708a:	4640      	mov	r0, r8
 801708c:	f7ff f828 	bl	80160e0 <_malloc_r>
 8017090:	4607      	mov	r7, r0
 8017092:	2800      	cmp	r0, #0
 8017094:	d0ec      	beq.n	8017070 <_realloc_r+0x1c>
 8017096:	42b5      	cmp	r5, r6
 8017098:	462a      	mov	r2, r5
 801709a:	4621      	mov	r1, r4
 801709c:	bf28      	it	cs
 801709e:	4632      	movcs	r2, r6
 80170a0:	f7fd fe79 	bl	8014d96 <memcpy>
 80170a4:	4621      	mov	r1, r4
 80170a6:	4640      	mov	r0, r8
 80170a8:	f7fe fc6c 	bl	8015984 <_free_r>
 80170ac:	463c      	mov	r4, r7
 80170ae:	e7e0      	b.n	8017072 <_realloc_r+0x1e>

080170b0 <fiprintf>:
 80170b0:	b40e      	push	{r1, r2, r3}
 80170b2:	b503      	push	{r0, r1, lr}
 80170b4:	4601      	mov	r1, r0
 80170b6:	ab03      	add	r3, sp, #12
 80170b8:	4805      	ldr	r0, [pc, #20]	@ (80170d0 <fiprintf+0x20>)
 80170ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80170be:	6800      	ldr	r0, [r0, #0]
 80170c0:	9301      	str	r3, [sp, #4]
 80170c2:	f000 f83f 	bl	8017144 <_vfiprintf_r>
 80170c6:	b002      	add	sp, #8
 80170c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80170cc:	b003      	add	sp, #12
 80170ce:	4770      	bx	lr
 80170d0:	2400027c 	.word	0x2400027c

080170d4 <abort>:
 80170d4:	b508      	push	{r3, lr}
 80170d6:	2006      	movs	r0, #6
 80170d8:	f000 fa08 	bl	80174ec <raise>
 80170dc:	2001      	movs	r0, #1
 80170de:	f7eb f8a5 	bl	800222c <_exit>

080170e2 <_malloc_usable_size_r>:
 80170e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80170e6:	1f18      	subs	r0, r3, #4
 80170e8:	2b00      	cmp	r3, #0
 80170ea:	bfbc      	itt	lt
 80170ec:	580b      	ldrlt	r3, [r1, r0]
 80170ee:	18c0      	addlt	r0, r0, r3
 80170f0:	4770      	bx	lr

080170f2 <__sfputc_r>:
 80170f2:	6893      	ldr	r3, [r2, #8]
 80170f4:	3b01      	subs	r3, #1
 80170f6:	2b00      	cmp	r3, #0
 80170f8:	b410      	push	{r4}
 80170fa:	6093      	str	r3, [r2, #8]
 80170fc:	da08      	bge.n	8017110 <__sfputc_r+0x1e>
 80170fe:	6994      	ldr	r4, [r2, #24]
 8017100:	42a3      	cmp	r3, r4
 8017102:	db01      	blt.n	8017108 <__sfputc_r+0x16>
 8017104:	290a      	cmp	r1, #10
 8017106:	d103      	bne.n	8017110 <__sfputc_r+0x1e>
 8017108:	f85d 4b04 	ldr.w	r4, [sp], #4
 801710c:	f000 b932 	b.w	8017374 <__swbuf_r>
 8017110:	6813      	ldr	r3, [r2, #0]
 8017112:	1c58      	adds	r0, r3, #1
 8017114:	6010      	str	r0, [r2, #0]
 8017116:	7019      	strb	r1, [r3, #0]
 8017118:	4608      	mov	r0, r1
 801711a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801711e:	4770      	bx	lr

08017120 <__sfputs_r>:
 8017120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017122:	4606      	mov	r6, r0
 8017124:	460f      	mov	r7, r1
 8017126:	4614      	mov	r4, r2
 8017128:	18d5      	adds	r5, r2, r3
 801712a:	42ac      	cmp	r4, r5
 801712c:	d101      	bne.n	8017132 <__sfputs_r+0x12>
 801712e:	2000      	movs	r0, #0
 8017130:	e007      	b.n	8017142 <__sfputs_r+0x22>
 8017132:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017136:	463a      	mov	r2, r7
 8017138:	4630      	mov	r0, r6
 801713a:	f7ff ffda 	bl	80170f2 <__sfputc_r>
 801713e:	1c43      	adds	r3, r0, #1
 8017140:	d1f3      	bne.n	801712a <__sfputs_r+0xa>
 8017142:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08017144 <_vfiprintf_r>:
 8017144:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017148:	460d      	mov	r5, r1
 801714a:	b09d      	sub	sp, #116	@ 0x74
 801714c:	4614      	mov	r4, r2
 801714e:	4698      	mov	r8, r3
 8017150:	4606      	mov	r6, r0
 8017152:	b118      	cbz	r0, 801715c <_vfiprintf_r+0x18>
 8017154:	6a03      	ldr	r3, [r0, #32]
 8017156:	b90b      	cbnz	r3, 801715c <_vfiprintf_r+0x18>
 8017158:	f7fd fce6 	bl	8014b28 <__sinit>
 801715c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801715e:	07d9      	lsls	r1, r3, #31
 8017160:	d405      	bmi.n	801716e <_vfiprintf_r+0x2a>
 8017162:	89ab      	ldrh	r3, [r5, #12]
 8017164:	059a      	lsls	r2, r3, #22
 8017166:	d402      	bmi.n	801716e <_vfiprintf_r+0x2a>
 8017168:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801716a:	f7fd fe12 	bl	8014d92 <__retarget_lock_acquire_recursive>
 801716e:	89ab      	ldrh	r3, [r5, #12]
 8017170:	071b      	lsls	r3, r3, #28
 8017172:	d501      	bpl.n	8017178 <_vfiprintf_r+0x34>
 8017174:	692b      	ldr	r3, [r5, #16]
 8017176:	b99b      	cbnz	r3, 80171a0 <_vfiprintf_r+0x5c>
 8017178:	4629      	mov	r1, r5
 801717a:	4630      	mov	r0, r6
 801717c:	f000 f938 	bl	80173f0 <__swsetup_r>
 8017180:	b170      	cbz	r0, 80171a0 <_vfiprintf_r+0x5c>
 8017182:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8017184:	07dc      	lsls	r4, r3, #31
 8017186:	d504      	bpl.n	8017192 <_vfiprintf_r+0x4e>
 8017188:	f04f 30ff 	mov.w	r0, #4294967295
 801718c:	b01d      	add	sp, #116	@ 0x74
 801718e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017192:	89ab      	ldrh	r3, [r5, #12]
 8017194:	0598      	lsls	r0, r3, #22
 8017196:	d4f7      	bmi.n	8017188 <_vfiprintf_r+0x44>
 8017198:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801719a:	f7fd fdfb 	bl	8014d94 <__retarget_lock_release_recursive>
 801719e:	e7f3      	b.n	8017188 <_vfiprintf_r+0x44>
 80171a0:	2300      	movs	r3, #0
 80171a2:	9309      	str	r3, [sp, #36]	@ 0x24
 80171a4:	2320      	movs	r3, #32
 80171a6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80171aa:	f8cd 800c 	str.w	r8, [sp, #12]
 80171ae:	2330      	movs	r3, #48	@ 0x30
 80171b0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8017360 <_vfiprintf_r+0x21c>
 80171b4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80171b8:	f04f 0901 	mov.w	r9, #1
 80171bc:	4623      	mov	r3, r4
 80171be:	469a      	mov	sl, r3
 80171c0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80171c4:	b10a      	cbz	r2, 80171ca <_vfiprintf_r+0x86>
 80171c6:	2a25      	cmp	r2, #37	@ 0x25
 80171c8:	d1f9      	bne.n	80171be <_vfiprintf_r+0x7a>
 80171ca:	ebba 0b04 	subs.w	fp, sl, r4
 80171ce:	d00b      	beq.n	80171e8 <_vfiprintf_r+0xa4>
 80171d0:	465b      	mov	r3, fp
 80171d2:	4622      	mov	r2, r4
 80171d4:	4629      	mov	r1, r5
 80171d6:	4630      	mov	r0, r6
 80171d8:	f7ff ffa2 	bl	8017120 <__sfputs_r>
 80171dc:	3001      	adds	r0, #1
 80171de:	f000 80a7 	beq.w	8017330 <_vfiprintf_r+0x1ec>
 80171e2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80171e4:	445a      	add	r2, fp
 80171e6:	9209      	str	r2, [sp, #36]	@ 0x24
 80171e8:	f89a 3000 	ldrb.w	r3, [sl]
 80171ec:	2b00      	cmp	r3, #0
 80171ee:	f000 809f 	beq.w	8017330 <_vfiprintf_r+0x1ec>
 80171f2:	2300      	movs	r3, #0
 80171f4:	f04f 32ff 	mov.w	r2, #4294967295
 80171f8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80171fc:	f10a 0a01 	add.w	sl, sl, #1
 8017200:	9304      	str	r3, [sp, #16]
 8017202:	9307      	str	r3, [sp, #28]
 8017204:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8017208:	931a      	str	r3, [sp, #104]	@ 0x68
 801720a:	4654      	mov	r4, sl
 801720c:	2205      	movs	r2, #5
 801720e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017212:	4853      	ldr	r0, [pc, #332]	@ (8017360 <_vfiprintf_r+0x21c>)
 8017214:	f7e9 f88c 	bl	8000330 <memchr>
 8017218:	9a04      	ldr	r2, [sp, #16]
 801721a:	b9d8      	cbnz	r0, 8017254 <_vfiprintf_r+0x110>
 801721c:	06d1      	lsls	r1, r2, #27
 801721e:	bf44      	itt	mi
 8017220:	2320      	movmi	r3, #32
 8017222:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017226:	0713      	lsls	r3, r2, #28
 8017228:	bf44      	itt	mi
 801722a:	232b      	movmi	r3, #43	@ 0x2b
 801722c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017230:	f89a 3000 	ldrb.w	r3, [sl]
 8017234:	2b2a      	cmp	r3, #42	@ 0x2a
 8017236:	d015      	beq.n	8017264 <_vfiprintf_r+0x120>
 8017238:	9a07      	ldr	r2, [sp, #28]
 801723a:	4654      	mov	r4, sl
 801723c:	2000      	movs	r0, #0
 801723e:	f04f 0c0a 	mov.w	ip, #10
 8017242:	4621      	mov	r1, r4
 8017244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017248:	3b30      	subs	r3, #48	@ 0x30
 801724a:	2b09      	cmp	r3, #9
 801724c:	d94b      	bls.n	80172e6 <_vfiprintf_r+0x1a2>
 801724e:	b1b0      	cbz	r0, 801727e <_vfiprintf_r+0x13a>
 8017250:	9207      	str	r2, [sp, #28]
 8017252:	e014      	b.n	801727e <_vfiprintf_r+0x13a>
 8017254:	eba0 0308 	sub.w	r3, r0, r8
 8017258:	fa09 f303 	lsl.w	r3, r9, r3
 801725c:	4313      	orrs	r3, r2
 801725e:	9304      	str	r3, [sp, #16]
 8017260:	46a2      	mov	sl, r4
 8017262:	e7d2      	b.n	801720a <_vfiprintf_r+0xc6>
 8017264:	9b03      	ldr	r3, [sp, #12]
 8017266:	1d19      	adds	r1, r3, #4
 8017268:	681b      	ldr	r3, [r3, #0]
 801726a:	9103      	str	r1, [sp, #12]
 801726c:	2b00      	cmp	r3, #0
 801726e:	bfbb      	ittet	lt
 8017270:	425b      	neglt	r3, r3
 8017272:	f042 0202 	orrlt.w	r2, r2, #2
 8017276:	9307      	strge	r3, [sp, #28]
 8017278:	9307      	strlt	r3, [sp, #28]
 801727a:	bfb8      	it	lt
 801727c:	9204      	strlt	r2, [sp, #16]
 801727e:	7823      	ldrb	r3, [r4, #0]
 8017280:	2b2e      	cmp	r3, #46	@ 0x2e
 8017282:	d10a      	bne.n	801729a <_vfiprintf_r+0x156>
 8017284:	7863      	ldrb	r3, [r4, #1]
 8017286:	2b2a      	cmp	r3, #42	@ 0x2a
 8017288:	d132      	bne.n	80172f0 <_vfiprintf_r+0x1ac>
 801728a:	9b03      	ldr	r3, [sp, #12]
 801728c:	1d1a      	adds	r2, r3, #4
 801728e:	681b      	ldr	r3, [r3, #0]
 8017290:	9203      	str	r2, [sp, #12]
 8017292:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8017296:	3402      	adds	r4, #2
 8017298:	9305      	str	r3, [sp, #20]
 801729a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8017370 <_vfiprintf_r+0x22c>
 801729e:	7821      	ldrb	r1, [r4, #0]
 80172a0:	2203      	movs	r2, #3
 80172a2:	4650      	mov	r0, sl
 80172a4:	f7e9 f844 	bl	8000330 <memchr>
 80172a8:	b138      	cbz	r0, 80172ba <_vfiprintf_r+0x176>
 80172aa:	9b04      	ldr	r3, [sp, #16]
 80172ac:	eba0 000a 	sub.w	r0, r0, sl
 80172b0:	2240      	movs	r2, #64	@ 0x40
 80172b2:	4082      	lsls	r2, r0
 80172b4:	4313      	orrs	r3, r2
 80172b6:	3401      	adds	r4, #1
 80172b8:	9304      	str	r3, [sp, #16]
 80172ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80172be:	4829      	ldr	r0, [pc, #164]	@ (8017364 <_vfiprintf_r+0x220>)
 80172c0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80172c4:	2206      	movs	r2, #6
 80172c6:	f7e9 f833 	bl	8000330 <memchr>
 80172ca:	2800      	cmp	r0, #0
 80172cc:	d03f      	beq.n	801734e <_vfiprintf_r+0x20a>
 80172ce:	4b26      	ldr	r3, [pc, #152]	@ (8017368 <_vfiprintf_r+0x224>)
 80172d0:	bb1b      	cbnz	r3, 801731a <_vfiprintf_r+0x1d6>
 80172d2:	9b03      	ldr	r3, [sp, #12]
 80172d4:	3307      	adds	r3, #7
 80172d6:	f023 0307 	bic.w	r3, r3, #7
 80172da:	3308      	adds	r3, #8
 80172dc:	9303      	str	r3, [sp, #12]
 80172de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80172e0:	443b      	add	r3, r7
 80172e2:	9309      	str	r3, [sp, #36]	@ 0x24
 80172e4:	e76a      	b.n	80171bc <_vfiprintf_r+0x78>
 80172e6:	fb0c 3202 	mla	r2, ip, r2, r3
 80172ea:	460c      	mov	r4, r1
 80172ec:	2001      	movs	r0, #1
 80172ee:	e7a8      	b.n	8017242 <_vfiprintf_r+0xfe>
 80172f0:	2300      	movs	r3, #0
 80172f2:	3401      	adds	r4, #1
 80172f4:	9305      	str	r3, [sp, #20]
 80172f6:	4619      	mov	r1, r3
 80172f8:	f04f 0c0a 	mov.w	ip, #10
 80172fc:	4620      	mov	r0, r4
 80172fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017302:	3a30      	subs	r2, #48	@ 0x30
 8017304:	2a09      	cmp	r2, #9
 8017306:	d903      	bls.n	8017310 <_vfiprintf_r+0x1cc>
 8017308:	2b00      	cmp	r3, #0
 801730a:	d0c6      	beq.n	801729a <_vfiprintf_r+0x156>
 801730c:	9105      	str	r1, [sp, #20]
 801730e:	e7c4      	b.n	801729a <_vfiprintf_r+0x156>
 8017310:	fb0c 2101 	mla	r1, ip, r1, r2
 8017314:	4604      	mov	r4, r0
 8017316:	2301      	movs	r3, #1
 8017318:	e7f0      	b.n	80172fc <_vfiprintf_r+0x1b8>
 801731a:	ab03      	add	r3, sp, #12
 801731c:	9300      	str	r3, [sp, #0]
 801731e:	462a      	mov	r2, r5
 8017320:	4b12      	ldr	r3, [pc, #72]	@ (801736c <_vfiprintf_r+0x228>)
 8017322:	a904      	add	r1, sp, #16
 8017324:	4630      	mov	r0, r6
 8017326:	f7fc ffcb 	bl	80142c0 <_printf_float>
 801732a:	4607      	mov	r7, r0
 801732c:	1c78      	adds	r0, r7, #1
 801732e:	d1d6      	bne.n	80172de <_vfiprintf_r+0x19a>
 8017330:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8017332:	07d9      	lsls	r1, r3, #31
 8017334:	d405      	bmi.n	8017342 <_vfiprintf_r+0x1fe>
 8017336:	89ab      	ldrh	r3, [r5, #12]
 8017338:	059a      	lsls	r2, r3, #22
 801733a:	d402      	bmi.n	8017342 <_vfiprintf_r+0x1fe>
 801733c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801733e:	f7fd fd29 	bl	8014d94 <__retarget_lock_release_recursive>
 8017342:	89ab      	ldrh	r3, [r5, #12]
 8017344:	065b      	lsls	r3, r3, #25
 8017346:	f53f af1f 	bmi.w	8017188 <_vfiprintf_r+0x44>
 801734a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801734c:	e71e      	b.n	801718c <_vfiprintf_r+0x48>
 801734e:	ab03      	add	r3, sp, #12
 8017350:	9300      	str	r3, [sp, #0]
 8017352:	462a      	mov	r2, r5
 8017354:	4b05      	ldr	r3, [pc, #20]	@ (801736c <_vfiprintf_r+0x228>)
 8017356:	a904      	add	r1, sp, #16
 8017358:	4630      	mov	r0, r6
 801735a:	f7fd fa39 	bl	80147d0 <_printf_i>
 801735e:	e7e4      	b.n	801732a <_vfiprintf_r+0x1e6>
 8017360:	08018898 	.word	0x08018898
 8017364:	080188a2 	.word	0x080188a2
 8017368:	080142c1 	.word	0x080142c1
 801736c:	08017121 	.word	0x08017121
 8017370:	0801889e 	.word	0x0801889e

08017374 <__swbuf_r>:
 8017374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017376:	460e      	mov	r6, r1
 8017378:	4614      	mov	r4, r2
 801737a:	4605      	mov	r5, r0
 801737c:	b118      	cbz	r0, 8017386 <__swbuf_r+0x12>
 801737e:	6a03      	ldr	r3, [r0, #32]
 8017380:	b90b      	cbnz	r3, 8017386 <__swbuf_r+0x12>
 8017382:	f7fd fbd1 	bl	8014b28 <__sinit>
 8017386:	69a3      	ldr	r3, [r4, #24]
 8017388:	60a3      	str	r3, [r4, #8]
 801738a:	89a3      	ldrh	r3, [r4, #12]
 801738c:	071a      	lsls	r2, r3, #28
 801738e:	d501      	bpl.n	8017394 <__swbuf_r+0x20>
 8017390:	6923      	ldr	r3, [r4, #16]
 8017392:	b943      	cbnz	r3, 80173a6 <__swbuf_r+0x32>
 8017394:	4621      	mov	r1, r4
 8017396:	4628      	mov	r0, r5
 8017398:	f000 f82a 	bl	80173f0 <__swsetup_r>
 801739c:	b118      	cbz	r0, 80173a6 <__swbuf_r+0x32>
 801739e:	f04f 37ff 	mov.w	r7, #4294967295
 80173a2:	4638      	mov	r0, r7
 80173a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80173a6:	6823      	ldr	r3, [r4, #0]
 80173a8:	6922      	ldr	r2, [r4, #16]
 80173aa:	1a98      	subs	r0, r3, r2
 80173ac:	6963      	ldr	r3, [r4, #20]
 80173ae:	b2f6      	uxtb	r6, r6
 80173b0:	4283      	cmp	r3, r0
 80173b2:	4637      	mov	r7, r6
 80173b4:	dc05      	bgt.n	80173c2 <__swbuf_r+0x4e>
 80173b6:	4621      	mov	r1, r4
 80173b8:	4628      	mov	r0, r5
 80173ba:	f7ff fdc7 	bl	8016f4c <_fflush_r>
 80173be:	2800      	cmp	r0, #0
 80173c0:	d1ed      	bne.n	801739e <__swbuf_r+0x2a>
 80173c2:	68a3      	ldr	r3, [r4, #8]
 80173c4:	3b01      	subs	r3, #1
 80173c6:	60a3      	str	r3, [r4, #8]
 80173c8:	6823      	ldr	r3, [r4, #0]
 80173ca:	1c5a      	adds	r2, r3, #1
 80173cc:	6022      	str	r2, [r4, #0]
 80173ce:	701e      	strb	r6, [r3, #0]
 80173d0:	6962      	ldr	r2, [r4, #20]
 80173d2:	1c43      	adds	r3, r0, #1
 80173d4:	429a      	cmp	r2, r3
 80173d6:	d004      	beq.n	80173e2 <__swbuf_r+0x6e>
 80173d8:	89a3      	ldrh	r3, [r4, #12]
 80173da:	07db      	lsls	r3, r3, #31
 80173dc:	d5e1      	bpl.n	80173a2 <__swbuf_r+0x2e>
 80173de:	2e0a      	cmp	r6, #10
 80173e0:	d1df      	bne.n	80173a2 <__swbuf_r+0x2e>
 80173e2:	4621      	mov	r1, r4
 80173e4:	4628      	mov	r0, r5
 80173e6:	f7ff fdb1 	bl	8016f4c <_fflush_r>
 80173ea:	2800      	cmp	r0, #0
 80173ec:	d0d9      	beq.n	80173a2 <__swbuf_r+0x2e>
 80173ee:	e7d6      	b.n	801739e <__swbuf_r+0x2a>

080173f0 <__swsetup_r>:
 80173f0:	b538      	push	{r3, r4, r5, lr}
 80173f2:	4b29      	ldr	r3, [pc, #164]	@ (8017498 <__swsetup_r+0xa8>)
 80173f4:	4605      	mov	r5, r0
 80173f6:	6818      	ldr	r0, [r3, #0]
 80173f8:	460c      	mov	r4, r1
 80173fa:	b118      	cbz	r0, 8017404 <__swsetup_r+0x14>
 80173fc:	6a03      	ldr	r3, [r0, #32]
 80173fe:	b90b      	cbnz	r3, 8017404 <__swsetup_r+0x14>
 8017400:	f7fd fb92 	bl	8014b28 <__sinit>
 8017404:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017408:	0719      	lsls	r1, r3, #28
 801740a:	d422      	bmi.n	8017452 <__swsetup_r+0x62>
 801740c:	06da      	lsls	r2, r3, #27
 801740e:	d407      	bmi.n	8017420 <__swsetup_r+0x30>
 8017410:	2209      	movs	r2, #9
 8017412:	602a      	str	r2, [r5, #0]
 8017414:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017418:	81a3      	strh	r3, [r4, #12]
 801741a:	f04f 30ff 	mov.w	r0, #4294967295
 801741e:	e033      	b.n	8017488 <__swsetup_r+0x98>
 8017420:	0758      	lsls	r0, r3, #29
 8017422:	d512      	bpl.n	801744a <__swsetup_r+0x5a>
 8017424:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8017426:	b141      	cbz	r1, 801743a <__swsetup_r+0x4a>
 8017428:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801742c:	4299      	cmp	r1, r3
 801742e:	d002      	beq.n	8017436 <__swsetup_r+0x46>
 8017430:	4628      	mov	r0, r5
 8017432:	f7fe faa7 	bl	8015984 <_free_r>
 8017436:	2300      	movs	r3, #0
 8017438:	6363      	str	r3, [r4, #52]	@ 0x34
 801743a:	89a3      	ldrh	r3, [r4, #12]
 801743c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8017440:	81a3      	strh	r3, [r4, #12]
 8017442:	2300      	movs	r3, #0
 8017444:	6063      	str	r3, [r4, #4]
 8017446:	6923      	ldr	r3, [r4, #16]
 8017448:	6023      	str	r3, [r4, #0]
 801744a:	89a3      	ldrh	r3, [r4, #12]
 801744c:	f043 0308 	orr.w	r3, r3, #8
 8017450:	81a3      	strh	r3, [r4, #12]
 8017452:	6923      	ldr	r3, [r4, #16]
 8017454:	b94b      	cbnz	r3, 801746a <__swsetup_r+0x7a>
 8017456:	89a3      	ldrh	r3, [r4, #12]
 8017458:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801745c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8017460:	d003      	beq.n	801746a <__swsetup_r+0x7a>
 8017462:	4621      	mov	r1, r4
 8017464:	4628      	mov	r0, r5
 8017466:	f000 f883 	bl	8017570 <__smakebuf_r>
 801746a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801746e:	f013 0201 	ands.w	r2, r3, #1
 8017472:	d00a      	beq.n	801748a <__swsetup_r+0x9a>
 8017474:	2200      	movs	r2, #0
 8017476:	60a2      	str	r2, [r4, #8]
 8017478:	6962      	ldr	r2, [r4, #20]
 801747a:	4252      	negs	r2, r2
 801747c:	61a2      	str	r2, [r4, #24]
 801747e:	6922      	ldr	r2, [r4, #16]
 8017480:	b942      	cbnz	r2, 8017494 <__swsetup_r+0xa4>
 8017482:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8017486:	d1c5      	bne.n	8017414 <__swsetup_r+0x24>
 8017488:	bd38      	pop	{r3, r4, r5, pc}
 801748a:	0799      	lsls	r1, r3, #30
 801748c:	bf58      	it	pl
 801748e:	6962      	ldrpl	r2, [r4, #20]
 8017490:	60a2      	str	r2, [r4, #8]
 8017492:	e7f4      	b.n	801747e <__swsetup_r+0x8e>
 8017494:	2000      	movs	r0, #0
 8017496:	e7f7      	b.n	8017488 <__swsetup_r+0x98>
 8017498:	2400027c 	.word	0x2400027c

0801749c <_raise_r>:
 801749c:	291f      	cmp	r1, #31
 801749e:	b538      	push	{r3, r4, r5, lr}
 80174a0:	4605      	mov	r5, r0
 80174a2:	460c      	mov	r4, r1
 80174a4:	d904      	bls.n	80174b0 <_raise_r+0x14>
 80174a6:	2316      	movs	r3, #22
 80174a8:	6003      	str	r3, [r0, #0]
 80174aa:	f04f 30ff 	mov.w	r0, #4294967295
 80174ae:	bd38      	pop	{r3, r4, r5, pc}
 80174b0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80174b2:	b112      	cbz	r2, 80174ba <_raise_r+0x1e>
 80174b4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80174b8:	b94b      	cbnz	r3, 80174ce <_raise_r+0x32>
 80174ba:	4628      	mov	r0, r5
 80174bc:	f000 f830 	bl	8017520 <_getpid_r>
 80174c0:	4622      	mov	r2, r4
 80174c2:	4601      	mov	r1, r0
 80174c4:	4628      	mov	r0, r5
 80174c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80174ca:	f000 b817 	b.w	80174fc <_kill_r>
 80174ce:	2b01      	cmp	r3, #1
 80174d0:	d00a      	beq.n	80174e8 <_raise_r+0x4c>
 80174d2:	1c59      	adds	r1, r3, #1
 80174d4:	d103      	bne.n	80174de <_raise_r+0x42>
 80174d6:	2316      	movs	r3, #22
 80174d8:	6003      	str	r3, [r0, #0]
 80174da:	2001      	movs	r0, #1
 80174dc:	e7e7      	b.n	80174ae <_raise_r+0x12>
 80174de:	2100      	movs	r1, #0
 80174e0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80174e4:	4620      	mov	r0, r4
 80174e6:	4798      	blx	r3
 80174e8:	2000      	movs	r0, #0
 80174ea:	e7e0      	b.n	80174ae <_raise_r+0x12>

080174ec <raise>:
 80174ec:	4b02      	ldr	r3, [pc, #8]	@ (80174f8 <raise+0xc>)
 80174ee:	4601      	mov	r1, r0
 80174f0:	6818      	ldr	r0, [r3, #0]
 80174f2:	f7ff bfd3 	b.w	801749c <_raise_r>
 80174f6:	bf00      	nop
 80174f8:	2400027c 	.word	0x2400027c

080174fc <_kill_r>:
 80174fc:	b538      	push	{r3, r4, r5, lr}
 80174fe:	4d07      	ldr	r5, [pc, #28]	@ (801751c <_kill_r+0x20>)
 8017500:	2300      	movs	r3, #0
 8017502:	4604      	mov	r4, r0
 8017504:	4608      	mov	r0, r1
 8017506:	4611      	mov	r1, r2
 8017508:	602b      	str	r3, [r5, #0]
 801750a:	f7ea fe7f 	bl	800220c <_kill>
 801750e:	1c43      	adds	r3, r0, #1
 8017510:	d102      	bne.n	8017518 <_kill_r+0x1c>
 8017512:	682b      	ldr	r3, [r5, #0]
 8017514:	b103      	cbz	r3, 8017518 <_kill_r+0x1c>
 8017516:	6023      	str	r3, [r4, #0]
 8017518:	bd38      	pop	{r3, r4, r5, pc}
 801751a:	bf00      	nop
 801751c:	24006c48 	.word	0x24006c48

08017520 <_getpid_r>:
 8017520:	f7ea be6c 	b.w	80021fc <_getpid>

08017524 <__swhatbuf_r>:
 8017524:	b570      	push	{r4, r5, r6, lr}
 8017526:	460c      	mov	r4, r1
 8017528:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801752c:	2900      	cmp	r1, #0
 801752e:	b096      	sub	sp, #88	@ 0x58
 8017530:	4615      	mov	r5, r2
 8017532:	461e      	mov	r6, r3
 8017534:	da0d      	bge.n	8017552 <__swhatbuf_r+0x2e>
 8017536:	89a3      	ldrh	r3, [r4, #12]
 8017538:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801753c:	f04f 0100 	mov.w	r1, #0
 8017540:	bf14      	ite	ne
 8017542:	2340      	movne	r3, #64	@ 0x40
 8017544:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8017548:	2000      	movs	r0, #0
 801754a:	6031      	str	r1, [r6, #0]
 801754c:	602b      	str	r3, [r5, #0]
 801754e:	b016      	add	sp, #88	@ 0x58
 8017550:	bd70      	pop	{r4, r5, r6, pc}
 8017552:	466a      	mov	r2, sp
 8017554:	f000 f848 	bl	80175e8 <_fstat_r>
 8017558:	2800      	cmp	r0, #0
 801755a:	dbec      	blt.n	8017536 <__swhatbuf_r+0x12>
 801755c:	9901      	ldr	r1, [sp, #4]
 801755e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8017562:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8017566:	4259      	negs	r1, r3
 8017568:	4159      	adcs	r1, r3
 801756a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801756e:	e7eb      	b.n	8017548 <__swhatbuf_r+0x24>

08017570 <__smakebuf_r>:
 8017570:	898b      	ldrh	r3, [r1, #12]
 8017572:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017574:	079d      	lsls	r5, r3, #30
 8017576:	4606      	mov	r6, r0
 8017578:	460c      	mov	r4, r1
 801757a:	d507      	bpl.n	801758c <__smakebuf_r+0x1c>
 801757c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8017580:	6023      	str	r3, [r4, #0]
 8017582:	6123      	str	r3, [r4, #16]
 8017584:	2301      	movs	r3, #1
 8017586:	6163      	str	r3, [r4, #20]
 8017588:	b003      	add	sp, #12
 801758a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801758c:	ab01      	add	r3, sp, #4
 801758e:	466a      	mov	r2, sp
 8017590:	f7ff ffc8 	bl	8017524 <__swhatbuf_r>
 8017594:	9f00      	ldr	r7, [sp, #0]
 8017596:	4605      	mov	r5, r0
 8017598:	4639      	mov	r1, r7
 801759a:	4630      	mov	r0, r6
 801759c:	f7fe fda0 	bl	80160e0 <_malloc_r>
 80175a0:	b948      	cbnz	r0, 80175b6 <__smakebuf_r+0x46>
 80175a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80175a6:	059a      	lsls	r2, r3, #22
 80175a8:	d4ee      	bmi.n	8017588 <__smakebuf_r+0x18>
 80175aa:	f023 0303 	bic.w	r3, r3, #3
 80175ae:	f043 0302 	orr.w	r3, r3, #2
 80175b2:	81a3      	strh	r3, [r4, #12]
 80175b4:	e7e2      	b.n	801757c <__smakebuf_r+0xc>
 80175b6:	89a3      	ldrh	r3, [r4, #12]
 80175b8:	6020      	str	r0, [r4, #0]
 80175ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80175be:	81a3      	strh	r3, [r4, #12]
 80175c0:	9b01      	ldr	r3, [sp, #4]
 80175c2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80175c6:	b15b      	cbz	r3, 80175e0 <__smakebuf_r+0x70>
 80175c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80175cc:	4630      	mov	r0, r6
 80175ce:	f000 f81d 	bl	801760c <_isatty_r>
 80175d2:	b128      	cbz	r0, 80175e0 <__smakebuf_r+0x70>
 80175d4:	89a3      	ldrh	r3, [r4, #12]
 80175d6:	f023 0303 	bic.w	r3, r3, #3
 80175da:	f043 0301 	orr.w	r3, r3, #1
 80175de:	81a3      	strh	r3, [r4, #12]
 80175e0:	89a3      	ldrh	r3, [r4, #12]
 80175e2:	431d      	orrs	r5, r3
 80175e4:	81a5      	strh	r5, [r4, #12]
 80175e6:	e7cf      	b.n	8017588 <__smakebuf_r+0x18>

080175e8 <_fstat_r>:
 80175e8:	b538      	push	{r3, r4, r5, lr}
 80175ea:	4d07      	ldr	r5, [pc, #28]	@ (8017608 <_fstat_r+0x20>)
 80175ec:	2300      	movs	r3, #0
 80175ee:	4604      	mov	r4, r0
 80175f0:	4608      	mov	r0, r1
 80175f2:	4611      	mov	r1, r2
 80175f4:	602b      	str	r3, [r5, #0]
 80175f6:	f7ea fe69 	bl	80022cc <_fstat>
 80175fa:	1c43      	adds	r3, r0, #1
 80175fc:	d102      	bne.n	8017604 <_fstat_r+0x1c>
 80175fe:	682b      	ldr	r3, [r5, #0]
 8017600:	b103      	cbz	r3, 8017604 <_fstat_r+0x1c>
 8017602:	6023      	str	r3, [r4, #0]
 8017604:	bd38      	pop	{r3, r4, r5, pc}
 8017606:	bf00      	nop
 8017608:	24006c48 	.word	0x24006c48

0801760c <_isatty_r>:
 801760c:	b538      	push	{r3, r4, r5, lr}
 801760e:	4d06      	ldr	r5, [pc, #24]	@ (8017628 <_isatty_r+0x1c>)
 8017610:	2300      	movs	r3, #0
 8017612:	4604      	mov	r4, r0
 8017614:	4608      	mov	r0, r1
 8017616:	602b      	str	r3, [r5, #0]
 8017618:	f7ea fe68 	bl	80022ec <_isatty>
 801761c:	1c43      	adds	r3, r0, #1
 801761e:	d102      	bne.n	8017626 <_isatty_r+0x1a>
 8017620:	682b      	ldr	r3, [r5, #0]
 8017622:	b103      	cbz	r3, 8017626 <_isatty_r+0x1a>
 8017624:	6023      	str	r3, [r4, #0]
 8017626:	bd38      	pop	{r3, r4, r5, pc}
 8017628:	24006c48 	.word	0x24006c48
 801762c:	00000000 	.word	0x00000000

08017630 <sin>:
 8017630:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8017632:	eeb0 7b40 	vmov.f64	d7, d0
 8017636:	ee17 3a90 	vmov	r3, s15
 801763a:	4a21      	ldr	r2, [pc, #132]	@ (80176c0 <sin+0x90>)
 801763c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8017640:	4293      	cmp	r3, r2
 8017642:	d807      	bhi.n	8017654 <sin+0x24>
 8017644:	ed9f 1b1c 	vldr	d1, [pc, #112]	@ 80176b8 <sin+0x88>
 8017648:	2000      	movs	r0, #0
 801764a:	b005      	add	sp, #20
 801764c:	f85d eb04 	ldr.w	lr, [sp], #4
 8017650:	f000 b986 	b.w	8017960 <__kernel_sin>
 8017654:	4a1b      	ldr	r2, [pc, #108]	@ (80176c4 <sin+0x94>)
 8017656:	4293      	cmp	r3, r2
 8017658:	d904      	bls.n	8017664 <sin+0x34>
 801765a:	ee30 0b40 	vsub.f64	d0, d0, d0
 801765e:	b005      	add	sp, #20
 8017660:	f85d fb04 	ldr.w	pc, [sp], #4
 8017664:	4668      	mov	r0, sp
 8017666:	f000 f9d3 	bl	8017a10 <__ieee754_rem_pio2>
 801766a:	f000 0003 	and.w	r0, r0, #3
 801766e:	2801      	cmp	r0, #1
 8017670:	d00a      	beq.n	8017688 <sin+0x58>
 8017672:	2802      	cmp	r0, #2
 8017674:	d00f      	beq.n	8017696 <sin+0x66>
 8017676:	b9c0      	cbnz	r0, 80176aa <sin+0x7a>
 8017678:	ed9d 1b02 	vldr	d1, [sp, #8]
 801767c:	ed9d 0b00 	vldr	d0, [sp]
 8017680:	2001      	movs	r0, #1
 8017682:	f000 f96d 	bl	8017960 <__kernel_sin>
 8017686:	e7ea      	b.n	801765e <sin+0x2e>
 8017688:	ed9d 1b02 	vldr	d1, [sp, #8]
 801768c:	ed9d 0b00 	vldr	d0, [sp]
 8017690:	f000 f8fe 	bl	8017890 <__kernel_cos>
 8017694:	e7e3      	b.n	801765e <sin+0x2e>
 8017696:	ed9d 1b02 	vldr	d1, [sp, #8]
 801769a:	ed9d 0b00 	vldr	d0, [sp]
 801769e:	2001      	movs	r0, #1
 80176a0:	f000 f95e 	bl	8017960 <__kernel_sin>
 80176a4:	eeb1 0b40 	vneg.f64	d0, d0
 80176a8:	e7d9      	b.n	801765e <sin+0x2e>
 80176aa:	ed9d 1b02 	vldr	d1, [sp, #8]
 80176ae:	ed9d 0b00 	vldr	d0, [sp]
 80176b2:	f000 f8ed 	bl	8017890 <__kernel_cos>
 80176b6:	e7f5      	b.n	80176a4 <sin+0x74>
	...
 80176c0:	3fe921fb 	.word	0x3fe921fb
 80176c4:	7fefffff 	.word	0x7fefffff

080176c8 <sinf_poly>:
 80176c8:	07cb      	lsls	r3, r1, #31
 80176ca:	d412      	bmi.n	80176f2 <sinf_poly+0x2a>
 80176cc:	ee21 5b00 	vmul.f64	d5, d1, d0
 80176d0:	ed90 6b1a 	vldr	d6, [r0, #104]	@ 0x68
 80176d4:	ed90 7b18 	vldr	d7, [r0, #96]	@ 0x60
 80176d8:	eea6 7b01 	vfma.f64	d7, d6, d1
 80176dc:	ed90 6b16 	vldr	d6, [r0, #88]	@ 0x58
 80176e0:	ee21 1b05 	vmul.f64	d1, d1, d5
 80176e4:	eea6 0b05 	vfma.f64	d0, d6, d5
 80176e8:	eea7 0b01 	vfma.f64	d0, d7, d1
 80176ec:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80176f0:	4770      	bx	lr
 80176f2:	ed90 6b14 	vldr	d6, [r0, #80]	@ 0x50
 80176f6:	ee21 5b01 	vmul.f64	d5, d1, d1
 80176fa:	ed90 7b12 	vldr	d7, [r0, #72]	@ 0x48
 80176fe:	ed90 0b0c 	vldr	d0, [r0, #48]	@ 0x30
 8017702:	eea1 7b06 	vfma.f64	d7, d1, d6
 8017706:	ed90 6b0e 	vldr	d6, [r0, #56]	@ 0x38
 801770a:	eea1 0b06 	vfma.f64	d0, d1, d6
 801770e:	ed90 6b10 	vldr	d6, [r0, #64]	@ 0x40
 8017712:	ee21 1b05 	vmul.f64	d1, d1, d5
 8017716:	eea5 0b06 	vfma.f64	d0, d5, d6
 801771a:	e7e5      	b.n	80176e8 <sinf_poly+0x20>
 801771c:	0000      	movs	r0, r0
	...

08017720 <sinf>:
 8017720:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017722:	ee10 4a10 	vmov	r4, s0
 8017726:	f3c4 530a 	ubfx	r3, r4, #20, #11
 801772a:	f5b3 7f7d 	cmp.w	r3, #1012	@ 0x3f4
 801772e:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 8017732:	eef0 7a40 	vmov.f32	s15, s0
 8017736:	ea4f 5214 	mov.w	r2, r4, lsr #20
 801773a:	d218      	bcs.n	801776e <sinf+0x4e>
 801773c:	ee26 1b06 	vmul.f64	d1, d6, d6
 8017740:	f5b3 7f66 	cmp.w	r3, #920	@ 0x398
 8017744:	d20a      	bcs.n	801775c <sinf+0x3c>
 8017746:	f412 6fff 	tst.w	r2, #2040	@ 0x7f8
 801774a:	d103      	bne.n	8017754 <sinf+0x34>
 801774c:	eeb7 1bc1 	vcvt.f32.f64	s2, d1
 8017750:	ed8d 1a01 	vstr	s2, [sp, #4]
 8017754:	eeb0 0a67 	vmov.f32	s0, s15
 8017758:	b003      	add	sp, #12
 801775a:	bd30      	pop	{r4, r5, pc}
 801775c:	483a      	ldr	r0, [pc, #232]	@ (8017848 <sinf+0x128>)
 801775e:	eeb0 0b46 	vmov.f64	d0, d6
 8017762:	2100      	movs	r1, #0
 8017764:	b003      	add	sp, #12
 8017766:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801776a:	f7ff bfad 	b.w	80176c8 <sinf_poly>
 801776e:	f240 422e 	movw	r2, #1070	@ 0x42e
 8017772:	4293      	cmp	r3, r2
 8017774:	d824      	bhi.n	80177c0 <sinf+0xa0>
 8017776:	4b34      	ldr	r3, [pc, #208]	@ (8017848 <sinf+0x128>)
 8017778:	ed93 7b08 	vldr	d7, [r3, #32]
 801777c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8017780:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8017784:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 8017788:	ee17 1a90 	vmov	r1, s15
 801778c:	f501 0100 	add.w	r1, r1, #8388608	@ 0x800000
 8017790:	1609      	asrs	r1, r1, #24
 8017792:	ee07 1a90 	vmov	s15, r1
 8017796:	f001 0203 	and.w	r2, r1, #3
 801779a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 801779e:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 80177a2:	ed92 0b00 	vldr	d0, [r2]
 80177a6:	ed93 7b0a 	vldr	d7, [r3, #40]	@ 0x28
 80177aa:	f011 0f02 	tst.w	r1, #2
 80177ae:	eea5 6b47 	vfms.f64	d6, d5, d7
 80177b2:	bf08      	it	eq
 80177b4:	4618      	moveq	r0, r3
 80177b6:	ee26 1b06 	vmul.f64	d1, d6, d6
 80177ba:	ee20 0b06 	vmul.f64	d0, d0, d6
 80177be:	e7d1      	b.n	8017764 <sinf+0x44>
 80177c0:	f5b3 6fff 	cmp.w	r3, #2040	@ 0x7f8
 80177c4:	d237      	bcs.n	8017836 <sinf+0x116>
 80177c6:	4921      	ldr	r1, [pc, #132]	@ (801784c <sinf+0x12c>)
 80177c8:	f3c4 6083 	ubfx	r0, r4, #26, #4
 80177cc:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 80177d0:	f3c4 0316 	ubfx	r3, r4, #0, #23
 80177d4:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 80177d8:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 80177dc:	6a10      	ldr	r0, [r2, #32]
 80177de:	6912      	ldr	r2, [r2, #16]
 80177e0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80177e4:	40ab      	lsls	r3, r5
 80177e6:	fba0 5003 	umull	r5, r0, r0, r3
 80177ea:	4359      	muls	r1, r3
 80177ec:	fbe3 0102 	umlal	r0, r1, r3, r2
 80177f0:	f101 5300 	add.w	r3, r1, #536870912	@ 0x20000000
 80177f4:	0f9d      	lsrs	r5, r3, #30
 80177f6:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80177fa:	1ac9      	subs	r1, r1, r3
 80177fc:	f7e8 ff7e 	bl	80006fc <__aeabi_l2d>
 8017800:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 8017804:	4b10      	ldr	r3, [pc, #64]	@ (8017848 <sinf+0x128>)
 8017806:	f004 0203 	and.w	r2, r4, #3
 801780a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 801780e:	ed9f 6b0c 	vldr	d6, [pc, #48]	@ 8017840 <sinf+0x120>
 8017812:	ed92 0b00 	vldr	d0, [r2]
 8017816:	ec41 0b17 	vmov	d7, r0, r1
 801781a:	f014 0f02 	tst.w	r4, #2
 801781e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8017822:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 8017826:	4629      	mov	r1, r5
 8017828:	bf08      	it	eq
 801782a:	4618      	moveq	r0, r3
 801782c:	ee27 1b07 	vmul.f64	d1, d7, d7
 8017830:	ee20 0b07 	vmul.f64	d0, d0, d7
 8017834:	e796      	b.n	8017764 <sinf+0x44>
 8017836:	b003      	add	sp, #12
 8017838:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801783c:	f000 b816 	b.w	801786c <__math_invalidf>
 8017840:	54442d18 	.word	0x54442d18
 8017844:	3c1921fb 	.word	0x3c1921fb
 8017848:	08018948 	.word	0x08018948
 801784c:	080188e8 	.word	0x080188e8

08017850 <with_errnof>:
 8017850:	b510      	push	{r4, lr}
 8017852:	ed2d 8b02 	vpush	{d8}
 8017856:	eeb0 8a40 	vmov.f32	s16, s0
 801785a:	4604      	mov	r4, r0
 801785c:	f7fd fa6e 	bl	8014d3c <__errno>
 8017860:	eeb0 0a48 	vmov.f32	s0, s16
 8017864:	ecbd 8b02 	vpop	{d8}
 8017868:	6004      	str	r4, [r0, #0]
 801786a:	bd10      	pop	{r4, pc}

0801786c <__math_invalidf>:
 801786c:	eef0 7a40 	vmov.f32	s15, s0
 8017870:	ee30 7a40 	vsub.f32	s14, s0, s0
 8017874:	eef4 7a67 	vcmp.f32	s15, s15
 8017878:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801787c:	ee87 0a07 	vdiv.f32	s0, s14, s14
 8017880:	d602      	bvs.n	8017888 <__math_invalidf+0x1c>
 8017882:	2021      	movs	r0, #33	@ 0x21
 8017884:	f7ff bfe4 	b.w	8017850 <with_errnof>
 8017888:	4770      	bx	lr
 801788a:	0000      	movs	r0, r0
 801788c:	0000      	movs	r0, r0
	...

08017890 <__kernel_cos>:
 8017890:	eeb0 5b40 	vmov.f64	d5, d0
 8017894:	ee15 1a90 	vmov	r1, s11
 8017898:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 801789c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80178a0:	f1b1 5f79 	cmp.w	r1, #1044381696	@ 0x3e400000
 80178a4:	d204      	bcs.n	80178b0 <__kernel_cos+0x20>
 80178a6:	eefd 7bc5 	vcvt.s32.f64	s15, d5
 80178aa:	ee17 3a90 	vmov	r3, s15
 80178ae:	b343      	cbz	r3, 8017902 <__kernel_cos+0x72>
 80178b0:	ee25 6b05 	vmul.f64	d6, d5, d5
 80178b4:	ee21 1b45 	vnmul.f64	d1, d1, d5
 80178b8:	ed9f 7b1b 	vldr	d7, [pc, #108]	@ 8017928 <__kernel_cos+0x98>
 80178bc:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 8017930 <__kernel_cos+0xa0>
 80178c0:	eea6 4b07 	vfma.f64	d4, d6, d7
 80178c4:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 8017938 <__kernel_cos+0xa8>
 80178c8:	eea4 7b06 	vfma.f64	d7, d4, d6
 80178cc:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 8017940 <__kernel_cos+0xb0>
 80178d0:	eea7 4b06 	vfma.f64	d4, d7, d6
 80178d4:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 8017948 <__kernel_cos+0xb8>
 80178d8:	4b1f      	ldr	r3, [pc, #124]	@ (8017958 <__kernel_cos+0xc8>)
 80178da:	eea4 7b06 	vfma.f64	d7, d4, d6
 80178de:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 8017950 <__kernel_cos+0xc0>
 80178e2:	4299      	cmp	r1, r3
 80178e4:	eea7 4b06 	vfma.f64	d4, d7, d6
 80178e8:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 80178ec:	ee24 4b06 	vmul.f64	d4, d4, d6
 80178f0:	ee26 7b07 	vmul.f64	d7, d6, d7
 80178f4:	eea6 1b04 	vfma.f64	d1, d6, d4
 80178f8:	d804      	bhi.n	8017904 <__kernel_cos+0x74>
 80178fa:	ee37 7b41 	vsub.f64	d7, d7, d1
 80178fe:	ee30 0b47 	vsub.f64	d0, d0, d7
 8017902:	4770      	bx	lr
 8017904:	4b15      	ldr	r3, [pc, #84]	@ (801795c <__kernel_cos+0xcc>)
 8017906:	4299      	cmp	r1, r3
 8017908:	d809      	bhi.n	801791e <__kernel_cos+0x8e>
 801790a:	2200      	movs	r2, #0
 801790c:	f5a1 1300 	sub.w	r3, r1, #2097152	@ 0x200000
 8017910:	ec43 2b16 	vmov	d6, r2, r3
 8017914:	ee30 0b46 	vsub.f64	d0, d0, d6
 8017918:	ee37 7b46 	vsub.f64	d7, d7, d6
 801791c:	e7ed      	b.n	80178fa <__kernel_cos+0x6a>
 801791e:	eeb5 6b02 	vmov.f64	d6, #82	@ 0x3e900000  0.2812500
 8017922:	e7f7      	b.n	8017914 <__kernel_cos+0x84>
 8017924:	f3af 8000 	nop.w
 8017928:	be8838d4 	.word	0xbe8838d4
 801792c:	bda8fae9 	.word	0xbda8fae9
 8017930:	bdb4b1c4 	.word	0xbdb4b1c4
 8017934:	3e21ee9e 	.word	0x3e21ee9e
 8017938:	809c52ad 	.word	0x809c52ad
 801793c:	be927e4f 	.word	0xbe927e4f
 8017940:	19cb1590 	.word	0x19cb1590
 8017944:	3efa01a0 	.word	0x3efa01a0
 8017948:	16c15177 	.word	0x16c15177
 801794c:	bf56c16c 	.word	0xbf56c16c
 8017950:	5555554c 	.word	0x5555554c
 8017954:	3fa55555 	.word	0x3fa55555
 8017958:	3fd33332 	.word	0x3fd33332
 801795c:	3fe90000 	.word	0x3fe90000

08017960 <__kernel_sin>:
 8017960:	ee10 3a90 	vmov	r3, s1
 8017964:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8017968:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 801796c:	d204      	bcs.n	8017978 <__kernel_sin+0x18>
 801796e:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 8017972:	ee17 3a90 	vmov	r3, s15
 8017976:	b35b      	cbz	r3, 80179d0 <__kernel_sin+0x70>
 8017978:	ee20 6b00 	vmul.f64	d6, d0, d0
 801797c:	ee20 5b06 	vmul.f64	d5, d0, d6
 8017980:	ed9f 7b15 	vldr	d7, [pc, #84]	@ 80179d8 <__kernel_sin+0x78>
 8017984:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 80179e0 <__kernel_sin+0x80>
 8017988:	eea6 4b07 	vfma.f64	d4, d6, d7
 801798c:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 80179e8 <__kernel_sin+0x88>
 8017990:	eea4 7b06 	vfma.f64	d7, d4, d6
 8017994:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 80179f0 <__kernel_sin+0x90>
 8017998:	eea7 4b06 	vfma.f64	d4, d7, d6
 801799c:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 80179f8 <__kernel_sin+0x98>
 80179a0:	eea4 7b06 	vfma.f64	d7, d4, d6
 80179a4:	b930      	cbnz	r0, 80179b4 <__kernel_sin+0x54>
 80179a6:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 8017a00 <__kernel_sin+0xa0>
 80179aa:	eea6 4b07 	vfma.f64	d4, d6, d7
 80179ae:	eea4 0b05 	vfma.f64	d0, d4, d5
 80179b2:	4770      	bx	lr
 80179b4:	ee27 7b45 	vnmul.f64	d7, d7, d5
 80179b8:	eeb6 4b00 	vmov.f64	d4, #96	@ 0x3f000000  0.5
 80179bc:	eea1 7b04 	vfma.f64	d7, d1, d4
 80179c0:	ee97 1b06 	vfnms.f64	d1, d7, d6
 80179c4:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 8017a08 <__kernel_sin+0xa8>
 80179c8:	eea5 1b07 	vfma.f64	d1, d5, d7
 80179cc:	ee30 0b41 	vsub.f64	d0, d0, d1
 80179d0:	4770      	bx	lr
 80179d2:	bf00      	nop
 80179d4:	f3af 8000 	nop.w
 80179d8:	5acfd57c 	.word	0x5acfd57c
 80179dc:	3de5d93a 	.word	0x3de5d93a
 80179e0:	8a2b9ceb 	.word	0x8a2b9ceb
 80179e4:	be5ae5e6 	.word	0xbe5ae5e6
 80179e8:	57b1fe7d 	.word	0x57b1fe7d
 80179ec:	3ec71de3 	.word	0x3ec71de3
 80179f0:	19c161d5 	.word	0x19c161d5
 80179f4:	bf2a01a0 	.word	0xbf2a01a0
 80179f8:	1110f8a6 	.word	0x1110f8a6
 80179fc:	3f811111 	.word	0x3f811111
 8017a00:	55555549 	.word	0x55555549
 8017a04:	bfc55555 	.word	0xbfc55555
 8017a08:	55555549 	.word	0x55555549
 8017a0c:	3fc55555 	.word	0x3fc55555

08017a10 <__ieee754_rem_pio2>:
 8017a10:	b570      	push	{r4, r5, r6, lr}
 8017a12:	eeb0 7b40 	vmov.f64	d7, d0
 8017a16:	ee17 5a90 	vmov	r5, s15
 8017a1a:	4b99      	ldr	r3, [pc, #612]	@ (8017c80 <__ieee754_rem_pio2+0x270>)
 8017a1c:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 8017a20:	429e      	cmp	r6, r3
 8017a22:	b088      	sub	sp, #32
 8017a24:	4604      	mov	r4, r0
 8017a26:	d807      	bhi.n	8017a38 <__ieee754_rem_pio2+0x28>
 8017a28:	2200      	movs	r2, #0
 8017a2a:	2300      	movs	r3, #0
 8017a2c:	ed84 0b00 	vstr	d0, [r4]
 8017a30:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8017a34:	2000      	movs	r0, #0
 8017a36:	e01b      	b.n	8017a70 <__ieee754_rem_pio2+0x60>
 8017a38:	4b92      	ldr	r3, [pc, #584]	@ (8017c84 <__ieee754_rem_pio2+0x274>)
 8017a3a:	429e      	cmp	r6, r3
 8017a3c:	d83b      	bhi.n	8017ab6 <__ieee754_rem_pio2+0xa6>
 8017a3e:	f5a3 231b 	sub.w	r3, r3, #634880	@ 0x9b000
 8017a42:	2d00      	cmp	r5, #0
 8017a44:	ed9f 6b7e 	vldr	d6, [pc, #504]	@ 8017c40 <__ieee754_rem_pio2+0x230>
 8017a48:	f5a3 63f0 	sub.w	r3, r3, #1920	@ 0x780
 8017a4c:	dd19      	ble.n	8017a82 <__ieee754_rem_pio2+0x72>
 8017a4e:	ee30 7b46 	vsub.f64	d7, d0, d6
 8017a52:	429e      	cmp	r6, r3
 8017a54:	d00e      	beq.n	8017a74 <__ieee754_rem_pio2+0x64>
 8017a56:	ed9f 5b7c 	vldr	d5, [pc, #496]	@ 8017c48 <__ieee754_rem_pio2+0x238>
 8017a5a:	ee37 6b45 	vsub.f64	d6, d7, d5
 8017a5e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8017a62:	ed84 6b00 	vstr	d6, [r4]
 8017a66:	ee37 7b45 	vsub.f64	d7, d7, d5
 8017a6a:	ed84 7b02 	vstr	d7, [r4, #8]
 8017a6e:	2001      	movs	r0, #1
 8017a70:	b008      	add	sp, #32
 8017a72:	bd70      	pop	{r4, r5, r6, pc}
 8017a74:	ed9f 6b76 	vldr	d6, [pc, #472]	@ 8017c50 <__ieee754_rem_pio2+0x240>
 8017a78:	ed9f 5b77 	vldr	d5, [pc, #476]	@ 8017c58 <__ieee754_rem_pio2+0x248>
 8017a7c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8017a80:	e7eb      	b.n	8017a5a <__ieee754_rem_pio2+0x4a>
 8017a82:	429e      	cmp	r6, r3
 8017a84:	ee30 7b06 	vadd.f64	d7, d0, d6
 8017a88:	d00e      	beq.n	8017aa8 <__ieee754_rem_pio2+0x98>
 8017a8a:	ed9f 5b6f 	vldr	d5, [pc, #444]	@ 8017c48 <__ieee754_rem_pio2+0x238>
 8017a8e:	ee37 6b05 	vadd.f64	d6, d7, d5
 8017a92:	ee37 7b46 	vsub.f64	d7, d7, d6
 8017a96:	ed84 6b00 	vstr	d6, [r4]
 8017a9a:	ee37 7b05 	vadd.f64	d7, d7, d5
 8017a9e:	f04f 30ff 	mov.w	r0, #4294967295
 8017aa2:	ed84 7b02 	vstr	d7, [r4, #8]
 8017aa6:	e7e3      	b.n	8017a70 <__ieee754_rem_pio2+0x60>
 8017aa8:	ed9f 6b69 	vldr	d6, [pc, #420]	@ 8017c50 <__ieee754_rem_pio2+0x240>
 8017aac:	ed9f 5b6a 	vldr	d5, [pc, #424]	@ 8017c58 <__ieee754_rem_pio2+0x248>
 8017ab0:	ee37 7b06 	vadd.f64	d7, d7, d6
 8017ab4:	e7eb      	b.n	8017a8e <__ieee754_rem_pio2+0x7e>
 8017ab6:	4b74      	ldr	r3, [pc, #464]	@ (8017c88 <__ieee754_rem_pio2+0x278>)
 8017ab8:	429e      	cmp	r6, r3
 8017aba:	d870      	bhi.n	8017b9e <__ieee754_rem_pio2+0x18e>
 8017abc:	f000 f8ec 	bl	8017c98 <fabs>
 8017ac0:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 8017ac4:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8017c60 <__ieee754_rem_pio2+0x250>
 8017ac8:	eea0 7b06 	vfma.f64	d7, d0, d6
 8017acc:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8017ad0:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8017ad4:	ee17 0a90 	vmov	r0, s15
 8017ad8:	eeb1 4b45 	vneg.f64	d4, d5
 8017adc:	ed9f 7b58 	vldr	d7, [pc, #352]	@ 8017c40 <__ieee754_rem_pio2+0x230>
 8017ae0:	eea5 0b47 	vfms.f64	d0, d5, d7
 8017ae4:	ed9f 7b58 	vldr	d7, [pc, #352]	@ 8017c48 <__ieee754_rem_pio2+0x238>
 8017ae8:	281f      	cmp	r0, #31
 8017aea:	ee25 7b07 	vmul.f64	d7, d5, d7
 8017aee:	ee30 6b47 	vsub.f64	d6, d0, d7
 8017af2:	dc05      	bgt.n	8017b00 <__ieee754_rem_pio2+0xf0>
 8017af4:	4b65      	ldr	r3, [pc, #404]	@ (8017c8c <__ieee754_rem_pio2+0x27c>)
 8017af6:	1e42      	subs	r2, r0, #1
 8017af8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017afc:	42b3      	cmp	r3, r6
 8017afe:	d109      	bne.n	8017b14 <__ieee754_rem_pio2+0x104>
 8017b00:	ee16 3a90 	vmov	r3, s13
 8017b04:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8017b08:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 8017b0c:	2b10      	cmp	r3, #16
 8017b0e:	ea4f 5226 	mov.w	r2, r6, asr #20
 8017b12:	dc02      	bgt.n	8017b1a <__ieee754_rem_pio2+0x10a>
 8017b14:	ed84 6b00 	vstr	d6, [r4]
 8017b18:	e01a      	b.n	8017b50 <__ieee754_rem_pio2+0x140>
 8017b1a:	ed9f 3b4d 	vldr	d3, [pc, #308]	@ 8017c50 <__ieee754_rem_pio2+0x240>
 8017b1e:	eeb0 6b40 	vmov.f64	d6, d0
 8017b22:	eea4 6b03 	vfma.f64	d6, d4, d3
 8017b26:	ee30 7b46 	vsub.f64	d7, d0, d6
 8017b2a:	eea4 7b03 	vfma.f64	d7, d4, d3
 8017b2e:	ed9f 3b4a 	vldr	d3, [pc, #296]	@ 8017c58 <__ieee754_rem_pio2+0x248>
 8017b32:	ee95 7b03 	vfnms.f64	d7, d5, d3
 8017b36:	ee36 3b47 	vsub.f64	d3, d6, d7
 8017b3a:	ee13 3a90 	vmov	r3, s7
 8017b3e:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8017b42:	1ad3      	subs	r3, r2, r3
 8017b44:	2b31      	cmp	r3, #49	@ 0x31
 8017b46:	dc17      	bgt.n	8017b78 <__ieee754_rem_pio2+0x168>
 8017b48:	eeb0 0b46 	vmov.f64	d0, d6
 8017b4c:	ed84 3b00 	vstr	d3, [r4]
 8017b50:	ed94 6b00 	vldr	d6, [r4]
 8017b54:	2d00      	cmp	r5, #0
 8017b56:	ee30 0b46 	vsub.f64	d0, d0, d6
 8017b5a:	ee30 0b47 	vsub.f64	d0, d0, d7
 8017b5e:	ed84 0b02 	vstr	d0, [r4, #8]
 8017b62:	da85      	bge.n	8017a70 <__ieee754_rem_pio2+0x60>
 8017b64:	eeb1 6b46 	vneg.f64	d6, d6
 8017b68:	eeb1 0b40 	vneg.f64	d0, d0
 8017b6c:	ed84 6b00 	vstr	d6, [r4]
 8017b70:	ed84 0b02 	vstr	d0, [r4, #8]
 8017b74:	4240      	negs	r0, r0
 8017b76:	e77b      	b.n	8017a70 <__ieee754_rem_pio2+0x60>
 8017b78:	ed9f 7b3b 	vldr	d7, [pc, #236]	@ 8017c68 <__ieee754_rem_pio2+0x258>
 8017b7c:	eeb0 0b46 	vmov.f64	d0, d6
 8017b80:	eea4 0b07 	vfma.f64	d0, d4, d7
 8017b84:	ee36 6b40 	vsub.f64	d6, d6, d0
 8017b88:	eea4 6b07 	vfma.f64	d6, d4, d7
 8017b8c:	ed9f 4b38 	vldr	d4, [pc, #224]	@ 8017c70 <__ieee754_rem_pio2+0x260>
 8017b90:	eeb0 7b46 	vmov.f64	d7, d6
 8017b94:	ee95 7b04 	vfnms.f64	d7, d5, d4
 8017b98:	ee30 6b47 	vsub.f64	d6, d0, d7
 8017b9c:	e7ba      	b.n	8017b14 <__ieee754_rem_pio2+0x104>
 8017b9e:	4b3c      	ldr	r3, [pc, #240]	@ (8017c90 <__ieee754_rem_pio2+0x280>)
 8017ba0:	429e      	cmp	r6, r3
 8017ba2:	d906      	bls.n	8017bb2 <__ieee754_rem_pio2+0x1a2>
 8017ba4:	ee30 7b40 	vsub.f64	d7, d0, d0
 8017ba8:	ed80 7b02 	vstr	d7, [r0, #8]
 8017bac:	ed80 7b00 	vstr	d7, [r0]
 8017bb0:	e740      	b.n	8017a34 <__ieee754_rem_pio2+0x24>
 8017bb2:	ee10 3a10 	vmov	r3, s0
 8017bb6:	1532      	asrs	r2, r6, #20
 8017bb8:	f2a2 4216 	subw	r2, r2, #1046	@ 0x416
 8017bbc:	4618      	mov	r0, r3
 8017bbe:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 8017bc2:	ec41 0b17 	vmov	d7, r0, r1
 8017bc6:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8017bca:	ed9f 5b2b 	vldr	d5, [pc, #172]	@ 8017c78 <__ieee754_rem_pio2+0x268>
 8017bce:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8017bd2:	ee37 7b46 	vsub.f64	d7, d7, d6
 8017bd6:	ed8d 6b02 	vstr	d6, [sp, #8]
 8017bda:	ee27 7b05 	vmul.f64	d7, d7, d5
 8017bde:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8017be2:	a808      	add	r0, sp, #32
 8017be4:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8017be8:	ee37 7b46 	vsub.f64	d7, d7, d6
 8017bec:	ed8d 6b04 	vstr	d6, [sp, #16]
 8017bf0:	ee27 7b05 	vmul.f64	d7, d7, d5
 8017bf4:	ed8d 7b06 	vstr	d7, [sp, #24]
 8017bf8:	2103      	movs	r1, #3
 8017bfa:	ed30 7b02 	vldmdb	r0!, {d7}
 8017bfe:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8017c02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017c06:	460b      	mov	r3, r1
 8017c08:	f101 31ff 	add.w	r1, r1, #4294967295
 8017c0c:	d0f5      	beq.n	8017bfa <__ieee754_rem_pio2+0x1ea>
 8017c0e:	4921      	ldr	r1, [pc, #132]	@ (8017c94 <__ieee754_rem_pio2+0x284>)
 8017c10:	9101      	str	r1, [sp, #4]
 8017c12:	2102      	movs	r1, #2
 8017c14:	9100      	str	r1, [sp, #0]
 8017c16:	a802      	add	r0, sp, #8
 8017c18:	4621      	mov	r1, r4
 8017c1a:	f000 f845 	bl	8017ca8 <__kernel_rem_pio2>
 8017c1e:	2d00      	cmp	r5, #0
 8017c20:	f6bf af26 	bge.w	8017a70 <__ieee754_rem_pio2+0x60>
 8017c24:	ed94 7b00 	vldr	d7, [r4]
 8017c28:	eeb1 7b47 	vneg.f64	d7, d7
 8017c2c:	ed84 7b00 	vstr	d7, [r4]
 8017c30:	ed94 7b02 	vldr	d7, [r4, #8]
 8017c34:	eeb1 7b47 	vneg.f64	d7, d7
 8017c38:	ed84 7b02 	vstr	d7, [r4, #8]
 8017c3c:	e79a      	b.n	8017b74 <__ieee754_rem_pio2+0x164>
 8017c3e:	bf00      	nop
 8017c40:	54400000 	.word	0x54400000
 8017c44:	3ff921fb 	.word	0x3ff921fb
 8017c48:	1a626331 	.word	0x1a626331
 8017c4c:	3dd0b461 	.word	0x3dd0b461
 8017c50:	1a600000 	.word	0x1a600000
 8017c54:	3dd0b461 	.word	0x3dd0b461
 8017c58:	2e037073 	.word	0x2e037073
 8017c5c:	3ba3198a 	.word	0x3ba3198a
 8017c60:	6dc9c883 	.word	0x6dc9c883
 8017c64:	3fe45f30 	.word	0x3fe45f30
 8017c68:	2e000000 	.word	0x2e000000
 8017c6c:	3ba3198a 	.word	0x3ba3198a
 8017c70:	252049c1 	.word	0x252049c1
 8017c74:	397b839a 	.word	0x397b839a
 8017c78:	00000000 	.word	0x00000000
 8017c7c:	41700000 	.word	0x41700000
 8017c80:	3fe921fb 	.word	0x3fe921fb
 8017c84:	4002d97b 	.word	0x4002d97b
 8017c88:	413921fb 	.word	0x413921fb
 8017c8c:	08018a28 	.word	0x08018a28
 8017c90:	7fefffff 	.word	0x7fefffff
 8017c94:	08018aa8 	.word	0x08018aa8

08017c98 <fabs>:
 8017c98:	ec51 0b10 	vmov	r0, r1, d0
 8017c9c:	4602      	mov	r2, r0
 8017c9e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8017ca2:	ec43 2b10 	vmov	d0, r2, r3
 8017ca6:	4770      	bx	lr

08017ca8 <__kernel_rem_pio2>:
 8017ca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017cac:	ed2d 8b06 	vpush	{d8-d10}
 8017cb0:	f5ad 7d13 	sub.w	sp, sp, #588	@ 0x24c
 8017cb4:	469b      	mov	fp, r3
 8017cb6:	9001      	str	r0, [sp, #4]
 8017cb8:	4bbb      	ldr	r3, [pc, #748]	@ (8017fa8 <__kernel_rem_pio2+0x300>)
 8017cba:	98a2      	ldr	r0, [sp, #648]	@ 0x288
 8017cbc:	f8dd 828c 	ldr.w	r8, [sp, #652]	@ 0x28c
 8017cc0:	f853 9020 	ldr.w	r9, [r3, r0, lsl #2]
 8017cc4:	f112 0f14 	cmn.w	r2, #20
 8017cc8:	bfa8      	it	ge
 8017cca:	1ed3      	subge	r3, r2, #3
 8017ccc:	f10b 3aff 	add.w	sl, fp, #4294967295
 8017cd0:	bfb8      	it	lt
 8017cd2:	2300      	movlt	r3, #0
 8017cd4:	f06f 0517 	mvn.w	r5, #23
 8017cd8:	ed9f 6bad 	vldr	d6, [pc, #692]	@ 8017f90 <__kernel_rem_pio2+0x2e8>
 8017cdc:	bfa4      	itt	ge
 8017cde:	2018      	movge	r0, #24
 8017ce0:	fb93 f3f0 	sdivge	r3, r3, r0
 8017ce4:	fb03 5505 	mla	r5, r3, r5, r5
 8017ce8:	eba3 040a 	sub.w	r4, r3, sl
 8017cec:	4415      	add	r5, r2
 8017cee:	460f      	mov	r7, r1
 8017cf0:	eb09 060a 	add.w	r6, r9, sl
 8017cf4:	a81a      	add	r0, sp, #104	@ 0x68
 8017cf6:	eb08 0c84 	add.w	ip, r8, r4, lsl #2
 8017cfa:	2200      	movs	r2, #0
 8017cfc:	42b2      	cmp	r2, r6
 8017cfe:	dd0e      	ble.n	8017d1e <__kernel_rem_pio2+0x76>
 8017d00:	aa1a      	add	r2, sp, #104	@ 0x68
 8017d02:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 8017d06:	f50d 7ed4 	add.w	lr, sp, #424	@ 0x1a8
 8017d0a:	2600      	movs	r6, #0
 8017d0c:	454e      	cmp	r6, r9
 8017d0e:	dc25      	bgt.n	8017d5c <__kernel_rem_pio2+0xb4>
 8017d10:	ed9f 7b9f 	vldr	d7, [pc, #636]	@ 8017f90 <__kernel_rem_pio2+0x2e8>
 8017d14:	f8dd c004 	ldr.w	ip, [sp, #4]
 8017d18:	4614      	mov	r4, r2
 8017d1a:	2000      	movs	r0, #0
 8017d1c:	e015      	b.n	8017d4a <__kernel_rem_pio2+0xa2>
 8017d1e:	42d4      	cmn	r4, r2
 8017d20:	d409      	bmi.n	8017d36 <__kernel_rem_pio2+0x8e>
 8017d22:	f85c 1022 	ldr.w	r1, [ip, r2, lsl #2]
 8017d26:	ee07 1a90 	vmov	s15, r1
 8017d2a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8017d2e:	eca0 7b02 	vstmia	r0!, {d7}
 8017d32:	3201      	adds	r2, #1
 8017d34:	e7e2      	b.n	8017cfc <__kernel_rem_pio2+0x54>
 8017d36:	eeb0 7b46 	vmov.f64	d7, d6
 8017d3a:	e7f8      	b.n	8017d2e <__kernel_rem_pio2+0x86>
 8017d3c:	ecbc 5b02 	vldmia	ip!, {d5}
 8017d40:	ed94 6b00 	vldr	d6, [r4]
 8017d44:	3001      	adds	r0, #1
 8017d46:	eea5 7b06 	vfma.f64	d7, d5, d6
 8017d4a:	4550      	cmp	r0, sl
 8017d4c:	f1a4 0408 	sub.w	r4, r4, #8
 8017d50:	ddf4      	ble.n	8017d3c <__kernel_rem_pio2+0x94>
 8017d52:	ecae 7b02 	vstmia	lr!, {d7}
 8017d56:	3601      	adds	r6, #1
 8017d58:	3208      	adds	r2, #8
 8017d5a:	e7d7      	b.n	8017d0c <__kernel_rem_pio2+0x64>
 8017d5c:	aa06      	add	r2, sp, #24
 8017d5e:	ed9f 9b8e 	vldr	d9, [pc, #568]	@ 8017f98 <__kernel_rem_pio2+0x2f0>
 8017d62:	ed9f ab8f 	vldr	d10, [pc, #572]	@ 8017fa0 <__kernel_rem_pio2+0x2f8>
 8017d66:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 8017d6a:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 8017d6e:	9203      	str	r2, [sp, #12]
 8017d70:	9302      	str	r3, [sp, #8]
 8017d72:	464c      	mov	r4, r9
 8017d74:	00e3      	lsls	r3, r4, #3
 8017d76:	9304      	str	r3, [sp, #16]
 8017d78:	ab92      	add	r3, sp, #584	@ 0x248
 8017d7a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8017d7e:	ed13 0b28 	vldr	d0, [r3, #-160]	@ 0xffffff60
 8017d82:	aa6a      	add	r2, sp, #424	@ 0x1a8
 8017d84:	ab06      	add	r3, sp, #24
 8017d86:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8017d8a:	461e      	mov	r6, r3
 8017d8c:	4620      	mov	r0, r4
 8017d8e:	2800      	cmp	r0, #0
 8017d90:	f1a2 0208 	sub.w	r2, r2, #8
 8017d94:	dc4a      	bgt.n	8017e2c <__kernel_rem_pio2+0x184>
 8017d96:	4628      	mov	r0, r5
 8017d98:	9305      	str	r3, [sp, #20]
 8017d9a:	f000 fa01 	bl	80181a0 <scalbn>
 8017d9e:	eeb0 8b40 	vmov.f64	d8, d0
 8017da2:	eeb4 0b00 	vmov.f64	d0, #64	@ 0x3e000000  0.125
 8017da6:	ee28 0b00 	vmul.f64	d0, d8, d0
 8017daa:	f000 fa79 	bl	80182a0 <floor>
 8017dae:	eeb2 7b00 	vmov.f64	d7, #32	@ 0x41000000  8.0
 8017db2:	eea0 8b47 	vfms.f64	d8, d0, d7
 8017db6:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 8017dba:	2d00      	cmp	r5, #0
 8017dbc:	ee17 8a90 	vmov	r8, s15
 8017dc0:	9b05      	ldr	r3, [sp, #20]
 8017dc2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8017dc6:	ee38 8b47 	vsub.f64	d8, d8, d7
 8017dca:	dd41      	ble.n	8017e50 <__kernel_rem_pio2+0x1a8>
 8017dcc:	1e60      	subs	r0, r4, #1
 8017dce:	aa06      	add	r2, sp, #24
 8017dd0:	f1c5 0c18 	rsb	ip, r5, #24
 8017dd4:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 8017dd8:	fa46 f20c 	asr.w	r2, r6, ip
 8017ddc:	4490      	add	r8, r2
 8017dde:	fa02 f20c 	lsl.w	r2, r2, ip
 8017de2:	1ab6      	subs	r6, r6, r2
 8017de4:	aa06      	add	r2, sp, #24
 8017de6:	f842 6020 	str.w	r6, [r2, r0, lsl #2]
 8017dea:	f1c5 0217 	rsb	r2, r5, #23
 8017dee:	4116      	asrs	r6, r2
 8017df0:	2e00      	cmp	r6, #0
 8017df2:	dd3c      	ble.n	8017e6e <__kernel_rem_pio2+0x1c6>
 8017df4:	f04f 0c00 	mov.w	ip, #0
 8017df8:	f108 0801 	add.w	r8, r8, #1
 8017dfc:	4660      	mov	r0, ip
 8017dfe:	f06f 4e7f 	mvn.w	lr, #4278190080	@ 0xff000000
 8017e02:	4564      	cmp	r4, ip
 8017e04:	dc66      	bgt.n	8017ed4 <__kernel_rem_pio2+0x22c>
 8017e06:	2d00      	cmp	r5, #0
 8017e08:	dd03      	ble.n	8017e12 <__kernel_rem_pio2+0x16a>
 8017e0a:	2d01      	cmp	r5, #1
 8017e0c:	d072      	beq.n	8017ef4 <__kernel_rem_pio2+0x24c>
 8017e0e:	2d02      	cmp	r5, #2
 8017e10:	d07a      	beq.n	8017f08 <__kernel_rem_pio2+0x260>
 8017e12:	2e02      	cmp	r6, #2
 8017e14:	d12b      	bne.n	8017e6e <__kernel_rem_pio2+0x1c6>
 8017e16:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 8017e1a:	ee30 8b48 	vsub.f64	d8, d0, d8
 8017e1e:	b330      	cbz	r0, 8017e6e <__kernel_rem_pio2+0x1c6>
 8017e20:	4628      	mov	r0, r5
 8017e22:	f000 f9bd 	bl	80181a0 <scalbn>
 8017e26:	ee38 8b40 	vsub.f64	d8, d8, d0
 8017e2a:	e020      	b.n	8017e6e <__kernel_rem_pio2+0x1c6>
 8017e2c:	ee20 7b09 	vmul.f64	d7, d0, d9
 8017e30:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8017e34:	3801      	subs	r0, #1
 8017e36:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 8017e3a:	eea7 0b4a 	vfms.f64	d0, d7, d10
 8017e3e:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8017e42:	eca6 0a01 	vstmia	r6!, {s0}
 8017e46:	ed92 0b00 	vldr	d0, [r2]
 8017e4a:	ee37 0b00 	vadd.f64	d0, d7, d0
 8017e4e:	e79e      	b.n	8017d8e <__kernel_rem_pio2+0xe6>
 8017e50:	d105      	bne.n	8017e5e <__kernel_rem_pio2+0x1b6>
 8017e52:	1e62      	subs	r2, r4, #1
 8017e54:	a906      	add	r1, sp, #24
 8017e56:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 8017e5a:	15f6      	asrs	r6, r6, #23
 8017e5c:	e7c8      	b.n	8017df0 <__kernel_rem_pio2+0x148>
 8017e5e:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 8017e62:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8017e66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017e6a:	da31      	bge.n	8017ed0 <__kernel_rem_pio2+0x228>
 8017e6c:	2600      	movs	r6, #0
 8017e6e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8017e72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017e76:	f040 809b 	bne.w	8017fb0 <__kernel_rem_pio2+0x308>
 8017e7a:	1e62      	subs	r2, r4, #1
 8017e7c:	2000      	movs	r0, #0
 8017e7e:	454a      	cmp	r2, r9
 8017e80:	da49      	bge.n	8017f16 <__kernel_rem_pio2+0x26e>
 8017e82:	2800      	cmp	r0, #0
 8017e84:	d062      	beq.n	8017f4c <__kernel_rem_pio2+0x2a4>
 8017e86:	3c01      	subs	r4, #1
 8017e88:	ab06      	add	r3, sp, #24
 8017e8a:	3d18      	subs	r5, #24
 8017e8c:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8017e90:	2b00      	cmp	r3, #0
 8017e92:	d0f8      	beq.n	8017e86 <__kernel_rem_pio2+0x1de>
 8017e94:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 8017e98:	4628      	mov	r0, r5
 8017e9a:	f000 f981 	bl	80181a0 <scalbn>
 8017e9e:	ed9f 6b3e 	vldr	d6, [pc, #248]	@ 8017f98 <__kernel_rem_pio2+0x2f0>
 8017ea2:	1c62      	adds	r2, r4, #1
 8017ea4:	a96a      	add	r1, sp, #424	@ 0x1a8
 8017ea6:	00d3      	lsls	r3, r2, #3
 8017ea8:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8017eac:	4622      	mov	r2, r4
 8017eae:	2a00      	cmp	r2, #0
 8017eb0:	f280 80a8 	bge.w	8018004 <__kernel_rem_pio2+0x35c>
 8017eb4:	4622      	mov	r2, r4
 8017eb6:	2a00      	cmp	r2, #0
 8017eb8:	f2c0 80c6 	blt.w	8018048 <__kernel_rem_pio2+0x3a0>
 8017ebc:	a96a      	add	r1, sp, #424	@ 0x1a8
 8017ebe:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 8017ec2:	ed9f 7b33 	vldr	d7, [pc, #204]	@ 8017f90 <__kernel_rem_pio2+0x2e8>
 8017ec6:	f8df c0e4 	ldr.w	ip, [pc, #228]	@ 8017fac <__kernel_rem_pio2+0x304>
 8017eca:	2000      	movs	r0, #0
 8017ecc:	1aa1      	subs	r1, r4, r2
 8017ece:	e0b0      	b.n	8018032 <__kernel_rem_pio2+0x38a>
 8017ed0:	2602      	movs	r6, #2
 8017ed2:	e78f      	b.n	8017df4 <__kernel_rem_pio2+0x14c>
 8017ed4:	f853 2b04 	ldr.w	r2, [r3], #4
 8017ed8:	b948      	cbnz	r0, 8017eee <__kernel_rem_pio2+0x246>
 8017eda:	b122      	cbz	r2, 8017ee6 <__kernel_rem_pio2+0x23e>
 8017edc:	f1c2 7280 	rsb	r2, r2, #16777216	@ 0x1000000
 8017ee0:	f843 2c04 	str.w	r2, [r3, #-4]
 8017ee4:	2201      	movs	r2, #1
 8017ee6:	f10c 0c01 	add.w	ip, ip, #1
 8017eea:	4610      	mov	r0, r2
 8017eec:	e789      	b.n	8017e02 <__kernel_rem_pio2+0x15a>
 8017eee:	ebae 0202 	sub.w	r2, lr, r2
 8017ef2:	e7f5      	b.n	8017ee0 <__kernel_rem_pio2+0x238>
 8017ef4:	1e62      	subs	r2, r4, #1
 8017ef6:	ab06      	add	r3, sp, #24
 8017ef8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017efc:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8017f00:	a906      	add	r1, sp, #24
 8017f02:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8017f06:	e784      	b.n	8017e12 <__kernel_rem_pio2+0x16a>
 8017f08:	1e62      	subs	r2, r4, #1
 8017f0a:	ab06      	add	r3, sp, #24
 8017f0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017f10:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8017f14:	e7f4      	b.n	8017f00 <__kernel_rem_pio2+0x258>
 8017f16:	ab06      	add	r3, sp, #24
 8017f18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017f1c:	3a01      	subs	r2, #1
 8017f1e:	4318      	orrs	r0, r3
 8017f20:	e7ad      	b.n	8017e7e <__kernel_rem_pio2+0x1d6>
 8017f22:	3301      	adds	r3, #1
 8017f24:	f852 0d04 	ldr.w	r0, [r2, #-4]!
 8017f28:	2800      	cmp	r0, #0
 8017f2a:	d0fa      	beq.n	8017f22 <__kernel_rem_pio2+0x27a>
 8017f2c:	9a04      	ldr	r2, [sp, #16]
 8017f2e:	f502 7212 	add.w	r2, r2, #584	@ 0x248
 8017f32:	446a      	add	r2, sp
 8017f34:	eb04 000b 	add.w	r0, r4, fp
 8017f38:	a91a      	add	r1, sp, #104	@ 0x68
 8017f3a:	1c66      	adds	r6, r4, #1
 8017f3c:	3a98      	subs	r2, #152	@ 0x98
 8017f3e:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 8017f42:	4423      	add	r3, r4
 8017f44:	42b3      	cmp	r3, r6
 8017f46:	da04      	bge.n	8017f52 <__kernel_rem_pio2+0x2aa>
 8017f48:	461c      	mov	r4, r3
 8017f4a:	e713      	b.n	8017d74 <__kernel_rem_pio2+0xcc>
 8017f4c:	9a03      	ldr	r2, [sp, #12]
 8017f4e:	2301      	movs	r3, #1
 8017f50:	e7e8      	b.n	8017f24 <__kernel_rem_pio2+0x27c>
 8017f52:	9902      	ldr	r1, [sp, #8]
 8017f54:	f8dd c004 	ldr.w	ip, [sp, #4]
 8017f58:	f851 1026 	ldr.w	r1, [r1, r6, lsl #2]
 8017f5c:	9104      	str	r1, [sp, #16]
 8017f5e:	ee07 1a90 	vmov	s15, r1
 8017f62:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8017f66:	2400      	movs	r4, #0
 8017f68:	eca0 7b02 	vstmia	r0!, {d7}
 8017f6c:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 8017f90 <__kernel_rem_pio2+0x2e8>
 8017f70:	4686      	mov	lr, r0
 8017f72:	4554      	cmp	r4, sl
 8017f74:	dd03      	ble.n	8017f7e <__kernel_rem_pio2+0x2d6>
 8017f76:	eca2 7b02 	vstmia	r2!, {d7}
 8017f7a:	3601      	adds	r6, #1
 8017f7c:	e7e2      	b.n	8017f44 <__kernel_rem_pio2+0x29c>
 8017f7e:	ecbc 5b02 	vldmia	ip!, {d5}
 8017f82:	ed3e 6b02 	vldmdb	lr!, {d6}
 8017f86:	3401      	adds	r4, #1
 8017f88:	eea5 7b06 	vfma.f64	d7, d5, d6
 8017f8c:	e7f1      	b.n	8017f72 <__kernel_rem_pio2+0x2ca>
 8017f8e:	bf00      	nop
	...
 8017f9c:	3e700000 	.word	0x3e700000
 8017fa0:	00000000 	.word	0x00000000
 8017fa4:	41700000 	.word	0x41700000
 8017fa8:	08018bf0 	.word	0x08018bf0
 8017fac:	08018bb0 	.word	0x08018bb0
 8017fb0:	4268      	negs	r0, r5
 8017fb2:	eeb0 0b48 	vmov.f64	d0, d8
 8017fb6:	f000 f8f3 	bl	80181a0 <scalbn>
 8017fba:	ed9f 6b73 	vldr	d6, [pc, #460]	@ 8018188 <__kernel_rem_pio2+0x4e0>
 8017fbe:	eeb4 0bc6 	vcmpe.f64	d0, d6
 8017fc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017fc6:	db17      	blt.n	8017ff8 <__kernel_rem_pio2+0x350>
 8017fc8:	ed9f 7b71 	vldr	d7, [pc, #452]	@ 8018190 <__kernel_rem_pio2+0x4e8>
 8017fcc:	ee20 7b07 	vmul.f64	d7, d0, d7
 8017fd0:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8017fd4:	aa06      	add	r2, sp, #24
 8017fd6:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 8017fda:	eea5 0b46 	vfms.f64	d0, d5, d6
 8017fde:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8017fe2:	3518      	adds	r5, #24
 8017fe4:	ee10 3a10 	vmov	r3, s0
 8017fe8:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8017fec:	ee17 3a10 	vmov	r3, s14
 8017ff0:	3401      	adds	r4, #1
 8017ff2:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8017ff6:	e74d      	b.n	8017e94 <__kernel_rem_pio2+0x1ec>
 8017ff8:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8017ffc:	aa06      	add	r2, sp, #24
 8017ffe:	ee10 3a10 	vmov	r3, s0
 8018002:	e7f6      	b.n	8017ff2 <__kernel_rem_pio2+0x34a>
 8018004:	a806      	add	r0, sp, #24
 8018006:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 801800a:	9001      	str	r0, [sp, #4]
 801800c:	ee07 0a90 	vmov	s15, r0
 8018010:	3a01      	subs	r2, #1
 8018012:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8018016:	ee27 7b00 	vmul.f64	d7, d7, d0
 801801a:	ee20 0b06 	vmul.f64	d0, d0, d6
 801801e:	ed21 7b02 	vstmdb	r1!, {d7}
 8018022:	e744      	b.n	8017eae <__kernel_rem_pio2+0x206>
 8018024:	ecbc 5b02 	vldmia	ip!, {d5}
 8018028:	ecb5 6b02 	vldmia	r5!, {d6}
 801802c:	3001      	adds	r0, #1
 801802e:	eea5 7b06 	vfma.f64	d7, d5, d6
 8018032:	4548      	cmp	r0, r9
 8018034:	dc01      	bgt.n	801803a <__kernel_rem_pio2+0x392>
 8018036:	4281      	cmp	r1, r0
 8018038:	daf4      	bge.n	8018024 <__kernel_rem_pio2+0x37c>
 801803a:	a842      	add	r0, sp, #264	@ 0x108
 801803c:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8018040:	ed81 7b00 	vstr	d7, [r1]
 8018044:	3a01      	subs	r2, #1
 8018046:	e736      	b.n	8017eb6 <__kernel_rem_pio2+0x20e>
 8018048:	9aa2      	ldr	r2, [sp, #648]	@ 0x288
 801804a:	2a02      	cmp	r2, #2
 801804c:	dc0a      	bgt.n	8018064 <__kernel_rem_pio2+0x3bc>
 801804e:	2a00      	cmp	r2, #0
 8018050:	dc2d      	bgt.n	80180ae <__kernel_rem_pio2+0x406>
 8018052:	d046      	beq.n	80180e2 <__kernel_rem_pio2+0x43a>
 8018054:	f008 0007 	and.w	r0, r8, #7
 8018058:	f50d 7d13 	add.w	sp, sp, #588	@ 0x24c
 801805c:	ecbd 8b06 	vpop	{d8-d10}
 8018060:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018064:	9aa2      	ldr	r2, [sp, #648]	@ 0x288
 8018066:	2a03      	cmp	r2, #3
 8018068:	d1f4      	bne.n	8018054 <__kernel_rem_pio2+0x3ac>
 801806a:	a942      	add	r1, sp, #264	@ 0x108
 801806c:	f1a3 0208 	sub.w	r2, r3, #8
 8018070:	440a      	add	r2, r1
 8018072:	4611      	mov	r1, r2
 8018074:	4620      	mov	r0, r4
 8018076:	2800      	cmp	r0, #0
 8018078:	f1a1 0108 	sub.w	r1, r1, #8
 801807c:	dc52      	bgt.n	8018124 <__kernel_rem_pio2+0x47c>
 801807e:	4621      	mov	r1, r4
 8018080:	2901      	cmp	r1, #1
 8018082:	f1a2 0208 	sub.w	r2, r2, #8
 8018086:	dc5d      	bgt.n	8018144 <__kernel_rem_pio2+0x49c>
 8018088:	ed9f 7b43 	vldr	d7, [pc, #268]	@ 8018198 <__kernel_rem_pio2+0x4f0>
 801808c:	aa42      	add	r2, sp, #264	@ 0x108
 801808e:	4413      	add	r3, r2
 8018090:	2c01      	cmp	r4, #1
 8018092:	dc67      	bgt.n	8018164 <__kernel_rem_pio2+0x4bc>
 8018094:	ed9d 5b42 	vldr	d5, [sp, #264]	@ 0x108
 8018098:	ed9d 6b44 	vldr	d6, [sp, #272]	@ 0x110
 801809c:	2e00      	cmp	r6, #0
 801809e:	d167      	bne.n	8018170 <__kernel_rem_pio2+0x4c8>
 80180a0:	ed87 5b00 	vstr	d5, [r7]
 80180a4:	ed87 6b02 	vstr	d6, [r7, #8]
 80180a8:	ed87 7b04 	vstr	d7, [r7, #16]
 80180ac:	e7d2      	b.n	8018054 <__kernel_rem_pio2+0x3ac>
 80180ae:	ed9f 6b3a 	vldr	d6, [pc, #232]	@ 8018198 <__kernel_rem_pio2+0x4f0>
 80180b2:	aa42      	add	r2, sp, #264	@ 0x108
 80180b4:	4413      	add	r3, r2
 80180b6:	4622      	mov	r2, r4
 80180b8:	2a00      	cmp	r2, #0
 80180ba:	da24      	bge.n	8018106 <__kernel_rem_pio2+0x45e>
 80180bc:	b34e      	cbz	r6, 8018112 <__kernel_rem_pio2+0x46a>
 80180be:	eeb1 7b46 	vneg.f64	d7, d6
 80180c2:	ed87 7b00 	vstr	d7, [r7]
 80180c6:	ed9d 7b42 	vldr	d7, [sp, #264]	@ 0x108
 80180ca:	aa44      	add	r2, sp, #272	@ 0x110
 80180cc:	2301      	movs	r3, #1
 80180ce:	ee37 7b46 	vsub.f64	d7, d7, d6
 80180d2:	429c      	cmp	r4, r3
 80180d4:	da20      	bge.n	8018118 <__kernel_rem_pio2+0x470>
 80180d6:	b10e      	cbz	r6, 80180dc <__kernel_rem_pio2+0x434>
 80180d8:	eeb1 7b47 	vneg.f64	d7, d7
 80180dc:	ed87 7b02 	vstr	d7, [r7, #8]
 80180e0:	e7b8      	b.n	8018054 <__kernel_rem_pio2+0x3ac>
 80180e2:	ed9f 7b2d 	vldr	d7, [pc, #180]	@ 8018198 <__kernel_rem_pio2+0x4f0>
 80180e6:	aa42      	add	r2, sp, #264	@ 0x108
 80180e8:	4413      	add	r3, r2
 80180ea:	2c00      	cmp	r4, #0
 80180ec:	da05      	bge.n	80180fa <__kernel_rem_pio2+0x452>
 80180ee:	b10e      	cbz	r6, 80180f4 <__kernel_rem_pio2+0x44c>
 80180f0:	eeb1 7b47 	vneg.f64	d7, d7
 80180f4:	ed87 7b00 	vstr	d7, [r7]
 80180f8:	e7ac      	b.n	8018054 <__kernel_rem_pio2+0x3ac>
 80180fa:	ed33 6b02 	vldmdb	r3!, {d6}
 80180fe:	3c01      	subs	r4, #1
 8018100:	ee37 7b06 	vadd.f64	d7, d7, d6
 8018104:	e7f1      	b.n	80180ea <__kernel_rem_pio2+0x442>
 8018106:	ed33 7b02 	vldmdb	r3!, {d7}
 801810a:	3a01      	subs	r2, #1
 801810c:	ee36 6b07 	vadd.f64	d6, d6, d7
 8018110:	e7d2      	b.n	80180b8 <__kernel_rem_pio2+0x410>
 8018112:	eeb0 7b46 	vmov.f64	d7, d6
 8018116:	e7d4      	b.n	80180c2 <__kernel_rem_pio2+0x41a>
 8018118:	ecb2 6b02 	vldmia	r2!, {d6}
 801811c:	3301      	adds	r3, #1
 801811e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8018122:	e7d6      	b.n	80180d2 <__kernel_rem_pio2+0x42a>
 8018124:	ed91 7b00 	vldr	d7, [r1]
 8018128:	ed91 5b02 	vldr	d5, [r1, #8]
 801812c:	3801      	subs	r0, #1
 801812e:	ee37 6b05 	vadd.f64	d6, d7, d5
 8018132:	ee37 7b46 	vsub.f64	d7, d7, d6
 8018136:	ed81 6b00 	vstr	d6, [r1]
 801813a:	ee37 7b05 	vadd.f64	d7, d7, d5
 801813e:	ed81 7b02 	vstr	d7, [r1, #8]
 8018142:	e798      	b.n	8018076 <__kernel_rem_pio2+0x3ce>
 8018144:	ed92 7b00 	vldr	d7, [r2]
 8018148:	ed92 5b02 	vldr	d5, [r2, #8]
 801814c:	3901      	subs	r1, #1
 801814e:	ee37 6b05 	vadd.f64	d6, d7, d5
 8018152:	ee37 7b46 	vsub.f64	d7, d7, d6
 8018156:	ed82 6b00 	vstr	d6, [r2]
 801815a:	ee37 7b05 	vadd.f64	d7, d7, d5
 801815e:	ed82 7b02 	vstr	d7, [r2, #8]
 8018162:	e78d      	b.n	8018080 <__kernel_rem_pio2+0x3d8>
 8018164:	ed33 6b02 	vldmdb	r3!, {d6}
 8018168:	3c01      	subs	r4, #1
 801816a:	ee37 7b06 	vadd.f64	d7, d7, d6
 801816e:	e78f      	b.n	8018090 <__kernel_rem_pio2+0x3e8>
 8018170:	eeb1 5b45 	vneg.f64	d5, d5
 8018174:	eeb1 6b46 	vneg.f64	d6, d6
 8018178:	ed87 5b00 	vstr	d5, [r7]
 801817c:	eeb1 7b47 	vneg.f64	d7, d7
 8018180:	ed87 6b02 	vstr	d6, [r7, #8]
 8018184:	e790      	b.n	80180a8 <__kernel_rem_pio2+0x400>
 8018186:	bf00      	nop
 8018188:	00000000 	.word	0x00000000
 801818c:	41700000 	.word	0x41700000
 8018190:	00000000 	.word	0x00000000
 8018194:	3e700000 	.word	0x3e700000
	...

080181a0 <scalbn>:
 80181a0:	ee10 1a90 	vmov	r1, s1
 80181a4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80181a8:	b98b      	cbnz	r3, 80181ce <scalbn+0x2e>
 80181aa:	ee10 3a10 	vmov	r3, s0
 80181ae:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80181b2:	4319      	orrs	r1, r3
 80181b4:	d00a      	beq.n	80181cc <scalbn+0x2c>
 80181b6:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 8018268 <scalbn+0xc8>
 80181ba:	4b37      	ldr	r3, [pc, #220]	@ (8018298 <scalbn+0xf8>)
 80181bc:	ee20 0b07 	vmul.f64	d0, d0, d7
 80181c0:	4298      	cmp	r0, r3
 80181c2:	da0b      	bge.n	80181dc <scalbn+0x3c>
 80181c4:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 8018270 <scalbn+0xd0>
 80181c8:	ee20 0b07 	vmul.f64	d0, d0, d7
 80181cc:	4770      	bx	lr
 80181ce:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80181d2:	4293      	cmp	r3, r2
 80181d4:	d107      	bne.n	80181e6 <scalbn+0x46>
 80181d6:	ee30 0b00 	vadd.f64	d0, d0, d0
 80181da:	4770      	bx	lr
 80181dc:	ee10 1a90 	vmov	r1, s1
 80181e0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80181e4:	3b36      	subs	r3, #54	@ 0x36
 80181e6:	f24c 3250 	movw	r2, #50000	@ 0xc350
 80181ea:	4290      	cmp	r0, r2
 80181ec:	dd0d      	ble.n	801820a <scalbn+0x6a>
 80181ee:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 8018278 <scalbn+0xd8>
 80181f2:	ee10 3a90 	vmov	r3, s1
 80181f6:	eeb0 6b47 	vmov.f64	d6, d7
 80181fa:	ed9f 5b21 	vldr	d5, [pc, #132]	@ 8018280 <scalbn+0xe0>
 80181fe:	2b00      	cmp	r3, #0
 8018200:	fe27 7b05 	vselge.f64	d7, d7, d5
 8018204:	ee27 0b06 	vmul.f64	d0, d7, d6
 8018208:	4770      	bx	lr
 801820a:	4418      	add	r0, r3
 801820c:	f240 73fe 	movw	r3, #2046	@ 0x7fe
 8018210:	4298      	cmp	r0, r3
 8018212:	dcec      	bgt.n	80181ee <scalbn+0x4e>
 8018214:	2800      	cmp	r0, #0
 8018216:	dd0a      	ble.n	801822e <scalbn+0x8e>
 8018218:	f021 41ff 	bic.w	r1, r1, #2139095040	@ 0x7f800000
 801821c:	ec53 2b10 	vmov	r2, r3, d0
 8018220:	f421 01e0 	bic.w	r1, r1, #7340032	@ 0x700000
 8018224:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 8018228:	ec43 2b10 	vmov	d0, r2, r3
 801822c:	4770      	bx	lr
 801822e:	f110 0f35 	cmn.w	r0, #53	@ 0x35
 8018232:	da09      	bge.n	8018248 <scalbn+0xa8>
 8018234:	ed9f 7b0e 	vldr	d7, [pc, #56]	@ 8018270 <scalbn+0xd0>
 8018238:	ee10 3a90 	vmov	r3, s1
 801823c:	eeb0 6b47 	vmov.f64	d6, d7
 8018240:	ed9f 5b11 	vldr	d5, [pc, #68]	@ 8018288 <scalbn+0xe8>
 8018244:	2b00      	cmp	r3, #0
 8018246:	e7db      	b.n	8018200 <scalbn+0x60>
 8018248:	f021 41ff 	bic.w	r1, r1, #2139095040	@ 0x7f800000
 801824c:	ec53 2b10 	vmov	r2, r3, d0
 8018250:	3036      	adds	r0, #54	@ 0x36
 8018252:	f421 01e0 	bic.w	r1, r1, #7340032	@ 0x700000
 8018256:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 801825a:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 8018290 <scalbn+0xf0>
 801825e:	ec43 2b10 	vmov	d0, r2, r3
 8018262:	e7b1      	b.n	80181c8 <scalbn+0x28>
 8018264:	f3af 8000 	nop.w
 8018268:	00000000 	.word	0x00000000
 801826c:	43500000 	.word	0x43500000
 8018270:	c2f8f359 	.word	0xc2f8f359
 8018274:	01a56e1f 	.word	0x01a56e1f
 8018278:	8800759c 	.word	0x8800759c
 801827c:	7e37e43c 	.word	0x7e37e43c
 8018280:	8800759c 	.word	0x8800759c
 8018284:	fe37e43c 	.word	0xfe37e43c
 8018288:	c2f8f359 	.word	0xc2f8f359
 801828c:	81a56e1f 	.word	0x81a56e1f
 8018290:	00000000 	.word	0x00000000
 8018294:	3c900000 	.word	0x3c900000
 8018298:	ffff3cb0 	.word	0xffff3cb0
 801829c:	00000000 	.word	0x00000000

080182a0 <floor>:
 80182a0:	ee10 3a90 	vmov	r3, s1
 80182a4:	f3c3 500a 	ubfx	r0, r3, #20, #11
 80182a8:	ee10 2a10 	vmov	r2, s0
 80182ac:	f2a0 31ff 	subw	r1, r0, #1023	@ 0x3ff
 80182b0:	2913      	cmp	r1, #19
 80182b2:	b530      	push	{r4, r5, lr}
 80182b4:	4615      	mov	r5, r2
 80182b6:	dc33      	bgt.n	8018320 <floor+0x80>
 80182b8:	2900      	cmp	r1, #0
 80182ba:	da18      	bge.n	80182ee <floor+0x4e>
 80182bc:	ed9f 7b30 	vldr	d7, [pc, #192]	@ 8018380 <floor+0xe0>
 80182c0:	ee30 0b07 	vadd.f64	d0, d0, d7
 80182c4:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80182c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80182cc:	dd0a      	ble.n	80182e4 <floor+0x44>
 80182ce:	2b00      	cmp	r3, #0
 80182d0:	da50      	bge.n	8018374 <floor+0xd4>
 80182d2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80182d6:	4313      	orrs	r3, r2
 80182d8:	2200      	movs	r2, #0
 80182da:	4293      	cmp	r3, r2
 80182dc:	4b2a      	ldr	r3, [pc, #168]	@ (8018388 <floor+0xe8>)
 80182de:	bf08      	it	eq
 80182e0:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 80182e4:	4619      	mov	r1, r3
 80182e6:	4610      	mov	r0, r2
 80182e8:	ec41 0b10 	vmov	d0, r0, r1
 80182ec:	e01f      	b.n	801832e <floor+0x8e>
 80182ee:	4827      	ldr	r0, [pc, #156]	@ (801838c <floor+0xec>)
 80182f0:	4108      	asrs	r0, r1
 80182f2:	ea03 0400 	and.w	r4, r3, r0
 80182f6:	4314      	orrs	r4, r2
 80182f8:	d019      	beq.n	801832e <floor+0x8e>
 80182fa:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8018380 <floor+0xe0>
 80182fe:	ee30 0b07 	vadd.f64	d0, d0, d7
 8018302:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8018306:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801830a:	ddeb      	ble.n	80182e4 <floor+0x44>
 801830c:	2b00      	cmp	r3, #0
 801830e:	bfbe      	ittt	lt
 8018310:	f44f 1280 	movlt.w	r2, #1048576	@ 0x100000
 8018314:	410a      	asrlt	r2, r1
 8018316:	189b      	addlt	r3, r3, r2
 8018318:	ea23 0300 	bic.w	r3, r3, r0
 801831c:	2200      	movs	r2, #0
 801831e:	e7e1      	b.n	80182e4 <floor+0x44>
 8018320:	2933      	cmp	r1, #51	@ 0x33
 8018322:	dd05      	ble.n	8018330 <floor+0x90>
 8018324:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8018328:	d101      	bne.n	801832e <floor+0x8e>
 801832a:	ee30 0b00 	vadd.f64	d0, d0, d0
 801832e:	bd30      	pop	{r4, r5, pc}
 8018330:	f2a0 4413 	subw	r4, r0, #1043	@ 0x413
 8018334:	f04f 30ff 	mov.w	r0, #4294967295
 8018338:	40e0      	lsrs	r0, r4
 801833a:	4210      	tst	r0, r2
 801833c:	d0f7      	beq.n	801832e <floor+0x8e>
 801833e:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 8018380 <floor+0xe0>
 8018342:	ee30 0b07 	vadd.f64	d0, d0, d7
 8018346:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801834a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801834e:	ddc9      	ble.n	80182e4 <floor+0x44>
 8018350:	2b00      	cmp	r3, #0
 8018352:	da02      	bge.n	801835a <floor+0xba>
 8018354:	2914      	cmp	r1, #20
 8018356:	d103      	bne.n	8018360 <floor+0xc0>
 8018358:	3301      	adds	r3, #1
 801835a:	ea22 0200 	bic.w	r2, r2, r0
 801835e:	e7c1      	b.n	80182e4 <floor+0x44>
 8018360:	2401      	movs	r4, #1
 8018362:	f1c1 0134 	rsb	r1, r1, #52	@ 0x34
 8018366:	fa04 f101 	lsl.w	r1, r4, r1
 801836a:	440a      	add	r2, r1
 801836c:	42aa      	cmp	r2, r5
 801836e:	bf38      	it	cc
 8018370:	191b      	addcc	r3, r3, r4
 8018372:	e7f2      	b.n	801835a <floor+0xba>
 8018374:	2200      	movs	r2, #0
 8018376:	4613      	mov	r3, r2
 8018378:	e7b4      	b.n	80182e4 <floor+0x44>
 801837a:	bf00      	nop
 801837c:	f3af 8000 	nop.w
 8018380:	8800759c 	.word	0x8800759c
 8018384:	7e37e43c 	.word	0x7e37e43c
 8018388:	bff00000 	.word	0xbff00000
 801838c:	000fffff 	.word	0x000fffff

08018390 <_init>:
 8018390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018392:	bf00      	nop
 8018394:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018396:	bc08      	pop	{r3}
 8018398:	469e      	mov	lr, r3
 801839a:	4770      	bx	lr

0801839c <_fini>:
 801839c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801839e:	bf00      	nop
 80183a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80183a2:	bc08      	pop	{r3}
 80183a4:	469e      	mov	lr, r3
 80183a6:	4770      	bx	lr
