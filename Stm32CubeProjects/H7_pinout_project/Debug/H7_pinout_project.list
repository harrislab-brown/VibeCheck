
H7_pinout_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d058  080002d0  080002d0  000012d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000218  0800d328  0800d328  0000e328  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800d540  0800d540  0000e540  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800d548  0800d548  0000e548  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800d54c  0800d54c  0000e54c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000010  24000000  0800d550  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000005d4  24000010  0800d560  0000f010  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  240005e4  0800d560  0000f5e4  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000f010  2**0
                  CONTENTS, READONLY
 10 .debug_info   000216ab  00000000  00000000  0000f03e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003762  00000000  00000000  000306e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001b68  00000000  00000000  00033e50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001590  00000000  00000000  000359b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000368da  00000000  00000000  00036f48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00024ccd  00000000  00000000  0006d822  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001696cc  00000000  00000000  000924ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001fbbbb  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00007a14  00000000  00000000  001fbc00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000007f  00000000  00000000  00203614  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000010 	.word	0x24000010
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800d310 	.word	0x0800d310

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000014 	.word	0x24000014
 800030c:	0800d310 	.word	0x0800d310

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000320:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000324:	f000 b96a 	b.w	80005fc <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9d08      	ldr	r5, [sp, #32]
 8000346:	460c      	mov	r4, r1
 8000348:	2b00      	cmp	r3, #0
 800034a:	d14e      	bne.n	80003ea <__udivmoddi4+0xaa>
 800034c:	4694      	mov	ip, r2
 800034e:	458c      	cmp	ip, r1
 8000350:	4686      	mov	lr, r0
 8000352:	fab2 f282 	clz	r2, r2
 8000356:	d962      	bls.n	800041e <__udivmoddi4+0xde>
 8000358:	b14a      	cbz	r2, 800036e <__udivmoddi4+0x2e>
 800035a:	f1c2 0320 	rsb	r3, r2, #32
 800035e:	4091      	lsls	r1, r2
 8000360:	fa20 f303 	lsr.w	r3, r0, r3
 8000364:	fa0c fc02 	lsl.w	ip, ip, r2
 8000368:	4319      	orrs	r1, r3
 800036a:	fa00 fe02 	lsl.w	lr, r0, r2
 800036e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000372:	fa1f f68c 	uxth.w	r6, ip
 8000376:	fbb1 f4f7 	udiv	r4, r1, r7
 800037a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800037e:	fb07 1114 	mls	r1, r7, r4, r1
 8000382:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000386:	fb04 f106 	mul.w	r1, r4, r6
 800038a:	4299      	cmp	r1, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x64>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000396:	f080 8112 	bcs.w	80005be <__udivmoddi4+0x27e>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 810f 	bls.w	80005be <__udivmoddi4+0x27e>
 80003a0:	3c02      	subs	r4, #2
 80003a2:	4463      	add	r3, ip
 80003a4:	1a59      	subs	r1, r3, r1
 80003a6:	fa1f f38e 	uxth.w	r3, lr
 80003aa:	fbb1 f0f7 	udiv	r0, r1, r7
 80003ae:	fb07 1110 	mls	r1, r7, r0, r1
 80003b2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b6:	fb00 f606 	mul.w	r6, r0, r6
 80003ba:	429e      	cmp	r6, r3
 80003bc:	d90a      	bls.n	80003d4 <__udivmoddi4+0x94>
 80003be:	eb1c 0303 	adds.w	r3, ip, r3
 80003c2:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80003c6:	f080 80fc 	bcs.w	80005c2 <__udivmoddi4+0x282>
 80003ca:	429e      	cmp	r6, r3
 80003cc:	f240 80f9 	bls.w	80005c2 <__udivmoddi4+0x282>
 80003d0:	4463      	add	r3, ip
 80003d2:	3802      	subs	r0, #2
 80003d4:	1b9b      	subs	r3, r3, r6
 80003d6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003da:	2100      	movs	r1, #0
 80003dc:	b11d      	cbz	r5, 80003e6 <__udivmoddi4+0xa6>
 80003de:	40d3      	lsrs	r3, r2
 80003e0:	2200      	movs	r2, #0
 80003e2:	e9c5 3200 	strd	r3, r2, [r5]
 80003e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d905      	bls.n	80003fa <__udivmoddi4+0xba>
 80003ee:	b10d      	cbz	r5, 80003f4 <__udivmoddi4+0xb4>
 80003f0:	e9c5 0100 	strd	r0, r1, [r5]
 80003f4:	2100      	movs	r1, #0
 80003f6:	4608      	mov	r0, r1
 80003f8:	e7f5      	b.n	80003e6 <__udivmoddi4+0xa6>
 80003fa:	fab3 f183 	clz	r1, r3
 80003fe:	2900      	cmp	r1, #0
 8000400:	d146      	bne.n	8000490 <__udivmoddi4+0x150>
 8000402:	42a3      	cmp	r3, r4
 8000404:	d302      	bcc.n	800040c <__udivmoddi4+0xcc>
 8000406:	4290      	cmp	r0, r2
 8000408:	f0c0 80f0 	bcc.w	80005ec <__udivmoddi4+0x2ac>
 800040c:	1a86      	subs	r6, r0, r2
 800040e:	eb64 0303 	sbc.w	r3, r4, r3
 8000412:	2001      	movs	r0, #1
 8000414:	2d00      	cmp	r5, #0
 8000416:	d0e6      	beq.n	80003e6 <__udivmoddi4+0xa6>
 8000418:	e9c5 6300 	strd	r6, r3, [r5]
 800041c:	e7e3      	b.n	80003e6 <__udivmoddi4+0xa6>
 800041e:	2a00      	cmp	r2, #0
 8000420:	f040 8090 	bne.w	8000544 <__udivmoddi4+0x204>
 8000424:	eba1 040c 	sub.w	r4, r1, ip
 8000428:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800042c:	fa1f f78c 	uxth.w	r7, ip
 8000430:	2101      	movs	r1, #1
 8000432:	fbb4 f6f8 	udiv	r6, r4, r8
 8000436:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800043a:	fb08 4416 	mls	r4, r8, r6, r4
 800043e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000442:	fb07 f006 	mul.w	r0, r7, r6
 8000446:	4298      	cmp	r0, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x11c>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000452:	d202      	bcs.n	800045a <__udivmoddi4+0x11a>
 8000454:	4298      	cmp	r0, r3
 8000456:	f200 80cd 	bhi.w	80005f4 <__udivmoddi4+0x2b4>
 800045a:	4626      	mov	r6, r4
 800045c:	1a1c      	subs	r4, r3, r0
 800045e:	fa1f f38e 	uxth.w	r3, lr
 8000462:	fbb4 f0f8 	udiv	r0, r4, r8
 8000466:	fb08 4410 	mls	r4, r8, r0, r4
 800046a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800046e:	fb00 f707 	mul.w	r7, r0, r7
 8000472:	429f      	cmp	r7, r3
 8000474:	d908      	bls.n	8000488 <__udivmoddi4+0x148>
 8000476:	eb1c 0303 	adds.w	r3, ip, r3
 800047a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800047e:	d202      	bcs.n	8000486 <__udivmoddi4+0x146>
 8000480:	429f      	cmp	r7, r3
 8000482:	f200 80b0 	bhi.w	80005e6 <__udivmoddi4+0x2a6>
 8000486:	4620      	mov	r0, r4
 8000488:	1bdb      	subs	r3, r3, r7
 800048a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800048e:	e7a5      	b.n	80003dc <__udivmoddi4+0x9c>
 8000490:	f1c1 0620 	rsb	r6, r1, #32
 8000494:	408b      	lsls	r3, r1
 8000496:	fa22 f706 	lsr.w	r7, r2, r6
 800049a:	431f      	orrs	r7, r3
 800049c:	fa20 fc06 	lsr.w	ip, r0, r6
 80004a0:	fa04 f301 	lsl.w	r3, r4, r1
 80004a4:	ea43 030c 	orr.w	r3, r3, ip
 80004a8:	40f4      	lsrs	r4, r6
 80004aa:	fa00 f801 	lsl.w	r8, r0, r1
 80004ae:	0c38      	lsrs	r0, r7, #16
 80004b0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80004b4:	fbb4 fef0 	udiv	lr, r4, r0
 80004b8:	fa1f fc87 	uxth.w	ip, r7
 80004bc:	fb00 441e 	mls	r4, r0, lr, r4
 80004c0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c4:	fb0e f90c 	mul.w	r9, lr, ip
 80004c8:	45a1      	cmp	r9, r4
 80004ca:	fa02 f201 	lsl.w	r2, r2, r1
 80004ce:	d90a      	bls.n	80004e6 <__udivmoddi4+0x1a6>
 80004d0:	193c      	adds	r4, r7, r4
 80004d2:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80004d6:	f080 8084 	bcs.w	80005e2 <__udivmoddi4+0x2a2>
 80004da:	45a1      	cmp	r9, r4
 80004dc:	f240 8081 	bls.w	80005e2 <__udivmoddi4+0x2a2>
 80004e0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004e4:	443c      	add	r4, r7
 80004e6:	eba4 0409 	sub.w	r4, r4, r9
 80004ea:	fa1f f983 	uxth.w	r9, r3
 80004ee:	fbb4 f3f0 	udiv	r3, r4, r0
 80004f2:	fb00 4413 	mls	r4, r0, r3, r4
 80004f6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004fa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004fe:	45a4      	cmp	ip, r4
 8000500:	d907      	bls.n	8000512 <__udivmoddi4+0x1d2>
 8000502:	193c      	adds	r4, r7, r4
 8000504:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000508:	d267      	bcs.n	80005da <__udivmoddi4+0x29a>
 800050a:	45a4      	cmp	ip, r4
 800050c:	d965      	bls.n	80005da <__udivmoddi4+0x29a>
 800050e:	3b02      	subs	r3, #2
 8000510:	443c      	add	r4, r7
 8000512:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000516:	fba0 9302 	umull	r9, r3, r0, r2
 800051a:	eba4 040c 	sub.w	r4, r4, ip
 800051e:	429c      	cmp	r4, r3
 8000520:	46ce      	mov	lr, r9
 8000522:	469c      	mov	ip, r3
 8000524:	d351      	bcc.n	80005ca <__udivmoddi4+0x28a>
 8000526:	d04e      	beq.n	80005c6 <__udivmoddi4+0x286>
 8000528:	b155      	cbz	r5, 8000540 <__udivmoddi4+0x200>
 800052a:	ebb8 030e 	subs.w	r3, r8, lr
 800052e:	eb64 040c 	sbc.w	r4, r4, ip
 8000532:	fa04 f606 	lsl.w	r6, r4, r6
 8000536:	40cb      	lsrs	r3, r1
 8000538:	431e      	orrs	r6, r3
 800053a:	40cc      	lsrs	r4, r1
 800053c:	e9c5 6400 	strd	r6, r4, [r5]
 8000540:	2100      	movs	r1, #0
 8000542:	e750      	b.n	80003e6 <__udivmoddi4+0xa6>
 8000544:	f1c2 0320 	rsb	r3, r2, #32
 8000548:	fa20 f103 	lsr.w	r1, r0, r3
 800054c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000550:	fa24 f303 	lsr.w	r3, r4, r3
 8000554:	4094      	lsls	r4, r2
 8000556:	430c      	orrs	r4, r1
 8000558:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800055c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000560:	fa1f f78c 	uxth.w	r7, ip
 8000564:	fbb3 f0f8 	udiv	r0, r3, r8
 8000568:	fb08 3110 	mls	r1, r8, r0, r3
 800056c:	0c23      	lsrs	r3, r4, #16
 800056e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000572:	fb00 f107 	mul.w	r1, r0, r7
 8000576:	4299      	cmp	r1, r3
 8000578:	d908      	bls.n	800058c <__udivmoddi4+0x24c>
 800057a:	eb1c 0303 	adds.w	r3, ip, r3
 800057e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000582:	d22c      	bcs.n	80005de <__udivmoddi4+0x29e>
 8000584:	4299      	cmp	r1, r3
 8000586:	d92a      	bls.n	80005de <__udivmoddi4+0x29e>
 8000588:	3802      	subs	r0, #2
 800058a:	4463      	add	r3, ip
 800058c:	1a5b      	subs	r3, r3, r1
 800058e:	b2a4      	uxth	r4, r4
 8000590:	fbb3 f1f8 	udiv	r1, r3, r8
 8000594:	fb08 3311 	mls	r3, r8, r1, r3
 8000598:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800059c:	fb01 f307 	mul.w	r3, r1, r7
 80005a0:	42a3      	cmp	r3, r4
 80005a2:	d908      	bls.n	80005b6 <__udivmoddi4+0x276>
 80005a4:	eb1c 0404 	adds.w	r4, ip, r4
 80005a8:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80005ac:	d213      	bcs.n	80005d6 <__udivmoddi4+0x296>
 80005ae:	42a3      	cmp	r3, r4
 80005b0:	d911      	bls.n	80005d6 <__udivmoddi4+0x296>
 80005b2:	3902      	subs	r1, #2
 80005b4:	4464      	add	r4, ip
 80005b6:	1ae4      	subs	r4, r4, r3
 80005b8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80005bc:	e739      	b.n	8000432 <__udivmoddi4+0xf2>
 80005be:	4604      	mov	r4, r0
 80005c0:	e6f0      	b.n	80003a4 <__udivmoddi4+0x64>
 80005c2:	4608      	mov	r0, r1
 80005c4:	e706      	b.n	80003d4 <__udivmoddi4+0x94>
 80005c6:	45c8      	cmp	r8, r9
 80005c8:	d2ae      	bcs.n	8000528 <__udivmoddi4+0x1e8>
 80005ca:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ce:	eb63 0c07 	sbc.w	ip, r3, r7
 80005d2:	3801      	subs	r0, #1
 80005d4:	e7a8      	b.n	8000528 <__udivmoddi4+0x1e8>
 80005d6:	4631      	mov	r1, r6
 80005d8:	e7ed      	b.n	80005b6 <__udivmoddi4+0x276>
 80005da:	4603      	mov	r3, r0
 80005dc:	e799      	b.n	8000512 <__udivmoddi4+0x1d2>
 80005de:	4630      	mov	r0, r6
 80005e0:	e7d4      	b.n	800058c <__udivmoddi4+0x24c>
 80005e2:	46d6      	mov	lr, sl
 80005e4:	e77f      	b.n	80004e6 <__udivmoddi4+0x1a6>
 80005e6:	4463      	add	r3, ip
 80005e8:	3802      	subs	r0, #2
 80005ea:	e74d      	b.n	8000488 <__udivmoddi4+0x148>
 80005ec:	4606      	mov	r6, r0
 80005ee:	4623      	mov	r3, r4
 80005f0:	4608      	mov	r0, r1
 80005f2:	e70f      	b.n	8000414 <__udivmoddi4+0xd4>
 80005f4:	3e02      	subs	r6, #2
 80005f6:	4463      	add	r3, ip
 80005f8:	e730      	b.n	800045c <__udivmoddi4+0x11c>
 80005fa:	bf00      	nop

080005fc <__aeabi_idiv0>:
 80005fc:	4770      	bx	lr
 80005fe:	bf00      	nop

08000600 <Generate_Sine>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void Generate_Sine(uint32_t* buf, uint32_t len, uint16_t amplitude)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	ed2d 8b02 	vpush	{d8}
 8000606:	b086      	sub	sp, #24
 8000608:	af00      	add	r7, sp, #0
 800060a:	60f8      	str	r0, [r7, #12]
 800060c:	60b9      	str	r1, [r7, #8]
 800060e:	4613      	mov	r3, r2
 8000610:	80fb      	strh	r3, [r7, #6]
	for (uint32_t i = 0; i < len; i++)
 8000612:	2300      	movs	r3, #0
 8000614:	617b      	str	r3, [r7, #20]
 8000616:	e02f      	b.n	8000678 <Generate_Sine+0x78>
	{
		*buf++ = 2048 + amplitude * sin((float)i * 2.0f * 3.1415026535897932384626433f / (float)len);  /* offset to mid voltage */
 8000618:	88fb      	ldrh	r3, [r7, #6]
 800061a:	ee07 3a90 	vmov	s15, r3
 800061e:	eeb8 8be7 	vcvt.f64.s32	d8, s15
 8000622:	697b      	ldr	r3, [r7, #20]
 8000624:	ee07 3a90 	vmov	s15, r3
 8000628:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800062c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000630:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8000698 <Generate_Sine+0x98>
 8000634:	ee67 6a87 	vmul.f32	s13, s15, s14
 8000638:	68bb      	ldr	r3, [r7, #8]
 800063a:	ee07 3a90 	vmov	s15, r3
 800063e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000642:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000646:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800064a:	eeb0 0b47 	vmov.f64	d0, d7
 800064e:	f00c f893 	bl	800c778 <sin>
 8000652:	eeb0 7b40 	vmov.f64	d7, d0
 8000656:	ee28 7b07 	vmul.f64	d7, d8, d7
 800065a:	ed9f 6b0d 	vldr	d6, [pc, #52]	@ 8000690 <Generate_Sine+0x90>
 800065e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000662:	68fb      	ldr	r3, [r7, #12]
 8000664:	1d1a      	adds	r2, r3, #4
 8000666:	60fa      	str	r2, [r7, #12]
 8000668:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800066c:	ee17 2a90 	vmov	r2, s15
 8000670:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < len; i++)
 8000672:	697b      	ldr	r3, [r7, #20]
 8000674:	3301      	adds	r3, #1
 8000676:	617b      	str	r3, [r7, #20]
 8000678:	697a      	ldr	r2, [r7, #20]
 800067a:	68bb      	ldr	r3, [r7, #8]
 800067c:	429a      	cmp	r2, r3
 800067e:	d3cb      	bcc.n	8000618 <Generate_Sine+0x18>
	}
}
 8000680:	bf00      	nop
 8000682:	bf00      	nop
 8000684:	3718      	adds	r7, #24
 8000686:	46bd      	mov	sp, r7
 8000688:	ecbd 8b02 	vpop	{d8}
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	00000000 	.word	0x00000000
 8000694:	40a00000 	.word	0x40a00000
 8000698:	40490e61 	.word	0x40490e61
 800069c:	00000000 	.word	0x00000000

080006a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	f6ad 4d88 	subw	sp, sp, #3208	@ 0xc88
 80006a6:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80006a8:	f000 ff00 	bl	80014ac <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006ac:	f001 fc26 	bl	8001efc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006b0:	f000 f898 	bl	80007e4 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80006b4:	f000 f904 	bl	80008c0 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006b8:	f000 fdee 	bl	8001298 <MX_GPIO_Init>
  MX_DMA_Init();
 80006bc:	f000 fdcc 	bl	8001258 <MX_DMA_Init>
  MX_DAC1_Init();
 80006c0:	f000 fa14 	bl	8000aec <MX_DAC1_Init>
  MX_I2C2_Init();
 80006c4:	f000 fa44 	bl	8000b50 <MX_I2C2_Init>
  MX_SPI2_Init();
 80006c8:	f000 fa82 	bl	8000bd0 <MX_SPI2_Init>
  MX_SPI3_Init();
 80006cc:	f000 fad6 	bl	8000c7c <MX_SPI3_Init>
  MX_SPI4_Init();
 80006d0:	f000 fb2a 	bl	8000d28 <MX_SPI4_Init>
  MX_TIM4_Init();
 80006d4:	f000 fcae 	bl	8001034 <MX_TIM4_Init>
  MX_TIM3_Init();
 80006d8:	f000 fc1e 	bl	8000f18 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 80006dc:	f000 fd70 	bl	80011c0 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 80006e0:	f000 fb78 	bl	8000dd4 <MX_TIM1_Init>
  MX_TIM2_Init();
 80006e4:	f000 fbca 	bl	8000e7c <MX_TIM2_Init>
  MX_ADC1_Init();
 80006e8:	f000 f91a 	bl	8000920 <MX_ADC1_Init>
  MX_ADC2_Init();
 80006ec:	f000 f994 	bl	8000a18 <MX_ADC2_Init>
  MX_UART7_Init();
 80006f0:	f000 fd18 	bl	8001124 <MX_UART7_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  /* strobe timer setup */
  TIM3->PSC = STROBE_TIMER_PRESCALER - 1;
 80006f4:	4b36      	ldr	r3, [pc, #216]	@ (80007d0 <main+0x130>)
 80006f6:	f242 720f 	movw	r2, #9999	@ 0x270f
 80006fa:	629a      	str	r2, [r3, #40]	@ 0x28
  TIM3->ARR = STROBE_TIMER_COUNTS_PER_SEC / STROBE_BLINK_FREQ_HZ - 1;
 80006fc:	4b34      	ldr	r3, [pc, #208]	@ (80007d0 <main+0x130>)
 80006fe:	f44f 72c4 	mov.w	r2, #392	@ 0x188
 8000702:	62da      	str	r2, [r3, #44]	@ 0x2c
  TIM3->CCR1 = (float)TIM3->ARR * STROBE_BLINK_DUTYCYCLE;
 8000704:	4b32      	ldr	r3, [pc, #200]	@ (80007d0 <main+0x130>)
 8000706:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000708:	ee07 3a90 	vmov	s15, r3
 800070c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000710:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000714:	ed9f 6b2c 	vldr	d6, [pc, #176]	@ 80007c8 <main+0x128>
 8000718:	ee27 7b06 	vmul.f64	d7, d7, d6
 800071c:	4b2c      	ldr	r3, [pc, #176]	@ (80007d0 <main+0x130>)
 800071e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000722:	ee17 2a90 	vmov	r2, s15
 8000726:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM3->CCR2 = (float)TIM3->ARR * STROBE_BLINK_DUTYCYCLE;
 8000728:	4b29      	ldr	r3, [pc, #164]	@ (80007d0 <main+0x130>)
 800072a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800072c:	ee07 3a90 	vmov	s15, r3
 8000730:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000734:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000738:	ed9f 6b23 	vldr	d6, [pc, #140]	@ 80007c8 <main+0x128>
 800073c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000740:	4b23      	ldr	r3, [pc, #140]	@ (80007d0 <main+0x130>)
 8000742:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000746:	ee17 2a90 	vmov	r2, s15
 800074a:	639a      	str	r2, [r3, #56]	@ 0x38
  TIM3->CCR3 = (float)TIM3->ARR * STROBE_BLINK_DUTYCYCLE;
 800074c:	4b20      	ldr	r3, [pc, #128]	@ (80007d0 <main+0x130>)
 800074e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000750:	ee07 3a90 	vmov	s15, r3
 8000754:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000758:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800075c:	ed9f 6b1a 	vldr	d6, [pc, #104]	@ 80007c8 <main+0x128>
 8000760:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000764:	4b1a      	ldr	r3, [pc, #104]	@ (80007d0 <main+0x130>)
 8000766:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800076a:	ee17 2a90 	vmov	r2, s15
 800076e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC setup */
  uint32_t sine_wave[DAC_FREQ_HZ / SINE_FREQ_HZ];
  Generate_Sine(sine_wave, DAC_FREQ_HZ / SINE_FREQ_HZ, 1024);	  /* populate sine wave */
 8000770:	463b      	mov	r3, r7
 8000772:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000776:	f44f 7148 	mov.w	r1, #800	@ 0x320
 800077a:	4618      	mov	r0, r3
 800077c:	f7ff ff40 	bl	8000600 <Generate_Sine>

  TIM1->PSC = DAC_TIMER_PRESCALER - 1;
 8000780:	4b14      	ldr	r3, [pc, #80]	@ (80007d4 <main+0x134>)
 8000782:	2200      	movs	r2, #0
 8000784:	629a      	str	r2, [r3, #40]	@ 0x28
  TIM1->ARR = DAC_TIMER_COUNTS_PER_SEC / DAC_FREQ_HZ - 1;
 8000786:	4b13      	ldr	r3, [pc, #76]	@ (80007d4 <main+0x134>)
 8000788:	f241 3287 	movw	r2, #4999	@ 0x1387
 800078c:	62da      	str	r2, [r3, #44]	@ 0x2c


  /* start strobe timers */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800078e:	2100      	movs	r1, #0
 8000790:	4811      	ldr	r0, [pc, #68]	@ (80007d8 <main+0x138>)
 8000792:	f009 fdd3 	bl	800a33c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000796:	2104      	movs	r1, #4
 8000798:	480f      	ldr	r0, [pc, #60]	@ (80007d8 <main+0x138>)
 800079a:	f009 fdcf 	bl	800a33c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 800079e:	2108      	movs	r1, #8
 80007a0:	480d      	ldr	r0, [pc, #52]	@ (80007d8 <main+0x138>)
 80007a2:	f009 fdcb 	bl	800a33c <HAL_TIM_PWM_Start>

  /* start the speaker output */
  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, sine_wave, DAC_FREQ_HZ / SINE_FREQ_HZ, DAC_ALIGN_12B_R);
 80007a6:	463a      	mov	r2, r7
 80007a8:	2300      	movs	r3, #0
 80007aa:	9300      	str	r3, [sp, #0]
 80007ac:	f44f 7348 	mov.w	r3, #800	@ 0x320
 80007b0:	2100      	movs	r1, #0
 80007b2:	480a      	ldr	r0, [pc, #40]	@ (80007dc <main+0x13c>)
 80007b4:	f003 f952 	bl	8003a5c <HAL_DAC_Start_DMA>
  HAL_TIM_Base_Start(&htim1);
 80007b8:	4809      	ldr	r0, [pc, #36]	@ (80007e0 <main+0x140>)
 80007ba:	f009 fcdf 	bl	800a17c <HAL_TIM_Base_Start>

  while (1)
 80007be:	bf00      	nop
 80007c0:	e7fd      	b.n	80007be <main+0x11e>
 80007c2:	bf00      	nop
 80007c4:	f3af 8000 	nop.w
 80007c8:	9999999a 	.word	0x9999999a
 80007cc:	3fa99999 	.word	0x3fa99999
 80007d0:	40000400 	.word	0x40000400
 80007d4:	40010000 	.word	0x40010000
 80007d8:	2400041c 	.word	0x2400041c
 80007dc:	2400010c 	.word	0x2400010c
 80007e0:	24000384 	.word	0x24000384

080007e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b09c      	sub	sp, #112	@ 0x70
 80007e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007ee:	224c      	movs	r2, #76	@ 0x4c
 80007f0:	2100      	movs	r1, #0
 80007f2:	4618      	mov	r0, r3
 80007f4:	f00b ff92 	bl	800c71c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007f8:	1d3b      	adds	r3, r7, #4
 80007fa:	2220      	movs	r2, #32
 80007fc:	2100      	movs	r1, #0
 80007fe:	4618      	mov	r0, r3
 8000800:	f00b ff8c 	bl	800c71c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000804:	2002      	movs	r0, #2
 8000806:	f005 ff9d 	bl	8006744 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800080a:	2300      	movs	r3, #0
 800080c:	603b      	str	r3, [r7, #0]
 800080e:	4b2b      	ldr	r3, [pc, #172]	@ (80008bc <SystemClock_Config+0xd8>)
 8000810:	699b      	ldr	r3, [r3, #24]
 8000812:	4a2a      	ldr	r2, [pc, #168]	@ (80008bc <SystemClock_Config+0xd8>)
 8000814:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000818:	6193      	str	r3, [r2, #24]
 800081a:	4b28      	ldr	r3, [pc, #160]	@ (80008bc <SystemClock_Config+0xd8>)
 800081c:	699b      	ldr	r3, [r3, #24]
 800081e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000822:	603b      	str	r3, [r7, #0]
 8000824:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000826:	bf00      	nop
 8000828:	4b24      	ldr	r3, [pc, #144]	@ (80008bc <SystemClock_Config+0xd8>)
 800082a:	699b      	ldr	r3, [r3, #24]
 800082c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000830:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000834:	d1f8      	bne.n	8000828 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000836:	2301      	movs	r3, #1
 8000838:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800083a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800083e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000840:	2302      	movs	r3, #2
 8000842:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000844:	2302      	movs	r3, #2
 8000846:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000848:	2302      	movs	r3, #2
 800084a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 40;
 800084c:	2328      	movs	r3, #40	@ 0x28
 800084e:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000850:	2301      	movs	r3, #1
 8000852:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000854:	2302      	movs	r3, #2
 8000856:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000858:	2302      	movs	r3, #2
 800085a:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800085c:	230c      	movs	r3, #12
 800085e:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000860:	2300      	movs	r3, #0
 8000862:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000864:	2300      	movs	r3, #0
 8000866:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000868:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800086c:	4618      	mov	r0, r3
 800086e:	f005 ffa3 	bl	80067b8 <HAL_RCC_OscConfig>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000878:	f000 fe44 	bl	8001504 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800087c:	233f      	movs	r3, #63	@ 0x3f
 800087e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000880:	2303      	movs	r3, #3
 8000882:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000884:	2300      	movs	r3, #0
 8000886:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000888:	2308      	movs	r3, #8
 800088a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800088c:	2340      	movs	r3, #64	@ 0x40
 800088e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000890:	2340      	movs	r3, #64	@ 0x40
 8000892:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000894:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000898:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800089a:	2340      	movs	r3, #64	@ 0x40
 800089c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800089e:	1d3b      	adds	r3, r7, #4
 80008a0:	2103      	movs	r1, #3
 80008a2:	4618      	mov	r0, r3
 80008a4:	f006 fb62 	bl	8006f6c <HAL_RCC_ClockConfig>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <SystemClock_Config+0xce>
  {
    Error_Handler();
 80008ae:	f000 fe29 	bl	8001504 <Error_Handler>
  }
}
 80008b2:	bf00      	nop
 80008b4:	3770      	adds	r7, #112	@ 0x70
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	58024800 	.word	0x58024800

080008c0 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b0ae      	sub	sp, #184	@ 0xb8
 80008c4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80008c6:	463b      	mov	r3, r7
 80008c8:	22b8      	movs	r2, #184	@ 0xb8
 80008ca:	2100      	movs	r1, #0
 80008cc:	4618      	mov	r0, r3
 80008ce:	f00b ff25 	bl	800c71c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80008d2:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80008d6:	f04f 0300 	mov.w	r3, #0
 80008da:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 80008de:	2302      	movs	r3, #2
 80008e0:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 16;
 80008e2:	2310      	movs	r3, #16
 80008e4:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 80008e6:	2302      	movs	r3, #2
 80008e8:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80008ea:	2302      	movs	r3, #2
 80008ec:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80008ee:	2302      	movs	r3, #2
 80008f0:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80008f2:	23c0      	movs	r3, #192	@ 0xc0
 80008f4:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80008f6:	2300      	movs	r3, #0
 80008f8:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80008fa:	2300      	movs	r3, #0
 80008fc:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80008fe:	2300      	movs	r3, #0
 8000900:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000904:	463b      	mov	r3, r7
 8000906:	4618      	mov	r0, r3
 8000908:	f006 febc 	bl	8007684 <HAL_RCCEx_PeriphCLKConfig>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8000912:	f000 fdf7 	bl	8001504 <Error_Handler>
  }
}
 8000916:	bf00      	nop
 8000918:	37b8      	adds	r7, #184	@ 0xb8
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
	...

08000920 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b08c      	sub	sp, #48	@ 0x30
 8000924:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000926:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800092a:	2200      	movs	r2, #0
 800092c:	601a      	str	r2, [r3, #0]
 800092e:	605a      	str	r2, [r3, #4]
 8000930:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000932:	463b      	mov	r3, r7
 8000934:	2224      	movs	r2, #36	@ 0x24
 8000936:	2100      	movs	r1, #0
 8000938:	4618      	mov	r0, r3
 800093a:	f00b feef 	bl	800c71c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800093e:	4b32      	ldr	r3, [pc, #200]	@ (8000a08 <MX_ADC1_Init+0xe8>)
 8000940:	4a32      	ldr	r2, [pc, #200]	@ (8000a0c <MX_ADC1_Init+0xec>)
 8000942:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000944:	4b30      	ldr	r3, [pc, #192]	@ (8000a08 <MX_ADC1_Init+0xe8>)
 8000946:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800094a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 800094c:	4b2e      	ldr	r3, [pc, #184]	@ (8000a08 <MX_ADC1_Init+0xe8>)
 800094e:	2200      	movs	r2, #0
 8000950:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000952:	4b2d      	ldr	r3, [pc, #180]	@ (8000a08 <MX_ADC1_Init+0xe8>)
 8000954:	2200      	movs	r2, #0
 8000956:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000958:	4b2b      	ldr	r3, [pc, #172]	@ (8000a08 <MX_ADC1_Init+0xe8>)
 800095a:	2204      	movs	r2, #4
 800095c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800095e:	4b2a      	ldr	r3, [pc, #168]	@ (8000a08 <MX_ADC1_Init+0xe8>)
 8000960:	2200      	movs	r2, #0
 8000962:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000964:	4b28      	ldr	r3, [pc, #160]	@ (8000a08 <MX_ADC1_Init+0xe8>)
 8000966:	2200      	movs	r2, #0
 8000968:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800096a:	4b27      	ldr	r3, [pc, #156]	@ (8000a08 <MX_ADC1_Init+0xe8>)
 800096c:	2201      	movs	r2, #1
 800096e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000970:	4b25      	ldr	r3, [pc, #148]	@ (8000a08 <MX_ADC1_Init+0xe8>)
 8000972:	2200      	movs	r2, #0
 8000974:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000978:	4b23      	ldr	r3, [pc, #140]	@ (8000a08 <MX_ADC1_Init+0xe8>)
 800097a:	2200      	movs	r2, #0
 800097c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800097e:	4b22      	ldr	r3, [pc, #136]	@ (8000a08 <MX_ADC1_Init+0xe8>)
 8000980:	2200      	movs	r2, #0
 8000982:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000984:	4b20      	ldr	r3, [pc, #128]	@ (8000a08 <MX_ADC1_Init+0xe8>)
 8000986:	2200      	movs	r2, #0
 8000988:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800098a:	4b1f      	ldr	r3, [pc, #124]	@ (8000a08 <MX_ADC1_Init+0xe8>)
 800098c:	2200      	movs	r2, #0
 800098e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000990:	4b1d      	ldr	r3, [pc, #116]	@ (8000a08 <MX_ADC1_Init+0xe8>)
 8000992:	2200      	movs	r2, #0
 8000994:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 8000996:	4b1c      	ldr	r3, [pc, #112]	@ (8000a08 <MX_ADC1_Init+0xe8>)
 8000998:	2200      	movs	r2, #0
 800099a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc1.Init.Oversampling.Ratio = 1;
 800099e:	4b1a      	ldr	r3, [pc, #104]	@ (8000a08 <MX_ADC1_Init+0xe8>)
 80009a0:	2201      	movs	r2, #1
 80009a2:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80009a4:	4818      	ldr	r0, [pc, #96]	@ (8000a08 <MX_ADC1_Init+0xe8>)
 80009a6:	f001 fd81 	bl	80024ac <HAL_ADC_Init>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d001      	beq.n	80009b4 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 80009b0:	f000 fda8 	bl	8001504 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80009b4:	2300      	movs	r3, #0
 80009b6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80009b8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009bc:	4619      	mov	r1, r3
 80009be:	4812      	ldr	r0, [pc, #72]	@ (8000a08 <MX_ADC1_Init+0xe8>)
 80009c0:	f002 fdc0 	bl	8003544 <HAL_ADCEx_MultiModeConfigChannel>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d001      	beq.n	80009ce <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 80009ca:	f000 fd9b 	bl	8001504 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80009ce:	4b10      	ldr	r3, [pc, #64]	@ (8000a10 <MX_ADC1_Init+0xf0>)
 80009d0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80009d2:	2306      	movs	r3, #6
 80009d4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80009d6:	2300      	movs	r3, #0
 80009d8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 80009da:	4b0e      	ldr	r3, [pc, #56]	@ (8000a14 <MX_ADC1_Init+0xf4>)
 80009dc:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80009de:	2304      	movs	r3, #4
 80009e0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80009e2:	2300      	movs	r3, #0
 80009e4:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80009e6:	2300      	movs	r3, #0
 80009e8:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009ec:	463b      	mov	r3, r7
 80009ee:	4619      	mov	r1, r3
 80009f0:	4805      	ldr	r0, [pc, #20]	@ (8000a08 <MX_ADC1_Init+0xe8>)
 80009f2:	f001 ff63 	bl	80028bc <HAL_ADC_ConfigChannel>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d001      	beq.n	8000a00 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 80009fc:	f000 fd82 	bl	8001504 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a00:	bf00      	nop
 8000a02:	3730      	adds	r7, #48	@ 0x30
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	2400002c 	.word	0x2400002c
 8000a0c:	40022000 	.word	0x40022000
 8000a10:	10c00010 	.word	0x10c00010
 8000a14:	47ff0000 	.word	0x47ff0000

08000a18 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b08a      	sub	sp, #40	@ 0x28
 8000a1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a1e:	1d3b      	adds	r3, r7, #4
 8000a20:	2224      	movs	r2, #36	@ 0x24
 8000a22:	2100      	movs	r1, #0
 8000a24:	4618      	mov	r0, r3
 8000a26:	f00b fe79 	bl	800c71c <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000a2a:	4b2c      	ldr	r3, [pc, #176]	@ (8000adc <MX_ADC2_Init+0xc4>)
 8000a2c:	4a2c      	ldr	r2, [pc, #176]	@ (8000ae0 <MX_ADC2_Init+0xc8>)
 8000a2e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000a30:	4b2a      	ldr	r3, [pc, #168]	@ (8000adc <MX_ADC2_Init+0xc4>)
 8000a32:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000a36:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 8000a38:	4b28      	ldr	r3, [pc, #160]	@ (8000adc <MX_ADC2_Init+0xc4>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a3e:	4b27      	ldr	r3, [pc, #156]	@ (8000adc <MX_ADC2_Init+0xc4>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a44:	4b25      	ldr	r3, [pc, #148]	@ (8000adc <MX_ADC2_Init+0xc4>)
 8000a46:	2204      	movs	r2, #4
 8000a48:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000a4a:	4b24      	ldr	r3, [pc, #144]	@ (8000adc <MX_ADC2_Init+0xc4>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000a50:	4b22      	ldr	r3, [pc, #136]	@ (8000adc <MX_ADC2_Init+0xc4>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 8000a56:	4b21      	ldr	r3, [pc, #132]	@ (8000adc <MX_ADC2_Init+0xc4>)
 8000a58:	2201      	movs	r2, #1
 8000a5a:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000a5c:	4b1f      	ldr	r3, [pc, #124]	@ (8000adc <MX_ADC2_Init+0xc4>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a64:	4b1d      	ldr	r3, [pc, #116]	@ (8000adc <MX_ADC2_Init+0xc4>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a6a:	4b1c      	ldr	r3, [pc, #112]	@ (8000adc <MX_ADC2_Init+0xc4>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000a70:	4b1a      	ldr	r3, [pc, #104]	@ (8000adc <MX_ADC2_Init+0xc4>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000a76:	4b19      	ldr	r3, [pc, #100]	@ (8000adc <MX_ADC2_Init+0xc4>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000a7c:	4b17      	ldr	r3, [pc, #92]	@ (8000adc <MX_ADC2_Init+0xc4>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc2.Init.OversamplingMode = DISABLE;
 8000a82:	4b16      	ldr	r3, [pc, #88]	@ (8000adc <MX_ADC2_Init+0xc4>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc2.Init.Oversampling.Ratio = 1;
 8000a8a:	4b14      	ldr	r3, [pc, #80]	@ (8000adc <MX_ADC2_Init+0xc4>)
 8000a8c:	2201      	movs	r2, #1
 8000a8e:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000a90:	4812      	ldr	r0, [pc, #72]	@ (8000adc <MX_ADC2_Init+0xc4>)
 8000a92:	f001 fd0b 	bl	80024ac <HAL_ADC_Init>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <MX_ADC2_Init+0x88>
  {
    Error_Handler();
 8000a9c:	f000 fd32 	bl	8001504 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000aa0:	4b10      	ldr	r3, [pc, #64]	@ (8000ae4 <MX_ADC2_Init+0xcc>)
 8000aa2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000aa4:	2306      	movs	r3, #6
 8000aa6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8000aac:	4b0e      	ldr	r3, [pc, #56]	@ (8000ae8 <MX_ADC2_Init+0xd0>)
 8000aae:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000ab0:	2304      	movs	r3, #4
 8000ab2:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000abe:	1d3b      	adds	r3, r7, #4
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4806      	ldr	r0, [pc, #24]	@ (8000adc <MX_ADC2_Init+0xc4>)
 8000ac4:	f001 fefa 	bl	80028bc <HAL_ADC_ConfigChannel>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <MX_ADC2_Init+0xba>
  {
    Error_Handler();
 8000ace:	f000 fd19 	bl	8001504 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000ad2:	bf00      	nop
 8000ad4:	3728      	adds	r7, #40	@ 0x28
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	2400009c 	.word	0x2400009c
 8000ae0:	40022100 	.word	0x40022100
 8000ae4:	0c900008 	.word	0x0c900008
 8000ae8:	47ff0000 	.word	0x47ff0000

08000aec <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b08a      	sub	sp, #40	@ 0x28
 8000af0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000af2:	1d3b      	adds	r3, r7, #4
 8000af4:	2224      	movs	r2, #36	@ 0x24
 8000af6:	2100      	movs	r1, #0
 8000af8:	4618      	mov	r0, r3
 8000afa:	f00b fe0f 	bl	800c71c <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000afe:	4b12      	ldr	r3, [pc, #72]	@ (8000b48 <MX_DAC1_Init+0x5c>)
 8000b00:	4a12      	ldr	r2, [pc, #72]	@ (8000b4c <MX_DAC1_Init+0x60>)
 8000b02:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000b04:	4810      	ldr	r0, [pc, #64]	@ (8000b48 <MX_DAC1_Init+0x5c>)
 8000b06:	f002 ff87 	bl	8003a18 <HAL_DAC_Init>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d001      	beq.n	8000b14 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000b10:	f000 fcf8 	bl	8001504 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000b14:	2300      	movs	r3, #0
 8000b16:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T1_TRGO;
 8000b18:	2306      	movs	r3, #6
 8000b1a:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000b20:	2301      	movs	r3, #1
 8000b22:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000b24:	2300      	movs	r3, #0
 8000b26:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000b28:	1d3b      	adds	r3, r7, #4
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	4806      	ldr	r0, [pc, #24]	@ (8000b48 <MX_DAC1_Init+0x5c>)
 8000b30:	f003 f872 	bl	8003c18 <HAL_DAC_ConfigChannel>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d001      	beq.n	8000b3e <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000b3a:	f000 fce3 	bl	8001504 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000b3e:	bf00      	nop
 8000b40:	3728      	adds	r7, #40	@ 0x28
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	2400010c 	.word	0x2400010c
 8000b4c:	40007400 	.word	0x40007400

08000b50 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000b54:	4b1b      	ldr	r3, [pc, #108]	@ (8000bc4 <MX_I2C2_Init+0x74>)
 8000b56:	4a1c      	ldr	r2, [pc, #112]	@ (8000bc8 <MX_I2C2_Init+0x78>)
 8000b58:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x307075B1;
 8000b5a:	4b1a      	ldr	r3, [pc, #104]	@ (8000bc4 <MX_I2C2_Init+0x74>)
 8000b5c:	4a1b      	ldr	r2, [pc, #108]	@ (8000bcc <MX_I2C2_Init+0x7c>)
 8000b5e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000b60:	4b18      	ldr	r3, [pc, #96]	@ (8000bc4 <MX_I2C2_Init+0x74>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b66:	4b17      	ldr	r3, [pc, #92]	@ (8000bc4 <MX_I2C2_Init+0x74>)
 8000b68:	2201      	movs	r2, #1
 8000b6a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b6c:	4b15      	ldr	r3, [pc, #84]	@ (8000bc4 <MX_I2C2_Init+0x74>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000b72:	4b14      	ldr	r3, [pc, #80]	@ (8000bc4 <MX_I2C2_Init+0x74>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b78:	4b12      	ldr	r3, [pc, #72]	@ (8000bc4 <MX_I2C2_Init+0x74>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b7e:	4b11      	ldr	r3, [pc, #68]	@ (8000bc4 <MX_I2C2_Init+0x74>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b84:	4b0f      	ldr	r3, [pc, #60]	@ (8000bc4 <MX_I2C2_Init+0x74>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000b8a:	480e      	ldr	r0, [pc, #56]	@ (8000bc4 <MX_I2C2_Init+0x74>)
 8000b8c:	f005 fca6 	bl	80064dc <HAL_I2C_Init>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d001      	beq.n	8000b9a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000b96:	f000 fcb5 	bl	8001504 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b9a:	2100      	movs	r1, #0
 8000b9c:	4809      	ldr	r0, [pc, #36]	@ (8000bc4 <MX_I2C2_Init+0x74>)
 8000b9e:	f005 fd39 	bl	8006614 <HAL_I2CEx_ConfigAnalogFilter>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d001      	beq.n	8000bac <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000ba8:	f000 fcac 	bl	8001504 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000bac:	2100      	movs	r1, #0
 8000bae:	4805      	ldr	r0, [pc, #20]	@ (8000bc4 <MX_I2C2_Init+0x74>)
 8000bb0:	f005 fd7b 	bl	80066aa <HAL_I2CEx_ConfigDigitalFilter>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000bba:	f000 fca3 	bl	8001504 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000bbe:	bf00      	nop
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	24000198 	.word	0x24000198
 8000bc8:	40005800 	.word	0x40005800
 8000bcc:	307075b1 	.word	0x307075b1

08000bd0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000bd4:	4b27      	ldr	r3, [pc, #156]	@ (8000c74 <MX_SPI2_Init+0xa4>)
 8000bd6:	4a28      	ldr	r2, [pc, #160]	@ (8000c78 <MX_SPI2_Init+0xa8>)
 8000bd8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000bda:	4b26      	ldr	r3, [pc, #152]	@ (8000c74 <MX_SPI2_Init+0xa4>)
 8000bdc:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000be0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000be2:	4b24      	ldr	r3, [pc, #144]	@ (8000c74 <MX_SPI2_Init+0xa4>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8000be8:	4b22      	ldr	r3, [pc, #136]	@ (8000c74 <MX_SPI2_Init+0xa4>)
 8000bea:	2203      	movs	r2, #3
 8000bec:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000bee:	4b21      	ldr	r3, [pc, #132]	@ (8000c74 <MX_SPI2_Init+0xa4>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000bf4:	4b1f      	ldr	r3, [pc, #124]	@ (8000c74 <MX_SPI2_Init+0xa4>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000bfa:	4b1e      	ldr	r3, [pc, #120]	@ (8000c74 <MX_SPI2_Init+0xa4>)
 8000bfc:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000c00:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000c02:	4b1c      	ldr	r3, [pc, #112]	@ (8000c74 <MX_SPI2_Init+0xa4>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c08:	4b1a      	ldr	r3, [pc, #104]	@ (8000c74 <MX_SPI2_Init+0xa4>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c0e:	4b19      	ldr	r3, [pc, #100]	@ (8000c74 <MX_SPI2_Init+0xa4>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c14:	4b17      	ldr	r3, [pc, #92]	@ (8000c74 <MX_SPI2_Init+0xa4>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8000c1a:	4b16      	ldr	r3, [pc, #88]	@ (8000c74 <MX_SPI2_Init+0xa4>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000c20:	4b14      	ldr	r3, [pc, #80]	@ (8000c74 <MX_SPI2_Init+0xa4>)
 8000c22:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000c26:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000c28:	4b12      	ldr	r3, [pc, #72]	@ (8000c74 <MX_SPI2_Init+0xa4>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000c2e:	4b11      	ldr	r3, [pc, #68]	@ (8000c74 <MX_SPI2_Init+0xa4>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000c34:	4b0f      	ldr	r3, [pc, #60]	@ (8000c74 <MX_SPI2_Init+0xa4>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000c3a:	4b0e      	ldr	r3, [pc, #56]	@ (8000c74 <MX_SPI2_Init+0xa4>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000c40:	4b0c      	ldr	r3, [pc, #48]	@ (8000c74 <MX_SPI2_Init+0xa4>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000c46:	4b0b      	ldr	r3, [pc, #44]	@ (8000c74 <MX_SPI2_Init+0xa4>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000c4c:	4b09      	ldr	r3, [pc, #36]	@ (8000c74 <MX_SPI2_Init+0xa4>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000c52:	4b08      	ldr	r3, [pc, #32]	@ (8000c74 <MX_SPI2_Init+0xa4>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000c58:	4b06      	ldr	r3, [pc, #24]	@ (8000c74 <MX_SPI2_Init+0xa4>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000c5e:	4805      	ldr	r0, [pc, #20]	@ (8000c74 <MX_SPI2_Init+0xa4>)
 8000c60:	f009 f8f6 	bl	8009e50 <HAL_SPI_Init>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d001      	beq.n	8000c6e <MX_SPI2_Init+0x9e>
  {
    Error_Handler();
 8000c6a:	f000 fc4b 	bl	8001504 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000c6e:	bf00      	nop
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	240001ec 	.word	0x240001ec
 8000c78:	40003800 	.word	0x40003800

08000c7c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000c80:	4b27      	ldr	r3, [pc, #156]	@ (8000d20 <MX_SPI3_Init+0xa4>)
 8000c82:	4a28      	ldr	r2, [pc, #160]	@ (8000d24 <MX_SPI3_Init+0xa8>)
 8000c84:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000c86:	4b26      	ldr	r3, [pc, #152]	@ (8000d20 <MX_SPI3_Init+0xa4>)
 8000c88:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000c8c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000c8e:	4b24      	ldr	r3, [pc, #144]	@ (8000d20 <MX_SPI3_Init+0xa4>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000c94:	4b22      	ldr	r3, [pc, #136]	@ (8000d20 <MX_SPI3_Init+0xa4>)
 8000c96:	2203      	movs	r2, #3
 8000c98:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c9a:	4b21      	ldr	r3, [pc, #132]	@ (8000d20 <MX_SPI3_Init+0xa4>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ca0:	4b1f      	ldr	r3, [pc, #124]	@ (8000d20 <MX_SPI3_Init+0xa4>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000ca6:	4b1e      	ldr	r3, [pc, #120]	@ (8000d20 <MX_SPI3_Init+0xa4>)
 8000ca8:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000cac:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000cae:	4b1c      	ldr	r3, [pc, #112]	@ (8000d20 <MX_SPI3_Init+0xa4>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000cb4:	4b1a      	ldr	r3, [pc, #104]	@ (8000d20 <MX_SPI3_Init+0xa4>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000cba:	4b19      	ldr	r3, [pc, #100]	@ (8000d20 <MX_SPI3_Init+0xa4>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000cc0:	4b17      	ldr	r3, [pc, #92]	@ (8000d20 <MX_SPI3_Init+0xa4>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 8000cc6:	4b16      	ldr	r3, [pc, #88]	@ (8000d20 <MX_SPI3_Init+0xa4>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000ccc:	4b14      	ldr	r3, [pc, #80]	@ (8000d20 <MX_SPI3_Init+0xa4>)
 8000cce:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000cd2:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000cd4:	4b12      	ldr	r3, [pc, #72]	@ (8000d20 <MX_SPI3_Init+0xa4>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000cda:	4b11      	ldr	r3, [pc, #68]	@ (8000d20 <MX_SPI3_Init+0xa4>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000ce0:	4b0f      	ldr	r3, [pc, #60]	@ (8000d20 <MX_SPI3_Init+0xa4>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000ce6:	4b0e      	ldr	r3, [pc, #56]	@ (8000d20 <MX_SPI3_Init+0xa4>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000cec:	4b0c      	ldr	r3, [pc, #48]	@ (8000d20 <MX_SPI3_Init+0xa4>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000cf2:	4b0b      	ldr	r3, [pc, #44]	@ (8000d20 <MX_SPI3_Init+0xa4>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000cf8:	4b09      	ldr	r3, [pc, #36]	@ (8000d20 <MX_SPI3_Init+0xa4>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000cfe:	4b08      	ldr	r3, [pc, #32]	@ (8000d20 <MX_SPI3_Init+0xa4>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000d04:	4b06      	ldr	r3, [pc, #24]	@ (8000d20 <MX_SPI3_Init+0xa4>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000d0a:	4805      	ldr	r0, [pc, #20]	@ (8000d20 <MX_SPI3_Init+0xa4>)
 8000d0c:	f009 f8a0 	bl	8009e50 <HAL_SPI_Init>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d001      	beq.n	8000d1a <MX_SPI3_Init+0x9e>
  {
    Error_Handler();
 8000d16:	f000 fbf5 	bl	8001504 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000d1a:	bf00      	nop
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	24000274 	.word	0x24000274
 8000d24:	40003c00 	.word	0x40003c00

08000d28 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8000d2c:	4b27      	ldr	r3, [pc, #156]	@ (8000dcc <MX_SPI4_Init+0xa4>)
 8000d2e:	4a28      	ldr	r2, [pc, #160]	@ (8000dd0 <MX_SPI4_Init+0xa8>)
 8000d30:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8000d32:	4b26      	ldr	r3, [pc, #152]	@ (8000dcc <MX_SPI4_Init+0xa4>)
 8000d34:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000d38:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8000d3a:	4b24      	ldr	r3, [pc, #144]	@ (8000dcc <MX_SPI4_Init+0xa4>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_4BIT;
 8000d40:	4b22      	ldr	r3, [pc, #136]	@ (8000dcc <MX_SPI4_Init+0xa4>)
 8000d42:	2203      	movs	r2, #3
 8000d44:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d46:	4b21      	ldr	r3, [pc, #132]	@ (8000dcc <MX_SPI4_Init+0xa4>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d4c:	4b1f      	ldr	r3, [pc, #124]	@ (8000dcc <MX_SPI4_Init+0xa4>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8000d52:	4b1e      	ldr	r3, [pc, #120]	@ (8000dcc <MX_SPI4_Init+0xa4>)
 8000d54:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000d58:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000d5a:	4b1c      	ldr	r3, [pc, #112]	@ (8000dcc <MX_SPI4_Init+0xa4>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d60:	4b1a      	ldr	r3, [pc, #104]	@ (8000dcc <MX_SPI4_Init+0xa4>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d66:	4b19      	ldr	r3, [pc, #100]	@ (8000dcc <MX_SPI4_Init+0xa4>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d6c:	4b17      	ldr	r3, [pc, #92]	@ (8000dcc <MX_SPI4_Init+0xa4>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 8000d72:	4b16      	ldr	r3, [pc, #88]	@ (8000dcc <MX_SPI4_Init+0xa4>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000d78:	4b14      	ldr	r3, [pc, #80]	@ (8000dcc <MX_SPI4_Init+0xa4>)
 8000d7a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000d7e:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000d80:	4b12      	ldr	r3, [pc, #72]	@ (8000dcc <MX_SPI4_Init+0xa4>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000d86:	4b11      	ldr	r3, [pc, #68]	@ (8000dcc <MX_SPI4_Init+0xa4>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000d8c:	4b0f      	ldr	r3, [pc, #60]	@ (8000dcc <MX_SPI4_Init+0xa4>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000d92:	4b0e      	ldr	r3, [pc, #56]	@ (8000dcc <MX_SPI4_Init+0xa4>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000d98:	4b0c      	ldr	r3, [pc, #48]	@ (8000dcc <MX_SPI4_Init+0xa4>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000d9e:	4b0b      	ldr	r3, [pc, #44]	@ (8000dcc <MX_SPI4_Init+0xa4>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000da4:	4b09      	ldr	r3, [pc, #36]	@ (8000dcc <MX_SPI4_Init+0xa4>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000daa:	4b08      	ldr	r3, [pc, #32]	@ (8000dcc <MX_SPI4_Init+0xa4>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000db0:	4b06      	ldr	r3, [pc, #24]	@ (8000dcc <MX_SPI4_Init+0xa4>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8000db6:	4805      	ldr	r0, [pc, #20]	@ (8000dcc <MX_SPI4_Init+0xa4>)
 8000db8:	f009 f84a 	bl	8009e50 <HAL_SPI_Init>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d001      	beq.n	8000dc6 <MX_SPI4_Init+0x9e>
  {
    Error_Handler();
 8000dc2:	f000 fb9f 	bl	8001504 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8000dc6:	bf00      	nop
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	240002fc 	.word	0x240002fc
 8000dd0:	40013400 	.word	0x40013400

08000dd4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b088      	sub	sp, #32
 8000dd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dda:	f107 0310 	add.w	r3, r7, #16
 8000dde:	2200      	movs	r2, #0
 8000de0:	601a      	str	r2, [r3, #0]
 8000de2:	605a      	str	r2, [r3, #4]
 8000de4:	609a      	str	r2, [r3, #8]
 8000de6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000de8:	1d3b      	adds	r3, r7, #4
 8000dea:	2200      	movs	r2, #0
 8000dec:	601a      	str	r2, [r3, #0]
 8000dee:	605a      	str	r2, [r3, #4]
 8000df0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000df2:	4b20      	ldr	r3, [pc, #128]	@ (8000e74 <MX_TIM1_Init+0xa0>)
 8000df4:	4a20      	ldr	r2, [pc, #128]	@ (8000e78 <MX_TIM1_Init+0xa4>)
 8000df6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000df8:	4b1e      	ldr	r3, [pc, #120]	@ (8000e74 <MX_TIM1_Init+0xa0>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dfe:	4b1d      	ldr	r3, [pc, #116]	@ (8000e74 <MX_TIM1_Init+0xa0>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000e04:	4b1b      	ldr	r3, [pc, #108]	@ (8000e74 <MX_TIM1_Init+0xa0>)
 8000e06:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000e0a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e0c:	4b19      	ldr	r3, [pc, #100]	@ (8000e74 <MX_TIM1_Init+0xa0>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000e12:	4b18      	ldr	r3, [pc, #96]	@ (8000e74 <MX_TIM1_Init+0xa0>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e18:	4b16      	ldr	r3, [pc, #88]	@ (8000e74 <MX_TIM1_Init+0xa0>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000e1e:	4815      	ldr	r0, [pc, #84]	@ (8000e74 <MX_TIM1_Init+0xa0>)
 8000e20:	f009 f955 	bl	800a0ce <HAL_TIM_Base_Init>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d001      	beq.n	8000e2e <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000e2a:	f000 fb6b 	bl	8001504 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e2e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e32:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000e34:	f107 0310 	add.w	r3, r7, #16
 8000e38:	4619      	mov	r1, r3
 8000e3a:	480e      	ldr	r0, [pc, #56]	@ (8000e74 <MX_TIM1_Init+0xa0>)
 8000e3c:	f009 fcae 	bl	800a79c <HAL_TIM_ConfigClockSource>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d001      	beq.n	8000e4a <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000e46:	f000 fb5d 	bl	8001504 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000e4a:	2320      	movs	r3, #32
 8000e4c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e52:	2300      	movs	r3, #0
 8000e54:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000e56:	1d3b      	adds	r3, r7, #4
 8000e58:	4619      	mov	r1, r3
 8000e5a:	4806      	ldr	r0, [pc, #24]	@ (8000e74 <MX_TIM1_Init+0xa0>)
 8000e5c:	f00a f9e2 	bl	800b224 <HAL_TIMEx_MasterConfigSynchronization>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d001      	beq.n	8000e6a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000e66:	f000 fb4d 	bl	8001504 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000e6a:	bf00      	nop
 8000e6c:	3720      	adds	r7, #32
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	24000384 	.word	0x24000384
 8000e78:	40010000 	.word	0x40010000

08000e7c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b088      	sub	sp, #32
 8000e80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e82:	f107 0310 	add.w	r3, r7, #16
 8000e86:	2200      	movs	r2, #0
 8000e88:	601a      	str	r2, [r3, #0]
 8000e8a:	605a      	str	r2, [r3, #4]
 8000e8c:	609a      	str	r2, [r3, #8]
 8000e8e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e90:	1d3b      	adds	r3, r7, #4
 8000e92:	2200      	movs	r2, #0
 8000e94:	601a      	str	r2, [r3, #0]
 8000e96:	605a      	str	r2, [r3, #4]
 8000e98:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e9a:	4b1e      	ldr	r3, [pc, #120]	@ (8000f14 <MX_TIM2_Init+0x98>)
 8000e9c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000ea0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000ea2:	4b1c      	ldr	r3, [pc, #112]	@ (8000f14 <MX_TIM2_Init+0x98>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ea8:	4b1a      	ldr	r3, [pc, #104]	@ (8000f14 <MX_TIM2_Init+0x98>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000eae:	4b19      	ldr	r3, [pc, #100]	@ (8000f14 <MX_TIM2_Init+0x98>)
 8000eb0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000eb4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000eb6:	4b17      	ldr	r3, [pc, #92]	@ (8000f14 <MX_TIM2_Init+0x98>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ebc:	4b15      	ldr	r3, [pc, #84]	@ (8000f14 <MX_TIM2_Init+0x98>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ec2:	4814      	ldr	r0, [pc, #80]	@ (8000f14 <MX_TIM2_Init+0x98>)
 8000ec4:	f009 f903 	bl	800a0ce <HAL_TIM_Base_Init>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d001      	beq.n	8000ed2 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000ece:	f000 fb19 	bl	8001504 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ed2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ed6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000ed8:	f107 0310 	add.w	r3, r7, #16
 8000edc:	4619      	mov	r1, r3
 8000ede:	480d      	ldr	r0, [pc, #52]	@ (8000f14 <MX_TIM2_Init+0x98>)
 8000ee0:	f009 fc5c 	bl	800a79c <HAL_TIM_ConfigClockSource>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d001      	beq.n	8000eee <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000eea:	f000 fb0b 	bl	8001504 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000eee:	2320      	movs	r3, #32
 8000ef0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ef6:	1d3b      	adds	r3, r7, #4
 8000ef8:	4619      	mov	r1, r3
 8000efa:	4806      	ldr	r0, [pc, #24]	@ (8000f14 <MX_TIM2_Init+0x98>)
 8000efc:	f00a f992 	bl	800b224 <HAL_TIMEx_MasterConfigSynchronization>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d001      	beq.n	8000f0a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000f06:	f000 fafd 	bl	8001504 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000f0a:	bf00      	nop
 8000f0c:	3720      	adds	r7, #32
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	240003d0 	.word	0x240003d0

08000f18 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b08e      	sub	sp, #56	@ 0x38
 8000f1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f1e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000f22:	2200      	movs	r2, #0
 8000f24:	601a      	str	r2, [r3, #0]
 8000f26:	605a      	str	r2, [r3, #4]
 8000f28:	609a      	str	r2, [r3, #8]
 8000f2a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f2c:	f107 031c 	add.w	r3, r7, #28
 8000f30:	2200      	movs	r2, #0
 8000f32:	601a      	str	r2, [r3, #0]
 8000f34:	605a      	str	r2, [r3, #4]
 8000f36:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f38:	463b      	mov	r3, r7
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	601a      	str	r2, [r3, #0]
 8000f3e:	605a      	str	r2, [r3, #4]
 8000f40:	609a      	str	r2, [r3, #8]
 8000f42:	60da      	str	r2, [r3, #12]
 8000f44:	611a      	str	r2, [r3, #16]
 8000f46:	615a      	str	r2, [r3, #20]
 8000f48:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000f4a:	4b38      	ldr	r3, [pc, #224]	@ (800102c <MX_TIM3_Init+0x114>)
 8000f4c:	4a38      	ldr	r2, [pc, #224]	@ (8001030 <MX_TIM3_Init+0x118>)
 8000f4e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000f50:	4b36      	ldr	r3, [pc, #216]	@ (800102c <MX_TIM3_Init+0x114>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f56:	4b35      	ldr	r3, [pc, #212]	@ (800102c <MX_TIM3_Init+0x114>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000f5c:	4b33      	ldr	r3, [pc, #204]	@ (800102c <MX_TIM3_Init+0x114>)
 8000f5e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000f62:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f64:	4b31      	ldr	r3, [pc, #196]	@ (800102c <MX_TIM3_Init+0x114>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f6a:	4b30      	ldr	r3, [pc, #192]	@ (800102c <MX_TIM3_Init+0x114>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000f70:	482e      	ldr	r0, [pc, #184]	@ (800102c <MX_TIM3_Init+0x114>)
 8000f72:	f009 f8ac 	bl	800a0ce <HAL_TIM_Base_Init>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d001      	beq.n	8000f80 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000f7c:	f000 fac2 	bl	8001504 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f80:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f84:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000f86:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	4827      	ldr	r0, [pc, #156]	@ (800102c <MX_TIM3_Init+0x114>)
 8000f8e:	f009 fc05 	bl	800a79c <HAL_TIM_ConfigClockSource>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d001      	beq.n	8000f9c <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000f98:	f000 fab4 	bl	8001504 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000f9c:	4823      	ldr	r0, [pc, #140]	@ (800102c <MX_TIM3_Init+0x114>)
 8000f9e:	f009 f96b 	bl	800a278 <HAL_TIM_PWM_Init>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d001      	beq.n	8000fac <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000fa8:	f000 faac 	bl	8001504 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fac:	2300      	movs	r3, #0
 8000fae:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000fb4:	f107 031c 	add.w	r3, r7, #28
 8000fb8:	4619      	mov	r1, r3
 8000fba:	481c      	ldr	r0, [pc, #112]	@ (800102c <MX_TIM3_Init+0x114>)
 8000fbc:	f00a f932 	bl	800b224 <HAL_TIMEx_MasterConfigSynchronization>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d001      	beq.n	8000fca <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000fc6:	f000 fa9d 	bl	8001504 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000fca:	2360      	movs	r3, #96	@ 0x60
 8000fcc:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000fda:	463b      	mov	r3, r7
 8000fdc:	2200      	movs	r2, #0
 8000fde:	4619      	mov	r1, r3
 8000fe0:	4812      	ldr	r0, [pc, #72]	@ (800102c <MX_TIM3_Init+0x114>)
 8000fe2:	f009 fac7 	bl	800a574 <HAL_TIM_PWM_ConfigChannel>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d001      	beq.n	8000ff0 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000fec:	f000 fa8a 	bl	8001504 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000ff0:	463b      	mov	r3, r7
 8000ff2:	2204      	movs	r2, #4
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	480d      	ldr	r0, [pc, #52]	@ (800102c <MX_TIM3_Init+0x114>)
 8000ff8:	f009 fabc 	bl	800a574 <HAL_TIM_PWM_ConfigChannel>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d001      	beq.n	8001006 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8001002:	f000 fa7f 	bl	8001504 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001006:	463b      	mov	r3, r7
 8001008:	2208      	movs	r2, #8
 800100a:	4619      	mov	r1, r3
 800100c:	4807      	ldr	r0, [pc, #28]	@ (800102c <MX_TIM3_Init+0x114>)
 800100e:	f009 fab1 	bl	800a574 <HAL_TIM_PWM_ConfigChannel>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d001      	beq.n	800101c <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 8001018:	f000 fa74 	bl	8001504 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800101c:	4803      	ldr	r0, [pc, #12]	@ (800102c <MX_TIM3_Init+0x114>)
 800101e:	f000 fd71 	bl	8001b04 <HAL_TIM_MspPostInit>

}
 8001022:	bf00      	nop
 8001024:	3738      	adds	r7, #56	@ 0x38
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	2400041c 	.word	0x2400041c
 8001030:	40000400 	.word	0x40000400

08001034 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b08e      	sub	sp, #56	@ 0x38
 8001038:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800103a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800103e:	2200      	movs	r2, #0
 8001040:	601a      	str	r2, [r3, #0]
 8001042:	605a      	str	r2, [r3, #4]
 8001044:	609a      	str	r2, [r3, #8]
 8001046:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001048:	f107 031c 	add.w	r3, r7, #28
 800104c:	2200      	movs	r2, #0
 800104e:	601a      	str	r2, [r3, #0]
 8001050:	605a      	str	r2, [r3, #4]
 8001052:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001054:	463b      	mov	r3, r7
 8001056:	2200      	movs	r2, #0
 8001058:	601a      	str	r2, [r3, #0]
 800105a:	605a      	str	r2, [r3, #4]
 800105c:	609a      	str	r2, [r3, #8]
 800105e:	60da      	str	r2, [r3, #12]
 8001060:	611a      	str	r2, [r3, #16]
 8001062:	615a      	str	r2, [r3, #20]
 8001064:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001066:	4b2d      	ldr	r3, [pc, #180]	@ (800111c <MX_TIM4_Init+0xe8>)
 8001068:	4a2d      	ldr	r2, [pc, #180]	@ (8001120 <MX_TIM4_Init+0xec>)
 800106a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800106c:	4b2b      	ldr	r3, [pc, #172]	@ (800111c <MX_TIM4_Init+0xe8>)
 800106e:	2200      	movs	r2, #0
 8001070:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001072:	4b2a      	ldr	r3, [pc, #168]	@ (800111c <MX_TIM4_Init+0xe8>)
 8001074:	2200      	movs	r2, #0
 8001076:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001078:	4b28      	ldr	r3, [pc, #160]	@ (800111c <MX_TIM4_Init+0xe8>)
 800107a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800107e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001080:	4b26      	ldr	r3, [pc, #152]	@ (800111c <MX_TIM4_Init+0xe8>)
 8001082:	2200      	movs	r2, #0
 8001084:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001086:	4b25      	ldr	r3, [pc, #148]	@ (800111c <MX_TIM4_Init+0xe8>)
 8001088:	2200      	movs	r2, #0
 800108a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800108c:	4823      	ldr	r0, [pc, #140]	@ (800111c <MX_TIM4_Init+0xe8>)
 800108e:	f009 f81e 	bl	800a0ce <HAL_TIM_Base_Init>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d001      	beq.n	800109c <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8001098:	f000 fa34 	bl	8001504 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800109c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010a0:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80010a2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80010a6:	4619      	mov	r1, r3
 80010a8:	481c      	ldr	r0, [pc, #112]	@ (800111c <MX_TIM4_Init+0xe8>)
 80010aa:	f009 fb77 	bl	800a79c <HAL_TIM_ConfigClockSource>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d001      	beq.n	80010b8 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 80010b4:	f000 fa26 	bl	8001504 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80010b8:	4818      	ldr	r0, [pc, #96]	@ (800111c <MX_TIM4_Init+0xe8>)
 80010ba:	f009 f8dd 	bl	800a278 <HAL_TIM_PWM_Init>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 80010c4:	f000 fa1e 	bl	8001504 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010c8:	2300      	movs	r3, #0
 80010ca:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010cc:	2300      	movs	r3, #0
 80010ce:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80010d0:	f107 031c 	add.w	r3, r7, #28
 80010d4:	4619      	mov	r1, r3
 80010d6:	4811      	ldr	r0, [pc, #68]	@ (800111c <MX_TIM4_Init+0xe8>)
 80010d8:	f00a f8a4 	bl	800b224 <HAL_TIMEx_MasterConfigSynchronization>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80010e2:	f000 fa0f 	bl	8001504 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010e6:	2360      	movs	r3, #96	@ 0x60
 80010e8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80010ea:	2300      	movs	r3, #0
 80010ec:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010ee:	2300      	movs	r3, #0
 80010f0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010f2:	2300      	movs	r3, #0
 80010f4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010f6:	463b      	mov	r3, r7
 80010f8:	2200      	movs	r2, #0
 80010fa:	4619      	mov	r1, r3
 80010fc:	4807      	ldr	r0, [pc, #28]	@ (800111c <MX_TIM4_Init+0xe8>)
 80010fe:	f009 fa39 	bl	800a574 <HAL_TIM_PWM_ConfigChannel>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d001      	beq.n	800110c <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8001108:	f000 f9fc 	bl	8001504 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800110c:	4803      	ldr	r0, [pc, #12]	@ (800111c <MX_TIM4_Init+0xe8>)
 800110e:	f000 fcf9 	bl	8001b04 <HAL_TIM_MspPostInit>

}
 8001112:	bf00      	nop
 8001114:	3738      	adds	r7, #56	@ 0x38
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	24000468 	.word	0x24000468
 8001120:	40000800 	.word	0x40000800

08001124 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8001128:	4b23      	ldr	r3, [pc, #140]	@ (80011b8 <MX_UART7_Init+0x94>)
 800112a:	4a24      	ldr	r2, [pc, #144]	@ (80011bc <MX_UART7_Init+0x98>)
 800112c:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 800112e:	4b22      	ldr	r3, [pc, #136]	@ (80011b8 <MX_UART7_Init+0x94>)
 8001130:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001134:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8001136:	4b20      	ldr	r3, [pc, #128]	@ (80011b8 <MX_UART7_Init+0x94>)
 8001138:	2200      	movs	r2, #0
 800113a:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 800113c:	4b1e      	ldr	r3, [pc, #120]	@ (80011b8 <MX_UART7_Init+0x94>)
 800113e:	2200      	movs	r2, #0
 8001140:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8001142:	4b1d      	ldr	r3, [pc, #116]	@ (80011b8 <MX_UART7_Init+0x94>)
 8001144:	2200      	movs	r2, #0
 8001146:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8001148:	4b1b      	ldr	r3, [pc, #108]	@ (80011b8 <MX_UART7_Init+0x94>)
 800114a:	220c      	movs	r2, #12
 800114c:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 800114e:	4b1a      	ldr	r3, [pc, #104]	@ (80011b8 <MX_UART7_Init+0x94>)
 8001150:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8001154:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8001156:	4b18      	ldr	r3, [pc, #96]	@ (80011b8 <MX_UART7_Init+0x94>)
 8001158:	2200      	movs	r2, #0
 800115a:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800115c:	4b16      	ldr	r3, [pc, #88]	@ (80011b8 <MX_UART7_Init+0x94>)
 800115e:	2200      	movs	r2, #0
 8001160:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001162:	4b15      	ldr	r3, [pc, #84]	@ (80011b8 <MX_UART7_Init+0x94>)
 8001164:	2200      	movs	r2, #0
 8001166:	625a      	str	r2, [r3, #36]	@ 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001168:	4b13      	ldr	r3, [pc, #76]	@ (80011b8 <MX_UART7_Init+0x94>)
 800116a:	2200      	movs	r2, #0
 800116c:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 800116e:	4812      	ldr	r0, [pc, #72]	@ (80011b8 <MX_UART7_Init+0x94>)
 8001170:	f00a f8f4 	bl	800b35c <HAL_UART_Init>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <MX_UART7_Init+0x5a>
  {
    Error_Handler();
 800117a:	f000 f9c3 	bl	8001504 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800117e:	2100      	movs	r1, #0
 8001180:	480d      	ldr	r0, [pc, #52]	@ (80011b8 <MX_UART7_Init+0x94>)
 8001182:	f00b fa00 	bl	800c586 <HAL_UARTEx_SetTxFifoThreshold>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <MX_UART7_Init+0x6c>
  {
    Error_Handler();
 800118c:	f000 f9ba 	bl	8001504 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001190:	2100      	movs	r1, #0
 8001192:	4809      	ldr	r0, [pc, #36]	@ (80011b8 <MX_UART7_Init+0x94>)
 8001194:	f00b fa35 	bl	800c602 <HAL_UARTEx_SetRxFifoThreshold>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <MX_UART7_Init+0x7e>
  {
    Error_Handler();
 800119e:	f000 f9b1 	bl	8001504 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 80011a2:	4805      	ldr	r0, [pc, #20]	@ (80011b8 <MX_UART7_Init+0x94>)
 80011a4:	f00b f9b6 	bl	800c514 <HAL_UARTEx_DisableFifoMode>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <MX_UART7_Init+0x8e>
  {
    Error_Handler();
 80011ae:	f000 f9a9 	bl	8001504 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 80011b2:	bf00      	nop
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	240004b4 	.word	0x240004b4
 80011bc:	40007800 	.word	0x40007800

080011c0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80011c4:	4b22      	ldr	r3, [pc, #136]	@ (8001250 <MX_USART1_UART_Init+0x90>)
 80011c6:	4a23      	ldr	r2, [pc, #140]	@ (8001254 <MX_USART1_UART_Init+0x94>)
 80011c8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80011ca:	4b21      	ldr	r3, [pc, #132]	@ (8001250 <MX_USART1_UART_Init+0x90>)
 80011cc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80011d0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80011d2:	4b1f      	ldr	r3, [pc, #124]	@ (8001250 <MX_USART1_UART_Init+0x90>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80011d8:	4b1d      	ldr	r3, [pc, #116]	@ (8001250 <MX_USART1_UART_Init+0x90>)
 80011da:	2200      	movs	r2, #0
 80011dc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80011de:	4b1c      	ldr	r3, [pc, #112]	@ (8001250 <MX_USART1_UART_Init+0x90>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80011e4:	4b1a      	ldr	r3, [pc, #104]	@ (8001250 <MX_USART1_UART_Init+0x90>)
 80011e6:	220c      	movs	r2, #12
 80011e8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011ea:	4b19      	ldr	r3, [pc, #100]	@ (8001250 <MX_USART1_UART_Init+0x90>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80011f0:	4b17      	ldr	r3, [pc, #92]	@ (8001250 <MX_USART1_UART_Init+0x90>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011f6:	4b16      	ldr	r3, [pc, #88]	@ (8001250 <MX_USART1_UART_Init+0x90>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80011fc:	4b14      	ldr	r3, [pc, #80]	@ (8001250 <MX_USART1_UART_Init+0x90>)
 80011fe:	2200      	movs	r2, #0
 8001200:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001202:	4b13      	ldr	r3, [pc, #76]	@ (8001250 <MX_USART1_UART_Init+0x90>)
 8001204:	2200      	movs	r2, #0
 8001206:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001208:	4811      	ldr	r0, [pc, #68]	@ (8001250 <MX_USART1_UART_Init+0x90>)
 800120a:	f00a f8a7 	bl	800b35c <HAL_UART_Init>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d001      	beq.n	8001218 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001214:	f000 f976 	bl	8001504 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001218:	2100      	movs	r1, #0
 800121a:	480d      	ldr	r0, [pc, #52]	@ (8001250 <MX_USART1_UART_Init+0x90>)
 800121c:	f00b f9b3 	bl	800c586 <HAL_UARTEx_SetTxFifoThreshold>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001226:	f000 f96d 	bl	8001504 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800122a:	2100      	movs	r1, #0
 800122c:	4808      	ldr	r0, [pc, #32]	@ (8001250 <MX_USART1_UART_Init+0x90>)
 800122e:	f00b f9e8 	bl	800c602 <HAL_UARTEx_SetRxFifoThreshold>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d001      	beq.n	800123c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001238:	f000 f964 	bl	8001504 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800123c:	4804      	ldr	r0, [pc, #16]	@ (8001250 <MX_USART1_UART_Init+0x90>)
 800123e:	f00b f969 	bl	800c514 <HAL_UARTEx_DisableFifoMode>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001248:	f000 f95c 	bl	8001504 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800124c:	bf00      	nop
 800124e:	bd80      	pop	{r7, pc}
 8001250:	24000548 	.word	0x24000548
 8001254:	40011000 	.word	0x40011000

08001258 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b082      	sub	sp, #8
 800125c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800125e:	4b0d      	ldr	r3, [pc, #52]	@ (8001294 <MX_DMA_Init+0x3c>)
 8001260:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001264:	4a0b      	ldr	r2, [pc, #44]	@ (8001294 <MX_DMA_Init+0x3c>)
 8001266:	f043 0301 	orr.w	r3, r3, #1
 800126a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800126e:	4b09      	ldr	r3, [pc, #36]	@ (8001294 <MX_DMA_Init+0x3c>)
 8001270:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001274:	f003 0301 	and.w	r3, r3, #1
 8001278:	607b      	str	r3, [r7, #4]
 800127a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800127c:	2200      	movs	r2, #0
 800127e:	2100      	movs	r1, #0
 8001280:	200b      	movs	r0, #11
 8001282:	f002 fb1c 	bl	80038be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001286:	200b      	movs	r0, #11
 8001288:	f002 fb33 	bl	80038f2 <HAL_NVIC_EnableIRQ>

}
 800128c:	bf00      	nop
 800128e:	3708      	adds	r7, #8
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	58024400 	.word	0x58024400

08001298 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b08c      	sub	sp, #48	@ 0x30
 800129c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800129e:	f107 031c 	add.w	r3, r7, #28
 80012a2:	2200      	movs	r2, #0
 80012a4:	601a      	str	r2, [r3, #0]
 80012a6:	605a      	str	r2, [r3, #4]
 80012a8:	609a      	str	r2, [r3, #8]
 80012aa:	60da      	str	r2, [r3, #12]
 80012ac:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80012ae:	4b79      	ldr	r3, [pc, #484]	@ (8001494 <MX_GPIO_Init+0x1fc>)
 80012b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012b4:	4a77      	ldr	r2, [pc, #476]	@ (8001494 <MX_GPIO_Init+0x1fc>)
 80012b6:	f043 0310 	orr.w	r3, r3, #16
 80012ba:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012be:	4b75      	ldr	r3, [pc, #468]	@ (8001494 <MX_GPIO_Init+0x1fc>)
 80012c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012c4:	f003 0310 	and.w	r3, r3, #16
 80012c8:	61bb      	str	r3, [r7, #24]
 80012ca:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012cc:	4b71      	ldr	r3, [pc, #452]	@ (8001494 <MX_GPIO_Init+0x1fc>)
 80012ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012d2:	4a70      	ldr	r2, [pc, #448]	@ (8001494 <MX_GPIO_Init+0x1fc>)
 80012d4:	f043 0304 	orr.w	r3, r3, #4
 80012d8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012dc:	4b6d      	ldr	r3, [pc, #436]	@ (8001494 <MX_GPIO_Init+0x1fc>)
 80012de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012e2:	f003 0304 	and.w	r3, r3, #4
 80012e6:	617b      	str	r3, [r7, #20]
 80012e8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012ea:	4b6a      	ldr	r3, [pc, #424]	@ (8001494 <MX_GPIO_Init+0x1fc>)
 80012ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012f0:	4a68      	ldr	r2, [pc, #416]	@ (8001494 <MX_GPIO_Init+0x1fc>)
 80012f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80012f6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012fa:	4b66      	ldr	r3, [pc, #408]	@ (8001494 <MX_GPIO_Init+0x1fc>)
 80012fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001300:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001304:	613b      	str	r3, [r7, #16]
 8001306:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001308:	4b62      	ldr	r3, [pc, #392]	@ (8001494 <MX_GPIO_Init+0x1fc>)
 800130a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800130e:	4a61      	ldr	r2, [pc, #388]	@ (8001494 <MX_GPIO_Init+0x1fc>)
 8001310:	f043 0301 	orr.w	r3, r3, #1
 8001314:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001318:	4b5e      	ldr	r3, [pc, #376]	@ (8001494 <MX_GPIO_Init+0x1fc>)
 800131a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800131e:	f003 0301 	and.w	r3, r3, #1
 8001322:	60fb      	str	r3, [r7, #12]
 8001324:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001326:	4b5b      	ldr	r3, [pc, #364]	@ (8001494 <MX_GPIO_Init+0x1fc>)
 8001328:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800132c:	4a59      	ldr	r2, [pc, #356]	@ (8001494 <MX_GPIO_Init+0x1fc>)
 800132e:	f043 0302 	orr.w	r3, r3, #2
 8001332:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001336:	4b57      	ldr	r3, [pc, #348]	@ (8001494 <MX_GPIO_Init+0x1fc>)
 8001338:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800133c:	f003 0302 	and.w	r3, r3, #2
 8001340:	60bb      	str	r3, [r7, #8]
 8001342:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001344:	4b53      	ldr	r3, [pc, #332]	@ (8001494 <MX_GPIO_Init+0x1fc>)
 8001346:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800134a:	4a52      	ldr	r2, [pc, #328]	@ (8001494 <MX_GPIO_Init+0x1fc>)
 800134c:	f043 0308 	orr.w	r3, r3, #8
 8001350:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001354:	4b4f      	ldr	r3, [pc, #316]	@ (8001494 <MX_GPIO_Init+0x1fc>)
 8001356:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800135a:	f003 0308 	and.w	r3, r3, #8
 800135e:	607b      	str	r3, [r7, #4]
 8001360:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI4_CS_GPIO_Port, SPI4_CS_Pin, GPIO_PIN_RESET);
 8001362:	2200      	movs	r2, #0
 8001364:	2110      	movs	r1, #16
 8001366:	484c      	ldr	r0, [pc, #304]	@ (8001498 <MX_GPIO_Init+0x200>)
 8001368:	f005 f89e 	bl	80064a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIO_TIMING2_GPIO_Port, GPIO_TIMING2_Pin, GPIO_PIN_RESET);
 800136c:	2200      	movs	r2, #0
 800136e:	2104      	movs	r1, #4
 8001370:	484a      	ldr	r0, [pc, #296]	@ (800149c <MX_GPIO_Init+0x204>)
 8001372:	f005 f899 	bl	80064a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_TIMING1_Pin|MUTE_INDICATOR_Pin|MUTE_SIGNAL_Pin, GPIO_PIN_RESET);
 8001376:	2200      	movs	r2, #0
 8001378:	210b      	movs	r1, #11
 800137a:	4849      	ldr	r0, [pc, #292]	@ (80014a0 <MX_GPIO_Init+0x208>)
 800137c:	f005 f894 	bl	80064a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ACCEL_NCS1_Pin|RECORD_INDICATOR_Pin, GPIO_PIN_RESET);
 8001380:	2200      	movs	r2, #0
 8001382:	f44f 5188 	mov.w	r1, #4352	@ 0x1100
 8001386:	4847      	ldr	r0, [pc, #284]	@ (80014a4 <MX_GPIO_Init+0x20c>)
 8001388:	f005 f88e 	bl	80064a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 800138c:	2200      	movs	r2, #0
 800138e:	2101      	movs	r1, #1
 8001390:	4845      	ldr	r0, [pc, #276]	@ (80014a8 <MX_GPIO_Init+0x210>)
 8001392:	f005 f889 	bl	80064a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI4_INT1_Pin */
  GPIO_InitStruct.Pin = SPI4_INT1_Pin;
 8001396:	2308      	movs	r3, #8
 8001398:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800139a:	2300      	movs	r3, #0
 800139c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139e:	2300      	movs	r3, #0
 80013a0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(SPI4_INT1_GPIO_Port, &GPIO_InitStruct);
 80013a2:	f107 031c 	add.w	r3, r7, #28
 80013a6:	4619      	mov	r1, r3
 80013a8:	483b      	ldr	r0, [pc, #236]	@ (8001498 <MX_GPIO_Init+0x200>)
 80013aa:	f004 fed5 	bl	8006158 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI4_CS_Pin */
  GPIO_InitStruct.Pin = SPI4_CS_Pin;
 80013ae:	2310      	movs	r3, #16
 80013b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013b2:	2301      	movs	r3, #1
 80013b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b6:	2300      	movs	r3, #0
 80013b8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ba:	2300      	movs	r3, #0
 80013bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(SPI4_CS_GPIO_Port, &GPIO_InitStruct);
 80013be:	f107 031c 	add.w	r3, r7, #28
 80013c2:	4619      	mov	r1, r3
 80013c4:	4834      	ldr	r0, [pc, #208]	@ (8001498 <MX_GPIO_Init+0x200>)
 80013c6:	f004 fec7 	bl	8006158 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 DAC_EXT_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_13|DAC_EXT_Pin;
 80013ca:	f44f 5308 	mov.w	r3, #8704	@ 0x2200
 80013ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013d0:	2300      	movs	r3, #0
 80013d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d4:	2300      	movs	r3, #0
 80013d6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013d8:	f107 031c 	add.w	r3, r7, #28
 80013dc:	4619      	mov	r1, r3
 80013de:	482f      	ldr	r0, [pc, #188]	@ (800149c <MX_GPIO_Init+0x204>)
 80013e0:	f004 feba 	bl	8006158 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_TIMING2_Pin */
  GPIO_InitStruct.Pin = GPIO_TIMING2_Pin;
 80013e4:	2304      	movs	r3, #4
 80013e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013e8:	2301      	movs	r3, #1
 80013ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ec:	2300      	movs	r3, #0
 80013ee:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013f0:	2300      	movs	r3, #0
 80013f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIO_TIMING2_GPIO_Port, &GPIO_InitStruct);
 80013f4:	f107 031c 	add.w	r3, r7, #28
 80013f8:	4619      	mov	r1, r3
 80013fa:	4828      	ldr	r0, [pc, #160]	@ (800149c <MX_GPIO_Init+0x204>)
 80013fc:	f004 feac 	bl	8006158 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_TIMING1_Pin MUTE_INDICATOR_Pin MUTE_SIGNAL_Pin */
  GPIO_InitStruct.Pin = GPIO_TIMING1_Pin|MUTE_INDICATOR_Pin|MUTE_SIGNAL_Pin;
 8001400:	230b      	movs	r3, #11
 8001402:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001404:	2301      	movs	r3, #1
 8001406:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001408:	2300      	movs	r3, #0
 800140a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800140c:	2300      	movs	r3, #0
 800140e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001410:	f107 031c 	add.w	r3, r7, #28
 8001414:	4619      	mov	r1, r3
 8001416:	4822      	ldr	r0, [pc, #136]	@ (80014a0 <MX_GPIO_Init+0x208>)
 8001418:	f004 fe9e 	bl	8006158 <HAL_GPIO_Init>

  /*Configure GPIO pins : MUTE_BUTTON_Pin BIG_RED_BUTTON_Pin */
  GPIO_InitStruct.Pin = MUTE_BUTTON_Pin|BIG_RED_BUTTON_Pin;
 800141c:	f248 0304 	movw	r3, #32772	@ 0x8004
 8001420:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001422:	2300      	movs	r3, #0
 8001424:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001426:	2300      	movs	r3, #0
 8001428:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800142a:	f107 031c 	add.w	r3, r7, #28
 800142e:	4619      	mov	r1, r3
 8001430:	481b      	ldr	r0, [pc, #108]	@ (80014a0 <MX_GPIO_Init+0x208>)
 8001432:	f004 fe91 	bl	8006158 <HAL_GPIO_Init>

  /*Configure GPIO pins : ACCEL_NCS1_Pin RECORD_INDICATOR_Pin */
  GPIO_InitStruct.Pin = ACCEL_NCS1_Pin|RECORD_INDICATOR_Pin;
 8001436:	f44f 5388 	mov.w	r3, #4352	@ 0x1100
 800143a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800143c:	2301      	movs	r3, #1
 800143e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001440:	2300      	movs	r3, #0
 8001442:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001444:	2300      	movs	r3, #0
 8001446:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001448:	f107 031c 	add.w	r3, r7, #28
 800144c:	4619      	mov	r1, r3
 800144e:	4815      	ldr	r0, [pc, #84]	@ (80014a4 <MX_GPIO_Init+0x20c>)
 8001450:	f004 fe82 	bl	8006158 <HAL_GPIO_Init>

  /*Configure GPIO pins : ACCEL_INTA1_Pin ACCEL_INTB1_Pin SPI3_INT1_Pin SPI3_INT2_Pin */
  GPIO_InitStruct.Pin = ACCEL_INTA1_Pin|ACCEL_INTB1_Pin|SPI3_INT1_Pin|SPI3_INT2_Pin;
 8001454:	f240 3306 	movw	r3, #774	@ 0x306
 8001458:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800145a:	2300      	movs	r3, #0
 800145c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145e:	2300      	movs	r3, #0
 8001460:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001462:	f107 031c 	add.w	r3, r7, #28
 8001466:	4619      	mov	r1, r3
 8001468:	480f      	ldr	r0, [pc, #60]	@ (80014a8 <MX_GPIO_Init+0x210>)
 800146a:	f004 fe75 	bl	8006158 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI3_CS_Pin */
  GPIO_InitStruct.Pin = SPI3_CS_Pin;
 800146e:	2301      	movs	r3, #1
 8001470:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001472:	2301      	movs	r3, #1
 8001474:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001476:	2300      	movs	r3, #0
 8001478:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800147a:	2300      	movs	r3, #0
 800147c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(SPI3_CS_GPIO_Port, &GPIO_InitStruct);
 800147e:	f107 031c 	add.w	r3, r7, #28
 8001482:	4619      	mov	r1, r3
 8001484:	4808      	ldr	r0, [pc, #32]	@ (80014a8 <MX_GPIO_Init+0x210>)
 8001486:	f004 fe67 	bl	8006158 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800148a:	bf00      	nop
 800148c:	3730      	adds	r7, #48	@ 0x30
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	58024400 	.word	0x58024400
 8001498:	58021000 	.word	0x58021000
 800149c:	58020800 	.word	0x58020800
 80014a0:	58020000 	.word	0x58020000
 80014a4:	58020400 	.word	0x58020400
 80014a8:	58020c00 	.word	0x58020c00

080014ac <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b084      	sub	sp, #16
 80014b0:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80014b2:	463b      	mov	r3, r7
 80014b4:	2200      	movs	r2, #0
 80014b6:	601a      	str	r2, [r3, #0]
 80014b8:	605a      	str	r2, [r3, #4]
 80014ba:	609a      	str	r2, [r3, #8]
 80014bc:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80014be:	f002 fa33 	bl	8003928 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80014c2:	2301      	movs	r3, #1
 80014c4:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80014c6:	2300      	movs	r3, #0
 80014c8:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80014ca:	2300      	movs	r3, #0
 80014cc:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80014ce:	231f      	movs	r3, #31
 80014d0:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80014d2:	2387      	movs	r3, #135	@ 0x87
 80014d4:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80014d6:	2300      	movs	r3, #0
 80014d8:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80014da:	2300      	movs	r3, #0
 80014dc:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80014de:	2301      	movs	r3, #1
 80014e0:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80014e2:	2301      	movs	r3, #1
 80014e4:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80014e6:	2300      	movs	r3, #0
 80014e8:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80014ea:	2300      	movs	r3, #0
 80014ec:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80014ee:	463b      	mov	r3, r7
 80014f0:	4618      	mov	r0, r3
 80014f2:	f002 fa51 	bl	8003998 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80014f6:	2004      	movs	r0, #4
 80014f8:	f002 fa2e 	bl	8003958 <HAL_MPU_Enable>

}
 80014fc:	bf00      	nop
 80014fe:	3710      	adds	r7, #16
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}

08001504 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001508:	b672      	cpsid	i
}
 800150a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800150c:	bf00      	nop
 800150e:	e7fd      	b.n	800150c <Error_Handler+0x8>

08001510 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001510:	b480      	push	{r7}
 8001512:	b083      	sub	sp, #12
 8001514:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001516:	4b0a      	ldr	r3, [pc, #40]	@ (8001540 <HAL_MspInit+0x30>)
 8001518:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800151c:	4a08      	ldr	r2, [pc, #32]	@ (8001540 <HAL_MspInit+0x30>)
 800151e:	f043 0302 	orr.w	r3, r3, #2
 8001522:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001526:	4b06      	ldr	r3, [pc, #24]	@ (8001540 <HAL_MspInit+0x30>)
 8001528:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800152c:	f003 0302 	and.w	r3, r3, #2
 8001530:	607b      	str	r3, [r7, #4]
 8001532:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001534:	bf00      	nop
 8001536:	370c      	adds	r7, #12
 8001538:	46bd      	mov	sp, r7
 800153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153e:	4770      	bx	lr
 8001540:	58024400 	.word	0x58024400

08001544 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b08c      	sub	sp, #48	@ 0x30
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800154c:	f107 031c 	add.w	r3, r7, #28
 8001550:	2200      	movs	r2, #0
 8001552:	601a      	str	r2, [r3, #0]
 8001554:	605a      	str	r2, [r3, #4]
 8001556:	609a      	str	r2, [r3, #8]
 8001558:	60da      	str	r2, [r3, #12]
 800155a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a39      	ldr	r2, [pc, #228]	@ (8001648 <HAL_ADC_MspInit+0x104>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d133      	bne.n	80015ce <HAL_ADC_MspInit+0x8a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001566:	4b39      	ldr	r3, [pc, #228]	@ (800164c <HAL_ADC_MspInit+0x108>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	3301      	adds	r3, #1
 800156c:	4a37      	ldr	r2, [pc, #220]	@ (800164c <HAL_ADC_MspInit+0x108>)
 800156e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001570:	4b36      	ldr	r3, [pc, #216]	@ (800164c <HAL_ADC_MspInit+0x108>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	2b01      	cmp	r3, #1
 8001576:	d10e      	bne.n	8001596 <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001578:	4b35      	ldr	r3, [pc, #212]	@ (8001650 <HAL_ADC_MspInit+0x10c>)
 800157a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800157e:	4a34      	ldr	r2, [pc, #208]	@ (8001650 <HAL_ADC_MspInit+0x10c>)
 8001580:	f043 0320 	orr.w	r3, r3, #32
 8001584:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001588:	4b31      	ldr	r3, [pc, #196]	@ (8001650 <HAL_ADC_MspInit+0x10c>)
 800158a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800158e:	f003 0320 	and.w	r3, r3, #32
 8001592:	61bb      	str	r3, [r7, #24]
 8001594:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001596:	4b2e      	ldr	r3, [pc, #184]	@ (8001650 <HAL_ADC_MspInit+0x10c>)
 8001598:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800159c:	4a2c      	ldr	r2, [pc, #176]	@ (8001650 <HAL_ADC_MspInit+0x10c>)
 800159e:	f043 0304 	orr.w	r3, r3, #4
 80015a2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80015a6:	4b2a      	ldr	r3, [pc, #168]	@ (8001650 <HAL_ADC_MspInit+0x10c>)
 80015a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015ac:	f003 0304 	and.w	r3, r3, #4
 80015b0:	617b      	str	r3, [r7, #20]
 80015b2:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80015b4:	2330      	movs	r3, #48	@ 0x30
 80015b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015b8:	2303      	movs	r3, #3
 80015ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015bc:	2300      	movs	r3, #0
 80015be:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015c0:	f107 031c 	add.w	r3, r7, #28
 80015c4:	4619      	mov	r1, r3
 80015c6:	4823      	ldr	r0, [pc, #140]	@ (8001654 <HAL_ADC_MspInit+0x110>)
 80015c8:	f004 fdc6 	bl	8006158 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80015cc:	e037      	b.n	800163e <HAL_ADC_MspInit+0xfa>
  else if(hadc->Instance==ADC2)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4a21      	ldr	r2, [pc, #132]	@ (8001658 <HAL_ADC_MspInit+0x114>)
 80015d4:	4293      	cmp	r3, r2
 80015d6:	d132      	bne.n	800163e <HAL_ADC_MspInit+0xfa>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80015d8:	4b1c      	ldr	r3, [pc, #112]	@ (800164c <HAL_ADC_MspInit+0x108>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	3301      	adds	r3, #1
 80015de:	4a1b      	ldr	r2, [pc, #108]	@ (800164c <HAL_ADC_MspInit+0x108>)
 80015e0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80015e2:	4b1a      	ldr	r3, [pc, #104]	@ (800164c <HAL_ADC_MspInit+0x108>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	2b01      	cmp	r3, #1
 80015e8:	d10e      	bne.n	8001608 <HAL_ADC_MspInit+0xc4>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80015ea:	4b19      	ldr	r3, [pc, #100]	@ (8001650 <HAL_ADC_MspInit+0x10c>)
 80015ec:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80015f0:	4a17      	ldr	r2, [pc, #92]	@ (8001650 <HAL_ADC_MspInit+0x10c>)
 80015f2:	f043 0320 	orr.w	r3, r3, #32
 80015f6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80015fa:	4b15      	ldr	r3, [pc, #84]	@ (8001650 <HAL_ADC_MspInit+0x10c>)
 80015fc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001600:	f003 0320 	and.w	r3, r3, #32
 8001604:	613b      	str	r3, [r7, #16]
 8001606:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001608:	4b11      	ldr	r3, [pc, #68]	@ (8001650 <HAL_ADC_MspInit+0x10c>)
 800160a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800160e:	4a10      	ldr	r2, [pc, #64]	@ (8001650 <HAL_ADC_MspInit+0x10c>)
 8001610:	f043 0301 	orr.w	r3, r3, #1
 8001614:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001618:	4b0d      	ldr	r3, [pc, #52]	@ (8001650 <HAL_ADC_MspInit+0x10c>)
 800161a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800161e:	f003 0301 	and.w	r3, r3, #1
 8001622:	60fb      	str	r3, [r7, #12]
 8001624:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001626:	23c0      	movs	r3, #192	@ 0xc0
 8001628:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800162a:	2303      	movs	r3, #3
 800162c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162e:	2300      	movs	r3, #0
 8001630:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001632:	f107 031c 	add.w	r3, r7, #28
 8001636:	4619      	mov	r1, r3
 8001638:	4808      	ldr	r0, [pc, #32]	@ (800165c <HAL_ADC_MspInit+0x118>)
 800163a:	f004 fd8d 	bl	8006158 <HAL_GPIO_Init>
}
 800163e:	bf00      	nop
 8001640:	3730      	adds	r7, #48	@ 0x30
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	40022000 	.word	0x40022000
 800164c:	240005dc 	.word	0x240005dc
 8001650:	58024400 	.word	0x58024400
 8001654:	58020800 	.word	0x58020800
 8001658:	40022100 	.word	0x40022100
 800165c:	58020000 	.word	0x58020000

08001660 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b08a      	sub	sp, #40	@ 0x28
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001668:	f107 0314 	add.w	r3, r7, #20
 800166c:	2200      	movs	r2, #0
 800166e:	601a      	str	r2, [r3, #0]
 8001670:	605a      	str	r2, [r3, #4]
 8001672:	609a      	str	r2, [r3, #8]
 8001674:	60da      	str	r2, [r3, #12]
 8001676:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a30      	ldr	r2, [pc, #192]	@ (8001740 <HAL_DAC_MspInit+0xe0>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d159      	bne.n	8001736 <HAL_DAC_MspInit+0xd6>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8001682:	4b30      	ldr	r3, [pc, #192]	@ (8001744 <HAL_DAC_MspInit+0xe4>)
 8001684:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001688:	4a2e      	ldr	r2, [pc, #184]	@ (8001744 <HAL_DAC_MspInit+0xe4>)
 800168a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800168e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001692:	4b2c      	ldr	r3, [pc, #176]	@ (8001744 <HAL_DAC_MspInit+0xe4>)
 8001694:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001698:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800169c:	613b      	str	r3, [r7, #16]
 800169e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016a0:	4b28      	ldr	r3, [pc, #160]	@ (8001744 <HAL_DAC_MspInit+0xe4>)
 80016a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016a6:	4a27      	ldr	r2, [pc, #156]	@ (8001744 <HAL_DAC_MspInit+0xe4>)
 80016a8:	f043 0301 	orr.w	r3, r3, #1
 80016ac:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80016b0:	4b24      	ldr	r3, [pc, #144]	@ (8001744 <HAL_DAC_MspInit+0xe4>)
 80016b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016b6:	f003 0301 	and.w	r3, r3, #1
 80016ba:	60fb      	str	r3, [r7, #12]
 80016bc:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80016be:	2310      	movs	r3, #16
 80016c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016c2:	2303      	movs	r3, #3
 80016c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c6:	2300      	movs	r3, #0
 80016c8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016ca:	f107 0314 	add.w	r3, r7, #20
 80016ce:	4619      	mov	r1, r3
 80016d0:	481d      	ldr	r0, [pc, #116]	@ (8001748 <HAL_DAC_MspInit+0xe8>)
 80016d2:	f004 fd41 	bl	8006158 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Stream0;
 80016d6:	4b1d      	ldr	r3, [pc, #116]	@ (800174c <HAL_DAC_MspInit+0xec>)
 80016d8:	4a1d      	ldr	r2, [pc, #116]	@ (8001750 <HAL_DAC_MspInit+0xf0>)
 80016da:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 80016dc:	4b1b      	ldr	r3, [pc, #108]	@ (800174c <HAL_DAC_MspInit+0xec>)
 80016de:	2243      	movs	r2, #67	@ 0x43
 80016e0:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80016e2:	4b1a      	ldr	r3, [pc, #104]	@ (800174c <HAL_DAC_MspInit+0xec>)
 80016e4:	2240      	movs	r2, #64	@ 0x40
 80016e6:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80016e8:	4b18      	ldr	r3, [pc, #96]	@ (800174c <HAL_DAC_MspInit+0xec>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80016ee:	4b17      	ldr	r3, [pc, #92]	@ (800174c <HAL_DAC_MspInit+0xec>)
 80016f0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80016f4:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80016f6:	4b15      	ldr	r3, [pc, #84]	@ (800174c <HAL_DAC_MspInit+0xec>)
 80016f8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80016fc:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80016fe:	4b13      	ldr	r3, [pc, #76]	@ (800174c <HAL_DAC_MspInit+0xec>)
 8001700:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001704:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8001706:	4b11      	ldr	r3, [pc, #68]	@ (800174c <HAL_DAC_MspInit+0xec>)
 8001708:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800170c:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800170e:	4b0f      	ldr	r3, [pc, #60]	@ (800174c <HAL_DAC_MspInit+0xec>)
 8001710:	2200      	movs	r2, #0
 8001712:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001714:	4b0d      	ldr	r3, [pc, #52]	@ (800174c <HAL_DAC_MspInit+0xec>)
 8001716:	2200      	movs	r2, #0
 8001718:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 800171a:	480c      	ldr	r0, [pc, #48]	@ (800174c <HAL_DAC_MspInit+0xec>)
 800171c:	f002 fc48 	bl	8003fb0 <HAL_DMA_Init>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	d001      	beq.n	800172a <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 8001726:	f7ff feed 	bl	8001504 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	4a07      	ldr	r2, [pc, #28]	@ (800174c <HAL_DAC_MspInit+0xec>)
 800172e:	609a      	str	r2, [r3, #8]
 8001730:	4a06      	ldr	r2, [pc, #24]	@ (800174c <HAL_DAC_MspInit+0xec>)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END DAC1_MspInit 1 */

  }

}
 8001736:	bf00      	nop
 8001738:	3728      	adds	r7, #40	@ 0x28
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	40007400 	.word	0x40007400
 8001744:	58024400 	.word	0x58024400
 8001748:	58020000 	.word	0x58020000
 800174c:	24000120 	.word	0x24000120
 8001750:	40020010 	.word	0x40020010

08001754 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b0b8      	sub	sp, #224	@ 0xe0
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800175c:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8001760:	2200      	movs	r2, #0
 8001762:	601a      	str	r2, [r3, #0]
 8001764:	605a      	str	r2, [r3, #4]
 8001766:	609a      	str	r2, [r3, #8]
 8001768:	60da      	str	r2, [r3, #12]
 800176a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800176c:	f107 0310 	add.w	r3, r7, #16
 8001770:	22b8      	movs	r2, #184	@ 0xb8
 8001772:	2100      	movs	r1, #0
 8001774:	4618      	mov	r0, r3
 8001776:	f00a ffd1 	bl	800c71c <memset>
  if(hi2c->Instance==I2C2)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4a27      	ldr	r2, [pc, #156]	@ (800181c <HAL_I2C_MspInit+0xc8>)
 8001780:	4293      	cmp	r3, r2
 8001782:	d146      	bne.n	8001812 <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001784:	f04f 0208 	mov.w	r2, #8
 8001788:	f04f 0300 	mov.w	r3, #0
 800178c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8001790:	2300      	movs	r3, #0
 8001792:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001796:	f107 0310 	add.w	r3, r7, #16
 800179a:	4618      	mov	r0, r3
 800179c:	f005 ff72 	bl	8007684 <HAL_RCCEx_PeriphCLKConfig>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d001      	beq.n	80017aa <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 80017a6:	f7ff fead 	bl	8001504 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017aa:	4b1d      	ldr	r3, [pc, #116]	@ (8001820 <HAL_I2C_MspInit+0xcc>)
 80017ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017b0:	4a1b      	ldr	r2, [pc, #108]	@ (8001820 <HAL_I2C_MspInit+0xcc>)
 80017b2:	f043 0302 	orr.w	r3, r3, #2
 80017b6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80017ba:	4b19      	ldr	r3, [pc, #100]	@ (8001820 <HAL_I2C_MspInit+0xcc>)
 80017bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017c0:	f003 0302 	and.w	r3, r3, #2
 80017c4:	60fb      	str	r3, [r7, #12]
 80017c6:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80017c8:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80017cc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017d0:	2312      	movs	r3, #18
 80017d2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d6:	2300      	movs	r3, #0
 80017d8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017dc:	2300      	movs	r3, #0
 80017de:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80017e2:	2304      	movs	r3, #4
 80017e4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017e8:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80017ec:	4619      	mov	r1, r3
 80017ee:	480d      	ldr	r0, [pc, #52]	@ (8001824 <HAL_I2C_MspInit+0xd0>)
 80017f0:	f004 fcb2 	bl	8006158 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80017f4:	4b0a      	ldr	r3, [pc, #40]	@ (8001820 <HAL_I2C_MspInit+0xcc>)
 80017f6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80017fa:	4a09      	ldr	r2, [pc, #36]	@ (8001820 <HAL_I2C_MspInit+0xcc>)
 80017fc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001800:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001804:	4b06      	ldr	r3, [pc, #24]	@ (8001820 <HAL_I2C_MspInit+0xcc>)
 8001806:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800180a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800180e:	60bb      	str	r3, [r7, #8]
 8001810:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 8001812:	bf00      	nop
 8001814:	37e0      	adds	r7, #224	@ 0xe0
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	40005800 	.word	0x40005800
 8001820:	58024400 	.word	0x58024400
 8001824:	58020400 	.word	0x58020400

08001828 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b0bc      	sub	sp, #240	@ 0xf0
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001830:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001834:	2200      	movs	r2, #0
 8001836:	601a      	str	r2, [r3, #0]
 8001838:	605a      	str	r2, [r3, #4]
 800183a:	609a      	str	r2, [r3, #8]
 800183c:	60da      	str	r2, [r3, #12]
 800183e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001840:	f107 0320 	add.w	r3, r7, #32
 8001844:	22b8      	movs	r2, #184	@ 0xb8
 8001846:	2100      	movs	r1, #0
 8001848:	4618      	mov	r0, r3
 800184a:	f00a ff67 	bl	800c71c <memset>
  if(hspi->Instance==SPI2)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4a72      	ldr	r2, [pc, #456]	@ (8001a1c <HAL_SPI_MspInit+0x1f4>)
 8001854:	4293      	cmp	r3, r2
 8001856:	d146      	bne.n	80018e6 <HAL_SPI_MspInit+0xbe>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8001858:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800185c:	f04f 0300 	mov.w	r3, #0
 8001860:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001864:	2300      	movs	r3, #0
 8001866:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001868:	f107 0320 	add.w	r3, r7, #32
 800186c:	4618      	mov	r0, r3
 800186e:	f005 ff09 	bl	8007684 <HAL_RCCEx_PeriphCLKConfig>
 8001872:	4603      	mov	r3, r0
 8001874:	2b00      	cmp	r3, #0
 8001876:	d001      	beq.n	800187c <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8001878:	f7ff fe44 	bl	8001504 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800187c:	4b68      	ldr	r3, [pc, #416]	@ (8001a20 <HAL_SPI_MspInit+0x1f8>)
 800187e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001882:	4a67      	ldr	r2, [pc, #412]	@ (8001a20 <HAL_SPI_MspInit+0x1f8>)
 8001884:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001888:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800188c:	4b64      	ldr	r3, [pc, #400]	@ (8001a20 <HAL_SPI_MspInit+0x1f8>)
 800188e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001892:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001896:	61fb      	str	r3, [r7, #28]
 8001898:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800189a:	4b61      	ldr	r3, [pc, #388]	@ (8001a20 <HAL_SPI_MspInit+0x1f8>)
 800189c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018a0:	4a5f      	ldr	r2, [pc, #380]	@ (8001a20 <HAL_SPI_MspInit+0x1f8>)
 80018a2:	f043 0302 	orr.w	r3, r3, #2
 80018a6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80018aa:	4b5d      	ldr	r3, [pc, #372]	@ (8001a20 <HAL_SPI_MspInit+0x1f8>)
 80018ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018b0:	f003 0302 	and.w	r3, r3, #2
 80018b4:	61bb      	str	r3, [r7, #24]
 80018b6:	69bb      	ldr	r3, [r7, #24]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = ACCEL_SCK1_Pin|ACCEL_MISO1_Pin|ACCEL_MOSI1_Pin;
 80018b8:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 80018bc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018c0:	2302      	movs	r3, #2
 80018c2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c6:	2300      	movs	r3, #0
 80018c8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018cc:	2300      	movs	r3, #0
 80018ce:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80018d2:	2305      	movs	r3, #5
 80018d4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018d8:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80018dc:	4619      	mov	r1, r3
 80018de:	4851      	ldr	r0, [pc, #324]	@ (8001a24 <HAL_SPI_MspInit+0x1fc>)
 80018e0:	f004 fc3a 	bl	8006158 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 80018e4:	e096      	b.n	8001a14 <HAL_SPI_MspInit+0x1ec>
  else if(hspi->Instance==SPI3)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4a4f      	ldr	r2, [pc, #316]	@ (8001a28 <HAL_SPI_MspInit+0x200>)
 80018ec:	4293      	cmp	r3, r2
 80018ee:	d146      	bne.n	800197e <HAL_SPI_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 80018f0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80018f4:	f04f 0300 	mov.w	r3, #0
 80018f8:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80018fc:	2300      	movs	r3, #0
 80018fe:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001900:	f107 0320 	add.w	r3, r7, #32
 8001904:	4618      	mov	r0, r3
 8001906:	f005 febd 	bl	8007684 <HAL_RCCEx_PeriphCLKConfig>
 800190a:	4603      	mov	r3, r0
 800190c:	2b00      	cmp	r3, #0
 800190e:	d001      	beq.n	8001914 <HAL_SPI_MspInit+0xec>
      Error_Handler();
 8001910:	f7ff fdf8 	bl	8001504 <Error_Handler>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001914:	4b42      	ldr	r3, [pc, #264]	@ (8001a20 <HAL_SPI_MspInit+0x1f8>)
 8001916:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800191a:	4a41      	ldr	r2, [pc, #260]	@ (8001a20 <HAL_SPI_MspInit+0x1f8>)
 800191c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001920:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001924:	4b3e      	ldr	r3, [pc, #248]	@ (8001a20 <HAL_SPI_MspInit+0x1f8>)
 8001926:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800192a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800192e:	617b      	str	r3, [r7, #20]
 8001930:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001932:	4b3b      	ldr	r3, [pc, #236]	@ (8001a20 <HAL_SPI_MspInit+0x1f8>)
 8001934:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001938:	4a39      	ldr	r2, [pc, #228]	@ (8001a20 <HAL_SPI_MspInit+0x1f8>)
 800193a:	f043 0304 	orr.w	r3, r3, #4
 800193e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001942:	4b37      	ldr	r3, [pc, #220]	@ (8001a20 <HAL_SPI_MspInit+0x1f8>)
 8001944:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001948:	f003 0304 	and.w	r3, r3, #4
 800194c:	613b      	str	r3, [r7, #16]
 800194e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001950:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001954:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001958:	2302      	movs	r3, #2
 800195a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800195e:	2300      	movs	r3, #0
 8001960:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001964:	2300      	movs	r3, #0
 8001966:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800196a:	2306      	movs	r3, #6
 800196c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001970:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001974:	4619      	mov	r1, r3
 8001976:	482d      	ldr	r0, [pc, #180]	@ (8001a2c <HAL_SPI_MspInit+0x204>)
 8001978:	f004 fbee 	bl	8006158 <HAL_GPIO_Init>
}
 800197c:	e04a      	b.n	8001a14 <HAL_SPI_MspInit+0x1ec>
  else if(hspi->Instance==SPI4)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4a2b      	ldr	r2, [pc, #172]	@ (8001a30 <HAL_SPI_MspInit+0x208>)
 8001984:	4293      	cmp	r3, r2
 8001986:	d145      	bne.n	8001a14 <HAL_SPI_MspInit+0x1ec>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 8001988:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800198c:	f04f 0300 	mov.w	r3, #0
 8001990:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 8001994:	2300      	movs	r3, #0
 8001996:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800199a:	f107 0320 	add.w	r3, r7, #32
 800199e:	4618      	mov	r0, r3
 80019a0:	f005 fe70 	bl	8007684 <HAL_RCCEx_PeriphCLKConfig>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d001      	beq.n	80019ae <HAL_SPI_MspInit+0x186>
      Error_Handler();
 80019aa:	f7ff fdab 	bl	8001504 <Error_Handler>
    __HAL_RCC_SPI4_CLK_ENABLE();
 80019ae:	4b1c      	ldr	r3, [pc, #112]	@ (8001a20 <HAL_SPI_MspInit+0x1f8>)
 80019b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80019b4:	4a1a      	ldr	r2, [pc, #104]	@ (8001a20 <HAL_SPI_MspInit+0x1f8>)
 80019b6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80019ba:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80019be:	4b18      	ldr	r3, [pc, #96]	@ (8001a20 <HAL_SPI_MspInit+0x1f8>)
 80019c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80019c4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80019c8:	60fb      	str	r3, [r7, #12]
 80019ca:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80019cc:	4b14      	ldr	r3, [pc, #80]	@ (8001a20 <HAL_SPI_MspInit+0x1f8>)
 80019ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80019d2:	4a13      	ldr	r2, [pc, #76]	@ (8001a20 <HAL_SPI_MspInit+0x1f8>)
 80019d4:	f043 0310 	orr.w	r3, r3, #16
 80019d8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80019dc:	4b10      	ldr	r3, [pc, #64]	@ (8001a20 <HAL_SPI_MspInit+0x1f8>)
 80019de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80019e2:	f003 0310 	and.w	r3, r3, #16
 80019e6:	60bb      	str	r3, [r7, #8]
 80019e8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 80019ea:	2364      	movs	r3, #100	@ 0x64
 80019ec:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019f0:	2302      	movs	r3, #2
 80019f2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f6:	2300      	movs	r3, #0
 80019f8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019fc:	2300      	movs	r3, #0
 80019fe:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8001a02:	2305      	movs	r3, #5
 8001a04:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a08:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	4809      	ldr	r0, [pc, #36]	@ (8001a34 <HAL_SPI_MspInit+0x20c>)
 8001a10:	f004 fba2 	bl	8006158 <HAL_GPIO_Init>
}
 8001a14:	bf00      	nop
 8001a16:	37f0      	adds	r7, #240	@ 0xf0
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	40003800 	.word	0x40003800
 8001a20:	58024400 	.word	0x58024400
 8001a24:	58020400 	.word	0x58020400
 8001a28:	40003c00 	.word	0x40003c00
 8001a2c:	58020800 	.word	0x58020800
 8001a30:	40013400 	.word	0x40013400
 8001a34:	58021000 	.word	0x58021000

08001a38 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b087      	sub	sp, #28
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a2b      	ldr	r2, [pc, #172]	@ (8001af4 <HAL_TIM_Base_MspInit+0xbc>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d10f      	bne.n	8001a6a <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001a4a:	4b2b      	ldr	r3, [pc, #172]	@ (8001af8 <HAL_TIM_Base_MspInit+0xc0>)
 8001a4c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001a50:	4a29      	ldr	r2, [pc, #164]	@ (8001af8 <HAL_TIM_Base_MspInit+0xc0>)
 8001a52:	f043 0301 	orr.w	r3, r3, #1
 8001a56:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001a5a:	4b27      	ldr	r3, [pc, #156]	@ (8001af8 <HAL_TIM_Base_MspInit+0xc0>)
 8001a5c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001a60:	f003 0301 	and.w	r3, r3, #1
 8001a64:	617b      	str	r3, [r7, #20]
 8001a66:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001a68:	e03d      	b.n	8001ae6 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM2)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001a72:	d10f      	bne.n	8001a94 <HAL_TIM_Base_MspInit+0x5c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a74:	4b20      	ldr	r3, [pc, #128]	@ (8001af8 <HAL_TIM_Base_MspInit+0xc0>)
 8001a76:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001a7a:	4a1f      	ldr	r2, [pc, #124]	@ (8001af8 <HAL_TIM_Base_MspInit+0xc0>)
 8001a7c:	f043 0301 	orr.w	r3, r3, #1
 8001a80:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001a84:	4b1c      	ldr	r3, [pc, #112]	@ (8001af8 <HAL_TIM_Base_MspInit+0xc0>)
 8001a86:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001a8a:	f003 0301 	and.w	r3, r3, #1
 8001a8e:	613b      	str	r3, [r7, #16]
 8001a90:	693b      	ldr	r3, [r7, #16]
}
 8001a92:	e028      	b.n	8001ae6 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM3)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a18      	ldr	r2, [pc, #96]	@ (8001afc <HAL_TIM_Base_MspInit+0xc4>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d10f      	bne.n	8001abe <HAL_TIM_Base_MspInit+0x86>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001a9e:	4b16      	ldr	r3, [pc, #88]	@ (8001af8 <HAL_TIM_Base_MspInit+0xc0>)
 8001aa0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001aa4:	4a14      	ldr	r2, [pc, #80]	@ (8001af8 <HAL_TIM_Base_MspInit+0xc0>)
 8001aa6:	f043 0302 	orr.w	r3, r3, #2
 8001aaa:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001aae:	4b12      	ldr	r3, [pc, #72]	@ (8001af8 <HAL_TIM_Base_MspInit+0xc0>)
 8001ab0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001ab4:	f003 0302 	and.w	r3, r3, #2
 8001ab8:	60fb      	str	r3, [r7, #12]
 8001aba:	68fb      	ldr	r3, [r7, #12]
}
 8001abc:	e013      	b.n	8001ae6 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM4)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4a0f      	ldr	r2, [pc, #60]	@ (8001b00 <HAL_TIM_Base_MspInit+0xc8>)
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	d10e      	bne.n	8001ae6 <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001ac8:	4b0b      	ldr	r3, [pc, #44]	@ (8001af8 <HAL_TIM_Base_MspInit+0xc0>)
 8001aca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001ace:	4a0a      	ldr	r2, [pc, #40]	@ (8001af8 <HAL_TIM_Base_MspInit+0xc0>)
 8001ad0:	f043 0304 	orr.w	r3, r3, #4
 8001ad4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001ad8:	4b07      	ldr	r3, [pc, #28]	@ (8001af8 <HAL_TIM_Base_MspInit+0xc0>)
 8001ada:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001ade:	f003 0304 	and.w	r3, r3, #4
 8001ae2:	60bb      	str	r3, [r7, #8]
 8001ae4:	68bb      	ldr	r3, [r7, #8]
}
 8001ae6:	bf00      	nop
 8001ae8:	371c      	adds	r7, #28
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr
 8001af2:	bf00      	nop
 8001af4:	40010000 	.word	0x40010000
 8001af8:	58024400 	.word	0x58024400
 8001afc:	40000400 	.word	0x40000400
 8001b00:	40000800 	.word	0x40000800

08001b04 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b08a      	sub	sp, #40	@ 0x28
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b0c:	f107 0314 	add.w	r3, r7, #20
 8001b10:	2200      	movs	r2, #0
 8001b12:	601a      	str	r2, [r3, #0]
 8001b14:	605a      	str	r2, [r3, #4]
 8001b16:	609a      	str	r2, [r3, #8]
 8001b18:	60da      	str	r2, [r3, #12]
 8001b1a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a26      	ldr	r2, [pc, #152]	@ (8001bbc <HAL_TIM_MspPostInit+0xb8>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d120      	bne.n	8001b68 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b26:	4b26      	ldr	r3, [pc, #152]	@ (8001bc0 <HAL_TIM_MspPostInit+0xbc>)
 8001b28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b2c:	4a24      	ldr	r2, [pc, #144]	@ (8001bc0 <HAL_TIM_MspPostInit+0xbc>)
 8001b2e:	f043 0304 	orr.w	r3, r3, #4
 8001b32:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001b36:	4b22      	ldr	r3, [pc, #136]	@ (8001bc0 <HAL_TIM_MspPostInit+0xbc>)
 8001b38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b3c:	f003 0304 	and.w	r3, r3, #4
 8001b40:	613b      	str	r3, [r7, #16]
 8001b42:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = LED_STROBE_1_Pin|LED_STROBE_2_Pin|LED_STROBE_3_Pin;
 8001b44:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 8001b48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b4a:	2302      	movs	r3, #2
 8001b4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b52:	2300      	movs	r3, #0
 8001b54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001b56:	2302      	movs	r3, #2
 8001b58:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b5a:	f107 0314 	add.w	r3, r7, #20
 8001b5e:	4619      	mov	r1, r3
 8001b60:	4818      	ldr	r0, [pc, #96]	@ (8001bc4 <HAL_TIM_MspPostInit+0xc0>)
 8001b62:	f004 faf9 	bl	8006158 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001b66:	e024      	b.n	8001bb2 <HAL_TIM_MspPostInit+0xae>
  else if(htim->Instance==TIM4)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a16      	ldr	r2, [pc, #88]	@ (8001bc8 <HAL_TIM_MspPostInit+0xc4>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d11f      	bne.n	8001bb2 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b72:	4b13      	ldr	r3, [pc, #76]	@ (8001bc0 <HAL_TIM_MspPostInit+0xbc>)
 8001b74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b78:	4a11      	ldr	r2, [pc, #68]	@ (8001bc0 <HAL_TIM_MspPostInit+0xbc>)
 8001b7a:	f043 0308 	orr.w	r3, r3, #8
 8001b7e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001b82:	4b0f      	ldr	r3, [pc, #60]	@ (8001bc0 <HAL_TIM_MspPostInit+0xbc>)
 8001b84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b88:	f003 0308 	and.w	r3, r3, #8
 8001b8c:	60fb      	str	r3, [r7, #12]
 8001b8e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LED_ACCEL_Pin;
 8001b90:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b96:	2302      	movs	r3, #2
 8001b98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001ba2:	2302      	movs	r3, #2
 8001ba4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(LED_ACCEL_GPIO_Port, &GPIO_InitStruct);
 8001ba6:	f107 0314 	add.w	r3, r7, #20
 8001baa:	4619      	mov	r1, r3
 8001bac:	4807      	ldr	r0, [pc, #28]	@ (8001bcc <HAL_TIM_MspPostInit+0xc8>)
 8001bae:	f004 fad3 	bl	8006158 <HAL_GPIO_Init>
}
 8001bb2:	bf00      	nop
 8001bb4:	3728      	adds	r7, #40	@ 0x28
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	40000400 	.word	0x40000400
 8001bc0:	58024400 	.word	0x58024400
 8001bc4:	58020800 	.word	0x58020800
 8001bc8:	40000800 	.word	0x40000800
 8001bcc:	58020c00 	.word	0x58020c00

08001bd0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b0ba      	sub	sp, #232	@ 0xe8
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bd8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001bdc:	2200      	movs	r2, #0
 8001bde:	601a      	str	r2, [r3, #0]
 8001be0:	605a      	str	r2, [r3, #4]
 8001be2:	609a      	str	r2, [r3, #8]
 8001be4:	60da      	str	r2, [r3, #12]
 8001be6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001be8:	f107 0318 	add.w	r3, r7, #24
 8001bec:	22b8      	movs	r2, #184	@ 0xb8
 8001bee:	2100      	movs	r1, #0
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f00a fd93 	bl	800c71c <memset>
  if(huart->Instance==UART7)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4a4d      	ldr	r2, [pc, #308]	@ (8001d30 <HAL_UART_MspInit+0x160>)
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d147      	bne.n	8001c90 <HAL_UART_MspInit+0xc0>

  /* USER CODE END UART7_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8001c00:	f04f 0202 	mov.w	r2, #2
 8001c04:	f04f 0300 	mov.w	r3, #0
 8001c08:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c12:	f107 0318 	add.w	r3, r7, #24
 8001c16:	4618      	mov	r0, r3
 8001c18:	f005 fd34 	bl	8007684 <HAL_RCCEx_PeriphCLKConfig>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d001      	beq.n	8001c26 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001c22:	f7ff fc6f 	bl	8001504 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8001c26:	4b43      	ldr	r3, [pc, #268]	@ (8001d34 <HAL_UART_MspInit+0x164>)
 8001c28:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001c2c:	4a41      	ldr	r2, [pc, #260]	@ (8001d34 <HAL_UART_MspInit+0x164>)
 8001c2e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001c32:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001c36:	4b3f      	ldr	r3, [pc, #252]	@ (8001d34 <HAL_UART_MspInit+0x164>)
 8001c38:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001c3c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8001c40:	617b      	str	r3, [r7, #20]
 8001c42:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c44:	4b3b      	ldr	r3, [pc, #236]	@ (8001d34 <HAL_UART_MspInit+0x164>)
 8001c46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c4a:	4a3a      	ldr	r2, [pc, #232]	@ (8001d34 <HAL_UART_MspInit+0x164>)
 8001c4c:	f043 0310 	orr.w	r3, r3, #16
 8001c50:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001c54:	4b37      	ldr	r3, [pc, #220]	@ (8001d34 <HAL_UART_MspInit+0x164>)
 8001c56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c5a:	f003 0310 	and.w	r3, r3, #16
 8001c5e:	613b      	str	r3, [r7, #16]
 8001c60:	693b      	ldr	r3, [r7, #16]
    PE7     ------> UART7_RX
    PE8     ------> UART7_TX
    PE9     ------> UART7_RTS
    PE10     ------> UART7_CTS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8001c62:	f44f 63f0 	mov.w	r3, #1920	@ 0x780
 8001c66:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c6a:	2302      	movs	r3, #2
 8001c6c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c70:	2300      	movs	r3, #0
 8001c72:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c76:	2300      	movs	r3, #0
 8001c78:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 8001c7c:	2307      	movs	r3, #7
 8001c7e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c82:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001c86:	4619      	mov	r1, r3
 8001c88:	482b      	ldr	r0, [pc, #172]	@ (8001d38 <HAL_UART_MspInit+0x168>)
 8001c8a:	f004 fa65 	bl	8006158 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001c8e:	e04a      	b.n	8001d26 <HAL_UART_MspInit+0x156>
  else if(huart->Instance==USART1)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a29      	ldr	r2, [pc, #164]	@ (8001d3c <HAL_UART_MspInit+0x16c>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d145      	bne.n	8001d26 <HAL_UART_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001c9a:	f04f 0201 	mov.w	r2, #1
 8001c9e:	f04f 0300 	mov.w	r3, #0
 8001ca2:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001cac:	f107 0318 	add.w	r3, r7, #24
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f005 fce7 	bl	8007684 <HAL_RCCEx_PeriphCLKConfig>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d001      	beq.n	8001cc0 <HAL_UART_MspInit+0xf0>
      Error_Handler();
 8001cbc:	f7ff fc22 	bl	8001504 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001cc0:	4b1c      	ldr	r3, [pc, #112]	@ (8001d34 <HAL_UART_MspInit+0x164>)
 8001cc2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001cc6:	4a1b      	ldr	r2, [pc, #108]	@ (8001d34 <HAL_UART_MspInit+0x164>)
 8001cc8:	f043 0310 	orr.w	r3, r3, #16
 8001ccc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001cd0:	4b18      	ldr	r3, [pc, #96]	@ (8001d34 <HAL_UART_MspInit+0x164>)
 8001cd2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001cd6:	f003 0310 	and.w	r3, r3, #16
 8001cda:	60fb      	str	r3, [r7, #12]
 8001cdc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cde:	4b15      	ldr	r3, [pc, #84]	@ (8001d34 <HAL_UART_MspInit+0x164>)
 8001ce0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ce4:	4a13      	ldr	r2, [pc, #76]	@ (8001d34 <HAL_UART_MspInit+0x164>)
 8001ce6:	f043 0302 	orr.w	r3, r3, #2
 8001cea:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001cee:	4b11      	ldr	r3, [pc, #68]	@ (8001d34 <HAL_UART_MspInit+0x164>)
 8001cf0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001cf4:	f003 0302 	and.w	r3, r3, #2
 8001cf8:	60bb      	str	r3, [r7, #8]
 8001cfa:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8001cfc:	23c0      	movs	r3, #192	@ 0xc0
 8001cfe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d02:	2302      	movs	r3, #2
 8001d04:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001d14:	2307      	movs	r3, #7
 8001d16:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d1a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001d1e:	4619      	mov	r1, r3
 8001d20:	4807      	ldr	r0, [pc, #28]	@ (8001d40 <HAL_UART_MspInit+0x170>)
 8001d22:	f004 fa19 	bl	8006158 <HAL_GPIO_Init>
}
 8001d26:	bf00      	nop
 8001d28:	37e8      	adds	r7, #232	@ 0xe8
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	40007800 	.word	0x40007800
 8001d34:	58024400 	.word	0x58024400
 8001d38:	58021000 	.word	0x58021000
 8001d3c:	40011000 	.word	0x40011000
 8001d40:	58020400 	.word	0x58020400

08001d44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d44:	b480      	push	{r7}
 8001d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001d48:	bf00      	nop
 8001d4a:	e7fd      	b.n	8001d48 <NMI_Handler+0x4>

08001d4c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d50:	bf00      	nop
 8001d52:	e7fd      	b.n	8001d50 <HardFault_Handler+0x4>

08001d54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d54:	b480      	push	{r7}
 8001d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d58:	bf00      	nop
 8001d5a:	e7fd      	b.n	8001d58 <MemManage_Handler+0x4>

08001d5c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d60:	bf00      	nop
 8001d62:	e7fd      	b.n	8001d60 <BusFault_Handler+0x4>

08001d64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d68:	bf00      	nop
 8001d6a:	e7fd      	b.n	8001d68 <UsageFault_Handler+0x4>

08001d6c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d70:	bf00      	nop
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr

08001d7a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d7a:	b480      	push	{r7}
 8001d7c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d7e:	bf00      	nop
 8001d80:	46bd      	mov	sp, r7
 8001d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d86:	4770      	bx	lr

08001d88 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d8c:	bf00      	nop
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr

08001d96 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d96:	b580      	push	{r7, lr}
 8001d98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d9a:	f000 f921 	bl	8001fe0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d9e:	bf00      	nop
 8001da0:	bd80      	pop	{r7, pc}
	...

08001da4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8001da8:	4802      	ldr	r0, [pc, #8]	@ (8001db4 <DMA1_Stream0_IRQHandler+0x10>)
 8001daa:	f002 fec3 	bl	8004b34 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001dae:	bf00      	nop
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	24000120 	.word	0x24000120

08001db8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001db8:	b480      	push	{r7}
 8001dba:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001dbc:	4b32      	ldr	r3, [pc, #200]	@ (8001e88 <SystemInit+0xd0>)
 8001dbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001dc2:	4a31      	ldr	r2, [pc, #196]	@ (8001e88 <SystemInit+0xd0>)
 8001dc4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001dc8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001dcc:	4b2f      	ldr	r3, [pc, #188]	@ (8001e8c <SystemInit+0xd4>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f003 030f 	and.w	r3, r3, #15
 8001dd4:	2b06      	cmp	r3, #6
 8001dd6:	d807      	bhi.n	8001de8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001dd8:	4b2c      	ldr	r3, [pc, #176]	@ (8001e8c <SystemInit+0xd4>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f023 030f 	bic.w	r3, r3, #15
 8001de0:	4a2a      	ldr	r2, [pc, #168]	@ (8001e8c <SystemInit+0xd4>)
 8001de2:	f043 0307 	orr.w	r3, r3, #7
 8001de6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001de8:	4b29      	ldr	r3, [pc, #164]	@ (8001e90 <SystemInit+0xd8>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a28      	ldr	r2, [pc, #160]	@ (8001e90 <SystemInit+0xd8>)
 8001dee:	f043 0301 	orr.w	r3, r3, #1
 8001df2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001df4:	4b26      	ldr	r3, [pc, #152]	@ (8001e90 <SystemInit+0xd8>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001dfa:	4b25      	ldr	r3, [pc, #148]	@ (8001e90 <SystemInit+0xd8>)
 8001dfc:	681a      	ldr	r2, [r3, #0]
 8001dfe:	4924      	ldr	r1, [pc, #144]	@ (8001e90 <SystemInit+0xd8>)
 8001e00:	4b24      	ldr	r3, [pc, #144]	@ (8001e94 <SystemInit+0xdc>)
 8001e02:	4013      	ands	r3, r2
 8001e04:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001e06:	4b21      	ldr	r3, [pc, #132]	@ (8001e8c <SystemInit+0xd4>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f003 0308 	and.w	r3, r3, #8
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d007      	beq.n	8001e22 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001e12:	4b1e      	ldr	r3, [pc, #120]	@ (8001e8c <SystemInit+0xd4>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f023 030f 	bic.w	r3, r3, #15
 8001e1a:	4a1c      	ldr	r2, [pc, #112]	@ (8001e8c <SystemInit+0xd4>)
 8001e1c:	f043 0307 	orr.w	r3, r3, #7
 8001e20:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001e22:	4b1b      	ldr	r3, [pc, #108]	@ (8001e90 <SystemInit+0xd8>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001e28:	4b19      	ldr	r3, [pc, #100]	@ (8001e90 <SystemInit+0xd8>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001e2e:	4b18      	ldr	r3, [pc, #96]	@ (8001e90 <SystemInit+0xd8>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001e34:	4b16      	ldr	r3, [pc, #88]	@ (8001e90 <SystemInit+0xd8>)
 8001e36:	4a18      	ldr	r2, [pc, #96]	@ (8001e98 <SystemInit+0xe0>)
 8001e38:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001e3a:	4b15      	ldr	r3, [pc, #84]	@ (8001e90 <SystemInit+0xd8>)
 8001e3c:	4a17      	ldr	r2, [pc, #92]	@ (8001e9c <SystemInit+0xe4>)
 8001e3e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001e40:	4b13      	ldr	r3, [pc, #76]	@ (8001e90 <SystemInit+0xd8>)
 8001e42:	4a17      	ldr	r2, [pc, #92]	@ (8001ea0 <SystemInit+0xe8>)
 8001e44:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001e46:	4b12      	ldr	r3, [pc, #72]	@ (8001e90 <SystemInit+0xd8>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001e4c:	4b10      	ldr	r3, [pc, #64]	@ (8001e90 <SystemInit+0xd8>)
 8001e4e:	4a14      	ldr	r2, [pc, #80]	@ (8001ea0 <SystemInit+0xe8>)
 8001e50:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001e52:	4b0f      	ldr	r3, [pc, #60]	@ (8001e90 <SystemInit+0xd8>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001e58:	4b0d      	ldr	r3, [pc, #52]	@ (8001e90 <SystemInit+0xd8>)
 8001e5a:	4a11      	ldr	r2, [pc, #68]	@ (8001ea0 <SystemInit+0xe8>)
 8001e5c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001e5e:	4b0c      	ldr	r3, [pc, #48]	@ (8001e90 <SystemInit+0xd8>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001e64:	4b0a      	ldr	r3, [pc, #40]	@ (8001e90 <SystemInit+0xd8>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a09      	ldr	r2, [pc, #36]	@ (8001e90 <SystemInit+0xd8>)
 8001e6a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001e6e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001e70:	4b07      	ldr	r3, [pc, #28]	@ (8001e90 <SystemInit+0xd8>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001e76:	4b0b      	ldr	r3, [pc, #44]	@ (8001ea4 <SystemInit+0xec>)
 8001e78:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001e7c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001e7e:	bf00      	nop
 8001e80:	46bd      	mov	sp, r7
 8001e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e86:	4770      	bx	lr
 8001e88:	e000ed00 	.word	0xe000ed00
 8001e8c:	52002000 	.word	0x52002000
 8001e90:	58024400 	.word	0x58024400
 8001e94:	eaf6ed7f 	.word	0xeaf6ed7f
 8001e98:	02020200 	.word	0x02020200
 8001e9c:	01ff0000 	.word	0x01ff0000
 8001ea0:	01010280 	.word	0x01010280
 8001ea4:	52004000 	.word	0x52004000

08001ea8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001ea8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001ee0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001eac:	f7ff ff84 	bl	8001db8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001eb0:	480c      	ldr	r0, [pc, #48]	@ (8001ee4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001eb2:	490d      	ldr	r1, [pc, #52]	@ (8001ee8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001eb4:	4a0d      	ldr	r2, [pc, #52]	@ (8001eec <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001eb6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001eb8:	e002      	b.n	8001ec0 <LoopCopyDataInit>

08001eba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001eba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ebc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ebe:	3304      	adds	r3, #4

08001ec0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ec0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ec2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ec4:	d3f9      	bcc.n	8001eba <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ec6:	4a0a      	ldr	r2, [pc, #40]	@ (8001ef0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001ec8:	4c0a      	ldr	r4, [pc, #40]	@ (8001ef4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001eca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ecc:	e001      	b.n	8001ed2 <LoopFillZerobss>

08001ece <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ece:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ed0:	3204      	adds	r2, #4

08001ed2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ed2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ed4:	d3fb      	bcc.n	8001ece <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ed6:	f00a fc29 	bl	800c72c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001eda:	f7fe fbe1 	bl	80006a0 <main>
  bx  lr
 8001ede:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001ee0:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8001ee4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001ee8:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8001eec:	0800d550 	.word	0x0800d550
  ldr r2, =_sbss
 8001ef0:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8001ef4:	240005e4 	.word	0x240005e4

08001ef8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ef8:	e7fe      	b.n	8001ef8 <ADC3_IRQHandler>
	...

08001efc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b082      	sub	sp, #8
 8001f00:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f02:	2003      	movs	r0, #3
 8001f04:	f001 fcd0 	bl	80038a8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001f08:	f005 f9e6 	bl	80072d8 <HAL_RCC_GetSysClockFreq>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	4b15      	ldr	r3, [pc, #84]	@ (8001f64 <HAL_Init+0x68>)
 8001f10:	699b      	ldr	r3, [r3, #24]
 8001f12:	0a1b      	lsrs	r3, r3, #8
 8001f14:	f003 030f 	and.w	r3, r3, #15
 8001f18:	4913      	ldr	r1, [pc, #76]	@ (8001f68 <HAL_Init+0x6c>)
 8001f1a:	5ccb      	ldrb	r3, [r1, r3]
 8001f1c:	f003 031f 	and.w	r3, r3, #31
 8001f20:	fa22 f303 	lsr.w	r3, r2, r3
 8001f24:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001f26:	4b0f      	ldr	r3, [pc, #60]	@ (8001f64 <HAL_Init+0x68>)
 8001f28:	699b      	ldr	r3, [r3, #24]
 8001f2a:	f003 030f 	and.w	r3, r3, #15
 8001f2e:	4a0e      	ldr	r2, [pc, #56]	@ (8001f68 <HAL_Init+0x6c>)
 8001f30:	5cd3      	ldrb	r3, [r2, r3]
 8001f32:	f003 031f 	and.w	r3, r3, #31
 8001f36:	687a      	ldr	r2, [r7, #4]
 8001f38:	fa22 f303 	lsr.w	r3, r2, r3
 8001f3c:	4a0b      	ldr	r2, [pc, #44]	@ (8001f6c <HAL_Init+0x70>)
 8001f3e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001f40:	4a0b      	ldr	r2, [pc, #44]	@ (8001f70 <HAL_Init+0x74>)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001f46:	200f      	movs	r0, #15
 8001f48:	f000 f814 	bl	8001f74 <HAL_InitTick>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d001      	beq.n	8001f56 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	e002      	b.n	8001f5c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001f56:	f7ff fadb 	bl	8001510 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f5a:	2300      	movs	r3, #0
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	3708      	adds	r7, #8
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}
 8001f64:	58024400 	.word	0x58024400
 8001f68:	0800d328 	.word	0x0800d328
 8001f6c:	24000004 	.word	0x24000004
 8001f70:	24000000 	.word	0x24000000

08001f74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b082      	sub	sp, #8
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001f7c:	4b15      	ldr	r3, [pc, #84]	@ (8001fd4 <HAL_InitTick+0x60>)
 8001f7e:	781b      	ldrb	r3, [r3, #0]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d101      	bne.n	8001f88 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001f84:	2301      	movs	r3, #1
 8001f86:	e021      	b.n	8001fcc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001f88:	4b13      	ldr	r3, [pc, #76]	@ (8001fd8 <HAL_InitTick+0x64>)
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	4b11      	ldr	r3, [pc, #68]	@ (8001fd4 <HAL_InitTick+0x60>)
 8001f8e:	781b      	ldrb	r3, [r3, #0]
 8001f90:	4619      	mov	r1, r3
 8001f92:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f96:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f001 fcb5 	bl	800390e <HAL_SYSTICK_Config>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d001      	beq.n	8001fae <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	e00e      	b.n	8001fcc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2b0f      	cmp	r3, #15
 8001fb2:	d80a      	bhi.n	8001fca <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	6879      	ldr	r1, [r7, #4]
 8001fb8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001fbc:	f001 fc7f 	bl	80038be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001fc0:	4a06      	ldr	r2, [pc, #24]	@ (8001fdc <HAL_InitTick+0x68>)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	e000      	b.n	8001fcc <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	3708      	adds	r7, #8
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	2400000c 	.word	0x2400000c
 8001fd8:	24000000 	.word	0x24000000
 8001fdc:	24000008 	.word	0x24000008

08001fe0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001fe4:	4b06      	ldr	r3, [pc, #24]	@ (8002000 <HAL_IncTick+0x20>)
 8001fe6:	781b      	ldrb	r3, [r3, #0]
 8001fe8:	461a      	mov	r2, r3
 8001fea:	4b06      	ldr	r3, [pc, #24]	@ (8002004 <HAL_IncTick+0x24>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4413      	add	r3, r2
 8001ff0:	4a04      	ldr	r2, [pc, #16]	@ (8002004 <HAL_IncTick+0x24>)
 8001ff2:	6013      	str	r3, [r2, #0]
}
 8001ff4:	bf00      	nop
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr
 8001ffe:	bf00      	nop
 8002000:	2400000c 	.word	0x2400000c
 8002004:	240005e0 	.word	0x240005e0

08002008 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002008:	b480      	push	{r7}
 800200a:	af00      	add	r7, sp, #0
  return uwTick;
 800200c:	4b03      	ldr	r3, [pc, #12]	@ (800201c <HAL_GetTick+0x14>)
 800200e:	681b      	ldr	r3, [r3, #0]
}
 8002010:	4618      	mov	r0, r3
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr
 800201a:	bf00      	nop
 800201c:	240005e0 	.word	0x240005e0

08002020 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002020:	b480      	push	{r7}
 8002022:	b083      	sub	sp, #12
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
 8002028:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	689b      	ldr	r3, [r3, #8]
 800202e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	431a      	orrs	r2, r3
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	609a      	str	r2, [r3, #8]
}
 800203a:	bf00      	nop
 800203c:	370c      	adds	r7, #12
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr

08002046 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002046:	b480      	push	{r7}
 8002048:	b083      	sub	sp, #12
 800204a:	af00      	add	r7, sp, #0
 800204c:	6078      	str	r0, [r7, #4]
 800204e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	689b      	ldr	r3, [r3, #8]
 8002054:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	431a      	orrs	r2, r3
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	609a      	str	r2, [r3, #8]
}
 8002060:	bf00      	nop
 8002062:	370c      	adds	r7, #12
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr

0800206c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800206c:	b480      	push	{r7}
 800206e:	b083      	sub	sp, #12
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	689b      	ldr	r3, [r3, #8]
 8002078:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800207c:	4618      	mov	r0, r3
 800207e:	370c      	adds	r7, #12
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr

08002088 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002088:	b480      	push	{r7}
 800208a:	b087      	sub	sp, #28
 800208c:	af00      	add	r7, sp, #0
 800208e:	60f8      	str	r0, [r7, #12]
 8002090:	60b9      	str	r1, [r7, #8]
 8002092:	607a      	str	r2, [r7, #4]
 8002094:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	3360      	adds	r3, #96	@ 0x60
 800209a:	461a      	mov	r2, r3
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	009b      	lsls	r3, r3, #2
 80020a0:	4413      	add	r3, r2
 80020a2:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	4a10      	ldr	r2, [pc, #64]	@ (80020e8 <LL_ADC_SetOffset+0x60>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d10b      	bne.n	80020c4 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	4313      	orrs	r3, r2
 80020ba:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80020c2:	e00b      	b.n	80020dc <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	430b      	orrs	r3, r1
 80020d6:	431a      	orrs	r2, r3
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	601a      	str	r2, [r3, #0]
}
 80020dc:	bf00      	nop
 80020de:	371c      	adds	r7, #28
 80020e0:	46bd      	mov	sp, r7
 80020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e6:	4770      	bx	lr
 80020e8:	58026000 	.word	0x58026000

080020ec <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b085      	sub	sp, #20
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
 80020f4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	3360      	adds	r3, #96	@ 0x60
 80020fa:	461a      	mov	r2, r3
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	009b      	lsls	r3, r3, #2
 8002100:	4413      	add	r3, r2
 8002102:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 800210c:	4618      	mov	r0, r3
 800210e:	3714      	adds	r7, #20
 8002110:	46bd      	mov	sp, r7
 8002112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002116:	4770      	bx	lr

08002118 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002118:	b480      	push	{r7}
 800211a:	b085      	sub	sp, #20
 800211c:	af00      	add	r7, sp, #0
 800211e:	60f8      	str	r0, [r7, #12]
 8002120:	60b9      	str	r1, [r7, #8]
 8002122:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	691b      	ldr	r3, [r3, #16]
 8002128:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	f003 031f 	and.w	r3, r3, #31
 8002132:	6879      	ldr	r1, [r7, #4]
 8002134:	fa01 f303 	lsl.w	r3, r1, r3
 8002138:	431a      	orrs	r2, r3
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	611a      	str	r2, [r3, #16]
}
 800213e:	bf00      	nop
 8002140:	3714      	adds	r7, #20
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr
	...

0800214c <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 800214c:	b480      	push	{r7}
 800214e:	b087      	sub	sp, #28
 8002150:	af00      	add	r7, sp, #0
 8002152:	60f8      	str	r0, [r7, #12]
 8002154:	60b9      	str	r1, [r7, #8]
 8002156:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	4a0c      	ldr	r2, [pc, #48]	@ (800218c <LL_ADC_SetOffsetSignedSaturation+0x40>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d00e      	beq.n	800217e <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	3360      	adds	r3, #96	@ 0x60
 8002164:	461a      	mov	r2, r3
 8002166:	68bb      	ldr	r3, [r7, #8]
 8002168:	009b      	lsls	r3, r3, #2
 800216a:	4413      	add	r3, r2
 800216c:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	431a      	orrs	r2, r3
 800217a:	697b      	ldr	r3, [r7, #20]
 800217c:	601a      	str	r2, [r3, #0]
  }
}
 800217e:	bf00      	nop
 8002180:	371c      	adds	r7, #28
 8002182:	46bd      	mov	sp, r7
 8002184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002188:	4770      	bx	lr
 800218a:	bf00      	nop
 800218c:	58026000 	.word	0x58026000

08002190 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002190:	b480      	push	{r7}
 8002192:	b087      	sub	sp, #28
 8002194:	af00      	add	r7, sp, #0
 8002196:	60f8      	str	r0, [r7, #12]
 8002198:	60b9      	str	r1, [r7, #8]
 800219a:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	4a0c      	ldr	r2, [pc, #48]	@ (80021d0 <LL_ADC_SetOffsetSaturation+0x40>)
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d10e      	bne.n	80021c2 <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	3360      	adds	r3, #96	@ 0x60
 80021a8:	461a      	mov	r2, r3
 80021aa:	68bb      	ldr	r3, [r7, #8]
 80021ac:	009b      	lsls	r3, r3, #2
 80021ae:	4413      	add	r3, r2
 80021b0:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	431a      	orrs	r2, r3
 80021be:	697b      	ldr	r3, [r7, #20]
 80021c0:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 80021c2:	bf00      	nop
 80021c4:	371c      	adds	r7, #28
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr
 80021ce:	bf00      	nop
 80021d0:	58026000 	.word	0x58026000

080021d4 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b087      	sub	sp, #28
 80021d8:	af00      	add	r7, sp, #0
 80021da:	60f8      	str	r0, [r7, #12]
 80021dc:	60b9      	str	r1, [r7, #8]
 80021de:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	4a0c      	ldr	r2, [pc, #48]	@ (8002214 <LL_ADC_SetOffsetSign+0x40>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d10e      	bne.n	8002206 <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	3360      	adds	r3, #96	@ 0x60
 80021ec:	461a      	mov	r2, r3
 80021ee:	68bb      	ldr	r3, [r7, #8]
 80021f0:	009b      	lsls	r3, r3, #2
 80021f2:	4413      	add	r3, r2
 80021f4:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	431a      	orrs	r2, r3
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 8002206:	bf00      	nop
 8002208:	371c      	adds	r7, #28
 800220a:	46bd      	mov	sp, r7
 800220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002210:	4770      	bx	lr
 8002212:	bf00      	nop
 8002214:	58026000 	.word	0x58026000

08002218 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002218:	b480      	push	{r7}
 800221a:	b087      	sub	sp, #28
 800221c:	af00      	add	r7, sp, #0
 800221e:	60f8      	str	r0, [r7, #12]
 8002220:	60b9      	str	r1, [r7, #8]
 8002222:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	3360      	adds	r3, #96	@ 0x60
 8002228:	461a      	mov	r2, r3
 800222a:	68bb      	ldr	r3, [r7, #8]
 800222c:	009b      	lsls	r3, r3, #2
 800222e:	4413      	add	r3, r2
 8002230:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	4a0c      	ldr	r2, [pc, #48]	@ (8002268 <LL_ADC_SetOffsetState+0x50>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d108      	bne.n	800224c <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	431a      	orrs	r2, r3
 8002246:	697b      	ldr	r3, [r7, #20]
 8002248:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 800224a:	e007      	b.n	800225c <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 800224c:	697b      	ldr	r3, [r7, #20]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	431a      	orrs	r2, r3
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	601a      	str	r2, [r3, #0]
}
 800225c:	bf00      	nop
 800225e:	371c      	adds	r7, #28
 8002260:	46bd      	mov	sp, r7
 8002262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002266:	4770      	bx	lr
 8002268:	58026000 	.word	0x58026000

0800226c <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800226c:	b480      	push	{r7}
 800226e:	b087      	sub	sp, #28
 8002270:	af00      	add	r7, sp, #0
 8002272:	60f8      	str	r0, [r7, #12]
 8002274:	60b9      	str	r1, [r7, #8]
 8002276:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	3330      	adds	r3, #48	@ 0x30
 800227c:	461a      	mov	r2, r3
 800227e:	68bb      	ldr	r3, [r7, #8]
 8002280:	0a1b      	lsrs	r3, r3, #8
 8002282:	009b      	lsls	r3, r3, #2
 8002284:	f003 030c 	and.w	r3, r3, #12
 8002288:	4413      	add	r3, r2
 800228a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	681a      	ldr	r2, [r3, #0]
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	f003 031f 	and.w	r3, r3, #31
 8002296:	211f      	movs	r1, #31
 8002298:	fa01 f303 	lsl.w	r3, r1, r3
 800229c:	43db      	mvns	r3, r3
 800229e:	401a      	ands	r2, r3
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	0e9b      	lsrs	r3, r3, #26
 80022a4:	f003 011f 	and.w	r1, r3, #31
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	f003 031f 	and.w	r3, r3, #31
 80022ae:	fa01 f303 	lsl.w	r3, r1, r3
 80022b2:	431a      	orrs	r2, r3
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80022b8:	bf00      	nop
 80022ba:	371c      	adds	r7, #28
 80022bc:	46bd      	mov	sp, r7
 80022be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c2:	4770      	bx	lr

080022c4 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b087      	sub	sp, #28
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	60f8      	str	r0, [r7, #12]
 80022cc:	60b9      	str	r1, [r7, #8]
 80022ce:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	3314      	adds	r3, #20
 80022d4:	461a      	mov	r2, r3
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	0e5b      	lsrs	r3, r3, #25
 80022da:	009b      	lsls	r3, r3, #2
 80022dc:	f003 0304 	and.w	r3, r3, #4
 80022e0:	4413      	add	r3, r2
 80022e2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	681a      	ldr	r2, [r3, #0]
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	0d1b      	lsrs	r3, r3, #20
 80022ec:	f003 031f 	and.w	r3, r3, #31
 80022f0:	2107      	movs	r1, #7
 80022f2:	fa01 f303 	lsl.w	r3, r1, r3
 80022f6:	43db      	mvns	r3, r3
 80022f8:	401a      	ands	r2, r3
 80022fa:	68bb      	ldr	r3, [r7, #8]
 80022fc:	0d1b      	lsrs	r3, r3, #20
 80022fe:	f003 031f 	and.w	r3, r3, #31
 8002302:	6879      	ldr	r1, [r7, #4]
 8002304:	fa01 f303 	lsl.w	r3, r1, r3
 8002308:	431a      	orrs	r2, r3
 800230a:	697b      	ldr	r3, [r7, #20]
 800230c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800230e:	bf00      	nop
 8002310:	371c      	adds	r7, #28
 8002312:	46bd      	mov	sp, r7
 8002314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002318:	4770      	bx	lr
	...

0800231c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800231c:	b480      	push	{r7}
 800231e:	b085      	sub	sp, #20
 8002320:	af00      	add	r7, sp, #0
 8002322:	60f8      	str	r0, [r7, #12]
 8002324:	60b9      	str	r1, [r7, #8]
 8002326:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	4a1a      	ldr	r2, [pc, #104]	@ (8002394 <LL_ADC_SetChannelSingleDiff+0x78>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d115      	bne.n	800235c <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002336:	68bb      	ldr	r3, [r7, #8]
 8002338:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800233c:	43db      	mvns	r3, r3
 800233e:	401a      	ands	r2, r3
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	f003 0318 	and.w	r3, r3, #24
 8002346:	4914      	ldr	r1, [pc, #80]	@ (8002398 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8002348:	40d9      	lsrs	r1, r3
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	400b      	ands	r3, r1
 800234e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002352:	431a      	orrs	r2, r3
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 800235a:	e014      	b.n	8002386 <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002368:	43db      	mvns	r3, r3
 800236a:	401a      	ands	r2, r3
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	f003 0318 	and.w	r3, r3, #24
 8002372:	4909      	ldr	r1, [pc, #36]	@ (8002398 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8002374:	40d9      	lsrs	r1, r3
 8002376:	68bb      	ldr	r3, [r7, #8]
 8002378:	400b      	ands	r3, r1
 800237a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800237e:	431a      	orrs	r2, r3
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
}
 8002386:	bf00      	nop
 8002388:	3714      	adds	r7, #20
 800238a:	46bd      	mov	sp, r7
 800238c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002390:	4770      	bx	lr
 8002392:	bf00      	nop
 8002394:	58026000 	.word	0x58026000
 8002398:	000fffff 	.word	0x000fffff

0800239c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800239c:	b480      	push	{r7}
 800239e:	b083      	sub	sp, #12
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	689a      	ldr	r2, [r3, #8]
 80023a8:	4b04      	ldr	r3, [pc, #16]	@ (80023bc <LL_ADC_DisableDeepPowerDown+0x20>)
 80023aa:	4013      	ands	r3, r2
 80023ac:	687a      	ldr	r2, [r7, #4]
 80023ae:	6093      	str	r3, [r2, #8]
}
 80023b0:	bf00      	nop
 80023b2:	370c      	adds	r7, #12
 80023b4:	46bd      	mov	sp, r7
 80023b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ba:	4770      	bx	lr
 80023bc:	5fffffc0 	.word	0x5fffffc0

080023c0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b083      	sub	sp, #12
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80023d0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80023d4:	d101      	bne.n	80023da <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80023d6:	2301      	movs	r3, #1
 80023d8:	e000      	b.n	80023dc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80023da:	2300      	movs	r3, #0
}
 80023dc:	4618      	mov	r0, r3
 80023de:	370c      	adds	r7, #12
 80023e0:	46bd      	mov	sp, r7
 80023e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e6:	4770      	bx	lr

080023e8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b083      	sub	sp, #12
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	689a      	ldr	r2, [r3, #8]
 80023f4:	4b05      	ldr	r3, [pc, #20]	@ (800240c <LL_ADC_EnableInternalRegulator+0x24>)
 80023f6:	4013      	ands	r3, r2
 80023f8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002400:	bf00      	nop
 8002402:	370c      	adds	r7, #12
 8002404:	46bd      	mov	sp, r7
 8002406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240a:	4770      	bx	lr
 800240c:	6fffffc0 	.word	0x6fffffc0

08002410 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002410:	b480      	push	{r7}
 8002412:	b083      	sub	sp, #12
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	689b      	ldr	r3, [r3, #8]
 800241c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002420:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002424:	d101      	bne.n	800242a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002426:	2301      	movs	r3, #1
 8002428:	e000      	b.n	800242c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800242a:	2300      	movs	r3, #0
}
 800242c:	4618      	mov	r0, r3
 800242e:	370c      	adds	r7, #12
 8002430:	46bd      	mov	sp, r7
 8002432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002436:	4770      	bx	lr

08002438 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002438:	b480      	push	{r7}
 800243a:	b083      	sub	sp, #12
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	f003 0301 	and.w	r3, r3, #1
 8002448:	2b01      	cmp	r3, #1
 800244a:	d101      	bne.n	8002450 <LL_ADC_IsEnabled+0x18>
 800244c:	2301      	movs	r3, #1
 800244e:	e000      	b.n	8002452 <LL_ADC_IsEnabled+0x1a>
 8002450:	2300      	movs	r3, #0
}
 8002452:	4618      	mov	r0, r3
 8002454:	370c      	adds	r7, #12
 8002456:	46bd      	mov	sp, r7
 8002458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245c:	4770      	bx	lr

0800245e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800245e:	b480      	push	{r7}
 8002460:	b083      	sub	sp, #12
 8002462:	af00      	add	r7, sp, #0
 8002464:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	f003 0304 	and.w	r3, r3, #4
 800246e:	2b04      	cmp	r3, #4
 8002470:	d101      	bne.n	8002476 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002472:	2301      	movs	r3, #1
 8002474:	e000      	b.n	8002478 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002476:	2300      	movs	r3, #0
}
 8002478:	4618      	mov	r0, r3
 800247a:	370c      	adds	r7, #12
 800247c:	46bd      	mov	sp, r7
 800247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002482:	4770      	bx	lr

08002484 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002484:	b480      	push	{r7}
 8002486:	b083      	sub	sp, #12
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	f003 0308 	and.w	r3, r3, #8
 8002494:	2b08      	cmp	r3, #8
 8002496:	d101      	bne.n	800249c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002498:	2301      	movs	r3, #1
 800249a:	e000      	b.n	800249e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800249c:	2300      	movs	r3, #0
}
 800249e:	4618      	mov	r0, r3
 80024a0:	370c      	adds	r7, #12
 80024a2:	46bd      	mov	sp, r7
 80024a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a8:	4770      	bx	lr
	...

080024ac <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80024ac:	b590      	push	{r4, r7, lr}
 80024ae:	b089      	sub	sp, #36	@ 0x24
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024b4:	2300      	movs	r3, #0
 80024b6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80024b8:	2300      	movs	r3, #0
 80024ba:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d101      	bne.n	80024c6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	e1ee      	b.n	80028a4 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	691b      	ldr	r3, [r3, #16]
 80024ca:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d109      	bne.n	80024e8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80024d4:	6878      	ldr	r0, [r7, #4]
 80024d6:	f7ff f835 	bl	8001544 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2200      	movs	r2, #0
 80024de:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2200      	movs	r2, #0
 80024e4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4618      	mov	r0, r3
 80024ee:	f7ff ff67 	bl	80023c0 <LL_ADC_IsDeepPowerDownEnabled>
 80024f2:	4603      	mov	r3, r0
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d004      	beq.n	8002502 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4618      	mov	r0, r3
 80024fe:	f7ff ff4d 	bl	800239c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4618      	mov	r0, r3
 8002508:	f7ff ff82 	bl	8002410 <LL_ADC_IsInternalRegulatorEnabled>
 800250c:	4603      	mov	r3, r0
 800250e:	2b00      	cmp	r3, #0
 8002510:	d114      	bne.n	800253c <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4618      	mov	r0, r3
 8002518:	f7ff ff66 	bl	80023e8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800251c:	4b8e      	ldr	r3, [pc, #568]	@ (8002758 <HAL_ADC_Init+0x2ac>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	099b      	lsrs	r3, r3, #6
 8002522:	4a8e      	ldr	r2, [pc, #568]	@ (800275c <HAL_ADC_Init+0x2b0>)
 8002524:	fba2 2303 	umull	r2, r3, r2, r3
 8002528:	099b      	lsrs	r3, r3, #6
 800252a:	3301      	adds	r3, #1
 800252c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800252e:	e002      	b.n	8002536 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	3b01      	subs	r3, #1
 8002534:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d1f9      	bne.n	8002530 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4618      	mov	r0, r3
 8002542:	f7ff ff65 	bl	8002410 <LL_ADC_IsInternalRegulatorEnabled>
 8002546:	4603      	mov	r3, r0
 8002548:	2b00      	cmp	r3, #0
 800254a:	d10d      	bne.n	8002568 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002550:	f043 0210 	orr.w	r2, r3, #16
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800255c:	f043 0201 	orr.w	r2, r3, #1
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	665a      	str	r2, [r3, #100]	@ 0x64

    tmp_hal_status = HAL_ERROR;
 8002564:	2301      	movs	r3, #1
 8002566:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4618      	mov	r0, r3
 800256e:	f7ff ff76 	bl	800245e <LL_ADC_REG_IsConversionOngoing>
 8002572:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002578:	f003 0310 	and.w	r3, r3, #16
 800257c:	2b00      	cmp	r3, #0
 800257e:	f040 8188 	bne.w	8002892 <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	2b00      	cmp	r3, #0
 8002586:	f040 8184 	bne.w	8002892 <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800258e:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002592:	f043 0202 	orr.w	r2, r3, #2
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4618      	mov	r0, r3
 80025a0:	f7ff ff4a 	bl	8002438 <LL_ADC_IsEnabled>
 80025a4:	4603      	mov	r3, r0
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d136      	bne.n	8002618 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a6c      	ldr	r2, [pc, #432]	@ (8002760 <HAL_ADC_Init+0x2b4>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d004      	beq.n	80025be <HAL_ADC_Init+0x112>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a6a      	ldr	r2, [pc, #424]	@ (8002764 <HAL_ADC_Init+0x2b8>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d10e      	bne.n	80025dc <HAL_ADC_Init+0x130>
 80025be:	4868      	ldr	r0, [pc, #416]	@ (8002760 <HAL_ADC_Init+0x2b4>)
 80025c0:	f7ff ff3a 	bl	8002438 <LL_ADC_IsEnabled>
 80025c4:	4604      	mov	r4, r0
 80025c6:	4867      	ldr	r0, [pc, #412]	@ (8002764 <HAL_ADC_Init+0x2b8>)
 80025c8:	f7ff ff36 	bl	8002438 <LL_ADC_IsEnabled>
 80025cc:	4603      	mov	r3, r0
 80025ce:	4323      	orrs	r3, r4
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	bf0c      	ite	eq
 80025d4:	2301      	moveq	r3, #1
 80025d6:	2300      	movne	r3, #0
 80025d8:	b2db      	uxtb	r3, r3
 80025da:	e008      	b.n	80025ee <HAL_ADC_Init+0x142>
 80025dc:	4862      	ldr	r0, [pc, #392]	@ (8002768 <HAL_ADC_Init+0x2bc>)
 80025de:	f7ff ff2b 	bl	8002438 <LL_ADC_IsEnabled>
 80025e2:	4603      	mov	r3, r0
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	bf0c      	ite	eq
 80025e8:	2301      	moveq	r3, #1
 80025ea:	2300      	movne	r3, #0
 80025ec:	b2db      	uxtb	r3, r3
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d012      	beq.n	8002618 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a5a      	ldr	r2, [pc, #360]	@ (8002760 <HAL_ADC_Init+0x2b4>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d004      	beq.n	8002606 <HAL_ADC_Init+0x15a>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a58      	ldr	r2, [pc, #352]	@ (8002764 <HAL_ADC_Init+0x2b8>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d101      	bne.n	800260a <HAL_ADC_Init+0x15e>
 8002606:	4a59      	ldr	r2, [pc, #356]	@ (800276c <HAL_ADC_Init+0x2c0>)
 8002608:	e000      	b.n	800260c <HAL_ADC_Init+0x160>
 800260a:	4a59      	ldr	r2, [pc, #356]	@ (8002770 <HAL_ADC_Init+0x2c4>)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	4619      	mov	r1, r3
 8002612:	4610      	mov	r0, r2
 8002614:	f7ff fd04 	bl	8002020 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a52      	ldr	r2, [pc, #328]	@ (8002768 <HAL_ADC_Init+0x2bc>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d129      	bne.n	8002676 <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	7e5b      	ldrb	r3, [r3, #25]
 8002626:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800262c:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 8002632:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	689b      	ldr	r3, [r3, #8]
 8002638:	2b08      	cmp	r3, #8
 800263a:	d013      	beq.n	8002664 <HAL_ADC_Init+0x1b8>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	689b      	ldr	r3, [r3, #8]
 8002640:	2b0c      	cmp	r3, #12
 8002642:	d00d      	beq.n	8002660 <HAL_ADC_Init+0x1b4>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	2b1c      	cmp	r3, #28
 800264a:	d007      	beq.n	800265c <HAL_ADC_Init+0x1b0>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	689b      	ldr	r3, [r3, #8]
 8002650:	2b18      	cmp	r3, #24
 8002652:	d101      	bne.n	8002658 <HAL_ADC_Init+0x1ac>
 8002654:	2318      	movs	r3, #24
 8002656:	e006      	b.n	8002666 <HAL_ADC_Init+0x1ba>
 8002658:	2300      	movs	r3, #0
 800265a:	e004      	b.n	8002666 <HAL_ADC_Init+0x1ba>
 800265c:	2310      	movs	r3, #16
 800265e:	e002      	b.n	8002666 <HAL_ADC_Init+0x1ba>
 8002660:	2308      	movs	r3, #8
 8002662:	e000      	b.n	8002666 <HAL_ADC_Init+0x1ba>
 8002664:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 8002666:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800266e:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8002670:	4313      	orrs	r3, r2
 8002672:	61bb      	str	r3, [r7, #24]
 8002674:	e00e      	b.n	8002694 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	7e5b      	ldrb	r3, [r3, #25]
 800267a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002680:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002686:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800268e:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002690:	4313      	orrs	r3, r2
 8002692:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	f893 3020 	ldrb.w	r3, [r3, #32]
 800269a:	2b01      	cmp	r3, #1
 800269c:	d106      	bne.n	80026ac <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026a2:	3b01      	subs	r3, #1
 80026a4:	045b      	lsls	r3, r3, #17
 80026a6:	69ba      	ldr	r2, [r7, #24]
 80026a8:	4313      	orrs	r3, r2
 80026aa:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d009      	beq.n	80026c8 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026b8:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026c0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80026c2:	69ba      	ldr	r2, [r7, #24]
 80026c4:	4313      	orrs	r3, r2
 80026c6:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a26      	ldr	r2, [pc, #152]	@ (8002768 <HAL_ADC_Init+0x2bc>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d115      	bne.n	80026fe <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	68da      	ldr	r2, [r3, #12]
 80026d8:	4b26      	ldr	r3, [pc, #152]	@ (8002774 <HAL_ADC_Init+0x2c8>)
 80026da:	4013      	ands	r3, r2
 80026dc:	687a      	ldr	r2, [r7, #4]
 80026de:	6812      	ldr	r2, [r2, #0]
 80026e0:	69b9      	ldr	r1, [r7, #24]
 80026e2:	430b      	orrs	r3, r1
 80026e4:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	691b      	ldr	r3, [r3, #16]
 80026ec:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	430a      	orrs	r2, r1
 80026fa:	611a      	str	r2, [r3, #16]
 80026fc:	e009      	b.n	8002712 <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	68da      	ldr	r2, [r3, #12]
 8002704:	4b1c      	ldr	r3, [pc, #112]	@ (8002778 <HAL_ADC_Init+0x2cc>)
 8002706:	4013      	ands	r3, r2
 8002708:	687a      	ldr	r2, [r7, #4]
 800270a:	6812      	ldr	r2, [r2, #0]
 800270c:	69b9      	ldr	r1, [r7, #24]
 800270e:	430b      	orrs	r3, r1
 8002710:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4618      	mov	r0, r3
 8002718:	f7ff fea1 	bl	800245e <LL_ADC_REG_IsConversionOngoing>
 800271c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4618      	mov	r0, r3
 8002724:	f7ff feae 	bl	8002484 <LL_ADC_INJ_IsConversionOngoing>
 8002728:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	2b00      	cmp	r3, #0
 800272e:	f040 808e 	bne.w	800284e <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	2b00      	cmp	r3, #0
 8002736:	f040 808a 	bne.w	800284e <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a0a      	ldr	r2, [pc, #40]	@ (8002768 <HAL_ADC_Init+0x2bc>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d11b      	bne.n	800277c <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	7e1b      	ldrb	r3, [r3, #24]
 8002748:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002750:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 8002752:	4313      	orrs	r3, r2
 8002754:	61bb      	str	r3, [r7, #24]
 8002756:	e018      	b.n	800278a <HAL_ADC_Init+0x2de>
 8002758:	24000000 	.word	0x24000000
 800275c:	053e2d63 	.word	0x053e2d63
 8002760:	40022000 	.word	0x40022000
 8002764:	40022100 	.word	0x40022100
 8002768:	58026000 	.word	0x58026000
 800276c:	40022300 	.word	0x40022300
 8002770:	58026300 	.word	0x58026300
 8002774:	fff04007 	.word	0xfff04007
 8002778:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	7e1b      	ldrb	r3, [r3, #24]
 8002780:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        tmpCFGR = (
 8002786:	4313      	orrs	r3, r2
 8002788:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	68da      	ldr	r2, [r3, #12]
 8002790:	4b46      	ldr	r3, [pc, #280]	@ (80028ac <HAL_ADC_Init+0x400>)
 8002792:	4013      	ands	r3, r2
 8002794:	687a      	ldr	r2, [r7, #4]
 8002796:	6812      	ldr	r2, [r2, #0]
 8002798:	69b9      	ldr	r1, [r7, #24]
 800279a:	430b      	orrs	r3, r1
 800279c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80027a4:	2b01      	cmp	r3, #1
 80027a6:	d137      	bne.n	8002818 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027ac:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a3f      	ldr	r2, [pc, #252]	@ (80028b0 <HAL_ADC_Init+0x404>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d116      	bne.n	80027e6 <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	691a      	ldr	r2, [r3, #16]
 80027be:	4b3d      	ldr	r3, [pc, #244]	@ (80028b4 <HAL_ADC_Init+0x408>)
 80027c0:	4013      	ands	r3, r2
 80027c2:	687a      	ldr	r2, [r7, #4]
 80027c4:	6c91      	ldr	r1, [r2, #72]	@ 0x48
 80027c6:	687a      	ldr	r2, [r7, #4]
 80027c8:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80027ca:	4311      	orrs	r1, r2
 80027cc:	687a      	ldr	r2, [r7, #4]
 80027ce:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80027d0:	4311      	orrs	r1, r2
 80027d2:	687a      	ldr	r2, [r7, #4]
 80027d4:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80027d6:	430a      	orrs	r2, r1
 80027d8:	431a      	orrs	r2, r3
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f042 0201 	orr.w	r2, r2, #1
 80027e2:	611a      	str	r2, [r3, #16]
 80027e4:	e020      	b.n	8002828 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	691a      	ldr	r2, [r3, #16]
 80027ec:	4b32      	ldr	r3, [pc, #200]	@ (80028b8 <HAL_ADC_Init+0x40c>)
 80027ee:	4013      	ands	r3, r2
 80027f0:	687a      	ldr	r2, [r7, #4]
 80027f2:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80027f4:	3a01      	subs	r2, #1
 80027f6:	0411      	lsls	r1, r2, #16
 80027f8:	687a      	ldr	r2, [r7, #4]
 80027fa:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80027fc:	4311      	orrs	r1, r2
 80027fe:	687a      	ldr	r2, [r7, #4]
 8002800:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002802:	4311      	orrs	r1, r2
 8002804:	687a      	ldr	r2, [r7, #4]
 8002806:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8002808:	430a      	orrs	r2, r1
 800280a:	431a      	orrs	r2, r3
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f042 0201 	orr.w	r2, r2, #1
 8002814:	611a      	str	r2, [r3, #16]
 8002816:	e007      	b.n	8002828 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	691a      	ldr	r2, [r3, #16]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f022 0201 	bic.w	r2, r2, #1
 8002826:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	691b      	ldr	r3, [r3, #16]
 800282e:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	430a      	orrs	r2, r1
 800283c:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a1b      	ldr	r2, [pc, #108]	@ (80028b0 <HAL_ADC_Init+0x404>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d002      	beq.n	800284e <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8002848:	6878      	ldr	r0, [r7, #4]
 800284a:	f000 fd67 	bl	800331c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	691b      	ldr	r3, [r3, #16]
 8002852:	2b01      	cmp	r3, #1
 8002854:	d10c      	bne.n	8002870 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800285c:	f023 010f 	bic.w	r1, r3, #15
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	69db      	ldr	r3, [r3, #28]
 8002864:	1e5a      	subs	r2, r3, #1
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	430a      	orrs	r2, r1
 800286c:	631a      	str	r2, [r3, #48]	@ 0x30
 800286e:	e007      	b.n	8002880 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f022 020f 	bic.w	r2, r2, #15
 800287e:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002884:	f023 0303 	bic.w	r3, r3, #3
 8002888:	f043 0201 	orr.w	r2, r3, #1
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	661a      	str	r2, [r3, #96]	@ 0x60
 8002890:	e007      	b.n	80028a2 <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002896:	f043 0210 	orr.w	r2, r3, #16
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800289e:	2301      	movs	r3, #1
 80028a0:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80028a2:	7ffb      	ldrb	r3, [r7, #31]
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	3724      	adds	r7, #36	@ 0x24
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd90      	pop	{r4, r7, pc}
 80028ac:	ffffbffc 	.word	0xffffbffc
 80028b0:	58026000 	.word	0x58026000
 80028b4:	fc00f81f 	.word	0xfc00f81f
 80028b8:	fc00f81e 	.word	0xfc00f81e

080028bc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80028bc:	b590      	push	{r4, r7, lr}
 80028be:	b0b9      	sub	sp, #228	@ 0xe4
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
 80028c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028c6:	2300      	movs	r3, #0
 80028c8:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80028cc:	2300      	movs	r3, #0
 80028ce:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80028d6:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	68db      	ldr	r3, [r3, #12]
 80028dc:	4aab      	ldr	r2, [pc, #684]	@ (8002b8c <HAL_ADC_ConfigChannel+0x2d0>)
 80028de:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80028e6:	2b01      	cmp	r3, #1
 80028e8:	d102      	bne.n	80028f0 <HAL_ADC_ConfigChannel+0x34>
 80028ea:	2302      	movs	r3, #2
 80028ec:	f000 bcfe 	b.w	80032ec <HAL_ADC_ConfigChannel+0xa30>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2201      	movs	r2, #1
 80028f4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4618      	mov	r0, r3
 80028fe:	f7ff fdae 	bl	800245e <LL_ADC_REG_IsConversionOngoing>
 8002902:	4603      	mov	r3, r0
 8002904:	2b00      	cmp	r3, #0
 8002906:	f040 84e2 	bne.w	80032ce <HAL_ADC_ConfigChannel+0xa12>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	2b00      	cmp	r3, #0
 8002910:	db38      	blt.n	8002984 <HAL_ADC_ConfigChannel+0xc8>
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a9e      	ldr	r2, [pc, #632]	@ (8002b90 <HAL_ADC_ConfigChannel+0x2d4>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d033      	beq.n	8002984 <HAL_ADC_ConfigChannel+0xc8>
      {
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002924:	2b00      	cmp	r3, #0
 8002926:	d108      	bne.n	800293a <HAL_ADC_ConfigChannel+0x7e>
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	0e9b      	lsrs	r3, r3, #26
 800292e:	f003 031f 	and.w	r3, r3, #31
 8002932:	2201      	movs	r2, #1
 8002934:	fa02 f303 	lsl.w	r3, r2, r3
 8002938:	e01d      	b.n	8002976 <HAL_ADC_ConfigChannel+0xba>
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002942:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002946:	fa93 f3a3 	rbit	r3, r3
 800294a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800294e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002952:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002956:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800295a:	2b00      	cmp	r3, #0
 800295c:	d101      	bne.n	8002962 <HAL_ADC_ConfigChannel+0xa6>
  {
    return 32U;
 800295e:	2320      	movs	r3, #32
 8002960:	e004      	b.n	800296c <HAL_ADC_ConfigChannel+0xb0>
  }
  return __builtin_clz(value);
 8002962:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002966:	fab3 f383 	clz	r3, r3
 800296a:	b2db      	uxtb	r3, r3
 800296c:	f003 031f 	and.w	r3, r3, #31
 8002970:	2201      	movs	r2, #1
 8002972:	fa02 f303 	lsl.w	r3, r2, r3
 8002976:	687a      	ldr	r2, [r7, #4]
 8002978:	6812      	ldr	r2, [r2, #0]
 800297a:	69d1      	ldr	r1, [r2, #28]
 800297c:	687a      	ldr	r2, [r7, #4]
 800297e:	6812      	ldr	r2, [r2, #0]
 8002980:	430b      	orrs	r3, r1
 8002982:	61d3      	str	r3, [r2, #28]
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6818      	ldr	r0, [r3, #0]
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	6859      	ldr	r1, [r3, #4]
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	461a      	mov	r2, r3
 8002992:	f7ff fc6b 	bl	800226c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4618      	mov	r0, r3
 800299c:	f7ff fd5f 	bl	800245e <LL_ADC_REG_IsConversionOngoing>
 80029a0:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4618      	mov	r0, r3
 80029aa:	f7ff fd6b 	bl	8002484 <LL_ADC_INJ_IsConversionOngoing>
 80029ae:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80029b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	f040 8270 	bne.w	8002e9c <HAL_ADC_ConfigChannel+0x5e0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80029bc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	f040 826b 	bne.w	8002e9c <HAL_ADC_ConfigChannel+0x5e0>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6818      	ldr	r0, [r3, #0]
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	6819      	ldr	r1, [r3, #0]
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	461a      	mov	r2, r3
 80029d4:	f7ff fc76 	bl	80022c4 <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a6c      	ldr	r2, [pc, #432]	@ (8002b90 <HAL_ADC_ConfigChannel+0x2d4>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d10d      	bne.n	80029fe <HAL_ADC_ConfigChannel+0x142>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	695a      	ldr	r2, [r3, #20]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	68db      	ldr	r3, [r3, #12]
 80029ec:	08db      	lsrs	r3, r3, #3
 80029ee:	f003 0303 	and.w	r3, r3, #3
 80029f2:	005b      	lsls	r3, r3, #1
 80029f4:	fa02 f303 	lsl.w	r3, r2, r3
 80029f8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80029fc:	e032      	b.n	8002a64 <HAL_ADC_ConfigChannel+0x1a8>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80029fe:	4b65      	ldr	r3, [pc, #404]	@ (8002b94 <HAL_ADC_ConfigChannel+0x2d8>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8002a06:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002a0a:	d10b      	bne.n	8002a24 <HAL_ADC_ConfigChannel+0x168>
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	695a      	ldr	r2, [r3, #20]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	68db      	ldr	r3, [r3, #12]
 8002a16:	089b      	lsrs	r3, r3, #2
 8002a18:	f003 0307 	and.w	r3, r3, #7
 8002a1c:	005b      	lsls	r3, r3, #1
 8002a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a22:	e01d      	b.n	8002a60 <HAL_ADC_ConfigChannel+0x1a4>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	68db      	ldr	r3, [r3, #12]
 8002a2a:	f003 0310 	and.w	r3, r3, #16
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d10b      	bne.n	8002a4a <HAL_ADC_ConfigChannel+0x18e>
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	695a      	ldr	r2, [r3, #20]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	68db      	ldr	r3, [r3, #12]
 8002a3c:	089b      	lsrs	r3, r3, #2
 8002a3e:	f003 0307 	and.w	r3, r3, #7
 8002a42:	005b      	lsls	r3, r3, #1
 8002a44:	fa02 f303 	lsl.w	r3, r2, r3
 8002a48:	e00a      	b.n	8002a60 <HAL_ADC_ConfigChannel+0x1a4>
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	695a      	ldr	r2, [r3, #20]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	68db      	ldr	r3, [r3, #12]
 8002a54:	089b      	lsrs	r3, r3, #2
 8002a56:	f003 0304 	and.w	r3, r3, #4
 8002a5a:	005b      	lsls	r3, r3, #1
 8002a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a60:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	691b      	ldr	r3, [r3, #16]
 8002a68:	2b04      	cmp	r3, #4
 8002a6a:	d048      	beq.n	8002afe <HAL_ADC_ConfigChannel+0x242>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6818      	ldr	r0, [r3, #0]
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	6919      	ldr	r1, [r3, #16]
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	681a      	ldr	r2, [r3, #0]
 8002a78:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002a7c:	f7ff fb04 	bl	8002088 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a42      	ldr	r2, [pc, #264]	@ (8002b90 <HAL_ADC_ConfigChannel+0x2d4>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d119      	bne.n	8002abe <HAL_ADC_ConfigChannel+0x202>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6818      	ldr	r0, [r3, #0]
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	6919      	ldr	r1, [r3, #16]
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	69db      	ldr	r3, [r3, #28]
 8002a96:	461a      	mov	r2, r3
 8002a98:	f7ff fb9c 	bl	80021d4 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6818      	ldr	r0, [r3, #0]
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	6919      	ldr	r1, [r3, #16]
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002aaa:	2b01      	cmp	r3, #1
 8002aac:	d102      	bne.n	8002ab4 <HAL_ADC_ConfigChannel+0x1f8>
 8002aae:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002ab2:	e000      	b.n	8002ab6 <HAL_ADC_ConfigChannel+0x1fa>
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	461a      	mov	r2, r3
 8002ab8:	f7ff fb6a 	bl	8002190 <LL_ADC_SetOffsetSaturation>
 8002abc:	e1ee      	b.n	8002e9c <HAL_ADC_ConfigChannel+0x5e0>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6818      	ldr	r0, [r3, #0]
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	6919      	ldr	r1, [r3, #16]
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002acc:	2b01      	cmp	r3, #1
 8002ace:	d102      	bne.n	8002ad6 <HAL_ADC_ConfigChannel+0x21a>
 8002ad0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8002ad4:	e000      	b.n	8002ad8 <HAL_ADC_ConfigChannel+0x21c>
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	461a      	mov	r2, r3
 8002ada:	f7ff fb37 	bl	800214c <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6818      	ldr	r0, [r3, #0]
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	6919      	ldr	r1, [r3, #16]
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	7e1b      	ldrb	r3, [r3, #24]
 8002aea:	2b01      	cmp	r3, #1
 8002aec:	d102      	bne.n	8002af4 <HAL_ADC_ConfigChannel+0x238>
 8002aee:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002af2:	e000      	b.n	8002af6 <HAL_ADC_ConfigChannel+0x23a>
 8002af4:	2300      	movs	r3, #0
 8002af6:	461a      	mov	r2, r3
 8002af8:	f7ff fb0e 	bl	8002118 <LL_ADC_SetDataRightShift>
 8002afc:	e1ce      	b.n	8002e9c <HAL_ADC_ConfigChannel+0x5e0>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a23      	ldr	r2, [pc, #140]	@ (8002b90 <HAL_ADC_ConfigChannel+0x2d4>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	f040 8181 	bne.w	8002e0c <HAL_ADC_ConfigChannel+0x550>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	2100      	movs	r1, #0
 8002b10:	4618      	mov	r0, r3
 8002b12:	f7ff faeb 	bl	80020ec <LL_ADC_GetOffsetChannel>
 8002b16:	4603      	mov	r3, r0
 8002b18:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d10a      	bne.n	8002b36 <HAL_ADC_ConfigChannel+0x27a>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	2100      	movs	r1, #0
 8002b26:	4618      	mov	r0, r3
 8002b28:	f7ff fae0 	bl	80020ec <LL_ADC_GetOffsetChannel>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	0e9b      	lsrs	r3, r3, #26
 8002b30:	f003 021f 	and.w	r2, r3, #31
 8002b34:	e01e      	b.n	8002b74 <HAL_ADC_ConfigChannel+0x2b8>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	2100      	movs	r1, #0
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f7ff fad5 	bl	80020ec <LL_ADC_GetOffsetChannel>
 8002b42:	4603      	mov	r3, r0
 8002b44:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b48:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002b4c:	fa93 f3a3 	rbit	r3, r3
 8002b50:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  return result;
 8002b54:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002b58:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  if (value == 0U)
 8002b5c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d101      	bne.n	8002b68 <HAL_ADC_ConfigChannel+0x2ac>
    return 32U;
 8002b64:	2320      	movs	r3, #32
 8002b66:	e004      	b.n	8002b72 <HAL_ADC_ConfigChannel+0x2b6>
  return __builtin_clz(value);
 8002b68:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002b6c:	fab3 f383 	clz	r3, r3
 8002b70:	b2db      	uxtb	r3, r3
 8002b72:	461a      	mov	r2, r3
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d10b      	bne.n	8002b98 <HAL_ADC_ConfigChannel+0x2dc>
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	0e9b      	lsrs	r3, r3, #26
 8002b86:	f003 031f 	and.w	r3, r3, #31
 8002b8a:	e01e      	b.n	8002bca <HAL_ADC_ConfigChannel+0x30e>
 8002b8c:	47ff0000 	.word	0x47ff0000
 8002b90:	58026000 	.word	0x58026000
 8002b94:	5c001000 	.word	0x5c001000
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ba0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002ba4:	fa93 f3a3 	rbit	r3, r3
 8002ba8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8002bac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002bb0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8002bb4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d101      	bne.n	8002bc0 <HAL_ADC_ConfigChannel+0x304>
    return 32U;
 8002bbc:	2320      	movs	r3, #32
 8002bbe:	e004      	b.n	8002bca <HAL_ADC_ConfigChannel+0x30e>
  return __builtin_clz(value);
 8002bc0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002bc4:	fab3 f383 	clz	r3, r3
 8002bc8:	b2db      	uxtb	r3, r3
 8002bca:	429a      	cmp	r2, r3
 8002bcc:	d106      	bne.n	8002bdc <HAL_ADC_ConfigChannel+0x320>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	2100      	movs	r1, #0
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f7ff fb1e 	bl	8002218 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	2101      	movs	r1, #1
 8002be2:	4618      	mov	r0, r3
 8002be4:	f7ff fa82 	bl	80020ec <LL_ADC_GetOffsetChannel>
 8002be8:	4603      	mov	r3, r0
 8002bea:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d10a      	bne.n	8002c08 <HAL_ADC_ConfigChannel+0x34c>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	2101      	movs	r1, #1
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f7ff fa77 	bl	80020ec <LL_ADC_GetOffsetChannel>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	0e9b      	lsrs	r3, r3, #26
 8002c02:	f003 021f 	and.w	r2, r3, #31
 8002c06:	e01e      	b.n	8002c46 <HAL_ADC_ConfigChannel+0x38a>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	2101      	movs	r1, #1
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f7ff fa6c 	bl	80020ec <LL_ADC_GetOffsetChannel>
 8002c14:	4603      	mov	r3, r0
 8002c16:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c1a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002c1e:	fa93 f3a3 	rbit	r3, r3
 8002c22:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8002c26:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002c2a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8002c2e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d101      	bne.n	8002c3a <HAL_ADC_ConfigChannel+0x37e>
    return 32U;
 8002c36:	2320      	movs	r3, #32
 8002c38:	e004      	b.n	8002c44 <HAL_ADC_ConfigChannel+0x388>
  return __builtin_clz(value);
 8002c3a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002c3e:	fab3 f383 	clz	r3, r3
 8002c42:	b2db      	uxtb	r3, r3
 8002c44:	461a      	mov	r2, r3
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d105      	bne.n	8002c5e <HAL_ADC_ConfigChannel+0x3a2>
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	0e9b      	lsrs	r3, r3, #26
 8002c58:	f003 031f 	and.w	r3, r3, #31
 8002c5c:	e018      	b.n	8002c90 <HAL_ADC_ConfigChannel+0x3d4>
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c66:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002c6a:	fa93 f3a3 	rbit	r3, r3
 8002c6e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8002c72:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002c76:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8002c7a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d101      	bne.n	8002c86 <HAL_ADC_ConfigChannel+0x3ca>
    return 32U;
 8002c82:	2320      	movs	r3, #32
 8002c84:	e004      	b.n	8002c90 <HAL_ADC_ConfigChannel+0x3d4>
  return __builtin_clz(value);
 8002c86:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002c8a:	fab3 f383 	clz	r3, r3
 8002c8e:	b2db      	uxtb	r3, r3
 8002c90:	429a      	cmp	r2, r3
 8002c92:	d106      	bne.n	8002ca2 <HAL_ADC_ConfigChannel+0x3e6>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	2101      	movs	r1, #1
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f7ff fabb 	bl	8002218 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	2102      	movs	r1, #2
 8002ca8:	4618      	mov	r0, r3
 8002caa:	f7ff fa1f 	bl	80020ec <LL_ADC_GetOffsetChannel>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d10a      	bne.n	8002cce <HAL_ADC_ConfigChannel+0x412>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	2102      	movs	r1, #2
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f7ff fa14 	bl	80020ec <LL_ADC_GetOffsetChannel>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	0e9b      	lsrs	r3, r3, #26
 8002cc8:	f003 021f 	and.w	r2, r3, #31
 8002ccc:	e01e      	b.n	8002d0c <HAL_ADC_ConfigChannel+0x450>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	2102      	movs	r1, #2
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	f7ff fa09 	bl	80020ec <LL_ADC_GetOffsetChannel>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ce0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002ce4:	fa93 f3a3 	rbit	r3, r3
 8002ce8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8002cec:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002cf0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8002cf4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d101      	bne.n	8002d00 <HAL_ADC_ConfigChannel+0x444>
    return 32U;
 8002cfc:	2320      	movs	r3, #32
 8002cfe:	e004      	b.n	8002d0a <HAL_ADC_ConfigChannel+0x44e>
  return __builtin_clz(value);
 8002d00:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002d04:	fab3 f383 	clz	r3, r3
 8002d08:	b2db      	uxtb	r3, r3
 8002d0a:	461a      	mov	r2, r3
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d105      	bne.n	8002d24 <HAL_ADC_ConfigChannel+0x468>
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	0e9b      	lsrs	r3, r3, #26
 8002d1e:	f003 031f 	and.w	r3, r3, #31
 8002d22:	e014      	b.n	8002d4e <HAL_ADC_ConfigChannel+0x492>
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d2a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002d2c:	fa93 f3a3 	rbit	r3, r3
 8002d30:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8002d32:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002d34:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8002d38:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d101      	bne.n	8002d44 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8002d40:	2320      	movs	r3, #32
 8002d42:	e004      	b.n	8002d4e <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8002d44:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002d48:	fab3 f383 	clz	r3, r3
 8002d4c:	b2db      	uxtb	r3, r3
 8002d4e:	429a      	cmp	r2, r3
 8002d50:	d106      	bne.n	8002d60 <HAL_ADC_ConfigChannel+0x4a4>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	2200      	movs	r2, #0
 8002d58:	2102      	movs	r1, #2
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f7ff fa5c 	bl	8002218 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	2103      	movs	r1, #3
 8002d66:	4618      	mov	r0, r3
 8002d68:	f7ff f9c0 	bl	80020ec <LL_ADC_GetOffsetChannel>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d10a      	bne.n	8002d8c <HAL_ADC_ConfigChannel+0x4d0>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	2103      	movs	r1, #3
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f7ff f9b5 	bl	80020ec <LL_ADC_GetOffsetChannel>
 8002d82:	4603      	mov	r3, r0
 8002d84:	0e9b      	lsrs	r3, r3, #26
 8002d86:	f003 021f 	and.w	r2, r3, #31
 8002d8a:	e017      	b.n	8002dbc <HAL_ADC_ConfigChannel+0x500>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	2103      	movs	r1, #3
 8002d92:	4618      	mov	r0, r3
 8002d94:	f7ff f9aa 	bl	80020ec <LL_ADC_GetOffsetChannel>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d9c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002d9e:	fa93 f3a3 	rbit	r3, r3
 8002da2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002da4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002da6:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8002da8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d101      	bne.n	8002db2 <HAL_ADC_ConfigChannel+0x4f6>
    return 32U;
 8002dae:	2320      	movs	r3, #32
 8002db0:	e003      	b.n	8002dba <HAL_ADC_ConfigChannel+0x4fe>
  return __builtin_clz(value);
 8002db2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002db4:	fab3 f383 	clz	r3, r3
 8002db8:	b2db      	uxtb	r3, r3
 8002dba:	461a      	mov	r2, r3
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d105      	bne.n	8002dd4 <HAL_ADC_ConfigChannel+0x518>
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	0e9b      	lsrs	r3, r3, #26
 8002dce:	f003 031f 	and.w	r3, r3, #31
 8002dd2:	e011      	b.n	8002df8 <HAL_ADC_ConfigChannel+0x53c>
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dda:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002ddc:	fa93 f3a3 	rbit	r3, r3
 8002de0:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8002de2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002de4:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8002de6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d101      	bne.n	8002df0 <HAL_ADC_ConfigChannel+0x534>
    return 32U;
 8002dec:	2320      	movs	r3, #32
 8002dee:	e003      	b.n	8002df8 <HAL_ADC_ConfigChannel+0x53c>
  return __builtin_clz(value);
 8002df0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002df2:	fab3 f383 	clz	r3, r3
 8002df6:	b2db      	uxtb	r3, r3
 8002df8:	429a      	cmp	r2, r3
 8002dfa:	d14f      	bne.n	8002e9c <HAL_ADC_ConfigChannel+0x5e0>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	2200      	movs	r2, #0
 8002e02:	2103      	movs	r1, #3
 8002e04:	4618      	mov	r0, r3
 8002e06:	f7ff fa07 	bl	8002218 <LL_ADC_SetOffsetState>
 8002e0a:	e047      	b.n	8002e9c <HAL_ADC_ConfigChannel+0x5e0>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e12:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	069b      	lsls	r3, r3, #26
 8002e1c:	429a      	cmp	r2, r3
 8002e1e:	d107      	bne.n	8002e30 <HAL_ADC_ConfigChannel+0x574>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002e2e:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002e36:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	069b      	lsls	r3, r3, #26
 8002e40:	429a      	cmp	r2, r3
 8002e42:	d107      	bne.n	8002e54 <HAL_ADC_ConfigChannel+0x598>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002e52:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002e5a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	069b      	lsls	r3, r3, #26
 8002e64:	429a      	cmp	r2, r3
 8002e66:	d107      	bne.n	8002e78 <HAL_ADC_ConfigChannel+0x5bc>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002e76:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002e7e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	069b      	lsls	r3, r3, #26
 8002e88:	429a      	cmp	r2, r3
 8002e8a:	d107      	bne.n	8002e9c <HAL_ADC_ConfigChannel+0x5e0>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002e9a:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f7ff fac9 	bl	8002438 <LL_ADC_IsEnabled>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	f040 8219 	bne.w	80032e0 <HAL_ADC_ConfigChannel+0xa24>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6818      	ldr	r0, [r3, #0]
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	6819      	ldr	r1, [r3, #0]
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	68db      	ldr	r3, [r3, #12]
 8002eba:	461a      	mov	r2, r3
 8002ebc:	f7ff fa2e 	bl	800231c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	68db      	ldr	r3, [r3, #12]
 8002ec4:	4aa1      	ldr	r2, [pc, #644]	@ (800314c <HAL_ADC_ConfigChannel+0x890>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	f040 812e 	bne.w	8003128 <HAL_ADC_ConfigChannel+0x86c>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d10b      	bne.n	8002ef4 <HAL_ADC_ConfigChannel+0x638>
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	0e9b      	lsrs	r3, r3, #26
 8002ee2:	3301      	adds	r3, #1
 8002ee4:	f003 031f 	and.w	r3, r3, #31
 8002ee8:	2b09      	cmp	r3, #9
 8002eea:	bf94      	ite	ls
 8002eec:	2301      	movls	r3, #1
 8002eee:	2300      	movhi	r3, #0
 8002ef0:	b2db      	uxtb	r3, r3
 8002ef2:	e019      	b.n	8002f28 <HAL_ADC_ConfigChannel+0x66c>
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002efa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002efc:	fa93 f3a3 	rbit	r3, r3
 8002f00:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8002f02:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f04:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8002f06:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d101      	bne.n	8002f10 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8002f0c:	2320      	movs	r3, #32
 8002f0e:	e003      	b.n	8002f18 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8002f10:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002f12:	fab3 f383 	clz	r3, r3
 8002f16:	b2db      	uxtb	r3, r3
 8002f18:	3301      	adds	r3, #1
 8002f1a:	f003 031f 	and.w	r3, r3, #31
 8002f1e:	2b09      	cmp	r3, #9
 8002f20:	bf94      	ite	ls
 8002f22:	2301      	movls	r3, #1
 8002f24:	2300      	movhi	r3, #0
 8002f26:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d079      	beq.n	8003020 <HAL_ADC_ConfigChannel+0x764>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d107      	bne.n	8002f48 <HAL_ADC_ConfigChannel+0x68c>
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	0e9b      	lsrs	r3, r3, #26
 8002f3e:	3301      	adds	r3, #1
 8002f40:	069b      	lsls	r3, r3, #26
 8002f42:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002f46:	e015      	b.n	8002f74 <HAL_ADC_ConfigChannel+0x6b8>
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f4e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002f50:	fa93 f3a3 	rbit	r3, r3
 8002f54:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8002f56:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002f58:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8002f5a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d101      	bne.n	8002f64 <HAL_ADC_ConfigChannel+0x6a8>
    return 32U;
 8002f60:	2320      	movs	r3, #32
 8002f62:	e003      	b.n	8002f6c <HAL_ADC_ConfigChannel+0x6b0>
  return __builtin_clz(value);
 8002f64:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002f66:	fab3 f383 	clz	r3, r3
 8002f6a:	b2db      	uxtb	r3, r3
 8002f6c:	3301      	adds	r3, #1
 8002f6e:	069b      	lsls	r3, r3, #26
 8002f70:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d109      	bne.n	8002f94 <HAL_ADC_ConfigChannel+0x6d8>
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	0e9b      	lsrs	r3, r3, #26
 8002f86:	3301      	adds	r3, #1
 8002f88:	f003 031f 	and.w	r3, r3, #31
 8002f8c:	2101      	movs	r1, #1
 8002f8e:	fa01 f303 	lsl.w	r3, r1, r3
 8002f92:	e017      	b.n	8002fc4 <HAL_ADC_ConfigChannel+0x708>
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f9a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002f9c:	fa93 f3a3 	rbit	r3, r3
 8002fa0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8002fa2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002fa4:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8002fa6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d101      	bne.n	8002fb0 <HAL_ADC_ConfigChannel+0x6f4>
    return 32U;
 8002fac:	2320      	movs	r3, #32
 8002fae:	e003      	b.n	8002fb8 <HAL_ADC_ConfigChannel+0x6fc>
  return __builtin_clz(value);
 8002fb0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002fb2:	fab3 f383 	clz	r3, r3
 8002fb6:	b2db      	uxtb	r3, r3
 8002fb8:	3301      	adds	r3, #1
 8002fba:	f003 031f 	and.w	r3, r3, #31
 8002fbe:	2101      	movs	r1, #1
 8002fc0:	fa01 f303 	lsl.w	r3, r1, r3
 8002fc4:	ea42 0103 	orr.w	r1, r2, r3
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d10a      	bne.n	8002fea <HAL_ADC_ConfigChannel+0x72e>
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	0e9b      	lsrs	r3, r3, #26
 8002fda:	3301      	adds	r3, #1
 8002fdc:	f003 021f 	and.w	r2, r3, #31
 8002fe0:	4613      	mov	r3, r2
 8002fe2:	005b      	lsls	r3, r3, #1
 8002fe4:	4413      	add	r3, r2
 8002fe6:	051b      	lsls	r3, r3, #20
 8002fe8:	e018      	b.n	800301c <HAL_ADC_ConfigChannel+0x760>
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ff0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ff2:	fa93 f3a3 	rbit	r3, r3
 8002ff6:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8002ff8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ffa:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8002ffc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d101      	bne.n	8003006 <HAL_ADC_ConfigChannel+0x74a>
    return 32U;
 8003002:	2320      	movs	r3, #32
 8003004:	e003      	b.n	800300e <HAL_ADC_ConfigChannel+0x752>
  return __builtin_clz(value);
 8003006:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003008:	fab3 f383 	clz	r3, r3
 800300c:	b2db      	uxtb	r3, r3
 800300e:	3301      	adds	r3, #1
 8003010:	f003 021f 	and.w	r2, r3, #31
 8003014:	4613      	mov	r3, r2
 8003016:	005b      	lsls	r3, r3, #1
 8003018:	4413      	add	r3, r2
 800301a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800301c:	430b      	orrs	r3, r1
 800301e:	e07e      	b.n	800311e <HAL_ADC_ConfigChannel+0x862>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003028:	2b00      	cmp	r3, #0
 800302a:	d107      	bne.n	800303c <HAL_ADC_ConfigChannel+0x780>
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	0e9b      	lsrs	r3, r3, #26
 8003032:	3301      	adds	r3, #1
 8003034:	069b      	lsls	r3, r3, #26
 8003036:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800303a:	e015      	b.n	8003068 <HAL_ADC_ConfigChannel+0x7ac>
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003042:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003044:	fa93 f3a3 	rbit	r3, r3
 8003048:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 800304a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800304c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 800304e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003050:	2b00      	cmp	r3, #0
 8003052:	d101      	bne.n	8003058 <HAL_ADC_ConfigChannel+0x79c>
    return 32U;
 8003054:	2320      	movs	r3, #32
 8003056:	e003      	b.n	8003060 <HAL_ADC_ConfigChannel+0x7a4>
  return __builtin_clz(value);
 8003058:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800305a:	fab3 f383 	clz	r3, r3
 800305e:	b2db      	uxtb	r3, r3
 8003060:	3301      	adds	r3, #1
 8003062:	069b      	lsls	r3, r3, #26
 8003064:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003070:	2b00      	cmp	r3, #0
 8003072:	d109      	bne.n	8003088 <HAL_ADC_ConfigChannel+0x7cc>
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	0e9b      	lsrs	r3, r3, #26
 800307a:	3301      	adds	r3, #1
 800307c:	f003 031f 	and.w	r3, r3, #31
 8003080:	2101      	movs	r1, #1
 8003082:	fa01 f303 	lsl.w	r3, r1, r3
 8003086:	e017      	b.n	80030b8 <HAL_ADC_ConfigChannel+0x7fc>
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800308e:	69fb      	ldr	r3, [r7, #28]
 8003090:	fa93 f3a3 	rbit	r3, r3
 8003094:	61bb      	str	r3, [r7, #24]
  return result;
 8003096:	69bb      	ldr	r3, [r7, #24]
 8003098:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800309a:	6a3b      	ldr	r3, [r7, #32]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d101      	bne.n	80030a4 <HAL_ADC_ConfigChannel+0x7e8>
    return 32U;
 80030a0:	2320      	movs	r3, #32
 80030a2:	e003      	b.n	80030ac <HAL_ADC_ConfigChannel+0x7f0>
  return __builtin_clz(value);
 80030a4:	6a3b      	ldr	r3, [r7, #32]
 80030a6:	fab3 f383 	clz	r3, r3
 80030aa:	b2db      	uxtb	r3, r3
 80030ac:	3301      	adds	r3, #1
 80030ae:	f003 031f 	and.w	r3, r3, #31
 80030b2:	2101      	movs	r1, #1
 80030b4:	fa01 f303 	lsl.w	r3, r1, r3
 80030b8:	ea42 0103 	orr.w	r1, r2, r3
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d10d      	bne.n	80030e4 <HAL_ADC_ConfigChannel+0x828>
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	0e9b      	lsrs	r3, r3, #26
 80030ce:	3301      	adds	r3, #1
 80030d0:	f003 021f 	and.w	r2, r3, #31
 80030d4:	4613      	mov	r3, r2
 80030d6:	005b      	lsls	r3, r3, #1
 80030d8:	4413      	add	r3, r2
 80030da:	3b1e      	subs	r3, #30
 80030dc:	051b      	lsls	r3, r3, #20
 80030de:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80030e2:	e01b      	b.n	800311c <HAL_ADC_ConfigChannel+0x860>
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	fa93 f3a3 	rbit	r3, r3
 80030f0:	60fb      	str	r3, [r7, #12]
  return result;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d101      	bne.n	8003100 <HAL_ADC_ConfigChannel+0x844>
    return 32U;
 80030fc:	2320      	movs	r3, #32
 80030fe:	e003      	b.n	8003108 <HAL_ADC_ConfigChannel+0x84c>
  return __builtin_clz(value);
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	fab3 f383 	clz	r3, r3
 8003106:	b2db      	uxtb	r3, r3
 8003108:	3301      	adds	r3, #1
 800310a:	f003 021f 	and.w	r2, r3, #31
 800310e:	4613      	mov	r3, r2
 8003110:	005b      	lsls	r3, r3, #1
 8003112:	4413      	add	r3, r2
 8003114:	3b1e      	subs	r3, #30
 8003116:	051b      	lsls	r3, r3, #20
 8003118:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800311c:	430b      	orrs	r3, r1
 800311e:	683a      	ldr	r2, [r7, #0]
 8003120:	6892      	ldr	r2, [r2, #8]
 8003122:	4619      	mov	r1, r3
 8003124:	f7ff f8ce 	bl	80022c4 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	2b00      	cmp	r3, #0
 800312e:	f280 80d7 	bge.w	80032e0 <HAL_ADC_ConfigChannel+0xa24>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a06      	ldr	r2, [pc, #24]	@ (8003150 <HAL_ADC_ConfigChannel+0x894>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d004      	beq.n	8003146 <HAL_ADC_ConfigChannel+0x88a>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a04      	ldr	r2, [pc, #16]	@ (8003154 <HAL_ADC_ConfigChannel+0x898>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d10a      	bne.n	800315c <HAL_ADC_ConfigChannel+0x8a0>
 8003146:	4b04      	ldr	r3, [pc, #16]	@ (8003158 <HAL_ADC_ConfigChannel+0x89c>)
 8003148:	e009      	b.n	800315e <HAL_ADC_ConfigChannel+0x8a2>
 800314a:	bf00      	nop
 800314c:	47ff0000 	.word	0x47ff0000
 8003150:	40022000 	.word	0x40022000
 8003154:	40022100 	.word	0x40022100
 8003158:	40022300 	.word	0x40022300
 800315c:	4b65      	ldr	r3, [pc, #404]	@ (80032f4 <HAL_ADC_ConfigChannel+0xa38>)
 800315e:	4618      	mov	r0, r3
 8003160:	f7fe ff84 	bl	800206c <LL_ADC_GetCommonPathInternalCh>
 8003164:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a62      	ldr	r2, [pc, #392]	@ (80032f8 <HAL_ADC_ConfigChannel+0xa3c>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d004      	beq.n	800317c <HAL_ADC_ConfigChannel+0x8c0>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a61      	ldr	r2, [pc, #388]	@ (80032fc <HAL_ADC_ConfigChannel+0xa40>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d10e      	bne.n	800319a <HAL_ADC_ConfigChannel+0x8de>
 800317c:	485e      	ldr	r0, [pc, #376]	@ (80032f8 <HAL_ADC_ConfigChannel+0xa3c>)
 800317e:	f7ff f95b 	bl	8002438 <LL_ADC_IsEnabled>
 8003182:	4604      	mov	r4, r0
 8003184:	485d      	ldr	r0, [pc, #372]	@ (80032fc <HAL_ADC_ConfigChannel+0xa40>)
 8003186:	f7ff f957 	bl	8002438 <LL_ADC_IsEnabled>
 800318a:	4603      	mov	r3, r0
 800318c:	4323      	orrs	r3, r4
 800318e:	2b00      	cmp	r3, #0
 8003190:	bf0c      	ite	eq
 8003192:	2301      	moveq	r3, #1
 8003194:	2300      	movne	r3, #0
 8003196:	b2db      	uxtb	r3, r3
 8003198:	e008      	b.n	80031ac <HAL_ADC_ConfigChannel+0x8f0>
 800319a:	4859      	ldr	r0, [pc, #356]	@ (8003300 <HAL_ADC_ConfigChannel+0xa44>)
 800319c:	f7ff f94c 	bl	8002438 <LL_ADC_IsEnabled>
 80031a0:	4603      	mov	r3, r0
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	bf0c      	ite	eq
 80031a6:	2301      	moveq	r3, #1
 80031a8:	2300      	movne	r3, #0
 80031aa:	b2db      	uxtb	r3, r3
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	f000 8084 	beq.w	80032ba <HAL_ADC_ConfigChannel+0x9fe>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a53      	ldr	r2, [pc, #332]	@ (8003304 <HAL_ADC_ConfigChannel+0xa48>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d132      	bne.n	8003222 <HAL_ADC_ConfigChannel+0x966>
 80031bc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80031c0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d12c      	bne.n	8003222 <HAL_ADC_ConfigChannel+0x966>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a4c      	ldr	r2, [pc, #304]	@ (8003300 <HAL_ADC_ConfigChannel+0xa44>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	f040 8086 	bne.w	80032e0 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a47      	ldr	r2, [pc, #284]	@ (80032f8 <HAL_ADC_ConfigChannel+0xa3c>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d004      	beq.n	80031e8 <HAL_ADC_ConfigChannel+0x92c>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a46      	ldr	r2, [pc, #280]	@ (80032fc <HAL_ADC_ConfigChannel+0xa40>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d101      	bne.n	80031ec <HAL_ADC_ConfigChannel+0x930>
 80031e8:	4a47      	ldr	r2, [pc, #284]	@ (8003308 <HAL_ADC_ConfigChannel+0xa4c>)
 80031ea:	e000      	b.n	80031ee <HAL_ADC_ConfigChannel+0x932>
 80031ec:	4a41      	ldr	r2, [pc, #260]	@ (80032f4 <HAL_ADC_ConfigChannel+0xa38>)
 80031ee:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80031f2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80031f6:	4619      	mov	r1, r3
 80031f8:	4610      	mov	r0, r2
 80031fa:	f7fe ff24 	bl	8002046 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80031fe:	4b43      	ldr	r3, [pc, #268]	@ (800330c <HAL_ADC_ConfigChannel+0xa50>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	099b      	lsrs	r3, r3, #6
 8003204:	4a42      	ldr	r2, [pc, #264]	@ (8003310 <HAL_ADC_ConfigChannel+0xa54>)
 8003206:	fba2 2303 	umull	r2, r3, r2, r3
 800320a:	099b      	lsrs	r3, r3, #6
 800320c:	3301      	adds	r3, #1
 800320e:	005b      	lsls	r3, r3, #1
 8003210:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003212:	e002      	b.n	800321a <HAL_ADC_ConfigChannel+0x95e>
              {
                wait_loop_index--;
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	3b01      	subs	r3, #1
 8003218:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800321a:	68bb      	ldr	r3, [r7, #8]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d1f9      	bne.n	8003214 <HAL_ADC_ConfigChannel+0x958>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003220:	e05e      	b.n	80032e0 <HAL_ADC_ConfigChannel+0xa24>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a3b      	ldr	r2, [pc, #236]	@ (8003314 <HAL_ADC_ConfigChannel+0xa58>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d120      	bne.n	800326e <HAL_ADC_ConfigChannel+0x9b2>
 800322c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003230:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003234:	2b00      	cmp	r3, #0
 8003236:	d11a      	bne.n	800326e <HAL_ADC_ConfigChannel+0x9b2>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a30      	ldr	r2, [pc, #192]	@ (8003300 <HAL_ADC_ConfigChannel+0xa44>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d14e      	bne.n	80032e0 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a2c      	ldr	r2, [pc, #176]	@ (80032f8 <HAL_ADC_ConfigChannel+0xa3c>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d004      	beq.n	8003256 <HAL_ADC_ConfigChannel+0x99a>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a2a      	ldr	r2, [pc, #168]	@ (80032fc <HAL_ADC_ConfigChannel+0xa40>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d101      	bne.n	800325a <HAL_ADC_ConfigChannel+0x99e>
 8003256:	4a2c      	ldr	r2, [pc, #176]	@ (8003308 <HAL_ADC_ConfigChannel+0xa4c>)
 8003258:	e000      	b.n	800325c <HAL_ADC_ConfigChannel+0x9a0>
 800325a:	4a26      	ldr	r2, [pc, #152]	@ (80032f4 <HAL_ADC_ConfigChannel+0xa38>)
 800325c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003260:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003264:	4619      	mov	r1, r3
 8003266:	4610      	mov	r0, r2
 8003268:	f7fe feed 	bl	8002046 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800326c:	e038      	b.n	80032e0 <HAL_ADC_ConfigChannel+0xa24>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a29      	ldr	r2, [pc, #164]	@ (8003318 <HAL_ADC_ConfigChannel+0xa5c>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d133      	bne.n	80032e0 <HAL_ADC_ConfigChannel+0xa24>
 8003278:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800327c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003280:	2b00      	cmp	r3, #0
 8003282:	d12d      	bne.n	80032e0 <HAL_ADC_ConfigChannel+0xa24>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a1d      	ldr	r2, [pc, #116]	@ (8003300 <HAL_ADC_ConfigChannel+0xa44>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d128      	bne.n	80032e0 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a19      	ldr	r2, [pc, #100]	@ (80032f8 <HAL_ADC_ConfigChannel+0xa3c>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d004      	beq.n	80032a2 <HAL_ADC_ConfigChannel+0x9e6>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a17      	ldr	r2, [pc, #92]	@ (80032fc <HAL_ADC_ConfigChannel+0xa40>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d101      	bne.n	80032a6 <HAL_ADC_ConfigChannel+0x9ea>
 80032a2:	4a19      	ldr	r2, [pc, #100]	@ (8003308 <HAL_ADC_ConfigChannel+0xa4c>)
 80032a4:	e000      	b.n	80032a8 <HAL_ADC_ConfigChannel+0x9ec>
 80032a6:	4a13      	ldr	r2, [pc, #76]	@ (80032f4 <HAL_ADC_ConfigChannel+0xa38>)
 80032a8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80032ac:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80032b0:	4619      	mov	r1, r3
 80032b2:	4610      	mov	r0, r2
 80032b4:	f7fe fec7 	bl	8002046 <LL_ADC_SetCommonPathInternalCh>
 80032b8:	e012      	b.n	80032e0 <HAL_ADC_ConfigChannel+0xa24>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032be:	f043 0220 	orr.w	r2, r3, #32
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	661a      	str	r2, [r3, #96]	@ 0x60

          tmp_hal_status = HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
 80032cc:	e008      	b.n	80032e0 <HAL_ADC_ConfigChannel+0xa24>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032d2:	f043 0220 	orr.w	r2, r3, #32
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80032da:	2301      	movs	r3, #1
 80032dc:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2200      	movs	r2, #0
 80032e4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 80032e8:	f897 30df 	ldrb.w	r3, [r7, #223]	@ 0xdf
}
 80032ec:	4618      	mov	r0, r3
 80032ee:	37e4      	adds	r7, #228	@ 0xe4
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bd90      	pop	{r4, r7, pc}
 80032f4:	58026300 	.word	0x58026300
 80032f8:	40022000 	.word	0x40022000
 80032fc:	40022100 	.word	0x40022100
 8003300:	58026000 	.word	0x58026000
 8003304:	c7520000 	.word	0xc7520000
 8003308:	40022300 	.word	0x40022300
 800330c:	24000000 	.word	0x24000000
 8003310:	053e2d63 	.word	0x053e2d63
 8003314:	c3210000 	.word	0xc3210000
 8003318:	cb840000 	.word	0xcb840000

0800331c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b084      	sub	sp, #16
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a6c      	ldr	r2, [pc, #432]	@ (80034dc <ADC_ConfigureBoostMode+0x1c0>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d004      	beq.n	8003338 <ADC_ConfigureBoostMode+0x1c>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a6b      	ldr	r2, [pc, #428]	@ (80034e0 <ADC_ConfigureBoostMode+0x1c4>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d109      	bne.n	800334c <ADC_ConfigureBoostMode+0x30>
 8003338:	4b6a      	ldr	r3, [pc, #424]	@ (80034e4 <ADC_ConfigureBoostMode+0x1c8>)
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003340:	2b00      	cmp	r3, #0
 8003342:	bf14      	ite	ne
 8003344:	2301      	movne	r3, #1
 8003346:	2300      	moveq	r3, #0
 8003348:	b2db      	uxtb	r3, r3
 800334a:	e008      	b.n	800335e <ADC_ConfigureBoostMode+0x42>
 800334c:	4b66      	ldr	r3, [pc, #408]	@ (80034e8 <ADC_ConfigureBoostMode+0x1cc>)
 800334e:	689b      	ldr	r3, [r3, #8]
 8003350:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003354:	2b00      	cmp	r3, #0
 8003356:	bf14      	ite	ne
 8003358:	2301      	movne	r3, #1
 800335a:	2300      	moveq	r3, #0
 800335c:	b2db      	uxtb	r3, r3
 800335e:	2b00      	cmp	r3, #0
 8003360:	d01c      	beq.n	800339c <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8003362:	f004 f933 	bl	80075cc <HAL_RCC_GetHCLKFreq>
 8003366:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003370:	d010      	beq.n	8003394 <ADC_ConfigureBoostMode+0x78>
 8003372:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003376:	d873      	bhi.n	8003460 <ADC_ConfigureBoostMode+0x144>
 8003378:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800337c:	d002      	beq.n	8003384 <ADC_ConfigureBoostMode+0x68>
 800337e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003382:	d16d      	bne.n	8003460 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	0c1b      	lsrs	r3, r3, #16
 800338a:	68fa      	ldr	r2, [r7, #12]
 800338c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003390:	60fb      	str	r3, [r7, #12]
        break;
 8003392:	e068      	b.n	8003466 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	089b      	lsrs	r3, r3, #2
 8003398:	60fb      	str	r3, [r7, #12]
        break;
 800339a:	e064      	b.n	8003466 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 800339c:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80033a0:	f04f 0100 	mov.w	r1, #0
 80033a4:	f005 fb0e 	bl	80089c4 <HAL_RCCEx_GetPeriphCLKFreq>
 80033a8:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80033b2:	d051      	beq.n	8003458 <ADC_ConfigureBoostMode+0x13c>
 80033b4:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80033b8:	d854      	bhi.n	8003464 <ADC_ConfigureBoostMode+0x148>
 80033ba:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80033be:	d047      	beq.n	8003450 <ADC_ConfigureBoostMode+0x134>
 80033c0:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80033c4:	d84e      	bhi.n	8003464 <ADC_ConfigureBoostMode+0x148>
 80033c6:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80033ca:	d03d      	beq.n	8003448 <ADC_ConfigureBoostMode+0x12c>
 80033cc:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80033d0:	d848      	bhi.n	8003464 <ADC_ConfigureBoostMode+0x148>
 80033d2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80033d6:	d033      	beq.n	8003440 <ADC_ConfigureBoostMode+0x124>
 80033d8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80033dc:	d842      	bhi.n	8003464 <ADC_ConfigureBoostMode+0x148>
 80033de:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80033e2:	d029      	beq.n	8003438 <ADC_ConfigureBoostMode+0x11c>
 80033e4:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80033e8:	d83c      	bhi.n	8003464 <ADC_ConfigureBoostMode+0x148>
 80033ea:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80033ee:	d01a      	beq.n	8003426 <ADC_ConfigureBoostMode+0x10a>
 80033f0:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80033f4:	d836      	bhi.n	8003464 <ADC_ConfigureBoostMode+0x148>
 80033f6:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80033fa:	d014      	beq.n	8003426 <ADC_ConfigureBoostMode+0x10a>
 80033fc:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8003400:	d830      	bhi.n	8003464 <ADC_ConfigureBoostMode+0x148>
 8003402:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003406:	d00e      	beq.n	8003426 <ADC_ConfigureBoostMode+0x10a>
 8003408:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800340c:	d82a      	bhi.n	8003464 <ADC_ConfigureBoostMode+0x148>
 800340e:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003412:	d008      	beq.n	8003426 <ADC_ConfigureBoostMode+0x10a>
 8003414:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003418:	d824      	bhi.n	8003464 <ADC_ConfigureBoostMode+0x148>
 800341a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800341e:	d002      	beq.n	8003426 <ADC_ConfigureBoostMode+0x10a>
 8003420:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003424:	d11e      	bne.n	8003464 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	0c9b      	lsrs	r3, r3, #18
 800342c:	005b      	lsls	r3, r3, #1
 800342e:	68fa      	ldr	r2, [r7, #12]
 8003430:	fbb2 f3f3 	udiv	r3, r2, r3
 8003434:	60fb      	str	r3, [r7, #12]
        break;
 8003436:	e016      	b.n	8003466 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	091b      	lsrs	r3, r3, #4
 800343c:	60fb      	str	r3, [r7, #12]
        break;
 800343e:	e012      	b.n	8003466 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	095b      	lsrs	r3, r3, #5
 8003444:	60fb      	str	r3, [r7, #12]
        break;
 8003446:	e00e      	b.n	8003466 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	099b      	lsrs	r3, r3, #6
 800344c:	60fb      	str	r3, [r7, #12]
        break;
 800344e:	e00a      	b.n	8003466 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	09db      	lsrs	r3, r3, #7
 8003454:	60fb      	str	r3, [r7, #12]
        break;
 8003456:	e006      	b.n	8003466 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	0a1b      	lsrs	r3, r3, #8
 800345c:	60fb      	str	r3, [r7, #12]
        break;
 800345e:	e002      	b.n	8003466 <ADC_ConfigureBoostMode+0x14a>
        break;
 8003460:	bf00      	nop
 8003462:	e000      	b.n	8003466 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8003464:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	085b      	lsrs	r3, r3, #1
 800346a:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	4a1f      	ldr	r2, [pc, #124]	@ (80034ec <ADC_ConfigureBoostMode+0x1d0>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d808      	bhi.n	8003486 <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	689a      	ldr	r2, [r3, #8]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8003482:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8003484:	e025      	b.n	80034d2 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	4a19      	ldr	r2, [pc, #100]	@ (80034f0 <ADC_ConfigureBoostMode+0x1d4>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d80a      	bhi.n	80034a4 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	689b      	ldr	r3, [r3, #8]
 8003494:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80034a0:	609a      	str	r2, [r3, #8]
}
 80034a2:	e016      	b.n	80034d2 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	4a13      	ldr	r2, [pc, #76]	@ (80034f4 <ADC_ConfigureBoostMode+0x1d8>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d80a      	bhi.n	80034c2 <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80034be:	609a      	str	r2, [r3, #8]
}
 80034c0:	e007      	b.n	80034d2 <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	689a      	ldr	r2, [r3, #8]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 80034d0:	609a      	str	r2, [r3, #8]
}
 80034d2:	bf00      	nop
 80034d4:	3710      	adds	r7, #16
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}
 80034da:	bf00      	nop
 80034dc:	40022000 	.word	0x40022000
 80034e0:	40022100 	.word	0x40022100
 80034e4:	40022300 	.word	0x40022300
 80034e8:	58026300 	.word	0x58026300
 80034ec:	005f5e10 	.word	0x005f5e10
 80034f0:	00bebc20 	.word	0x00bebc20
 80034f4:	017d7840 	.word	0x017d7840

080034f8 <LL_ADC_IsEnabled>:
{
 80034f8:	b480      	push	{r7}
 80034fa:	b083      	sub	sp, #12
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	689b      	ldr	r3, [r3, #8]
 8003504:	f003 0301 	and.w	r3, r3, #1
 8003508:	2b01      	cmp	r3, #1
 800350a:	d101      	bne.n	8003510 <LL_ADC_IsEnabled+0x18>
 800350c:	2301      	movs	r3, #1
 800350e:	e000      	b.n	8003512 <LL_ADC_IsEnabled+0x1a>
 8003510:	2300      	movs	r3, #0
}
 8003512:	4618      	mov	r0, r3
 8003514:	370c      	adds	r7, #12
 8003516:	46bd      	mov	sp, r7
 8003518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351c:	4770      	bx	lr

0800351e <LL_ADC_REG_IsConversionOngoing>:
{
 800351e:	b480      	push	{r7}
 8003520:	b083      	sub	sp, #12
 8003522:	af00      	add	r7, sp, #0
 8003524:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	689b      	ldr	r3, [r3, #8]
 800352a:	f003 0304 	and.w	r3, r3, #4
 800352e:	2b04      	cmp	r3, #4
 8003530:	d101      	bne.n	8003536 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003532:	2301      	movs	r3, #1
 8003534:	e000      	b.n	8003538 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003536:	2300      	movs	r3, #0
}
 8003538:	4618      	mov	r0, r3
 800353a:	370c      	adds	r7, #12
 800353c:	46bd      	mov	sp, r7
 800353e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003542:	4770      	bx	lr

08003544 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003544:	b590      	push	{r4, r7, lr}
 8003546:	b0a3      	sub	sp, #140	@ 0x8c
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
 800354c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800354e:	2300      	movs	r3, #0
 8003550:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800355a:	2b01      	cmp	r3, #1
 800355c:	d101      	bne.n	8003562 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800355e:	2302      	movs	r3, #2
 8003560:	e0c1      	b.n	80036e6 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2201      	movs	r2, #1
 8003566:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800356a:	2300      	movs	r3, #0
 800356c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 800356e:	2300      	movs	r3, #0
 8003570:	673b      	str	r3, [r7, #112]	@ 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a5e      	ldr	r2, [pc, #376]	@ (80036f0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d102      	bne.n	8003582 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800357c:	4b5d      	ldr	r3, [pc, #372]	@ (80036f4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800357e:	60fb      	str	r3, [r7, #12]
 8003580:	e001      	b.n	8003586 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003582:	2300      	movs	r3, #0
 8003584:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d10b      	bne.n	80035a4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003590:	f043 0220 	orr.w	r2, r3, #32
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2200      	movs	r2, #0
 800359c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    return HAL_ERROR;
 80035a0:	2301      	movs	r3, #1
 80035a2:	e0a0      	b.n	80036e6 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	4618      	mov	r0, r3
 80035a8:	f7ff ffb9 	bl	800351e <LL_ADC_REG_IsConversionOngoing>
 80035ac:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4618      	mov	r0, r3
 80035b6:	f7ff ffb2 	bl	800351e <LL_ADC_REG_IsConversionOngoing>
 80035ba:	4603      	mov	r3, r0
 80035bc:	2b00      	cmp	r3, #0
 80035be:	f040 8081 	bne.w	80036c4 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80035c2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d17c      	bne.n	80036c4 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a48      	ldr	r2, [pc, #288]	@ (80036f0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d004      	beq.n	80035de <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a46      	ldr	r2, [pc, #280]	@ (80036f4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d101      	bne.n	80035e2 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 80035de:	4b46      	ldr	r3, [pc, #280]	@ (80036f8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80035e0:	e000      	b.n	80035e4 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 80035e2:	4b46      	ldr	r3, [pc, #280]	@ (80036fc <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80035e4:	67fb      	str	r3, [r7, #124]	@ 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d039      	beq.n	8003662 <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80035ee:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	431a      	orrs	r2, r3
 80035fc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80035fe:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a3a      	ldr	r2, [pc, #232]	@ (80036f0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d004      	beq.n	8003614 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a39      	ldr	r2, [pc, #228]	@ (80036f4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d10e      	bne.n	8003632 <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8003614:	4836      	ldr	r0, [pc, #216]	@ (80036f0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003616:	f7ff ff6f 	bl	80034f8 <LL_ADC_IsEnabled>
 800361a:	4604      	mov	r4, r0
 800361c:	4835      	ldr	r0, [pc, #212]	@ (80036f4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800361e:	f7ff ff6b 	bl	80034f8 <LL_ADC_IsEnabled>
 8003622:	4603      	mov	r3, r0
 8003624:	4323      	orrs	r3, r4
 8003626:	2b00      	cmp	r3, #0
 8003628:	bf0c      	ite	eq
 800362a:	2301      	moveq	r3, #1
 800362c:	2300      	movne	r3, #0
 800362e:	b2db      	uxtb	r3, r3
 8003630:	e008      	b.n	8003644 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8003632:	4833      	ldr	r0, [pc, #204]	@ (8003700 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8003634:	f7ff ff60 	bl	80034f8 <LL_ADC_IsEnabled>
 8003638:	4603      	mov	r3, r0
 800363a:	2b00      	cmp	r3, #0
 800363c:	bf0c      	ite	eq
 800363e:	2301      	moveq	r3, #1
 8003640:	2300      	movne	r3, #0
 8003642:	b2db      	uxtb	r3, r3
 8003644:	2b00      	cmp	r3, #0
 8003646:	d047      	beq.n	80036d8 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003648:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800364a:	689a      	ldr	r2, [r3, #8]
 800364c:	4b2d      	ldr	r3, [pc, #180]	@ (8003704 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 800364e:	4013      	ands	r3, r2
 8003650:	683a      	ldr	r2, [r7, #0]
 8003652:	6811      	ldr	r1, [r2, #0]
 8003654:	683a      	ldr	r2, [r7, #0]
 8003656:	6892      	ldr	r2, [r2, #8]
 8003658:	430a      	orrs	r2, r1
 800365a:	431a      	orrs	r2, r3
 800365c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800365e:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003660:	e03a      	b.n	80036d8 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8003662:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003664:	689b      	ldr	r3, [r3, #8]
 8003666:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800366a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800366c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a1f      	ldr	r2, [pc, #124]	@ (80036f0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d004      	beq.n	8003682 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a1d      	ldr	r2, [pc, #116]	@ (80036f4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d10e      	bne.n	80036a0 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 8003682:	481b      	ldr	r0, [pc, #108]	@ (80036f0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003684:	f7ff ff38 	bl	80034f8 <LL_ADC_IsEnabled>
 8003688:	4604      	mov	r4, r0
 800368a:	481a      	ldr	r0, [pc, #104]	@ (80036f4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800368c:	f7ff ff34 	bl	80034f8 <LL_ADC_IsEnabled>
 8003690:	4603      	mov	r3, r0
 8003692:	4323      	orrs	r3, r4
 8003694:	2b00      	cmp	r3, #0
 8003696:	bf0c      	ite	eq
 8003698:	2301      	moveq	r3, #1
 800369a:	2300      	movne	r3, #0
 800369c:	b2db      	uxtb	r3, r3
 800369e:	e008      	b.n	80036b2 <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 80036a0:	4817      	ldr	r0, [pc, #92]	@ (8003700 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 80036a2:	f7ff ff29 	bl	80034f8 <LL_ADC_IsEnabled>
 80036a6:	4603      	mov	r3, r0
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	bf0c      	ite	eq
 80036ac:	2301      	moveq	r3, #1
 80036ae:	2300      	movne	r3, #0
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d010      	beq.n	80036d8 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80036b6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80036b8:	689a      	ldr	r2, [r3, #8]
 80036ba:	4b12      	ldr	r3, [pc, #72]	@ (8003704 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80036bc:	4013      	ands	r3, r2
 80036be:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80036c0:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80036c2:	e009      	b.n	80036d8 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036c8:	f043 0220 	orr.w	r2, r3, #32
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80036d0:	2301      	movs	r3, #1
 80036d2:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 80036d6:	e000      	b.n	80036da <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80036d8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2200      	movs	r2, #0
 80036de:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 80036e2:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 80036e6:	4618      	mov	r0, r3
 80036e8:	378c      	adds	r7, #140	@ 0x8c
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd90      	pop	{r4, r7, pc}
 80036ee:	bf00      	nop
 80036f0:	40022000 	.word	0x40022000
 80036f4:	40022100 	.word	0x40022100
 80036f8:	40022300 	.word	0x40022300
 80036fc:	58026300 	.word	0x58026300
 8003700:	58026000 	.word	0x58026000
 8003704:	fffff0e0 	.word	0xfffff0e0

08003708 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003708:	b480      	push	{r7}
 800370a:	b085      	sub	sp, #20
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	f003 0307 	and.w	r3, r3, #7
 8003716:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003718:	4b0b      	ldr	r3, [pc, #44]	@ (8003748 <__NVIC_SetPriorityGrouping+0x40>)
 800371a:	68db      	ldr	r3, [r3, #12]
 800371c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800371e:	68ba      	ldr	r2, [r7, #8]
 8003720:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003724:	4013      	ands	r3, r2
 8003726:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003730:	4b06      	ldr	r3, [pc, #24]	@ (800374c <__NVIC_SetPriorityGrouping+0x44>)
 8003732:	4313      	orrs	r3, r2
 8003734:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003736:	4a04      	ldr	r2, [pc, #16]	@ (8003748 <__NVIC_SetPriorityGrouping+0x40>)
 8003738:	68bb      	ldr	r3, [r7, #8]
 800373a:	60d3      	str	r3, [r2, #12]
}
 800373c:	bf00      	nop
 800373e:	3714      	adds	r7, #20
 8003740:	46bd      	mov	sp, r7
 8003742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003746:	4770      	bx	lr
 8003748:	e000ed00 	.word	0xe000ed00
 800374c:	05fa0000 	.word	0x05fa0000

08003750 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003750:	b480      	push	{r7}
 8003752:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003754:	4b04      	ldr	r3, [pc, #16]	@ (8003768 <__NVIC_GetPriorityGrouping+0x18>)
 8003756:	68db      	ldr	r3, [r3, #12]
 8003758:	0a1b      	lsrs	r3, r3, #8
 800375a:	f003 0307 	and.w	r3, r3, #7
}
 800375e:	4618      	mov	r0, r3
 8003760:	46bd      	mov	sp, r7
 8003762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003766:	4770      	bx	lr
 8003768:	e000ed00 	.word	0xe000ed00

0800376c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800376c:	b480      	push	{r7}
 800376e:	b083      	sub	sp, #12
 8003770:	af00      	add	r7, sp, #0
 8003772:	4603      	mov	r3, r0
 8003774:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003776:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800377a:	2b00      	cmp	r3, #0
 800377c:	db0b      	blt.n	8003796 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800377e:	88fb      	ldrh	r3, [r7, #6]
 8003780:	f003 021f 	and.w	r2, r3, #31
 8003784:	4907      	ldr	r1, [pc, #28]	@ (80037a4 <__NVIC_EnableIRQ+0x38>)
 8003786:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800378a:	095b      	lsrs	r3, r3, #5
 800378c:	2001      	movs	r0, #1
 800378e:	fa00 f202 	lsl.w	r2, r0, r2
 8003792:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003796:	bf00      	nop
 8003798:	370c      	adds	r7, #12
 800379a:	46bd      	mov	sp, r7
 800379c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a0:	4770      	bx	lr
 80037a2:	bf00      	nop
 80037a4:	e000e100 	.word	0xe000e100

080037a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80037a8:	b480      	push	{r7}
 80037aa:	b083      	sub	sp, #12
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	4603      	mov	r3, r0
 80037b0:	6039      	str	r1, [r7, #0]
 80037b2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80037b4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	db0a      	blt.n	80037d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	b2da      	uxtb	r2, r3
 80037c0:	490c      	ldr	r1, [pc, #48]	@ (80037f4 <__NVIC_SetPriority+0x4c>)
 80037c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80037c6:	0112      	lsls	r2, r2, #4
 80037c8:	b2d2      	uxtb	r2, r2
 80037ca:	440b      	add	r3, r1
 80037cc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80037d0:	e00a      	b.n	80037e8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	b2da      	uxtb	r2, r3
 80037d6:	4908      	ldr	r1, [pc, #32]	@ (80037f8 <__NVIC_SetPriority+0x50>)
 80037d8:	88fb      	ldrh	r3, [r7, #6]
 80037da:	f003 030f 	and.w	r3, r3, #15
 80037de:	3b04      	subs	r3, #4
 80037e0:	0112      	lsls	r2, r2, #4
 80037e2:	b2d2      	uxtb	r2, r2
 80037e4:	440b      	add	r3, r1
 80037e6:	761a      	strb	r2, [r3, #24]
}
 80037e8:	bf00      	nop
 80037ea:	370c      	adds	r7, #12
 80037ec:	46bd      	mov	sp, r7
 80037ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f2:	4770      	bx	lr
 80037f4:	e000e100 	.word	0xe000e100
 80037f8:	e000ed00 	.word	0xe000ed00

080037fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b089      	sub	sp, #36	@ 0x24
 8003800:	af00      	add	r7, sp, #0
 8003802:	60f8      	str	r0, [r7, #12]
 8003804:	60b9      	str	r1, [r7, #8]
 8003806:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	f003 0307 	and.w	r3, r3, #7
 800380e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003810:	69fb      	ldr	r3, [r7, #28]
 8003812:	f1c3 0307 	rsb	r3, r3, #7
 8003816:	2b04      	cmp	r3, #4
 8003818:	bf28      	it	cs
 800381a:	2304      	movcs	r3, #4
 800381c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800381e:	69fb      	ldr	r3, [r7, #28]
 8003820:	3304      	adds	r3, #4
 8003822:	2b06      	cmp	r3, #6
 8003824:	d902      	bls.n	800382c <NVIC_EncodePriority+0x30>
 8003826:	69fb      	ldr	r3, [r7, #28]
 8003828:	3b03      	subs	r3, #3
 800382a:	e000      	b.n	800382e <NVIC_EncodePriority+0x32>
 800382c:	2300      	movs	r3, #0
 800382e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003830:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003834:	69bb      	ldr	r3, [r7, #24]
 8003836:	fa02 f303 	lsl.w	r3, r2, r3
 800383a:	43da      	mvns	r2, r3
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	401a      	ands	r2, r3
 8003840:	697b      	ldr	r3, [r7, #20]
 8003842:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003844:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	fa01 f303 	lsl.w	r3, r1, r3
 800384e:	43d9      	mvns	r1, r3
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003854:	4313      	orrs	r3, r2
         );
}
 8003856:	4618      	mov	r0, r3
 8003858:	3724      	adds	r7, #36	@ 0x24
 800385a:	46bd      	mov	sp, r7
 800385c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003860:	4770      	bx	lr
	...

08003864 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b082      	sub	sp, #8
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	3b01      	subs	r3, #1
 8003870:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003874:	d301      	bcc.n	800387a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003876:	2301      	movs	r3, #1
 8003878:	e00f      	b.n	800389a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800387a:	4a0a      	ldr	r2, [pc, #40]	@ (80038a4 <SysTick_Config+0x40>)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	3b01      	subs	r3, #1
 8003880:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003882:	210f      	movs	r1, #15
 8003884:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003888:	f7ff ff8e 	bl	80037a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800388c:	4b05      	ldr	r3, [pc, #20]	@ (80038a4 <SysTick_Config+0x40>)
 800388e:	2200      	movs	r2, #0
 8003890:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003892:	4b04      	ldr	r3, [pc, #16]	@ (80038a4 <SysTick_Config+0x40>)
 8003894:	2207      	movs	r2, #7
 8003896:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003898:	2300      	movs	r3, #0
}
 800389a:	4618      	mov	r0, r3
 800389c:	3708      	adds	r7, #8
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}
 80038a2:	bf00      	nop
 80038a4:	e000e010 	.word	0xe000e010

080038a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b082      	sub	sp, #8
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80038b0:	6878      	ldr	r0, [r7, #4]
 80038b2:	f7ff ff29 	bl	8003708 <__NVIC_SetPriorityGrouping>
}
 80038b6:	bf00      	nop
 80038b8:	3708      	adds	r7, #8
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd80      	pop	{r7, pc}

080038be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80038be:	b580      	push	{r7, lr}
 80038c0:	b086      	sub	sp, #24
 80038c2:	af00      	add	r7, sp, #0
 80038c4:	4603      	mov	r3, r0
 80038c6:	60b9      	str	r1, [r7, #8]
 80038c8:	607a      	str	r2, [r7, #4]
 80038ca:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80038cc:	f7ff ff40 	bl	8003750 <__NVIC_GetPriorityGrouping>
 80038d0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80038d2:	687a      	ldr	r2, [r7, #4]
 80038d4:	68b9      	ldr	r1, [r7, #8]
 80038d6:	6978      	ldr	r0, [r7, #20]
 80038d8:	f7ff ff90 	bl	80037fc <NVIC_EncodePriority>
 80038dc:	4602      	mov	r2, r0
 80038de:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80038e2:	4611      	mov	r1, r2
 80038e4:	4618      	mov	r0, r3
 80038e6:	f7ff ff5f 	bl	80037a8 <__NVIC_SetPriority>
}
 80038ea:	bf00      	nop
 80038ec:	3718      	adds	r7, #24
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}

080038f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038f2:	b580      	push	{r7, lr}
 80038f4:	b082      	sub	sp, #8
 80038f6:	af00      	add	r7, sp, #0
 80038f8:	4603      	mov	r3, r0
 80038fa:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80038fc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003900:	4618      	mov	r0, r3
 8003902:	f7ff ff33 	bl	800376c <__NVIC_EnableIRQ>
}
 8003906:	bf00      	nop
 8003908:	3708      	adds	r7, #8
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}

0800390e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800390e:	b580      	push	{r7, lr}
 8003910:	b082      	sub	sp, #8
 8003912:	af00      	add	r7, sp, #0
 8003914:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003916:	6878      	ldr	r0, [r7, #4]
 8003918:	f7ff ffa4 	bl	8003864 <SysTick_Config>
 800391c:	4603      	mov	r3, r0
}
 800391e:	4618      	mov	r0, r3
 8003920:	3708      	adds	r7, #8
 8003922:	46bd      	mov	sp, r7
 8003924:	bd80      	pop	{r7, pc}
	...

08003928 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8003928:	b480      	push	{r7}
 800392a:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 800392c:	f3bf 8f5f 	dmb	sy
}
 8003930:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8003932:	4b07      	ldr	r3, [pc, #28]	@ (8003950 <HAL_MPU_Disable+0x28>)
 8003934:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003936:	4a06      	ldr	r2, [pc, #24]	@ (8003950 <HAL_MPU_Disable+0x28>)
 8003938:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800393c:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800393e:	4b05      	ldr	r3, [pc, #20]	@ (8003954 <HAL_MPU_Disable+0x2c>)
 8003940:	2200      	movs	r2, #0
 8003942:	605a      	str	r2, [r3, #4]
}
 8003944:	bf00      	nop
 8003946:	46bd      	mov	sp, r7
 8003948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394c:	4770      	bx	lr
 800394e:	bf00      	nop
 8003950:	e000ed00 	.word	0xe000ed00
 8003954:	e000ed90 	.word	0xe000ed90

08003958 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8003958:	b480      	push	{r7}
 800395a:	b083      	sub	sp, #12
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8003960:	4a0b      	ldr	r2, [pc, #44]	@ (8003990 <HAL_MPU_Enable+0x38>)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	f043 0301 	orr.w	r3, r3, #1
 8003968:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800396a:	4b0a      	ldr	r3, [pc, #40]	@ (8003994 <HAL_MPU_Enable+0x3c>)
 800396c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800396e:	4a09      	ldr	r2, [pc, #36]	@ (8003994 <HAL_MPU_Enable+0x3c>)
 8003970:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003974:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8003976:	f3bf 8f4f 	dsb	sy
}
 800397a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800397c:	f3bf 8f6f 	isb	sy
}
 8003980:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8003982:	bf00      	nop
 8003984:	370c      	adds	r7, #12
 8003986:	46bd      	mov	sp, r7
 8003988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398c:	4770      	bx	lr
 800398e:	bf00      	nop
 8003990:	e000ed90 	.word	0xe000ed90
 8003994:	e000ed00 	.word	0xe000ed00

08003998 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8003998:	b480      	push	{r7}
 800399a:	b083      	sub	sp, #12
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	785a      	ldrb	r2, [r3, #1]
 80039a4:	4b1b      	ldr	r3, [pc, #108]	@ (8003a14 <HAL_MPU_ConfigRegion+0x7c>)
 80039a6:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80039a8:	4b1a      	ldr	r3, [pc, #104]	@ (8003a14 <HAL_MPU_ConfigRegion+0x7c>)
 80039aa:	691b      	ldr	r3, [r3, #16]
 80039ac:	4a19      	ldr	r2, [pc, #100]	@ (8003a14 <HAL_MPU_ConfigRegion+0x7c>)
 80039ae:	f023 0301 	bic.w	r3, r3, #1
 80039b2:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80039b4:	4a17      	ldr	r2, [pc, #92]	@ (8003a14 <HAL_MPU_ConfigRegion+0x7c>)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	7b1b      	ldrb	r3, [r3, #12]
 80039c0:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	7adb      	ldrb	r3, [r3, #11]
 80039c6:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80039c8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	7a9b      	ldrb	r3, [r3, #10]
 80039ce:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80039d0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	7b5b      	ldrb	r3, [r3, #13]
 80039d6:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80039d8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	7b9b      	ldrb	r3, [r3, #14]
 80039de:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80039e0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	7bdb      	ldrb	r3, [r3, #15]
 80039e6:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80039e8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	7a5b      	ldrb	r3, [r3, #9]
 80039ee:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80039f0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	7a1b      	ldrb	r3, [r3, #8]
 80039f6:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80039f8:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80039fa:	687a      	ldr	r2, [r7, #4]
 80039fc:	7812      	ldrb	r2, [r2, #0]
 80039fe:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003a00:	4a04      	ldr	r2, [pc, #16]	@ (8003a14 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003a02:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003a04:	6113      	str	r3, [r2, #16]
}
 8003a06:	bf00      	nop
 8003a08:	370c      	adds	r7, #12
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a10:	4770      	bx	lr
 8003a12:	bf00      	nop
 8003a14:	e000ed90 	.word	0xe000ed90

08003a18 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b082      	sub	sp, #8
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d101      	bne.n	8003a2a <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8003a26:	2301      	movs	r3, #1
 8003a28:	e014      	b.n	8003a54 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	791b      	ldrb	r3, [r3, #4]
 8003a2e:	b2db      	uxtb	r3, r3
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d105      	bne.n	8003a40 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2200      	movs	r2, #0
 8003a38:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003a3a:	6878      	ldr	r0, [r7, #4]
 8003a3c:	f7fd fe10 	bl	8001660 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2202      	movs	r2, #2
 8003a44:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2201      	movs	r2, #1
 8003a50:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003a52:	2300      	movs	r3, #0
}
 8003a54:	4618      	mov	r0, r3
 8003a56:	3708      	adds	r7, #8
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bd80      	pop	{r7, pc}

08003a5c <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b086      	sub	sp, #24
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	60f8      	str	r0, [r7, #12]
 8003a64:	60b9      	str	r1, [r7, #8]
 8003a66:	607a      	str	r2, [r7, #4]
 8003a68:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d101      	bne.n	8003a74 <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 8003a70:	2301      	movs	r3, #1
 8003a72:	e0a2      	b.n	8003bba <HAL_DAC_Start_DMA+0x15e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	795b      	ldrb	r3, [r3, #5]
 8003a78:	2b01      	cmp	r3, #1
 8003a7a:	d101      	bne.n	8003a80 <HAL_DAC_Start_DMA+0x24>
 8003a7c:	2302      	movs	r3, #2
 8003a7e:	e09c      	b.n	8003bba <HAL_DAC_Start_DMA+0x15e>
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	2201      	movs	r2, #1
 8003a84:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	2202      	movs	r2, #2
 8003a8a:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d129      	bne.n	8003ae6 <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	689b      	ldr	r3, [r3, #8]
 8003a96:	4a4b      	ldr	r2, [pc, #300]	@ (8003bc4 <HAL_DAC_Start_DMA+0x168>)
 8003a98:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	689b      	ldr	r3, [r3, #8]
 8003a9e:	4a4a      	ldr	r2, [pc, #296]	@ (8003bc8 <HAL_DAC_Start_DMA+0x16c>)
 8003aa0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	689b      	ldr	r3, [r3, #8]
 8003aa6:	4a49      	ldr	r2, [pc, #292]	@ (8003bcc <HAL_DAC_Start_DMA+0x170>)
 8003aa8:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	681a      	ldr	r2, [r3, #0]
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003ab8:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8003aba:	6a3b      	ldr	r3, [r7, #32]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d003      	beq.n	8003ac8 <HAL_DAC_Start_DMA+0x6c>
 8003ac0:	6a3b      	ldr	r3, [r7, #32]
 8003ac2:	2b04      	cmp	r3, #4
 8003ac4:	d005      	beq.n	8003ad2 <HAL_DAC_Start_DMA+0x76>
 8003ac6:	e009      	b.n	8003adc <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	3308      	adds	r3, #8
 8003ace:	613b      	str	r3, [r7, #16]
        break;
 8003ad0:	e033      	b.n	8003b3a <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	330c      	adds	r3, #12
 8003ad8:	613b      	str	r3, [r7, #16]
        break;
 8003ada:	e02e      	b.n	8003b3a <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	3310      	adds	r3, #16
 8003ae2:	613b      	str	r3, [r7, #16]
        break;
 8003ae4:	e029      	b.n	8003b3a <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	68db      	ldr	r3, [r3, #12]
 8003aea:	4a39      	ldr	r2, [pc, #228]	@ (8003bd0 <HAL_DAC_Start_DMA+0x174>)
 8003aec:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	68db      	ldr	r3, [r3, #12]
 8003af2:	4a38      	ldr	r2, [pc, #224]	@ (8003bd4 <HAL_DAC_Start_DMA+0x178>)
 8003af4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	68db      	ldr	r3, [r3, #12]
 8003afa:	4a37      	ldr	r2, [pc, #220]	@ (8003bd8 <HAL_DAC_Start_DMA+0x17c>)
 8003afc:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	681a      	ldr	r2, [r3, #0]
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8003b0c:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8003b0e:	6a3b      	ldr	r3, [r7, #32]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d003      	beq.n	8003b1c <HAL_DAC_Start_DMA+0xc0>
 8003b14:	6a3b      	ldr	r3, [r7, #32]
 8003b16:	2b04      	cmp	r3, #4
 8003b18:	d005      	beq.n	8003b26 <HAL_DAC_Start_DMA+0xca>
 8003b1a:	e009      	b.n	8003b30 <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	3314      	adds	r3, #20
 8003b22:	613b      	str	r3, [r7, #16]
        break;
 8003b24:	e009      	b.n	8003b3a <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	3318      	adds	r3, #24
 8003b2c:	613b      	str	r3, [r7, #16]
        break;
 8003b2e:	e004      	b.n	8003b3a <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	331c      	adds	r3, #28
 8003b36:	613b      	str	r3, [r7, #16]
        break;
 8003b38:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d111      	bne.n	8003b64 <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	681a      	ldr	r2, [r3, #0]
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003b4e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	6898      	ldr	r0, [r3, #8]
 8003b54:	6879      	ldr	r1, [r7, #4]
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	693a      	ldr	r2, [r7, #16]
 8003b5a:	f000 fd81 	bl	8004660 <HAL_DMA_Start_IT>
 8003b5e:	4603      	mov	r3, r0
 8003b60:	75fb      	strb	r3, [r7, #23]
 8003b62:	e010      	b.n	8003b86 <HAL_DAC_Start_DMA+0x12a>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	681a      	ldr	r2, [r3, #0]
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 8003b72:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	68d8      	ldr	r0, [r3, #12]
 8003b78:	6879      	ldr	r1, [r7, #4]
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	693a      	ldr	r2, [r7, #16]
 8003b7e:	f000 fd6f 	bl	8004660 <HAL_DMA_Start_IT>
 8003b82:	4603      	mov	r3, r0
 8003b84:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8003b8c:	7dfb      	ldrb	r3, [r7, #23]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d10c      	bne.n	8003bac <HAL_DAC_Start_DMA+0x150>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	6819      	ldr	r1, [r3, #0]
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	f003 0310 	and.w	r3, r3, #16
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	409a      	lsls	r2, r3
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	430a      	orrs	r2, r1
 8003ba8:	601a      	str	r2, [r3, #0]
 8003baa:	e005      	b.n	8003bb8 <HAL_DAC_Start_DMA+0x15c>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	691b      	ldr	r3, [r3, #16]
 8003bb0:	f043 0204 	orr.w	r2, r3, #4
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8003bb8:	7dfb      	ldrb	r3, [r7, #23]
}
 8003bba:	4618      	mov	r0, r3
 8003bbc:	3718      	adds	r7, #24
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd80      	pop	{r7, pc}
 8003bc2:	bf00      	nop
 8003bc4:	08003e9d 	.word	0x08003e9d
 8003bc8:	08003ebf 	.word	0x08003ebf
 8003bcc:	08003edb 	.word	0x08003edb
 8003bd0:	08003f45 	.word	0x08003f45
 8003bd4:	08003f67 	.word	0x08003f67
 8003bd8:	08003f83 	.word	0x08003f83

08003bdc <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b083      	sub	sp, #12
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8003be4:	bf00      	nop
 8003be6:	370c      	adds	r7, #12
 8003be8:	46bd      	mov	sp, r7
 8003bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bee:	4770      	bx	lr

08003bf0 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b083      	sub	sp, #12
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8003bf8:	bf00      	nop
 8003bfa:	370c      	adds	r7, #12
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c02:	4770      	bx	lr

08003c04 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003c04:	b480      	push	{r7}
 8003c06:	b083      	sub	sp, #12
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8003c0c:	bf00      	nop
 8003c0e:	370c      	adds	r7, #12
 8003c10:	46bd      	mov	sp, r7
 8003c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c16:	4770      	bx	lr

08003c18 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b08a      	sub	sp, #40	@ 0x28
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	60f8      	str	r0, [r7, #12]
 8003c20:	60b9      	str	r1, [r7, #8]
 8003c22:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c24:	2300      	movs	r3, #0
 8003c26:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d002      	beq.n	8003c36 <HAL_DAC_ConfigChannel+0x1e>
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d101      	bne.n	8003c3a <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 8003c36:	2301      	movs	r3, #1
 8003c38:	e12a      	b.n	8003e90 <HAL_DAC_ConfigChannel+0x278>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	795b      	ldrb	r3, [r3, #5]
 8003c3e:	2b01      	cmp	r3, #1
 8003c40:	d101      	bne.n	8003c46 <HAL_DAC_ConfigChannel+0x2e>
 8003c42:	2302      	movs	r3, #2
 8003c44:	e124      	b.n	8003e90 <HAL_DAC_ConfigChannel+0x278>
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	2201      	movs	r2, #1
 8003c4a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	2202      	movs	r2, #2
 8003c50:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8003c52:	68bb      	ldr	r3, [r7, #8]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	2b04      	cmp	r3, #4
 8003c58:	d17a      	bne.n	8003d50 <HAL_DAC_ConfigChannel+0x138>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8003c5a:	f7fe f9d5 	bl	8002008 <HAL_GetTick>
 8003c5e:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d13d      	bne.n	8003ce2 <HAL_DAC_ConfigChannel+0xca>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003c66:	e018      	b.n	8003c9a <HAL_DAC_ConfigChannel+0x82>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003c68:	f7fe f9ce 	bl	8002008 <HAL_GetTick>
 8003c6c:	4602      	mov	r2, r0
 8003c6e:	69fb      	ldr	r3, [r7, #28]
 8003c70:	1ad3      	subs	r3, r2, r3
 8003c72:	2b01      	cmp	r3, #1
 8003c74:	d911      	bls.n	8003c9a <HAL_DAC_ConfigChannel+0x82>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003c7c:	4b86      	ldr	r3, [pc, #536]	@ (8003e98 <HAL_DAC_ConfigChannel+0x280>)
 8003c7e:	4013      	ands	r3, r2
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d00a      	beq.n	8003c9a <HAL_DAC_ConfigChannel+0x82>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	691b      	ldr	r3, [r3, #16]
 8003c88:	f043 0208 	orr.w	r2, r3, #8
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	2203      	movs	r2, #3
 8003c94:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8003c96:	2303      	movs	r3, #3
 8003c98:	e0fa      	b.n	8003e90 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003ca0:	4b7d      	ldr	r3, [pc, #500]	@ (8003e98 <HAL_DAC_ConfigChannel+0x280>)
 8003ca2:	4013      	ands	r3, r2
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d1df      	bne.n	8003c68 <HAL_DAC_ConfigChannel+0x50>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	68ba      	ldr	r2, [r7, #8]
 8003cae:	6992      	ldr	r2, [r2, #24]
 8003cb0:	641a      	str	r2, [r3, #64]	@ 0x40
 8003cb2:	e020      	b.n	8003cf6 <HAL_DAC_ConfigChannel+0xde>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003cb4:	f7fe f9a8 	bl	8002008 <HAL_GetTick>
 8003cb8:	4602      	mov	r2, r0
 8003cba:	69fb      	ldr	r3, [r7, #28]
 8003cbc:	1ad3      	subs	r3, r2, r3
 8003cbe:	2b01      	cmp	r3, #1
 8003cc0:	d90f      	bls.n	8003ce2 <HAL_DAC_ConfigChannel+0xca>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	da0a      	bge.n	8003ce2 <HAL_DAC_ConfigChannel+0xca>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	691b      	ldr	r3, [r3, #16]
 8003cd0:	f043 0208 	orr.w	r2, r3, #8
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	2203      	movs	r2, #3
 8003cdc:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8003cde:	2303      	movs	r3, #3
 8003ce0:	e0d6      	b.n	8003e90 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	dbe3      	blt.n	8003cb4 <HAL_DAC_ConfigChannel+0x9c>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	68ba      	ldr	r2, [r7, #8]
 8003cf2:	6992      	ldr	r2, [r2, #24]
 8003cf4:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	f003 0310 	and.w	r3, r3, #16
 8003d02:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8003d06:	fa01 f303 	lsl.w	r3, r1, r3
 8003d0a:	43db      	mvns	r3, r3
 8003d0c:	ea02 0103 	and.w	r1, r2, r3
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	69da      	ldr	r2, [r3, #28]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	f003 0310 	and.w	r3, r3, #16
 8003d1a:	409a      	lsls	r2, r3
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	430a      	orrs	r2, r1
 8003d22:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	f003 0310 	and.w	r3, r3, #16
 8003d30:	21ff      	movs	r1, #255	@ 0xff
 8003d32:	fa01 f303 	lsl.w	r3, r1, r3
 8003d36:	43db      	mvns	r3, r3
 8003d38:	ea02 0103 	and.w	r1, r2, r3
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	6a1a      	ldr	r2, [r3, #32]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	f003 0310 	and.w	r3, r3, #16
 8003d46:	409a      	lsls	r2, r3
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	430a      	orrs	r2, r1
 8003d4e:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	691b      	ldr	r3, [r3, #16]
 8003d54:	2b01      	cmp	r3, #1
 8003d56:	d11d      	bne.n	8003d94 <HAL_DAC_ConfigChannel+0x17c>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d5e:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	f003 0310 	and.w	r3, r3, #16
 8003d66:	221f      	movs	r2, #31
 8003d68:	fa02 f303 	lsl.w	r3, r2, r3
 8003d6c:	43db      	mvns	r3, r3
 8003d6e:	69ba      	ldr	r2, [r7, #24]
 8003d70:	4013      	ands	r3, r2
 8003d72:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8003d74:	68bb      	ldr	r3, [r7, #8]
 8003d76:	695b      	ldr	r3, [r3, #20]
 8003d78:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	f003 0310 	and.w	r3, r3, #16
 8003d80:	697a      	ldr	r2, [r7, #20]
 8003d82:	fa02 f303 	lsl.w	r3, r2, r3
 8003d86:	69ba      	ldr	r2, [r7, #24]
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	69ba      	ldr	r2, [r7, #24]
 8003d92:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d9a:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	f003 0310 	and.w	r3, r3, #16
 8003da2:	2207      	movs	r2, #7
 8003da4:	fa02 f303 	lsl.w	r3, r2, r3
 8003da8:	43db      	mvns	r3, r3
 8003daa:	69ba      	ldr	r2, [r7, #24]
 8003dac:	4013      	ands	r3, r2
 8003dae:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	68db      	ldr	r3, [r3, #12]
 8003db4:	2b01      	cmp	r3, #1
 8003db6:	d102      	bne.n	8003dbe <HAL_DAC_ConfigChannel+0x1a6>
  {
    connectOnChip = 0x00000000UL;
 8003db8:	2300      	movs	r3, #0
 8003dba:	627b      	str	r3, [r7, #36]	@ 0x24
 8003dbc:	e00f      	b.n	8003dde <HAL_DAC_ConfigChannel+0x1c6>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	68db      	ldr	r3, [r3, #12]
 8003dc2:	2b02      	cmp	r3, #2
 8003dc4:	d102      	bne.n	8003dcc <HAL_DAC_ConfigChannel+0x1b4>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	627b      	str	r3, [r7, #36]	@ 0x24
 8003dca:	e008      	b.n	8003dde <HAL_DAC_ConfigChannel+0x1c6>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	689b      	ldr	r3, [r3, #8]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d102      	bne.n	8003dda <HAL_DAC_ConfigChannel+0x1c2>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	627b      	str	r3, [r7, #36]	@ 0x24
 8003dd8:	e001      	b.n	8003dde <HAL_DAC_ConfigChannel+0x1c6>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8003dda:	2300      	movs	r3, #0
 8003ddc:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8003dde:	68bb      	ldr	r3, [r7, #8]
 8003de0:	681a      	ldr	r2, [r3, #0]
 8003de2:	68bb      	ldr	r3, [r7, #8]
 8003de4:	689b      	ldr	r3, [r3, #8]
 8003de6:	4313      	orrs	r3, r2
 8003de8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003dea:	4313      	orrs	r3, r2
 8003dec:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	f003 0310 	and.w	r3, r3, #16
 8003df4:	697a      	ldr	r2, [r7, #20]
 8003df6:	fa02 f303 	lsl.w	r3, r2, r3
 8003dfa:	69ba      	ldr	r2, [r7, #24]
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	69ba      	ldr	r2, [r7, #24]
 8003e06:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	6819      	ldr	r1, [r3, #0]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	f003 0310 	and.w	r3, r3, #16
 8003e14:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003e18:	fa02 f303 	lsl.w	r3, r2, r3
 8003e1c:	43da      	mvns	r2, r3
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	400a      	ands	r2, r1
 8003e24:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	f003 0310 	and.w	r3, r3, #16
 8003e34:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8003e38:	fa02 f303 	lsl.w	r3, r2, r3
 8003e3c:	43db      	mvns	r3, r3
 8003e3e:	69ba      	ldr	r2, [r7, #24]
 8003e40:	4013      	ands	r3, r2
 8003e42:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	f003 0310 	and.w	r3, r3, #16
 8003e50:	697a      	ldr	r2, [r7, #20]
 8003e52:	fa02 f303 	lsl.w	r3, r2, r3
 8003e56:	69ba      	ldr	r2, [r7, #24]
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	69ba      	ldr	r2, [r7, #24]
 8003e62:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	6819      	ldr	r1, [r3, #0]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	f003 0310 	and.w	r3, r3, #16
 8003e70:	22c0      	movs	r2, #192	@ 0xc0
 8003e72:	fa02 f303 	lsl.w	r3, r2, r3
 8003e76:	43da      	mvns	r2, r3
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	400a      	ands	r2, r1
 8003e7e:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	2201      	movs	r2, #1
 8003e84:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8003e8c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8003e90:	4618      	mov	r0, r3
 8003e92:	3728      	adds	r7, #40	@ 0x28
 8003e94:	46bd      	mov	sp, r7
 8003e96:	bd80      	pop	{r7, pc}
 8003e98:	20008000 	.word	0x20008000

08003e9c <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b084      	sub	sp, #16
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ea8:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8003eaa:	68f8      	ldr	r0, [r7, #12]
 8003eac:	f7ff fe96 	bl	8003bdc <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	711a      	strb	r2, [r3, #4]
}
 8003eb6:	bf00      	nop
 8003eb8:	3710      	adds	r7, #16
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd80      	pop	{r7, pc}

08003ebe <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8003ebe:	b580      	push	{r7, lr}
 8003ec0:	b084      	sub	sp, #16
 8003ec2:	af00      	add	r7, sp, #0
 8003ec4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003eca:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8003ecc:	68f8      	ldr	r0, [r7, #12]
 8003ece:	f7ff fe8f 	bl	8003bf0 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8003ed2:	bf00      	nop
 8003ed4:	3710      	adds	r7, #16
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bd80      	pop	{r7, pc}

08003eda <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8003eda:	b580      	push	{r7, lr}
 8003edc:	b084      	sub	sp, #16
 8003ede:	af00      	add	r7, sp, #0
 8003ee0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ee6:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	691b      	ldr	r3, [r3, #16]
 8003eec:	f043 0204 	orr.w	r2, r3, #4
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8003ef4:	68f8      	ldr	r0, [r7, #12]
 8003ef6:	f7ff fe85 	bl	8003c04 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	2201      	movs	r2, #1
 8003efe:	711a      	strb	r2, [r3, #4]
}
 8003f00:	bf00      	nop
 8003f02:	3710      	adds	r7, #16
 8003f04:	46bd      	mov	sp, r7
 8003f06:	bd80      	pop	{r7, pc}

08003f08 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	b083      	sub	sp, #12
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8003f10:	bf00      	nop
 8003f12:	370c      	adds	r7, #12
 8003f14:	46bd      	mov	sp, r7
 8003f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1a:	4770      	bx	lr

08003f1c <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	b083      	sub	sp, #12
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8003f24:	bf00      	nop
 8003f26:	370c      	adds	r7, #12
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2e:	4770      	bx	lr

08003f30 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003f30:	b480      	push	{r7}
 8003f32:	b083      	sub	sp, #12
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8003f38:	bf00      	nop
 8003f3a:	370c      	adds	r7, #12
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f42:	4770      	bx	lr

08003f44 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b084      	sub	sp, #16
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f50:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8003f52:	68f8      	ldr	r0, [r7, #12]
 8003f54:	f7ff ffd8 	bl	8003f08 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	2201      	movs	r2, #1
 8003f5c:	711a      	strb	r2, [r3, #4]
}
 8003f5e:	bf00      	nop
 8003f60:	3710      	adds	r7, #16
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bd80      	pop	{r7, pc}

08003f66 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8003f66:	b580      	push	{r7, lr}
 8003f68:	b084      	sub	sp, #16
 8003f6a:	af00      	add	r7, sp, #0
 8003f6c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f72:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8003f74:	68f8      	ldr	r0, [r7, #12]
 8003f76:	f7ff ffd1 	bl	8003f1c <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8003f7a:	bf00      	nop
 8003f7c:	3710      	adds	r7, #16
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bd80      	pop	{r7, pc}

08003f82 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8003f82:	b580      	push	{r7, lr}
 8003f84:	b084      	sub	sp, #16
 8003f86:	af00      	add	r7, sp, #0
 8003f88:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f8e:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	691b      	ldr	r3, [r3, #16]
 8003f94:	f043 0204 	orr.w	r2, r3, #4
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8003f9c:	68f8      	ldr	r0, [r7, #12]
 8003f9e:	f7ff ffc7 	bl	8003f30 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	2201      	movs	r2, #1
 8003fa6:	711a      	strb	r2, [r3, #4]
}
 8003fa8:	bf00      	nop
 8003faa:	3710      	adds	r7, #16
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bd80      	pop	{r7, pc}

08003fb0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b086      	sub	sp, #24
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8003fb8:	f7fe f826 	bl	8002008 <HAL_GetTick>
 8003fbc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d101      	bne.n	8003fc8 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	e312      	b.n	80045ee <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a66      	ldr	r2, [pc, #408]	@ (8004168 <HAL_DMA_Init+0x1b8>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d04a      	beq.n	8004068 <HAL_DMA_Init+0xb8>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a65      	ldr	r2, [pc, #404]	@ (800416c <HAL_DMA_Init+0x1bc>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d045      	beq.n	8004068 <HAL_DMA_Init+0xb8>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a63      	ldr	r2, [pc, #396]	@ (8004170 <HAL_DMA_Init+0x1c0>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d040      	beq.n	8004068 <HAL_DMA_Init+0xb8>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a62      	ldr	r2, [pc, #392]	@ (8004174 <HAL_DMA_Init+0x1c4>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d03b      	beq.n	8004068 <HAL_DMA_Init+0xb8>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a60      	ldr	r2, [pc, #384]	@ (8004178 <HAL_DMA_Init+0x1c8>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d036      	beq.n	8004068 <HAL_DMA_Init+0xb8>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a5f      	ldr	r2, [pc, #380]	@ (800417c <HAL_DMA_Init+0x1cc>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d031      	beq.n	8004068 <HAL_DMA_Init+0xb8>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a5d      	ldr	r2, [pc, #372]	@ (8004180 <HAL_DMA_Init+0x1d0>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d02c      	beq.n	8004068 <HAL_DMA_Init+0xb8>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4a5c      	ldr	r2, [pc, #368]	@ (8004184 <HAL_DMA_Init+0x1d4>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d027      	beq.n	8004068 <HAL_DMA_Init+0xb8>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a5a      	ldr	r2, [pc, #360]	@ (8004188 <HAL_DMA_Init+0x1d8>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d022      	beq.n	8004068 <HAL_DMA_Init+0xb8>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4a59      	ldr	r2, [pc, #356]	@ (800418c <HAL_DMA_Init+0x1dc>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d01d      	beq.n	8004068 <HAL_DMA_Init+0xb8>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a57      	ldr	r2, [pc, #348]	@ (8004190 <HAL_DMA_Init+0x1e0>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d018      	beq.n	8004068 <HAL_DMA_Init+0xb8>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4a56      	ldr	r2, [pc, #344]	@ (8004194 <HAL_DMA_Init+0x1e4>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d013      	beq.n	8004068 <HAL_DMA_Init+0xb8>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a54      	ldr	r2, [pc, #336]	@ (8004198 <HAL_DMA_Init+0x1e8>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d00e      	beq.n	8004068 <HAL_DMA_Init+0xb8>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4a53      	ldr	r2, [pc, #332]	@ (800419c <HAL_DMA_Init+0x1ec>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d009      	beq.n	8004068 <HAL_DMA_Init+0xb8>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a51      	ldr	r2, [pc, #324]	@ (80041a0 <HAL_DMA_Init+0x1f0>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d004      	beq.n	8004068 <HAL_DMA_Init+0xb8>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4a50      	ldr	r2, [pc, #320]	@ (80041a4 <HAL_DMA_Init+0x1f4>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d101      	bne.n	800406c <HAL_DMA_Init+0xbc>
 8004068:	2301      	movs	r3, #1
 800406a:	e000      	b.n	800406e <HAL_DMA_Init+0xbe>
 800406c:	2300      	movs	r3, #0
 800406e:	2b00      	cmp	r3, #0
 8004070:	f000 813c 	beq.w	80042ec <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2202      	movs	r2, #2
 8004078:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2200      	movs	r2, #0
 8004080:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a37      	ldr	r2, [pc, #220]	@ (8004168 <HAL_DMA_Init+0x1b8>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d04a      	beq.n	8004124 <HAL_DMA_Init+0x174>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4a36      	ldr	r2, [pc, #216]	@ (800416c <HAL_DMA_Init+0x1bc>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d045      	beq.n	8004124 <HAL_DMA_Init+0x174>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a34      	ldr	r2, [pc, #208]	@ (8004170 <HAL_DMA_Init+0x1c0>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d040      	beq.n	8004124 <HAL_DMA_Init+0x174>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4a33      	ldr	r2, [pc, #204]	@ (8004174 <HAL_DMA_Init+0x1c4>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d03b      	beq.n	8004124 <HAL_DMA_Init+0x174>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a31      	ldr	r2, [pc, #196]	@ (8004178 <HAL_DMA_Init+0x1c8>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d036      	beq.n	8004124 <HAL_DMA_Init+0x174>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a30      	ldr	r2, [pc, #192]	@ (800417c <HAL_DMA_Init+0x1cc>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d031      	beq.n	8004124 <HAL_DMA_Init+0x174>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a2e      	ldr	r2, [pc, #184]	@ (8004180 <HAL_DMA_Init+0x1d0>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d02c      	beq.n	8004124 <HAL_DMA_Init+0x174>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a2d      	ldr	r2, [pc, #180]	@ (8004184 <HAL_DMA_Init+0x1d4>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d027      	beq.n	8004124 <HAL_DMA_Init+0x174>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a2b      	ldr	r2, [pc, #172]	@ (8004188 <HAL_DMA_Init+0x1d8>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d022      	beq.n	8004124 <HAL_DMA_Init+0x174>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a2a      	ldr	r2, [pc, #168]	@ (800418c <HAL_DMA_Init+0x1dc>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d01d      	beq.n	8004124 <HAL_DMA_Init+0x174>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a28      	ldr	r2, [pc, #160]	@ (8004190 <HAL_DMA_Init+0x1e0>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d018      	beq.n	8004124 <HAL_DMA_Init+0x174>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a27      	ldr	r2, [pc, #156]	@ (8004194 <HAL_DMA_Init+0x1e4>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d013      	beq.n	8004124 <HAL_DMA_Init+0x174>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a25      	ldr	r2, [pc, #148]	@ (8004198 <HAL_DMA_Init+0x1e8>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d00e      	beq.n	8004124 <HAL_DMA_Init+0x174>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a24      	ldr	r2, [pc, #144]	@ (800419c <HAL_DMA_Init+0x1ec>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d009      	beq.n	8004124 <HAL_DMA_Init+0x174>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a22      	ldr	r2, [pc, #136]	@ (80041a0 <HAL_DMA_Init+0x1f0>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d004      	beq.n	8004124 <HAL_DMA_Init+0x174>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a21      	ldr	r2, [pc, #132]	@ (80041a4 <HAL_DMA_Init+0x1f4>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d108      	bne.n	8004136 <HAL_DMA_Init+0x186>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	681a      	ldr	r2, [r3, #0]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f022 0201 	bic.w	r2, r2, #1
 8004132:	601a      	str	r2, [r3, #0]
 8004134:	e007      	b.n	8004146 <HAL_DMA_Init+0x196>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	681a      	ldr	r2, [r3, #0]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f022 0201 	bic.w	r2, r2, #1
 8004144:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004146:	e02f      	b.n	80041a8 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004148:	f7fd ff5e 	bl	8002008 <HAL_GetTick>
 800414c:	4602      	mov	r2, r0
 800414e:	693b      	ldr	r3, [r7, #16]
 8004150:	1ad3      	subs	r3, r2, r3
 8004152:	2b05      	cmp	r3, #5
 8004154:	d928      	bls.n	80041a8 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2220      	movs	r2, #32
 800415a:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2203      	movs	r2, #3
 8004160:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8004164:	2301      	movs	r3, #1
 8004166:	e242      	b.n	80045ee <HAL_DMA_Init+0x63e>
 8004168:	40020010 	.word	0x40020010
 800416c:	40020028 	.word	0x40020028
 8004170:	40020040 	.word	0x40020040
 8004174:	40020058 	.word	0x40020058
 8004178:	40020070 	.word	0x40020070
 800417c:	40020088 	.word	0x40020088
 8004180:	400200a0 	.word	0x400200a0
 8004184:	400200b8 	.word	0x400200b8
 8004188:	40020410 	.word	0x40020410
 800418c:	40020428 	.word	0x40020428
 8004190:	40020440 	.word	0x40020440
 8004194:	40020458 	.word	0x40020458
 8004198:	40020470 	.word	0x40020470
 800419c:	40020488 	.word	0x40020488
 80041a0:	400204a0 	.word	0x400204a0
 80041a4:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f003 0301 	and.w	r3, r3, #1
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d1c8      	bne.n	8004148 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80041be:	697a      	ldr	r2, [r7, #20]
 80041c0:	4b83      	ldr	r3, [pc, #524]	@ (80043d0 <HAL_DMA_Init+0x420>)
 80041c2:	4013      	ands	r3, r2
 80041c4:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80041ce:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	691b      	ldr	r3, [r3, #16]
 80041d4:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80041da:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	699b      	ldr	r3, [r3, #24]
 80041e0:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80041e6:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6a1b      	ldr	r3, [r3, #32]
 80041ec:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80041ee:	697a      	ldr	r2, [r7, #20]
 80041f0:	4313      	orrs	r3, r2
 80041f2:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041f8:	2b04      	cmp	r3, #4
 80041fa:	d107      	bne.n	800420c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004204:	4313      	orrs	r3, r2
 8004206:	697a      	ldr	r2, [r7, #20]
 8004208:	4313      	orrs	r3, r2
 800420a:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	2b28      	cmp	r3, #40	@ 0x28
 8004212:	d903      	bls.n	800421c <HAL_DMA_Init+0x26c>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	2b2e      	cmp	r3, #46	@ 0x2e
 800421a:	d91f      	bls.n	800425c <HAL_DMA_Init+0x2ac>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	2b3e      	cmp	r3, #62	@ 0x3e
 8004222:	d903      	bls.n	800422c <HAL_DMA_Init+0x27c>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	2b42      	cmp	r3, #66	@ 0x42
 800422a:	d917      	bls.n	800425c <HAL_DMA_Init+0x2ac>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	2b46      	cmp	r3, #70	@ 0x46
 8004232:	d903      	bls.n	800423c <HAL_DMA_Init+0x28c>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	2b48      	cmp	r3, #72	@ 0x48
 800423a:	d90f      	bls.n	800425c <HAL_DMA_Init+0x2ac>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	2b4e      	cmp	r3, #78	@ 0x4e
 8004242:	d903      	bls.n	800424c <HAL_DMA_Init+0x29c>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	2b52      	cmp	r3, #82	@ 0x52
 800424a:	d907      	bls.n	800425c <HAL_DMA_Init+0x2ac>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	2b73      	cmp	r3, #115	@ 0x73
 8004252:	d905      	bls.n	8004260 <HAL_DMA_Init+0x2b0>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	2b77      	cmp	r3, #119	@ 0x77
 800425a:	d801      	bhi.n	8004260 <HAL_DMA_Init+0x2b0>
 800425c:	2301      	movs	r3, #1
 800425e:	e000      	b.n	8004262 <HAL_DMA_Init+0x2b2>
 8004260:	2300      	movs	r3, #0
 8004262:	2b00      	cmp	r3, #0
 8004264:	d003      	beq.n	800426e <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8004266:	697b      	ldr	r3, [r7, #20]
 8004268:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800426c:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	697a      	ldr	r2, [r7, #20]
 8004274:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	695b      	ldr	r3, [r3, #20]
 800427c:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800427e:	697b      	ldr	r3, [r7, #20]
 8004280:	f023 0307 	bic.w	r3, r3, #7
 8004284:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800428a:	697a      	ldr	r2, [r7, #20]
 800428c:	4313      	orrs	r3, r2
 800428e:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004294:	2b04      	cmp	r3, #4
 8004296:	d117      	bne.n	80042c8 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800429c:	697a      	ldr	r2, [r7, #20]
 800429e:	4313      	orrs	r3, r2
 80042a0:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d00e      	beq.n	80042c8 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80042aa:	6878      	ldr	r0, [r7, #4]
 80042ac:	f001 fdca 	bl	8005e44 <DMA_CheckFifoParam>
 80042b0:	4603      	mov	r3, r0
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d008      	beq.n	80042c8 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2240      	movs	r2, #64	@ 0x40
 80042ba:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2201      	movs	r2, #1
 80042c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 80042c4:	2301      	movs	r3, #1
 80042c6:	e192      	b.n	80045ee <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	697a      	ldr	r2, [r7, #20]
 80042ce:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80042d0:	6878      	ldr	r0, [r7, #4]
 80042d2:	f001 fd05 	bl	8005ce0 <DMA_CalcBaseAndBitshift>
 80042d6:	4603      	mov	r3, r0
 80042d8:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042de:	f003 031f 	and.w	r3, r3, #31
 80042e2:	223f      	movs	r2, #63	@ 0x3f
 80042e4:	409a      	lsls	r2, r3
 80042e6:	68bb      	ldr	r3, [r7, #8]
 80042e8:	609a      	str	r2, [r3, #8]
 80042ea:	e0c8      	b.n	800447e <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4a38      	ldr	r2, [pc, #224]	@ (80043d4 <HAL_DMA_Init+0x424>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d022      	beq.n	800433c <HAL_DMA_Init+0x38c>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4a37      	ldr	r2, [pc, #220]	@ (80043d8 <HAL_DMA_Init+0x428>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d01d      	beq.n	800433c <HAL_DMA_Init+0x38c>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4a35      	ldr	r2, [pc, #212]	@ (80043dc <HAL_DMA_Init+0x42c>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d018      	beq.n	800433c <HAL_DMA_Init+0x38c>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4a34      	ldr	r2, [pc, #208]	@ (80043e0 <HAL_DMA_Init+0x430>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d013      	beq.n	800433c <HAL_DMA_Init+0x38c>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a32      	ldr	r2, [pc, #200]	@ (80043e4 <HAL_DMA_Init+0x434>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d00e      	beq.n	800433c <HAL_DMA_Init+0x38c>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4a31      	ldr	r2, [pc, #196]	@ (80043e8 <HAL_DMA_Init+0x438>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d009      	beq.n	800433c <HAL_DMA_Init+0x38c>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4a2f      	ldr	r2, [pc, #188]	@ (80043ec <HAL_DMA_Init+0x43c>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d004      	beq.n	800433c <HAL_DMA_Init+0x38c>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4a2e      	ldr	r2, [pc, #184]	@ (80043f0 <HAL_DMA_Init+0x440>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d101      	bne.n	8004340 <HAL_DMA_Init+0x390>
 800433c:	2301      	movs	r3, #1
 800433e:	e000      	b.n	8004342 <HAL_DMA_Init+0x392>
 8004340:	2300      	movs	r3, #0
 8004342:	2b00      	cmp	r3, #0
 8004344:	f000 8092 	beq.w	800446c <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a21      	ldr	r2, [pc, #132]	@ (80043d4 <HAL_DMA_Init+0x424>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d021      	beq.n	8004396 <HAL_DMA_Init+0x3e6>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4a20      	ldr	r2, [pc, #128]	@ (80043d8 <HAL_DMA_Init+0x428>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d01c      	beq.n	8004396 <HAL_DMA_Init+0x3e6>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a1e      	ldr	r2, [pc, #120]	@ (80043dc <HAL_DMA_Init+0x42c>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d017      	beq.n	8004396 <HAL_DMA_Init+0x3e6>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4a1d      	ldr	r2, [pc, #116]	@ (80043e0 <HAL_DMA_Init+0x430>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d012      	beq.n	8004396 <HAL_DMA_Init+0x3e6>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4a1b      	ldr	r2, [pc, #108]	@ (80043e4 <HAL_DMA_Init+0x434>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d00d      	beq.n	8004396 <HAL_DMA_Init+0x3e6>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a1a      	ldr	r2, [pc, #104]	@ (80043e8 <HAL_DMA_Init+0x438>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d008      	beq.n	8004396 <HAL_DMA_Init+0x3e6>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4a18      	ldr	r2, [pc, #96]	@ (80043ec <HAL_DMA_Init+0x43c>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d003      	beq.n	8004396 <HAL_DMA_Init+0x3e6>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4a17      	ldr	r2, [pc, #92]	@ (80043f0 <HAL_DMA_Init+0x440>)
 8004394:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2202      	movs	r2, #2
 800439a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2200      	movs	r2, #0
 80043a2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80043ae:	697a      	ldr	r2, [r7, #20]
 80043b0:	4b10      	ldr	r3, [pc, #64]	@ (80043f4 <HAL_DMA_Init+0x444>)
 80043b2:	4013      	ands	r3, r2
 80043b4:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	689b      	ldr	r3, [r3, #8]
 80043ba:	2b40      	cmp	r3, #64	@ 0x40
 80043bc:	d01c      	beq.n	80043f8 <HAL_DMA_Init+0x448>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	689b      	ldr	r3, [r3, #8]
 80043c2:	2b80      	cmp	r3, #128	@ 0x80
 80043c4:	d102      	bne.n	80043cc <HAL_DMA_Init+0x41c>
 80043c6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80043ca:	e016      	b.n	80043fa <HAL_DMA_Init+0x44a>
 80043cc:	2300      	movs	r3, #0
 80043ce:	e014      	b.n	80043fa <HAL_DMA_Init+0x44a>
 80043d0:	fe10803f 	.word	0xfe10803f
 80043d4:	58025408 	.word	0x58025408
 80043d8:	5802541c 	.word	0x5802541c
 80043dc:	58025430 	.word	0x58025430
 80043e0:	58025444 	.word	0x58025444
 80043e4:	58025458 	.word	0x58025458
 80043e8:	5802546c 	.word	0x5802546c
 80043ec:	58025480 	.word	0x58025480
 80043f0:	58025494 	.word	0x58025494
 80043f4:	fffe000f 	.word	0xfffe000f
 80043f8:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80043fa:	687a      	ldr	r2, [r7, #4]
 80043fc:	68d2      	ldr	r2, [r2, #12]
 80043fe:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004400:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	691b      	ldr	r3, [r3, #16]
 8004406:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004408:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	695b      	ldr	r3, [r3, #20]
 800440e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004410:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	699b      	ldr	r3, [r3, #24]
 8004416:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004418:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	69db      	ldr	r3, [r3, #28]
 800441e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004420:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6a1b      	ldr	r3, [r3, #32]
 8004426:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004428:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800442a:	697a      	ldr	r2, [r7, #20]
 800442c:	4313      	orrs	r3, r2
 800442e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	697a      	ldr	r2, [r7, #20]
 8004436:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	461a      	mov	r2, r3
 800443e:	4b6e      	ldr	r3, [pc, #440]	@ (80045f8 <HAL_DMA_Init+0x648>)
 8004440:	4413      	add	r3, r2
 8004442:	4a6e      	ldr	r2, [pc, #440]	@ (80045fc <HAL_DMA_Init+0x64c>)
 8004444:	fba2 2303 	umull	r2, r3, r2, r3
 8004448:	091b      	lsrs	r3, r3, #4
 800444a:	009a      	lsls	r2, r3, #2
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004450:	6878      	ldr	r0, [r7, #4]
 8004452:	f001 fc45 	bl	8005ce0 <DMA_CalcBaseAndBitshift>
 8004456:	4603      	mov	r3, r0
 8004458:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800445e:	f003 031f 	and.w	r3, r3, #31
 8004462:	2201      	movs	r2, #1
 8004464:	409a      	lsls	r2, r3
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	605a      	str	r2, [r3, #4]
 800446a:	e008      	b.n	800447e <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2240      	movs	r2, #64	@ 0x40
 8004470:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2203      	movs	r2, #3
 8004476:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 800447a:	2301      	movs	r3, #1
 800447c:	e0b7      	b.n	80045ee <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a5f      	ldr	r2, [pc, #380]	@ (8004600 <HAL_DMA_Init+0x650>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d072      	beq.n	800456e <HAL_DMA_Init+0x5be>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a5d      	ldr	r2, [pc, #372]	@ (8004604 <HAL_DMA_Init+0x654>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d06d      	beq.n	800456e <HAL_DMA_Init+0x5be>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a5c      	ldr	r2, [pc, #368]	@ (8004608 <HAL_DMA_Init+0x658>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d068      	beq.n	800456e <HAL_DMA_Init+0x5be>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a5a      	ldr	r2, [pc, #360]	@ (800460c <HAL_DMA_Init+0x65c>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d063      	beq.n	800456e <HAL_DMA_Init+0x5be>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a59      	ldr	r2, [pc, #356]	@ (8004610 <HAL_DMA_Init+0x660>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d05e      	beq.n	800456e <HAL_DMA_Init+0x5be>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a57      	ldr	r2, [pc, #348]	@ (8004614 <HAL_DMA_Init+0x664>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d059      	beq.n	800456e <HAL_DMA_Init+0x5be>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a56      	ldr	r2, [pc, #344]	@ (8004618 <HAL_DMA_Init+0x668>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d054      	beq.n	800456e <HAL_DMA_Init+0x5be>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a54      	ldr	r2, [pc, #336]	@ (800461c <HAL_DMA_Init+0x66c>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d04f      	beq.n	800456e <HAL_DMA_Init+0x5be>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4a53      	ldr	r2, [pc, #332]	@ (8004620 <HAL_DMA_Init+0x670>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d04a      	beq.n	800456e <HAL_DMA_Init+0x5be>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a51      	ldr	r2, [pc, #324]	@ (8004624 <HAL_DMA_Init+0x674>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d045      	beq.n	800456e <HAL_DMA_Init+0x5be>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4a50      	ldr	r2, [pc, #320]	@ (8004628 <HAL_DMA_Init+0x678>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d040      	beq.n	800456e <HAL_DMA_Init+0x5be>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a4e      	ldr	r2, [pc, #312]	@ (800462c <HAL_DMA_Init+0x67c>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d03b      	beq.n	800456e <HAL_DMA_Init+0x5be>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a4d      	ldr	r2, [pc, #308]	@ (8004630 <HAL_DMA_Init+0x680>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d036      	beq.n	800456e <HAL_DMA_Init+0x5be>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a4b      	ldr	r2, [pc, #300]	@ (8004634 <HAL_DMA_Init+0x684>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d031      	beq.n	800456e <HAL_DMA_Init+0x5be>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a4a      	ldr	r2, [pc, #296]	@ (8004638 <HAL_DMA_Init+0x688>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d02c      	beq.n	800456e <HAL_DMA_Init+0x5be>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4a48      	ldr	r2, [pc, #288]	@ (800463c <HAL_DMA_Init+0x68c>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d027      	beq.n	800456e <HAL_DMA_Init+0x5be>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4a47      	ldr	r2, [pc, #284]	@ (8004640 <HAL_DMA_Init+0x690>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d022      	beq.n	800456e <HAL_DMA_Init+0x5be>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4a45      	ldr	r2, [pc, #276]	@ (8004644 <HAL_DMA_Init+0x694>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d01d      	beq.n	800456e <HAL_DMA_Init+0x5be>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4a44      	ldr	r2, [pc, #272]	@ (8004648 <HAL_DMA_Init+0x698>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d018      	beq.n	800456e <HAL_DMA_Init+0x5be>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4a42      	ldr	r2, [pc, #264]	@ (800464c <HAL_DMA_Init+0x69c>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d013      	beq.n	800456e <HAL_DMA_Init+0x5be>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4a41      	ldr	r2, [pc, #260]	@ (8004650 <HAL_DMA_Init+0x6a0>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d00e      	beq.n	800456e <HAL_DMA_Init+0x5be>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4a3f      	ldr	r2, [pc, #252]	@ (8004654 <HAL_DMA_Init+0x6a4>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d009      	beq.n	800456e <HAL_DMA_Init+0x5be>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4a3e      	ldr	r2, [pc, #248]	@ (8004658 <HAL_DMA_Init+0x6a8>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d004      	beq.n	800456e <HAL_DMA_Init+0x5be>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4a3c      	ldr	r2, [pc, #240]	@ (800465c <HAL_DMA_Init+0x6ac>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d101      	bne.n	8004572 <HAL_DMA_Init+0x5c2>
 800456e:	2301      	movs	r3, #1
 8004570:	e000      	b.n	8004574 <HAL_DMA_Init+0x5c4>
 8004572:	2300      	movs	r3, #0
 8004574:	2b00      	cmp	r3, #0
 8004576:	d032      	beq.n	80045de <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004578:	6878      	ldr	r0, [r7, #4]
 800457a:	f001 fcdf 	bl	8005f3c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	689b      	ldr	r3, [r3, #8]
 8004582:	2b80      	cmp	r3, #128	@ 0x80
 8004584:	d102      	bne.n	800458c <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2200      	movs	r2, #0
 800458a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	685a      	ldr	r2, [r3, #4]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004594:	b2d2      	uxtb	r2, r2
 8004596:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800459c:	687a      	ldr	r2, [r7, #4]
 800459e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80045a0:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d010      	beq.n	80045cc <HAL_DMA_Init+0x61c>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	2b08      	cmp	r3, #8
 80045b0:	d80c      	bhi.n	80045cc <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80045b2:	6878      	ldr	r0, [r7, #4]
 80045b4:	f001 fd5c 	bl	8006070 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80045bc:	2200      	movs	r2, #0
 80045be:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045c4:	687a      	ldr	r2, [r7, #4]
 80045c6:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80045c8:	605a      	str	r2, [r3, #4]
 80045ca:	e008      	b.n	80045de <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2200      	movs	r2, #0
 80045d0:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2200      	movs	r2, #0
 80045d6:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2200      	movs	r2, #0
 80045dc:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2200      	movs	r2, #0
 80045e2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2201      	movs	r2, #1
 80045e8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80045ec:	2300      	movs	r3, #0
}
 80045ee:	4618      	mov	r0, r3
 80045f0:	3718      	adds	r7, #24
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bd80      	pop	{r7, pc}
 80045f6:	bf00      	nop
 80045f8:	a7fdabf8 	.word	0xa7fdabf8
 80045fc:	cccccccd 	.word	0xcccccccd
 8004600:	40020010 	.word	0x40020010
 8004604:	40020028 	.word	0x40020028
 8004608:	40020040 	.word	0x40020040
 800460c:	40020058 	.word	0x40020058
 8004610:	40020070 	.word	0x40020070
 8004614:	40020088 	.word	0x40020088
 8004618:	400200a0 	.word	0x400200a0
 800461c:	400200b8 	.word	0x400200b8
 8004620:	40020410 	.word	0x40020410
 8004624:	40020428 	.word	0x40020428
 8004628:	40020440 	.word	0x40020440
 800462c:	40020458 	.word	0x40020458
 8004630:	40020470 	.word	0x40020470
 8004634:	40020488 	.word	0x40020488
 8004638:	400204a0 	.word	0x400204a0
 800463c:	400204b8 	.word	0x400204b8
 8004640:	58025408 	.word	0x58025408
 8004644:	5802541c 	.word	0x5802541c
 8004648:	58025430 	.word	0x58025430
 800464c:	58025444 	.word	0x58025444
 8004650:	58025458 	.word	0x58025458
 8004654:	5802546c 	.word	0x5802546c
 8004658:	58025480 	.word	0x58025480
 800465c:	58025494 	.word	0x58025494

08004660 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b086      	sub	sp, #24
 8004664:	af00      	add	r7, sp, #0
 8004666:	60f8      	str	r0, [r7, #12]
 8004668:	60b9      	str	r1, [r7, #8]
 800466a:	607a      	str	r2, [r7, #4]
 800466c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800466e:	2300      	movs	r3, #0
 8004670:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d101      	bne.n	800467c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8004678:	2301      	movs	r3, #1
 800467a:	e226      	b.n	8004aca <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004682:	2b01      	cmp	r3, #1
 8004684:	d101      	bne.n	800468a <HAL_DMA_Start_IT+0x2a>
 8004686:	2302      	movs	r3, #2
 8004688:	e21f      	b.n	8004aca <HAL_DMA_Start_IT+0x46a>
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	2201      	movs	r2, #1
 800468e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004698:	b2db      	uxtb	r3, r3
 800469a:	2b01      	cmp	r3, #1
 800469c:	f040 820a 	bne.w	8004ab4 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	2202      	movs	r2, #2
 80046a4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	2200      	movs	r2, #0
 80046ac:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4a68      	ldr	r2, [pc, #416]	@ (8004854 <HAL_DMA_Start_IT+0x1f4>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d04a      	beq.n	800474e <HAL_DMA_Start_IT+0xee>
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4a66      	ldr	r2, [pc, #408]	@ (8004858 <HAL_DMA_Start_IT+0x1f8>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d045      	beq.n	800474e <HAL_DMA_Start_IT+0xee>
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4a65      	ldr	r2, [pc, #404]	@ (800485c <HAL_DMA_Start_IT+0x1fc>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d040      	beq.n	800474e <HAL_DMA_Start_IT+0xee>
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a63      	ldr	r2, [pc, #396]	@ (8004860 <HAL_DMA_Start_IT+0x200>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d03b      	beq.n	800474e <HAL_DMA_Start_IT+0xee>
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a62      	ldr	r2, [pc, #392]	@ (8004864 <HAL_DMA_Start_IT+0x204>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d036      	beq.n	800474e <HAL_DMA_Start_IT+0xee>
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a60      	ldr	r2, [pc, #384]	@ (8004868 <HAL_DMA_Start_IT+0x208>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d031      	beq.n	800474e <HAL_DMA_Start_IT+0xee>
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4a5f      	ldr	r2, [pc, #380]	@ (800486c <HAL_DMA_Start_IT+0x20c>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d02c      	beq.n	800474e <HAL_DMA_Start_IT+0xee>
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a5d      	ldr	r2, [pc, #372]	@ (8004870 <HAL_DMA_Start_IT+0x210>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d027      	beq.n	800474e <HAL_DMA_Start_IT+0xee>
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4a5c      	ldr	r2, [pc, #368]	@ (8004874 <HAL_DMA_Start_IT+0x214>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d022      	beq.n	800474e <HAL_DMA_Start_IT+0xee>
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a5a      	ldr	r2, [pc, #360]	@ (8004878 <HAL_DMA_Start_IT+0x218>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d01d      	beq.n	800474e <HAL_DMA_Start_IT+0xee>
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a59      	ldr	r2, [pc, #356]	@ (800487c <HAL_DMA_Start_IT+0x21c>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d018      	beq.n	800474e <HAL_DMA_Start_IT+0xee>
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a57      	ldr	r2, [pc, #348]	@ (8004880 <HAL_DMA_Start_IT+0x220>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d013      	beq.n	800474e <HAL_DMA_Start_IT+0xee>
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a56      	ldr	r2, [pc, #344]	@ (8004884 <HAL_DMA_Start_IT+0x224>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d00e      	beq.n	800474e <HAL_DMA_Start_IT+0xee>
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4a54      	ldr	r2, [pc, #336]	@ (8004888 <HAL_DMA_Start_IT+0x228>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d009      	beq.n	800474e <HAL_DMA_Start_IT+0xee>
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4a53      	ldr	r2, [pc, #332]	@ (800488c <HAL_DMA_Start_IT+0x22c>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d004      	beq.n	800474e <HAL_DMA_Start_IT+0xee>
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a51      	ldr	r2, [pc, #324]	@ (8004890 <HAL_DMA_Start_IT+0x230>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d108      	bne.n	8004760 <HAL_DMA_Start_IT+0x100>
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	681a      	ldr	r2, [r3, #0]
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f022 0201 	bic.w	r2, r2, #1
 800475c:	601a      	str	r2, [r3, #0]
 800475e:	e007      	b.n	8004770 <HAL_DMA_Start_IT+0x110>
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	681a      	ldr	r2, [r3, #0]
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f022 0201 	bic.w	r2, r2, #1
 800476e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	687a      	ldr	r2, [r7, #4]
 8004774:	68b9      	ldr	r1, [r7, #8]
 8004776:	68f8      	ldr	r0, [r7, #12]
 8004778:	f001 f906 	bl	8005988 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4a34      	ldr	r2, [pc, #208]	@ (8004854 <HAL_DMA_Start_IT+0x1f4>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d04a      	beq.n	800481c <HAL_DMA_Start_IT+0x1bc>
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4a33      	ldr	r2, [pc, #204]	@ (8004858 <HAL_DMA_Start_IT+0x1f8>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d045      	beq.n	800481c <HAL_DMA_Start_IT+0x1bc>
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4a31      	ldr	r2, [pc, #196]	@ (800485c <HAL_DMA_Start_IT+0x1fc>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d040      	beq.n	800481c <HAL_DMA_Start_IT+0x1bc>
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4a30      	ldr	r2, [pc, #192]	@ (8004860 <HAL_DMA_Start_IT+0x200>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d03b      	beq.n	800481c <HAL_DMA_Start_IT+0x1bc>
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a2e      	ldr	r2, [pc, #184]	@ (8004864 <HAL_DMA_Start_IT+0x204>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d036      	beq.n	800481c <HAL_DMA_Start_IT+0x1bc>
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4a2d      	ldr	r2, [pc, #180]	@ (8004868 <HAL_DMA_Start_IT+0x208>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d031      	beq.n	800481c <HAL_DMA_Start_IT+0x1bc>
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a2b      	ldr	r2, [pc, #172]	@ (800486c <HAL_DMA_Start_IT+0x20c>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d02c      	beq.n	800481c <HAL_DMA_Start_IT+0x1bc>
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4a2a      	ldr	r2, [pc, #168]	@ (8004870 <HAL_DMA_Start_IT+0x210>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d027      	beq.n	800481c <HAL_DMA_Start_IT+0x1bc>
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a28      	ldr	r2, [pc, #160]	@ (8004874 <HAL_DMA_Start_IT+0x214>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d022      	beq.n	800481c <HAL_DMA_Start_IT+0x1bc>
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4a27      	ldr	r2, [pc, #156]	@ (8004878 <HAL_DMA_Start_IT+0x218>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d01d      	beq.n	800481c <HAL_DMA_Start_IT+0x1bc>
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4a25      	ldr	r2, [pc, #148]	@ (800487c <HAL_DMA_Start_IT+0x21c>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d018      	beq.n	800481c <HAL_DMA_Start_IT+0x1bc>
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4a24      	ldr	r2, [pc, #144]	@ (8004880 <HAL_DMA_Start_IT+0x220>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d013      	beq.n	800481c <HAL_DMA_Start_IT+0x1bc>
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4a22      	ldr	r2, [pc, #136]	@ (8004884 <HAL_DMA_Start_IT+0x224>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d00e      	beq.n	800481c <HAL_DMA_Start_IT+0x1bc>
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4a21      	ldr	r2, [pc, #132]	@ (8004888 <HAL_DMA_Start_IT+0x228>)
 8004804:	4293      	cmp	r3, r2
 8004806:	d009      	beq.n	800481c <HAL_DMA_Start_IT+0x1bc>
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4a1f      	ldr	r2, [pc, #124]	@ (800488c <HAL_DMA_Start_IT+0x22c>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d004      	beq.n	800481c <HAL_DMA_Start_IT+0x1bc>
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4a1e      	ldr	r2, [pc, #120]	@ (8004890 <HAL_DMA_Start_IT+0x230>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d101      	bne.n	8004820 <HAL_DMA_Start_IT+0x1c0>
 800481c:	2301      	movs	r3, #1
 800481e:	e000      	b.n	8004822 <HAL_DMA_Start_IT+0x1c2>
 8004820:	2300      	movs	r3, #0
 8004822:	2b00      	cmp	r3, #0
 8004824:	d036      	beq.n	8004894 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f023 021e 	bic.w	r2, r3, #30
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f042 0216 	orr.w	r2, r2, #22
 8004838:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800483e:	2b00      	cmp	r3, #0
 8004840:	d03e      	beq.n	80048c0 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	681a      	ldr	r2, [r3, #0]
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f042 0208 	orr.w	r2, r2, #8
 8004850:	601a      	str	r2, [r3, #0]
 8004852:	e035      	b.n	80048c0 <HAL_DMA_Start_IT+0x260>
 8004854:	40020010 	.word	0x40020010
 8004858:	40020028 	.word	0x40020028
 800485c:	40020040 	.word	0x40020040
 8004860:	40020058 	.word	0x40020058
 8004864:	40020070 	.word	0x40020070
 8004868:	40020088 	.word	0x40020088
 800486c:	400200a0 	.word	0x400200a0
 8004870:	400200b8 	.word	0x400200b8
 8004874:	40020410 	.word	0x40020410
 8004878:	40020428 	.word	0x40020428
 800487c:	40020440 	.word	0x40020440
 8004880:	40020458 	.word	0x40020458
 8004884:	40020470 	.word	0x40020470
 8004888:	40020488 	.word	0x40020488
 800488c:	400204a0 	.word	0x400204a0
 8004890:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f023 020e 	bic.w	r2, r3, #14
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f042 020a 	orr.w	r2, r2, #10
 80048a6:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d007      	beq.n	80048c0 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	681a      	ldr	r2, [r3, #0]
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f042 0204 	orr.w	r2, r2, #4
 80048be:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a83      	ldr	r2, [pc, #524]	@ (8004ad4 <HAL_DMA_Start_IT+0x474>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d072      	beq.n	80049b0 <HAL_DMA_Start_IT+0x350>
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4a82      	ldr	r2, [pc, #520]	@ (8004ad8 <HAL_DMA_Start_IT+0x478>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d06d      	beq.n	80049b0 <HAL_DMA_Start_IT+0x350>
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4a80      	ldr	r2, [pc, #512]	@ (8004adc <HAL_DMA_Start_IT+0x47c>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d068      	beq.n	80049b0 <HAL_DMA_Start_IT+0x350>
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4a7f      	ldr	r2, [pc, #508]	@ (8004ae0 <HAL_DMA_Start_IT+0x480>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d063      	beq.n	80049b0 <HAL_DMA_Start_IT+0x350>
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4a7d      	ldr	r2, [pc, #500]	@ (8004ae4 <HAL_DMA_Start_IT+0x484>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d05e      	beq.n	80049b0 <HAL_DMA_Start_IT+0x350>
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4a7c      	ldr	r2, [pc, #496]	@ (8004ae8 <HAL_DMA_Start_IT+0x488>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d059      	beq.n	80049b0 <HAL_DMA_Start_IT+0x350>
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a7a      	ldr	r2, [pc, #488]	@ (8004aec <HAL_DMA_Start_IT+0x48c>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d054      	beq.n	80049b0 <HAL_DMA_Start_IT+0x350>
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4a79      	ldr	r2, [pc, #484]	@ (8004af0 <HAL_DMA_Start_IT+0x490>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d04f      	beq.n	80049b0 <HAL_DMA_Start_IT+0x350>
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4a77      	ldr	r2, [pc, #476]	@ (8004af4 <HAL_DMA_Start_IT+0x494>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d04a      	beq.n	80049b0 <HAL_DMA_Start_IT+0x350>
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4a76      	ldr	r2, [pc, #472]	@ (8004af8 <HAL_DMA_Start_IT+0x498>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d045      	beq.n	80049b0 <HAL_DMA_Start_IT+0x350>
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4a74      	ldr	r2, [pc, #464]	@ (8004afc <HAL_DMA_Start_IT+0x49c>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d040      	beq.n	80049b0 <HAL_DMA_Start_IT+0x350>
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4a73      	ldr	r2, [pc, #460]	@ (8004b00 <HAL_DMA_Start_IT+0x4a0>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d03b      	beq.n	80049b0 <HAL_DMA_Start_IT+0x350>
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4a71      	ldr	r2, [pc, #452]	@ (8004b04 <HAL_DMA_Start_IT+0x4a4>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d036      	beq.n	80049b0 <HAL_DMA_Start_IT+0x350>
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4a70      	ldr	r2, [pc, #448]	@ (8004b08 <HAL_DMA_Start_IT+0x4a8>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d031      	beq.n	80049b0 <HAL_DMA_Start_IT+0x350>
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a6e      	ldr	r2, [pc, #440]	@ (8004b0c <HAL_DMA_Start_IT+0x4ac>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d02c      	beq.n	80049b0 <HAL_DMA_Start_IT+0x350>
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4a6d      	ldr	r2, [pc, #436]	@ (8004b10 <HAL_DMA_Start_IT+0x4b0>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d027      	beq.n	80049b0 <HAL_DMA_Start_IT+0x350>
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4a6b      	ldr	r2, [pc, #428]	@ (8004b14 <HAL_DMA_Start_IT+0x4b4>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d022      	beq.n	80049b0 <HAL_DMA_Start_IT+0x350>
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4a6a      	ldr	r2, [pc, #424]	@ (8004b18 <HAL_DMA_Start_IT+0x4b8>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d01d      	beq.n	80049b0 <HAL_DMA_Start_IT+0x350>
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4a68      	ldr	r2, [pc, #416]	@ (8004b1c <HAL_DMA_Start_IT+0x4bc>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d018      	beq.n	80049b0 <HAL_DMA_Start_IT+0x350>
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4a67      	ldr	r2, [pc, #412]	@ (8004b20 <HAL_DMA_Start_IT+0x4c0>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d013      	beq.n	80049b0 <HAL_DMA_Start_IT+0x350>
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4a65      	ldr	r2, [pc, #404]	@ (8004b24 <HAL_DMA_Start_IT+0x4c4>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d00e      	beq.n	80049b0 <HAL_DMA_Start_IT+0x350>
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4a64      	ldr	r2, [pc, #400]	@ (8004b28 <HAL_DMA_Start_IT+0x4c8>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d009      	beq.n	80049b0 <HAL_DMA_Start_IT+0x350>
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4a62      	ldr	r2, [pc, #392]	@ (8004b2c <HAL_DMA_Start_IT+0x4cc>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d004      	beq.n	80049b0 <HAL_DMA_Start_IT+0x350>
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4a61      	ldr	r2, [pc, #388]	@ (8004b30 <HAL_DMA_Start_IT+0x4d0>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d101      	bne.n	80049b4 <HAL_DMA_Start_IT+0x354>
 80049b0:	2301      	movs	r3, #1
 80049b2:	e000      	b.n	80049b6 <HAL_DMA_Start_IT+0x356>
 80049b4:	2300      	movs	r3, #0
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d01a      	beq.n	80049f0 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d007      	beq.n	80049d8 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80049cc:	681a      	ldr	r2, [r3, #0]
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80049d2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80049d6:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d007      	beq.n	80049f0 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80049e4:	681a      	ldr	r2, [r3, #0]
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80049ea:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80049ee:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4a37      	ldr	r2, [pc, #220]	@ (8004ad4 <HAL_DMA_Start_IT+0x474>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d04a      	beq.n	8004a90 <HAL_DMA_Start_IT+0x430>
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4a36      	ldr	r2, [pc, #216]	@ (8004ad8 <HAL_DMA_Start_IT+0x478>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d045      	beq.n	8004a90 <HAL_DMA_Start_IT+0x430>
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4a34      	ldr	r2, [pc, #208]	@ (8004adc <HAL_DMA_Start_IT+0x47c>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d040      	beq.n	8004a90 <HAL_DMA_Start_IT+0x430>
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4a33      	ldr	r2, [pc, #204]	@ (8004ae0 <HAL_DMA_Start_IT+0x480>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d03b      	beq.n	8004a90 <HAL_DMA_Start_IT+0x430>
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4a31      	ldr	r2, [pc, #196]	@ (8004ae4 <HAL_DMA_Start_IT+0x484>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d036      	beq.n	8004a90 <HAL_DMA_Start_IT+0x430>
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4a30      	ldr	r2, [pc, #192]	@ (8004ae8 <HAL_DMA_Start_IT+0x488>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d031      	beq.n	8004a90 <HAL_DMA_Start_IT+0x430>
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a2e      	ldr	r2, [pc, #184]	@ (8004aec <HAL_DMA_Start_IT+0x48c>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d02c      	beq.n	8004a90 <HAL_DMA_Start_IT+0x430>
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4a2d      	ldr	r2, [pc, #180]	@ (8004af0 <HAL_DMA_Start_IT+0x490>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d027      	beq.n	8004a90 <HAL_DMA_Start_IT+0x430>
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	4a2b      	ldr	r2, [pc, #172]	@ (8004af4 <HAL_DMA_Start_IT+0x494>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d022      	beq.n	8004a90 <HAL_DMA_Start_IT+0x430>
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4a2a      	ldr	r2, [pc, #168]	@ (8004af8 <HAL_DMA_Start_IT+0x498>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d01d      	beq.n	8004a90 <HAL_DMA_Start_IT+0x430>
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4a28      	ldr	r2, [pc, #160]	@ (8004afc <HAL_DMA_Start_IT+0x49c>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d018      	beq.n	8004a90 <HAL_DMA_Start_IT+0x430>
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4a27      	ldr	r2, [pc, #156]	@ (8004b00 <HAL_DMA_Start_IT+0x4a0>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d013      	beq.n	8004a90 <HAL_DMA_Start_IT+0x430>
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4a25      	ldr	r2, [pc, #148]	@ (8004b04 <HAL_DMA_Start_IT+0x4a4>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d00e      	beq.n	8004a90 <HAL_DMA_Start_IT+0x430>
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4a24      	ldr	r2, [pc, #144]	@ (8004b08 <HAL_DMA_Start_IT+0x4a8>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d009      	beq.n	8004a90 <HAL_DMA_Start_IT+0x430>
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a22      	ldr	r2, [pc, #136]	@ (8004b0c <HAL_DMA_Start_IT+0x4ac>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d004      	beq.n	8004a90 <HAL_DMA_Start_IT+0x430>
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4a21      	ldr	r2, [pc, #132]	@ (8004b10 <HAL_DMA_Start_IT+0x4b0>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d108      	bne.n	8004aa2 <HAL_DMA_Start_IT+0x442>
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	681a      	ldr	r2, [r3, #0]
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f042 0201 	orr.w	r2, r2, #1
 8004a9e:	601a      	str	r2, [r3, #0]
 8004aa0:	e012      	b.n	8004ac8 <HAL_DMA_Start_IT+0x468>
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	681a      	ldr	r2, [r3, #0]
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f042 0201 	orr.w	r2, r2, #1
 8004ab0:	601a      	str	r2, [r3, #0]
 8004ab2:	e009      	b.n	8004ac8 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004aba:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004ac8:	7dfb      	ldrb	r3, [r7, #23]
}
 8004aca:	4618      	mov	r0, r3
 8004acc:	3718      	adds	r7, #24
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	bd80      	pop	{r7, pc}
 8004ad2:	bf00      	nop
 8004ad4:	40020010 	.word	0x40020010
 8004ad8:	40020028 	.word	0x40020028
 8004adc:	40020040 	.word	0x40020040
 8004ae0:	40020058 	.word	0x40020058
 8004ae4:	40020070 	.word	0x40020070
 8004ae8:	40020088 	.word	0x40020088
 8004aec:	400200a0 	.word	0x400200a0
 8004af0:	400200b8 	.word	0x400200b8
 8004af4:	40020410 	.word	0x40020410
 8004af8:	40020428 	.word	0x40020428
 8004afc:	40020440 	.word	0x40020440
 8004b00:	40020458 	.word	0x40020458
 8004b04:	40020470 	.word	0x40020470
 8004b08:	40020488 	.word	0x40020488
 8004b0c:	400204a0 	.word	0x400204a0
 8004b10:	400204b8 	.word	0x400204b8
 8004b14:	58025408 	.word	0x58025408
 8004b18:	5802541c 	.word	0x5802541c
 8004b1c:	58025430 	.word	0x58025430
 8004b20:	58025444 	.word	0x58025444
 8004b24:	58025458 	.word	0x58025458
 8004b28:	5802546c 	.word	0x5802546c
 8004b2c:	58025480 	.word	0x58025480
 8004b30:	58025494 	.word	0x58025494

08004b34 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b08a      	sub	sp, #40	@ 0x28
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004b40:	4b67      	ldr	r3, [pc, #412]	@ (8004ce0 <HAL_DMA_IRQHandler+0x1ac>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4a67      	ldr	r2, [pc, #412]	@ (8004ce4 <HAL_DMA_IRQHandler+0x1b0>)
 8004b46:	fba2 2303 	umull	r2, r3, r2, r3
 8004b4a:	0a9b      	lsrs	r3, r3, #10
 8004b4c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b52:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b58:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8004b5a:	6a3b      	ldr	r3, [r7, #32]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8004b60:	69fb      	ldr	r3, [r7, #28]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4a5f      	ldr	r2, [pc, #380]	@ (8004ce8 <HAL_DMA_IRQHandler+0x1b4>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d04a      	beq.n	8004c06 <HAL_DMA_IRQHandler+0xd2>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4a5d      	ldr	r2, [pc, #372]	@ (8004cec <HAL_DMA_IRQHandler+0x1b8>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d045      	beq.n	8004c06 <HAL_DMA_IRQHandler+0xd2>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4a5c      	ldr	r2, [pc, #368]	@ (8004cf0 <HAL_DMA_IRQHandler+0x1bc>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d040      	beq.n	8004c06 <HAL_DMA_IRQHandler+0xd2>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a5a      	ldr	r2, [pc, #360]	@ (8004cf4 <HAL_DMA_IRQHandler+0x1c0>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d03b      	beq.n	8004c06 <HAL_DMA_IRQHandler+0xd2>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4a59      	ldr	r2, [pc, #356]	@ (8004cf8 <HAL_DMA_IRQHandler+0x1c4>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d036      	beq.n	8004c06 <HAL_DMA_IRQHandler+0xd2>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4a57      	ldr	r2, [pc, #348]	@ (8004cfc <HAL_DMA_IRQHandler+0x1c8>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d031      	beq.n	8004c06 <HAL_DMA_IRQHandler+0xd2>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4a56      	ldr	r2, [pc, #344]	@ (8004d00 <HAL_DMA_IRQHandler+0x1cc>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d02c      	beq.n	8004c06 <HAL_DMA_IRQHandler+0xd2>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4a54      	ldr	r2, [pc, #336]	@ (8004d04 <HAL_DMA_IRQHandler+0x1d0>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d027      	beq.n	8004c06 <HAL_DMA_IRQHandler+0xd2>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4a53      	ldr	r2, [pc, #332]	@ (8004d08 <HAL_DMA_IRQHandler+0x1d4>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d022      	beq.n	8004c06 <HAL_DMA_IRQHandler+0xd2>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4a51      	ldr	r2, [pc, #324]	@ (8004d0c <HAL_DMA_IRQHandler+0x1d8>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d01d      	beq.n	8004c06 <HAL_DMA_IRQHandler+0xd2>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4a50      	ldr	r2, [pc, #320]	@ (8004d10 <HAL_DMA_IRQHandler+0x1dc>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d018      	beq.n	8004c06 <HAL_DMA_IRQHandler+0xd2>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4a4e      	ldr	r2, [pc, #312]	@ (8004d14 <HAL_DMA_IRQHandler+0x1e0>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d013      	beq.n	8004c06 <HAL_DMA_IRQHandler+0xd2>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4a4d      	ldr	r2, [pc, #308]	@ (8004d18 <HAL_DMA_IRQHandler+0x1e4>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d00e      	beq.n	8004c06 <HAL_DMA_IRQHandler+0xd2>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4a4b      	ldr	r2, [pc, #300]	@ (8004d1c <HAL_DMA_IRQHandler+0x1e8>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d009      	beq.n	8004c06 <HAL_DMA_IRQHandler+0xd2>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4a4a      	ldr	r2, [pc, #296]	@ (8004d20 <HAL_DMA_IRQHandler+0x1ec>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d004      	beq.n	8004c06 <HAL_DMA_IRQHandler+0xd2>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4a48      	ldr	r2, [pc, #288]	@ (8004d24 <HAL_DMA_IRQHandler+0x1f0>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d101      	bne.n	8004c0a <HAL_DMA_IRQHandler+0xd6>
 8004c06:	2301      	movs	r3, #1
 8004c08:	e000      	b.n	8004c0c <HAL_DMA_IRQHandler+0xd8>
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	f000 842b 	beq.w	8005468 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c16:	f003 031f 	and.w	r3, r3, #31
 8004c1a:	2208      	movs	r2, #8
 8004c1c:	409a      	lsls	r2, r3
 8004c1e:	69bb      	ldr	r3, [r7, #24]
 8004c20:	4013      	ands	r3, r2
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	f000 80a2 	beq.w	8004d6c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4a2e      	ldr	r2, [pc, #184]	@ (8004ce8 <HAL_DMA_IRQHandler+0x1b4>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d04a      	beq.n	8004cc8 <HAL_DMA_IRQHandler+0x194>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4a2d      	ldr	r2, [pc, #180]	@ (8004cec <HAL_DMA_IRQHandler+0x1b8>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d045      	beq.n	8004cc8 <HAL_DMA_IRQHandler+0x194>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4a2b      	ldr	r2, [pc, #172]	@ (8004cf0 <HAL_DMA_IRQHandler+0x1bc>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d040      	beq.n	8004cc8 <HAL_DMA_IRQHandler+0x194>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4a2a      	ldr	r2, [pc, #168]	@ (8004cf4 <HAL_DMA_IRQHandler+0x1c0>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d03b      	beq.n	8004cc8 <HAL_DMA_IRQHandler+0x194>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4a28      	ldr	r2, [pc, #160]	@ (8004cf8 <HAL_DMA_IRQHandler+0x1c4>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d036      	beq.n	8004cc8 <HAL_DMA_IRQHandler+0x194>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4a27      	ldr	r2, [pc, #156]	@ (8004cfc <HAL_DMA_IRQHandler+0x1c8>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d031      	beq.n	8004cc8 <HAL_DMA_IRQHandler+0x194>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4a25      	ldr	r2, [pc, #148]	@ (8004d00 <HAL_DMA_IRQHandler+0x1cc>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d02c      	beq.n	8004cc8 <HAL_DMA_IRQHandler+0x194>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4a24      	ldr	r2, [pc, #144]	@ (8004d04 <HAL_DMA_IRQHandler+0x1d0>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d027      	beq.n	8004cc8 <HAL_DMA_IRQHandler+0x194>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4a22      	ldr	r2, [pc, #136]	@ (8004d08 <HAL_DMA_IRQHandler+0x1d4>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d022      	beq.n	8004cc8 <HAL_DMA_IRQHandler+0x194>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4a21      	ldr	r2, [pc, #132]	@ (8004d0c <HAL_DMA_IRQHandler+0x1d8>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d01d      	beq.n	8004cc8 <HAL_DMA_IRQHandler+0x194>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a1f      	ldr	r2, [pc, #124]	@ (8004d10 <HAL_DMA_IRQHandler+0x1dc>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d018      	beq.n	8004cc8 <HAL_DMA_IRQHandler+0x194>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4a1e      	ldr	r2, [pc, #120]	@ (8004d14 <HAL_DMA_IRQHandler+0x1e0>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d013      	beq.n	8004cc8 <HAL_DMA_IRQHandler+0x194>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a1c      	ldr	r2, [pc, #112]	@ (8004d18 <HAL_DMA_IRQHandler+0x1e4>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d00e      	beq.n	8004cc8 <HAL_DMA_IRQHandler+0x194>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4a1b      	ldr	r2, [pc, #108]	@ (8004d1c <HAL_DMA_IRQHandler+0x1e8>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d009      	beq.n	8004cc8 <HAL_DMA_IRQHandler+0x194>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4a19      	ldr	r2, [pc, #100]	@ (8004d20 <HAL_DMA_IRQHandler+0x1ec>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d004      	beq.n	8004cc8 <HAL_DMA_IRQHandler+0x194>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4a18      	ldr	r2, [pc, #96]	@ (8004d24 <HAL_DMA_IRQHandler+0x1f0>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d12f      	bne.n	8004d28 <HAL_DMA_IRQHandler+0x1f4>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f003 0304 	and.w	r3, r3, #4
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	bf14      	ite	ne
 8004cd6:	2301      	movne	r3, #1
 8004cd8:	2300      	moveq	r3, #0
 8004cda:	b2db      	uxtb	r3, r3
 8004cdc:	e02e      	b.n	8004d3c <HAL_DMA_IRQHandler+0x208>
 8004cde:	bf00      	nop
 8004ce0:	24000000 	.word	0x24000000
 8004ce4:	1b4e81b5 	.word	0x1b4e81b5
 8004ce8:	40020010 	.word	0x40020010
 8004cec:	40020028 	.word	0x40020028
 8004cf0:	40020040 	.word	0x40020040
 8004cf4:	40020058 	.word	0x40020058
 8004cf8:	40020070 	.word	0x40020070
 8004cfc:	40020088 	.word	0x40020088
 8004d00:	400200a0 	.word	0x400200a0
 8004d04:	400200b8 	.word	0x400200b8
 8004d08:	40020410 	.word	0x40020410
 8004d0c:	40020428 	.word	0x40020428
 8004d10:	40020440 	.word	0x40020440
 8004d14:	40020458 	.word	0x40020458
 8004d18:	40020470 	.word	0x40020470
 8004d1c:	40020488 	.word	0x40020488
 8004d20:	400204a0 	.word	0x400204a0
 8004d24:	400204b8 	.word	0x400204b8
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f003 0308 	and.w	r3, r3, #8
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	bf14      	ite	ne
 8004d36:	2301      	movne	r3, #1
 8004d38:	2300      	moveq	r3, #0
 8004d3a:	b2db      	uxtb	r3, r3
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d015      	beq.n	8004d6c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	681a      	ldr	r2, [r3, #0]
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f022 0204 	bic.w	r2, r2, #4
 8004d4e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d54:	f003 031f 	and.w	r3, r3, #31
 8004d58:	2208      	movs	r2, #8
 8004d5a:	409a      	lsls	r2, r3
 8004d5c:	6a3b      	ldr	r3, [r7, #32]
 8004d5e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d64:	f043 0201 	orr.w	r2, r3, #1
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d70:	f003 031f 	and.w	r3, r3, #31
 8004d74:	69ba      	ldr	r2, [r7, #24]
 8004d76:	fa22 f303 	lsr.w	r3, r2, r3
 8004d7a:	f003 0301 	and.w	r3, r3, #1
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d06e      	beq.n	8004e60 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4a69      	ldr	r2, [pc, #420]	@ (8004f2c <HAL_DMA_IRQHandler+0x3f8>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d04a      	beq.n	8004e22 <HAL_DMA_IRQHandler+0x2ee>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4a67      	ldr	r2, [pc, #412]	@ (8004f30 <HAL_DMA_IRQHandler+0x3fc>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d045      	beq.n	8004e22 <HAL_DMA_IRQHandler+0x2ee>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4a66      	ldr	r2, [pc, #408]	@ (8004f34 <HAL_DMA_IRQHandler+0x400>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d040      	beq.n	8004e22 <HAL_DMA_IRQHandler+0x2ee>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4a64      	ldr	r2, [pc, #400]	@ (8004f38 <HAL_DMA_IRQHandler+0x404>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d03b      	beq.n	8004e22 <HAL_DMA_IRQHandler+0x2ee>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4a63      	ldr	r2, [pc, #396]	@ (8004f3c <HAL_DMA_IRQHandler+0x408>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d036      	beq.n	8004e22 <HAL_DMA_IRQHandler+0x2ee>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4a61      	ldr	r2, [pc, #388]	@ (8004f40 <HAL_DMA_IRQHandler+0x40c>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d031      	beq.n	8004e22 <HAL_DMA_IRQHandler+0x2ee>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4a60      	ldr	r2, [pc, #384]	@ (8004f44 <HAL_DMA_IRQHandler+0x410>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d02c      	beq.n	8004e22 <HAL_DMA_IRQHandler+0x2ee>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4a5e      	ldr	r2, [pc, #376]	@ (8004f48 <HAL_DMA_IRQHandler+0x414>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d027      	beq.n	8004e22 <HAL_DMA_IRQHandler+0x2ee>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4a5d      	ldr	r2, [pc, #372]	@ (8004f4c <HAL_DMA_IRQHandler+0x418>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d022      	beq.n	8004e22 <HAL_DMA_IRQHandler+0x2ee>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4a5b      	ldr	r2, [pc, #364]	@ (8004f50 <HAL_DMA_IRQHandler+0x41c>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d01d      	beq.n	8004e22 <HAL_DMA_IRQHandler+0x2ee>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4a5a      	ldr	r2, [pc, #360]	@ (8004f54 <HAL_DMA_IRQHandler+0x420>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d018      	beq.n	8004e22 <HAL_DMA_IRQHandler+0x2ee>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4a58      	ldr	r2, [pc, #352]	@ (8004f58 <HAL_DMA_IRQHandler+0x424>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d013      	beq.n	8004e22 <HAL_DMA_IRQHandler+0x2ee>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4a57      	ldr	r2, [pc, #348]	@ (8004f5c <HAL_DMA_IRQHandler+0x428>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d00e      	beq.n	8004e22 <HAL_DMA_IRQHandler+0x2ee>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4a55      	ldr	r2, [pc, #340]	@ (8004f60 <HAL_DMA_IRQHandler+0x42c>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d009      	beq.n	8004e22 <HAL_DMA_IRQHandler+0x2ee>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4a54      	ldr	r2, [pc, #336]	@ (8004f64 <HAL_DMA_IRQHandler+0x430>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d004      	beq.n	8004e22 <HAL_DMA_IRQHandler+0x2ee>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4a52      	ldr	r2, [pc, #328]	@ (8004f68 <HAL_DMA_IRQHandler+0x434>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d10a      	bne.n	8004e38 <HAL_DMA_IRQHandler+0x304>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	695b      	ldr	r3, [r3, #20]
 8004e28:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	bf14      	ite	ne
 8004e30:	2301      	movne	r3, #1
 8004e32:	2300      	moveq	r3, #0
 8004e34:	b2db      	uxtb	r3, r3
 8004e36:	e003      	b.n	8004e40 <HAL_DMA_IRQHandler+0x30c>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	2300      	movs	r3, #0
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d00d      	beq.n	8004e60 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e48:	f003 031f 	and.w	r3, r3, #31
 8004e4c:	2201      	movs	r2, #1
 8004e4e:	409a      	lsls	r2, r3
 8004e50:	6a3b      	ldr	r3, [r7, #32]
 8004e52:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e58:	f043 0202 	orr.w	r2, r3, #2
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e64:	f003 031f 	and.w	r3, r3, #31
 8004e68:	2204      	movs	r2, #4
 8004e6a:	409a      	lsls	r2, r3
 8004e6c:	69bb      	ldr	r3, [r7, #24]
 8004e6e:	4013      	ands	r3, r2
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	f000 808f 	beq.w	8004f94 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4a2c      	ldr	r2, [pc, #176]	@ (8004f2c <HAL_DMA_IRQHandler+0x3f8>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d04a      	beq.n	8004f16 <HAL_DMA_IRQHandler+0x3e2>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4a2a      	ldr	r2, [pc, #168]	@ (8004f30 <HAL_DMA_IRQHandler+0x3fc>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d045      	beq.n	8004f16 <HAL_DMA_IRQHandler+0x3e2>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	4a29      	ldr	r2, [pc, #164]	@ (8004f34 <HAL_DMA_IRQHandler+0x400>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d040      	beq.n	8004f16 <HAL_DMA_IRQHandler+0x3e2>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4a27      	ldr	r2, [pc, #156]	@ (8004f38 <HAL_DMA_IRQHandler+0x404>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d03b      	beq.n	8004f16 <HAL_DMA_IRQHandler+0x3e2>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	4a26      	ldr	r2, [pc, #152]	@ (8004f3c <HAL_DMA_IRQHandler+0x408>)
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d036      	beq.n	8004f16 <HAL_DMA_IRQHandler+0x3e2>
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4a24      	ldr	r2, [pc, #144]	@ (8004f40 <HAL_DMA_IRQHandler+0x40c>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d031      	beq.n	8004f16 <HAL_DMA_IRQHandler+0x3e2>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	4a23      	ldr	r2, [pc, #140]	@ (8004f44 <HAL_DMA_IRQHandler+0x410>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d02c      	beq.n	8004f16 <HAL_DMA_IRQHandler+0x3e2>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4a21      	ldr	r2, [pc, #132]	@ (8004f48 <HAL_DMA_IRQHandler+0x414>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d027      	beq.n	8004f16 <HAL_DMA_IRQHandler+0x3e2>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4a20      	ldr	r2, [pc, #128]	@ (8004f4c <HAL_DMA_IRQHandler+0x418>)
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d022      	beq.n	8004f16 <HAL_DMA_IRQHandler+0x3e2>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4a1e      	ldr	r2, [pc, #120]	@ (8004f50 <HAL_DMA_IRQHandler+0x41c>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d01d      	beq.n	8004f16 <HAL_DMA_IRQHandler+0x3e2>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	4a1d      	ldr	r2, [pc, #116]	@ (8004f54 <HAL_DMA_IRQHandler+0x420>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d018      	beq.n	8004f16 <HAL_DMA_IRQHandler+0x3e2>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4a1b      	ldr	r2, [pc, #108]	@ (8004f58 <HAL_DMA_IRQHandler+0x424>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d013      	beq.n	8004f16 <HAL_DMA_IRQHandler+0x3e2>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	4a1a      	ldr	r2, [pc, #104]	@ (8004f5c <HAL_DMA_IRQHandler+0x428>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d00e      	beq.n	8004f16 <HAL_DMA_IRQHandler+0x3e2>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4a18      	ldr	r2, [pc, #96]	@ (8004f60 <HAL_DMA_IRQHandler+0x42c>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d009      	beq.n	8004f16 <HAL_DMA_IRQHandler+0x3e2>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4a17      	ldr	r2, [pc, #92]	@ (8004f64 <HAL_DMA_IRQHandler+0x430>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d004      	beq.n	8004f16 <HAL_DMA_IRQHandler+0x3e2>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4a15      	ldr	r2, [pc, #84]	@ (8004f68 <HAL_DMA_IRQHandler+0x434>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d12a      	bne.n	8004f6c <HAL_DMA_IRQHandler+0x438>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f003 0302 	and.w	r3, r3, #2
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	bf14      	ite	ne
 8004f24:	2301      	movne	r3, #1
 8004f26:	2300      	moveq	r3, #0
 8004f28:	b2db      	uxtb	r3, r3
 8004f2a:	e023      	b.n	8004f74 <HAL_DMA_IRQHandler+0x440>
 8004f2c:	40020010 	.word	0x40020010
 8004f30:	40020028 	.word	0x40020028
 8004f34:	40020040 	.word	0x40020040
 8004f38:	40020058 	.word	0x40020058
 8004f3c:	40020070 	.word	0x40020070
 8004f40:	40020088 	.word	0x40020088
 8004f44:	400200a0 	.word	0x400200a0
 8004f48:	400200b8 	.word	0x400200b8
 8004f4c:	40020410 	.word	0x40020410
 8004f50:	40020428 	.word	0x40020428
 8004f54:	40020440 	.word	0x40020440
 8004f58:	40020458 	.word	0x40020458
 8004f5c:	40020470 	.word	0x40020470
 8004f60:	40020488 	.word	0x40020488
 8004f64:	400204a0 	.word	0x400204a0
 8004f68:	400204b8 	.word	0x400204b8
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	2300      	movs	r3, #0
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d00d      	beq.n	8004f94 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f7c:	f003 031f 	and.w	r3, r3, #31
 8004f80:	2204      	movs	r2, #4
 8004f82:	409a      	lsls	r2, r3
 8004f84:	6a3b      	ldr	r3, [r7, #32]
 8004f86:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f8c:	f043 0204 	orr.w	r2, r3, #4
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f98:	f003 031f 	and.w	r3, r3, #31
 8004f9c:	2210      	movs	r2, #16
 8004f9e:	409a      	lsls	r2, r3
 8004fa0:	69bb      	ldr	r3, [r7, #24]
 8004fa2:	4013      	ands	r3, r2
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	f000 80a6 	beq.w	80050f6 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4a85      	ldr	r2, [pc, #532]	@ (80051c4 <HAL_DMA_IRQHandler+0x690>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d04a      	beq.n	800504a <HAL_DMA_IRQHandler+0x516>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4a83      	ldr	r2, [pc, #524]	@ (80051c8 <HAL_DMA_IRQHandler+0x694>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d045      	beq.n	800504a <HAL_DMA_IRQHandler+0x516>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4a82      	ldr	r2, [pc, #520]	@ (80051cc <HAL_DMA_IRQHandler+0x698>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d040      	beq.n	800504a <HAL_DMA_IRQHandler+0x516>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4a80      	ldr	r2, [pc, #512]	@ (80051d0 <HAL_DMA_IRQHandler+0x69c>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d03b      	beq.n	800504a <HAL_DMA_IRQHandler+0x516>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4a7f      	ldr	r2, [pc, #508]	@ (80051d4 <HAL_DMA_IRQHandler+0x6a0>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d036      	beq.n	800504a <HAL_DMA_IRQHandler+0x516>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4a7d      	ldr	r2, [pc, #500]	@ (80051d8 <HAL_DMA_IRQHandler+0x6a4>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d031      	beq.n	800504a <HAL_DMA_IRQHandler+0x516>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4a7c      	ldr	r2, [pc, #496]	@ (80051dc <HAL_DMA_IRQHandler+0x6a8>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d02c      	beq.n	800504a <HAL_DMA_IRQHandler+0x516>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4a7a      	ldr	r2, [pc, #488]	@ (80051e0 <HAL_DMA_IRQHandler+0x6ac>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d027      	beq.n	800504a <HAL_DMA_IRQHandler+0x516>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4a79      	ldr	r2, [pc, #484]	@ (80051e4 <HAL_DMA_IRQHandler+0x6b0>)
 8005000:	4293      	cmp	r3, r2
 8005002:	d022      	beq.n	800504a <HAL_DMA_IRQHandler+0x516>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	4a77      	ldr	r2, [pc, #476]	@ (80051e8 <HAL_DMA_IRQHandler+0x6b4>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d01d      	beq.n	800504a <HAL_DMA_IRQHandler+0x516>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	4a76      	ldr	r2, [pc, #472]	@ (80051ec <HAL_DMA_IRQHandler+0x6b8>)
 8005014:	4293      	cmp	r3, r2
 8005016:	d018      	beq.n	800504a <HAL_DMA_IRQHandler+0x516>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4a74      	ldr	r2, [pc, #464]	@ (80051f0 <HAL_DMA_IRQHandler+0x6bc>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d013      	beq.n	800504a <HAL_DMA_IRQHandler+0x516>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4a73      	ldr	r2, [pc, #460]	@ (80051f4 <HAL_DMA_IRQHandler+0x6c0>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d00e      	beq.n	800504a <HAL_DMA_IRQHandler+0x516>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4a71      	ldr	r2, [pc, #452]	@ (80051f8 <HAL_DMA_IRQHandler+0x6c4>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d009      	beq.n	800504a <HAL_DMA_IRQHandler+0x516>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4a70      	ldr	r2, [pc, #448]	@ (80051fc <HAL_DMA_IRQHandler+0x6c8>)
 800503c:	4293      	cmp	r3, r2
 800503e:	d004      	beq.n	800504a <HAL_DMA_IRQHandler+0x516>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4a6e      	ldr	r2, [pc, #440]	@ (8005200 <HAL_DMA_IRQHandler+0x6cc>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d10a      	bne.n	8005060 <HAL_DMA_IRQHandler+0x52c>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f003 0308 	and.w	r3, r3, #8
 8005054:	2b00      	cmp	r3, #0
 8005056:	bf14      	ite	ne
 8005058:	2301      	movne	r3, #1
 800505a:	2300      	moveq	r3, #0
 800505c:	b2db      	uxtb	r3, r3
 800505e:	e009      	b.n	8005074 <HAL_DMA_IRQHandler+0x540>
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f003 0304 	and.w	r3, r3, #4
 800506a:	2b00      	cmp	r3, #0
 800506c:	bf14      	ite	ne
 800506e:	2301      	movne	r3, #1
 8005070:	2300      	moveq	r3, #0
 8005072:	b2db      	uxtb	r3, r3
 8005074:	2b00      	cmp	r3, #0
 8005076:	d03e      	beq.n	80050f6 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800507c:	f003 031f 	and.w	r3, r3, #31
 8005080:	2210      	movs	r2, #16
 8005082:	409a      	lsls	r2, r3
 8005084:	6a3b      	ldr	r3, [r7, #32]
 8005086:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005092:	2b00      	cmp	r3, #0
 8005094:	d018      	beq.n	80050c8 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d108      	bne.n	80050b6 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d024      	beq.n	80050f6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050b0:	6878      	ldr	r0, [r7, #4]
 80050b2:	4798      	blx	r3
 80050b4:	e01f      	b.n	80050f6 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d01b      	beq.n	80050f6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80050c2:	6878      	ldr	r0, [r7, #4]
 80050c4:	4798      	blx	r3
 80050c6:	e016      	b.n	80050f6 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d107      	bne.n	80050e6 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	681a      	ldr	r2, [r3, #0]
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f022 0208 	bic.w	r2, r2, #8
 80050e4:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d003      	beq.n	80050f6 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050f2:	6878      	ldr	r0, [r7, #4]
 80050f4:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050fa:	f003 031f 	and.w	r3, r3, #31
 80050fe:	2220      	movs	r2, #32
 8005100:	409a      	lsls	r2, r3
 8005102:	69bb      	ldr	r3, [r7, #24]
 8005104:	4013      	ands	r3, r2
 8005106:	2b00      	cmp	r3, #0
 8005108:	f000 8110 	beq.w	800532c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4a2c      	ldr	r2, [pc, #176]	@ (80051c4 <HAL_DMA_IRQHandler+0x690>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d04a      	beq.n	80051ac <HAL_DMA_IRQHandler+0x678>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4a2b      	ldr	r2, [pc, #172]	@ (80051c8 <HAL_DMA_IRQHandler+0x694>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d045      	beq.n	80051ac <HAL_DMA_IRQHandler+0x678>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	4a29      	ldr	r2, [pc, #164]	@ (80051cc <HAL_DMA_IRQHandler+0x698>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d040      	beq.n	80051ac <HAL_DMA_IRQHandler+0x678>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	4a28      	ldr	r2, [pc, #160]	@ (80051d0 <HAL_DMA_IRQHandler+0x69c>)
 8005130:	4293      	cmp	r3, r2
 8005132:	d03b      	beq.n	80051ac <HAL_DMA_IRQHandler+0x678>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4a26      	ldr	r2, [pc, #152]	@ (80051d4 <HAL_DMA_IRQHandler+0x6a0>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d036      	beq.n	80051ac <HAL_DMA_IRQHandler+0x678>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	4a25      	ldr	r2, [pc, #148]	@ (80051d8 <HAL_DMA_IRQHandler+0x6a4>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d031      	beq.n	80051ac <HAL_DMA_IRQHandler+0x678>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4a23      	ldr	r2, [pc, #140]	@ (80051dc <HAL_DMA_IRQHandler+0x6a8>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d02c      	beq.n	80051ac <HAL_DMA_IRQHandler+0x678>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	4a22      	ldr	r2, [pc, #136]	@ (80051e0 <HAL_DMA_IRQHandler+0x6ac>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d027      	beq.n	80051ac <HAL_DMA_IRQHandler+0x678>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4a20      	ldr	r2, [pc, #128]	@ (80051e4 <HAL_DMA_IRQHandler+0x6b0>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d022      	beq.n	80051ac <HAL_DMA_IRQHandler+0x678>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4a1f      	ldr	r2, [pc, #124]	@ (80051e8 <HAL_DMA_IRQHandler+0x6b4>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d01d      	beq.n	80051ac <HAL_DMA_IRQHandler+0x678>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4a1d      	ldr	r2, [pc, #116]	@ (80051ec <HAL_DMA_IRQHandler+0x6b8>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d018      	beq.n	80051ac <HAL_DMA_IRQHandler+0x678>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4a1c      	ldr	r2, [pc, #112]	@ (80051f0 <HAL_DMA_IRQHandler+0x6bc>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d013      	beq.n	80051ac <HAL_DMA_IRQHandler+0x678>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4a1a      	ldr	r2, [pc, #104]	@ (80051f4 <HAL_DMA_IRQHandler+0x6c0>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d00e      	beq.n	80051ac <HAL_DMA_IRQHandler+0x678>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	4a19      	ldr	r2, [pc, #100]	@ (80051f8 <HAL_DMA_IRQHandler+0x6c4>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d009      	beq.n	80051ac <HAL_DMA_IRQHandler+0x678>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4a17      	ldr	r2, [pc, #92]	@ (80051fc <HAL_DMA_IRQHandler+0x6c8>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d004      	beq.n	80051ac <HAL_DMA_IRQHandler+0x678>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4a16      	ldr	r2, [pc, #88]	@ (8005200 <HAL_DMA_IRQHandler+0x6cc>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d12b      	bne.n	8005204 <HAL_DMA_IRQHandler+0x6d0>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f003 0310 	and.w	r3, r3, #16
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	bf14      	ite	ne
 80051ba:	2301      	movne	r3, #1
 80051bc:	2300      	moveq	r3, #0
 80051be:	b2db      	uxtb	r3, r3
 80051c0:	e02a      	b.n	8005218 <HAL_DMA_IRQHandler+0x6e4>
 80051c2:	bf00      	nop
 80051c4:	40020010 	.word	0x40020010
 80051c8:	40020028 	.word	0x40020028
 80051cc:	40020040 	.word	0x40020040
 80051d0:	40020058 	.word	0x40020058
 80051d4:	40020070 	.word	0x40020070
 80051d8:	40020088 	.word	0x40020088
 80051dc:	400200a0 	.word	0x400200a0
 80051e0:	400200b8 	.word	0x400200b8
 80051e4:	40020410 	.word	0x40020410
 80051e8:	40020428 	.word	0x40020428
 80051ec:	40020440 	.word	0x40020440
 80051f0:	40020458 	.word	0x40020458
 80051f4:	40020470 	.word	0x40020470
 80051f8:	40020488 	.word	0x40020488
 80051fc:	400204a0 	.word	0x400204a0
 8005200:	400204b8 	.word	0x400204b8
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f003 0302 	and.w	r3, r3, #2
 800520e:	2b00      	cmp	r3, #0
 8005210:	bf14      	ite	ne
 8005212:	2301      	movne	r3, #1
 8005214:	2300      	moveq	r3, #0
 8005216:	b2db      	uxtb	r3, r3
 8005218:	2b00      	cmp	r3, #0
 800521a:	f000 8087 	beq.w	800532c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005222:	f003 031f 	and.w	r3, r3, #31
 8005226:	2220      	movs	r2, #32
 8005228:	409a      	lsls	r2, r3
 800522a:	6a3b      	ldr	r3, [r7, #32]
 800522c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005234:	b2db      	uxtb	r3, r3
 8005236:	2b04      	cmp	r3, #4
 8005238:	d139      	bne.n	80052ae <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	681a      	ldr	r2, [r3, #0]
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f022 0216 	bic.w	r2, r2, #22
 8005248:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	695a      	ldr	r2, [r3, #20]
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005258:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800525e:	2b00      	cmp	r3, #0
 8005260:	d103      	bne.n	800526a <HAL_DMA_IRQHandler+0x736>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005266:	2b00      	cmp	r3, #0
 8005268:	d007      	beq.n	800527a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	681a      	ldr	r2, [r3, #0]
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f022 0208 	bic.w	r2, r2, #8
 8005278:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800527e:	f003 031f 	and.w	r3, r3, #31
 8005282:	223f      	movs	r2, #63	@ 0x3f
 8005284:	409a      	lsls	r2, r3
 8005286:	6a3b      	ldr	r3, [r7, #32]
 8005288:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2201      	movs	r2, #1
 800528e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2200      	movs	r2, #0
 8005296:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800529e:	2b00      	cmp	r3, #0
 80052a0:	f000 834a 	beq.w	8005938 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80052a8:	6878      	ldr	r0, [r7, #4]
 80052aa:	4798      	blx	r3
          }
          return;
 80052ac:	e344      	b.n	8005938 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d018      	beq.n	80052ee <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d108      	bne.n	80052dc <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d02c      	beq.n	800532c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052d6:	6878      	ldr	r0, [r7, #4]
 80052d8:	4798      	blx	r3
 80052da:	e027      	b.n	800532c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d023      	beq.n	800532c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052e8:	6878      	ldr	r0, [r7, #4]
 80052ea:	4798      	blx	r3
 80052ec:	e01e      	b.n	800532c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d10f      	bne.n	800531c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	681a      	ldr	r2, [r3, #0]
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f022 0210 	bic.w	r2, r2, #16
 800530a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2201      	movs	r2, #1
 8005310:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2200      	movs	r2, #0
 8005318:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005320:	2b00      	cmp	r3, #0
 8005322:	d003      	beq.n	800532c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005328:	6878      	ldr	r0, [r7, #4]
 800532a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005330:	2b00      	cmp	r3, #0
 8005332:	f000 8306 	beq.w	8005942 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800533a:	f003 0301 	and.w	r3, r3, #1
 800533e:	2b00      	cmp	r3, #0
 8005340:	f000 8088 	beq.w	8005454 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2204      	movs	r2, #4
 8005348:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	4a7a      	ldr	r2, [pc, #488]	@ (800553c <HAL_DMA_IRQHandler+0xa08>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d04a      	beq.n	80053ec <HAL_DMA_IRQHandler+0x8b8>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4a79      	ldr	r2, [pc, #484]	@ (8005540 <HAL_DMA_IRQHandler+0xa0c>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d045      	beq.n	80053ec <HAL_DMA_IRQHandler+0x8b8>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4a77      	ldr	r2, [pc, #476]	@ (8005544 <HAL_DMA_IRQHandler+0xa10>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d040      	beq.n	80053ec <HAL_DMA_IRQHandler+0x8b8>
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	4a76      	ldr	r2, [pc, #472]	@ (8005548 <HAL_DMA_IRQHandler+0xa14>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d03b      	beq.n	80053ec <HAL_DMA_IRQHandler+0x8b8>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4a74      	ldr	r2, [pc, #464]	@ (800554c <HAL_DMA_IRQHandler+0xa18>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d036      	beq.n	80053ec <HAL_DMA_IRQHandler+0x8b8>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	4a73      	ldr	r2, [pc, #460]	@ (8005550 <HAL_DMA_IRQHandler+0xa1c>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d031      	beq.n	80053ec <HAL_DMA_IRQHandler+0x8b8>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	4a71      	ldr	r2, [pc, #452]	@ (8005554 <HAL_DMA_IRQHandler+0xa20>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d02c      	beq.n	80053ec <HAL_DMA_IRQHandler+0x8b8>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	4a70      	ldr	r2, [pc, #448]	@ (8005558 <HAL_DMA_IRQHandler+0xa24>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d027      	beq.n	80053ec <HAL_DMA_IRQHandler+0x8b8>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4a6e      	ldr	r2, [pc, #440]	@ (800555c <HAL_DMA_IRQHandler+0xa28>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d022      	beq.n	80053ec <HAL_DMA_IRQHandler+0x8b8>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4a6d      	ldr	r2, [pc, #436]	@ (8005560 <HAL_DMA_IRQHandler+0xa2c>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d01d      	beq.n	80053ec <HAL_DMA_IRQHandler+0x8b8>
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4a6b      	ldr	r2, [pc, #428]	@ (8005564 <HAL_DMA_IRQHandler+0xa30>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d018      	beq.n	80053ec <HAL_DMA_IRQHandler+0x8b8>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4a6a      	ldr	r2, [pc, #424]	@ (8005568 <HAL_DMA_IRQHandler+0xa34>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d013      	beq.n	80053ec <HAL_DMA_IRQHandler+0x8b8>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4a68      	ldr	r2, [pc, #416]	@ (800556c <HAL_DMA_IRQHandler+0xa38>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d00e      	beq.n	80053ec <HAL_DMA_IRQHandler+0x8b8>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4a67      	ldr	r2, [pc, #412]	@ (8005570 <HAL_DMA_IRQHandler+0xa3c>)
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d009      	beq.n	80053ec <HAL_DMA_IRQHandler+0x8b8>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	4a65      	ldr	r2, [pc, #404]	@ (8005574 <HAL_DMA_IRQHandler+0xa40>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d004      	beq.n	80053ec <HAL_DMA_IRQHandler+0x8b8>
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	4a64      	ldr	r2, [pc, #400]	@ (8005578 <HAL_DMA_IRQHandler+0xa44>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d108      	bne.n	80053fe <HAL_DMA_IRQHandler+0x8ca>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	681a      	ldr	r2, [r3, #0]
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f022 0201 	bic.w	r2, r2, #1
 80053fa:	601a      	str	r2, [r3, #0]
 80053fc:	e007      	b.n	800540e <HAL_DMA_IRQHandler+0x8da>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	681a      	ldr	r2, [r3, #0]
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f022 0201 	bic.w	r2, r2, #1
 800540c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	3301      	adds	r3, #1
 8005412:	60fb      	str	r3, [r7, #12]
 8005414:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005416:	429a      	cmp	r2, r3
 8005418:	d307      	bcc.n	800542a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f003 0301 	and.w	r3, r3, #1
 8005424:	2b00      	cmp	r3, #0
 8005426:	d1f2      	bne.n	800540e <HAL_DMA_IRQHandler+0x8da>
 8005428:	e000      	b.n	800542c <HAL_DMA_IRQHandler+0x8f8>
            break;
 800542a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f003 0301 	and.w	r3, r3, #1
 8005436:	2b00      	cmp	r3, #0
 8005438:	d004      	beq.n	8005444 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2203      	movs	r2, #3
 800543e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8005442:	e003      	b.n	800544c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2201      	movs	r2, #1
 8005448:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2200      	movs	r2, #0
 8005450:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005458:	2b00      	cmp	r3, #0
 800545a:	f000 8272 	beq.w	8005942 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005462:	6878      	ldr	r0, [r7, #4]
 8005464:	4798      	blx	r3
 8005466:	e26c      	b.n	8005942 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	4a43      	ldr	r2, [pc, #268]	@ (800557c <HAL_DMA_IRQHandler+0xa48>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d022      	beq.n	80054b8 <HAL_DMA_IRQHandler+0x984>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	4a42      	ldr	r2, [pc, #264]	@ (8005580 <HAL_DMA_IRQHandler+0xa4c>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d01d      	beq.n	80054b8 <HAL_DMA_IRQHandler+0x984>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	4a40      	ldr	r2, [pc, #256]	@ (8005584 <HAL_DMA_IRQHandler+0xa50>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d018      	beq.n	80054b8 <HAL_DMA_IRQHandler+0x984>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	4a3f      	ldr	r2, [pc, #252]	@ (8005588 <HAL_DMA_IRQHandler+0xa54>)
 800548c:	4293      	cmp	r3, r2
 800548e:	d013      	beq.n	80054b8 <HAL_DMA_IRQHandler+0x984>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	4a3d      	ldr	r2, [pc, #244]	@ (800558c <HAL_DMA_IRQHandler+0xa58>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d00e      	beq.n	80054b8 <HAL_DMA_IRQHandler+0x984>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	4a3c      	ldr	r2, [pc, #240]	@ (8005590 <HAL_DMA_IRQHandler+0xa5c>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d009      	beq.n	80054b8 <HAL_DMA_IRQHandler+0x984>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	4a3a      	ldr	r2, [pc, #232]	@ (8005594 <HAL_DMA_IRQHandler+0xa60>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d004      	beq.n	80054b8 <HAL_DMA_IRQHandler+0x984>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	4a39      	ldr	r2, [pc, #228]	@ (8005598 <HAL_DMA_IRQHandler+0xa64>)
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d101      	bne.n	80054bc <HAL_DMA_IRQHandler+0x988>
 80054b8:	2301      	movs	r3, #1
 80054ba:	e000      	b.n	80054be <HAL_DMA_IRQHandler+0x98a>
 80054bc:	2300      	movs	r3, #0
 80054be:	2b00      	cmp	r3, #0
 80054c0:	f000 823f 	beq.w	8005942 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054d0:	f003 031f 	and.w	r3, r3, #31
 80054d4:	2204      	movs	r2, #4
 80054d6:	409a      	lsls	r2, r3
 80054d8:	697b      	ldr	r3, [r7, #20]
 80054da:	4013      	ands	r3, r2
 80054dc:	2b00      	cmp	r3, #0
 80054de:	f000 80cd 	beq.w	800567c <HAL_DMA_IRQHandler+0xb48>
 80054e2:	693b      	ldr	r3, [r7, #16]
 80054e4:	f003 0304 	and.w	r3, r3, #4
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	f000 80c7 	beq.w	800567c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054f2:	f003 031f 	and.w	r3, r3, #31
 80054f6:	2204      	movs	r2, #4
 80054f8:	409a      	lsls	r2, r3
 80054fa:	69fb      	ldr	r3, [r7, #28]
 80054fc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80054fe:	693b      	ldr	r3, [r7, #16]
 8005500:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005504:	2b00      	cmp	r3, #0
 8005506:	d049      	beq.n	800559c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005508:	693b      	ldr	r3, [r7, #16]
 800550a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800550e:	2b00      	cmp	r3, #0
 8005510:	d109      	bne.n	8005526 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005516:	2b00      	cmp	r3, #0
 8005518:	f000 8210 	beq.w	800593c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005520:	6878      	ldr	r0, [r7, #4]
 8005522:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005524:	e20a      	b.n	800593c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800552a:	2b00      	cmp	r3, #0
 800552c:	f000 8206 	beq.w	800593c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005534:	6878      	ldr	r0, [r7, #4]
 8005536:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005538:	e200      	b.n	800593c <HAL_DMA_IRQHandler+0xe08>
 800553a:	bf00      	nop
 800553c:	40020010 	.word	0x40020010
 8005540:	40020028 	.word	0x40020028
 8005544:	40020040 	.word	0x40020040
 8005548:	40020058 	.word	0x40020058
 800554c:	40020070 	.word	0x40020070
 8005550:	40020088 	.word	0x40020088
 8005554:	400200a0 	.word	0x400200a0
 8005558:	400200b8 	.word	0x400200b8
 800555c:	40020410 	.word	0x40020410
 8005560:	40020428 	.word	0x40020428
 8005564:	40020440 	.word	0x40020440
 8005568:	40020458 	.word	0x40020458
 800556c:	40020470 	.word	0x40020470
 8005570:	40020488 	.word	0x40020488
 8005574:	400204a0 	.word	0x400204a0
 8005578:	400204b8 	.word	0x400204b8
 800557c:	58025408 	.word	0x58025408
 8005580:	5802541c 	.word	0x5802541c
 8005584:	58025430 	.word	0x58025430
 8005588:	58025444 	.word	0x58025444
 800558c:	58025458 	.word	0x58025458
 8005590:	5802546c 	.word	0x5802546c
 8005594:	58025480 	.word	0x58025480
 8005598:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800559c:	693b      	ldr	r3, [r7, #16]
 800559e:	f003 0320 	and.w	r3, r3, #32
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d160      	bne.n	8005668 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	4a7f      	ldr	r2, [pc, #508]	@ (80057a8 <HAL_DMA_IRQHandler+0xc74>)
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d04a      	beq.n	8005646 <HAL_DMA_IRQHandler+0xb12>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4a7d      	ldr	r2, [pc, #500]	@ (80057ac <HAL_DMA_IRQHandler+0xc78>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d045      	beq.n	8005646 <HAL_DMA_IRQHandler+0xb12>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	4a7c      	ldr	r2, [pc, #496]	@ (80057b0 <HAL_DMA_IRQHandler+0xc7c>)
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d040      	beq.n	8005646 <HAL_DMA_IRQHandler+0xb12>
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	4a7a      	ldr	r2, [pc, #488]	@ (80057b4 <HAL_DMA_IRQHandler+0xc80>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d03b      	beq.n	8005646 <HAL_DMA_IRQHandler+0xb12>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	4a79      	ldr	r2, [pc, #484]	@ (80057b8 <HAL_DMA_IRQHandler+0xc84>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d036      	beq.n	8005646 <HAL_DMA_IRQHandler+0xb12>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	4a77      	ldr	r2, [pc, #476]	@ (80057bc <HAL_DMA_IRQHandler+0xc88>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d031      	beq.n	8005646 <HAL_DMA_IRQHandler+0xb12>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	4a76      	ldr	r2, [pc, #472]	@ (80057c0 <HAL_DMA_IRQHandler+0xc8c>)
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d02c      	beq.n	8005646 <HAL_DMA_IRQHandler+0xb12>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	4a74      	ldr	r2, [pc, #464]	@ (80057c4 <HAL_DMA_IRQHandler+0xc90>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d027      	beq.n	8005646 <HAL_DMA_IRQHandler+0xb12>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	4a73      	ldr	r2, [pc, #460]	@ (80057c8 <HAL_DMA_IRQHandler+0xc94>)
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d022      	beq.n	8005646 <HAL_DMA_IRQHandler+0xb12>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	4a71      	ldr	r2, [pc, #452]	@ (80057cc <HAL_DMA_IRQHandler+0xc98>)
 8005606:	4293      	cmp	r3, r2
 8005608:	d01d      	beq.n	8005646 <HAL_DMA_IRQHandler+0xb12>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	4a70      	ldr	r2, [pc, #448]	@ (80057d0 <HAL_DMA_IRQHandler+0xc9c>)
 8005610:	4293      	cmp	r3, r2
 8005612:	d018      	beq.n	8005646 <HAL_DMA_IRQHandler+0xb12>
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	4a6e      	ldr	r2, [pc, #440]	@ (80057d4 <HAL_DMA_IRQHandler+0xca0>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d013      	beq.n	8005646 <HAL_DMA_IRQHandler+0xb12>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	4a6d      	ldr	r2, [pc, #436]	@ (80057d8 <HAL_DMA_IRQHandler+0xca4>)
 8005624:	4293      	cmp	r3, r2
 8005626:	d00e      	beq.n	8005646 <HAL_DMA_IRQHandler+0xb12>
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	4a6b      	ldr	r2, [pc, #428]	@ (80057dc <HAL_DMA_IRQHandler+0xca8>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d009      	beq.n	8005646 <HAL_DMA_IRQHandler+0xb12>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	4a6a      	ldr	r2, [pc, #424]	@ (80057e0 <HAL_DMA_IRQHandler+0xcac>)
 8005638:	4293      	cmp	r3, r2
 800563a:	d004      	beq.n	8005646 <HAL_DMA_IRQHandler+0xb12>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	4a68      	ldr	r2, [pc, #416]	@ (80057e4 <HAL_DMA_IRQHandler+0xcb0>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d108      	bne.n	8005658 <HAL_DMA_IRQHandler+0xb24>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	681a      	ldr	r2, [r3, #0]
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f022 0208 	bic.w	r2, r2, #8
 8005654:	601a      	str	r2, [r3, #0]
 8005656:	e007      	b.n	8005668 <HAL_DMA_IRQHandler+0xb34>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	681a      	ldr	r2, [r3, #0]
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f022 0204 	bic.w	r2, r2, #4
 8005666:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800566c:	2b00      	cmp	r3, #0
 800566e:	f000 8165 	beq.w	800593c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005676:	6878      	ldr	r0, [r7, #4]
 8005678:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800567a:	e15f      	b.n	800593c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005680:	f003 031f 	and.w	r3, r3, #31
 8005684:	2202      	movs	r2, #2
 8005686:	409a      	lsls	r2, r3
 8005688:	697b      	ldr	r3, [r7, #20]
 800568a:	4013      	ands	r3, r2
 800568c:	2b00      	cmp	r3, #0
 800568e:	f000 80c5 	beq.w	800581c <HAL_DMA_IRQHandler+0xce8>
 8005692:	693b      	ldr	r3, [r7, #16]
 8005694:	f003 0302 	and.w	r3, r3, #2
 8005698:	2b00      	cmp	r3, #0
 800569a:	f000 80bf 	beq.w	800581c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80056a2:	f003 031f 	and.w	r3, r3, #31
 80056a6:	2202      	movs	r2, #2
 80056a8:	409a      	lsls	r2, r3
 80056aa:	69fb      	ldr	r3, [r7, #28]
 80056ac:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80056ae:	693b      	ldr	r3, [r7, #16]
 80056b0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d018      	beq.n	80056ea <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80056b8:	693b      	ldr	r3, [r7, #16]
 80056ba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d109      	bne.n	80056d6 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	f000 813a 	beq.w	8005940 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056d0:	6878      	ldr	r0, [r7, #4]
 80056d2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80056d4:	e134      	b.n	8005940 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056da:	2b00      	cmp	r3, #0
 80056dc:	f000 8130 	beq.w	8005940 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056e4:	6878      	ldr	r0, [r7, #4]
 80056e6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80056e8:	e12a      	b.n	8005940 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80056ea:	693b      	ldr	r3, [r7, #16]
 80056ec:	f003 0320 	and.w	r3, r3, #32
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	f040 8089 	bne.w	8005808 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	4a2b      	ldr	r2, [pc, #172]	@ (80057a8 <HAL_DMA_IRQHandler+0xc74>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d04a      	beq.n	8005796 <HAL_DMA_IRQHandler+0xc62>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	4a29      	ldr	r2, [pc, #164]	@ (80057ac <HAL_DMA_IRQHandler+0xc78>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d045      	beq.n	8005796 <HAL_DMA_IRQHandler+0xc62>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	4a28      	ldr	r2, [pc, #160]	@ (80057b0 <HAL_DMA_IRQHandler+0xc7c>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d040      	beq.n	8005796 <HAL_DMA_IRQHandler+0xc62>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	4a26      	ldr	r2, [pc, #152]	@ (80057b4 <HAL_DMA_IRQHandler+0xc80>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d03b      	beq.n	8005796 <HAL_DMA_IRQHandler+0xc62>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	4a25      	ldr	r2, [pc, #148]	@ (80057b8 <HAL_DMA_IRQHandler+0xc84>)
 8005724:	4293      	cmp	r3, r2
 8005726:	d036      	beq.n	8005796 <HAL_DMA_IRQHandler+0xc62>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4a23      	ldr	r2, [pc, #140]	@ (80057bc <HAL_DMA_IRQHandler+0xc88>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d031      	beq.n	8005796 <HAL_DMA_IRQHandler+0xc62>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	4a22      	ldr	r2, [pc, #136]	@ (80057c0 <HAL_DMA_IRQHandler+0xc8c>)
 8005738:	4293      	cmp	r3, r2
 800573a:	d02c      	beq.n	8005796 <HAL_DMA_IRQHandler+0xc62>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	4a20      	ldr	r2, [pc, #128]	@ (80057c4 <HAL_DMA_IRQHandler+0xc90>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d027      	beq.n	8005796 <HAL_DMA_IRQHandler+0xc62>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	4a1f      	ldr	r2, [pc, #124]	@ (80057c8 <HAL_DMA_IRQHandler+0xc94>)
 800574c:	4293      	cmp	r3, r2
 800574e:	d022      	beq.n	8005796 <HAL_DMA_IRQHandler+0xc62>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	4a1d      	ldr	r2, [pc, #116]	@ (80057cc <HAL_DMA_IRQHandler+0xc98>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d01d      	beq.n	8005796 <HAL_DMA_IRQHandler+0xc62>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	4a1c      	ldr	r2, [pc, #112]	@ (80057d0 <HAL_DMA_IRQHandler+0xc9c>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d018      	beq.n	8005796 <HAL_DMA_IRQHandler+0xc62>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4a1a      	ldr	r2, [pc, #104]	@ (80057d4 <HAL_DMA_IRQHandler+0xca0>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d013      	beq.n	8005796 <HAL_DMA_IRQHandler+0xc62>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	4a19      	ldr	r2, [pc, #100]	@ (80057d8 <HAL_DMA_IRQHandler+0xca4>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d00e      	beq.n	8005796 <HAL_DMA_IRQHandler+0xc62>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4a17      	ldr	r2, [pc, #92]	@ (80057dc <HAL_DMA_IRQHandler+0xca8>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d009      	beq.n	8005796 <HAL_DMA_IRQHandler+0xc62>
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	4a16      	ldr	r2, [pc, #88]	@ (80057e0 <HAL_DMA_IRQHandler+0xcac>)
 8005788:	4293      	cmp	r3, r2
 800578a:	d004      	beq.n	8005796 <HAL_DMA_IRQHandler+0xc62>
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	4a14      	ldr	r2, [pc, #80]	@ (80057e4 <HAL_DMA_IRQHandler+0xcb0>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d128      	bne.n	80057e8 <HAL_DMA_IRQHandler+0xcb4>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	681a      	ldr	r2, [r3, #0]
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f022 0214 	bic.w	r2, r2, #20
 80057a4:	601a      	str	r2, [r3, #0]
 80057a6:	e027      	b.n	80057f8 <HAL_DMA_IRQHandler+0xcc4>
 80057a8:	40020010 	.word	0x40020010
 80057ac:	40020028 	.word	0x40020028
 80057b0:	40020040 	.word	0x40020040
 80057b4:	40020058 	.word	0x40020058
 80057b8:	40020070 	.word	0x40020070
 80057bc:	40020088 	.word	0x40020088
 80057c0:	400200a0 	.word	0x400200a0
 80057c4:	400200b8 	.word	0x400200b8
 80057c8:	40020410 	.word	0x40020410
 80057cc:	40020428 	.word	0x40020428
 80057d0:	40020440 	.word	0x40020440
 80057d4:	40020458 	.word	0x40020458
 80057d8:	40020470 	.word	0x40020470
 80057dc:	40020488 	.word	0x40020488
 80057e0:	400204a0 	.word	0x400204a0
 80057e4:	400204b8 	.word	0x400204b8
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	681a      	ldr	r2, [r3, #0]
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f022 020a 	bic.w	r2, r2, #10
 80057f6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2201      	movs	r2, #1
 80057fc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2200      	movs	r2, #0
 8005804:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800580c:	2b00      	cmp	r3, #0
 800580e:	f000 8097 	beq.w	8005940 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005816:	6878      	ldr	r0, [r7, #4]
 8005818:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800581a:	e091      	b.n	8005940 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005820:	f003 031f 	and.w	r3, r3, #31
 8005824:	2208      	movs	r2, #8
 8005826:	409a      	lsls	r2, r3
 8005828:	697b      	ldr	r3, [r7, #20]
 800582a:	4013      	ands	r3, r2
 800582c:	2b00      	cmp	r3, #0
 800582e:	f000 8088 	beq.w	8005942 <HAL_DMA_IRQHandler+0xe0e>
 8005832:	693b      	ldr	r3, [r7, #16]
 8005834:	f003 0308 	and.w	r3, r3, #8
 8005838:	2b00      	cmp	r3, #0
 800583a:	f000 8082 	beq.w	8005942 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	4a41      	ldr	r2, [pc, #260]	@ (8005948 <HAL_DMA_IRQHandler+0xe14>)
 8005844:	4293      	cmp	r3, r2
 8005846:	d04a      	beq.n	80058de <HAL_DMA_IRQHandler+0xdaa>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	4a3f      	ldr	r2, [pc, #252]	@ (800594c <HAL_DMA_IRQHandler+0xe18>)
 800584e:	4293      	cmp	r3, r2
 8005850:	d045      	beq.n	80058de <HAL_DMA_IRQHandler+0xdaa>
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	4a3e      	ldr	r2, [pc, #248]	@ (8005950 <HAL_DMA_IRQHandler+0xe1c>)
 8005858:	4293      	cmp	r3, r2
 800585a:	d040      	beq.n	80058de <HAL_DMA_IRQHandler+0xdaa>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	4a3c      	ldr	r2, [pc, #240]	@ (8005954 <HAL_DMA_IRQHandler+0xe20>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d03b      	beq.n	80058de <HAL_DMA_IRQHandler+0xdaa>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	4a3b      	ldr	r2, [pc, #236]	@ (8005958 <HAL_DMA_IRQHandler+0xe24>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d036      	beq.n	80058de <HAL_DMA_IRQHandler+0xdaa>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	4a39      	ldr	r2, [pc, #228]	@ (800595c <HAL_DMA_IRQHandler+0xe28>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d031      	beq.n	80058de <HAL_DMA_IRQHandler+0xdaa>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	4a38      	ldr	r2, [pc, #224]	@ (8005960 <HAL_DMA_IRQHandler+0xe2c>)
 8005880:	4293      	cmp	r3, r2
 8005882:	d02c      	beq.n	80058de <HAL_DMA_IRQHandler+0xdaa>
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	4a36      	ldr	r2, [pc, #216]	@ (8005964 <HAL_DMA_IRQHandler+0xe30>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d027      	beq.n	80058de <HAL_DMA_IRQHandler+0xdaa>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	4a35      	ldr	r2, [pc, #212]	@ (8005968 <HAL_DMA_IRQHandler+0xe34>)
 8005894:	4293      	cmp	r3, r2
 8005896:	d022      	beq.n	80058de <HAL_DMA_IRQHandler+0xdaa>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	4a33      	ldr	r2, [pc, #204]	@ (800596c <HAL_DMA_IRQHandler+0xe38>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d01d      	beq.n	80058de <HAL_DMA_IRQHandler+0xdaa>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	4a32      	ldr	r2, [pc, #200]	@ (8005970 <HAL_DMA_IRQHandler+0xe3c>)
 80058a8:	4293      	cmp	r3, r2
 80058aa:	d018      	beq.n	80058de <HAL_DMA_IRQHandler+0xdaa>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	4a30      	ldr	r2, [pc, #192]	@ (8005974 <HAL_DMA_IRQHandler+0xe40>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d013      	beq.n	80058de <HAL_DMA_IRQHandler+0xdaa>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	4a2f      	ldr	r2, [pc, #188]	@ (8005978 <HAL_DMA_IRQHandler+0xe44>)
 80058bc:	4293      	cmp	r3, r2
 80058be:	d00e      	beq.n	80058de <HAL_DMA_IRQHandler+0xdaa>
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	4a2d      	ldr	r2, [pc, #180]	@ (800597c <HAL_DMA_IRQHandler+0xe48>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d009      	beq.n	80058de <HAL_DMA_IRQHandler+0xdaa>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	4a2c      	ldr	r2, [pc, #176]	@ (8005980 <HAL_DMA_IRQHandler+0xe4c>)
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d004      	beq.n	80058de <HAL_DMA_IRQHandler+0xdaa>
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	4a2a      	ldr	r2, [pc, #168]	@ (8005984 <HAL_DMA_IRQHandler+0xe50>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d108      	bne.n	80058f0 <HAL_DMA_IRQHandler+0xdbc>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	681a      	ldr	r2, [r3, #0]
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f022 021c 	bic.w	r2, r2, #28
 80058ec:	601a      	str	r2, [r3, #0]
 80058ee:	e007      	b.n	8005900 <HAL_DMA_IRQHandler+0xdcc>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	681a      	ldr	r2, [r3, #0]
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f022 020e 	bic.w	r2, r2, #14
 80058fe:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005904:	f003 031f 	and.w	r3, r3, #31
 8005908:	2201      	movs	r2, #1
 800590a:	409a      	lsls	r2, r3
 800590c:	69fb      	ldr	r3, [r7, #28]
 800590e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2201      	movs	r2, #1
 8005914:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2201      	movs	r2, #1
 800591a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2200      	movs	r2, #0
 8005922:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800592a:	2b00      	cmp	r3, #0
 800592c:	d009      	beq.n	8005942 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005932:	6878      	ldr	r0, [r7, #4]
 8005934:	4798      	blx	r3
 8005936:	e004      	b.n	8005942 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8005938:	bf00      	nop
 800593a:	e002      	b.n	8005942 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800593c:	bf00      	nop
 800593e:	e000      	b.n	8005942 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005940:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005942:	3728      	adds	r7, #40	@ 0x28
 8005944:	46bd      	mov	sp, r7
 8005946:	bd80      	pop	{r7, pc}
 8005948:	40020010 	.word	0x40020010
 800594c:	40020028 	.word	0x40020028
 8005950:	40020040 	.word	0x40020040
 8005954:	40020058 	.word	0x40020058
 8005958:	40020070 	.word	0x40020070
 800595c:	40020088 	.word	0x40020088
 8005960:	400200a0 	.word	0x400200a0
 8005964:	400200b8 	.word	0x400200b8
 8005968:	40020410 	.word	0x40020410
 800596c:	40020428 	.word	0x40020428
 8005970:	40020440 	.word	0x40020440
 8005974:	40020458 	.word	0x40020458
 8005978:	40020470 	.word	0x40020470
 800597c:	40020488 	.word	0x40020488
 8005980:	400204a0 	.word	0x400204a0
 8005984:	400204b8 	.word	0x400204b8

08005988 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005988:	b480      	push	{r7}
 800598a:	b087      	sub	sp, #28
 800598c:	af00      	add	r7, sp, #0
 800598e:	60f8      	str	r0, [r7, #12]
 8005990:	60b9      	str	r1, [r7, #8]
 8005992:	607a      	str	r2, [r7, #4]
 8005994:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800599a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059a0:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	4a7f      	ldr	r2, [pc, #508]	@ (8005ba4 <DMA_SetConfig+0x21c>)
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d072      	beq.n	8005a92 <DMA_SetConfig+0x10a>
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	4a7d      	ldr	r2, [pc, #500]	@ (8005ba8 <DMA_SetConfig+0x220>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d06d      	beq.n	8005a92 <DMA_SetConfig+0x10a>
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	4a7c      	ldr	r2, [pc, #496]	@ (8005bac <DMA_SetConfig+0x224>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	d068      	beq.n	8005a92 <DMA_SetConfig+0x10a>
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	4a7a      	ldr	r2, [pc, #488]	@ (8005bb0 <DMA_SetConfig+0x228>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d063      	beq.n	8005a92 <DMA_SetConfig+0x10a>
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	4a79      	ldr	r2, [pc, #484]	@ (8005bb4 <DMA_SetConfig+0x22c>)
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d05e      	beq.n	8005a92 <DMA_SetConfig+0x10a>
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	4a77      	ldr	r2, [pc, #476]	@ (8005bb8 <DMA_SetConfig+0x230>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d059      	beq.n	8005a92 <DMA_SetConfig+0x10a>
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4a76      	ldr	r2, [pc, #472]	@ (8005bbc <DMA_SetConfig+0x234>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d054      	beq.n	8005a92 <DMA_SetConfig+0x10a>
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	4a74      	ldr	r2, [pc, #464]	@ (8005bc0 <DMA_SetConfig+0x238>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d04f      	beq.n	8005a92 <DMA_SetConfig+0x10a>
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	4a73      	ldr	r2, [pc, #460]	@ (8005bc4 <DMA_SetConfig+0x23c>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d04a      	beq.n	8005a92 <DMA_SetConfig+0x10a>
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	4a71      	ldr	r2, [pc, #452]	@ (8005bc8 <DMA_SetConfig+0x240>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d045      	beq.n	8005a92 <DMA_SetConfig+0x10a>
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	4a70      	ldr	r2, [pc, #448]	@ (8005bcc <DMA_SetConfig+0x244>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d040      	beq.n	8005a92 <DMA_SetConfig+0x10a>
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	4a6e      	ldr	r2, [pc, #440]	@ (8005bd0 <DMA_SetConfig+0x248>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d03b      	beq.n	8005a92 <DMA_SetConfig+0x10a>
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	4a6d      	ldr	r2, [pc, #436]	@ (8005bd4 <DMA_SetConfig+0x24c>)
 8005a20:	4293      	cmp	r3, r2
 8005a22:	d036      	beq.n	8005a92 <DMA_SetConfig+0x10a>
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	4a6b      	ldr	r2, [pc, #428]	@ (8005bd8 <DMA_SetConfig+0x250>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d031      	beq.n	8005a92 <DMA_SetConfig+0x10a>
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	4a6a      	ldr	r2, [pc, #424]	@ (8005bdc <DMA_SetConfig+0x254>)
 8005a34:	4293      	cmp	r3, r2
 8005a36:	d02c      	beq.n	8005a92 <DMA_SetConfig+0x10a>
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	4a68      	ldr	r2, [pc, #416]	@ (8005be0 <DMA_SetConfig+0x258>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d027      	beq.n	8005a92 <DMA_SetConfig+0x10a>
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	4a67      	ldr	r2, [pc, #412]	@ (8005be4 <DMA_SetConfig+0x25c>)
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d022      	beq.n	8005a92 <DMA_SetConfig+0x10a>
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	4a65      	ldr	r2, [pc, #404]	@ (8005be8 <DMA_SetConfig+0x260>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d01d      	beq.n	8005a92 <DMA_SetConfig+0x10a>
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	4a64      	ldr	r2, [pc, #400]	@ (8005bec <DMA_SetConfig+0x264>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d018      	beq.n	8005a92 <DMA_SetConfig+0x10a>
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	4a62      	ldr	r2, [pc, #392]	@ (8005bf0 <DMA_SetConfig+0x268>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d013      	beq.n	8005a92 <DMA_SetConfig+0x10a>
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	4a61      	ldr	r2, [pc, #388]	@ (8005bf4 <DMA_SetConfig+0x26c>)
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d00e      	beq.n	8005a92 <DMA_SetConfig+0x10a>
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	4a5f      	ldr	r2, [pc, #380]	@ (8005bf8 <DMA_SetConfig+0x270>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d009      	beq.n	8005a92 <DMA_SetConfig+0x10a>
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	4a5e      	ldr	r2, [pc, #376]	@ (8005bfc <DMA_SetConfig+0x274>)
 8005a84:	4293      	cmp	r3, r2
 8005a86:	d004      	beq.n	8005a92 <DMA_SetConfig+0x10a>
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	4a5c      	ldr	r2, [pc, #368]	@ (8005c00 <DMA_SetConfig+0x278>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d101      	bne.n	8005a96 <DMA_SetConfig+0x10e>
 8005a92:	2301      	movs	r3, #1
 8005a94:	e000      	b.n	8005a98 <DMA_SetConfig+0x110>
 8005a96:	2300      	movs	r3, #0
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d00d      	beq.n	8005ab8 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005aa0:	68fa      	ldr	r2, [r7, #12]
 8005aa2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005aa4:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d004      	beq.n	8005ab8 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ab2:	68fa      	ldr	r2, [r7, #12]
 8005ab4:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005ab6:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	4a39      	ldr	r2, [pc, #228]	@ (8005ba4 <DMA_SetConfig+0x21c>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d04a      	beq.n	8005b58 <DMA_SetConfig+0x1d0>
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	4a38      	ldr	r2, [pc, #224]	@ (8005ba8 <DMA_SetConfig+0x220>)
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d045      	beq.n	8005b58 <DMA_SetConfig+0x1d0>
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	4a36      	ldr	r2, [pc, #216]	@ (8005bac <DMA_SetConfig+0x224>)
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d040      	beq.n	8005b58 <DMA_SetConfig+0x1d0>
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	4a35      	ldr	r2, [pc, #212]	@ (8005bb0 <DMA_SetConfig+0x228>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d03b      	beq.n	8005b58 <DMA_SetConfig+0x1d0>
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	4a33      	ldr	r2, [pc, #204]	@ (8005bb4 <DMA_SetConfig+0x22c>)
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d036      	beq.n	8005b58 <DMA_SetConfig+0x1d0>
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	4a32      	ldr	r2, [pc, #200]	@ (8005bb8 <DMA_SetConfig+0x230>)
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d031      	beq.n	8005b58 <DMA_SetConfig+0x1d0>
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	4a30      	ldr	r2, [pc, #192]	@ (8005bbc <DMA_SetConfig+0x234>)
 8005afa:	4293      	cmp	r3, r2
 8005afc:	d02c      	beq.n	8005b58 <DMA_SetConfig+0x1d0>
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	4a2f      	ldr	r2, [pc, #188]	@ (8005bc0 <DMA_SetConfig+0x238>)
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d027      	beq.n	8005b58 <DMA_SetConfig+0x1d0>
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	4a2d      	ldr	r2, [pc, #180]	@ (8005bc4 <DMA_SetConfig+0x23c>)
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d022      	beq.n	8005b58 <DMA_SetConfig+0x1d0>
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	4a2c      	ldr	r2, [pc, #176]	@ (8005bc8 <DMA_SetConfig+0x240>)
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d01d      	beq.n	8005b58 <DMA_SetConfig+0x1d0>
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	4a2a      	ldr	r2, [pc, #168]	@ (8005bcc <DMA_SetConfig+0x244>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d018      	beq.n	8005b58 <DMA_SetConfig+0x1d0>
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	4a29      	ldr	r2, [pc, #164]	@ (8005bd0 <DMA_SetConfig+0x248>)
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d013      	beq.n	8005b58 <DMA_SetConfig+0x1d0>
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	4a27      	ldr	r2, [pc, #156]	@ (8005bd4 <DMA_SetConfig+0x24c>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d00e      	beq.n	8005b58 <DMA_SetConfig+0x1d0>
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	4a26      	ldr	r2, [pc, #152]	@ (8005bd8 <DMA_SetConfig+0x250>)
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d009      	beq.n	8005b58 <DMA_SetConfig+0x1d0>
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	4a24      	ldr	r2, [pc, #144]	@ (8005bdc <DMA_SetConfig+0x254>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d004      	beq.n	8005b58 <DMA_SetConfig+0x1d0>
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	4a23      	ldr	r2, [pc, #140]	@ (8005be0 <DMA_SetConfig+0x258>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d101      	bne.n	8005b5c <DMA_SetConfig+0x1d4>
 8005b58:	2301      	movs	r3, #1
 8005b5a:	e000      	b.n	8005b5e <DMA_SetConfig+0x1d6>
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d059      	beq.n	8005c16 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b66:	f003 031f 	and.w	r3, r3, #31
 8005b6a:	223f      	movs	r2, #63	@ 0x3f
 8005b6c:	409a      	lsls	r2, r3
 8005b6e:	697b      	ldr	r3, [r7, #20]
 8005b70:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	681a      	ldr	r2, [r3, #0]
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005b80:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	683a      	ldr	r2, [r7, #0]
 8005b88:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	689b      	ldr	r3, [r3, #8]
 8005b8e:	2b40      	cmp	r3, #64	@ 0x40
 8005b90:	d138      	bne.n	8005c04 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	687a      	ldr	r2, [r7, #4]
 8005b98:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	68ba      	ldr	r2, [r7, #8]
 8005ba0:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005ba2:	e086      	b.n	8005cb2 <DMA_SetConfig+0x32a>
 8005ba4:	40020010 	.word	0x40020010
 8005ba8:	40020028 	.word	0x40020028
 8005bac:	40020040 	.word	0x40020040
 8005bb0:	40020058 	.word	0x40020058
 8005bb4:	40020070 	.word	0x40020070
 8005bb8:	40020088 	.word	0x40020088
 8005bbc:	400200a0 	.word	0x400200a0
 8005bc0:	400200b8 	.word	0x400200b8
 8005bc4:	40020410 	.word	0x40020410
 8005bc8:	40020428 	.word	0x40020428
 8005bcc:	40020440 	.word	0x40020440
 8005bd0:	40020458 	.word	0x40020458
 8005bd4:	40020470 	.word	0x40020470
 8005bd8:	40020488 	.word	0x40020488
 8005bdc:	400204a0 	.word	0x400204a0
 8005be0:	400204b8 	.word	0x400204b8
 8005be4:	58025408 	.word	0x58025408
 8005be8:	5802541c 	.word	0x5802541c
 8005bec:	58025430 	.word	0x58025430
 8005bf0:	58025444 	.word	0x58025444
 8005bf4:	58025458 	.word	0x58025458
 8005bf8:	5802546c 	.word	0x5802546c
 8005bfc:	58025480 	.word	0x58025480
 8005c00:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	68ba      	ldr	r2, [r7, #8]
 8005c0a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	687a      	ldr	r2, [r7, #4]
 8005c12:	60da      	str	r2, [r3, #12]
}
 8005c14:	e04d      	b.n	8005cb2 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	4a29      	ldr	r2, [pc, #164]	@ (8005cc0 <DMA_SetConfig+0x338>)
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	d022      	beq.n	8005c66 <DMA_SetConfig+0x2de>
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	4a27      	ldr	r2, [pc, #156]	@ (8005cc4 <DMA_SetConfig+0x33c>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d01d      	beq.n	8005c66 <DMA_SetConfig+0x2de>
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	4a26      	ldr	r2, [pc, #152]	@ (8005cc8 <DMA_SetConfig+0x340>)
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d018      	beq.n	8005c66 <DMA_SetConfig+0x2de>
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	4a24      	ldr	r2, [pc, #144]	@ (8005ccc <DMA_SetConfig+0x344>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d013      	beq.n	8005c66 <DMA_SetConfig+0x2de>
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	4a23      	ldr	r2, [pc, #140]	@ (8005cd0 <DMA_SetConfig+0x348>)
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d00e      	beq.n	8005c66 <DMA_SetConfig+0x2de>
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	4a21      	ldr	r2, [pc, #132]	@ (8005cd4 <DMA_SetConfig+0x34c>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d009      	beq.n	8005c66 <DMA_SetConfig+0x2de>
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	4a20      	ldr	r2, [pc, #128]	@ (8005cd8 <DMA_SetConfig+0x350>)
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d004      	beq.n	8005c66 <DMA_SetConfig+0x2de>
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	4a1e      	ldr	r2, [pc, #120]	@ (8005cdc <DMA_SetConfig+0x354>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d101      	bne.n	8005c6a <DMA_SetConfig+0x2e2>
 8005c66:	2301      	movs	r3, #1
 8005c68:	e000      	b.n	8005c6c <DMA_SetConfig+0x2e4>
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d020      	beq.n	8005cb2 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c74:	f003 031f 	and.w	r3, r3, #31
 8005c78:	2201      	movs	r2, #1
 8005c7a:	409a      	lsls	r2, r3
 8005c7c:	693b      	ldr	r3, [r7, #16]
 8005c7e:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	683a      	ldr	r2, [r7, #0]
 8005c86:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	689b      	ldr	r3, [r3, #8]
 8005c8c:	2b40      	cmp	r3, #64	@ 0x40
 8005c8e:	d108      	bne.n	8005ca2 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	687a      	ldr	r2, [r7, #4]
 8005c96:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	68ba      	ldr	r2, [r7, #8]
 8005c9e:	60da      	str	r2, [r3, #12]
}
 8005ca0:	e007      	b.n	8005cb2 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	68ba      	ldr	r2, [r7, #8]
 8005ca8:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	687a      	ldr	r2, [r7, #4]
 8005cb0:	60da      	str	r2, [r3, #12]
}
 8005cb2:	bf00      	nop
 8005cb4:	371c      	adds	r7, #28
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbc:	4770      	bx	lr
 8005cbe:	bf00      	nop
 8005cc0:	58025408 	.word	0x58025408
 8005cc4:	5802541c 	.word	0x5802541c
 8005cc8:	58025430 	.word	0x58025430
 8005ccc:	58025444 	.word	0x58025444
 8005cd0:	58025458 	.word	0x58025458
 8005cd4:	5802546c 	.word	0x5802546c
 8005cd8:	58025480 	.word	0x58025480
 8005cdc:	58025494 	.word	0x58025494

08005ce0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005ce0:	b480      	push	{r7}
 8005ce2:	b085      	sub	sp, #20
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	4a42      	ldr	r2, [pc, #264]	@ (8005df8 <DMA_CalcBaseAndBitshift+0x118>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d04a      	beq.n	8005d88 <DMA_CalcBaseAndBitshift+0xa8>
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	4a41      	ldr	r2, [pc, #260]	@ (8005dfc <DMA_CalcBaseAndBitshift+0x11c>)
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	d045      	beq.n	8005d88 <DMA_CalcBaseAndBitshift+0xa8>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	4a3f      	ldr	r2, [pc, #252]	@ (8005e00 <DMA_CalcBaseAndBitshift+0x120>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d040      	beq.n	8005d88 <DMA_CalcBaseAndBitshift+0xa8>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	4a3e      	ldr	r2, [pc, #248]	@ (8005e04 <DMA_CalcBaseAndBitshift+0x124>)
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d03b      	beq.n	8005d88 <DMA_CalcBaseAndBitshift+0xa8>
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	4a3c      	ldr	r2, [pc, #240]	@ (8005e08 <DMA_CalcBaseAndBitshift+0x128>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d036      	beq.n	8005d88 <DMA_CalcBaseAndBitshift+0xa8>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	4a3b      	ldr	r2, [pc, #236]	@ (8005e0c <DMA_CalcBaseAndBitshift+0x12c>)
 8005d20:	4293      	cmp	r3, r2
 8005d22:	d031      	beq.n	8005d88 <DMA_CalcBaseAndBitshift+0xa8>
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	4a39      	ldr	r2, [pc, #228]	@ (8005e10 <DMA_CalcBaseAndBitshift+0x130>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d02c      	beq.n	8005d88 <DMA_CalcBaseAndBitshift+0xa8>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	4a38      	ldr	r2, [pc, #224]	@ (8005e14 <DMA_CalcBaseAndBitshift+0x134>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d027      	beq.n	8005d88 <DMA_CalcBaseAndBitshift+0xa8>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	4a36      	ldr	r2, [pc, #216]	@ (8005e18 <DMA_CalcBaseAndBitshift+0x138>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d022      	beq.n	8005d88 <DMA_CalcBaseAndBitshift+0xa8>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	4a35      	ldr	r2, [pc, #212]	@ (8005e1c <DMA_CalcBaseAndBitshift+0x13c>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d01d      	beq.n	8005d88 <DMA_CalcBaseAndBitshift+0xa8>
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	4a33      	ldr	r2, [pc, #204]	@ (8005e20 <DMA_CalcBaseAndBitshift+0x140>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d018      	beq.n	8005d88 <DMA_CalcBaseAndBitshift+0xa8>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	4a32      	ldr	r2, [pc, #200]	@ (8005e24 <DMA_CalcBaseAndBitshift+0x144>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d013      	beq.n	8005d88 <DMA_CalcBaseAndBitshift+0xa8>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	4a30      	ldr	r2, [pc, #192]	@ (8005e28 <DMA_CalcBaseAndBitshift+0x148>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d00e      	beq.n	8005d88 <DMA_CalcBaseAndBitshift+0xa8>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	4a2f      	ldr	r2, [pc, #188]	@ (8005e2c <DMA_CalcBaseAndBitshift+0x14c>)
 8005d70:	4293      	cmp	r3, r2
 8005d72:	d009      	beq.n	8005d88 <DMA_CalcBaseAndBitshift+0xa8>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	4a2d      	ldr	r2, [pc, #180]	@ (8005e30 <DMA_CalcBaseAndBitshift+0x150>)
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d004      	beq.n	8005d88 <DMA_CalcBaseAndBitshift+0xa8>
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	4a2c      	ldr	r2, [pc, #176]	@ (8005e34 <DMA_CalcBaseAndBitshift+0x154>)
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d101      	bne.n	8005d8c <DMA_CalcBaseAndBitshift+0xac>
 8005d88:	2301      	movs	r3, #1
 8005d8a:	e000      	b.n	8005d8e <DMA_CalcBaseAndBitshift+0xae>
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d024      	beq.n	8005ddc <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	b2db      	uxtb	r3, r3
 8005d98:	3b10      	subs	r3, #16
 8005d9a:	4a27      	ldr	r2, [pc, #156]	@ (8005e38 <DMA_CalcBaseAndBitshift+0x158>)
 8005d9c:	fba2 2303 	umull	r2, r3, r2, r3
 8005da0:	091b      	lsrs	r3, r3, #4
 8005da2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	f003 0307 	and.w	r3, r3, #7
 8005daa:	4a24      	ldr	r2, [pc, #144]	@ (8005e3c <DMA_CalcBaseAndBitshift+0x15c>)
 8005dac:	5cd3      	ldrb	r3, [r2, r3]
 8005dae:	461a      	mov	r2, r3
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	2b03      	cmp	r3, #3
 8005db8:	d908      	bls.n	8005dcc <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	461a      	mov	r2, r3
 8005dc0:	4b1f      	ldr	r3, [pc, #124]	@ (8005e40 <DMA_CalcBaseAndBitshift+0x160>)
 8005dc2:	4013      	ands	r3, r2
 8005dc4:	1d1a      	adds	r2, r3, #4
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	659a      	str	r2, [r3, #88]	@ 0x58
 8005dca:	e00d      	b.n	8005de8 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	461a      	mov	r2, r3
 8005dd2:	4b1b      	ldr	r3, [pc, #108]	@ (8005e40 <DMA_CalcBaseAndBitshift+0x160>)
 8005dd4:	4013      	ands	r3, r2
 8005dd6:	687a      	ldr	r2, [r7, #4]
 8005dd8:	6593      	str	r3, [r2, #88]	@ 0x58
 8005dda:	e005      	b.n	8005de8 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8005dec:	4618      	mov	r0, r3
 8005dee:	3714      	adds	r7, #20
 8005df0:	46bd      	mov	sp, r7
 8005df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df6:	4770      	bx	lr
 8005df8:	40020010 	.word	0x40020010
 8005dfc:	40020028 	.word	0x40020028
 8005e00:	40020040 	.word	0x40020040
 8005e04:	40020058 	.word	0x40020058
 8005e08:	40020070 	.word	0x40020070
 8005e0c:	40020088 	.word	0x40020088
 8005e10:	400200a0 	.word	0x400200a0
 8005e14:	400200b8 	.word	0x400200b8
 8005e18:	40020410 	.word	0x40020410
 8005e1c:	40020428 	.word	0x40020428
 8005e20:	40020440 	.word	0x40020440
 8005e24:	40020458 	.word	0x40020458
 8005e28:	40020470 	.word	0x40020470
 8005e2c:	40020488 	.word	0x40020488
 8005e30:	400204a0 	.word	0x400204a0
 8005e34:	400204b8 	.word	0x400204b8
 8005e38:	aaaaaaab 	.word	0xaaaaaaab
 8005e3c:	0800d338 	.word	0x0800d338
 8005e40:	fffffc00 	.word	0xfffffc00

08005e44 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005e44:	b480      	push	{r7}
 8005e46:	b085      	sub	sp, #20
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	699b      	ldr	r3, [r3, #24]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d120      	bne.n	8005e9a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e5c:	2b03      	cmp	r3, #3
 8005e5e:	d858      	bhi.n	8005f12 <DMA_CheckFifoParam+0xce>
 8005e60:	a201      	add	r2, pc, #4	@ (adr r2, 8005e68 <DMA_CheckFifoParam+0x24>)
 8005e62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e66:	bf00      	nop
 8005e68:	08005e79 	.word	0x08005e79
 8005e6c:	08005e8b 	.word	0x08005e8b
 8005e70:	08005e79 	.word	0x08005e79
 8005e74:	08005f13 	.word	0x08005f13
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e7c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d048      	beq.n	8005f16 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8005e84:	2301      	movs	r3, #1
 8005e86:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005e88:	e045      	b.n	8005f16 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e8e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005e92:	d142      	bne.n	8005f1a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8005e94:	2301      	movs	r3, #1
 8005e96:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005e98:	e03f      	b.n	8005f1a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	699b      	ldr	r3, [r3, #24]
 8005e9e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005ea2:	d123      	bne.n	8005eec <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ea8:	2b03      	cmp	r3, #3
 8005eaa:	d838      	bhi.n	8005f1e <DMA_CheckFifoParam+0xda>
 8005eac:	a201      	add	r2, pc, #4	@ (adr r2, 8005eb4 <DMA_CheckFifoParam+0x70>)
 8005eae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eb2:	bf00      	nop
 8005eb4:	08005ec5 	.word	0x08005ec5
 8005eb8:	08005ecb 	.word	0x08005ecb
 8005ebc:	08005ec5 	.word	0x08005ec5
 8005ec0:	08005edd 	.word	0x08005edd
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8005ec4:	2301      	movs	r3, #1
 8005ec6:	73fb      	strb	r3, [r7, #15]
        break;
 8005ec8:	e030      	b.n	8005f2c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ece:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d025      	beq.n	8005f22 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8005ed6:	2301      	movs	r3, #1
 8005ed8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005eda:	e022      	b.n	8005f22 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ee0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005ee4:	d11f      	bne.n	8005f26 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8005ee6:	2301      	movs	r3, #1
 8005ee8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005eea:	e01c      	b.n	8005f26 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ef0:	2b02      	cmp	r3, #2
 8005ef2:	d902      	bls.n	8005efa <DMA_CheckFifoParam+0xb6>
 8005ef4:	2b03      	cmp	r3, #3
 8005ef6:	d003      	beq.n	8005f00 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8005ef8:	e018      	b.n	8005f2c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8005efa:	2301      	movs	r3, #1
 8005efc:	73fb      	strb	r3, [r7, #15]
        break;
 8005efe:	e015      	b.n	8005f2c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f04:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d00e      	beq.n	8005f2a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8005f0c:	2301      	movs	r3, #1
 8005f0e:	73fb      	strb	r3, [r7, #15]
    break;
 8005f10:	e00b      	b.n	8005f2a <DMA_CheckFifoParam+0xe6>
        break;
 8005f12:	bf00      	nop
 8005f14:	e00a      	b.n	8005f2c <DMA_CheckFifoParam+0xe8>
        break;
 8005f16:	bf00      	nop
 8005f18:	e008      	b.n	8005f2c <DMA_CheckFifoParam+0xe8>
        break;
 8005f1a:	bf00      	nop
 8005f1c:	e006      	b.n	8005f2c <DMA_CheckFifoParam+0xe8>
        break;
 8005f1e:	bf00      	nop
 8005f20:	e004      	b.n	8005f2c <DMA_CheckFifoParam+0xe8>
        break;
 8005f22:	bf00      	nop
 8005f24:	e002      	b.n	8005f2c <DMA_CheckFifoParam+0xe8>
        break;
 8005f26:	bf00      	nop
 8005f28:	e000      	b.n	8005f2c <DMA_CheckFifoParam+0xe8>
    break;
 8005f2a:	bf00      	nop
    }
  }

  return status;
 8005f2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f2e:	4618      	mov	r0, r3
 8005f30:	3714      	adds	r7, #20
 8005f32:	46bd      	mov	sp, r7
 8005f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f38:	4770      	bx	lr
 8005f3a:	bf00      	nop

08005f3c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005f3c:	b480      	push	{r7}
 8005f3e:	b085      	sub	sp, #20
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	4a38      	ldr	r2, [pc, #224]	@ (8006030 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8005f50:	4293      	cmp	r3, r2
 8005f52:	d022      	beq.n	8005f9a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	4a36      	ldr	r2, [pc, #216]	@ (8006034 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d01d      	beq.n	8005f9a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	4a35      	ldr	r2, [pc, #212]	@ (8006038 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8005f64:	4293      	cmp	r3, r2
 8005f66:	d018      	beq.n	8005f9a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	4a33      	ldr	r2, [pc, #204]	@ (800603c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d013      	beq.n	8005f9a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	4a32      	ldr	r2, [pc, #200]	@ (8006040 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8005f78:	4293      	cmp	r3, r2
 8005f7a:	d00e      	beq.n	8005f9a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	4a30      	ldr	r2, [pc, #192]	@ (8006044 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8005f82:	4293      	cmp	r3, r2
 8005f84:	d009      	beq.n	8005f9a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	4a2f      	ldr	r2, [pc, #188]	@ (8006048 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	d004      	beq.n	8005f9a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	4a2d      	ldr	r2, [pc, #180]	@ (800604c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8005f96:	4293      	cmp	r3, r2
 8005f98:	d101      	bne.n	8005f9e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8005f9a:	2301      	movs	r3, #1
 8005f9c:	e000      	b.n	8005fa0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d01a      	beq.n	8005fda <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	b2db      	uxtb	r3, r3
 8005faa:	3b08      	subs	r3, #8
 8005fac:	4a28      	ldr	r2, [pc, #160]	@ (8006050 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8005fae:	fba2 2303 	umull	r2, r3, r2, r3
 8005fb2:	091b      	lsrs	r3, r3, #4
 8005fb4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8005fb6:	68fa      	ldr	r2, [r7, #12]
 8005fb8:	4b26      	ldr	r3, [pc, #152]	@ (8006054 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8005fba:	4413      	add	r3, r2
 8005fbc:	009b      	lsls	r3, r3, #2
 8005fbe:	461a      	mov	r2, r3
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	4a24      	ldr	r2, [pc, #144]	@ (8006058 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8005fc8:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	f003 031f 	and.w	r3, r3, #31
 8005fd0:	2201      	movs	r2, #1
 8005fd2:	409a      	lsls	r2, r3
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8005fd8:	e024      	b.n	8006024 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	b2db      	uxtb	r3, r3
 8005fe0:	3b10      	subs	r3, #16
 8005fe2:	4a1e      	ldr	r2, [pc, #120]	@ (800605c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8005fe4:	fba2 2303 	umull	r2, r3, r2, r3
 8005fe8:	091b      	lsrs	r3, r3, #4
 8005fea:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8005fec:	68bb      	ldr	r3, [r7, #8]
 8005fee:	4a1c      	ldr	r2, [pc, #112]	@ (8006060 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d806      	bhi.n	8006002 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8005ff4:	68bb      	ldr	r3, [r7, #8]
 8005ff6:	4a1b      	ldr	r2, [pc, #108]	@ (8006064 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8005ff8:	4293      	cmp	r3, r2
 8005ffa:	d902      	bls.n	8006002 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	3308      	adds	r3, #8
 8006000:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8006002:	68fa      	ldr	r2, [r7, #12]
 8006004:	4b18      	ldr	r3, [pc, #96]	@ (8006068 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8006006:	4413      	add	r3, r2
 8006008:	009b      	lsls	r3, r3, #2
 800600a:	461a      	mov	r2, r3
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	4a16      	ldr	r2, [pc, #88]	@ (800606c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8006014:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	f003 031f 	and.w	r3, r3, #31
 800601c:	2201      	movs	r2, #1
 800601e:	409a      	lsls	r2, r3
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006024:	bf00      	nop
 8006026:	3714      	adds	r7, #20
 8006028:	46bd      	mov	sp, r7
 800602a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602e:	4770      	bx	lr
 8006030:	58025408 	.word	0x58025408
 8006034:	5802541c 	.word	0x5802541c
 8006038:	58025430 	.word	0x58025430
 800603c:	58025444 	.word	0x58025444
 8006040:	58025458 	.word	0x58025458
 8006044:	5802546c 	.word	0x5802546c
 8006048:	58025480 	.word	0x58025480
 800604c:	58025494 	.word	0x58025494
 8006050:	cccccccd 	.word	0xcccccccd
 8006054:	16009600 	.word	0x16009600
 8006058:	58025880 	.word	0x58025880
 800605c:	aaaaaaab 	.word	0xaaaaaaab
 8006060:	400204b8 	.word	0x400204b8
 8006064:	4002040f 	.word	0x4002040f
 8006068:	10008200 	.word	0x10008200
 800606c:	40020880 	.word	0x40020880

08006070 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006070:	b480      	push	{r7}
 8006072:	b085      	sub	sp, #20
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	685b      	ldr	r3, [r3, #4]
 800607c:	b2db      	uxtb	r3, r3
 800607e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d04a      	beq.n	800611c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	2b08      	cmp	r3, #8
 800608a:	d847      	bhi.n	800611c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	4a25      	ldr	r2, [pc, #148]	@ (8006128 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d022      	beq.n	80060dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	4a24      	ldr	r2, [pc, #144]	@ (800612c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800609c:	4293      	cmp	r3, r2
 800609e:	d01d      	beq.n	80060dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4a22      	ldr	r2, [pc, #136]	@ (8006130 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d018      	beq.n	80060dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	4a21      	ldr	r2, [pc, #132]	@ (8006134 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80060b0:	4293      	cmp	r3, r2
 80060b2:	d013      	beq.n	80060dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	4a1f      	ldr	r2, [pc, #124]	@ (8006138 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d00e      	beq.n	80060dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	4a1e      	ldr	r2, [pc, #120]	@ (800613c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80060c4:	4293      	cmp	r3, r2
 80060c6:	d009      	beq.n	80060dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	4a1c      	ldr	r2, [pc, #112]	@ (8006140 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d004      	beq.n	80060dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	4a1b      	ldr	r2, [pc, #108]	@ (8006144 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80060d8:	4293      	cmp	r3, r2
 80060da:	d101      	bne.n	80060e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80060dc:	2301      	movs	r3, #1
 80060de:	e000      	b.n	80060e2 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80060e0:	2300      	movs	r3, #0
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d00a      	beq.n	80060fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80060e6:	68fa      	ldr	r2, [r7, #12]
 80060e8:	4b17      	ldr	r3, [pc, #92]	@ (8006148 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80060ea:	4413      	add	r3, r2
 80060ec:	009b      	lsls	r3, r3, #2
 80060ee:	461a      	mov	r2, r3
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	4a15      	ldr	r2, [pc, #84]	@ (800614c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80060f8:	671a      	str	r2, [r3, #112]	@ 0x70
 80060fa:	e009      	b.n	8006110 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80060fc:	68fa      	ldr	r2, [r7, #12]
 80060fe:	4b14      	ldr	r3, [pc, #80]	@ (8006150 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8006100:	4413      	add	r3, r2
 8006102:	009b      	lsls	r3, r3, #2
 8006104:	461a      	mov	r2, r3
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	4a11      	ldr	r2, [pc, #68]	@ (8006154 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800610e:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	3b01      	subs	r3, #1
 8006114:	2201      	movs	r2, #1
 8006116:	409a      	lsls	r2, r3
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 800611c:	bf00      	nop
 800611e:	3714      	adds	r7, #20
 8006120:	46bd      	mov	sp, r7
 8006122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006126:	4770      	bx	lr
 8006128:	58025408 	.word	0x58025408
 800612c:	5802541c 	.word	0x5802541c
 8006130:	58025430 	.word	0x58025430
 8006134:	58025444 	.word	0x58025444
 8006138:	58025458 	.word	0x58025458
 800613c:	5802546c 	.word	0x5802546c
 8006140:	58025480 	.word	0x58025480
 8006144:	58025494 	.word	0x58025494
 8006148:	1600963f 	.word	0x1600963f
 800614c:	58025940 	.word	0x58025940
 8006150:	1000823f 	.word	0x1000823f
 8006154:	40020940 	.word	0x40020940

08006158 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006158:	b480      	push	{r7}
 800615a:	b089      	sub	sp, #36	@ 0x24
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
 8006160:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006162:	2300      	movs	r3, #0
 8006164:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8006166:	4b86      	ldr	r3, [pc, #536]	@ (8006380 <HAL_GPIO_Init+0x228>)
 8006168:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800616a:	e18c      	b.n	8006486 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	681a      	ldr	r2, [r3, #0]
 8006170:	2101      	movs	r1, #1
 8006172:	69fb      	ldr	r3, [r7, #28]
 8006174:	fa01 f303 	lsl.w	r3, r1, r3
 8006178:	4013      	ands	r3, r2
 800617a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800617c:	693b      	ldr	r3, [r7, #16]
 800617e:	2b00      	cmp	r3, #0
 8006180:	f000 817e 	beq.w	8006480 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	685b      	ldr	r3, [r3, #4]
 8006188:	f003 0303 	and.w	r3, r3, #3
 800618c:	2b01      	cmp	r3, #1
 800618e:	d005      	beq.n	800619c <HAL_GPIO_Init+0x44>
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	685b      	ldr	r3, [r3, #4]
 8006194:	f003 0303 	and.w	r3, r3, #3
 8006198:	2b02      	cmp	r3, #2
 800619a:	d130      	bne.n	80061fe <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	689b      	ldr	r3, [r3, #8]
 80061a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80061a2:	69fb      	ldr	r3, [r7, #28]
 80061a4:	005b      	lsls	r3, r3, #1
 80061a6:	2203      	movs	r2, #3
 80061a8:	fa02 f303 	lsl.w	r3, r2, r3
 80061ac:	43db      	mvns	r3, r3
 80061ae:	69ba      	ldr	r2, [r7, #24]
 80061b0:	4013      	ands	r3, r2
 80061b2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	68da      	ldr	r2, [r3, #12]
 80061b8:	69fb      	ldr	r3, [r7, #28]
 80061ba:	005b      	lsls	r3, r3, #1
 80061bc:	fa02 f303 	lsl.w	r3, r2, r3
 80061c0:	69ba      	ldr	r2, [r7, #24]
 80061c2:	4313      	orrs	r3, r2
 80061c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	69ba      	ldr	r2, [r7, #24]
 80061ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	685b      	ldr	r3, [r3, #4]
 80061d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80061d2:	2201      	movs	r2, #1
 80061d4:	69fb      	ldr	r3, [r7, #28]
 80061d6:	fa02 f303 	lsl.w	r3, r2, r3
 80061da:	43db      	mvns	r3, r3
 80061dc:	69ba      	ldr	r2, [r7, #24]
 80061de:	4013      	ands	r3, r2
 80061e0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	685b      	ldr	r3, [r3, #4]
 80061e6:	091b      	lsrs	r3, r3, #4
 80061e8:	f003 0201 	and.w	r2, r3, #1
 80061ec:	69fb      	ldr	r3, [r7, #28]
 80061ee:	fa02 f303 	lsl.w	r3, r2, r3
 80061f2:	69ba      	ldr	r2, [r7, #24]
 80061f4:	4313      	orrs	r3, r2
 80061f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	69ba      	ldr	r2, [r7, #24]
 80061fc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	685b      	ldr	r3, [r3, #4]
 8006202:	f003 0303 	and.w	r3, r3, #3
 8006206:	2b03      	cmp	r3, #3
 8006208:	d017      	beq.n	800623a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	68db      	ldr	r3, [r3, #12]
 800620e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006210:	69fb      	ldr	r3, [r7, #28]
 8006212:	005b      	lsls	r3, r3, #1
 8006214:	2203      	movs	r2, #3
 8006216:	fa02 f303 	lsl.w	r3, r2, r3
 800621a:	43db      	mvns	r3, r3
 800621c:	69ba      	ldr	r2, [r7, #24]
 800621e:	4013      	ands	r3, r2
 8006220:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	689a      	ldr	r2, [r3, #8]
 8006226:	69fb      	ldr	r3, [r7, #28]
 8006228:	005b      	lsls	r3, r3, #1
 800622a:	fa02 f303 	lsl.w	r3, r2, r3
 800622e:	69ba      	ldr	r2, [r7, #24]
 8006230:	4313      	orrs	r3, r2
 8006232:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	69ba      	ldr	r2, [r7, #24]
 8006238:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	685b      	ldr	r3, [r3, #4]
 800623e:	f003 0303 	and.w	r3, r3, #3
 8006242:	2b02      	cmp	r3, #2
 8006244:	d123      	bne.n	800628e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006246:	69fb      	ldr	r3, [r7, #28]
 8006248:	08da      	lsrs	r2, r3, #3
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	3208      	adds	r2, #8
 800624e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006252:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006254:	69fb      	ldr	r3, [r7, #28]
 8006256:	f003 0307 	and.w	r3, r3, #7
 800625a:	009b      	lsls	r3, r3, #2
 800625c:	220f      	movs	r2, #15
 800625e:	fa02 f303 	lsl.w	r3, r2, r3
 8006262:	43db      	mvns	r3, r3
 8006264:	69ba      	ldr	r2, [r7, #24]
 8006266:	4013      	ands	r3, r2
 8006268:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	691a      	ldr	r2, [r3, #16]
 800626e:	69fb      	ldr	r3, [r7, #28]
 8006270:	f003 0307 	and.w	r3, r3, #7
 8006274:	009b      	lsls	r3, r3, #2
 8006276:	fa02 f303 	lsl.w	r3, r2, r3
 800627a:	69ba      	ldr	r2, [r7, #24]
 800627c:	4313      	orrs	r3, r2
 800627e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006280:	69fb      	ldr	r3, [r7, #28]
 8006282:	08da      	lsrs	r2, r3, #3
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	3208      	adds	r2, #8
 8006288:	69b9      	ldr	r1, [r7, #24]
 800628a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006294:	69fb      	ldr	r3, [r7, #28]
 8006296:	005b      	lsls	r3, r3, #1
 8006298:	2203      	movs	r2, #3
 800629a:	fa02 f303 	lsl.w	r3, r2, r3
 800629e:	43db      	mvns	r3, r3
 80062a0:	69ba      	ldr	r2, [r7, #24]
 80062a2:	4013      	ands	r3, r2
 80062a4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	685b      	ldr	r3, [r3, #4]
 80062aa:	f003 0203 	and.w	r2, r3, #3
 80062ae:	69fb      	ldr	r3, [r7, #28]
 80062b0:	005b      	lsls	r3, r3, #1
 80062b2:	fa02 f303 	lsl.w	r3, r2, r3
 80062b6:	69ba      	ldr	r2, [r7, #24]
 80062b8:	4313      	orrs	r3, r2
 80062ba:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	69ba      	ldr	r2, [r7, #24]
 80062c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	685b      	ldr	r3, [r3, #4]
 80062c6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	f000 80d8 	beq.w	8006480 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80062d0:	4b2c      	ldr	r3, [pc, #176]	@ (8006384 <HAL_GPIO_Init+0x22c>)
 80062d2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80062d6:	4a2b      	ldr	r2, [pc, #172]	@ (8006384 <HAL_GPIO_Init+0x22c>)
 80062d8:	f043 0302 	orr.w	r3, r3, #2
 80062dc:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80062e0:	4b28      	ldr	r3, [pc, #160]	@ (8006384 <HAL_GPIO_Init+0x22c>)
 80062e2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80062e6:	f003 0302 	and.w	r3, r3, #2
 80062ea:	60fb      	str	r3, [r7, #12]
 80062ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80062ee:	4a26      	ldr	r2, [pc, #152]	@ (8006388 <HAL_GPIO_Init+0x230>)
 80062f0:	69fb      	ldr	r3, [r7, #28]
 80062f2:	089b      	lsrs	r3, r3, #2
 80062f4:	3302      	adds	r3, #2
 80062f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80062fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80062fc:	69fb      	ldr	r3, [r7, #28]
 80062fe:	f003 0303 	and.w	r3, r3, #3
 8006302:	009b      	lsls	r3, r3, #2
 8006304:	220f      	movs	r2, #15
 8006306:	fa02 f303 	lsl.w	r3, r2, r3
 800630a:	43db      	mvns	r3, r3
 800630c:	69ba      	ldr	r2, [r7, #24]
 800630e:	4013      	ands	r3, r2
 8006310:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	4a1d      	ldr	r2, [pc, #116]	@ (800638c <HAL_GPIO_Init+0x234>)
 8006316:	4293      	cmp	r3, r2
 8006318:	d04a      	beq.n	80063b0 <HAL_GPIO_Init+0x258>
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	4a1c      	ldr	r2, [pc, #112]	@ (8006390 <HAL_GPIO_Init+0x238>)
 800631e:	4293      	cmp	r3, r2
 8006320:	d02b      	beq.n	800637a <HAL_GPIO_Init+0x222>
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	4a1b      	ldr	r2, [pc, #108]	@ (8006394 <HAL_GPIO_Init+0x23c>)
 8006326:	4293      	cmp	r3, r2
 8006328:	d025      	beq.n	8006376 <HAL_GPIO_Init+0x21e>
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	4a1a      	ldr	r2, [pc, #104]	@ (8006398 <HAL_GPIO_Init+0x240>)
 800632e:	4293      	cmp	r3, r2
 8006330:	d01f      	beq.n	8006372 <HAL_GPIO_Init+0x21a>
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	4a19      	ldr	r2, [pc, #100]	@ (800639c <HAL_GPIO_Init+0x244>)
 8006336:	4293      	cmp	r3, r2
 8006338:	d019      	beq.n	800636e <HAL_GPIO_Init+0x216>
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	4a18      	ldr	r2, [pc, #96]	@ (80063a0 <HAL_GPIO_Init+0x248>)
 800633e:	4293      	cmp	r3, r2
 8006340:	d013      	beq.n	800636a <HAL_GPIO_Init+0x212>
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	4a17      	ldr	r2, [pc, #92]	@ (80063a4 <HAL_GPIO_Init+0x24c>)
 8006346:	4293      	cmp	r3, r2
 8006348:	d00d      	beq.n	8006366 <HAL_GPIO_Init+0x20e>
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	4a16      	ldr	r2, [pc, #88]	@ (80063a8 <HAL_GPIO_Init+0x250>)
 800634e:	4293      	cmp	r3, r2
 8006350:	d007      	beq.n	8006362 <HAL_GPIO_Init+0x20a>
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	4a15      	ldr	r2, [pc, #84]	@ (80063ac <HAL_GPIO_Init+0x254>)
 8006356:	4293      	cmp	r3, r2
 8006358:	d101      	bne.n	800635e <HAL_GPIO_Init+0x206>
 800635a:	2309      	movs	r3, #9
 800635c:	e029      	b.n	80063b2 <HAL_GPIO_Init+0x25a>
 800635e:	230a      	movs	r3, #10
 8006360:	e027      	b.n	80063b2 <HAL_GPIO_Init+0x25a>
 8006362:	2307      	movs	r3, #7
 8006364:	e025      	b.n	80063b2 <HAL_GPIO_Init+0x25a>
 8006366:	2306      	movs	r3, #6
 8006368:	e023      	b.n	80063b2 <HAL_GPIO_Init+0x25a>
 800636a:	2305      	movs	r3, #5
 800636c:	e021      	b.n	80063b2 <HAL_GPIO_Init+0x25a>
 800636e:	2304      	movs	r3, #4
 8006370:	e01f      	b.n	80063b2 <HAL_GPIO_Init+0x25a>
 8006372:	2303      	movs	r3, #3
 8006374:	e01d      	b.n	80063b2 <HAL_GPIO_Init+0x25a>
 8006376:	2302      	movs	r3, #2
 8006378:	e01b      	b.n	80063b2 <HAL_GPIO_Init+0x25a>
 800637a:	2301      	movs	r3, #1
 800637c:	e019      	b.n	80063b2 <HAL_GPIO_Init+0x25a>
 800637e:	bf00      	nop
 8006380:	58000080 	.word	0x58000080
 8006384:	58024400 	.word	0x58024400
 8006388:	58000400 	.word	0x58000400
 800638c:	58020000 	.word	0x58020000
 8006390:	58020400 	.word	0x58020400
 8006394:	58020800 	.word	0x58020800
 8006398:	58020c00 	.word	0x58020c00
 800639c:	58021000 	.word	0x58021000
 80063a0:	58021400 	.word	0x58021400
 80063a4:	58021800 	.word	0x58021800
 80063a8:	58021c00 	.word	0x58021c00
 80063ac:	58022400 	.word	0x58022400
 80063b0:	2300      	movs	r3, #0
 80063b2:	69fa      	ldr	r2, [r7, #28]
 80063b4:	f002 0203 	and.w	r2, r2, #3
 80063b8:	0092      	lsls	r2, r2, #2
 80063ba:	4093      	lsls	r3, r2
 80063bc:	69ba      	ldr	r2, [r7, #24]
 80063be:	4313      	orrs	r3, r2
 80063c0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80063c2:	4938      	ldr	r1, [pc, #224]	@ (80064a4 <HAL_GPIO_Init+0x34c>)
 80063c4:	69fb      	ldr	r3, [r7, #28]
 80063c6:	089b      	lsrs	r3, r3, #2
 80063c8:	3302      	adds	r3, #2
 80063ca:	69ba      	ldr	r2, [r7, #24]
 80063cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80063d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80063d8:	693b      	ldr	r3, [r7, #16]
 80063da:	43db      	mvns	r3, r3
 80063dc:	69ba      	ldr	r2, [r7, #24]
 80063de:	4013      	ands	r3, r2
 80063e0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	685b      	ldr	r3, [r3, #4]
 80063e6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d003      	beq.n	80063f6 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80063ee:	69ba      	ldr	r2, [r7, #24]
 80063f0:	693b      	ldr	r3, [r7, #16]
 80063f2:	4313      	orrs	r3, r2
 80063f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80063f6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80063fa:	69bb      	ldr	r3, [r7, #24]
 80063fc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80063fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006402:	685b      	ldr	r3, [r3, #4]
 8006404:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006406:	693b      	ldr	r3, [r7, #16]
 8006408:	43db      	mvns	r3, r3
 800640a:	69ba      	ldr	r2, [r7, #24]
 800640c:	4013      	ands	r3, r2
 800640e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	685b      	ldr	r3, [r3, #4]
 8006414:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006418:	2b00      	cmp	r3, #0
 800641a:	d003      	beq.n	8006424 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 800641c:	69ba      	ldr	r2, [r7, #24]
 800641e:	693b      	ldr	r3, [r7, #16]
 8006420:	4313      	orrs	r3, r2
 8006422:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006424:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006428:	69bb      	ldr	r3, [r7, #24]
 800642a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800642c:	697b      	ldr	r3, [r7, #20]
 800642e:	685b      	ldr	r3, [r3, #4]
 8006430:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006432:	693b      	ldr	r3, [r7, #16]
 8006434:	43db      	mvns	r3, r3
 8006436:	69ba      	ldr	r2, [r7, #24]
 8006438:	4013      	ands	r3, r2
 800643a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	685b      	ldr	r3, [r3, #4]
 8006440:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006444:	2b00      	cmp	r3, #0
 8006446:	d003      	beq.n	8006450 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8006448:	69ba      	ldr	r2, [r7, #24]
 800644a:	693b      	ldr	r3, [r7, #16]
 800644c:	4313      	orrs	r3, r2
 800644e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006450:	697b      	ldr	r3, [r7, #20]
 8006452:	69ba      	ldr	r2, [r7, #24]
 8006454:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8006456:	697b      	ldr	r3, [r7, #20]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800645c:	693b      	ldr	r3, [r7, #16]
 800645e:	43db      	mvns	r3, r3
 8006460:	69ba      	ldr	r2, [r7, #24]
 8006462:	4013      	ands	r3, r2
 8006464:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	685b      	ldr	r3, [r3, #4]
 800646a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800646e:	2b00      	cmp	r3, #0
 8006470:	d003      	beq.n	800647a <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8006472:	69ba      	ldr	r2, [r7, #24]
 8006474:	693b      	ldr	r3, [r7, #16]
 8006476:	4313      	orrs	r3, r2
 8006478:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800647a:	697b      	ldr	r3, [r7, #20]
 800647c:	69ba      	ldr	r2, [r7, #24]
 800647e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8006480:	69fb      	ldr	r3, [r7, #28]
 8006482:	3301      	adds	r3, #1
 8006484:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	681a      	ldr	r2, [r3, #0]
 800648a:	69fb      	ldr	r3, [r7, #28]
 800648c:	fa22 f303 	lsr.w	r3, r2, r3
 8006490:	2b00      	cmp	r3, #0
 8006492:	f47f ae6b 	bne.w	800616c <HAL_GPIO_Init+0x14>
  }
}
 8006496:	bf00      	nop
 8006498:	bf00      	nop
 800649a:	3724      	adds	r7, #36	@ 0x24
 800649c:	46bd      	mov	sp, r7
 800649e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a2:	4770      	bx	lr
 80064a4:	58000400 	.word	0x58000400

080064a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80064a8:	b480      	push	{r7}
 80064aa:	b083      	sub	sp, #12
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
 80064b0:	460b      	mov	r3, r1
 80064b2:	807b      	strh	r3, [r7, #2]
 80064b4:	4613      	mov	r3, r2
 80064b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80064b8:	787b      	ldrb	r3, [r7, #1]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d003      	beq.n	80064c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80064be:	887a      	ldrh	r2, [r7, #2]
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80064c4:	e003      	b.n	80064ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80064c6:	887b      	ldrh	r3, [r7, #2]
 80064c8:	041a      	lsls	r2, r3, #16
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	619a      	str	r2, [r3, #24]
}
 80064ce:	bf00      	nop
 80064d0:	370c      	adds	r7, #12
 80064d2:	46bd      	mov	sp, r7
 80064d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d8:	4770      	bx	lr
	...

080064dc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80064dc:	b580      	push	{r7, lr}
 80064de:	b082      	sub	sp, #8
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d101      	bne.n	80064ee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80064ea:	2301      	movs	r3, #1
 80064ec:	e08b      	b.n	8006606 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80064f4:	b2db      	uxtb	r3, r3
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d106      	bne.n	8006508 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	2200      	movs	r2, #0
 80064fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006502:	6878      	ldr	r0, [r7, #4]
 8006504:	f7fb f926 	bl	8001754 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2224      	movs	r2, #36	@ 0x24
 800650c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	681a      	ldr	r2, [r3, #0]
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f022 0201 	bic.w	r2, r2, #1
 800651e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	685a      	ldr	r2, [r3, #4]
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800652c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	689a      	ldr	r2, [r3, #8]
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800653c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	68db      	ldr	r3, [r3, #12]
 8006542:	2b01      	cmp	r3, #1
 8006544:	d107      	bne.n	8006556 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	689a      	ldr	r2, [r3, #8]
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006552:	609a      	str	r2, [r3, #8]
 8006554:	e006      	b.n	8006564 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	689a      	ldr	r2, [r3, #8]
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8006562:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	68db      	ldr	r3, [r3, #12]
 8006568:	2b02      	cmp	r3, #2
 800656a:	d108      	bne.n	800657e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	685a      	ldr	r2, [r3, #4]
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800657a:	605a      	str	r2, [r3, #4]
 800657c:	e007      	b.n	800658e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	685a      	ldr	r2, [r3, #4]
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800658c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	6859      	ldr	r1, [r3, #4]
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681a      	ldr	r2, [r3, #0]
 8006598:	4b1d      	ldr	r3, [pc, #116]	@ (8006610 <HAL_I2C_Init+0x134>)
 800659a:	430b      	orrs	r3, r1
 800659c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	68da      	ldr	r2, [r3, #12]
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80065ac:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	691a      	ldr	r2, [r3, #16]
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	695b      	ldr	r3, [r3, #20]
 80065b6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	699b      	ldr	r3, [r3, #24]
 80065be:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	430a      	orrs	r2, r1
 80065c6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	69d9      	ldr	r1, [r3, #28]
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	6a1a      	ldr	r2, [r3, #32]
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	430a      	orrs	r2, r1
 80065d6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	681a      	ldr	r2, [r3, #0]
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f042 0201 	orr.w	r2, r2, #1
 80065e6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2200      	movs	r2, #0
 80065ec:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2220      	movs	r2, #32
 80065f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	2200      	movs	r2, #0
 80065fa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2200      	movs	r2, #0
 8006600:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8006604:	2300      	movs	r3, #0
}
 8006606:	4618      	mov	r0, r3
 8006608:	3708      	adds	r7, #8
 800660a:	46bd      	mov	sp, r7
 800660c:	bd80      	pop	{r7, pc}
 800660e:	bf00      	nop
 8006610:	02008000 	.word	0x02008000

08006614 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006614:	b480      	push	{r7}
 8006616:	b083      	sub	sp, #12
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
 800661c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006624:	b2db      	uxtb	r3, r3
 8006626:	2b20      	cmp	r3, #32
 8006628:	d138      	bne.n	800669c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006630:	2b01      	cmp	r3, #1
 8006632:	d101      	bne.n	8006638 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006634:	2302      	movs	r3, #2
 8006636:	e032      	b.n	800669e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2201      	movs	r2, #1
 800663c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2224      	movs	r2, #36	@ 0x24
 8006644:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	681a      	ldr	r2, [r3, #0]
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f022 0201 	bic.w	r2, r2, #1
 8006656:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	681a      	ldr	r2, [r3, #0]
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006666:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	6819      	ldr	r1, [r3, #0]
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	683a      	ldr	r2, [r7, #0]
 8006674:	430a      	orrs	r2, r1
 8006676:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	681a      	ldr	r2, [r3, #0]
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f042 0201 	orr.w	r2, r2, #1
 8006686:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2220      	movs	r2, #32
 800668c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2200      	movs	r2, #0
 8006694:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006698:	2300      	movs	r3, #0
 800669a:	e000      	b.n	800669e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800669c:	2302      	movs	r3, #2
  }
}
 800669e:	4618      	mov	r0, r3
 80066a0:	370c      	adds	r7, #12
 80066a2:	46bd      	mov	sp, r7
 80066a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a8:	4770      	bx	lr

080066aa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80066aa:	b480      	push	{r7}
 80066ac:	b085      	sub	sp, #20
 80066ae:	af00      	add	r7, sp, #0
 80066b0:	6078      	str	r0, [r7, #4]
 80066b2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80066ba:	b2db      	uxtb	r3, r3
 80066bc:	2b20      	cmp	r3, #32
 80066be:	d139      	bne.n	8006734 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80066c6:	2b01      	cmp	r3, #1
 80066c8:	d101      	bne.n	80066ce <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80066ca:	2302      	movs	r3, #2
 80066cc:	e033      	b.n	8006736 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	2201      	movs	r2, #1
 80066d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2224      	movs	r2, #36	@ 0x24
 80066da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	681a      	ldr	r2, [r3, #0]
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f022 0201 	bic.w	r2, r2, #1
 80066ec:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80066fc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	021b      	lsls	r3, r3, #8
 8006702:	68fa      	ldr	r2, [r7, #12]
 8006704:	4313      	orrs	r3, r2
 8006706:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	68fa      	ldr	r2, [r7, #12]
 800670e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	681a      	ldr	r2, [r3, #0]
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f042 0201 	orr.w	r2, r2, #1
 800671e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2220      	movs	r2, #32
 8006724:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2200      	movs	r2, #0
 800672c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006730:	2300      	movs	r3, #0
 8006732:	e000      	b.n	8006736 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006734:	2302      	movs	r3, #2
  }
}
 8006736:	4618      	mov	r0, r3
 8006738:	3714      	adds	r7, #20
 800673a:	46bd      	mov	sp, r7
 800673c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006740:	4770      	bx	lr
	...

08006744 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006744:	b580      	push	{r7, lr}
 8006746:	b084      	sub	sp, #16
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800674c:	4b19      	ldr	r3, [pc, #100]	@ (80067b4 <HAL_PWREx_ConfigSupply+0x70>)
 800674e:	68db      	ldr	r3, [r3, #12]
 8006750:	f003 0304 	and.w	r3, r3, #4
 8006754:	2b04      	cmp	r3, #4
 8006756:	d00a      	beq.n	800676e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006758:	4b16      	ldr	r3, [pc, #88]	@ (80067b4 <HAL_PWREx_ConfigSupply+0x70>)
 800675a:	68db      	ldr	r3, [r3, #12]
 800675c:	f003 0307 	and.w	r3, r3, #7
 8006760:	687a      	ldr	r2, [r7, #4]
 8006762:	429a      	cmp	r2, r3
 8006764:	d001      	beq.n	800676a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8006766:	2301      	movs	r3, #1
 8006768:	e01f      	b.n	80067aa <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800676a:	2300      	movs	r3, #0
 800676c:	e01d      	b.n	80067aa <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800676e:	4b11      	ldr	r3, [pc, #68]	@ (80067b4 <HAL_PWREx_ConfigSupply+0x70>)
 8006770:	68db      	ldr	r3, [r3, #12]
 8006772:	f023 0207 	bic.w	r2, r3, #7
 8006776:	490f      	ldr	r1, [pc, #60]	@ (80067b4 <HAL_PWREx_ConfigSupply+0x70>)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	4313      	orrs	r3, r2
 800677c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800677e:	f7fb fc43 	bl	8002008 <HAL_GetTick>
 8006782:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006784:	e009      	b.n	800679a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006786:	f7fb fc3f 	bl	8002008 <HAL_GetTick>
 800678a:	4602      	mov	r2, r0
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	1ad3      	subs	r3, r2, r3
 8006790:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006794:	d901      	bls.n	800679a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8006796:	2301      	movs	r3, #1
 8006798:	e007      	b.n	80067aa <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800679a:	4b06      	ldr	r3, [pc, #24]	@ (80067b4 <HAL_PWREx_ConfigSupply+0x70>)
 800679c:	685b      	ldr	r3, [r3, #4]
 800679e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80067a2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80067a6:	d1ee      	bne.n	8006786 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80067a8:	2300      	movs	r3, #0
}
 80067aa:	4618      	mov	r0, r3
 80067ac:	3710      	adds	r7, #16
 80067ae:	46bd      	mov	sp, r7
 80067b0:	bd80      	pop	{r7, pc}
 80067b2:	bf00      	nop
 80067b4:	58024800 	.word	0x58024800

080067b8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b08c      	sub	sp, #48	@ 0x30
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d101      	bne.n	80067ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80067c6:	2301      	movs	r3, #1
 80067c8:	e3c8      	b.n	8006f5c <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f003 0301 	and.w	r3, r3, #1
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	f000 8087 	beq.w	80068e6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80067d8:	4b88      	ldr	r3, [pc, #544]	@ (80069fc <HAL_RCC_OscConfig+0x244>)
 80067da:	691b      	ldr	r3, [r3, #16]
 80067dc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80067e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80067e2:	4b86      	ldr	r3, [pc, #536]	@ (80069fc <HAL_RCC_OscConfig+0x244>)
 80067e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067e6:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80067e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067ea:	2b10      	cmp	r3, #16
 80067ec:	d007      	beq.n	80067fe <HAL_RCC_OscConfig+0x46>
 80067ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067f0:	2b18      	cmp	r3, #24
 80067f2:	d110      	bne.n	8006816 <HAL_RCC_OscConfig+0x5e>
 80067f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067f6:	f003 0303 	and.w	r3, r3, #3
 80067fa:	2b02      	cmp	r3, #2
 80067fc:	d10b      	bne.n	8006816 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80067fe:	4b7f      	ldr	r3, [pc, #508]	@ (80069fc <HAL_RCC_OscConfig+0x244>)
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006806:	2b00      	cmp	r3, #0
 8006808:	d06c      	beq.n	80068e4 <HAL_RCC_OscConfig+0x12c>
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	685b      	ldr	r3, [r3, #4]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d168      	bne.n	80068e4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006812:	2301      	movs	r3, #1
 8006814:	e3a2      	b.n	8006f5c <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	685b      	ldr	r3, [r3, #4]
 800681a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800681e:	d106      	bne.n	800682e <HAL_RCC_OscConfig+0x76>
 8006820:	4b76      	ldr	r3, [pc, #472]	@ (80069fc <HAL_RCC_OscConfig+0x244>)
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	4a75      	ldr	r2, [pc, #468]	@ (80069fc <HAL_RCC_OscConfig+0x244>)
 8006826:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800682a:	6013      	str	r3, [r2, #0]
 800682c:	e02e      	b.n	800688c <HAL_RCC_OscConfig+0xd4>
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	685b      	ldr	r3, [r3, #4]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d10c      	bne.n	8006850 <HAL_RCC_OscConfig+0x98>
 8006836:	4b71      	ldr	r3, [pc, #452]	@ (80069fc <HAL_RCC_OscConfig+0x244>)
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	4a70      	ldr	r2, [pc, #448]	@ (80069fc <HAL_RCC_OscConfig+0x244>)
 800683c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006840:	6013      	str	r3, [r2, #0]
 8006842:	4b6e      	ldr	r3, [pc, #440]	@ (80069fc <HAL_RCC_OscConfig+0x244>)
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	4a6d      	ldr	r2, [pc, #436]	@ (80069fc <HAL_RCC_OscConfig+0x244>)
 8006848:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800684c:	6013      	str	r3, [r2, #0]
 800684e:	e01d      	b.n	800688c <HAL_RCC_OscConfig+0xd4>
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	685b      	ldr	r3, [r3, #4]
 8006854:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006858:	d10c      	bne.n	8006874 <HAL_RCC_OscConfig+0xbc>
 800685a:	4b68      	ldr	r3, [pc, #416]	@ (80069fc <HAL_RCC_OscConfig+0x244>)
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	4a67      	ldr	r2, [pc, #412]	@ (80069fc <HAL_RCC_OscConfig+0x244>)
 8006860:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006864:	6013      	str	r3, [r2, #0]
 8006866:	4b65      	ldr	r3, [pc, #404]	@ (80069fc <HAL_RCC_OscConfig+0x244>)
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	4a64      	ldr	r2, [pc, #400]	@ (80069fc <HAL_RCC_OscConfig+0x244>)
 800686c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006870:	6013      	str	r3, [r2, #0]
 8006872:	e00b      	b.n	800688c <HAL_RCC_OscConfig+0xd4>
 8006874:	4b61      	ldr	r3, [pc, #388]	@ (80069fc <HAL_RCC_OscConfig+0x244>)
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	4a60      	ldr	r2, [pc, #384]	@ (80069fc <HAL_RCC_OscConfig+0x244>)
 800687a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800687e:	6013      	str	r3, [r2, #0]
 8006880:	4b5e      	ldr	r3, [pc, #376]	@ (80069fc <HAL_RCC_OscConfig+0x244>)
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	4a5d      	ldr	r2, [pc, #372]	@ (80069fc <HAL_RCC_OscConfig+0x244>)
 8006886:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800688a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	685b      	ldr	r3, [r3, #4]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d013      	beq.n	80068bc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006894:	f7fb fbb8 	bl	8002008 <HAL_GetTick>
 8006898:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800689a:	e008      	b.n	80068ae <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800689c:	f7fb fbb4 	bl	8002008 <HAL_GetTick>
 80068a0:	4602      	mov	r2, r0
 80068a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068a4:	1ad3      	subs	r3, r2, r3
 80068a6:	2b64      	cmp	r3, #100	@ 0x64
 80068a8:	d901      	bls.n	80068ae <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80068aa:	2303      	movs	r3, #3
 80068ac:	e356      	b.n	8006f5c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80068ae:	4b53      	ldr	r3, [pc, #332]	@ (80069fc <HAL_RCC_OscConfig+0x244>)
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d0f0      	beq.n	800689c <HAL_RCC_OscConfig+0xe4>
 80068ba:	e014      	b.n	80068e6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068bc:	f7fb fba4 	bl	8002008 <HAL_GetTick>
 80068c0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80068c2:	e008      	b.n	80068d6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80068c4:	f7fb fba0 	bl	8002008 <HAL_GetTick>
 80068c8:	4602      	mov	r2, r0
 80068ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068cc:	1ad3      	subs	r3, r2, r3
 80068ce:	2b64      	cmp	r3, #100	@ 0x64
 80068d0:	d901      	bls.n	80068d6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80068d2:	2303      	movs	r3, #3
 80068d4:	e342      	b.n	8006f5c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80068d6:	4b49      	ldr	r3, [pc, #292]	@ (80069fc <HAL_RCC_OscConfig+0x244>)
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d1f0      	bne.n	80068c4 <HAL_RCC_OscConfig+0x10c>
 80068e2:	e000      	b.n	80068e6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80068e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f003 0302 	and.w	r3, r3, #2
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	f000 808c 	beq.w	8006a0c <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80068f4:	4b41      	ldr	r3, [pc, #260]	@ (80069fc <HAL_RCC_OscConfig+0x244>)
 80068f6:	691b      	ldr	r3, [r3, #16]
 80068f8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80068fc:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80068fe:	4b3f      	ldr	r3, [pc, #252]	@ (80069fc <HAL_RCC_OscConfig+0x244>)
 8006900:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006902:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006904:	6a3b      	ldr	r3, [r7, #32]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d007      	beq.n	800691a <HAL_RCC_OscConfig+0x162>
 800690a:	6a3b      	ldr	r3, [r7, #32]
 800690c:	2b18      	cmp	r3, #24
 800690e:	d137      	bne.n	8006980 <HAL_RCC_OscConfig+0x1c8>
 8006910:	69fb      	ldr	r3, [r7, #28]
 8006912:	f003 0303 	and.w	r3, r3, #3
 8006916:	2b00      	cmp	r3, #0
 8006918:	d132      	bne.n	8006980 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800691a:	4b38      	ldr	r3, [pc, #224]	@ (80069fc <HAL_RCC_OscConfig+0x244>)
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f003 0304 	and.w	r3, r3, #4
 8006922:	2b00      	cmp	r3, #0
 8006924:	d005      	beq.n	8006932 <HAL_RCC_OscConfig+0x17a>
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	68db      	ldr	r3, [r3, #12]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d101      	bne.n	8006932 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800692e:	2301      	movs	r3, #1
 8006930:	e314      	b.n	8006f5c <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006932:	4b32      	ldr	r3, [pc, #200]	@ (80069fc <HAL_RCC_OscConfig+0x244>)
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f023 0219 	bic.w	r2, r3, #25
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	68db      	ldr	r3, [r3, #12]
 800693e:	492f      	ldr	r1, [pc, #188]	@ (80069fc <HAL_RCC_OscConfig+0x244>)
 8006940:	4313      	orrs	r3, r2
 8006942:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006944:	f7fb fb60 	bl	8002008 <HAL_GetTick>
 8006948:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800694a:	e008      	b.n	800695e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800694c:	f7fb fb5c 	bl	8002008 <HAL_GetTick>
 8006950:	4602      	mov	r2, r0
 8006952:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006954:	1ad3      	subs	r3, r2, r3
 8006956:	2b02      	cmp	r3, #2
 8006958:	d901      	bls.n	800695e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800695a:	2303      	movs	r3, #3
 800695c:	e2fe      	b.n	8006f5c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800695e:	4b27      	ldr	r3, [pc, #156]	@ (80069fc <HAL_RCC_OscConfig+0x244>)
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f003 0304 	and.w	r3, r3, #4
 8006966:	2b00      	cmp	r3, #0
 8006968:	d0f0      	beq.n	800694c <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800696a:	4b24      	ldr	r3, [pc, #144]	@ (80069fc <HAL_RCC_OscConfig+0x244>)
 800696c:	685b      	ldr	r3, [r3, #4]
 800696e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	691b      	ldr	r3, [r3, #16]
 8006976:	061b      	lsls	r3, r3, #24
 8006978:	4920      	ldr	r1, [pc, #128]	@ (80069fc <HAL_RCC_OscConfig+0x244>)
 800697a:	4313      	orrs	r3, r2
 800697c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800697e:	e045      	b.n	8006a0c <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	68db      	ldr	r3, [r3, #12]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d026      	beq.n	80069d6 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006988:	4b1c      	ldr	r3, [pc, #112]	@ (80069fc <HAL_RCC_OscConfig+0x244>)
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f023 0219 	bic.w	r2, r3, #25
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	68db      	ldr	r3, [r3, #12]
 8006994:	4919      	ldr	r1, [pc, #100]	@ (80069fc <HAL_RCC_OscConfig+0x244>)
 8006996:	4313      	orrs	r3, r2
 8006998:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800699a:	f7fb fb35 	bl	8002008 <HAL_GetTick>
 800699e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80069a0:	e008      	b.n	80069b4 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80069a2:	f7fb fb31 	bl	8002008 <HAL_GetTick>
 80069a6:	4602      	mov	r2, r0
 80069a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069aa:	1ad3      	subs	r3, r2, r3
 80069ac:	2b02      	cmp	r3, #2
 80069ae:	d901      	bls.n	80069b4 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80069b0:	2303      	movs	r3, #3
 80069b2:	e2d3      	b.n	8006f5c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80069b4:	4b11      	ldr	r3, [pc, #68]	@ (80069fc <HAL_RCC_OscConfig+0x244>)
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f003 0304 	and.w	r3, r3, #4
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d0f0      	beq.n	80069a2 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80069c0:	4b0e      	ldr	r3, [pc, #56]	@ (80069fc <HAL_RCC_OscConfig+0x244>)
 80069c2:	685b      	ldr	r3, [r3, #4]
 80069c4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	691b      	ldr	r3, [r3, #16]
 80069cc:	061b      	lsls	r3, r3, #24
 80069ce:	490b      	ldr	r1, [pc, #44]	@ (80069fc <HAL_RCC_OscConfig+0x244>)
 80069d0:	4313      	orrs	r3, r2
 80069d2:	604b      	str	r3, [r1, #4]
 80069d4:	e01a      	b.n	8006a0c <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80069d6:	4b09      	ldr	r3, [pc, #36]	@ (80069fc <HAL_RCC_OscConfig+0x244>)
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	4a08      	ldr	r2, [pc, #32]	@ (80069fc <HAL_RCC_OscConfig+0x244>)
 80069dc:	f023 0301 	bic.w	r3, r3, #1
 80069e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069e2:	f7fb fb11 	bl	8002008 <HAL_GetTick>
 80069e6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80069e8:	e00a      	b.n	8006a00 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80069ea:	f7fb fb0d 	bl	8002008 <HAL_GetTick>
 80069ee:	4602      	mov	r2, r0
 80069f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069f2:	1ad3      	subs	r3, r2, r3
 80069f4:	2b02      	cmp	r3, #2
 80069f6:	d903      	bls.n	8006a00 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80069f8:	2303      	movs	r3, #3
 80069fa:	e2af      	b.n	8006f5c <HAL_RCC_OscConfig+0x7a4>
 80069fc:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006a00:	4b96      	ldr	r3, [pc, #600]	@ (8006c5c <HAL_RCC_OscConfig+0x4a4>)
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f003 0304 	and.w	r3, r3, #4
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d1ee      	bne.n	80069ea <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f003 0310 	and.w	r3, r3, #16
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d06a      	beq.n	8006aee <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006a18:	4b90      	ldr	r3, [pc, #576]	@ (8006c5c <HAL_RCC_OscConfig+0x4a4>)
 8006a1a:	691b      	ldr	r3, [r3, #16]
 8006a1c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006a20:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006a22:	4b8e      	ldr	r3, [pc, #568]	@ (8006c5c <HAL_RCC_OscConfig+0x4a4>)
 8006a24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a26:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006a28:	69bb      	ldr	r3, [r7, #24]
 8006a2a:	2b08      	cmp	r3, #8
 8006a2c:	d007      	beq.n	8006a3e <HAL_RCC_OscConfig+0x286>
 8006a2e:	69bb      	ldr	r3, [r7, #24]
 8006a30:	2b18      	cmp	r3, #24
 8006a32:	d11b      	bne.n	8006a6c <HAL_RCC_OscConfig+0x2b4>
 8006a34:	697b      	ldr	r3, [r7, #20]
 8006a36:	f003 0303 	and.w	r3, r3, #3
 8006a3a:	2b01      	cmp	r3, #1
 8006a3c:	d116      	bne.n	8006a6c <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006a3e:	4b87      	ldr	r3, [pc, #540]	@ (8006c5c <HAL_RCC_OscConfig+0x4a4>)
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d005      	beq.n	8006a56 <HAL_RCC_OscConfig+0x29e>
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	69db      	ldr	r3, [r3, #28]
 8006a4e:	2b80      	cmp	r3, #128	@ 0x80
 8006a50:	d001      	beq.n	8006a56 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8006a52:	2301      	movs	r3, #1
 8006a54:	e282      	b.n	8006f5c <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006a56:	4b81      	ldr	r3, [pc, #516]	@ (8006c5c <HAL_RCC_OscConfig+0x4a4>)
 8006a58:	68db      	ldr	r3, [r3, #12]
 8006a5a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6a1b      	ldr	r3, [r3, #32]
 8006a62:	061b      	lsls	r3, r3, #24
 8006a64:	497d      	ldr	r1, [pc, #500]	@ (8006c5c <HAL_RCC_OscConfig+0x4a4>)
 8006a66:	4313      	orrs	r3, r2
 8006a68:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006a6a:	e040      	b.n	8006aee <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	69db      	ldr	r3, [r3, #28]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d023      	beq.n	8006abc <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006a74:	4b79      	ldr	r3, [pc, #484]	@ (8006c5c <HAL_RCC_OscConfig+0x4a4>)
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	4a78      	ldr	r2, [pc, #480]	@ (8006c5c <HAL_RCC_OscConfig+0x4a4>)
 8006a7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a80:	f7fb fac2 	bl	8002008 <HAL_GetTick>
 8006a84:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006a86:	e008      	b.n	8006a9a <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006a88:	f7fb fabe 	bl	8002008 <HAL_GetTick>
 8006a8c:	4602      	mov	r2, r0
 8006a8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a90:	1ad3      	subs	r3, r2, r3
 8006a92:	2b02      	cmp	r3, #2
 8006a94:	d901      	bls.n	8006a9a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8006a96:	2303      	movs	r3, #3
 8006a98:	e260      	b.n	8006f5c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006a9a:	4b70      	ldr	r3, [pc, #448]	@ (8006c5c <HAL_RCC_OscConfig+0x4a4>)
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d0f0      	beq.n	8006a88 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006aa6:	4b6d      	ldr	r3, [pc, #436]	@ (8006c5c <HAL_RCC_OscConfig+0x4a4>)
 8006aa8:	68db      	ldr	r3, [r3, #12]
 8006aaa:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6a1b      	ldr	r3, [r3, #32]
 8006ab2:	061b      	lsls	r3, r3, #24
 8006ab4:	4969      	ldr	r1, [pc, #420]	@ (8006c5c <HAL_RCC_OscConfig+0x4a4>)
 8006ab6:	4313      	orrs	r3, r2
 8006ab8:	60cb      	str	r3, [r1, #12]
 8006aba:	e018      	b.n	8006aee <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006abc:	4b67      	ldr	r3, [pc, #412]	@ (8006c5c <HAL_RCC_OscConfig+0x4a4>)
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	4a66      	ldr	r2, [pc, #408]	@ (8006c5c <HAL_RCC_OscConfig+0x4a4>)
 8006ac2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006ac6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ac8:	f7fb fa9e 	bl	8002008 <HAL_GetTick>
 8006acc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006ace:	e008      	b.n	8006ae2 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006ad0:	f7fb fa9a 	bl	8002008 <HAL_GetTick>
 8006ad4:	4602      	mov	r2, r0
 8006ad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ad8:	1ad3      	subs	r3, r2, r3
 8006ada:	2b02      	cmp	r3, #2
 8006adc:	d901      	bls.n	8006ae2 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8006ade:	2303      	movs	r3, #3
 8006ae0:	e23c      	b.n	8006f5c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006ae2:	4b5e      	ldr	r3, [pc, #376]	@ (8006c5c <HAL_RCC_OscConfig+0x4a4>)
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d1f0      	bne.n	8006ad0 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f003 0308 	and.w	r3, r3, #8
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d036      	beq.n	8006b68 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	695b      	ldr	r3, [r3, #20]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d019      	beq.n	8006b36 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006b02:	4b56      	ldr	r3, [pc, #344]	@ (8006c5c <HAL_RCC_OscConfig+0x4a4>)
 8006b04:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006b06:	4a55      	ldr	r2, [pc, #340]	@ (8006c5c <HAL_RCC_OscConfig+0x4a4>)
 8006b08:	f043 0301 	orr.w	r3, r3, #1
 8006b0c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b0e:	f7fb fa7b 	bl	8002008 <HAL_GetTick>
 8006b12:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006b14:	e008      	b.n	8006b28 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006b16:	f7fb fa77 	bl	8002008 <HAL_GetTick>
 8006b1a:	4602      	mov	r2, r0
 8006b1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b1e:	1ad3      	subs	r3, r2, r3
 8006b20:	2b02      	cmp	r3, #2
 8006b22:	d901      	bls.n	8006b28 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8006b24:	2303      	movs	r3, #3
 8006b26:	e219      	b.n	8006f5c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006b28:	4b4c      	ldr	r3, [pc, #304]	@ (8006c5c <HAL_RCC_OscConfig+0x4a4>)
 8006b2a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006b2c:	f003 0302 	and.w	r3, r3, #2
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d0f0      	beq.n	8006b16 <HAL_RCC_OscConfig+0x35e>
 8006b34:	e018      	b.n	8006b68 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006b36:	4b49      	ldr	r3, [pc, #292]	@ (8006c5c <HAL_RCC_OscConfig+0x4a4>)
 8006b38:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006b3a:	4a48      	ldr	r2, [pc, #288]	@ (8006c5c <HAL_RCC_OscConfig+0x4a4>)
 8006b3c:	f023 0301 	bic.w	r3, r3, #1
 8006b40:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b42:	f7fb fa61 	bl	8002008 <HAL_GetTick>
 8006b46:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006b48:	e008      	b.n	8006b5c <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006b4a:	f7fb fa5d 	bl	8002008 <HAL_GetTick>
 8006b4e:	4602      	mov	r2, r0
 8006b50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b52:	1ad3      	subs	r3, r2, r3
 8006b54:	2b02      	cmp	r3, #2
 8006b56:	d901      	bls.n	8006b5c <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8006b58:	2303      	movs	r3, #3
 8006b5a:	e1ff      	b.n	8006f5c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006b5c:	4b3f      	ldr	r3, [pc, #252]	@ (8006c5c <HAL_RCC_OscConfig+0x4a4>)
 8006b5e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006b60:	f003 0302 	and.w	r3, r3, #2
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d1f0      	bne.n	8006b4a <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f003 0320 	and.w	r3, r3, #32
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d036      	beq.n	8006be2 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	699b      	ldr	r3, [r3, #24]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d019      	beq.n	8006bb0 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006b7c:	4b37      	ldr	r3, [pc, #220]	@ (8006c5c <HAL_RCC_OscConfig+0x4a4>)
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	4a36      	ldr	r2, [pc, #216]	@ (8006c5c <HAL_RCC_OscConfig+0x4a4>)
 8006b82:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8006b86:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006b88:	f7fb fa3e 	bl	8002008 <HAL_GetTick>
 8006b8c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006b8e:	e008      	b.n	8006ba2 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006b90:	f7fb fa3a 	bl	8002008 <HAL_GetTick>
 8006b94:	4602      	mov	r2, r0
 8006b96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b98:	1ad3      	subs	r3, r2, r3
 8006b9a:	2b02      	cmp	r3, #2
 8006b9c:	d901      	bls.n	8006ba2 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8006b9e:	2303      	movs	r3, #3
 8006ba0:	e1dc      	b.n	8006f5c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006ba2:	4b2e      	ldr	r3, [pc, #184]	@ (8006c5c <HAL_RCC_OscConfig+0x4a4>)
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d0f0      	beq.n	8006b90 <HAL_RCC_OscConfig+0x3d8>
 8006bae:	e018      	b.n	8006be2 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006bb0:	4b2a      	ldr	r3, [pc, #168]	@ (8006c5c <HAL_RCC_OscConfig+0x4a4>)
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	4a29      	ldr	r2, [pc, #164]	@ (8006c5c <HAL_RCC_OscConfig+0x4a4>)
 8006bb6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006bba:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006bbc:	f7fb fa24 	bl	8002008 <HAL_GetTick>
 8006bc0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006bc2:	e008      	b.n	8006bd6 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006bc4:	f7fb fa20 	bl	8002008 <HAL_GetTick>
 8006bc8:	4602      	mov	r2, r0
 8006bca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bcc:	1ad3      	subs	r3, r2, r3
 8006bce:	2b02      	cmp	r3, #2
 8006bd0:	d901      	bls.n	8006bd6 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8006bd2:	2303      	movs	r3, #3
 8006bd4:	e1c2      	b.n	8006f5c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006bd6:	4b21      	ldr	r3, [pc, #132]	@ (8006c5c <HAL_RCC_OscConfig+0x4a4>)
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d1f0      	bne.n	8006bc4 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f003 0304 	and.w	r3, r3, #4
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	f000 8086 	beq.w	8006cfc <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006bf0:	4b1b      	ldr	r3, [pc, #108]	@ (8006c60 <HAL_RCC_OscConfig+0x4a8>)
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	4a1a      	ldr	r2, [pc, #104]	@ (8006c60 <HAL_RCC_OscConfig+0x4a8>)
 8006bf6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006bfa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006bfc:	f7fb fa04 	bl	8002008 <HAL_GetTick>
 8006c00:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006c02:	e008      	b.n	8006c16 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006c04:	f7fb fa00 	bl	8002008 <HAL_GetTick>
 8006c08:	4602      	mov	r2, r0
 8006c0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c0c:	1ad3      	subs	r3, r2, r3
 8006c0e:	2b64      	cmp	r3, #100	@ 0x64
 8006c10:	d901      	bls.n	8006c16 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8006c12:	2303      	movs	r3, #3
 8006c14:	e1a2      	b.n	8006f5c <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006c16:	4b12      	ldr	r3, [pc, #72]	@ (8006c60 <HAL_RCC_OscConfig+0x4a8>)
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d0f0      	beq.n	8006c04 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	689b      	ldr	r3, [r3, #8]
 8006c26:	2b01      	cmp	r3, #1
 8006c28:	d106      	bne.n	8006c38 <HAL_RCC_OscConfig+0x480>
 8006c2a:	4b0c      	ldr	r3, [pc, #48]	@ (8006c5c <HAL_RCC_OscConfig+0x4a4>)
 8006c2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006c2e:	4a0b      	ldr	r2, [pc, #44]	@ (8006c5c <HAL_RCC_OscConfig+0x4a4>)
 8006c30:	f043 0301 	orr.w	r3, r3, #1
 8006c34:	6713      	str	r3, [r2, #112]	@ 0x70
 8006c36:	e032      	b.n	8006c9e <HAL_RCC_OscConfig+0x4e6>
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	689b      	ldr	r3, [r3, #8]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d111      	bne.n	8006c64 <HAL_RCC_OscConfig+0x4ac>
 8006c40:	4b06      	ldr	r3, [pc, #24]	@ (8006c5c <HAL_RCC_OscConfig+0x4a4>)
 8006c42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006c44:	4a05      	ldr	r2, [pc, #20]	@ (8006c5c <HAL_RCC_OscConfig+0x4a4>)
 8006c46:	f023 0301 	bic.w	r3, r3, #1
 8006c4a:	6713      	str	r3, [r2, #112]	@ 0x70
 8006c4c:	4b03      	ldr	r3, [pc, #12]	@ (8006c5c <HAL_RCC_OscConfig+0x4a4>)
 8006c4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006c50:	4a02      	ldr	r2, [pc, #8]	@ (8006c5c <HAL_RCC_OscConfig+0x4a4>)
 8006c52:	f023 0304 	bic.w	r3, r3, #4
 8006c56:	6713      	str	r3, [r2, #112]	@ 0x70
 8006c58:	e021      	b.n	8006c9e <HAL_RCC_OscConfig+0x4e6>
 8006c5a:	bf00      	nop
 8006c5c:	58024400 	.word	0x58024400
 8006c60:	58024800 	.word	0x58024800
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	689b      	ldr	r3, [r3, #8]
 8006c68:	2b05      	cmp	r3, #5
 8006c6a:	d10c      	bne.n	8006c86 <HAL_RCC_OscConfig+0x4ce>
 8006c6c:	4b83      	ldr	r3, [pc, #524]	@ (8006e7c <HAL_RCC_OscConfig+0x6c4>)
 8006c6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006c70:	4a82      	ldr	r2, [pc, #520]	@ (8006e7c <HAL_RCC_OscConfig+0x6c4>)
 8006c72:	f043 0304 	orr.w	r3, r3, #4
 8006c76:	6713      	str	r3, [r2, #112]	@ 0x70
 8006c78:	4b80      	ldr	r3, [pc, #512]	@ (8006e7c <HAL_RCC_OscConfig+0x6c4>)
 8006c7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006c7c:	4a7f      	ldr	r2, [pc, #508]	@ (8006e7c <HAL_RCC_OscConfig+0x6c4>)
 8006c7e:	f043 0301 	orr.w	r3, r3, #1
 8006c82:	6713      	str	r3, [r2, #112]	@ 0x70
 8006c84:	e00b      	b.n	8006c9e <HAL_RCC_OscConfig+0x4e6>
 8006c86:	4b7d      	ldr	r3, [pc, #500]	@ (8006e7c <HAL_RCC_OscConfig+0x6c4>)
 8006c88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006c8a:	4a7c      	ldr	r2, [pc, #496]	@ (8006e7c <HAL_RCC_OscConfig+0x6c4>)
 8006c8c:	f023 0301 	bic.w	r3, r3, #1
 8006c90:	6713      	str	r3, [r2, #112]	@ 0x70
 8006c92:	4b7a      	ldr	r3, [pc, #488]	@ (8006e7c <HAL_RCC_OscConfig+0x6c4>)
 8006c94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006c96:	4a79      	ldr	r2, [pc, #484]	@ (8006e7c <HAL_RCC_OscConfig+0x6c4>)
 8006c98:	f023 0304 	bic.w	r3, r3, #4
 8006c9c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	689b      	ldr	r3, [r3, #8]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d015      	beq.n	8006cd2 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ca6:	f7fb f9af 	bl	8002008 <HAL_GetTick>
 8006caa:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006cac:	e00a      	b.n	8006cc4 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006cae:	f7fb f9ab 	bl	8002008 <HAL_GetTick>
 8006cb2:	4602      	mov	r2, r0
 8006cb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cb6:	1ad3      	subs	r3, r2, r3
 8006cb8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	d901      	bls.n	8006cc4 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8006cc0:	2303      	movs	r3, #3
 8006cc2:	e14b      	b.n	8006f5c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006cc4:	4b6d      	ldr	r3, [pc, #436]	@ (8006e7c <HAL_RCC_OscConfig+0x6c4>)
 8006cc6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006cc8:	f003 0302 	and.w	r3, r3, #2
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d0ee      	beq.n	8006cae <HAL_RCC_OscConfig+0x4f6>
 8006cd0:	e014      	b.n	8006cfc <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006cd2:	f7fb f999 	bl	8002008 <HAL_GetTick>
 8006cd6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006cd8:	e00a      	b.n	8006cf0 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006cda:	f7fb f995 	bl	8002008 <HAL_GetTick>
 8006cde:	4602      	mov	r2, r0
 8006ce0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ce2:	1ad3      	subs	r3, r2, r3
 8006ce4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006ce8:	4293      	cmp	r3, r2
 8006cea:	d901      	bls.n	8006cf0 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8006cec:	2303      	movs	r3, #3
 8006cee:	e135      	b.n	8006f5c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006cf0:	4b62      	ldr	r3, [pc, #392]	@ (8006e7c <HAL_RCC_OscConfig+0x6c4>)
 8006cf2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006cf4:	f003 0302 	and.w	r3, r3, #2
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d1ee      	bne.n	8006cda <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	f000 812a 	beq.w	8006f5a <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006d06:	4b5d      	ldr	r3, [pc, #372]	@ (8006e7c <HAL_RCC_OscConfig+0x6c4>)
 8006d08:	691b      	ldr	r3, [r3, #16]
 8006d0a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006d0e:	2b18      	cmp	r3, #24
 8006d10:	f000 80ba 	beq.w	8006e88 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d18:	2b02      	cmp	r3, #2
 8006d1a:	f040 8095 	bne.w	8006e48 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006d1e:	4b57      	ldr	r3, [pc, #348]	@ (8006e7c <HAL_RCC_OscConfig+0x6c4>)
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	4a56      	ldr	r2, [pc, #344]	@ (8006e7c <HAL_RCC_OscConfig+0x6c4>)
 8006d24:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006d28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d2a:	f7fb f96d 	bl	8002008 <HAL_GetTick>
 8006d2e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006d30:	e008      	b.n	8006d44 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006d32:	f7fb f969 	bl	8002008 <HAL_GetTick>
 8006d36:	4602      	mov	r2, r0
 8006d38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d3a:	1ad3      	subs	r3, r2, r3
 8006d3c:	2b02      	cmp	r3, #2
 8006d3e:	d901      	bls.n	8006d44 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8006d40:	2303      	movs	r3, #3
 8006d42:	e10b      	b.n	8006f5c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006d44:	4b4d      	ldr	r3, [pc, #308]	@ (8006e7c <HAL_RCC_OscConfig+0x6c4>)
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d1f0      	bne.n	8006d32 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006d50:	4b4a      	ldr	r3, [pc, #296]	@ (8006e7c <HAL_RCC_OscConfig+0x6c4>)
 8006d52:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006d54:	4b4a      	ldr	r3, [pc, #296]	@ (8006e80 <HAL_RCC_OscConfig+0x6c8>)
 8006d56:	4013      	ands	r3, r2
 8006d58:	687a      	ldr	r2, [r7, #4]
 8006d5a:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8006d5c:	687a      	ldr	r2, [r7, #4]
 8006d5e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006d60:	0112      	lsls	r2, r2, #4
 8006d62:	430a      	orrs	r2, r1
 8006d64:	4945      	ldr	r1, [pc, #276]	@ (8006e7c <HAL_RCC_OscConfig+0x6c4>)
 8006d66:	4313      	orrs	r3, r2
 8006d68:	628b      	str	r3, [r1, #40]	@ 0x28
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d6e:	3b01      	subs	r3, #1
 8006d70:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d78:	3b01      	subs	r3, #1
 8006d7a:	025b      	lsls	r3, r3, #9
 8006d7c:	b29b      	uxth	r3, r3
 8006d7e:	431a      	orrs	r2, r3
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d84:	3b01      	subs	r3, #1
 8006d86:	041b      	lsls	r3, r3, #16
 8006d88:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006d8c:	431a      	orrs	r2, r3
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d92:	3b01      	subs	r3, #1
 8006d94:	061b      	lsls	r3, r3, #24
 8006d96:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006d9a:	4938      	ldr	r1, [pc, #224]	@ (8006e7c <HAL_RCC_OscConfig+0x6c4>)
 8006d9c:	4313      	orrs	r3, r2
 8006d9e:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8006da0:	4b36      	ldr	r3, [pc, #216]	@ (8006e7c <HAL_RCC_OscConfig+0x6c4>)
 8006da2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006da4:	4a35      	ldr	r2, [pc, #212]	@ (8006e7c <HAL_RCC_OscConfig+0x6c4>)
 8006da6:	f023 0301 	bic.w	r3, r3, #1
 8006daa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006dac:	4b33      	ldr	r3, [pc, #204]	@ (8006e7c <HAL_RCC_OscConfig+0x6c4>)
 8006dae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006db0:	4b34      	ldr	r3, [pc, #208]	@ (8006e84 <HAL_RCC_OscConfig+0x6cc>)
 8006db2:	4013      	ands	r3, r2
 8006db4:	687a      	ldr	r2, [r7, #4]
 8006db6:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006db8:	00d2      	lsls	r2, r2, #3
 8006dba:	4930      	ldr	r1, [pc, #192]	@ (8006e7c <HAL_RCC_OscConfig+0x6c4>)
 8006dbc:	4313      	orrs	r3, r2
 8006dbe:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006dc0:	4b2e      	ldr	r3, [pc, #184]	@ (8006e7c <HAL_RCC_OscConfig+0x6c4>)
 8006dc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dc4:	f023 020c 	bic.w	r2, r3, #12
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006dcc:	492b      	ldr	r1, [pc, #172]	@ (8006e7c <HAL_RCC_OscConfig+0x6c4>)
 8006dce:	4313      	orrs	r3, r2
 8006dd0:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006dd2:	4b2a      	ldr	r3, [pc, #168]	@ (8006e7c <HAL_RCC_OscConfig+0x6c4>)
 8006dd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dd6:	f023 0202 	bic.w	r2, r3, #2
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006dde:	4927      	ldr	r1, [pc, #156]	@ (8006e7c <HAL_RCC_OscConfig+0x6c4>)
 8006de0:	4313      	orrs	r3, r2
 8006de2:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006de4:	4b25      	ldr	r3, [pc, #148]	@ (8006e7c <HAL_RCC_OscConfig+0x6c4>)
 8006de6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006de8:	4a24      	ldr	r2, [pc, #144]	@ (8006e7c <HAL_RCC_OscConfig+0x6c4>)
 8006dea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006dee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006df0:	4b22      	ldr	r3, [pc, #136]	@ (8006e7c <HAL_RCC_OscConfig+0x6c4>)
 8006df2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006df4:	4a21      	ldr	r2, [pc, #132]	@ (8006e7c <HAL_RCC_OscConfig+0x6c4>)
 8006df6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006dfa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006dfc:	4b1f      	ldr	r3, [pc, #124]	@ (8006e7c <HAL_RCC_OscConfig+0x6c4>)
 8006dfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e00:	4a1e      	ldr	r2, [pc, #120]	@ (8006e7c <HAL_RCC_OscConfig+0x6c4>)
 8006e02:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006e06:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8006e08:	4b1c      	ldr	r3, [pc, #112]	@ (8006e7c <HAL_RCC_OscConfig+0x6c4>)
 8006e0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e0c:	4a1b      	ldr	r2, [pc, #108]	@ (8006e7c <HAL_RCC_OscConfig+0x6c4>)
 8006e0e:	f043 0301 	orr.w	r3, r3, #1
 8006e12:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006e14:	4b19      	ldr	r3, [pc, #100]	@ (8006e7c <HAL_RCC_OscConfig+0x6c4>)
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	4a18      	ldr	r2, [pc, #96]	@ (8006e7c <HAL_RCC_OscConfig+0x6c4>)
 8006e1a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006e1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e20:	f7fb f8f2 	bl	8002008 <HAL_GetTick>
 8006e24:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006e26:	e008      	b.n	8006e3a <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e28:	f7fb f8ee 	bl	8002008 <HAL_GetTick>
 8006e2c:	4602      	mov	r2, r0
 8006e2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e30:	1ad3      	subs	r3, r2, r3
 8006e32:	2b02      	cmp	r3, #2
 8006e34:	d901      	bls.n	8006e3a <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8006e36:	2303      	movs	r3, #3
 8006e38:	e090      	b.n	8006f5c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006e3a:	4b10      	ldr	r3, [pc, #64]	@ (8006e7c <HAL_RCC_OscConfig+0x6c4>)
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d0f0      	beq.n	8006e28 <HAL_RCC_OscConfig+0x670>
 8006e46:	e088      	b.n	8006f5a <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e48:	4b0c      	ldr	r3, [pc, #48]	@ (8006e7c <HAL_RCC_OscConfig+0x6c4>)
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	4a0b      	ldr	r2, [pc, #44]	@ (8006e7c <HAL_RCC_OscConfig+0x6c4>)
 8006e4e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006e52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e54:	f7fb f8d8 	bl	8002008 <HAL_GetTick>
 8006e58:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006e5a:	e008      	b.n	8006e6e <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e5c:	f7fb f8d4 	bl	8002008 <HAL_GetTick>
 8006e60:	4602      	mov	r2, r0
 8006e62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e64:	1ad3      	subs	r3, r2, r3
 8006e66:	2b02      	cmp	r3, #2
 8006e68:	d901      	bls.n	8006e6e <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8006e6a:	2303      	movs	r3, #3
 8006e6c:	e076      	b.n	8006f5c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006e6e:	4b03      	ldr	r3, [pc, #12]	@ (8006e7c <HAL_RCC_OscConfig+0x6c4>)
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d1f0      	bne.n	8006e5c <HAL_RCC_OscConfig+0x6a4>
 8006e7a:	e06e      	b.n	8006f5a <HAL_RCC_OscConfig+0x7a2>
 8006e7c:	58024400 	.word	0x58024400
 8006e80:	fffffc0c 	.word	0xfffffc0c
 8006e84:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006e88:	4b36      	ldr	r3, [pc, #216]	@ (8006f64 <HAL_RCC_OscConfig+0x7ac>)
 8006e8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e8c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006e8e:	4b35      	ldr	r3, [pc, #212]	@ (8006f64 <HAL_RCC_OscConfig+0x7ac>)
 8006e90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e92:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e98:	2b01      	cmp	r3, #1
 8006e9a:	d031      	beq.n	8006f00 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006e9c:	693b      	ldr	r3, [r7, #16]
 8006e9e:	f003 0203 	and.w	r2, r3, #3
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006ea6:	429a      	cmp	r2, r3
 8006ea8:	d12a      	bne.n	8006f00 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006eaa:	693b      	ldr	r3, [r7, #16]
 8006eac:	091b      	lsrs	r3, r3, #4
 8006eae:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006eb6:	429a      	cmp	r2, r3
 8006eb8:	d122      	bne.n	8006f00 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ec4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006ec6:	429a      	cmp	r2, r3
 8006ec8:	d11a      	bne.n	8006f00 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	0a5b      	lsrs	r3, r3, #9
 8006ece:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ed6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006ed8:	429a      	cmp	r2, r3
 8006eda:	d111      	bne.n	8006f00 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	0c1b      	lsrs	r3, r3, #16
 8006ee0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ee8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006eea:	429a      	cmp	r2, r3
 8006eec:	d108      	bne.n	8006f00 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	0e1b      	lsrs	r3, r3, #24
 8006ef2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006efa:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006efc:	429a      	cmp	r2, r3
 8006efe:	d001      	beq.n	8006f04 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8006f00:	2301      	movs	r3, #1
 8006f02:	e02b      	b.n	8006f5c <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8006f04:	4b17      	ldr	r3, [pc, #92]	@ (8006f64 <HAL_RCC_OscConfig+0x7ac>)
 8006f06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f08:	08db      	lsrs	r3, r3, #3
 8006f0a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006f0e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006f14:	693a      	ldr	r2, [r7, #16]
 8006f16:	429a      	cmp	r2, r3
 8006f18:	d01f      	beq.n	8006f5a <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8006f1a:	4b12      	ldr	r3, [pc, #72]	@ (8006f64 <HAL_RCC_OscConfig+0x7ac>)
 8006f1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f1e:	4a11      	ldr	r2, [pc, #68]	@ (8006f64 <HAL_RCC_OscConfig+0x7ac>)
 8006f20:	f023 0301 	bic.w	r3, r3, #1
 8006f24:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006f26:	f7fb f86f 	bl	8002008 <HAL_GetTick>
 8006f2a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8006f2c:	bf00      	nop
 8006f2e:	f7fb f86b 	bl	8002008 <HAL_GetTick>
 8006f32:	4602      	mov	r2, r0
 8006f34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f36:	4293      	cmp	r3, r2
 8006f38:	d0f9      	beq.n	8006f2e <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006f3a:	4b0a      	ldr	r3, [pc, #40]	@ (8006f64 <HAL_RCC_OscConfig+0x7ac>)
 8006f3c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006f3e:	4b0a      	ldr	r3, [pc, #40]	@ (8006f68 <HAL_RCC_OscConfig+0x7b0>)
 8006f40:	4013      	ands	r3, r2
 8006f42:	687a      	ldr	r2, [r7, #4]
 8006f44:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006f46:	00d2      	lsls	r2, r2, #3
 8006f48:	4906      	ldr	r1, [pc, #24]	@ (8006f64 <HAL_RCC_OscConfig+0x7ac>)
 8006f4a:	4313      	orrs	r3, r2
 8006f4c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8006f4e:	4b05      	ldr	r3, [pc, #20]	@ (8006f64 <HAL_RCC_OscConfig+0x7ac>)
 8006f50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f52:	4a04      	ldr	r2, [pc, #16]	@ (8006f64 <HAL_RCC_OscConfig+0x7ac>)
 8006f54:	f043 0301 	orr.w	r3, r3, #1
 8006f58:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8006f5a:	2300      	movs	r3, #0
}
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	3730      	adds	r7, #48	@ 0x30
 8006f60:	46bd      	mov	sp, r7
 8006f62:	bd80      	pop	{r7, pc}
 8006f64:	58024400 	.word	0x58024400
 8006f68:	ffff0007 	.word	0xffff0007

08006f6c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b086      	sub	sp, #24
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
 8006f74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d101      	bne.n	8006f80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006f7c:	2301      	movs	r3, #1
 8006f7e:	e19c      	b.n	80072ba <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006f80:	4b8a      	ldr	r3, [pc, #552]	@ (80071ac <HAL_RCC_ClockConfig+0x240>)
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f003 030f 	and.w	r3, r3, #15
 8006f88:	683a      	ldr	r2, [r7, #0]
 8006f8a:	429a      	cmp	r2, r3
 8006f8c:	d910      	bls.n	8006fb0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f8e:	4b87      	ldr	r3, [pc, #540]	@ (80071ac <HAL_RCC_ClockConfig+0x240>)
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	f023 020f 	bic.w	r2, r3, #15
 8006f96:	4985      	ldr	r1, [pc, #532]	@ (80071ac <HAL_RCC_ClockConfig+0x240>)
 8006f98:	683b      	ldr	r3, [r7, #0]
 8006f9a:	4313      	orrs	r3, r2
 8006f9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f9e:	4b83      	ldr	r3, [pc, #524]	@ (80071ac <HAL_RCC_ClockConfig+0x240>)
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	f003 030f 	and.w	r3, r3, #15
 8006fa6:	683a      	ldr	r2, [r7, #0]
 8006fa8:	429a      	cmp	r2, r3
 8006faa:	d001      	beq.n	8006fb0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006fac:	2301      	movs	r3, #1
 8006fae:	e184      	b.n	80072ba <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f003 0304 	and.w	r3, r3, #4
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d010      	beq.n	8006fde <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	691a      	ldr	r2, [r3, #16]
 8006fc0:	4b7b      	ldr	r3, [pc, #492]	@ (80071b0 <HAL_RCC_ClockConfig+0x244>)
 8006fc2:	699b      	ldr	r3, [r3, #24]
 8006fc4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006fc8:	429a      	cmp	r2, r3
 8006fca:	d908      	bls.n	8006fde <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006fcc:	4b78      	ldr	r3, [pc, #480]	@ (80071b0 <HAL_RCC_ClockConfig+0x244>)
 8006fce:	699b      	ldr	r3, [r3, #24]
 8006fd0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	691b      	ldr	r3, [r3, #16]
 8006fd8:	4975      	ldr	r1, [pc, #468]	@ (80071b0 <HAL_RCC_ClockConfig+0x244>)
 8006fda:	4313      	orrs	r3, r2
 8006fdc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	f003 0308 	and.w	r3, r3, #8
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d010      	beq.n	800700c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	695a      	ldr	r2, [r3, #20]
 8006fee:	4b70      	ldr	r3, [pc, #448]	@ (80071b0 <HAL_RCC_ClockConfig+0x244>)
 8006ff0:	69db      	ldr	r3, [r3, #28]
 8006ff2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006ff6:	429a      	cmp	r2, r3
 8006ff8:	d908      	bls.n	800700c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006ffa:	4b6d      	ldr	r3, [pc, #436]	@ (80071b0 <HAL_RCC_ClockConfig+0x244>)
 8006ffc:	69db      	ldr	r3, [r3, #28]
 8006ffe:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	695b      	ldr	r3, [r3, #20]
 8007006:	496a      	ldr	r1, [pc, #424]	@ (80071b0 <HAL_RCC_ClockConfig+0x244>)
 8007008:	4313      	orrs	r3, r2
 800700a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	f003 0310 	and.w	r3, r3, #16
 8007014:	2b00      	cmp	r3, #0
 8007016:	d010      	beq.n	800703a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	699a      	ldr	r2, [r3, #24]
 800701c:	4b64      	ldr	r3, [pc, #400]	@ (80071b0 <HAL_RCC_ClockConfig+0x244>)
 800701e:	69db      	ldr	r3, [r3, #28]
 8007020:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007024:	429a      	cmp	r2, r3
 8007026:	d908      	bls.n	800703a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007028:	4b61      	ldr	r3, [pc, #388]	@ (80071b0 <HAL_RCC_ClockConfig+0x244>)
 800702a:	69db      	ldr	r3, [r3, #28]
 800702c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	699b      	ldr	r3, [r3, #24]
 8007034:	495e      	ldr	r1, [pc, #376]	@ (80071b0 <HAL_RCC_ClockConfig+0x244>)
 8007036:	4313      	orrs	r3, r2
 8007038:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	f003 0320 	and.w	r3, r3, #32
 8007042:	2b00      	cmp	r3, #0
 8007044:	d010      	beq.n	8007068 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	69da      	ldr	r2, [r3, #28]
 800704a:	4b59      	ldr	r3, [pc, #356]	@ (80071b0 <HAL_RCC_ClockConfig+0x244>)
 800704c:	6a1b      	ldr	r3, [r3, #32]
 800704e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007052:	429a      	cmp	r2, r3
 8007054:	d908      	bls.n	8007068 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8007056:	4b56      	ldr	r3, [pc, #344]	@ (80071b0 <HAL_RCC_ClockConfig+0x244>)
 8007058:	6a1b      	ldr	r3, [r3, #32]
 800705a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	69db      	ldr	r3, [r3, #28]
 8007062:	4953      	ldr	r1, [pc, #332]	@ (80071b0 <HAL_RCC_ClockConfig+0x244>)
 8007064:	4313      	orrs	r3, r2
 8007066:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f003 0302 	and.w	r3, r3, #2
 8007070:	2b00      	cmp	r3, #0
 8007072:	d010      	beq.n	8007096 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	68da      	ldr	r2, [r3, #12]
 8007078:	4b4d      	ldr	r3, [pc, #308]	@ (80071b0 <HAL_RCC_ClockConfig+0x244>)
 800707a:	699b      	ldr	r3, [r3, #24]
 800707c:	f003 030f 	and.w	r3, r3, #15
 8007080:	429a      	cmp	r2, r3
 8007082:	d908      	bls.n	8007096 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007084:	4b4a      	ldr	r3, [pc, #296]	@ (80071b0 <HAL_RCC_ClockConfig+0x244>)
 8007086:	699b      	ldr	r3, [r3, #24]
 8007088:	f023 020f 	bic.w	r2, r3, #15
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	68db      	ldr	r3, [r3, #12]
 8007090:	4947      	ldr	r1, [pc, #284]	@ (80071b0 <HAL_RCC_ClockConfig+0x244>)
 8007092:	4313      	orrs	r3, r2
 8007094:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f003 0301 	and.w	r3, r3, #1
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d055      	beq.n	800714e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80070a2:	4b43      	ldr	r3, [pc, #268]	@ (80071b0 <HAL_RCC_ClockConfig+0x244>)
 80070a4:	699b      	ldr	r3, [r3, #24]
 80070a6:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	689b      	ldr	r3, [r3, #8]
 80070ae:	4940      	ldr	r1, [pc, #256]	@ (80071b0 <HAL_RCC_ClockConfig+0x244>)
 80070b0:	4313      	orrs	r3, r2
 80070b2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	685b      	ldr	r3, [r3, #4]
 80070b8:	2b02      	cmp	r3, #2
 80070ba:	d107      	bne.n	80070cc <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80070bc:	4b3c      	ldr	r3, [pc, #240]	@ (80071b0 <HAL_RCC_ClockConfig+0x244>)
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d121      	bne.n	800710c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80070c8:	2301      	movs	r3, #1
 80070ca:	e0f6      	b.n	80072ba <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	685b      	ldr	r3, [r3, #4]
 80070d0:	2b03      	cmp	r3, #3
 80070d2:	d107      	bne.n	80070e4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80070d4:	4b36      	ldr	r3, [pc, #216]	@ (80071b0 <HAL_RCC_ClockConfig+0x244>)
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d115      	bne.n	800710c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80070e0:	2301      	movs	r3, #1
 80070e2:	e0ea      	b.n	80072ba <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	685b      	ldr	r3, [r3, #4]
 80070e8:	2b01      	cmp	r3, #1
 80070ea:	d107      	bne.n	80070fc <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80070ec:	4b30      	ldr	r3, [pc, #192]	@ (80071b0 <HAL_RCC_ClockConfig+0x244>)
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d109      	bne.n	800710c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80070f8:	2301      	movs	r3, #1
 80070fa:	e0de      	b.n	80072ba <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80070fc:	4b2c      	ldr	r3, [pc, #176]	@ (80071b0 <HAL_RCC_ClockConfig+0x244>)
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f003 0304 	and.w	r3, r3, #4
 8007104:	2b00      	cmp	r3, #0
 8007106:	d101      	bne.n	800710c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007108:	2301      	movs	r3, #1
 800710a:	e0d6      	b.n	80072ba <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800710c:	4b28      	ldr	r3, [pc, #160]	@ (80071b0 <HAL_RCC_ClockConfig+0x244>)
 800710e:	691b      	ldr	r3, [r3, #16]
 8007110:	f023 0207 	bic.w	r2, r3, #7
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	685b      	ldr	r3, [r3, #4]
 8007118:	4925      	ldr	r1, [pc, #148]	@ (80071b0 <HAL_RCC_ClockConfig+0x244>)
 800711a:	4313      	orrs	r3, r2
 800711c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800711e:	f7fa ff73 	bl	8002008 <HAL_GetTick>
 8007122:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007124:	e00a      	b.n	800713c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007126:	f7fa ff6f 	bl	8002008 <HAL_GetTick>
 800712a:	4602      	mov	r2, r0
 800712c:	697b      	ldr	r3, [r7, #20]
 800712e:	1ad3      	subs	r3, r2, r3
 8007130:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007134:	4293      	cmp	r3, r2
 8007136:	d901      	bls.n	800713c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8007138:	2303      	movs	r3, #3
 800713a:	e0be      	b.n	80072ba <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800713c:	4b1c      	ldr	r3, [pc, #112]	@ (80071b0 <HAL_RCC_ClockConfig+0x244>)
 800713e:	691b      	ldr	r3, [r3, #16]
 8007140:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	685b      	ldr	r3, [r3, #4]
 8007148:	00db      	lsls	r3, r3, #3
 800714a:	429a      	cmp	r2, r3
 800714c:	d1eb      	bne.n	8007126 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	f003 0302 	and.w	r3, r3, #2
 8007156:	2b00      	cmp	r3, #0
 8007158:	d010      	beq.n	800717c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	68da      	ldr	r2, [r3, #12]
 800715e:	4b14      	ldr	r3, [pc, #80]	@ (80071b0 <HAL_RCC_ClockConfig+0x244>)
 8007160:	699b      	ldr	r3, [r3, #24]
 8007162:	f003 030f 	and.w	r3, r3, #15
 8007166:	429a      	cmp	r2, r3
 8007168:	d208      	bcs.n	800717c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800716a:	4b11      	ldr	r3, [pc, #68]	@ (80071b0 <HAL_RCC_ClockConfig+0x244>)
 800716c:	699b      	ldr	r3, [r3, #24]
 800716e:	f023 020f 	bic.w	r2, r3, #15
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	68db      	ldr	r3, [r3, #12]
 8007176:	490e      	ldr	r1, [pc, #56]	@ (80071b0 <HAL_RCC_ClockConfig+0x244>)
 8007178:	4313      	orrs	r3, r2
 800717a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800717c:	4b0b      	ldr	r3, [pc, #44]	@ (80071ac <HAL_RCC_ClockConfig+0x240>)
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	f003 030f 	and.w	r3, r3, #15
 8007184:	683a      	ldr	r2, [r7, #0]
 8007186:	429a      	cmp	r2, r3
 8007188:	d214      	bcs.n	80071b4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800718a:	4b08      	ldr	r3, [pc, #32]	@ (80071ac <HAL_RCC_ClockConfig+0x240>)
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	f023 020f 	bic.w	r2, r3, #15
 8007192:	4906      	ldr	r1, [pc, #24]	@ (80071ac <HAL_RCC_ClockConfig+0x240>)
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	4313      	orrs	r3, r2
 8007198:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800719a:	4b04      	ldr	r3, [pc, #16]	@ (80071ac <HAL_RCC_ClockConfig+0x240>)
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	f003 030f 	and.w	r3, r3, #15
 80071a2:	683a      	ldr	r2, [r7, #0]
 80071a4:	429a      	cmp	r2, r3
 80071a6:	d005      	beq.n	80071b4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80071a8:	2301      	movs	r3, #1
 80071aa:	e086      	b.n	80072ba <HAL_RCC_ClockConfig+0x34e>
 80071ac:	52002000 	.word	0x52002000
 80071b0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f003 0304 	and.w	r3, r3, #4
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d010      	beq.n	80071e2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	691a      	ldr	r2, [r3, #16]
 80071c4:	4b3f      	ldr	r3, [pc, #252]	@ (80072c4 <HAL_RCC_ClockConfig+0x358>)
 80071c6:	699b      	ldr	r3, [r3, #24]
 80071c8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80071cc:	429a      	cmp	r2, r3
 80071ce:	d208      	bcs.n	80071e2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80071d0:	4b3c      	ldr	r3, [pc, #240]	@ (80072c4 <HAL_RCC_ClockConfig+0x358>)
 80071d2:	699b      	ldr	r3, [r3, #24]
 80071d4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	691b      	ldr	r3, [r3, #16]
 80071dc:	4939      	ldr	r1, [pc, #228]	@ (80072c4 <HAL_RCC_ClockConfig+0x358>)
 80071de:	4313      	orrs	r3, r2
 80071e0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	f003 0308 	and.w	r3, r3, #8
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d010      	beq.n	8007210 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	695a      	ldr	r2, [r3, #20]
 80071f2:	4b34      	ldr	r3, [pc, #208]	@ (80072c4 <HAL_RCC_ClockConfig+0x358>)
 80071f4:	69db      	ldr	r3, [r3, #28]
 80071f6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80071fa:	429a      	cmp	r2, r3
 80071fc:	d208      	bcs.n	8007210 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80071fe:	4b31      	ldr	r3, [pc, #196]	@ (80072c4 <HAL_RCC_ClockConfig+0x358>)
 8007200:	69db      	ldr	r3, [r3, #28]
 8007202:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	695b      	ldr	r3, [r3, #20]
 800720a:	492e      	ldr	r1, [pc, #184]	@ (80072c4 <HAL_RCC_ClockConfig+0x358>)
 800720c:	4313      	orrs	r3, r2
 800720e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	f003 0310 	and.w	r3, r3, #16
 8007218:	2b00      	cmp	r3, #0
 800721a:	d010      	beq.n	800723e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	699a      	ldr	r2, [r3, #24]
 8007220:	4b28      	ldr	r3, [pc, #160]	@ (80072c4 <HAL_RCC_ClockConfig+0x358>)
 8007222:	69db      	ldr	r3, [r3, #28]
 8007224:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007228:	429a      	cmp	r2, r3
 800722a:	d208      	bcs.n	800723e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800722c:	4b25      	ldr	r3, [pc, #148]	@ (80072c4 <HAL_RCC_ClockConfig+0x358>)
 800722e:	69db      	ldr	r3, [r3, #28]
 8007230:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	699b      	ldr	r3, [r3, #24]
 8007238:	4922      	ldr	r1, [pc, #136]	@ (80072c4 <HAL_RCC_ClockConfig+0x358>)
 800723a:	4313      	orrs	r3, r2
 800723c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	f003 0320 	and.w	r3, r3, #32
 8007246:	2b00      	cmp	r3, #0
 8007248:	d010      	beq.n	800726c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	69da      	ldr	r2, [r3, #28]
 800724e:	4b1d      	ldr	r3, [pc, #116]	@ (80072c4 <HAL_RCC_ClockConfig+0x358>)
 8007250:	6a1b      	ldr	r3, [r3, #32]
 8007252:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007256:	429a      	cmp	r2, r3
 8007258:	d208      	bcs.n	800726c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800725a:	4b1a      	ldr	r3, [pc, #104]	@ (80072c4 <HAL_RCC_ClockConfig+0x358>)
 800725c:	6a1b      	ldr	r3, [r3, #32]
 800725e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	69db      	ldr	r3, [r3, #28]
 8007266:	4917      	ldr	r1, [pc, #92]	@ (80072c4 <HAL_RCC_ClockConfig+0x358>)
 8007268:	4313      	orrs	r3, r2
 800726a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800726c:	f000 f834 	bl	80072d8 <HAL_RCC_GetSysClockFreq>
 8007270:	4602      	mov	r2, r0
 8007272:	4b14      	ldr	r3, [pc, #80]	@ (80072c4 <HAL_RCC_ClockConfig+0x358>)
 8007274:	699b      	ldr	r3, [r3, #24]
 8007276:	0a1b      	lsrs	r3, r3, #8
 8007278:	f003 030f 	and.w	r3, r3, #15
 800727c:	4912      	ldr	r1, [pc, #72]	@ (80072c8 <HAL_RCC_ClockConfig+0x35c>)
 800727e:	5ccb      	ldrb	r3, [r1, r3]
 8007280:	f003 031f 	and.w	r3, r3, #31
 8007284:	fa22 f303 	lsr.w	r3, r2, r3
 8007288:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800728a:	4b0e      	ldr	r3, [pc, #56]	@ (80072c4 <HAL_RCC_ClockConfig+0x358>)
 800728c:	699b      	ldr	r3, [r3, #24]
 800728e:	f003 030f 	and.w	r3, r3, #15
 8007292:	4a0d      	ldr	r2, [pc, #52]	@ (80072c8 <HAL_RCC_ClockConfig+0x35c>)
 8007294:	5cd3      	ldrb	r3, [r2, r3]
 8007296:	f003 031f 	and.w	r3, r3, #31
 800729a:	693a      	ldr	r2, [r7, #16]
 800729c:	fa22 f303 	lsr.w	r3, r2, r3
 80072a0:	4a0a      	ldr	r2, [pc, #40]	@ (80072cc <HAL_RCC_ClockConfig+0x360>)
 80072a2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80072a4:	4a0a      	ldr	r2, [pc, #40]	@ (80072d0 <HAL_RCC_ClockConfig+0x364>)
 80072a6:	693b      	ldr	r3, [r7, #16]
 80072a8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80072aa:	4b0a      	ldr	r3, [pc, #40]	@ (80072d4 <HAL_RCC_ClockConfig+0x368>)
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	4618      	mov	r0, r3
 80072b0:	f7fa fe60 	bl	8001f74 <HAL_InitTick>
 80072b4:	4603      	mov	r3, r0
 80072b6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80072b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80072ba:	4618      	mov	r0, r3
 80072bc:	3718      	adds	r7, #24
 80072be:	46bd      	mov	sp, r7
 80072c0:	bd80      	pop	{r7, pc}
 80072c2:	bf00      	nop
 80072c4:	58024400 	.word	0x58024400
 80072c8:	0800d328 	.word	0x0800d328
 80072cc:	24000004 	.word	0x24000004
 80072d0:	24000000 	.word	0x24000000
 80072d4:	24000008 	.word	0x24000008

080072d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80072d8:	b480      	push	{r7}
 80072da:	b089      	sub	sp, #36	@ 0x24
 80072dc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80072de:	4bb3      	ldr	r3, [pc, #716]	@ (80075ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80072e0:	691b      	ldr	r3, [r3, #16]
 80072e2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80072e6:	2b18      	cmp	r3, #24
 80072e8:	f200 8155 	bhi.w	8007596 <HAL_RCC_GetSysClockFreq+0x2be>
 80072ec:	a201      	add	r2, pc, #4	@ (adr r2, 80072f4 <HAL_RCC_GetSysClockFreq+0x1c>)
 80072ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072f2:	bf00      	nop
 80072f4:	08007359 	.word	0x08007359
 80072f8:	08007597 	.word	0x08007597
 80072fc:	08007597 	.word	0x08007597
 8007300:	08007597 	.word	0x08007597
 8007304:	08007597 	.word	0x08007597
 8007308:	08007597 	.word	0x08007597
 800730c:	08007597 	.word	0x08007597
 8007310:	08007597 	.word	0x08007597
 8007314:	0800737f 	.word	0x0800737f
 8007318:	08007597 	.word	0x08007597
 800731c:	08007597 	.word	0x08007597
 8007320:	08007597 	.word	0x08007597
 8007324:	08007597 	.word	0x08007597
 8007328:	08007597 	.word	0x08007597
 800732c:	08007597 	.word	0x08007597
 8007330:	08007597 	.word	0x08007597
 8007334:	08007385 	.word	0x08007385
 8007338:	08007597 	.word	0x08007597
 800733c:	08007597 	.word	0x08007597
 8007340:	08007597 	.word	0x08007597
 8007344:	08007597 	.word	0x08007597
 8007348:	08007597 	.word	0x08007597
 800734c:	08007597 	.word	0x08007597
 8007350:	08007597 	.word	0x08007597
 8007354:	0800738b 	.word	0x0800738b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007358:	4b94      	ldr	r3, [pc, #592]	@ (80075ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	f003 0320 	and.w	r3, r3, #32
 8007360:	2b00      	cmp	r3, #0
 8007362:	d009      	beq.n	8007378 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007364:	4b91      	ldr	r3, [pc, #580]	@ (80075ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	08db      	lsrs	r3, r3, #3
 800736a:	f003 0303 	and.w	r3, r3, #3
 800736e:	4a90      	ldr	r2, [pc, #576]	@ (80075b0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007370:	fa22 f303 	lsr.w	r3, r2, r3
 8007374:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8007376:	e111      	b.n	800759c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007378:	4b8d      	ldr	r3, [pc, #564]	@ (80075b0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800737a:	61bb      	str	r3, [r7, #24]
      break;
 800737c:	e10e      	b.n	800759c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800737e:	4b8d      	ldr	r3, [pc, #564]	@ (80075b4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007380:	61bb      	str	r3, [r7, #24]
      break;
 8007382:	e10b      	b.n	800759c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8007384:	4b8c      	ldr	r3, [pc, #560]	@ (80075b8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8007386:	61bb      	str	r3, [r7, #24]
      break;
 8007388:	e108      	b.n	800759c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800738a:	4b88      	ldr	r3, [pc, #544]	@ (80075ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 800738c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800738e:	f003 0303 	and.w	r3, r3, #3
 8007392:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8007394:	4b85      	ldr	r3, [pc, #532]	@ (80075ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007396:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007398:	091b      	lsrs	r3, r3, #4
 800739a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800739e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80073a0:	4b82      	ldr	r3, [pc, #520]	@ (80075ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80073a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073a4:	f003 0301 	and.w	r3, r3, #1
 80073a8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80073aa:	4b80      	ldr	r3, [pc, #512]	@ (80075ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80073ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80073ae:	08db      	lsrs	r3, r3, #3
 80073b0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80073b4:	68fa      	ldr	r2, [r7, #12]
 80073b6:	fb02 f303 	mul.w	r3, r2, r3
 80073ba:	ee07 3a90 	vmov	s15, r3
 80073be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073c2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80073c6:	693b      	ldr	r3, [r7, #16]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	f000 80e1 	beq.w	8007590 <HAL_RCC_GetSysClockFreq+0x2b8>
 80073ce:	697b      	ldr	r3, [r7, #20]
 80073d0:	2b02      	cmp	r3, #2
 80073d2:	f000 8083 	beq.w	80074dc <HAL_RCC_GetSysClockFreq+0x204>
 80073d6:	697b      	ldr	r3, [r7, #20]
 80073d8:	2b02      	cmp	r3, #2
 80073da:	f200 80a1 	bhi.w	8007520 <HAL_RCC_GetSysClockFreq+0x248>
 80073de:	697b      	ldr	r3, [r7, #20]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d003      	beq.n	80073ec <HAL_RCC_GetSysClockFreq+0x114>
 80073e4:	697b      	ldr	r3, [r7, #20]
 80073e6:	2b01      	cmp	r3, #1
 80073e8:	d056      	beq.n	8007498 <HAL_RCC_GetSysClockFreq+0x1c0>
 80073ea:	e099      	b.n	8007520 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80073ec:	4b6f      	ldr	r3, [pc, #444]	@ (80075ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	f003 0320 	and.w	r3, r3, #32
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d02d      	beq.n	8007454 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80073f8:	4b6c      	ldr	r3, [pc, #432]	@ (80075ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	08db      	lsrs	r3, r3, #3
 80073fe:	f003 0303 	and.w	r3, r3, #3
 8007402:	4a6b      	ldr	r2, [pc, #428]	@ (80075b0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007404:	fa22 f303 	lsr.w	r3, r2, r3
 8007408:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	ee07 3a90 	vmov	s15, r3
 8007410:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007414:	693b      	ldr	r3, [r7, #16]
 8007416:	ee07 3a90 	vmov	s15, r3
 800741a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800741e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007422:	4b62      	ldr	r3, [pc, #392]	@ (80075ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007424:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007426:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800742a:	ee07 3a90 	vmov	s15, r3
 800742e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007432:	ed97 6a02 	vldr	s12, [r7, #8]
 8007436:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80075bc <HAL_RCC_GetSysClockFreq+0x2e4>
 800743a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800743e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007442:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007446:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800744a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800744e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8007452:	e087      	b.n	8007564 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007454:	693b      	ldr	r3, [r7, #16]
 8007456:	ee07 3a90 	vmov	s15, r3
 800745a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800745e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80075c0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8007462:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007466:	4b51      	ldr	r3, [pc, #324]	@ (80075ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007468:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800746a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800746e:	ee07 3a90 	vmov	s15, r3
 8007472:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007476:	ed97 6a02 	vldr	s12, [r7, #8]
 800747a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80075bc <HAL_RCC_GetSysClockFreq+0x2e4>
 800747e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007482:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007486:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800748a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800748e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007492:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007496:	e065      	b.n	8007564 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007498:	693b      	ldr	r3, [r7, #16]
 800749a:	ee07 3a90 	vmov	s15, r3
 800749e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074a2:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80075c4 <HAL_RCC_GetSysClockFreq+0x2ec>
 80074a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074aa:	4b40      	ldr	r3, [pc, #256]	@ (80075ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80074ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074b2:	ee07 3a90 	vmov	s15, r3
 80074b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074ba:	ed97 6a02 	vldr	s12, [r7, #8]
 80074be:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80075bc <HAL_RCC_GetSysClockFreq+0x2e4>
 80074c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80074ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074d6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80074da:	e043      	b.n	8007564 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80074dc:	693b      	ldr	r3, [r7, #16]
 80074de:	ee07 3a90 	vmov	s15, r3
 80074e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074e6:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80075c8 <HAL_RCC_GetSysClockFreq+0x2f0>
 80074ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074ee:	4b2f      	ldr	r3, [pc, #188]	@ (80075ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80074f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074f6:	ee07 3a90 	vmov	s15, r3
 80074fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074fe:	ed97 6a02 	vldr	s12, [r7, #8]
 8007502:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80075bc <HAL_RCC_GetSysClockFreq+0x2e4>
 8007506:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800750a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800750e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007512:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007516:	ee67 7a27 	vmul.f32	s15, s14, s15
 800751a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800751e:	e021      	b.n	8007564 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007520:	693b      	ldr	r3, [r7, #16]
 8007522:	ee07 3a90 	vmov	s15, r3
 8007526:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800752a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80075c4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800752e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007532:	4b1e      	ldr	r3, [pc, #120]	@ (80075ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007534:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007536:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800753a:	ee07 3a90 	vmov	s15, r3
 800753e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007542:	ed97 6a02 	vldr	s12, [r7, #8]
 8007546:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80075bc <HAL_RCC_GetSysClockFreq+0x2e4>
 800754a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800754e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007552:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007556:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800755a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800755e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007562:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8007564:	4b11      	ldr	r3, [pc, #68]	@ (80075ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007566:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007568:	0a5b      	lsrs	r3, r3, #9
 800756a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800756e:	3301      	adds	r3, #1
 8007570:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8007572:	683b      	ldr	r3, [r7, #0]
 8007574:	ee07 3a90 	vmov	s15, r3
 8007578:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800757c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007580:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007584:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007588:	ee17 3a90 	vmov	r3, s15
 800758c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800758e:	e005      	b.n	800759c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8007590:	2300      	movs	r3, #0
 8007592:	61bb      	str	r3, [r7, #24]
      break;
 8007594:	e002      	b.n	800759c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8007596:	4b07      	ldr	r3, [pc, #28]	@ (80075b4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007598:	61bb      	str	r3, [r7, #24]
      break;
 800759a:	bf00      	nop
  }

  return sysclockfreq;
 800759c:	69bb      	ldr	r3, [r7, #24]
}
 800759e:	4618      	mov	r0, r3
 80075a0:	3724      	adds	r7, #36	@ 0x24
 80075a2:	46bd      	mov	sp, r7
 80075a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a8:	4770      	bx	lr
 80075aa:	bf00      	nop
 80075ac:	58024400 	.word	0x58024400
 80075b0:	03d09000 	.word	0x03d09000
 80075b4:	003d0900 	.word	0x003d0900
 80075b8:	016e3600 	.word	0x016e3600
 80075bc:	46000000 	.word	0x46000000
 80075c0:	4c742400 	.word	0x4c742400
 80075c4:	4a742400 	.word	0x4a742400
 80075c8:	4bb71b00 	.word	0x4bb71b00

080075cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b082      	sub	sp, #8
 80075d0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80075d2:	f7ff fe81 	bl	80072d8 <HAL_RCC_GetSysClockFreq>
 80075d6:	4602      	mov	r2, r0
 80075d8:	4b10      	ldr	r3, [pc, #64]	@ (800761c <HAL_RCC_GetHCLKFreq+0x50>)
 80075da:	699b      	ldr	r3, [r3, #24]
 80075dc:	0a1b      	lsrs	r3, r3, #8
 80075de:	f003 030f 	and.w	r3, r3, #15
 80075e2:	490f      	ldr	r1, [pc, #60]	@ (8007620 <HAL_RCC_GetHCLKFreq+0x54>)
 80075e4:	5ccb      	ldrb	r3, [r1, r3]
 80075e6:	f003 031f 	and.w	r3, r3, #31
 80075ea:	fa22 f303 	lsr.w	r3, r2, r3
 80075ee:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80075f0:	4b0a      	ldr	r3, [pc, #40]	@ (800761c <HAL_RCC_GetHCLKFreq+0x50>)
 80075f2:	699b      	ldr	r3, [r3, #24]
 80075f4:	f003 030f 	and.w	r3, r3, #15
 80075f8:	4a09      	ldr	r2, [pc, #36]	@ (8007620 <HAL_RCC_GetHCLKFreq+0x54>)
 80075fa:	5cd3      	ldrb	r3, [r2, r3]
 80075fc:	f003 031f 	and.w	r3, r3, #31
 8007600:	687a      	ldr	r2, [r7, #4]
 8007602:	fa22 f303 	lsr.w	r3, r2, r3
 8007606:	4a07      	ldr	r2, [pc, #28]	@ (8007624 <HAL_RCC_GetHCLKFreq+0x58>)
 8007608:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800760a:	4a07      	ldr	r2, [pc, #28]	@ (8007628 <HAL_RCC_GetHCLKFreq+0x5c>)
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007610:	4b04      	ldr	r3, [pc, #16]	@ (8007624 <HAL_RCC_GetHCLKFreq+0x58>)
 8007612:	681b      	ldr	r3, [r3, #0]
}
 8007614:	4618      	mov	r0, r3
 8007616:	3708      	adds	r7, #8
 8007618:	46bd      	mov	sp, r7
 800761a:	bd80      	pop	{r7, pc}
 800761c:	58024400 	.word	0x58024400
 8007620:	0800d328 	.word	0x0800d328
 8007624:	24000004 	.word	0x24000004
 8007628:	24000000 	.word	0x24000000

0800762c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800762c:	b580      	push	{r7, lr}
 800762e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007630:	f7ff ffcc 	bl	80075cc <HAL_RCC_GetHCLKFreq>
 8007634:	4602      	mov	r2, r0
 8007636:	4b06      	ldr	r3, [pc, #24]	@ (8007650 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007638:	69db      	ldr	r3, [r3, #28]
 800763a:	091b      	lsrs	r3, r3, #4
 800763c:	f003 0307 	and.w	r3, r3, #7
 8007640:	4904      	ldr	r1, [pc, #16]	@ (8007654 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007642:	5ccb      	ldrb	r3, [r1, r3]
 8007644:	f003 031f 	and.w	r3, r3, #31
 8007648:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800764c:	4618      	mov	r0, r3
 800764e:	bd80      	pop	{r7, pc}
 8007650:	58024400 	.word	0x58024400
 8007654:	0800d328 	.word	0x0800d328

08007658 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007658:	b580      	push	{r7, lr}
 800765a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800765c:	f7ff ffb6 	bl	80075cc <HAL_RCC_GetHCLKFreq>
 8007660:	4602      	mov	r2, r0
 8007662:	4b06      	ldr	r3, [pc, #24]	@ (800767c <HAL_RCC_GetPCLK2Freq+0x24>)
 8007664:	69db      	ldr	r3, [r3, #28]
 8007666:	0a1b      	lsrs	r3, r3, #8
 8007668:	f003 0307 	and.w	r3, r3, #7
 800766c:	4904      	ldr	r1, [pc, #16]	@ (8007680 <HAL_RCC_GetPCLK2Freq+0x28>)
 800766e:	5ccb      	ldrb	r3, [r1, r3]
 8007670:	f003 031f 	and.w	r3, r3, #31
 8007674:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8007678:	4618      	mov	r0, r3
 800767a:	bd80      	pop	{r7, pc}
 800767c:	58024400 	.word	0x58024400
 8007680:	0800d328 	.word	0x0800d328

08007684 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007684:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007688:	b0c6      	sub	sp, #280	@ 0x118
 800768a:	af00      	add	r7, sp, #0
 800768c:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007690:	2300      	movs	r3, #0
 8007692:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007696:	2300      	movs	r3, #0
 8007698:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800769c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076a4:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80076a8:	2500      	movs	r5, #0
 80076aa:	ea54 0305 	orrs.w	r3, r4, r5
 80076ae:	d049      	beq.n	8007744 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80076b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076b4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80076b6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80076ba:	d02f      	beq.n	800771c <HAL_RCCEx_PeriphCLKConfig+0x98>
 80076bc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80076c0:	d828      	bhi.n	8007714 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80076c2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80076c6:	d01a      	beq.n	80076fe <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80076c8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80076cc:	d822      	bhi.n	8007714 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d003      	beq.n	80076da <HAL_RCCEx_PeriphCLKConfig+0x56>
 80076d2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80076d6:	d007      	beq.n	80076e8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80076d8:	e01c      	b.n	8007714 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80076da:	4bab      	ldr	r3, [pc, #684]	@ (8007988 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80076dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076de:	4aaa      	ldr	r2, [pc, #680]	@ (8007988 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80076e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80076e4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80076e6:	e01a      	b.n	800771e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80076e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076ec:	3308      	adds	r3, #8
 80076ee:	2102      	movs	r1, #2
 80076f0:	4618      	mov	r0, r3
 80076f2:	f002 fa49 	bl	8009b88 <RCCEx_PLL2_Config>
 80076f6:	4603      	mov	r3, r0
 80076f8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80076fc:	e00f      	b.n	800771e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80076fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007702:	3328      	adds	r3, #40	@ 0x28
 8007704:	2102      	movs	r1, #2
 8007706:	4618      	mov	r0, r3
 8007708:	f002 faf0 	bl	8009cec <RCCEx_PLL3_Config>
 800770c:	4603      	mov	r3, r0
 800770e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007712:	e004      	b.n	800771e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007714:	2301      	movs	r3, #1
 8007716:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800771a:	e000      	b.n	800771e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800771c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800771e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007722:	2b00      	cmp	r3, #0
 8007724:	d10a      	bne.n	800773c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007726:	4b98      	ldr	r3, [pc, #608]	@ (8007988 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007728:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800772a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800772e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007732:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007734:	4a94      	ldr	r2, [pc, #592]	@ (8007988 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007736:	430b      	orrs	r3, r1
 8007738:	6513      	str	r3, [r2, #80]	@ 0x50
 800773a:	e003      	b.n	8007744 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800773c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007740:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007744:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800774c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8007750:	f04f 0900 	mov.w	r9, #0
 8007754:	ea58 0309 	orrs.w	r3, r8, r9
 8007758:	d047      	beq.n	80077ea <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800775a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800775e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007760:	2b04      	cmp	r3, #4
 8007762:	d82a      	bhi.n	80077ba <HAL_RCCEx_PeriphCLKConfig+0x136>
 8007764:	a201      	add	r2, pc, #4	@ (adr r2, 800776c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8007766:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800776a:	bf00      	nop
 800776c:	08007781 	.word	0x08007781
 8007770:	0800778f 	.word	0x0800778f
 8007774:	080077a5 	.word	0x080077a5
 8007778:	080077c3 	.word	0x080077c3
 800777c:	080077c3 	.word	0x080077c3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007780:	4b81      	ldr	r3, [pc, #516]	@ (8007988 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007782:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007784:	4a80      	ldr	r2, [pc, #512]	@ (8007988 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007786:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800778a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800778c:	e01a      	b.n	80077c4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800778e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007792:	3308      	adds	r3, #8
 8007794:	2100      	movs	r1, #0
 8007796:	4618      	mov	r0, r3
 8007798:	f002 f9f6 	bl	8009b88 <RCCEx_PLL2_Config>
 800779c:	4603      	mov	r3, r0
 800779e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80077a2:	e00f      	b.n	80077c4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80077a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077a8:	3328      	adds	r3, #40	@ 0x28
 80077aa:	2100      	movs	r1, #0
 80077ac:	4618      	mov	r0, r3
 80077ae:	f002 fa9d 	bl	8009cec <RCCEx_PLL3_Config>
 80077b2:	4603      	mov	r3, r0
 80077b4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80077b8:	e004      	b.n	80077c4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80077ba:	2301      	movs	r3, #1
 80077bc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80077c0:	e000      	b.n	80077c4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80077c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80077c4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d10a      	bne.n	80077e2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80077cc:	4b6e      	ldr	r3, [pc, #440]	@ (8007988 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80077ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80077d0:	f023 0107 	bic.w	r1, r3, #7
 80077d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80077da:	4a6b      	ldr	r2, [pc, #428]	@ (8007988 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80077dc:	430b      	orrs	r3, r1
 80077de:	6513      	str	r3, [r2, #80]	@ 0x50
 80077e0:	e003      	b.n	80077ea <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077e2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80077e6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80077ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077f2:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 80077f6:	f04f 0b00 	mov.w	fp, #0
 80077fa:	ea5a 030b 	orrs.w	r3, sl, fp
 80077fe:	d05b      	beq.n	80078b8 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8007800:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007804:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007808:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800780c:	d03b      	beq.n	8007886 <HAL_RCCEx_PeriphCLKConfig+0x202>
 800780e:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8007812:	d834      	bhi.n	800787e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8007814:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007818:	d037      	beq.n	800788a <HAL_RCCEx_PeriphCLKConfig+0x206>
 800781a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800781e:	d82e      	bhi.n	800787e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8007820:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007824:	d033      	beq.n	800788e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8007826:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800782a:	d828      	bhi.n	800787e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800782c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007830:	d01a      	beq.n	8007868 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8007832:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007836:	d822      	bhi.n	800787e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8007838:	2b00      	cmp	r3, #0
 800783a:	d003      	beq.n	8007844 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 800783c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007840:	d007      	beq.n	8007852 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8007842:	e01c      	b.n	800787e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007844:	4b50      	ldr	r3, [pc, #320]	@ (8007988 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007846:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007848:	4a4f      	ldr	r2, [pc, #316]	@ (8007988 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800784a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800784e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007850:	e01e      	b.n	8007890 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007852:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007856:	3308      	adds	r3, #8
 8007858:	2100      	movs	r1, #0
 800785a:	4618      	mov	r0, r3
 800785c:	f002 f994 	bl	8009b88 <RCCEx_PLL2_Config>
 8007860:	4603      	mov	r3, r0
 8007862:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007866:	e013      	b.n	8007890 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007868:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800786c:	3328      	adds	r3, #40	@ 0x28
 800786e:	2100      	movs	r1, #0
 8007870:	4618      	mov	r0, r3
 8007872:	f002 fa3b 	bl	8009cec <RCCEx_PLL3_Config>
 8007876:	4603      	mov	r3, r0
 8007878:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800787c:	e008      	b.n	8007890 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800787e:	2301      	movs	r3, #1
 8007880:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007884:	e004      	b.n	8007890 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8007886:	bf00      	nop
 8007888:	e002      	b.n	8007890 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800788a:	bf00      	nop
 800788c:	e000      	b.n	8007890 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800788e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007890:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007894:	2b00      	cmp	r3, #0
 8007896:	d10b      	bne.n	80078b0 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007898:	4b3b      	ldr	r3, [pc, #236]	@ (8007988 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800789a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800789c:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80078a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078a4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80078a8:	4a37      	ldr	r2, [pc, #220]	@ (8007988 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80078aa:	430b      	orrs	r3, r1
 80078ac:	6593      	str	r3, [r2, #88]	@ 0x58
 80078ae:	e003      	b.n	80078b8 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078b0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80078b4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80078b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078c0:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80078c4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80078c8:	2300      	movs	r3, #0
 80078ca:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80078ce:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80078d2:	460b      	mov	r3, r1
 80078d4:	4313      	orrs	r3, r2
 80078d6:	d05d      	beq.n	8007994 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80078d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078dc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80078e0:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80078e4:	d03b      	beq.n	800795e <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80078e6:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80078ea:	d834      	bhi.n	8007956 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80078ec:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80078f0:	d037      	beq.n	8007962 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 80078f2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80078f6:	d82e      	bhi.n	8007956 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80078f8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80078fc:	d033      	beq.n	8007966 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 80078fe:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007902:	d828      	bhi.n	8007956 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8007904:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007908:	d01a      	beq.n	8007940 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800790a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800790e:	d822      	bhi.n	8007956 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8007910:	2b00      	cmp	r3, #0
 8007912:	d003      	beq.n	800791c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8007914:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007918:	d007      	beq.n	800792a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800791a:	e01c      	b.n	8007956 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800791c:	4b1a      	ldr	r3, [pc, #104]	@ (8007988 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800791e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007920:	4a19      	ldr	r2, [pc, #100]	@ (8007988 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007922:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007926:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007928:	e01e      	b.n	8007968 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800792a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800792e:	3308      	adds	r3, #8
 8007930:	2100      	movs	r1, #0
 8007932:	4618      	mov	r0, r3
 8007934:	f002 f928 	bl	8009b88 <RCCEx_PLL2_Config>
 8007938:	4603      	mov	r3, r0
 800793a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800793e:	e013      	b.n	8007968 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007940:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007944:	3328      	adds	r3, #40	@ 0x28
 8007946:	2100      	movs	r1, #0
 8007948:	4618      	mov	r0, r3
 800794a:	f002 f9cf 	bl	8009cec <RCCEx_PLL3_Config>
 800794e:	4603      	mov	r3, r0
 8007950:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007954:	e008      	b.n	8007968 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8007956:	2301      	movs	r3, #1
 8007958:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800795c:	e004      	b.n	8007968 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800795e:	bf00      	nop
 8007960:	e002      	b.n	8007968 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8007962:	bf00      	nop
 8007964:	e000      	b.n	8007968 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8007966:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007968:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800796c:	2b00      	cmp	r3, #0
 800796e:	d10d      	bne.n	800798c <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007970:	4b05      	ldr	r3, [pc, #20]	@ (8007988 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007972:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007974:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8007978:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800797c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007980:	4a01      	ldr	r2, [pc, #4]	@ (8007988 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007982:	430b      	orrs	r3, r1
 8007984:	6593      	str	r3, [r2, #88]	@ 0x58
 8007986:	e005      	b.n	8007994 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8007988:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800798c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007990:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8007994:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800799c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80079a0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80079a4:	2300      	movs	r3, #0
 80079a6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80079aa:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80079ae:	460b      	mov	r3, r1
 80079b0:	4313      	orrs	r3, r2
 80079b2:	d03a      	beq.n	8007a2a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 80079b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80079ba:	2b30      	cmp	r3, #48	@ 0x30
 80079bc:	d01f      	beq.n	80079fe <HAL_RCCEx_PeriphCLKConfig+0x37a>
 80079be:	2b30      	cmp	r3, #48	@ 0x30
 80079c0:	d819      	bhi.n	80079f6 <HAL_RCCEx_PeriphCLKConfig+0x372>
 80079c2:	2b20      	cmp	r3, #32
 80079c4:	d00c      	beq.n	80079e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80079c6:	2b20      	cmp	r3, #32
 80079c8:	d815      	bhi.n	80079f6 <HAL_RCCEx_PeriphCLKConfig+0x372>
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d019      	beq.n	8007a02 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80079ce:	2b10      	cmp	r3, #16
 80079d0:	d111      	bne.n	80079f6 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80079d2:	4baa      	ldr	r3, [pc, #680]	@ (8007c7c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80079d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079d6:	4aa9      	ldr	r2, [pc, #676]	@ (8007c7c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80079d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80079dc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80079de:	e011      	b.n	8007a04 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80079e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079e4:	3308      	adds	r3, #8
 80079e6:	2102      	movs	r1, #2
 80079e8:	4618      	mov	r0, r3
 80079ea:	f002 f8cd 	bl	8009b88 <RCCEx_PLL2_Config>
 80079ee:	4603      	mov	r3, r0
 80079f0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80079f4:	e006      	b.n	8007a04 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80079f6:	2301      	movs	r3, #1
 80079f8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80079fc:	e002      	b.n	8007a04 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 80079fe:	bf00      	nop
 8007a00:	e000      	b.n	8007a04 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8007a02:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a04:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d10a      	bne.n	8007a22 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8007a0c:	4b9b      	ldr	r3, [pc, #620]	@ (8007c7c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007a0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007a10:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8007a14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007a1a:	4a98      	ldr	r2, [pc, #608]	@ (8007c7c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007a1c:	430b      	orrs	r3, r1
 8007a1e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007a20:	e003      	b.n	8007a2a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a22:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007a26:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007a2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a32:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8007a36:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007a40:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8007a44:	460b      	mov	r3, r1
 8007a46:	4313      	orrs	r3, r2
 8007a48:	d051      	beq.n	8007aee <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8007a4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007a50:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007a54:	d035      	beq.n	8007ac2 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8007a56:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007a5a:	d82e      	bhi.n	8007aba <HAL_RCCEx_PeriphCLKConfig+0x436>
 8007a5c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007a60:	d031      	beq.n	8007ac6 <HAL_RCCEx_PeriphCLKConfig+0x442>
 8007a62:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007a66:	d828      	bhi.n	8007aba <HAL_RCCEx_PeriphCLKConfig+0x436>
 8007a68:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007a6c:	d01a      	beq.n	8007aa4 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8007a6e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007a72:	d822      	bhi.n	8007aba <HAL_RCCEx_PeriphCLKConfig+0x436>
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d003      	beq.n	8007a80 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8007a78:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007a7c:	d007      	beq.n	8007a8e <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8007a7e:	e01c      	b.n	8007aba <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a80:	4b7e      	ldr	r3, [pc, #504]	@ (8007c7c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007a82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a84:	4a7d      	ldr	r2, [pc, #500]	@ (8007c7c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007a86:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007a8a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007a8c:	e01c      	b.n	8007ac8 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007a8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a92:	3308      	adds	r3, #8
 8007a94:	2100      	movs	r1, #0
 8007a96:	4618      	mov	r0, r3
 8007a98:	f002 f876 	bl	8009b88 <RCCEx_PLL2_Config>
 8007a9c:	4603      	mov	r3, r0
 8007a9e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007aa2:	e011      	b.n	8007ac8 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007aa4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007aa8:	3328      	adds	r3, #40	@ 0x28
 8007aaa:	2100      	movs	r1, #0
 8007aac:	4618      	mov	r0, r3
 8007aae:	f002 f91d 	bl	8009cec <RCCEx_PLL3_Config>
 8007ab2:	4603      	mov	r3, r0
 8007ab4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007ab8:	e006      	b.n	8007ac8 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007aba:	2301      	movs	r3, #1
 8007abc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007ac0:	e002      	b.n	8007ac8 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8007ac2:	bf00      	nop
 8007ac4:	e000      	b.n	8007ac8 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8007ac6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007ac8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d10a      	bne.n	8007ae6 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007ad0:	4b6a      	ldr	r3, [pc, #424]	@ (8007c7c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007ad2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007ad4:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8007ad8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007adc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007ade:	4a67      	ldr	r2, [pc, #412]	@ (8007c7c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007ae0:	430b      	orrs	r3, r1
 8007ae2:	6513      	str	r3, [r2, #80]	@ 0x50
 8007ae4:	e003      	b.n	8007aee <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ae6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007aea:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007aee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007af2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007af6:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8007afa:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007afe:	2300      	movs	r3, #0
 8007b00:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007b04:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8007b08:	460b      	mov	r3, r1
 8007b0a:	4313      	orrs	r3, r2
 8007b0c:	d053      	beq.n	8007bb6 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8007b0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b12:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007b14:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007b18:	d033      	beq.n	8007b82 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8007b1a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007b1e:	d82c      	bhi.n	8007b7a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8007b20:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007b24:	d02f      	beq.n	8007b86 <HAL_RCCEx_PeriphCLKConfig+0x502>
 8007b26:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007b2a:	d826      	bhi.n	8007b7a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8007b2c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007b30:	d02b      	beq.n	8007b8a <HAL_RCCEx_PeriphCLKConfig+0x506>
 8007b32:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007b36:	d820      	bhi.n	8007b7a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8007b38:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007b3c:	d012      	beq.n	8007b64 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8007b3e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007b42:	d81a      	bhi.n	8007b7a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d022      	beq.n	8007b8e <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8007b48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007b4c:	d115      	bne.n	8007b7a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007b4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b52:	3308      	adds	r3, #8
 8007b54:	2101      	movs	r1, #1
 8007b56:	4618      	mov	r0, r3
 8007b58:	f002 f816 	bl	8009b88 <RCCEx_PLL2_Config>
 8007b5c:	4603      	mov	r3, r0
 8007b5e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007b62:	e015      	b.n	8007b90 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007b64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b68:	3328      	adds	r3, #40	@ 0x28
 8007b6a:	2101      	movs	r1, #1
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	f002 f8bd 	bl	8009cec <RCCEx_PLL3_Config>
 8007b72:	4603      	mov	r3, r0
 8007b74:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007b78:	e00a      	b.n	8007b90 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007b7a:	2301      	movs	r3, #1
 8007b7c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007b80:	e006      	b.n	8007b90 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8007b82:	bf00      	nop
 8007b84:	e004      	b.n	8007b90 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8007b86:	bf00      	nop
 8007b88:	e002      	b.n	8007b90 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8007b8a:	bf00      	nop
 8007b8c:	e000      	b.n	8007b90 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8007b8e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007b90:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d10a      	bne.n	8007bae <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007b98:	4b38      	ldr	r3, [pc, #224]	@ (8007c7c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007b9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b9c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8007ba0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ba4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007ba6:	4a35      	ldr	r2, [pc, #212]	@ (8007c7c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007ba8:	430b      	orrs	r3, r1
 8007baa:	6513      	str	r3, [r2, #80]	@ 0x50
 8007bac:	e003      	b.n	8007bb6 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007bae:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007bb2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007bb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bbe:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8007bc2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007bc6:	2300      	movs	r3, #0
 8007bc8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007bcc:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007bd0:	460b      	mov	r3, r1
 8007bd2:	4313      	orrs	r3, r2
 8007bd4:	d058      	beq.n	8007c88 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8007bd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bda:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007bde:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007be2:	d033      	beq.n	8007c4c <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8007be4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007be8:	d82c      	bhi.n	8007c44 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8007bea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007bee:	d02f      	beq.n	8007c50 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8007bf0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007bf4:	d826      	bhi.n	8007c44 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8007bf6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007bfa:	d02b      	beq.n	8007c54 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8007bfc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007c00:	d820      	bhi.n	8007c44 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8007c02:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007c06:	d012      	beq.n	8007c2e <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8007c08:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007c0c:	d81a      	bhi.n	8007c44 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d022      	beq.n	8007c58 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8007c12:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007c16:	d115      	bne.n	8007c44 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007c18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c1c:	3308      	adds	r3, #8
 8007c1e:	2101      	movs	r1, #1
 8007c20:	4618      	mov	r0, r3
 8007c22:	f001 ffb1 	bl	8009b88 <RCCEx_PLL2_Config>
 8007c26:	4603      	mov	r3, r0
 8007c28:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007c2c:	e015      	b.n	8007c5a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007c2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c32:	3328      	adds	r3, #40	@ 0x28
 8007c34:	2101      	movs	r1, #1
 8007c36:	4618      	mov	r0, r3
 8007c38:	f002 f858 	bl	8009cec <RCCEx_PLL3_Config>
 8007c3c:	4603      	mov	r3, r0
 8007c3e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007c42:	e00a      	b.n	8007c5a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8007c44:	2301      	movs	r3, #1
 8007c46:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007c4a:	e006      	b.n	8007c5a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007c4c:	bf00      	nop
 8007c4e:	e004      	b.n	8007c5a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007c50:	bf00      	nop
 8007c52:	e002      	b.n	8007c5a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007c54:	bf00      	nop
 8007c56:	e000      	b.n	8007c5a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007c58:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007c5a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d10e      	bne.n	8007c80 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007c62:	4b06      	ldr	r3, [pc, #24]	@ (8007c7c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007c64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c66:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8007c6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c6e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007c72:	4a02      	ldr	r2, [pc, #8]	@ (8007c7c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007c74:	430b      	orrs	r3, r1
 8007c76:	6593      	str	r3, [r2, #88]	@ 0x58
 8007c78:	e006      	b.n	8007c88 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8007c7a:	bf00      	nop
 8007c7c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c80:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007c84:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007c88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c90:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8007c94:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007c98:	2300      	movs	r3, #0
 8007c9a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8007c9e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8007ca2:	460b      	mov	r3, r1
 8007ca4:	4313      	orrs	r3, r2
 8007ca6:	d037      	beq.n	8007d18 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8007ca8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007cac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007cae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007cb2:	d00e      	beq.n	8007cd2 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8007cb4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007cb8:	d816      	bhi.n	8007ce8 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d018      	beq.n	8007cf0 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8007cbe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007cc2:	d111      	bne.n	8007ce8 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007cc4:	4bc4      	ldr	r3, [pc, #784]	@ (8007fd8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007cc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cc8:	4ac3      	ldr	r2, [pc, #780]	@ (8007fd8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007cca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007cce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007cd0:	e00f      	b.n	8007cf2 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007cd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007cd6:	3308      	adds	r3, #8
 8007cd8:	2101      	movs	r1, #1
 8007cda:	4618      	mov	r0, r3
 8007cdc:	f001 ff54 	bl	8009b88 <RCCEx_PLL2_Config>
 8007ce0:	4603      	mov	r3, r0
 8007ce2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007ce6:	e004      	b.n	8007cf2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007ce8:	2301      	movs	r3, #1
 8007cea:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007cee:	e000      	b.n	8007cf2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8007cf0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007cf2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d10a      	bne.n	8007d10 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007cfa:	4bb7      	ldr	r3, [pc, #732]	@ (8007fd8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007cfc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007cfe:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8007d02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d06:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007d08:	4ab3      	ldr	r2, [pc, #716]	@ (8007fd8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007d0a:	430b      	orrs	r3, r1
 8007d0c:	6513      	str	r3, [r2, #80]	@ 0x50
 8007d0e:	e003      	b.n	8007d18 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d10:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007d14:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007d18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d20:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8007d24:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007d28:	2300      	movs	r3, #0
 8007d2a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007d2e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8007d32:	460b      	mov	r3, r1
 8007d34:	4313      	orrs	r3, r2
 8007d36:	d039      	beq.n	8007dac <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8007d38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d3c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007d3e:	2b03      	cmp	r3, #3
 8007d40:	d81c      	bhi.n	8007d7c <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8007d42:	a201      	add	r2, pc, #4	@ (adr r2, 8007d48 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8007d44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d48:	08007d85 	.word	0x08007d85
 8007d4c:	08007d59 	.word	0x08007d59
 8007d50:	08007d67 	.word	0x08007d67
 8007d54:	08007d85 	.word	0x08007d85
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d58:	4b9f      	ldr	r3, [pc, #636]	@ (8007fd8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007d5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d5c:	4a9e      	ldr	r2, [pc, #632]	@ (8007fd8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007d5e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007d62:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007d64:	e00f      	b.n	8007d86 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007d66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d6a:	3308      	adds	r3, #8
 8007d6c:	2102      	movs	r1, #2
 8007d6e:	4618      	mov	r0, r3
 8007d70:	f001 ff0a 	bl	8009b88 <RCCEx_PLL2_Config>
 8007d74:	4603      	mov	r3, r0
 8007d76:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007d7a:	e004      	b.n	8007d86 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007d7c:	2301      	movs	r3, #1
 8007d7e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007d82:	e000      	b.n	8007d86 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8007d84:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007d86:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d10a      	bne.n	8007da4 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007d8e:	4b92      	ldr	r3, [pc, #584]	@ (8007fd8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007d90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007d92:	f023 0103 	bic.w	r1, r3, #3
 8007d96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d9a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007d9c:	4a8e      	ldr	r2, [pc, #568]	@ (8007fd8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007d9e:	430b      	orrs	r3, r1
 8007da0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007da2:	e003      	b.n	8007dac <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007da4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007da8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007dac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007db0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007db4:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8007db8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007dc2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007dc6:	460b      	mov	r3, r1
 8007dc8:	4313      	orrs	r3, r2
 8007dca:	f000 8099 	beq.w	8007f00 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007dce:	4b83      	ldr	r3, [pc, #524]	@ (8007fdc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	4a82      	ldr	r2, [pc, #520]	@ (8007fdc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007dd4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007dd8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007dda:	f7fa f915 	bl	8002008 <HAL_GetTick>
 8007dde:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007de2:	e00b      	b.n	8007dfc <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007de4:	f7fa f910 	bl	8002008 <HAL_GetTick>
 8007de8:	4602      	mov	r2, r0
 8007dea:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8007dee:	1ad3      	subs	r3, r2, r3
 8007df0:	2b64      	cmp	r3, #100	@ 0x64
 8007df2:	d903      	bls.n	8007dfc <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8007df4:	2303      	movs	r3, #3
 8007df6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007dfa:	e005      	b.n	8007e08 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007dfc:	4b77      	ldr	r3, [pc, #476]	@ (8007fdc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d0ed      	beq.n	8007de4 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8007e08:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d173      	bne.n	8007ef8 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007e10:	4b71      	ldr	r3, [pc, #452]	@ (8007fd8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007e12:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007e14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e18:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007e1c:	4053      	eors	r3, r2
 8007e1e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d015      	beq.n	8007e52 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007e26:	4b6c      	ldr	r3, [pc, #432]	@ (8007fd8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007e28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007e2a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007e2e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007e32:	4b69      	ldr	r3, [pc, #420]	@ (8007fd8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007e34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007e36:	4a68      	ldr	r2, [pc, #416]	@ (8007fd8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007e38:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007e3c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007e3e:	4b66      	ldr	r3, [pc, #408]	@ (8007fd8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007e40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007e42:	4a65      	ldr	r2, [pc, #404]	@ (8007fd8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007e44:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007e48:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007e4a:	4a63      	ldr	r2, [pc, #396]	@ (8007fd8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007e4c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007e50:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007e52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e56:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007e5a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007e5e:	d118      	bne.n	8007e92 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e60:	f7fa f8d2 	bl	8002008 <HAL_GetTick>
 8007e64:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007e68:	e00d      	b.n	8007e86 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007e6a:	f7fa f8cd 	bl	8002008 <HAL_GetTick>
 8007e6e:	4602      	mov	r2, r0
 8007e70:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8007e74:	1ad2      	subs	r2, r2, r3
 8007e76:	f241 3388 	movw	r3, #5000	@ 0x1388
 8007e7a:	429a      	cmp	r2, r3
 8007e7c:	d903      	bls.n	8007e86 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8007e7e:	2303      	movs	r3, #3
 8007e80:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8007e84:	e005      	b.n	8007e92 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007e86:	4b54      	ldr	r3, [pc, #336]	@ (8007fd8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007e88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007e8a:	f003 0302 	and.w	r3, r3, #2
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d0eb      	beq.n	8007e6a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8007e92:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d129      	bne.n	8007eee <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007e9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e9e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007ea2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007ea6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007eaa:	d10e      	bne.n	8007eca <HAL_RCCEx_PeriphCLKConfig+0x846>
 8007eac:	4b4a      	ldr	r3, [pc, #296]	@ (8007fd8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007eae:	691b      	ldr	r3, [r3, #16]
 8007eb0:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8007eb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007eb8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007ebc:	091a      	lsrs	r2, r3, #4
 8007ebe:	4b48      	ldr	r3, [pc, #288]	@ (8007fe0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8007ec0:	4013      	ands	r3, r2
 8007ec2:	4a45      	ldr	r2, [pc, #276]	@ (8007fd8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007ec4:	430b      	orrs	r3, r1
 8007ec6:	6113      	str	r3, [r2, #16]
 8007ec8:	e005      	b.n	8007ed6 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8007eca:	4b43      	ldr	r3, [pc, #268]	@ (8007fd8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007ecc:	691b      	ldr	r3, [r3, #16]
 8007ece:	4a42      	ldr	r2, [pc, #264]	@ (8007fd8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007ed0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007ed4:	6113      	str	r3, [r2, #16]
 8007ed6:	4b40      	ldr	r3, [pc, #256]	@ (8007fd8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007ed8:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8007eda:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ede:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007ee2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007ee6:	4a3c      	ldr	r2, [pc, #240]	@ (8007fd8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007ee8:	430b      	orrs	r3, r1
 8007eea:	6713      	str	r3, [r2, #112]	@ 0x70
 8007eec:	e008      	b.n	8007f00 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007eee:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007ef2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8007ef6:	e003      	b.n	8007f00 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ef8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007efc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007f00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f08:	f002 0301 	and.w	r3, r2, #1
 8007f0c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007f10:	2300      	movs	r3, #0
 8007f12:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007f16:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8007f1a:	460b      	mov	r3, r1
 8007f1c:	4313      	orrs	r3, r2
 8007f1e:	f000 808f 	beq.w	8008040 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8007f22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f26:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007f28:	2b28      	cmp	r3, #40	@ 0x28
 8007f2a:	d871      	bhi.n	8008010 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8007f2c:	a201      	add	r2, pc, #4	@ (adr r2, 8007f34 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8007f2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f32:	bf00      	nop
 8007f34:	08008019 	.word	0x08008019
 8007f38:	08008011 	.word	0x08008011
 8007f3c:	08008011 	.word	0x08008011
 8007f40:	08008011 	.word	0x08008011
 8007f44:	08008011 	.word	0x08008011
 8007f48:	08008011 	.word	0x08008011
 8007f4c:	08008011 	.word	0x08008011
 8007f50:	08008011 	.word	0x08008011
 8007f54:	08007fe5 	.word	0x08007fe5
 8007f58:	08008011 	.word	0x08008011
 8007f5c:	08008011 	.word	0x08008011
 8007f60:	08008011 	.word	0x08008011
 8007f64:	08008011 	.word	0x08008011
 8007f68:	08008011 	.word	0x08008011
 8007f6c:	08008011 	.word	0x08008011
 8007f70:	08008011 	.word	0x08008011
 8007f74:	08007ffb 	.word	0x08007ffb
 8007f78:	08008011 	.word	0x08008011
 8007f7c:	08008011 	.word	0x08008011
 8007f80:	08008011 	.word	0x08008011
 8007f84:	08008011 	.word	0x08008011
 8007f88:	08008011 	.word	0x08008011
 8007f8c:	08008011 	.word	0x08008011
 8007f90:	08008011 	.word	0x08008011
 8007f94:	08008019 	.word	0x08008019
 8007f98:	08008011 	.word	0x08008011
 8007f9c:	08008011 	.word	0x08008011
 8007fa0:	08008011 	.word	0x08008011
 8007fa4:	08008011 	.word	0x08008011
 8007fa8:	08008011 	.word	0x08008011
 8007fac:	08008011 	.word	0x08008011
 8007fb0:	08008011 	.word	0x08008011
 8007fb4:	08008019 	.word	0x08008019
 8007fb8:	08008011 	.word	0x08008011
 8007fbc:	08008011 	.word	0x08008011
 8007fc0:	08008011 	.word	0x08008011
 8007fc4:	08008011 	.word	0x08008011
 8007fc8:	08008011 	.word	0x08008011
 8007fcc:	08008011 	.word	0x08008011
 8007fd0:	08008011 	.word	0x08008011
 8007fd4:	08008019 	.word	0x08008019
 8007fd8:	58024400 	.word	0x58024400
 8007fdc:	58024800 	.word	0x58024800
 8007fe0:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007fe4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007fe8:	3308      	adds	r3, #8
 8007fea:	2101      	movs	r1, #1
 8007fec:	4618      	mov	r0, r3
 8007fee:	f001 fdcb 	bl	8009b88 <RCCEx_PLL2_Config>
 8007ff2:	4603      	mov	r3, r0
 8007ff4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007ff8:	e00f      	b.n	800801a <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007ffa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ffe:	3328      	adds	r3, #40	@ 0x28
 8008000:	2101      	movs	r1, #1
 8008002:	4618      	mov	r0, r3
 8008004:	f001 fe72 	bl	8009cec <RCCEx_PLL3_Config>
 8008008:	4603      	mov	r3, r0
 800800a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800800e:	e004      	b.n	800801a <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008010:	2301      	movs	r3, #1
 8008012:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008016:	e000      	b.n	800801a <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8008018:	bf00      	nop
    }

    if (ret == HAL_OK)
 800801a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800801e:	2b00      	cmp	r3, #0
 8008020:	d10a      	bne.n	8008038 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8008022:	4bbf      	ldr	r3, [pc, #764]	@ (8008320 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8008024:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008026:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800802a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800802e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008030:	4abb      	ldr	r2, [pc, #748]	@ (8008320 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8008032:	430b      	orrs	r3, r1
 8008034:	6553      	str	r3, [r2, #84]	@ 0x54
 8008036:	e003      	b.n	8008040 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008038:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800803c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8008040:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008044:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008048:	f002 0302 	and.w	r3, r2, #2
 800804c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008050:	2300      	movs	r3, #0
 8008052:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008056:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800805a:	460b      	mov	r3, r1
 800805c:	4313      	orrs	r3, r2
 800805e:	d041      	beq.n	80080e4 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8008060:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008064:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008066:	2b05      	cmp	r3, #5
 8008068:	d824      	bhi.n	80080b4 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800806a:	a201      	add	r2, pc, #4	@ (adr r2, 8008070 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 800806c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008070:	080080bd 	.word	0x080080bd
 8008074:	08008089 	.word	0x08008089
 8008078:	0800809f 	.word	0x0800809f
 800807c:	080080bd 	.word	0x080080bd
 8008080:	080080bd 	.word	0x080080bd
 8008084:	080080bd 	.word	0x080080bd
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008088:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800808c:	3308      	adds	r3, #8
 800808e:	2101      	movs	r1, #1
 8008090:	4618      	mov	r0, r3
 8008092:	f001 fd79 	bl	8009b88 <RCCEx_PLL2_Config>
 8008096:	4603      	mov	r3, r0
 8008098:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800809c:	e00f      	b.n	80080be <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800809e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080a2:	3328      	adds	r3, #40	@ 0x28
 80080a4:	2101      	movs	r1, #1
 80080a6:	4618      	mov	r0, r3
 80080a8:	f001 fe20 	bl	8009cec <RCCEx_PLL3_Config>
 80080ac:	4603      	mov	r3, r0
 80080ae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80080b2:	e004      	b.n	80080be <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80080b4:	2301      	movs	r3, #1
 80080b6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80080ba:	e000      	b.n	80080be <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 80080bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80080be:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d10a      	bne.n	80080dc <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80080c6:	4b96      	ldr	r3, [pc, #600]	@ (8008320 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80080c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80080ca:	f023 0107 	bic.w	r1, r3, #7
 80080ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80080d4:	4a92      	ldr	r2, [pc, #584]	@ (8008320 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80080d6:	430b      	orrs	r3, r1
 80080d8:	6553      	str	r3, [r2, #84]	@ 0x54
 80080da:	e003      	b.n	80080e4 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080dc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80080e0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80080e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080ec:	f002 0304 	and.w	r3, r2, #4
 80080f0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80080f4:	2300      	movs	r3, #0
 80080f6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80080fa:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80080fe:	460b      	mov	r3, r1
 8008100:	4313      	orrs	r3, r2
 8008102:	d044      	beq.n	800818e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8008104:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008108:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800810c:	2b05      	cmp	r3, #5
 800810e:	d825      	bhi.n	800815c <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8008110:	a201      	add	r2, pc, #4	@ (adr r2, 8008118 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8008112:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008116:	bf00      	nop
 8008118:	08008165 	.word	0x08008165
 800811c:	08008131 	.word	0x08008131
 8008120:	08008147 	.word	0x08008147
 8008124:	08008165 	.word	0x08008165
 8008128:	08008165 	.word	0x08008165
 800812c:	08008165 	.word	0x08008165
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008130:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008134:	3308      	adds	r3, #8
 8008136:	2101      	movs	r1, #1
 8008138:	4618      	mov	r0, r3
 800813a:	f001 fd25 	bl	8009b88 <RCCEx_PLL2_Config>
 800813e:	4603      	mov	r3, r0
 8008140:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8008144:	e00f      	b.n	8008166 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008146:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800814a:	3328      	adds	r3, #40	@ 0x28
 800814c:	2101      	movs	r1, #1
 800814e:	4618      	mov	r0, r3
 8008150:	f001 fdcc 	bl	8009cec <RCCEx_PLL3_Config>
 8008154:	4603      	mov	r3, r0
 8008156:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800815a:	e004      	b.n	8008166 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800815c:	2301      	movs	r3, #1
 800815e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008162:	e000      	b.n	8008166 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8008164:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008166:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800816a:	2b00      	cmp	r3, #0
 800816c:	d10b      	bne.n	8008186 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800816e:	4b6c      	ldr	r3, [pc, #432]	@ (8008320 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8008170:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008172:	f023 0107 	bic.w	r1, r3, #7
 8008176:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800817a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800817e:	4a68      	ldr	r2, [pc, #416]	@ (8008320 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8008180:	430b      	orrs	r3, r1
 8008182:	6593      	str	r3, [r2, #88]	@ 0x58
 8008184:	e003      	b.n	800818e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008186:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800818a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800818e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008196:	f002 0320 	and.w	r3, r2, #32
 800819a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800819e:	2300      	movs	r3, #0
 80081a0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80081a4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80081a8:	460b      	mov	r3, r1
 80081aa:	4313      	orrs	r3, r2
 80081ac:	d055      	beq.n	800825a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80081ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80081b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80081b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80081ba:	d033      	beq.n	8008224 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 80081bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80081c0:	d82c      	bhi.n	800821c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80081c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80081c6:	d02f      	beq.n	8008228 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 80081c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80081cc:	d826      	bhi.n	800821c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80081ce:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80081d2:	d02b      	beq.n	800822c <HAL_RCCEx_PeriphCLKConfig+0xba8>
 80081d4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80081d8:	d820      	bhi.n	800821c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80081da:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80081de:	d012      	beq.n	8008206 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 80081e0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80081e4:	d81a      	bhi.n	800821c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d022      	beq.n	8008230 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 80081ea:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80081ee:	d115      	bne.n	800821c <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80081f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80081f4:	3308      	adds	r3, #8
 80081f6:	2100      	movs	r1, #0
 80081f8:	4618      	mov	r0, r3
 80081fa:	f001 fcc5 	bl	8009b88 <RCCEx_PLL2_Config>
 80081fe:	4603      	mov	r3, r0
 8008200:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008204:	e015      	b.n	8008232 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008206:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800820a:	3328      	adds	r3, #40	@ 0x28
 800820c:	2102      	movs	r1, #2
 800820e:	4618      	mov	r0, r3
 8008210:	f001 fd6c 	bl	8009cec <RCCEx_PLL3_Config>
 8008214:	4603      	mov	r3, r0
 8008216:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800821a:	e00a      	b.n	8008232 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800821c:	2301      	movs	r3, #1
 800821e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008222:	e006      	b.n	8008232 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8008224:	bf00      	nop
 8008226:	e004      	b.n	8008232 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8008228:	bf00      	nop
 800822a:	e002      	b.n	8008232 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800822c:	bf00      	nop
 800822e:	e000      	b.n	8008232 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8008230:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008232:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008236:	2b00      	cmp	r3, #0
 8008238:	d10b      	bne.n	8008252 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800823a:	4b39      	ldr	r3, [pc, #228]	@ (8008320 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800823c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800823e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8008242:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008246:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800824a:	4a35      	ldr	r2, [pc, #212]	@ (8008320 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800824c:	430b      	orrs	r3, r1
 800824e:	6553      	str	r3, [r2, #84]	@ 0x54
 8008250:	e003      	b.n	800825a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008252:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008256:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800825a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800825e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008262:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8008266:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800826a:	2300      	movs	r3, #0
 800826c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008270:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8008274:	460b      	mov	r3, r1
 8008276:	4313      	orrs	r3, r2
 8008278:	d058      	beq.n	800832c <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800827a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800827e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008282:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8008286:	d033      	beq.n	80082f0 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8008288:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800828c:	d82c      	bhi.n	80082e8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800828e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008292:	d02f      	beq.n	80082f4 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8008294:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008298:	d826      	bhi.n	80082e8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800829a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800829e:	d02b      	beq.n	80082f8 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 80082a0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80082a4:	d820      	bhi.n	80082e8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80082a6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80082aa:	d012      	beq.n	80082d2 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 80082ac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80082b0:	d81a      	bhi.n	80082e8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d022      	beq.n	80082fc <HAL_RCCEx_PeriphCLKConfig+0xc78>
 80082b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80082ba:	d115      	bne.n	80082e8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80082bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80082c0:	3308      	adds	r3, #8
 80082c2:	2100      	movs	r1, #0
 80082c4:	4618      	mov	r0, r3
 80082c6:	f001 fc5f 	bl	8009b88 <RCCEx_PLL2_Config>
 80082ca:	4603      	mov	r3, r0
 80082cc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80082d0:	e015      	b.n	80082fe <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80082d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80082d6:	3328      	adds	r3, #40	@ 0x28
 80082d8:	2102      	movs	r1, #2
 80082da:	4618      	mov	r0, r3
 80082dc:	f001 fd06 	bl	8009cec <RCCEx_PLL3_Config>
 80082e0:	4603      	mov	r3, r0
 80082e2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80082e6:	e00a      	b.n	80082fe <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80082e8:	2301      	movs	r3, #1
 80082ea:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80082ee:	e006      	b.n	80082fe <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80082f0:	bf00      	nop
 80082f2:	e004      	b.n	80082fe <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80082f4:	bf00      	nop
 80082f6:	e002      	b.n	80082fe <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80082f8:	bf00      	nop
 80082fa:	e000      	b.n	80082fe <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80082fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80082fe:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008302:	2b00      	cmp	r3, #0
 8008304:	d10e      	bne.n	8008324 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008306:	4b06      	ldr	r3, [pc, #24]	@ (8008320 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8008308:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800830a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800830e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008312:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008316:	4a02      	ldr	r2, [pc, #8]	@ (8008320 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8008318:	430b      	orrs	r3, r1
 800831a:	6593      	str	r3, [r2, #88]	@ 0x58
 800831c:	e006      	b.n	800832c <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800831e:	bf00      	nop
 8008320:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008324:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008328:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800832c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008334:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8008338:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800833c:	2300      	movs	r3, #0
 800833e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008342:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8008346:	460b      	mov	r3, r1
 8008348:	4313      	orrs	r3, r2
 800834a:	d055      	beq.n	80083f8 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800834c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008350:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008354:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8008358:	d033      	beq.n	80083c2 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800835a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800835e:	d82c      	bhi.n	80083ba <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8008360:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008364:	d02f      	beq.n	80083c6 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8008366:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800836a:	d826      	bhi.n	80083ba <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800836c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8008370:	d02b      	beq.n	80083ca <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8008372:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8008376:	d820      	bhi.n	80083ba <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8008378:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800837c:	d012      	beq.n	80083a4 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800837e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008382:	d81a      	bhi.n	80083ba <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8008384:	2b00      	cmp	r3, #0
 8008386:	d022      	beq.n	80083ce <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8008388:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800838c:	d115      	bne.n	80083ba <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800838e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008392:	3308      	adds	r3, #8
 8008394:	2100      	movs	r1, #0
 8008396:	4618      	mov	r0, r3
 8008398:	f001 fbf6 	bl	8009b88 <RCCEx_PLL2_Config>
 800839c:	4603      	mov	r3, r0
 800839e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80083a2:	e015      	b.n	80083d0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80083a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80083a8:	3328      	adds	r3, #40	@ 0x28
 80083aa:	2102      	movs	r1, #2
 80083ac:	4618      	mov	r0, r3
 80083ae:	f001 fc9d 	bl	8009cec <RCCEx_PLL3_Config>
 80083b2:	4603      	mov	r3, r0
 80083b4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80083b8:	e00a      	b.n	80083d0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80083ba:	2301      	movs	r3, #1
 80083bc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80083c0:	e006      	b.n	80083d0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80083c2:	bf00      	nop
 80083c4:	e004      	b.n	80083d0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80083c6:	bf00      	nop
 80083c8:	e002      	b.n	80083d0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80083ca:	bf00      	nop
 80083cc:	e000      	b.n	80083d0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80083ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 80083d0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d10b      	bne.n	80083f0 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80083d8:	4ba0      	ldr	r3, [pc, #640]	@ (800865c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80083da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80083dc:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80083e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80083e4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80083e8:	4a9c      	ldr	r2, [pc, #624]	@ (800865c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80083ea:	430b      	orrs	r3, r1
 80083ec:	6593      	str	r3, [r2, #88]	@ 0x58
 80083ee:	e003      	b.n	80083f8 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083f0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80083f4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 80083f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80083fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008400:	f002 0308 	and.w	r3, r2, #8
 8008404:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008408:	2300      	movs	r3, #0
 800840a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800840e:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8008412:	460b      	mov	r3, r1
 8008414:	4313      	orrs	r3, r2
 8008416:	d01e      	beq.n	8008456 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8008418:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800841c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008420:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008424:	d10c      	bne.n	8008440 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008426:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800842a:	3328      	adds	r3, #40	@ 0x28
 800842c:	2102      	movs	r1, #2
 800842e:	4618      	mov	r0, r3
 8008430:	f001 fc5c 	bl	8009cec <RCCEx_PLL3_Config>
 8008434:	4603      	mov	r3, r0
 8008436:	2b00      	cmp	r3, #0
 8008438:	d002      	beq.n	8008440 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800843a:	2301      	movs	r3, #1
 800843c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8008440:	4b86      	ldr	r3, [pc, #536]	@ (800865c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008442:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008444:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008448:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800844c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008450:	4a82      	ldr	r2, [pc, #520]	@ (800865c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008452:	430b      	orrs	r3, r1
 8008454:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008456:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800845a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800845e:	f002 0310 	and.w	r3, r2, #16
 8008462:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008466:	2300      	movs	r3, #0
 8008468:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800846c:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8008470:	460b      	mov	r3, r1
 8008472:	4313      	orrs	r3, r2
 8008474:	d01e      	beq.n	80084b4 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8008476:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800847a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800847e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008482:	d10c      	bne.n	800849e <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008484:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008488:	3328      	adds	r3, #40	@ 0x28
 800848a:	2102      	movs	r1, #2
 800848c:	4618      	mov	r0, r3
 800848e:	f001 fc2d 	bl	8009cec <RCCEx_PLL3_Config>
 8008492:	4603      	mov	r3, r0
 8008494:	2b00      	cmp	r3, #0
 8008496:	d002      	beq.n	800849e <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8008498:	2301      	movs	r3, #1
 800849a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800849e:	4b6f      	ldr	r3, [pc, #444]	@ (800865c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80084a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80084a2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80084a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80084aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80084ae:	4a6b      	ldr	r2, [pc, #428]	@ (800865c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80084b0:	430b      	orrs	r3, r1
 80084b2:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80084b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80084b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084bc:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80084c0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80084c2:	2300      	movs	r3, #0
 80084c4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80084c6:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80084ca:	460b      	mov	r3, r1
 80084cc:	4313      	orrs	r3, r2
 80084ce:	d03e      	beq.n	800854e <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80084d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80084d4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80084d8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80084dc:	d022      	beq.n	8008524 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 80084de:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80084e2:	d81b      	bhi.n	800851c <HAL_RCCEx_PeriphCLKConfig+0xe98>
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d003      	beq.n	80084f0 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 80084e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80084ec:	d00b      	beq.n	8008506 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 80084ee:	e015      	b.n	800851c <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80084f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80084f4:	3308      	adds	r3, #8
 80084f6:	2100      	movs	r1, #0
 80084f8:	4618      	mov	r0, r3
 80084fa:	f001 fb45 	bl	8009b88 <RCCEx_PLL2_Config>
 80084fe:	4603      	mov	r3, r0
 8008500:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008504:	e00f      	b.n	8008526 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008506:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800850a:	3328      	adds	r3, #40	@ 0x28
 800850c:	2102      	movs	r1, #2
 800850e:	4618      	mov	r0, r3
 8008510:	f001 fbec 	bl	8009cec <RCCEx_PLL3_Config>
 8008514:	4603      	mov	r3, r0
 8008516:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800851a:	e004      	b.n	8008526 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800851c:	2301      	movs	r3, #1
 800851e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008522:	e000      	b.n	8008526 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8008524:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008526:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800852a:	2b00      	cmp	r3, #0
 800852c:	d10b      	bne.n	8008546 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800852e:	4b4b      	ldr	r3, [pc, #300]	@ (800865c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008530:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008532:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8008536:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800853a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800853e:	4a47      	ldr	r2, [pc, #284]	@ (800865c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008540:	430b      	orrs	r3, r1
 8008542:	6593      	str	r3, [r2, #88]	@ 0x58
 8008544:	e003      	b.n	800854e <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008546:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800854a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800854e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008552:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008556:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800855a:	673b      	str	r3, [r7, #112]	@ 0x70
 800855c:	2300      	movs	r3, #0
 800855e:	677b      	str	r3, [r7, #116]	@ 0x74
 8008560:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8008564:	460b      	mov	r3, r1
 8008566:	4313      	orrs	r3, r2
 8008568:	d03b      	beq.n	80085e2 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800856a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800856e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008572:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008576:	d01f      	beq.n	80085b8 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8008578:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800857c:	d818      	bhi.n	80085b0 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800857e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008582:	d003      	beq.n	800858c <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8008584:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008588:	d007      	beq.n	800859a <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800858a:	e011      	b.n	80085b0 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800858c:	4b33      	ldr	r3, [pc, #204]	@ (800865c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800858e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008590:	4a32      	ldr	r2, [pc, #200]	@ (800865c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008592:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008596:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8008598:	e00f      	b.n	80085ba <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800859a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800859e:	3328      	adds	r3, #40	@ 0x28
 80085a0:	2101      	movs	r1, #1
 80085a2:	4618      	mov	r0, r3
 80085a4:	f001 fba2 	bl	8009cec <RCCEx_PLL3_Config>
 80085a8:	4603      	mov	r3, r0
 80085aa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 80085ae:	e004      	b.n	80085ba <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80085b0:	2301      	movs	r3, #1
 80085b2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80085b6:	e000      	b.n	80085ba <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 80085b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80085ba:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d10b      	bne.n	80085da <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80085c2:	4b26      	ldr	r3, [pc, #152]	@ (800865c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80085c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80085c6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80085ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80085ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80085d2:	4a22      	ldr	r2, [pc, #136]	@ (800865c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80085d4:	430b      	orrs	r3, r1
 80085d6:	6553      	str	r3, [r2, #84]	@ 0x54
 80085d8:	e003      	b.n	80085e2 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085da:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80085de:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80085e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80085e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085ea:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80085ee:	66bb      	str	r3, [r7, #104]	@ 0x68
 80085f0:	2300      	movs	r3, #0
 80085f2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80085f4:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80085f8:	460b      	mov	r3, r1
 80085fa:	4313      	orrs	r3, r2
 80085fc:	d034      	beq.n	8008668 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80085fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008602:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008604:	2b00      	cmp	r3, #0
 8008606:	d003      	beq.n	8008610 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8008608:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800860c:	d007      	beq.n	800861e <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800860e:	e011      	b.n	8008634 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008610:	4b12      	ldr	r3, [pc, #72]	@ (800865c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008612:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008614:	4a11      	ldr	r2, [pc, #68]	@ (800865c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008616:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800861a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800861c:	e00e      	b.n	800863c <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800861e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008622:	3308      	adds	r3, #8
 8008624:	2102      	movs	r1, #2
 8008626:	4618      	mov	r0, r3
 8008628:	f001 faae 	bl	8009b88 <RCCEx_PLL2_Config>
 800862c:	4603      	mov	r3, r0
 800862e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008632:	e003      	b.n	800863c <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8008634:	2301      	movs	r3, #1
 8008636:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800863a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800863c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008640:	2b00      	cmp	r3, #0
 8008642:	d10d      	bne.n	8008660 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008644:	4b05      	ldr	r3, [pc, #20]	@ (800865c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008646:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008648:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800864c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008650:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008652:	4a02      	ldr	r2, [pc, #8]	@ (800865c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008654:	430b      	orrs	r3, r1
 8008656:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008658:	e006      	b.n	8008668 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800865a:	bf00      	nop
 800865c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008660:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008664:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008668:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800866c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008670:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8008674:	663b      	str	r3, [r7, #96]	@ 0x60
 8008676:	2300      	movs	r3, #0
 8008678:	667b      	str	r3, [r7, #100]	@ 0x64
 800867a:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800867e:	460b      	mov	r3, r1
 8008680:	4313      	orrs	r3, r2
 8008682:	d00c      	beq.n	800869e <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008684:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008688:	3328      	adds	r3, #40	@ 0x28
 800868a:	2102      	movs	r1, #2
 800868c:	4618      	mov	r0, r3
 800868e:	f001 fb2d 	bl	8009cec <RCCEx_PLL3_Config>
 8008692:	4603      	mov	r3, r0
 8008694:	2b00      	cmp	r3, #0
 8008696:	d002      	beq.n	800869e <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8008698:	2301      	movs	r3, #1
 800869a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800869e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80086a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086a6:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80086aa:	65bb      	str	r3, [r7, #88]	@ 0x58
 80086ac:	2300      	movs	r3, #0
 80086ae:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80086b0:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80086b4:	460b      	mov	r3, r1
 80086b6:	4313      	orrs	r3, r2
 80086b8:	d036      	beq.n	8008728 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 80086ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80086be:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80086c0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80086c4:	d018      	beq.n	80086f8 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 80086c6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80086ca:	d811      	bhi.n	80086f0 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 80086cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80086d0:	d014      	beq.n	80086fc <HAL_RCCEx_PeriphCLKConfig+0x1078>
 80086d2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80086d6:	d80b      	bhi.n	80086f0 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d011      	beq.n	8008700 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 80086dc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80086e0:	d106      	bne.n	80086f0 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80086e2:	4bb7      	ldr	r3, [pc, #732]	@ (80089c0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80086e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086e6:	4ab6      	ldr	r2, [pc, #728]	@ (80089c0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80086e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80086ec:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80086ee:	e008      	b.n	8008702 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80086f0:	2301      	movs	r3, #1
 80086f2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80086f6:	e004      	b.n	8008702 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80086f8:	bf00      	nop
 80086fa:	e002      	b.n	8008702 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80086fc:	bf00      	nop
 80086fe:	e000      	b.n	8008702 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8008700:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008702:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008706:	2b00      	cmp	r3, #0
 8008708:	d10a      	bne.n	8008720 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800870a:	4bad      	ldr	r3, [pc, #692]	@ (80089c0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800870c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800870e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008712:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008716:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008718:	4aa9      	ldr	r2, [pc, #676]	@ (80089c0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800871a:	430b      	orrs	r3, r1
 800871c:	6553      	str	r3, [r2, #84]	@ 0x54
 800871e:	e003      	b.n	8008728 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008720:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008724:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008728:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800872c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008730:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8008734:	653b      	str	r3, [r7, #80]	@ 0x50
 8008736:	2300      	movs	r3, #0
 8008738:	657b      	str	r3, [r7, #84]	@ 0x54
 800873a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800873e:	460b      	mov	r3, r1
 8008740:	4313      	orrs	r3, r2
 8008742:	d009      	beq.n	8008758 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008744:	4b9e      	ldr	r3, [pc, #632]	@ (80089c0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008746:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008748:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800874c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008750:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008752:	4a9b      	ldr	r2, [pc, #620]	@ (80089c0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008754:	430b      	orrs	r3, r1
 8008756:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008758:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800875c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008760:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8008764:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008766:	2300      	movs	r3, #0
 8008768:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800876a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800876e:	460b      	mov	r3, r1
 8008770:	4313      	orrs	r3, r2
 8008772:	d009      	beq.n	8008788 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008774:	4b92      	ldr	r3, [pc, #584]	@ (80089c0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008776:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008778:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800877c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008780:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008782:	4a8f      	ldr	r2, [pc, #572]	@ (80089c0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008784:	430b      	orrs	r3, r1
 8008786:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008788:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800878c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008790:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8008794:	643b      	str	r3, [r7, #64]	@ 0x40
 8008796:	2300      	movs	r3, #0
 8008798:	647b      	str	r3, [r7, #68]	@ 0x44
 800879a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800879e:	460b      	mov	r3, r1
 80087a0:	4313      	orrs	r3, r2
 80087a2:	d00e      	beq.n	80087c2 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80087a4:	4b86      	ldr	r3, [pc, #536]	@ (80089c0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80087a6:	691b      	ldr	r3, [r3, #16]
 80087a8:	4a85      	ldr	r2, [pc, #532]	@ (80089c0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80087aa:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80087ae:	6113      	str	r3, [r2, #16]
 80087b0:	4b83      	ldr	r3, [pc, #524]	@ (80089c0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80087b2:	6919      	ldr	r1, [r3, #16]
 80087b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80087b8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80087bc:	4a80      	ldr	r2, [pc, #512]	@ (80089c0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80087be:	430b      	orrs	r3, r1
 80087c0:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80087c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80087c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087ca:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80087ce:	63bb      	str	r3, [r7, #56]	@ 0x38
 80087d0:	2300      	movs	r3, #0
 80087d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80087d4:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80087d8:	460b      	mov	r3, r1
 80087da:	4313      	orrs	r3, r2
 80087dc:	d009      	beq.n	80087f2 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80087de:	4b78      	ldr	r3, [pc, #480]	@ (80089c0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80087e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80087e2:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80087e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80087ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80087ec:	4a74      	ldr	r2, [pc, #464]	@ (80089c0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80087ee:	430b      	orrs	r3, r1
 80087f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80087f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80087f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087fa:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80087fe:	633b      	str	r3, [r7, #48]	@ 0x30
 8008800:	2300      	movs	r3, #0
 8008802:	637b      	str	r3, [r7, #52]	@ 0x34
 8008804:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8008808:	460b      	mov	r3, r1
 800880a:	4313      	orrs	r3, r2
 800880c:	d00a      	beq.n	8008824 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800880e:	4b6c      	ldr	r3, [pc, #432]	@ (80089c0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008810:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008812:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8008816:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800881a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800881e:	4a68      	ldr	r2, [pc, #416]	@ (80089c0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008820:	430b      	orrs	r3, r1
 8008822:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8008824:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800882c:	2100      	movs	r1, #0
 800882e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8008830:	f003 0301 	and.w	r3, r3, #1
 8008834:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008836:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800883a:	460b      	mov	r3, r1
 800883c:	4313      	orrs	r3, r2
 800883e:	d011      	beq.n	8008864 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008840:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008844:	3308      	adds	r3, #8
 8008846:	2100      	movs	r1, #0
 8008848:	4618      	mov	r0, r3
 800884a:	f001 f99d 	bl	8009b88 <RCCEx_PLL2_Config>
 800884e:	4603      	mov	r3, r0
 8008850:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8008854:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008858:	2b00      	cmp	r3, #0
 800885a:	d003      	beq.n	8008864 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800885c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008860:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8008864:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800886c:	2100      	movs	r1, #0
 800886e:	6239      	str	r1, [r7, #32]
 8008870:	f003 0302 	and.w	r3, r3, #2
 8008874:	627b      	str	r3, [r7, #36]	@ 0x24
 8008876:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800887a:	460b      	mov	r3, r1
 800887c:	4313      	orrs	r3, r2
 800887e:	d011      	beq.n	80088a4 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008880:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008884:	3308      	adds	r3, #8
 8008886:	2101      	movs	r1, #1
 8008888:	4618      	mov	r0, r3
 800888a:	f001 f97d 	bl	8009b88 <RCCEx_PLL2_Config>
 800888e:	4603      	mov	r3, r0
 8008890:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8008894:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008898:	2b00      	cmp	r3, #0
 800889a:	d003      	beq.n	80088a4 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800889c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80088a0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80088a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80088a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088ac:	2100      	movs	r1, #0
 80088ae:	61b9      	str	r1, [r7, #24]
 80088b0:	f003 0304 	and.w	r3, r3, #4
 80088b4:	61fb      	str	r3, [r7, #28]
 80088b6:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80088ba:	460b      	mov	r3, r1
 80088bc:	4313      	orrs	r3, r2
 80088be:	d011      	beq.n	80088e4 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80088c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80088c4:	3308      	adds	r3, #8
 80088c6:	2102      	movs	r1, #2
 80088c8:	4618      	mov	r0, r3
 80088ca:	f001 f95d 	bl	8009b88 <RCCEx_PLL2_Config>
 80088ce:	4603      	mov	r3, r0
 80088d0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80088d4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d003      	beq.n	80088e4 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80088dc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80088e0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80088e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80088e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088ec:	2100      	movs	r1, #0
 80088ee:	6139      	str	r1, [r7, #16]
 80088f0:	f003 0308 	and.w	r3, r3, #8
 80088f4:	617b      	str	r3, [r7, #20]
 80088f6:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80088fa:	460b      	mov	r3, r1
 80088fc:	4313      	orrs	r3, r2
 80088fe:	d011      	beq.n	8008924 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008900:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008904:	3328      	adds	r3, #40	@ 0x28
 8008906:	2100      	movs	r1, #0
 8008908:	4618      	mov	r0, r3
 800890a:	f001 f9ef 	bl	8009cec <RCCEx_PLL3_Config>
 800890e:	4603      	mov	r3, r0
 8008910:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8008914:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008918:	2b00      	cmp	r3, #0
 800891a:	d003      	beq.n	8008924 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800891c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008920:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8008924:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800892c:	2100      	movs	r1, #0
 800892e:	60b9      	str	r1, [r7, #8]
 8008930:	f003 0310 	and.w	r3, r3, #16
 8008934:	60fb      	str	r3, [r7, #12]
 8008936:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800893a:	460b      	mov	r3, r1
 800893c:	4313      	orrs	r3, r2
 800893e:	d011      	beq.n	8008964 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008940:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008944:	3328      	adds	r3, #40	@ 0x28
 8008946:	2101      	movs	r1, #1
 8008948:	4618      	mov	r0, r3
 800894a:	f001 f9cf 	bl	8009cec <RCCEx_PLL3_Config>
 800894e:	4603      	mov	r3, r0
 8008950:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8008954:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008958:	2b00      	cmp	r3, #0
 800895a:	d003      	beq.n	8008964 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800895c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008960:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8008964:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800896c:	2100      	movs	r1, #0
 800896e:	6039      	str	r1, [r7, #0]
 8008970:	f003 0320 	and.w	r3, r3, #32
 8008974:	607b      	str	r3, [r7, #4]
 8008976:	e9d7 1200 	ldrd	r1, r2, [r7]
 800897a:	460b      	mov	r3, r1
 800897c:	4313      	orrs	r3, r2
 800897e:	d011      	beq.n	80089a4 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008980:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008984:	3328      	adds	r3, #40	@ 0x28
 8008986:	2102      	movs	r1, #2
 8008988:	4618      	mov	r0, r3
 800898a:	f001 f9af 	bl	8009cec <RCCEx_PLL3_Config>
 800898e:	4603      	mov	r3, r0
 8008990:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8008994:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008998:	2b00      	cmp	r3, #0
 800899a:	d003      	beq.n	80089a4 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800899c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80089a0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 80089a4:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d101      	bne.n	80089b0 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 80089ac:	2300      	movs	r3, #0
 80089ae:	e000      	b.n	80089b2 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 80089b0:	2301      	movs	r3, #1
}
 80089b2:	4618      	mov	r0, r3
 80089b4:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 80089b8:	46bd      	mov	sp, r7
 80089ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80089be:	bf00      	nop
 80089c0:	58024400 	.word	0x58024400

080089c4 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80089c4:	b580      	push	{r7, lr}
 80089c6:	b090      	sub	sp, #64	@ 0x40
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80089ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 80089d2:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 80089d6:	430b      	orrs	r3, r1
 80089d8:	f040 8094 	bne.w	8008b04 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 80089dc:	4b9b      	ldr	r3, [pc, #620]	@ (8008c4c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80089de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80089e0:	f003 0307 	and.w	r3, r3, #7
 80089e4:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80089e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089e8:	2b04      	cmp	r3, #4
 80089ea:	f200 8087 	bhi.w	8008afc <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 80089ee:	a201      	add	r2, pc, #4	@ (adr r2, 80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 80089f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089f4:	08008a09 	.word	0x08008a09
 80089f8:	08008a31 	.word	0x08008a31
 80089fc:	08008a59 	.word	0x08008a59
 8008a00:	08008af5 	.word	0x08008af5
 8008a04:	08008a81 	.word	0x08008a81
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008a08:	4b90      	ldr	r3, [pc, #576]	@ (8008c4c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008a10:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008a14:	d108      	bne.n	8008a28 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008a16:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008a1a:	4618      	mov	r0, r3
 8008a1c:	f000 ff62 	bl	80098e4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008a20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008a24:	f000 bc93 	b.w	800934e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008a28:	2300      	movs	r3, #0
 8008a2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a2c:	f000 bc8f 	b.w	800934e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008a30:	4b86      	ldr	r3, [pc, #536]	@ (8008c4c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008a38:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008a3c:	d108      	bne.n	8008a50 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008a3e:	f107 0318 	add.w	r3, r7, #24
 8008a42:	4618      	mov	r0, r3
 8008a44:	f000 fca6 	bl	8009394 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008a48:	69bb      	ldr	r3, [r7, #24]
 8008a4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008a4c:	f000 bc7f 	b.w	800934e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008a50:	2300      	movs	r3, #0
 8008a52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a54:	f000 bc7b 	b.w	800934e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008a58:	4b7c      	ldr	r3, [pc, #496]	@ (8008c4c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008a60:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008a64:	d108      	bne.n	8008a78 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008a66:	f107 030c 	add.w	r3, r7, #12
 8008a6a:	4618      	mov	r0, r3
 8008a6c:	f000 fde6 	bl	800963c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008a74:	f000 bc6b 	b.w	800934e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008a78:	2300      	movs	r3, #0
 8008a7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a7c:	f000 bc67 	b.w	800934e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008a80:	4b72      	ldr	r3, [pc, #456]	@ (8008c4c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008a82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008a84:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008a88:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008a8a:	4b70      	ldr	r3, [pc, #448]	@ (8008c4c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	f003 0304 	and.w	r3, r3, #4
 8008a92:	2b04      	cmp	r3, #4
 8008a94:	d10c      	bne.n	8008ab0 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8008a96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d109      	bne.n	8008ab0 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008a9c:	4b6b      	ldr	r3, [pc, #428]	@ (8008c4c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	08db      	lsrs	r3, r3, #3
 8008aa2:	f003 0303 	and.w	r3, r3, #3
 8008aa6:	4a6a      	ldr	r2, [pc, #424]	@ (8008c50 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8008aa8:	fa22 f303 	lsr.w	r3, r2, r3
 8008aac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008aae:	e01f      	b.n	8008af0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008ab0:	4b66      	ldr	r3, [pc, #408]	@ (8008c4c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008ab8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008abc:	d106      	bne.n	8008acc <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8008abe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ac0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008ac4:	d102      	bne.n	8008acc <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008ac6:	4b63      	ldr	r3, [pc, #396]	@ (8008c54 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8008ac8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008aca:	e011      	b.n	8008af0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008acc:	4b5f      	ldr	r3, [pc, #380]	@ (8008c4c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008ad4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008ad8:	d106      	bne.n	8008ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8008ada:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008adc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008ae0:	d102      	bne.n	8008ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008ae2:	4b5d      	ldr	r3, [pc, #372]	@ (8008c58 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008ae4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008ae6:	e003      	b.n	8008af0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008ae8:	2300      	movs	r3, #0
 8008aea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008aec:	f000 bc2f 	b.w	800934e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008af0:	f000 bc2d 	b.w	800934e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008af4:	4b59      	ldr	r3, [pc, #356]	@ (8008c5c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008af6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008af8:	f000 bc29 	b.w	800934e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8008afc:	2300      	movs	r3, #0
 8008afe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b00:	f000 bc25 	b.w	800934e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8008b04:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008b08:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8008b0c:	430b      	orrs	r3, r1
 8008b0e:	f040 80a7 	bne.w	8008c60 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8008b12:	4b4e      	ldr	r3, [pc, #312]	@ (8008c4c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008b14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008b16:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8008b1a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8008b1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b1e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008b22:	d054      	beq.n	8008bce <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 8008b24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b26:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008b2a:	f200 808b 	bhi.w	8008c44 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8008b2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b30:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008b34:	f000 8083 	beq.w	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 8008b38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b3a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008b3e:	f200 8081 	bhi.w	8008c44 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8008b42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b44:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008b48:	d02f      	beq.n	8008baa <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8008b4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b4c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008b50:	d878      	bhi.n	8008c44 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8008b52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d004      	beq.n	8008b62 <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 8008b58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b5a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008b5e:	d012      	beq.n	8008b86 <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 8008b60:	e070      	b.n	8008c44 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008b62:	4b3a      	ldr	r3, [pc, #232]	@ (8008c4c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008b6a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008b6e:	d107      	bne.n	8008b80 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008b70:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008b74:	4618      	mov	r0, r3
 8008b76:	f000 feb5 	bl	80098e4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008b7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008b7e:	e3e6      	b.n	800934e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008b80:	2300      	movs	r3, #0
 8008b82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b84:	e3e3      	b.n	800934e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008b86:	4b31      	ldr	r3, [pc, #196]	@ (8008c4c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008b8e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008b92:	d107      	bne.n	8008ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008b94:	f107 0318 	add.w	r3, r7, #24
 8008b98:	4618      	mov	r0, r3
 8008b9a:	f000 fbfb 	bl	8009394 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008b9e:	69bb      	ldr	r3, [r7, #24]
 8008ba0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008ba2:	e3d4      	b.n	800934e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008ba4:	2300      	movs	r3, #0
 8008ba6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ba8:	e3d1      	b.n	800934e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008baa:	4b28      	ldr	r3, [pc, #160]	@ (8008c4c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008bb2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008bb6:	d107      	bne.n	8008bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008bb8:	f107 030c 	add.w	r3, r7, #12
 8008bbc:	4618      	mov	r0, r3
 8008bbe:	f000 fd3d 	bl	800963c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008bc6:	e3c2      	b.n	800934e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008bc8:	2300      	movs	r3, #0
 8008bca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008bcc:	e3bf      	b.n	800934e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008bce:	4b1f      	ldr	r3, [pc, #124]	@ (8008c4c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008bd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008bd2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008bd6:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008bd8:	4b1c      	ldr	r3, [pc, #112]	@ (8008c4c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	f003 0304 	and.w	r3, r3, #4
 8008be0:	2b04      	cmp	r3, #4
 8008be2:	d10c      	bne.n	8008bfe <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 8008be4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d109      	bne.n	8008bfe <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008bea:	4b18      	ldr	r3, [pc, #96]	@ (8008c4c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	08db      	lsrs	r3, r3, #3
 8008bf0:	f003 0303 	and.w	r3, r3, #3
 8008bf4:	4a16      	ldr	r2, [pc, #88]	@ (8008c50 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8008bf6:	fa22 f303 	lsr.w	r3, r2, r3
 8008bfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008bfc:	e01e      	b.n	8008c3c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008bfe:	4b13      	ldr	r3, [pc, #76]	@ (8008c4c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008c06:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008c0a:	d106      	bne.n	8008c1a <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 8008c0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c0e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008c12:	d102      	bne.n	8008c1a <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008c14:	4b0f      	ldr	r3, [pc, #60]	@ (8008c54 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8008c16:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008c18:	e010      	b.n	8008c3c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008c1a:	4b0c      	ldr	r3, [pc, #48]	@ (8008c4c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008c22:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008c26:	d106      	bne.n	8008c36 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8008c28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c2a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008c2e:	d102      	bne.n	8008c36 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008c30:	4b09      	ldr	r3, [pc, #36]	@ (8008c58 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008c32:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008c34:	e002      	b.n	8008c3c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008c36:	2300      	movs	r3, #0
 8008c38:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008c3a:	e388      	b.n	800934e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008c3c:	e387      	b.n	800934e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008c3e:	4b07      	ldr	r3, [pc, #28]	@ (8008c5c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008c40:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c42:	e384      	b.n	800934e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8008c44:	2300      	movs	r3, #0
 8008c46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c48:	e381      	b.n	800934e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008c4a:	bf00      	nop
 8008c4c:	58024400 	.word	0x58024400
 8008c50:	03d09000 	.word	0x03d09000
 8008c54:	003d0900 	.word	0x003d0900
 8008c58:	016e3600 	.word	0x016e3600
 8008c5c:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8008c60:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008c64:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8008c68:	430b      	orrs	r3, r1
 8008c6a:	f040 809c 	bne.w	8008da6 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8008c6e:	4b9e      	ldr	r3, [pc, #632]	@ (8008ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008c70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008c72:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8008c76:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8008c78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c7a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008c7e:	d054      	beq.n	8008d2a <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 8008c80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c82:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008c86:	f200 808b 	bhi.w	8008da0 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8008c8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c8c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008c90:	f000 8083 	beq.w	8008d9a <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 8008c94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c96:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008c9a:	f200 8081 	bhi.w	8008da0 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8008c9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ca0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008ca4:	d02f      	beq.n	8008d06 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 8008ca6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ca8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008cac:	d878      	bhi.n	8008da0 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8008cae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d004      	beq.n	8008cbe <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8008cb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cb6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008cba:	d012      	beq.n	8008ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 8008cbc:	e070      	b.n	8008da0 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008cbe:	4b8a      	ldr	r3, [pc, #552]	@ (8008ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008cc6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008cca:	d107      	bne.n	8008cdc <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008ccc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008cd0:	4618      	mov	r0, r3
 8008cd2:	f000 fe07 	bl	80098e4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008cd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008cda:	e338      	b.n	800934e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008cdc:	2300      	movs	r3, #0
 8008cde:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ce0:	e335      	b.n	800934e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008ce2:	4b81      	ldr	r3, [pc, #516]	@ (8008ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008cea:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008cee:	d107      	bne.n	8008d00 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008cf0:	f107 0318 	add.w	r3, r7, #24
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	f000 fb4d 	bl	8009394 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008cfa:	69bb      	ldr	r3, [r7, #24]
 8008cfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008cfe:	e326      	b.n	800934e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008d00:	2300      	movs	r3, #0
 8008d02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d04:	e323      	b.n	800934e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008d06:	4b78      	ldr	r3, [pc, #480]	@ (8008ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008d0e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008d12:	d107      	bne.n	8008d24 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008d14:	f107 030c 	add.w	r3, r7, #12
 8008d18:	4618      	mov	r0, r3
 8008d1a:	f000 fc8f 	bl	800963c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008d22:	e314      	b.n	800934e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008d24:	2300      	movs	r3, #0
 8008d26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d28:	e311      	b.n	800934e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008d2a:	4b6f      	ldr	r3, [pc, #444]	@ (8008ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008d2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008d2e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008d32:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008d34:	4b6c      	ldr	r3, [pc, #432]	@ (8008ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	f003 0304 	and.w	r3, r3, #4
 8008d3c:	2b04      	cmp	r3, #4
 8008d3e:	d10c      	bne.n	8008d5a <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 8008d40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d109      	bne.n	8008d5a <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008d46:	4b68      	ldr	r3, [pc, #416]	@ (8008ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	08db      	lsrs	r3, r3, #3
 8008d4c:	f003 0303 	and.w	r3, r3, #3
 8008d50:	4a66      	ldr	r2, [pc, #408]	@ (8008eec <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 8008d52:	fa22 f303 	lsr.w	r3, r2, r3
 8008d56:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008d58:	e01e      	b.n	8008d98 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008d5a:	4b63      	ldr	r3, [pc, #396]	@ (8008ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008d62:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008d66:	d106      	bne.n	8008d76 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8008d68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d6a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008d6e:	d102      	bne.n	8008d76 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008d70:	4b5f      	ldr	r3, [pc, #380]	@ (8008ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8008d72:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008d74:	e010      	b.n	8008d98 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008d76:	4b5c      	ldr	r3, [pc, #368]	@ (8008ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008d7e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008d82:	d106      	bne.n	8008d92 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 8008d84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d86:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008d8a:	d102      	bne.n	8008d92 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008d8c:	4b59      	ldr	r3, [pc, #356]	@ (8008ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008d8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008d90:	e002      	b.n	8008d98 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008d92:	2300      	movs	r3, #0
 8008d94:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008d96:	e2da      	b.n	800934e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008d98:	e2d9      	b.n	800934e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008d9a:	4b57      	ldr	r3, [pc, #348]	@ (8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8008d9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d9e:	e2d6      	b.n	800934e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8008da0:	2300      	movs	r3, #0
 8008da2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008da4:	e2d3      	b.n	800934e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8008da6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008daa:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8008dae:	430b      	orrs	r3, r1
 8008db0:	f040 80a7 	bne.w	8008f02 <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8008db4:	4b4c      	ldr	r3, [pc, #304]	@ (8008ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008db6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008db8:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8008dbc:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008dbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008dc0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008dc4:	d055      	beq.n	8008e72 <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 8008dc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008dc8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008dcc:	f200 8096 	bhi.w	8008efc <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8008dd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008dd2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008dd6:	f000 8084 	beq.w	8008ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 8008dda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ddc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008de0:	f200 808c 	bhi.w	8008efc <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8008de4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008de6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008dea:	d030      	beq.n	8008e4e <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8008dec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008dee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008df2:	f200 8083 	bhi.w	8008efc <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8008df6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d004      	beq.n	8008e06 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 8008dfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008dfe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008e02:	d012      	beq.n	8008e2a <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 8008e04:	e07a      	b.n	8008efc <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008e06:	4b38      	ldr	r3, [pc, #224]	@ (8008ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008e0e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008e12:	d107      	bne.n	8008e24 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008e14:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008e18:	4618      	mov	r0, r3
 8008e1a:	f000 fd63 	bl	80098e4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008e1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e20:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008e22:	e294      	b.n	800934e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008e24:	2300      	movs	r3, #0
 8008e26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008e28:	e291      	b.n	800934e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008e2a:	4b2f      	ldr	r3, [pc, #188]	@ (8008ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008e32:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008e36:	d107      	bne.n	8008e48 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008e38:	f107 0318 	add.w	r3, r7, #24
 8008e3c:	4618      	mov	r0, r3
 8008e3e:	f000 faa9 	bl	8009394 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008e42:	69bb      	ldr	r3, [r7, #24]
 8008e44:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008e46:	e282      	b.n	800934e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008e48:	2300      	movs	r3, #0
 8008e4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008e4c:	e27f      	b.n	800934e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008e4e:	4b26      	ldr	r3, [pc, #152]	@ (8008ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008e56:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008e5a:	d107      	bne.n	8008e6c <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008e5c:	f107 030c 	add.w	r3, r7, #12
 8008e60:	4618      	mov	r0, r3
 8008e62:	f000 fbeb 	bl	800963c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008e6a:	e270      	b.n	800934e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008e6c:	2300      	movs	r3, #0
 8008e6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008e70:	e26d      	b.n	800934e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008e72:	4b1d      	ldr	r3, [pc, #116]	@ (8008ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008e74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008e76:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008e7a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008e7c:	4b1a      	ldr	r3, [pc, #104]	@ (8008ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	f003 0304 	and.w	r3, r3, #4
 8008e84:	2b04      	cmp	r3, #4
 8008e86:	d10c      	bne.n	8008ea2 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 8008e88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d109      	bne.n	8008ea2 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008e8e:	4b16      	ldr	r3, [pc, #88]	@ (8008ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	08db      	lsrs	r3, r3, #3
 8008e94:	f003 0303 	and.w	r3, r3, #3
 8008e98:	4a14      	ldr	r2, [pc, #80]	@ (8008eec <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 8008e9a:	fa22 f303 	lsr.w	r3, r2, r3
 8008e9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008ea0:	e01e      	b.n	8008ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008ea2:	4b11      	ldr	r3, [pc, #68]	@ (8008ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008eaa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008eae:	d106      	bne.n	8008ebe <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8008eb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008eb2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008eb6:	d102      	bne.n	8008ebe <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008eb8:	4b0d      	ldr	r3, [pc, #52]	@ (8008ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8008eba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008ebc:	e010      	b.n	8008ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008ebe:	4b0a      	ldr	r3, [pc, #40]	@ (8008ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008ec6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008eca:	d106      	bne.n	8008eda <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 8008ecc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ece:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008ed2:	d102      	bne.n	8008eda <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008ed4:	4b07      	ldr	r3, [pc, #28]	@ (8008ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008ed6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008ed8:	e002      	b.n	8008ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008eda:	2300      	movs	r3, #0
 8008edc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008ede:	e236      	b.n	800934e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008ee0:	e235      	b.n	800934e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008ee2:	4b05      	ldr	r3, [pc, #20]	@ (8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8008ee4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ee6:	e232      	b.n	800934e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008ee8:	58024400 	.word	0x58024400
 8008eec:	03d09000 	.word	0x03d09000
 8008ef0:	003d0900 	.word	0x003d0900
 8008ef4:	016e3600 	.word	0x016e3600
 8008ef8:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 8008efc:	2300      	movs	r3, #0
 8008efe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f00:	e225      	b.n	800934e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8008f02:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008f06:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8008f0a:	430b      	orrs	r3, r1
 8008f0c:	f040 8085 	bne.w	800901a <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8008f10:	4b9c      	ldr	r3, [pc, #624]	@ (8009184 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008f12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008f14:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8008f18:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8008f1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f1c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008f20:	d06b      	beq.n	8008ffa <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 8008f22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f24:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008f28:	d874      	bhi.n	8009014 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8008f2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f2c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008f30:	d056      	beq.n	8008fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 8008f32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f34:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008f38:	d86c      	bhi.n	8009014 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8008f3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f3c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008f40:	d03b      	beq.n	8008fba <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 8008f42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f44:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008f48:	d864      	bhi.n	8009014 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8008f4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f4c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008f50:	d021      	beq.n	8008f96 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 8008f52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f54:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008f58:	d85c      	bhi.n	8009014 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8008f5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d004      	beq.n	8008f6a <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 8008f60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f62:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008f66:	d004      	beq.n	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 8008f68:	e054      	b.n	8009014 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8008f6a:	f7fe fb5f 	bl	800762c <HAL_RCC_GetPCLK1Freq>
 8008f6e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008f70:	e1ed      	b.n	800934e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008f72:	4b84      	ldr	r3, [pc, #528]	@ (8009184 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008f7a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008f7e:	d107      	bne.n	8008f90 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008f80:	f107 0318 	add.w	r3, r7, #24
 8008f84:	4618      	mov	r0, r3
 8008f86:	f000 fa05 	bl	8009394 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008f8a:	69fb      	ldr	r3, [r7, #28]
 8008f8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008f8e:	e1de      	b.n	800934e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008f90:	2300      	movs	r3, #0
 8008f92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f94:	e1db      	b.n	800934e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008f96:	4b7b      	ldr	r3, [pc, #492]	@ (8009184 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008f9e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008fa2:	d107      	bne.n	8008fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008fa4:	f107 030c 	add.w	r3, r7, #12
 8008fa8:	4618      	mov	r0, r3
 8008faa:	f000 fb47 	bl	800963c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008fae:	693b      	ldr	r3, [r7, #16]
 8008fb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008fb2:	e1cc      	b.n	800934e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008fb4:	2300      	movs	r3, #0
 8008fb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008fb8:	e1c9      	b.n	800934e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008fba:	4b72      	ldr	r3, [pc, #456]	@ (8009184 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	f003 0304 	and.w	r3, r3, #4
 8008fc2:	2b04      	cmp	r3, #4
 8008fc4:	d109      	bne.n	8008fda <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008fc6:	4b6f      	ldr	r3, [pc, #444]	@ (8009184 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	08db      	lsrs	r3, r3, #3
 8008fcc:	f003 0303 	and.w	r3, r3, #3
 8008fd0:	4a6d      	ldr	r2, [pc, #436]	@ (8009188 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 8008fd2:	fa22 f303 	lsr.w	r3, r2, r3
 8008fd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008fd8:	e1b9      	b.n	800934e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008fda:	2300      	movs	r3, #0
 8008fdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008fde:	e1b6      	b.n	800934e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008fe0:	4b68      	ldr	r3, [pc, #416]	@ (8009184 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008fe8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008fec:	d102      	bne.n	8008ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 8008fee:	4b67      	ldr	r3, [pc, #412]	@ (800918c <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 8008ff0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008ff2:	e1ac      	b.n	800934e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008ff4:	2300      	movs	r3, #0
 8008ff6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ff8:	e1a9      	b.n	800934e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008ffa:	4b62      	ldr	r3, [pc, #392]	@ (8009184 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009002:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009006:	d102      	bne.n	800900e <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 8009008:	4b61      	ldr	r3, [pc, #388]	@ (8009190 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800900a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800900c:	e19f      	b.n	800934e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800900e:	2300      	movs	r3, #0
 8009010:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009012:	e19c      	b.n	800934e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8009014:	2300      	movs	r3, #0
 8009016:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009018:	e199      	b.n	800934e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800901a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800901e:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8009022:	430b      	orrs	r3, r1
 8009024:	d173      	bne.n	800910e <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8009026:	4b57      	ldr	r3, [pc, #348]	@ (8009184 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8009028:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800902a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800902e:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8009030:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009032:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009036:	d02f      	beq.n	8009098 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 8009038:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800903a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800903e:	d863      	bhi.n	8009108 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 8009040:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009042:	2b00      	cmp	r3, #0
 8009044:	d004      	beq.n	8009050 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 8009046:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009048:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800904c:	d012      	beq.n	8009074 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 800904e:	e05b      	b.n	8009108 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009050:	4b4c      	ldr	r3, [pc, #304]	@ (8009184 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009058:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800905c:	d107      	bne.n	800906e <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800905e:	f107 0318 	add.w	r3, r7, #24
 8009062:	4618      	mov	r0, r3
 8009064:	f000 f996 	bl	8009394 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009068:	69bb      	ldr	r3, [r7, #24]
 800906a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800906c:	e16f      	b.n	800934e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800906e:	2300      	movs	r3, #0
 8009070:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009072:	e16c      	b.n	800934e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009074:	4b43      	ldr	r3, [pc, #268]	@ (8009184 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800907c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009080:	d107      	bne.n	8009092 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009082:	f107 030c 	add.w	r3, r7, #12
 8009086:	4618      	mov	r0, r3
 8009088:	f000 fad8 	bl	800963c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800908c:	697b      	ldr	r3, [r7, #20]
 800908e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009090:	e15d      	b.n	800934e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009092:	2300      	movs	r3, #0
 8009094:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009096:	e15a      	b.n	800934e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009098:	4b3a      	ldr	r3, [pc, #232]	@ (8009184 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800909a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800909c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80090a0:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80090a2:	4b38      	ldr	r3, [pc, #224]	@ (8009184 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	f003 0304 	and.w	r3, r3, #4
 80090aa:	2b04      	cmp	r3, #4
 80090ac:	d10c      	bne.n	80090c8 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 80090ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d109      	bne.n	80090c8 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80090b4:	4b33      	ldr	r3, [pc, #204]	@ (8009184 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	08db      	lsrs	r3, r3, #3
 80090ba:	f003 0303 	and.w	r3, r3, #3
 80090be:	4a32      	ldr	r2, [pc, #200]	@ (8009188 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 80090c0:	fa22 f303 	lsr.w	r3, r2, r3
 80090c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80090c6:	e01e      	b.n	8009106 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80090c8:	4b2e      	ldr	r3, [pc, #184]	@ (8009184 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80090d0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80090d4:	d106      	bne.n	80090e4 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 80090d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80090d8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80090dc:	d102      	bne.n	80090e4 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80090de:	4b2b      	ldr	r3, [pc, #172]	@ (800918c <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 80090e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80090e2:	e010      	b.n	8009106 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80090e4:	4b27      	ldr	r3, [pc, #156]	@ (8009184 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80090ec:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80090f0:	d106      	bne.n	8009100 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 80090f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80090f4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80090f8:	d102      	bne.n	8009100 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80090fa:	4b25      	ldr	r3, [pc, #148]	@ (8009190 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 80090fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80090fe:	e002      	b.n	8009106 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009100:	2300      	movs	r3, #0
 8009102:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009104:	e123      	b.n	800934e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8009106:	e122      	b.n	800934e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8009108:	2300      	movs	r3, #0
 800910a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800910c:	e11f      	b.n	800934e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800910e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009112:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8009116:	430b      	orrs	r3, r1
 8009118:	d13c      	bne.n	8009194 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800911a:	4b1a      	ldr	r3, [pc, #104]	@ (8009184 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800911c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800911e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009122:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8009124:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009126:	2b00      	cmp	r3, #0
 8009128:	d004      	beq.n	8009134 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800912a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800912c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009130:	d012      	beq.n	8009158 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 8009132:	e023      	b.n	800917c <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009134:	4b13      	ldr	r3, [pc, #76]	@ (8009184 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800913c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009140:	d107      	bne.n	8009152 <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009142:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009146:	4618      	mov	r0, r3
 8009148:	f000 fbcc 	bl	80098e4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800914c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800914e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009150:	e0fd      	b.n	800934e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009152:	2300      	movs	r3, #0
 8009154:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009156:	e0fa      	b.n	800934e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009158:	4b0a      	ldr	r3, [pc, #40]	@ (8009184 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009160:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009164:	d107      	bne.n	8009176 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009166:	f107 0318 	add.w	r3, r7, #24
 800916a:	4618      	mov	r0, r3
 800916c:	f000 f912 	bl	8009394 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8009170:	6a3b      	ldr	r3, [r7, #32]
 8009172:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009174:	e0eb      	b.n	800934e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009176:	2300      	movs	r3, #0
 8009178:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800917a:	e0e8      	b.n	800934e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800917c:	2300      	movs	r3, #0
 800917e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009180:	e0e5      	b.n	800934e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8009182:	bf00      	nop
 8009184:	58024400 	.word	0x58024400
 8009188:	03d09000 	.word	0x03d09000
 800918c:	003d0900 	.word	0x003d0900
 8009190:	016e3600 	.word	0x016e3600
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8009194:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009198:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800919c:	430b      	orrs	r3, r1
 800919e:	f040 8085 	bne.w	80092ac <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 80091a2:	4b6d      	ldr	r3, [pc, #436]	@ (8009358 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80091a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80091a6:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 80091aa:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80091ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80091b2:	d06b      	beq.n	800928c <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 80091b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80091ba:	d874      	bhi.n	80092a6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 80091bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80091c2:	d056      	beq.n	8009272 <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 80091c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80091ca:	d86c      	bhi.n	80092a6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 80091cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091ce:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80091d2:	d03b      	beq.n	800924c <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 80091d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091d6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80091da:	d864      	bhi.n	80092a6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 80091dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091de:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80091e2:	d021      	beq.n	8009228 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 80091e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091e6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80091ea:	d85c      	bhi.n	80092a6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 80091ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d004      	beq.n	80091fc <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 80091f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091f4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80091f8:	d004      	beq.n	8009204 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 80091fa:	e054      	b.n	80092a6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80091fc:	f000 f8b4 	bl	8009368 <HAL_RCCEx_GetD3PCLK1Freq>
 8009200:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009202:	e0a4      	b.n	800934e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009204:	4b54      	ldr	r3, [pc, #336]	@ (8009358 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800920c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009210:	d107      	bne.n	8009222 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009212:	f107 0318 	add.w	r3, r7, #24
 8009216:	4618      	mov	r0, r3
 8009218:	f000 f8bc 	bl	8009394 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800921c:	69fb      	ldr	r3, [r7, #28]
 800921e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009220:	e095      	b.n	800934e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009222:	2300      	movs	r3, #0
 8009224:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009226:	e092      	b.n	800934e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009228:	4b4b      	ldr	r3, [pc, #300]	@ (8009358 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009230:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009234:	d107      	bne.n	8009246 <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009236:	f107 030c 	add.w	r3, r7, #12
 800923a:	4618      	mov	r0, r3
 800923c:	f000 f9fe 	bl	800963c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009240:	693b      	ldr	r3, [r7, #16]
 8009242:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009244:	e083      	b.n	800934e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009246:	2300      	movs	r3, #0
 8009248:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800924a:	e080      	b.n	800934e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800924c:	4b42      	ldr	r3, [pc, #264]	@ (8009358 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	f003 0304 	and.w	r3, r3, #4
 8009254:	2b04      	cmp	r3, #4
 8009256:	d109      	bne.n	800926c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009258:	4b3f      	ldr	r3, [pc, #252]	@ (8009358 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	08db      	lsrs	r3, r3, #3
 800925e:	f003 0303 	and.w	r3, r3, #3
 8009262:	4a3e      	ldr	r2, [pc, #248]	@ (800935c <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8009264:	fa22 f303 	lsr.w	r3, r2, r3
 8009268:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800926a:	e070      	b.n	800934e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800926c:	2300      	movs	r3, #0
 800926e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009270:	e06d      	b.n	800934e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8009272:	4b39      	ldr	r3, [pc, #228]	@ (8009358 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800927a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800927e:	d102      	bne.n	8009286 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 8009280:	4b37      	ldr	r3, [pc, #220]	@ (8009360 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8009282:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009284:	e063      	b.n	800934e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009286:	2300      	movs	r3, #0
 8009288:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800928a:	e060      	b.n	800934e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800928c:	4b32      	ldr	r3, [pc, #200]	@ (8009358 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009294:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009298:	d102      	bne.n	80092a0 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 800929a:	4b32      	ldr	r3, [pc, #200]	@ (8009364 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800929c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800929e:	e056      	b.n	800934e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80092a0:	2300      	movs	r3, #0
 80092a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80092a4:	e053      	b.n	800934e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 80092a6:	2300      	movs	r3, #0
 80092a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80092aa:	e050      	b.n	800934e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80092ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80092b0:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 80092b4:	430b      	orrs	r3, r1
 80092b6:	d148      	bne.n	800934a <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80092b8:	4b27      	ldr	r3, [pc, #156]	@ (8009358 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80092ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80092bc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80092c0:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80092c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092c4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80092c8:	d02a      	beq.n	8009320 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 80092ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092cc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80092d0:	d838      	bhi.n	8009344 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 80092d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d004      	beq.n	80092e2 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 80092d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092da:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80092de:	d00d      	beq.n	80092fc <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 80092e0:	e030      	b.n	8009344 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80092e2:	4b1d      	ldr	r3, [pc, #116]	@ (8009358 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80092ea:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80092ee:	d102      	bne.n	80092f6 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 80092f0:	4b1c      	ldr	r3, [pc, #112]	@ (8009364 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 80092f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80092f4:	e02b      	b.n	800934e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80092f6:	2300      	movs	r3, #0
 80092f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80092fa:	e028      	b.n	800934e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80092fc:	4b16      	ldr	r3, [pc, #88]	@ (8009358 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009304:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009308:	d107      	bne.n	800931a <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800930a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800930e:	4618      	mov	r0, r3
 8009310:	f000 fae8 	bl	80098e4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009314:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009316:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009318:	e019      	b.n	800934e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800931a:	2300      	movs	r3, #0
 800931c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800931e:	e016      	b.n	800934e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009320:	4b0d      	ldr	r3, [pc, #52]	@ (8009358 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009328:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800932c:	d107      	bne.n	800933e <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800932e:	f107 0318 	add.w	r3, r7, #24
 8009332:	4618      	mov	r0, r3
 8009334:	f000 f82e 	bl	8009394 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009338:	69fb      	ldr	r3, [r7, #28]
 800933a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800933c:	e007      	b.n	800934e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800933e:	2300      	movs	r3, #0
 8009340:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009342:	e004      	b.n	800934e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8009344:	2300      	movs	r3, #0
 8009346:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009348:	e001      	b.n	800934e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 800934a:	2300      	movs	r3, #0
 800934c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800934e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8009350:	4618      	mov	r0, r3
 8009352:	3740      	adds	r7, #64	@ 0x40
 8009354:	46bd      	mov	sp, r7
 8009356:	bd80      	pop	{r7, pc}
 8009358:	58024400 	.word	0x58024400
 800935c:	03d09000 	.word	0x03d09000
 8009360:	003d0900 	.word	0x003d0900
 8009364:	016e3600 	.word	0x016e3600

08009368 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8009368:	b580      	push	{r7, lr}
 800936a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800936c:	f7fe f92e 	bl	80075cc <HAL_RCC_GetHCLKFreq>
 8009370:	4602      	mov	r2, r0
 8009372:	4b06      	ldr	r3, [pc, #24]	@ (800938c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8009374:	6a1b      	ldr	r3, [r3, #32]
 8009376:	091b      	lsrs	r3, r3, #4
 8009378:	f003 0307 	and.w	r3, r3, #7
 800937c:	4904      	ldr	r1, [pc, #16]	@ (8009390 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800937e:	5ccb      	ldrb	r3, [r1, r3]
 8009380:	f003 031f 	and.w	r3, r3, #31
 8009384:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8009388:	4618      	mov	r0, r3
 800938a:	bd80      	pop	{r7, pc}
 800938c:	58024400 	.word	0x58024400
 8009390:	0800d328 	.word	0x0800d328

08009394 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8009394:	b480      	push	{r7}
 8009396:	b089      	sub	sp, #36	@ 0x24
 8009398:	af00      	add	r7, sp, #0
 800939a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800939c:	4ba1      	ldr	r3, [pc, #644]	@ (8009624 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800939e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093a0:	f003 0303 	and.w	r3, r3, #3
 80093a4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80093a6:	4b9f      	ldr	r3, [pc, #636]	@ (8009624 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80093a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093aa:	0b1b      	lsrs	r3, r3, #12
 80093ac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80093b0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80093b2:	4b9c      	ldr	r3, [pc, #624]	@ (8009624 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80093b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093b6:	091b      	lsrs	r3, r3, #4
 80093b8:	f003 0301 	and.w	r3, r3, #1
 80093bc:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80093be:	4b99      	ldr	r3, [pc, #612]	@ (8009624 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80093c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80093c2:	08db      	lsrs	r3, r3, #3
 80093c4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80093c8:	693a      	ldr	r2, [r7, #16]
 80093ca:	fb02 f303 	mul.w	r3, r2, r3
 80093ce:	ee07 3a90 	vmov	s15, r3
 80093d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093d6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80093da:	697b      	ldr	r3, [r7, #20]
 80093dc:	2b00      	cmp	r3, #0
 80093de:	f000 8111 	beq.w	8009604 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80093e2:	69bb      	ldr	r3, [r7, #24]
 80093e4:	2b02      	cmp	r3, #2
 80093e6:	f000 8083 	beq.w	80094f0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80093ea:	69bb      	ldr	r3, [r7, #24]
 80093ec:	2b02      	cmp	r3, #2
 80093ee:	f200 80a1 	bhi.w	8009534 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80093f2:	69bb      	ldr	r3, [r7, #24]
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d003      	beq.n	8009400 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80093f8:	69bb      	ldr	r3, [r7, #24]
 80093fa:	2b01      	cmp	r3, #1
 80093fc:	d056      	beq.n	80094ac <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80093fe:	e099      	b.n	8009534 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009400:	4b88      	ldr	r3, [pc, #544]	@ (8009624 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	f003 0320 	and.w	r3, r3, #32
 8009408:	2b00      	cmp	r3, #0
 800940a:	d02d      	beq.n	8009468 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800940c:	4b85      	ldr	r3, [pc, #532]	@ (8009624 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	08db      	lsrs	r3, r3, #3
 8009412:	f003 0303 	and.w	r3, r3, #3
 8009416:	4a84      	ldr	r2, [pc, #528]	@ (8009628 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8009418:	fa22 f303 	lsr.w	r3, r2, r3
 800941c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800941e:	68bb      	ldr	r3, [r7, #8]
 8009420:	ee07 3a90 	vmov	s15, r3
 8009424:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009428:	697b      	ldr	r3, [r7, #20]
 800942a:	ee07 3a90 	vmov	s15, r3
 800942e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009432:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009436:	4b7b      	ldr	r3, [pc, #492]	@ (8009624 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009438:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800943a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800943e:	ee07 3a90 	vmov	s15, r3
 8009442:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009446:	ed97 6a03 	vldr	s12, [r7, #12]
 800944a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800962c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800944e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009452:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009456:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800945a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800945e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009462:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009466:	e087      	b.n	8009578 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009468:	697b      	ldr	r3, [r7, #20]
 800946a:	ee07 3a90 	vmov	s15, r3
 800946e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009472:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8009630 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8009476:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800947a:	4b6a      	ldr	r3, [pc, #424]	@ (8009624 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800947c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800947e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009482:	ee07 3a90 	vmov	s15, r3
 8009486:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800948a:	ed97 6a03 	vldr	s12, [r7, #12]
 800948e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800962c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009492:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009496:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800949a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800949e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80094a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80094a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80094aa:	e065      	b.n	8009578 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80094ac:	697b      	ldr	r3, [r7, #20]
 80094ae:	ee07 3a90 	vmov	s15, r3
 80094b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094b6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8009634 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80094ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80094be:	4b59      	ldr	r3, [pc, #356]	@ (8009624 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80094c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80094c6:	ee07 3a90 	vmov	s15, r3
 80094ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80094ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80094d2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800962c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80094d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80094da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80094de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80094e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80094e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80094ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80094ee:	e043      	b.n	8009578 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80094f0:	697b      	ldr	r3, [r7, #20]
 80094f2:	ee07 3a90 	vmov	s15, r3
 80094f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094fa:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8009638 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80094fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009502:	4b48      	ldr	r3, [pc, #288]	@ (8009624 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009504:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009506:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800950a:	ee07 3a90 	vmov	s15, r3
 800950e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009512:	ed97 6a03 	vldr	s12, [r7, #12]
 8009516:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800962c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800951a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800951e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009522:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009526:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800952a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800952e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009532:	e021      	b.n	8009578 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009534:	697b      	ldr	r3, [r7, #20]
 8009536:	ee07 3a90 	vmov	s15, r3
 800953a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800953e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8009634 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009542:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009546:	4b37      	ldr	r3, [pc, #220]	@ (8009624 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009548:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800954a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800954e:	ee07 3a90 	vmov	s15, r3
 8009552:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009556:	ed97 6a03 	vldr	s12, [r7, #12]
 800955a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800962c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800955e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009562:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009566:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800956a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800956e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009572:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009576:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8009578:	4b2a      	ldr	r3, [pc, #168]	@ (8009624 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800957a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800957c:	0a5b      	lsrs	r3, r3, #9
 800957e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009582:	ee07 3a90 	vmov	s15, r3
 8009586:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800958a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800958e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009592:	edd7 6a07 	vldr	s13, [r7, #28]
 8009596:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800959a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800959e:	ee17 2a90 	vmov	r2, s15
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80095a6:	4b1f      	ldr	r3, [pc, #124]	@ (8009624 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80095a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80095aa:	0c1b      	lsrs	r3, r3, #16
 80095ac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80095b0:	ee07 3a90 	vmov	s15, r3
 80095b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095b8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80095bc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80095c0:	edd7 6a07 	vldr	s13, [r7, #28]
 80095c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80095c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80095cc:	ee17 2a90 	vmov	r2, s15
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80095d4:	4b13      	ldr	r3, [pc, #76]	@ (8009624 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80095d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80095d8:	0e1b      	lsrs	r3, r3, #24
 80095da:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80095de:	ee07 3a90 	vmov	s15, r3
 80095e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095e6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80095ea:	ee37 7a87 	vadd.f32	s14, s15, s14
 80095ee:	edd7 6a07 	vldr	s13, [r7, #28]
 80095f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80095f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80095fa:	ee17 2a90 	vmov	r2, s15
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8009602:	e008      	b.n	8009616 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	2200      	movs	r2, #0
 8009608:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	2200      	movs	r2, #0
 800960e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	2200      	movs	r2, #0
 8009614:	609a      	str	r2, [r3, #8]
}
 8009616:	bf00      	nop
 8009618:	3724      	adds	r7, #36	@ 0x24
 800961a:	46bd      	mov	sp, r7
 800961c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009620:	4770      	bx	lr
 8009622:	bf00      	nop
 8009624:	58024400 	.word	0x58024400
 8009628:	03d09000 	.word	0x03d09000
 800962c:	46000000 	.word	0x46000000
 8009630:	4c742400 	.word	0x4c742400
 8009634:	4a742400 	.word	0x4a742400
 8009638:	4bb71b00 	.word	0x4bb71b00

0800963c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800963c:	b480      	push	{r7}
 800963e:	b089      	sub	sp, #36	@ 0x24
 8009640:	af00      	add	r7, sp, #0
 8009642:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009644:	4ba1      	ldr	r3, [pc, #644]	@ (80098cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009646:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009648:	f003 0303 	and.w	r3, r3, #3
 800964c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800964e:	4b9f      	ldr	r3, [pc, #636]	@ (80098cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009650:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009652:	0d1b      	lsrs	r3, r3, #20
 8009654:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009658:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800965a:	4b9c      	ldr	r3, [pc, #624]	@ (80098cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800965c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800965e:	0a1b      	lsrs	r3, r3, #8
 8009660:	f003 0301 	and.w	r3, r3, #1
 8009664:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8009666:	4b99      	ldr	r3, [pc, #612]	@ (80098cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009668:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800966a:	08db      	lsrs	r3, r3, #3
 800966c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009670:	693a      	ldr	r2, [r7, #16]
 8009672:	fb02 f303 	mul.w	r3, r2, r3
 8009676:	ee07 3a90 	vmov	s15, r3
 800967a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800967e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8009682:	697b      	ldr	r3, [r7, #20]
 8009684:	2b00      	cmp	r3, #0
 8009686:	f000 8111 	beq.w	80098ac <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800968a:	69bb      	ldr	r3, [r7, #24]
 800968c:	2b02      	cmp	r3, #2
 800968e:	f000 8083 	beq.w	8009798 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8009692:	69bb      	ldr	r3, [r7, #24]
 8009694:	2b02      	cmp	r3, #2
 8009696:	f200 80a1 	bhi.w	80097dc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800969a:	69bb      	ldr	r3, [r7, #24]
 800969c:	2b00      	cmp	r3, #0
 800969e:	d003      	beq.n	80096a8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80096a0:	69bb      	ldr	r3, [r7, #24]
 80096a2:	2b01      	cmp	r3, #1
 80096a4:	d056      	beq.n	8009754 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80096a6:	e099      	b.n	80097dc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80096a8:	4b88      	ldr	r3, [pc, #544]	@ (80098cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	f003 0320 	and.w	r3, r3, #32
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d02d      	beq.n	8009710 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80096b4:	4b85      	ldr	r3, [pc, #532]	@ (80098cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	08db      	lsrs	r3, r3, #3
 80096ba:	f003 0303 	and.w	r3, r3, #3
 80096be:	4a84      	ldr	r2, [pc, #528]	@ (80098d0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80096c0:	fa22 f303 	lsr.w	r3, r2, r3
 80096c4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80096c6:	68bb      	ldr	r3, [r7, #8]
 80096c8:	ee07 3a90 	vmov	s15, r3
 80096cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80096d0:	697b      	ldr	r3, [r7, #20]
 80096d2:	ee07 3a90 	vmov	s15, r3
 80096d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80096de:	4b7b      	ldr	r3, [pc, #492]	@ (80098cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80096e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80096e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096e6:	ee07 3a90 	vmov	s15, r3
 80096ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80096ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80096f2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80098d4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80096f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80096fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80096fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009702:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009706:	ee67 7a27 	vmul.f32	s15, s14, s15
 800970a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800970e:	e087      	b.n	8009820 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009710:	697b      	ldr	r3, [r7, #20]
 8009712:	ee07 3a90 	vmov	s15, r3
 8009716:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800971a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80098d8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800971e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009722:	4b6a      	ldr	r3, [pc, #424]	@ (80098cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009724:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009726:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800972a:	ee07 3a90 	vmov	s15, r3
 800972e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009732:	ed97 6a03 	vldr	s12, [r7, #12]
 8009736:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80098d4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800973a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800973e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009742:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009746:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800974a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800974e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009752:	e065      	b.n	8009820 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009754:	697b      	ldr	r3, [r7, #20]
 8009756:	ee07 3a90 	vmov	s15, r3
 800975a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800975e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80098dc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009762:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009766:	4b59      	ldr	r3, [pc, #356]	@ (80098cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009768:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800976a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800976e:	ee07 3a90 	vmov	s15, r3
 8009772:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009776:	ed97 6a03 	vldr	s12, [r7, #12]
 800977a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80098d4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800977e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009782:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009786:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800978a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800978e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009792:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009796:	e043      	b.n	8009820 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009798:	697b      	ldr	r3, [r7, #20]
 800979a:	ee07 3a90 	vmov	s15, r3
 800979e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097a2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80098e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80097a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80097aa:	4b48      	ldr	r3, [pc, #288]	@ (80098cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80097ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80097ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80097b2:	ee07 3a90 	vmov	s15, r3
 80097b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80097ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80097be:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80098d4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80097c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80097c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80097ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80097ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80097d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80097d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80097da:	e021      	b.n	8009820 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80097dc:	697b      	ldr	r3, [r7, #20]
 80097de:	ee07 3a90 	vmov	s15, r3
 80097e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097e6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80098dc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80097ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80097ee:	4b37      	ldr	r3, [pc, #220]	@ (80098cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80097f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80097f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80097f6:	ee07 3a90 	vmov	s15, r3
 80097fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80097fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8009802:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80098d4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009806:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800980a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800980e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009812:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009816:	ee67 7a27 	vmul.f32	s15, s14, s15
 800981a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800981e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8009820:	4b2a      	ldr	r3, [pc, #168]	@ (80098cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009822:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009824:	0a5b      	lsrs	r3, r3, #9
 8009826:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800982a:	ee07 3a90 	vmov	s15, r3
 800982e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009832:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009836:	ee37 7a87 	vadd.f32	s14, s15, s14
 800983a:	edd7 6a07 	vldr	s13, [r7, #28]
 800983e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009842:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009846:	ee17 2a90 	vmov	r2, s15
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800984e:	4b1f      	ldr	r3, [pc, #124]	@ (80098cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009850:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009852:	0c1b      	lsrs	r3, r3, #16
 8009854:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009858:	ee07 3a90 	vmov	s15, r3
 800985c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009860:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009864:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009868:	edd7 6a07 	vldr	s13, [r7, #28]
 800986c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009870:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009874:	ee17 2a90 	vmov	r2, s15
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800987c:	4b13      	ldr	r3, [pc, #76]	@ (80098cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800987e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009880:	0e1b      	lsrs	r3, r3, #24
 8009882:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009886:	ee07 3a90 	vmov	s15, r3
 800988a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800988e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009892:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009896:	edd7 6a07 	vldr	s13, [r7, #28]
 800989a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800989e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80098a2:	ee17 2a90 	vmov	r2, s15
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80098aa:	e008      	b.n	80098be <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	2200      	movs	r2, #0
 80098b0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	2200      	movs	r2, #0
 80098b6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	2200      	movs	r2, #0
 80098bc:	609a      	str	r2, [r3, #8]
}
 80098be:	bf00      	nop
 80098c0:	3724      	adds	r7, #36	@ 0x24
 80098c2:	46bd      	mov	sp, r7
 80098c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c8:	4770      	bx	lr
 80098ca:	bf00      	nop
 80098cc:	58024400 	.word	0x58024400
 80098d0:	03d09000 	.word	0x03d09000
 80098d4:	46000000 	.word	0x46000000
 80098d8:	4c742400 	.word	0x4c742400
 80098dc:	4a742400 	.word	0x4a742400
 80098e0:	4bb71b00 	.word	0x4bb71b00

080098e4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 80098e4:	b480      	push	{r7}
 80098e6:	b089      	sub	sp, #36	@ 0x24
 80098e8:	af00      	add	r7, sp, #0
 80098ea:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80098ec:	4ba0      	ldr	r3, [pc, #640]	@ (8009b70 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80098ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098f0:	f003 0303 	and.w	r3, r3, #3
 80098f4:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 80098f6:	4b9e      	ldr	r3, [pc, #632]	@ (8009b70 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80098f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098fa:	091b      	lsrs	r3, r3, #4
 80098fc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009900:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8009902:	4b9b      	ldr	r3, [pc, #620]	@ (8009b70 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009904:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009906:	f003 0301 	and.w	r3, r3, #1
 800990a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800990c:	4b98      	ldr	r3, [pc, #608]	@ (8009b70 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800990e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009910:	08db      	lsrs	r3, r3, #3
 8009912:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009916:	693a      	ldr	r2, [r7, #16]
 8009918:	fb02 f303 	mul.w	r3, r2, r3
 800991c:	ee07 3a90 	vmov	s15, r3
 8009920:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009924:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8009928:	697b      	ldr	r3, [r7, #20]
 800992a:	2b00      	cmp	r3, #0
 800992c:	f000 8111 	beq.w	8009b52 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8009930:	69bb      	ldr	r3, [r7, #24]
 8009932:	2b02      	cmp	r3, #2
 8009934:	f000 8083 	beq.w	8009a3e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8009938:	69bb      	ldr	r3, [r7, #24]
 800993a:	2b02      	cmp	r3, #2
 800993c:	f200 80a1 	bhi.w	8009a82 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8009940:	69bb      	ldr	r3, [r7, #24]
 8009942:	2b00      	cmp	r3, #0
 8009944:	d003      	beq.n	800994e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8009946:	69bb      	ldr	r3, [r7, #24]
 8009948:	2b01      	cmp	r3, #1
 800994a:	d056      	beq.n	80099fa <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800994c:	e099      	b.n	8009a82 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800994e:	4b88      	ldr	r3, [pc, #544]	@ (8009b70 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	f003 0320 	and.w	r3, r3, #32
 8009956:	2b00      	cmp	r3, #0
 8009958:	d02d      	beq.n	80099b6 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800995a:	4b85      	ldr	r3, [pc, #532]	@ (8009b70 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	08db      	lsrs	r3, r3, #3
 8009960:	f003 0303 	and.w	r3, r3, #3
 8009964:	4a83      	ldr	r2, [pc, #524]	@ (8009b74 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8009966:	fa22 f303 	lsr.w	r3, r2, r3
 800996a:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800996c:	68bb      	ldr	r3, [r7, #8]
 800996e:	ee07 3a90 	vmov	s15, r3
 8009972:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009976:	697b      	ldr	r3, [r7, #20]
 8009978:	ee07 3a90 	vmov	s15, r3
 800997c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009980:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009984:	4b7a      	ldr	r3, [pc, #488]	@ (8009b70 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009986:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009988:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800998c:	ee07 3a90 	vmov	s15, r3
 8009990:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009994:	ed97 6a03 	vldr	s12, [r7, #12]
 8009998:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8009b78 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800999c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80099a0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80099a4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80099a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80099ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80099b0:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80099b4:	e087      	b.n	8009ac6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80099b6:	697b      	ldr	r3, [r7, #20]
 80099b8:	ee07 3a90 	vmov	s15, r3
 80099bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099c0:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8009b7c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80099c4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80099c8:	4b69      	ldr	r3, [pc, #420]	@ (8009b70 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80099ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80099cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80099d0:	ee07 3a90 	vmov	s15, r3
 80099d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80099d8:	ed97 6a03 	vldr	s12, [r7, #12]
 80099dc:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8009b78 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80099e0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80099e4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80099e8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80099ec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80099f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80099f4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80099f8:	e065      	b.n	8009ac6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80099fa:	697b      	ldr	r3, [r7, #20]
 80099fc:	ee07 3a90 	vmov	s15, r3
 8009a00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a04:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8009b80 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8009a08:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009a0c:	4b58      	ldr	r3, [pc, #352]	@ (8009b70 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009a0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009a10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a14:	ee07 3a90 	vmov	s15, r3
 8009a18:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a1c:	ed97 6a03 	vldr	s12, [r7, #12]
 8009a20:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8009b78 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009a24:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a28:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a2c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009a30:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a38:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009a3c:	e043      	b.n	8009ac6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009a3e:	697b      	ldr	r3, [r7, #20]
 8009a40:	ee07 3a90 	vmov	s15, r3
 8009a44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a48:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8009b84 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8009a4c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009a50:	4b47      	ldr	r3, [pc, #284]	@ (8009b70 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009a52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009a54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a58:	ee07 3a90 	vmov	s15, r3
 8009a5c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a60:	ed97 6a03 	vldr	s12, [r7, #12]
 8009a64:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8009b78 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009a68:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a6c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a70:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009a74:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a7c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009a80:	e021      	b.n	8009ac6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009a82:	697b      	ldr	r3, [r7, #20]
 8009a84:	ee07 3a90 	vmov	s15, r3
 8009a88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a8c:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8009b7c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009a90:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009a94:	4b36      	ldr	r3, [pc, #216]	@ (8009b70 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009a96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009a98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a9c:	ee07 3a90 	vmov	s15, r3
 8009aa0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009aa4:	ed97 6a03 	vldr	s12, [r7, #12]
 8009aa8:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8009b78 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009aac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009ab0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009ab4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009ab8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009abc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ac0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009ac4:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8009ac6:	4b2a      	ldr	r3, [pc, #168]	@ (8009b70 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009ac8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009aca:	0a5b      	lsrs	r3, r3, #9
 8009acc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009ad0:	ee07 3a90 	vmov	s15, r3
 8009ad4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ad8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009adc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009ae0:	edd7 6a07 	vldr	s13, [r7, #28]
 8009ae4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009ae8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009aec:	ee17 2a90 	vmov	r2, s15
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8009af4:	4b1e      	ldr	r3, [pc, #120]	@ (8009b70 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009af6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009af8:	0c1b      	lsrs	r3, r3, #16
 8009afa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009afe:	ee07 3a90 	vmov	s15, r3
 8009b02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b06:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009b0a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009b0e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009b12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009b16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009b1a:	ee17 2a90 	vmov	r2, s15
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8009b22:	4b13      	ldr	r3, [pc, #76]	@ (8009b70 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009b24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b26:	0e1b      	lsrs	r3, r3, #24
 8009b28:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009b2c:	ee07 3a90 	vmov	s15, r3
 8009b30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b34:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009b38:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009b3c:	edd7 6a07 	vldr	s13, [r7, #28]
 8009b40:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009b44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009b48:	ee17 2a90 	vmov	r2, s15
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8009b50:	e008      	b.n	8009b64 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	2200      	movs	r2, #0
 8009b56:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	2200      	movs	r2, #0
 8009b5c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	2200      	movs	r2, #0
 8009b62:	609a      	str	r2, [r3, #8]
}
 8009b64:	bf00      	nop
 8009b66:	3724      	adds	r7, #36	@ 0x24
 8009b68:	46bd      	mov	sp, r7
 8009b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b6e:	4770      	bx	lr
 8009b70:	58024400 	.word	0x58024400
 8009b74:	03d09000 	.word	0x03d09000
 8009b78:	46000000 	.word	0x46000000
 8009b7c:	4c742400 	.word	0x4c742400
 8009b80:	4a742400 	.word	0x4a742400
 8009b84:	4bb71b00 	.word	0x4bb71b00

08009b88 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009b88:	b580      	push	{r7, lr}
 8009b8a:	b084      	sub	sp, #16
 8009b8c:	af00      	add	r7, sp, #0
 8009b8e:	6078      	str	r0, [r7, #4]
 8009b90:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009b92:	2300      	movs	r3, #0
 8009b94:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009b96:	4b53      	ldr	r3, [pc, #332]	@ (8009ce4 <RCCEx_PLL2_Config+0x15c>)
 8009b98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b9a:	f003 0303 	and.w	r3, r3, #3
 8009b9e:	2b03      	cmp	r3, #3
 8009ba0:	d101      	bne.n	8009ba6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8009ba2:	2301      	movs	r3, #1
 8009ba4:	e099      	b.n	8009cda <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8009ba6:	4b4f      	ldr	r3, [pc, #316]	@ (8009ce4 <RCCEx_PLL2_Config+0x15c>)
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	4a4e      	ldr	r2, [pc, #312]	@ (8009ce4 <RCCEx_PLL2_Config+0x15c>)
 8009bac:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009bb0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009bb2:	f7f8 fa29 	bl	8002008 <HAL_GetTick>
 8009bb6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009bb8:	e008      	b.n	8009bcc <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009bba:	f7f8 fa25 	bl	8002008 <HAL_GetTick>
 8009bbe:	4602      	mov	r2, r0
 8009bc0:	68bb      	ldr	r3, [r7, #8]
 8009bc2:	1ad3      	subs	r3, r2, r3
 8009bc4:	2b02      	cmp	r3, #2
 8009bc6:	d901      	bls.n	8009bcc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009bc8:	2303      	movs	r3, #3
 8009bca:	e086      	b.n	8009cda <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009bcc:	4b45      	ldr	r3, [pc, #276]	@ (8009ce4 <RCCEx_PLL2_Config+0x15c>)
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d1f0      	bne.n	8009bba <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009bd8:	4b42      	ldr	r3, [pc, #264]	@ (8009ce4 <RCCEx_PLL2_Config+0x15c>)
 8009bda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009bdc:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	031b      	lsls	r3, r3, #12
 8009be6:	493f      	ldr	r1, [pc, #252]	@ (8009ce4 <RCCEx_PLL2_Config+0x15c>)
 8009be8:	4313      	orrs	r3, r2
 8009bea:	628b      	str	r3, [r1, #40]	@ 0x28
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	685b      	ldr	r3, [r3, #4]
 8009bf0:	3b01      	subs	r3, #1
 8009bf2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	689b      	ldr	r3, [r3, #8]
 8009bfa:	3b01      	subs	r3, #1
 8009bfc:	025b      	lsls	r3, r3, #9
 8009bfe:	b29b      	uxth	r3, r3
 8009c00:	431a      	orrs	r2, r3
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	68db      	ldr	r3, [r3, #12]
 8009c06:	3b01      	subs	r3, #1
 8009c08:	041b      	lsls	r3, r3, #16
 8009c0a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8009c0e:	431a      	orrs	r2, r3
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	691b      	ldr	r3, [r3, #16]
 8009c14:	3b01      	subs	r3, #1
 8009c16:	061b      	lsls	r3, r3, #24
 8009c18:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009c1c:	4931      	ldr	r1, [pc, #196]	@ (8009ce4 <RCCEx_PLL2_Config+0x15c>)
 8009c1e:	4313      	orrs	r3, r2
 8009c20:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8009c22:	4b30      	ldr	r3, [pc, #192]	@ (8009ce4 <RCCEx_PLL2_Config+0x15c>)
 8009c24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c26:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	695b      	ldr	r3, [r3, #20]
 8009c2e:	492d      	ldr	r1, [pc, #180]	@ (8009ce4 <RCCEx_PLL2_Config+0x15c>)
 8009c30:	4313      	orrs	r3, r2
 8009c32:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009c34:	4b2b      	ldr	r3, [pc, #172]	@ (8009ce4 <RCCEx_PLL2_Config+0x15c>)
 8009c36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c38:	f023 0220 	bic.w	r2, r3, #32
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	699b      	ldr	r3, [r3, #24]
 8009c40:	4928      	ldr	r1, [pc, #160]	@ (8009ce4 <RCCEx_PLL2_Config+0x15c>)
 8009c42:	4313      	orrs	r3, r2
 8009c44:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8009c46:	4b27      	ldr	r3, [pc, #156]	@ (8009ce4 <RCCEx_PLL2_Config+0x15c>)
 8009c48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c4a:	4a26      	ldr	r2, [pc, #152]	@ (8009ce4 <RCCEx_PLL2_Config+0x15c>)
 8009c4c:	f023 0310 	bic.w	r3, r3, #16
 8009c50:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009c52:	4b24      	ldr	r3, [pc, #144]	@ (8009ce4 <RCCEx_PLL2_Config+0x15c>)
 8009c54:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009c56:	4b24      	ldr	r3, [pc, #144]	@ (8009ce8 <RCCEx_PLL2_Config+0x160>)
 8009c58:	4013      	ands	r3, r2
 8009c5a:	687a      	ldr	r2, [r7, #4]
 8009c5c:	69d2      	ldr	r2, [r2, #28]
 8009c5e:	00d2      	lsls	r2, r2, #3
 8009c60:	4920      	ldr	r1, [pc, #128]	@ (8009ce4 <RCCEx_PLL2_Config+0x15c>)
 8009c62:	4313      	orrs	r3, r2
 8009c64:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8009c66:	4b1f      	ldr	r3, [pc, #124]	@ (8009ce4 <RCCEx_PLL2_Config+0x15c>)
 8009c68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c6a:	4a1e      	ldr	r2, [pc, #120]	@ (8009ce4 <RCCEx_PLL2_Config+0x15c>)
 8009c6c:	f043 0310 	orr.w	r3, r3, #16
 8009c70:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009c72:	683b      	ldr	r3, [r7, #0]
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d106      	bne.n	8009c86 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009c78:	4b1a      	ldr	r3, [pc, #104]	@ (8009ce4 <RCCEx_PLL2_Config+0x15c>)
 8009c7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c7c:	4a19      	ldr	r2, [pc, #100]	@ (8009ce4 <RCCEx_PLL2_Config+0x15c>)
 8009c7e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009c82:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009c84:	e00f      	b.n	8009ca6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8009c86:	683b      	ldr	r3, [r7, #0]
 8009c88:	2b01      	cmp	r3, #1
 8009c8a:	d106      	bne.n	8009c9a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009c8c:	4b15      	ldr	r3, [pc, #84]	@ (8009ce4 <RCCEx_PLL2_Config+0x15c>)
 8009c8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c90:	4a14      	ldr	r2, [pc, #80]	@ (8009ce4 <RCCEx_PLL2_Config+0x15c>)
 8009c92:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009c96:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009c98:	e005      	b.n	8009ca6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8009c9a:	4b12      	ldr	r3, [pc, #72]	@ (8009ce4 <RCCEx_PLL2_Config+0x15c>)
 8009c9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c9e:	4a11      	ldr	r2, [pc, #68]	@ (8009ce4 <RCCEx_PLL2_Config+0x15c>)
 8009ca0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8009ca4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8009ca6:	4b0f      	ldr	r3, [pc, #60]	@ (8009ce4 <RCCEx_PLL2_Config+0x15c>)
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	4a0e      	ldr	r2, [pc, #56]	@ (8009ce4 <RCCEx_PLL2_Config+0x15c>)
 8009cac:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009cb0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009cb2:	f7f8 f9a9 	bl	8002008 <HAL_GetTick>
 8009cb6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009cb8:	e008      	b.n	8009ccc <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009cba:	f7f8 f9a5 	bl	8002008 <HAL_GetTick>
 8009cbe:	4602      	mov	r2, r0
 8009cc0:	68bb      	ldr	r3, [r7, #8]
 8009cc2:	1ad3      	subs	r3, r2, r3
 8009cc4:	2b02      	cmp	r3, #2
 8009cc6:	d901      	bls.n	8009ccc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009cc8:	2303      	movs	r3, #3
 8009cca:	e006      	b.n	8009cda <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009ccc:	4b05      	ldr	r3, [pc, #20]	@ (8009ce4 <RCCEx_PLL2_Config+0x15c>)
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d0f0      	beq.n	8009cba <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009cd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cda:	4618      	mov	r0, r3
 8009cdc:	3710      	adds	r7, #16
 8009cde:	46bd      	mov	sp, r7
 8009ce0:	bd80      	pop	{r7, pc}
 8009ce2:	bf00      	nop
 8009ce4:	58024400 	.word	0x58024400
 8009ce8:	ffff0007 	.word	0xffff0007

08009cec <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009cec:	b580      	push	{r7, lr}
 8009cee:	b084      	sub	sp, #16
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	6078      	str	r0, [r7, #4]
 8009cf4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009cf6:	2300      	movs	r3, #0
 8009cf8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009cfa:	4b53      	ldr	r3, [pc, #332]	@ (8009e48 <RCCEx_PLL3_Config+0x15c>)
 8009cfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009cfe:	f003 0303 	and.w	r3, r3, #3
 8009d02:	2b03      	cmp	r3, #3
 8009d04:	d101      	bne.n	8009d0a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8009d06:	2301      	movs	r3, #1
 8009d08:	e099      	b.n	8009e3e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8009d0a:	4b4f      	ldr	r3, [pc, #316]	@ (8009e48 <RCCEx_PLL3_Config+0x15c>)
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	4a4e      	ldr	r2, [pc, #312]	@ (8009e48 <RCCEx_PLL3_Config+0x15c>)
 8009d10:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009d14:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009d16:	f7f8 f977 	bl	8002008 <HAL_GetTick>
 8009d1a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009d1c:	e008      	b.n	8009d30 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009d1e:	f7f8 f973 	bl	8002008 <HAL_GetTick>
 8009d22:	4602      	mov	r2, r0
 8009d24:	68bb      	ldr	r3, [r7, #8]
 8009d26:	1ad3      	subs	r3, r2, r3
 8009d28:	2b02      	cmp	r3, #2
 8009d2a:	d901      	bls.n	8009d30 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009d2c:	2303      	movs	r3, #3
 8009d2e:	e086      	b.n	8009e3e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009d30:	4b45      	ldr	r3, [pc, #276]	@ (8009e48 <RCCEx_PLL3_Config+0x15c>)
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d1f0      	bne.n	8009d1e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009d3c:	4b42      	ldr	r3, [pc, #264]	@ (8009e48 <RCCEx_PLL3_Config+0x15c>)
 8009d3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d40:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	051b      	lsls	r3, r3, #20
 8009d4a:	493f      	ldr	r1, [pc, #252]	@ (8009e48 <RCCEx_PLL3_Config+0x15c>)
 8009d4c:	4313      	orrs	r3, r2
 8009d4e:	628b      	str	r3, [r1, #40]	@ 0x28
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	685b      	ldr	r3, [r3, #4]
 8009d54:	3b01      	subs	r3, #1
 8009d56:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	689b      	ldr	r3, [r3, #8]
 8009d5e:	3b01      	subs	r3, #1
 8009d60:	025b      	lsls	r3, r3, #9
 8009d62:	b29b      	uxth	r3, r3
 8009d64:	431a      	orrs	r2, r3
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	68db      	ldr	r3, [r3, #12]
 8009d6a:	3b01      	subs	r3, #1
 8009d6c:	041b      	lsls	r3, r3, #16
 8009d6e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8009d72:	431a      	orrs	r2, r3
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	691b      	ldr	r3, [r3, #16]
 8009d78:	3b01      	subs	r3, #1
 8009d7a:	061b      	lsls	r3, r3, #24
 8009d7c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009d80:	4931      	ldr	r1, [pc, #196]	@ (8009e48 <RCCEx_PLL3_Config+0x15c>)
 8009d82:	4313      	orrs	r3, r2
 8009d84:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009d86:	4b30      	ldr	r3, [pc, #192]	@ (8009e48 <RCCEx_PLL3_Config+0x15c>)
 8009d88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d8a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	695b      	ldr	r3, [r3, #20]
 8009d92:	492d      	ldr	r1, [pc, #180]	@ (8009e48 <RCCEx_PLL3_Config+0x15c>)
 8009d94:	4313      	orrs	r3, r2
 8009d96:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009d98:	4b2b      	ldr	r3, [pc, #172]	@ (8009e48 <RCCEx_PLL3_Config+0x15c>)
 8009d9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d9c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	699b      	ldr	r3, [r3, #24]
 8009da4:	4928      	ldr	r1, [pc, #160]	@ (8009e48 <RCCEx_PLL3_Config+0x15c>)
 8009da6:	4313      	orrs	r3, r2
 8009da8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009daa:	4b27      	ldr	r3, [pc, #156]	@ (8009e48 <RCCEx_PLL3_Config+0x15c>)
 8009dac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009dae:	4a26      	ldr	r2, [pc, #152]	@ (8009e48 <RCCEx_PLL3_Config+0x15c>)
 8009db0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009db4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009db6:	4b24      	ldr	r3, [pc, #144]	@ (8009e48 <RCCEx_PLL3_Config+0x15c>)
 8009db8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009dba:	4b24      	ldr	r3, [pc, #144]	@ (8009e4c <RCCEx_PLL3_Config+0x160>)
 8009dbc:	4013      	ands	r3, r2
 8009dbe:	687a      	ldr	r2, [r7, #4]
 8009dc0:	69d2      	ldr	r2, [r2, #28]
 8009dc2:	00d2      	lsls	r2, r2, #3
 8009dc4:	4920      	ldr	r1, [pc, #128]	@ (8009e48 <RCCEx_PLL3_Config+0x15c>)
 8009dc6:	4313      	orrs	r3, r2
 8009dc8:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009dca:	4b1f      	ldr	r3, [pc, #124]	@ (8009e48 <RCCEx_PLL3_Config+0x15c>)
 8009dcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009dce:	4a1e      	ldr	r2, [pc, #120]	@ (8009e48 <RCCEx_PLL3_Config+0x15c>)
 8009dd0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009dd4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009dd6:	683b      	ldr	r3, [r7, #0]
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d106      	bne.n	8009dea <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009ddc:	4b1a      	ldr	r3, [pc, #104]	@ (8009e48 <RCCEx_PLL3_Config+0x15c>)
 8009dde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009de0:	4a19      	ldr	r2, [pc, #100]	@ (8009e48 <RCCEx_PLL3_Config+0x15c>)
 8009de2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8009de6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009de8:	e00f      	b.n	8009e0a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8009dea:	683b      	ldr	r3, [r7, #0]
 8009dec:	2b01      	cmp	r3, #1
 8009dee:	d106      	bne.n	8009dfe <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009df0:	4b15      	ldr	r3, [pc, #84]	@ (8009e48 <RCCEx_PLL3_Config+0x15c>)
 8009df2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009df4:	4a14      	ldr	r2, [pc, #80]	@ (8009e48 <RCCEx_PLL3_Config+0x15c>)
 8009df6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009dfa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009dfc:	e005      	b.n	8009e0a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009dfe:	4b12      	ldr	r3, [pc, #72]	@ (8009e48 <RCCEx_PLL3_Config+0x15c>)
 8009e00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e02:	4a11      	ldr	r2, [pc, #68]	@ (8009e48 <RCCEx_PLL3_Config+0x15c>)
 8009e04:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009e08:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009e0a:	4b0f      	ldr	r3, [pc, #60]	@ (8009e48 <RCCEx_PLL3_Config+0x15c>)
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	4a0e      	ldr	r2, [pc, #56]	@ (8009e48 <RCCEx_PLL3_Config+0x15c>)
 8009e10:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009e14:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009e16:	f7f8 f8f7 	bl	8002008 <HAL_GetTick>
 8009e1a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009e1c:	e008      	b.n	8009e30 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009e1e:	f7f8 f8f3 	bl	8002008 <HAL_GetTick>
 8009e22:	4602      	mov	r2, r0
 8009e24:	68bb      	ldr	r3, [r7, #8]
 8009e26:	1ad3      	subs	r3, r2, r3
 8009e28:	2b02      	cmp	r3, #2
 8009e2a:	d901      	bls.n	8009e30 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009e2c:	2303      	movs	r3, #3
 8009e2e:	e006      	b.n	8009e3e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009e30:	4b05      	ldr	r3, [pc, #20]	@ (8009e48 <RCCEx_PLL3_Config+0x15c>)
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d0f0      	beq.n	8009e1e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009e3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e3e:	4618      	mov	r0, r3
 8009e40:	3710      	adds	r7, #16
 8009e42:	46bd      	mov	sp, r7
 8009e44:	bd80      	pop	{r7, pc}
 8009e46:	bf00      	nop
 8009e48:	58024400 	.word	0x58024400
 8009e4c:	ffff0007 	.word	0xffff0007

08009e50 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009e50:	b580      	push	{r7, lr}
 8009e52:	b084      	sub	sp, #16
 8009e54:	af00      	add	r7, sp, #0
 8009e56:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d101      	bne.n	8009e62 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009e5e:	2301      	movs	r3, #1
 8009e60:	e10f      	b.n	800a082 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	2200      	movs	r2, #0
 8009e66:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	4a87      	ldr	r2, [pc, #540]	@ (800a08c <HAL_SPI_Init+0x23c>)
 8009e6e:	4293      	cmp	r3, r2
 8009e70:	d00f      	beq.n	8009e92 <HAL_SPI_Init+0x42>
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	4a86      	ldr	r2, [pc, #536]	@ (800a090 <HAL_SPI_Init+0x240>)
 8009e78:	4293      	cmp	r3, r2
 8009e7a:	d00a      	beq.n	8009e92 <HAL_SPI_Init+0x42>
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	4a84      	ldr	r2, [pc, #528]	@ (800a094 <HAL_SPI_Init+0x244>)
 8009e82:	4293      	cmp	r3, r2
 8009e84:	d005      	beq.n	8009e92 <HAL_SPI_Init+0x42>
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	68db      	ldr	r3, [r3, #12]
 8009e8a:	2b0f      	cmp	r3, #15
 8009e8c:	d901      	bls.n	8009e92 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8009e8e:	2301      	movs	r3, #1
 8009e90:	e0f7      	b.n	800a082 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8009e92:	6878      	ldr	r0, [r7, #4]
 8009e94:	f000 f900 	bl	800a098 <SPI_GetPacketSize>
 8009e98:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	4a7b      	ldr	r2, [pc, #492]	@ (800a08c <HAL_SPI_Init+0x23c>)
 8009ea0:	4293      	cmp	r3, r2
 8009ea2:	d00c      	beq.n	8009ebe <HAL_SPI_Init+0x6e>
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	4a79      	ldr	r2, [pc, #484]	@ (800a090 <HAL_SPI_Init+0x240>)
 8009eaa:	4293      	cmp	r3, r2
 8009eac:	d007      	beq.n	8009ebe <HAL_SPI_Init+0x6e>
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	4a78      	ldr	r2, [pc, #480]	@ (800a094 <HAL_SPI_Init+0x244>)
 8009eb4:	4293      	cmp	r3, r2
 8009eb6:	d002      	beq.n	8009ebe <HAL_SPI_Init+0x6e>
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	2b08      	cmp	r3, #8
 8009ebc:	d811      	bhi.n	8009ee2 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8009ec2:	4a72      	ldr	r2, [pc, #456]	@ (800a08c <HAL_SPI_Init+0x23c>)
 8009ec4:	4293      	cmp	r3, r2
 8009ec6:	d009      	beq.n	8009edc <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	4a70      	ldr	r2, [pc, #448]	@ (800a090 <HAL_SPI_Init+0x240>)
 8009ece:	4293      	cmp	r3, r2
 8009ed0:	d004      	beq.n	8009edc <HAL_SPI_Init+0x8c>
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	4a6f      	ldr	r2, [pc, #444]	@ (800a094 <HAL_SPI_Init+0x244>)
 8009ed8:	4293      	cmp	r3, r2
 8009eda:	d104      	bne.n	8009ee6 <HAL_SPI_Init+0x96>
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	2b10      	cmp	r3, #16
 8009ee0:	d901      	bls.n	8009ee6 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8009ee2:	2301      	movs	r3, #1
 8009ee4:	e0cd      	b.n	800a082 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8009eec:	b2db      	uxtb	r3, r3
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d106      	bne.n	8009f00 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	2200      	movs	r2, #0
 8009ef6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009efa:	6878      	ldr	r0, [r7, #4]
 8009efc:	f7f7 fc94 	bl	8001828 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	2202      	movs	r2, #2
 8009f04:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	681a      	ldr	r2, [r3, #0]
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	f022 0201 	bic.w	r2, r2, #1
 8009f16:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	689b      	ldr	r3, [r3, #8]
 8009f1e:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8009f22:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	699b      	ldr	r3, [r3, #24]
 8009f28:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009f2c:	d119      	bne.n	8009f62 <HAL_SPI_Init+0x112>
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	685b      	ldr	r3, [r3, #4]
 8009f32:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009f36:	d103      	bne.n	8009f40 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d008      	beq.n	8009f52 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d10c      	bne.n	8009f62 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8009f4c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009f50:	d107      	bne.n	8009f62 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	681a      	ldr	r2, [r3, #0]
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8009f60:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	685b      	ldr	r3, [r3, #4]
 8009f66:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d00f      	beq.n	8009f8e <HAL_SPI_Init+0x13e>
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	68db      	ldr	r3, [r3, #12]
 8009f72:	2b06      	cmp	r3, #6
 8009f74:	d90b      	bls.n	8009f8e <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	430a      	orrs	r2, r1
 8009f8a:	601a      	str	r2, [r3, #0]
 8009f8c:	e007      	b.n	8009f9e <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	681a      	ldr	r2, [r3, #0]
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009f9c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	69da      	ldr	r2, [r3, #28]
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009fa6:	431a      	orrs	r2, r3
 8009fa8:	68bb      	ldr	r3, [r7, #8]
 8009faa:	431a      	orrs	r2, r3
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009fb0:	ea42 0103 	orr.w	r1, r2, r3
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	68da      	ldr	r2, [r3, #12]
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	430a      	orrs	r2, r1
 8009fbe:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009fc8:	431a      	orrs	r2, r3
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009fce:	431a      	orrs	r2, r3
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	699b      	ldr	r3, [r3, #24]
 8009fd4:	431a      	orrs	r2, r3
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	691b      	ldr	r3, [r3, #16]
 8009fda:	431a      	orrs	r2, r3
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	695b      	ldr	r3, [r3, #20]
 8009fe0:	431a      	orrs	r2, r3
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	6a1b      	ldr	r3, [r3, #32]
 8009fe6:	431a      	orrs	r2, r3
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	685b      	ldr	r3, [r3, #4]
 8009fec:	431a      	orrs	r2, r3
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009ff2:	431a      	orrs	r2, r3
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	689b      	ldr	r3, [r3, #8]
 8009ff8:	431a      	orrs	r2, r3
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009ffe:	ea42 0103 	orr.w	r1, r2, r3
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	430a      	orrs	r2, r1
 800a00c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	685b      	ldr	r3, [r3, #4]
 800a012:	2b00      	cmp	r3, #0
 800a014:	d113      	bne.n	800a03e <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	689b      	ldr	r3, [r3, #8]
 800a01c:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a028:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	689b      	ldr	r3, [r3, #8]
 800a030:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800a03c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	f022 0201 	bic.w	r2, r2, #1
 800a04c:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	685b      	ldr	r3, [r3, #4]
 800a052:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a056:	2b00      	cmp	r3, #0
 800a058:	d00a      	beq.n	800a070 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	68db      	ldr	r3, [r3, #12]
 800a060:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	430a      	orrs	r2, r1
 800a06e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	2200      	movs	r2, #0
 800a074:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	2201      	movs	r2, #1
 800a07c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800a080:	2300      	movs	r3, #0
}
 800a082:	4618      	mov	r0, r3
 800a084:	3710      	adds	r7, #16
 800a086:	46bd      	mov	sp, r7
 800a088:	bd80      	pop	{r7, pc}
 800a08a:	bf00      	nop
 800a08c:	40013000 	.word	0x40013000
 800a090:	40003800 	.word	0x40003800
 800a094:	40003c00 	.word	0x40003c00

0800a098 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800a098:	b480      	push	{r7}
 800a09a:	b085      	sub	sp, #20
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a0a4:	095b      	lsrs	r3, r3, #5
 800a0a6:	3301      	adds	r3, #1
 800a0a8:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	68db      	ldr	r3, [r3, #12]
 800a0ae:	3301      	adds	r3, #1
 800a0b0:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800a0b2:	68bb      	ldr	r3, [r7, #8]
 800a0b4:	3307      	adds	r3, #7
 800a0b6:	08db      	lsrs	r3, r3, #3
 800a0b8:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800a0ba:	68bb      	ldr	r3, [r7, #8]
 800a0bc:	68fa      	ldr	r2, [r7, #12]
 800a0be:	fb02 f303 	mul.w	r3, r2, r3
}
 800a0c2:	4618      	mov	r0, r3
 800a0c4:	3714      	adds	r7, #20
 800a0c6:	46bd      	mov	sp, r7
 800a0c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0cc:	4770      	bx	lr

0800a0ce <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a0ce:	b580      	push	{r7, lr}
 800a0d0:	b082      	sub	sp, #8
 800a0d2:	af00      	add	r7, sp, #0
 800a0d4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d101      	bne.n	800a0e0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a0dc:	2301      	movs	r3, #1
 800a0de:	e049      	b.n	800a174 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a0e6:	b2db      	uxtb	r3, r3
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d106      	bne.n	800a0fa <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	2200      	movs	r2, #0
 800a0f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a0f4:	6878      	ldr	r0, [r7, #4]
 800a0f6:	f7f7 fc9f 	bl	8001a38 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	2202      	movs	r2, #2
 800a0fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	681a      	ldr	r2, [r3, #0]
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	3304      	adds	r3, #4
 800a10a:	4619      	mov	r1, r3
 800a10c:	4610      	mov	r0, r2
 800a10e:	f000 fc3d 	bl	800a98c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	2201      	movs	r2, #1
 800a116:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	2201      	movs	r2, #1
 800a11e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	2201      	movs	r2, #1
 800a126:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	2201      	movs	r2, #1
 800a12e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	2201      	movs	r2, #1
 800a136:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	2201      	movs	r2, #1
 800a13e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	2201      	movs	r2, #1
 800a146:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	2201      	movs	r2, #1
 800a14e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	2201      	movs	r2, #1
 800a156:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	2201      	movs	r2, #1
 800a15e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	2201      	movs	r2, #1
 800a166:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	2201      	movs	r2, #1
 800a16e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a172:	2300      	movs	r3, #0
}
 800a174:	4618      	mov	r0, r3
 800a176:	3708      	adds	r7, #8
 800a178:	46bd      	mov	sp, r7
 800a17a:	bd80      	pop	{r7, pc}

0800a17c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800a17c:	b480      	push	{r7}
 800a17e:	b085      	sub	sp, #20
 800a180:	af00      	add	r7, sp, #0
 800a182:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a18a:	b2db      	uxtb	r3, r3
 800a18c:	2b01      	cmp	r3, #1
 800a18e:	d001      	beq.n	800a194 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800a190:	2301      	movs	r3, #1
 800a192:	e056      	b.n	800a242 <HAL_TIM_Base_Start+0xc6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	2202      	movs	r2, #2
 800a198:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	4a2b      	ldr	r2, [pc, #172]	@ (800a250 <HAL_TIM_Base_Start+0xd4>)
 800a1a2:	4293      	cmp	r3, r2
 800a1a4:	d02c      	beq.n	800a200 <HAL_TIM_Base_Start+0x84>
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a1ae:	d027      	beq.n	800a200 <HAL_TIM_Base_Start+0x84>
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	4a27      	ldr	r2, [pc, #156]	@ (800a254 <HAL_TIM_Base_Start+0xd8>)
 800a1b6:	4293      	cmp	r3, r2
 800a1b8:	d022      	beq.n	800a200 <HAL_TIM_Base_Start+0x84>
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	4a26      	ldr	r2, [pc, #152]	@ (800a258 <HAL_TIM_Base_Start+0xdc>)
 800a1c0:	4293      	cmp	r3, r2
 800a1c2:	d01d      	beq.n	800a200 <HAL_TIM_Base_Start+0x84>
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	4a24      	ldr	r2, [pc, #144]	@ (800a25c <HAL_TIM_Base_Start+0xe0>)
 800a1ca:	4293      	cmp	r3, r2
 800a1cc:	d018      	beq.n	800a200 <HAL_TIM_Base_Start+0x84>
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	4a23      	ldr	r2, [pc, #140]	@ (800a260 <HAL_TIM_Base_Start+0xe4>)
 800a1d4:	4293      	cmp	r3, r2
 800a1d6:	d013      	beq.n	800a200 <HAL_TIM_Base_Start+0x84>
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	4a21      	ldr	r2, [pc, #132]	@ (800a264 <HAL_TIM_Base_Start+0xe8>)
 800a1de:	4293      	cmp	r3, r2
 800a1e0:	d00e      	beq.n	800a200 <HAL_TIM_Base_Start+0x84>
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	4a20      	ldr	r2, [pc, #128]	@ (800a268 <HAL_TIM_Base_Start+0xec>)
 800a1e8:	4293      	cmp	r3, r2
 800a1ea:	d009      	beq.n	800a200 <HAL_TIM_Base_Start+0x84>
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	4a1e      	ldr	r2, [pc, #120]	@ (800a26c <HAL_TIM_Base_Start+0xf0>)
 800a1f2:	4293      	cmp	r3, r2
 800a1f4:	d004      	beq.n	800a200 <HAL_TIM_Base_Start+0x84>
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	4a1d      	ldr	r2, [pc, #116]	@ (800a270 <HAL_TIM_Base_Start+0xf4>)
 800a1fc:	4293      	cmp	r3, r2
 800a1fe:	d115      	bne.n	800a22c <HAL_TIM_Base_Start+0xb0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	689a      	ldr	r2, [r3, #8]
 800a206:	4b1b      	ldr	r3, [pc, #108]	@ (800a274 <HAL_TIM_Base_Start+0xf8>)
 800a208:	4013      	ands	r3, r2
 800a20a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	2b06      	cmp	r3, #6
 800a210:	d015      	beq.n	800a23e <HAL_TIM_Base_Start+0xc2>
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a218:	d011      	beq.n	800a23e <HAL_TIM_Base_Start+0xc2>
    {
      __HAL_TIM_ENABLE(htim);
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	681a      	ldr	r2, [r3, #0]
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	f042 0201 	orr.w	r2, r2, #1
 800a228:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a22a:	e008      	b.n	800a23e <HAL_TIM_Base_Start+0xc2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	681a      	ldr	r2, [r3, #0]
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	f042 0201 	orr.w	r2, r2, #1
 800a23a:	601a      	str	r2, [r3, #0]
 800a23c:	e000      	b.n	800a240 <HAL_TIM_Base_Start+0xc4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a23e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a240:	2300      	movs	r3, #0
}
 800a242:	4618      	mov	r0, r3
 800a244:	3714      	adds	r7, #20
 800a246:	46bd      	mov	sp, r7
 800a248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a24c:	4770      	bx	lr
 800a24e:	bf00      	nop
 800a250:	40010000 	.word	0x40010000
 800a254:	40000400 	.word	0x40000400
 800a258:	40000800 	.word	0x40000800
 800a25c:	40000c00 	.word	0x40000c00
 800a260:	40010400 	.word	0x40010400
 800a264:	40001800 	.word	0x40001800
 800a268:	40014000 	.word	0x40014000
 800a26c:	4000e000 	.word	0x4000e000
 800a270:	4000e400 	.word	0x4000e400
 800a274:	00010007 	.word	0x00010007

0800a278 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a278:	b580      	push	{r7, lr}
 800a27a:	b082      	sub	sp, #8
 800a27c:	af00      	add	r7, sp, #0
 800a27e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	2b00      	cmp	r3, #0
 800a284:	d101      	bne.n	800a28a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a286:	2301      	movs	r3, #1
 800a288:	e049      	b.n	800a31e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a290:	b2db      	uxtb	r3, r3
 800a292:	2b00      	cmp	r3, #0
 800a294:	d106      	bne.n	800a2a4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	2200      	movs	r2, #0
 800a29a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a29e:	6878      	ldr	r0, [r7, #4]
 800a2a0:	f000 f841 	bl	800a326 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	2202      	movs	r2, #2
 800a2a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	681a      	ldr	r2, [r3, #0]
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	3304      	adds	r3, #4
 800a2b4:	4619      	mov	r1, r3
 800a2b6:	4610      	mov	r0, r2
 800a2b8:	f000 fb68 	bl	800a98c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	2201      	movs	r2, #1
 800a2c0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	2201      	movs	r2, #1
 800a2c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	2201      	movs	r2, #1
 800a2d0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	2201      	movs	r2, #1
 800a2d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	2201      	movs	r2, #1
 800a2e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	2201      	movs	r2, #1
 800a2e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	2201      	movs	r2, #1
 800a2f0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	2201      	movs	r2, #1
 800a2f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	2201      	movs	r2, #1
 800a300:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	2201      	movs	r2, #1
 800a308:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	2201      	movs	r2, #1
 800a310:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	2201      	movs	r2, #1
 800a318:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a31c:	2300      	movs	r3, #0
}
 800a31e:	4618      	mov	r0, r3
 800a320:	3708      	adds	r7, #8
 800a322:	46bd      	mov	sp, r7
 800a324:	bd80      	pop	{r7, pc}

0800a326 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a326:	b480      	push	{r7}
 800a328:	b083      	sub	sp, #12
 800a32a:	af00      	add	r7, sp, #0
 800a32c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a32e:	bf00      	nop
 800a330:	370c      	adds	r7, #12
 800a332:	46bd      	mov	sp, r7
 800a334:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a338:	4770      	bx	lr
	...

0800a33c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a33c:	b580      	push	{r7, lr}
 800a33e:	b084      	sub	sp, #16
 800a340:	af00      	add	r7, sp, #0
 800a342:	6078      	str	r0, [r7, #4]
 800a344:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a346:	683b      	ldr	r3, [r7, #0]
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d109      	bne.n	800a360 <HAL_TIM_PWM_Start+0x24>
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a352:	b2db      	uxtb	r3, r3
 800a354:	2b01      	cmp	r3, #1
 800a356:	bf14      	ite	ne
 800a358:	2301      	movne	r3, #1
 800a35a:	2300      	moveq	r3, #0
 800a35c:	b2db      	uxtb	r3, r3
 800a35e:	e03c      	b.n	800a3da <HAL_TIM_PWM_Start+0x9e>
 800a360:	683b      	ldr	r3, [r7, #0]
 800a362:	2b04      	cmp	r3, #4
 800a364:	d109      	bne.n	800a37a <HAL_TIM_PWM_Start+0x3e>
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800a36c:	b2db      	uxtb	r3, r3
 800a36e:	2b01      	cmp	r3, #1
 800a370:	bf14      	ite	ne
 800a372:	2301      	movne	r3, #1
 800a374:	2300      	moveq	r3, #0
 800a376:	b2db      	uxtb	r3, r3
 800a378:	e02f      	b.n	800a3da <HAL_TIM_PWM_Start+0x9e>
 800a37a:	683b      	ldr	r3, [r7, #0]
 800a37c:	2b08      	cmp	r3, #8
 800a37e:	d109      	bne.n	800a394 <HAL_TIM_PWM_Start+0x58>
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a386:	b2db      	uxtb	r3, r3
 800a388:	2b01      	cmp	r3, #1
 800a38a:	bf14      	ite	ne
 800a38c:	2301      	movne	r3, #1
 800a38e:	2300      	moveq	r3, #0
 800a390:	b2db      	uxtb	r3, r3
 800a392:	e022      	b.n	800a3da <HAL_TIM_PWM_Start+0x9e>
 800a394:	683b      	ldr	r3, [r7, #0]
 800a396:	2b0c      	cmp	r3, #12
 800a398:	d109      	bne.n	800a3ae <HAL_TIM_PWM_Start+0x72>
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a3a0:	b2db      	uxtb	r3, r3
 800a3a2:	2b01      	cmp	r3, #1
 800a3a4:	bf14      	ite	ne
 800a3a6:	2301      	movne	r3, #1
 800a3a8:	2300      	moveq	r3, #0
 800a3aa:	b2db      	uxtb	r3, r3
 800a3ac:	e015      	b.n	800a3da <HAL_TIM_PWM_Start+0x9e>
 800a3ae:	683b      	ldr	r3, [r7, #0]
 800a3b0:	2b10      	cmp	r3, #16
 800a3b2:	d109      	bne.n	800a3c8 <HAL_TIM_PWM_Start+0x8c>
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a3ba:	b2db      	uxtb	r3, r3
 800a3bc:	2b01      	cmp	r3, #1
 800a3be:	bf14      	ite	ne
 800a3c0:	2301      	movne	r3, #1
 800a3c2:	2300      	moveq	r3, #0
 800a3c4:	b2db      	uxtb	r3, r3
 800a3c6:	e008      	b.n	800a3da <HAL_TIM_PWM_Start+0x9e>
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800a3ce:	b2db      	uxtb	r3, r3
 800a3d0:	2b01      	cmp	r3, #1
 800a3d2:	bf14      	ite	ne
 800a3d4:	2301      	movne	r3, #1
 800a3d6:	2300      	moveq	r3, #0
 800a3d8:	b2db      	uxtb	r3, r3
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d001      	beq.n	800a3e2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800a3de:	2301      	movs	r3, #1
 800a3e0:	e0ab      	b.n	800a53a <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a3e2:	683b      	ldr	r3, [r7, #0]
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d104      	bne.n	800a3f2 <HAL_TIM_PWM_Start+0xb6>
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	2202      	movs	r2, #2
 800a3ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a3f0:	e023      	b.n	800a43a <HAL_TIM_PWM_Start+0xfe>
 800a3f2:	683b      	ldr	r3, [r7, #0]
 800a3f4:	2b04      	cmp	r3, #4
 800a3f6:	d104      	bne.n	800a402 <HAL_TIM_PWM_Start+0xc6>
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	2202      	movs	r2, #2
 800a3fc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a400:	e01b      	b.n	800a43a <HAL_TIM_PWM_Start+0xfe>
 800a402:	683b      	ldr	r3, [r7, #0]
 800a404:	2b08      	cmp	r3, #8
 800a406:	d104      	bne.n	800a412 <HAL_TIM_PWM_Start+0xd6>
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	2202      	movs	r2, #2
 800a40c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a410:	e013      	b.n	800a43a <HAL_TIM_PWM_Start+0xfe>
 800a412:	683b      	ldr	r3, [r7, #0]
 800a414:	2b0c      	cmp	r3, #12
 800a416:	d104      	bne.n	800a422 <HAL_TIM_PWM_Start+0xe6>
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	2202      	movs	r2, #2
 800a41c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a420:	e00b      	b.n	800a43a <HAL_TIM_PWM_Start+0xfe>
 800a422:	683b      	ldr	r3, [r7, #0]
 800a424:	2b10      	cmp	r3, #16
 800a426:	d104      	bne.n	800a432 <HAL_TIM_PWM_Start+0xf6>
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	2202      	movs	r2, #2
 800a42c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a430:	e003      	b.n	800a43a <HAL_TIM_PWM_Start+0xfe>
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	2202      	movs	r2, #2
 800a436:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	2201      	movs	r2, #1
 800a440:	6839      	ldr	r1, [r7, #0]
 800a442:	4618      	mov	r0, r3
 800a444:	f000 fec8 	bl	800b1d8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	4a3d      	ldr	r2, [pc, #244]	@ (800a544 <HAL_TIM_PWM_Start+0x208>)
 800a44e:	4293      	cmp	r3, r2
 800a450:	d013      	beq.n	800a47a <HAL_TIM_PWM_Start+0x13e>
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	4a3c      	ldr	r2, [pc, #240]	@ (800a548 <HAL_TIM_PWM_Start+0x20c>)
 800a458:	4293      	cmp	r3, r2
 800a45a:	d00e      	beq.n	800a47a <HAL_TIM_PWM_Start+0x13e>
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	4a3a      	ldr	r2, [pc, #232]	@ (800a54c <HAL_TIM_PWM_Start+0x210>)
 800a462:	4293      	cmp	r3, r2
 800a464:	d009      	beq.n	800a47a <HAL_TIM_PWM_Start+0x13e>
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	4a39      	ldr	r2, [pc, #228]	@ (800a550 <HAL_TIM_PWM_Start+0x214>)
 800a46c:	4293      	cmp	r3, r2
 800a46e:	d004      	beq.n	800a47a <HAL_TIM_PWM_Start+0x13e>
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	4a37      	ldr	r2, [pc, #220]	@ (800a554 <HAL_TIM_PWM_Start+0x218>)
 800a476:	4293      	cmp	r3, r2
 800a478:	d101      	bne.n	800a47e <HAL_TIM_PWM_Start+0x142>
 800a47a:	2301      	movs	r3, #1
 800a47c:	e000      	b.n	800a480 <HAL_TIM_PWM_Start+0x144>
 800a47e:	2300      	movs	r3, #0
 800a480:	2b00      	cmp	r3, #0
 800a482:	d007      	beq.n	800a494 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a492:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	4a2a      	ldr	r2, [pc, #168]	@ (800a544 <HAL_TIM_PWM_Start+0x208>)
 800a49a:	4293      	cmp	r3, r2
 800a49c:	d02c      	beq.n	800a4f8 <HAL_TIM_PWM_Start+0x1bc>
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a4a6:	d027      	beq.n	800a4f8 <HAL_TIM_PWM_Start+0x1bc>
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	4a2a      	ldr	r2, [pc, #168]	@ (800a558 <HAL_TIM_PWM_Start+0x21c>)
 800a4ae:	4293      	cmp	r3, r2
 800a4b0:	d022      	beq.n	800a4f8 <HAL_TIM_PWM_Start+0x1bc>
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	4a29      	ldr	r2, [pc, #164]	@ (800a55c <HAL_TIM_PWM_Start+0x220>)
 800a4b8:	4293      	cmp	r3, r2
 800a4ba:	d01d      	beq.n	800a4f8 <HAL_TIM_PWM_Start+0x1bc>
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	4a27      	ldr	r2, [pc, #156]	@ (800a560 <HAL_TIM_PWM_Start+0x224>)
 800a4c2:	4293      	cmp	r3, r2
 800a4c4:	d018      	beq.n	800a4f8 <HAL_TIM_PWM_Start+0x1bc>
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	4a1f      	ldr	r2, [pc, #124]	@ (800a548 <HAL_TIM_PWM_Start+0x20c>)
 800a4cc:	4293      	cmp	r3, r2
 800a4ce:	d013      	beq.n	800a4f8 <HAL_TIM_PWM_Start+0x1bc>
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	4a23      	ldr	r2, [pc, #140]	@ (800a564 <HAL_TIM_PWM_Start+0x228>)
 800a4d6:	4293      	cmp	r3, r2
 800a4d8:	d00e      	beq.n	800a4f8 <HAL_TIM_PWM_Start+0x1bc>
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	4a1b      	ldr	r2, [pc, #108]	@ (800a54c <HAL_TIM_PWM_Start+0x210>)
 800a4e0:	4293      	cmp	r3, r2
 800a4e2:	d009      	beq.n	800a4f8 <HAL_TIM_PWM_Start+0x1bc>
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	4a1f      	ldr	r2, [pc, #124]	@ (800a568 <HAL_TIM_PWM_Start+0x22c>)
 800a4ea:	4293      	cmp	r3, r2
 800a4ec:	d004      	beq.n	800a4f8 <HAL_TIM_PWM_Start+0x1bc>
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	4a1e      	ldr	r2, [pc, #120]	@ (800a56c <HAL_TIM_PWM_Start+0x230>)
 800a4f4:	4293      	cmp	r3, r2
 800a4f6:	d115      	bne.n	800a524 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	689a      	ldr	r2, [r3, #8]
 800a4fe:	4b1c      	ldr	r3, [pc, #112]	@ (800a570 <HAL_TIM_PWM_Start+0x234>)
 800a500:	4013      	ands	r3, r2
 800a502:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	2b06      	cmp	r3, #6
 800a508:	d015      	beq.n	800a536 <HAL_TIM_PWM_Start+0x1fa>
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a510:	d011      	beq.n	800a536 <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	681a      	ldr	r2, [r3, #0]
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	f042 0201 	orr.w	r2, r2, #1
 800a520:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a522:	e008      	b.n	800a536 <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	681a      	ldr	r2, [r3, #0]
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	f042 0201 	orr.w	r2, r2, #1
 800a532:	601a      	str	r2, [r3, #0]
 800a534:	e000      	b.n	800a538 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a536:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a538:	2300      	movs	r3, #0
}
 800a53a:	4618      	mov	r0, r3
 800a53c:	3710      	adds	r7, #16
 800a53e:	46bd      	mov	sp, r7
 800a540:	bd80      	pop	{r7, pc}
 800a542:	bf00      	nop
 800a544:	40010000 	.word	0x40010000
 800a548:	40010400 	.word	0x40010400
 800a54c:	40014000 	.word	0x40014000
 800a550:	40014400 	.word	0x40014400
 800a554:	40014800 	.word	0x40014800
 800a558:	40000400 	.word	0x40000400
 800a55c:	40000800 	.word	0x40000800
 800a560:	40000c00 	.word	0x40000c00
 800a564:	40001800 	.word	0x40001800
 800a568:	4000e000 	.word	0x4000e000
 800a56c:	4000e400 	.word	0x4000e400
 800a570:	00010007 	.word	0x00010007

0800a574 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a574:	b580      	push	{r7, lr}
 800a576:	b086      	sub	sp, #24
 800a578:	af00      	add	r7, sp, #0
 800a57a:	60f8      	str	r0, [r7, #12]
 800a57c:	60b9      	str	r1, [r7, #8]
 800a57e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a580:	2300      	movs	r3, #0
 800a582:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a58a:	2b01      	cmp	r3, #1
 800a58c:	d101      	bne.n	800a592 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a58e:	2302      	movs	r3, #2
 800a590:	e0ff      	b.n	800a792 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	2201      	movs	r2, #1
 800a596:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	2b14      	cmp	r3, #20
 800a59e:	f200 80f0 	bhi.w	800a782 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800a5a2:	a201      	add	r2, pc, #4	@ (adr r2, 800a5a8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a5a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5a8:	0800a5fd 	.word	0x0800a5fd
 800a5ac:	0800a783 	.word	0x0800a783
 800a5b0:	0800a783 	.word	0x0800a783
 800a5b4:	0800a783 	.word	0x0800a783
 800a5b8:	0800a63d 	.word	0x0800a63d
 800a5bc:	0800a783 	.word	0x0800a783
 800a5c0:	0800a783 	.word	0x0800a783
 800a5c4:	0800a783 	.word	0x0800a783
 800a5c8:	0800a67f 	.word	0x0800a67f
 800a5cc:	0800a783 	.word	0x0800a783
 800a5d0:	0800a783 	.word	0x0800a783
 800a5d4:	0800a783 	.word	0x0800a783
 800a5d8:	0800a6bf 	.word	0x0800a6bf
 800a5dc:	0800a783 	.word	0x0800a783
 800a5e0:	0800a783 	.word	0x0800a783
 800a5e4:	0800a783 	.word	0x0800a783
 800a5e8:	0800a701 	.word	0x0800a701
 800a5ec:	0800a783 	.word	0x0800a783
 800a5f0:	0800a783 	.word	0x0800a783
 800a5f4:	0800a783 	.word	0x0800a783
 800a5f8:	0800a741 	.word	0x0800a741
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	68b9      	ldr	r1, [r7, #8]
 800a602:	4618      	mov	r0, r3
 800a604:	f000 fa74 	bl	800aaf0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	699a      	ldr	r2, [r3, #24]
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	f042 0208 	orr.w	r2, r2, #8
 800a616:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	699a      	ldr	r2, [r3, #24]
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	f022 0204 	bic.w	r2, r2, #4
 800a626:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	6999      	ldr	r1, [r3, #24]
 800a62e:	68bb      	ldr	r3, [r7, #8]
 800a630:	691a      	ldr	r2, [r3, #16]
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	430a      	orrs	r2, r1
 800a638:	619a      	str	r2, [r3, #24]
      break;
 800a63a:	e0a5      	b.n	800a788 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	68b9      	ldr	r1, [r7, #8]
 800a642:	4618      	mov	r0, r3
 800a644:	f000 fae4 	bl	800ac10 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	699a      	ldr	r2, [r3, #24]
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a656:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	699a      	ldr	r2, [r3, #24]
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a666:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	6999      	ldr	r1, [r3, #24]
 800a66e:	68bb      	ldr	r3, [r7, #8]
 800a670:	691b      	ldr	r3, [r3, #16]
 800a672:	021a      	lsls	r2, r3, #8
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	430a      	orrs	r2, r1
 800a67a:	619a      	str	r2, [r3, #24]
      break;
 800a67c:	e084      	b.n	800a788 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	68b9      	ldr	r1, [r7, #8]
 800a684:	4618      	mov	r0, r3
 800a686:	f000 fb4d 	bl	800ad24 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	69da      	ldr	r2, [r3, #28]
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	f042 0208 	orr.w	r2, r2, #8
 800a698:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	69da      	ldr	r2, [r3, #28]
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	f022 0204 	bic.w	r2, r2, #4
 800a6a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	69d9      	ldr	r1, [r3, #28]
 800a6b0:	68bb      	ldr	r3, [r7, #8]
 800a6b2:	691a      	ldr	r2, [r3, #16]
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	430a      	orrs	r2, r1
 800a6ba:	61da      	str	r2, [r3, #28]
      break;
 800a6bc:	e064      	b.n	800a788 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	68b9      	ldr	r1, [r7, #8]
 800a6c4:	4618      	mov	r0, r3
 800a6c6:	f000 fbb5 	bl	800ae34 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	69da      	ldr	r2, [r3, #28]
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a6d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	69da      	ldr	r2, [r3, #28]
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a6e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	69d9      	ldr	r1, [r3, #28]
 800a6f0:	68bb      	ldr	r3, [r7, #8]
 800a6f2:	691b      	ldr	r3, [r3, #16]
 800a6f4:	021a      	lsls	r2, r3, #8
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	430a      	orrs	r2, r1
 800a6fc:	61da      	str	r2, [r3, #28]
      break;
 800a6fe:	e043      	b.n	800a788 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	68b9      	ldr	r1, [r7, #8]
 800a706:	4618      	mov	r0, r3
 800a708:	f000 fbfe 	bl	800af08 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	f042 0208 	orr.w	r2, r2, #8
 800a71a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	f022 0204 	bic.w	r2, r2, #4
 800a72a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800a732:	68bb      	ldr	r3, [r7, #8]
 800a734:	691a      	ldr	r2, [r3, #16]
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	430a      	orrs	r2, r1
 800a73c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800a73e:	e023      	b.n	800a788 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	68b9      	ldr	r1, [r7, #8]
 800a746:	4618      	mov	r0, r3
 800a748:	f000 fc42 	bl	800afd0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a75a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a76a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800a772:	68bb      	ldr	r3, [r7, #8]
 800a774:	691b      	ldr	r3, [r3, #16]
 800a776:	021a      	lsls	r2, r3, #8
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	430a      	orrs	r2, r1
 800a77e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800a780:	e002      	b.n	800a788 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800a782:	2301      	movs	r3, #1
 800a784:	75fb      	strb	r3, [r7, #23]
      break;
 800a786:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	2200      	movs	r2, #0
 800a78c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a790:	7dfb      	ldrb	r3, [r7, #23]
}
 800a792:	4618      	mov	r0, r3
 800a794:	3718      	adds	r7, #24
 800a796:	46bd      	mov	sp, r7
 800a798:	bd80      	pop	{r7, pc}
 800a79a:	bf00      	nop

0800a79c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a79c:	b580      	push	{r7, lr}
 800a79e:	b084      	sub	sp, #16
 800a7a0:	af00      	add	r7, sp, #0
 800a7a2:	6078      	str	r0, [r7, #4]
 800a7a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a7a6:	2300      	movs	r3, #0
 800a7a8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a7b0:	2b01      	cmp	r3, #1
 800a7b2:	d101      	bne.n	800a7b8 <HAL_TIM_ConfigClockSource+0x1c>
 800a7b4:	2302      	movs	r3, #2
 800a7b6:	e0dc      	b.n	800a972 <HAL_TIM_ConfigClockSource+0x1d6>
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	2201      	movs	r2, #1
 800a7bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	2202      	movs	r2, #2
 800a7c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	689b      	ldr	r3, [r3, #8]
 800a7ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a7d0:	68ba      	ldr	r2, [r7, #8]
 800a7d2:	4b6a      	ldr	r3, [pc, #424]	@ (800a97c <HAL_TIM_ConfigClockSource+0x1e0>)
 800a7d4:	4013      	ands	r3, r2
 800a7d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a7d8:	68bb      	ldr	r3, [r7, #8]
 800a7da:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a7de:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	68ba      	ldr	r2, [r7, #8]
 800a7e6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a7e8:	683b      	ldr	r3, [r7, #0]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	4a64      	ldr	r2, [pc, #400]	@ (800a980 <HAL_TIM_ConfigClockSource+0x1e4>)
 800a7ee:	4293      	cmp	r3, r2
 800a7f0:	f000 80a9 	beq.w	800a946 <HAL_TIM_ConfigClockSource+0x1aa>
 800a7f4:	4a62      	ldr	r2, [pc, #392]	@ (800a980 <HAL_TIM_ConfigClockSource+0x1e4>)
 800a7f6:	4293      	cmp	r3, r2
 800a7f8:	f200 80ae 	bhi.w	800a958 <HAL_TIM_ConfigClockSource+0x1bc>
 800a7fc:	4a61      	ldr	r2, [pc, #388]	@ (800a984 <HAL_TIM_ConfigClockSource+0x1e8>)
 800a7fe:	4293      	cmp	r3, r2
 800a800:	f000 80a1 	beq.w	800a946 <HAL_TIM_ConfigClockSource+0x1aa>
 800a804:	4a5f      	ldr	r2, [pc, #380]	@ (800a984 <HAL_TIM_ConfigClockSource+0x1e8>)
 800a806:	4293      	cmp	r3, r2
 800a808:	f200 80a6 	bhi.w	800a958 <HAL_TIM_ConfigClockSource+0x1bc>
 800a80c:	4a5e      	ldr	r2, [pc, #376]	@ (800a988 <HAL_TIM_ConfigClockSource+0x1ec>)
 800a80e:	4293      	cmp	r3, r2
 800a810:	f000 8099 	beq.w	800a946 <HAL_TIM_ConfigClockSource+0x1aa>
 800a814:	4a5c      	ldr	r2, [pc, #368]	@ (800a988 <HAL_TIM_ConfigClockSource+0x1ec>)
 800a816:	4293      	cmp	r3, r2
 800a818:	f200 809e 	bhi.w	800a958 <HAL_TIM_ConfigClockSource+0x1bc>
 800a81c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800a820:	f000 8091 	beq.w	800a946 <HAL_TIM_ConfigClockSource+0x1aa>
 800a824:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800a828:	f200 8096 	bhi.w	800a958 <HAL_TIM_ConfigClockSource+0x1bc>
 800a82c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a830:	f000 8089 	beq.w	800a946 <HAL_TIM_ConfigClockSource+0x1aa>
 800a834:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a838:	f200 808e 	bhi.w	800a958 <HAL_TIM_ConfigClockSource+0x1bc>
 800a83c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a840:	d03e      	beq.n	800a8c0 <HAL_TIM_ConfigClockSource+0x124>
 800a842:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a846:	f200 8087 	bhi.w	800a958 <HAL_TIM_ConfigClockSource+0x1bc>
 800a84a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a84e:	f000 8086 	beq.w	800a95e <HAL_TIM_ConfigClockSource+0x1c2>
 800a852:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a856:	d87f      	bhi.n	800a958 <HAL_TIM_ConfigClockSource+0x1bc>
 800a858:	2b70      	cmp	r3, #112	@ 0x70
 800a85a:	d01a      	beq.n	800a892 <HAL_TIM_ConfigClockSource+0xf6>
 800a85c:	2b70      	cmp	r3, #112	@ 0x70
 800a85e:	d87b      	bhi.n	800a958 <HAL_TIM_ConfigClockSource+0x1bc>
 800a860:	2b60      	cmp	r3, #96	@ 0x60
 800a862:	d050      	beq.n	800a906 <HAL_TIM_ConfigClockSource+0x16a>
 800a864:	2b60      	cmp	r3, #96	@ 0x60
 800a866:	d877      	bhi.n	800a958 <HAL_TIM_ConfigClockSource+0x1bc>
 800a868:	2b50      	cmp	r3, #80	@ 0x50
 800a86a:	d03c      	beq.n	800a8e6 <HAL_TIM_ConfigClockSource+0x14a>
 800a86c:	2b50      	cmp	r3, #80	@ 0x50
 800a86e:	d873      	bhi.n	800a958 <HAL_TIM_ConfigClockSource+0x1bc>
 800a870:	2b40      	cmp	r3, #64	@ 0x40
 800a872:	d058      	beq.n	800a926 <HAL_TIM_ConfigClockSource+0x18a>
 800a874:	2b40      	cmp	r3, #64	@ 0x40
 800a876:	d86f      	bhi.n	800a958 <HAL_TIM_ConfigClockSource+0x1bc>
 800a878:	2b30      	cmp	r3, #48	@ 0x30
 800a87a:	d064      	beq.n	800a946 <HAL_TIM_ConfigClockSource+0x1aa>
 800a87c:	2b30      	cmp	r3, #48	@ 0x30
 800a87e:	d86b      	bhi.n	800a958 <HAL_TIM_ConfigClockSource+0x1bc>
 800a880:	2b20      	cmp	r3, #32
 800a882:	d060      	beq.n	800a946 <HAL_TIM_ConfigClockSource+0x1aa>
 800a884:	2b20      	cmp	r3, #32
 800a886:	d867      	bhi.n	800a958 <HAL_TIM_ConfigClockSource+0x1bc>
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d05c      	beq.n	800a946 <HAL_TIM_ConfigClockSource+0x1aa>
 800a88c:	2b10      	cmp	r3, #16
 800a88e:	d05a      	beq.n	800a946 <HAL_TIM_ConfigClockSource+0x1aa>
 800a890:	e062      	b.n	800a958 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a896:	683b      	ldr	r3, [r7, #0]
 800a898:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a89a:	683b      	ldr	r3, [r7, #0]
 800a89c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a89e:	683b      	ldr	r3, [r7, #0]
 800a8a0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a8a2:	f000 fc79 	bl	800b198 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	689b      	ldr	r3, [r3, #8]
 800a8ac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a8ae:	68bb      	ldr	r3, [r7, #8]
 800a8b0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800a8b4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	68ba      	ldr	r2, [r7, #8]
 800a8bc:	609a      	str	r2, [r3, #8]
      break;
 800a8be:	e04f      	b.n	800a960 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a8c4:	683b      	ldr	r3, [r7, #0]
 800a8c6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a8c8:	683b      	ldr	r3, [r7, #0]
 800a8ca:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a8cc:	683b      	ldr	r3, [r7, #0]
 800a8ce:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a8d0:	f000 fc62 	bl	800b198 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	689a      	ldr	r2, [r3, #8]
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a8e2:	609a      	str	r2, [r3, #8]
      break;
 800a8e4:	e03c      	b.n	800a960 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a8ea:	683b      	ldr	r3, [r7, #0]
 800a8ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a8ee:	683b      	ldr	r3, [r7, #0]
 800a8f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a8f2:	461a      	mov	r2, r3
 800a8f4:	f000 fbd2 	bl	800b09c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	2150      	movs	r1, #80	@ 0x50
 800a8fe:	4618      	mov	r0, r3
 800a900:	f000 fc2c 	bl	800b15c <TIM_ITRx_SetConfig>
      break;
 800a904:	e02c      	b.n	800a960 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a90a:	683b      	ldr	r3, [r7, #0]
 800a90c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a90e:	683b      	ldr	r3, [r7, #0]
 800a910:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a912:	461a      	mov	r2, r3
 800a914:	f000 fbf1 	bl	800b0fa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	2160      	movs	r1, #96	@ 0x60
 800a91e:	4618      	mov	r0, r3
 800a920:	f000 fc1c 	bl	800b15c <TIM_ITRx_SetConfig>
      break;
 800a924:	e01c      	b.n	800a960 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a92a:	683b      	ldr	r3, [r7, #0]
 800a92c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a92e:	683b      	ldr	r3, [r7, #0]
 800a930:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a932:	461a      	mov	r2, r3
 800a934:	f000 fbb2 	bl	800b09c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	2140      	movs	r1, #64	@ 0x40
 800a93e:	4618      	mov	r0, r3
 800a940:	f000 fc0c 	bl	800b15c <TIM_ITRx_SetConfig>
      break;
 800a944:	e00c      	b.n	800a960 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	681a      	ldr	r2, [r3, #0]
 800a94a:	683b      	ldr	r3, [r7, #0]
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	4619      	mov	r1, r3
 800a950:	4610      	mov	r0, r2
 800a952:	f000 fc03 	bl	800b15c <TIM_ITRx_SetConfig>
      break;
 800a956:	e003      	b.n	800a960 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800a958:	2301      	movs	r3, #1
 800a95a:	73fb      	strb	r3, [r7, #15]
      break;
 800a95c:	e000      	b.n	800a960 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800a95e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	2201      	movs	r2, #1
 800a964:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	2200      	movs	r2, #0
 800a96c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a970:	7bfb      	ldrb	r3, [r7, #15]
}
 800a972:	4618      	mov	r0, r3
 800a974:	3710      	adds	r7, #16
 800a976:	46bd      	mov	sp, r7
 800a978:	bd80      	pop	{r7, pc}
 800a97a:	bf00      	nop
 800a97c:	ffceff88 	.word	0xffceff88
 800a980:	00100040 	.word	0x00100040
 800a984:	00100030 	.word	0x00100030
 800a988:	00100020 	.word	0x00100020

0800a98c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a98c:	b480      	push	{r7}
 800a98e:	b085      	sub	sp, #20
 800a990:	af00      	add	r7, sp, #0
 800a992:	6078      	str	r0, [r7, #4]
 800a994:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	4a4a      	ldr	r2, [pc, #296]	@ (800aac8 <TIM_Base_SetConfig+0x13c>)
 800a9a0:	4293      	cmp	r3, r2
 800a9a2:	d013      	beq.n	800a9cc <TIM_Base_SetConfig+0x40>
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a9aa:	d00f      	beq.n	800a9cc <TIM_Base_SetConfig+0x40>
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	4a47      	ldr	r2, [pc, #284]	@ (800aacc <TIM_Base_SetConfig+0x140>)
 800a9b0:	4293      	cmp	r3, r2
 800a9b2:	d00b      	beq.n	800a9cc <TIM_Base_SetConfig+0x40>
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	4a46      	ldr	r2, [pc, #280]	@ (800aad0 <TIM_Base_SetConfig+0x144>)
 800a9b8:	4293      	cmp	r3, r2
 800a9ba:	d007      	beq.n	800a9cc <TIM_Base_SetConfig+0x40>
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	4a45      	ldr	r2, [pc, #276]	@ (800aad4 <TIM_Base_SetConfig+0x148>)
 800a9c0:	4293      	cmp	r3, r2
 800a9c2:	d003      	beq.n	800a9cc <TIM_Base_SetConfig+0x40>
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	4a44      	ldr	r2, [pc, #272]	@ (800aad8 <TIM_Base_SetConfig+0x14c>)
 800a9c8:	4293      	cmp	r3, r2
 800a9ca:	d108      	bne.n	800a9de <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a9d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a9d4:	683b      	ldr	r3, [r7, #0]
 800a9d6:	685b      	ldr	r3, [r3, #4]
 800a9d8:	68fa      	ldr	r2, [r7, #12]
 800a9da:	4313      	orrs	r3, r2
 800a9dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	4a39      	ldr	r2, [pc, #228]	@ (800aac8 <TIM_Base_SetConfig+0x13c>)
 800a9e2:	4293      	cmp	r3, r2
 800a9e4:	d027      	beq.n	800aa36 <TIM_Base_SetConfig+0xaa>
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a9ec:	d023      	beq.n	800aa36 <TIM_Base_SetConfig+0xaa>
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	4a36      	ldr	r2, [pc, #216]	@ (800aacc <TIM_Base_SetConfig+0x140>)
 800a9f2:	4293      	cmp	r3, r2
 800a9f4:	d01f      	beq.n	800aa36 <TIM_Base_SetConfig+0xaa>
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	4a35      	ldr	r2, [pc, #212]	@ (800aad0 <TIM_Base_SetConfig+0x144>)
 800a9fa:	4293      	cmp	r3, r2
 800a9fc:	d01b      	beq.n	800aa36 <TIM_Base_SetConfig+0xaa>
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	4a34      	ldr	r2, [pc, #208]	@ (800aad4 <TIM_Base_SetConfig+0x148>)
 800aa02:	4293      	cmp	r3, r2
 800aa04:	d017      	beq.n	800aa36 <TIM_Base_SetConfig+0xaa>
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	4a33      	ldr	r2, [pc, #204]	@ (800aad8 <TIM_Base_SetConfig+0x14c>)
 800aa0a:	4293      	cmp	r3, r2
 800aa0c:	d013      	beq.n	800aa36 <TIM_Base_SetConfig+0xaa>
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	4a32      	ldr	r2, [pc, #200]	@ (800aadc <TIM_Base_SetConfig+0x150>)
 800aa12:	4293      	cmp	r3, r2
 800aa14:	d00f      	beq.n	800aa36 <TIM_Base_SetConfig+0xaa>
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	4a31      	ldr	r2, [pc, #196]	@ (800aae0 <TIM_Base_SetConfig+0x154>)
 800aa1a:	4293      	cmp	r3, r2
 800aa1c:	d00b      	beq.n	800aa36 <TIM_Base_SetConfig+0xaa>
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	4a30      	ldr	r2, [pc, #192]	@ (800aae4 <TIM_Base_SetConfig+0x158>)
 800aa22:	4293      	cmp	r3, r2
 800aa24:	d007      	beq.n	800aa36 <TIM_Base_SetConfig+0xaa>
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	4a2f      	ldr	r2, [pc, #188]	@ (800aae8 <TIM_Base_SetConfig+0x15c>)
 800aa2a:	4293      	cmp	r3, r2
 800aa2c:	d003      	beq.n	800aa36 <TIM_Base_SetConfig+0xaa>
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	4a2e      	ldr	r2, [pc, #184]	@ (800aaec <TIM_Base_SetConfig+0x160>)
 800aa32:	4293      	cmp	r3, r2
 800aa34:	d108      	bne.n	800aa48 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800aa3c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800aa3e:	683b      	ldr	r3, [r7, #0]
 800aa40:	68db      	ldr	r3, [r3, #12]
 800aa42:	68fa      	ldr	r2, [r7, #12]
 800aa44:	4313      	orrs	r3, r2
 800aa46:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800aa4e:	683b      	ldr	r3, [r7, #0]
 800aa50:	695b      	ldr	r3, [r3, #20]
 800aa52:	4313      	orrs	r3, r2
 800aa54:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	68fa      	ldr	r2, [r7, #12]
 800aa5a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800aa5c:	683b      	ldr	r3, [r7, #0]
 800aa5e:	689a      	ldr	r2, [r3, #8]
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800aa64:	683b      	ldr	r3, [r7, #0]
 800aa66:	681a      	ldr	r2, [r3, #0]
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	4a16      	ldr	r2, [pc, #88]	@ (800aac8 <TIM_Base_SetConfig+0x13c>)
 800aa70:	4293      	cmp	r3, r2
 800aa72:	d00f      	beq.n	800aa94 <TIM_Base_SetConfig+0x108>
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	4a18      	ldr	r2, [pc, #96]	@ (800aad8 <TIM_Base_SetConfig+0x14c>)
 800aa78:	4293      	cmp	r3, r2
 800aa7a:	d00b      	beq.n	800aa94 <TIM_Base_SetConfig+0x108>
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	4a17      	ldr	r2, [pc, #92]	@ (800aadc <TIM_Base_SetConfig+0x150>)
 800aa80:	4293      	cmp	r3, r2
 800aa82:	d007      	beq.n	800aa94 <TIM_Base_SetConfig+0x108>
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	4a16      	ldr	r2, [pc, #88]	@ (800aae0 <TIM_Base_SetConfig+0x154>)
 800aa88:	4293      	cmp	r3, r2
 800aa8a:	d003      	beq.n	800aa94 <TIM_Base_SetConfig+0x108>
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	4a15      	ldr	r2, [pc, #84]	@ (800aae4 <TIM_Base_SetConfig+0x158>)
 800aa90:	4293      	cmp	r3, r2
 800aa92:	d103      	bne.n	800aa9c <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800aa94:	683b      	ldr	r3, [r7, #0]
 800aa96:	691a      	ldr	r2, [r3, #16]
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	2201      	movs	r2, #1
 800aaa0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	691b      	ldr	r3, [r3, #16]
 800aaa6:	f003 0301 	and.w	r3, r3, #1
 800aaaa:	2b01      	cmp	r3, #1
 800aaac:	d105      	bne.n	800aaba <TIM_Base_SetConfig+0x12e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	691b      	ldr	r3, [r3, #16]
 800aab2:	f023 0201 	bic.w	r2, r3, #1
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	611a      	str	r2, [r3, #16]
  }
}
 800aaba:	bf00      	nop
 800aabc:	3714      	adds	r7, #20
 800aabe:	46bd      	mov	sp, r7
 800aac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac4:	4770      	bx	lr
 800aac6:	bf00      	nop
 800aac8:	40010000 	.word	0x40010000
 800aacc:	40000400 	.word	0x40000400
 800aad0:	40000800 	.word	0x40000800
 800aad4:	40000c00 	.word	0x40000c00
 800aad8:	40010400 	.word	0x40010400
 800aadc:	40014000 	.word	0x40014000
 800aae0:	40014400 	.word	0x40014400
 800aae4:	40014800 	.word	0x40014800
 800aae8:	4000e000 	.word	0x4000e000
 800aaec:	4000e400 	.word	0x4000e400

0800aaf0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800aaf0:	b480      	push	{r7}
 800aaf2:	b087      	sub	sp, #28
 800aaf4:	af00      	add	r7, sp, #0
 800aaf6:	6078      	str	r0, [r7, #4]
 800aaf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	6a1b      	ldr	r3, [r3, #32]
 800aafe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	6a1b      	ldr	r3, [r3, #32]
 800ab04:	f023 0201 	bic.w	r2, r3, #1
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	685b      	ldr	r3, [r3, #4]
 800ab10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	699b      	ldr	r3, [r3, #24]
 800ab16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ab18:	68fa      	ldr	r2, [r7, #12]
 800ab1a:	4b37      	ldr	r3, [pc, #220]	@ (800abf8 <TIM_OC1_SetConfig+0x108>)
 800ab1c:	4013      	ands	r3, r2
 800ab1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	f023 0303 	bic.w	r3, r3, #3
 800ab26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ab28:	683b      	ldr	r3, [r7, #0]
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	68fa      	ldr	r2, [r7, #12]
 800ab2e:	4313      	orrs	r3, r2
 800ab30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ab32:	697b      	ldr	r3, [r7, #20]
 800ab34:	f023 0302 	bic.w	r3, r3, #2
 800ab38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800ab3a:	683b      	ldr	r3, [r7, #0]
 800ab3c:	689b      	ldr	r3, [r3, #8]
 800ab3e:	697a      	ldr	r2, [r7, #20]
 800ab40:	4313      	orrs	r3, r2
 800ab42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	4a2d      	ldr	r2, [pc, #180]	@ (800abfc <TIM_OC1_SetConfig+0x10c>)
 800ab48:	4293      	cmp	r3, r2
 800ab4a:	d00f      	beq.n	800ab6c <TIM_OC1_SetConfig+0x7c>
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	4a2c      	ldr	r2, [pc, #176]	@ (800ac00 <TIM_OC1_SetConfig+0x110>)
 800ab50:	4293      	cmp	r3, r2
 800ab52:	d00b      	beq.n	800ab6c <TIM_OC1_SetConfig+0x7c>
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	4a2b      	ldr	r2, [pc, #172]	@ (800ac04 <TIM_OC1_SetConfig+0x114>)
 800ab58:	4293      	cmp	r3, r2
 800ab5a:	d007      	beq.n	800ab6c <TIM_OC1_SetConfig+0x7c>
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	4a2a      	ldr	r2, [pc, #168]	@ (800ac08 <TIM_OC1_SetConfig+0x118>)
 800ab60:	4293      	cmp	r3, r2
 800ab62:	d003      	beq.n	800ab6c <TIM_OC1_SetConfig+0x7c>
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	4a29      	ldr	r2, [pc, #164]	@ (800ac0c <TIM_OC1_SetConfig+0x11c>)
 800ab68:	4293      	cmp	r3, r2
 800ab6a:	d10c      	bne.n	800ab86 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800ab6c:	697b      	ldr	r3, [r7, #20]
 800ab6e:	f023 0308 	bic.w	r3, r3, #8
 800ab72:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800ab74:	683b      	ldr	r3, [r7, #0]
 800ab76:	68db      	ldr	r3, [r3, #12]
 800ab78:	697a      	ldr	r2, [r7, #20]
 800ab7a:	4313      	orrs	r3, r2
 800ab7c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800ab7e:	697b      	ldr	r3, [r7, #20]
 800ab80:	f023 0304 	bic.w	r3, r3, #4
 800ab84:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	4a1c      	ldr	r2, [pc, #112]	@ (800abfc <TIM_OC1_SetConfig+0x10c>)
 800ab8a:	4293      	cmp	r3, r2
 800ab8c:	d00f      	beq.n	800abae <TIM_OC1_SetConfig+0xbe>
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	4a1b      	ldr	r2, [pc, #108]	@ (800ac00 <TIM_OC1_SetConfig+0x110>)
 800ab92:	4293      	cmp	r3, r2
 800ab94:	d00b      	beq.n	800abae <TIM_OC1_SetConfig+0xbe>
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	4a1a      	ldr	r2, [pc, #104]	@ (800ac04 <TIM_OC1_SetConfig+0x114>)
 800ab9a:	4293      	cmp	r3, r2
 800ab9c:	d007      	beq.n	800abae <TIM_OC1_SetConfig+0xbe>
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	4a19      	ldr	r2, [pc, #100]	@ (800ac08 <TIM_OC1_SetConfig+0x118>)
 800aba2:	4293      	cmp	r3, r2
 800aba4:	d003      	beq.n	800abae <TIM_OC1_SetConfig+0xbe>
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	4a18      	ldr	r2, [pc, #96]	@ (800ac0c <TIM_OC1_SetConfig+0x11c>)
 800abaa:	4293      	cmp	r3, r2
 800abac:	d111      	bne.n	800abd2 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800abae:	693b      	ldr	r3, [r7, #16]
 800abb0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800abb4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800abb6:	693b      	ldr	r3, [r7, #16]
 800abb8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800abbc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800abbe:	683b      	ldr	r3, [r7, #0]
 800abc0:	695b      	ldr	r3, [r3, #20]
 800abc2:	693a      	ldr	r2, [r7, #16]
 800abc4:	4313      	orrs	r3, r2
 800abc6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800abc8:	683b      	ldr	r3, [r7, #0]
 800abca:	699b      	ldr	r3, [r3, #24]
 800abcc:	693a      	ldr	r2, [r7, #16]
 800abce:	4313      	orrs	r3, r2
 800abd0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	693a      	ldr	r2, [r7, #16]
 800abd6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	68fa      	ldr	r2, [r7, #12]
 800abdc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800abde:	683b      	ldr	r3, [r7, #0]
 800abe0:	685a      	ldr	r2, [r3, #4]
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	697a      	ldr	r2, [r7, #20]
 800abea:	621a      	str	r2, [r3, #32]
}
 800abec:	bf00      	nop
 800abee:	371c      	adds	r7, #28
 800abf0:	46bd      	mov	sp, r7
 800abf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abf6:	4770      	bx	lr
 800abf8:	fffeff8f 	.word	0xfffeff8f
 800abfc:	40010000 	.word	0x40010000
 800ac00:	40010400 	.word	0x40010400
 800ac04:	40014000 	.word	0x40014000
 800ac08:	40014400 	.word	0x40014400
 800ac0c:	40014800 	.word	0x40014800

0800ac10 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ac10:	b480      	push	{r7}
 800ac12:	b087      	sub	sp, #28
 800ac14:	af00      	add	r7, sp, #0
 800ac16:	6078      	str	r0, [r7, #4]
 800ac18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	6a1b      	ldr	r3, [r3, #32]
 800ac1e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	6a1b      	ldr	r3, [r3, #32]
 800ac24:	f023 0210 	bic.w	r2, r3, #16
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	685b      	ldr	r3, [r3, #4]
 800ac30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	699b      	ldr	r3, [r3, #24]
 800ac36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800ac38:	68fa      	ldr	r2, [r7, #12]
 800ac3a:	4b34      	ldr	r3, [pc, #208]	@ (800ad0c <TIM_OC2_SetConfig+0xfc>)
 800ac3c:	4013      	ands	r3, r2
 800ac3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ac46:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ac48:	683b      	ldr	r3, [r7, #0]
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	021b      	lsls	r3, r3, #8
 800ac4e:	68fa      	ldr	r2, [r7, #12]
 800ac50:	4313      	orrs	r3, r2
 800ac52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800ac54:	697b      	ldr	r3, [r7, #20]
 800ac56:	f023 0320 	bic.w	r3, r3, #32
 800ac5a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ac5c:	683b      	ldr	r3, [r7, #0]
 800ac5e:	689b      	ldr	r3, [r3, #8]
 800ac60:	011b      	lsls	r3, r3, #4
 800ac62:	697a      	ldr	r2, [r7, #20]
 800ac64:	4313      	orrs	r3, r2
 800ac66:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	4a29      	ldr	r2, [pc, #164]	@ (800ad10 <TIM_OC2_SetConfig+0x100>)
 800ac6c:	4293      	cmp	r3, r2
 800ac6e:	d003      	beq.n	800ac78 <TIM_OC2_SetConfig+0x68>
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	4a28      	ldr	r2, [pc, #160]	@ (800ad14 <TIM_OC2_SetConfig+0x104>)
 800ac74:	4293      	cmp	r3, r2
 800ac76:	d10d      	bne.n	800ac94 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800ac78:	697b      	ldr	r3, [r7, #20]
 800ac7a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ac7e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ac80:	683b      	ldr	r3, [r7, #0]
 800ac82:	68db      	ldr	r3, [r3, #12]
 800ac84:	011b      	lsls	r3, r3, #4
 800ac86:	697a      	ldr	r2, [r7, #20]
 800ac88:	4313      	orrs	r3, r2
 800ac8a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800ac8c:	697b      	ldr	r3, [r7, #20]
 800ac8e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ac92:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	4a1e      	ldr	r2, [pc, #120]	@ (800ad10 <TIM_OC2_SetConfig+0x100>)
 800ac98:	4293      	cmp	r3, r2
 800ac9a:	d00f      	beq.n	800acbc <TIM_OC2_SetConfig+0xac>
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	4a1d      	ldr	r2, [pc, #116]	@ (800ad14 <TIM_OC2_SetConfig+0x104>)
 800aca0:	4293      	cmp	r3, r2
 800aca2:	d00b      	beq.n	800acbc <TIM_OC2_SetConfig+0xac>
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	4a1c      	ldr	r2, [pc, #112]	@ (800ad18 <TIM_OC2_SetConfig+0x108>)
 800aca8:	4293      	cmp	r3, r2
 800acaa:	d007      	beq.n	800acbc <TIM_OC2_SetConfig+0xac>
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	4a1b      	ldr	r2, [pc, #108]	@ (800ad1c <TIM_OC2_SetConfig+0x10c>)
 800acb0:	4293      	cmp	r3, r2
 800acb2:	d003      	beq.n	800acbc <TIM_OC2_SetConfig+0xac>
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	4a1a      	ldr	r2, [pc, #104]	@ (800ad20 <TIM_OC2_SetConfig+0x110>)
 800acb8:	4293      	cmp	r3, r2
 800acba:	d113      	bne.n	800ace4 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800acbc:	693b      	ldr	r3, [r7, #16]
 800acbe:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800acc2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800acc4:	693b      	ldr	r3, [r7, #16]
 800acc6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800acca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800accc:	683b      	ldr	r3, [r7, #0]
 800acce:	695b      	ldr	r3, [r3, #20]
 800acd0:	009b      	lsls	r3, r3, #2
 800acd2:	693a      	ldr	r2, [r7, #16]
 800acd4:	4313      	orrs	r3, r2
 800acd6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800acd8:	683b      	ldr	r3, [r7, #0]
 800acda:	699b      	ldr	r3, [r3, #24]
 800acdc:	009b      	lsls	r3, r3, #2
 800acde:	693a      	ldr	r2, [r7, #16]
 800ace0:	4313      	orrs	r3, r2
 800ace2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	693a      	ldr	r2, [r7, #16]
 800ace8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	68fa      	ldr	r2, [r7, #12]
 800acee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800acf0:	683b      	ldr	r3, [r7, #0]
 800acf2:	685a      	ldr	r2, [r3, #4]
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	697a      	ldr	r2, [r7, #20]
 800acfc:	621a      	str	r2, [r3, #32]
}
 800acfe:	bf00      	nop
 800ad00:	371c      	adds	r7, #28
 800ad02:	46bd      	mov	sp, r7
 800ad04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad08:	4770      	bx	lr
 800ad0a:	bf00      	nop
 800ad0c:	feff8fff 	.word	0xfeff8fff
 800ad10:	40010000 	.word	0x40010000
 800ad14:	40010400 	.word	0x40010400
 800ad18:	40014000 	.word	0x40014000
 800ad1c:	40014400 	.word	0x40014400
 800ad20:	40014800 	.word	0x40014800

0800ad24 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ad24:	b480      	push	{r7}
 800ad26:	b087      	sub	sp, #28
 800ad28:	af00      	add	r7, sp, #0
 800ad2a:	6078      	str	r0, [r7, #4]
 800ad2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	6a1b      	ldr	r3, [r3, #32]
 800ad32:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	6a1b      	ldr	r3, [r3, #32]
 800ad38:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	685b      	ldr	r3, [r3, #4]
 800ad44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	69db      	ldr	r3, [r3, #28]
 800ad4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ad4c:	68fa      	ldr	r2, [r7, #12]
 800ad4e:	4b33      	ldr	r3, [pc, #204]	@ (800ae1c <TIM_OC3_SetConfig+0xf8>)
 800ad50:	4013      	ands	r3, r2
 800ad52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	f023 0303 	bic.w	r3, r3, #3
 800ad5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ad5c:	683b      	ldr	r3, [r7, #0]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	68fa      	ldr	r2, [r7, #12]
 800ad62:	4313      	orrs	r3, r2
 800ad64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ad66:	697b      	ldr	r3, [r7, #20]
 800ad68:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800ad6c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ad6e:	683b      	ldr	r3, [r7, #0]
 800ad70:	689b      	ldr	r3, [r3, #8]
 800ad72:	021b      	lsls	r3, r3, #8
 800ad74:	697a      	ldr	r2, [r7, #20]
 800ad76:	4313      	orrs	r3, r2
 800ad78:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	4a28      	ldr	r2, [pc, #160]	@ (800ae20 <TIM_OC3_SetConfig+0xfc>)
 800ad7e:	4293      	cmp	r3, r2
 800ad80:	d003      	beq.n	800ad8a <TIM_OC3_SetConfig+0x66>
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	4a27      	ldr	r2, [pc, #156]	@ (800ae24 <TIM_OC3_SetConfig+0x100>)
 800ad86:	4293      	cmp	r3, r2
 800ad88:	d10d      	bne.n	800ada6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ad8a:	697b      	ldr	r3, [r7, #20]
 800ad8c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800ad90:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ad92:	683b      	ldr	r3, [r7, #0]
 800ad94:	68db      	ldr	r3, [r3, #12]
 800ad96:	021b      	lsls	r3, r3, #8
 800ad98:	697a      	ldr	r2, [r7, #20]
 800ad9a:	4313      	orrs	r3, r2
 800ad9c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ad9e:	697b      	ldr	r3, [r7, #20]
 800ada0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800ada4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	4a1d      	ldr	r2, [pc, #116]	@ (800ae20 <TIM_OC3_SetConfig+0xfc>)
 800adaa:	4293      	cmp	r3, r2
 800adac:	d00f      	beq.n	800adce <TIM_OC3_SetConfig+0xaa>
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	4a1c      	ldr	r2, [pc, #112]	@ (800ae24 <TIM_OC3_SetConfig+0x100>)
 800adb2:	4293      	cmp	r3, r2
 800adb4:	d00b      	beq.n	800adce <TIM_OC3_SetConfig+0xaa>
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	4a1b      	ldr	r2, [pc, #108]	@ (800ae28 <TIM_OC3_SetConfig+0x104>)
 800adba:	4293      	cmp	r3, r2
 800adbc:	d007      	beq.n	800adce <TIM_OC3_SetConfig+0xaa>
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	4a1a      	ldr	r2, [pc, #104]	@ (800ae2c <TIM_OC3_SetConfig+0x108>)
 800adc2:	4293      	cmp	r3, r2
 800adc4:	d003      	beq.n	800adce <TIM_OC3_SetConfig+0xaa>
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	4a19      	ldr	r2, [pc, #100]	@ (800ae30 <TIM_OC3_SetConfig+0x10c>)
 800adca:	4293      	cmp	r3, r2
 800adcc:	d113      	bne.n	800adf6 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800adce:	693b      	ldr	r3, [r7, #16]
 800add0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800add4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800add6:	693b      	ldr	r3, [r7, #16]
 800add8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800addc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800adde:	683b      	ldr	r3, [r7, #0]
 800ade0:	695b      	ldr	r3, [r3, #20]
 800ade2:	011b      	lsls	r3, r3, #4
 800ade4:	693a      	ldr	r2, [r7, #16]
 800ade6:	4313      	orrs	r3, r2
 800ade8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800adea:	683b      	ldr	r3, [r7, #0]
 800adec:	699b      	ldr	r3, [r3, #24]
 800adee:	011b      	lsls	r3, r3, #4
 800adf0:	693a      	ldr	r2, [r7, #16]
 800adf2:	4313      	orrs	r3, r2
 800adf4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	693a      	ldr	r2, [r7, #16]
 800adfa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	68fa      	ldr	r2, [r7, #12]
 800ae00:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ae02:	683b      	ldr	r3, [r7, #0]
 800ae04:	685a      	ldr	r2, [r3, #4]
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	697a      	ldr	r2, [r7, #20]
 800ae0e:	621a      	str	r2, [r3, #32]
}
 800ae10:	bf00      	nop
 800ae12:	371c      	adds	r7, #28
 800ae14:	46bd      	mov	sp, r7
 800ae16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae1a:	4770      	bx	lr
 800ae1c:	fffeff8f 	.word	0xfffeff8f
 800ae20:	40010000 	.word	0x40010000
 800ae24:	40010400 	.word	0x40010400
 800ae28:	40014000 	.word	0x40014000
 800ae2c:	40014400 	.word	0x40014400
 800ae30:	40014800 	.word	0x40014800

0800ae34 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ae34:	b480      	push	{r7}
 800ae36:	b087      	sub	sp, #28
 800ae38:	af00      	add	r7, sp, #0
 800ae3a:	6078      	str	r0, [r7, #4]
 800ae3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	6a1b      	ldr	r3, [r3, #32]
 800ae42:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	6a1b      	ldr	r3, [r3, #32]
 800ae48:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	685b      	ldr	r3, [r3, #4]
 800ae54:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	69db      	ldr	r3, [r3, #28]
 800ae5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ae5c:	68fa      	ldr	r2, [r7, #12]
 800ae5e:	4b24      	ldr	r3, [pc, #144]	@ (800aef0 <TIM_OC4_SetConfig+0xbc>)
 800ae60:	4013      	ands	r3, r2
 800ae62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ae6a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ae6c:	683b      	ldr	r3, [r7, #0]
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	021b      	lsls	r3, r3, #8
 800ae72:	68fa      	ldr	r2, [r7, #12]
 800ae74:	4313      	orrs	r3, r2
 800ae76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ae78:	693b      	ldr	r3, [r7, #16]
 800ae7a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800ae7e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ae80:	683b      	ldr	r3, [r7, #0]
 800ae82:	689b      	ldr	r3, [r3, #8]
 800ae84:	031b      	lsls	r3, r3, #12
 800ae86:	693a      	ldr	r2, [r7, #16]
 800ae88:	4313      	orrs	r3, r2
 800ae8a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	4a19      	ldr	r2, [pc, #100]	@ (800aef4 <TIM_OC4_SetConfig+0xc0>)
 800ae90:	4293      	cmp	r3, r2
 800ae92:	d00f      	beq.n	800aeb4 <TIM_OC4_SetConfig+0x80>
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	4a18      	ldr	r2, [pc, #96]	@ (800aef8 <TIM_OC4_SetConfig+0xc4>)
 800ae98:	4293      	cmp	r3, r2
 800ae9a:	d00b      	beq.n	800aeb4 <TIM_OC4_SetConfig+0x80>
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	4a17      	ldr	r2, [pc, #92]	@ (800aefc <TIM_OC4_SetConfig+0xc8>)
 800aea0:	4293      	cmp	r3, r2
 800aea2:	d007      	beq.n	800aeb4 <TIM_OC4_SetConfig+0x80>
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	4a16      	ldr	r2, [pc, #88]	@ (800af00 <TIM_OC4_SetConfig+0xcc>)
 800aea8:	4293      	cmp	r3, r2
 800aeaa:	d003      	beq.n	800aeb4 <TIM_OC4_SetConfig+0x80>
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	4a15      	ldr	r2, [pc, #84]	@ (800af04 <TIM_OC4_SetConfig+0xd0>)
 800aeb0:	4293      	cmp	r3, r2
 800aeb2:	d109      	bne.n	800aec8 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800aeb4:	697b      	ldr	r3, [r7, #20]
 800aeb6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800aeba:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800aebc:	683b      	ldr	r3, [r7, #0]
 800aebe:	695b      	ldr	r3, [r3, #20]
 800aec0:	019b      	lsls	r3, r3, #6
 800aec2:	697a      	ldr	r2, [r7, #20]
 800aec4:	4313      	orrs	r3, r2
 800aec6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	697a      	ldr	r2, [r7, #20]
 800aecc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	68fa      	ldr	r2, [r7, #12]
 800aed2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800aed4:	683b      	ldr	r3, [r7, #0]
 800aed6:	685a      	ldr	r2, [r3, #4]
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	693a      	ldr	r2, [r7, #16]
 800aee0:	621a      	str	r2, [r3, #32]
}
 800aee2:	bf00      	nop
 800aee4:	371c      	adds	r7, #28
 800aee6:	46bd      	mov	sp, r7
 800aee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeec:	4770      	bx	lr
 800aeee:	bf00      	nop
 800aef0:	feff8fff 	.word	0xfeff8fff
 800aef4:	40010000 	.word	0x40010000
 800aef8:	40010400 	.word	0x40010400
 800aefc:	40014000 	.word	0x40014000
 800af00:	40014400 	.word	0x40014400
 800af04:	40014800 	.word	0x40014800

0800af08 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800af08:	b480      	push	{r7}
 800af0a:	b087      	sub	sp, #28
 800af0c:	af00      	add	r7, sp, #0
 800af0e:	6078      	str	r0, [r7, #4]
 800af10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	6a1b      	ldr	r3, [r3, #32]
 800af16:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	6a1b      	ldr	r3, [r3, #32]
 800af1c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	685b      	ldr	r3, [r3, #4]
 800af28:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800af2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800af30:	68fa      	ldr	r2, [r7, #12]
 800af32:	4b21      	ldr	r3, [pc, #132]	@ (800afb8 <TIM_OC5_SetConfig+0xb0>)
 800af34:	4013      	ands	r3, r2
 800af36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800af38:	683b      	ldr	r3, [r7, #0]
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	68fa      	ldr	r2, [r7, #12]
 800af3e:	4313      	orrs	r3, r2
 800af40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800af42:	693b      	ldr	r3, [r7, #16]
 800af44:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800af48:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800af4a:	683b      	ldr	r3, [r7, #0]
 800af4c:	689b      	ldr	r3, [r3, #8]
 800af4e:	041b      	lsls	r3, r3, #16
 800af50:	693a      	ldr	r2, [r7, #16]
 800af52:	4313      	orrs	r3, r2
 800af54:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	4a18      	ldr	r2, [pc, #96]	@ (800afbc <TIM_OC5_SetConfig+0xb4>)
 800af5a:	4293      	cmp	r3, r2
 800af5c:	d00f      	beq.n	800af7e <TIM_OC5_SetConfig+0x76>
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	4a17      	ldr	r2, [pc, #92]	@ (800afc0 <TIM_OC5_SetConfig+0xb8>)
 800af62:	4293      	cmp	r3, r2
 800af64:	d00b      	beq.n	800af7e <TIM_OC5_SetConfig+0x76>
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	4a16      	ldr	r2, [pc, #88]	@ (800afc4 <TIM_OC5_SetConfig+0xbc>)
 800af6a:	4293      	cmp	r3, r2
 800af6c:	d007      	beq.n	800af7e <TIM_OC5_SetConfig+0x76>
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	4a15      	ldr	r2, [pc, #84]	@ (800afc8 <TIM_OC5_SetConfig+0xc0>)
 800af72:	4293      	cmp	r3, r2
 800af74:	d003      	beq.n	800af7e <TIM_OC5_SetConfig+0x76>
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	4a14      	ldr	r2, [pc, #80]	@ (800afcc <TIM_OC5_SetConfig+0xc4>)
 800af7a:	4293      	cmp	r3, r2
 800af7c:	d109      	bne.n	800af92 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800af7e:	697b      	ldr	r3, [r7, #20]
 800af80:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800af84:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800af86:	683b      	ldr	r3, [r7, #0]
 800af88:	695b      	ldr	r3, [r3, #20]
 800af8a:	021b      	lsls	r3, r3, #8
 800af8c:	697a      	ldr	r2, [r7, #20]
 800af8e:	4313      	orrs	r3, r2
 800af90:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	697a      	ldr	r2, [r7, #20]
 800af96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	68fa      	ldr	r2, [r7, #12]
 800af9c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800af9e:	683b      	ldr	r3, [r7, #0]
 800afa0:	685a      	ldr	r2, [r3, #4]
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	693a      	ldr	r2, [r7, #16]
 800afaa:	621a      	str	r2, [r3, #32]
}
 800afac:	bf00      	nop
 800afae:	371c      	adds	r7, #28
 800afb0:	46bd      	mov	sp, r7
 800afb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afb6:	4770      	bx	lr
 800afb8:	fffeff8f 	.word	0xfffeff8f
 800afbc:	40010000 	.word	0x40010000
 800afc0:	40010400 	.word	0x40010400
 800afc4:	40014000 	.word	0x40014000
 800afc8:	40014400 	.word	0x40014400
 800afcc:	40014800 	.word	0x40014800

0800afd0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800afd0:	b480      	push	{r7}
 800afd2:	b087      	sub	sp, #28
 800afd4:	af00      	add	r7, sp, #0
 800afd6:	6078      	str	r0, [r7, #4]
 800afd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	6a1b      	ldr	r3, [r3, #32]
 800afde:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	6a1b      	ldr	r3, [r3, #32]
 800afe4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	685b      	ldr	r3, [r3, #4]
 800aff0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aff6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800aff8:	68fa      	ldr	r2, [r7, #12]
 800affa:	4b22      	ldr	r3, [pc, #136]	@ (800b084 <TIM_OC6_SetConfig+0xb4>)
 800affc:	4013      	ands	r3, r2
 800affe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b000:	683b      	ldr	r3, [r7, #0]
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	021b      	lsls	r3, r3, #8
 800b006:	68fa      	ldr	r2, [r7, #12]
 800b008:	4313      	orrs	r3, r2
 800b00a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b00c:	693b      	ldr	r3, [r7, #16]
 800b00e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800b012:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b014:	683b      	ldr	r3, [r7, #0]
 800b016:	689b      	ldr	r3, [r3, #8]
 800b018:	051b      	lsls	r3, r3, #20
 800b01a:	693a      	ldr	r2, [r7, #16]
 800b01c:	4313      	orrs	r3, r2
 800b01e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	4a19      	ldr	r2, [pc, #100]	@ (800b088 <TIM_OC6_SetConfig+0xb8>)
 800b024:	4293      	cmp	r3, r2
 800b026:	d00f      	beq.n	800b048 <TIM_OC6_SetConfig+0x78>
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	4a18      	ldr	r2, [pc, #96]	@ (800b08c <TIM_OC6_SetConfig+0xbc>)
 800b02c:	4293      	cmp	r3, r2
 800b02e:	d00b      	beq.n	800b048 <TIM_OC6_SetConfig+0x78>
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	4a17      	ldr	r2, [pc, #92]	@ (800b090 <TIM_OC6_SetConfig+0xc0>)
 800b034:	4293      	cmp	r3, r2
 800b036:	d007      	beq.n	800b048 <TIM_OC6_SetConfig+0x78>
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	4a16      	ldr	r2, [pc, #88]	@ (800b094 <TIM_OC6_SetConfig+0xc4>)
 800b03c:	4293      	cmp	r3, r2
 800b03e:	d003      	beq.n	800b048 <TIM_OC6_SetConfig+0x78>
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	4a15      	ldr	r2, [pc, #84]	@ (800b098 <TIM_OC6_SetConfig+0xc8>)
 800b044:	4293      	cmp	r3, r2
 800b046:	d109      	bne.n	800b05c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b048:	697b      	ldr	r3, [r7, #20]
 800b04a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800b04e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b050:	683b      	ldr	r3, [r7, #0]
 800b052:	695b      	ldr	r3, [r3, #20]
 800b054:	029b      	lsls	r3, r3, #10
 800b056:	697a      	ldr	r2, [r7, #20]
 800b058:	4313      	orrs	r3, r2
 800b05a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	697a      	ldr	r2, [r7, #20]
 800b060:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	68fa      	ldr	r2, [r7, #12]
 800b066:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b068:	683b      	ldr	r3, [r7, #0]
 800b06a:	685a      	ldr	r2, [r3, #4]
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	693a      	ldr	r2, [r7, #16]
 800b074:	621a      	str	r2, [r3, #32]
}
 800b076:	bf00      	nop
 800b078:	371c      	adds	r7, #28
 800b07a:	46bd      	mov	sp, r7
 800b07c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b080:	4770      	bx	lr
 800b082:	bf00      	nop
 800b084:	feff8fff 	.word	0xfeff8fff
 800b088:	40010000 	.word	0x40010000
 800b08c:	40010400 	.word	0x40010400
 800b090:	40014000 	.word	0x40014000
 800b094:	40014400 	.word	0x40014400
 800b098:	40014800 	.word	0x40014800

0800b09c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b09c:	b480      	push	{r7}
 800b09e:	b087      	sub	sp, #28
 800b0a0:	af00      	add	r7, sp, #0
 800b0a2:	60f8      	str	r0, [r7, #12]
 800b0a4:	60b9      	str	r1, [r7, #8]
 800b0a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	6a1b      	ldr	r3, [r3, #32]
 800b0ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	6a1b      	ldr	r3, [r3, #32]
 800b0b2:	f023 0201 	bic.w	r2, r3, #1
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	699b      	ldr	r3, [r3, #24]
 800b0be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b0c0:	693b      	ldr	r3, [r7, #16]
 800b0c2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800b0c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	011b      	lsls	r3, r3, #4
 800b0cc:	693a      	ldr	r2, [r7, #16]
 800b0ce:	4313      	orrs	r3, r2
 800b0d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b0d2:	697b      	ldr	r3, [r7, #20]
 800b0d4:	f023 030a 	bic.w	r3, r3, #10
 800b0d8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b0da:	697a      	ldr	r2, [r7, #20]
 800b0dc:	68bb      	ldr	r3, [r7, #8]
 800b0de:	4313      	orrs	r3, r2
 800b0e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	693a      	ldr	r2, [r7, #16]
 800b0e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	697a      	ldr	r2, [r7, #20]
 800b0ec:	621a      	str	r2, [r3, #32]
}
 800b0ee:	bf00      	nop
 800b0f0:	371c      	adds	r7, #28
 800b0f2:	46bd      	mov	sp, r7
 800b0f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0f8:	4770      	bx	lr

0800b0fa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b0fa:	b480      	push	{r7}
 800b0fc:	b087      	sub	sp, #28
 800b0fe:	af00      	add	r7, sp, #0
 800b100:	60f8      	str	r0, [r7, #12]
 800b102:	60b9      	str	r1, [r7, #8]
 800b104:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	6a1b      	ldr	r3, [r3, #32]
 800b10a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	6a1b      	ldr	r3, [r3, #32]
 800b110:	f023 0210 	bic.w	r2, r3, #16
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	699b      	ldr	r3, [r3, #24]
 800b11c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b11e:	693b      	ldr	r3, [r7, #16]
 800b120:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800b124:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	031b      	lsls	r3, r3, #12
 800b12a:	693a      	ldr	r2, [r7, #16]
 800b12c:	4313      	orrs	r3, r2
 800b12e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b130:	697b      	ldr	r3, [r7, #20]
 800b132:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800b136:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b138:	68bb      	ldr	r3, [r7, #8]
 800b13a:	011b      	lsls	r3, r3, #4
 800b13c:	697a      	ldr	r2, [r7, #20]
 800b13e:	4313      	orrs	r3, r2
 800b140:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	693a      	ldr	r2, [r7, #16]
 800b146:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	697a      	ldr	r2, [r7, #20]
 800b14c:	621a      	str	r2, [r3, #32]
}
 800b14e:	bf00      	nop
 800b150:	371c      	adds	r7, #28
 800b152:	46bd      	mov	sp, r7
 800b154:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b158:	4770      	bx	lr
	...

0800b15c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b15c:	b480      	push	{r7}
 800b15e:	b085      	sub	sp, #20
 800b160:	af00      	add	r7, sp, #0
 800b162:	6078      	str	r0, [r7, #4]
 800b164:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	689b      	ldr	r3, [r3, #8]
 800b16a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b16c:	68fa      	ldr	r2, [r7, #12]
 800b16e:	4b09      	ldr	r3, [pc, #36]	@ (800b194 <TIM_ITRx_SetConfig+0x38>)
 800b170:	4013      	ands	r3, r2
 800b172:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b174:	683a      	ldr	r2, [r7, #0]
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	4313      	orrs	r3, r2
 800b17a:	f043 0307 	orr.w	r3, r3, #7
 800b17e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	68fa      	ldr	r2, [r7, #12]
 800b184:	609a      	str	r2, [r3, #8]
}
 800b186:	bf00      	nop
 800b188:	3714      	adds	r7, #20
 800b18a:	46bd      	mov	sp, r7
 800b18c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b190:	4770      	bx	lr
 800b192:	bf00      	nop
 800b194:	ffcfff8f 	.word	0xffcfff8f

0800b198 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b198:	b480      	push	{r7}
 800b19a:	b087      	sub	sp, #28
 800b19c:	af00      	add	r7, sp, #0
 800b19e:	60f8      	str	r0, [r7, #12]
 800b1a0:	60b9      	str	r1, [r7, #8]
 800b1a2:	607a      	str	r2, [r7, #4]
 800b1a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	689b      	ldr	r3, [r3, #8]
 800b1aa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b1ac:	697b      	ldr	r3, [r7, #20]
 800b1ae:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b1b2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b1b4:	683b      	ldr	r3, [r7, #0]
 800b1b6:	021a      	lsls	r2, r3, #8
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	431a      	orrs	r2, r3
 800b1bc:	68bb      	ldr	r3, [r7, #8]
 800b1be:	4313      	orrs	r3, r2
 800b1c0:	697a      	ldr	r2, [r7, #20]
 800b1c2:	4313      	orrs	r3, r2
 800b1c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	697a      	ldr	r2, [r7, #20]
 800b1ca:	609a      	str	r2, [r3, #8]
}
 800b1cc:	bf00      	nop
 800b1ce:	371c      	adds	r7, #28
 800b1d0:	46bd      	mov	sp, r7
 800b1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1d6:	4770      	bx	lr

0800b1d8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b1d8:	b480      	push	{r7}
 800b1da:	b087      	sub	sp, #28
 800b1dc:	af00      	add	r7, sp, #0
 800b1de:	60f8      	str	r0, [r7, #12]
 800b1e0:	60b9      	str	r1, [r7, #8]
 800b1e2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b1e4:	68bb      	ldr	r3, [r7, #8]
 800b1e6:	f003 031f 	and.w	r3, r3, #31
 800b1ea:	2201      	movs	r2, #1
 800b1ec:	fa02 f303 	lsl.w	r3, r2, r3
 800b1f0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	6a1a      	ldr	r2, [r3, #32]
 800b1f6:	697b      	ldr	r3, [r7, #20]
 800b1f8:	43db      	mvns	r3, r3
 800b1fa:	401a      	ands	r2, r3
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	6a1a      	ldr	r2, [r3, #32]
 800b204:	68bb      	ldr	r3, [r7, #8]
 800b206:	f003 031f 	and.w	r3, r3, #31
 800b20a:	6879      	ldr	r1, [r7, #4]
 800b20c:	fa01 f303 	lsl.w	r3, r1, r3
 800b210:	431a      	orrs	r2, r3
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	621a      	str	r2, [r3, #32]
}
 800b216:	bf00      	nop
 800b218:	371c      	adds	r7, #28
 800b21a:	46bd      	mov	sp, r7
 800b21c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b220:	4770      	bx	lr
	...

0800b224 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b224:	b480      	push	{r7}
 800b226:	b085      	sub	sp, #20
 800b228:	af00      	add	r7, sp, #0
 800b22a:	6078      	str	r0, [r7, #4]
 800b22c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b234:	2b01      	cmp	r3, #1
 800b236:	d101      	bne.n	800b23c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b238:	2302      	movs	r3, #2
 800b23a:	e077      	b.n	800b32c <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	2201      	movs	r2, #1
 800b240:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	2202      	movs	r2, #2
 800b248:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	685b      	ldr	r3, [r3, #4]
 800b252:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	689b      	ldr	r3, [r3, #8]
 800b25a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	4a35      	ldr	r2, [pc, #212]	@ (800b338 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b262:	4293      	cmp	r3, r2
 800b264:	d004      	beq.n	800b270 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	4a34      	ldr	r2, [pc, #208]	@ (800b33c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b26c:	4293      	cmp	r3, r2
 800b26e:	d108      	bne.n	800b282 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800b276:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b278:	683b      	ldr	r3, [r7, #0]
 800b27a:	685b      	ldr	r3, [r3, #4]
 800b27c:	68fa      	ldr	r2, [r7, #12]
 800b27e:	4313      	orrs	r3, r2
 800b280:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b288:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b28a:	683b      	ldr	r3, [r7, #0]
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	68fa      	ldr	r2, [r7, #12]
 800b290:	4313      	orrs	r3, r2
 800b292:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	68fa      	ldr	r2, [r7, #12]
 800b29a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	4a25      	ldr	r2, [pc, #148]	@ (800b338 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b2a2:	4293      	cmp	r3, r2
 800b2a4:	d02c      	beq.n	800b300 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b2ae:	d027      	beq.n	800b300 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	4a22      	ldr	r2, [pc, #136]	@ (800b340 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800b2b6:	4293      	cmp	r3, r2
 800b2b8:	d022      	beq.n	800b300 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	4a21      	ldr	r2, [pc, #132]	@ (800b344 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800b2c0:	4293      	cmp	r3, r2
 800b2c2:	d01d      	beq.n	800b300 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	4a1f      	ldr	r2, [pc, #124]	@ (800b348 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800b2ca:	4293      	cmp	r3, r2
 800b2cc:	d018      	beq.n	800b300 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	4a1a      	ldr	r2, [pc, #104]	@ (800b33c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b2d4:	4293      	cmp	r3, r2
 800b2d6:	d013      	beq.n	800b300 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	4a1b      	ldr	r2, [pc, #108]	@ (800b34c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800b2de:	4293      	cmp	r3, r2
 800b2e0:	d00e      	beq.n	800b300 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	4a1a      	ldr	r2, [pc, #104]	@ (800b350 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800b2e8:	4293      	cmp	r3, r2
 800b2ea:	d009      	beq.n	800b300 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	4a18      	ldr	r2, [pc, #96]	@ (800b354 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800b2f2:	4293      	cmp	r3, r2
 800b2f4:	d004      	beq.n	800b300 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	4a17      	ldr	r2, [pc, #92]	@ (800b358 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800b2fc:	4293      	cmp	r3, r2
 800b2fe:	d10c      	bne.n	800b31a <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b300:	68bb      	ldr	r3, [r7, #8]
 800b302:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b306:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b308:	683b      	ldr	r3, [r7, #0]
 800b30a:	689b      	ldr	r3, [r3, #8]
 800b30c:	68ba      	ldr	r2, [r7, #8]
 800b30e:	4313      	orrs	r3, r2
 800b310:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	68ba      	ldr	r2, [r7, #8]
 800b318:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	2201      	movs	r2, #1
 800b31e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	2200      	movs	r2, #0
 800b326:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b32a:	2300      	movs	r3, #0
}
 800b32c:	4618      	mov	r0, r3
 800b32e:	3714      	adds	r7, #20
 800b330:	46bd      	mov	sp, r7
 800b332:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b336:	4770      	bx	lr
 800b338:	40010000 	.word	0x40010000
 800b33c:	40010400 	.word	0x40010400
 800b340:	40000400 	.word	0x40000400
 800b344:	40000800 	.word	0x40000800
 800b348:	40000c00 	.word	0x40000c00
 800b34c:	40001800 	.word	0x40001800
 800b350:	40014000 	.word	0x40014000
 800b354:	4000e000 	.word	0x4000e000
 800b358:	4000e400 	.word	0x4000e400

0800b35c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b35c:	b580      	push	{r7, lr}
 800b35e:	b082      	sub	sp, #8
 800b360:	af00      	add	r7, sp, #0
 800b362:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	2b00      	cmp	r3, #0
 800b368:	d101      	bne.n	800b36e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b36a:	2301      	movs	r3, #1
 800b36c:	e042      	b.n	800b3f4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b374:	2b00      	cmp	r3, #0
 800b376:	d106      	bne.n	800b386 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	2200      	movs	r2, #0
 800b37c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b380:	6878      	ldr	r0, [r7, #4]
 800b382:	f7f6 fc25 	bl	8001bd0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	2224      	movs	r2, #36	@ 0x24
 800b38a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	681a      	ldr	r2, [r3, #0]
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	f022 0201 	bic.w	r2, r2, #1
 800b39c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d002      	beq.n	800b3ac <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800b3a6:	6878      	ldr	r0, [r7, #4]
 800b3a8:	f000 fe94 	bl	800c0d4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b3ac:	6878      	ldr	r0, [r7, #4]
 800b3ae:	f000 f825 	bl	800b3fc <UART_SetConfig>
 800b3b2:	4603      	mov	r3, r0
 800b3b4:	2b01      	cmp	r3, #1
 800b3b6:	d101      	bne.n	800b3bc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800b3b8:	2301      	movs	r3, #1
 800b3ba:	e01b      	b.n	800b3f4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	685a      	ldr	r2, [r3, #4]
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800b3ca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	689a      	ldr	r2, [r3, #8]
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800b3da:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	681a      	ldr	r2, [r3, #0]
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	f042 0201 	orr.w	r2, r2, #1
 800b3ea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b3ec:	6878      	ldr	r0, [r7, #4]
 800b3ee:	f000 ff13 	bl	800c218 <UART_CheckIdleState>
 800b3f2:	4603      	mov	r3, r0
}
 800b3f4:	4618      	mov	r0, r3
 800b3f6:	3708      	adds	r7, #8
 800b3f8:	46bd      	mov	sp, r7
 800b3fa:	bd80      	pop	{r7, pc}

0800b3fc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b3fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b400:	b092      	sub	sp, #72	@ 0x48
 800b402:	af00      	add	r7, sp, #0
 800b404:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b406:	2300      	movs	r3, #0
 800b408:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b40c:	697b      	ldr	r3, [r7, #20]
 800b40e:	689a      	ldr	r2, [r3, #8]
 800b410:	697b      	ldr	r3, [r7, #20]
 800b412:	691b      	ldr	r3, [r3, #16]
 800b414:	431a      	orrs	r2, r3
 800b416:	697b      	ldr	r3, [r7, #20]
 800b418:	695b      	ldr	r3, [r3, #20]
 800b41a:	431a      	orrs	r2, r3
 800b41c:	697b      	ldr	r3, [r7, #20]
 800b41e:	69db      	ldr	r3, [r3, #28]
 800b420:	4313      	orrs	r3, r2
 800b422:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b424:	697b      	ldr	r3, [r7, #20]
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	681a      	ldr	r2, [r3, #0]
 800b42a:	4bbe      	ldr	r3, [pc, #760]	@ (800b724 <UART_SetConfig+0x328>)
 800b42c:	4013      	ands	r3, r2
 800b42e:	697a      	ldr	r2, [r7, #20]
 800b430:	6812      	ldr	r2, [r2, #0]
 800b432:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800b434:	430b      	orrs	r3, r1
 800b436:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b438:	697b      	ldr	r3, [r7, #20]
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	685b      	ldr	r3, [r3, #4]
 800b43e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800b442:	697b      	ldr	r3, [r7, #20]
 800b444:	68da      	ldr	r2, [r3, #12]
 800b446:	697b      	ldr	r3, [r7, #20]
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	430a      	orrs	r2, r1
 800b44c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b44e:	697b      	ldr	r3, [r7, #20]
 800b450:	699b      	ldr	r3, [r3, #24]
 800b452:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b454:	697b      	ldr	r3, [r7, #20]
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	4ab3      	ldr	r2, [pc, #716]	@ (800b728 <UART_SetConfig+0x32c>)
 800b45a:	4293      	cmp	r3, r2
 800b45c:	d004      	beq.n	800b468 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b45e:	697b      	ldr	r3, [r7, #20]
 800b460:	6a1b      	ldr	r3, [r3, #32]
 800b462:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b464:	4313      	orrs	r3, r2
 800b466:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b468:	697b      	ldr	r3, [r7, #20]
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	689a      	ldr	r2, [r3, #8]
 800b46e:	4baf      	ldr	r3, [pc, #700]	@ (800b72c <UART_SetConfig+0x330>)
 800b470:	4013      	ands	r3, r2
 800b472:	697a      	ldr	r2, [r7, #20]
 800b474:	6812      	ldr	r2, [r2, #0]
 800b476:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800b478:	430b      	orrs	r3, r1
 800b47a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b47c:	697b      	ldr	r3, [r7, #20]
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b482:	f023 010f 	bic.w	r1, r3, #15
 800b486:	697b      	ldr	r3, [r7, #20]
 800b488:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b48a:	697b      	ldr	r3, [r7, #20]
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	430a      	orrs	r2, r1
 800b490:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b492:	697b      	ldr	r3, [r7, #20]
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	4aa6      	ldr	r2, [pc, #664]	@ (800b730 <UART_SetConfig+0x334>)
 800b498:	4293      	cmp	r3, r2
 800b49a:	d177      	bne.n	800b58c <UART_SetConfig+0x190>
 800b49c:	4ba5      	ldr	r3, [pc, #660]	@ (800b734 <UART_SetConfig+0x338>)
 800b49e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b4a0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b4a4:	2b28      	cmp	r3, #40	@ 0x28
 800b4a6:	d86d      	bhi.n	800b584 <UART_SetConfig+0x188>
 800b4a8:	a201      	add	r2, pc, #4	@ (adr r2, 800b4b0 <UART_SetConfig+0xb4>)
 800b4aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4ae:	bf00      	nop
 800b4b0:	0800b555 	.word	0x0800b555
 800b4b4:	0800b585 	.word	0x0800b585
 800b4b8:	0800b585 	.word	0x0800b585
 800b4bc:	0800b585 	.word	0x0800b585
 800b4c0:	0800b585 	.word	0x0800b585
 800b4c4:	0800b585 	.word	0x0800b585
 800b4c8:	0800b585 	.word	0x0800b585
 800b4cc:	0800b585 	.word	0x0800b585
 800b4d0:	0800b55d 	.word	0x0800b55d
 800b4d4:	0800b585 	.word	0x0800b585
 800b4d8:	0800b585 	.word	0x0800b585
 800b4dc:	0800b585 	.word	0x0800b585
 800b4e0:	0800b585 	.word	0x0800b585
 800b4e4:	0800b585 	.word	0x0800b585
 800b4e8:	0800b585 	.word	0x0800b585
 800b4ec:	0800b585 	.word	0x0800b585
 800b4f0:	0800b565 	.word	0x0800b565
 800b4f4:	0800b585 	.word	0x0800b585
 800b4f8:	0800b585 	.word	0x0800b585
 800b4fc:	0800b585 	.word	0x0800b585
 800b500:	0800b585 	.word	0x0800b585
 800b504:	0800b585 	.word	0x0800b585
 800b508:	0800b585 	.word	0x0800b585
 800b50c:	0800b585 	.word	0x0800b585
 800b510:	0800b56d 	.word	0x0800b56d
 800b514:	0800b585 	.word	0x0800b585
 800b518:	0800b585 	.word	0x0800b585
 800b51c:	0800b585 	.word	0x0800b585
 800b520:	0800b585 	.word	0x0800b585
 800b524:	0800b585 	.word	0x0800b585
 800b528:	0800b585 	.word	0x0800b585
 800b52c:	0800b585 	.word	0x0800b585
 800b530:	0800b575 	.word	0x0800b575
 800b534:	0800b585 	.word	0x0800b585
 800b538:	0800b585 	.word	0x0800b585
 800b53c:	0800b585 	.word	0x0800b585
 800b540:	0800b585 	.word	0x0800b585
 800b544:	0800b585 	.word	0x0800b585
 800b548:	0800b585 	.word	0x0800b585
 800b54c:	0800b585 	.word	0x0800b585
 800b550:	0800b57d 	.word	0x0800b57d
 800b554:	2301      	movs	r3, #1
 800b556:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b55a:	e326      	b.n	800bbaa <UART_SetConfig+0x7ae>
 800b55c:	2304      	movs	r3, #4
 800b55e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b562:	e322      	b.n	800bbaa <UART_SetConfig+0x7ae>
 800b564:	2308      	movs	r3, #8
 800b566:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b56a:	e31e      	b.n	800bbaa <UART_SetConfig+0x7ae>
 800b56c:	2310      	movs	r3, #16
 800b56e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b572:	e31a      	b.n	800bbaa <UART_SetConfig+0x7ae>
 800b574:	2320      	movs	r3, #32
 800b576:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b57a:	e316      	b.n	800bbaa <UART_SetConfig+0x7ae>
 800b57c:	2340      	movs	r3, #64	@ 0x40
 800b57e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b582:	e312      	b.n	800bbaa <UART_SetConfig+0x7ae>
 800b584:	2380      	movs	r3, #128	@ 0x80
 800b586:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b58a:	e30e      	b.n	800bbaa <UART_SetConfig+0x7ae>
 800b58c:	697b      	ldr	r3, [r7, #20]
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	4a69      	ldr	r2, [pc, #420]	@ (800b738 <UART_SetConfig+0x33c>)
 800b592:	4293      	cmp	r3, r2
 800b594:	d130      	bne.n	800b5f8 <UART_SetConfig+0x1fc>
 800b596:	4b67      	ldr	r3, [pc, #412]	@ (800b734 <UART_SetConfig+0x338>)
 800b598:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b59a:	f003 0307 	and.w	r3, r3, #7
 800b59e:	2b05      	cmp	r3, #5
 800b5a0:	d826      	bhi.n	800b5f0 <UART_SetConfig+0x1f4>
 800b5a2:	a201      	add	r2, pc, #4	@ (adr r2, 800b5a8 <UART_SetConfig+0x1ac>)
 800b5a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5a8:	0800b5c1 	.word	0x0800b5c1
 800b5ac:	0800b5c9 	.word	0x0800b5c9
 800b5b0:	0800b5d1 	.word	0x0800b5d1
 800b5b4:	0800b5d9 	.word	0x0800b5d9
 800b5b8:	0800b5e1 	.word	0x0800b5e1
 800b5bc:	0800b5e9 	.word	0x0800b5e9
 800b5c0:	2300      	movs	r3, #0
 800b5c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b5c6:	e2f0      	b.n	800bbaa <UART_SetConfig+0x7ae>
 800b5c8:	2304      	movs	r3, #4
 800b5ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b5ce:	e2ec      	b.n	800bbaa <UART_SetConfig+0x7ae>
 800b5d0:	2308      	movs	r3, #8
 800b5d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b5d6:	e2e8      	b.n	800bbaa <UART_SetConfig+0x7ae>
 800b5d8:	2310      	movs	r3, #16
 800b5da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b5de:	e2e4      	b.n	800bbaa <UART_SetConfig+0x7ae>
 800b5e0:	2320      	movs	r3, #32
 800b5e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b5e6:	e2e0      	b.n	800bbaa <UART_SetConfig+0x7ae>
 800b5e8:	2340      	movs	r3, #64	@ 0x40
 800b5ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b5ee:	e2dc      	b.n	800bbaa <UART_SetConfig+0x7ae>
 800b5f0:	2380      	movs	r3, #128	@ 0x80
 800b5f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b5f6:	e2d8      	b.n	800bbaa <UART_SetConfig+0x7ae>
 800b5f8:	697b      	ldr	r3, [r7, #20]
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	4a4f      	ldr	r2, [pc, #316]	@ (800b73c <UART_SetConfig+0x340>)
 800b5fe:	4293      	cmp	r3, r2
 800b600:	d130      	bne.n	800b664 <UART_SetConfig+0x268>
 800b602:	4b4c      	ldr	r3, [pc, #304]	@ (800b734 <UART_SetConfig+0x338>)
 800b604:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b606:	f003 0307 	and.w	r3, r3, #7
 800b60a:	2b05      	cmp	r3, #5
 800b60c:	d826      	bhi.n	800b65c <UART_SetConfig+0x260>
 800b60e:	a201      	add	r2, pc, #4	@ (adr r2, 800b614 <UART_SetConfig+0x218>)
 800b610:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b614:	0800b62d 	.word	0x0800b62d
 800b618:	0800b635 	.word	0x0800b635
 800b61c:	0800b63d 	.word	0x0800b63d
 800b620:	0800b645 	.word	0x0800b645
 800b624:	0800b64d 	.word	0x0800b64d
 800b628:	0800b655 	.word	0x0800b655
 800b62c:	2300      	movs	r3, #0
 800b62e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b632:	e2ba      	b.n	800bbaa <UART_SetConfig+0x7ae>
 800b634:	2304      	movs	r3, #4
 800b636:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b63a:	e2b6      	b.n	800bbaa <UART_SetConfig+0x7ae>
 800b63c:	2308      	movs	r3, #8
 800b63e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b642:	e2b2      	b.n	800bbaa <UART_SetConfig+0x7ae>
 800b644:	2310      	movs	r3, #16
 800b646:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b64a:	e2ae      	b.n	800bbaa <UART_SetConfig+0x7ae>
 800b64c:	2320      	movs	r3, #32
 800b64e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b652:	e2aa      	b.n	800bbaa <UART_SetConfig+0x7ae>
 800b654:	2340      	movs	r3, #64	@ 0x40
 800b656:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b65a:	e2a6      	b.n	800bbaa <UART_SetConfig+0x7ae>
 800b65c:	2380      	movs	r3, #128	@ 0x80
 800b65e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b662:	e2a2      	b.n	800bbaa <UART_SetConfig+0x7ae>
 800b664:	697b      	ldr	r3, [r7, #20]
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	4a35      	ldr	r2, [pc, #212]	@ (800b740 <UART_SetConfig+0x344>)
 800b66a:	4293      	cmp	r3, r2
 800b66c:	d130      	bne.n	800b6d0 <UART_SetConfig+0x2d4>
 800b66e:	4b31      	ldr	r3, [pc, #196]	@ (800b734 <UART_SetConfig+0x338>)
 800b670:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b672:	f003 0307 	and.w	r3, r3, #7
 800b676:	2b05      	cmp	r3, #5
 800b678:	d826      	bhi.n	800b6c8 <UART_SetConfig+0x2cc>
 800b67a:	a201      	add	r2, pc, #4	@ (adr r2, 800b680 <UART_SetConfig+0x284>)
 800b67c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b680:	0800b699 	.word	0x0800b699
 800b684:	0800b6a1 	.word	0x0800b6a1
 800b688:	0800b6a9 	.word	0x0800b6a9
 800b68c:	0800b6b1 	.word	0x0800b6b1
 800b690:	0800b6b9 	.word	0x0800b6b9
 800b694:	0800b6c1 	.word	0x0800b6c1
 800b698:	2300      	movs	r3, #0
 800b69a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b69e:	e284      	b.n	800bbaa <UART_SetConfig+0x7ae>
 800b6a0:	2304      	movs	r3, #4
 800b6a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b6a6:	e280      	b.n	800bbaa <UART_SetConfig+0x7ae>
 800b6a8:	2308      	movs	r3, #8
 800b6aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b6ae:	e27c      	b.n	800bbaa <UART_SetConfig+0x7ae>
 800b6b0:	2310      	movs	r3, #16
 800b6b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b6b6:	e278      	b.n	800bbaa <UART_SetConfig+0x7ae>
 800b6b8:	2320      	movs	r3, #32
 800b6ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b6be:	e274      	b.n	800bbaa <UART_SetConfig+0x7ae>
 800b6c0:	2340      	movs	r3, #64	@ 0x40
 800b6c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b6c6:	e270      	b.n	800bbaa <UART_SetConfig+0x7ae>
 800b6c8:	2380      	movs	r3, #128	@ 0x80
 800b6ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b6ce:	e26c      	b.n	800bbaa <UART_SetConfig+0x7ae>
 800b6d0:	697b      	ldr	r3, [r7, #20]
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	4a1b      	ldr	r2, [pc, #108]	@ (800b744 <UART_SetConfig+0x348>)
 800b6d6:	4293      	cmp	r3, r2
 800b6d8:	d142      	bne.n	800b760 <UART_SetConfig+0x364>
 800b6da:	4b16      	ldr	r3, [pc, #88]	@ (800b734 <UART_SetConfig+0x338>)
 800b6dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b6de:	f003 0307 	and.w	r3, r3, #7
 800b6e2:	2b05      	cmp	r3, #5
 800b6e4:	d838      	bhi.n	800b758 <UART_SetConfig+0x35c>
 800b6e6:	a201      	add	r2, pc, #4	@ (adr r2, 800b6ec <UART_SetConfig+0x2f0>)
 800b6e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6ec:	0800b705 	.word	0x0800b705
 800b6f0:	0800b70d 	.word	0x0800b70d
 800b6f4:	0800b715 	.word	0x0800b715
 800b6f8:	0800b71d 	.word	0x0800b71d
 800b6fc:	0800b749 	.word	0x0800b749
 800b700:	0800b751 	.word	0x0800b751
 800b704:	2300      	movs	r3, #0
 800b706:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b70a:	e24e      	b.n	800bbaa <UART_SetConfig+0x7ae>
 800b70c:	2304      	movs	r3, #4
 800b70e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b712:	e24a      	b.n	800bbaa <UART_SetConfig+0x7ae>
 800b714:	2308      	movs	r3, #8
 800b716:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b71a:	e246      	b.n	800bbaa <UART_SetConfig+0x7ae>
 800b71c:	2310      	movs	r3, #16
 800b71e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b722:	e242      	b.n	800bbaa <UART_SetConfig+0x7ae>
 800b724:	cfff69f3 	.word	0xcfff69f3
 800b728:	58000c00 	.word	0x58000c00
 800b72c:	11fff4ff 	.word	0x11fff4ff
 800b730:	40011000 	.word	0x40011000
 800b734:	58024400 	.word	0x58024400
 800b738:	40004400 	.word	0x40004400
 800b73c:	40004800 	.word	0x40004800
 800b740:	40004c00 	.word	0x40004c00
 800b744:	40005000 	.word	0x40005000
 800b748:	2320      	movs	r3, #32
 800b74a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b74e:	e22c      	b.n	800bbaa <UART_SetConfig+0x7ae>
 800b750:	2340      	movs	r3, #64	@ 0x40
 800b752:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b756:	e228      	b.n	800bbaa <UART_SetConfig+0x7ae>
 800b758:	2380      	movs	r3, #128	@ 0x80
 800b75a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b75e:	e224      	b.n	800bbaa <UART_SetConfig+0x7ae>
 800b760:	697b      	ldr	r3, [r7, #20]
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	4ab1      	ldr	r2, [pc, #708]	@ (800ba2c <UART_SetConfig+0x630>)
 800b766:	4293      	cmp	r3, r2
 800b768:	d176      	bne.n	800b858 <UART_SetConfig+0x45c>
 800b76a:	4bb1      	ldr	r3, [pc, #708]	@ (800ba30 <UART_SetConfig+0x634>)
 800b76c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b76e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b772:	2b28      	cmp	r3, #40	@ 0x28
 800b774:	d86c      	bhi.n	800b850 <UART_SetConfig+0x454>
 800b776:	a201      	add	r2, pc, #4	@ (adr r2, 800b77c <UART_SetConfig+0x380>)
 800b778:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b77c:	0800b821 	.word	0x0800b821
 800b780:	0800b851 	.word	0x0800b851
 800b784:	0800b851 	.word	0x0800b851
 800b788:	0800b851 	.word	0x0800b851
 800b78c:	0800b851 	.word	0x0800b851
 800b790:	0800b851 	.word	0x0800b851
 800b794:	0800b851 	.word	0x0800b851
 800b798:	0800b851 	.word	0x0800b851
 800b79c:	0800b829 	.word	0x0800b829
 800b7a0:	0800b851 	.word	0x0800b851
 800b7a4:	0800b851 	.word	0x0800b851
 800b7a8:	0800b851 	.word	0x0800b851
 800b7ac:	0800b851 	.word	0x0800b851
 800b7b0:	0800b851 	.word	0x0800b851
 800b7b4:	0800b851 	.word	0x0800b851
 800b7b8:	0800b851 	.word	0x0800b851
 800b7bc:	0800b831 	.word	0x0800b831
 800b7c0:	0800b851 	.word	0x0800b851
 800b7c4:	0800b851 	.word	0x0800b851
 800b7c8:	0800b851 	.word	0x0800b851
 800b7cc:	0800b851 	.word	0x0800b851
 800b7d0:	0800b851 	.word	0x0800b851
 800b7d4:	0800b851 	.word	0x0800b851
 800b7d8:	0800b851 	.word	0x0800b851
 800b7dc:	0800b839 	.word	0x0800b839
 800b7e0:	0800b851 	.word	0x0800b851
 800b7e4:	0800b851 	.word	0x0800b851
 800b7e8:	0800b851 	.word	0x0800b851
 800b7ec:	0800b851 	.word	0x0800b851
 800b7f0:	0800b851 	.word	0x0800b851
 800b7f4:	0800b851 	.word	0x0800b851
 800b7f8:	0800b851 	.word	0x0800b851
 800b7fc:	0800b841 	.word	0x0800b841
 800b800:	0800b851 	.word	0x0800b851
 800b804:	0800b851 	.word	0x0800b851
 800b808:	0800b851 	.word	0x0800b851
 800b80c:	0800b851 	.word	0x0800b851
 800b810:	0800b851 	.word	0x0800b851
 800b814:	0800b851 	.word	0x0800b851
 800b818:	0800b851 	.word	0x0800b851
 800b81c:	0800b849 	.word	0x0800b849
 800b820:	2301      	movs	r3, #1
 800b822:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b826:	e1c0      	b.n	800bbaa <UART_SetConfig+0x7ae>
 800b828:	2304      	movs	r3, #4
 800b82a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b82e:	e1bc      	b.n	800bbaa <UART_SetConfig+0x7ae>
 800b830:	2308      	movs	r3, #8
 800b832:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b836:	e1b8      	b.n	800bbaa <UART_SetConfig+0x7ae>
 800b838:	2310      	movs	r3, #16
 800b83a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b83e:	e1b4      	b.n	800bbaa <UART_SetConfig+0x7ae>
 800b840:	2320      	movs	r3, #32
 800b842:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b846:	e1b0      	b.n	800bbaa <UART_SetConfig+0x7ae>
 800b848:	2340      	movs	r3, #64	@ 0x40
 800b84a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b84e:	e1ac      	b.n	800bbaa <UART_SetConfig+0x7ae>
 800b850:	2380      	movs	r3, #128	@ 0x80
 800b852:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b856:	e1a8      	b.n	800bbaa <UART_SetConfig+0x7ae>
 800b858:	697b      	ldr	r3, [r7, #20]
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	4a75      	ldr	r2, [pc, #468]	@ (800ba34 <UART_SetConfig+0x638>)
 800b85e:	4293      	cmp	r3, r2
 800b860:	d130      	bne.n	800b8c4 <UART_SetConfig+0x4c8>
 800b862:	4b73      	ldr	r3, [pc, #460]	@ (800ba30 <UART_SetConfig+0x634>)
 800b864:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b866:	f003 0307 	and.w	r3, r3, #7
 800b86a:	2b05      	cmp	r3, #5
 800b86c:	d826      	bhi.n	800b8bc <UART_SetConfig+0x4c0>
 800b86e:	a201      	add	r2, pc, #4	@ (adr r2, 800b874 <UART_SetConfig+0x478>)
 800b870:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b874:	0800b88d 	.word	0x0800b88d
 800b878:	0800b895 	.word	0x0800b895
 800b87c:	0800b89d 	.word	0x0800b89d
 800b880:	0800b8a5 	.word	0x0800b8a5
 800b884:	0800b8ad 	.word	0x0800b8ad
 800b888:	0800b8b5 	.word	0x0800b8b5
 800b88c:	2300      	movs	r3, #0
 800b88e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b892:	e18a      	b.n	800bbaa <UART_SetConfig+0x7ae>
 800b894:	2304      	movs	r3, #4
 800b896:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b89a:	e186      	b.n	800bbaa <UART_SetConfig+0x7ae>
 800b89c:	2308      	movs	r3, #8
 800b89e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b8a2:	e182      	b.n	800bbaa <UART_SetConfig+0x7ae>
 800b8a4:	2310      	movs	r3, #16
 800b8a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b8aa:	e17e      	b.n	800bbaa <UART_SetConfig+0x7ae>
 800b8ac:	2320      	movs	r3, #32
 800b8ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b8b2:	e17a      	b.n	800bbaa <UART_SetConfig+0x7ae>
 800b8b4:	2340      	movs	r3, #64	@ 0x40
 800b8b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b8ba:	e176      	b.n	800bbaa <UART_SetConfig+0x7ae>
 800b8bc:	2380      	movs	r3, #128	@ 0x80
 800b8be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b8c2:	e172      	b.n	800bbaa <UART_SetConfig+0x7ae>
 800b8c4:	697b      	ldr	r3, [r7, #20]
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	4a5b      	ldr	r2, [pc, #364]	@ (800ba38 <UART_SetConfig+0x63c>)
 800b8ca:	4293      	cmp	r3, r2
 800b8cc:	d130      	bne.n	800b930 <UART_SetConfig+0x534>
 800b8ce:	4b58      	ldr	r3, [pc, #352]	@ (800ba30 <UART_SetConfig+0x634>)
 800b8d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b8d2:	f003 0307 	and.w	r3, r3, #7
 800b8d6:	2b05      	cmp	r3, #5
 800b8d8:	d826      	bhi.n	800b928 <UART_SetConfig+0x52c>
 800b8da:	a201      	add	r2, pc, #4	@ (adr r2, 800b8e0 <UART_SetConfig+0x4e4>)
 800b8dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8e0:	0800b8f9 	.word	0x0800b8f9
 800b8e4:	0800b901 	.word	0x0800b901
 800b8e8:	0800b909 	.word	0x0800b909
 800b8ec:	0800b911 	.word	0x0800b911
 800b8f0:	0800b919 	.word	0x0800b919
 800b8f4:	0800b921 	.word	0x0800b921
 800b8f8:	2300      	movs	r3, #0
 800b8fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b8fe:	e154      	b.n	800bbaa <UART_SetConfig+0x7ae>
 800b900:	2304      	movs	r3, #4
 800b902:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b906:	e150      	b.n	800bbaa <UART_SetConfig+0x7ae>
 800b908:	2308      	movs	r3, #8
 800b90a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b90e:	e14c      	b.n	800bbaa <UART_SetConfig+0x7ae>
 800b910:	2310      	movs	r3, #16
 800b912:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b916:	e148      	b.n	800bbaa <UART_SetConfig+0x7ae>
 800b918:	2320      	movs	r3, #32
 800b91a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b91e:	e144      	b.n	800bbaa <UART_SetConfig+0x7ae>
 800b920:	2340      	movs	r3, #64	@ 0x40
 800b922:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b926:	e140      	b.n	800bbaa <UART_SetConfig+0x7ae>
 800b928:	2380      	movs	r3, #128	@ 0x80
 800b92a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b92e:	e13c      	b.n	800bbaa <UART_SetConfig+0x7ae>
 800b930:	697b      	ldr	r3, [r7, #20]
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	4a41      	ldr	r2, [pc, #260]	@ (800ba3c <UART_SetConfig+0x640>)
 800b936:	4293      	cmp	r3, r2
 800b938:	f040 8082 	bne.w	800ba40 <UART_SetConfig+0x644>
 800b93c:	4b3c      	ldr	r3, [pc, #240]	@ (800ba30 <UART_SetConfig+0x634>)
 800b93e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b940:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b944:	2b28      	cmp	r3, #40	@ 0x28
 800b946:	d86d      	bhi.n	800ba24 <UART_SetConfig+0x628>
 800b948:	a201      	add	r2, pc, #4	@ (adr r2, 800b950 <UART_SetConfig+0x554>)
 800b94a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b94e:	bf00      	nop
 800b950:	0800b9f5 	.word	0x0800b9f5
 800b954:	0800ba25 	.word	0x0800ba25
 800b958:	0800ba25 	.word	0x0800ba25
 800b95c:	0800ba25 	.word	0x0800ba25
 800b960:	0800ba25 	.word	0x0800ba25
 800b964:	0800ba25 	.word	0x0800ba25
 800b968:	0800ba25 	.word	0x0800ba25
 800b96c:	0800ba25 	.word	0x0800ba25
 800b970:	0800b9fd 	.word	0x0800b9fd
 800b974:	0800ba25 	.word	0x0800ba25
 800b978:	0800ba25 	.word	0x0800ba25
 800b97c:	0800ba25 	.word	0x0800ba25
 800b980:	0800ba25 	.word	0x0800ba25
 800b984:	0800ba25 	.word	0x0800ba25
 800b988:	0800ba25 	.word	0x0800ba25
 800b98c:	0800ba25 	.word	0x0800ba25
 800b990:	0800ba05 	.word	0x0800ba05
 800b994:	0800ba25 	.word	0x0800ba25
 800b998:	0800ba25 	.word	0x0800ba25
 800b99c:	0800ba25 	.word	0x0800ba25
 800b9a0:	0800ba25 	.word	0x0800ba25
 800b9a4:	0800ba25 	.word	0x0800ba25
 800b9a8:	0800ba25 	.word	0x0800ba25
 800b9ac:	0800ba25 	.word	0x0800ba25
 800b9b0:	0800ba0d 	.word	0x0800ba0d
 800b9b4:	0800ba25 	.word	0x0800ba25
 800b9b8:	0800ba25 	.word	0x0800ba25
 800b9bc:	0800ba25 	.word	0x0800ba25
 800b9c0:	0800ba25 	.word	0x0800ba25
 800b9c4:	0800ba25 	.word	0x0800ba25
 800b9c8:	0800ba25 	.word	0x0800ba25
 800b9cc:	0800ba25 	.word	0x0800ba25
 800b9d0:	0800ba15 	.word	0x0800ba15
 800b9d4:	0800ba25 	.word	0x0800ba25
 800b9d8:	0800ba25 	.word	0x0800ba25
 800b9dc:	0800ba25 	.word	0x0800ba25
 800b9e0:	0800ba25 	.word	0x0800ba25
 800b9e4:	0800ba25 	.word	0x0800ba25
 800b9e8:	0800ba25 	.word	0x0800ba25
 800b9ec:	0800ba25 	.word	0x0800ba25
 800b9f0:	0800ba1d 	.word	0x0800ba1d
 800b9f4:	2301      	movs	r3, #1
 800b9f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b9fa:	e0d6      	b.n	800bbaa <UART_SetConfig+0x7ae>
 800b9fc:	2304      	movs	r3, #4
 800b9fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ba02:	e0d2      	b.n	800bbaa <UART_SetConfig+0x7ae>
 800ba04:	2308      	movs	r3, #8
 800ba06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ba0a:	e0ce      	b.n	800bbaa <UART_SetConfig+0x7ae>
 800ba0c:	2310      	movs	r3, #16
 800ba0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ba12:	e0ca      	b.n	800bbaa <UART_SetConfig+0x7ae>
 800ba14:	2320      	movs	r3, #32
 800ba16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ba1a:	e0c6      	b.n	800bbaa <UART_SetConfig+0x7ae>
 800ba1c:	2340      	movs	r3, #64	@ 0x40
 800ba1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ba22:	e0c2      	b.n	800bbaa <UART_SetConfig+0x7ae>
 800ba24:	2380      	movs	r3, #128	@ 0x80
 800ba26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ba2a:	e0be      	b.n	800bbaa <UART_SetConfig+0x7ae>
 800ba2c:	40011400 	.word	0x40011400
 800ba30:	58024400 	.word	0x58024400
 800ba34:	40007800 	.word	0x40007800
 800ba38:	40007c00 	.word	0x40007c00
 800ba3c:	40011800 	.word	0x40011800
 800ba40:	697b      	ldr	r3, [r7, #20]
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	4aad      	ldr	r2, [pc, #692]	@ (800bcfc <UART_SetConfig+0x900>)
 800ba46:	4293      	cmp	r3, r2
 800ba48:	d176      	bne.n	800bb38 <UART_SetConfig+0x73c>
 800ba4a:	4bad      	ldr	r3, [pc, #692]	@ (800bd00 <UART_SetConfig+0x904>)
 800ba4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ba4e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ba52:	2b28      	cmp	r3, #40	@ 0x28
 800ba54:	d86c      	bhi.n	800bb30 <UART_SetConfig+0x734>
 800ba56:	a201      	add	r2, pc, #4	@ (adr r2, 800ba5c <UART_SetConfig+0x660>)
 800ba58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba5c:	0800bb01 	.word	0x0800bb01
 800ba60:	0800bb31 	.word	0x0800bb31
 800ba64:	0800bb31 	.word	0x0800bb31
 800ba68:	0800bb31 	.word	0x0800bb31
 800ba6c:	0800bb31 	.word	0x0800bb31
 800ba70:	0800bb31 	.word	0x0800bb31
 800ba74:	0800bb31 	.word	0x0800bb31
 800ba78:	0800bb31 	.word	0x0800bb31
 800ba7c:	0800bb09 	.word	0x0800bb09
 800ba80:	0800bb31 	.word	0x0800bb31
 800ba84:	0800bb31 	.word	0x0800bb31
 800ba88:	0800bb31 	.word	0x0800bb31
 800ba8c:	0800bb31 	.word	0x0800bb31
 800ba90:	0800bb31 	.word	0x0800bb31
 800ba94:	0800bb31 	.word	0x0800bb31
 800ba98:	0800bb31 	.word	0x0800bb31
 800ba9c:	0800bb11 	.word	0x0800bb11
 800baa0:	0800bb31 	.word	0x0800bb31
 800baa4:	0800bb31 	.word	0x0800bb31
 800baa8:	0800bb31 	.word	0x0800bb31
 800baac:	0800bb31 	.word	0x0800bb31
 800bab0:	0800bb31 	.word	0x0800bb31
 800bab4:	0800bb31 	.word	0x0800bb31
 800bab8:	0800bb31 	.word	0x0800bb31
 800babc:	0800bb19 	.word	0x0800bb19
 800bac0:	0800bb31 	.word	0x0800bb31
 800bac4:	0800bb31 	.word	0x0800bb31
 800bac8:	0800bb31 	.word	0x0800bb31
 800bacc:	0800bb31 	.word	0x0800bb31
 800bad0:	0800bb31 	.word	0x0800bb31
 800bad4:	0800bb31 	.word	0x0800bb31
 800bad8:	0800bb31 	.word	0x0800bb31
 800badc:	0800bb21 	.word	0x0800bb21
 800bae0:	0800bb31 	.word	0x0800bb31
 800bae4:	0800bb31 	.word	0x0800bb31
 800bae8:	0800bb31 	.word	0x0800bb31
 800baec:	0800bb31 	.word	0x0800bb31
 800baf0:	0800bb31 	.word	0x0800bb31
 800baf4:	0800bb31 	.word	0x0800bb31
 800baf8:	0800bb31 	.word	0x0800bb31
 800bafc:	0800bb29 	.word	0x0800bb29
 800bb00:	2301      	movs	r3, #1
 800bb02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bb06:	e050      	b.n	800bbaa <UART_SetConfig+0x7ae>
 800bb08:	2304      	movs	r3, #4
 800bb0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bb0e:	e04c      	b.n	800bbaa <UART_SetConfig+0x7ae>
 800bb10:	2308      	movs	r3, #8
 800bb12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bb16:	e048      	b.n	800bbaa <UART_SetConfig+0x7ae>
 800bb18:	2310      	movs	r3, #16
 800bb1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bb1e:	e044      	b.n	800bbaa <UART_SetConfig+0x7ae>
 800bb20:	2320      	movs	r3, #32
 800bb22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bb26:	e040      	b.n	800bbaa <UART_SetConfig+0x7ae>
 800bb28:	2340      	movs	r3, #64	@ 0x40
 800bb2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bb2e:	e03c      	b.n	800bbaa <UART_SetConfig+0x7ae>
 800bb30:	2380      	movs	r3, #128	@ 0x80
 800bb32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bb36:	e038      	b.n	800bbaa <UART_SetConfig+0x7ae>
 800bb38:	697b      	ldr	r3, [r7, #20]
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	4a71      	ldr	r2, [pc, #452]	@ (800bd04 <UART_SetConfig+0x908>)
 800bb3e:	4293      	cmp	r3, r2
 800bb40:	d130      	bne.n	800bba4 <UART_SetConfig+0x7a8>
 800bb42:	4b6f      	ldr	r3, [pc, #444]	@ (800bd00 <UART_SetConfig+0x904>)
 800bb44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bb46:	f003 0307 	and.w	r3, r3, #7
 800bb4a:	2b05      	cmp	r3, #5
 800bb4c:	d826      	bhi.n	800bb9c <UART_SetConfig+0x7a0>
 800bb4e:	a201      	add	r2, pc, #4	@ (adr r2, 800bb54 <UART_SetConfig+0x758>)
 800bb50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb54:	0800bb6d 	.word	0x0800bb6d
 800bb58:	0800bb75 	.word	0x0800bb75
 800bb5c:	0800bb7d 	.word	0x0800bb7d
 800bb60:	0800bb85 	.word	0x0800bb85
 800bb64:	0800bb8d 	.word	0x0800bb8d
 800bb68:	0800bb95 	.word	0x0800bb95
 800bb6c:	2302      	movs	r3, #2
 800bb6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bb72:	e01a      	b.n	800bbaa <UART_SetConfig+0x7ae>
 800bb74:	2304      	movs	r3, #4
 800bb76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bb7a:	e016      	b.n	800bbaa <UART_SetConfig+0x7ae>
 800bb7c:	2308      	movs	r3, #8
 800bb7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bb82:	e012      	b.n	800bbaa <UART_SetConfig+0x7ae>
 800bb84:	2310      	movs	r3, #16
 800bb86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bb8a:	e00e      	b.n	800bbaa <UART_SetConfig+0x7ae>
 800bb8c:	2320      	movs	r3, #32
 800bb8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bb92:	e00a      	b.n	800bbaa <UART_SetConfig+0x7ae>
 800bb94:	2340      	movs	r3, #64	@ 0x40
 800bb96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bb9a:	e006      	b.n	800bbaa <UART_SetConfig+0x7ae>
 800bb9c:	2380      	movs	r3, #128	@ 0x80
 800bb9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bba2:	e002      	b.n	800bbaa <UART_SetConfig+0x7ae>
 800bba4:	2380      	movs	r3, #128	@ 0x80
 800bba6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800bbaa:	697b      	ldr	r3, [r7, #20]
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	4a55      	ldr	r2, [pc, #340]	@ (800bd04 <UART_SetConfig+0x908>)
 800bbb0:	4293      	cmp	r3, r2
 800bbb2:	f040 80f8 	bne.w	800bda6 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800bbb6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800bbba:	2b20      	cmp	r3, #32
 800bbbc:	dc46      	bgt.n	800bc4c <UART_SetConfig+0x850>
 800bbbe:	2b02      	cmp	r3, #2
 800bbc0:	db75      	blt.n	800bcae <UART_SetConfig+0x8b2>
 800bbc2:	3b02      	subs	r3, #2
 800bbc4:	2b1e      	cmp	r3, #30
 800bbc6:	d872      	bhi.n	800bcae <UART_SetConfig+0x8b2>
 800bbc8:	a201      	add	r2, pc, #4	@ (adr r2, 800bbd0 <UART_SetConfig+0x7d4>)
 800bbca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbce:	bf00      	nop
 800bbd0:	0800bc53 	.word	0x0800bc53
 800bbd4:	0800bcaf 	.word	0x0800bcaf
 800bbd8:	0800bc5b 	.word	0x0800bc5b
 800bbdc:	0800bcaf 	.word	0x0800bcaf
 800bbe0:	0800bcaf 	.word	0x0800bcaf
 800bbe4:	0800bcaf 	.word	0x0800bcaf
 800bbe8:	0800bc6b 	.word	0x0800bc6b
 800bbec:	0800bcaf 	.word	0x0800bcaf
 800bbf0:	0800bcaf 	.word	0x0800bcaf
 800bbf4:	0800bcaf 	.word	0x0800bcaf
 800bbf8:	0800bcaf 	.word	0x0800bcaf
 800bbfc:	0800bcaf 	.word	0x0800bcaf
 800bc00:	0800bcaf 	.word	0x0800bcaf
 800bc04:	0800bcaf 	.word	0x0800bcaf
 800bc08:	0800bc7b 	.word	0x0800bc7b
 800bc0c:	0800bcaf 	.word	0x0800bcaf
 800bc10:	0800bcaf 	.word	0x0800bcaf
 800bc14:	0800bcaf 	.word	0x0800bcaf
 800bc18:	0800bcaf 	.word	0x0800bcaf
 800bc1c:	0800bcaf 	.word	0x0800bcaf
 800bc20:	0800bcaf 	.word	0x0800bcaf
 800bc24:	0800bcaf 	.word	0x0800bcaf
 800bc28:	0800bcaf 	.word	0x0800bcaf
 800bc2c:	0800bcaf 	.word	0x0800bcaf
 800bc30:	0800bcaf 	.word	0x0800bcaf
 800bc34:	0800bcaf 	.word	0x0800bcaf
 800bc38:	0800bcaf 	.word	0x0800bcaf
 800bc3c:	0800bcaf 	.word	0x0800bcaf
 800bc40:	0800bcaf 	.word	0x0800bcaf
 800bc44:	0800bcaf 	.word	0x0800bcaf
 800bc48:	0800bca1 	.word	0x0800bca1
 800bc4c:	2b40      	cmp	r3, #64	@ 0x40
 800bc4e:	d02a      	beq.n	800bca6 <UART_SetConfig+0x8aa>
 800bc50:	e02d      	b.n	800bcae <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800bc52:	f7fd fb89 	bl	8009368 <HAL_RCCEx_GetD3PCLK1Freq>
 800bc56:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800bc58:	e02f      	b.n	800bcba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bc5a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800bc5e:	4618      	mov	r0, r3
 800bc60:	f7fd fb98 	bl	8009394 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800bc64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bc68:	e027      	b.n	800bcba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bc6a:	f107 0318 	add.w	r3, r7, #24
 800bc6e:	4618      	mov	r0, r3
 800bc70:	f7fd fce4 	bl	800963c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800bc74:	69fb      	ldr	r3, [r7, #28]
 800bc76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bc78:	e01f      	b.n	800bcba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bc7a:	4b21      	ldr	r3, [pc, #132]	@ (800bd00 <UART_SetConfig+0x904>)
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	f003 0320 	and.w	r3, r3, #32
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	d009      	beq.n	800bc9a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800bc86:	4b1e      	ldr	r3, [pc, #120]	@ (800bd00 <UART_SetConfig+0x904>)
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	08db      	lsrs	r3, r3, #3
 800bc8c:	f003 0303 	and.w	r3, r3, #3
 800bc90:	4a1d      	ldr	r2, [pc, #116]	@ (800bd08 <UART_SetConfig+0x90c>)
 800bc92:	fa22 f303 	lsr.w	r3, r2, r3
 800bc96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800bc98:	e00f      	b.n	800bcba <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800bc9a:	4b1b      	ldr	r3, [pc, #108]	@ (800bd08 <UART_SetConfig+0x90c>)
 800bc9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bc9e:	e00c      	b.n	800bcba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800bca0:	4b1a      	ldr	r3, [pc, #104]	@ (800bd0c <UART_SetConfig+0x910>)
 800bca2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bca4:	e009      	b.n	800bcba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bca6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bcaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bcac:	e005      	b.n	800bcba <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800bcae:	2300      	movs	r3, #0
 800bcb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800bcb2:	2301      	movs	r3, #1
 800bcb4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800bcb8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800bcba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	f000 81ee 	beq.w	800c09e <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800bcc2:	697b      	ldr	r3, [r7, #20]
 800bcc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bcc6:	4a12      	ldr	r2, [pc, #72]	@ (800bd10 <UART_SetConfig+0x914>)
 800bcc8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bccc:	461a      	mov	r2, r3
 800bcce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bcd0:	fbb3 f3f2 	udiv	r3, r3, r2
 800bcd4:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bcd6:	697b      	ldr	r3, [r7, #20]
 800bcd8:	685a      	ldr	r2, [r3, #4]
 800bcda:	4613      	mov	r3, r2
 800bcdc:	005b      	lsls	r3, r3, #1
 800bcde:	4413      	add	r3, r2
 800bce0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bce2:	429a      	cmp	r2, r3
 800bce4:	d305      	bcc.n	800bcf2 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800bce6:	697b      	ldr	r3, [r7, #20]
 800bce8:	685b      	ldr	r3, [r3, #4]
 800bcea:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bcec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bcee:	429a      	cmp	r2, r3
 800bcf0:	d910      	bls.n	800bd14 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800bcf2:	2301      	movs	r3, #1
 800bcf4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800bcf8:	e1d1      	b.n	800c09e <UART_SetConfig+0xca2>
 800bcfa:	bf00      	nop
 800bcfc:	40011c00 	.word	0x40011c00
 800bd00:	58024400 	.word	0x58024400
 800bd04:	58000c00 	.word	0x58000c00
 800bd08:	03d09000 	.word	0x03d09000
 800bd0c:	003d0900 	.word	0x003d0900
 800bd10:	0800d340 	.word	0x0800d340
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bd14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bd16:	2200      	movs	r2, #0
 800bd18:	60bb      	str	r3, [r7, #8]
 800bd1a:	60fa      	str	r2, [r7, #12]
 800bd1c:	697b      	ldr	r3, [r7, #20]
 800bd1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bd20:	4ac0      	ldr	r2, [pc, #768]	@ (800c024 <UART_SetConfig+0xc28>)
 800bd22:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bd26:	b29b      	uxth	r3, r3
 800bd28:	2200      	movs	r2, #0
 800bd2a:	603b      	str	r3, [r7, #0]
 800bd2c:	607a      	str	r2, [r7, #4]
 800bd2e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bd32:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800bd36:	f7f4 faeb 	bl	8000310 <__aeabi_uldivmod>
 800bd3a:	4602      	mov	r2, r0
 800bd3c:	460b      	mov	r3, r1
 800bd3e:	4610      	mov	r0, r2
 800bd40:	4619      	mov	r1, r3
 800bd42:	f04f 0200 	mov.w	r2, #0
 800bd46:	f04f 0300 	mov.w	r3, #0
 800bd4a:	020b      	lsls	r3, r1, #8
 800bd4c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800bd50:	0202      	lsls	r2, r0, #8
 800bd52:	6979      	ldr	r1, [r7, #20]
 800bd54:	6849      	ldr	r1, [r1, #4]
 800bd56:	0849      	lsrs	r1, r1, #1
 800bd58:	2000      	movs	r0, #0
 800bd5a:	460c      	mov	r4, r1
 800bd5c:	4605      	mov	r5, r0
 800bd5e:	eb12 0804 	adds.w	r8, r2, r4
 800bd62:	eb43 0905 	adc.w	r9, r3, r5
 800bd66:	697b      	ldr	r3, [r7, #20]
 800bd68:	685b      	ldr	r3, [r3, #4]
 800bd6a:	2200      	movs	r2, #0
 800bd6c:	469a      	mov	sl, r3
 800bd6e:	4693      	mov	fp, r2
 800bd70:	4652      	mov	r2, sl
 800bd72:	465b      	mov	r3, fp
 800bd74:	4640      	mov	r0, r8
 800bd76:	4649      	mov	r1, r9
 800bd78:	f7f4 faca 	bl	8000310 <__aeabi_uldivmod>
 800bd7c:	4602      	mov	r2, r0
 800bd7e:	460b      	mov	r3, r1
 800bd80:	4613      	mov	r3, r2
 800bd82:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800bd84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd86:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800bd8a:	d308      	bcc.n	800bd9e <UART_SetConfig+0x9a2>
 800bd8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd8e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bd92:	d204      	bcs.n	800bd9e <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800bd94:	697b      	ldr	r3, [r7, #20]
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800bd9a:	60da      	str	r2, [r3, #12]
 800bd9c:	e17f      	b.n	800c09e <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800bd9e:	2301      	movs	r3, #1
 800bda0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800bda4:	e17b      	b.n	800c09e <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bda6:	697b      	ldr	r3, [r7, #20]
 800bda8:	69db      	ldr	r3, [r3, #28]
 800bdaa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800bdae:	f040 80bd 	bne.w	800bf2c <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800bdb2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800bdb6:	2b20      	cmp	r3, #32
 800bdb8:	dc48      	bgt.n	800be4c <UART_SetConfig+0xa50>
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	db7b      	blt.n	800beb6 <UART_SetConfig+0xaba>
 800bdbe:	2b20      	cmp	r3, #32
 800bdc0:	d879      	bhi.n	800beb6 <UART_SetConfig+0xaba>
 800bdc2:	a201      	add	r2, pc, #4	@ (adr r2, 800bdc8 <UART_SetConfig+0x9cc>)
 800bdc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bdc8:	0800be53 	.word	0x0800be53
 800bdcc:	0800be5b 	.word	0x0800be5b
 800bdd0:	0800beb7 	.word	0x0800beb7
 800bdd4:	0800beb7 	.word	0x0800beb7
 800bdd8:	0800be63 	.word	0x0800be63
 800bddc:	0800beb7 	.word	0x0800beb7
 800bde0:	0800beb7 	.word	0x0800beb7
 800bde4:	0800beb7 	.word	0x0800beb7
 800bde8:	0800be73 	.word	0x0800be73
 800bdec:	0800beb7 	.word	0x0800beb7
 800bdf0:	0800beb7 	.word	0x0800beb7
 800bdf4:	0800beb7 	.word	0x0800beb7
 800bdf8:	0800beb7 	.word	0x0800beb7
 800bdfc:	0800beb7 	.word	0x0800beb7
 800be00:	0800beb7 	.word	0x0800beb7
 800be04:	0800beb7 	.word	0x0800beb7
 800be08:	0800be83 	.word	0x0800be83
 800be0c:	0800beb7 	.word	0x0800beb7
 800be10:	0800beb7 	.word	0x0800beb7
 800be14:	0800beb7 	.word	0x0800beb7
 800be18:	0800beb7 	.word	0x0800beb7
 800be1c:	0800beb7 	.word	0x0800beb7
 800be20:	0800beb7 	.word	0x0800beb7
 800be24:	0800beb7 	.word	0x0800beb7
 800be28:	0800beb7 	.word	0x0800beb7
 800be2c:	0800beb7 	.word	0x0800beb7
 800be30:	0800beb7 	.word	0x0800beb7
 800be34:	0800beb7 	.word	0x0800beb7
 800be38:	0800beb7 	.word	0x0800beb7
 800be3c:	0800beb7 	.word	0x0800beb7
 800be40:	0800beb7 	.word	0x0800beb7
 800be44:	0800beb7 	.word	0x0800beb7
 800be48:	0800bea9 	.word	0x0800bea9
 800be4c:	2b40      	cmp	r3, #64	@ 0x40
 800be4e:	d02e      	beq.n	800beae <UART_SetConfig+0xab2>
 800be50:	e031      	b.n	800beb6 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800be52:	f7fb fbeb 	bl	800762c <HAL_RCC_GetPCLK1Freq>
 800be56:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800be58:	e033      	b.n	800bec2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800be5a:	f7fb fbfd 	bl	8007658 <HAL_RCC_GetPCLK2Freq>
 800be5e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800be60:	e02f      	b.n	800bec2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800be62:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800be66:	4618      	mov	r0, r3
 800be68:	f7fd fa94 	bl	8009394 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800be6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800be70:	e027      	b.n	800bec2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800be72:	f107 0318 	add.w	r3, r7, #24
 800be76:	4618      	mov	r0, r3
 800be78:	f7fd fbe0 	bl	800963c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800be7c:	69fb      	ldr	r3, [r7, #28]
 800be7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800be80:	e01f      	b.n	800bec2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800be82:	4b69      	ldr	r3, [pc, #420]	@ (800c028 <UART_SetConfig+0xc2c>)
 800be84:	681b      	ldr	r3, [r3, #0]
 800be86:	f003 0320 	and.w	r3, r3, #32
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d009      	beq.n	800bea2 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800be8e:	4b66      	ldr	r3, [pc, #408]	@ (800c028 <UART_SetConfig+0xc2c>)
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	08db      	lsrs	r3, r3, #3
 800be94:	f003 0303 	and.w	r3, r3, #3
 800be98:	4a64      	ldr	r2, [pc, #400]	@ (800c02c <UART_SetConfig+0xc30>)
 800be9a:	fa22 f303 	lsr.w	r3, r2, r3
 800be9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800bea0:	e00f      	b.n	800bec2 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800bea2:	4b62      	ldr	r3, [pc, #392]	@ (800c02c <UART_SetConfig+0xc30>)
 800bea4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bea6:	e00c      	b.n	800bec2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800bea8:	4b61      	ldr	r3, [pc, #388]	@ (800c030 <UART_SetConfig+0xc34>)
 800beaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800beac:	e009      	b.n	800bec2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800beae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800beb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800beb4:	e005      	b.n	800bec2 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800beb6:	2300      	movs	r3, #0
 800beb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800beba:	2301      	movs	r3, #1
 800bebc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800bec0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800bec2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	f000 80ea 	beq.w	800c09e <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800beca:	697b      	ldr	r3, [r7, #20]
 800becc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bece:	4a55      	ldr	r2, [pc, #340]	@ (800c024 <UART_SetConfig+0xc28>)
 800bed0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bed4:	461a      	mov	r2, r3
 800bed6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bed8:	fbb3 f3f2 	udiv	r3, r3, r2
 800bedc:	005a      	lsls	r2, r3, #1
 800bede:	697b      	ldr	r3, [r7, #20]
 800bee0:	685b      	ldr	r3, [r3, #4]
 800bee2:	085b      	lsrs	r3, r3, #1
 800bee4:	441a      	add	r2, r3
 800bee6:	697b      	ldr	r3, [r7, #20]
 800bee8:	685b      	ldr	r3, [r3, #4]
 800beea:	fbb2 f3f3 	udiv	r3, r2, r3
 800beee:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bef0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bef2:	2b0f      	cmp	r3, #15
 800bef4:	d916      	bls.n	800bf24 <UART_SetConfig+0xb28>
 800bef6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bef8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800befc:	d212      	bcs.n	800bf24 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800befe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf00:	b29b      	uxth	r3, r3
 800bf02:	f023 030f 	bic.w	r3, r3, #15
 800bf06:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800bf08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf0a:	085b      	lsrs	r3, r3, #1
 800bf0c:	b29b      	uxth	r3, r3
 800bf0e:	f003 0307 	and.w	r3, r3, #7
 800bf12:	b29a      	uxth	r2, r3
 800bf14:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800bf16:	4313      	orrs	r3, r2
 800bf18:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800bf1a:	697b      	ldr	r3, [r7, #20]
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800bf20:	60da      	str	r2, [r3, #12]
 800bf22:	e0bc      	b.n	800c09e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800bf24:	2301      	movs	r3, #1
 800bf26:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800bf2a:	e0b8      	b.n	800c09e <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800bf2c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800bf30:	2b20      	cmp	r3, #32
 800bf32:	dc4b      	bgt.n	800bfcc <UART_SetConfig+0xbd0>
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	f2c0 8087 	blt.w	800c048 <UART_SetConfig+0xc4c>
 800bf3a:	2b20      	cmp	r3, #32
 800bf3c:	f200 8084 	bhi.w	800c048 <UART_SetConfig+0xc4c>
 800bf40:	a201      	add	r2, pc, #4	@ (adr r2, 800bf48 <UART_SetConfig+0xb4c>)
 800bf42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf46:	bf00      	nop
 800bf48:	0800bfd3 	.word	0x0800bfd3
 800bf4c:	0800bfdb 	.word	0x0800bfdb
 800bf50:	0800c049 	.word	0x0800c049
 800bf54:	0800c049 	.word	0x0800c049
 800bf58:	0800bfe3 	.word	0x0800bfe3
 800bf5c:	0800c049 	.word	0x0800c049
 800bf60:	0800c049 	.word	0x0800c049
 800bf64:	0800c049 	.word	0x0800c049
 800bf68:	0800bff3 	.word	0x0800bff3
 800bf6c:	0800c049 	.word	0x0800c049
 800bf70:	0800c049 	.word	0x0800c049
 800bf74:	0800c049 	.word	0x0800c049
 800bf78:	0800c049 	.word	0x0800c049
 800bf7c:	0800c049 	.word	0x0800c049
 800bf80:	0800c049 	.word	0x0800c049
 800bf84:	0800c049 	.word	0x0800c049
 800bf88:	0800c003 	.word	0x0800c003
 800bf8c:	0800c049 	.word	0x0800c049
 800bf90:	0800c049 	.word	0x0800c049
 800bf94:	0800c049 	.word	0x0800c049
 800bf98:	0800c049 	.word	0x0800c049
 800bf9c:	0800c049 	.word	0x0800c049
 800bfa0:	0800c049 	.word	0x0800c049
 800bfa4:	0800c049 	.word	0x0800c049
 800bfa8:	0800c049 	.word	0x0800c049
 800bfac:	0800c049 	.word	0x0800c049
 800bfb0:	0800c049 	.word	0x0800c049
 800bfb4:	0800c049 	.word	0x0800c049
 800bfb8:	0800c049 	.word	0x0800c049
 800bfbc:	0800c049 	.word	0x0800c049
 800bfc0:	0800c049 	.word	0x0800c049
 800bfc4:	0800c049 	.word	0x0800c049
 800bfc8:	0800c03b 	.word	0x0800c03b
 800bfcc:	2b40      	cmp	r3, #64	@ 0x40
 800bfce:	d037      	beq.n	800c040 <UART_SetConfig+0xc44>
 800bfd0:	e03a      	b.n	800c048 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bfd2:	f7fb fb2b 	bl	800762c <HAL_RCC_GetPCLK1Freq>
 800bfd6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800bfd8:	e03c      	b.n	800c054 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bfda:	f7fb fb3d 	bl	8007658 <HAL_RCC_GetPCLK2Freq>
 800bfde:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800bfe0:	e038      	b.n	800c054 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bfe2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800bfe6:	4618      	mov	r0, r3
 800bfe8:	f7fd f9d4 	bl	8009394 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800bfec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bfee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bff0:	e030      	b.n	800c054 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bff2:	f107 0318 	add.w	r3, r7, #24
 800bff6:	4618      	mov	r0, r3
 800bff8:	f7fd fb20 	bl	800963c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800bffc:	69fb      	ldr	r3, [r7, #28]
 800bffe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c000:	e028      	b.n	800c054 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c002:	4b09      	ldr	r3, [pc, #36]	@ (800c028 <UART_SetConfig+0xc2c>)
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	f003 0320 	and.w	r3, r3, #32
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d012      	beq.n	800c034 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c00e:	4b06      	ldr	r3, [pc, #24]	@ (800c028 <UART_SetConfig+0xc2c>)
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	08db      	lsrs	r3, r3, #3
 800c014:	f003 0303 	and.w	r3, r3, #3
 800c018:	4a04      	ldr	r2, [pc, #16]	@ (800c02c <UART_SetConfig+0xc30>)
 800c01a:	fa22 f303 	lsr.w	r3, r2, r3
 800c01e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c020:	e018      	b.n	800c054 <UART_SetConfig+0xc58>
 800c022:	bf00      	nop
 800c024:	0800d340 	.word	0x0800d340
 800c028:	58024400 	.word	0x58024400
 800c02c:	03d09000 	.word	0x03d09000
 800c030:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800c034:	4b24      	ldr	r3, [pc, #144]	@ (800c0c8 <UART_SetConfig+0xccc>)
 800c036:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c038:	e00c      	b.n	800c054 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c03a:	4b24      	ldr	r3, [pc, #144]	@ (800c0cc <UART_SetConfig+0xcd0>)
 800c03c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c03e:	e009      	b.n	800c054 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c040:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c044:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c046:	e005      	b.n	800c054 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800c048:	2300      	movs	r3, #0
 800c04a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800c04c:	2301      	movs	r3, #1
 800c04e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800c052:	bf00      	nop
    }

    if (pclk != 0U)
 800c054:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c056:	2b00      	cmp	r3, #0
 800c058:	d021      	beq.n	800c09e <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c05a:	697b      	ldr	r3, [r7, #20]
 800c05c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c05e:	4a1c      	ldr	r2, [pc, #112]	@ (800c0d0 <UART_SetConfig+0xcd4>)
 800c060:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c064:	461a      	mov	r2, r3
 800c066:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c068:	fbb3 f2f2 	udiv	r2, r3, r2
 800c06c:	697b      	ldr	r3, [r7, #20]
 800c06e:	685b      	ldr	r3, [r3, #4]
 800c070:	085b      	lsrs	r3, r3, #1
 800c072:	441a      	add	r2, r3
 800c074:	697b      	ldr	r3, [r7, #20]
 800c076:	685b      	ldr	r3, [r3, #4]
 800c078:	fbb2 f3f3 	udiv	r3, r2, r3
 800c07c:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c07e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c080:	2b0f      	cmp	r3, #15
 800c082:	d909      	bls.n	800c098 <UART_SetConfig+0xc9c>
 800c084:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c086:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c08a:	d205      	bcs.n	800c098 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c08c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c08e:	b29a      	uxth	r2, r3
 800c090:	697b      	ldr	r3, [r7, #20]
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	60da      	str	r2, [r3, #12]
 800c096:	e002      	b.n	800c09e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800c098:	2301      	movs	r3, #1
 800c09a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800c09e:	697b      	ldr	r3, [r7, #20]
 800c0a0:	2201      	movs	r2, #1
 800c0a2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800c0a6:	697b      	ldr	r3, [r7, #20]
 800c0a8:	2201      	movs	r2, #1
 800c0aa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c0ae:	697b      	ldr	r3, [r7, #20]
 800c0b0:	2200      	movs	r2, #0
 800c0b2:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800c0b4:	697b      	ldr	r3, [r7, #20]
 800c0b6:	2200      	movs	r2, #0
 800c0b8:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800c0ba:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800c0be:	4618      	mov	r0, r3
 800c0c0:	3748      	adds	r7, #72	@ 0x48
 800c0c2:	46bd      	mov	sp, r7
 800c0c4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c0c8:	03d09000 	.word	0x03d09000
 800c0cc:	003d0900 	.word	0x003d0900
 800c0d0:	0800d340 	.word	0x0800d340

0800c0d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c0d4:	b480      	push	{r7}
 800c0d6:	b083      	sub	sp, #12
 800c0d8:	af00      	add	r7, sp, #0
 800c0da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c0e0:	f003 0308 	and.w	r3, r3, #8
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	d00a      	beq.n	800c0fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	685b      	ldr	r3, [r3, #4]
 800c0ee:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	430a      	orrs	r2, r1
 800c0fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c102:	f003 0301 	and.w	r3, r3, #1
 800c106:	2b00      	cmp	r3, #0
 800c108:	d00a      	beq.n	800c120 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	685b      	ldr	r3, [r3, #4]
 800c110:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	681b      	ldr	r3, [r3, #0]
 800c11c:	430a      	orrs	r2, r1
 800c11e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c124:	f003 0302 	and.w	r3, r3, #2
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d00a      	beq.n	800c142 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	685b      	ldr	r3, [r3, #4]
 800c132:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	430a      	orrs	r2, r1
 800c140:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c146:	f003 0304 	and.w	r3, r3, #4
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d00a      	beq.n	800c164 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	685b      	ldr	r3, [r3, #4]
 800c154:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	430a      	orrs	r2, r1
 800c162:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c168:	f003 0310 	and.w	r3, r3, #16
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d00a      	beq.n	800c186 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	689b      	ldr	r3, [r3, #8]
 800c176:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	430a      	orrs	r2, r1
 800c184:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c18a:	f003 0320 	and.w	r3, r3, #32
 800c18e:	2b00      	cmp	r3, #0
 800c190:	d00a      	beq.n	800c1a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	689b      	ldr	r3, [r3, #8]
 800c198:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	430a      	orrs	r2, r1
 800c1a6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c1ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d01a      	beq.n	800c1ea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	685b      	ldr	r3, [r3, #4]
 800c1ba:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	430a      	orrs	r2, r1
 800c1c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c1ce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c1d2:	d10a      	bne.n	800c1ea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	685b      	ldr	r3, [r3, #4]
 800c1da:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	430a      	orrs	r2, r1
 800c1e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c1ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	d00a      	beq.n	800c20c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	685b      	ldr	r3, [r3, #4]
 800c1fc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	430a      	orrs	r2, r1
 800c20a:	605a      	str	r2, [r3, #4]
  }
}
 800c20c:	bf00      	nop
 800c20e:	370c      	adds	r7, #12
 800c210:	46bd      	mov	sp, r7
 800c212:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c216:	4770      	bx	lr

0800c218 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c218:	b580      	push	{r7, lr}
 800c21a:	b098      	sub	sp, #96	@ 0x60
 800c21c:	af02      	add	r7, sp, #8
 800c21e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	2200      	movs	r2, #0
 800c224:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c228:	f7f5 feee 	bl	8002008 <HAL_GetTick>
 800c22c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	f003 0308 	and.w	r3, r3, #8
 800c238:	2b08      	cmp	r3, #8
 800c23a:	d12f      	bne.n	800c29c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c23c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c240:	9300      	str	r3, [sp, #0]
 800c242:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c244:	2200      	movs	r2, #0
 800c246:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800c24a:	6878      	ldr	r0, [r7, #4]
 800c24c:	f000 f88e 	bl	800c36c <UART_WaitOnFlagUntilTimeout>
 800c250:	4603      	mov	r3, r0
 800c252:	2b00      	cmp	r3, #0
 800c254:	d022      	beq.n	800c29c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c25c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c25e:	e853 3f00 	ldrex	r3, [r3]
 800c262:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c264:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c266:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c26a:	653b      	str	r3, [r7, #80]	@ 0x50
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	461a      	mov	r2, r3
 800c272:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c274:	647b      	str	r3, [r7, #68]	@ 0x44
 800c276:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c278:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c27a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c27c:	e841 2300 	strex	r3, r2, [r1]
 800c280:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c282:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c284:	2b00      	cmp	r3, #0
 800c286:	d1e6      	bne.n	800c256 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	2220      	movs	r2, #32
 800c28c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	2200      	movs	r2, #0
 800c294:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c298:	2303      	movs	r3, #3
 800c29a:	e063      	b.n	800c364 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	681b      	ldr	r3, [r3, #0]
 800c2a2:	f003 0304 	and.w	r3, r3, #4
 800c2a6:	2b04      	cmp	r3, #4
 800c2a8:	d149      	bne.n	800c33e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c2aa:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c2ae:	9300      	str	r3, [sp, #0]
 800c2b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c2b2:	2200      	movs	r2, #0
 800c2b4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800c2b8:	6878      	ldr	r0, [r7, #4]
 800c2ba:	f000 f857 	bl	800c36c <UART_WaitOnFlagUntilTimeout>
 800c2be:	4603      	mov	r3, r0
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d03c      	beq.n	800c33e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2cc:	e853 3f00 	ldrex	r3, [r3]
 800c2d0:	623b      	str	r3, [r7, #32]
   return(result);
 800c2d2:	6a3b      	ldr	r3, [r7, #32]
 800c2d4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c2d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	461a      	mov	r2, r3
 800c2e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c2e2:	633b      	str	r3, [r7, #48]	@ 0x30
 800c2e4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2e6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c2e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c2ea:	e841 2300 	strex	r3, r2, [r1]
 800c2ee:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c2f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	d1e6      	bne.n	800c2c4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	3308      	adds	r3, #8
 800c2fc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2fe:	693b      	ldr	r3, [r7, #16]
 800c300:	e853 3f00 	ldrex	r3, [r3]
 800c304:	60fb      	str	r3, [r7, #12]
   return(result);
 800c306:	68fb      	ldr	r3, [r7, #12]
 800c308:	f023 0301 	bic.w	r3, r3, #1
 800c30c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	3308      	adds	r3, #8
 800c314:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c316:	61fa      	str	r2, [r7, #28]
 800c318:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c31a:	69b9      	ldr	r1, [r7, #24]
 800c31c:	69fa      	ldr	r2, [r7, #28]
 800c31e:	e841 2300 	strex	r3, r2, [r1]
 800c322:	617b      	str	r3, [r7, #20]
   return(result);
 800c324:	697b      	ldr	r3, [r7, #20]
 800c326:	2b00      	cmp	r3, #0
 800c328:	d1e5      	bne.n	800c2f6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	2220      	movs	r2, #32
 800c32e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	2200      	movs	r2, #0
 800c336:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c33a:	2303      	movs	r3, #3
 800c33c:	e012      	b.n	800c364 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	2220      	movs	r2, #32
 800c342:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	2220      	movs	r2, #32
 800c34a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	2200      	movs	r2, #0
 800c352:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	2200      	movs	r2, #0
 800c358:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	2200      	movs	r2, #0
 800c35e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c362:	2300      	movs	r3, #0
}
 800c364:	4618      	mov	r0, r3
 800c366:	3758      	adds	r7, #88	@ 0x58
 800c368:	46bd      	mov	sp, r7
 800c36a:	bd80      	pop	{r7, pc}

0800c36c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c36c:	b580      	push	{r7, lr}
 800c36e:	b084      	sub	sp, #16
 800c370:	af00      	add	r7, sp, #0
 800c372:	60f8      	str	r0, [r7, #12]
 800c374:	60b9      	str	r1, [r7, #8]
 800c376:	603b      	str	r3, [r7, #0]
 800c378:	4613      	mov	r3, r2
 800c37a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c37c:	e04f      	b.n	800c41e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c37e:	69bb      	ldr	r3, [r7, #24]
 800c380:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c384:	d04b      	beq.n	800c41e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c386:	f7f5 fe3f 	bl	8002008 <HAL_GetTick>
 800c38a:	4602      	mov	r2, r0
 800c38c:	683b      	ldr	r3, [r7, #0]
 800c38e:	1ad3      	subs	r3, r2, r3
 800c390:	69ba      	ldr	r2, [r7, #24]
 800c392:	429a      	cmp	r2, r3
 800c394:	d302      	bcc.n	800c39c <UART_WaitOnFlagUntilTimeout+0x30>
 800c396:	69bb      	ldr	r3, [r7, #24]
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d101      	bne.n	800c3a0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800c39c:	2303      	movs	r3, #3
 800c39e:	e04e      	b.n	800c43e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800c3a0:	68fb      	ldr	r3, [r7, #12]
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	f003 0304 	and.w	r3, r3, #4
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	d037      	beq.n	800c41e <UART_WaitOnFlagUntilTimeout+0xb2>
 800c3ae:	68bb      	ldr	r3, [r7, #8]
 800c3b0:	2b80      	cmp	r3, #128	@ 0x80
 800c3b2:	d034      	beq.n	800c41e <UART_WaitOnFlagUntilTimeout+0xb2>
 800c3b4:	68bb      	ldr	r3, [r7, #8]
 800c3b6:	2b40      	cmp	r3, #64	@ 0x40
 800c3b8:	d031      	beq.n	800c41e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800c3ba:	68fb      	ldr	r3, [r7, #12]
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	69db      	ldr	r3, [r3, #28]
 800c3c0:	f003 0308 	and.w	r3, r3, #8
 800c3c4:	2b08      	cmp	r3, #8
 800c3c6:	d110      	bne.n	800c3ea <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c3c8:	68fb      	ldr	r3, [r7, #12]
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	2208      	movs	r2, #8
 800c3ce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c3d0:	68f8      	ldr	r0, [r7, #12]
 800c3d2:	f000 f839 	bl	800c448 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800c3d6:	68fb      	ldr	r3, [r7, #12]
 800c3d8:	2208      	movs	r2, #8
 800c3da:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c3de:	68fb      	ldr	r3, [r7, #12]
 800c3e0:	2200      	movs	r2, #0
 800c3e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800c3e6:	2301      	movs	r3, #1
 800c3e8:	e029      	b.n	800c43e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	69db      	ldr	r3, [r3, #28]
 800c3f0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c3f4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c3f8:	d111      	bne.n	800c41e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c3fa:	68fb      	ldr	r3, [r7, #12]
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c402:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c404:	68f8      	ldr	r0, [r7, #12]
 800c406:	f000 f81f 	bl	800c448 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c40a:	68fb      	ldr	r3, [r7, #12]
 800c40c:	2220      	movs	r2, #32
 800c40e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c412:	68fb      	ldr	r3, [r7, #12]
 800c414:	2200      	movs	r2, #0
 800c416:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800c41a:	2303      	movs	r3, #3
 800c41c:	e00f      	b.n	800c43e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c41e:	68fb      	ldr	r3, [r7, #12]
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	69da      	ldr	r2, [r3, #28]
 800c424:	68bb      	ldr	r3, [r7, #8]
 800c426:	4013      	ands	r3, r2
 800c428:	68ba      	ldr	r2, [r7, #8]
 800c42a:	429a      	cmp	r2, r3
 800c42c:	bf0c      	ite	eq
 800c42e:	2301      	moveq	r3, #1
 800c430:	2300      	movne	r3, #0
 800c432:	b2db      	uxtb	r3, r3
 800c434:	461a      	mov	r2, r3
 800c436:	79fb      	ldrb	r3, [r7, #7]
 800c438:	429a      	cmp	r2, r3
 800c43a:	d0a0      	beq.n	800c37e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c43c:	2300      	movs	r3, #0
}
 800c43e:	4618      	mov	r0, r3
 800c440:	3710      	adds	r7, #16
 800c442:	46bd      	mov	sp, r7
 800c444:	bd80      	pop	{r7, pc}
	...

0800c448 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c448:	b480      	push	{r7}
 800c44a:	b095      	sub	sp, #84	@ 0x54
 800c44c:	af00      	add	r7, sp, #0
 800c44e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c456:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c458:	e853 3f00 	ldrex	r3, [r3]
 800c45c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c45e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c460:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c464:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	461a      	mov	r2, r3
 800c46c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c46e:	643b      	str	r3, [r7, #64]	@ 0x40
 800c470:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c472:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c474:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c476:	e841 2300 	strex	r3, r2, [r1]
 800c47a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c47c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d1e6      	bne.n	800c450 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	681b      	ldr	r3, [r3, #0]
 800c486:	3308      	adds	r3, #8
 800c488:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c48a:	6a3b      	ldr	r3, [r7, #32]
 800c48c:	e853 3f00 	ldrex	r3, [r3]
 800c490:	61fb      	str	r3, [r7, #28]
   return(result);
 800c492:	69fa      	ldr	r2, [r7, #28]
 800c494:	4b1e      	ldr	r3, [pc, #120]	@ (800c510 <UART_EndRxTransfer+0xc8>)
 800c496:	4013      	ands	r3, r2
 800c498:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	3308      	adds	r3, #8
 800c4a0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c4a2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c4a4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4a6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c4a8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c4aa:	e841 2300 	strex	r3, r2, [r1]
 800c4ae:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c4b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d1e5      	bne.n	800c482 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c4ba:	2b01      	cmp	r3, #1
 800c4bc:	d118      	bne.n	800c4f0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4c4:	68fb      	ldr	r3, [r7, #12]
 800c4c6:	e853 3f00 	ldrex	r3, [r3]
 800c4ca:	60bb      	str	r3, [r7, #8]
   return(result);
 800c4cc:	68bb      	ldr	r3, [r7, #8]
 800c4ce:	f023 0310 	bic.w	r3, r3, #16
 800c4d2:	647b      	str	r3, [r7, #68]	@ 0x44
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	461a      	mov	r2, r3
 800c4da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c4dc:	61bb      	str	r3, [r7, #24]
 800c4de:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4e0:	6979      	ldr	r1, [r7, #20]
 800c4e2:	69ba      	ldr	r2, [r7, #24]
 800c4e4:	e841 2300 	strex	r3, r2, [r1]
 800c4e8:	613b      	str	r3, [r7, #16]
   return(result);
 800c4ea:	693b      	ldr	r3, [r7, #16]
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d1e6      	bne.n	800c4be <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	2220      	movs	r2, #32
 800c4f4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	2200      	movs	r2, #0
 800c4fc:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	2200      	movs	r2, #0
 800c502:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800c504:	bf00      	nop
 800c506:	3754      	adds	r7, #84	@ 0x54
 800c508:	46bd      	mov	sp, r7
 800c50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c50e:	4770      	bx	lr
 800c510:	effffffe 	.word	0xeffffffe

0800c514 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c514:	b480      	push	{r7}
 800c516:	b085      	sub	sp, #20
 800c518:	af00      	add	r7, sp, #0
 800c51a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c522:	2b01      	cmp	r3, #1
 800c524:	d101      	bne.n	800c52a <HAL_UARTEx_DisableFifoMode+0x16>
 800c526:	2302      	movs	r3, #2
 800c528:	e027      	b.n	800c57a <HAL_UARTEx_DisableFifoMode+0x66>
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	2201      	movs	r2, #1
 800c52e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	2224      	movs	r2, #36	@ 0x24
 800c536:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	681a      	ldr	r2, [r3, #0]
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	f022 0201 	bic.w	r2, r2, #1
 800c550:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c552:	68fb      	ldr	r3, [r7, #12]
 800c554:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800c558:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	2200      	movs	r2, #0
 800c55e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	68fa      	ldr	r2, [r7, #12]
 800c566:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	2220      	movs	r2, #32
 800c56c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	2200      	movs	r2, #0
 800c574:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c578:	2300      	movs	r3, #0
}
 800c57a:	4618      	mov	r0, r3
 800c57c:	3714      	adds	r7, #20
 800c57e:	46bd      	mov	sp, r7
 800c580:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c584:	4770      	bx	lr

0800c586 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c586:	b580      	push	{r7, lr}
 800c588:	b084      	sub	sp, #16
 800c58a:	af00      	add	r7, sp, #0
 800c58c:	6078      	str	r0, [r7, #4]
 800c58e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c596:	2b01      	cmp	r3, #1
 800c598:	d101      	bne.n	800c59e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c59a:	2302      	movs	r3, #2
 800c59c:	e02d      	b.n	800c5fa <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	2201      	movs	r2, #1
 800c5a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	2224      	movs	r2, #36	@ 0x24
 800c5aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	681a      	ldr	r2, [r3, #0]
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	f022 0201 	bic.w	r2, r2, #1
 800c5c4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	681b      	ldr	r3, [r3, #0]
 800c5ca:	689b      	ldr	r3, [r3, #8]
 800c5cc:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	683a      	ldr	r2, [r7, #0]
 800c5d6:	430a      	orrs	r2, r1
 800c5d8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c5da:	6878      	ldr	r0, [r7, #4]
 800c5dc:	f000 f850 	bl	800c680 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	681b      	ldr	r3, [r3, #0]
 800c5e4:	68fa      	ldr	r2, [r7, #12]
 800c5e6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	2220      	movs	r2, #32
 800c5ec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	2200      	movs	r2, #0
 800c5f4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c5f8:	2300      	movs	r3, #0
}
 800c5fa:	4618      	mov	r0, r3
 800c5fc:	3710      	adds	r7, #16
 800c5fe:	46bd      	mov	sp, r7
 800c600:	bd80      	pop	{r7, pc}

0800c602 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c602:	b580      	push	{r7, lr}
 800c604:	b084      	sub	sp, #16
 800c606:	af00      	add	r7, sp, #0
 800c608:	6078      	str	r0, [r7, #4]
 800c60a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c612:	2b01      	cmp	r3, #1
 800c614:	d101      	bne.n	800c61a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c616:	2302      	movs	r3, #2
 800c618:	e02d      	b.n	800c676 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	2201      	movs	r2, #1
 800c61e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	2224      	movs	r2, #36	@ 0x24
 800c626:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	681a      	ldr	r2, [r3, #0]
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	681b      	ldr	r3, [r3, #0]
 800c63c:	f022 0201 	bic.w	r2, r2, #1
 800c640:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	681b      	ldr	r3, [r3, #0]
 800c646:	689b      	ldr	r3, [r3, #8]
 800c648:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	681b      	ldr	r3, [r3, #0]
 800c650:	683a      	ldr	r2, [r7, #0]
 800c652:	430a      	orrs	r2, r1
 800c654:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c656:	6878      	ldr	r0, [r7, #4]
 800c658:	f000 f812 	bl	800c680 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	68fa      	ldr	r2, [r7, #12]
 800c662:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	2220      	movs	r2, #32
 800c668:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	2200      	movs	r2, #0
 800c670:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c674:	2300      	movs	r3, #0
}
 800c676:	4618      	mov	r0, r3
 800c678:	3710      	adds	r7, #16
 800c67a:	46bd      	mov	sp, r7
 800c67c:	bd80      	pop	{r7, pc}
	...

0800c680 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c680:	b480      	push	{r7}
 800c682:	b085      	sub	sp, #20
 800c684:	af00      	add	r7, sp, #0
 800c686:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	d108      	bne.n	800c6a2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	2201      	movs	r2, #1
 800c694:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	2201      	movs	r2, #1
 800c69c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c6a0:	e031      	b.n	800c706 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c6a2:	2310      	movs	r3, #16
 800c6a4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c6a6:	2310      	movs	r3, #16
 800c6a8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	681b      	ldr	r3, [r3, #0]
 800c6ae:	689b      	ldr	r3, [r3, #8]
 800c6b0:	0e5b      	lsrs	r3, r3, #25
 800c6b2:	b2db      	uxtb	r3, r3
 800c6b4:	f003 0307 	and.w	r3, r3, #7
 800c6b8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	681b      	ldr	r3, [r3, #0]
 800c6be:	689b      	ldr	r3, [r3, #8]
 800c6c0:	0f5b      	lsrs	r3, r3, #29
 800c6c2:	b2db      	uxtb	r3, r3
 800c6c4:	f003 0307 	and.w	r3, r3, #7
 800c6c8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c6ca:	7bbb      	ldrb	r3, [r7, #14]
 800c6cc:	7b3a      	ldrb	r2, [r7, #12]
 800c6ce:	4911      	ldr	r1, [pc, #68]	@ (800c714 <UARTEx_SetNbDataToProcess+0x94>)
 800c6d0:	5c8a      	ldrb	r2, [r1, r2]
 800c6d2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800c6d6:	7b3a      	ldrb	r2, [r7, #12]
 800c6d8:	490f      	ldr	r1, [pc, #60]	@ (800c718 <UARTEx_SetNbDataToProcess+0x98>)
 800c6da:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c6dc:	fb93 f3f2 	sdiv	r3, r3, r2
 800c6e0:	b29a      	uxth	r2, r3
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c6e8:	7bfb      	ldrb	r3, [r7, #15]
 800c6ea:	7b7a      	ldrb	r2, [r7, #13]
 800c6ec:	4909      	ldr	r1, [pc, #36]	@ (800c714 <UARTEx_SetNbDataToProcess+0x94>)
 800c6ee:	5c8a      	ldrb	r2, [r1, r2]
 800c6f0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800c6f4:	7b7a      	ldrb	r2, [r7, #13]
 800c6f6:	4908      	ldr	r1, [pc, #32]	@ (800c718 <UARTEx_SetNbDataToProcess+0x98>)
 800c6f8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c6fa:	fb93 f3f2 	sdiv	r3, r3, r2
 800c6fe:	b29a      	uxth	r2, r3
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800c706:	bf00      	nop
 800c708:	3714      	adds	r7, #20
 800c70a:	46bd      	mov	sp, r7
 800c70c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c710:	4770      	bx	lr
 800c712:	bf00      	nop
 800c714:	0800d358 	.word	0x0800d358
 800c718:	0800d360 	.word	0x0800d360

0800c71c <memset>:
 800c71c:	4402      	add	r2, r0
 800c71e:	4603      	mov	r3, r0
 800c720:	4293      	cmp	r3, r2
 800c722:	d100      	bne.n	800c726 <memset+0xa>
 800c724:	4770      	bx	lr
 800c726:	f803 1b01 	strb.w	r1, [r3], #1
 800c72a:	e7f9      	b.n	800c720 <memset+0x4>

0800c72c <__libc_init_array>:
 800c72c:	b570      	push	{r4, r5, r6, lr}
 800c72e:	4d0d      	ldr	r5, [pc, #52]	@ (800c764 <__libc_init_array+0x38>)
 800c730:	4c0d      	ldr	r4, [pc, #52]	@ (800c768 <__libc_init_array+0x3c>)
 800c732:	1b64      	subs	r4, r4, r5
 800c734:	10a4      	asrs	r4, r4, #2
 800c736:	2600      	movs	r6, #0
 800c738:	42a6      	cmp	r6, r4
 800c73a:	d109      	bne.n	800c750 <__libc_init_array+0x24>
 800c73c:	4d0b      	ldr	r5, [pc, #44]	@ (800c76c <__libc_init_array+0x40>)
 800c73e:	4c0c      	ldr	r4, [pc, #48]	@ (800c770 <__libc_init_array+0x44>)
 800c740:	f000 fde6 	bl	800d310 <_init>
 800c744:	1b64      	subs	r4, r4, r5
 800c746:	10a4      	asrs	r4, r4, #2
 800c748:	2600      	movs	r6, #0
 800c74a:	42a6      	cmp	r6, r4
 800c74c:	d105      	bne.n	800c75a <__libc_init_array+0x2e>
 800c74e:	bd70      	pop	{r4, r5, r6, pc}
 800c750:	f855 3b04 	ldr.w	r3, [r5], #4
 800c754:	4798      	blx	r3
 800c756:	3601      	adds	r6, #1
 800c758:	e7ee      	b.n	800c738 <__libc_init_array+0xc>
 800c75a:	f855 3b04 	ldr.w	r3, [r5], #4
 800c75e:	4798      	blx	r3
 800c760:	3601      	adds	r6, #1
 800c762:	e7f2      	b.n	800c74a <__libc_init_array+0x1e>
 800c764:	0800d548 	.word	0x0800d548
 800c768:	0800d548 	.word	0x0800d548
 800c76c:	0800d548 	.word	0x0800d548
 800c770:	0800d54c 	.word	0x0800d54c
 800c774:	00000000 	.word	0x00000000

0800c778 <sin>:
 800c778:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c77a:	eeb0 7b40 	vmov.f64	d7, d0
 800c77e:	ee17 3a90 	vmov	r3, s15
 800c782:	4a21      	ldr	r2, [pc, #132]	@ (800c808 <sin+0x90>)
 800c784:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c788:	4293      	cmp	r3, r2
 800c78a:	d807      	bhi.n	800c79c <sin+0x24>
 800c78c:	ed9f 1b1c 	vldr	d1, [pc, #112]	@ 800c800 <sin+0x88>
 800c790:	2000      	movs	r0, #0
 800c792:	b005      	add	sp, #20
 800c794:	f85d eb04 	ldr.w	lr, [sp], #4
 800c798:	f000 bc62 	b.w	800d060 <__kernel_sin>
 800c79c:	4a1b      	ldr	r2, [pc, #108]	@ (800c80c <sin+0x94>)
 800c79e:	4293      	cmp	r3, r2
 800c7a0:	d904      	bls.n	800c7ac <sin+0x34>
 800c7a2:	ee30 0b40 	vsub.f64	d0, d0, d0
 800c7a6:	b005      	add	sp, #20
 800c7a8:	f85d fb04 	ldr.w	pc, [sp], #4
 800c7ac:	4668      	mov	r0, sp
 800c7ae:	f000 f82f 	bl	800c810 <__ieee754_rem_pio2>
 800c7b2:	f000 0003 	and.w	r0, r0, #3
 800c7b6:	2801      	cmp	r0, #1
 800c7b8:	d00a      	beq.n	800c7d0 <sin+0x58>
 800c7ba:	2802      	cmp	r0, #2
 800c7bc:	d00f      	beq.n	800c7de <sin+0x66>
 800c7be:	b9c0      	cbnz	r0, 800c7f2 <sin+0x7a>
 800c7c0:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c7c4:	ed9d 0b00 	vldr	d0, [sp]
 800c7c8:	2001      	movs	r0, #1
 800c7ca:	f000 fc49 	bl	800d060 <__kernel_sin>
 800c7ce:	e7ea      	b.n	800c7a6 <sin+0x2e>
 800c7d0:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c7d4:	ed9d 0b00 	vldr	d0, [sp]
 800c7d8:	f000 fbda 	bl	800cf90 <__kernel_cos>
 800c7dc:	e7e3      	b.n	800c7a6 <sin+0x2e>
 800c7de:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c7e2:	ed9d 0b00 	vldr	d0, [sp]
 800c7e6:	2001      	movs	r0, #1
 800c7e8:	f000 fc3a 	bl	800d060 <__kernel_sin>
 800c7ec:	eeb1 0b40 	vneg.f64	d0, d0
 800c7f0:	e7d9      	b.n	800c7a6 <sin+0x2e>
 800c7f2:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c7f6:	ed9d 0b00 	vldr	d0, [sp]
 800c7fa:	f000 fbc9 	bl	800cf90 <__kernel_cos>
 800c7fe:	e7f5      	b.n	800c7ec <sin+0x74>
	...
 800c808:	3fe921fb 	.word	0x3fe921fb
 800c80c:	7fefffff 	.word	0x7fefffff

0800c810 <__ieee754_rem_pio2>:
 800c810:	b570      	push	{r4, r5, r6, lr}
 800c812:	eeb0 7b40 	vmov.f64	d7, d0
 800c816:	ee17 5a90 	vmov	r5, s15
 800c81a:	4b99      	ldr	r3, [pc, #612]	@ (800ca80 <__ieee754_rem_pio2+0x270>)
 800c81c:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800c820:	429e      	cmp	r6, r3
 800c822:	b088      	sub	sp, #32
 800c824:	4604      	mov	r4, r0
 800c826:	d807      	bhi.n	800c838 <__ieee754_rem_pio2+0x28>
 800c828:	2200      	movs	r2, #0
 800c82a:	2300      	movs	r3, #0
 800c82c:	ed84 0b00 	vstr	d0, [r4]
 800c830:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800c834:	2000      	movs	r0, #0
 800c836:	e01b      	b.n	800c870 <__ieee754_rem_pio2+0x60>
 800c838:	4b92      	ldr	r3, [pc, #584]	@ (800ca84 <__ieee754_rem_pio2+0x274>)
 800c83a:	429e      	cmp	r6, r3
 800c83c:	d83b      	bhi.n	800c8b6 <__ieee754_rem_pio2+0xa6>
 800c83e:	f5a3 231b 	sub.w	r3, r3, #634880	@ 0x9b000
 800c842:	2d00      	cmp	r5, #0
 800c844:	ed9f 6b7e 	vldr	d6, [pc, #504]	@ 800ca40 <__ieee754_rem_pio2+0x230>
 800c848:	f5a3 63f0 	sub.w	r3, r3, #1920	@ 0x780
 800c84c:	dd19      	ble.n	800c882 <__ieee754_rem_pio2+0x72>
 800c84e:	ee30 7b46 	vsub.f64	d7, d0, d6
 800c852:	429e      	cmp	r6, r3
 800c854:	d00e      	beq.n	800c874 <__ieee754_rem_pio2+0x64>
 800c856:	ed9f 5b7c 	vldr	d5, [pc, #496]	@ 800ca48 <__ieee754_rem_pio2+0x238>
 800c85a:	ee37 6b45 	vsub.f64	d6, d7, d5
 800c85e:	ee37 7b46 	vsub.f64	d7, d7, d6
 800c862:	ed84 6b00 	vstr	d6, [r4]
 800c866:	ee37 7b45 	vsub.f64	d7, d7, d5
 800c86a:	ed84 7b02 	vstr	d7, [r4, #8]
 800c86e:	2001      	movs	r0, #1
 800c870:	b008      	add	sp, #32
 800c872:	bd70      	pop	{r4, r5, r6, pc}
 800c874:	ed9f 6b76 	vldr	d6, [pc, #472]	@ 800ca50 <__ieee754_rem_pio2+0x240>
 800c878:	ed9f 5b77 	vldr	d5, [pc, #476]	@ 800ca58 <__ieee754_rem_pio2+0x248>
 800c87c:	ee37 7b46 	vsub.f64	d7, d7, d6
 800c880:	e7eb      	b.n	800c85a <__ieee754_rem_pio2+0x4a>
 800c882:	429e      	cmp	r6, r3
 800c884:	ee30 7b06 	vadd.f64	d7, d0, d6
 800c888:	d00e      	beq.n	800c8a8 <__ieee754_rem_pio2+0x98>
 800c88a:	ed9f 5b6f 	vldr	d5, [pc, #444]	@ 800ca48 <__ieee754_rem_pio2+0x238>
 800c88e:	ee37 6b05 	vadd.f64	d6, d7, d5
 800c892:	ee37 7b46 	vsub.f64	d7, d7, d6
 800c896:	ed84 6b00 	vstr	d6, [r4]
 800c89a:	ee37 7b05 	vadd.f64	d7, d7, d5
 800c89e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c8a2:	ed84 7b02 	vstr	d7, [r4, #8]
 800c8a6:	e7e3      	b.n	800c870 <__ieee754_rem_pio2+0x60>
 800c8a8:	ed9f 6b69 	vldr	d6, [pc, #420]	@ 800ca50 <__ieee754_rem_pio2+0x240>
 800c8ac:	ed9f 5b6a 	vldr	d5, [pc, #424]	@ 800ca58 <__ieee754_rem_pio2+0x248>
 800c8b0:	ee37 7b06 	vadd.f64	d7, d7, d6
 800c8b4:	e7eb      	b.n	800c88e <__ieee754_rem_pio2+0x7e>
 800c8b6:	4b74      	ldr	r3, [pc, #464]	@ (800ca88 <__ieee754_rem_pio2+0x278>)
 800c8b8:	429e      	cmp	r6, r3
 800c8ba:	d870      	bhi.n	800c99e <__ieee754_rem_pio2+0x18e>
 800c8bc:	f000 fc28 	bl	800d110 <fabs>
 800c8c0:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 800c8c4:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 800ca60 <__ieee754_rem_pio2+0x250>
 800c8c8:	eea0 7b06 	vfma.f64	d7, d0, d6
 800c8cc:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800c8d0:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800c8d4:	ee17 0a90 	vmov	r0, s15
 800c8d8:	eeb1 4b45 	vneg.f64	d4, d5
 800c8dc:	ed9f 7b58 	vldr	d7, [pc, #352]	@ 800ca40 <__ieee754_rem_pio2+0x230>
 800c8e0:	eea5 0b47 	vfms.f64	d0, d5, d7
 800c8e4:	ed9f 7b58 	vldr	d7, [pc, #352]	@ 800ca48 <__ieee754_rem_pio2+0x238>
 800c8e8:	281f      	cmp	r0, #31
 800c8ea:	ee25 7b07 	vmul.f64	d7, d5, d7
 800c8ee:	ee30 6b47 	vsub.f64	d6, d0, d7
 800c8f2:	dc05      	bgt.n	800c900 <__ieee754_rem_pio2+0xf0>
 800c8f4:	4b65      	ldr	r3, [pc, #404]	@ (800ca8c <__ieee754_rem_pio2+0x27c>)
 800c8f6:	1e42      	subs	r2, r0, #1
 800c8f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c8fc:	42b3      	cmp	r3, r6
 800c8fe:	d109      	bne.n	800c914 <__ieee754_rem_pio2+0x104>
 800c900:	ee16 3a90 	vmov	r3, s13
 800c904:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800c908:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 800c90c:	2b10      	cmp	r3, #16
 800c90e:	ea4f 5226 	mov.w	r2, r6, asr #20
 800c912:	dc02      	bgt.n	800c91a <__ieee754_rem_pio2+0x10a>
 800c914:	ed84 6b00 	vstr	d6, [r4]
 800c918:	e01a      	b.n	800c950 <__ieee754_rem_pio2+0x140>
 800c91a:	ed9f 3b4d 	vldr	d3, [pc, #308]	@ 800ca50 <__ieee754_rem_pio2+0x240>
 800c91e:	eeb0 6b40 	vmov.f64	d6, d0
 800c922:	eea4 6b03 	vfma.f64	d6, d4, d3
 800c926:	ee30 7b46 	vsub.f64	d7, d0, d6
 800c92a:	eea4 7b03 	vfma.f64	d7, d4, d3
 800c92e:	ed9f 3b4a 	vldr	d3, [pc, #296]	@ 800ca58 <__ieee754_rem_pio2+0x248>
 800c932:	ee95 7b03 	vfnms.f64	d7, d5, d3
 800c936:	ee36 3b47 	vsub.f64	d3, d6, d7
 800c93a:	ee13 3a90 	vmov	r3, s7
 800c93e:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800c942:	1ad3      	subs	r3, r2, r3
 800c944:	2b31      	cmp	r3, #49	@ 0x31
 800c946:	dc17      	bgt.n	800c978 <__ieee754_rem_pio2+0x168>
 800c948:	eeb0 0b46 	vmov.f64	d0, d6
 800c94c:	ed84 3b00 	vstr	d3, [r4]
 800c950:	ed94 6b00 	vldr	d6, [r4]
 800c954:	2d00      	cmp	r5, #0
 800c956:	ee30 0b46 	vsub.f64	d0, d0, d6
 800c95a:	ee30 0b47 	vsub.f64	d0, d0, d7
 800c95e:	ed84 0b02 	vstr	d0, [r4, #8]
 800c962:	da85      	bge.n	800c870 <__ieee754_rem_pio2+0x60>
 800c964:	eeb1 6b46 	vneg.f64	d6, d6
 800c968:	eeb1 0b40 	vneg.f64	d0, d0
 800c96c:	ed84 6b00 	vstr	d6, [r4]
 800c970:	ed84 0b02 	vstr	d0, [r4, #8]
 800c974:	4240      	negs	r0, r0
 800c976:	e77b      	b.n	800c870 <__ieee754_rem_pio2+0x60>
 800c978:	ed9f 7b3b 	vldr	d7, [pc, #236]	@ 800ca68 <__ieee754_rem_pio2+0x258>
 800c97c:	eeb0 0b46 	vmov.f64	d0, d6
 800c980:	eea4 0b07 	vfma.f64	d0, d4, d7
 800c984:	ee36 6b40 	vsub.f64	d6, d6, d0
 800c988:	eea4 6b07 	vfma.f64	d6, d4, d7
 800c98c:	ed9f 4b38 	vldr	d4, [pc, #224]	@ 800ca70 <__ieee754_rem_pio2+0x260>
 800c990:	eeb0 7b46 	vmov.f64	d7, d6
 800c994:	ee95 7b04 	vfnms.f64	d7, d5, d4
 800c998:	ee30 6b47 	vsub.f64	d6, d0, d7
 800c99c:	e7ba      	b.n	800c914 <__ieee754_rem_pio2+0x104>
 800c99e:	4b3c      	ldr	r3, [pc, #240]	@ (800ca90 <__ieee754_rem_pio2+0x280>)
 800c9a0:	429e      	cmp	r6, r3
 800c9a2:	d906      	bls.n	800c9b2 <__ieee754_rem_pio2+0x1a2>
 800c9a4:	ee30 7b40 	vsub.f64	d7, d0, d0
 800c9a8:	ed80 7b02 	vstr	d7, [r0, #8]
 800c9ac:	ed80 7b00 	vstr	d7, [r0]
 800c9b0:	e740      	b.n	800c834 <__ieee754_rem_pio2+0x24>
 800c9b2:	ee10 3a10 	vmov	r3, s0
 800c9b6:	1532      	asrs	r2, r6, #20
 800c9b8:	f2a2 4216 	subw	r2, r2, #1046	@ 0x416
 800c9bc:	4618      	mov	r0, r3
 800c9be:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 800c9c2:	ec41 0b17 	vmov	d7, r0, r1
 800c9c6:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800c9ca:	ed9f 5b2b 	vldr	d5, [pc, #172]	@ 800ca78 <__ieee754_rem_pio2+0x268>
 800c9ce:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800c9d2:	ee37 7b46 	vsub.f64	d7, d7, d6
 800c9d6:	ed8d 6b02 	vstr	d6, [sp, #8]
 800c9da:	ee27 7b05 	vmul.f64	d7, d7, d5
 800c9de:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800c9e2:	a808      	add	r0, sp, #32
 800c9e4:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800c9e8:	ee37 7b46 	vsub.f64	d7, d7, d6
 800c9ec:	ed8d 6b04 	vstr	d6, [sp, #16]
 800c9f0:	ee27 7b05 	vmul.f64	d7, d7, d5
 800c9f4:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c9f8:	2103      	movs	r1, #3
 800c9fa:	ed30 7b02 	vldmdb	r0!, {d7}
 800c9fe:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ca02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca06:	460b      	mov	r3, r1
 800ca08:	f101 31ff 	add.w	r1, r1, #4294967295	@ 0xffffffff
 800ca0c:	d0f5      	beq.n	800c9fa <__ieee754_rem_pio2+0x1ea>
 800ca0e:	4921      	ldr	r1, [pc, #132]	@ (800ca94 <__ieee754_rem_pio2+0x284>)
 800ca10:	9101      	str	r1, [sp, #4]
 800ca12:	2102      	movs	r1, #2
 800ca14:	9100      	str	r1, [sp, #0]
 800ca16:	a802      	add	r0, sp, #8
 800ca18:	4621      	mov	r1, r4
 800ca1a:	f000 f83d 	bl	800ca98 <__kernel_rem_pio2>
 800ca1e:	2d00      	cmp	r5, #0
 800ca20:	f6bf af26 	bge.w	800c870 <__ieee754_rem_pio2+0x60>
 800ca24:	ed94 7b00 	vldr	d7, [r4]
 800ca28:	eeb1 7b47 	vneg.f64	d7, d7
 800ca2c:	ed84 7b00 	vstr	d7, [r4]
 800ca30:	ed94 7b02 	vldr	d7, [r4, #8]
 800ca34:	eeb1 7b47 	vneg.f64	d7, d7
 800ca38:	ed84 7b02 	vstr	d7, [r4, #8]
 800ca3c:	e79a      	b.n	800c974 <__ieee754_rem_pio2+0x164>
 800ca3e:	bf00      	nop
 800ca40:	54400000 	.word	0x54400000
 800ca44:	3ff921fb 	.word	0x3ff921fb
 800ca48:	1a626331 	.word	0x1a626331
 800ca4c:	3dd0b461 	.word	0x3dd0b461
 800ca50:	1a600000 	.word	0x1a600000
 800ca54:	3dd0b461 	.word	0x3dd0b461
 800ca58:	2e037073 	.word	0x2e037073
 800ca5c:	3ba3198a 	.word	0x3ba3198a
 800ca60:	6dc9c883 	.word	0x6dc9c883
 800ca64:	3fe45f30 	.word	0x3fe45f30
 800ca68:	2e000000 	.word	0x2e000000
 800ca6c:	3ba3198a 	.word	0x3ba3198a
 800ca70:	252049c1 	.word	0x252049c1
 800ca74:	397b839a 	.word	0x397b839a
 800ca78:	00000000 	.word	0x00000000
 800ca7c:	41700000 	.word	0x41700000
 800ca80:	3fe921fb 	.word	0x3fe921fb
 800ca84:	4002d97b 	.word	0x4002d97b
 800ca88:	413921fb 	.word	0x413921fb
 800ca8c:	0800d368 	.word	0x0800d368
 800ca90:	7fefffff 	.word	0x7fefffff
 800ca94:	0800d3e8 	.word	0x0800d3e8

0800ca98 <__kernel_rem_pio2>:
 800ca98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca9c:	ed2d 8b06 	vpush	{d8-d10}
 800caa0:	f5ad 7d13 	sub.w	sp, sp, #588	@ 0x24c
 800caa4:	469b      	mov	fp, r3
 800caa6:	9001      	str	r0, [sp, #4]
 800caa8:	4bbb      	ldr	r3, [pc, #748]	@ (800cd98 <__kernel_rem_pio2+0x300>)
 800caaa:	98a2      	ldr	r0, [sp, #648]	@ 0x288
 800caac:	f8dd 828c 	ldr.w	r8, [sp, #652]	@ 0x28c
 800cab0:	f853 9020 	ldr.w	r9, [r3, r0, lsl #2]
 800cab4:	f112 0f14 	cmn.w	r2, #20
 800cab8:	bfa8      	it	ge
 800caba:	1ed3      	subge	r3, r2, #3
 800cabc:	f10b 3aff 	add.w	sl, fp, #4294967295	@ 0xffffffff
 800cac0:	bfb8      	it	lt
 800cac2:	2300      	movlt	r3, #0
 800cac4:	f06f 0517 	mvn.w	r5, #23
 800cac8:	ed9f 6bad 	vldr	d6, [pc, #692]	@ 800cd80 <__kernel_rem_pio2+0x2e8>
 800cacc:	bfa4      	itt	ge
 800cace:	2018      	movge	r0, #24
 800cad0:	fb93 f3f0 	sdivge	r3, r3, r0
 800cad4:	fb03 5505 	mla	r5, r3, r5, r5
 800cad8:	eba3 040a 	sub.w	r4, r3, sl
 800cadc:	4415      	add	r5, r2
 800cade:	460f      	mov	r7, r1
 800cae0:	eb09 060a 	add.w	r6, r9, sl
 800cae4:	a81a      	add	r0, sp, #104	@ 0x68
 800cae6:	eb08 0c84 	add.w	ip, r8, r4, lsl #2
 800caea:	2200      	movs	r2, #0
 800caec:	42b2      	cmp	r2, r6
 800caee:	dd0e      	ble.n	800cb0e <__kernel_rem_pio2+0x76>
 800caf0:	aa1a      	add	r2, sp, #104	@ 0x68
 800caf2:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 800caf6:	f50d 7ed4 	add.w	lr, sp, #424	@ 0x1a8
 800cafa:	2600      	movs	r6, #0
 800cafc:	454e      	cmp	r6, r9
 800cafe:	dc25      	bgt.n	800cb4c <__kernel_rem_pio2+0xb4>
 800cb00:	ed9f 7b9f 	vldr	d7, [pc, #636]	@ 800cd80 <__kernel_rem_pio2+0x2e8>
 800cb04:	f8dd c004 	ldr.w	ip, [sp, #4]
 800cb08:	4614      	mov	r4, r2
 800cb0a:	2000      	movs	r0, #0
 800cb0c:	e015      	b.n	800cb3a <__kernel_rem_pio2+0xa2>
 800cb0e:	42d4      	cmn	r4, r2
 800cb10:	d409      	bmi.n	800cb26 <__kernel_rem_pio2+0x8e>
 800cb12:	f85c 1022 	ldr.w	r1, [ip, r2, lsl #2]
 800cb16:	ee07 1a90 	vmov	s15, r1
 800cb1a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800cb1e:	eca0 7b02 	vstmia	r0!, {d7}
 800cb22:	3201      	adds	r2, #1
 800cb24:	e7e2      	b.n	800caec <__kernel_rem_pio2+0x54>
 800cb26:	eeb0 7b46 	vmov.f64	d7, d6
 800cb2a:	e7f8      	b.n	800cb1e <__kernel_rem_pio2+0x86>
 800cb2c:	ecbc 5b02 	vldmia	ip!, {d5}
 800cb30:	ed94 6b00 	vldr	d6, [r4]
 800cb34:	3001      	adds	r0, #1
 800cb36:	eea5 7b06 	vfma.f64	d7, d5, d6
 800cb3a:	4550      	cmp	r0, sl
 800cb3c:	f1a4 0408 	sub.w	r4, r4, #8
 800cb40:	ddf4      	ble.n	800cb2c <__kernel_rem_pio2+0x94>
 800cb42:	ecae 7b02 	vstmia	lr!, {d7}
 800cb46:	3601      	adds	r6, #1
 800cb48:	3208      	adds	r2, #8
 800cb4a:	e7d7      	b.n	800cafc <__kernel_rem_pio2+0x64>
 800cb4c:	aa06      	add	r2, sp, #24
 800cb4e:	ed9f 9b8e 	vldr	d9, [pc, #568]	@ 800cd88 <__kernel_rem_pio2+0x2f0>
 800cb52:	ed9f ab8f 	vldr	d10, [pc, #572]	@ 800cd90 <__kernel_rem_pio2+0x2f8>
 800cb56:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 800cb5a:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 800cb5e:	9203      	str	r2, [sp, #12]
 800cb60:	9302      	str	r3, [sp, #8]
 800cb62:	464c      	mov	r4, r9
 800cb64:	00e3      	lsls	r3, r4, #3
 800cb66:	9304      	str	r3, [sp, #16]
 800cb68:	ab92      	add	r3, sp, #584	@ 0x248
 800cb6a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800cb6e:	ed13 0b28 	vldr	d0, [r3, #-160]	@ 0xffffff60
 800cb72:	aa6a      	add	r2, sp, #424	@ 0x1a8
 800cb74:	ab06      	add	r3, sp, #24
 800cb76:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800cb7a:	461e      	mov	r6, r3
 800cb7c:	4620      	mov	r0, r4
 800cb7e:	2800      	cmp	r0, #0
 800cb80:	f1a2 0208 	sub.w	r2, r2, #8
 800cb84:	dc4a      	bgt.n	800cc1c <__kernel_rem_pio2+0x184>
 800cb86:	4628      	mov	r0, r5
 800cb88:	9305      	str	r3, [sp, #20]
 800cb8a:	f000 fac9 	bl	800d120 <scalbn>
 800cb8e:	eeb0 8b40 	vmov.f64	d8, d0
 800cb92:	eeb4 0b00 	vmov.f64	d0, #64	@ 0x3e000000  0.125
 800cb96:	ee28 0b00 	vmul.f64	d0, d8, d0
 800cb9a:	f000 fb41 	bl	800d220 <floor>
 800cb9e:	eeb2 7b00 	vmov.f64	d7, #32	@ 0x41000000  8.0
 800cba2:	eea0 8b47 	vfms.f64	d8, d0, d7
 800cba6:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 800cbaa:	2d00      	cmp	r5, #0
 800cbac:	ee17 8a90 	vmov	r8, s15
 800cbb0:	9b05      	ldr	r3, [sp, #20]
 800cbb2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800cbb6:	ee38 8b47 	vsub.f64	d8, d8, d7
 800cbba:	dd41      	ble.n	800cc40 <__kernel_rem_pio2+0x1a8>
 800cbbc:	1e60      	subs	r0, r4, #1
 800cbbe:	aa06      	add	r2, sp, #24
 800cbc0:	f1c5 0c18 	rsb	ip, r5, #24
 800cbc4:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 800cbc8:	fa46 f20c 	asr.w	r2, r6, ip
 800cbcc:	4490      	add	r8, r2
 800cbce:	fa02 f20c 	lsl.w	r2, r2, ip
 800cbd2:	1ab6      	subs	r6, r6, r2
 800cbd4:	aa06      	add	r2, sp, #24
 800cbd6:	f842 6020 	str.w	r6, [r2, r0, lsl #2]
 800cbda:	f1c5 0217 	rsb	r2, r5, #23
 800cbde:	4116      	asrs	r6, r2
 800cbe0:	2e00      	cmp	r6, #0
 800cbe2:	dd3c      	ble.n	800cc5e <__kernel_rem_pio2+0x1c6>
 800cbe4:	f04f 0c00 	mov.w	ip, #0
 800cbe8:	f108 0801 	add.w	r8, r8, #1
 800cbec:	4660      	mov	r0, ip
 800cbee:	f06f 4e7f 	mvn.w	lr, #4278190080	@ 0xff000000
 800cbf2:	4564      	cmp	r4, ip
 800cbf4:	dc66      	bgt.n	800ccc4 <__kernel_rem_pio2+0x22c>
 800cbf6:	2d00      	cmp	r5, #0
 800cbf8:	dd03      	ble.n	800cc02 <__kernel_rem_pio2+0x16a>
 800cbfa:	2d01      	cmp	r5, #1
 800cbfc:	d072      	beq.n	800cce4 <__kernel_rem_pio2+0x24c>
 800cbfe:	2d02      	cmp	r5, #2
 800cc00:	d07a      	beq.n	800ccf8 <__kernel_rem_pio2+0x260>
 800cc02:	2e02      	cmp	r6, #2
 800cc04:	d12b      	bne.n	800cc5e <__kernel_rem_pio2+0x1c6>
 800cc06:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 800cc0a:	ee30 8b48 	vsub.f64	d8, d0, d8
 800cc0e:	b330      	cbz	r0, 800cc5e <__kernel_rem_pio2+0x1c6>
 800cc10:	4628      	mov	r0, r5
 800cc12:	f000 fa85 	bl	800d120 <scalbn>
 800cc16:	ee38 8b40 	vsub.f64	d8, d8, d0
 800cc1a:	e020      	b.n	800cc5e <__kernel_rem_pio2+0x1c6>
 800cc1c:	ee20 7b09 	vmul.f64	d7, d0, d9
 800cc20:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800cc24:	3801      	subs	r0, #1
 800cc26:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 800cc2a:	eea7 0b4a 	vfms.f64	d0, d7, d10
 800cc2e:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800cc32:	eca6 0a01 	vstmia	r6!, {s0}
 800cc36:	ed92 0b00 	vldr	d0, [r2]
 800cc3a:	ee37 0b00 	vadd.f64	d0, d7, d0
 800cc3e:	e79e      	b.n	800cb7e <__kernel_rem_pio2+0xe6>
 800cc40:	d105      	bne.n	800cc4e <__kernel_rem_pio2+0x1b6>
 800cc42:	1e62      	subs	r2, r4, #1
 800cc44:	a906      	add	r1, sp, #24
 800cc46:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 800cc4a:	15f6      	asrs	r6, r6, #23
 800cc4c:	e7c8      	b.n	800cbe0 <__kernel_rem_pio2+0x148>
 800cc4e:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 800cc52:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800cc56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc5a:	da31      	bge.n	800ccc0 <__kernel_rem_pio2+0x228>
 800cc5c:	2600      	movs	r6, #0
 800cc5e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800cc62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc66:	f040 809b 	bne.w	800cda0 <__kernel_rem_pio2+0x308>
 800cc6a:	1e62      	subs	r2, r4, #1
 800cc6c:	2000      	movs	r0, #0
 800cc6e:	454a      	cmp	r2, r9
 800cc70:	da49      	bge.n	800cd06 <__kernel_rem_pio2+0x26e>
 800cc72:	2800      	cmp	r0, #0
 800cc74:	d062      	beq.n	800cd3c <__kernel_rem_pio2+0x2a4>
 800cc76:	3c01      	subs	r4, #1
 800cc78:	ab06      	add	r3, sp, #24
 800cc7a:	3d18      	subs	r5, #24
 800cc7c:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	d0f8      	beq.n	800cc76 <__kernel_rem_pio2+0x1de>
 800cc84:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 800cc88:	4628      	mov	r0, r5
 800cc8a:	f000 fa49 	bl	800d120 <scalbn>
 800cc8e:	ed9f 6b3e 	vldr	d6, [pc, #248]	@ 800cd88 <__kernel_rem_pio2+0x2f0>
 800cc92:	1c62      	adds	r2, r4, #1
 800cc94:	a96a      	add	r1, sp, #424	@ 0x1a8
 800cc96:	00d3      	lsls	r3, r2, #3
 800cc98:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800cc9c:	4622      	mov	r2, r4
 800cc9e:	2a00      	cmp	r2, #0
 800cca0:	f280 80a8 	bge.w	800cdf4 <__kernel_rem_pio2+0x35c>
 800cca4:	4622      	mov	r2, r4
 800cca6:	2a00      	cmp	r2, #0
 800cca8:	f2c0 80c6 	blt.w	800ce38 <__kernel_rem_pio2+0x3a0>
 800ccac:	a96a      	add	r1, sp, #424	@ 0x1a8
 800ccae:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 800ccb2:	ed9f 7b33 	vldr	d7, [pc, #204]	@ 800cd80 <__kernel_rem_pio2+0x2e8>
 800ccb6:	f8df c0e4 	ldr.w	ip, [pc, #228]	@ 800cd9c <__kernel_rem_pio2+0x304>
 800ccba:	2000      	movs	r0, #0
 800ccbc:	1aa1      	subs	r1, r4, r2
 800ccbe:	e0b0      	b.n	800ce22 <__kernel_rem_pio2+0x38a>
 800ccc0:	2602      	movs	r6, #2
 800ccc2:	e78f      	b.n	800cbe4 <__kernel_rem_pio2+0x14c>
 800ccc4:	f853 2b04 	ldr.w	r2, [r3], #4
 800ccc8:	b948      	cbnz	r0, 800ccde <__kernel_rem_pio2+0x246>
 800ccca:	b122      	cbz	r2, 800ccd6 <__kernel_rem_pio2+0x23e>
 800cccc:	f1c2 7280 	rsb	r2, r2, #16777216	@ 0x1000000
 800ccd0:	f843 2c04 	str.w	r2, [r3, #-4]
 800ccd4:	2201      	movs	r2, #1
 800ccd6:	f10c 0c01 	add.w	ip, ip, #1
 800ccda:	4610      	mov	r0, r2
 800ccdc:	e789      	b.n	800cbf2 <__kernel_rem_pio2+0x15a>
 800ccde:	ebae 0202 	sub.w	r2, lr, r2
 800cce2:	e7f5      	b.n	800ccd0 <__kernel_rem_pio2+0x238>
 800cce4:	1e62      	subs	r2, r4, #1
 800cce6:	ab06      	add	r3, sp, #24
 800cce8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ccec:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800ccf0:	a906      	add	r1, sp, #24
 800ccf2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800ccf6:	e784      	b.n	800cc02 <__kernel_rem_pio2+0x16a>
 800ccf8:	1e62      	subs	r2, r4, #1
 800ccfa:	ab06      	add	r3, sp, #24
 800ccfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cd00:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800cd04:	e7f4      	b.n	800ccf0 <__kernel_rem_pio2+0x258>
 800cd06:	ab06      	add	r3, sp, #24
 800cd08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cd0c:	3a01      	subs	r2, #1
 800cd0e:	4318      	orrs	r0, r3
 800cd10:	e7ad      	b.n	800cc6e <__kernel_rem_pio2+0x1d6>
 800cd12:	3301      	adds	r3, #1
 800cd14:	f852 0d04 	ldr.w	r0, [r2, #-4]!
 800cd18:	2800      	cmp	r0, #0
 800cd1a:	d0fa      	beq.n	800cd12 <__kernel_rem_pio2+0x27a>
 800cd1c:	9a04      	ldr	r2, [sp, #16]
 800cd1e:	f502 7212 	add.w	r2, r2, #584	@ 0x248
 800cd22:	446a      	add	r2, sp
 800cd24:	eb04 000b 	add.w	r0, r4, fp
 800cd28:	a91a      	add	r1, sp, #104	@ 0x68
 800cd2a:	1c66      	adds	r6, r4, #1
 800cd2c:	3a98      	subs	r2, #152	@ 0x98
 800cd2e:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 800cd32:	4423      	add	r3, r4
 800cd34:	42b3      	cmp	r3, r6
 800cd36:	da04      	bge.n	800cd42 <__kernel_rem_pio2+0x2aa>
 800cd38:	461c      	mov	r4, r3
 800cd3a:	e713      	b.n	800cb64 <__kernel_rem_pio2+0xcc>
 800cd3c:	9a03      	ldr	r2, [sp, #12]
 800cd3e:	2301      	movs	r3, #1
 800cd40:	e7e8      	b.n	800cd14 <__kernel_rem_pio2+0x27c>
 800cd42:	9902      	ldr	r1, [sp, #8]
 800cd44:	f8dd c004 	ldr.w	ip, [sp, #4]
 800cd48:	f851 1026 	ldr.w	r1, [r1, r6, lsl #2]
 800cd4c:	9104      	str	r1, [sp, #16]
 800cd4e:	ee07 1a90 	vmov	s15, r1
 800cd52:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800cd56:	2400      	movs	r4, #0
 800cd58:	eca0 7b02 	vstmia	r0!, {d7}
 800cd5c:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 800cd80 <__kernel_rem_pio2+0x2e8>
 800cd60:	4686      	mov	lr, r0
 800cd62:	4554      	cmp	r4, sl
 800cd64:	dd03      	ble.n	800cd6e <__kernel_rem_pio2+0x2d6>
 800cd66:	eca2 7b02 	vstmia	r2!, {d7}
 800cd6a:	3601      	adds	r6, #1
 800cd6c:	e7e2      	b.n	800cd34 <__kernel_rem_pio2+0x29c>
 800cd6e:	ecbc 5b02 	vldmia	ip!, {d5}
 800cd72:	ed3e 6b02 	vldmdb	lr!, {d6}
 800cd76:	3401      	adds	r4, #1
 800cd78:	eea5 7b06 	vfma.f64	d7, d5, d6
 800cd7c:	e7f1      	b.n	800cd62 <__kernel_rem_pio2+0x2ca>
 800cd7e:	bf00      	nop
	...
 800cd8c:	3e700000 	.word	0x3e700000
 800cd90:	00000000 	.word	0x00000000
 800cd94:	41700000 	.word	0x41700000
 800cd98:	0800d530 	.word	0x0800d530
 800cd9c:	0800d4f0 	.word	0x0800d4f0
 800cda0:	4268      	negs	r0, r5
 800cda2:	eeb0 0b48 	vmov.f64	d0, d8
 800cda6:	f000 f9bb 	bl	800d120 <scalbn>
 800cdaa:	ed9f 6b73 	vldr	d6, [pc, #460]	@ 800cf78 <__kernel_rem_pio2+0x4e0>
 800cdae:	eeb4 0bc6 	vcmpe.f64	d0, d6
 800cdb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cdb6:	db17      	blt.n	800cde8 <__kernel_rem_pio2+0x350>
 800cdb8:	ed9f 7b71 	vldr	d7, [pc, #452]	@ 800cf80 <__kernel_rem_pio2+0x4e8>
 800cdbc:	ee20 7b07 	vmul.f64	d7, d0, d7
 800cdc0:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800cdc4:	aa06      	add	r2, sp, #24
 800cdc6:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 800cdca:	eea5 0b46 	vfms.f64	d0, d5, d6
 800cdce:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800cdd2:	3518      	adds	r5, #24
 800cdd4:	ee10 3a10 	vmov	r3, s0
 800cdd8:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800cddc:	ee17 3a10 	vmov	r3, s14
 800cde0:	3401      	adds	r4, #1
 800cde2:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800cde6:	e74d      	b.n	800cc84 <__kernel_rem_pio2+0x1ec>
 800cde8:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800cdec:	aa06      	add	r2, sp, #24
 800cdee:	ee10 3a10 	vmov	r3, s0
 800cdf2:	e7f6      	b.n	800cde2 <__kernel_rem_pio2+0x34a>
 800cdf4:	a806      	add	r0, sp, #24
 800cdf6:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 800cdfa:	9001      	str	r0, [sp, #4]
 800cdfc:	ee07 0a90 	vmov	s15, r0
 800ce00:	3a01      	subs	r2, #1
 800ce02:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800ce06:	ee27 7b00 	vmul.f64	d7, d7, d0
 800ce0a:	ee20 0b06 	vmul.f64	d0, d0, d6
 800ce0e:	ed21 7b02 	vstmdb	r1!, {d7}
 800ce12:	e744      	b.n	800cc9e <__kernel_rem_pio2+0x206>
 800ce14:	ecbc 5b02 	vldmia	ip!, {d5}
 800ce18:	ecb5 6b02 	vldmia	r5!, {d6}
 800ce1c:	3001      	adds	r0, #1
 800ce1e:	eea5 7b06 	vfma.f64	d7, d5, d6
 800ce22:	4548      	cmp	r0, r9
 800ce24:	dc01      	bgt.n	800ce2a <__kernel_rem_pio2+0x392>
 800ce26:	4281      	cmp	r1, r0
 800ce28:	daf4      	bge.n	800ce14 <__kernel_rem_pio2+0x37c>
 800ce2a:	a842      	add	r0, sp, #264	@ 0x108
 800ce2c:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800ce30:	ed81 7b00 	vstr	d7, [r1]
 800ce34:	3a01      	subs	r2, #1
 800ce36:	e736      	b.n	800cca6 <__kernel_rem_pio2+0x20e>
 800ce38:	9aa2      	ldr	r2, [sp, #648]	@ 0x288
 800ce3a:	2a02      	cmp	r2, #2
 800ce3c:	dc0a      	bgt.n	800ce54 <__kernel_rem_pio2+0x3bc>
 800ce3e:	2a00      	cmp	r2, #0
 800ce40:	dc2d      	bgt.n	800ce9e <__kernel_rem_pio2+0x406>
 800ce42:	d046      	beq.n	800ced2 <__kernel_rem_pio2+0x43a>
 800ce44:	f008 0007 	and.w	r0, r8, #7
 800ce48:	f50d 7d13 	add.w	sp, sp, #588	@ 0x24c
 800ce4c:	ecbd 8b06 	vpop	{d8-d10}
 800ce50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce54:	9aa2      	ldr	r2, [sp, #648]	@ 0x288
 800ce56:	2a03      	cmp	r2, #3
 800ce58:	d1f4      	bne.n	800ce44 <__kernel_rem_pio2+0x3ac>
 800ce5a:	a942      	add	r1, sp, #264	@ 0x108
 800ce5c:	f1a3 0208 	sub.w	r2, r3, #8
 800ce60:	440a      	add	r2, r1
 800ce62:	4611      	mov	r1, r2
 800ce64:	4620      	mov	r0, r4
 800ce66:	2800      	cmp	r0, #0
 800ce68:	f1a1 0108 	sub.w	r1, r1, #8
 800ce6c:	dc52      	bgt.n	800cf14 <__kernel_rem_pio2+0x47c>
 800ce6e:	4621      	mov	r1, r4
 800ce70:	2901      	cmp	r1, #1
 800ce72:	f1a2 0208 	sub.w	r2, r2, #8
 800ce76:	dc5d      	bgt.n	800cf34 <__kernel_rem_pio2+0x49c>
 800ce78:	ed9f 7b43 	vldr	d7, [pc, #268]	@ 800cf88 <__kernel_rem_pio2+0x4f0>
 800ce7c:	aa42      	add	r2, sp, #264	@ 0x108
 800ce7e:	4413      	add	r3, r2
 800ce80:	2c01      	cmp	r4, #1
 800ce82:	dc67      	bgt.n	800cf54 <__kernel_rem_pio2+0x4bc>
 800ce84:	ed9d 5b42 	vldr	d5, [sp, #264]	@ 0x108
 800ce88:	ed9d 6b44 	vldr	d6, [sp, #272]	@ 0x110
 800ce8c:	2e00      	cmp	r6, #0
 800ce8e:	d167      	bne.n	800cf60 <__kernel_rem_pio2+0x4c8>
 800ce90:	ed87 5b00 	vstr	d5, [r7]
 800ce94:	ed87 6b02 	vstr	d6, [r7, #8]
 800ce98:	ed87 7b04 	vstr	d7, [r7, #16]
 800ce9c:	e7d2      	b.n	800ce44 <__kernel_rem_pio2+0x3ac>
 800ce9e:	ed9f 6b3a 	vldr	d6, [pc, #232]	@ 800cf88 <__kernel_rem_pio2+0x4f0>
 800cea2:	aa42      	add	r2, sp, #264	@ 0x108
 800cea4:	4413      	add	r3, r2
 800cea6:	4622      	mov	r2, r4
 800cea8:	2a00      	cmp	r2, #0
 800ceaa:	da24      	bge.n	800cef6 <__kernel_rem_pio2+0x45e>
 800ceac:	b34e      	cbz	r6, 800cf02 <__kernel_rem_pio2+0x46a>
 800ceae:	eeb1 7b46 	vneg.f64	d7, d6
 800ceb2:	ed87 7b00 	vstr	d7, [r7]
 800ceb6:	ed9d 7b42 	vldr	d7, [sp, #264]	@ 0x108
 800ceba:	aa44      	add	r2, sp, #272	@ 0x110
 800cebc:	2301      	movs	r3, #1
 800cebe:	ee37 7b46 	vsub.f64	d7, d7, d6
 800cec2:	429c      	cmp	r4, r3
 800cec4:	da20      	bge.n	800cf08 <__kernel_rem_pio2+0x470>
 800cec6:	b10e      	cbz	r6, 800cecc <__kernel_rem_pio2+0x434>
 800cec8:	eeb1 7b47 	vneg.f64	d7, d7
 800cecc:	ed87 7b02 	vstr	d7, [r7, #8]
 800ced0:	e7b8      	b.n	800ce44 <__kernel_rem_pio2+0x3ac>
 800ced2:	ed9f 7b2d 	vldr	d7, [pc, #180]	@ 800cf88 <__kernel_rem_pio2+0x4f0>
 800ced6:	aa42      	add	r2, sp, #264	@ 0x108
 800ced8:	4413      	add	r3, r2
 800ceda:	2c00      	cmp	r4, #0
 800cedc:	da05      	bge.n	800ceea <__kernel_rem_pio2+0x452>
 800cede:	b10e      	cbz	r6, 800cee4 <__kernel_rem_pio2+0x44c>
 800cee0:	eeb1 7b47 	vneg.f64	d7, d7
 800cee4:	ed87 7b00 	vstr	d7, [r7]
 800cee8:	e7ac      	b.n	800ce44 <__kernel_rem_pio2+0x3ac>
 800ceea:	ed33 6b02 	vldmdb	r3!, {d6}
 800ceee:	3c01      	subs	r4, #1
 800cef0:	ee37 7b06 	vadd.f64	d7, d7, d6
 800cef4:	e7f1      	b.n	800ceda <__kernel_rem_pio2+0x442>
 800cef6:	ed33 7b02 	vldmdb	r3!, {d7}
 800cefa:	3a01      	subs	r2, #1
 800cefc:	ee36 6b07 	vadd.f64	d6, d6, d7
 800cf00:	e7d2      	b.n	800cea8 <__kernel_rem_pio2+0x410>
 800cf02:	eeb0 7b46 	vmov.f64	d7, d6
 800cf06:	e7d4      	b.n	800ceb2 <__kernel_rem_pio2+0x41a>
 800cf08:	ecb2 6b02 	vldmia	r2!, {d6}
 800cf0c:	3301      	adds	r3, #1
 800cf0e:	ee37 7b06 	vadd.f64	d7, d7, d6
 800cf12:	e7d6      	b.n	800cec2 <__kernel_rem_pio2+0x42a>
 800cf14:	ed91 7b00 	vldr	d7, [r1]
 800cf18:	ed91 5b02 	vldr	d5, [r1, #8]
 800cf1c:	3801      	subs	r0, #1
 800cf1e:	ee37 6b05 	vadd.f64	d6, d7, d5
 800cf22:	ee37 7b46 	vsub.f64	d7, d7, d6
 800cf26:	ed81 6b00 	vstr	d6, [r1]
 800cf2a:	ee37 7b05 	vadd.f64	d7, d7, d5
 800cf2e:	ed81 7b02 	vstr	d7, [r1, #8]
 800cf32:	e798      	b.n	800ce66 <__kernel_rem_pio2+0x3ce>
 800cf34:	ed92 7b00 	vldr	d7, [r2]
 800cf38:	ed92 5b02 	vldr	d5, [r2, #8]
 800cf3c:	3901      	subs	r1, #1
 800cf3e:	ee37 6b05 	vadd.f64	d6, d7, d5
 800cf42:	ee37 7b46 	vsub.f64	d7, d7, d6
 800cf46:	ed82 6b00 	vstr	d6, [r2]
 800cf4a:	ee37 7b05 	vadd.f64	d7, d7, d5
 800cf4e:	ed82 7b02 	vstr	d7, [r2, #8]
 800cf52:	e78d      	b.n	800ce70 <__kernel_rem_pio2+0x3d8>
 800cf54:	ed33 6b02 	vldmdb	r3!, {d6}
 800cf58:	3c01      	subs	r4, #1
 800cf5a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800cf5e:	e78f      	b.n	800ce80 <__kernel_rem_pio2+0x3e8>
 800cf60:	eeb1 5b45 	vneg.f64	d5, d5
 800cf64:	eeb1 6b46 	vneg.f64	d6, d6
 800cf68:	ed87 5b00 	vstr	d5, [r7]
 800cf6c:	eeb1 7b47 	vneg.f64	d7, d7
 800cf70:	ed87 6b02 	vstr	d6, [r7, #8]
 800cf74:	e790      	b.n	800ce98 <__kernel_rem_pio2+0x400>
 800cf76:	bf00      	nop
 800cf78:	00000000 	.word	0x00000000
 800cf7c:	41700000 	.word	0x41700000
 800cf80:	00000000 	.word	0x00000000
 800cf84:	3e700000 	.word	0x3e700000
	...

0800cf90 <__kernel_cos>:
 800cf90:	eeb0 5b40 	vmov.f64	d5, d0
 800cf94:	ee15 1a90 	vmov	r1, s11
 800cf98:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 800cf9c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800cfa0:	f1b1 5f79 	cmp.w	r1, #1044381696	@ 0x3e400000
 800cfa4:	d204      	bcs.n	800cfb0 <__kernel_cos+0x20>
 800cfa6:	eefd 7bc5 	vcvt.s32.f64	s15, d5
 800cfaa:	ee17 3a90 	vmov	r3, s15
 800cfae:	b343      	cbz	r3, 800d002 <__kernel_cos+0x72>
 800cfb0:	ee25 6b05 	vmul.f64	d6, d5, d5
 800cfb4:	ee21 1b45 	vnmul.f64	d1, d1, d5
 800cfb8:	ed9f 7b1b 	vldr	d7, [pc, #108]	@ 800d028 <__kernel_cos+0x98>
 800cfbc:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 800d030 <__kernel_cos+0xa0>
 800cfc0:	eea6 4b07 	vfma.f64	d4, d6, d7
 800cfc4:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 800d038 <__kernel_cos+0xa8>
 800cfc8:	eea4 7b06 	vfma.f64	d7, d4, d6
 800cfcc:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 800d040 <__kernel_cos+0xb0>
 800cfd0:	eea7 4b06 	vfma.f64	d4, d7, d6
 800cfd4:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 800d048 <__kernel_cos+0xb8>
 800cfd8:	4b1f      	ldr	r3, [pc, #124]	@ (800d058 <__kernel_cos+0xc8>)
 800cfda:	eea4 7b06 	vfma.f64	d7, d4, d6
 800cfde:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 800d050 <__kernel_cos+0xc0>
 800cfe2:	4299      	cmp	r1, r3
 800cfe4:	eea7 4b06 	vfma.f64	d4, d7, d6
 800cfe8:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 800cfec:	ee24 4b06 	vmul.f64	d4, d4, d6
 800cff0:	ee26 7b07 	vmul.f64	d7, d6, d7
 800cff4:	eea6 1b04 	vfma.f64	d1, d6, d4
 800cff8:	d804      	bhi.n	800d004 <__kernel_cos+0x74>
 800cffa:	ee37 7b41 	vsub.f64	d7, d7, d1
 800cffe:	ee30 0b47 	vsub.f64	d0, d0, d7
 800d002:	4770      	bx	lr
 800d004:	4b15      	ldr	r3, [pc, #84]	@ (800d05c <__kernel_cos+0xcc>)
 800d006:	4299      	cmp	r1, r3
 800d008:	d809      	bhi.n	800d01e <__kernel_cos+0x8e>
 800d00a:	2200      	movs	r2, #0
 800d00c:	f5a1 1300 	sub.w	r3, r1, #2097152	@ 0x200000
 800d010:	ec43 2b16 	vmov	d6, r2, r3
 800d014:	ee30 0b46 	vsub.f64	d0, d0, d6
 800d018:	ee37 7b46 	vsub.f64	d7, d7, d6
 800d01c:	e7ed      	b.n	800cffa <__kernel_cos+0x6a>
 800d01e:	eeb5 6b02 	vmov.f64	d6, #82	@ 0x3e900000  0.2812500
 800d022:	e7f7      	b.n	800d014 <__kernel_cos+0x84>
 800d024:	f3af 8000 	nop.w
 800d028:	be8838d4 	.word	0xbe8838d4
 800d02c:	bda8fae9 	.word	0xbda8fae9
 800d030:	bdb4b1c4 	.word	0xbdb4b1c4
 800d034:	3e21ee9e 	.word	0x3e21ee9e
 800d038:	809c52ad 	.word	0x809c52ad
 800d03c:	be927e4f 	.word	0xbe927e4f
 800d040:	19cb1590 	.word	0x19cb1590
 800d044:	3efa01a0 	.word	0x3efa01a0
 800d048:	16c15177 	.word	0x16c15177
 800d04c:	bf56c16c 	.word	0xbf56c16c
 800d050:	5555554c 	.word	0x5555554c
 800d054:	3fa55555 	.word	0x3fa55555
 800d058:	3fd33332 	.word	0x3fd33332
 800d05c:	3fe90000 	.word	0x3fe90000

0800d060 <__kernel_sin>:
 800d060:	ee10 3a90 	vmov	r3, s1
 800d064:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d068:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800d06c:	d204      	bcs.n	800d078 <__kernel_sin+0x18>
 800d06e:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 800d072:	ee17 3a90 	vmov	r3, s15
 800d076:	b35b      	cbz	r3, 800d0d0 <__kernel_sin+0x70>
 800d078:	ee20 6b00 	vmul.f64	d6, d0, d0
 800d07c:	ee20 5b06 	vmul.f64	d5, d0, d6
 800d080:	ed9f 7b15 	vldr	d7, [pc, #84]	@ 800d0d8 <__kernel_sin+0x78>
 800d084:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 800d0e0 <__kernel_sin+0x80>
 800d088:	eea6 4b07 	vfma.f64	d4, d6, d7
 800d08c:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 800d0e8 <__kernel_sin+0x88>
 800d090:	eea4 7b06 	vfma.f64	d7, d4, d6
 800d094:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 800d0f0 <__kernel_sin+0x90>
 800d098:	eea7 4b06 	vfma.f64	d4, d7, d6
 800d09c:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 800d0f8 <__kernel_sin+0x98>
 800d0a0:	eea4 7b06 	vfma.f64	d7, d4, d6
 800d0a4:	b930      	cbnz	r0, 800d0b4 <__kernel_sin+0x54>
 800d0a6:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 800d100 <__kernel_sin+0xa0>
 800d0aa:	eea6 4b07 	vfma.f64	d4, d6, d7
 800d0ae:	eea4 0b05 	vfma.f64	d0, d4, d5
 800d0b2:	4770      	bx	lr
 800d0b4:	ee27 7b45 	vnmul.f64	d7, d7, d5
 800d0b8:	eeb6 4b00 	vmov.f64	d4, #96	@ 0x3f000000  0.5
 800d0bc:	eea1 7b04 	vfma.f64	d7, d1, d4
 800d0c0:	ee97 1b06 	vfnms.f64	d1, d7, d6
 800d0c4:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 800d108 <__kernel_sin+0xa8>
 800d0c8:	eea5 1b07 	vfma.f64	d1, d5, d7
 800d0cc:	ee30 0b41 	vsub.f64	d0, d0, d1
 800d0d0:	4770      	bx	lr
 800d0d2:	bf00      	nop
 800d0d4:	f3af 8000 	nop.w
 800d0d8:	5acfd57c 	.word	0x5acfd57c
 800d0dc:	3de5d93a 	.word	0x3de5d93a
 800d0e0:	8a2b9ceb 	.word	0x8a2b9ceb
 800d0e4:	be5ae5e6 	.word	0xbe5ae5e6
 800d0e8:	57b1fe7d 	.word	0x57b1fe7d
 800d0ec:	3ec71de3 	.word	0x3ec71de3
 800d0f0:	19c161d5 	.word	0x19c161d5
 800d0f4:	bf2a01a0 	.word	0xbf2a01a0
 800d0f8:	1110f8a6 	.word	0x1110f8a6
 800d0fc:	3f811111 	.word	0x3f811111
 800d100:	55555549 	.word	0x55555549
 800d104:	bfc55555 	.word	0xbfc55555
 800d108:	55555549 	.word	0x55555549
 800d10c:	3fc55555 	.word	0x3fc55555

0800d110 <fabs>:
 800d110:	ec51 0b10 	vmov	r0, r1, d0
 800d114:	4602      	mov	r2, r0
 800d116:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800d11a:	ec43 2b10 	vmov	d0, r2, r3
 800d11e:	4770      	bx	lr

0800d120 <scalbn>:
 800d120:	ee10 1a90 	vmov	r1, s1
 800d124:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800d128:	b98b      	cbnz	r3, 800d14e <scalbn+0x2e>
 800d12a:	ee10 3a10 	vmov	r3, s0
 800d12e:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800d132:	4319      	orrs	r1, r3
 800d134:	d00a      	beq.n	800d14c <scalbn+0x2c>
 800d136:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 800d1e8 <scalbn+0xc8>
 800d13a:	4b37      	ldr	r3, [pc, #220]	@ (800d218 <scalbn+0xf8>)
 800d13c:	ee20 0b07 	vmul.f64	d0, d0, d7
 800d140:	4298      	cmp	r0, r3
 800d142:	da0b      	bge.n	800d15c <scalbn+0x3c>
 800d144:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 800d1f0 <scalbn+0xd0>
 800d148:	ee20 0b07 	vmul.f64	d0, d0, d7
 800d14c:	4770      	bx	lr
 800d14e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800d152:	4293      	cmp	r3, r2
 800d154:	d107      	bne.n	800d166 <scalbn+0x46>
 800d156:	ee30 0b00 	vadd.f64	d0, d0, d0
 800d15a:	4770      	bx	lr
 800d15c:	ee10 1a90 	vmov	r1, s1
 800d160:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800d164:	3b36      	subs	r3, #54	@ 0x36
 800d166:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800d16a:	4290      	cmp	r0, r2
 800d16c:	dd0d      	ble.n	800d18a <scalbn+0x6a>
 800d16e:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 800d1f8 <scalbn+0xd8>
 800d172:	ee10 3a90 	vmov	r3, s1
 800d176:	eeb0 6b47 	vmov.f64	d6, d7
 800d17a:	ed9f 5b21 	vldr	d5, [pc, #132]	@ 800d200 <scalbn+0xe0>
 800d17e:	2b00      	cmp	r3, #0
 800d180:	fe27 7b05 	vselge.f64	d7, d7, d5
 800d184:	ee27 0b06 	vmul.f64	d0, d7, d6
 800d188:	4770      	bx	lr
 800d18a:	4418      	add	r0, r3
 800d18c:	f240 73fe 	movw	r3, #2046	@ 0x7fe
 800d190:	4298      	cmp	r0, r3
 800d192:	dcec      	bgt.n	800d16e <scalbn+0x4e>
 800d194:	2800      	cmp	r0, #0
 800d196:	dd0a      	ble.n	800d1ae <scalbn+0x8e>
 800d198:	f021 41ff 	bic.w	r1, r1, #2139095040	@ 0x7f800000
 800d19c:	ec53 2b10 	vmov	r2, r3, d0
 800d1a0:	f421 01e0 	bic.w	r1, r1, #7340032	@ 0x700000
 800d1a4:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 800d1a8:	ec43 2b10 	vmov	d0, r2, r3
 800d1ac:	4770      	bx	lr
 800d1ae:	f110 0f35 	cmn.w	r0, #53	@ 0x35
 800d1b2:	da09      	bge.n	800d1c8 <scalbn+0xa8>
 800d1b4:	ed9f 7b0e 	vldr	d7, [pc, #56]	@ 800d1f0 <scalbn+0xd0>
 800d1b8:	ee10 3a90 	vmov	r3, s1
 800d1bc:	eeb0 6b47 	vmov.f64	d6, d7
 800d1c0:	ed9f 5b11 	vldr	d5, [pc, #68]	@ 800d208 <scalbn+0xe8>
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	e7db      	b.n	800d180 <scalbn+0x60>
 800d1c8:	f021 41ff 	bic.w	r1, r1, #2139095040	@ 0x7f800000
 800d1cc:	ec53 2b10 	vmov	r2, r3, d0
 800d1d0:	3036      	adds	r0, #54	@ 0x36
 800d1d2:	f421 01e0 	bic.w	r1, r1, #7340032	@ 0x700000
 800d1d6:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 800d1da:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 800d210 <scalbn+0xf0>
 800d1de:	ec43 2b10 	vmov	d0, r2, r3
 800d1e2:	e7b1      	b.n	800d148 <scalbn+0x28>
 800d1e4:	f3af 8000 	nop.w
 800d1e8:	00000000 	.word	0x00000000
 800d1ec:	43500000 	.word	0x43500000
 800d1f0:	c2f8f359 	.word	0xc2f8f359
 800d1f4:	01a56e1f 	.word	0x01a56e1f
 800d1f8:	8800759c 	.word	0x8800759c
 800d1fc:	7e37e43c 	.word	0x7e37e43c
 800d200:	8800759c 	.word	0x8800759c
 800d204:	fe37e43c 	.word	0xfe37e43c
 800d208:	c2f8f359 	.word	0xc2f8f359
 800d20c:	81a56e1f 	.word	0x81a56e1f
 800d210:	00000000 	.word	0x00000000
 800d214:	3c900000 	.word	0x3c900000
 800d218:	ffff3cb0 	.word	0xffff3cb0
 800d21c:	00000000 	.word	0x00000000

0800d220 <floor>:
 800d220:	ee10 3a90 	vmov	r3, s1
 800d224:	f3c3 500a 	ubfx	r0, r3, #20, #11
 800d228:	ee10 2a10 	vmov	r2, s0
 800d22c:	f2a0 31ff 	subw	r1, r0, #1023	@ 0x3ff
 800d230:	2913      	cmp	r1, #19
 800d232:	b530      	push	{r4, r5, lr}
 800d234:	4615      	mov	r5, r2
 800d236:	dc33      	bgt.n	800d2a0 <floor+0x80>
 800d238:	2900      	cmp	r1, #0
 800d23a:	da18      	bge.n	800d26e <floor+0x4e>
 800d23c:	ed9f 7b30 	vldr	d7, [pc, #192]	@ 800d300 <floor+0xe0>
 800d240:	ee30 0b07 	vadd.f64	d0, d0, d7
 800d244:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800d248:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d24c:	dd0a      	ble.n	800d264 <floor+0x44>
 800d24e:	2b00      	cmp	r3, #0
 800d250:	da50      	bge.n	800d2f4 <floor+0xd4>
 800d252:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d256:	4313      	orrs	r3, r2
 800d258:	2200      	movs	r2, #0
 800d25a:	4293      	cmp	r3, r2
 800d25c:	4b2a      	ldr	r3, [pc, #168]	@ (800d308 <floor+0xe8>)
 800d25e:	bf08      	it	eq
 800d260:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 800d264:	4619      	mov	r1, r3
 800d266:	4610      	mov	r0, r2
 800d268:	ec41 0b10 	vmov	d0, r0, r1
 800d26c:	e01f      	b.n	800d2ae <floor+0x8e>
 800d26e:	4827      	ldr	r0, [pc, #156]	@ (800d30c <floor+0xec>)
 800d270:	4108      	asrs	r0, r1
 800d272:	ea03 0400 	and.w	r4, r3, r0
 800d276:	4314      	orrs	r4, r2
 800d278:	d019      	beq.n	800d2ae <floor+0x8e>
 800d27a:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800d300 <floor+0xe0>
 800d27e:	ee30 0b07 	vadd.f64	d0, d0, d7
 800d282:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800d286:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d28a:	ddeb      	ble.n	800d264 <floor+0x44>
 800d28c:	2b00      	cmp	r3, #0
 800d28e:	bfbe      	ittt	lt
 800d290:	f44f 1280 	movlt.w	r2, #1048576	@ 0x100000
 800d294:	410a      	asrlt	r2, r1
 800d296:	189b      	addlt	r3, r3, r2
 800d298:	ea23 0300 	bic.w	r3, r3, r0
 800d29c:	2200      	movs	r2, #0
 800d29e:	e7e1      	b.n	800d264 <floor+0x44>
 800d2a0:	2933      	cmp	r1, #51	@ 0x33
 800d2a2:	dd05      	ble.n	800d2b0 <floor+0x90>
 800d2a4:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800d2a8:	d101      	bne.n	800d2ae <floor+0x8e>
 800d2aa:	ee30 0b00 	vadd.f64	d0, d0, d0
 800d2ae:	bd30      	pop	{r4, r5, pc}
 800d2b0:	f2a0 4413 	subw	r4, r0, #1043	@ 0x413
 800d2b4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d2b8:	40e0      	lsrs	r0, r4
 800d2ba:	4210      	tst	r0, r2
 800d2bc:	d0f7      	beq.n	800d2ae <floor+0x8e>
 800d2be:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 800d300 <floor+0xe0>
 800d2c2:	ee30 0b07 	vadd.f64	d0, d0, d7
 800d2c6:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800d2ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d2ce:	ddc9      	ble.n	800d264 <floor+0x44>
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	da02      	bge.n	800d2da <floor+0xba>
 800d2d4:	2914      	cmp	r1, #20
 800d2d6:	d103      	bne.n	800d2e0 <floor+0xc0>
 800d2d8:	3301      	adds	r3, #1
 800d2da:	ea22 0200 	bic.w	r2, r2, r0
 800d2de:	e7c1      	b.n	800d264 <floor+0x44>
 800d2e0:	2401      	movs	r4, #1
 800d2e2:	f1c1 0134 	rsb	r1, r1, #52	@ 0x34
 800d2e6:	fa04 f101 	lsl.w	r1, r4, r1
 800d2ea:	440a      	add	r2, r1
 800d2ec:	42aa      	cmp	r2, r5
 800d2ee:	bf38      	it	cc
 800d2f0:	191b      	addcc	r3, r3, r4
 800d2f2:	e7f2      	b.n	800d2da <floor+0xba>
 800d2f4:	2200      	movs	r2, #0
 800d2f6:	4613      	mov	r3, r2
 800d2f8:	e7b4      	b.n	800d264 <floor+0x44>
 800d2fa:	bf00      	nop
 800d2fc:	f3af 8000 	nop.w
 800d300:	8800759c 	.word	0x8800759c
 800d304:	7e37e43c 	.word	0x7e37e43c
 800d308:	bff00000 	.word	0xbff00000
 800d30c:	000fffff 	.word	0x000fffff

0800d310 <_init>:
 800d310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d312:	bf00      	nop
 800d314:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d316:	bc08      	pop	{r3}
 800d318:	469e      	mov	lr, r3
 800d31a:	4770      	bx	lr

0800d31c <_fini>:
 800d31c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d31e:	bf00      	nop
 800d320:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d322:	bc08      	pop	{r3}
 800d324:	469e      	mov	lr, r3
 800d326:	4770      	bx	lr
