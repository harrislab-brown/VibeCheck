
H7_pinout_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dd80  080002d0  080002d0  000012d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000218  0800e050  0800e050  0000f050  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800e268  0800e268  0000f268  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800e270  0800e270  0000f270  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800e274  0800e274  0000f274  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000010  24000000  0800e278  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000a60  24000010  0800e288  00010010  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000a70  0800e288  00010a70  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00010010  2**0
                  CONTENTS, READONLY
 10 .debug_info   00022931  00000000  00000000  0001003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000039d1  00000000  00000000  0003296f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001bc0  00000000  00000000  00036340  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000015ce  00000000  00000000  00037f00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00036d62  00000000  00000000  000394ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00026149  00000000  00000000  00070230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016996b  00000000  00000000  00096379  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001ffce4  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00007b28  00000000  00000000  001ffd28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000099  00000000  00000000  00207850  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000010 	.word	0x24000010
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800e038 	.word	0x0800e038

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000014 	.word	0x24000014
 800030c:	0800e038 	.word	0x0800e038

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295
 8000320:	f04f 30ff 	movne.w	r0, #4294967295
 8000324:	f000 b96a 	b.w	80005fc <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9d08      	ldr	r5, [sp, #32]
 8000346:	460c      	mov	r4, r1
 8000348:	2b00      	cmp	r3, #0
 800034a:	d14e      	bne.n	80003ea <__udivmoddi4+0xaa>
 800034c:	4694      	mov	ip, r2
 800034e:	458c      	cmp	ip, r1
 8000350:	4686      	mov	lr, r0
 8000352:	fab2 f282 	clz	r2, r2
 8000356:	d962      	bls.n	800041e <__udivmoddi4+0xde>
 8000358:	b14a      	cbz	r2, 800036e <__udivmoddi4+0x2e>
 800035a:	f1c2 0320 	rsb	r3, r2, #32
 800035e:	4091      	lsls	r1, r2
 8000360:	fa20 f303 	lsr.w	r3, r0, r3
 8000364:	fa0c fc02 	lsl.w	ip, ip, r2
 8000368:	4319      	orrs	r1, r3
 800036a:	fa00 fe02 	lsl.w	lr, r0, r2
 800036e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000372:	fa1f f68c 	uxth.w	r6, ip
 8000376:	fbb1 f4f7 	udiv	r4, r1, r7
 800037a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800037e:	fb07 1114 	mls	r1, r7, r4, r1
 8000382:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000386:	fb04 f106 	mul.w	r1, r4, r6
 800038a:	4299      	cmp	r1, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x64>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f104 30ff 	add.w	r0, r4, #4294967295
 8000396:	f080 8112 	bcs.w	80005be <__udivmoddi4+0x27e>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 810f 	bls.w	80005be <__udivmoddi4+0x27e>
 80003a0:	3c02      	subs	r4, #2
 80003a2:	4463      	add	r3, ip
 80003a4:	1a59      	subs	r1, r3, r1
 80003a6:	fa1f f38e 	uxth.w	r3, lr
 80003aa:	fbb1 f0f7 	udiv	r0, r1, r7
 80003ae:	fb07 1110 	mls	r1, r7, r0, r1
 80003b2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b6:	fb00 f606 	mul.w	r6, r0, r6
 80003ba:	429e      	cmp	r6, r3
 80003bc:	d90a      	bls.n	80003d4 <__udivmoddi4+0x94>
 80003be:	eb1c 0303 	adds.w	r3, ip, r3
 80003c2:	f100 31ff 	add.w	r1, r0, #4294967295
 80003c6:	f080 80fc 	bcs.w	80005c2 <__udivmoddi4+0x282>
 80003ca:	429e      	cmp	r6, r3
 80003cc:	f240 80f9 	bls.w	80005c2 <__udivmoddi4+0x282>
 80003d0:	4463      	add	r3, ip
 80003d2:	3802      	subs	r0, #2
 80003d4:	1b9b      	subs	r3, r3, r6
 80003d6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003da:	2100      	movs	r1, #0
 80003dc:	b11d      	cbz	r5, 80003e6 <__udivmoddi4+0xa6>
 80003de:	40d3      	lsrs	r3, r2
 80003e0:	2200      	movs	r2, #0
 80003e2:	e9c5 3200 	strd	r3, r2, [r5]
 80003e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d905      	bls.n	80003fa <__udivmoddi4+0xba>
 80003ee:	b10d      	cbz	r5, 80003f4 <__udivmoddi4+0xb4>
 80003f0:	e9c5 0100 	strd	r0, r1, [r5]
 80003f4:	2100      	movs	r1, #0
 80003f6:	4608      	mov	r0, r1
 80003f8:	e7f5      	b.n	80003e6 <__udivmoddi4+0xa6>
 80003fa:	fab3 f183 	clz	r1, r3
 80003fe:	2900      	cmp	r1, #0
 8000400:	d146      	bne.n	8000490 <__udivmoddi4+0x150>
 8000402:	42a3      	cmp	r3, r4
 8000404:	d302      	bcc.n	800040c <__udivmoddi4+0xcc>
 8000406:	4290      	cmp	r0, r2
 8000408:	f0c0 80f0 	bcc.w	80005ec <__udivmoddi4+0x2ac>
 800040c:	1a86      	subs	r6, r0, r2
 800040e:	eb64 0303 	sbc.w	r3, r4, r3
 8000412:	2001      	movs	r0, #1
 8000414:	2d00      	cmp	r5, #0
 8000416:	d0e6      	beq.n	80003e6 <__udivmoddi4+0xa6>
 8000418:	e9c5 6300 	strd	r6, r3, [r5]
 800041c:	e7e3      	b.n	80003e6 <__udivmoddi4+0xa6>
 800041e:	2a00      	cmp	r2, #0
 8000420:	f040 8090 	bne.w	8000544 <__udivmoddi4+0x204>
 8000424:	eba1 040c 	sub.w	r4, r1, ip
 8000428:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800042c:	fa1f f78c 	uxth.w	r7, ip
 8000430:	2101      	movs	r1, #1
 8000432:	fbb4 f6f8 	udiv	r6, r4, r8
 8000436:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800043a:	fb08 4416 	mls	r4, r8, r6, r4
 800043e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000442:	fb07 f006 	mul.w	r0, r7, r6
 8000446:	4298      	cmp	r0, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x11c>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000452:	d202      	bcs.n	800045a <__udivmoddi4+0x11a>
 8000454:	4298      	cmp	r0, r3
 8000456:	f200 80cd 	bhi.w	80005f4 <__udivmoddi4+0x2b4>
 800045a:	4626      	mov	r6, r4
 800045c:	1a1c      	subs	r4, r3, r0
 800045e:	fa1f f38e 	uxth.w	r3, lr
 8000462:	fbb4 f0f8 	udiv	r0, r4, r8
 8000466:	fb08 4410 	mls	r4, r8, r0, r4
 800046a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800046e:	fb00 f707 	mul.w	r7, r0, r7
 8000472:	429f      	cmp	r7, r3
 8000474:	d908      	bls.n	8000488 <__udivmoddi4+0x148>
 8000476:	eb1c 0303 	adds.w	r3, ip, r3
 800047a:	f100 34ff 	add.w	r4, r0, #4294967295
 800047e:	d202      	bcs.n	8000486 <__udivmoddi4+0x146>
 8000480:	429f      	cmp	r7, r3
 8000482:	f200 80b0 	bhi.w	80005e6 <__udivmoddi4+0x2a6>
 8000486:	4620      	mov	r0, r4
 8000488:	1bdb      	subs	r3, r3, r7
 800048a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800048e:	e7a5      	b.n	80003dc <__udivmoddi4+0x9c>
 8000490:	f1c1 0620 	rsb	r6, r1, #32
 8000494:	408b      	lsls	r3, r1
 8000496:	fa22 f706 	lsr.w	r7, r2, r6
 800049a:	431f      	orrs	r7, r3
 800049c:	fa20 fc06 	lsr.w	ip, r0, r6
 80004a0:	fa04 f301 	lsl.w	r3, r4, r1
 80004a4:	ea43 030c 	orr.w	r3, r3, ip
 80004a8:	40f4      	lsrs	r4, r6
 80004aa:	fa00 f801 	lsl.w	r8, r0, r1
 80004ae:	0c38      	lsrs	r0, r7, #16
 80004b0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80004b4:	fbb4 fef0 	udiv	lr, r4, r0
 80004b8:	fa1f fc87 	uxth.w	ip, r7
 80004bc:	fb00 441e 	mls	r4, r0, lr, r4
 80004c0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c4:	fb0e f90c 	mul.w	r9, lr, ip
 80004c8:	45a1      	cmp	r9, r4
 80004ca:	fa02 f201 	lsl.w	r2, r2, r1
 80004ce:	d90a      	bls.n	80004e6 <__udivmoddi4+0x1a6>
 80004d0:	193c      	adds	r4, r7, r4
 80004d2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004d6:	f080 8084 	bcs.w	80005e2 <__udivmoddi4+0x2a2>
 80004da:	45a1      	cmp	r9, r4
 80004dc:	f240 8081 	bls.w	80005e2 <__udivmoddi4+0x2a2>
 80004e0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004e4:	443c      	add	r4, r7
 80004e6:	eba4 0409 	sub.w	r4, r4, r9
 80004ea:	fa1f f983 	uxth.w	r9, r3
 80004ee:	fbb4 f3f0 	udiv	r3, r4, r0
 80004f2:	fb00 4413 	mls	r4, r0, r3, r4
 80004f6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004fa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004fe:	45a4      	cmp	ip, r4
 8000500:	d907      	bls.n	8000512 <__udivmoddi4+0x1d2>
 8000502:	193c      	adds	r4, r7, r4
 8000504:	f103 30ff 	add.w	r0, r3, #4294967295
 8000508:	d267      	bcs.n	80005da <__udivmoddi4+0x29a>
 800050a:	45a4      	cmp	ip, r4
 800050c:	d965      	bls.n	80005da <__udivmoddi4+0x29a>
 800050e:	3b02      	subs	r3, #2
 8000510:	443c      	add	r4, r7
 8000512:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000516:	fba0 9302 	umull	r9, r3, r0, r2
 800051a:	eba4 040c 	sub.w	r4, r4, ip
 800051e:	429c      	cmp	r4, r3
 8000520:	46ce      	mov	lr, r9
 8000522:	469c      	mov	ip, r3
 8000524:	d351      	bcc.n	80005ca <__udivmoddi4+0x28a>
 8000526:	d04e      	beq.n	80005c6 <__udivmoddi4+0x286>
 8000528:	b155      	cbz	r5, 8000540 <__udivmoddi4+0x200>
 800052a:	ebb8 030e 	subs.w	r3, r8, lr
 800052e:	eb64 040c 	sbc.w	r4, r4, ip
 8000532:	fa04 f606 	lsl.w	r6, r4, r6
 8000536:	40cb      	lsrs	r3, r1
 8000538:	431e      	orrs	r6, r3
 800053a:	40cc      	lsrs	r4, r1
 800053c:	e9c5 6400 	strd	r6, r4, [r5]
 8000540:	2100      	movs	r1, #0
 8000542:	e750      	b.n	80003e6 <__udivmoddi4+0xa6>
 8000544:	f1c2 0320 	rsb	r3, r2, #32
 8000548:	fa20 f103 	lsr.w	r1, r0, r3
 800054c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000550:	fa24 f303 	lsr.w	r3, r4, r3
 8000554:	4094      	lsls	r4, r2
 8000556:	430c      	orrs	r4, r1
 8000558:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800055c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000560:	fa1f f78c 	uxth.w	r7, ip
 8000564:	fbb3 f0f8 	udiv	r0, r3, r8
 8000568:	fb08 3110 	mls	r1, r8, r0, r3
 800056c:	0c23      	lsrs	r3, r4, #16
 800056e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000572:	fb00 f107 	mul.w	r1, r0, r7
 8000576:	4299      	cmp	r1, r3
 8000578:	d908      	bls.n	800058c <__udivmoddi4+0x24c>
 800057a:	eb1c 0303 	adds.w	r3, ip, r3
 800057e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000582:	d22c      	bcs.n	80005de <__udivmoddi4+0x29e>
 8000584:	4299      	cmp	r1, r3
 8000586:	d92a      	bls.n	80005de <__udivmoddi4+0x29e>
 8000588:	3802      	subs	r0, #2
 800058a:	4463      	add	r3, ip
 800058c:	1a5b      	subs	r3, r3, r1
 800058e:	b2a4      	uxth	r4, r4
 8000590:	fbb3 f1f8 	udiv	r1, r3, r8
 8000594:	fb08 3311 	mls	r3, r8, r1, r3
 8000598:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800059c:	fb01 f307 	mul.w	r3, r1, r7
 80005a0:	42a3      	cmp	r3, r4
 80005a2:	d908      	bls.n	80005b6 <__udivmoddi4+0x276>
 80005a4:	eb1c 0404 	adds.w	r4, ip, r4
 80005a8:	f101 36ff 	add.w	r6, r1, #4294967295
 80005ac:	d213      	bcs.n	80005d6 <__udivmoddi4+0x296>
 80005ae:	42a3      	cmp	r3, r4
 80005b0:	d911      	bls.n	80005d6 <__udivmoddi4+0x296>
 80005b2:	3902      	subs	r1, #2
 80005b4:	4464      	add	r4, ip
 80005b6:	1ae4      	subs	r4, r4, r3
 80005b8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80005bc:	e739      	b.n	8000432 <__udivmoddi4+0xf2>
 80005be:	4604      	mov	r4, r0
 80005c0:	e6f0      	b.n	80003a4 <__udivmoddi4+0x64>
 80005c2:	4608      	mov	r0, r1
 80005c4:	e706      	b.n	80003d4 <__udivmoddi4+0x94>
 80005c6:	45c8      	cmp	r8, r9
 80005c8:	d2ae      	bcs.n	8000528 <__udivmoddi4+0x1e8>
 80005ca:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ce:	eb63 0c07 	sbc.w	ip, r3, r7
 80005d2:	3801      	subs	r0, #1
 80005d4:	e7a8      	b.n	8000528 <__udivmoddi4+0x1e8>
 80005d6:	4631      	mov	r1, r6
 80005d8:	e7ed      	b.n	80005b6 <__udivmoddi4+0x276>
 80005da:	4603      	mov	r3, r0
 80005dc:	e799      	b.n	8000512 <__udivmoddi4+0x1d2>
 80005de:	4630      	mov	r0, r6
 80005e0:	e7d4      	b.n	800058c <__udivmoddi4+0x24c>
 80005e2:	46d6      	mov	lr, sl
 80005e4:	e77f      	b.n	80004e6 <__udivmoddi4+0x1a6>
 80005e6:	4463      	add	r3, ip
 80005e8:	3802      	subs	r0, #2
 80005ea:	e74d      	b.n	8000488 <__udivmoddi4+0x148>
 80005ec:	4606      	mov	r6, r0
 80005ee:	4623      	mov	r3, r4
 80005f0:	4608      	mov	r0, r1
 80005f2:	e70f      	b.n	8000414 <__udivmoddi4+0xd4>
 80005f4:	3e02      	subs	r6, #2
 80005f6:	4463      	add	r3, ip
 80005f8:	e730      	b.n	800045c <__udivmoddi4+0x11c>
 80005fa:	bf00      	nop

080005fc <__aeabi_idiv0>:
 80005fc:	4770      	bx	lr
 80005fe:	bf00      	nop

08000600 <RGB_Init>:
static TIM_HandleTypeDef *RGB_TIM;
static RGB_LED_DATA_COLOR RGB_LED_DATA[RGB_NUM_LEDS];
static uint16_t RGB_DMA_BUF[RGB_DMA_BUF_LEN];
static volatile uint8_t RGB_DMA_COMPLETE_FLAG;

void RGB_Init(TIM_HandleTypeDef* htim){
 8000600:	b480      	push	{r7}
 8000602:	b085      	sub	sp, #20
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
	// Initialize RGB timer for PWM output
	RGB_TIM = htim;
 8000608:	4a0d      	ldr	r2, [pc, #52]	@ (8000640 <RGB_Init+0x40>)
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	6013      	str	r3, [r2, #0]
	//HAL_StatusTypeDef halStatus = HAL_TIM_PWM_Init(RGB_TIM);

	// Clear DMA buffer
	for ( uint16_t i = 0; i < RGB_DMA_BUF_LEN; i++){
 800060e:	2300      	movs	r3, #0
 8000610:	81fb      	strh	r3, [r7, #14]
 8000612:	e007      	b.n	8000624 <RGB_Init+0x24>
		RGB_DMA_BUF[i] = 0;
 8000614:	89fb      	ldrh	r3, [r7, #14]
 8000616:	4a0b      	ldr	r2, [pc, #44]	@ (8000644 <RGB_Init+0x44>)
 8000618:	2100      	movs	r1, #0
 800061a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for ( uint16_t i = 0; i < RGB_DMA_BUF_LEN; i++){
 800061e:	89fb      	ldrh	r3, [r7, #14]
 8000620:	3301      	adds	r3, #1
 8000622:	81fb      	strh	r3, [r7, #14]
 8000624:	89fb      	ldrh	r3, [r7, #14]
 8000626:	f5b3 7fdc 	cmp.w	r3, #440	@ 0x1b8
 800062a:	d3f3      	bcc.n	8000614 <RGB_Init+0x14>
	}

	RGB_DMA_COMPLETE_FLAG = 1;
 800062c:	4b06      	ldr	r3, [pc, #24]	@ (8000648 <RGB_Init+0x48>)
 800062e:	2201      	movs	r2, #1
 8000630:	701a      	strb	r2, [r3, #0]
}
 8000632:	bf00      	nop
 8000634:	3714      	adds	r7, #20
 8000636:	46bd      	mov	sp, r7
 8000638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063c:	4770      	bx	lr
 800063e:	bf00      	nop
 8000640:	2400002c 	.word	0x2400002c
 8000644:	24000054 	.word	0x24000054
 8000648:	240003c4 	.word	0x240003c4

0800064c <RGB_SetColor>:


void RGB_SetColor(uint8_t index, uint8_t r, uint8_t g, uint8_t b){
 800064c:	b490      	push	{r4, r7}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0
 8000652:	4604      	mov	r4, r0
 8000654:	4608      	mov	r0, r1
 8000656:	4611      	mov	r1, r2
 8000658:	461a      	mov	r2, r3
 800065a:	4623      	mov	r3, r4
 800065c:	71fb      	strb	r3, [r7, #7]
 800065e:	4603      	mov	r3, r0
 8000660:	71bb      	strb	r3, [r7, #6]
 8000662:	460b      	mov	r3, r1
 8000664:	717b      	strb	r3, [r7, #5]
 8000666:	4613      	mov	r3, r2
 8000668:	713b      	strb	r3, [r7, #4]

	RGB_LED_DATA[index].color.r = r;
 800066a:	79fb      	ldrb	r3, [r7, #7]
 800066c:	4a0a      	ldr	r2, [pc, #40]	@ (8000698 <RGB_SetColor+0x4c>)
 800066e:	009b      	lsls	r3, r3, #2
 8000670:	4413      	add	r3, r2
 8000672:	79ba      	ldrb	r2, [r7, #6]
 8000674:	705a      	strb	r2, [r3, #1]
	RGB_LED_DATA[index].color.g = g;
 8000676:	79fb      	ldrb	r3, [r7, #7]
 8000678:	4907      	ldr	r1, [pc, #28]	@ (8000698 <RGB_SetColor+0x4c>)
 800067a:	797a      	ldrb	r2, [r7, #5]
 800067c:	f801 2023 	strb.w	r2, [r1, r3, lsl #2]
	RGB_LED_DATA[index].color.b = b;
 8000680:	79fb      	ldrb	r3, [r7, #7]
 8000682:	4a05      	ldr	r2, [pc, #20]	@ (8000698 <RGB_SetColor+0x4c>)
 8000684:	009b      	lsls	r3, r3, #2
 8000686:	4413      	add	r3, r2
 8000688:	793a      	ldrb	r2, [r7, #4]
 800068a:	709a      	strb	r2, [r3, #2]

}
 800068c:	bf00      	nop
 800068e:	3708      	adds	r7, #8
 8000690:	46bd      	mov	sp, r7
 8000692:	bc90      	pop	{r4, r7}
 8000694:	4770      	bx	lr
 8000696:	bf00      	nop
 8000698:	24000030 	.word	0x24000030

0800069c <RGB_Update>:


HAL_StatusTypeDef RGB_Update(){
 800069c:	b580      	push	{r7, lr}
 800069e:	b082      	sub	sp, #8
 80006a0:	af00      	add	r7, sp, #0
	// Return busy if previous DMA transfer is not complete
	if(!RGB_DMA_COMPLETE_FLAG) return HAL_BUSY;
 80006a2:	4b24      	ldr	r3, [pc, #144]	@ (8000734 <RGB_Update+0x98>)
 80006a4:	781b      	ldrb	r3, [r3, #0]
 80006a6:	b2db      	uxtb	r3, r3
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d101      	bne.n	80006b0 <RGB_Update+0x14>
 80006ac:	2302      	movs	r3, #2
 80006ae:	e03d      	b.n	800072c <RGB_Update+0x90>

	uint16_t bufIndex = 0;
 80006b0:	2300      	movs	r3, #0
 80006b2:	80fb      	strh	r3, [r7, #6]

	for (uint8_t ledIndex = 0; ledIndex < RGB_NUM_LEDS; ledIndex ++){
 80006b4:	2300      	movs	r3, #0
 80006b6:	717b      	strb	r3, [r7, #5]
 80006b8:	e024      	b.n	8000704 <RGB_Update+0x68>

		for (uint8_t bitIndex = 0; bitIndex < RGB_BITS_PER_LED; bitIndex ++){
 80006ba:	2300      	movs	r3, #0
 80006bc:	713b      	strb	r3, [r7, #4]
 80006be:	e01b      	b.n	80006f8 <RGB_Update+0x5c>

			if ( (RGB_LED_DATA[ledIndex].data >> bitIndex) & 0x01){
 80006c0:	797b      	ldrb	r3, [r7, #5]
 80006c2:	4a1d      	ldr	r2, [pc, #116]	@ (8000738 <RGB_Update+0x9c>)
 80006c4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80006c8:	793b      	ldrb	r3, [r7, #4]
 80006ca:	fa22 f303 	lsr.w	r3, r2, r3
 80006ce:	f003 0301 	and.w	r3, r3, #1
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d005      	beq.n	80006e2 <RGB_Update+0x46>

				RGB_DMA_BUF[bufIndex] = RGB_TIM_HIGH_DUTYCYCLE;
 80006d6:	88fb      	ldrh	r3, [r7, #6]
 80006d8:	4a18      	ldr	r2, [pc, #96]	@ (800073c <RGB_Update+0xa0>)
 80006da:	2130      	movs	r1, #48	@ 0x30
 80006dc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80006e0:	e004      	b.n	80006ec <RGB_Update+0x50>

			} else {

			RGB_DMA_BUF[bufIndex] = RGB_TIM_LOW_DUTYCYCLE;
 80006e2:	88fb      	ldrh	r3, [r7, #6]
 80006e4:	4a15      	ldr	r2, [pc, #84]	@ (800073c <RGB_Update+0xa0>)
 80006e6:	2118      	movs	r1, #24
 80006e8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

			}

			bufIndex ++;
 80006ec:	88fb      	ldrh	r3, [r7, #6]
 80006ee:	3301      	adds	r3, #1
 80006f0:	80fb      	strh	r3, [r7, #6]
		for (uint8_t bitIndex = 0; bitIndex < RGB_BITS_PER_LED; bitIndex ++){
 80006f2:	793b      	ldrb	r3, [r7, #4]
 80006f4:	3301      	adds	r3, #1
 80006f6:	713b      	strb	r3, [r7, #4]
 80006f8:	793b      	ldrb	r3, [r7, #4]
 80006fa:	2b17      	cmp	r3, #23
 80006fc:	d9e0      	bls.n	80006c0 <RGB_Update+0x24>
	for (uint8_t ledIndex = 0; ledIndex < RGB_NUM_LEDS; ledIndex ++){
 80006fe:	797b      	ldrb	r3, [r7, #5]
 8000700:	3301      	adds	r3, #1
 8000702:	717b      	strb	r3, [r7, #5]
 8000704:	797b      	ldrb	r3, [r7, #5]
 8000706:	2b08      	cmp	r3, #8
 8000708:	d9d7      	bls.n	80006ba <RGB_Update+0x1e>
		}
	}

	// start PWM DMA transfer
	HAL_StatusTypeDef halStatus = HAL_TIM_PWM_Start_DMA(RGB_TIM, RGB_TIM_CHANNEL, (uint32_t *)RGB_DMA_BUF, RGB_DMA_BUF_LEN);
 800070a:	4b0d      	ldr	r3, [pc, #52]	@ (8000740 <RGB_Update+0xa4>)
 800070c:	6818      	ldr	r0, [r3, #0]
 800070e:	f44f 73dc 	mov.w	r3, #440	@ 0x1b8
 8000712:	4a0a      	ldr	r2, [pc, #40]	@ (800073c <RGB_Update+0xa0>)
 8000714:	2100      	movs	r1, #0
 8000716:	f00a f959 	bl	800a9cc <HAL_TIM_PWM_Start_DMA>
 800071a:	4603      	mov	r3, r0
 800071c:	70fb      	strb	r3, [r7, #3]

	if (halStatus == HAL_OK){
 800071e:	78fb      	ldrb	r3, [r7, #3]
 8000720:	2b00      	cmp	r3, #0
 8000722:	d102      	bne.n	800072a <RGB_Update+0x8e>
		// if DMA transfer starts successfully clear DMA complete flag
		RGB_DMA_COMPLETE_FLAG = 0;
 8000724:	4b03      	ldr	r3, [pc, #12]	@ (8000734 <RGB_Update+0x98>)
 8000726:	2200      	movs	r2, #0
 8000728:	701a      	strb	r2, [r3, #0]
	}

	return halStatus;
 800072a:	78fb      	ldrb	r3, [r7, #3]
}
 800072c:	4618      	mov	r0, r3
 800072e:	3708      	adds	r7, #8
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	240003c4 	.word	0x240003c4
 8000738:	24000030 	.word	0x24000030
 800073c:	24000054 	.word	0x24000054
 8000740:	2400002c 	.word	0x2400002c

08000744 <RGB_Callback>:

void RGB_Callback(){
 8000744:	b480      	push	{r7}
 8000746:	af00      	add	r7, sp, #0
	//HAL_TIM_PWM_Stop_DMA(RGB_TIM, RGB_TIM_CHANNEL);
	RGB_DMA_COMPLETE_FLAG = 1;
 8000748:	4b03      	ldr	r3, [pc, #12]	@ (8000758 <RGB_Callback+0x14>)
 800074a:	2201      	movs	r2, #1
 800074c:	701a      	strb	r2, [r3, #0]
}
 800074e:	bf00      	nop
 8000750:	46bd      	mov	sp, r7
 8000752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000756:	4770      	bx	lr
 8000758:	240003c4 	.word	0x240003c4
 800075c:	00000000 	.word	0x00000000

08000760 <Generate_Sine>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void Generate_Sine(uint32_t* buf, uint32_t len, uint16_t amplitude)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	ed2d 8b02 	vpush	{d8}
 8000766:	b086      	sub	sp, #24
 8000768:	af00      	add	r7, sp, #0
 800076a:	60f8      	str	r0, [r7, #12]
 800076c:	60b9      	str	r1, [r7, #8]
 800076e:	4613      	mov	r3, r2
 8000770:	80fb      	strh	r3, [r7, #6]
	for (uint32_t i = 0; i < len; i++)
 8000772:	2300      	movs	r3, #0
 8000774:	617b      	str	r3, [r7, #20]
 8000776:	e02f      	b.n	80007d8 <Generate_Sine+0x78>
	{
		*buf++ = 2048 + amplitude * sin((float)i * 2.0f * 3.1415026535897932384626433f / (float)len);  /* offset to mid voltage */
 8000778:	88fb      	ldrh	r3, [r7, #6]
 800077a:	ee07 3a90 	vmov	s15, r3
 800077e:	eeb8 8be7 	vcvt.f64.s32	d8, s15
 8000782:	697b      	ldr	r3, [r7, #20]
 8000784:	ee07 3a90 	vmov	s15, r3
 8000788:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800078c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000790:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 80007f8 <Generate_Sine+0x98>
 8000794:	ee67 6a87 	vmul.f32	s13, s15, s14
 8000798:	68bb      	ldr	r3, [r7, #8]
 800079a:	ee07 3a90 	vmov	s15, r3
 800079e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80007a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80007a6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80007aa:	eeb0 0b47 	vmov.f64	d0, d7
 80007ae:	f00c fe77 	bl	800d4a0 <sin>
 80007b2:	eeb0 7b40 	vmov.f64	d7, d0
 80007b6:	ee28 7b07 	vmul.f64	d7, d8, d7
 80007ba:	ed9f 6b0d 	vldr	d6, [pc, #52]	@ 80007f0 <Generate_Sine+0x90>
 80007be:	ee37 7b06 	vadd.f64	d7, d7, d6
 80007c2:	68fb      	ldr	r3, [r7, #12]
 80007c4:	1d1a      	adds	r2, r3, #4
 80007c6:	60fa      	str	r2, [r7, #12]
 80007c8:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80007cc:	ee17 2a90 	vmov	r2, s15
 80007d0:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < len; i++)
 80007d2:	697b      	ldr	r3, [r7, #20]
 80007d4:	3301      	adds	r3, #1
 80007d6:	617b      	str	r3, [r7, #20]
 80007d8:	697a      	ldr	r2, [r7, #20]
 80007da:	68bb      	ldr	r3, [r7, #8]
 80007dc:	429a      	cmp	r2, r3
 80007de:	d3cb      	bcc.n	8000778 <Generate_Sine+0x18>
	}
}
 80007e0:	bf00      	nop
 80007e2:	bf00      	nop
 80007e4:	3718      	adds	r7, #24
 80007e6:	46bd      	mov	sp, r7
 80007e8:	ecbd 8b02 	vpop	{d8}
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	00000000 	.word	0x00000000
 80007f4:	40a00000 	.word	0x40a00000
 80007f8:	40490e61 	.word	0x40490e61

080007fc <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim){
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b082      	sub	sp, #8
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
	if(htim == &htim4){
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	4a04      	ldr	r2, [pc, #16]	@ (8000818 <HAL_TIM_PWM_PulseFinishedCallback+0x1c>)
 8000808:	4293      	cmp	r3, r2
 800080a:	d101      	bne.n	8000810 <HAL_TIM_PWM_PulseFinishedCallback+0x14>
		RGB_Callback();
 800080c:	f7ff ff9a 	bl	8000744 <RGB_Callback>
	}
}
 8000810:	bf00      	nop
 8000812:	3708      	adds	r7, #8
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}
 8000818:	2400087c 	.word	0x2400087c
 800081c:	00000000 	.word	0x00000000

08000820 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	f5ad 6d49 	sub.w	sp, sp, #3216	@ 0xc90
 8000826:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000828:	f000 ffbe 	bl	80017a8 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800082c:	f001 fd6e 	bl	800230c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000830:	f000 f93c 	bl	8000aac <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000834:	f000 f9a8 	bl	8000b88 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000838:	f000 feac 	bl	8001594 <MX_GPIO_Init>
  MX_DMA_Init();
 800083c:	f000 fe7a 	bl	8001534 <MX_DMA_Init>
  MX_DAC1_Init();
 8000840:	f000 fab8 	bl	8000db4 <MX_DAC1_Init>
  MX_I2C2_Init();
 8000844:	f000 faf4 	bl	8000e30 <MX_I2C2_Init>
  MX_SPI2_Init();
 8000848:	f000 fb32 	bl	8000eb0 <MX_SPI2_Init>
  MX_SPI3_Init();
 800084c:	f000 fb86 	bl	8000f5c <MX_SPI3_Init>
  MX_SPI4_Init();
 8000850:	f000 fbda 	bl	8001008 <MX_SPI4_Init>
  MX_TIM4_Init();
 8000854:	f000 fd5e 	bl	8001314 <MX_TIM4_Init>
  MX_TIM3_Init();
 8000858:	f000 fcce 	bl	80011f8 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 800085c:	f000 fe1e 	bl	800149c <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8000860:	f000 fc28 	bl	80010b4 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000864:	f000 fc7a 	bl	800115c <MX_TIM2_Init>
  MX_ADC1_Init();
 8000868:	f000 f9be 	bl	8000be8 <MX_ADC1_Init>
  MX_ADC2_Init();
 800086c:	f000 fa38 	bl	8000ce0 <MX_ADC2_Init>
  MX_UART7_Init();
 8000870:	f000 fdc6 	bl	8001400 <MX_UART7_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  /* strobe timer setup */
  TIM3->PSC = STROBE_TIMER_PRESCALER - 1;
 8000874:	4b86      	ldr	r3, [pc, #536]	@ (8000a90 <main+0x270>)
 8000876:	f242 720f 	movw	r2, #9999	@ 0x270f
 800087a:	629a      	str	r2, [r3, #40]	@ 0x28
  TIM3->ARR = STROBE_TIMER_COUNTS_PER_SEC / STROBE_BLINK_FREQ_HZ - 1;
 800087c:	4b84      	ldr	r3, [pc, #528]	@ (8000a90 <main+0x270>)
 800087e:	f44f 72c4 	mov.w	r2, #392	@ 0x188
 8000882:	62da      	str	r2, [r3, #44]	@ 0x2c
  TIM3->CCR1 = (float)TIM3->ARR * STROBE_BLINK_DUTYCYCLE;
 8000884:	4b82      	ldr	r3, [pc, #520]	@ (8000a90 <main+0x270>)
 8000886:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000888:	ee07 3a90 	vmov	s15, r3
 800088c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000890:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000894:	ed9f 6b7c 	vldr	d6, [pc, #496]	@ 8000a88 <main+0x268>
 8000898:	ee27 7b06 	vmul.f64	d7, d7, d6
 800089c:	4b7c      	ldr	r3, [pc, #496]	@ (8000a90 <main+0x270>)
 800089e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80008a2:	ee17 2a90 	vmov	r2, s15
 80008a6:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM3->CCR2 = (float)TIM3->ARR * STROBE_BLINK_DUTYCYCLE;
 80008a8:	4b79      	ldr	r3, [pc, #484]	@ (8000a90 <main+0x270>)
 80008aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80008ac:	ee07 3a90 	vmov	s15, r3
 80008b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80008b4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80008b8:	ed9f 6b73 	vldr	d6, [pc, #460]	@ 8000a88 <main+0x268>
 80008bc:	ee27 7b06 	vmul.f64	d7, d7, d6
 80008c0:	4b73      	ldr	r3, [pc, #460]	@ (8000a90 <main+0x270>)
 80008c2:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80008c6:	ee17 2a90 	vmov	r2, s15
 80008ca:	639a      	str	r2, [r3, #56]	@ 0x38
  TIM3->CCR3 = (float)TIM3->ARR * STROBE_BLINK_DUTYCYCLE;
 80008cc:	4b70      	ldr	r3, [pc, #448]	@ (8000a90 <main+0x270>)
 80008ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80008d0:	ee07 3a90 	vmov	s15, r3
 80008d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80008d8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80008dc:	ed9f 6b6a 	vldr	d6, [pc, #424]	@ 8000a88 <main+0x268>
 80008e0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80008e4:	4b6a      	ldr	r3, [pc, #424]	@ (8000a90 <main+0x270>)
 80008e6:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80008ea:	ee17 2a90 	vmov	r2, s15
 80008ee:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* RGB LEDs timer setup */
  TIM4->PSC = RGB_TIMER_PRESCALER - 1;
 80008f0:	4b68      	ldr	r3, [pc, #416]	@ (8000a94 <main+0x274>)
 80008f2:	2202      	movs	r2, #2
 80008f4:	629a      	str	r2, [r3, #40]	@ 0x28
  TIM4->ARR = RGB_TIMER_COUNTS_PER_PERIOD - 1;
 80008f6:	4b67      	ldr	r3, [pc, #412]	@ (8000a94 <main+0x274>)
 80008f8:	2263      	movs	r2, #99	@ 0x63
 80008fa:	62da      	str	r2, [r3, #44]	@ 0x2c

  RGB_Init(&htim4);
 80008fc:	4866      	ldr	r0, [pc, #408]	@ (8000a98 <main+0x278>)
 80008fe:	f7ff fe7f 	bl	8000600 <RGB_Init>

  /* DAC setup */
  uint32_t sine_wave[DAC_FREQ_HZ / SINE_FREQ_HZ];
  Generate_Sine(sine_wave, DAC_FREQ_HZ / SINE_FREQ_HZ, 1024);	  /* populate sine wave */
 8000902:	1d3b      	adds	r3, r7, #4
 8000904:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000908:	f44f 7148 	mov.w	r1, #800	@ 0x320
 800090c:	4618      	mov	r0, r3
 800090e:	f7ff ff27 	bl	8000760 <Generate_Sine>

  TIM1->PSC = DAC_TIMER_PRESCALER - 1;
 8000912:	4b62      	ldr	r3, [pc, #392]	@ (8000a9c <main+0x27c>)
 8000914:	2200      	movs	r2, #0
 8000916:	629a      	str	r2, [r3, #40]	@ 0x28
  TIM1->ARR = DAC_TIMER_COUNTS_PER_SEC / DAC_FREQ_HZ - 1;
 8000918:	4b60      	ldr	r3, [pc, #384]	@ (8000a9c <main+0x27c>)
 800091a:	f241 3287 	movw	r2, #4999	@ 0x1387
 800091e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* start strobe timers */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000920:	2100      	movs	r1, #0
 8000922:	485f      	ldr	r0, [pc, #380]	@ (8000aa0 <main+0x280>)
 8000924:	f009 ff36 	bl	800a794 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000928:	2104      	movs	r1, #4
 800092a:	485d      	ldr	r0, [pc, #372]	@ (8000aa0 <main+0x280>)
 800092c:	f009 ff32 	bl	800a794 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8000930:	2108      	movs	r1, #8
 8000932:	485b      	ldr	r0, [pc, #364]	@ (8000aa0 <main+0x280>)
 8000934:	f009 ff2e 	bl	800a794 <HAL_TIM_PWM_Start>

  /* start the speaker output */
  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, sine_wave, DAC_FREQ_HZ / SINE_FREQ_HZ, DAC_ALIGN_12B_R);
 8000938:	1d3a      	adds	r2, r7, #4
 800093a:	2300      	movs	r3, #0
 800093c:	9300      	str	r3, [sp, #0]
 800093e:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8000942:	2100      	movs	r1, #0
 8000944:	4857      	ldr	r0, [pc, #348]	@ (8000aa4 <main+0x284>)
 8000946:	f003 fab5 	bl	8003eb4 <HAL_DAC_Start_DMA>
  HAL_TIM_Base_Start(&htim1);
 800094a:	4857      	ldr	r0, [pc, #348]	@ (8000aa8 <main+0x288>)
 800094c:	f009 fe42 	bl	800a5d4 <HAL_TIM_Base_Start>

  HAL_Delay(1000);
 8000950:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000954:	f001 fd6c 	bl	8002430 <HAL_Delay>

  RGB_SetColor(0,106,0,0);
 8000958:	2300      	movs	r3, #0
 800095a:	2200      	movs	r2, #0
 800095c:	216a      	movs	r1, #106	@ 0x6a
 800095e:	2000      	movs	r0, #0
 8000960:	f7ff fe74 	bl	800064c <RGB_SetColor>
  RGB_SetColor(1,107,0,0);
 8000964:	2300      	movs	r3, #0
 8000966:	2200      	movs	r2, #0
 8000968:	216b      	movs	r1, #107	@ 0x6b
 800096a:	2001      	movs	r0, #1
 800096c:	f7ff fe6e 	bl	800064c <RGB_SetColor>
  RGB_SetColor(2,108,0,0);
 8000970:	2300      	movs	r3, #0
 8000972:	2200      	movs	r2, #0
 8000974:	216c      	movs	r1, #108	@ 0x6c
 8000976:	2002      	movs	r0, #2
 8000978:	f7ff fe68 	bl	800064c <RGB_SetColor>


  RGB_SetColor(3,102,0,0);
 800097c:	2300      	movs	r3, #0
 800097e:	2200      	movs	r2, #0
 8000980:	2166      	movs	r1, #102	@ 0x66
 8000982:	2003      	movs	r0, #3
 8000984:	f7ff fe62 	bl	800064c <RGB_SetColor>
  RGB_SetColor(4,101,0,0);
 8000988:	2300      	movs	r3, #0
 800098a:	2200      	movs	r2, #0
 800098c:	2165      	movs	r1, #101	@ 0x65
 800098e:	2004      	movs	r0, #4
 8000990:	f7ff fe5c 	bl	800064c <RGB_SetColor>
  RGB_SetColor(5,100,0,0);
 8000994:	2300      	movs	r3, #0
 8000996:	2200      	movs	r2, #0
 8000998:	2164      	movs	r1, #100	@ 0x64
 800099a:	2005      	movs	r0, #5
 800099c:	f7ff fe56 	bl	800064c <RGB_SetColor>

  RGB_SetColor(6,103,0,0);
 80009a0:	2300      	movs	r3, #0
 80009a2:	2200      	movs	r2, #0
 80009a4:	2167      	movs	r1, #103	@ 0x67
 80009a6:	2006      	movs	r0, #6
 80009a8:	f7ff fe50 	bl	800064c <RGB_SetColor>
  RGB_SetColor(7,104,0,0);
 80009ac:	2300      	movs	r3, #0
 80009ae:	2200      	movs	r2, #0
 80009b0:	2168      	movs	r1, #104	@ 0x68
 80009b2:	2007      	movs	r0, #7
 80009b4:	f7ff fe4a 	bl	800064c <RGB_SetColor>
  RGB_SetColor(8,105,0,0);
 80009b8:	2300      	movs	r3, #0
 80009ba:	2200      	movs	r2, #0
 80009bc:	2169      	movs	r1, #105	@ 0x69
 80009be:	2008      	movs	r0, #8
 80009c0:	f7ff fe44 	bl	800064c <RGB_SetColor>

  RGB_Update();
 80009c4:	f7ff fe6a 	bl	800069c <RGB_Update>
  uint8_t g = 0b01000000;
 80009c8:	2340      	movs	r3, #64	@ 0x40
 80009ca:	f887 3c87 	strb.w	r3, [r7, #3207]	@ 0xc87
  uint8_t r = 0b00100000;
 80009ce:	2320      	movs	r3, #32
 80009d0:	f887 3c86 	strb.w	r3, [r7, #3206]	@ 0xc86
  uint8_t b = 0b00010000;
 80009d4:	2310      	movs	r3, #16
 80009d6:	f887 3c85 	strb.w	r3, [r7, #3205]	@ 0xc85
  while (1){
	  RGB_SetColor(0,r,g,b);
 80009da:	f897 3c85 	ldrb.w	r3, [r7, #3205]	@ 0xc85
 80009de:	f897 2c87 	ldrb.w	r2, [r7, #3207]	@ 0xc87
 80009e2:	f897 1c86 	ldrb.w	r1, [r7, #3206]	@ 0xc86
 80009e6:	2000      	movs	r0, #0
 80009e8:	f7ff fe30 	bl	800064c <RGB_SetColor>
	  RGB_SetColor(1,r,g,b);
 80009ec:	f897 3c85 	ldrb.w	r3, [r7, #3205]	@ 0xc85
 80009f0:	f897 2c87 	ldrb.w	r2, [r7, #3207]	@ 0xc87
 80009f4:	f897 1c86 	ldrb.w	r1, [r7, #3206]	@ 0xc86
 80009f8:	2001      	movs	r0, #1
 80009fa:	f7ff fe27 	bl	800064c <RGB_SetColor>
	  RGB_SetColor(2,r,g,b);
 80009fe:	f897 3c85 	ldrb.w	r3, [r7, #3205]	@ 0xc85
 8000a02:	f897 2c87 	ldrb.w	r2, [r7, #3207]	@ 0xc87
 8000a06:	f897 1c86 	ldrb.w	r1, [r7, #3206]	@ 0xc86
 8000a0a:	2002      	movs	r0, #2
 8000a0c:	f7ff fe1e 	bl	800064c <RGB_SetColor>
	  RGB_SetColor(3,r,g,b);
 8000a10:	f897 3c85 	ldrb.w	r3, [r7, #3205]	@ 0xc85
 8000a14:	f897 2c87 	ldrb.w	r2, [r7, #3207]	@ 0xc87
 8000a18:	f897 1c86 	ldrb.w	r1, [r7, #3206]	@ 0xc86
 8000a1c:	2003      	movs	r0, #3
 8000a1e:	f7ff fe15 	bl	800064c <RGB_SetColor>
	  RGB_SetColor(4,r,g,b);
 8000a22:	f897 3c85 	ldrb.w	r3, [r7, #3205]	@ 0xc85
 8000a26:	f897 2c87 	ldrb.w	r2, [r7, #3207]	@ 0xc87
 8000a2a:	f897 1c86 	ldrb.w	r1, [r7, #3206]	@ 0xc86
 8000a2e:	2004      	movs	r0, #4
 8000a30:	f7ff fe0c 	bl	800064c <RGB_SetColor>
	  RGB_SetColor(5,r,g,b);
 8000a34:	f897 3c85 	ldrb.w	r3, [r7, #3205]	@ 0xc85
 8000a38:	f897 2c87 	ldrb.w	r2, [r7, #3207]	@ 0xc87
 8000a3c:	f897 1c86 	ldrb.w	r1, [r7, #3206]	@ 0xc86
 8000a40:	2005      	movs	r0, #5
 8000a42:	f7ff fe03 	bl	800064c <RGB_SetColor>
	  RGB_SetColor(6,r,g,b);
 8000a46:	f897 3c85 	ldrb.w	r3, [r7, #3205]	@ 0xc85
 8000a4a:	f897 2c87 	ldrb.w	r2, [r7, #3207]	@ 0xc87
 8000a4e:	f897 1c86 	ldrb.w	r1, [r7, #3206]	@ 0xc86
 8000a52:	2006      	movs	r0, #6
 8000a54:	f7ff fdfa 	bl	800064c <RGB_SetColor>
	  RGB_SetColor(7,r,g,b);
 8000a58:	f897 3c85 	ldrb.w	r3, [r7, #3205]	@ 0xc85
 8000a5c:	f897 2c87 	ldrb.w	r2, [r7, #3207]	@ 0xc87
 8000a60:	f897 1c86 	ldrb.w	r1, [r7, #3206]	@ 0xc86
 8000a64:	2007      	movs	r0, #7
 8000a66:	f7ff fdf1 	bl	800064c <RGB_SetColor>
	  RGB_SetColor(8,r,g,b);
 8000a6a:	f897 3c85 	ldrb.w	r3, [r7, #3205]	@ 0xc85
 8000a6e:	f897 2c87 	ldrb.w	r2, [r7, #3207]	@ 0xc87
 8000a72:	f897 1c86 	ldrb.w	r1, [r7, #3206]	@ 0xc86
 8000a76:	2008      	movs	r0, #8
 8000a78:	f7ff fde8 	bl	800064c <RGB_SetColor>

	  RGB_Update();
 8000a7c:	f7ff fe0e 	bl	800069c <RGB_Update>
	  RGB_SetColor(0,r,g,b);
 8000a80:	bf00      	nop
 8000a82:	e7aa      	b.n	80009da <main+0x1ba>
 8000a84:	f3af 8000 	nop.w
	...
 8000a90:	40000400 	.word	0x40000400
 8000a94:	40000800 	.word	0x40000800
 8000a98:	2400087c 	.word	0x2400087c
 8000a9c:	40010000 	.word	0x40010000
 8000aa0:	24000830 	.word	0x24000830
 8000aa4:	240004a8 	.word	0x240004a8
 8000aa8:	24000798 	.word	0x24000798

08000aac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b09c      	sub	sp, #112	@ 0x70
 8000ab0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ab2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ab6:	224c      	movs	r2, #76	@ 0x4c
 8000ab8:	2100      	movs	r1, #0
 8000aba:	4618      	mov	r0, r3
 8000abc:	f00c fcc2 	bl	800d444 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ac0:	1d3b      	adds	r3, r7, #4
 8000ac2:	2220      	movs	r2, #32
 8000ac4:	2100      	movs	r1, #0
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f00c fcbc 	bl	800d444 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000acc:	2002      	movs	r0, #2
 8000ace:	f006 f865 	bl	8006b9c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	603b      	str	r3, [r7, #0]
 8000ad6:	4b2b      	ldr	r3, [pc, #172]	@ (8000b84 <SystemClock_Config+0xd8>)
 8000ad8:	699b      	ldr	r3, [r3, #24]
 8000ada:	4a2a      	ldr	r2, [pc, #168]	@ (8000b84 <SystemClock_Config+0xd8>)
 8000adc:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000ae0:	6193      	str	r3, [r2, #24]
 8000ae2:	4b28      	ldr	r3, [pc, #160]	@ (8000b84 <SystemClock_Config+0xd8>)
 8000ae4:	699b      	ldr	r3, [r3, #24]
 8000ae6:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000aea:	603b      	str	r3, [r7, #0]
 8000aec:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000aee:	bf00      	nop
 8000af0:	4b24      	ldr	r3, [pc, #144]	@ (8000b84 <SystemClock_Config+0xd8>)
 8000af2:	699b      	ldr	r3, [r3, #24]
 8000af4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000af8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000afc:	d1f8      	bne.n	8000af0 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000afe:	2301      	movs	r3, #1
 8000b00:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b02:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000b06:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b08:	2302      	movs	r3, #2
 8000b0a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b0c:	2302      	movs	r3, #2
 8000b0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000b10:	2302      	movs	r3, #2
 8000b12:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000b14:	2328      	movs	r3, #40	@ 0x28
 8000b16:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000b18:	2301      	movs	r3, #1
 8000b1a:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000b1c:	2302      	movs	r3, #2
 8000b1e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000b20:	2302      	movs	r3, #2
 8000b22:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000b24:	230c      	movs	r3, #12
 8000b26:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b30:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b34:	4618      	mov	r0, r3
 8000b36:	f006 f86b 	bl	8006c10 <HAL_RCC_OscConfig>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000b40:	f000 fe5e 	bl	8001800 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b44:	233f      	movs	r3, #63	@ 0x3f
 8000b46:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b48:	2303      	movs	r3, #3
 8000b4a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000b50:	2308      	movs	r3, #8
 8000b52:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000b54:	2340      	movs	r3, #64	@ 0x40
 8000b56:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000b58:	2340      	movs	r3, #64	@ 0x40
 8000b5a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000b5c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b60:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000b62:	2340      	movs	r3, #64	@ 0x40
 8000b64:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000b66:	1d3b      	adds	r3, r7, #4
 8000b68:	2103      	movs	r1, #3
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f006 fc2a 	bl	80073c4 <HAL_RCC_ClockConfig>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d001      	beq.n	8000b7a <SystemClock_Config+0xce>
  {
    Error_Handler();
 8000b76:	f000 fe43 	bl	8001800 <Error_Handler>
  }
}
 8000b7a:	bf00      	nop
 8000b7c:	3770      	adds	r7, #112	@ 0x70
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	58024800 	.word	0x58024800

08000b88 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b0ae      	sub	sp, #184	@ 0xb8
 8000b8c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b8e:	463b      	mov	r3, r7
 8000b90:	22b8      	movs	r2, #184	@ 0xb8
 8000b92:	2100      	movs	r1, #0
 8000b94:	4618      	mov	r0, r3
 8000b96:	f00c fc55 	bl	800d444 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000b9a:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000b9e:	f04f 0300 	mov.w	r3, #0
 8000ba2:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 8000ba6:	2302      	movs	r3, #2
 8000ba8:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 16;
 8000baa:	2310      	movs	r3, #16
 8000bac:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000bae:	2302      	movs	r3, #2
 8000bb0:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000bb2:	2302      	movs	r3, #2
 8000bb4:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000bb6:	2302      	movs	r3, #2
 8000bb8:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000bba:	23c0      	movs	r3, #192	@ 0xc0
 8000bbc:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bcc:	463b      	mov	r3, r7
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f006 ff84 	bl	8007adc <HAL_RCCEx_PeriphCLKConfig>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d001      	beq.n	8000bde <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8000bda:	f000 fe11 	bl	8001800 <Error_Handler>
  }
}
 8000bde:	bf00      	nop
 8000be0:	37b8      	adds	r7, #184	@ 0xb8
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
	...

08000be8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b08c      	sub	sp, #48	@ 0x30
 8000bec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000bee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	601a      	str	r2, [r3, #0]
 8000bf6:	605a      	str	r2, [r3, #4]
 8000bf8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000bfa:	463b      	mov	r3, r7
 8000bfc:	2224      	movs	r2, #36	@ 0x24
 8000bfe:	2100      	movs	r1, #0
 8000c00:	4618      	mov	r0, r3
 8000c02:	f00c fc1f 	bl	800d444 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000c06:	4b32      	ldr	r3, [pc, #200]	@ (8000cd0 <MX_ADC1_Init+0xe8>)
 8000c08:	4a32      	ldr	r2, [pc, #200]	@ (8000cd4 <MX_ADC1_Init+0xec>)
 8000c0a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000c0c:	4b30      	ldr	r3, [pc, #192]	@ (8000cd0 <MX_ADC1_Init+0xe8>)
 8000c0e:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000c12:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000c14:	4b2e      	ldr	r3, [pc, #184]	@ (8000cd0 <MX_ADC1_Init+0xe8>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c1a:	4b2d      	ldr	r3, [pc, #180]	@ (8000cd0 <MX_ADC1_Init+0xe8>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c20:	4b2b      	ldr	r3, [pc, #172]	@ (8000cd0 <MX_ADC1_Init+0xe8>)
 8000c22:	2204      	movs	r2, #4
 8000c24:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000c26:	4b2a      	ldr	r3, [pc, #168]	@ (8000cd0 <MX_ADC1_Init+0xe8>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000c2c:	4b28      	ldr	r3, [pc, #160]	@ (8000cd0 <MX_ADC1_Init+0xe8>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000c32:	4b27      	ldr	r3, [pc, #156]	@ (8000cd0 <MX_ADC1_Init+0xe8>)
 8000c34:	2201      	movs	r2, #1
 8000c36:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c38:	4b25      	ldr	r3, [pc, #148]	@ (8000cd0 <MX_ADC1_Init+0xe8>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c40:	4b23      	ldr	r3, [pc, #140]	@ (8000cd0 <MX_ADC1_Init+0xe8>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c46:	4b22      	ldr	r3, [pc, #136]	@ (8000cd0 <MX_ADC1_Init+0xe8>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000c4c:	4b20      	ldr	r3, [pc, #128]	@ (8000cd0 <MX_ADC1_Init+0xe8>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000c52:	4b1f      	ldr	r3, [pc, #124]	@ (8000cd0 <MX_ADC1_Init+0xe8>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000c58:	4b1d      	ldr	r3, [pc, #116]	@ (8000cd0 <MX_ADC1_Init+0xe8>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 8000c5e:	4b1c      	ldr	r3, [pc, #112]	@ (8000cd0 <MX_ADC1_Init+0xe8>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc1.Init.Oversampling.Ratio = 1;
 8000c66:	4b1a      	ldr	r3, [pc, #104]	@ (8000cd0 <MX_ADC1_Init+0xe8>)
 8000c68:	2201      	movs	r2, #1
 8000c6a:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c6c:	4818      	ldr	r0, [pc, #96]	@ (8000cd0 <MX_ADC1_Init+0xe8>)
 8000c6e:	f001 fe49 	bl	8002904 <HAL_ADC_Init>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d001      	beq.n	8000c7c <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000c78:	f000 fdc2 	bl	8001800 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000c80:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c84:	4619      	mov	r1, r3
 8000c86:	4812      	ldr	r0, [pc, #72]	@ (8000cd0 <MX_ADC1_Init+0xe8>)
 8000c88:	f002 fe88 	bl	800399c <HAL_ADCEx_MultiModeConfigChannel>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d001      	beq.n	8000c96 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8000c92:	f000 fdb5 	bl	8001800 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000c96:	4b10      	ldr	r3, [pc, #64]	@ (8000cd8 <MX_ADC1_Init+0xf0>)
 8000c98:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c9a:	2306      	movs	r3, #6
 8000c9c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8000ca2:	4b0e      	ldr	r3, [pc, #56]	@ (8000cdc <MX_ADC1_Init+0xf4>)
 8000ca4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000ca6:	2304      	movs	r3, #4
 8000ca8:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000caa:	2300      	movs	r3, #0
 8000cac:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cb4:	463b      	mov	r3, r7
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	4805      	ldr	r0, [pc, #20]	@ (8000cd0 <MX_ADC1_Init+0xe8>)
 8000cba:	f002 f82b 	bl	8002d14 <HAL_ADC_ConfigChannel>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d001      	beq.n	8000cc8 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 8000cc4:	f000 fd9c 	bl	8001800 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000cc8:	bf00      	nop
 8000cca:	3730      	adds	r7, #48	@ 0x30
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	240003c8 	.word	0x240003c8
 8000cd4:	40022000 	.word	0x40022000
 8000cd8:	10c00010 	.word	0x10c00010
 8000cdc:	47ff0000 	.word	0x47ff0000

08000ce0 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b08a      	sub	sp, #40	@ 0x28
 8000ce4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ce6:	1d3b      	adds	r3, r7, #4
 8000ce8:	2224      	movs	r2, #36	@ 0x24
 8000cea:	2100      	movs	r1, #0
 8000cec:	4618      	mov	r0, r3
 8000cee:	f00c fba9 	bl	800d444 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000cf2:	4b2c      	ldr	r3, [pc, #176]	@ (8000da4 <MX_ADC2_Init+0xc4>)
 8000cf4:	4a2c      	ldr	r2, [pc, #176]	@ (8000da8 <MX_ADC2_Init+0xc8>)
 8000cf6:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000cf8:	4b2a      	ldr	r3, [pc, #168]	@ (8000da4 <MX_ADC2_Init+0xc4>)
 8000cfa:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000cfe:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 8000d00:	4b28      	ldr	r3, [pc, #160]	@ (8000da4 <MX_ADC2_Init+0xc4>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d06:	4b27      	ldr	r3, [pc, #156]	@ (8000da4 <MX_ADC2_Init+0xc4>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d0c:	4b25      	ldr	r3, [pc, #148]	@ (8000da4 <MX_ADC2_Init+0xc4>)
 8000d0e:	2204      	movs	r2, #4
 8000d10:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000d12:	4b24      	ldr	r3, [pc, #144]	@ (8000da4 <MX_ADC2_Init+0xc4>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000d18:	4b22      	ldr	r3, [pc, #136]	@ (8000da4 <MX_ADC2_Init+0xc4>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 8000d1e:	4b21      	ldr	r3, [pc, #132]	@ (8000da4 <MX_ADC2_Init+0xc4>)
 8000d20:	2201      	movs	r2, #1
 8000d22:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000d24:	4b1f      	ldr	r3, [pc, #124]	@ (8000da4 <MX_ADC2_Init+0xc4>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d2c:	4b1d      	ldr	r3, [pc, #116]	@ (8000da4 <MX_ADC2_Init+0xc4>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d32:	4b1c      	ldr	r3, [pc, #112]	@ (8000da4 <MX_ADC2_Init+0xc4>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000d38:	4b1a      	ldr	r3, [pc, #104]	@ (8000da4 <MX_ADC2_Init+0xc4>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000d3e:	4b19      	ldr	r3, [pc, #100]	@ (8000da4 <MX_ADC2_Init+0xc4>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000d44:	4b17      	ldr	r3, [pc, #92]	@ (8000da4 <MX_ADC2_Init+0xc4>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc2.Init.OversamplingMode = DISABLE;
 8000d4a:	4b16      	ldr	r3, [pc, #88]	@ (8000da4 <MX_ADC2_Init+0xc4>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc2.Init.Oversampling.Ratio = 1;
 8000d52:	4b14      	ldr	r3, [pc, #80]	@ (8000da4 <MX_ADC2_Init+0xc4>)
 8000d54:	2201      	movs	r2, #1
 8000d56:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000d58:	4812      	ldr	r0, [pc, #72]	@ (8000da4 <MX_ADC2_Init+0xc4>)
 8000d5a:	f001 fdd3 	bl	8002904 <HAL_ADC_Init>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d001      	beq.n	8000d68 <MX_ADC2_Init+0x88>
  {
    Error_Handler();
 8000d64:	f000 fd4c 	bl	8001800 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000d68:	4b10      	ldr	r3, [pc, #64]	@ (8000dac <MX_ADC2_Init+0xcc>)
 8000d6a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d6c:	2306      	movs	r3, #6
 8000d6e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000d70:	2300      	movs	r3, #0
 8000d72:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8000d74:	4b0e      	ldr	r3, [pc, #56]	@ (8000db0 <MX_ADC2_Init+0xd0>)
 8000d76:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000d78:	2304      	movs	r3, #4
 8000d7a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000d80:	2300      	movs	r3, #0
 8000d82:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000d86:	1d3b      	adds	r3, r7, #4
 8000d88:	4619      	mov	r1, r3
 8000d8a:	4806      	ldr	r0, [pc, #24]	@ (8000da4 <MX_ADC2_Init+0xc4>)
 8000d8c:	f001 ffc2 	bl	8002d14 <HAL_ADC_ConfigChannel>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d001      	beq.n	8000d9a <MX_ADC2_Init+0xba>
  {
    Error_Handler();
 8000d96:	f000 fd33 	bl	8001800 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000d9a:	bf00      	nop
 8000d9c:	3728      	adds	r7, #40	@ 0x28
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	24000438 	.word	0x24000438
 8000da8:	40022100 	.word	0x40022100
 8000dac:	0c900008 	.word	0x0c900008
 8000db0:	47ff0000 	.word	0x47ff0000

08000db4 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b08a      	sub	sp, #40	@ 0x28
 8000db8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000dba:	1d3b      	adds	r3, r7, #4
 8000dbc:	2224      	movs	r2, #36	@ 0x24
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f00c fb3f 	bl	800d444 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000dc6:	4b18      	ldr	r3, [pc, #96]	@ (8000e28 <MX_DAC1_Init+0x74>)
 8000dc8:	4a18      	ldr	r2, [pc, #96]	@ (8000e2c <MX_DAC1_Init+0x78>)
 8000dca:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000dcc:	4816      	ldr	r0, [pc, #88]	@ (8000e28 <MX_DAC1_Init+0x74>)
 8000dce:	f003 f84f 	bl	8003e70 <HAL_DAC_Init>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d001      	beq.n	8000ddc <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000dd8:	f000 fd12 	bl	8001800 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T1_TRGO;
 8000de0:	2306      	movs	r3, #6
 8000de2:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000de4:	2300      	movs	r3, #0
 8000de6:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000de8:	2301      	movs	r3, #1
 8000dea:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000dec:	2300      	movs	r3, #0
 8000dee:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000df0:	1d3b      	adds	r3, r7, #4
 8000df2:	2200      	movs	r2, #0
 8000df4:	4619      	mov	r1, r3
 8000df6:	480c      	ldr	r0, [pc, #48]	@ (8000e28 <MX_DAC1_Init+0x74>)
 8000df8:	f003 f93a 	bl	8004070 <HAL_DAC_ConfigChannel>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d001      	beq.n	8000e06 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000e02:	f000 fcfd 	bl	8001800 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000e06:	2300      	movs	r3, #0
 8000e08:	60bb      	str	r3, [r7, #8]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000e0a:	1d3b      	adds	r3, r7, #4
 8000e0c:	2210      	movs	r2, #16
 8000e0e:	4619      	mov	r1, r3
 8000e10:	4805      	ldr	r0, [pc, #20]	@ (8000e28 <MX_DAC1_Init+0x74>)
 8000e12:	f003 f92d 	bl	8004070 <HAL_DAC_ConfigChannel>
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d001      	beq.n	8000e20 <MX_DAC1_Init+0x6c>
  {
    Error_Handler();
 8000e1c:	f000 fcf0 	bl	8001800 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000e20:	bf00      	nop
 8000e22:	3728      	adds	r7, #40	@ 0x28
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	240004a8 	.word	0x240004a8
 8000e2c:	40007400 	.word	0x40007400

08000e30 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000e34:	4b1b      	ldr	r3, [pc, #108]	@ (8000ea4 <MX_I2C2_Init+0x74>)
 8000e36:	4a1c      	ldr	r2, [pc, #112]	@ (8000ea8 <MX_I2C2_Init+0x78>)
 8000e38:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x307075B1;
 8000e3a:	4b1a      	ldr	r3, [pc, #104]	@ (8000ea4 <MX_I2C2_Init+0x74>)
 8000e3c:	4a1b      	ldr	r2, [pc, #108]	@ (8000eac <MX_I2C2_Init+0x7c>)
 8000e3e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000e40:	4b18      	ldr	r3, [pc, #96]	@ (8000ea4 <MX_I2C2_Init+0x74>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e46:	4b17      	ldr	r3, [pc, #92]	@ (8000ea4 <MX_I2C2_Init+0x74>)
 8000e48:	2201      	movs	r2, #1
 8000e4a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e4c:	4b15      	ldr	r3, [pc, #84]	@ (8000ea4 <MX_I2C2_Init+0x74>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000e52:	4b14      	ldr	r3, [pc, #80]	@ (8000ea4 <MX_I2C2_Init+0x74>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000e58:	4b12      	ldr	r3, [pc, #72]	@ (8000ea4 <MX_I2C2_Init+0x74>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e5e:	4b11      	ldr	r3, [pc, #68]	@ (8000ea4 <MX_I2C2_Init+0x74>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e64:	4b0f      	ldr	r3, [pc, #60]	@ (8000ea4 <MX_I2C2_Init+0x74>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000e6a:	480e      	ldr	r0, [pc, #56]	@ (8000ea4 <MX_I2C2_Init+0x74>)
 8000e6c:	f005 fd62 	bl	8006934 <HAL_I2C_Init>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d001      	beq.n	8000e7a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000e76:	f000 fcc3 	bl	8001800 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e7a:	2100      	movs	r1, #0
 8000e7c:	4809      	ldr	r0, [pc, #36]	@ (8000ea4 <MX_I2C2_Init+0x74>)
 8000e7e:	f005 fdf5 	bl	8006a6c <HAL_I2CEx_ConfigAnalogFilter>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d001      	beq.n	8000e8c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000e88:	f000 fcba 	bl	8001800 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000e8c:	2100      	movs	r1, #0
 8000e8e:	4805      	ldr	r0, [pc, #20]	@ (8000ea4 <MX_I2C2_Init+0x74>)
 8000e90:	f005 fe37 	bl	8006b02 <HAL_I2CEx_ConfigDigitalFilter>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d001      	beq.n	8000e9e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000e9a:	f000 fcb1 	bl	8001800 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000e9e:	bf00      	nop
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	240005ac 	.word	0x240005ac
 8000ea8:	40005800 	.word	0x40005800
 8000eac:	307075b1 	.word	0x307075b1

08000eb0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000eb4:	4b27      	ldr	r3, [pc, #156]	@ (8000f54 <MX_SPI2_Init+0xa4>)
 8000eb6:	4a28      	ldr	r2, [pc, #160]	@ (8000f58 <MX_SPI2_Init+0xa8>)
 8000eb8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000eba:	4b26      	ldr	r3, [pc, #152]	@ (8000f54 <MX_SPI2_Init+0xa4>)
 8000ebc:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000ec0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000ec2:	4b24      	ldr	r3, [pc, #144]	@ (8000f54 <MX_SPI2_Init+0xa4>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8000ec8:	4b22      	ldr	r3, [pc, #136]	@ (8000f54 <MX_SPI2_Init+0xa4>)
 8000eca:	2203      	movs	r2, #3
 8000ecc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ece:	4b21      	ldr	r3, [pc, #132]	@ (8000f54 <MX_SPI2_Init+0xa4>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ed4:	4b1f      	ldr	r3, [pc, #124]	@ (8000f54 <MX_SPI2_Init+0xa4>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000eda:	4b1e      	ldr	r3, [pc, #120]	@ (8000f54 <MX_SPI2_Init+0xa4>)
 8000edc:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000ee0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000ee2:	4b1c      	ldr	r3, [pc, #112]	@ (8000f54 <MX_SPI2_Init+0xa4>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ee8:	4b1a      	ldr	r3, [pc, #104]	@ (8000f54 <MX_SPI2_Init+0xa4>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000eee:	4b19      	ldr	r3, [pc, #100]	@ (8000f54 <MX_SPI2_Init+0xa4>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ef4:	4b17      	ldr	r3, [pc, #92]	@ (8000f54 <MX_SPI2_Init+0xa4>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8000efa:	4b16      	ldr	r3, [pc, #88]	@ (8000f54 <MX_SPI2_Init+0xa4>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000f00:	4b14      	ldr	r3, [pc, #80]	@ (8000f54 <MX_SPI2_Init+0xa4>)
 8000f02:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000f06:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000f08:	4b12      	ldr	r3, [pc, #72]	@ (8000f54 <MX_SPI2_Init+0xa4>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000f0e:	4b11      	ldr	r3, [pc, #68]	@ (8000f54 <MX_SPI2_Init+0xa4>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000f14:	4b0f      	ldr	r3, [pc, #60]	@ (8000f54 <MX_SPI2_Init+0xa4>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000f1a:	4b0e      	ldr	r3, [pc, #56]	@ (8000f54 <MX_SPI2_Init+0xa4>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000f20:	4b0c      	ldr	r3, [pc, #48]	@ (8000f54 <MX_SPI2_Init+0xa4>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000f26:	4b0b      	ldr	r3, [pc, #44]	@ (8000f54 <MX_SPI2_Init+0xa4>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000f2c:	4b09      	ldr	r3, [pc, #36]	@ (8000f54 <MX_SPI2_Init+0xa4>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000f32:	4b08      	ldr	r3, [pc, #32]	@ (8000f54 <MX_SPI2_Init+0xa4>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000f38:	4b06      	ldr	r3, [pc, #24]	@ (8000f54 <MX_SPI2_Init+0xa4>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000f3e:	4805      	ldr	r0, [pc, #20]	@ (8000f54 <MX_SPI2_Init+0xa4>)
 8000f40:	f009 f9b2 	bl	800a2a8 <HAL_SPI_Init>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d001      	beq.n	8000f4e <MX_SPI2_Init+0x9e>
  {
    Error_Handler();
 8000f4a:	f000 fc59 	bl	8001800 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000f4e:	bf00      	nop
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	24000600 	.word	0x24000600
 8000f58:	40003800 	.word	0x40003800

08000f5c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000f60:	4b27      	ldr	r3, [pc, #156]	@ (8001000 <MX_SPI3_Init+0xa4>)
 8000f62:	4a28      	ldr	r2, [pc, #160]	@ (8001004 <MX_SPI3_Init+0xa8>)
 8000f64:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000f66:	4b26      	ldr	r3, [pc, #152]	@ (8001000 <MX_SPI3_Init+0xa4>)
 8000f68:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000f6c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000f6e:	4b24      	ldr	r3, [pc, #144]	@ (8001000 <MX_SPI3_Init+0xa4>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000f74:	4b22      	ldr	r3, [pc, #136]	@ (8001000 <MX_SPI3_Init+0xa4>)
 8000f76:	2203      	movs	r2, #3
 8000f78:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f7a:	4b21      	ldr	r3, [pc, #132]	@ (8001000 <MX_SPI3_Init+0xa4>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f80:	4b1f      	ldr	r3, [pc, #124]	@ (8001000 <MX_SPI3_Init+0xa4>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000f86:	4b1e      	ldr	r3, [pc, #120]	@ (8001000 <MX_SPI3_Init+0xa4>)
 8000f88:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000f8c:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000f8e:	4b1c      	ldr	r3, [pc, #112]	@ (8001000 <MX_SPI3_Init+0xa4>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f94:	4b1a      	ldr	r3, [pc, #104]	@ (8001000 <MX_SPI3_Init+0xa4>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f9a:	4b19      	ldr	r3, [pc, #100]	@ (8001000 <MX_SPI3_Init+0xa4>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000fa0:	4b17      	ldr	r3, [pc, #92]	@ (8001000 <MX_SPI3_Init+0xa4>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 8000fa6:	4b16      	ldr	r3, [pc, #88]	@ (8001000 <MX_SPI3_Init+0xa4>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000fac:	4b14      	ldr	r3, [pc, #80]	@ (8001000 <MX_SPI3_Init+0xa4>)
 8000fae:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000fb2:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000fb4:	4b12      	ldr	r3, [pc, #72]	@ (8001000 <MX_SPI3_Init+0xa4>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000fba:	4b11      	ldr	r3, [pc, #68]	@ (8001000 <MX_SPI3_Init+0xa4>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000fc0:	4b0f      	ldr	r3, [pc, #60]	@ (8001000 <MX_SPI3_Init+0xa4>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000fc6:	4b0e      	ldr	r3, [pc, #56]	@ (8001000 <MX_SPI3_Init+0xa4>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000fcc:	4b0c      	ldr	r3, [pc, #48]	@ (8001000 <MX_SPI3_Init+0xa4>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000fd2:	4b0b      	ldr	r3, [pc, #44]	@ (8001000 <MX_SPI3_Init+0xa4>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000fd8:	4b09      	ldr	r3, [pc, #36]	@ (8001000 <MX_SPI3_Init+0xa4>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000fde:	4b08      	ldr	r3, [pc, #32]	@ (8001000 <MX_SPI3_Init+0xa4>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000fe4:	4b06      	ldr	r3, [pc, #24]	@ (8001000 <MX_SPI3_Init+0xa4>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000fea:	4805      	ldr	r0, [pc, #20]	@ (8001000 <MX_SPI3_Init+0xa4>)
 8000fec:	f009 f95c 	bl	800a2a8 <HAL_SPI_Init>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <MX_SPI3_Init+0x9e>
  {
    Error_Handler();
 8000ff6:	f000 fc03 	bl	8001800 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000ffa:	bf00      	nop
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	24000688 	.word	0x24000688
 8001004:	40003c00 	.word	0x40003c00

08001008 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 800100c:	4b27      	ldr	r3, [pc, #156]	@ (80010ac <MX_SPI4_Init+0xa4>)
 800100e:	4a28      	ldr	r2, [pc, #160]	@ (80010b0 <MX_SPI4_Init+0xa8>)
 8001010:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8001012:	4b26      	ldr	r3, [pc, #152]	@ (80010ac <MX_SPI4_Init+0xa4>)
 8001014:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001018:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 800101a:	4b24      	ldr	r3, [pc, #144]	@ (80010ac <MX_SPI4_Init+0xa4>)
 800101c:	2200      	movs	r2, #0
 800101e:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_4BIT;
 8001020:	4b22      	ldr	r3, [pc, #136]	@ (80010ac <MX_SPI4_Init+0xa4>)
 8001022:	2203      	movs	r2, #3
 8001024:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001026:	4b21      	ldr	r3, [pc, #132]	@ (80010ac <MX_SPI4_Init+0xa4>)
 8001028:	2200      	movs	r2, #0
 800102a:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 800102c:	4b1f      	ldr	r3, [pc, #124]	@ (80010ac <MX_SPI4_Init+0xa4>)
 800102e:	2200      	movs	r2, #0
 8001030:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8001032:	4b1e      	ldr	r3, [pc, #120]	@ (80010ac <MX_SPI4_Init+0xa4>)
 8001034:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001038:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800103a:	4b1c      	ldr	r3, [pc, #112]	@ (80010ac <MX_SPI4_Init+0xa4>)
 800103c:	2200      	movs	r2, #0
 800103e:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001040:	4b1a      	ldr	r3, [pc, #104]	@ (80010ac <MX_SPI4_Init+0xa4>)
 8001042:	2200      	movs	r2, #0
 8001044:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8001046:	4b19      	ldr	r3, [pc, #100]	@ (80010ac <MX_SPI4_Init+0xa4>)
 8001048:	2200      	movs	r2, #0
 800104a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800104c:	4b17      	ldr	r3, [pc, #92]	@ (80010ac <MX_SPI4_Init+0xa4>)
 800104e:	2200      	movs	r2, #0
 8001050:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 8001052:	4b16      	ldr	r3, [pc, #88]	@ (80010ac <MX_SPI4_Init+0xa4>)
 8001054:	2200      	movs	r2, #0
 8001056:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001058:	4b14      	ldr	r3, [pc, #80]	@ (80010ac <MX_SPI4_Init+0xa4>)
 800105a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800105e:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001060:	4b12      	ldr	r3, [pc, #72]	@ (80010ac <MX_SPI4_Init+0xa4>)
 8001062:	2200      	movs	r2, #0
 8001064:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001066:	4b11      	ldr	r3, [pc, #68]	@ (80010ac <MX_SPI4_Init+0xa4>)
 8001068:	2200      	movs	r2, #0
 800106a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800106c:	4b0f      	ldr	r3, [pc, #60]	@ (80010ac <MX_SPI4_Init+0xa4>)
 800106e:	2200      	movs	r2, #0
 8001070:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001072:	4b0e      	ldr	r3, [pc, #56]	@ (80010ac <MX_SPI4_Init+0xa4>)
 8001074:	2200      	movs	r2, #0
 8001076:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001078:	4b0c      	ldr	r3, [pc, #48]	@ (80010ac <MX_SPI4_Init+0xa4>)
 800107a:	2200      	movs	r2, #0
 800107c:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800107e:	4b0b      	ldr	r3, [pc, #44]	@ (80010ac <MX_SPI4_Init+0xa4>)
 8001080:	2200      	movs	r2, #0
 8001082:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001084:	4b09      	ldr	r3, [pc, #36]	@ (80010ac <MX_SPI4_Init+0xa4>)
 8001086:	2200      	movs	r2, #0
 8001088:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800108a:	4b08      	ldr	r3, [pc, #32]	@ (80010ac <MX_SPI4_Init+0xa4>)
 800108c:	2200      	movs	r2, #0
 800108e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001090:	4b06      	ldr	r3, [pc, #24]	@ (80010ac <MX_SPI4_Init+0xa4>)
 8001092:	2200      	movs	r2, #0
 8001094:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8001096:	4805      	ldr	r0, [pc, #20]	@ (80010ac <MX_SPI4_Init+0xa4>)
 8001098:	f009 f906 	bl	800a2a8 <HAL_SPI_Init>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <MX_SPI4_Init+0x9e>
  {
    Error_Handler();
 80010a2:	f000 fbad 	bl	8001800 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 80010a6:	bf00      	nop
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	24000710 	.word	0x24000710
 80010b0:	40013400 	.word	0x40013400

080010b4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b088      	sub	sp, #32
 80010b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010ba:	f107 0310 	add.w	r3, r7, #16
 80010be:	2200      	movs	r2, #0
 80010c0:	601a      	str	r2, [r3, #0]
 80010c2:	605a      	str	r2, [r3, #4]
 80010c4:	609a      	str	r2, [r3, #8]
 80010c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010c8:	1d3b      	adds	r3, r7, #4
 80010ca:	2200      	movs	r2, #0
 80010cc:	601a      	str	r2, [r3, #0]
 80010ce:	605a      	str	r2, [r3, #4]
 80010d0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80010d2:	4b20      	ldr	r3, [pc, #128]	@ (8001154 <MX_TIM1_Init+0xa0>)
 80010d4:	4a20      	ldr	r2, [pc, #128]	@ (8001158 <MX_TIM1_Init+0xa4>)
 80010d6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80010d8:	4b1e      	ldr	r3, [pc, #120]	@ (8001154 <MX_TIM1_Init+0xa0>)
 80010da:	2200      	movs	r2, #0
 80010dc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010de:	4b1d      	ldr	r3, [pc, #116]	@ (8001154 <MX_TIM1_Init+0xa0>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80010e4:	4b1b      	ldr	r3, [pc, #108]	@ (8001154 <MX_TIM1_Init+0xa0>)
 80010e6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80010ea:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010ec:	4b19      	ldr	r3, [pc, #100]	@ (8001154 <MX_TIM1_Init+0xa0>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80010f2:	4b18      	ldr	r3, [pc, #96]	@ (8001154 <MX_TIM1_Init+0xa0>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010f8:	4b16      	ldr	r3, [pc, #88]	@ (8001154 <MX_TIM1_Init+0xa0>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80010fe:	4815      	ldr	r0, [pc, #84]	@ (8001154 <MX_TIM1_Init+0xa0>)
 8001100:	f009 fa11 	bl	800a526 <HAL_TIM_Base_Init>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800110a:	f000 fb79 	bl	8001800 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800110e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001112:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001114:	f107 0310 	add.w	r3, r7, #16
 8001118:	4619      	mov	r1, r3
 800111a:	480e      	ldr	r0, [pc, #56]	@ (8001154 <MX_TIM1_Init+0xa0>)
 800111c:	f00a f8a6 	bl	800b26c <HAL_TIM_ConfigClockSource>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8001126:	f000 fb6b 	bl	8001800 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800112a:	2320      	movs	r3, #32
 800112c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800112e:	2300      	movs	r3, #0
 8001130:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001132:	2300      	movs	r3, #0
 8001134:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001136:	1d3b      	adds	r3, r7, #4
 8001138:	4619      	mov	r1, r3
 800113a:	4806      	ldr	r0, [pc, #24]	@ (8001154 <MX_TIM1_Init+0xa0>)
 800113c:	f00a fee8 	bl	800bf10 <HAL_TIMEx_MasterConfigSynchronization>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d001      	beq.n	800114a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001146:	f000 fb5b 	bl	8001800 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800114a:	bf00      	nop
 800114c:	3720      	adds	r7, #32
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	24000798 	.word	0x24000798
 8001158:	40010000 	.word	0x40010000

0800115c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b088      	sub	sp, #32
 8001160:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001162:	f107 0310 	add.w	r3, r7, #16
 8001166:	2200      	movs	r2, #0
 8001168:	601a      	str	r2, [r3, #0]
 800116a:	605a      	str	r2, [r3, #4]
 800116c:	609a      	str	r2, [r3, #8]
 800116e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001170:	1d3b      	adds	r3, r7, #4
 8001172:	2200      	movs	r2, #0
 8001174:	601a      	str	r2, [r3, #0]
 8001176:	605a      	str	r2, [r3, #4]
 8001178:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800117a:	4b1e      	ldr	r3, [pc, #120]	@ (80011f4 <MX_TIM2_Init+0x98>)
 800117c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001180:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001182:	4b1c      	ldr	r3, [pc, #112]	@ (80011f4 <MX_TIM2_Init+0x98>)
 8001184:	2200      	movs	r2, #0
 8001186:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001188:	4b1a      	ldr	r3, [pc, #104]	@ (80011f4 <MX_TIM2_Init+0x98>)
 800118a:	2200      	movs	r2, #0
 800118c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800118e:	4b19      	ldr	r3, [pc, #100]	@ (80011f4 <MX_TIM2_Init+0x98>)
 8001190:	f04f 32ff 	mov.w	r2, #4294967295
 8001194:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001196:	4b17      	ldr	r3, [pc, #92]	@ (80011f4 <MX_TIM2_Init+0x98>)
 8001198:	2200      	movs	r2, #0
 800119a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800119c:	4b15      	ldr	r3, [pc, #84]	@ (80011f4 <MX_TIM2_Init+0x98>)
 800119e:	2200      	movs	r2, #0
 80011a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80011a2:	4814      	ldr	r0, [pc, #80]	@ (80011f4 <MX_TIM2_Init+0x98>)
 80011a4:	f009 f9bf 	bl	800a526 <HAL_TIM_Base_Init>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80011ae:	f000 fb27 	bl	8001800 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011b2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011b6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80011b8:	f107 0310 	add.w	r3, r7, #16
 80011bc:	4619      	mov	r1, r3
 80011be:	480d      	ldr	r0, [pc, #52]	@ (80011f4 <MX_TIM2_Init+0x98>)
 80011c0:	f00a f854 	bl	800b26c <HAL_TIM_ConfigClockSource>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d001      	beq.n	80011ce <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80011ca:	f000 fb19 	bl	8001800 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80011ce:	2320      	movs	r3, #32
 80011d0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011d2:	2300      	movs	r3, #0
 80011d4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80011d6:	1d3b      	adds	r3, r7, #4
 80011d8:	4619      	mov	r1, r3
 80011da:	4806      	ldr	r0, [pc, #24]	@ (80011f4 <MX_TIM2_Init+0x98>)
 80011dc:	f00a fe98 	bl	800bf10 <HAL_TIMEx_MasterConfigSynchronization>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d001      	beq.n	80011ea <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80011e6:	f000 fb0b 	bl	8001800 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80011ea:	bf00      	nop
 80011ec:	3720      	adds	r7, #32
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	240007e4 	.word	0x240007e4

080011f8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b08e      	sub	sp, #56	@ 0x38
 80011fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011fe:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001202:	2200      	movs	r2, #0
 8001204:	601a      	str	r2, [r3, #0]
 8001206:	605a      	str	r2, [r3, #4]
 8001208:	609a      	str	r2, [r3, #8]
 800120a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800120c:	f107 031c 	add.w	r3, r7, #28
 8001210:	2200      	movs	r2, #0
 8001212:	601a      	str	r2, [r3, #0]
 8001214:	605a      	str	r2, [r3, #4]
 8001216:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001218:	463b      	mov	r3, r7
 800121a:	2200      	movs	r2, #0
 800121c:	601a      	str	r2, [r3, #0]
 800121e:	605a      	str	r2, [r3, #4]
 8001220:	609a      	str	r2, [r3, #8]
 8001222:	60da      	str	r2, [r3, #12]
 8001224:	611a      	str	r2, [r3, #16]
 8001226:	615a      	str	r2, [r3, #20]
 8001228:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800122a:	4b38      	ldr	r3, [pc, #224]	@ (800130c <MX_TIM3_Init+0x114>)
 800122c:	4a38      	ldr	r2, [pc, #224]	@ (8001310 <MX_TIM3_Init+0x118>)
 800122e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001230:	4b36      	ldr	r3, [pc, #216]	@ (800130c <MX_TIM3_Init+0x114>)
 8001232:	2200      	movs	r2, #0
 8001234:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001236:	4b35      	ldr	r3, [pc, #212]	@ (800130c <MX_TIM3_Init+0x114>)
 8001238:	2200      	movs	r2, #0
 800123a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800123c:	4b33      	ldr	r3, [pc, #204]	@ (800130c <MX_TIM3_Init+0x114>)
 800123e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001242:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001244:	4b31      	ldr	r3, [pc, #196]	@ (800130c <MX_TIM3_Init+0x114>)
 8001246:	2200      	movs	r2, #0
 8001248:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800124a:	4b30      	ldr	r3, [pc, #192]	@ (800130c <MX_TIM3_Init+0x114>)
 800124c:	2200      	movs	r2, #0
 800124e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001250:	482e      	ldr	r0, [pc, #184]	@ (800130c <MX_TIM3_Init+0x114>)
 8001252:	f009 f968 	bl	800a526 <HAL_TIM_Base_Init>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d001      	beq.n	8001260 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 800125c:	f000 fad0 	bl	8001800 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001260:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001264:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001266:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800126a:	4619      	mov	r1, r3
 800126c:	4827      	ldr	r0, [pc, #156]	@ (800130c <MX_TIM3_Init+0x114>)
 800126e:	f009 fffd 	bl	800b26c <HAL_TIM_ConfigClockSource>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001278:	f000 fac2 	bl	8001800 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800127c:	4823      	ldr	r0, [pc, #140]	@ (800130c <MX_TIM3_Init+0x114>)
 800127e:	f009 fa27 	bl	800a6d0 <HAL_TIM_PWM_Init>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d001      	beq.n	800128c <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001288:	f000 faba 	bl	8001800 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800128c:	2300      	movs	r3, #0
 800128e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001290:	2300      	movs	r3, #0
 8001292:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001294:	f107 031c 	add.w	r3, r7, #28
 8001298:	4619      	mov	r1, r3
 800129a:	481c      	ldr	r0, [pc, #112]	@ (800130c <MX_TIM3_Init+0x114>)
 800129c:	f00a fe38 	bl	800bf10 <HAL_TIMEx_MasterConfigSynchronization>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d001      	beq.n	80012aa <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80012a6:	f000 faab 	bl	8001800 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012aa:	2360      	movs	r3, #96	@ 0x60
 80012ac:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80012ae:	2300      	movs	r3, #0
 80012b0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012b2:	2300      	movs	r3, #0
 80012b4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012b6:	2300      	movs	r3, #0
 80012b8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012ba:	463b      	mov	r3, r7
 80012bc:	2200      	movs	r2, #0
 80012be:	4619      	mov	r1, r3
 80012c0:	4812      	ldr	r0, [pc, #72]	@ (800130c <MX_TIM3_Init+0x114>)
 80012c2:	f009 febf 	bl	800b044 <HAL_TIM_PWM_ConfigChannel>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d001      	beq.n	80012d0 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80012cc:	f000 fa98 	bl	8001800 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80012d0:	463b      	mov	r3, r7
 80012d2:	2204      	movs	r2, #4
 80012d4:	4619      	mov	r1, r3
 80012d6:	480d      	ldr	r0, [pc, #52]	@ (800130c <MX_TIM3_Init+0x114>)
 80012d8:	f009 feb4 	bl	800b044 <HAL_TIM_PWM_ConfigChannel>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d001      	beq.n	80012e6 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 80012e2:	f000 fa8d 	bl	8001800 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80012e6:	463b      	mov	r3, r7
 80012e8:	2208      	movs	r2, #8
 80012ea:	4619      	mov	r1, r3
 80012ec:	4807      	ldr	r0, [pc, #28]	@ (800130c <MX_TIM3_Init+0x114>)
 80012ee:	f009 fea9 	bl	800b044 <HAL_TIM_PWM_ConfigChannel>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d001      	beq.n	80012fc <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 80012f8:	f000 fa82 	bl	8001800 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80012fc:	4803      	ldr	r0, [pc, #12]	@ (800130c <MX_TIM3_Init+0x114>)
 80012fe:	f000 fdeb 	bl	8001ed8 <HAL_TIM_MspPostInit>

}
 8001302:	bf00      	nop
 8001304:	3738      	adds	r7, #56	@ 0x38
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	24000830 	.word	0x24000830
 8001310:	40000400 	.word	0x40000400

08001314 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b08e      	sub	sp, #56	@ 0x38
 8001318:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800131a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800131e:	2200      	movs	r2, #0
 8001320:	601a      	str	r2, [r3, #0]
 8001322:	605a      	str	r2, [r3, #4]
 8001324:	609a      	str	r2, [r3, #8]
 8001326:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001328:	f107 031c 	add.w	r3, r7, #28
 800132c:	2200      	movs	r2, #0
 800132e:	601a      	str	r2, [r3, #0]
 8001330:	605a      	str	r2, [r3, #4]
 8001332:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001334:	463b      	mov	r3, r7
 8001336:	2200      	movs	r2, #0
 8001338:	601a      	str	r2, [r3, #0]
 800133a:	605a      	str	r2, [r3, #4]
 800133c:	609a      	str	r2, [r3, #8]
 800133e:	60da      	str	r2, [r3, #12]
 8001340:	611a      	str	r2, [r3, #16]
 8001342:	615a      	str	r2, [r3, #20]
 8001344:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001346:	4b2c      	ldr	r3, [pc, #176]	@ (80013f8 <MX_TIM4_Init+0xe4>)
 8001348:	4a2c      	ldr	r2, [pc, #176]	@ (80013fc <MX_TIM4_Init+0xe8>)
 800134a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 3-1;
 800134c:	4b2a      	ldr	r3, [pc, #168]	@ (80013f8 <MX_TIM4_Init+0xe4>)
 800134e:	2202      	movs	r2, #2
 8001350:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001352:	4b29      	ldr	r3, [pc, #164]	@ (80013f8 <MX_TIM4_Init+0xe4>)
 8001354:	2200      	movs	r2, #0
 8001356:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100-1;
 8001358:	4b27      	ldr	r3, [pc, #156]	@ (80013f8 <MX_TIM4_Init+0xe4>)
 800135a:	2263      	movs	r2, #99	@ 0x63
 800135c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800135e:	4b26      	ldr	r3, [pc, #152]	@ (80013f8 <MX_TIM4_Init+0xe4>)
 8001360:	2200      	movs	r2, #0
 8001362:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001364:	4b24      	ldr	r3, [pc, #144]	@ (80013f8 <MX_TIM4_Init+0xe4>)
 8001366:	2200      	movs	r2, #0
 8001368:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800136a:	4823      	ldr	r0, [pc, #140]	@ (80013f8 <MX_TIM4_Init+0xe4>)
 800136c:	f009 f8db 	bl	800a526 <HAL_TIM_Base_Init>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d001      	beq.n	800137a <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8001376:	f000 fa43 	bl	8001800 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800137a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800137e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001380:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001384:	4619      	mov	r1, r3
 8001386:	481c      	ldr	r0, [pc, #112]	@ (80013f8 <MX_TIM4_Init+0xe4>)
 8001388:	f009 ff70 	bl	800b26c <HAL_TIM_ConfigClockSource>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8001392:	f000 fa35 	bl	8001800 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001396:	4818      	ldr	r0, [pc, #96]	@ (80013f8 <MX_TIM4_Init+0xe4>)
 8001398:	f009 f99a 	bl	800a6d0 <HAL_TIM_PWM_Init>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 80013a2:	f000 fa2d 	bl	8001800 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013a6:	2300      	movs	r3, #0
 80013a8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013aa:	2300      	movs	r3, #0
 80013ac:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80013ae:	f107 031c 	add.w	r3, r7, #28
 80013b2:	4619      	mov	r1, r3
 80013b4:	4810      	ldr	r0, [pc, #64]	@ (80013f8 <MX_TIM4_Init+0xe4>)
 80013b6:	f00a fdab 	bl	800bf10 <HAL_TIMEx_MasterConfigSynchronization>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d001      	beq.n	80013c4 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 80013c0:	f000 fa1e 	bl	8001800 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013c4:	2360      	movs	r3, #96	@ 0x60
 80013c6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80013c8:	2300      	movs	r3, #0
 80013ca:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013cc:	2300      	movs	r3, #0
 80013ce:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013d0:	2300      	movs	r3, #0
 80013d2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013d4:	463b      	mov	r3, r7
 80013d6:	2200      	movs	r2, #0
 80013d8:	4619      	mov	r1, r3
 80013da:	4807      	ldr	r0, [pc, #28]	@ (80013f8 <MX_TIM4_Init+0xe4>)
 80013dc:	f009 fe32 	bl	800b044 <HAL_TIM_PWM_ConfigChannel>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d001      	beq.n	80013ea <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 80013e6:	f000 fa0b 	bl	8001800 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80013ea:	4803      	ldr	r0, [pc, #12]	@ (80013f8 <MX_TIM4_Init+0xe4>)
 80013ec:	f000 fd74 	bl	8001ed8 <HAL_TIM_MspPostInit>

}
 80013f0:	bf00      	nop
 80013f2:	3738      	adds	r7, #56	@ 0x38
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	2400087c 	.word	0x2400087c
 80013fc:	40000800 	.word	0x40000800

08001400 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8001404:	4b23      	ldr	r3, [pc, #140]	@ (8001494 <MX_UART7_Init+0x94>)
 8001406:	4a24      	ldr	r2, [pc, #144]	@ (8001498 <MX_UART7_Init+0x98>)
 8001408:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 800140a:	4b22      	ldr	r3, [pc, #136]	@ (8001494 <MX_UART7_Init+0x94>)
 800140c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001410:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8001412:	4b20      	ldr	r3, [pc, #128]	@ (8001494 <MX_UART7_Init+0x94>)
 8001414:	2200      	movs	r2, #0
 8001416:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8001418:	4b1e      	ldr	r3, [pc, #120]	@ (8001494 <MX_UART7_Init+0x94>)
 800141a:	2200      	movs	r2, #0
 800141c:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 800141e:	4b1d      	ldr	r3, [pc, #116]	@ (8001494 <MX_UART7_Init+0x94>)
 8001420:	2200      	movs	r2, #0
 8001422:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8001424:	4b1b      	ldr	r3, [pc, #108]	@ (8001494 <MX_UART7_Init+0x94>)
 8001426:	220c      	movs	r2, #12
 8001428:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 800142a:	4b1a      	ldr	r3, [pc, #104]	@ (8001494 <MX_UART7_Init+0x94>)
 800142c:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8001430:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8001432:	4b18      	ldr	r3, [pc, #96]	@ (8001494 <MX_UART7_Init+0x94>)
 8001434:	2200      	movs	r2, #0
 8001436:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001438:	4b16      	ldr	r3, [pc, #88]	@ (8001494 <MX_UART7_Init+0x94>)
 800143a:	2200      	movs	r2, #0
 800143c:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800143e:	4b15      	ldr	r3, [pc, #84]	@ (8001494 <MX_UART7_Init+0x94>)
 8001440:	2200      	movs	r2, #0
 8001442:	625a      	str	r2, [r3, #36]	@ 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001444:	4b13      	ldr	r3, [pc, #76]	@ (8001494 <MX_UART7_Init+0x94>)
 8001446:	2200      	movs	r2, #0
 8001448:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 800144a:	4812      	ldr	r0, [pc, #72]	@ (8001494 <MX_UART7_Init+0x94>)
 800144c:	f00a fe1a 	bl	800c084 <HAL_UART_Init>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d001      	beq.n	800145a <MX_UART7_Init+0x5a>
  {
    Error_Handler();
 8001456:	f000 f9d3 	bl	8001800 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800145a:	2100      	movs	r1, #0
 800145c:	480d      	ldr	r0, [pc, #52]	@ (8001494 <MX_UART7_Init+0x94>)
 800145e:	f00b ff26 	bl	800d2ae <HAL_UARTEx_SetTxFifoThreshold>
 8001462:	4603      	mov	r3, r0
 8001464:	2b00      	cmp	r3, #0
 8001466:	d001      	beq.n	800146c <MX_UART7_Init+0x6c>
  {
    Error_Handler();
 8001468:	f000 f9ca 	bl	8001800 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800146c:	2100      	movs	r1, #0
 800146e:	4809      	ldr	r0, [pc, #36]	@ (8001494 <MX_UART7_Init+0x94>)
 8001470:	f00b ff5b 	bl	800d32a <HAL_UARTEx_SetRxFifoThreshold>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d001      	beq.n	800147e <MX_UART7_Init+0x7e>
  {
    Error_Handler();
 800147a:	f000 f9c1 	bl	8001800 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 800147e:	4805      	ldr	r0, [pc, #20]	@ (8001494 <MX_UART7_Init+0x94>)
 8001480:	f00b fedc 	bl	800d23c <HAL_UARTEx_DisableFifoMode>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <MX_UART7_Init+0x8e>
  {
    Error_Handler();
 800148a:	f000 f9b9 	bl	8001800 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 800148e:	bf00      	nop
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	24000940 	.word	0x24000940
 8001498:	40007800 	.word	0x40007800

0800149c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80014a0:	4b22      	ldr	r3, [pc, #136]	@ (800152c <MX_USART1_UART_Init+0x90>)
 80014a2:	4a23      	ldr	r2, [pc, #140]	@ (8001530 <MX_USART1_UART_Init+0x94>)
 80014a4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80014a6:	4b21      	ldr	r3, [pc, #132]	@ (800152c <MX_USART1_UART_Init+0x90>)
 80014a8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80014ac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80014ae:	4b1f      	ldr	r3, [pc, #124]	@ (800152c <MX_USART1_UART_Init+0x90>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80014b4:	4b1d      	ldr	r3, [pc, #116]	@ (800152c <MX_USART1_UART_Init+0x90>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80014ba:	4b1c      	ldr	r3, [pc, #112]	@ (800152c <MX_USART1_UART_Init+0x90>)
 80014bc:	2200      	movs	r2, #0
 80014be:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80014c0:	4b1a      	ldr	r3, [pc, #104]	@ (800152c <MX_USART1_UART_Init+0x90>)
 80014c2:	220c      	movs	r2, #12
 80014c4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014c6:	4b19      	ldr	r3, [pc, #100]	@ (800152c <MX_USART1_UART_Init+0x90>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80014cc:	4b17      	ldr	r3, [pc, #92]	@ (800152c <MX_USART1_UART_Init+0x90>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014d2:	4b16      	ldr	r3, [pc, #88]	@ (800152c <MX_USART1_UART_Init+0x90>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80014d8:	4b14      	ldr	r3, [pc, #80]	@ (800152c <MX_USART1_UART_Init+0x90>)
 80014da:	2200      	movs	r2, #0
 80014dc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014de:	4b13      	ldr	r3, [pc, #76]	@ (800152c <MX_USART1_UART_Init+0x90>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80014e4:	4811      	ldr	r0, [pc, #68]	@ (800152c <MX_USART1_UART_Init+0x90>)
 80014e6:	f00a fdcd 	bl	800c084 <HAL_UART_Init>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d001      	beq.n	80014f4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80014f0:	f000 f986 	bl	8001800 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014f4:	2100      	movs	r1, #0
 80014f6:	480d      	ldr	r0, [pc, #52]	@ (800152c <MX_USART1_UART_Init+0x90>)
 80014f8:	f00b fed9 	bl	800d2ae <HAL_UARTEx_SetTxFifoThreshold>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d001      	beq.n	8001506 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001502:	f000 f97d 	bl	8001800 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001506:	2100      	movs	r1, #0
 8001508:	4808      	ldr	r0, [pc, #32]	@ (800152c <MX_USART1_UART_Init+0x90>)
 800150a:	f00b ff0e 	bl	800d32a <HAL_UARTEx_SetRxFifoThreshold>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d001      	beq.n	8001518 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001514:	f000 f974 	bl	8001800 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001518:	4804      	ldr	r0, [pc, #16]	@ (800152c <MX_USART1_UART_Init+0x90>)
 800151a:	f00b fe8f 	bl	800d23c <HAL_UARTEx_DisableFifoMode>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d001      	beq.n	8001528 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001524:	f000 f96c 	bl	8001800 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001528:	bf00      	nop
 800152a:	bd80      	pop	{r7, pc}
 800152c:	240009d4 	.word	0x240009d4
 8001530:	40011000 	.word	0x40011000

08001534 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b082      	sub	sp, #8
 8001538:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800153a:	4b15      	ldr	r3, [pc, #84]	@ (8001590 <MX_DMA_Init+0x5c>)
 800153c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001540:	4a13      	ldr	r2, [pc, #76]	@ (8001590 <MX_DMA_Init+0x5c>)
 8001542:	f043 0301 	orr.w	r3, r3, #1
 8001546:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800154a:	4b11      	ldr	r3, [pc, #68]	@ (8001590 <MX_DMA_Init+0x5c>)
 800154c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001550:	f003 0301 	and.w	r3, r3, #1
 8001554:	607b      	str	r3, [r7, #4]
 8001556:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001558:	2200      	movs	r2, #0
 800155a:	2100      	movs	r1, #0
 800155c:	200b      	movs	r0, #11
 800155e:	f002 fbda 	bl	8003d16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001562:	200b      	movs	r0, #11
 8001564:	f002 fbf1 	bl	8003d4a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001568:	2200      	movs	r2, #0
 800156a:	2100      	movs	r1, #0
 800156c:	200c      	movs	r0, #12
 800156e:	f002 fbd2 	bl	8003d16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001572:	200c      	movs	r0, #12
 8001574:	f002 fbe9 	bl	8003d4a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8001578:	2200      	movs	r2, #0
 800157a:	2100      	movs	r1, #0
 800157c:	200d      	movs	r0, #13
 800157e:	f002 fbca 	bl	8003d16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001582:	200d      	movs	r0, #13
 8001584:	f002 fbe1 	bl	8003d4a <HAL_NVIC_EnableIRQ>

}
 8001588:	bf00      	nop
 800158a:	3708      	adds	r7, #8
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}
 8001590:	58024400 	.word	0x58024400

08001594 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b08c      	sub	sp, #48	@ 0x30
 8001598:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800159a:	f107 031c 	add.w	r3, r7, #28
 800159e:	2200      	movs	r2, #0
 80015a0:	601a      	str	r2, [r3, #0]
 80015a2:	605a      	str	r2, [r3, #4]
 80015a4:	609a      	str	r2, [r3, #8]
 80015a6:	60da      	str	r2, [r3, #12]
 80015a8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80015aa:	4b79      	ldr	r3, [pc, #484]	@ (8001790 <MX_GPIO_Init+0x1fc>)
 80015ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015b0:	4a77      	ldr	r2, [pc, #476]	@ (8001790 <MX_GPIO_Init+0x1fc>)
 80015b2:	f043 0310 	orr.w	r3, r3, #16
 80015b6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80015ba:	4b75      	ldr	r3, [pc, #468]	@ (8001790 <MX_GPIO_Init+0x1fc>)
 80015bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015c0:	f003 0310 	and.w	r3, r3, #16
 80015c4:	61bb      	str	r3, [r7, #24]
 80015c6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015c8:	4b71      	ldr	r3, [pc, #452]	@ (8001790 <MX_GPIO_Init+0x1fc>)
 80015ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015ce:	4a70      	ldr	r2, [pc, #448]	@ (8001790 <MX_GPIO_Init+0x1fc>)
 80015d0:	f043 0304 	orr.w	r3, r3, #4
 80015d4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80015d8:	4b6d      	ldr	r3, [pc, #436]	@ (8001790 <MX_GPIO_Init+0x1fc>)
 80015da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015de:	f003 0304 	and.w	r3, r3, #4
 80015e2:	617b      	str	r3, [r7, #20]
 80015e4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015e6:	4b6a      	ldr	r3, [pc, #424]	@ (8001790 <MX_GPIO_Init+0x1fc>)
 80015e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015ec:	4a68      	ldr	r2, [pc, #416]	@ (8001790 <MX_GPIO_Init+0x1fc>)
 80015ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80015f2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80015f6:	4b66      	ldr	r3, [pc, #408]	@ (8001790 <MX_GPIO_Init+0x1fc>)
 80015f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001600:	613b      	str	r3, [r7, #16]
 8001602:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001604:	4b62      	ldr	r3, [pc, #392]	@ (8001790 <MX_GPIO_Init+0x1fc>)
 8001606:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800160a:	4a61      	ldr	r2, [pc, #388]	@ (8001790 <MX_GPIO_Init+0x1fc>)
 800160c:	f043 0301 	orr.w	r3, r3, #1
 8001610:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001614:	4b5e      	ldr	r3, [pc, #376]	@ (8001790 <MX_GPIO_Init+0x1fc>)
 8001616:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800161a:	f003 0301 	and.w	r3, r3, #1
 800161e:	60fb      	str	r3, [r7, #12]
 8001620:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001622:	4b5b      	ldr	r3, [pc, #364]	@ (8001790 <MX_GPIO_Init+0x1fc>)
 8001624:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001628:	4a59      	ldr	r2, [pc, #356]	@ (8001790 <MX_GPIO_Init+0x1fc>)
 800162a:	f043 0302 	orr.w	r3, r3, #2
 800162e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001632:	4b57      	ldr	r3, [pc, #348]	@ (8001790 <MX_GPIO_Init+0x1fc>)
 8001634:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001638:	f003 0302 	and.w	r3, r3, #2
 800163c:	60bb      	str	r3, [r7, #8]
 800163e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001640:	4b53      	ldr	r3, [pc, #332]	@ (8001790 <MX_GPIO_Init+0x1fc>)
 8001642:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001646:	4a52      	ldr	r2, [pc, #328]	@ (8001790 <MX_GPIO_Init+0x1fc>)
 8001648:	f043 0308 	orr.w	r3, r3, #8
 800164c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001650:	4b4f      	ldr	r3, [pc, #316]	@ (8001790 <MX_GPIO_Init+0x1fc>)
 8001652:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001656:	f003 0308 	and.w	r3, r3, #8
 800165a:	607b      	str	r3, [r7, #4]
 800165c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI4_CS_GPIO_Port, SPI4_CS_Pin, GPIO_PIN_RESET);
 800165e:	2200      	movs	r2, #0
 8001660:	2110      	movs	r1, #16
 8001662:	484c      	ldr	r0, [pc, #304]	@ (8001794 <MX_GPIO_Init+0x200>)
 8001664:	f005 f94c 	bl	8006900 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIO_TIMING2_GPIO_Port, GPIO_TIMING2_Pin, GPIO_PIN_RESET);
 8001668:	2200      	movs	r2, #0
 800166a:	2104      	movs	r1, #4
 800166c:	484a      	ldr	r0, [pc, #296]	@ (8001798 <MX_GPIO_Init+0x204>)
 800166e:	f005 f947 	bl	8006900 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_TIMING1_Pin|MUTE_INDICATOR_Pin|MUTE_SIGNAL_Pin, GPIO_PIN_RESET);
 8001672:	2200      	movs	r2, #0
 8001674:	210b      	movs	r1, #11
 8001676:	4849      	ldr	r0, [pc, #292]	@ (800179c <MX_GPIO_Init+0x208>)
 8001678:	f005 f942 	bl	8006900 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ACCEL_NCS1_Pin|RECORD_INDICATOR_Pin, GPIO_PIN_RESET);
 800167c:	2200      	movs	r2, #0
 800167e:	f44f 5188 	mov.w	r1, #4352	@ 0x1100
 8001682:	4847      	ldr	r0, [pc, #284]	@ (80017a0 <MX_GPIO_Init+0x20c>)
 8001684:	f005 f93c 	bl	8006900 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 8001688:	2200      	movs	r2, #0
 800168a:	2101      	movs	r1, #1
 800168c:	4845      	ldr	r0, [pc, #276]	@ (80017a4 <MX_GPIO_Init+0x210>)
 800168e:	f005 f937 	bl	8006900 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI4_INT1_Pin */
  GPIO_InitStruct.Pin = SPI4_INT1_Pin;
 8001692:	2308      	movs	r3, #8
 8001694:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001696:	2300      	movs	r3, #0
 8001698:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169a:	2300      	movs	r3, #0
 800169c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(SPI4_INT1_GPIO_Port, &GPIO_InitStruct);
 800169e:	f107 031c 	add.w	r3, r7, #28
 80016a2:	4619      	mov	r1, r3
 80016a4:	483b      	ldr	r0, [pc, #236]	@ (8001794 <MX_GPIO_Init+0x200>)
 80016a6:	f004 ff83 	bl	80065b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI4_CS_Pin */
  GPIO_InitStruct.Pin = SPI4_CS_Pin;
 80016aa:	2310      	movs	r3, #16
 80016ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016ae:	2301      	movs	r3, #1
 80016b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b2:	2300      	movs	r3, #0
 80016b4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016b6:	2300      	movs	r3, #0
 80016b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(SPI4_CS_GPIO_Port, &GPIO_InitStruct);
 80016ba:	f107 031c 	add.w	r3, r7, #28
 80016be:	4619      	mov	r1, r3
 80016c0:	4834      	ldr	r0, [pc, #208]	@ (8001794 <MX_GPIO_Init+0x200>)
 80016c2:	f004 ff75 	bl	80065b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 DAC_EXT_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_13|DAC_EXT_Pin;
 80016c6:	f44f 5308 	mov.w	r3, #8704	@ 0x2200
 80016ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016cc:	2300      	movs	r3, #0
 80016ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d0:	2300      	movs	r3, #0
 80016d2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016d4:	f107 031c 	add.w	r3, r7, #28
 80016d8:	4619      	mov	r1, r3
 80016da:	482f      	ldr	r0, [pc, #188]	@ (8001798 <MX_GPIO_Init+0x204>)
 80016dc:	f004 ff68 	bl	80065b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_TIMING2_Pin */
  GPIO_InitStruct.Pin = GPIO_TIMING2_Pin;
 80016e0:	2304      	movs	r3, #4
 80016e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016e4:	2301      	movs	r3, #1
 80016e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e8:	2300      	movs	r3, #0
 80016ea:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ec:	2300      	movs	r3, #0
 80016ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIO_TIMING2_GPIO_Port, &GPIO_InitStruct);
 80016f0:	f107 031c 	add.w	r3, r7, #28
 80016f4:	4619      	mov	r1, r3
 80016f6:	4828      	ldr	r0, [pc, #160]	@ (8001798 <MX_GPIO_Init+0x204>)
 80016f8:	f004 ff5a 	bl	80065b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_TIMING1_Pin MUTE_INDICATOR_Pin MUTE_SIGNAL_Pin */
  GPIO_InitStruct.Pin = GPIO_TIMING1_Pin|MUTE_INDICATOR_Pin|MUTE_SIGNAL_Pin;
 80016fc:	230b      	movs	r3, #11
 80016fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001700:	2301      	movs	r3, #1
 8001702:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001704:	2300      	movs	r3, #0
 8001706:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001708:	2300      	movs	r3, #0
 800170a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800170c:	f107 031c 	add.w	r3, r7, #28
 8001710:	4619      	mov	r1, r3
 8001712:	4822      	ldr	r0, [pc, #136]	@ (800179c <MX_GPIO_Init+0x208>)
 8001714:	f004 ff4c 	bl	80065b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : MUTE_BUTTON_Pin BIG_RED_BUTTON_Pin */
  GPIO_InitStruct.Pin = MUTE_BUTTON_Pin|BIG_RED_BUTTON_Pin;
 8001718:	f248 0304 	movw	r3, #32772	@ 0x8004
 800171c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800171e:	2300      	movs	r3, #0
 8001720:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001722:	2300      	movs	r3, #0
 8001724:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001726:	f107 031c 	add.w	r3, r7, #28
 800172a:	4619      	mov	r1, r3
 800172c:	481b      	ldr	r0, [pc, #108]	@ (800179c <MX_GPIO_Init+0x208>)
 800172e:	f004 ff3f 	bl	80065b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ACCEL_NCS1_Pin RECORD_INDICATOR_Pin */
  GPIO_InitStruct.Pin = ACCEL_NCS1_Pin|RECORD_INDICATOR_Pin;
 8001732:	f44f 5388 	mov.w	r3, #4352	@ 0x1100
 8001736:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001738:	2301      	movs	r3, #1
 800173a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173c:	2300      	movs	r3, #0
 800173e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001740:	2300      	movs	r3, #0
 8001742:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001744:	f107 031c 	add.w	r3, r7, #28
 8001748:	4619      	mov	r1, r3
 800174a:	4815      	ldr	r0, [pc, #84]	@ (80017a0 <MX_GPIO_Init+0x20c>)
 800174c:	f004 ff30 	bl	80065b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ACCEL_INTA1_Pin ACCEL_INTB1_Pin SPI3_INT1_Pin SPI3_INT2_Pin */
  GPIO_InitStruct.Pin = ACCEL_INTA1_Pin|ACCEL_INTB1_Pin|SPI3_INT1_Pin|SPI3_INT2_Pin;
 8001750:	f240 3306 	movw	r3, #774	@ 0x306
 8001754:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001756:	2300      	movs	r3, #0
 8001758:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175a:	2300      	movs	r3, #0
 800175c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800175e:	f107 031c 	add.w	r3, r7, #28
 8001762:	4619      	mov	r1, r3
 8001764:	480f      	ldr	r0, [pc, #60]	@ (80017a4 <MX_GPIO_Init+0x210>)
 8001766:	f004 ff23 	bl	80065b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI3_CS_Pin */
  GPIO_InitStruct.Pin = SPI3_CS_Pin;
 800176a:	2301      	movs	r3, #1
 800176c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800176e:	2301      	movs	r3, #1
 8001770:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001772:	2300      	movs	r3, #0
 8001774:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001776:	2300      	movs	r3, #0
 8001778:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(SPI3_CS_GPIO_Port, &GPIO_InitStruct);
 800177a:	f107 031c 	add.w	r3, r7, #28
 800177e:	4619      	mov	r1, r3
 8001780:	4808      	ldr	r0, [pc, #32]	@ (80017a4 <MX_GPIO_Init+0x210>)
 8001782:	f004 ff15 	bl	80065b0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001786:	bf00      	nop
 8001788:	3730      	adds	r7, #48	@ 0x30
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	58024400 	.word	0x58024400
 8001794:	58021000 	.word	0x58021000
 8001798:	58020800 	.word	0x58020800
 800179c:	58020000 	.word	0x58020000
 80017a0:	58020400 	.word	0x58020400
 80017a4:	58020c00 	.word	0x58020c00

080017a8 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b084      	sub	sp, #16
 80017ac:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80017ae:	463b      	mov	r3, r7
 80017b0:	2200      	movs	r2, #0
 80017b2:	601a      	str	r2, [r3, #0]
 80017b4:	605a      	str	r2, [r3, #4]
 80017b6:	609a      	str	r2, [r3, #8]
 80017b8:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80017ba:	f002 fae1 	bl	8003d80 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80017be:	2301      	movs	r3, #1
 80017c0:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80017c2:	2300      	movs	r3, #0
 80017c4:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80017c6:	2300      	movs	r3, #0
 80017c8:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80017ca:	231f      	movs	r3, #31
 80017cc:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80017ce:	2387      	movs	r3, #135	@ 0x87
 80017d0:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80017d2:	2300      	movs	r3, #0
 80017d4:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80017d6:	2300      	movs	r3, #0
 80017d8:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80017da:	2301      	movs	r3, #1
 80017dc:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80017de:	2301      	movs	r3, #1
 80017e0:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80017e2:	2300      	movs	r3, #0
 80017e4:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80017e6:	2300      	movs	r3, #0
 80017e8:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80017ea:	463b      	mov	r3, r7
 80017ec:	4618      	mov	r0, r3
 80017ee:	f002 faff 	bl	8003df0 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80017f2:	2004      	movs	r0, #4
 80017f4:	f002 fadc 	bl	8003db0 <HAL_MPU_Enable>

}
 80017f8:	bf00      	nop
 80017fa:	3710      	adds	r7, #16
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}

08001800 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001804:	b672      	cpsid	i
}
 8001806:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001808:	bf00      	nop
 800180a:	e7fd      	b.n	8001808 <Error_Handler+0x8>

0800180c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800180c:	b480      	push	{r7}
 800180e:	b083      	sub	sp, #12
 8001810:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001812:	4b0a      	ldr	r3, [pc, #40]	@ (800183c <HAL_MspInit+0x30>)
 8001814:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001818:	4a08      	ldr	r2, [pc, #32]	@ (800183c <HAL_MspInit+0x30>)
 800181a:	f043 0302 	orr.w	r3, r3, #2
 800181e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001822:	4b06      	ldr	r3, [pc, #24]	@ (800183c <HAL_MspInit+0x30>)
 8001824:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001828:	f003 0302 	and.w	r3, r3, #2
 800182c:	607b      	str	r3, [r7, #4]
 800182e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001830:	bf00      	nop
 8001832:	370c      	adds	r7, #12
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr
 800183c:	58024400 	.word	0x58024400

08001840 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b08c      	sub	sp, #48	@ 0x30
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001848:	f107 031c 	add.w	r3, r7, #28
 800184c:	2200      	movs	r2, #0
 800184e:	601a      	str	r2, [r3, #0]
 8001850:	605a      	str	r2, [r3, #4]
 8001852:	609a      	str	r2, [r3, #8]
 8001854:	60da      	str	r2, [r3, #12]
 8001856:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a39      	ldr	r2, [pc, #228]	@ (8001944 <HAL_ADC_MspInit+0x104>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d133      	bne.n	80018ca <HAL_ADC_MspInit+0x8a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001862:	4b39      	ldr	r3, [pc, #228]	@ (8001948 <HAL_ADC_MspInit+0x108>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	3301      	adds	r3, #1
 8001868:	4a37      	ldr	r2, [pc, #220]	@ (8001948 <HAL_ADC_MspInit+0x108>)
 800186a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800186c:	4b36      	ldr	r3, [pc, #216]	@ (8001948 <HAL_ADC_MspInit+0x108>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	2b01      	cmp	r3, #1
 8001872:	d10e      	bne.n	8001892 <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001874:	4b35      	ldr	r3, [pc, #212]	@ (800194c <HAL_ADC_MspInit+0x10c>)
 8001876:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800187a:	4a34      	ldr	r2, [pc, #208]	@ (800194c <HAL_ADC_MspInit+0x10c>)
 800187c:	f043 0320 	orr.w	r3, r3, #32
 8001880:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001884:	4b31      	ldr	r3, [pc, #196]	@ (800194c <HAL_ADC_MspInit+0x10c>)
 8001886:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800188a:	f003 0320 	and.w	r3, r3, #32
 800188e:	61bb      	str	r3, [r7, #24]
 8001890:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001892:	4b2e      	ldr	r3, [pc, #184]	@ (800194c <HAL_ADC_MspInit+0x10c>)
 8001894:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001898:	4a2c      	ldr	r2, [pc, #176]	@ (800194c <HAL_ADC_MspInit+0x10c>)
 800189a:	f043 0304 	orr.w	r3, r3, #4
 800189e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80018a2:	4b2a      	ldr	r3, [pc, #168]	@ (800194c <HAL_ADC_MspInit+0x10c>)
 80018a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018a8:	f003 0304 	and.w	r3, r3, #4
 80018ac:	617b      	str	r3, [r7, #20]
 80018ae:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80018b0:	2330      	movs	r3, #48	@ 0x30
 80018b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018b4:	2303      	movs	r3, #3
 80018b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b8:	2300      	movs	r3, #0
 80018ba:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018bc:	f107 031c 	add.w	r3, r7, #28
 80018c0:	4619      	mov	r1, r3
 80018c2:	4823      	ldr	r0, [pc, #140]	@ (8001950 <HAL_ADC_MspInit+0x110>)
 80018c4:	f004 fe74 	bl	80065b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80018c8:	e037      	b.n	800193a <HAL_ADC_MspInit+0xfa>
  else if(hadc->Instance==ADC2)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4a21      	ldr	r2, [pc, #132]	@ (8001954 <HAL_ADC_MspInit+0x114>)
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d132      	bne.n	800193a <HAL_ADC_MspInit+0xfa>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80018d4:	4b1c      	ldr	r3, [pc, #112]	@ (8001948 <HAL_ADC_MspInit+0x108>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	3301      	adds	r3, #1
 80018da:	4a1b      	ldr	r2, [pc, #108]	@ (8001948 <HAL_ADC_MspInit+0x108>)
 80018dc:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80018de:	4b1a      	ldr	r3, [pc, #104]	@ (8001948 <HAL_ADC_MspInit+0x108>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	2b01      	cmp	r3, #1
 80018e4:	d10e      	bne.n	8001904 <HAL_ADC_MspInit+0xc4>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80018e6:	4b19      	ldr	r3, [pc, #100]	@ (800194c <HAL_ADC_MspInit+0x10c>)
 80018e8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80018ec:	4a17      	ldr	r2, [pc, #92]	@ (800194c <HAL_ADC_MspInit+0x10c>)
 80018ee:	f043 0320 	orr.w	r3, r3, #32
 80018f2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80018f6:	4b15      	ldr	r3, [pc, #84]	@ (800194c <HAL_ADC_MspInit+0x10c>)
 80018f8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80018fc:	f003 0320 	and.w	r3, r3, #32
 8001900:	613b      	str	r3, [r7, #16]
 8001902:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001904:	4b11      	ldr	r3, [pc, #68]	@ (800194c <HAL_ADC_MspInit+0x10c>)
 8001906:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800190a:	4a10      	ldr	r2, [pc, #64]	@ (800194c <HAL_ADC_MspInit+0x10c>)
 800190c:	f043 0301 	orr.w	r3, r3, #1
 8001910:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001914:	4b0d      	ldr	r3, [pc, #52]	@ (800194c <HAL_ADC_MspInit+0x10c>)
 8001916:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800191a:	f003 0301 	and.w	r3, r3, #1
 800191e:	60fb      	str	r3, [r7, #12]
 8001920:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001922:	23c0      	movs	r3, #192	@ 0xc0
 8001924:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001926:	2303      	movs	r3, #3
 8001928:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800192a:	2300      	movs	r3, #0
 800192c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800192e:	f107 031c 	add.w	r3, r7, #28
 8001932:	4619      	mov	r1, r3
 8001934:	4808      	ldr	r0, [pc, #32]	@ (8001958 <HAL_ADC_MspInit+0x118>)
 8001936:	f004 fe3b 	bl	80065b0 <HAL_GPIO_Init>
}
 800193a:	bf00      	nop
 800193c:	3730      	adds	r7, #48	@ 0x30
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	40022000 	.word	0x40022000
 8001948:	24000a68 	.word	0x24000a68
 800194c:	58024400 	.word	0x58024400
 8001950:	58020800 	.word	0x58020800
 8001954:	40022100 	.word	0x40022100
 8001958:	58020000 	.word	0x58020000

0800195c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b08a      	sub	sp, #40	@ 0x28
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001964:	f107 0314 	add.w	r3, r7, #20
 8001968:	2200      	movs	r2, #0
 800196a:	601a      	str	r2, [r3, #0]
 800196c:	605a      	str	r2, [r3, #4]
 800196e:	609a      	str	r2, [r3, #8]
 8001970:	60da      	str	r2, [r3, #12]
 8001972:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a48      	ldr	r2, [pc, #288]	@ (8001a9c <HAL_DAC_MspInit+0x140>)
 800197a:	4293      	cmp	r3, r2
 800197c:	f040 808a 	bne.w	8001a94 <HAL_DAC_MspInit+0x138>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8001980:	4b47      	ldr	r3, [pc, #284]	@ (8001aa0 <HAL_DAC_MspInit+0x144>)
 8001982:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001986:	4a46      	ldr	r2, [pc, #280]	@ (8001aa0 <HAL_DAC_MspInit+0x144>)
 8001988:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800198c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001990:	4b43      	ldr	r3, [pc, #268]	@ (8001aa0 <HAL_DAC_MspInit+0x144>)
 8001992:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001996:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800199a:	613b      	str	r3, [r7, #16]
 800199c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800199e:	4b40      	ldr	r3, [pc, #256]	@ (8001aa0 <HAL_DAC_MspInit+0x144>)
 80019a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80019a4:	4a3e      	ldr	r2, [pc, #248]	@ (8001aa0 <HAL_DAC_MspInit+0x144>)
 80019a6:	f043 0301 	orr.w	r3, r3, #1
 80019aa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80019ae:	4b3c      	ldr	r3, [pc, #240]	@ (8001aa0 <HAL_DAC_MspInit+0x144>)
 80019b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80019b4:	f003 0301 	and.w	r3, r3, #1
 80019b8:	60fb      	str	r3, [r7, #12]
 80019ba:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80019bc:	2330      	movs	r3, #48	@ 0x30
 80019be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019c0:	2303      	movs	r3, #3
 80019c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c4:	2300      	movs	r3, #0
 80019c6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019c8:	f107 0314 	add.w	r3, r7, #20
 80019cc:	4619      	mov	r1, r3
 80019ce:	4835      	ldr	r0, [pc, #212]	@ (8001aa4 <HAL_DAC_MspInit+0x148>)
 80019d0:	f004 fdee 	bl	80065b0 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Stream0;
 80019d4:	4b34      	ldr	r3, [pc, #208]	@ (8001aa8 <HAL_DAC_MspInit+0x14c>)
 80019d6:	4a35      	ldr	r2, [pc, #212]	@ (8001aac <HAL_DAC_MspInit+0x150>)
 80019d8:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 80019da:	4b33      	ldr	r3, [pc, #204]	@ (8001aa8 <HAL_DAC_MspInit+0x14c>)
 80019dc:	2243      	movs	r2, #67	@ 0x43
 80019de:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80019e0:	4b31      	ldr	r3, [pc, #196]	@ (8001aa8 <HAL_DAC_MspInit+0x14c>)
 80019e2:	2240      	movs	r2, #64	@ 0x40
 80019e4:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80019e6:	4b30      	ldr	r3, [pc, #192]	@ (8001aa8 <HAL_DAC_MspInit+0x14c>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80019ec:	4b2e      	ldr	r3, [pc, #184]	@ (8001aa8 <HAL_DAC_MspInit+0x14c>)
 80019ee:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80019f2:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80019f4:	4b2c      	ldr	r3, [pc, #176]	@ (8001aa8 <HAL_DAC_MspInit+0x14c>)
 80019f6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80019fa:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80019fc:	4b2a      	ldr	r3, [pc, #168]	@ (8001aa8 <HAL_DAC_MspInit+0x14c>)
 80019fe:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001a02:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8001a04:	4b28      	ldr	r3, [pc, #160]	@ (8001aa8 <HAL_DAC_MspInit+0x14c>)
 8001a06:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001a0a:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001a0c:	4b26      	ldr	r3, [pc, #152]	@ (8001aa8 <HAL_DAC_MspInit+0x14c>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a12:	4b25      	ldr	r3, [pc, #148]	@ (8001aa8 <HAL_DAC_MspInit+0x14c>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8001a18:	4823      	ldr	r0, [pc, #140]	@ (8001aa8 <HAL_DAC_MspInit+0x14c>)
 8001a1a:	f002 fcf5 	bl	8004408 <HAL_DMA_Init>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d001      	beq.n	8001a28 <HAL_DAC_MspInit+0xcc>
    {
      Error_Handler();
 8001a24:	f7ff feec 	bl	8001800 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	4a1f      	ldr	r2, [pc, #124]	@ (8001aa8 <HAL_DAC_MspInit+0x14c>)
 8001a2c:	609a      	str	r2, [r3, #8]
 8001a2e:	4a1e      	ldr	r2, [pc, #120]	@ (8001aa8 <HAL_DAC_MspInit+0x14c>)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6393      	str	r3, [r2, #56]	@ 0x38

    /* DAC1_CH2 Init */
    hdma_dac1_ch2.Instance = DMA1_Stream1;
 8001a34:	4b1e      	ldr	r3, [pc, #120]	@ (8001ab0 <HAL_DAC_MspInit+0x154>)
 8001a36:	4a1f      	ldr	r2, [pc, #124]	@ (8001ab4 <HAL_DAC_MspInit+0x158>)
 8001a38:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch2.Init.Request = DMA_REQUEST_DAC2;
 8001a3a:	4b1d      	ldr	r3, [pc, #116]	@ (8001ab0 <HAL_DAC_MspInit+0x154>)
 8001a3c:	2244      	movs	r2, #68	@ 0x44
 8001a3e:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001a40:	4b1b      	ldr	r3, [pc, #108]	@ (8001ab0 <HAL_DAC_MspInit+0x154>)
 8001a42:	2240      	movs	r2, #64	@ 0x40
 8001a44:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a46:	4b1a      	ldr	r3, [pc, #104]	@ (8001ab0 <HAL_DAC_MspInit+0x154>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8001a4c:	4b18      	ldr	r3, [pc, #96]	@ (8001ab0 <HAL_DAC_MspInit+0x154>)
 8001a4e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001a52:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001a54:	4b16      	ldr	r3, [pc, #88]	@ (8001ab0 <HAL_DAC_MspInit+0x154>)
 8001a56:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001a5a:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001a5c:	4b14      	ldr	r3, [pc, #80]	@ (8001ab0 <HAL_DAC_MspInit+0x154>)
 8001a5e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001a62:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch2.Init.Mode = DMA_CIRCULAR;
 8001a64:	4b12      	ldr	r3, [pc, #72]	@ (8001ab0 <HAL_DAC_MspInit+0x154>)
 8001a66:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001a6a:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8001a6c:	4b10      	ldr	r3, [pc, #64]	@ (8001ab0 <HAL_DAC_MspInit+0x154>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a72:	4b0f      	ldr	r3, [pc, #60]	@ (8001ab0 <HAL_DAC_MspInit+0x154>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch2) != HAL_OK)
 8001a78:	480d      	ldr	r0, [pc, #52]	@ (8001ab0 <HAL_DAC_MspInit+0x154>)
 8001a7a:	f002 fcc5 	bl	8004408 <HAL_DMA_Init>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d001      	beq.n	8001a88 <HAL_DAC_MspInit+0x12c>
    {
      Error_Handler();
 8001a84:	f7ff febc 	bl	8001800 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle2,hdma_dac1_ch2);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	4a09      	ldr	r2, [pc, #36]	@ (8001ab0 <HAL_DAC_MspInit+0x154>)
 8001a8c:	60da      	str	r2, [r3, #12]
 8001a8e:	4a08      	ldr	r2, [pc, #32]	@ (8001ab0 <HAL_DAC_MspInit+0x154>)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END DAC1_MspInit 1 */

  }

}
 8001a94:	bf00      	nop
 8001a96:	3728      	adds	r7, #40	@ 0x28
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	40007400 	.word	0x40007400
 8001aa0:	58024400 	.word	0x58024400
 8001aa4:	58020000 	.word	0x58020000
 8001aa8:	240004bc 	.word	0x240004bc
 8001aac:	40020010 	.word	0x40020010
 8001ab0:	24000534 	.word	0x24000534
 8001ab4:	40020028 	.word	0x40020028

08001ab8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b0b8      	sub	sp, #224	@ 0xe0
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ac0:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	601a      	str	r2, [r3, #0]
 8001ac8:	605a      	str	r2, [r3, #4]
 8001aca:	609a      	str	r2, [r3, #8]
 8001acc:	60da      	str	r2, [r3, #12]
 8001ace:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ad0:	f107 0310 	add.w	r3, r7, #16
 8001ad4:	22b8      	movs	r2, #184	@ 0xb8
 8001ad6:	2100      	movs	r1, #0
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f00b fcb3 	bl	800d444 <memset>
  if(hi2c->Instance==I2C2)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4a27      	ldr	r2, [pc, #156]	@ (8001b80 <HAL_I2C_MspInit+0xc8>)
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	d146      	bne.n	8001b76 <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001ae8:	f04f 0208 	mov.w	r2, #8
 8001aec:	f04f 0300 	mov.w	r3, #0
 8001af0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8001af4:	2300      	movs	r3, #0
 8001af6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001afa:	f107 0310 	add.w	r3, r7, #16
 8001afe:	4618      	mov	r0, r3
 8001b00:	f005 ffec 	bl	8007adc <HAL_RCCEx_PeriphCLKConfig>
 8001b04:	4603      	mov	r3, r0
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d001      	beq.n	8001b0e <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8001b0a:	f7ff fe79 	bl	8001800 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b0e:	4b1d      	ldr	r3, [pc, #116]	@ (8001b84 <HAL_I2C_MspInit+0xcc>)
 8001b10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b14:	4a1b      	ldr	r2, [pc, #108]	@ (8001b84 <HAL_I2C_MspInit+0xcc>)
 8001b16:	f043 0302 	orr.w	r3, r3, #2
 8001b1a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001b1e:	4b19      	ldr	r3, [pc, #100]	@ (8001b84 <HAL_I2C_MspInit+0xcc>)
 8001b20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b24:	f003 0302 	and.w	r3, r3, #2
 8001b28:	60fb      	str	r3, [r7, #12]
 8001b2a:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001b2c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001b30:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b34:	2312      	movs	r3, #18
 8001b36:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b40:	2300      	movs	r3, #0
 8001b42:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001b46:	2304      	movs	r3, #4
 8001b48:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b4c:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8001b50:	4619      	mov	r1, r3
 8001b52:	480d      	ldr	r0, [pc, #52]	@ (8001b88 <HAL_I2C_MspInit+0xd0>)
 8001b54:	f004 fd2c 	bl	80065b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001b58:	4b0a      	ldr	r3, [pc, #40]	@ (8001b84 <HAL_I2C_MspInit+0xcc>)
 8001b5a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001b5e:	4a09      	ldr	r2, [pc, #36]	@ (8001b84 <HAL_I2C_MspInit+0xcc>)
 8001b60:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001b64:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001b68:	4b06      	ldr	r3, [pc, #24]	@ (8001b84 <HAL_I2C_MspInit+0xcc>)
 8001b6a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001b6e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b72:	60bb      	str	r3, [r7, #8]
 8001b74:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 8001b76:	bf00      	nop
 8001b78:	37e0      	adds	r7, #224	@ 0xe0
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	40005800 	.word	0x40005800
 8001b84:	58024400 	.word	0x58024400
 8001b88:	58020400 	.word	0x58020400

08001b8c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b0bc      	sub	sp, #240	@ 0xf0
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b94:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001b98:	2200      	movs	r2, #0
 8001b9a:	601a      	str	r2, [r3, #0]
 8001b9c:	605a      	str	r2, [r3, #4]
 8001b9e:	609a      	str	r2, [r3, #8]
 8001ba0:	60da      	str	r2, [r3, #12]
 8001ba2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ba4:	f107 0320 	add.w	r3, r7, #32
 8001ba8:	22b8      	movs	r2, #184	@ 0xb8
 8001baa:	2100      	movs	r1, #0
 8001bac:	4618      	mov	r0, r3
 8001bae:	f00b fc49 	bl	800d444 <memset>
  if(hspi->Instance==SPI2)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4a72      	ldr	r2, [pc, #456]	@ (8001d80 <HAL_SPI_MspInit+0x1f4>)
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d146      	bne.n	8001c4a <HAL_SPI_MspInit+0xbe>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8001bbc:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001bc0:	f04f 0300 	mov.w	r3, #0
 8001bc4:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001bcc:	f107 0320 	add.w	r3, r7, #32
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f005 ff83 	bl	8007adc <HAL_RCCEx_PeriphCLKConfig>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d001      	beq.n	8001be0 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8001bdc:	f7ff fe10 	bl	8001800 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001be0:	4b68      	ldr	r3, [pc, #416]	@ (8001d84 <HAL_SPI_MspInit+0x1f8>)
 8001be2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001be6:	4a67      	ldr	r2, [pc, #412]	@ (8001d84 <HAL_SPI_MspInit+0x1f8>)
 8001be8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001bec:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001bf0:	4b64      	ldr	r3, [pc, #400]	@ (8001d84 <HAL_SPI_MspInit+0x1f8>)
 8001bf2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001bf6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001bfa:	61fb      	str	r3, [r7, #28]
 8001bfc:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bfe:	4b61      	ldr	r3, [pc, #388]	@ (8001d84 <HAL_SPI_MspInit+0x1f8>)
 8001c00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c04:	4a5f      	ldr	r2, [pc, #380]	@ (8001d84 <HAL_SPI_MspInit+0x1f8>)
 8001c06:	f043 0302 	orr.w	r3, r3, #2
 8001c0a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001c0e:	4b5d      	ldr	r3, [pc, #372]	@ (8001d84 <HAL_SPI_MspInit+0x1f8>)
 8001c10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c14:	f003 0302 	and.w	r3, r3, #2
 8001c18:	61bb      	str	r3, [r7, #24]
 8001c1a:	69bb      	ldr	r3, [r7, #24]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = ACCEL_SCK1_Pin|ACCEL_MISO1_Pin|ACCEL_MOSI1_Pin;
 8001c1c:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8001c20:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c24:	2302      	movs	r3, #2
 8001c26:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c30:	2300      	movs	r3, #0
 8001c32:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001c36:	2305      	movs	r3, #5
 8001c38:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c3c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001c40:	4619      	mov	r1, r3
 8001c42:	4851      	ldr	r0, [pc, #324]	@ (8001d88 <HAL_SPI_MspInit+0x1fc>)
 8001c44:	f004 fcb4 	bl	80065b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 8001c48:	e096      	b.n	8001d78 <HAL_SPI_MspInit+0x1ec>
  else if(hspi->Instance==SPI3)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a4f      	ldr	r2, [pc, #316]	@ (8001d8c <HAL_SPI_MspInit+0x200>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d146      	bne.n	8001ce2 <HAL_SPI_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8001c54:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001c58:	f04f 0300 	mov.w	r3, #0
 8001c5c:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001c60:	2300      	movs	r3, #0
 8001c62:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c64:	f107 0320 	add.w	r3, r7, #32
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f005 ff37 	bl	8007adc <HAL_RCCEx_PeriphCLKConfig>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d001      	beq.n	8001c78 <HAL_SPI_MspInit+0xec>
      Error_Handler();
 8001c74:	f7ff fdc4 	bl	8001800 <Error_Handler>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001c78:	4b42      	ldr	r3, [pc, #264]	@ (8001d84 <HAL_SPI_MspInit+0x1f8>)
 8001c7a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001c7e:	4a41      	ldr	r2, [pc, #260]	@ (8001d84 <HAL_SPI_MspInit+0x1f8>)
 8001c80:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001c84:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001c88:	4b3e      	ldr	r3, [pc, #248]	@ (8001d84 <HAL_SPI_MspInit+0x1f8>)
 8001c8a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001c8e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001c92:	617b      	str	r3, [r7, #20]
 8001c94:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c96:	4b3b      	ldr	r3, [pc, #236]	@ (8001d84 <HAL_SPI_MspInit+0x1f8>)
 8001c98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c9c:	4a39      	ldr	r2, [pc, #228]	@ (8001d84 <HAL_SPI_MspInit+0x1f8>)
 8001c9e:	f043 0304 	orr.w	r3, r3, #4
 8001ca2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001ca6:	4b37      	ldr	r3, [pc, #220]	@ (8001d84 <HAL_SPI_MspInit+0x1f8>)
 8001ca8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001cac:	f003 0304 	and.w	r3, r3, #4
 8001cb0:	613b      	str	r3, [r7, #16]
 8001cb2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001cb4:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001cb8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cbc:	2302      	movs	r3, #2
 8001cbe:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001cce:	2306      	movs	r3, #6
 8001cd0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cd4:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001cd8:	4619      	mov	r1, r3
 8001cda:	482d      	ldr	r0, [pc, #180]	@ (8001d90 <HAL_SPI_MspInit+0x204>)
 8001cdc:	f004 fc68 	bl	80065b0 <HAL_GPIO_Init>
}
 8001ce0:	e04a      	b.n	8001d78 <HAL_SPI_MspInit+0x1ec>
  else if(hspi->Instance==SPI4)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4a2b      	ldr	r2, [pc, #172]	@ (8001d94 <HAL_SPI_MspInit+0x208>)
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d145      	bne.n	8001d78 <HAL_SPI_MspInit+0x1ec>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 8001cec:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001cf0:	f04f 0300 	mov.w	r3, #0
 8001cf4:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001cfe:	f107 0320 	add.w	r3, r7, #32
 8001d02:	4618      	mov	r0, r3
 8001d04:	f005 feea 	bl	8007adc <HAL_RCCEx_PeriphCLKConfig>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d001      	beq.n	8001d12 <HAL_SPI_MspInit+0x186>
      Error_Handler();
 8001d0e:	f7ff fd77 	bl	8001800 <Error_Handler>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8001d12:	4b1c      	ldr	r3, [pc, #112]	@ (8001d84 <HAL_SPI_MspInit+0x1f8>)
 8001d14:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001d18:	4a1a      	ldr	r2, [pc, #104]	@ (8001d84 <HAL_SPI_MspInit+0x1f8>)
 8001d1a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001d1e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001d22:	4b18      	ldr	r3, [pc, #96]	@ (8001d84 <HAL_SPI_MspInit+0x1f8>)
 8001d24:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001d28:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001d2c:	60fb      	str	r3, [r7, #12]
 8001d2e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001d30:	4b14      	ldr	r3, [pc, #80]	@ (8001d84 <HAL_SPI_MspInit+0x1f8>)
 8001d32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d36:	4a13      	ldr	r2, [pc, #76]	@ (8001d84 <HAL_SPI_MspInit+0x1f8>)
 8001d38:	f043 0310 	orr.w	r3, r3, #16
 8001d3c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001d40:	4b10      	ldr	r3, [pc, #64]	@ (8001d84 <HAL_SPI_MspInit+0x1f8>)
 8001d42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d46:	f003 0310 	and.w	r3, r3, #16
 8001d4a:	60bb      	str	r3, [r7, #8]
 8001d4c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8001d4e:	2364      	movs	r3, #100	@ 0x64
 8001d50:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d54:	2302      	movs	r3, #2
 8001d56:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d60:	2300      	movs	r3, #0
 8001d62:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8001d66:	2305      	movs	r3, #5
 8001d68:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d6c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001d70:	4619      	mov	r1, r3
 8001d72:	4809      	ldr	r0, [pc, #36]	@ (8001d98 <HAL_SPI_MspInit+0x20c>)
 8001d74:	f004 fc1c 	bl	80065b0 <HAL_GPIO_Init>
}
 8001d78:	bf00      	nop
 8001d7a:	37f0      	adds	r7, #240	@ 0xf0
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}
 8001d80:	40003800 	.word	0x40003800
 8001d84:	58024400 	.word	0x58024400
 8001d88:	58020400 	.word	0x58020400
 8001d8c:	40003c00 	.word	0x40003c00
 8001d90:	58020800 	.word	0x58020800
 8001d94:	40013400 	.word	0x40013400
 8001d98:	58021000 	.word	0x58021000

08001d9c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b086      	sub	sp, #24
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a45      	ldr	r2, [pc, #276]	@ (8001ec0 <HAL_TIM_Base_MspInit+0x124>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d10f      	bne.n	8001dce <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001dae:	4b45      	ldr	r3, [pc, #276]	@ (8001ec4 <HAL_TIM_Base_MspInit+0x128>)
 8001db0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001db4:	4a43      	ldr	r2, [pc, #268]	@ (8001ec4 <HAL_TIM_Base_MspInit+0x128>)
 8001db6:	f043 0301 	orr.w	r3, r3, #1
 8001dba:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001dbe:	4b41      	ldr	r3, [pc, #260]	@ (8001ec4 <HAL_TIM_Base_MspInit+0x128>)
 8001dc0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001dc4:	f003 0301 	and.w	r3, r3, #1
 8001dc8:	617b      	str	r3, [r7, #20]
 8001dca:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001dcc:	e074      	b.n	8001eb8 <HAL_TIM_Base_MspInit+0x11c>
  else if(htim_base->Instance==TIM2)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001dd6:	d10f      	bne.n	8001df8 <HAL_TIM_Base_MspInit+0x5c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001dd8:	4b3a      	ldr	r3, [pc, #232]	@ (8001ec4 <HAL_TIM_Base_MspInit+0x128>)
 8001dda:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001dde:	4a39      	ldr	r2, [pc, #228]	@ (8001ec4 <HAL_TIM_Base_MspInit+0x128>)
 8001de0:	f043 0301 	orr.w	r3, r3, #1
 8001de4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001de8:	4b36      	ldr	r3, [pc, #216]	@ (8001ec4 <HAL_TIM_Base_MspInit+0x128>)
 8001dea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001dee:	f003 0301 	and.w	r3, r3, #1
 8001df2:	613b      	str	r3, [r7, #16]
 8001df4:	693b      	ldr	r3, [r7, #16]
}
 8001df6:	e05f      	b.n	8001eb8 <HAL_TIM_Base_MspInit+0x11c>
  else if(htim_base->Instance==TIM3)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a32      	ldr	r2, [pc, #200]	@ (8001ec8 <HAL_TIM_Base_MspInit+0x12c>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d10f      	bne.n	8001e22 <HAL_TIM_Base_MspInit+0x86>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001e02:	4b30      	ldr	r3, [pc, #192]	@ (8001ec4 <HAL_TIM_Base_MspInit+0x128>)
 8001e04:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001e08:	4a2e      	ldr	r2, [pc, #184]	@ (8001ec4 <HAL_TIM_Base_MspInit+0x128>)
 8001e0a:	f043 0302 	orr.w	r3, r3, #2
 8001e0e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001e12:	4b2c      	ldr	r3, [pc, #176]	@ (8001ec4 <HAL_TIM_Base_MspInit+0x128>)
 8001e14:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001e18:	f003 0302 	and.w	r3, r3, #2
 8001e1c:	60fb      	str	r3, [r7, #12]
 8001e1e:	68fb      	ldr	r3, [r7, #12]
}
 8001e20:	e04a      	b.n	8001eb8 <HAL_TIM_Base_MspInit+0x11c>
  else if(htim_base->Instance==TIM4)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a29      	ldr	r2, [pc, #164]	@ (8001ecc <HAL_TIM_Base_MspInit+0x130>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d145      	bne.n	8001eb8 <HAL_TIM_Base_MspInit+0x11c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001e2c:	4b25      	ldr	r3, [pc, #148]	@ (8001ec4 <HAL_TIM_Base_MspInit+0x128>)
 8001e2e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001e32:	4a24      	ldr	r2, [pc, #144]	@ (8001ec4 <HAL_TIM_Base_MspInit+0x128>)
 8001e34:	f043 0304 	orr.w	r3, r3, #4
 8001e38:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001e3c:	4b21      	ldr	r3, [pc, #132]	@ (8001ec4 <HAL_TIM_Base_MspInit+0x128>)
 8001e3e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001e42:	f003 0304 	and.w	r3, r3, #4
 8001e46:	60bb      	str	r3, [r7, #8]
 8001e48:	68bb      	ldr	r3, [r7, #8]
    hdma_tim4_ch1.Instance = DMA1_Stream2;
 8001e4a:	4b21      	ldr	r3, [pc, #132]	@ (8001ed0 <HAL_TIM_Base_MspInit+0x134>)
 8001e4c:	4a21      	ldr	r2, [pc, #132]	@ (8001ed4 <HAL_TIM_Base_MspInit+0x138>)
 8001e4e:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch1.Init.Request = DMA_REQUEST_TIM4_CH1;
 8001e50:	4b1f      	ldr	r3, [pc, #124]	@ (8001ed0 <HAL_TIM_Base_MspInit+0x134>)
 8001e52:	221d      	movs	r2, #29
 8001e54:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001e56:	4b1e      	ldr	r3, [pc, #120]	@ (8001ed0 <HAL_TIM_Base_MspInit+0x134>)
 8001e58:	2240      	movs	r2, #64	@ 0x40
 8001e5a:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e5c:	4b1c      	ldr	r3, [pc, #112]	@ (8001ed0 <HAL_TIM_Base_MspInit+0x134>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001e62:	4b1b      	ldr	r3, [pc, #108]	@ (8001ed0 <HAL_TIM_Base_MspInit+0x134>)
 8001e64:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001e68:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001e6a:	4b19      	ldr	r3, [pc, #100]	@ (8001ed0 <HAL_TIM_Base_MspInit+0x134>)
 8001e6c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001e70:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001e72:	4b17      	ldr	r3, [pc, #92]	@ (8001ed0 <HAL_TIM_Base_MspInit+0x134>)
 8001e74:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001e78:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch1.Init.Mode = DMA_NORMAL;
 8001e7a:	4b15      	ldr	r3, [pc, #84]	@ (8001ed0 <HAL_TIM_Base_MspInit+0x134>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001e80:	4b13      	ldr	r3, [pc, #76]	@ (8001ed0 <HAL_TIM_Base_MspInit+0x134>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e86:	4b12      	ldr	r3, [pc, #72]	@ (8001ed0 <HAL_TIM_Base_MspInit+0x134>)
 8001e88:	2200      	movs	r2, #0
 8001e8a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch1) != HAL_OK)
 8001e8c:	4810      	ldr	r0, [pc, #64]	@ (8001ed0 <HAL_TIM_Base_MspInit+0x134>)
 8001e8e:	f002 fabb 	bl	8004408 <HAL_DMA_Init>
 8001e92:	4603      	mov	r3, r0
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d001      	beq.n	8001e9c <HAL_TIM_Base_MspInit+0x100>
      Error_Handler();
 8001e98:	f7ff fcb2 	bl	8001800 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim4_ch1);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	4a0c      	ldr	r2, [pc, #48]	@ (8001ed0 <HAL_TIM_Base_MspInit+0x134>)
 8001ea0:	625a      	str	r2, [r3, #36]	@ 0x24
 8001ea2:	4a0b      	ldr	r2, [pc, #44]	@ (8001ed0 <HAL_TIM_Base_MspInit+0x134>)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	2100      	movs	r1, #0
 8001eac:	201e      	movs	r0, #30
 8001eae:	f001 ff32 	bl	8003d16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001eb2:	201e      	movs	r0, #30
 8001eb4:	f001 ff49 	bl	8003d4a <HAL_NVIC_EnableIRQ>
}
 8001eb8:	bf00      	nop
 8001eba:	3718      	adds	r7, #24
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}
 8001ec0:	40010000 	.word	0x40010000
 8001ec4:	58024400 	.word	0x58024400
 8001ec8:	40000400 	.word	0x40000400
 8001ecc:	40000800 	.word	0x40000800
 8001ed0:	240008c8 	.word	0x240008c8
 8001ed4:	40020040 	.word	0x40020040

08001ed8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b08a      	sub	sp, #40	@ 0x28
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ee0:	f107 0314 	add.w	r3, r7, #20
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	601a      	str	r2, [r3, #0]
 8001ee8:	605a      	str	r2, [r3, #4]
 8001eea:	609a      	str	r2, [r3, #8]
 8001eec:	60da      	str	r2, [r3, #12]
 8001eee:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a26      	ldr	r2, [pc, #152]	@ (8001f90 <HAL_TIM_MspPostInit+0xb8>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d120      	bne.n	8001f3c <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001efa:	4b26      	ldr	r3, [pc, #152]	@ (8001f94 <HAL_TIM_MspPostInit+0xbc>)
 8001efc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f00:	4a24      	ldr	r2, [pc, #144]	@ (8001f94 <HAL_TIM_MspPostInit+0xbc>)
 8001f02:	f043 0304 	orr.w	r3, r3, #4
 8001f06:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001f0a:	4b22      	ldr	r3, [pc, #136]	@ (8001f94 <HAL_TIM_MspPostInit+0xbc>)
 8001f0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f10:	f003 0304 	and.w	r3, r3, #4
 8001f14:	613b      	str	r3, [r7, #16]
 8001f16:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = LED_STROBE_1_Pin|LED_STROBE_2_Pin|LED_STROBE_3_Pin;
 8001f18:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 8001f1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f1e:	2302      	movs	r3, #2
 8001f20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f22:	2300      	movs	r3, #0
 8001f24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f26:	2300      	movs	r3, #0
 8001f28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001f2a:	2302      	movs	r3, #2
 8001f2c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f2e:	f107 0314 	add.w	r3, r7, #20
 8001f32:	4619      	mov	r1, r3
 8001f34:	4818      	ldr	r0, [pc, #96]	@ (8001f98 <HAL_TIM_MspPostInit+0xc0>)
 8001f36:	f004 fb3b 	bl	80065b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001f3a:	e024      	b.n	8001f86 <HAL_TIM_MspPostInit+0xae>
  else if(htim->Instance==TIM4)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a16      	ldr	r2, [pc, #88]	@ (8001f9c <HAL_TIM_MspPostInit+0xc4>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d11f      	bne.n	8001f86 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f46:	4b13      	ldr	r3, [pc, #76]	@ (8001f94 <HAL_TIM_MspPostInit+0xbc>)
 8001f48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f4c:	4a11      	ldr	r2, [pc, #68]	@ (8001f94 <HAL_TIM_MspPostInit+0xbc>)
 8001f4e:	f043 0308 	orr.w	r3, r3, #8
 8001f52:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001f56:	4b0f      	ldr	r3, [pc, #60]	@ (8001f94 <HAL_TIM_MspPostInit+0xbc>)
 8001f58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f5c:	f003 0308 	and.w	r3, r3, #8
 8001f60:	60fb      	str	r3, [r7, #12]
 8001f62:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001f64:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f6a:	2302      	movs	r3, #2
 8001f6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f72:	2300      	movs	r3, #0
 8001f74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001f76:	2302      	movs	r3, #2
 8001f78:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f7a:	f107 0314 	add.w	r3, r7, #20
 8001f7e:	4619      	mov	r1, r3
 8001f80:	4807      	ldr	r0, [pc, #28]	@ (8001fa0 <HAL_TIM_MspPostInit+0xc8>)
 8001f82:	f004 fb15 	bl	80065b0 <HAL_GPIO_Init>
}
 8001f86:	bf00      	nop
 8001f88:	3728      	adds	r7, #40	@ 0x28
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	bf00      	nop
 8001f90:	40000400 	.word	0x40000400
 8001f94:	58024400 	.word	0x58024400
 8001f98:	58020800 	.word	0x58020800
 8001f9c:	40000800 	.word	0x40000800
 8001fa0:	58020c00 	.word	0x58020c00

08001fa4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b0ba      	sub	sp, #232	@ 0xe8
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fac:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	601a      	str	r2, [r3, #0]
 8001fb4:	605a      	str	r2, [r3, #4]
 8001fb6:	609a      	str	r2, [r3, #8]
 8001fb8:	60da      	str	r2, [r3, #12]
 8001fba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001fbc:	f107 0318 	add.w	r3, r7, #24
 8001fc0:	22b8      	movs	r2, #184	@ 0xb8
 8001fc2:	2100      	movs	r1, #0
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f00b fa3d 	bl	800d444 <memset>
  if(huart->Instance==UART7)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4a4d      	ldr	r2, [pc, #308]	@ (8002104 <HAL_UART_MspInit+0x160>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d147      	bne.n	8002064 <HAL_UART_MspInit+0xc0>

  /* USER CODE END UART7_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8001fd4:	f04f 0202 	mov.w	r2, #2
 8001fd8:	f04f 0300 	mov.w	r3, #0
 8001fdc:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001fe6:	f107 0318 	add.w	r3, r7, #24
 8001fea:	4618      	mov	r0, r3
 8001fec:	f005 fd76 	bl	8007adc <HAL_RCCEx_PeriphCLKConfig>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d001      	beq.n	8001ffa <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001ff6:	f7ff fc03 	bl	8001800 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8001ffa:	4b43      	ldr	r3, [pc, #268]	@ (8002108 <HAL_UART_MspInit+0x164>)
 8001ffc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002000:	4a41      	ldr	r2, [pc, #260]	@ (8002108 <HAL_UART_MspInit+0x164>)
 8002002:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002006:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800200a:	4b3f      	ldr	r3, [pc, #252]	@ (8002108 <HAL_UART_MspInit+0x164>)
 800200c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002010:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002014:	617b      	str	r3, [r7, #20]
 8002016:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002018:	4b3b      	ldr	r3, [pc, #236]	@ (8002108 <HAL_UART_MspInit+0x164>)
 800201a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800201e:	4a3a      	ldr	r2, [pc, #232]	@ (8002108 <HAL_UART_MspInit+0x164>)
 8002020:	f043 0310 	orr.w	r3, r3, #16
 8002024:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002028:	4b37      	ldr	r3, [pc, #220]	@ (8002108 <HAL_UART_MspInit+0x164>)
 800202a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800202e:	f003 0310 	and.w	r3, r3, #16
 8002032:	613b      	str	r3, [r7, #16]
 8002034:	693b      	ldr	r3, [r7, #16]
    PE7     ------> UART7_RX
    PE8     ------> UART7_TX
    PE9     ------> UART7_RTS
    PE10     ------> UART7_CTS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8002036:	f44f 63f0 	mov.w	r3, #1920	@ 0x780
 800203a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800203e:	2302      	movs	r3, #2
 8002040:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002044:	2300      	movs	r3, #0
 8002046:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800204a:	2300      	movs	r3, #0
 800204c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 8002050:	2307      	movs	r3, #7
 8002052:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002056:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800205a:	4619      	mov	r1, r3
 800205c:	482b      	ldr	r0, [pc, #172]	@ (800210c <HAL_UART_MspInit+0x168>)
 800205e:	f004 faa7 	bl	80065b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002062:	e04a      	b.n	80020fa <HAL_UART_MspInit+0x156>
  else if(huart->Instance==USART1)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a29      	ldr	r2, [pc, #164]	@ (8002110 <HAL_UART_MspInit+0x16c>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d145      	bne.n	80020fa <HAL_UART_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800206e:	f04f 0201 	mov.w	r2, #1
 8002072:	f04f 0300 	mov.w	r3, #0
 8002076:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 800207a:	2300      	movs	r3, #0
 800207c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002080:	f107 0318 	add.w	r3, r7, #24
 8002084:	4618      	mov	r0, r3
 8002086:	f005 fd29 	bl	8007adc <HAL_RCCEx_PeriphCLKConfig>
 800208a:	4603      	mov	r3, r0
 800208c:	2b00      	cmp	r3, #0
 800208e:	d001      	beq.n	8002094 <HAL_UART_MspInit+0xf0>
      Error_Handler();
 8002090:	f7ff fbb6 	bl	8001800 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002094:	4b1c      	ldr	r3, [pc, #112]	@ (8002108 <HAL_UART_MspInit+0x164>)
 8002096:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800209a:	4a1b      	ldr	r2, [pc, #108]	@ (8002108 <HAL_UART_MspInit+0x164>)
 800209c:	f043 0310 	orr.w	r3, r3, #16
 80020a0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80020a4:	4b18      	ldr	r3, [pc, #96]	@ (8002108 <HAL_UART_MspInit+0x164>)
 80020a6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80020aa:	f003 0310 	and.w	r3, r3, #16
 80020ae:	60fb      	str	r3, [r7, #12]
 80020b0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020b2:	4b15      	ldr	r3, [pc, #84]	@ (8002108 <HAL_UART_MspInit+0x164>)
 80020b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020b8:	4a13      	ldr	r2, [pc, #76]	@ (8002108 <HAL_UART_MspInit+0x164>)
 80020ba:	f043 0302 	orr.w	r3, r3, #2
 80020be:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80020c2:	4b11      	ldr	r3, [pc, #68]	@ (8002108 <HAL_UART_MspInit+0x164>)
 80020c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020c8:	f003 0302 	and.w	r3, r3, #2
 80020cc:	60bb      	str	r3, [r7, #8]
 80020ce:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 80020d0:	23c0      	movs	r3, #192	@ 0xc0
 80020d2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020d6:	2302      	movs	r3, #2
 80020d8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020dc:	2300      	movs	r3, #0
 80020de:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020e2:	2300      	movs	r3, #0
 80020e4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80020e8:	2307      	movs	r3, #7
 80020ea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020ee:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80020f2:	4619      	mov	r1, r3
 80020f4:	4807      	ldr	r0, [pc, #28]	@ (8002114 <HAL_UART_MspInit+0x170>)
 80020f6:	f004 fa5b 	bl	80065b0 <HAL_GPIO_Init>
}
 80020fa:	bf00      	nop
 80020fc:	37e8      	adds	r7, #232	@ 0xe8
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	40007800 	.word	0x40007800
 8002108:	58024400 	.word	0x58024400
 800210c:	58021000 	.word	0x58021000
 8002110:	40011000 	.word	0x40011000
 8002114:	58020400 	.word	0x58020400

08002118 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002118:	b480      	push	{r7}
 800211a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800211c:	bf00      	nop
 800211e:	e7fd      	b.n	800211c <NMI_Handler+0x4>

08002120 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002120:	b480      	push	{r7}
 8002122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002124:	bf00      	nop
 8002126:	e7fd      	b.n	8002124 <HardFault_Handler+0x4>

08002128 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002128:	b480      	push	{r7}
 800212a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800212c:	bf00      	nop
 800212e:	e7fd      	b.n	800212c <MemManage_Handler+0x4>

08002130 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002130:	b480      	push	{r7}
 8002132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002134:	bf00      	nop
 8002136:	e7fd      	b.n	8002134 <BusFault_Handler+0x4>

08002138 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002138:	b480      	push	{r7}
 800213a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800213c:	bf00      	nop
 800213e:	e7fd      	b.n	800213c <UsageFault_Handler+0x4>

08002140 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002140:	b480      	push	{r7}
 8002142:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002144:	bf00      	nop
 8002146:	46bd      	mov	sp, r7
 8002148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214c:	4770      	bx	lr

0800214e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800214e:	b480      	push	{r7}
 8002150:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002152:	bf00      	nop
 8002154:	46bd      	mov	sp, r7
 8002156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215a:	4770      	bx	lr

0800215c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800215c:	b480      	push	{r7}
 800215e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002160:	bf00      	nop
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr

0800216a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800216a:	b580      	push	{r7, lr}
 800216c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800216e:	f000 f93f 	bl	80023f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002172:	bf00      	nop
 8002174:	bd80      	pop	{r7, pc}
	...

08002178 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 800217c:	4802      	ldr	r0, [pc, #8]	@ (8002188 <DMA1_Stream0_IRQHandler+0x10>)
 800217e:	f002 ff05 	bl	8004f8c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002182:	bf00      	nop
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	240004bc 	.word	0x240004bc

0800218c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch2);
 8002190:	4802      	ldr	r0, [pc, #8]	@ (800219c <DMA1_Stream1_IRQHandler+0x10>)
 8002192:	f002 fefb 	bl	8004f8c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002196:	bf00      	nop
 8002198:	bd80      	pop	{r7, pc}
 800219a:	bf00      	nop
 800219c:	24000534 	.word	0x24000534

080021a0 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch1);
 80021a4:	4802      	ldr	r0, [pc, #8]	@ (80021b0 <DMA1_Stream2_IRQHandler+0x10>)
 80021a6:	f002 fef1 	bl	8004f8c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80021aa:	bf00      	nop
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	240008c8 	.word	0x240008c8

080021b4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80021b8:	4802      	ldr	r0, [pc, #8]	@ (80021c4 <TIM4_IRQHandler+0x10>)
 80021ba:	f008 fe3b 	bl	800ae34 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80021be:	bf00      	nop
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	2400087c 	.word	0x2400087c

080021c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80021c8:	b480      	push	{r7}
 80021ca:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80021cc:	4b32      	ldr	r3, [pc, #200]	@ (8002298 <SystemInit+0xd0>)
 80021ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021d2:	4a31      	ldr	r2, [pc, #196]	@ (8002298 <SystemInit+0xd0>)
 80021d4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80021d8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80021dc:	4b2f      	ldr	r3, [pc, #188]	@ (800229c <SystemInit+0xd4>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f003 030f 	and.w	r3, r3, #15
 80021e4:	2b06      	cmp	r3, #6
 80021e6:	d807      	bhi.n	80021f8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80021e8:	4b2c      	ldr	r3, [pc, #176]	@ (800229c <SystemInit+0xd4>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f023 030f 	bic.w	r3, r3, #15
 80021f0:	4a2a      	ldr	r2, [pc, #168]	@ (800229c <SystemInit+0xd4>)
 80021f2:	f043 0307 	orr.w	r3, r3, #7
 80021f6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80021f8:	4b29      	ldr	r3, [pc, #164]	@ (80022a0 <SystemInit+0xd8>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a28      	ldr	r2, [pc, #160]	@ (80022a0 <SystemInit+0xd8>)
 80021fe:	f043 0301 	orr.w	r3, r3, #1
 8002202:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002204:	4b26      	ldr	r3, [pc, #152]	@ (80022a0 <SystemInit+0xd8>)
 8002206:	2200      	movs	r2, #0
 8002208:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800220a:	4b25      	ldr	r3, [pc, #148]	@ (80022a0 <SystemInit+0xd8>)
 800220c:	681a      	ldr	r2, [r3, #0]
 800220e:	4924      	ldr	r1, [pc, #144]	@ (80022a0 <SystemInit+0xd8>)
 8002210:	4b24      	ldr	r3, [pc, #144]	@ (80022a4 <SystemInit+0xdc>)
 8002212:	4013      	ands	r3, r2
 8002214:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002216:	4b21      	ldr	r3, [pc, #132]	@ (800229c <SystemInit+0xd4>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f003 0308 	and.w	r3, r3, #8
 800221e:	2b00      	cmp	r3, #0
 8002220:	d007      	beq.n	8002232 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002222:	4b1e      	ldr	r3, [pc, #120]	@ (800229c <SystemInit+0xd4>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f023 030f 	bic.w	r3, r3, #15
 800222a:	4a1c      	ldr	r2, [pc, #112]	@ (800229c <SystemInit+0xd4>)
 800222c:	f043 0307 	orr.w	r3, r3, #7
 8002230:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002232:	4b1b      	ldr	r3, [pc, #108]	@ (80022a0 <SystemInit+0xd8>)
 8002234:	2200      	movs	r2, #0
 8002236:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002238:	4b19      	ldr	r3, [pc, #100]	@ (80022a0 <SystemInit+0xd8>)
 800223a:	2200      	movs	r2, #0
 800223c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800223e:	4b18      	ldr	r3, [pc, #96]	@ (80022a0 <SystemInit+0xd8>)
 8002240:	2200      	movs	r2, #0
 8002242:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002244:	4b16      	ldr	r3, [pc, #88]	@ (80022a0 <SystemInit+0xd8>)
 8002246:	4a18      	ldr	r2, [pc, #96]	@ (80022a8 <SystemInit+0xe0>)
 8002248:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800224a:	4b15      	ldr	r3, [pc, #84]	@ (80022a0 <SystemInit+0xd8>)
 800224c:	4a17      	ldr	r2, [pc, #92]	@ (80022ac <SystemInit+0xe4>)
 800224e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002250:	4b13      	ldr	r3, [pc, #76]	@ (80022a0 <SystemInit+0xd8>)
 8002252:	4a17      	ldr	r2, [pc, #92]	@ (80022b0 <SystemInit+0xe8>)
 8002254:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002256:	4b12      	ldr	r3, [pc, #72]	@ (80022a0 <SystemInit+0xd8>)
 8002258:	2200      	movs	r2, #0
 800225a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800225c:	4b10      	ldr	r3, [pc, #64]	@ (80022a0 <SystemInit+0xd8>)
 800225e:	4a14      	ldr	r2, [pc, #80]	@ (80022b0 <SystemInit+0xe8>)
 8002260:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002262:	4b0f      	ldr	r3, [pc, #60]	@ (80022a0 <SystemInit+0xd8>)
 8002264:	2200      	movs	r2, #0
 8002266:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002268:	4b0d      	ldr	r3, [pc, #52]	@ (80022a0 <SystemInit+0xd8>)
 800226a:	4a11      	ldr	r2, [pc, #68]	@ (80022b0 <SystemInit+0xe8>)
 800226c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800226e:	4b0c      	ldr	r3, [pc, #48]	@ (80022a0 <SystemInit+0xd8>)
 8002270:	2200      	movs	r2, #0
 8002272:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002274:	4b0a      	ldr	r3, [pc, #40]	@ (80022a0 <SystemInit+0xd8>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a09      	ldr	r2, [pc, #36]	@ (80022a0 <SystemInit+0xd8>)
 800227a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800227e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002280:	4b07      	ldr	r3, [pc, #28]	@ (80022a0 <SystemInit+0xd8>)
 8002282:	2200      	movs	r2, #0
 8002284:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002286:	4b0b      	ldr	r3, [pc, #44]	@ (80022b4 <SystemInit+0xec>)
 8002288:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800228c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800228e:	bf00      	nop
 8002290:	46bd      	mov	sp, r7
 8002292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002296:	4770      	bx	lr
 8002298:	e000ed00 	.word	0xe000ed00
 800229c:	52002000 	.word	0x52002000
 80022a0:	58024400 	.word	0x58024400
 80022a4:	eaf6ed7f 	.word	0xeaf6ed7f
 80022a8:	02020200 	.word	0x02020200
 80022ac:	01ff0000 	.word	0x01ff0000
 80022b0:	01010280 	.word	0x01010280
 80022b4:	52004000 	.word	0x52004000

080022b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80022b8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80022f0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80022bc:	f7ff ff84 	bl	80021c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80022c0:	480c      	ldr	r0, [pc, #48]	@ (80022f4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80022c2:	490d      	ldr	r1, [pc, #52]	@ (80022f8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80022c4:	4a0d      	ldr	r2, [pc, #52]	@ (80022fc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80022c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022c8:	e002      	b.n	80022d0 <LoopCopyDataInit>

080022ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022ce:	3304      	adds	r3, #4

080022d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022d4:	d3f9      	bcc.n	80022ca <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022d6:	4a0a      	ldr	r2, [pc, #40]	@ (8002300 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80022d8:	4c0a      	ldr	r4, [pc, #40]	@ (8002304 <LoopFillZerobss+0x22>)
  movs r3, #0
 80022da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022dc:	e001      	b.n	80022e2 <LoopFillZerobss>

080022de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022e0:	3204      	adds	r2, #4

080022e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022e4:	d3fb      	bcc.n	80022de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80022e6:	f00b f8b5 	bl	800d454 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80022ea:	f7fe fa99 	bl	8000820 <main>
  bx  lr
 80022ee:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80022f0:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80022f4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80022f8:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 80022fc:	0800e278 	.word	0x0800e278
  ldr r2, =_sbss
 8002300:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8002304:	24000a70 	.word	0x24000a70

08002308 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002308:	e7fe      	b.n	8002308 <ADC3_IRQHandler>
	...

0800230c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b082      	sub	sp, #8
 8002310:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002312:	2003      	movs	r0, #3
 8002314:	f001 fcf4 	bl	8003d00 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002318:	f005 fa0a 	bl	8007730 <HAL_RCC_GetSysClockFreq>
 800231c:	4602      	mov	r2, r0
 800231e:	4b15      	ldr	r3, [pc, #84]	@ (8002374 <HAL_Init+0x68>)
 8002320:	699b      	ldr	r3, [r3, #24]
 8002322:	0a1b      	lsrs	r3, r3, #8
 8002324:	f003 030f 	and.w	r3, r3, #15
 8002328:	4913      	ldr	r1, [pc, #76]	@ (8002378 <HAL_Init+0x6c>)
 800232a:	5ccb      	ldrb	r3, [r1, r3]
 800232c:	f003 031f 	and.w	r3, r3, #31
 8002330:	fa22 f303 	lsr.w	r3, r2, r3
 8002334:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002336:	4b0f      	ldr	r3, [pc, #60]	@ (8002374 <HAL_Init+0x68>)
 8002338:	699b      	ldr	r3, [r3, #24]
 800233a:	f003 030f 	and.w	r3, r3, #15
 800233e:	4a0e      	ldr	r2, [pc, #56]	@ (8002378 <HAL_Init+0x6c>)
 8002340:	5cd3      	ldrb	r3, [r2, r3]
 8002342:	f003 031f 	and.w	r3, r3, #31
 8002346:	687a      	ldr	r2, [r7, #4]
 8002348:	fa22 f303 	lsr.w	r3, r2, r3
 800234c:	4a0b      	ldr	r2, [pc, #44]	@ (800237c <HAL_Init+0x70>)
 800234e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002350:	4a0b      	ldr	r2, [pc, #44]	@ (8002380 <HAL_Init+0x74>)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002356:	200f      	movs	r0, #15
 8002358:	f000 f814 	bl	8002384 <HAL_InitTick>
 800235c:	4603      	mov	r3, r0
 800235e:	2b00      	cmp	r3, #0
 8002360:	d001      	beq.n	8002366 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	e002      	b.n	800236c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002366:	f7ff fa51 	bl	800180c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800236a:	2300      	movs	r3, #0
}
 800236c:	4618      	mov	r0, r3
 800236e:	3708      	adds	r7, #8
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}
 8002374:	58024400 	.word	0x58024400
 8002378:	0800e050 	.word	0x0800e050
 800237c:	24000004 	.word	0x24000004
 8002380:	24000000 	.word	0x24000000

08002384 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b082      	sub	sp, #8
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800238c:	4b15      	ldr	r3, [pc, #84]	@ (80023e4 <HAL_InitTick+0x60>)
 800238e:	781b      	ldrb	r3, [r3, #0]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d101      	bne.n	8002398 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002394:	2301      	movs	r3, #1
 8002396:	e021      	b.n	80023dc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002398:	4b13      	ldr	r3, [pc, #76]	@ (80023e8 <HAL_InitTick+0x64>)
 800239a:	681a      	ldr	r2, [r3, #0]
 800239c:	4b11      	ldr	r3, [pc, #68]	@ (80023e4 <HAL_InitTick+0x60>)
 800239e:	781b      	ldrb	r3, [r3, #0]
 80023a0:	4619      	mov	r1, r3
 80023a2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80023a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80023aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80023ae:	4618      	mov	r0, r3
 80023b0:	f001 fcd9 	bl	8003d66 <HAL_SYSTICK_Config>
 80023b4:	4603      	mov	r3, r0
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d001      	beq.n	80023be <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	e00e      	b.n	80023dc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2b0f      	cmp	r3, #15
 80023c2:	d80a      	bhi.n	80023da <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80023c4:	2200      	movs	r2, #0
 80023c6:	6879      	ldr	r1, [r7, #4]
 80023c8:	f04f 30ff 	mov.w	r0, #4294967295
 80023cc:	f001 fca3 	bl	8003d16 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80023d0:	4a06      	ldr	r2, [pc, #24]	@ (80023ec <HAL_InitTick+0x68>)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80023d6:	2300      	movs	r3, #0
 80023d8:	e000      	b.n	80023dc <HAL_InitTick+0x58>
    return HAL_ERROR;
 80023da:	2301      	movs	r3, #1
}
 80023dc:	4618      	mov	r0, r3
 80023de:	3708      	adds	r7, #8
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}
 80023e4:	2400000c 	.word	0x2400000c
 80023e8:	24000000 	.word	0x24000000
 80023ec:	24000008 	.word	0x24000008

080023f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023f0:	b480      	push	{r7}
 80023f2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80023f4:	4b06      	ldr	r3, [pc, #24]	@ (8002410 <HAL_IncTick+0x20>)
 80023f6:	781b      	ldrb	r3, [r3, #0]
 80023f8:	461a      	mov	r2, r3
 80023fa:	4b06      	ldr	r3, [pc, #24]	@ (8002414 <HAL_IncTick+0x24>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4413      	add	r3, r2
 8002400:	4a04      	ldr	r2, [pc, #16]	@ (8002414 <HAL_IncTick+0x24>)
 8002402:	6013      	str	r3, [r2, #0]
}
 8002404:	bf00      	nop
 8002406:	46bd      	mov	sp, r7
 8002408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240c:	4770      	bx	lr
 800240e:	bf00      	nop
 8002410:	2400000c 	.word	0x2400000c
 8002414:	24000a6c 	.word	0x24000a6c

08002418 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002418:	b480      	push	{r7}
 800241a:	af00      	add	r7, sp, #0
  return uwTick;
 800241c:	4b03      	ldr	r3, [pc, #12]	@ (800242c <HAL_GetTick+0x14>)
 800241e:	681b      	ldr	r3, [r3, #0]
}
 8002420:	4618      	mov	r0, r3
 8002422:	46bd      	mov	sp, r7
 8002424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002428:	4770      	bx	lr
 800242a:	bf00      	nop
 800242c:	24000a6c 	.word	0x24000a6c

08002430 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b084      	sub	sp, #16
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002438:	f7ff ffee 	bl	8002418 <HAL_GetTick>
 800243c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002448:	d005      	beq.n	8002456 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800244a:	4b0a      	ldr	r3, [pc, #40]	@ (8002474 <HAL_Delay+0x44>)
 800244c:	781b      	ldrb	r3, [r3, #0]
 800244e:	461a      	mov	r2, r3
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	4413      	add	r3, r2
 8002454:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002456:	bf00      	nop
 8002458:	f7ff ffde 	bl	8002418 <HAL_GetTick>
 800245c:	4602      	mov	r2, r0
 800245e:	68bb      	ldr	r3, [r7, #8]
 8002460:	1ad3      	subs	r3, r2, r3
 8002462:	68fa      	ldr	r2, [r7, #12]
 8002464:	429a      	cmp	r2, r3
 8002466:	d8f7      	bhi.n	8002458 <HAL_Delay+0x28>
  {
  }
}
 8002468:	bf00      	nop
 800246a:	bf00      	nop
 800246c:	3710      	adds	r7, #16
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}
 8002472:	bf00      	nop
 8002474:	2400000c 	.word	0x2400000c

08002478 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002478:	b480      	push	{r7}
 800247a:	b083      	sub	sp, #12
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
 8002480:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	689b      	ldr	r3, [r3, #8]
 8002486:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	431a      	orrs	r2, r3
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	609a      	str	r2, [r3, #8]
}
 8002492:	bf00      	nop
 8002494:	370c      	adds	r7, #12
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr

0800249e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800249e:	b480      	push	{r7}
 80024a0:	b083      	sub	sp, #12
 80024a2:	af00      	add	r7, sp, #0
 80024a4:	6078      	str	r0, [r7, #4]
 80024a6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	689b      	ldr	r3, [r3, #8]
 80024ac:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	431a      	orrs	r2, r3
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	609a      	str	r2, [r3, #8]
}
 80024b8:	bf00      	nop
 80024ba:	370c      	adds	r7, #12
 80024bc:	46bd      	mov	sp, r7
 80024be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c2:	4770      	bx	lr

080024c4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b083      	sub	sp, #12
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	689b      	ldr	r3, [r3, #8]
 80024d0:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	370c      	adds	r7, #12
 80024d8:	46bd      	mov	sp, r7
 80024da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024de:	4770      	bx	lr

080024e0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b087      	sub	sp, #28
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	60f8      	str	r0, [r7, #12]
 80024e8:	60b9      	str	r1, [r7, #8]
 80024ea:	607a      	str	r2, [r7, #4]
 80024ec:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	3360      	adds	r3, #96	@ 0x60
 80024f2:	461a      	mov	r2, r3
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	009b      	lsls	r3, r3, #2
 80024f8:	4413      	add	r3, r2
 80024fa:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	4a10      	ldr	r2, [pc, #64]	@ (8002540 <LL_ADC_SetOffset+0x60>)
 8002500:	4293      	cmp	r3, r2
 8002502:	d10b      	bne.n	800251c <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	4313      	orrs	r3, r2
 8002512:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 800251a:	e00b      	b.n	8002534 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	430b      	orrs	r3, r1
 800252e:	431a      	orrs	r2, r3
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	601a      	str	r2, [r3, #0]
}
 8002534:	bf00      	nop
 8002536:	371c      	adds	r7, #28
 8002538:	46bd      	mov	sp, r7
 800253a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253e:	4770      	bx	lr
 8002540:	58026000 	.word	0x58026000

08002544 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002544:	b480      	push	{r7}
 8002546:	b085      	sub	sp, #20
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
 800254c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	3360      	adds	r3, #96	@ 0x60
 8002552:	461a      	mov	r2, r3
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	009b      	lsls	r3, r3, #2
 8002558:	4413      	add	r3, r2
 800255a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002564:	4618      	mov	r0, r3
 8002566:	3714      	adds	r7, #20
 8002568:	46bd      	mov	sp, r7
 800256a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256e:	4770      	bx	lr

08002570 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002570:	b480      	push	{r7}
 8002572:	b085      	sub	sp, #20
 8002574:	af00      	add	r7, sp, #0
 8002576:	60f8      	str	r0, [r7, #12]
 8002578:	60b9      	str	r1, [r7, #8]
 800257a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	691b      	ldr	r3, [r3, #16]
 8002580:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	f003 031f 	and.w	r3, r3, #31
 800258a:	6879      	ldr	r1, [r7, #4]
 800258c:	fa01 f303 	lsl.w	r3, r1, r3
 8002590:	431a      	orrs	r2, r3
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	611a      	str	r2, [r3, #16]
}
 8002596:	bf00      	nop
 8002598:	3714      	adds	r7, #20
 800259a:	46bd      	mov	sp, r7
 800259c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a0:	4770      	bx	lr
	...

080025a4 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b087      	sub	sp, #28
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	60f8      	str	r0, [r7, #12]
 80025ac:	60b9      	str	r1, [r7, #8]
 80025ae:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	4a0c      	ldr	r2, [pc, #48]	@ (80025e4 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d00e      	beq.n	80025d6 <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	3360      	adds	r3, #96	@ 0x60
 80025bc:	461a      	mov	r2, r3
 80025be:	68bb      	ldr	r3, [r7, #8]
 80025c0:	009b      	lsls	r3, r3, #2
 80025c2:	4413      	add	r3, r2
 80025c4:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	431a      	orrs	r2, r3
 80025d2:	697b      	ldr	r3, [r7, #20]
 80025d4:	601a      	str	r2, [r3, #0]
  }
}
 80025d6:	bf00      	nop
 80025d8:	371c      	adds	r7, #28
 80025da:	46bd      	mov	sp, r7
 80025dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e0:	4770      	bx	lr
 80025e2:	bf00      	nop
 80025e4:	58026000 	.word	0x58026000

080025e8 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b087      	sub	sp, #28
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	60f8      	str	r0, [r7, #12]
 80025f0:	60b9      	str	r1, [r7, #8]
 80025f2:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	4a0c      	ldr	r2, [pc, #48]	@ (8002628 <LL_ADC_SetOffsetSaturation+0x40>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d10e      	bne.n	800261a <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	3360      	adds	r3, #96	@ 0x60
 8002600:	461a      	mov	r2, r3
 8002602:	68bb      	ldr	r3, [r7, #8]
 8002604:	009b      	lsls	r3, r3, #2
 8002606:	4413      	add	r3, r2
 8002608:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	431a      	orrs	r2, r3
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 800261a:	bf00      	nop
 800261c:	371c      	adds	r7, #28
 800261e:	46bd      	mov	sp, r7
 8002620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002624:	4770      	bx	lr
 8002626:	bf00      	nop
 8002628:	58026000 	.word	0x58026000

0800262c <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800262c:	b480      	push	{r7}
 800262e:	b087      	sub	sp, #28
 8002630:	af00      	add	r7, sp, #0
 8002632:	60f8      	str	r0, [r7, #12]
 8002634:	60b9      	str	r1, [r7, #8]
 8002636:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	4a0c      	ldr	r2, [pc, #48]	@ (800266c <LL_ADC_SetOffsetSign+0x40>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d10e      	bne.n	800265e <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	3360      	adds	r3, #96	@ 0x60
 8002644:	461a      	mov	r2, r3
 8002646:	68bb      	ldr	r3, [r7, #8]
 8002648:	009b      	lsls	r3, r3, #2
 800264a:	4413      	add	r3, r2
 800264c:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 800264e:	697b      	ldr	r3, [r7, #20]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	431a      	orrs	r2, r3
 800265a:	697b      	ldr	r3, [r7, #20]
 800265c:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 800265e:	bf00      	nop
 8002660:	371c      	adds	r7, #28
 8002662:	46bd      	mov	sp, r7
 8002664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002668:	4770      	bx	lr
 800266a:	bf00      	nop
 800266c:	58026000 	.word	0x58026000

08002670 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002670:	b480      	push	{r7}
 8002672:	b087      	sub	sp, #28
 8002674:	af00      	add	r7, sp, #0
 8002676:	60f8      	str	r0, [r7, #12]
 8002678:	60b9      	str	r1, [r7, #8]
 800267a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	3360      	adds	r3, #96	@ 0x60
 8002680:	461a      	mov	r2, r3
 8002682:	68bb      	ldr	r3, [r7, #8]
 8002684:	009b      	lsls	r3, r3, #2
 8002686:	4413      	add	r3, r2
 8002688:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	4a0c      	ldr	r2, [pc, #48]	@ (80026c0 <LL_ADC_SetOffsetState+0x50>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d108      	bne.n	80026a4 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 8002692:	697b      	ldr	r3, [r7, #20]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	431a      	orrs	r2, r3
 800269e:	697b      	ldr	r3, [r7, #20]
 80026a0:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 80026a2:	e007      	b.n	80026b4 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	431a      	orrs	r2, r3
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	601a      	str	r2, [r3, #0]
}
 80026b4:	bf00      	nop
 80026b6:	371c      	adds	r7, #28
 80026b8:	46bd      	mov	sp, r7
 80026ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026be:	4770      	bx	lr
 80026c0:	58026000 	.word	0x58026000

080026c4 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b087      	sub	sp, #28
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	60f8      	str	r0, [r7, #12]
 80026cc:	60b9      	str	r1, [r7, #8]
 80026ce:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	3330      	adds	r3, #48	@ 0x30
 80026d4:	461a      	mov	r2, r3
 80026d6:	68bb      	ldr	r3, [r7, #8]
 80026d8:	0a1b      	lsrs	r3, r3, #8
 80026da:	009b      	lsls	r3, r3, #2
 80026dc:	f003 030c 	and.w	r3, r3, #12
 80026e0:	4413      	add	r3, r2
 80026e2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	681a      	ldr	r2, [r3, #0]
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	f003 031f 	and.w	r3, r3, #31
 80026ee:	211f      	movs	r1, #31
 80026f0:	fa01 f303 	lsl.w	r3, r1, r3
 80026f4:	43db      	mvns	r3, r3
 80026f6:	401a      	ands	r2, r3
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	0e9b      	lsrs	r3, r3, #26
 80026fc:	f003 011f 	and.w	r1, r3, #31
 8002700:	68bb      	ldr	r3, [r7, #8]
 8002702:	f003 031f 	and.w	r3, r3, #31
 8002706:	fa01 f303 	lsl.w	r3, r1, r3
 800270a:	431a      	orrs	r2, r3
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002710:	bf00      	nop
 8002712:	371c      	adds	r7, #28
 8002714:	46bd      	mov	sp, r7
 8002716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271a:	4770      	bx	lr

0800271c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800271c:	b480      	push	{r7}
 800271e:	b087      	sub	sp, #28
 8002720:	af00      	add	r7, sp, #0
 8002722:	60f8      	str	r0, [r7, #12]
 8002724:	60b9      	str	r1, [r7, #8]
 8002726:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	3314      	adds	r3, #20
 800272c:	461a      	mov	r2, r3
 800272e:	68bb      	ldr	r3, [r7, #8]
 8002730:	0e5b      	lsrs	r3, r3, #25
 8002732:	009b      	lsls	r3, r3, #2
 8002734:	f003 0304 	and.w	r3, r3, #4
 8002738:	4413      	add	r3, r2
 800273a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	681a      	ldr	r2, [r3, #0]
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	0d1b      	lsrs	r3, r3, #20
 8002744:	f003 031f 	and.w	r3, r3, #31
 8002748:	2107      	movs	r1, #7
 800274a:	fa01 f303 	lsl.w	r3, r1, r3
 800274e:	43db      	mvns	r3, r3
 8002750:	401a      	ands	r2, r3
 8002752:	68bb      	ldr	r3, [r7, #8]
 8002754:	0d1b      	lsrs	r3, r3, #20
 8002756:	f003 031f 	and.w	r3, r3, #31
 800275a:	6879      	ldr	r1, [r7, #4]
 800275c:	fa01 f303 	lsl.w	r3, r1, r3
 8002760:	431a      	orrs	r2, r3
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002766:	bf00      	nop
 8002768:	371c      	adds	r7, #28
 800276a:	46bd      	mov	sp, r7
 800276c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002770:	4770      	bx	lr
	...

08002774 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002774:	b480      	push	{r7}
 8002776:	b085      	sub	sp, #20
 8002778:	af00      	add	r7, sp, #0
 800277a:	60f8      	str	r0, [r7, #12]
 800277c:	60b9      	str	r1, [r7, #8]
 800277e:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	4a1a      	ldr	r2, [pc, #104]	@ (80027ec <LL_ADC_SetChannelSingleDiff+0x78>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d115      	bne.n	80027b4 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002794:	43db      	mvns	r3, r3
 8002796:	401a      	ands	r2, r3
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	f003 0318 	and.w	r3, r3, #24
 800279e:	4914      	ldr	r1, [pc, #80]	@ (80027f0 <LL_ADC_SetChannelSingleDiff+0x7c>)
 80027a0:	40d9      	lsrs	r1, r3
 80027a2:	68bb      	ldr	r3, [r7, #8]
 80027a4:	400b      	ands	r3, r1
 80027a6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80027aa:	431a      	orrs	r2, r3
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 80027b2:	e014      	b.n	80027de <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 80027ba:	68bb      	ldr	r3, [r7, #8]
 80027bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80027c0:	43db      	mvns	r3, r3
 80027c2:	401a      	ands	r2, r3
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	f003 0318 	and.w	r3, r3, #24
 80027ca:	4909      	ldr	r1, [pc, #36]	@ (80027f0 <LL_ADC_SetChannelSingleDiff+0x7c>)
 80027cc:	40d9      	lsrs	r1, r3
 80027ce:	68bb      	ldr	r3, [r7, #8]
 80027d0:	400b      	ands	r3, r1
 80027d2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80027d6:	431a      	orrs	r2, r3
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
}
 80027de:	bf00      	nop
 80027e0:	3714      	adds	r7, #20
 80027e2:	46bd      	mov	sp, r7
 80027e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e8:	4770      	bx	lr
 80027ea:	bf00      	nop
 80027ec:	58026000 	.word	0x58026000
 80027f0:	000fffff 	.word	0x000fffff

080027f4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b083      	sub	sp, #12
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	689a      	ldr	r2, [r3, #8]
 8002800:	4b04      	ldr	r3, [pc, #16]	@ (8002814 <LL_ADC_DisableDeepPowerDown+0x20>)
 8002802:	4013      	ands	r3, r2
 8002804:	687a      	ldr	r2, [r7, #4]
 8002806:	6093      	str	r3, [r2, #8]
}
 8002808:	bf00      	nop
 800280a:	370c      	adds	r7, #12
 800280c:	46bd      	mov	sp, r7
 800280e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002812:	4770      	bx	lr
 8002814:	5fffffc0 	.word	0x5fffffc0

08002818 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002818:	b480      	push	{r7}
 800281a:	b083      	sub	sp, #12
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	689b      	ldr	r3, [r3, #8]
 8002824:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002828:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800282c:	d101      	bne.n	8002832 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800282e:	2301      	movs	r3, #1
 8002830:	e000      	b.n	8002834 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002832:	2300      	movs	r3, #0
}
 8002834:	4618      	mov	r0, r3
 8002836:	370c      	adds	r7, #12
 8002838:	46bd      	mov	sp, r7
 800283a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283e:	4770      	bx	lr

08002840 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002840:	b480      	push	{r7}
 8002842:	b083      	sub	sp, #12
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	689a      	ldr	r2, [r3, #8]
 800284c:	4b05      	ldr	r3, [pc, #20]	@ (8002864 <LL_ADC_EnableInternalRegulator+0x24>)
 800284e:	4013      	ands	r3, r2
 8002850:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002858:	bf00      	nop
 800285a:	370c      	adds	r7, #12
 800285c:	46bd      	mov	sp, r7
 800285e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002862:	4770      	bx	lr
 8002864:	6fffffc0 	.word	0x6fffffc0

08002868 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002868:	b480      	push	{r7}
 800286a:	b083      	sub	sp, #12
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002878:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800287c:	d101      	bne.n	8002882 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800287e:	2301      	movs	r3, #1
 8002880:	e000      	b.n	8002884 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002882:	2300      	movs	r3, #0
}
 8002884:	4618      	mov	r0, r3
 8002886:	370c      	adds	r7, #12
 8002888:	46bd      	mov	sp, r7
 800288a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288e:	4770      	bx	lr

08002890 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002890:	b480      	push	{r7}
 8002892:	b083      	sub	sp, #12
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	f003 0301 	and.w	r3, r3, #1
 80028a0:	2b01      	cmp	r3, #1
 80028a2:	d101      	bne.n	80028a8 <LL_ADC_IsEnabled+0x18>
 80028a4:	2301      	movs	r3, #1
 80028a6:	e000      	b.n	80028aa <LL_ADC_IsEnabled+0x1a>
 80028a8:	2300      	movs	r3, #0
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	370c      	adds	r7, #12
 80028ae:	46bd      	mov	sp, r7
 80028b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b4:	4770      	bx	lr

080028b6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80028b6:	b480      	push	{r7}
 80028b8:	b083      	sub	sp, #12
 80028ba:	af00      	add	r7, sp, #0
 80028bc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	689b      	ldr	r3, [r3, #8]
 80028c2:	f003 0304 	and.w	r3, r3, #4
 80028c6:	2b04      	cmp	r3, #4
 80028c8:	d101      	bne.n	80028ce <LL_ADC_REG_IsConversionOngoing+0x18>
 80028ca:	2301      	movs	r3, #1
 80028cc:	e000      	b.n	80028d0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80028ce:	2300      	movs	r3, #0
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	370c      	adds	r7, #12
 80028d4:	46bd      	mov	sp, r7
 80028d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028da:	4770      	bx	lr

080028dc <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80028dc:	b480      	push	{r7}
 80028de:	b083      	sub	sp, #12
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	689b      	ldr	r3, [r3, #8]
 80028e8:	f003 0308 	and.w	r3, r3, #8
 80028ec:	2b08      	cmp	r3, #8
 80028ee:	d101      	bne.n	80028f4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80028f0:	2301      	movs	r3, #1
 80028f2:	e000      	b.n	80028f6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80028f4:	2300      	movs	r3, #0
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	370c      	adds	r7, #12
 80028fa:	46bd      	mov	sp, r7
 80028fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002900:	4770      	bx	lr
	...

08002904 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002904:	b590      	push	{r4, r7, lr}
 8002906:	b089      	sub	sp, #36	@ 0x24
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800290c:	2300      	movs	r3, #0
 800290e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002910:	2300      	movs	r3, #0
 8002912:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d101      	bne.n	800291e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800291a:	2301      	movs	r3, #1
 800291c:	e1ee      	b.n	8002cfc <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	691b      	ldr	r3, [r3, #16]
 8002922:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002928:	2b00      	cmp	r3, #0
 800292a:	d109      	bne.n	8002940 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800292c:	6878      	ldr	r0, [r7, #4]
 800292e:	f7fe ff87 	bl	8001840 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2200      	movs	r2, #0
 8002936:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2200      	movs	r2, #0
 800293c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4618      	mov	r0, r3
 8002946:	f7ff ff67 	bl	8002818 <LL_ADC_IsDeepPowerDownEnabled>
 800294a:	4603      	mov	r3, r0
 800294c:	2b00      	cmp	r3, #0
 800294e:	d004      	beq.n	800295a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4618      	mov	r0, r3
 8002956:	f7ff ff4d 	bl	80027f4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4618      	mov	r0, r3
 8002960:	f7ff ff82 	bl	8002868 <LL_ADC_IsInternalRegulatorEnabled>
 8002964:	4603      	mov	r3, r0
 8002966:	2b00      	cmp	r3, #0
 8002968:	d114      	bne.n	8002994 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4618      	mov	r0, r3
 8002970:	f7ff ff66 	bl	8002840 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002974:	4b8e      	ldr	r3, [pc, #568]	@ (8002bb0 <HAL_ADC_Init+0x2ac>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	099b      	lsrs	r3, r3, #6
 800297a:	4a8e      	ldr	r2, [pc, #568]	@ (8002bb4 <HAL_ADC_Init+0x2b0>)
 800297c:	fba2 2303 	umull	r2, r3, r2, r3
 8002980:	099b      	lsrs	r3, r3, #6
 8002982:	3301      	adds	r3, #1
 8002984:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002986:	e002      	b.n	800298e <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	3b01      	subs	r3, #1
 800298c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800298e:	68bb      	ldr	r3, [r7, #8]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d1f9      	bne.n	8002988 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4618      	mov	r0, r3
 800299a:	f7ff ff65 	bl	8002868 <LL_ADC_IsInternalRegulatorEnabled>
 800299e:	4603      	mov	r3, r0
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d10d      	bne.n	80029c0 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029a8:	f043 0210 	orr.w	r2, r3, #16
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80029b4:	f043 0201 	orr.w	r2, r3, #1
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	665a      	str	r2, [r3, #100]	@ 0x64

    tmp_hal_status = HAL_ERROR;
 80029bc:	2301      	movs	r3, #1
 80029be:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4618      	mov	r0, r3
 80029c6:	f7ff ff76 	bl	80028b6 <LL_ADC_REG_IsConversionOngoing>
 80029ca:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029d0:	f003 0310 	and.w	r3, r3, #16
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	f040 8188 	bne.w	8002cea <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	f040 8184 	bne.w	8002cea <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029e6:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80029ea:	f043 0202 	orr.w	r2, r3, #2
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4618      	mov	r0, r3
 80029f8:	f7ff ff4a 	bl	8002890 <LL_ADC_IsEnabled>
 80029fc:	4603      	mov	r3, r0
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d136      	bne.n	8002a70 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a6c      	ldr	r2, [pc, #432]	@ (8002bb8 <HAL_ADC_Init+0x2b4>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d004      	beq.n	8002a16 <HAL_ADC_Init+0x112>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a6a      	ldr	r2, [pc, #424]	@ (8002bbc <HAL_ADC_Init+0x2b8>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d10e      	bne.n	8002a34 <HAL_ADC_Init+0x130>
 8002a16:	4868      	ldr	r0, [pc, #416]	@ (8002bb8 <HAL_ADC_Init+0x2b4>)
 8002a18:	f7ff ff3a 	bl	8002890 <LL_ADC_IsEnabled>
 8002a1c:	4604      	mov	r4, r0
 8002a1e:	4867      	ldr	r0, [pc, #412]	@ (8002bbc <HAL_ADC_Init+0x2b8>)
 8002a20:	f7ff ff36 	bl	8002890 <LL_ADC_IsEnabled>
 8002a24:	4603      	mov	r3, r0
 8002a26:	4323      	orrs	r3, r4
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	bf0c      	ite	eq
 8002a2c:	2301      	moveq	r3, #1
 8002a2e:	2300      	movne	r3, #0
 8002a30:	b2db      	uxtb	r3, r3
 8002a32:	e008      	b.n	8002a46 <HAL_ADC_Init+0x142>
 8002a34:	4862      	ldr	r0, [pc, #392]	@ (8002bc0 <HAL_ADC_Init+0x2bc>)
 8002a36:	f7ff ff2b 	bl	8002890 <LL_ADC_IsEnabled>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	bf0c      	ite	eq
 8002a40:	2301      	moveq	r3, #1
 8002a42:	2300      	movne	r3, #0
 8002a44:	b2db      	uxtb	r3, r3
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d012      	beq.n	8002a70 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a5a      	ldr	r2, [pc, #360]	@ (8002bb8 <HAL_ADC_Init+0x2b4>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d004      	beq.n	8002a5e <HAL_ADC_Init+0x15a>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a58      	ldr	r2, [pc, #352]	@ (8002bbc <HAL_ADC_Init+0x2b8>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d101      	bne.n	8002a62 <HAL_ADC_Init+0x15e>
 8002a5e:	4a59      	ldr	r2, [pc, #356]	@ (8002bc4 <HAL_ADC_Init+0x2c0>)
 8002a60:	e000      	b.n	8002a64 <HAL_ADC_Init+0x160>
 8002a62:	4a59      	ldr	r2, [pc, #356]	@ (8002bc8 <HAL_ADC_Init+0x2c4>)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	4619      	mov	r1, r3
 8002a6a:	4610      	mov	r0, r2
 8002a6c:	f7ff fd04 	bl	8002478 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a52      	ldr	r2, [pc, #328]	@ (8002bc0 <HAL_ADC_Init+0x2bc>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d129      	bne.n	8002ace <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	7e5b      	ldrb	r3, [r3, #25]
 8002a7e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8002a84:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 8002a8a:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	2b08      	cmp	r3, #8
 8002a92:	d013      	beq.n	8002abc <HAL_ADC_Init+0x1b8>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	2b0c      	cmp	r3, #12
 8002a9a:	d00d      	beq.n	8002ab8 <HAL_ADC_Init+0x1b4>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	2b1c      	cmp	r3, #28
 8002aa2:	d007      	beq.n	8002ab4 <HAL_ADC_Init+0x1b0>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	2b18      	cmp	r3, #24
 8002aaa:	d101      	bne.n	8002ab0 <HAL_ADC_Init+0x1ac>
 8002aac:	2318      	movs	r3, #24
 8002aae:	e006      	b.n	8002abe <HAL_ADC_Init+0x1ba>
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	e004      	b.n	8002abe <HAL_ADC_Init+0x1ba>
 8002ab4:	2310      	movs	r3, #16
 8002ab6:	e002      	b.n	8002abe <HAL_ADC_Init+0x1ba>
 8002ab8:	2308      	movs	r3, #8
 8002aba:	e000      	b.n	8002abe <HAL_ADC_Init+0x1ba>
 8002abc:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 8002abe:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ac6:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	61bb      	str	r3, [r7, #24]
 8002acc:	e00e      	b.n	8002aec <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	7e5b      	ldrb	r3, [r3, #25]
 8002ad2:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002ad8:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002ade:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ae6:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002af2:	2b01      	cmp	r3, #1
 8002af4:	d106      	bne.n	8002b04 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002afa:	3b01      	subs	r3, #1
 8002afc:	045b      	lsls	r3, r3, #17
 8002afe:	69ba      	ldr	r2, [r7, #24]
 8002b00:	4313      	orrs	r3, r2
 8002b02:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d009      	beq.n	8002b20 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b10:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b18:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002b1a:	69ba      	ldr	r2, [r7, #24]
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a26      	ldr	r2, [pc, #152]	@ (8002bc0 <HAL_ADC_Init+0x2bc>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d115      	bne.n	8002b56 <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	68da      	ldr	r2, [r3, #12]
 8002b30:	4b26      	ldr	r3, [pc, #152]	@ (8002bcc <HAL_ADC_Init+0x2c8>)
 8002b32:	4013      	ands	r3, r2
 8002b34:	687a      	ldr	r2, [r7, #4]
 8002b36:	6812      	ldr	r2, [r2, #0]
 8002b38:	69b9      	ldr	r1, [r7, #24]
 8002b3a:	430b      	orrs	r3, r1
 8002b3c:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	691b      	ldr	r3, [r3, #16]
 8002b44:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	430a      	orrs	r2, r1
 8002b52:	611a      	str	r2, [r3, #16]
 8002b54:	e009      	b.n	8002b6a <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	68da      	ldr	r2, [r3, #12]
 8002b5c:	4b1c      	ldr	r3, [pc, #112]	@ (8002bd0 <HAL_ADC_Init+0x2cc>)
 8002b5e:	4013      	ands	r3, r2
 8002b60:	687a      	ldr	r2, [r7, #4]
 8002b62:	6812      	ldr	r2, [r2, #0]
 8002b64:	69b9      	ldr	r1, [r7, #24]
 8002b66:	430b      	orrs	r3, r1
 8002b68:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f7ff fea1 	bl	80028b6 <LL_ADC_REG_IsConversionOngoing>
 8002b74:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f7ff feae 	bl	80028dc <LL_ADC_INJ_IsConversionOngoing>
 8002b80:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	f040 808e 	bne.w	8002ca6 <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	f040 808a 	bne.w	8002ca6 <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a0a      	ldr	r2, [pc, #40]	@ (8002bc0 <HAL_ADC_Init+0x2bc>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d11b      	bne.n	8002bd4 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	7e1b      	ldrb	r3, [r3, #24]
 8002ba0:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002ba8:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 8002baa:	4313      	orrs	r3, r2
 8002bac:	61bb      	str	r3, [r7, #24]
 8002bae:	e018      	b.n	8002be2 <HAL_ADC_Init+0x2de>
 8002bb0:	24000000 	.word	0x24000000
 8002bb4:	053e2d63 	.word	0x053e2d63
 8002bb8:	40022000 	.word	0x40022000
 8002bbc:	40022100 	.word	0x40022100
 8002bc0:	58026000 	.word	0x58026000
 8002bc4:	40022300 	.word	0x40022300
 8002bc8:	58026300 	.word	0x58026300
 8002bcc:	fff04007 	.word	0xfff04007
 8002bd0:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	7e1b      	ldrb	r3, [r3, #24]
 8002bd8:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        tmpCFGR = (
 8002bde:	4313      	orrs	r3, r2
 8002be0:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	68da      	ldr	r2, [r3, #12]
 8002be8:	4b46      	ldr	r3, [pc, #280]	@ (8002d04 <HAL_ADC_Init+0x400>)
 8002bea:	4013      	ands	r3, r2
 8002bec:	687a      	ldr	r2, [r7, #4]
 8002bee:	6812      	ldr	r2, [r2, #0]
 8002bf0:	69b9      	ldr	r1, [r7, #24]
 8002bf2:	430b      	orrs	r3, r1
 8002bf4:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002bfc:	2b01      	cmp	r3, #1
 8002bfe:	d137      	bne.n	8002c70 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c04:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a3f      	ldr	r2, [pc, #252]	@ (8002d08 <HAL_ADC_Init+0x404>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d116      	bne.n	8002c3e <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	691a      	ldr	r2, [r3, #16]
 8002c16:	4b3d      	ldr	r3, [pc, #244]	@ (8002d0c <HAL_ADC_Init+0x408>)
 8002c18:	4013      	ands	r3, r2
 8002c1a:	687a      	ldr	r2, [r7, #4]
 8002c1c:	6c91      	ldr	r1, [r2, #72]	@ 0x48
 8002c1e:	687a      	ldr	r2, [r7, #4]
 8002c20:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002c22:	4311      	orrs	r1, r2
 8002c24:	687a      	ldr	r2, [r7, #4]
 8002c26:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002c28:	4311      	orrs	r1, r2
 8002c2a:	687a      	ldr	r2, [r7, #4]
 8002c2c:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8002c2e:	430a      	orrs	r2, r1
 8002c30:	431a      	orrs	r2, r3
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f042 0201 	orr.w	r2, r2, #1
 8002c3a:	611a      	str	r2, [r3, #16]
 8002c3c:	e020      	b.n	8002c80 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	691a      	ldr	r2, [r3, #16]
 8002c44:	4b32      	ldr	r3, [pc, #200]	@ (8002d10 <HAL_ADC_Init+0x40c>)
 8002c46:	4013      	ands	r3, r2
 8002c48:	687a      	ldr	r2, [r7, #4]
 8002c4a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002c4c:	3a01      	subs	r2, #1
 8002c4e:	0411      	lsls	r1, r2, #16
 8002c50:	687a      	ldr	r2, [r7, #4]
 8002c52:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002c54:	4311      	orrs	r1, r2
 8002c56:	687a      	ldr	r2, [r7, #4]
 8002c58:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002c5a:	4311      	orrs	r1, r2
 8002c5c:	687a      	ldr	r2, [r7, #4]
 8002c5e:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8002c60:	430a      	orrs	r2, r1
 8002c62:	431a      	orrs	r2, r3
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f042 0201 	orr.w	r2, r2, #1
 8002c6c:	611a      	str	r2, [r3, #16]
 8002c6e:	e007      	b.n	8002c80 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	691a      	ldr	r2, [r3, #16]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f022 0201 	bic.w	r2, r2, #1
 8002c7e:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	691b      	ldr	r3, [r3, #16]
 8002c86:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	430a      	orrs	r2, r1
 8002c94:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a1b      	ldr	r2, [pc, #108]	@ (8002d08 <HAL_ADC_Init+0x404>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d002      	beq.n	8002ca6 <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8002ca0:	6878      	ldr	r0, [r7, #4]
 8002ca2:	f000 fd67 	bl	8003774 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	691b      	ldr	r3, [r3, #16]
 8002caa:	2b01      	cmp	r3, #1
 8002cac:	d10c      	bne.n	8002cc8 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cb4:	f023 010f 	bic.w	r1, r3, #15
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	69db      	ldr	r3, [r3, #28]
 8002cbc:	1e5a      	subs	r2, r3, #1
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	430a      	orrs	r2, r1
 8002cc4:	631a      	str	r2, [r3, #48]	@ 0x30
 8002cc6:	e007      	b.n	8002cd8 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f022 020f 	bic.w	r2, r2, #15
 8002cd6:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002cdc:	f023 0303 	bic.w	r3, r3, #3
 8002ce0:	f043 0201 	orr.w	r2, r3, #1
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	661a      	str	r2, [r3, #96]	@ 0x60
 8002ce8:	e007      	b.n	8002cfa <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002cee:	f043 0210 	orr.w	r2, r3, #16
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002cfa:	7ffb      	ldrb	r3, [r7, #31]
}
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	3724      	adds	r7, #36	@ 0x24
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd90      	pop	{r4, r7, pc}
 8002d04:	ffffbffc 	.word	0xffffbffc
 8002d08:	58026000 	.word	0x58026000
 8002d0c:	fc00f81f 	.word	0xfc00f81f
 8002d10:	fc00f81e 	.word	0xfc00f81e

08002d14 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002d14:	b590      	push	{r4, r7, lr}
 8002d16:	b0b9      	sub	sp, #228	@ 0xe4
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
 8002d1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002d24:	2300      	movs	r3, #0
 8002d26:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002d2e:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	68db      	ldr	r3, [r3, #12]
 8002d34:	4aab      	ldr	r2, [pc, #684]	@ (8002fe4 <HAL_ADC_ConfigChannel+0x2d0>)
 8002d36:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002d3e:	2b01      	cmp	r3, #1
 8002d40:	d102      	bne.n	8002d48 <HAL_ADC_ConfigChannel+0x34>
 8002d42:	2302      	movs	r3, #2
 8002d44:	f000 bcfe 	b.w	8003744 <HAL_ADC_ConfigChannel+0xa30>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4618      	mov	r0, r3
 8002d56:	f7ff fdae 	bl	80028b6 <LL_ADC_REG_IsConversionOngoing>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	f040 84e2 	bne.w	8003726 <HAL_ADC_ConfigChannel+0xa12>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	db38      	blt.n	8002ddc <HAL_ADC_ConfigChannel+0xc8>
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a9e      	ldr	r2, [pc, #632]	@ (8002fe8 <HAL_ADC_ConfigChannel+0x2d4>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d033      	beq.n	8002ddc <HAL_ADC_ConfigChannel+0xc8>
      {
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d108      	bne.n	8002d92 <HAL_ADC_ConfigChannel+0x7e>
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	0e9b      	lsrs	r3, r3, #26
 8002d86:	f003 031f 	and.w	r3, r3, #31
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d90:	e01d      	b.n	8002dce <HAL_ADC_ConfigChannel+0xba>
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d9a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002d9e:	fa93 f3a3 	rbit	r3, r3
 8002da2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002da6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002daa:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002dae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d101      	bne.n	8002dba <HAL_ADC_ConfigChannel+0xa6>
  {
    return 32U;
 8002db6:	2320      	movs	r3, #32
 8002db8:	e004      	b.n	8002dc4 <HAL_ADC_ConfigChannel+0xb0>
  }
  return __builtin_clz(value);
 8002dba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002dbe:	fab3 f383 	clz	r3, r3
 8002dc2:	b2db      	uxtb	r3, r3
 8002dc4:	f003 031f 	and.w	r3, r3, #31
 8002dc8:	2201      	movs	r2, #1
 8002dca:	fa02 f303 	lsl.w	r3, r2, r3
 8002dce:	687a      	ldr	r2, [r7, #4]
 8002dd0:	6812      	ldr	r2, [r2, #0]
 8002dd2:	69d1      	ldr	r1, [r2, #28]
 8002dd4:	687a      	ldr	r2, [r7, #4]
 8002dd6:	6812      	ldr	r2, [r2, #0]
 8002dd8:	430b      	orrs	r3, r1
 8002dda:	61d3      	str	r3, [r2, #28]
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6818      	ldr	r0, [r3, #0]
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	6859      	ldr	r1, [r3, #4]
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	461a      	mov	r2, r3
 8002dea:	f7ff fc6b 	bl	80026c4 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4618      	mov	r0, r3
 8002df4:	f7ff fd5f 	bl	80028b6 <LL_ADC_REG_IsConversionOngoing>
 8002df8:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4618      	mov	r0, r3
 8002e02:	f7ff fd6b 	bl	80028dc <LL_ADC_INJ_IsConversionOngoing>
 8002e06:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002e0a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	f040 8270 	bne.w	80032f4 <HAL_ADC_ConfigChannel+0x5e0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002e14:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	f040 826b 	bne.w	80032f4 <HAL_ADC_ConfigChannel+0x5e0>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6818      	ldr	r0, [r3, #0]
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	6819      	ldr	r1, [r3, #0]
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	689b      	ldr	r3, [r3, #8]
 8002e2a:	461a      	mov	r2, r3
 8002e2c:	f7ff fc76 	bl	800271c <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a6c      	ldr	r2, [pc, #432]	@ (8002fe8 <HAL_ADC_ConfigChannel+0x2d4>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d10d      	bne.n	8002e56 <HAL_ADC_ConfigChannel+0x142>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	695a      	ldr	r2, [r3, #20]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	68db      	ldr	r3, [r3, #12]
 8002e44:	08db      	lsrs	r3, r3, #3
 8002e46:	f003 0303 	and.w	r3, r3, #3
 8002e4a:	005b      	lsls	r3, r3, #1
 8002e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e50:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002e54:	e032      	b.n	8002ebc <HAL_ADC_ConfigChannel+0x1a8>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002e56:	4b65      	ldr	r3, [pc, #404]	@ (8002fec <HAL_ADC_ConfigChannel+0x2d8>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8002e5e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002e62:	d10b      	bne.n	8002e7c <HAL_ADC_ConfigChannel+0x168>
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	695a      	ldr	r2, [r3, #20]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	68db      	ldr	r3, [r3, #12]
 8002e6e:	089b      	lsrs	r3, r3, #2
 8002e70:	f003 0307 	and.w	r3, r3, #7
 8002e74:	005b      	lsls	r3, r3, #1
 8002e76:	fa02 f303 	lsl.w	r3, r2, r3
 8002e7a:	e01d      	b.n	8002eb8 <HAL_ADC_ConfigChannel+0x1a4>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	68db      	ldr	r3, [r3, #12]
 8002e82:	f003 0310 	and.w	r3, r3, #16
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d10b      	bne.n	8002ea2 <HAL_ADC_ConfigChannel+0x18e>
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	695a      	ldr	r2, [r3, #20]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	68db      	ldr	r3, [r3, #12]
 8002e94:	089b      	lsrs	r3, r3, #2
 8002e96:	f003 0307 	and.w	r3, r3, #7
 8002e9a:	005b      	lsls	r3, r3, #1
 8002e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea0:	e00a      	b.n	8002eb8 <HAL_ADC_ConfigChannel+0x1a4>
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	695a      	ldr	r2, [r3, #20]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	68db      	ldr	r3, [r3, #12]
 8002eac:	089b      	lsrs	r3, r3, #2
 8002eae:	f003 0304 	and.w	r3, r3, #4
 8002eb2:	005b      	lsls	r3, r3, #1
 8002eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	691b      	ldr	r3, [r3, #16]
 8002ec0:	2b04      	cmp	r3, #4
 8002ec2:	d048      	beq.n	8002f56 <HAL_ADC_ConfigChannel+0x242>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6818      	ldr	r0, [r3, #0]
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	6919      	ldr	r1, [r3, #16]
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	681a      	ldr	r2, [r3, #0]
 8002ed0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002ed4:	f7ff fb04 	bl	80024e0 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a42      	ldr	r2, [pc, #264]	@ (8002fe8 <HAL_ADC_ConfigChannel+0x2d4>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d119      	bne.n	8002f16 <HAL_ADC_ConfigChannel+0x202>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6818      	ldr	r0, [r3, #0]
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	6919      	ldr	r1, [r3, #16]
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	69db      	ldr	r3, [r3, #28]
 8002eee:	461a      	mov	r2, r3
 8002ef0:	f7ff fb9c 	bl	800262c <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6818      	ldr	r0, [r3, #0]
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	6919      	ldr	r1, [r3, #16]
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f02:	2b01      	cmp	r3, #1
 8002f04:	d102      	bne.n	8002f0c <HAL_ADC_ConfigChannel+0x1f8>
 8002f06:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002f0a:	e000      	b.n	8002f0e <HAL_ADC_ConfigChannel+0x1fa>
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	461a      	mov	r2, r3
 8002f10:	f7ff fb6a 	bl	80025e8 <LL_ADC_SetOffsetSaturation>
 8002f14:	e1ee      	b.n	80032f4 <HAL_ADC_ConfigChannel+0x5e0>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6818      	ldr	r0, [r3, #0]
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	6919      	ldr	r1, [r3, #16]
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002f24:	2b01      	cmp	r3, #1
 8002f26:	d102      	bne.n	8002f2e <HAL_ADC_ConfigChannel+0x21a>
 8002f28:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8002f2c:	e000      	b.n	8002f30 <HAL_ADC_ConfigChannel+0x21c>
 8002f2e:	2300      	movs	r3, #0
 8002f30:	461a      	mov	r2, r3
 8002f32:	f7ff fb37 	bl	80025a4 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6818      	ldr	r0, [r3, #0]
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	6919      	ldr	r1, [r3, #16]
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	7e1b      	ldrb	r3, [r3, #24]
 8002f42:	2b01      	cmp	r3, #1
 8002f44:	d102      	bne.n	8002f4c <HAL_ADC_ConfigChannel+0x238>
 8002f46:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002f4a:	e000      	b.n	8002f4e <HAL_ADC_ConfigChannel+0x23a>
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	461a      	mov	r2, r3
 8002f50:	f7ff fb0e 	bl	8002570 <LL_ADC_SetDataRightShift>
 8002f54:	e1ce      	b.n	80032f4 <HAL_ADC_ConfigChannel+0x5e0>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a23      	ldr	r2, [pc, #140]	@ (8002fe8 <HAL_ADC_ConfigChannel+0x2d4>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	f040 8181 	bne.w	8003264 <HAL_ADC_ConfigChannel+0x550>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	2100      	movs	r1, #0
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f7ff faeb 	bl	8002544 <LL_ADC_GetOffsetChannel>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d10a      	bne.n	8002f8e <HAL_ADC_ConfigChannel+0x27a>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	2100      	movs	r1, #0
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f7ff fae0 	bl	8002544 <LL_ADC_GetOffsetChannel>
 8002f84:	4603      	mov	r3, r0
 8002f86:	0e9b      	lsrs	r3, r3, #26
 8002f88:	f003 021f 	and.w	r2, r3, #31
 8002f8c:	e01e      	b.n	8002fcc <HAL_ADC_ConfigChannel+0x2b8>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	2100      	movs	r1, #0
 8002f94:	4618      	mov	r0, r3
 8002f96:	f7ff fad5 	bl	8002544 <LL_ADC_GetOffsetChannel>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fa0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002fa4:	fa93 f3a3 	rbit	r3, r3
 8002fa8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  return result;
 8002fac:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002fb0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  if (value == 0U)
 8002fb4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d101      	bne.n	8002fc0 <HAL_ADC_ConfigChannel+0x2ac>
    return 32U;
 8002fbc:	2320      	movs	r3, #32
 8002fbe:	e004      	b.n	8002fca <HAL_ADC_ConfigChannel+0x2b6>
  return __builtin_clz(value);
 8002fc0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002fc4:	fab3 f383 	clz	r3, r3
 8002fc8:	b2db      	uxtb	r3, r3
 8002fca:	461a      	mov	r2, r3
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d10b      	bne.n	8002ff0 <HAL_ADC_ConfigChannel+0x2dc>
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	0e9b      	lsrs	r3, r3, #26
 8002fde:	f003 031f 	and.w	r3, r3, #31
 8002fe2:	e01e      	b.n	8003022 <HAL_ADC_ConfigChannel+0x30e>
 8002fe4:	47ff0000 	.word	0x47ff0000
 8002fe8:	58026000 	.word	0x58026000
 8002fec:	5c001000 	.word	0x5c001000
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ff8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002ffc:	fa93 f3a3 	rbit	r3, r3
 8003000:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8003004:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003008:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 800300c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003010:	2b00      	cmp	r3, #0
 8003012:	d101      	bne.n	8003018 <HAL_ADC_ConfigChannel+0x304>
    return 32U;
 8003014:	2320      	movs	r3, #32
 8003016:	e004      	b.n	8003022 <HAL_ADC_ConfigChannel+0x30e>
  return __builtin_clz(value);
 8003018:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800301c:	fab3 f383 	clz	r3, r3
 8003020:	b2db      	uxtb	r3, r3
 8003022:	429a      	cmp	r2, r3
 8003024:	d106      	bne.n	8003034 <HAL_ADC_ConfigChannel+0x320>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	2200      	movs	r2, #0
 800302c:	2100      	movs	r1, #0
 800302e:	4618      	mov	r0, r3
 8003030:	f7ff fb1e 	bl	8002670 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	2101      	movs	r1, #1
 800303a:	4618      	mov	r0, r3
 800303c:	f7ff fa82 	bl	8002544 <LL_ADC_GetOffsetChannel>
 8003040:	4603      	mov	r3, r0
 8003042:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003046:	2b00      	cmp	r3, #0
 8003048:	d10a      	bne.n	8003060 <HAL_ADC_ConfigChannel+0x34c>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	2101      	movs	r1, #1
 8003050:	4618      	mov	r0, r3
 8003052:	f7ff fa77 	bl	8002544 <LL_ADC_GetOffsetChannel>
 8003056:	4603      	mov	r3, r0
 8003058:	0e9b      	lsrs	r3, r3, #26
 800305a:	f003 021f 	and.w	r2, r3, #31
 800305e:	e01e      	b.n	800309e <HAL_ADC_ConfigChannel+0x38a>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	2101      	movs	r1, #1
 8003066:	4618      	mov	r0, r3
 8003068:	f7ff fa6c 	bl	8002544 <LL_ADC_GetOffsetChannel>
 800306c:	4603      	mov	r3, r0
 800306e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003072:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003076:	fa93 f3a3 	rbit	r3, r3
 800307a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 800307e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003082:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8003086:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800308a:	2b00      	cmp	r3, #0
 800308c:	d101      	bne.n	8003092 <HAL_ADC_ConfigChannel+0x37e>
    return 32U;
 800308e:	2320      	movs	r3, #32
 8003090:	e004      	b.n	800309c <HAL_ADC_ConfigChannel+0x388>
  return __builtin_clz(value);
 8003092:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003096:	fab3 f383 	clz	r3, r3
 800309a:	b2db      	uxtb	r3, r3
 800309c:	461a      	mov	r2, r3
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d105      	bne.n	80030b6 <HAL_ADC_ConfigChannel+0x3a2>
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	0e9b      	lsrs	r3, r3, #26
 80030b0:	f003 031f 	and.w	r3, r3, #31
 80030b4:	e018      	b.n	80030e8 <HAL_ADC_ConfigChannel+0x3d4>
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030be:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80030c2:	fa93 f3a3 	rbit	r3, r3
 80030c6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 80030ca:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80030ce:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 80030d2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d101      	bne.n	80030de <HAL_ADC_ConfigChannel+0x3ca>
    return 32U;
 80030da:	2320      	movs	r3, #32
 80030dc:	e004      	b.n	80030e8 <HAL_ADC_ConfigChannel+0x3d4>
  return __builtin_clz(value);
 80030de:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80030e2:	fab3 f383 	clz	r3, r3
 80030e6:	b2db      	uxtb	r3, r3
 80030e8:	429a      	cmp	r2, r3
 80030ea:	d106      	bne.n	80030fa <HAL_ADC_ConfigChannel+0x3e6>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	2200      	movs	r2, #0
 80030f2:	2101      	movs	r1, #1
 80030f4:	4618      	mov	r0, r3
 80030f6:	f7ff fabb 	bl	8002670 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	2102      	movs	r1, #2
 8003100:	4618      	mov	r0, r3
 8003102:	f7ff fa1f 	bl	8002544 <LL_ADC_GetOffsetChannel>
 8003106:	4603      	mov	r3, r0
 8003108:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800310c:	2b00      	cmp	r3, #0
 800310e:	d10a      	bne.n	8003126 <HAL_ADC_ConfigChannel+0x412>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	2102      	movs	r1, #2
 8003116:	4618      	mov	r0, r3
 8003118:	f7ff fa14 	bl	8002544 <LL_ADC_GetOffsetChannel>
 800311c:	4603      	mov	r3, r0
 800311e:	0e9b      	lsrs	r3, r3, #26
 8003120:	f003 021f 	and.w	r2, r3, #31
 8003124:	e01e      	b.n	8003164 <HAL_ADC_ConfigChannel+0x450>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	2102      	movs	r1, #2
 800312c:	4618      	mov	r0, r3
 800312e:	f7ff fa09 	bl	8002544 <LL_ADC_GetOffsetChannel>
 8003132:	4603      	mov	r3, r0
 8003134:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003138:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800313c:	fa93 f3a3 	rbit	r3, r3
 8003140:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8003144:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003148:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 800314c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003150:	2b00      	cmp	r3, #0
 8003152:	d101      	bne.n	8003158 <HAL_ADC_ConfigChannel+0x444>
    return 32U;
 8003154:	2320      	movs	r3, #32
 8003156:	e004      	b.n	8003162 <HAL_ADC_ConfigChannel+0x44e>
  return __builtin_clz(value);
 8003158:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800315c:	fab3 f383 	clz	r3, r3
 8003160:	b2db      	uxtb	r3, r3
 8003162:	461a      	mov	r2, r3
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800316c:	2b00      	cmp	r3, #0
 800316e:	d105      	bne.n	800317c <HAL_ADC_ConfigChannel+0x468>
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	0e9b      	lsrs	r3, r3, #26
 8003176:	f003 031f 	and.w	r3, r3, #31
 800317a:	e014      	b.n	80031a6 <HAL_ADC_ConfigChannel+0x492>
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003182:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003184:	fa93 f3a3 	rbit	r3, r3
 8003188:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 800318a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800318c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8003190:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003194:	2b00      	cmp	r3, #0
 8003196:	d101      	bne.n	800319c <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8003198:	2320      	movs	r3, #32
 800319a:	e004      	b.n	80031a6 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 800319c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80031a0:	fab3 f383 	clz	r3, r3
 80031a4:	b2db      	uxtb	r3, r3
 80031a6:	429a      	cmp	r2, r3
 80031a8:	d106      	bne.n	80031b8 <HAL_ADC_ConfigChannel+0x4a4>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	2200      	movs	r2, #0
 80031b0:	2102      	movs	r1, #2
 80031b2:	4618      	mov	r0, r3
 80031b4:	f7ff fa5c 	bl	8002670 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	2103      	movs	r1, #3
 80031be:	4618      	mov	r0, r3
 80031c0:	f7ff f9c0 	bl	8002544 <LL_ADC_GetOffsetChannel>
 80031c4:	4603      	mov	r3, r0
 80031c6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d10a      	bne.n	80031e4 <HAL_ADC_ConfigChannel+0x4d0>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	2103      	movs	r1, #3
 80031d4:	4618      	mov	r0, r3
 80031d6:	f7ff f9b5 	bl	8002544 <LL_ADC_GetOffsetChannel>
 80031da:	4603      	mov	r3, r0
 80031dc:	0e9b      	lsrs	r3, r3, #26
 80031de:	f003 021f 	and.w	r2, r3, #31
 80031e2:	e017      	b.n	8003214 <HAL_ADC_ConfigChannel+0x500>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	2103      	movs	r1, #3
 80031ea:	4618      	mov	r0, r3
 80031ec:	f7ff f9aa 	bl	8002544 <LL_ADC_GetOffsetChannel>
 80031f0:	4603      	mov	r3, r0
 80031f2:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031f4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80031f6:	fa93 f3a3 	rbit	r3, r3
 80031fa:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80031fc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80031fe:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8003200:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003202:	2b00      	cmp	r3, #0
 8003204:	d101      	bne.n	800320a <HAL_ADC_ConfigChannel+0x4f6>
    return 32U;
 8003206:	2320      	movs	r3, #32
 8003208:	e003      	b.n	8003212 <HAL_ADC_ConfigChannel+0x4fe>
  return __builtin_clz(value);
 800320a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800320c:	fab3 f383 	clz	r3, r3
 8003210:	b2db      	uxtb	r3, r3
 8003212:	461a      	mov	r2, r3
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800321c:	2b00      	cmp	r3, #0
 800321e:	d105      	bne.n	800322c <HAL_ADC_ConfigChannel+0x518>
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	0e9b      	lsrs	r3, r3, #26
 8003226:	f003 031f 	and.w	r3, r3, #31
 800322a:	e011      	b.n	8003250 <HAL_ADC_ConfigChannel+0x53c>
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003232:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003234:	fa93 f3a3 	rbit	r3, r3
 8003238:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 800323a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800323c:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 800323e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003240:	2b00      	cmp	r3, #0
 8003242:	d101      	bne.n	8003248 <HAL_ADC_ConfigChannel+0x534>
    return 32U;
 8003244:	2320      	movs	r3, #32
 8003246:	e003      	b.n	8003250 <HAL_ADC_ConfigChannel+0x53c>
  return __builtin_clz(value);
 8003248:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800324a:	fab3 f383 	clz	r3, r3
 800324e:	b2db      	uxtb	r3, r3
 8003250:	429a      	cmp	r2, r3
 8003252:	d14f      	bne.n	80032f4 <HAL_ADC_ConfigChannel+0x5e0>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	2200      	movs	r2, #0
 800325a:	2103      	movs	r1, #3
 800325c:	4618      	mov	r0, r3
 800325e:	f7ff fa07 	bl	8002670 <LL_ADC_SetOffsetState>
 8003262:	e047      	b.n	80032f4 <HAL_ADC_ConfigChannel+0x5e0>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800326a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	069b      	lsls	r3, r3, #26
 8003274:	429a      	cmp	r2, r3
 8003276:	d107      	bne.n	8003288 <HAL_ADC_ConfigChannel+0x574>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003286:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800328e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	069b      	lsls	r3, r3, #26
 8003298:	429a      	cmp	r2, r3
 800329a:	d107      	bne.n	80032ac <HAL_ADC_ConfigChannel+0x598>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80032aa:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80032b2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	069b      	lsls	r3, r3, #26
 80032bc:	429a      	cmp	r2, r3
 80032be:	d107      	bne.n	80032d0 <HAL_ADC_ConfigChannel+0x5bc>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80032ce:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80032d6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	069b      	lsls	r3, r3, #26
 80032e0:	429a      	cmp	r2, r3
 80032e2:	d107      	bne.n	80032f4 <HAL_ADC_ConfigChannel+0x5e0>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80032f2:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4618      	mov	r0, r3
 80032fa:	f7ff fac9 	bl	8002890 <LL_ADC_IsEnabled>
 80032fe:	4603      	mov	r3, r0
 8003300:	2b00      	cmp	r3, #0
 8003302:	f040 8219 	bne.w	8003738 <HAL_ADC_ConfigChannel+0xa24>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6818      	ldr	r0, [r3, #0]
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	6819      	ldr	r1, [r3, #0]
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	68db      	ldr	r3, [r3, #12]
 8003312:	461a      	mov	r2, r3
 8003314:	f7ff fa2e 	bl	8002774 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	68db      	ldr	r3, [r3, #12]
 800331c:	4aa1      	ldr	r2, [pc, #644]	@ (80035a4 <HAL_ADC_ConfigChannel+0x890>)
 800331e:	4293      	cmp	r3, r2
 8003320:	f040 812e 	bne.w	8003580 <HAL_ADC_ConfigChannel+0x86c>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003330:	2b00      	cmp	r3, #0
 8003332:	d10b      	bne.n	800334c <HAL_ADC_ConfigChannel+0x638>
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	0e9b      	lsrs	r3, r3, #26
 800333a:	3301      	adds	r3, #1
 800333c:	f003 031f 	and.w	r3, r3, #31
 8003340:	2b09      	cmp	r3, #9
 8003342:	bf94      	ite	ls
 8003344:	2301      	movls	r3, #1
 8003346:	2300      	movhi	r3, #0
 8003348:	b2db      	uxtb	r3, r3
 800334a:	e019      	b.n	8003380 <HAL_ADC_ConfigChannel+0x66c>
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003352:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003354:	fa93 f3a3 	rbit	r3, r3
 8003358:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 800335a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800335c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 800335e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003360:	2b00      	cmp	r3, #0
 8003362:	d101      	bne.n	8003368 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8003364:	2320      	movs	r3, #32
 8003366:	e003      	b.n	8003370 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8003368:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800336a:	fab3 f383 	clz	r3, r3
 800336e:	b2db      	uxtb	r3, r3
 8003370:	3301      	adds	r3, #1
 8003372:	f003 031f 	and.w	r3, r3, #31
 8003376:	2b09      	cmp	r3, #9
 8003378:	bf94      	ite	ls
 800337a:	2301      	movls	r3, #1
 800337c:	2300      	movhi	r3, #0
 800337e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003380:	2b00      	cmp	r3, #0
 8003382:	d079      	beq.n	8003478 <HAL_ADC_ConfigChannel+0x764>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800338c:	2b00      	cmp	r3, #0
 800338e:	d107      	bne.n	80033a0 <HAL_ADC_ConfigChannel+0x68c>
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	0e9b      	lsrs	r3, r3, #26
 8003396:	3301      	adds	r3, #1
 8003398:	069b      	lsls	r3, r3, #26
 800339a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800339e:	e015      	b.n	80033cc <HAL_ADC_ConfigChannel+0x6b8>
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80033a8:	fa93 f3a3 	rbit	r3, r3
 80033ac:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80033ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80033b0:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80033b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d101      	bne.n	80033bc <HAL_ADC_ConfigChannel+0x6a8>
    return 32U;
 80033b8:	2320      	movs	r3, #32
 80033ba:	e003      	b.n	80033c4 <HAL_ADC_ConfigChannel+0x6b0>
  return __builtin_clz(value);
 80033bc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80033be:	fab3 f383 	clz	r3, r3
 80033c2:	b2db      	uxtb	r3, r3
 80033c4:	3301      	adds	r3, #1
 80033c6:	069b      	lsls	r3, r3, #26
 80033c8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d109      	bne.n	80033ec <HAL_ADC_ConfigChannel+0x6d8>
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	0e9b      	lsrs	r3, r3, #26
 80033de:	3301      	adds	r3, #1
 80033e0:	f003 031f 	and.w	r3, r3, #31
 80033e4:	2101      	movs	r1, #1
 80033e6:	fa01 f303 	lsl.w	r3, r1, r3
 80033ea:	e017      	b.n	800341c <HAL_ADC_ConfigChannel+0x708>
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80033f4:	fa93 f3a3 	rbit	r3, r3
 80033f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 80033fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80033fc:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 80033fe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003400:	2b00      	cmp	r3, #0
 8003402:	d101      	bne.n	8003408 <HAL_ADC_ConfigChannel+0x6f4>
    return 32U;
 8003404:	2320      	movs	r3, #32
 8003406:	e003      	b.n	8003410 <HAL_ADC_ConfigChannel+0x6fc>
  return __builtin_clz(value);
 8003408:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800340a:	fab3 f383 	clz	r3, r3
 800340e:	b2db      	uxtb	r3, r3
 8003410:	3301      	adds	r3, #1
 8003412:	f003 031f 	and.w	r3, r3, #31
 8003416:	2101      	movs	r1, #1
 8003418:	fa01 f303 	lsl.w	r3, r1, r3
 800341c:	ea42 0103 	orr.w	r1, r2, r3
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003428:	2b00      	cmp	r3, #0
 800342a:	d10a      	bne.n	8003442 <HAL_ADC_ConfigChannel+0x72e>
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	0e9b      	lsrs	r3, r3, #26
 8003432:	3301      	adds	r3, #1
 8003434:	f003 021f 	and.w	r2, r3, #31
 8003438:	4613      	mov	r3, r2
 800343a:	005b      	lsls	r3, r3, #1
 800343c:	4413      	add	r3, r2
 800343e:	051b      	lsls	r3, r3, #20
 8003440:	e018      	b.n	8003474 <HAL_ADC_ConfigChannel+0x760>
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003448:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800344a:	fa93 f3a3 	rbit	r3, r3
 800344e:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8003450:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003452:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8003454:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003456:	2b00      	cmp	r3, #0
 8003458:	d101      	bne.n	800345e <HAL_ADC_ConfigChannel+0x74a>
    return 32U;
 800345a:	2320      	movs	r3, #32
 800345c:	e003      	b.n	8003466 <HAL_ADC_ConfigChannel+0x752>
  return __builtin_clz(value);
 800345e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003460:	fab3 f383 	clz	r3, r3
 8003464:	b2db      	uxtb	r3, r3
 8003466:	3301      	adds	r3, #1
 8003468:	f003 021f 	and.w	r2, r3, #31
 800346c:	4613      	mov	r3, r2
 800346e:	005b      	lsls	r3, r3, #1
 8003470:	4413      	add	r3, r2
 8003472:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003474:	430b      	orrs	r3, r1
 8003476:	e07e      	b.n	8003576 <HAL_ADC_ConfigChannel+0x862>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003480:	2b00      	cmp	r3, #0
 8003482:	d107      	bne.n	8003494 <HAL_ADC_ConfigChannel+0x780>
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	0e9b      	lsrs	r3, r3, #26
 800348a:	3301      	adds	r3, #1
 800348c:	069b      	lsls	r3, r3, #26
 800348e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003492:	e015      	b.n	80034c0 <HAL_ADC_ConfigChannel+0x7ac>
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800349a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800349c:	fa93 f3a3 	rbit	r3, r3
 80034a0:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80034a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80034a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d101      	bne.n	80034b0 <HAL_ADC_ConfigChannel+0x79c>
    return 32U;
 80034ac:	2320      	movs	r3, #32
 80034ae:	e003      	b.n	80034b8 <HAL_ADC_ConfigChannel+0x7a4>
  return __builtin_clz(value);
 80034b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034b2:	fab3 f383 	clz	r3, r3
 80034b6:	b2db      	uxtb	r3, r3
 80034b8:	3301      	adds	r3, #1
 80034ba:	069b      	lsls	r3, r3, #26
 80034bc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d109      	bne.n	80034e0 <HAL_ADC_ConfigChannel+0x7cc>
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	0e9b      	lsrs	r3, r3, #26
 80034d2:	3301      	adds	r3, #1
 80034d4:	f003 031f 	and.w	r3, r3, #31
 80034d8:	2101      	movs	r1, #1
 80034da:	fa01 f303 	lsl.w	r3, r1, r3
 80034de:	e017      	b.n	8003510 <HAL_ADC_ConfigChannel+0x7fc>
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034e6:	69fb      	ldr	r3, [r7, #28]
 80034e8:	fa93 f3a3 	rbit	r3, r3
 80034ec:	61bb      	str	r3, [r7, #24]
  return result;
 80034ee:	69bb      	ldr	r3, [r7, #24]
 80034f0:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80034f2:	6a3b      	ldr	r3, [r7, #32]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d101      	bne.n	80034fc <HAL_ADC_ConfigChannel+0x7e8>
    return 32U;
 80034f8:	2320      	movs	r3, #32
 80034fa:	e003      	b.n	8003504 <HAL_ADC_ConfigChannel+0x7f0>
  return __builtin_clz(value);
 80034fc:	6a3b      	ldr	r3, [r7, #32]
 80034fe:	fab3 f383 	clz	r3, r3
 8003502:	b2db      	uxtb	r3, r3
 8003504:	3301      	adds	r3, #1
 8003506:	f003 031f 	and.w	r3, r3, #31
 800350a:	2101      	movs	r1, #1
 800350c:	fa01 f303 	lsl.w	r3, r1, r3
 8003510:	ea42 0103 	orr.w	r1, r2, r3
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800351c:	2b00      	cmp	r3, #0
 800351e:	d10d      	bne.n	800353c <HAL_ADC_ConfigChannel+0x828>
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	0e9b      	lsrs	r3, r3, #26
 8003526:	3301      	adds	r3, #1
 8003528:	f003 021f 	and.w	r2, r3, #31
 800352c:	4613      	mov	r3, r2
 800352e:	005b      	lsls	r3, r3, #1
 8003530:	4413      	add	r3, r2
 8003532:	3b1e      	subs	r3, #30
 8003534:	051b      	lsls	r3, r3, #20
 8003536:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800353a:	e01b      	b.n	8003574 <HAL_ADC_ConfigChannel+0x860>
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003542:	693b      	ldr	r3, [r7, #16]
 8003544:	fa93 f3a3 	rbit	r3, r3
 8003548:	60fb      	str	r3, [r7, #12]
  return result;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d101      	bne.n	8003558 <HAL_ADC_ConfigChannel+0x844>
    return 32U;
 8003554:	2320      	movs	r3, #32
 8003556:	e003      	b.n	8003560 <HAL_ADC_ConfigChannel+0x84c>
  return __builtin_clz(value);
 8003558:	697b      	ldr	r3, [r7, #20]
 800355a:	fab3 f383 	clz	r3, r3
 800355e:	b2db      	uxtb	r3, r3
 8003560:	3301      	adds	r3, #1
 8003562:	f003 021f 	and.w	r2, r3, #31
 8003566:	4613      	mov	r3, r2
 8003568:	005b      	lsls	r3, r3, #1
 800356a:	4413      	add	r3, r2
 800356c:	3b1e      	subs	r3, #30
 800356e:	051b      	lsls	r3, r3, #20
 8003570:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003574:	430b      	orrs	r3, r1
 8003576:	683a      	ldr	r2, [r7, #0]
 8003578:	6892      	ldr	r2, [r2, #8]
 800357a:	4619      	mov	r1, r3
 800357c:	f7ff f8ce 	bl	800271c <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	2b00      	cmp	r3, #0
 8003586:	f280 80d7 	bge.w	8003738 <HAL_ADC_ConfigChannel+0xa24>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4a06      	ldr	r2, [pc, #24]	@ (80035a8 <HAL_ADC_ConfigChannel+0x894>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d004      	beq.n	800359e <HAL_ADC_ConfigChannel+0x88a>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4a04      	ldr	r2, [pc, #16]	@ (80035ac <HAL_ADC_ConfigChannel+0x898>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d10a      	bne.n	80035b4 <HAL_ADC_ConfigChannel+0x8a0>
 800359e:	4b04      	ldr	r3, [pc, #16]	@ (80035b0 <HAL_ADC_ConfigChannel+0x89c>)
 80035a0:	e009      	b.n	80035b6 <HAL_ADC_ConfigChannel+0x8a2>
 80035a2:	bf00      	nop
 80035a4:	47ff0000 	.word	0x47ff0000
 80035a8:	40022000 	.word	0x40022000
 80035ac:	40022100 	.word	0x40022100
 80035b0:	40022300 	.word	0x40022300
 80035b4:	4b65      	ldr	r3, [pc, #404]	@ (800374c <HAL_ADC_ConfigChannel+0xa38>)
 80035b6:	4618      	mov	r0, r3
 80035b8:	f7fe ff84 	bl	80024c4 <LL_ADC_GetCommonPathInternalCh>
 80035bc:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a62      	ldr	r2, [pc, #392]	@ (8003750 <HAL_ADC_ConfigChannel+0xa3c>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d004      	beq.n	80035d4 <HAL_ADC_ConfigChannel+0x8c0>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a61      	ldr	r2, [pc, #388]	@ (8003754 <HAL_ADC_ConfigChannel+0xa40>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d10e      	bne.n	80035f2 <HAL_ADC_ConfigChannel+0x8de>
 80035d4:	485e      	ldr	r0, [pc, #376]	@ (8003750 <HAL_ADC_ConfigChannel+0xa3c>)
 80035d6:	f7ff f95b 	bl	8002890 <LL_ADC_IsEnabled>
 80035da:	4604      	mov	r4, r0
 80035dc:	485d      	ldr	r0, [pc, #372]	@ (8003754 <HAL_ADC_ConfigChannel+0xa40>)
 80035de:	f7ff f957 	bl	8002890 <LL_ADC_IsEnabled>
 80035e2:	4603      	mov	r3, r0
 80035e4:	4323      	orrs	r3, r4
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	bf0c      	ite	eq
 80035ea:	2301      	moveq	r3, #1
 80035ec:	2300      	movne	r3, #0
 80035ee:	b2db      	uxtb	r3, r3
 80035f0:	e008      	b.n	8003604 <HAL_ADC_ConfigChannel+0x8f0>
 80035f2:	4859      	ldr	r0, [pc, #356]	@ (8003758 <HAL_ADC_ConfigChannel+0xa44>)
 80035f4:	f7ff f94c 	bl	8002890 <LL_ADC_IsEnabled>
 80035f8:	4603      	mov	r3, r0
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	bf0c      	ite	eq
 80035fe:	2301      	moveq	r3, #1
 8003600:	2300      	movne	r3, #0
 8003602:	b2db      	uxtb	r3, r3
 8003604:	2b00      	cmp	r3, #0
 8003606:	f000 8084 	beq.w	8003712 <HAL_ADC_ConfigChannel+0x9fe>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a53      	ldr	r2, [pc, #332]	@ (800375c <HAL_ADC_ConfigChannel+0xa48>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d132      	bne.n	800367a <HAL_ADC_ConfigChannel+0x966>
 8003614:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003618:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800361c:	2b00      	cmp	r3, #0
 800361e:	d12c      	bne.n	800367a <HAL_ADC_ConfigChannel+0x966>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a4c      	ldr	r2, [pc, #304]	@ (8003758 <HAL_ADC_ConfigChannel+0xa44>)
 8003626:	4293      	cmp	r3, r2
 8003628:	f040 8086 	bne.w	8003738 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a47      	ldr	r2, [pc, #284]	@ (8003750 <HAL_ADC_ConfigChannel+0xa3c>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d004      	beq.n	8003640 <HAL_ADC_ConfigChannel+0x92c>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a46      	ldr	r2, [pc, #280]	@ (8003754 <HAL_ADC_ConfigChannel+0xa40>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d101      	bne.n	8003644 <HAL_ADC_ConfigChannel+0x930>
 8003640:	4a47      	ldr	r2, [pc, #284]	@ (8003760 <HAL_ADC_ConfigChannel+0xa4c>)
 8003642:	e000      	b.n	8003646 <HAL_ADC_ConfigChannel+0x932>
 8003644:	4a41      	ldr	r2, [pc, #260]	@ (800374c <HAL_ADC_ConfigChannel+0xa38>)
 8003646:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800364a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800364e:	4619      	mov	r1, r3
 8003650:	4610      	mov	r0, r2
 8003652:	f7fe ff24 	bl	800249e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003656:	4b43      	ldr	r3, [pc, #268]	@ (8003764 <HAL_ADC_ConfigChannel+0xa50>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	099b      	lsrs	r3, r3, #6
 800365c:	4a42      	ldr	r2, [pc, #264]	@ (8003768 <HAL_ADC_ConfigChannel+0xa54>)
 800365e:	fba2 2303 	umull	r2, r3, r2, r3
 8003662:	099b      	lsrs	r3, r3, #6
 8003664:	3301      	adds	r3, #1
 8003666:	005b      	lsls	r3, r3, #1
 8003668:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800366a:	e002      	b.n	8003672 <HAL_ADC_ConfigChannel+0x95e>
              {
                wait_loop_index--;
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	3b01      	subs	r3, #1
 8003670:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003672:	68bb      	ldr	r3, [r7, #8]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d1f9      	bne.n	800366c <HAL_ADC_ConfigChannel+0x958>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003678:	e05e      	b.n	8003738 <HAL_ADC_ConfigChannel+0xa24>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a3b      	ldr	r2, [pc, #236]	@ (800376c <HAL_ADC_ConfigChannel+0xa58>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d120      	bne.n	80036c6 <HAL_ADC_ConfigChannel+0x9b2>
 8003684:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003688:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800368c:	2b00      	cmp	r3, #0
 800368e:	d11a      	bne.n	80036c6 <HAL_ADC_ConfigChannel+0x9b2>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a30      	ldr	r2, [pc, #192]	@ (8003758 <HAL_ADC_ConfigChannel+0xa44>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d14e      	bne.n	8003738 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a2c      	ldr	r2, [pc, #176]	@ (8003750 <HAL_ADC_ConfigChannel+0xa3c>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d004      	beq.n	80036ae <HAL_ADC_ConfigChannel+0x99a>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a2a      	ldr	r2, [pc, #168]	@ (8003754 <HAL_ADC_ConfigChannel+0xa40>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d101      	bne.n	80036b2 <HAL_ADC_ConfigChannel+0x99e>
 80036ae:	4a2c      	ldr	r2, [pc, #176]	@ (8003760 <HAL_ADC_ConfigChannel+0xa4c>)
 80036b0:	e000      	b.n	80036b4 <HAL_ADC_ConfigChannel+0x9a0>
 80036b2:	4a26      	ldr	r2, [pc, #152]	@ (800374c <HAL_ADC_ConfigChannel+0xa38>)
 80036b4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80036b8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80036bc:	4619      	mov	r1, r3
 80036be:	4610      	mov	r0, r2
 80036c0:	f7fe feed 	bl	800249e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80036c4:	e038      	b.n	8003738 <HAL_ADC_ConfigChannel+0xa24>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a29      	ldr	r2, [pc, #164]	@ (8003770 <HAL_ADC_ConfigChannel+0xa5c>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d133      	bne.n	8003738 <HAL_ADC_ConfigChannel+0xa24>
 80036d0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80036d4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d12d      	bne.n	8003738 <HAL_ADC_ConfigChannel+0xa24>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a1d      	ldr	r2, [pc, #116]	@ (8003758 <HAL_ADC_ConfigChannel+0xa44>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d128      	bne.n	8003738 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4a19      	ldr	r2, [pc, #100]	@ (8003750 <HAL_ADC_ConfigChannel+0xa3c>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d004      	beq.n	80036fa <HAL_ADC_ConfigChannel+0x9e6>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a17      	ldr	r2, [pc, #92]	@ (8003754 <HAL_ADC_ConfigChannel+0xa40>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d101      	bne.n	80036fe <HAL_ADC_ConfigChannel+0x9ea>
 80036fa:	4a19      	ldr	r2, [pc, #100]	@ (8003760 <HAL_ADC_ConfigChannel+0xa4c>)
 80036fc:	e000      	b.n	8003700 <HAL_ADC_ConfigChannel+0x9ec>
 80036fe:	4a13      	ldr	r2, [pc, #76]	@ (800374c <HAL_ADC_ConfigChannel+0xa38>)
 8003700:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003704:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003708:	4619      	mov	r1, r3
 800370a:	4610      	mov	r0, r2
 800370c:	f7fe fec7 	bl	800249e <LL_ADC_SetCommonPathInternalCh>
 8003710:	e012      	b.n	8003738 <HAL_ADC_ConfigChannel+0xa24>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003716:	f043 0220 	orr.w	r2, r3, #32
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	661a      	str	r2, [r3, #96]	@ 0x60

          tmp_hal_status = HAL_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
 8003724:	e008      	b.n	8003738 <HAL_ADC_ConfigChannel+0xa24>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800372a:	f043 0220 	orr.w	r2, r3, #32
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8003732:	2301      	movs	r3, #1
 8003734:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2200      	movs	r2, #0
 800373c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8003740:	f897 30df 	ldrb.w	r3, [r7, #223]	@ 0xdf
}
 8003744:	4618      	mov	r0, r3
 8003746:	37e4      	adds	r7, #228	@ 0xe4
 8003748:	46bd      	mov	sp, r7
 800374a:	bd90      	pop	{r4, r7, pc}
 800374c:	58026300 	.word	0x58026300
 8003750:	40022000 	.word	0x40022000
 8003754:	40022100 	.word	0x40022100
 8003758:	58026000 	.word	0x58026000
 800375c:	c7520000 	.word	0xc7520000
 8003760:	40022300 	.word	0x40022300
 8003764:	24000000 	.word	0x24000000
 8003768:	053e2d63 	.word	0x053e2d63
 800376c:	c3210000 	.word	0xc3210000
 8003770:	cb840000 	.word	0xcb840000

08003774 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b084      	sub	sp, #16
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a6c      	ldr	r2, [pc, #432]	@ (8003934 <ADC_ConfigureBoostMode+0x1c0>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d004      	beq.n	8003790 <ADC_ConfigureBoostMode+0x1c>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a6b      	ldr	r2, [pc, #428]	@ (8003938 <ADC_ConfigureBoostMode+0x1c4>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d109      	bne.n	80037a4 <ADC_ConfigureBoostMode+0x30>
 8003790:	4b6a      	ldr	r3, [pc, #424]	@ (800393c <ADC_ConfigureBoostMode+0x1c8>)
 8003792:	689b      	ldr	r3, [r3, #8]
 8003794:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003798:	2b00      	cmp	r3, #0
 800379a:	bf14      	ite	ne
 800379c:	2301      	movne	r3, #1
 800379e:	2300      	moveq	r3, #0
 80037a0:	b2db      	uxtb	r3, r3
 80037a2:	e008      	b.n	80037b6 <ADC_ConfigureBoostMode+0x42>
 80037a4:	4b66      	ldr	r3, [pc, #408]	@ (8003940 <ADC_ConfigureBoostMode+0x1cc>)
 80037a6:	689b      	ldr	r3, [r3, #8]
 80037a8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	bf14      	ite	ne
 80037b0:	2301      	movne	r3, #1
 80037b2:	2300      	moveq	r3, #0
 80037b4:	b2db      	uxtb	r3, r3
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d01c      	beq.n	80037f4 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80037ba:	f004 f933 	bl	8007a24 <HAL_RCC_GetHCLKFreq>
 80037be:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80037c8:	d010      	beq.n	80037ec <ADC_ConfigureBoostMode+0x78>
 80037ca:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80037ce:	d873      	bhi.n	80038b8 <ADC_ConfigureBoostMode+0x144>
 80037d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80037d4:	d002      	beq.n	80037dc <ADC_ConfigureBoostMode+0x68>
 80037d6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80037da:	d16d      	bne.n	80038b8 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	0c1b      	lsrs	r3, r3, #16
 80037e2:	68fa      	ldr	r2, [r7, #12]
 80037e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80037e8:	60fb      	str	r3, [r7, #12]
        break;
 80037ea:	e068      	b.n	80038be <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	089b      	lsrs	r3, r3, #2
 80037f0:	60fb      	str	r3, [r7, #12]
        break;
 80037f2:	e064      	b.n	80038be <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80037f4:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80037f8:	f04f 0100 	mov.w	r1, #0
 80037fc:	f005 fb0e 	bl	8008e1c <HAL_RCCEx_GetPeriphCLKFreq>
 8003800:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 800380a:	d051      	beq.n	80038b0 <ADC_ConfigureBoostMode+0x13c>
 800380c:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8003810:	d854      	bhi.n	80038bc <ADC_ConfigureBoostMode+0x148>
 8003812:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8003816:	d047      	beq.n	80038a8 <ADC_ConfigureBoostMode+0x134>
 8003818:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 800381c:	d84e      	bhi.n	80038bc <ADC_ConfigureBoostMode+0x148>
 800381e:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8003822:	d03d      	beq.n	80038a0 <ADC_ConfigureBoostMode+0x12c>
 8003824:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8003828:	d848      	bhi.n	80038bc <ADC_ConfigureBoostMode+0x148>
 800382a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800382e:	d033      	beq.n	8003898 <ADC_ConfigureBoostMode+0x124>
 8003830:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003834:	d842      	bhi.n	80038bc <ADC_ConfigureBoostMode+0x148>
 8003836:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 800383a:	d029      	beq.n	8003890 <ADC_ConfigureBoostMode+0x11c>
 800383c:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8003840:	d83c      	bhi.n	80038bc <ADC_ConfigureBoostMode+0x148>
 8003842:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8003846:	d01a      	beq.n	800387e <ADC_ConfigureBoostMode+0x10a>
 8003848:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800384c:	d836      	bhi.n	80038bc <ADC_ConfigureBoostMode+0x148>
 800384e:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8003852:	d014      	beq.n	800387e <ADC_ConfigureBoostMode+0x10a>
 8003854:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8003858:	d830      	bhi.n	80038bc <ADC_ConfigureBoostMode+0x148>
 800385a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800385e:	d00e      	beq.n	800387e <ADC_ConfigureBoostMode+0x10a>
 8003860:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003864:	d82a      	bhi.n	80038bc <ADC_ConfigureBoostMode+0x148>
 8003866:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800386a:	d008      	beq.n	800387e <ADC_ConfigureBoostMode+0x10a>
 800386c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003870:	d824      	bhi.n	80038bc <ADC_ConfigureBoostMode+0x148>
 8003872:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003876:	d002      	beq.n	800387e <ADC_ConfigureBoostMode+0x10a>
 8003878:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800387c:	d11e      	bne.n	80038bc <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	0c9b      	lsrs	r3, r3, #18
 8003884:	005b      	lsls	r3, r3, #1
 8003886:	68fa      	ldr	r2, [r7, #12]
 8003888:	fbb2 f3f3 	udiv	r3, r2, r3
 800388c:	60fb      	str	r3, [r7, #12]
        break;
 800388e:	e016      	b.n	80038be <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	091b      	lsrs	r3, r3, #4
 8003894:	60fb      	str	r3, [r7, #12]
        break;
 8003896:	e012      	b.n	80038be <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	095b      	lsrs	r3, r3, #5
 800389c:	60fb      	str	r3, [r7, #12]
        break;
 800389e:	e00e      	b.n	80038be <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	099b      	lsrs	r3, r3, #6
 80038a4:	60fb      	str	r3, [r7, #12]
        break;
 80038a6:	e00a      	b.n	80038be <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	09db      	lsrs	r3, r3, #7
 80038ac:	60fb      	str	r3, [r7, #12]
        break;
 80038ae:	e006      	b.n	80038be <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	0a1b      	lsrs	r3, r3, #8
 80038b4:	60fb      	str	r3, [r7, #12]
        break;
 80038b6:	e002      	b.n	80038be <ADC_ConfigureBoostMode+0x14a>
        break;
 80038b8:	bf00      	nop
 80038ba:	e000      	b.n	80038be <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 80038bc:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	085b      	lsrs	r3, r3, #1
 80038c2:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	4a1f      	ldr	r2, [pc, #124]	@ (8003944 <ADC_ConfigureBoostMode+0x1d0>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d808      	bhi.n	80038de <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	689a      	ldr	r2, [r3, #8]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80038da:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80038dc:	e025      	b.n	800392a <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	4a19      	ldr	r2, [pc, #100]	@ (8003948 <ADC_ConfigureBoostMode+0x1d4>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d80a      	bhi.n	80038fc <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80038f8:	609a      	str	r2, [r3, #8]
}
 80038fa:	e016      	b.n	800392a <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	4a13      	ldr	r2, [pc, #76]	@ (800394c <ADC_ConfigureBoostMode+0x1d8>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d80a      	bhi.n	800391a <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	689b      	ldr	r3, [r3, #8]
 800390a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003916:	609a      	str	r2, [r3, #8]
}
 8003918:	e007      	b.n	800392a <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	689a      	ldr	r2, [r3, #8]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8003928:	609a      	str	r2, [r3, #8]
}
 800392a:	bf00      	nop
 800392c:	3710      	adds	r7, #16
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}
 8003932:	bf00      	nop
 8003934:	40022000 	.word	0x40022000
 8003938:	40022100 	.word	0x40022100
 800393c:	40022300 	.word	0x40022300
 8003940:	58026300 	.word	0x58026300
 8003944:	005f5e10 	.word	0x005f5e10
 8003948:	00bebc20 	.word	0x00bebc20
 800394c:	017d7840 	.word	0x017d7840

08003950 <LL_ADC_IsEnabled>:
{
 8003950:	b480      	push	{r7}
 8003952:	b083      	sub	sp, #12
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	689b      	ldr	r3, [r3, #8]
 800395c:	f003 0301 	and.w	r3, r3, #1
 8003960:	2b01      	cmp	r3, #1
 8003962:	d101      	bne.n	8003968 <LL_ADC_IsEnabled+0x18>
 8003964:	2301      	movs	r3, #1
 8003966:	e000      	b.n	800396a <LL_ADC_IsEnabled+0x1a>
 8003968:	2300      	movs	r3, #0
}
 800396a:	4618      	mov	r0, r3
 800396c:	370c      	adds	r7, #12
 800396e:	46bd      	mov	sp, r7
 8003970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003974:	4770      	bx	lr

08003976 <LL_ADC_REG_IsConversionOngoing>:
{
 8003976:	b480      	push	{r7}
 8003978:	b083      	sub	sp, #12
 800397a:	af00      	add	r7, sp, #0
 800397c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	689b      	ldr	r3, [r3, #8]
 8003982:	f003 0304 	and.w	r3, r3, #4
 8003986:	2b04      	cmp	r3, #4
 8003988:	d101      	bne.n	800398e <LL_ADC_REG_IsConversionOngoing+0x18>
 800398a:	2301      	movs	r3, #1
 800398c:	e000      	b.n	8003990 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800398e:	2300      	movs	r3, #0
}
 8003990:	4618      	mov	r0, r3
 8003992:	370c      	adds	r7, #12
 8003994:	46bd      	mov	sp, r7
 8003996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399a:	4770      	bx	lr

0800399c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800399c:	b590      	push	{r4, r7, lr}
 800399e:	b0a3      	sub	sp, #140	@ 0x8c
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
 80039a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80039a6:	2300      	movs	r3, #0
 80039a8:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80039b2:	2b01      	cmp	r3, #1
 80039b4:	d101      	bne.n	80039ba <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80039b6:	2302      	movs	r3, #2
 80039b8:	e0c1      	b.n	8003b3e <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2201      	movs	r2, #1
 80039be:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80039c2:	2300      	movs	r3, #0
 80039c4:	66fb      	str	r3, [r7, #108]	@ 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80039c6:	2300      	movs	r3, #0
 80039c8:	673b      	str	r3, [r7, #112]	@ 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a5e      	ldr	r2, [pc, #376]	@ (8003b48 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d102      	bne.n	80039da <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80039d4:	4b5d      	ldr	r3, [pc, #372]	@ (8003b4c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80039d6:	60fb      	str	r3, [r7, #12]
 80039d8:	e001      	b.n	80039de <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80039da:	2300      	movs	r3, #0
 80039dc:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d10b      	bne.n	80039fc <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039e8:	f043 0220 	orr.w	r2, r3, #32
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2200      	movs	r2, #0
 80039f4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    return HAL_ERROR;
 80039f8:	2301      	movs	r3, #1
 80039fa:	e0a0      	b.n	8003b3e <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	4618      	mov	r0, r3
 8003a00:	f7ff ffb9 	bl	8003976 <LL_ADC_REG_IsConversionOngoing>
 8003a04:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f7ff ffb2 	bl	8003976 <LL_ADC_REG_IsConversionOngoing>
 8003a12:	4603      	mov	r3, r0
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	f040 8081 	bne.w	8003b1c <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003a1a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d17c      	bne.n	8003b1c <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a48      	ldr	r2, [pc, #288]	@ (8003b48 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d004      	beq.n	8003a36 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a46      	ldr	r2, [pc, #280]	@ (8003b4c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d101      	bne.n	8003a3a <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8003a36:	4b46      	ldr	r3, [pc, #280]	@ (8003b50 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003a38:	e000      	b.n	8003a3c <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8003a3a:	4b46      	ldr	r3, [pc, #280]	@ (8003b54 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003a3c:	67fb      	str	r3, [r7, #124]	@ 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d039      	beq.n	8003aba <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8003a46:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003a48:	689b      	ldr	r3, [r3, #8]
 8003a4a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	431a      	orrs	r2, r3
 8003a54:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003a56:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a3a      	ldr	r2, [pc, #232]	@ (8003b48 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d004      	beq.n	8003a6c <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a39      	ldr	r2, [pc, #228]	@ (8003b4c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d10e      	bne.n	8003a8a <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8003a6c:	4836      	ldr	r0, [pc, #216]	@ (8003b48 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003a6e:	f7ff ff6f 	bl	8003950 <LL_ADC_IsEnabled>
 8003a72:	4604      	mov	r4, r0
 8003a74:	4835      	ldr	r0, [pc, #212]	@ (8003b4c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003a76:	f7ff ff6b 	bl	8003950 <LL_ADC_IsEnabled>
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	4323      	orrs	r3, r4
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	bf0c      	ite	eq
 8003a82:	2301      	moveq	r3, #1
 8003a84:	2300      	movne	r3, #0
 8003a86:	b2db      	uxtb	r3, r3
 8003a88:	e008      	b.n	8003a9c <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8003a8a:	4833      	ldr	r0, [pc, #204]	@ (8003b58 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8003a8c:	f7ff ff60 	bl	8003950 <LL_ADC_IsEnabled>
 8003a90:	4603      	mov	r3, r0
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	bf0c      	ite	eq
 8003a96:	2301      	moveq	r3, #1
 8003a98:	2300      	movne	r3, #0
 8003a9a:	b2db      	uxtb	r3, r3
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d047      	beq.n	8003b30 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003aa0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003aa2:	689a      	ldr	r2, [r3, #8]
 8003aa4:	4b2d      	ldr	r3, [pc, #180]	@ (8003b5c <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8003aa6:	4013      	ands	r3, r2
 8003aa8:	683a      	ldr	r2, [r7, #0]
 8003aaa:	6811      	ldr	r1, [r2, #0]
 8003aac:	683a      	ldr	r2, [r7, #0]
 8003aae:	6892      	ldr	r2, [r2, #8]
 8003ab0:	430a      	orrs	r2, r1
 8003ab2:	431a      	orrs	r2, r3
 8003ab4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003ab6:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003ab8:	e03a      	b.n	8003b30 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8003aba:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003abc:	689b      	ldr	r3, [r3, #8]
 8003abe:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003ac2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003ac4:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4a1f      	ldr	r2, [pc, #124]	@ (8003b48 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d004      	beq.n	8003ada <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a1d      	ldr	r2, [pc, #116]	@ (8003b4c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d10e      	bne.n	8003af8 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 8003ada:	481b      	ldr	r0, [pc, #108]	@ (8003b48 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003adc:	f7ff ff38 	bl	8003950 <LL_ADC_IsEnabled>
 8003ae0:	4604      	mov	r4, r0
 8003ae2:	481a      	ldr	r0, [pc, #104]	@ (8003b4c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003ae4:	f7ff ff34 	bl	8003950 <LL_ADC_IsEnabled>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	4323      	orrs	r3, r4
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	bf0c      	ite	eq
 8003af0:	2301      	moveq	r3, #1
 8003af2:	2300      	movne	r3, #0
 8003af4:	b2db      	uxtb	r3, r3
 8003af6:	e008      	b.n	8003b0a <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 8003af8:	4817      	ldr	r0, [pc, #92]	@ (8003b58 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8003afa:	f7ff ff29 	bl	8003950 <LL_ADC_IsEnabled>
 8003afe:	4603      	mov	r3, r0
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	bf0c      	ite	eq
 8003b04:	2301      	moveq	r3, #1
 8003b06:	2300      	movne	r3, #0
 8003b08:	b2db      	uxtb	r3, r3
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d010      	beq.n	8003b30 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003b0e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003b10:	689a      	ldr	r2, [r3, #8]
 8003b12:	4b12      	ldr	r3, [pc, #72]	@ (8003b5c <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8003b14:	4013      	ands	r3, r2
 8003b16:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8003b18:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003b1a:	e009      	b.n	8003b30 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b20:	f043 0220 	orr.w	r2, r3, #32
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8003b2e:	e000      	b.n	8003b32 <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003b30:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2200      	movs	r2, #0
 8003b36:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8003b3a:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 8003b3e:	4618      	mov	r0, r3
 8003b40:	378c      	adds	r7, #140	@ 0x8c
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd90      	pop	{r4, r7, pc}
 8003b46:	bf00      	nop
 8003b48:	40022000 	.word	0x40022000
 8003b4c:	40022100 	.word	0x40022100
 8003b50:	40022300 	.word	0x40022300
 8003b54:	58026300 	.word	0x58026300
 8003b58:	58026000 	.word	0x58026000
 8003b5c:	fffff0e0 	.word	0xfffff0e0

08003b60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b60:	b480      	push	{r7}
 8003b62:	b085      	sub	sp, #20
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	f003 0307 	and.w	r3, r3, #7
 8003b6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003b70:	4b0b      	ldr	r3, [pc, #44]	@ (8003ba0 <__NVIC_SetPriorityGrouping+0x40>)
 8003b72:	68db      	ldr	r3, [r3, #12]
 8003b74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003b76:	68ba      	ldr	r2, [r7, #8]
 8003b78:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003b7c:	4013      	ands	r3, r2
 8003b7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003b88:	4b06      	ldr	r3, [pc, #24]	@ (8003ba4 <__NVIC_SetPriorityGrouping+0x44>)
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003b8e:	4a04      	ldr	r2, [pc, #16]	@ (8003ba0 <__NVIC_SetPriorityGrouping+0x40>)
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	60d3      	str	r3, [r2, #12]
}
 8003b94:	bf00      	nop
 8003b96:	3714      	adds	r7, #20
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9e:	4770      	bx	lr
 8003ba0:	e000ed00 	.word	0xe000ed00
 8003ba4:	05fa0000 	.word	0x05fa0000

08003ba8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003bac:	4b04      	ldr	r3, [pc, #16]	@ (8003bc0 <__NVIC_GetPriorityGrouping+0x18>)
 8003bae:	68db      	ldr	r3, [r3, #12]
 8003bb0:	0a1b      	lsrs	r3, r3, #8
 8003bb2:	f003 0307 	and.w	r3, r3, #7
}
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbe:	4770      	bx	lr
 8003bc0:	e000ed00 	.word	0xe000ed00

08003bc4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b083      	sub	sp, #12
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	4603      	mov	r3, r0
 8003bcc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003bce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	db0b      	blt.n	8003bee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003bd6:	88fb      	ldrh	r3, [r7, #6]
 8003bd8:	f003 021f 	and.w	r2, r3, #31
 8003bdc:	4907      	ldr	r1, [pc, #28]	@ (8003bfc <__NVIC_EnableIRQ+0x38>)
 8003bde:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003be2:	095b      	lsrs	r3, r3, #5
 8003be4:	2001      	movs	r0, #1
 8003be6:	fa00 f202 	lsl.w	r2, r0, r2
 8003bea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003bee:	bf00      	nop
 8003bf0:	370c      	adds	r7, #12
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf8:	4770      	bx	lr
 8003bfa:	bf00      	nop
 8003bfc:	e000e100 	.word	0xe000e100

08003c00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b083      	sub	sp, #12
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	4603      	mov	r3, r0
 8003c08:	6039      	str	r1, [r7, #0]
 8003c0a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003c0c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	db0a      	blt.n	8003c2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	b2da      	uxtb	r2, r3
 8003c18:	490c      	ldr	r1, [pc, #48]	@ (8003c4c <__NVIC_SetPriority+0x4c>)
 8003c1a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003c1e:	0112      	lsls	r2, r2, #4
 8003c20:	b2d2      	uxtb	r2, r2
 8003c22:	440b      	add	r3, r1
 8003c24:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003c28:	e00a      	b.n	8003c40 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	b2da      	uxtb	r2, r3
 8003c2e:	4908      	ldr	r1, [pc, #32]	@ (8003c50 <__NVIC_SetPriority+0x50>)
 8003c30:	88fb      	ldrh	r3, [r7, #6]
 8003c32:	f003 030f 	and.w	r3, r3, #15
 8003c36:	3b04      	subs	r3, #4
 8003c38:	0112      	lsls	r2, r2, #4
 8003c3a:	b2d2      	uxtb	r2, r2
 8003c3c:	440b      	add	r3, r1
 8003c3e:	761a      	strb	r2, [r3, #24]
}
 8003c40:	bf00      	nop
 8003c42:	370c      	adds	r7, #12
 8003c44:	46bd      	mov	sp, r7
 8003c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4a:	4770      	bx	lr
 8003c4c:	e000e100 	.word	0xe000e100
 8003c50:	e000ed00 	.word	0xe000ed00

08003c54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c54:	b480      	push	{r7}
 8003c56:	b089      	sub	sp, #36	@ 0x24
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	60f8      	str	r0, [r7, #12]
 8003c5c:	60b9      	str	r1, [r7, #8]
 8003c5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	f003 0307 	and.w	r3, r3, #7
 8003c66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003c68:	69fb      	ldr	r3, [r7, #28]
 8003c6a:	f1c3 0307 	rsb	r3, r3, #7
 8003c6e:	2b04      	cmp	r3, #4
 8003c70:	bf28      	it	cs
 8003c72:	2304      	movcs	r3, #4
 8003c74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c76:	69fb      	ldr	r3, [r7, #28]
 8003c78:	3304      	adds	r3, #4
 8003c7a:	2b06      	cmp	r3, #6
 8003c7c:	d902      	bls.n	8003c84 <NVIC_EncodePriority+0x30>
 8003c7e:	69fb      	ldr	r3, [r7, #28]
 8003c80:	3b03      	subs	r3, #3
 8003c82:	e000      	b.n	8003c86 <NVIC_EncodePriority+0x32>
 8003c84:	2300      	movs	r3, #0
 8003c86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c88:	f04f 32ff 	mov.w	r2, #4294967295
 8003c8c:	69bb      	ldr	r3, [r7, #24]
 8003c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c92:	43da      	mvns	r2, r3
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	401a      	ands	r2, r3
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003c9c:	f04f 31ff 	mov.w	r1, #4294967295
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	fa01 f303 	lsl.w	r3, r1, r3
 8003ca6:	43d9      	mvns	r1, r3
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003cac:	4313      	orrs	r3, r2
         );
}
 8003cae:	4618      	mov	r0, r3
 8003cb0:	3724      	adds	r7, #36	@ 0x24
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb8:	4770      	bx	lr
	...

08003cbc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b082      	sub	sp, #8
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	3b01      	subs	r3, #1
 8003cc8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003ccc:	d301      	bcc.n	8003cd2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003cce:	2301      	movs	r3, #1
 8003cd0:	e00f      	b.n	8003cf2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003cd2:	4a0a      	ldr	r2, [pc, #40]	@ (8003cfc <SysTick_Config+0x40>)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	3b01      	subs	r3, #1
 8003cd8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003cda:	210f      	movs	r1, #15
 8003cdc:	f04f 30ff 	mov.w	r0, #4294967295
 8003ce0:	f7ff ff8e 	bl	8003c00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003ce4:	4b05      	ldr	r3, [pc, #20]	@ (8003cfc <SysTick_Config+0x40>)
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003cea:	4b04      	ldr	r3, [pc, #16]	@ (8003cfc <SysTick_Config+0x40>)
 8003cec:	2207      	movs	r2, #7
 8003cee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003cf0:	2300      	movs	r3, #0
}
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	3708      	adds	r7, #8
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bd80      	pop	{r7, pc}
 8003cfa:	bf00      	nop
 8003cfc:	e000e010 	.word	0xe000e010

08003d00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b082      	sub	sp, #8
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003d08:	6878      	ldr	r0, [r7, #4]
 8003d0a:	f7ff ff29 	bl	8003b60 <__NVIC_SetPriorityGrouping>
}
 8003d0e:	bf00      	nop
 8003d10:	3708      	adds	r7, #8
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bd80      	pop	{r7, pc}

08003d16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d16:	b580      	push	{r7, lr}
 8003d18:	b086      	sub	sp, #24
 8003d1a:	af00      	add	r7, sp, #0
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	60b9      	str	r1, [r7, #8]
 8003d20:	607a      	str	r2, [r7, #4]
 8003d22:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003d24:	f7ff ff40 	bl	8003ba8 <__NVIC_GetPriorityGrouping>
 8003d28:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003d2a:	687a      	ldr	r2, [r7, #4]
 8003d2c:	68b9      	ldr	r1, [r7, #8]
 8003d2e:	6978      	ldr	r0, [r7, #20]
 8003d30:	f7ff ff90 	bl	8003c54 <NVIC_EncodePriority>
 8003d34:	4602      	mov	r2, r0
 8003d36:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003d3a:	4611      	mov	r1, r2
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	f7ff ff5f 	bl	8003c00 <__NVIC_SetPriority>
}
 8003d42:	bf00      	nop
 8003d44:	3718      	adds	r7, #24
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd80      	pop	{r7, pc}

08003d4a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d4a:	b580      	push	{r7, lr}
 8003d4c:	b082      	sub	sp, #8
 8003d4e:	af00      	add	r7, sp, #0
 8003d50:	4603      	mov	r3, r0
 8003d52:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003d54:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003d58:	4618      	mov	r0, r3
 8003d5a:	f7ff ff33 	bl	8003bc4 <__NVIC_EnableIRQ>
}
 8003d5e:	bf00      	nop
 8003d60:	3708      	adds	r7, #8
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd80      	pop	{r7, pc}

08003d66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003d66:	b580      	push	{r7, lr}
 8003d68:	b082      	sub	sp, #8
 8003d6a:	af00      	add	r7, sp, #0
 8003d6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003d6e:	6878      	ldr	r0, [r7, #4]
 8003d70:	f7ff ffa4 	bl	8003cbc <SysTick_Config>
 8003d74:	4603      	mov	r3, r0
}
 8003d76:	4618      	mov	r0, r3
 8003d78:	3708      	adds	r7, #8
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bd80      	pop	{r7, pc}
	...

08003d80 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8003d80:	b480      	push	{r7}
 8003d82:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8003d84:	f3bf 8f5f 	dmb	sy
}
 8003d88:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8003d8a:	4b07      	ldr	r3, [pc, #28]	@ (8003da8 <HAL_MPU_Disable+0x28>)
 8003d8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d8e:	4a06      	ldr	r2, [pc, #24]	@ (8003da8 <HAL_MPU_Disable+0x28>)
 8003d90:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d94:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8003d96:	4b05      	ldr	r3, [pc, #20]	@ (8003dac <HAL_MPU_Disable+0x2c>)
 8003d98:	2200      	movs	r2, #0
 8003d9a:	605a      	str	r2, [r3, #4]
}
 8003d9c:	bf00      	nop
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da4:	4770      	bx	lr
 8003da6:	bf00      	nop
 8003da8:	e000ed00 	.word	0xe000ed00
 8003dac:	e000ed90 	.word	0xe000ed90

08003db0 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8003db0:	b480      	push	{r7}
 8003db2:	b083      	sub	sp, #12
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8003db8:	4a0b      	ldr	r2, [pc, #44]	@ (8003de8 <HAL_MPU_Enable+0x38>)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	f043 0301 	orr.w	r3, r3, #1
 8003dc0:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8003dc2:	4b0a      	ldr	r3, [pc, #40]	@ (8003dec <HAL_MPU_Enable+0x3c>)
 8003dc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dc6:	4a09      	ldr	r2, [pc, #36]	@ (8003dec <HAL_MPU_Enable+0x3c>)
 8003dc8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003dcc:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8003dce:	f3bf 8f4f 	dsb	sy
}
 8003dd2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003dd4:	f3bf 8f6f 	isb	sy
}
 8003dd8:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8003dda:	bf00      	nop
 8003ddc:	370c      	adds	r7, #12
 8003dde:	46bd      	mov	sp, r7
 8003de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de4:	4770      	bx	lr
 8003de6:	bf00      	nop
 8003de8:	e000ed90 	.word	0xe000ed90
 8003dec:	e000ed00 	.word	0xe000ed00

08003df0 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8003df0:	b480      	push	{r7}
 8003df2:	b083      	sub	sp, #12
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	785a      	ldrb	r2, [r3, #1]
 8003dfc:	4b1b      	ldr	r3, [pc, #108]	@ (8003e6c <HAL_MPU_ConfigRegion+0x7c>)
 8003dfe:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8003e00:	4b1a      	ldr	r3, [pc, #104]	@ (8003e6c <HAL_MPU_ConfigRegion+0x7c>)
 8003e02:	691b      	ldr	r3, [r3, #16]
 8003e04:	4a19      	ldr	r2, [pc, #100]	@ (8003e6c <HAL_MPU_ConfigRegion+0x7c>)
 8003e06:	f023 0301 	bic.w	r3, r3, #1
 8003e0a:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8003e0c:	4a17      	ldr	r2, [pc, #92]	@ (8003e6c <HAL_MPU_ConfigRegion+0x7c>)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	7b1b      	ldrb	r3, [r3, #12]
 8003e18:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	7adb      	ldrb	r3, [r3, #11]
 8003e1e:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003e20:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	7a9b      	ldrb	r3, [r3, #10]
 8003e26:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003e28:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	7b5b      	ldrb	r3, [r3, #13]
 8003e2e:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003e30:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	7b9b      	ldrb	r3, [r3, #14]
 8003e36:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8003e38:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	7bdb      	ldrb	r3, [r3, #15]
 8003e3e:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8003e40:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	7a5b      	ldrb	r3, [r3, #9]
 8003e46:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003e48:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	7a1b      	ldrb	r3, [r3, #8]
 8003e4e:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8003e50:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8003e52:	687a      	ldr	r2, [r7, #4]
 8003e54:	7812      	ldrb	r2, [r2, #0]
 8003e56:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003e58:	4a04      	ldr	r2, [pc, #16]	@ (8003e6c <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003e5a:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003e5c:	6113      	str	r3, [r2, #16]
}
 8003e5e:	bf00      	nop
 8003e60:	370c      	adds	r7, #12
 8003e62:	46bd      	mov	sp, r7
 8003e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e68:	4770      	bx	lr
 8003e6a:	bf00      	nop
 8003e6c:	e000ed90 	.word	0xe000ed90

08003e70 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b082      	sub	sp, #8
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d101      	bne.n	8003e82 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	e014      	b.n	8003eac <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	791b      	ldrb	r3, [r3, #4]
 8003e86:	b2db      	uxtb	r3, r3
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d105      	bne.n	8003e98 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003e92:	6878      	ldr	r0, [r7, #4]
 8003e94:	f7fd fd62 	bl	800195c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2202      	movs	r2, #2
 8003e9c:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2201      	movs	r2, #1
 8003ea8:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003eaa:	2300      	movs	r3, #0
}
 8003eac:	4618      	mov	r0, r3
 8003eae:	3708      	adds	r7, #8
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	bd80      	pop	{r7, pc}

08003eb4 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b086      	sub	sp, #24
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	60f8      	str	r0, [r7, #12]
 8003ebc:	60b9      	str	r1, [r7, #8]
 8003ebe:	607a      	str	r2, [r7, #4]
 8003ec0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d101      	bne.n	8003ecc <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 8003ec8:	2301      	movs	r3, #1
 8003eca:	e0a2      	b.n	8004012 <HAL_DAC_Start_DMA+0x15e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	795b      	ldrb	r3, [r3, #5]
 8003ed0:	2b01      	cmp	r3, #1
 8003ed2:	d101      	bne.n	8003ed8 <HAL_DAC_Start_DMA+0x24>
 8003ed4:	2302      	movs	r3, #2
 8003ed6:	e09c      	b.n	8004012 <HAL_DAC_Start_DMA+0x15e>
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	2201      	movs	r2, #1
 8003edc:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	2202      	movs	r2, #2
 8003ee2:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d129      	bne.n	8003f3e <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	689b      	ldr	r3, [r3, #8]
 8003eee:	4a4b      	ldr	r2, [pc, #300]	@ (800401c <HAL_DAC_Start_DMA+0x168>)
 8003ef0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	4a4a      	ldr	r2, [pc, #296]	@ (8004020 <HAL_DAC_Start_DMA+0x16c>)
 8003ef8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	689b      	ldr	r3, [r3, #8]
 8003efe:	4a49      	ldr	r2, [pc, #292]	@ (8004024 <HAL_DAC_Start_DMA+0x170>)
 8003f00:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	681a      	ldr	r2, [r3, #0]
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003f10:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8003f12:	6a3b      	ldr	r3, [r7, #32]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d003      	beq.n	8003f20 <HAL_DAC_Start_DMA+0x6c>
 8003f18:	6a3b      	ldr	r3, [r7, #32]
 8003f1a:	2b04      	cmp	r3, #4
 8003f1c:	d005      	beq.n	8003f2a <HAL_DAC_Start_DMA+0x76>
 8003f1e:	e009      	b.n	8003f34 <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	3308      	adds	r3, #8
 8003f26:	613b      	str	r3, [r7, #16]
        break;
 8003f28:	e033      	b.n	8003f92 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	330c      	adds	r3, #12
 8003f30:	613b      	str	r3, [r7, #16]
        break;
 8003f32:	e02e      	b.n	8003f92 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	3310      	adds	r3, #16
 8003f3a:	613b      	str	r3, [r7, #16]
        break;
 8003f3c:	e029      	b.n	8003f92 <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	68db      	ldr	r3, [r3, #12]
 8003f42:	4a39      	ldr	r2, [pc, #228]	@ (8004028 <HAL_DAC_Start_DMA+0x174>)
 8003f44:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	68db      	ldr	r3, [r3, #12]
 8003f4a:	4a38      	ldr	r2, [pc, #224]	@ (800402c <HAL_DAC_Start_DMA+0x178>)
 8003f4c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	68db      	ldr	r3, [r3, #12]
 8003f52:	4a37      	ldr	r2, [pc, #220]	@ (8004030 <HAL_DAC_Start_DMA+0x17c>)
 8003f54:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	681a      	ldr	r2, [r3, #0]
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8003f64:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8003f66:	6a3b      	ldr	r3, [r7, #32]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d003      	beq.n	8003f74 <HAL_DAC_Start_DMA+0xc0>
 8003f6c:	6a3b      	ldr	r3, [r7, #32]
 8003f6e:	2b04      	cmp	r3, #4
 8003f70:	d005      	beq.n	8003f7e <HAL_DAC_Start_DMA+0xca>
 8003f72:	e009      	b.n	8003f88 <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	3314      	adds	r3, #20
 8003f7a:	613b      	str	r3, [r7, #16]
        break;
 8003f7c:	e009      	b.n	8003f92 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	3318      	adds	r3, #24
 8003f84:	613b      	str	r3, [r7, #16]
        break;
 8003f86:	e004      	b.n	8003f92 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	331c      	adds	r3, #28
 8003f8e:	613b      	str	r3, [r7, #16]
        break;
 8003f90:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 8003f92:	68bb      	ldr	r3, [r7, #8]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d111      	bne.n	8003fbc <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	681a      	ldr	r2, [r3, #0]
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003fa6:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	6898      	ldr	r0, [r3, #8]
 8003fac:	6879      	ldr	r1, [r7, #4]
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	693a      	ldr	r2, [r7, #16]
 8003fb2:	f000 fd81 	bl	8004ab8 <HAL_DMA_Start_IT>
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	75fb      	strb	r3, [r7, #23]
 8003fba:	e010      	b.n	8003fde <HAL_DAC_Start_DMA+0x12a>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	681a      	ldr	r2, [r3, #0]
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 8003fca:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	68d8      	ldr	r0, [r3, #12]
 8003fd0:	6879      	ldr	r1, [r7, #4]
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	693a      	ldr	r2, [r7, #16]
 8003fd6:	f000 fd6f 	bl	8004ab8 <HAL_DMA_Start_IT>
 8003fda:	4603      	mov	r3, r0
 8003fdc:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8003fe4:	7dfb      	ldrb	r3, [r7, #23]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d10c      	bne.n	8004004 <HAL_DAC_Start_DMA+0x150>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	6819      	ldr	r1, [r3, #0]
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	f003 0310 	and.w	r3, r3, #16
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	409a      	lsls	r2, r3
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	430a      	orrs	r2, r1
 8004000:	601a      	str	r2, [r3, #0]
 8004002:	e005      	b.n	8004010 <HAL_DAC_Start_DMA+0x15c>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	691b      	ldr	r3, [r3, #16]
 8004008:	f043 0204 	orr.w	r2, r3, #4
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8004010:	7dfb      	ldrb	r3, [r7, #23]
}
 8004012:	4618      	mov	r0, r3
 8004014:	3718      	adds	r7, #24
 8004016:	46bd      	mov	sp, r7
 8004018:	bd80      	pop	{r7, pc}
 800401a:	bf00      	nop
 800401c:	080042f5 	.word	0x080042f5
 8004020:	08004317 	.word	0x08004317
 8004024:	08004333 	.word	0x08004333
 8004028:	0800439d 	.word	0x0800439d
 800402c:	080043bf 	.word	0x080043bf
 8004030:	080043db 	.word	0x080043db

08004034 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004034:	b480      	push	{r7}
 8004036:	b083      	sub	sp, #12
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 800403c:	bf00      	nop
 800403e:	370c      	adds	r7, #12
 8004040:	46bd      	mov	sp, r7
 8004042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004046:	4770      	bx	lr

08004048 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004048:	b480      	push	{r7}
 800404a:	b083      	sub	sp, #12
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8004050:	bf00      	nop
 8004052:	370c      	adds	r7, #12
 8004054:	46bd      	mov	sp, r7
 8004056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405a:	4770      	bx	lr

0800405c <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800405c:	b480      	push	{r7}
 800405e:	b083      	sub	sp, #12
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8004064:	bf00      	nop
 8004066:	370c      	adds	r7, #12
 8004068:	46bd      	mov	sp, r7
 800406a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406e:	4770      	bx	lr

08004070 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b08a      	sub	sp, #40	@ 0x28
 8004074:	af00      	add	r7, sp, #0
 8004076:	60f8      	str	r0, [r7, #12]
 8004078:	60b9      	str	r1, [r7, #8]
 800407a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800407c:	2300      	movs	r3, #0
 800407e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d002      	beq.n	800408e <HAL_DAC_ConfigChannel+0x1e>
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d101      	bne.n	8004092 <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 800408e:	2301      	movs	r3, #1
 8004090:	e12a      	b.n	80042e8 <HAL_DAC_ConfigChannel+0x278>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	795b      	ldrb	r3, [r3, #5]
 8004096:	2b01      	cmp	r3, #1
 8004098:	d101      	bne.n	800409e <HAL_DAC_ConfigChannel+0x2e>
 800409a:	2302      	movs	r3, #2
 800409c:	e124      	b.n	80042e8 <HAL_DAC_ConfigChannel+0x278>
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	2201      	movs	r2, #1
 80040a2:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	2202      	movs	r2, #2
 80040a8:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80040aa:	68bb      	ldr	r3, [r7, #8]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	2b04      	cmp	r3, #4
 80040b0:	d17a      	bne.n	80041a8 <HAL_DAC_ConfigChannel+0x138>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80040b2:	f7fe f9b1 	bl	8002418 <HAL_GetTick>
 80040b6:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d13d      	bne.n	800413a <HAL_DAC_ConfigChannel+0xca>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80040be:	e018      	b.n	80040f2 <HAL_DAC_ConfigChannel+0x82>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80040c0:	f7fe f9aa 	bl	8002418 <HAL_GetTick>
 80040c4:	4602      	mov	r2, r0
 80040c6:	69fb      	ldr	r3, [r7, #28]
 80040c8:	1ad3      	subs	r3, r2, r3
 80040ca:	2b01      	cmp	r3, #1
 80040cc:	d911      	bls.n	80040f2 <HAL_DAC_ConfigChannel+0x82>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80040d4:	4b86      	ldr	r3, [pc, #536]	@ (80042f0 <HAL_DAC_ConfigChannel+0x280>)
 80040d6:	4013      	ands	r3, r2
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d00a      	beq.n	80040f2 <HAL_DAC_ConfigChannel+0x82>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	691b      	ldr	r3, [r3, #16]
 80040e0:	f043 0208 	orr.w	r2, r3, #8
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	2203      	movs	r2, #3
 80040ec:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80040ee:	2303      	movs	r3, #3
 80040f0:	e0fa      	b.n	80042e8 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80040f8:	4b7d      	ldr	r3, [pc, #500]	@ (80042f0 <HAL_DAC_ConfigChannel+0x280>)
 80040fa:	4013      	ands	r3, r2
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d1df      	bne.n	80040c0 <HAL_DAC_ConfigChannel+0x50>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	68ba      	ldr	r2, [r7, #8]
 8004106:	6992      	ldr	r2, [r2, #24]
 8004108:	641a      	str	r2, [r3, #64]	@ 0x40
 800410a:	e020      	b.n	800414e <HAL_DAC_ConfigChannel+0xde>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800410c:	f7fe f984 	bl	8002418 <HAL_GetTick>
 8004110:	4602      	mov	r2, r0
 8004112:	69fb      	ldr	r3, [r7, #28]
 8004114:	1ad3      	subs	r3, r2, r3
 8004116:	2b01      	cmp	r3, #1
 8004118:	d90f      	bls.n	800413a <HAL_DAC_ConfigChannel+0xca>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004120:	2b00      	cmp	r3, #0
 8004122:	da0a      	bge.n	800413a <HAL_DAC_ConfigChannel+0xca>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	691b      	ldr	r3, [r3, #16]
 8004128:	f043 0208 	orr.w	r2, r3, #8
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	2203      	movs	r2, #3
 8004134:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8004136:	2303      	movs	r3, #3
 8004138:	e0d6      	b.n	80042e8 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004140:	2b00      	cmp	r3, #0
 8004142:	dbe3      	blt.n	800410c <HAL_DAC_ConfigChannel+0x9c>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	68ba      	ldr	r2, [r7, #8]
 800414a:	6992      	ldr	r2, [r2, #24]
 800414c:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	f003 0310 	and.w	r3, r3, #16
 800415a:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 800415e:	fa01 f303 	lsl.w	r3, r1, r3
 8004162:	43db      	mvns	r3, r3
 8004164:	ea02 0103 	and.w	r1, r2, r3
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	69da      	ldr	r2, [r3, #28]
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	f003 0310 	and.w	r3, r3, #16
 8004172:	409a      	lsls	r2, r3
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	430a      	orrs	r2, r1
 800417a:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	f003 0310 	and.w	r3, r3, #16
 8004188:	21ff      	movs	r1, #255	@ 0xff
 800418a:	fa01 f303 	lsl.w	r3, r1, r3
 800418e:	43db      	mvns	r3, r3
 8004190:	ea02 0103 	and.w	r1, r2, r3
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	6a1a      	ldr	r2, [r3, #32]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	f003 0310 	and.w	r3, r3, #16
 800419e:	409a      	lsls	r2, r3
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	430a      	orrs	r2, r1
 80041a6:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80041a8:	68bb      	ldr	r3, [r7, #8]
 80041aa:	691b      	ldr	r3, [r3, #16]
 80041ac:	2b01      	cmp	r3, #1
 80041ae:	d11d      	bne.n	80041ec <HAL_DAC_ConfigChannel+0x17c>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041b6:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	f003 0310 	and.w	r3, r3, #16
 80041be:	221f      	movs	r2, #31
 80041c0:	fa02 f303 	lsl.w	r3, r2, r3
 80041c4:	43db      	mvns	r3, r3
 80041c6:	69ba      	ldr	r2, [r7, #24]
 80041c8:	4013      	ands	r3, r2
 80041ca:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	695b      	ldr	r3, [r3, #20]
 80041d0:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	f003 0310 	and.w	r3, r3, #16
 80041d8:	697a      	ldr	r2, [r7, #20]
 80041da:	fa02 f303 	lsl.w	r3, r2, r3
 80041de:	69ba      	ldr	r2, [r7, #24]
 80041e0:	4313      	orrs	r3, r2
 80041e2:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	69ba      	ldr	r2, [r7, #24]
 80041ea:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041f2:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	f003 0310 	and.w	r3, r3, #16
 80041fa:	2207      	movs	r2, #7
 80041fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004200:	43db      	mvns	r3, r3
 8004202:	69ba      	ldr	r2, [r7, #24]
 8004204:	4013      	ands	r3, r2
 8004206:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8004208:	68bb      	ldr	r3, [r7, #8]
 800420a:	68db      	ldr	r3, [r3, #12]
 800420c:	2b01      	cmp	r3, #1
 800420e:	d102      	bne.n	8004216 <HAL_DAC_ConfigChannel+0x1a6>
  {
    connectOnChip = 0x00000000UL;
 8004210:	2300      	movs	r3, #0
 8004212:	627b      	str	r3, [r7, #36]	@ 0x24
 8004214:	e00f      	b.n	8004236 <HAL_DAC_ConfigChannel+0x1c6>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8004216:	68bb      	ldr	r3, [r7, #8]
 8004218:	68db      	ldr	r3, [r3, #12]
 800421a:	2b02      	cmp	r3, #2
 800421c:	d102      	bne.n	8004224 <HAL_DAC_ConfigChannel+0x1b4>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 800421e:	2301      	movs	r3, #1
 8004220:	627b      	str	r3, [r7, #36]	@ 0x24
 8004222:	e008      	b.n	8004236 <HAL_DAC_ConfigChannel+0x1c6>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	689b      	ldr	r3, [r3, #8]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d102      	bne.n	8004232 <HAL_DAC_ConfigChannel+0x1c2>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 800422c:	2301      	movs	r3, #1
 800422e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004230:	e001      	b.n	8004236 <HAL_DAC_ConfigChannel+0x1c6>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8004232:	2300      	movs	r3, #0
 8004234:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	681a      	ldr	r2, [r3, #0]
 800423a:	68bb      	ldr	r3, [r7, #8]
 800423c:	689b      	ldr	r3, [r3, #8]
 800423e:	4313      	orrs	r3, r2
 8004240:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004242:	4313      	orrs	r3, r2
 8004244:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	f003 0310 	and.w	r3, r3, #16
 800424c:	697a      	ldr	r2, [r7, #20]
 800424e:	fa02 f303 	lsl.w	r3, r2, r3
 8004252:	69ba      	ldr	r2, [r7, #24]
 8004254:	4313      	orrs	r3, r2
 8004256:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	69ba      	ldr	r2, [r7, #24]
 800425e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	6819      	ldr	r1, [r3, #0]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	f003 0310 	and.w	r3, r3, #16
 800426c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8004270:	fa02 f303 	lsl.w	r3, r2, r3
 8004274:	43da      	mvns	r2, r3
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	400a      	ands	r2, r1
 800427c:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	f003 0310 	and.w	r3, r3, #16
 800428c:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8004290:	fa02 f303 	lsl.w	r3, r2, r3
 8004294:	43db      	mvns	r3, r3
 8004296:	69ba      	ldr	r2, [r7, #24]
 8004298:	4013      	ands	r3, r2
 800429a:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	685b      	ldr	r3, [r3, #4]
 80042a0:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	f003 0310 	and.w	r3, r3, #16
 80042a8:	697a      	ldr	r2, [r7, #20]
 80042aa:	fa02 f303 	lsl.w	r3, r2, r3
 80042ae:	69ba      	ldr	r2, [r7, #24]
 80042b0:	4313      	orrs	r3, r2
 80042b2:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	69ba      	ldr	r2, [r7, #24]
 80042ba:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	6819      	ldr	r1, [r3, #0]
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	f003 0310 	and.w	r3, r3, #16
 80042c8:	22c0      	movs	r2, #192	@ 0xc0
 80042ca:	fa02 f303 	lsl.w	r3, r2, r3
 80042ce:	43da      	mvns	r2, r3
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	400a      	ands	r2, r1
 80042d6:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	2201      	movs	r2, #1
 80042dc:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	2200      	movs	r2, #0
 80042e2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 80042e4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 80042e8:	4618      	mov	r0, r3
 80042ea:	3728      	adds	r7, #40	@ 0x28
 80042ec:	46bd      	mov	sp, r7
 80042ee:	bd80      	pop	{r7, pc}
 80042f0:	20008000 	.word	0x20008000

080042f4 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b084      	sub	sp, #16
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004300:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8004302:	68f8      	ldr	r0, [r7, #12]
 8004304:	f7ff fe96 	bl	8004034 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	2201      	movs	r2, #1
 800430c:	711a      	strb	r2, [r3, #4]
}
 800430e:	bf00      	nop
 8004310:	3710      	adds	r7, #16
 8004312:	46bd      	mov	sp, r7
 8004314:	bd80      	pop	{r7, pc}

08004316 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8004316:	b580      	push	{r7, lr}
 8004318:	b084      	sub	sp, #16
 800431a:	af00      	add	r7, sp, #0
 800431c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004322:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8004324:	68f8      	ldr	r0, [r7, #12]
 8004326:	f7ff fe8f 	bl	8004048 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800432a:	bf00      	nop
 800432c:	3710      	adds	r7, #16
 800432e:	46bd      	mov	sp, r7
 8004330:	bd80      	pop	{r7, pc}

08004332 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8004332:	b580      	push	{r7, lr}
 8004334:	b084      	sub	sp, #16
 8004336:	af00      	add	r7, sp, #0
 8004338:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800433e:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	691b      	ldr	r3, [r3, #16]
 8004344:	f043 0204 	orr.w	r2, r3, #4
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 800434c:	68f8      	ldr	r0, [r7, #12]
 800434e:	f7ff fe85 	bl	800405c <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	2201      	movs	r2, #1
 8004356:	711a      	strb	r2, [r3, #4]
}
 8004358:	bf00      	nop
 800435a:	3710      	adds	r7, #16
 800435c:	46bd      	mov	sp, r7
 800435e:	bd80      	pop	{r7, pc}

08004360 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004360:	b480      	push	{r7}
 8004362:	b083      	sub	sp, #12
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8004368:	bf00      	nop
 800436a:	370c      	adds	r7, #12
 800436c:	46bd      	mov	sp, r7
 800436e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004372:	4770      	bx	lr

08004374 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004374:	b480      	push	{r7}
 8004376:	b083      	sub	sp, #12
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 800437c:	bf00      	nop
 800437e:	370c      	adds	r7, #12
 8004380:	46bd      	mov	sp, r7
 8004382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004386:	4770      	bx	lr

08004388 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004388:	b480      	push	{r7}
 800438a:	b083      	sub	sp, #12
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8004390:	bf00      	nop
 8004392:	370c      	adds	r7, #12
 8004394:	46bd      	mov	sp, r7
 8004396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439a:	4770      	bx	lr

0800439c <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b084      	sub	sp, #16
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043a8:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 80043aa:	68f8      	ldr	r0, [r7, #12]
 80043ac:	f7ff ffd8 	bl	8004360 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	2201      	movs	r2, #1
 80043b4:	711a      	strb	r2, [r3, #4]
}
 80043b6:	bf00      	nop
 80043b8:	3710      	adds	r7, #16
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bd80      	pop	{r7, pc}

080043be <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80043be:	b580      	push	{r7, lr}
 80043c0:	b084      	sub	sp, #16
 80043c2:	af00      	add	r7, sp, #0
 80043c4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043ca:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 80043cc:	68f8      	ldr	r0, [r7, #12]
 80043ce:	f7ff ffd1 	bl	8004374 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80043d2:	bf00      	nop
 80043d4:	3710      	adds	r7, #16
 80043d6:	46bd      	mov	sp, r7
 80043d8:	bd80      	pop	{r7, pc}

080043da <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 80043da:	b580      	push	{r7, lr}
 80043dc:	b084      	sub	sp, #16
 80043de:	af00      	add	r7, sp, #0
 80043e0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043e6:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	691b      	ldr	r3, [r3, #16]
 80043ec:	f043 0204 	orr.w	r2, r3, #4
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 80043f4:	68f8      	ldr	r0, [r7, #12]
 80043f6:	f7ff ffc7 	bl	8004388 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	2201      	movs	r2, #1
 80043fe:	711a      	strb	r2, [r3, #4]
}
 8004400:	bf00      	nop
 8004402:	3710      	adds	r7, #16
 8004404:	46bd      	mov	sp, r7
 8004406:	bd80      	pop	{r7, pc}

08004408 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b086      	sub	sp, #24
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8004410:	f7fe f802 	bl	8002418 <HAL_GetTick>
 8004414:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d101      	bne.n	8004420 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800441c:	2301      	movs	r3, #1
 800441e:	e312      	b.n	8004a46 <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a66      	ldr	r2, [pc, #408]	@ (80045c0 <HAL_DMA_Init+0x1b8>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d04a      	beq.n	80044c0 <HAL_DMA_Init+0xb8>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a65      	ldr	r2, [pc, #404]	@ (80045c4 <HAL_DMA_Init+0x1bc>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d045      	beq.n	80044c0 <HAL_DMA_Init+0xb8>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a63      	ldr	r2, [pc, #396]	@ (80045c8 <HAL_DMA_Init+0x1c0>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d040      	beq.n	80044c0 <HAL_DMA_Init+0xb8>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4a62      	ldr	r2, [pc, #392]	@ (80045cc <HAL_DMA_Init+0x1c4>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d03b      	beq.n	80044c0 <HAL_DMA_Init+0xb8>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a60      	ldr	r2, [pc, #384]	@ (80045d0 <HAL_DMA_Init+0x1c8>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d036      	beq.n	80044c0 <HAL_DMA_Init+0xb8>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4a5f      	ldr	r2, [pc, #380]	@ (80045d4 <HAL_DMA_Init+0x1cc>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d031      	beq.n	80044c0 <HAL_DMA_Init+0xb8>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4a5d      	ldr	r2, [pc, #372]	@ (80045d8 <HAL_DMA_Init+0x1d0>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d02c      	beq.n	80044c0 <HAL_DMA_Init+0xb8>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4a5c      	ldr	r2, [pc, #368]	@ (80045dc <HAL_DMA_Init+0x1d4>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d027      	beq.n	80044c0 <HAL_DMA_Init+0xb8>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4a5a      	ldr	r2, [pc, #360]	@ (80045e0 <HAL_DMA_Init+0x1d8>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d022      	beq.n	80044c0 <HAL_DMA_Init+0xb8>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4a59      	ldr	r2, [pc, #356]	@ (80045e4 <HAL_DMA_Init+0x1dc>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d01d      	beq.n	80044c0 <HAL_DMA_Init+0xb8>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4a57      	ldr	r2, [pc, #348]	@ (80045e8 <HAL_DMA_Init+0x1e0>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d018      	beq.n	80044c0 <HAL_DMA_Init+0xb8>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4a56      	ldr	r2, [pc, #344]	@ (80045ec <HAL_DMA_Init+0x1e4>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d013      	beq.n	80044c0 <HAL_DMA_Init+0xb8>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4a54      	ldr	r2, [pc, #336]	@ (80045f0 <HAL_DMA_Init+0x1e8>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d00e      	beq.n	80044c0 <HAL_DMA_Init+0xb8>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4a53      	ldr	r2, [pc, #332]	@ (80045f4 <HAL_DMA_Init+0x1ec>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d009      	beq.n	80044c0 <HAL_DMA_Init+0xb8>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a51      	ldr	r2, [pc, #324]	@ (80045f8 <HAL_DMA_Init+0x1f0>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d004      	beq.n	80044c0 <HAL_DMA_Init+0xb8>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a50      	ldr	r2, [pc, #320]	@ (80045fc <HAL_DMA_Init+0x1f4>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d101      	bne.n	80044c4 <HAL_DMA_Init+0xbc>
 80044c0:	2301      	movs	r3, #1
 80044c2:	e000      	b.n	80044c6 <HAL_DMA_Init+0xbe>
 80044c4:	2300      	movs	r3, #0
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	f000 813c 	beq.w	8004744 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2202      	movs	r2, #2
 80044d0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2200      	movs	r2, #0
 80044d8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a37      	ldr	r2, [pc, #220]	@ (80045c0 <HAL_DMA_Init+0x1b8>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d04a      	beq.n	800457c <HAL_DMA_Init+0x174>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a36      	ldr	r2, [pc, #216]	@ (80045c4 <HAL_DMA_Init+0x1bc>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d045      	beq.n	800457c <HAL_DMA_Init+0x174>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a34      	ldr	r2, [pc, #208]	@ (80045c8 <HAL_DMA_Init+0x1c0>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d040      	beq.n	800457c <HAL_DMA_Init+0x174>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a33      	ldr	r2, [pc, #204]	@ (80045cc <HAL_DMA_Init+0x1c4>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d03b      	beq.n	800457c <HAL_DMA_Init+0x174>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a31      	ldr	r2, [pc, #196]	@ (80045d0 <HAL_DMA_Init+0x1c8>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d036      	beq.n	800457c <HAL_DMA_Init+0x174>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4a30      	ldr	r2, [pc, #192]	@ (80045d4 <HAL_DMA_Init+0x1cc>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d031      	beq.n	800457c <HAL_DMA_Init+0x174>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a2e      	ldr	r2, [pc, #184]	@ (80045d8 <HAL_DMA_Init+0x1d0>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d02c      	beq.n	800457c <HAL_DMA_Init+0x174>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4a2d      	ldr	r2, [pc, #180]	@ (80045dc <HAL_DMA_Init+0x1d4>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d027      	beq.n	800457c <HAL_DMA_Init+0x174>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4a2b      	ldr	r2, [pc, #172]	@ (80045e0 <HAL_DMA_Init+0x1d8>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d022      	beq.n	800457c <HAL_DMA_Init+0x174>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4a2a      	ldr	r2, [pc, #168]	@ (80045e4 <HAL_DMA_Init+0x1dc>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d01d      	beq.n	800457c <HAL_DMA_Init+0x174>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4a28      	ldr	r2, [pc, #160]	@ (80045e8 <HAL_DMA_Init+0x1e0>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d018      	beq.n	800457c <HAL_DMA_Init+0x174>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4a27      	ldr	r2, [pc, #156]	@ (80045ec <HAL_DMA_Init+0x1e4>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d013      	beq.n	800457c <HAL_DMA_Init+0x174>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a25      	ldr	r2, [pc, #148]	@ (80045f0 <HAL_DMA_Init+0x1e8>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d00e      	beq.n	800457c <HAL_DMA_Init+0x174>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4a24      	ldr	r2, [pc, #144]	@ (80045f4 <HAL_DMA_Init+0x1ec>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d009      	beq.n	800457c <HAL_DMA_Init+0x174>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4a22      	ldr	r2, [pc, #136]	@ (80045f8 <HAL_DMA_Init+0x1f0>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d004      	beq.n	800457c <HAL_DMA_Init+0x174>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4a21      	ldr	r2, [pc, #132]	@ (80045fc <HAL_DMA_Init+0x1f4>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d108      	bne.n	800458e <HAL_DMA_Init+0x186>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	681a      	ldr	r2, [r3, #0]
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f022 0201 	bic.w	r2, r2, #1
 800458a:	601a      	str	r2, [r3, #0]
 800458c:	e007      	b.n	800459e <HAL_DMA_Init+0x196>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	681a      	ldr	r2, [r3, #0]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f022 0201 	bic.w	r2, r2, #1
 800459c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800459e:	e02f      	b.n	8004600 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80045a0:	f7fd ff3a 	bl	8002418 <HAL_GetTick>
 80045a4:	4602      	mov	r2, r0
 80045a6:	693b      	ldr	r3, [r7, #16]
 80045a8:	1ad3      	subs	r3, r2, r3
 80045aa:	2b05      	cmp	r3, #5
 80045ac:	d928      	bls.n	8004600 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2220      	movs	r2, #32
 80045b2:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2203      	movs	r2, #3
 80045b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 80045bc:	2301      	movs	r3, #1
 80045be:	e242      	b.n	8004a46 <HAL_DMA_Init+0x63e>
 80045c0:	40020010 	.word	0x40020010
 80045c4:	40020028 	.word	0x40020028
 80045c8:	40020040 	.word	0x40020040
 80045cc:	40020058 	.word	0x40020058
 80045d0:	40020070 	.word	0x40020070
 80045d4:	40020088 	.word	0x40020088
 80045d8:	400200a0 	.word	0x400200a0
 80045dc:	400200b8 	.word	0x400200b8
 80045e0:	40020410 	.word	0x40020410
 80045e4:	40020428 	.word	0x40020428
 80045e8:	40020440 	.word	0x40020440
 80045ec:	40020458 	.word	0x40020458
 80045f0:	40020470 	.word	0x40020470
 80045f4:	40020488 	.word	0x40020488
 80045f8:	400204a0 	.word	0x400204a0
 80045fc:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f003 0301 	and.w	r3, r3, #1
 800460a:	2b00      	cmp	r3, #0
 800460c:	d1c8      	bne.n	80045a0 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004616:	697a      	ldr	r2, [r7, #20]
 8004618:	4b83      	ldr	r3, [pc, #524]	@ (8004828 <HAL_DMA_Init+0x420>)
 800461a:	4013      	ands	r3, r2
 800461c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8004626:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	691b      	ldr	r3, [r3, #16]
 800462c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004632:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	699b      	ldr	r3, [r3, #24]
 8004638:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800463e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6a1b      	ldr	r3, [r3, #32]
 8004644:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8004646:	697a      	ldr	r2, [r7, #20]
 8004648:	4313      	orrs	r3, r2
 800464a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004650:	2b04      	cmp	r3, #4
 8004652:	d107      	bne.n	8004664 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800465c:	4313      	orrs	r3, r2
 800465e:	697a      	ldr	r2, [r7, #20]
 8004660:	4313      	orrs	r3, r2
 8004662:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	685b      	ldr	r3, [r3, #4]
 8004668:	2b28      	cmp	r3, #40	@ 0x28
 800466a:	d903      	bls.n	8004674 <HAL_DMA_Init+0x26c>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	2b2e      	cmp	r3, #46	@ 0x2e
 8004672:	d91f      	bls.n	80046b4 <HAL_DMA_Init+0x2ac>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	2b3e      	cmp	r3, #62	@ 0x3e
 800467a:	d903      	bls.n	8004684 <HAL_DMA_Init+0x27c>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	2b42      	cmp	r3, #66	@ 0x42
 8004682:	d917      	bls.n	80046b4 <HAL_DMA_Init+0x2ac>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	2b46      	cmp	r3, #70	@ 0x46
 800468a:	d903      	bls.n	8004694 <HAL_DMA_Init+0x28c>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	685b      	ldr	r3, [r3, #4]
 8004690:	2b48      	cmp	r3, #72	@ 0x48
 8004692:	d90f      	bls.n	80046b4 <HAL_DMA_Init+0x2ac>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	685b      	ldr	r3, [r3, #4]
 8004698:	2b4e      	cmp	r3, #78	@ 0x4e
 800469a:	d903      	bls.n	80046a4 <HAL_DMA_Init+0x29c>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	2b52      	cmp	r3, #82	@ 0x52
 80046a2:	d907      	bls.n	80046b4 <HAL_DMA_Init+0x2ac>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	2b73      	cmp	r3, #115	@ 0x73
 80046aa:	d905      	bls.n	80046b8 <HAL_DMA_Init+0x2b0>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	685b      	ldr	r3, [r3, #4]
 80046b0:	2b77      	cmp	r3, #119	@ 0x77
 80046b2:	d801      	bhi.n	80046b8 <HAL_DMA_Init+0x2b0>
 80046b4:	2301      	movs	r3, #1
 80046b6:	e000      	b.n	80046ba <HAL_DMA_Init+0x2b2>
 80046b8:	2300      	movs	r3, #0
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d003      	beq.n	80046c6 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80046be:	697b      	ldr	r3, [r7, #20]
 80046c0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80046c4:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	697a      	ldr	r2, [r7, #20]
 80046cc:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	695b      	ldr	r3, [r3, #20]
 80046d4:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80046d6:	697b      	ldr	r3, [r7, #20]
 80046d8:	f023 0307 	bic.w	r3, r3, #7
 80046dc:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046e2:	697a      	ldr	r2, [r7, #20]
 80046e4:	4313      	orrs	r3, r2
 80046e6:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046ec:	2b04      	cmp	r3, #4
 80046ee:	d117      	bne.n	8004720 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046f4:	697a      	ldr	r2, [r7, #20]
 80046f6:	4313      	orrs	r3, r2
 80046f8:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d00e      	beq.n	8004720 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004702:	6878      	ldr	r0, [r7, #4]
 8004704:	f001 fdca 	bl	800629c <DMA_CheckFifoParam>
 8004708:	4603      	mov	r3, r0
 800470a:	2b00      	cmp	r3, #0
 800470c:	d008      	beq.n	8004720 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2240      	movs	r2, #64	@ 0x40
 8004712:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2201      	movs	r2, #1
 8004718:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 800471c:	2301      	movs	r3, #1
 800471e:	e192      	b.n	8004a46 <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	697a      	ldr	r2, [r7, #20]
 8004726:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004728:	6878      	ldr	r0, [r7, #4]
 800472a:	f001 fd05 	bl	8006138 <DMA_CalcBaseAndBitshift>
 800472e:	4603      	mov	r3, r0
 8004730:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004736:	f003 031f 	and.w	r3, r3, #31
 800473a:	223f      	movs	r2, #63	@ 0x3f
 800473c:	409a      	lsls	r2, r3
 800473e:	68bb      	ldr	r3, [r7, #8]
 8004740:	609a      	str	r2, [r3, #8]
 8004742:	e0c8      	b.n	80048d6 <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a38      	ldr	r2, [pc, #224]	@ (800482c <HAL_DMA_Init+0x424>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d022      	beq.n	8004794 <HAL_DMA_Init+0x38c>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4a37      	ldr	r2, [pc, #220]	@ (8004830 <HAL_DMA_Init+0x428>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d01d      	beq.n	8004794 <HAL_DMA_Init+0x38c>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a35      	ldr	r2, [pc, #212]	@ (8004834 <HAL_DMA_Init+0x42c>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d018      	beq.n	8004794 <HAL_DMA_Init+0x38c>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4a34      	ldr	r2, [pc, #208]	@ (8004838 <HAL_DMA_Init+0x430>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d013      	beq.n	8004794 <HAL_DMA_Init+0x38c>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4a32      	ldr	r2, [pc, #200]	@ (800483c <HAL_DMA_Init+0x434>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d00e      	beq.n	8004794 <HAL_DMA_Init+0x38c>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4a31      	ldr	r2, [pc, #196]	@ (8004840 <HAL_DMA_Init+0x438>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d009      	beq.n	8004794 <HAL_DMA_Init+0x38c>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a2f      	ldr	r2, [pc, #188]	@ (8004844 <HAL_DMA_Init+0x43c>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d004      	beq.n	8004794 <HAL_DMA_Init+0x38c>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4a2e      	ldr	r2, [pc, #184]	@ (8004848 <HAL_DMA_Init+0x440>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d101      	bne.n	8004798 <HAL_DMA_Init+0x390>
 8004794:	2301      	movs	r3, #1
 8004796:	e000      	b.n	800479a <HAL_DMA_Init+0x392>
 8004798:	2300      	movs	r3, #0
 800479a:	2b00      	cmp	r3, #0
 800479c:	f000 8092 	beq.w	80048c4 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4a21      	ldr	r2, [pc, #132]	@ (800482c <HAL_DMA_Init+0x424>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d021      	beq.n	80047ee <HAL_DMA_Init+0x3e6>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4a20      	ldr	r2, [pc, #128]	@ (8004830 <HAL_DMA_Init+0x428>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d01c      	beq.n	80047ee <HAL_DMA_Init+0x3e6>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a1e      	ldr	r2, [pc, #120]	@ (8004834 <HAL_DMA_Init+0x42c>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d017      	beq.n	80047ee <HAL_DMA_Init+0x3e6>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a1d      	ldr	r2, [pc, #116]	@ (8004838 <HAL_DMA_Init+0x430>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d012      	beq.n	80047ee <HAL_DMA_Init+0x3e6>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4a1b      	ldr	r2, [pc, #108]	@ (800483c <HAL_DMA_Init+0x434>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d00d      	beq.n	80047ee <HAL_DMA_Init+0x3e6>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a1a      	ldr	r2, [pc, #104]	@ (8004840 <HAL_DMA_Init+0x438>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d008      	beq.n	80047ee <HAL_DMA_Init+0x3e6>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a18      	ldr	r2, [pc, #96]	@ (8004844 <HAL_DMA_Init+0x43c>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d003      	beq.n	80047ee <HAL_DMA_Init+0x3e6>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4a17      	ldr	r2, [pc, #92]	@ (8004848 <HAL_DMA_Init+0x440>)
 80047ec:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2202      	movs	r2, #2
 80047f2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2200      	movs	r2, #0
 80047fa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8004806:	697a      	ldr	r2, [r7, #20]
 8004808:	4b10      	ldr	r3, [pc, #64]	@ (800484c <HAL_DMA_Init+0x444>)
 800480a:	4013      	ands	r3, r2
 800480c:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	689b      	ldr	r3, [r3, #8]
 8004812:	2b40      	cmp	r3, #64	@ 0x40
 8004814:	d01c      	beq.n	8004850 <HAL_DMA_Init+0x448>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	689b      	ldr	r3, [r3, #8]
 800481a:	2b80      	cmp	r3, #128	@ 0x80
 800481c:	d102      	bne.n	8004824 <HAL_DMA_Init+0x41c>
 800481e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004822:	e016      	b.n	8004852 <HAL_DMA_Init+0x44a>
 8004824:	2300      	movs	r3, #0
 8004826:	e014      	b.n	8004852 <HAL_DMA_Init+0x44a>
 8004828:	fe10803f 	.word	0xfe10803f
 800482c:	58025408 	.word	0x58025408
 8004830:	5802541c 	.word	0x5802541c
 8004834:	58025430 	.word	0x58025430
 8004838:	58025444 	.word	0x58025444
 800483c:	58025458 	.word	0x58025458
 8004840:	5802546c 	.word	0x5802546c
 8004844:	58025480 	.word	0x58025480
 8004848:	58025494 	.word	0x58025494
 800484c:	fffe000f 	.word	0xfffe000f
 8004850:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004852:	687a      	ldr	r2, [r7, #4]
 8004854:	68d2      	ldr	r2, [r2, #12]
 8004856:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004858:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	691b      	ldr	r3, [r3, #16]
 800485e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004860:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	695b      	ldr	r3, [r3, #20]
 8004866:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004868:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	699b      	ldr	r3, [r3, #24]
 800486e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004870:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	69db      	ldr	r3, [r3, #28]
 8004876:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004878:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6a1b      	ldr	r3, [r3, #32]
 800487e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004880:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004882:	697a      	ldr	r2, [r7, #20]
 8004884:	4313      	orrs	r3, r2
 8004886:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	697a      	ldr	r2, [r7, #20]
 800488e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	461a      	mov	r2, r3
 8004896:	4b6e      	ldr	r3, [pc, #440]	@ (8004a50 <HAL_DMA_Init+0x648>)
 8004898:	4413      	add	r3, r2
 800489a:	4a6e      	ldr	r2, [pc, #440]	@ (8004a54 <HAL_DMA_Init+0x64c>)
 800489c:	fba2 2303 	umull	r2, r3, r2, r3
 80048a0:	091b      	lsrs	r3, r3, #4
 80048a2:	009a      	lsls	r2, r3, #2
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80048a8:	6878      	ldr	r0, [r7, #4]
 80048aa:	f001 fc45 	bl	8006138 <DMA_CalcBaseAndBitshift>
 80048ae:	4603      	mov	r3, r0
 80048b0:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048b6:	f003 031f 	and.w	r3, r3, #31
 80048ba:	2201      	movs	r2, #1
 80048bc:	409a      	lsls	r2, r3
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	605a      	str	r2, [r3, #4]
 80048c2:	e008      	b.n	80048d6 <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2240      	movs	r2, #64	@ 0x40
 80048c8:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2203      	movs	r2, #3
 80048ce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 80048d2:	2301      	movs	r3, #1
 80048d4:	e0b7      	b.n	8004a46 <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4a5f      	ldr	r2, [pc, #380]	@ (8004a58 <HAL_DMA_Init+0x650>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d072      	beq.n	80049c6 <HAL_DMA_Init+0x5be>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4a5d      	ldr	r2, [pc, #372]	@ (8004a5c <HAL_DMA_Init+0x654>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d06d      	beq.n	80049c6 <HAL_DMA_Init+0x5be>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4a5c      	ldr	r2, [pc, #368]	@ (8004a60 <HAL_DMA_Init+0x658>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d068      	beq.n	80049c6 <HAL_DMA_Init+0x5be>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	4a5a      	ldr	r2, [pc, #360]	@ (8004a64 <HAL_DMA_Init+0x65c>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d063      	beq.n	80049c6 <HAL_DMA_Init+0x5be>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4a59      	ldr	r2, [pc, #356]	@ (8004a68 <HAL_DMA_Init+0x660>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d05e      	beq.n	80049c6 <HAL_DMA_Init+0x5be>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4a57      	ldr	r2, [pc, #348]	@ (8004a6c <HAL_DMA_Init+0x664>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d059      	beq.n	80049c6 <HAL_DMA_Init+0x5be>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4a56      	ldr	r2, [pc, #344]	@ (8004a70 <HAL_DMA_Init+0x668>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d054      	beq.n	80049c6 <HAL_DMA_Init+0x5be>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4a54      	ldr	r2, [pc, #336]	@ (8004a74 <HAL_DMA_Init+0x66c>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d04f      	beq.n	80049c6 <HAL_DMA_Init+0x5be>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4a53      	ldr	r2, [pc, #332]	@ (8004a78 <HAL_DMA_Init+0x670>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d04a      	beq.n	80049c6 <HAL_DMA_Init+0x5be>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4a51      	ldr	r2, [pc, #324]	@ (8004a7c <HAL_DMA_Init+0x674>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d045      	beq.n	80049c6 <HAL_DMA_Init+0x5be>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4a50      	ldr	r2, [pc, #320]	@ (8004a80 <HAL_DMA_Init+0x678>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d040      	beq.n	80049c6 <HAL_DMA_Init+0x5be>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4a4e      	ldr	r2, [pc, #312]	@ (8004a84 <HAL_DMA_Init+0x67c>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d03b      	beq.n	80049c6 <HAL_DMA_Init+0x5be>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4a4d      	ldr	r2, [pc, #308]	@ (8004a88 <HAL_DMA_Init+0x680>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d036      	beq.n	80049c6 <HAL_DMA_Init+0x5be>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a4b      	ldr	r2, [pc, #300]	@ (8004a8c <HAL_DMA_Init+0x684>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d031      	beq.n	80049c6 <HAL_DMA_Init+0x5be>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4a4a      	ldr	r2, [pc, #296]	@ (8004a90 <HAL_DMA_Init+0x688>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d02c      	beq.n	80049c6 <HAL_DMA_Init+0x5be>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4a48      	ldr	r2, [pc, #288]	@ (8004a94 <HAL_DMA_Init+0x68c>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d027      	beq.n	80049c6 <HAL_DMA_Init+0x5be>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4a47      	ldr	r2, [pc, #284]	@ (8004a98 <HAL_DMA_Init+0x690>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d022      	beq.n	80049c6 <HAL_DMA_Init+0x5be>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4a45      	ldr	r2, [pc, #276]	@ (8004a9c <HAL_DMA_Init+0x694>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d01d      	beq.n	80049c6 <HAL_DMA_Init+0x5be>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4a44      	ldr	r2, [pc, #272]	@ (8004aa0 <HAL_DMA_Init+0x698>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d018      	beq.n	80049c6 <HAL_DMA_Init+0x5be>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a42      	ldr	r2, [pc, #264]	@ (8004aa4 <HAL_DMA_Init+0x69c>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d013      	beq.n	80049c6 <HAL_DMA_Init+0x5be>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4a41      	ldr	r2, [pc, #260]	@ (8004aa8 <HAL_DMA_Init+0x6a0>)
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d00e      	beq.n	80049c6 <HAL_DMA_Init+0x5be>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	4a3f      	ldr	r2, [pc, #252]	@ (8004aac <HAL_DMA_Init+0x6a4>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d009      	beq.n	80049c6 <HAL_DMA_Init+0x5be>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4a3e      	ldr	r2, [pc, #248]	@ (8004ab0 <HAL_DMA_Init+0x6a8>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d004      	beq.n	80049c6 <HAL_DMA_Init+0x5be>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a3c      	ldr	r2, [pc, #240]	@ (8004ab4 <HAL_DMA_Init+0x6ac>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d101      	bne.n	80049ca <HAL_DMA_Init+0x5c2>
 80049c6:	2301      	movs	r3, #1
 80049c8:	e000      	b.n	80049cc <HAL_DMA_Init+0x5c4>
 80049ca:	2300      	movs	r3, #0
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d032      	beq.n	8004a36 <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80049d0:	6878      	ldr	r0, [r7, #4]
 80049d2:	f001 fcdf 	bl	8006394 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	689b      	ldr	r3, [r3, #8]
 80049da:	2b80      	cmp	r3, #128	@ 0x80
 80049dc:	d102      	bne.n	80049e4 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2200      	movs	r2, #0
 80049e2:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	685a      	ldr	r2, [r3, #4]
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80049ec:	b2d2      	uxtb	r2, r2
 80049ee:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80049f4:	687a      	ldr	r2, [r7, #4]
 80049f6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80049f8:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	685b      	ldr	r3, [r3, #4]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d010      	beq.n	8004a24 <HAL_DMA_Init+0x61c>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	2b08      	cmp	r3, #8
 8004a08:	d80c      	bhi.n	8004a24 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004a0a:	6878      	ldr	r0, [r7, #4]
 8004a0c:	f001 fd5c 	bl	80064c8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004a14:	2200      	movs	r2, #0
 8004a16:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a1c:	687a      	ldr	r2, [r7, #4]
 8004a1e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004a20:	605a      	str	r2, [r3, #4]
 8004a22:	e008      	b.n	8004a36 <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2200      	movs	r2, #0
 8004a28:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2200      	movs	r2, #0
 8004a34:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2200      	movs	r2, #0
 8004a3a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2201      	movs	r2, #1
 8004a40:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8004a44:	2300      	movs	r3, #0
}
 8004a46:	4618      	mov	r0, r3
 8004a48:	3718      	adds	r7, #24
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	bd80      	pop	{r7, pc}
 8004a4e:	bf00      	nop
 8004a50:	a7fdabf8 	.word	0xa7fdabf8
 8004a54:	cccccccd 	.word	0xcccccccd
 8004a58:	40020010 	.word	0x40020010
 8004a5c:	40020028 	.word	0x40020028
 8004a60:	40020040 	.word	0x40020040
 8004a64:	40020058 	.word	0x40020058
 8004a68:	40020070 	.word	0x40020070
 8004a6c:	40020088 	.word	0x40020088
 8004a70:	400200a0 	.word	0x400200a0
 8004a74:	400200b8 	.word	0x400200b8
 8004a78:	40020410 	.word	0x40020410
 8004a7c:	40020428 	.word	0x40020428
 8004a80:	40020440 	.word	0x40020440
 8004a84:	40020458 	.word	0x40020458
 8004a88:	40020470 	.word	0x40020470
 8004a8c:	40020488 	.word	0x40020488
 8004a90:	400204a0 	.word	0x400204a0
 8004a94:	400204b8 	.word	0x400204b8
 8004a98:	58025408 	.word	0x58025408
 8004a9c:	5802541c 	.word	0x5802541c
 8004aa0:	58025430 	.word	0x58025430
 8004aa4:	58025444 	.word	0x58025444
 8004aa8:	58025458 	.word	0x58025458
 8004aac:	5802546c 	.word	0x5802546c
 8004ab0:	58025480 	.word	0x58025480
 8004ab4:	58025494 	.word	0x58025494

08004ab8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b086      	sub	sp, #24
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	60f8      	str	r0, [r7, #12]
 8004ac0:	60b9      	str	r1, [r7, #8]
 8004ac2:	607a      	str	r2, [r7, #4]
 8004ac4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d101      	bne.n	8004ad4 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	e226      	b.n	8004f22 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004ada:	2b01      	cmp	r3, #1
 8004adc:	d101      	bne.n	8004ae2 <HAL_DMA_Start_IT+0x2a>
 8004ade:	2302      	movs	r3, #2
 8004ae0:	e21f      	b.n	8004f22 <HAL_DMA_Start_IT+0x46a>
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	2201      	movs	r2, #1
 8004ae6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004af0:	b2db      	uxtb	r3, r3
 8004af2:	2b01      	cmp	r3, #1
 8004af4:	f040 820a 	bne.w	8004f0c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	2202      	movs	r2, #2
 8004afc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	2200      	movs	r2, #0
 8004b04:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4a68      	ldr	r2, [pc, #416]	@ (8004cac <HAL_DMA_Start_IT+0x1f4>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d04a      	beq.n	8004ba6 <HAL_DMA_Start_IT+0xee>
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4a66      	ldr	r2, [pc, #408]	@ (8004cb0 <HAL_DMA_Start_IT+0x1f8>)
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d045      	beq.n	8004ba6 <HAL_DMA_Start_IT+0xee>
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4a65      	ldr	r2, [pc, #404]	@ (8004cb4 <HAL_DMA_Start_IT+0x1fc>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d040      	beq.n	8004ba6 <HAL_DMA_Start_IT+0xee>
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4a63      	ldr	r2, [pc, #396]	@ (8004cb8 <HAL_DMA_Start_IT+0x200>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d03b      	beq.n	8004ba6 <HAL_DMA_Start_IT+0xee>
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4a62      	ldr	r2, [pc, #392]	@ (8004cbc <HAL_DMA_Start_IT+0x204>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d036      	beq.n	8004ba6 <HAL_DMA_Start_IT+0xee>
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4a60      	ldr	r2, [pc, #384]	@ (8004cc0 <HAL_DMA_Start_IT+0x208>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d031      	beq.n	8004ba6 <HAL_DMA_Start_IT+0xee>
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4a5f      	ldr	r2, [pc, #380]	@ (8004cc4 <HAL_DMA_Start_IT+0x20c>)
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d02c      	beq.n	8004ba6 <HAL_DMA_Start_IT+0xee>
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4a5d      	ldr	r2, [pc, #372]	@ (8004cc8 <HAL_DMA_Start_IT+0x210>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d027      	beq.n	8004ba6 <HAL_DMA_Start_IT+0xee>
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4a5c      	ldr	r2, [pc, #368]	@ (8004ccc <HAL_DMA_Start_IT+0x214>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d022      	beq.n	8004ba6 <HAL_DMA_Start_IT+0xee>
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	4a5a      	ldr	r2, [pc, #360]	@ (8004cd0 <HAL_DMA_Start_IT+0x218>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d01d      	beq.n	8004ba6 <HAL_DMA_Start_IT+0xee>
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4a59      	ldr	r2, [pc, #356]	@ (8004cd4 <HAL_DMA_Start_IT+0x21c>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d018      	beq.n	8004ba6 <HAL_DMA_Start_IT+0xee>
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4a57      	ldr	r2, [pc, #348]	@ (8004cd8 <HAL_DMA_Start_IT+0x220>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d013      	beq.n	8004ba6 <HAL_DMA_Start_IT+0xee>
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	4a56      	ldr	r2, [pc, #344]	@ (8004cdc <HAL_DMA_Start_IT+0x224>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d00e      	beq.n	8004ba6 <HAL_DMA_Start_IT+0xee>
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4a54      	ldr	r2, [pc, #336]	@ (8004ce0 <HAL_DMA_Start_IT+0x228>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d009      	beq.n	8004ba6 <HAL_DMA_Start_IT+0xee>
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4a53      	ldr	r2, [pc, #332]	@ (8004ce4 <HAL_DMA_Start_IT+0x22c>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d004      	beq.n	8004ba6 <HAL_DMA_Start_IT+0xee>
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a51      	ldr	r2, [pc, #324]	@ (8004ce8 <HAL_DMA_Start_IT+0x230>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d108      	bne.n	8004bb8 <HAL_DMA_Start_IT+0x100>
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	681a      	ldr	r2, [r3, #0]
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f022 0201 	bic.w	r2, r2, #1
 8004bb4:	601a      	str	r2, [r3, #0]
 8004bb6:	e007      	b.n	8004bc8 <HAL_DMA_Start_IT+0x110>
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	681a      	ldr	r2, [r3, #0]
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f022 0201 	bic.w	r2, r2, #1
 8004bc6:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	687a      	ldr	r2, [r7, #4]
 8004bcc:	68b9      	ldr	r1, [r7, #8]
 8004bce:	68f8      	ldr	r0, [r7, #12]
 8004bd0:	f001 f906 	bl	8005de0 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4a34      	ldr	r2, [pc, #208]	@ (8004cac <HAL_DMA_Start_IT+0x1f4>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d04a      	beq.n	8004c74 <HAL_DMA_Start_IT+0x1bc>
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4a33      	ldr	r2, [pc, #204]	@ (8004cb0 <HAL_DMA_Start_IT+0x1f8>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d045      	beq.n	8004c74 <HAL_DMA_Start_IT+0x1bc>
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4a31      	ldr	r2, [pc, #196]	@ (8004cb4 <HAL_DMA_Start_IT+0x1fc>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d040      	beq.n	8004c74 <HAL_DMA_Start_IT+0x1bc>
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4a30      	ldr	r2, [pc, #192]	@ (8004cb8 <HAL_DMA_Start_IT+0x200>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d03b      	beq.n	8004c74 <HAL_DMA_Start_IT+0x1bc>
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4a2e      	ldr	r2, [pc, #184]	@ (8004cbc <HAL_DMA_Start_IT+0x204>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d036      	beq.n	8004c74 <HAL_DMA_Start_IT+0x1bc>
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4a2d      	ldr	r2, [pc, #180]	@ (8004cc0 <HAL_DMA_Start_IT+0x208>)
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d031      	beq.n	8004c74 <HAL_DMA_Start_IT+0x1bc>
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4a2b      	ldr	r2, [pc, #172]	@ (8004cc4 <HAL_DMA_Start_IT+0x20c>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d02c      	beq.n	8004c74 <HAL_DMA_Start_IT+0x1bc>
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	4a2a      	ldr	r2, [pc, #168]	@ (8004cc8 <HAL_DMA_Start_IT+0x210>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d027      	beq.n	8004c74 <HAL_DMA_Start_IT+0x1bc>
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4a28      	ldr	r2, [pc, #160]	@ (8004ccc <HAL_DMA_Start_IT+0x214>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d022      	beq.n	8004c74 <HAL_DMA_Start_IT+0x1bc>
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4a27      	ldr	r2, [pc, #156]	@ (8004cd0 <HAL_DMA_Start_IT+0x218>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d01d      	beq.n	8004c74 <HAL_DMA_Start_IT+0x1bc>
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a25      	ldr	r2, [pc, #148]	@ (8004cd4 <HAL_DMA_Start_IT+0x21c>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d018      	beq.n	8004c74 <HAL_DMA_Start_IT+0x1bc>
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	4a24      	ldr	r2, [pc, #144]	@ (8004cd8 <HAL_DMA_Start_IT+0x220>)
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d013      	beq.n	8004c74 <HAL_DMA_Start_IT+0x1bc>
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4a22      	ldr	r2, [pc, #136]	@ (8004cdc <HAL_DMA_Start_IT+0x224>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d00e      	beq.n	8004c74 <HAL_DMA_Start_IT+0x1bc>
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4a21      	ldr	r2, [pc, #132]	@ (8004ce0 <HAL_DMA_Start_IT+0x228>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d009      	beq.n	8004c74 <HAL_DMA_Start_IT+0x1bc>
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4a1f      	ldr	r2, [pc, #124]	@ (8004ce4 <HAL_DMA_Start_IT+0x22c>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d004      	beq.n	8004c74 <HAL_DMA_Start_IT+0x1bc>
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4a1e      	ldr	r2, [pc, #120]	@ (8004ce8 <HAL_DMA_Start_IT+0x230>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d101      	bne.n	8004c78 <HAL_DMA_Start_IT+0x1c0>
 8004c74:	2301      	movs	r3, #1
 8004c76:	e000      	b.n	8004c7a <HAL_DMA_Start_IT+0x1c2>
 8004c78:	2300      	movs	r3, #0
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d036      	beq.n	8004cec <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f023 021e 	bic.w	r2, r3, #30
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f042 0216 	orr.w	r2, r2, #22
 8004c90:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d03e      	beq.n	8004d18 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	681a      	ldr	r2, [r3, #0]
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f042 0208 	orr.w	r2, r2, #8
 8004ca8:	601a      	str	r2, [r3, #0]
 8004caa:	e035      	b.n	8004d18 <HAL_DMA_Start_IT+0x260>
 8004cac:	40020010 	.word	0x40020010
 8004cb0:	40020028 	.word	0x40020028
 8004cb4:	40020040 	.word	0x40020040
 8004cb8:	40020058 	.word	0x40020058
 8004cbc:	40020070 	.word	0x40020070
 8004cc0:	40020088 	.word	0x40020088
 8004cc4:	400200a0 	.word	0x400200a0
 8004cc8:	400200b8 	.word	0x400200b8
 8004ccc:	40020410 	.word	0x40020410
 8004cd0:	40020428 	.word	0x40020428
 8004cd4:	40020440 	.word	0x40020440
 8004cd8:	40020458 	.word	0x40020458
 8004cdc:	40020470 	.word	0x40020470
 8004ce0:	40020488 	.word	0x40020488
 8004ce4:	400204a0 	.word	0x400204a0
 8004ce8:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f023 020e 	bic.w	r2, r3, #14
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f042 020a 	orr.w	r2, r2, #10
 8004cfe:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d007      	beq.n	8004d18 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	681a      	ldr	r2, [r3, #0]
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f042 0204 	orr.w	r2, r2, #4
 8004d16:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4a83      	ldr	r2, [pc, #524]	@ (8004f2c <HAL_DMA_Start_IT+0x474>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d072      	beq.n	8004e08 <HAL_DMA_Start_IT+0x350>
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4a82      	ldr	r2, [pc, #520]	@ (8004f30 <HAL_DMA_Start_IT+0x478>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d06d      	beq.n	8004e08 <HAL_DMA_Start_IT+0x350>
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a80      	ldr	r2, [pc, #512]	@ (8004f34 <HAL_DMA_Start_IT+0x47c>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d068      	beq.n	8004e08 <HAL_DMA_Start_IT+0x350>
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4a7f      	ldr	r2, [pc, #508]	@ (8004f38 <HAL_DMA_Start_IT+0x480>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d063      	beq.n	8004e08 <HAL_DMA_Start_IT+0x350>
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a7d      	ldr	r2, [pc, #500]	@ (8004f3c <HAL_DMA_Start_IT+0x484>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d05e      	beq.n	8004e08 <HAL_DMA_Start_IT+0x350>
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4a7c      	ldr	r2, [pc, #496]	@ (8004f40 <HAL_DMA_Start_IT+0x488>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d059      	beq.n	8004e08 <HAL_DMA_Start_IT+0x350>
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4a7a      	ldr	r2, [pc, #488]	@ (8004f44 <HAL_DMA_Start_IT+0x48c>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d054      	beq.n	8004e08 <HAL_DMA_Start_IT+0x350>
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4a79      	ldr	r2, [pc, #484]	@ (8004f48 <HAL_DMA_Start_IT+0x490>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d04f      	beq.n	8004e08 <HAL_DMA_Start_IT+0x350>
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4a77      	ldr	r2, [pc, #476]	@ (8004f4c <HAL_DMA_Start_IT+0x494>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d04a      	beq.n	8004e08 <HAL_DMA_Start_IT+0x350>
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4a76      	ldr	r2, [pc, #472]	@ (8004f50 <HAL_DMA_Start_IT+0x498>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d045      	beq.n	8004e08 <HAL_DMA_Start_IT+0x350>
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4a74      	ldr	r2, [pc, #464]	@ (8004f54 <HAL_DMA_Start_IT+0x49c>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d040      	beq.n	8004e08 <HAL_DMA_Start_IT+0x350>
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a73      	ldr	r2, [pc, #460]	@ (8004f58 <HAL_DMA_Start_IT+0x4a0>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d03b      	beq.n	8004e08 <HAL_DMA_Start_IT+0x350>
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4a71      	ldr	r2, [pc, #452]	@ (8004f5c <HAL_DMA_Start_IT+0x4a4>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d036      	beq.n	8004e08 <HAL_DMA_Start_IT+0x350>
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4a70      	ldr	r2, [pc, #448]	@ (8004f60 <HAL_DMA_Start_IT+0x4a8>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d031      	beq.n	8004e08 <HAL_DMA_Start_IT+0x350>
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4a6e      	ldr	r2, [pc, #440]	@ (8004f64 <HAL_DMA_Start_IT+0x4ac>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d02c      	beq.n	8004e08 <HAL_DMA_Start_IT+0x350>
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4a6d      	ldr	r2, [pc, #436]	@ (8004f68 <HAL_DMA_Start_IT+0x4b0>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d027      	beq.n	8004e08 <HAL_DMA_Start_IT+0x350>
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4a6b      	ldr	r2, [pc, #428]	@ (8004f6c <HAL_DMA_Start_IT+0x4b4>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d022      	beq.n	8004e08 <HAL_DMA_Start_IT+0x350>
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4a6a      	ldr	r2, [pc, #424]	@ (8004f70 <HAL_DMA_Start_IT+0x4b8>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d01d      	beq.n	8004e08 <HAL_DMA_Start_IT+0x350>
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a68      	ldr	r2, [pc, #416]	@ (8004f74 <HAL_DMA_Start_IT+0x4bc>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d018      	beq.n	8004e08 <HAL_DMA_Start_IT+0x350>
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4a67      	ldr	r2, [pc, #412]	@ (8004f78 <HAL_DMA_Start_IT+0x4c0>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d013      	beq.n	8004e08 <HAL_DMA_Start_IT+0x350>
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4a65      	ldr	r2, [pc, #404]	@ (8004f7c <HAL_DMA_Start_IT+0x4c4>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d00e      	beq.n	8004e08 <HAL_DMA_Start_IT+0x350>
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4a64      	ldr	r2, [pc, #400]	@ (8004f80 <HAL_DMA_Start_IT+0x4c8>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d009      	beq.n	8004e08 <HAL_DMA_Start_IT+0x350>
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4a62      	ldr	r2, [pc, #392]	@ (8004f84 <HAL_DMA_Start_IT+0x4cc>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d004      	beq.n	8004e08 <HAL_DMA_Start_IT+0x350>
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	4a61      	ldr	r2, [pc, #388]	@ (8004f88 <HAL_DMA_Start_IT+0x4d0>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d101      	bne.n	8004e0c <HAL_DMA_Start_IT+0x354>
 8004e08:	2301      	movs	r3, #1
 8004e0a:	e000      	b.n	8004e0e <HAL_DMA_Start_IT+0x356>
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d01a      	beq.n	8004e48 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d007      	beq.n	8004e30 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e24:	681a      	ldr	r2, [r3, #0]
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e2a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004e2e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d007      	beq.n	8004e48 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004e3c:	681a      	ldr	r2, [r3, #0]
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004e42:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004e46:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4a37      	ldr	r2, [pc, #220]	@ (8004f2c <HAL_DMA_Start_IT+0x474>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d04a      	beq.n	8004ee8 <HAL_DMA_Start_IT+0x430>
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4a36      	ldr	r2, [pc, #216]	@ (8004f30 <HAL_DMA_Start_IT+0x478>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d045      	beq.n	8004ee8 <HAL_DMA_Start_IT+0x430>
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a34      	ldr	r2, [pc, #208]	@ (8004f34 <HAL_DMA_Start_IT+0x47c>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d040      	beq.n	8004ee8 <HAL_DMA_Start_IT+0x430>
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4a33      	ldr	r2, [pc, #204]	@ (8004f38 <HAL_DMA_Start_IT+0x480>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d03b      	beq.n	8004ee8 <HAL_DMA_Start_IT+0x430>
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4a31      	ldr	r2, [pc, #196]	@ (8004f3c <HAL_DMA_Start_IT+0x484>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d036      	beq.n	8004ee8 <HAL_DMA_Start_IT+0x430>
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4a30      	ldr	r2, [pc, #192]	@ (8004f40 <HAL_DMA_Start_IT+0x488>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d031      	beq.n	8004ee8 <HAL_DMA_Start_IT+0x430>
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4a2e      	ldr	r2, [pc, #184]	@ (8004f44 <HAL_DMA_Start_IT+0x48c>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d02c      	beq.n	8004ee8 <HAL_DMA_Start_IT+0x430>
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4a2d      	ldr	r2, [pc, #180]	@ (8004f48 <HAL_DMA_Start_IT+0x490>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d027      	beq.n	8004ee8 <HAL_DMA_Start_IT+0x430>
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4a2b      	ldr	r2, [pc, #172]	@ (8004f4c <HAL_DMA_Start_IT+0x494>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d022      	beq.n	8004ee8 <HAL_DMA_Start_IT+0x430>
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4a2a      	ldr	r2, [pc, #168]	@ (8004f50 <HAL_DMA_Start_IT+0x498>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d01d      	beq.n	8004ee8 <HAL_DMA_Start_IT+0x430>
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4a28      	ldr	r2, [pc, #160]	@ (8004f54 <HAL_DMA_Start_IT+0x49c>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d018      	beq.n	8004ee8 <HAL_DMA_Start_IT+0x430>
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4a27      	ldr	r2, [pc, #156]	@ (8004f58 <HAL_DMA_Start_IT+0x4a0>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d013      	beq.n	8004ee8 <HAL_DMA_Start_IT+0x430>
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4a25      	ldr	r2, [pc, #148]	@ (8004f5c <HAL_DMA_Start_IT+0x4a4>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d00e      	beq.n	8004ee8 <HAL_DMA_Start_IT+0x430>
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4a24      	ldr	r2, [pc, #144]	@ (8004f60 <HAL_DMA_Start_IT+0x4a8>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d009      	beq.n	8004ee8 <HAL_DMA_Start_IT+0x430>
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a22      	ldr	r2, [pc, #136]	@ (8004f64 <HAL_DMA_Start_IT+0x4ac>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d004      	beq.n	8004ee8 <HAL_DMA_Start_IT+0x430>
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4a21      	ldr	r2, [pc, #132]	@ (8004f68 <HAL_DMA_Start_IT+0x4b0>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d108      	bne.n	8004efa <HAL_DMA_Start_IT+0x442>
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	681a      	ldr	r2, [r3, #0]
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f042 0201 	orr.w	r2, r2, #1
 8004ef6:	601a      	str	r2, [r3, #0]
 8004ef8:	e012      	b.n	8004f20 <HAL_DMA_Start_IT+0x468>
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	681a      	ldr	r2, [r3, #0]
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f042 0201 	orr.w	r2, r2, #1
 8004f08:	601a      	str	r2, [r3, #0]
 8004f0a:	e009      	b.n	8004f20 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004f12:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	2200      	movs	r2, #0
 8004f18:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004f20:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f22:	4618      	mov	r0, r3
 8004f24:	3718      	adds	r7, #24
 8004f26:	46bd      	mov	sp, r7
 8004f28:	bd80      	pop	{r7, pc}
 8004f2a:	bf00      	nop
 8004f2c:	40020010 	.word	0x40020010
 8004f30:	40020028 	.word	0x40020028
 8004f34:	40020040 	.word	0x40020040
 8004f38:	40020058 	.word	0x40020058
 8004f3c:	40020070 	.word	0x40020070
 8004f40:	40020088 	.word	0x40020088
 8004f44:	400200a0 	.word	0x400200a0
 8004f48:	400200b8 	.word	0x400200b8
 8004f4c:	40020410 	.word	0x40020410
 8004f50:	40020428 	.word	0x40020428
 8004f54:	40020440 	.word	0x40020440
 8004f58:	40020458 	.word	0x40020458
 8004f5c:	40020470 	.word	0x40020470
 8004f60:	40020488 	.word	0x40020488
 8004f64:	400204a0 	.word	0x400204a0
 8004f68:	400204b8 	.word	0x400204b8
 8004f6c:	58025408 	.word	0x58025408
 8004f70:	5802541c 	.word	0x5802541c
 8004f74:	58025430 	.word	0x58025430
 8004f78:	58025444 	.word	0x58025444
 8004f7c:	58025458 	.word	0x58025458
 8004f80:	5802546c 	.word	0x5802546c
 8004f84:	58025480 	.word	0x58025480
 8004f88:	58025494 	.word	0x58025494

08004f8c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b08a      	sub	sp, #40	@ 0x28
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8004f94:	2300      	movs	r3, #0
 8004f96:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004f98:	4b67      	ldr	r3, [pc, #412]	@ (8005138 <HAL_DMA_IRQHandler+0x1ac>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	4a67      	ldr	r2, [pc, #412]	@ (800513c <HAL_DMA_IRQHandler+0x1b0>)
 8004f9e:	fba2 2303 	umull	r2, r3, r2, r3
 8004fa2:	0a9b      	lsrs	r3, r3, #10
 8004fa4:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004faa:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fb0:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8004fb2:	6a3b      	ldr	r3, [r7, #32]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8004fb8:	69fb      	ldr	r3, [r7, #28]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4a5f      	ldr	r2, [pc, #380]	@ (8005140 <HAL_DMA_IRQHandler+0x1b4>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d04a      	beq.n	800505e <HAL_DMA_IRQHandler+0xd2>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4a5d      	ldr	r2, [pc, #372]	@ (8005144 <HAL_DMA_IRQHandler+0x1b8>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d045      	beq.n	800505e <HAL_DMA_IRQHandler+0xd2>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4a5c      	ldr	r2, [pc, #368]	@ (8005148 <HAL_DMA_IRQHandler+0x1bc>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d040      	beq.n	800505e <HAL_DMA_IRQHandler+0xd2>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4a5a      	ldr	r2, [pc, #360]	@ (800514c <HAL_DMA_IRQHandler+0x1c0>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d03b      	beq.n	800505e <HAL_DMA_IRQHandler+0xd2>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4a59      	ldr	r2, [pc, #356]	@ (8005150 <HAL_DMA_IRQHandler+0x1c4>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d036      	beq.n	800505e <HAL_DMA_IRQHandler+0xd2>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4a57      	ldr	r2, [pc, #348]	@ (8005154 <HAL_DMA_IRQHandler+0x1c8>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d031      	beq.n	800505e <HAL_DMA_IRQHandler+0xd2>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4a56      	ldr	r2, [pc, #344]	@ (8005158 <HAL_DMA_IRQHandler+0x1cc>)
 8005000:	4293      	cmp	r3, r2
 8005002:	d02c      	beq.n	800505e <HAL_DMA_IRQHandler+0xd2>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	4a54      	ldr	r2, [pc, #336]	@ (800515c <HAL_DMA_IRQHandler+0x1d0>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d027      	beq.n	800505e <HAL_DMA_IRQHandler+0xd2>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	4a53      	ldr	r2, [pc, #332]	@ (8005160 <HAL_DMA_IRQHandler+0x1d4>)
 8005014:	4293      	cmp	r3, r2
 8005016:	d022      	beq.n	800505e <HAL_DMA_IRQHandler+0xd2>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4a51      	ldr	r2, [pc, #324]	@ (8005164 <HAL_DMA_IRQHandler+0x1d8>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d01d      	beq.n	800505e <HAL_DMA_IRQHandler+0xd2>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4a50      	ldr	r2, [pc, #320]	@ (8005168 <HAL_DMA_IRQHandler+0x1dc>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d018      	beq.n	800505e <HAL_DMA_IRQHandler+0xd2>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4a4e      	ldr	r2, [pc, #312]	@ (800516c <HAL_DMA_IRQHandler+0x1e0>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d013      	beq.n	800505e <HAL_DMA_IRQHandler+0xd2>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4a4d      	ldr	r2, [pc, #308]	@ (8005170 <HAL_DMA_IRQHandler+0x1e4>)
 800503c:	4293      	cmp	r3, r2
 800503e:	d00e      	beq.n	800505e <HAL_DMA_IRQHandler+0xd2>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4a4b      	ldr	r2, [pc, #300]	@ (8005174 <HAL_DMA_IRQHandler+0x1e8>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d009      	beq.n	800505e <HAL_DMA_IRQHandler+0xd2>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	4a4a      	ldr	r2, [pc, #296]	@ (8005178 <HAL_DMA_IRQHandler+0x1ec>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d004      	beq.n	800505e <HAL_DMA_IRQHandler+0xd2>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4a48      	ldr	r2, [pc, #288]	@ (800517c <HAL_DMA_IRQHandler+0x1f0>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d101      	bne.n	8005062 <HAL_DMA_IRQHandler+0xd6>
 800505e:	2301      	movs	r3, #1
 8005060:	e000      	b.n	8005064 <HAL_DMA_IRQHandler+0xd8>
 8005062:	2300      	movs	r3, #0
 8005064:	2b00      	cmp	r3, #0
 8005066:	f000 842b 	beq.w	80058c0 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800506e:	f003 031f 	and.w	r3, r3, #31
 8005072:	2208      	movs	r2, #8
 8005074:	409a      	lsls	r2, r3
 8005076:	69bb      	ldr	r3, [r7, #24]
 8005078:	4013      	ands	r3, r2
 800507a:	2b00      	cmp	r3, #0
 800507c:	f000 80a2 	beq.w	80051c4 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4a2e      	ldr	r2, [pc, #184]	@ (8005140 <HAL_DMA_IRQHandler+0x1b4>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d04a      	beq.n	8005120 <HAL_DMA_IRQHandler+0x194>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4a2d      	ldr	r2, [pc, #180]	@ (8005144 <HAL_DMA_IRQHandler+0x1b8>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d045      	beq.n	8005120 <HAL_DMA_IRQHandler+0x194>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4a2b      	ldr	r2, [pc, #172]	@ (8005148 <HAL_DMA_IRQHandler+0x1bc>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d040      	beq.n	8005120 <HAL_DMA_IRQHandler+0x194>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4a2a      	ldr	r2, [pc, #168]	@ (800514c <HAL_DMA_IRQHandler+0x1c0>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d03b      	beq.n	8005120 <HAL_DMA_IRQHandler+0x194>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4a28      	ldr	r2, [pc, #160]	@ (8005150 <HAL_DMA_IRQHandler+0x1c4>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d036      	beq.n	8005120 <HAL_DMA_IRQHandler+0x194>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	4a27      	ldr	r2, [pc, #156]	@ (8005154 <HAL_DMA_IRQHandler+0x1c8>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d031      	beq.n	8005120 <HAL_DMA_IRQHandler+0x194>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4a25      	ldr	r2, [pc, #148]	@ (8005158 <HAL_DMA_IRQHandler+0x1cc>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d02c      	beq.n	8005120 <HAL_DMA_IRQHandler+0x194>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4a24      	ldr	r2, [pc, #144]	@ (800515c <HAL_DMA_IRQHandler+0x1d0>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d027      	beq.n	8005120 <HAL_DMA_IRQHandler+0x194>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4a22      	ldr	r2, [pc, #136]	@ (8005160 <HAL_DMA_IRQHandler+0x1d4>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d022      	beq.n	8005120 <HAL_DMA_IRQHandler+0x194>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	4a21      	ldr	r2, [pc, #132]	@ (8005164 <HAL_DMA_IRQHandler+0x1d8>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d01d      	beq.n	8005120 <HAL_DMA_IRQHandler+0x194>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	4a1f      	ldr	r2, [pc, #124]	@ (8005168 <HAL_DMA_IRQHandler+0x1dc>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d018      	beq.n	8005120 <HAL_DMA_IRQHandler+0x194>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	4a1e      	ldr	r2, [pc, #120]	@ (800516c <HAL_DMA_IRQHandler+0x1e0>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d013      	beq.n	8005120 <HAL_DMA_IRQHandler+0x194>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	4a1c      	ldr	r2, [pc, #112]	@ (8005170 <HAL_DMA_IRQHandler+0x1e4>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d00e      	beq.n	8005120 <HAL_DMA_IRQHandler+0x194>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	4a1b      	ldr	r2, [pc, #108]	@ (8005174 <HAL_DMA_IRQHandler+0x1e8>)
 8005108:	4293      	cmp	r3, r2
 800510a:	d009      	beq.n	8005120 <HAL_DMA_IRQHandler+0x194>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4a19      	ldr	r2, [pc, #100]	@ (8005178 <HAL_DMA_IRQHandler+0x1ec>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d004      	beq.n	8005120 <HAL_DMA_IRQHandler+0x194>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4a18      	ldr	r2, [pc, #96]	@ (800517c <HAL_DMA_IRQHandler+0x1f0>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d12f      	bne.n	8005180 <HAL_DMA_IRQHandler+0x1f4>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f003 0304 	and.w	r3, r3, #4
 800512a:	2b00      	cmp	r3, #0
 800512c:	bf14      	ite	ne
 800512e:	2301      	movne	r3, #1
 8005130:	2300      	moveq	r3, #0
 8005132:	b2db      	uxtb	r3, r3
 8005134:	e02e      	b.n	8005194 <HAL_DMA_IRQHandler+0x208>
 8005136:	bf00      	nop
 8005138:	24000000 	.word	0x24000000
 800513c:	1b4e81b5 	.word	0x1b4e81b5
 8005140:	40020010 	.word	0x40020010
 8005144:	40020028 	.word	0x40020028
 8005148:	40020040 	.word	0x40020040
 800514c:	40020058 	.word	0x40020058
 8005150:	40020070 	.word	0x40020070
 8005154:	40020088 	.word	0x40020088
 8005158:	400200a0 	.word	0x400200a0
 800515c:	400200b8 	.word	0x400200b8
 8005160:	40020410 	.word	0x40020410
 8005164:	40020428 	.word	0x40020428
 8005168:	40020440 	.word	0x40020440
 800516c:	40020458 	.word	0x40020458
 8005170:	40020470 	.word	0x40020470
 8005174:	40020488 	.word	0x40020488
 8005178:	400204a0 	.word	0x400204a0
 800517c:	400204b8 	.word	0x400204b8
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f003 0308 	and.w	r3, r3, #8
 800518a:	2b00      	cmp	r3, #0
 800518c:	bf14      	ite	ne
 800518e:	2301      	movne	r3, #1
 8005190:	2300      	moveq	r3, #0
 8005192:	b2db      	uxtb	r3, r3
 8005194:	2b00      	cmp	r3, #0
 8005196:	d015      	beq.n	80051c4 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	681a      	ldr	r2, [r3, #0]
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f022 0204 	bic.w	r2, r2, #4
 80051a6:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051ac:	f003 031f 	and.w	r3, r3, #31
 80051b0:	2208      	movs	r2, #8
 80051b2:	409a      	lsls	r2, r3
 80051b4:	6a3b      	ldr	r3, [r7, #32]
 80051b6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051bc:	f043 0201 	orr.w	r2, r3, #1
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051c8:	f003 031f 	and.w	r3, r3, #31
 80051cc:	69ba      	ldr	r2, [r7, #24]
 80051ce:	fa22 f303 	lsr.w	r3, r2, r3
 80051d2:	f003 0301 	and.w	r3, r3, #1
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d06e      	beq.n	80052b8 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	4a69      	ldr	r2, [pc, #420]	@ (8005384 <HAL_DMA_IRQHandler+0x3f8>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d04a      	beq.n	800527a <HAL_DMA_IRQHandler+0x2ee>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4a67      	ldr	r2, [pc, #412]	@ (8005388 <HAL_DMA_IRQHandler+0x3fc>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d045      	beq.n	800527a <HAL_DMA_IRQHandler+0x2ee>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4a66      	ldr	r2, [pc, #408]	@ (800538c <HAL_DMA_IRQHandler+0x400>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d040      	beq.n	800527a <HAL_DMA_IRQHandler+0x2ee>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4a64      	ldr	r2, [pc, #400]	@ (8005390 <HAL_DMA_IRQHandler+0x404>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d03b      	beq.n	800527a <HAL_DMA_IRQHandler+0x2ee>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	4a63      	ldr	r2, [pc, #396]	@ (8005394 <HAL_DMA_IRQHandler+0x408>)
 8005208:	4293      	cmp	r3, r2
 800520a:	d036      	beq.n	800527a <HAL_DMA_IRQHandler+0x2ee>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4a61      	ldr	r2, [pc, #388]	@ (8005398 <HAL_DMA_IRQHandler+0x40c>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d031      	beq.n	800527a <HAL_DMA_IRQHandler+0x2ee>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	4a60      	ldr	r2, [pc, #384]	@ (800539c <HAL_DMA_IRQHandler+0x410>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d02c      	beq.n	800527a <HAL_DMA_IRQHandler+0x2ee>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	4a5e      	ldr	r2, [pc, #376]	@ (80053a0 <HAL_DMA_IRQHandler+0x414>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d027      	beq.n	800527a <HAL_DMA_IRQHandler+0x2ee>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4a5d      	ldr	r2, [pc, #372]	@ (80053a4 <HAL_DMA_IRQHandler+0x418>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d022      	beq.n	800527a <HAL_DMA_IRQHandler+0x2ee>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4a5b      	ldr	r2, [pc, #364]	@ (80053a8 <HAL_DMA_IRQHandler+0x41c>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d01d      	beq.n	800527a <HAL_DMA_IRQHandler+0x2ee>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4a5a      	ldr	r2, [pc, #360]	@ (80053ac <HAL_DMA_IRQHandler+0x420>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d018      	beq.n	800527a <HAL_DMA_IRQHandler+0x2ee>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4a58      	ldr	r2, [pc, #352]	@ (80053b0 <HAL_DMA_IRQHandler+0x424>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d013      	beq.n	800527a <HAL_DMA_IRQHandler+0x2ee>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	4a57      	ldr	r2, [pc, #348]	@ (80053b4 <HAL_DMA_IRQHandler+0x428>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d00e      	beq.n	800527a <HAL_DMA_IRQHandler+0x2ee>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4a55      	ldr	r2, [pc, #340]	@ (80053b8 <HAL_DMA_IRQHandler+0x42c>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d009      	beq.n	800527a <HAL_DMA_IRQHandler+0x2ee>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4a54      	ldr	r2, [pc, #336]	@ (80053bc <HAL_DMA_IRQHandler+0x430>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d004      	beq.n	800527a <HAL_DMA_IRQHandler+0x2ee>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4a52      	ldr	r2, [pc, #328]	@ (80053c0 <HAL_DMA_IRQHandler+0x434>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d10a      	bne.n	8005290 <HAL_DMA_IRQHandler+0x304>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	695b      	ldr	r3, [r3, #20]
 8005280:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005284:	2b00      	cmp	r3, #0
 8005286:	bf14      	ite	ne
 8005288:	2301      	movne	r3, #1
 800528a:	2300      	moveq	r3, #0
 800528c:	b2db      	uxtb	r3, r3
 800528e:	e003      	b.n	8005298 <HAL_DMA_IRQHandler+0x30c>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	2300      	movs	r3, #0
 8005298:	2b00      	cmp	r3, #0
 800529a:	d00d      	beq.n	80052b8 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052a0:	f003 031f 	and.w	r3, r3, #31
 80052a4:	2201      	movs	r2, #1
 80052a6:	409a      	lsls	r2, r3
 80052a8:	6a3b      	ldr	r3, [r7, #32]
 80052aa:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052b0:	f043 0202 	orr.w	r2, r3, #2
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052bc:	f003 031f 	and.w	r3, r3, #31
 80052c0:	2204      	movs	r2, #4
 80052c2:	409a      	lsls	r2, r3
 80052c4:	69bb      	ldr	r3, [r7, #24]
 80052c6:	4013      	ands	r3, r2
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	f000 808f 	beq.w	80053ec <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	4a2c      	ldr	r2, [pc, #176]	@ (8005384 <HAL_DMA_IRQHandler+0x3f8>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d04a      	beq.n	800536e <HAL_DMA_IRQHandler+0x3e2>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4a2a      	ldr	r2, [pc, #168]	@ (8005388 <HAL_DMA_IRQHandler+0x3fc>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d045      	beq.n	800536e <HAL_DMA_IRQHandler+0x3e2>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	4a29      	ldr	r2, [pc, #164]	@ (800538c <HAL_DMA_IRQHandler+0x400>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d040      	beq.n	800536e <HAL_DMA_IRQHandler+0x3e2>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4a27      	ldr	r2, [pc, #156]	@ (8005390 <HAL_DMA_IRQHandler+0x404>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d03b      	beq.n	800536e <HAL_DMA_IRQHandler+0x3e2>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4a26      	ldr	r2, [pc, #152]	@ (8005394 <HAL_DMA_IRQHandler+0x408>)
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d036      	beq.n	800536e <HAL_DMA_IRQHandler+0x3e2>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4a24      	ldr	r2, [pc, #144]	@ (8005398 <HAL_DMA_IRQHandler+0x40c>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d031      	beq.n	800536e <HAL_DMA_IRQHandler+0x3e2>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	4a23      	ldr	r2, [pc, #140]	@ (800539c <HAL_DMA_IRQHandler+0x410>)
 8005310:	4293      	cmp	r3, r2
 8005312:	d02c      	beq.n	800536e <HAL_DMA_IRQHandler+0x3e2>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4a21      	ldr	r2, [pc, #132]	@ (80053a0 <HAL_DMA_IRQHandler+0x414>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d027      	beq.n	800536e <HAL_DMA_IRQHandler+0x3e2>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	4a20      	ldr	r2, [pc, #128]	@ (80053a4 <HAL_DMA_IRQHandler+0x418>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d022      	beq.n	800536e <HAL_DMA_IRQHandler+0x3e2>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	4a1e      	ldr	r2, [pc, #120]	@ (80053a8 <HAL_DMA_IRQHandler+0x41c>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d01d      	beq.n	800536e <HAL_DMA_IRQHandler+0x3e2>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4a1d      	ldr	r2, [pc, #116]	@ (80053ac <HAL_DMA_IRQHandler+0x420>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d018      	beq.n	800536e <HAL_DMA_IRQHandler+0x3e2>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4a1b      	ldr	r2, [pc, #108]	@ (80053b0 <HAL_DMA_IRQHandler+0x424>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d013      	beq.n	800536e <HAL_DMA_IRQHandler+0x3e2>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4a1a      	ldr	r2, [pc, #104]	@ (80053b4 <HAL_DMA_IRQHandler+0x428>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d00e      	beq.n	800536e <HAL_DMA_IRQHandler+0x3e2>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4a18      	ldr	r2, [pc, #96]	@ (80053b8 <HAL_DMA_IRQHandler+0x42c>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d009      	beq.n	800536e <HAL_DMA_IRQHandler+0x3e2>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4a17      	ldr	r2, [pc, #92]	@ (80053bc <HAL_DMA_IRQHandler+0x430>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d004      	beq.n	800536e <HAL_DMA_IRQHandler+0x3e2>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4a15      	ldr	r2, [pc, #84]	@ (80053c0 <HAL_DMA_IRQHandler+0x434>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d12a      	bne.n	80053c4 <HAL_DMA_IRQHandler+0x438>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f003 0302 	and.w	r3, r3, #2
 8005378:	2b00      	cmp	r3, #0
 800537a:	bf14      	ite	ne
 800537c:	2301      	movne	r3, #1
 800537e:	2300      	moveq	r3, #0
 8005380:	b2db      	uxtb	r3, r3
 8005382:	e023      	b.n	80053cc <HAL_DMA_IRQHandler+0x440>
 8005384:	40020010 	.word	0x40020010
 8005388:	40020028 	.word	0x40020028
 800538c:	40020040 	.word	0x40020040
 8005390:	40020058 	.word	0x40020058
 8005394:	40020070 	.word	0x40020070
 8005398:	40020088 	.word	0x40020088
 800539c:	400200a0 	.word	0x400200a0
 80053a0:	400200b8 	.word	0x400200b8
 80053a4:	40020410 	.word	0x40020410
 80053a8:	40020428 	.word	0x40020428
 80053ac:	40020440 	.word	0x40020440
 80053b0:	40020458 	.word	0x40020458
 80053b4:	40020470 	.word	0x40020470
 80053b8:	40020488 	.word	0x40020488
 80053bc:	400204a0 	.word	0x400204a0
 80053c0:	400204b8 	.word	0x400204b8
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	2300      	movs	r3, #0
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d00d      	beq.n	80053ec <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053d4:	f003 031f 	and.w	r3, r3, #31
 80053d8:	2204      	movs	r2, #4
 80053da:	409a      	lsls	r2, r3
 80053dc:	6a3b      	ldr	r3, [r7, #32]
 80053de:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053e4:	f043 0204 	orr.w	r2, r3, #4
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053f0:	f003 031f 	and.w	r3, r3, #31
 80053f4:	2210      	movs	r2, #16
 80053f6:	409a      	lsls	r2, r3
 80053f8:	69bb      	ldr	r3, [r7, #24]
 80053fa:	4013      	ands	r3, r2
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	f000 80a6 	beq.w	800554e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4a85      	ldr	r2, [pc, #532]	@ (800561c <HAL_DMA_IRQHandler+0x690>)
 8005408:	4293      	cmp	r3, r2
 800540a:	d04a      	beq.n	80054a2 <HAL_DMA_IRQHandler+0x516>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4a83      	ldr	r2, [pc, #524]	@ (8005620 <HAL_DMA_IRQHandler+0x694>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d045      	beq.n	80054a2 <HAL_DMA_IRQHandler+0x516>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	4a82      	ldr	r2, [pc, #520]	@ (8005624 <HAL_DMA_IRQHandler+0x698>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d040      	beq.n	80054a2 <HAL_DMA_IRQHandler+0x516>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4a80      	ldr	r2, [pc, #512]	@ (8005628 <HAL_DMA_IRQHandler+0x69c>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d03b      	beq.n	80054a2 <HAL_DMA_IRQHandler+0x516>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	4a7f      	ldr	r2, [pc, #508]	@ (800562c <HAL_DMA_IRQHandler+0x6a0>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d036      	beq.n	80054a2 <HAL_DMA_IRQHandler+0x516>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4a7d      	ldr	r2, [pc, #500]	@ (8005630 <HAL_DMA_IRQHandler+0x6a4>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d031      	beq.n	80054a2 <HAL_DMA_IRQHandler+0x516>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	4a7c      	ldr	r2, [pc, #496]	@ (8005634 <HAL_DMA_IRQHandler+0x6a8>)
 8005444:	4293      	cmp	r3, r2
 8005446:	d02c      	beq.n	80054a2 <HAL_DMA_IRQHandler+0x516>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	4a7a      	ldr	r2, [pc, #488]	@ (8005638 <HAL_DMA_IRQHandler+0x6ac>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d027      	beq.n	80054a2 <HAL_DMA_IRQHandler+0x516>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	4a79      	ldr	r2, [pc, #484]	@ (800563c <HAL_DMA_IRQHandler+0x6b0>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d022      	beq.n	80054a2 <HAL_DMA_IRQHandler+0x516>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4a77      	ldr	r2, [pc, #476]	@ (8005640 <HAL_DMA_IRQHandler+0x6b4>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d01d      	beq.n	80054a2 <HAL_DMA_IRQHandler+0x516>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4a76      	ldr	r2, [pc, #472]	@ (8005644 <HAL_DMA_IRQHandler+0x6b8>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d018      	beq.n	80054a2 <HAL_DMA_IRQHandler+0x516>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4a74      	ldr	r2, [pc, #464]	@ (8005648 <HAL_DMA_IRQHandler+0x6bc>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d013      	beq.n	80054a2 <HAL_DMA_IRQHandler+0x516>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4a73      	ldr	r2, [pc, #460]	@ (800564c <HAL_DMA_IRQHandler+0x6c0>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d00e      	beq.n	80054a2 <HAL_DMA_IRQHandler+0x516>
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4a71      	ldr	r2, [pc, #452]	@ (8005650 <HAL_DMA_IRQHandler+0x6c4>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d009      	beq.n	80054a2 <HAL_DMA_IRQHandler+0x516>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	4a70      	ldr	r2, [pc, #448]	@ (8005654 <HAL_DMA_IRQHandler+0x6c8>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d004      	beq.n	80054a2 <HAL_DMA_IRQHandler+0x516>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4a6e      	ldr	r2, [pc, #440]	@ (8005658 <HAL_DMA_IRQHandler+0x6cc>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d10a      	bne.n	80054b8 <HAL_DMA_IRQHandler+0x52c>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f003 0308 	and.w	r3, r3, #8
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	bf14      	ite	ne
 80054b0:	2301      	movne	r3, #1
 80054b2:	2300      	moveq	r3, #0
 80054b4:	b2db      	uxtb	r3, r3
 80054b6:	e009      	b.n	80054cc <HAL_DMA_IRQHandler+0x540>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f003 0304 	and.w	r3, r3, #4
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	bf14      	ite	ne
 80054c6:	2301      	movne	r3, #1
 80054c8:	2300      	moveq	r3, #0
 80054ca:	b2db      	uxtb	r3, r3
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d03e      	beq.n	800554e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054d4:	f003 031f 	and.w	r3, r3, #31
 80054d8:	2210      	movs	r2, #16
 80054da:	409a      	lsls	r2, r3
 80054dc:	6a3b      	ldr	r3, [r7, #32]
 80054de:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d018      	beq.n	8005520 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d108      	bne.n	800550e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005500:	2b00      	cmp	r3, #0
 8005502:	d024      	beq.n	800554e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005508:	6878      	ldr	r0, [r7, #4]
 800550a:	4798      	blx	r3
 800550c:	e01f      	b.n	800554e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005512:	2b00      	cmp	r3, #0
 8005514:	d01b      	beq.n	800554e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800551a:	6878      	ldr	r0, [r7, #4]
 800551c:	4798      	blx	r3
 800551e:	e016      	b.n	800554e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800552a:	2b00      	cmp	r3, #0
 800552c:	d107      	bne.n	800553e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	681a      	ldr	r2, [r3, #0]
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f022 0208 	bic.w	r2, r2, #8
 800553c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005542:	2b00      	cmp	r3, #0
 8005544:	d003      	beq.n	800554e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800554a:	6878      	ldr	r0, [r7, #4]
 800554c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005552:	f003 031f 	and.w	r3, r3, #31
 8005556:	2220      	movs	r2, #32
 8005558:	409a      	lsls	r2, r3
 800555a:	69bb      	ldr	r3, [r7, #24]
 800555c:	4013      	ands	r3, r2
 800555e:	2b00      	cmp	r3, #0
 8005560:	f000 8110 	beq.w	8005784 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	4a2c      	ldr	r2, [pc, #176]	@ (800561c <HAL_DMA_IRQHandler+0x690>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d04a      	beq.n	8005604 <HAL_DMA_IRQHandler+0x678>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	4a2b      	ldr	r2, [pc, #172]	@ (8005620 <HAL_DMA_IRQHandler+0x694>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d045      	beq.n	8005604 <HAL_DMA_IRQHandler+0x678>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4a29      	ldr	r2, [pc, #164]	@ (8005624 <HAL_DMA_IRQHandler+0x698>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d040      	beq.n	8005604 <HAL_DMA_IRQHandler+0x678>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	4a28      	ldr	r2, [pc, #160]	@ (8005628 <HAL_DMA_IRQHandler+0x69c>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d03b      	beq.n	8005604 <HAL_DMA_IRQHandler+0x678>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4a26      	ldr	r2, [pc, #152]	@ (800562c <HAL_DMA_IRQHandler+0x6a0>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d036      	beq.n	8005604 <HAL_DMA_IRQHandler+0x678>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4a25      	ldr	r2, [pc, #148]	@ (8005630 <HAL_DMA_IRQHandler+0x6a4>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d031      	beq.n	8005604 <HAL_DMA_IRQHandler+0x678>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	4a23      	ldr	r2, [pc, #140]	@ (8005634 <HAL_DMA_IRQHandler+0x6a8>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d02c      	beq.n	8005604 <HAL_DMA_IRQHandler+0x678>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	4a22      	ldr	r2, [pc, #136]	@ (8005638 <HAL_DMA_IRQHandler+0x6ac>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d027      	beq.n	8005604 <HAL_DMA_IRQHandler+0x678>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4a20      	ldr	r2, [pc, #128]	@ (800563c <HAL_DMA_IRQHandler+0x6b0>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d022      	beq.n	8005604 <HAL_DMA_IRQHandler+0x678>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4a1f      	ldr	r2, [pc, #124]	@ (8005640 <HAL_DMA_IRQHandler+0x6b4>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d01d      	beq.n	8005604 <HAL_DMA_IRQHandler+0x678>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4a1d      	ldr	r2, [pc, #116]	@ (8005644 <HAL_DMA_IRQHandler+0x6b8>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d018      	beq.n	8005604 <HAL_DMA_IRQHandler+0x678>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4a1c      	ldr	r2, [pc, #112]	@ (8005648 <HAL_DMA_IRQHandler+0x6bc>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d013      	beq.n	8005604 <HAL_DMA_IRQHandler+0x678>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4a1a      	ldr	r2, [pc, #104]	@ (800564c <HAL_DMA_IRQHandler+0x6c0>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d00e      	beq.n	8005604 <HAL_DMA_IRQHandler+0x678>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4a19      	ldr	r2, [pc, #100]	@ (8005650 <HAL_DMA_IRQHandler+0x6c4>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d009      	beq.n	8005604 <HAL_DMA_IRQHandler+0x678>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4a17      	ldr	r2, [pc, #92]	@ (8005654 <HAL_DMA_IRQHandler+0x6c8>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d004      	beq.n	8005604 <HAL_DMA_IRQHandler+0x678>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4a16      	ldr	r2, [pc, #88]	@ (8005658 <HAL_DMA_IRQHandler+0x6cc>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d12b      	bne.n	800565c <HAL_DMA_IRQHandler+0x6d0>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f003 0310 	and.w	r3, r3, #16
 800560e:	2b00      	cmp	r3, #0
 8005610:	bf14      	ite	ne
 8005612:	2301      	movne	r3, #1
 8005614:	2300      	moveq	r3, #0
 8005616:	b2db      	uxtb	r3, r3
 8005618:	e02a      	b.n	8005670 <HAL_DMA_IRQHandler+0x6e4>
 800561a:	bf00      	nop
 800561c:	40020010 	.word	0x40020010
 8005620:	40020028 	.word	0x40020028
 8005624:	40020040 	.word	0x40020040
 8005628:	40020058 	.word	0x40020058
 800562c:	40020070 	.word	0x40020070
 8005630:	40020088 	.word	0x40020088
 8005634:	400200a0 	.word	0x400200a0
 8005638:	400200b8 	.word	0x400200b8
 800563c:	40020410 	.word	0x40020410
 8005640:	40020428 	.word	0x40020428
 8005644:	40020440 	.word	0x40020440
 8005648:	40020458 	.word	0x40020458
 800564c:	40020470 	.word	0x40020470
 8005650:	40020488 	.word	0x40020488
 8005654:	400204a0 	.word	0x400204a0
 8005658:	400204b8 	.word	0x400204b8
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f003 0302 	and.w	r3, r3, #2
 8005666:	2b00      	cmp	r3, #0
 8005668:	bf14      	ite	ne
 800566a:	2301      	movne	r3, #1
 800566c:	2300      	moveq	r3, #0
 800566e:	b2db      	uxtb	r3, r3
 8005670:	2b00      	cmp	r3, #0
 8005672:	f000 8087 	beq.w	8005784 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800567a:	f003 031f 	and.w	r3, r3, #31
 800567e:	2220      	movs	r2, #32
 8005680:	409a      	lsls	r2, r3
 8005682:	6a3b      	ldr	r3, [r7, #32]
 8005684:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800568c:	b2db      	uxtb	r3, r3
 800568e:	2b04      	cmp	r3, #4
 8005690:	d139      	bne.n	8005706 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	681a      	ldr	r2, [r3, #0]
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f022 0216 	bic.w	r2, r2, #22
 80056a0:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	695a      	ldr	r2, [r3, #20]
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80056b0:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d103      	bne.n	80056c2 <HAL_DMA_IRQHandler+0x736>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d007      	beq.n	80056d2 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	681a      	ldr	r2, [r3, #0]
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f022 0208 	bic.w	r2, r2, #8
 80056d0:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80056d6:	f003 031f 	and.w	r3, r3, #31
 80056da:	223f      	movs	r2, #63	@ 0x3f
 80056dc:	409a      	lsls	r2, r3
 80056de:	6a3b      	ldr	r3, [r7, #32]
 80056e0:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2201      	movs	r2, #1
 80056e6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2200      	movs	r2, #0
 80056ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	f000 834a 	beq.w	8005d90 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005700:	6878      	ldr	r0, [r7, #4]
 8005702:	4798      	blx	r3
          }
          return;
 8005704:	e344      	b.n	8005d90 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005710:	2b00      	cmp	r3, #0
 8005712:	d018      	beq.n	8005746 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800571e:	2b00      	cmp	r3, #0
 8005720:	d108      	bne.n	8005734 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005726:	2b00      	cmp	r3, #0
 8005728:	d02c      	beq.n	8005784 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800572e:	6878      	ldr	r0, [r7, #4]
 8005730:	4798      	blx	r3
 8005732:	e027      	b.n	8005784 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005738:	2b00      	cmp	r3, #0
 800573a:	d023      	beq.n	8005784 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005740:	6878      	ldr	r0, [r7, #4]
 8005742:	4798      	blx	r3
 8005744:	e01e      	b.n	8005784 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005750:	2b00      	cmp	r3, #0
 8005752:	d10f      	bne.n	8005774 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	681a      	ldr	r2, [r3, #0]
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f022 0210 	bic.w	r2, r2, #16
 8005762:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2201      	movs	r2, #1
 8005768:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2200      	movs	r2, #0
 8005770:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005778:	2b00      	cmp	r3, #0
 800577a:	d003      	beq.n	8005784 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005780:	6878      	ldr	r0, [r7, #4]
 8005782:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005788:	2b00      	cmp	r3, #0
 800578a:	f000 8306 	beq.w	8005d9a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005792:	f003 0301 	and.w	r3, r3, #1
 8005796:	2b00      	cmp	r3, #0
 8005798:	f000 8088 	beq.w	80058ac <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2204      	movs	r2, #4
 80057a0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	4a7a      	ldr	r2, [pc, #488]	@ (8005994 <HAL_DMA_IRQHandler+0xa08>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d04a      	beq.n	8005844 <HAL_DMA_IRQHandler+0x8b8>
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	4a79      	ldr	r2, [pc, #484]	@ (8005998 <HAL_DMA_IRQHandler+0xa0c>)
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d045      	beq.n	8005844 <HAL_DMA_IRQHandler+0x8b8>
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	4a77      	ldr	r2, [pc, #476]	@ (800599c <HAL_DMA_IRQHandler+0xa10>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d040      	beq.n	8005844 <HAL_DMA_IRQHandler+0x8b8>
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	4a76      	ldr	r2, [pc, #472]	@ (80059a0 <HAL_DMA_IRQHandler+0xa14>)
 80057c8:	4293      	cmp	r3, r2
 80057ca:	d03b      	beq.n	8005844 <HAL_DMA_IRQHandler+0x8b8>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	4a74      	ldr	r2, [pc, #464]	@ (80059a4 <HAL_DMA_IRQHandler+0xa18>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d036      	beq.n	8005844 <HAL_DMA_IRQHandler+0x8b8>
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	4a73      	ldr	r2, [pc, #460]	@ (80059a8 <HAL_DMA_IRQHandler+0xa1c>)
 80057dc:	4293      	cmp	r3, r2
 80057de:	d031      	beq.n	8005844 <HAL_DMA_IRQHandler+0x8b8>
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	4a71      	ldr	r2, [pc, #452]	@ (80059ac <HAL_DMA_IRQHandler+0xa20>)
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d02c      	beq.n	8005844 <HAL_DMA_IRQHandler+0x8b8>
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	4a70      	ldr	r2, [pc, #448]	@ (80059b0 <HAL_DMA_IRQHandler+0xa24>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d027      	beq.n	8005844 <HAL_DMA_IRQHandler+0x8b8>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	4a6e      	ldr	r2, [pc, #440]	@ (80059b4 <HAL_DMA_IRQHandler+0xa28>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d022      	beq.n	8005844 <HAL_DMA_IRQHandler+0x8b8>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	4a6d      	ldr	r2, [pc, #436]	@ (80059b8 <HAL_DMA_IRQHandler+0xa2c>)
 8005804:	4293      	cmp	r3, r2
 8005806:	d01d      	beq.n	8005844 <HAL_DMA_IRQHandler+0x8b8>
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	4a6b      	ldr	r2, [pc, #428]	@ (80059bc <HAL_DMA_IRQHandler+0xa30>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d018      	beq.n	8005844 <HAL_DMA_IRQHandler+0x8b8>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	4a6a      	ldr	r2, [pc, #424]	@ (80059c0 <HAL_DMA_IRQHandler+0xa34>)
 8005818:	4293      	cmp	r3, r2
 800581a:	d013      	beq.n	8005844 <HAL_DMA_IRQHandler+0x8b8>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	4a68      	ldr	r2, [pc, #416]	@ (80059c4 <HAL_DMA_IRQHandler+0xa38>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d00e      	beq.n	8005844 <HAL_DMA_IRQHandler+0x8b8>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	4a67      	ldr	r2, [pc, #412]	@ (80059c8 <HAL_DMA_IRQHandler+0xa3c>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d009      	beq.n	8005844 <HAL_DMA_IRQHandler+0x8b8>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	4a65      	ldr	r2, [pc, #404]	@ (80059cc <HAL_DMA_IRQHandler+0xa40>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d004      	beq.n	8005844 <HAL_DMA_IRQHandler+0x8b8>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	4a64      	ldr	r2, [pc, #400]	@ (80059d0 <HAL_DMA_IRQHandler+0xa44>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d108      	bne.n	8005856 <HAL_DMA_IRQHandler+0x8ca>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	681a      	ldr	r2, [r3, #0]
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f022 0201 	bic.w	r2, r2, #1
 8005852:	601a      	str	r2, [r3, #0]
 8005854:	e007      	b.n	8005866 <HAL_DMA_IRQHandler+0x8da>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	681a      	ldr	r2, [r3, #0]
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f022 0201 	bic.w	r2, r2, #1
 8005864:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	3301      	adds	r3, #1
 800586a:	60fb      	str	r3, [r7, #12]
 800586c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800586e:	429a      	cmp	r2, r3
 8005870:	d307      	bcc.n	8005882 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f003 0301 	and.w	r3, r3, #1
 800587c:	2b00      	cmp	r3, #0
 800587e:	d1f2      	bne.n	8005866 <HAL_DMA_IRQHandler+0x8da>
 8005880:	e000      	b.n	8005884 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8005882:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f003 0301 	and.w	r3, r3, #1
 800588e:	2b00      	cmp	r3, #0
 8005890:	d004      	beq.n	800589c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2203      	movs	r2, #3
 8005896:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800589a:	e003      	b.n	80058a4 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2201      	movs	r2, #1
 80058a0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2200      	movs	r2, #0
 80058a8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	f000 8272 	beq.w	8005d9a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80058ba:	6878      	ldr	r0, [r7, #4]
 80058bc:	4798      	blx	r3
 80058be:	e26c      	b.n	8005d9a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	4a43      	ldr	r2, [pc, #268]	@ (80059d4 <HAL_DMA_IRQHandler+0xa48>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d022      	beq.n	8005910 <HAL_DMA_IRQHandler+0x984>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	4a42      	ldr	r2, [pc, #264]	@ (80059d8 <HAL_DMA_IRQHandler+0xa4c>)
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d01d      	beq.n	8005910 <HAL_DMA_IRQHandler+0x984>
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	4a40      	ldr	r2, [pc, #256]	@ (80059dc <HAL_DMA_IRQHandler+0xa50>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d018      	beq.n	8005910 <HAL_DMA_IRQHandler+0x984>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	4a3f      	ldr	r2, [pc, #252]	@ (80059e0 <HAL_DMA_IRQHandler+0xa54>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d013      	beq.n	8005910 <HAL_DMA_IRQHandler+0x984>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	4a3d      	ldr	r2, [pc, #244]	@ (80059e4 <HAL_DMA_IRQHandler+0xa58>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d00e      	beq.n	8005910 <HAL_DMA_IRQHandler+0x984>
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	4a3c      	ldr	r2, [pc, #240]	@ (80059e8 <HAL_DMA_IRQHandler+0xa5c>)
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d009      	beq.n	8005910 <HAL_DMA_IRQHandler+0x984>
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	4a3a      	ldr	r2, [pc, #232]	@ (80059ec <HAL_DMA_IRQHandler+0xa60>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d004      	beq.n	8005910 <HAL_DMA_IRQHandler+0x984>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	4a39      	ldr	r2, [pc, #228]	@ (80059f0 <HAL_DMA_IRQHandler+0xa64>)
 800590c:	4293      	cmp	r3, r2
 800590e:	d101      	bne.n	8005914 <HAL_DMA_IRQHandler+0x988>
 8005910:	2301      	movs	r3, #1
 8005912:	e000      	b.n	8005916 <HAL_DMA_IRQHandler+0x98a>
 8005914:	2300      	movs	r3, #0
 8005916:	2b00      	cmp	r3, #0
 8005918:	f000 823f 	beq.w	8005d9a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005928:	f003 031f 	and.w	r3, r3, #31
 800592c:	2204      	movs	r2, #4
 800592e:	409a      	lsls	r2, r3
 8005930:	697b      	ldr	r3, [r7, #20]
 8005932:	4013      	ands	r3, r2
 8005934:	2b00      	cmp	r3, #0
 8005936:	f000 80cd 	beq.w	8005ad4 <HAL_DMA_IRQHandler+0xb48>
 800593a:	693b      	ldr	r3, [r7, #16]
 800593c:	f003 0304 	and.w	r3, r3, #4
 8005940:	2b00      	cmp	r3, #0
 8005942:	f000 80c7 	beq.w	8005ad4 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800594a:	f003 031f 	and.w	r3, r3, #31
 800594e:	2204      	movs	r2, #4
 8005950:	409a      	lsls	r2, r3
 8005952:	69fb      	ldr	r3, [r7, #28]
 8005954:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005956:	693b      	ldr	r3, [r7, #16]
 8005958:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800595c:	2b00      	cmp	r3, #0
 800595e:	d049      	beq.n	80059f4 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005960:	693b      	ldr	r3, [r7, #16]
 8005962:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005966:	2b00      	cmp	r3, #0
 8005968:	d109      	bne.n	800597e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800596e:	2b00      	cmp	r3, #0
 8005970:	f000 8210 	beq.w	8005d94 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005978:	6878      	ldr	r0, [r7, #4]
 800597a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800597c:	e20a      	b.n	8005d94 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005982:	2b00      	cmp	r3, #0
 8005984:	f000 8206 	beq.w	8005d94 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800598c:	6878      	ldr	r0, [r7, #4]
 800598e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005990:	e200      	b.n	8005d94 <HAL_DMA_IRQHandler+0xe08>
 8005992:	bf00      	nop
 8005994:	40020010 	.word	0x40020010
 8005998:	40020028 	.word	0x40020028
 800599c:	40020040 	.word	0x40020040
 80059a0:	40020058 	.word	0x40020058
 80059a4:	40020070 	.word	0x40020070
 80059a8:	40020088 	.word	0x40020088
 80059ac:	400200a0 	.word	0x400200a0
 80059b0:	400200b8 	.word	0x400200b8
 80059b4:	40020410 	.word	0x40020410
 80059b8:	40020428 	.word	0x40020428
 80059bc:	40020440 	.word	0x40020440
 80059c0:	40020458 	.word	0x40020458
 80059c4:	40020470 	.word	0x40020470
 80059c8:	40020488 	.word	0x40020488
 80059cc:	400204a0 	.word	0x400204a0
 80059d0:	400204b8 	.word	0x400204b8
 80059d4:	58025408 	.word	0x58025408
 80059d8:	5802541c 	.word	0x5802541c
 80059dc:	58025430 	.word	0x58025430
 80059e0:	58025444 	.word	0x58025444
 80059e4:	58025458 	.word	0x58025458
 80059e8:	5802546c 	.word	0x5802546c
 80059ec:	58025480 	.word	0x58025480
 80059f0:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80059f4:	693b      	ldr	r3, [r7, #16]
 80059f6:	f003 0320 	and.w	r3, r3, #32
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d160      	bne.n	8005ac0 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	4a7f      	ldr	r2, [pc, #508]	@ (8005c00 <HAL_DMA_IRQHandler+0xc74>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d04a      	beq.n	8005a9e <HAL_DMA_IRQHandler+0xb12>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	4a7d      	ldr	r2, [pc, #500]	@ (8005c04 <HAL_DMA_IRQHandler+0xc78>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d045      	beq.n	8005a9e <HAL_DMA_IRQHandler+0xb12>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	4a7c      	ldr	r2, [pc, #496]	@ (8005c08 <HAL_DMA_IRQHandler+0xc7c>)
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d040      	beq.n	8005a9e <HAL_DMA_IRQHandler+0xb12>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	4a7a      	ldr	r2, [pc, #488]	@ (8005c0c <HAL_DMA_IRQHandler+0xc80>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d03b      	beq.n	8005a9e <HAL_DMA_IRQHandler+0xb12>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	4a79      	ldr	r2, [pc, #484]	@ (8005c10 <HAL_DMA_IRQHandler+0xc84>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d036      	beq.n	8005a9e <HAL_DMA_IRQHandler+0xb12>
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	4a77      	ldr	r2, [pc, #476]	@ (8005c14 <HAL_DMA_IRQHandler+0xc88>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d031      	beq.n	8005a9e <HAL_DMA_IRQHandler+0xb12>
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	4a76      	ldr	r2, [pc, #472]	@ (8005c18 <HAL_DMA_IRQHandler+0xc8c>)
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d02c      	beq.n	8005a9e <HAL_DMA_IRQHandler+0xb12>
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	4a74      	ldr	r2, [pc, #464]	@ (8005c1c <HAL_DMA_IRQHandler+0xc90>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d027      	beq.n	8005a9e <HAL_DMA_IRQHandler+0xb12>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	4a73      	ldr	r2, [pc, #460]	@ (8005c20 <HAL_DMA_IRQHandler+0xc94>)
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d022      	beq.n	8005a9e <HAL_DMA_IRQHandler+0xb12>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	4a71      	ldr	r2, [pc, #452]	@ (8005c24 <HAL_DMA_IRQHandler+0xc98>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d01d      	beq.n	8005a9e <HAL_DMA_IRQHandler+0xb12>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	4a70      	ldr	r2, [pc, #448]	@ (8005c28 <HAL_DMA_IRQHandler+0xc9c>)
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	d018      	beq.n	8005a9e <HAL_DMA_IRQHandler+0xb12>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	4a6e      	ldr	r2, [pc, #440]	@ (8005c2c <HAL_DMA_IRQHandler+0xca0>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d013      	beq.n	8005a9e <HAL_DMA_IRQHandler+0xb12>
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	4a6d      	ldr	r2, [pc, #436]	@ (8005c30 <HAL_DMA_IRQHandler+0xca4>)
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d00e      	beq.n	8005a9e <HAL_DMA_IRQHandler+0xb12>
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	4a6b      	ldr	r2, [pc, #428]	@ (8005c34 <HAL_DMA_IRQHandler+0xca8>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d009      	beq.n	8005a9e <HAL_DMA_IRQHandler+0xb12>
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	4a6a      	ldr	r2, [pc, #424]	@ (8005c38 <HAL_DMA_IRQHandler+0xcac>)
 8005a90:	4293      	cmp	r3, r2
 8005a92:	d004      	beq.n	8005a9e <HAL_DMA_IRQHandler+0xb12>
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	4a68      	ldr	r2, [pc, #416]	@ (8005c3c <HAL_DMA_IRQHandler+0xcb0>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d108      	bne.n	8005ab0 <HAL_DMA_IRQHandler+0xb24>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	681a      	ldr	r2, [r3, #0]
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f022 0208 	bic.w	r2, r2, #8
 8005aac:	601a      	str	r2, [r3, #0]
 8005aae:	e007      	b.n	8005ac0 <HAL_DMA_IRQHandler+0xb34>
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	681a      	ldr	r2, [r3, #0]
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f022 0204 	bic.w	r2, r2, #4
 8005abe:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	f000 8165 	beq.w	8005d94 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ace:	6878      	ldr	r0, [r7, #4]
 8005ad0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005ad2:	e15f      	b.n	8005d94 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ad8:	f003 031f 	and.w	r3, r3, #31
 8005adc:	2202      	movs	r2, #2
 8005ade:	409a      	lsls	r2, r3
 8005ae0:	697b      	ldr	r3, [r7, #20]
 8005ae2:	4013      	ands	r3, r2
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	f000 80c5 	beq.w	8005c74 <HAL_DMA_IRQHandler+0xce8>
 8005aea:	693b      	ldr	r3, [r7, #16]
 8005aec:	f003 0302 	and.w	r3, r3, #2
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	f000 80bf 	beq.w	8005c74 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005afa:	f003 031f 	and.w	r3, r3, #31
 8005afe:	2202      	movs	r2, #2
 8005b00:	409a      	lsls	r2, r3
 8005b02:	69fb      	ldr	r3, [r7, #28]
 8005b04:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005b06:	693b      	ldr	r3, [r7, #16]
 8005b08:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d018      	beq.n	8005b42 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005b10:	693b      	ldr	r3, [r7, #16]
 8005b12:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d109      	bne.n	8005b2e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	f000 813a 	beq.w	8005d98 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b28:	6878      	ldr	r0, [r7, #4]
 8005b2a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005b2c:	e134      	b.n	8005d98 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	f000 8130 	beq.w	8005d98 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b3c:	6878      	ldr	r0, [r7, #4]
 8005b3e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005b40:	e12a      	b.n	8005d98 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005b42:	693b      	ldr	r3, [r7, #16]
 8005b44:	f003 0320 	and.w	r3, r3, #32
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	f040 8089 	bne.w	8005c60 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	4a2b      	ldr	r2, [pc, #172]	@ (8005c00 <HAL_DMA_IRQHandler+0xc74>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d04a      	beq.n	8005bee <HAL_DMA_IRQHandler+0xc62>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	4a29      	ldr	r2, [pc, #164]	@ (8005c04 <HAL_DMA_IRQHandler+0xc78>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d045      	beq.n	8005bee <HAL_DMA_IRQHandler+0xc62>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	4a28      	ldr	r2, [pc, #160]	@ (8005c08 <HAL_DMA_IRQHandler+0xc7c>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d040      	beq.n	8005bee <HAL_DMA_IRQHandler+0xc62>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	4a26      	ldr	r2, [pc, #152]	@ (8005c0c <HAL_DMA_IRQHandler+0xc80>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d03b      	beq.n	8005bee <HAL_DMA_IRQHandler+0xc62>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	4a25      	ldr	r2, [pc, #148]	@ (8005c10 <HAL_DMA_IRQHandler+0xc84>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d036      	beq.n	8005bee <HAL_DMA_IRQHandler+0xc62>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	4a23      	ldr	r2, [pc, #140]	@ (8005c14 <HAL_DMA_IRQHandler+0xc88>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d031      	beq.n	8005bee <HAL_DMA_IRQHandler+0xc62>
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	4a22      	ldr	r2, [pc, #136]	@ (8005c18 <HAL_DMA_IRQHandler+0xc8c>)
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d02c      	beq.n	8005bee <HAL_DMA_IRQHandler+0xc62>
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	4a20      	ldr	r2, [pc, #128]	@ (8005c1c <HAL_DMA_IRQHandler+0xc90>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d027      	beq.n	8005bee <HAL_DMA_IRQHandler+0xc62>
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	4a1f      	ldr	r2, [pc, #124]	@ (8005c20 <HAL_DMA_IRQHandler+0xc94>)
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d022      	beq.n	8005bee <HAL_DMA_IRQHandler+0xc62>
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	4a1d      	ldr	r2, [pc, #116]	@ (8005c24 <HAL_DMA_IRQHandler+0xc98>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d01d      	beq.n	8005bee <HAL_DMA_IRQHandler+0xc62>
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	4a1c      	ldr	r2, [pc, #112]	@ (8005c28 <HAL_DMA_IRQHandler+0xc9c>)
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	d018      	beq.n	8005bee <HAL_DMA_IRQHandler+0xc62>
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	4a1a      	ldr	r2, [pc, #104]	@ (8005c2c <HAL_DMA_IRQHandler+0xca0>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d013      	beq.n	8005bee <HAL_DMA_IRQHandler+0xc62>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	4a19      	ldr	r2, [pc, #100]	@ (8005c30 <HAL_DMA_IRQHandler+0xca4>)
 8005bcc:	4293      	cmp	r3, r2
 8005bce:	d00e      	beq.n	8005bee <HAL_DMA_IRQHandler+0xc62>
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	4a17      	ldr	r2, [pc, #92]	@ (8005c34 <HAL_DMA_IRQHandler+0xca8>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d009      	beq.n	8005bee <HAL_DMA_IRQHandler+0xc62>
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	4a16      	ldr	r2, [pc, #88]	@ (8005c38 <HAL_DMA_IRQHandler+0xcac>)
 8005be0:	4293      	cmp	r3, r2
 8005be2:	d004      	beq.n	8005bee <HAL_DMA_IRQHandler+0xc62>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	4a14      	ldr	r2, [pc, #80]	@ (8005c3c <HAL_DMA_IRQHandler+0xcb0>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d128      	bne.n	8005c40 <HAL_DMA_IRQHandler+0xcb4>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	681a      	ldr	r2, [r3, #0]
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f022 0214 	bic.w	r2, r2, #20
 8005bfc:	601a      	str	r2, [r3, #0]
 8005bfe:	e027      	b.n	8005c50 <HAL_DMA_IRQHandler+0xcc4>
 8005c00:	40020010 	.word	0x40020010
 8005c04:	40020028 	.word	0x40020028
 8005c08:	40020040 	.word	0x40020040
 8005c0c:	40020058 	.word	0x40020058
 8005c10:	40020070 	.word	0x40020070
 8005c14:	40020088 	.word	0x40020088
 8005c18:	400200a0 	.word	0x400200a0
 8005c1c:	400200b8 	.word	0x400200b8
 8005c20:	40020410 	.word	0x40020410
 8005c24:	40020428 	.word	0x40020428
 8005c28:	40020440 	.word	0x40020440
 8005c2c:	40020458 	.word	0x40020458
 8005c30:	40020470 	.word	0x40020470
 8005c34:	40020488 	.word	0x40020488
 8005c38:	400204a0 	.word	0x400204a0
 8005c3c:	400204b8 	.word	0x400204b8
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	681a      	ldr	r2, [r3, #0]
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f022 020a 	bic.w	r2, r2, #10
 8005c4e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2201      	movs	r2, #1
 8005c54:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	f000 8097 	beq.w	8005d98 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c6e:	6878      	ldr	r0, [r7, #4]
 8005c70:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005c72:	e091      	b.n	8005d98 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c78:	f003 031f 	and.w	r3, r3, #31
 8005c7c:	2208      	movs	r2, #8
 8005c7e:	409a      	lsls	r2, r3
 8005c80:	697b      	ldr	r3, [r7, #20]
 8005c82:	4013      	ands	r3, r2
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	f000 8088 	beq.w	8005d9a <HAL_DMA_IRQHandler+0xe0e>
 8005c8a:	693b      	ldr	r3, [r7, #16]
 8005c8c:	f003 0308 	and.w	r3, r3, #8
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	f000 8082 	beq.w	8005d9a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	4a41      	ldr	r2, [pc, #260]	@ (8005da0 <HAL_DMA_IRQHandler+0xe14>)
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d04a      	beq.n	8005d36 <HAL_DMA_IRQHandler+0xdaa>
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	4a3f      	ldr	r2, [pc, #252]	@ (8005da4 <HAL_DMA_IRQHandler+0xe18>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d045      	beq.n	8005d36 <HAL_DMA_IRQHandler+0xdaa>
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	4a3e      	ldr	r2, [pc, #248]	@ (8005da8 <HAL_DMA_IRQHandler+0xe1c>)
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	d040      	beq.n	8005d36 <HAL_DMA_IRQHandler+0xdaa>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	4a3c      	ldr	r2, [pc, #240]	@ (8005dac <HAL_DMA_IRQHandler+0xe20>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d03b      	beq.n	8005d36 <HAL_DMA_IRQHandler+0xdaa>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	4a3b      	ldr	r2, [pc, #236]	@ (8005db0 <HAL_DMA_IRQHandler+0xe24>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d036      	beq.n	8005d36 <HAL_DMA_IRQHandler+0xdaa>
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	4a39      	ldr	r2, [pc, #228]	@ (8005db4 <HAL_DMA_IRQHandler+0xe28>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d031      	beq.n	8005d36 <HAL_DMA_IRQHandler+0xdaa>
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	4a38      	ldr	r2, [pc, #224]	@ (8005db8 <HAL_DMA_IRQHandler+0xe2c>)
 8005cd8:	4293      	cmp	r3, r2
 8005cda:	d02c      	beq.n	8005d36 <HAL_DMA_IRQHandler+0xdaa>
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	4a36      	ldr	r2, [pc, #216]	@ (8005dbc <HAL_DMA_IRQHandler+0xe30>)
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d027      	beq.n	8005d36 <HAL_DMA_IRQHandler+0xdaa>
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	4a35      	ldr	r2, [pc, #212]	@ (8005dc0 <HAL_DMA_IRQHandler+0xe34>)
 8005cec:	4293      	cmp	r3, r2
 8005cee:	d022      	beq.n	8005d36 <HAL_DMA_IRQHandler+0xdaa>
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	4a33      	ldr	r2, [pc, #204]	@ (8005dc4 <HAL_DMA_IRQHandler+0xe38>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d01d      	beq.n	8005d36 <HAL_DMA_IRQHandler+0xdaa>
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	4a32      	ldr	r2, [pc, #200]	@ (8005dc8 <HAL_DMA_IRQHandler+0xe3c>)
 8005d00:	4293      	cmp	r3, r2
 8005d02:	d018      	beq.n	8005d36 <HAL_DMA_IRQHandler+0xdaa>
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	4a30      	ldr	r2, [pc, #192]	@ (8005dcc <HAL_DMA_IRQHandler+0xe40>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d013      	beq.n	8005d36 <HAL_DMA_IRQHandler+0xdaa>
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	4a2f      	ldr	r2, [pc, #188]	@ (8005dd0 <HAL_DMA_IRQHandler+0xe44>)
 8005d14:	4293      	cmp	r3, r2
 8005d16:	d00e      	beq.n	8005d36 <HAL_DMA_IRQHandler+0xdaa>
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	4a2d      	ldr	r2, [pc, #180]	@ (8005dd4 <HAL_DMA_IRQHandler+0xe48>)
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d009      	beq.n	8005d36 <HAL_DMA_IRQHandler+0xdaa>
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	4a2c      	ldr	r2, [pc, #176]	@ (8005dd8 <HAL_DMA_IRQHandler+0xe4c>)
 8005d28:	4293      	cmp	r3, r2
 8005d2a:	d004      	beq.n	8005d36 <HAL_DMA_IRQHandler+0xdaa>
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	4a2a      	ldr	r2, [pc, #168]	@ (8005ddc <HAL_DMA_IRQHandler+0xe50>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d108      	bne.n	8005d48 <HAL_DMA_IRQHandler+0xdbc>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	681a      	ldr	r2, [r3, #0]
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f022 021c 	bic.w	r2, r2, #28
 8005d44:	601a      	str	r2, [r3, #0]
 8005d46:	e007      	b.n	8005d58 <HAL_DMA_IRQHandler+0xdcc>
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	681a      	ldr	r2, [r3, #0]
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f022 020e 	bic.w	r2, r2, #14
 8005d56:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d5c:	f003 031f 	and.w	r3, r3, #31
 8005d60:	2201      	movs	r2, #1
 8005d62:	409a      	lsls	r2, r3
 8005d64:	69fb      	ldr	r3, [r7, #28]
 8005d66:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2201      	movs	r2, #1
 8005d6c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2201      	movs	r2, #1
 8005d72:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2200      	movs	r2, #0
 8005d7a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d009      	beq.n	8005d9a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d8a:	6878      	ldr	r0, [r7, #4]
 8005d8c:	4798      	blx	r3
 8005d8e:	e004      	b.n	8005d9a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8005d90:	bf00      	nop
 8005d92:	e002      	b.n	8005d9a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005d94:	bf00      	nop
 8005d96:	e000      	b.n	8005d9a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005d98:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005d9a:	3728      	adds	r7, #40	@ 0x28
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	bd80      	pop	{r7, pc}
 8005da0:	40020010 	.word	0x40020010
 8005da4:	40020028 	.word	0x40020028
 8005da8:	40020040 	.word	0x40020040
 8005dac:	40020058 	.word	0x40020058
 8005db0:	40020070 	.word	0x40020070
 8005db4:	40020088 	.word	0x40020088
 8005db8:	400200a0 	.word	0x400200a0
 8005dbc:	400200b8 	.word	0x400200b8
 8005dc0:	40020410 	.word	0x40020410
 8005dc4:	40020428 	.word	0x40020428
 8005dc8:	40020440 	.word	0x40020440
 8005dcc:	40020458 	.word	0x40020458
 8005dd0:	40020470 	.word	0x40020470
 8005dd4:	40020488 	.word	0x40020488
 8005dd8:	400204a0 	.word	0x400204a0
 8005ddc:	400204b8 	.word	0x400204b8

08005de0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005de0:	b480      	push	{r7}
 8005de2:	b087      	sub	sp, #28
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	60f8      	str	r0, [r7, #12]
 8005de8:	60b9      	str	r1, [r7, #8]
 8005dea:	607a      	str	r2, [r7, #4]
 8005dec:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005df2:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005df8:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	4a7f      	ldr	r2, [pc, #508]	@ (8005ffc <DMA_SetConfig+0x21c>)
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d072      	beq.n	8005eea <DMA_SetConfig+0x10a>
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	4a7d      	ldr	r2, [pc, #500]	@ (8006000 <DMA_SetConfig+0x220>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d06d      	beq.n	8005eea <DMA_SetConfig+0x10a>
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	4a7c      	ldr	r2, [pc, #496]	@ (8006004 <DMA_SetConfig+0x224>)
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d068      	beq.n	8005eea <DMA_SetConfig+0x10a>
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	4a7a      	ldr	r2, [pc, #488]	@ (8006008 <DMA_SetConfig+0x228>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d063      	beq.n	8005eea <DMA_SetConfig+0x10a>
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	4a79      	ldr	r2, [pc, #484]	@ (800600c <DMA_SetConfig+0x22c>)
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	d05e      	beq.n	8005eea <DMA_SetConfig+0x10a>
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	4a77      	ldr	r2, [pc, #476]	@ (8006010 <DMA_SetConfig+0x230>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d059      	beq.n	8005eea <DMA_SetConfig+0x10a>
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	4a76      	ldr	r2, [pc, #472]	@ (8006014 <DMA_SetConfig+0x234>)
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d054      	beq.n	8005eea <DMA_SetConfig+0x10a>
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	4a74      	ldr	r2, [pc, #464]	@ (8006018 <DMA_SetConfig+0x238>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d04f      	beq.n	8005eea <DMA_SetConfig+0x10a>
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	4a73      	ldr	r2, [pc, #460]	@ (800601c <DMA_SetConfig+0x23c>)
 8005e50:	4293      	cmp	r3, r2
 8005e52:	d04a      	beq.n	8005eea <DMA_SetConfig+0x10a>
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	4a71      	ldr	r2, [pc, #452]	@ (8006020 <DMA_SetConfig+0x240>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d045      	beq.n	8005eea <DMA_SetConfig+0x10a>
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	4a70      	ldr	r2, [pc, #448]	@ (8006024 <DMA_SetConfig+0x244>)
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d040      	beq.n	8005eea <DMA_SetConfig+0x10a>
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	4a6e      	ldr	r2, [pc, #440]	@ (8006028 <DMA_SetConfig+0x248>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d03b      	beq.n	8005eea <DMA_SetConfig+0x10a>
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	4a6d      	ldr	r2, [pc, #436]	@ (800602c <DMA_SetConfig+0x24c>)
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d036      	beq.n	8005eea <DMA_SetConfig+0x10a>
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	4a6b      	ldr	r2, [pc, #428]	@ (8006030 <DMA_SetConfig+0x250>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d031      	beq.n	8005eea <DMA_SetConfig+0x10a>
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	4a6a      	ldr	r2, [pc, #424]	@ (8006034 <DMA_SetConfig+0x254>)
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d02c      	beq.n	8005eea <DMA_SetConfig+0x10a>
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	4a68      	ldr	r2, [pc, #416]	@ (8006038 <DMA_SetConfig+0x258>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d027      	beq.n	8005eea <DMA_SetConfig+0x10a>
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	4a67      	ldr	r2, [pc, #412]	@ (800603c <DMA_SetConfig+0x25c>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d022      	beq.n	8005eea <DMA_SetConfig+0x10a>
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	4a65      	ldr	r2, [pc, #404]	@ (8006040 <DMA_SetConfig+0x260>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d01d      	beq.n	8005eea <DMA_SetConfig+0x10a>
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	4a64      	ldr	r2, [pc, #400]	@ (8006044 <DMA_SetConfig+0x264>)
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	d018      	beq.n	8005eea <DMA_SetConfig+0x10a>
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	4a62      	ldr	r2, [pc, #392]	@ (8006048 <DMA_SetConfig+0x268>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d013      	beq.n	8005eea <DMA_SetConfig+0x10a>
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	4a61      	ldr	r2, [pc, #388]	@ (800604c <DMA_SetConfig+0x26c>)
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d00e      	beq.n	8005eea <DMA_SetConfig+0x10a>
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	4a5f      	ldr	r2, [pc, #380]	@ (8006050 <DMA_SetConfig+0x270>)
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d009      	beq.n	8005eea <DMA_SetConfig+0x10a>
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	4a5e      	ldr	r2, [pc, #376]	@ (8006054 <DMA_SetConfig+0x274>)
 8005edc:	4293      	cmp	r3, r2
 8005ede:	d004      	beq.n	8005eea <DMA_SetConfig+0x10a>
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	4a5c      	ldr	r2, [pc, #368]	@ (8006058 <DMA_SetConfig+0x278>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d101      	bne.n	8005eee <DMA_SetConfig+0x10e>
 8005eea:	2301      	movs	r3, #1
 8005eec:	e000      	b.n	8005ef0 <DMA_SetConfig+0x110>
 8005eee:	2300      	movs	r3, #0
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d00d      	beq.n	8005f10 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005ef8:	68fa      	ldr	r2, [r7, #12]
 8005efa:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005efc:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d004      	beq.n	8005f10 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f0a:	68fa      	ldr	r2, [r7, #12]
 8005f0c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005f0e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	4a39      	ldr	r2, [pc, #228]	@ (8005ffc <DMA_SetConfig+0x21c>)
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d04a      	beq.n	8005fb0 <DMA_SetConfig+0x1d0>
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	4a38      	ldr	r2, [pc, #224]	@ (8006000 <DMA_SetConfig+0x220>)
 8005f20:	4293      	cmp	r3, r2
 8005f22:	d045      	beq.n	8005fb0 <DMA_SetConfig+0x1d0>
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	4a36      	ldr	r2, [pc, #216]	@ (8006004 <DMA_SetConfig+0x224>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d040      	beq.n	8005fb0 <DMA_SetConfig+0x1d0>
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	4a35      	ldr	r2, [pc, #212]	@ (8006008 <DMA_SetConfig+0x228>)
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d03b      	beq.n	8005fb0 <DMA_SetConfig+0x1d0>
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	4a33      	ldr	r2, [pc, #204]	@ (800600c <DMA_SetConfig+0x22c>)
 8005f3e:	4293      	cmp	r3, r2
 8005f40:	d036      	beq.n	8005fb0 <DMA_SetConfig+0x1d0>
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	4a32      	ldr	r2, [pc, #200]	@ (8006010 <DMA_SetConfig+0x230>)
 8005f48:	4293      	cmp	r3, r2
 8005f4a:	d031      	beq.n	8005fb0 <DMA_SetConfig+0x1d0>
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	4a30      	ldr	r2, [pc, #192]	@ (8006014 <DMA_SetConfig+0x234>)
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d02c      	beq.n	8005fb0 <DMA_SetConfig+0x1d0>
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	4a2f      	ldr	r2, [pc, #188]	@ (8006018 <DMA_SetConfig+0x238>)
 8005f5c:	4293      	cmp	r3, r2
 8005f5e:	d027      	beq.n	8005fb0 <DMA_SetConfig+0x1d0>
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	4a2d      	ldr	r2, [pc, #180]	@ (800601c <DMA_SetConfig+0x23c>)
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d022      	beq.n	8005fb0 <DMA_SetConfig+0x1d0>
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	4a2c      	ldr	r2, [pc, #176]	@ (8006020 <DMA_SetConfig+0x240>)
 8005f70:	4293      	cmp	r3, r2
 8005f72:	d01d      	beq.n	8005fb0 <DMA_SetConfig+0x1d0>
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	4a2a      	ldr	r2, [pc, #168]	@ (8006024 <DMA_SetConfig+0x244>)
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	d018      	beq.n	8005fb0 <DMA_SetConfig+0x1d0>
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	4a29      	ldr	r2, [pc, #164]	@ (8006028 <DMA_SetConfig+0x248>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d013      	beq.n	8005fb0 <DMA_SetConfig+0x1d0>
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	4a27      	ldr	r2, [pc, #156]	@ (800602c <DMA_SetConfig+0x24c>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d00e      	beq.n	8005fb0 <DMA_SetConfig+0x1d0>
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	4a26      	ldr	r2, [pc, #152]	@ (8006030 <DMA_SetConfig+0x250>)
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d009      	beq.n	8005fb0 <DMA_SetConfig+0x1d0>
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	4a24      	ldr	r2, [pc, #144]	@ (8006034 <DMA_SetConfig+0x254>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d004      	beq.n	8005fb0 <DMA_SetConfig+0x1d0>
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4a23      	ldr	r2, [pc, #140]	@ (8006038 <DMA_SetConfig+0x258>)
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d101      	bne.n	8005fb4 <DMA_SetConfig+0x1d4>
 8005fb0:	2301      	movs	r3, #1
 8005fb2:	e000      	b.n	8005fb6 <DMA_SetConfig+0x1d6>
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d059      	beq.n	800606e <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005fbe:	f003 031f 	and.w	r3, r3, #31
 8005fc2:	223f      	movs	r2, #63	@ 0x3f
 8005fc4:	409a      	lsls	r2, r3
 8005fc6:	697b      	ldr	r3, [r7, #20]
 8005fc8:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	681a      	ldr	r2, [r3, #0]
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005fd8:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	683a      	ldr	r2, [r7, #0]
 8005fe0:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	689b      	ldr	r3, [r3, #8]
 8005fe6:	2b40      	cmp	r3, #64	@ 0x40
 8005fe8:	d138      	bne.n	800605c <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	687a      	ldr	r2, [r7, #4]
 8005ff0:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	68ba      	ldr	r2, [r7, #8]
 8005ff8:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005ffa:	e086      	b.n	800610a <DMA_SetConfig+0x32a>
 8005ffc:	40020010 	.word	0x40020010
 8006000:	40020028 	.word	0x40020028
 8006004:	40020040 	.word	0x40020040
 8006008:	40020058 	.word	0x40020058
 800600c:	40020070 	.word	0x40020070
 8006010:	40020088 	.word	0x40020088
 8006014:	400200a0 	.word	0x400200a0
 8006018:	400200b8 	.word	0x400200b8
 800601c:	40020410 	.word	0x40020410
 8006020:	40020428 	.word	0x40020428
 8006024:	40020440 	.word	0x40020440
 8006028:	40020458 	.word	0x40020458
 800602c:	40020470 	.word	0x40020470
 8006030:	40020488 	.word	0x40020488
 8006034:	400204a0 	.word	0x400204a0
 8006038:	400204b8 	.word	0x400204b8
 800603c:	58025408 	.word	0x58025408
 8006040:	5802541c 	.word	0x5802541c
 8006044:	58025430 	.word	0x58025430
 8006048:	58025444 	.word	0x58025444
 800604c:	58025458 	.word	0x58025458
 8006050:	5802546c 	.word	0x5802546c
 8006054:	58025480 	.word	0x58025480
 8006058:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	68ba      	ldr	r2, [r7, #8]
 8006062:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	687a      	ldr	r2, [r7, #4]
 800606a:	60da      	str	r2, [r3, #12]
}
 800606c:	e04d      	b.n	800610a <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	4a29      	ldr	r2, [pc, #164]	@ (8006118 <DMA_SetConfig+0x338>)
 8006074:	4293      	cmp	r3, r2
 8006076:	d022      	beq.n	80060be <DMA_SetConfig+0x2de>
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	4a27      	ldr	r2, [pc, #156]	@ (800611c <DMA_SetConfig+0x33c>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d01d      	beq.n	80060be <DMA_SetConfig+0x2de>
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	4a26      	ldr	r2, [pc, #152]	@ (8006120 <DMA_SetConfig+0x340>)
 8006088:	4293      	cmp	r3, r2
 800608a:	d018      	beq.n	80060be <DMA_SetConfig+0x2de>
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	4a24      	ldr	r2, [pc, #144]	@ (8006124 <DMA_SetConfig+0x344>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d013      	beq.n	80060be <DMA_SetConfig+0x2de>
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	4a23      	ldr	r2, [pc, #140]	@ (8006128 <DMA_SetConfig+0x348>)
 800609c:	4293      	cmp	r3, r2
 800609e:	d00e      	beq.n	80060be <DMA_SetConfig+0x2de>
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4a21      	ldr	r2, [pc, #132]	@ (800612c <DMA_SetConfig+0x34c>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d009      	beq.n	80060be <DMA_SetConfig+0x2de>
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	4a20      	ldr	r2, [pc, #128]	@ (8006130 <DMA_SetConfig+0x350>)
 80060b0:	4293      	cmp	r3, r2
 80060b2:	d004      	beq.n	80060be <DMA_SetConfig+0x2de>
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	4a1e      	ldr	r2, [pc, #120]	@ (8006134 <DMA_SetConfig+0x354>)
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d101      	bne.n	80060c2 <DMA_SetConfig+0x2e2>
 80060be:	2301      	movs	r3, #1
 80060c0:	e000      	b.n	80060c4 <DMA_SetConfig+0x2e4>
 80060c2:	2300      	movs	r3, #0
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d020      	beq.n	800610a <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80060cc:	f003 031f 	and.w	r3, r3, #31
 80060d0:	2201      	movs	r2, #1
 80060d2:	409a      	lsls	r2, r3
 80060d4:	693b      	ldr	r3, [r7, #16]
 80060d6:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	683a      	ldr	r2, [r7, #0]
 80060de:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	689b      	ldr	r3, [r3, #8]
 80060e4:	2b40      	cmp	r3, #64	@ 0x40
 80060e6:	d108      	bne.n	80060fa <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	687a      	ldr	r2, [r7, #4]
 80060ee:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	68ba      	ldr	r2, [r7, #8]
 80060f6:	60da      	str	r2, [r3, #12]
}
 80060f8:	e007      	b.n	800610a <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	68ba      	ldr	r2, [r7, #8]
 8006100:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	687a      	ldr	r2, [r7, #4]
 8006108:	60da      	str	r2, [r3, #12]
}
 800610a:	bf00      	nop
 800610c:	371c      	adds	r7, #28
 800610e:	46bd      	mov	sp, r7
 8006110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006114:	4770      	bx	lr
 8006116:	bf00      	nop
 8006118:	58025408 	.word	0x58025408
 800611c:	5802541c 	.word	0x5802541c
 8006120:	58025430 	.word	0x58025430
 8006124:	58025444 	.word	0x58025444
 8006128:	58025458 	.word	0x58025458
 800612c:	5802546c 	.word	0x5802546c
 8006130:	58025480 	.word	0x58025480
 8006134:	58025494 	.word	0x58025494

08006138 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006138:	b480      	push	{r7}
 800613a:	b085      	sub	sp, #20
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	4a42      	ldr	r2, [pc, #264]	@ (8006250 <DMA_CalcBaseAndBitshift+0x118>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d04a      	beq.n	80061e0 <DMA_CalcBaseAndBitshift+0xa8>
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	4a41      	ldr	r2, [pc, #260]	@ (8006254 <DMA_CalcBaseAndBitshift+0x11c>)
 8006150:	4293      	cmp	r3, r2
 8006152:	d045      	beq.n	80061e0 <DMA_CalcBaseAndBitshift+0xa8>
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	4a3f      	ldr	r2, [pc, #252]	@ (8006258 <DMA_CalcBaseAndBitshift+0x120>)
 800615a:	4293      	cmp	r3, r2
 800615c:	d040      	beq.n	80061e0 <DMA_CalcBaseAndBitshift+0xa8>
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	4a3e      	ldr	r2, [pc, #248]	@ (800625c <DMA_CalcBaseAndBitshift+0x124>)
 8006164:	4293      	cmp	r3, r2
 8006166:	d03b      	beq.n	80061e0 <DMA_CalcBaseAndBitshift+0xa8>
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	4a3c      	ldr	r2, [pc, #240]	@ (8006260 <DMA_CalcBaseAndBitshift+0x128>)
 800616e:	4293      	cmp	r3, r2
 8006170:	d036      	beq.n	80061e0 <DMA_CalcBaseAndBitshift+0xa8>
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	4a3b      	ldr	r2, [pc, #236]	@ (8006264 <DMA_CalcBaseAndBitshift+0x12c>)
 8006178:	4293      	cmp	r3, r2
 800617a:	d031      	beq.n	80061e0 <DMA_CalcBaseAndBitshift+0xa8>
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	4a39      	ldr	r2, [pc, #228]	@ (8006268 <DMA_CalcBaseAndBitshift+0x130>)
 8006182:	4293      	cmp	r3, r2
 8006184:	d02c      	beq.n	80061e0 <DMA_CalcBaseAndBitshift+0xa8>
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	4a38      	ldr	r2, [pc, #224]	@ (800626c <DMA_CalcBaseAndBitshift+0x134>)
 800618c:	4293      	cmp	r3, r2
 800618e:	d027      	beq.n	80061e0 <DMA_CalcBaseAndBitshift+0xa8>
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	4a36      	ldr	r2, [pc, #216]	@ (8006270 <DMA_CalcBaseAndBitshift+0x138>)
 8006196:	4293      	cmp	r3, r2
 8006198:	d022      	beq.n	80061e0 <DMA_CalcBaseAndBitshift+0xa8>
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	4a35      	ldr	r2, [pc, #212]	@ (8006274 <DMA_CalcBaseAndBitshift+0x13c>)
 80061a0:	4293      	cmp	r3, r2
 80061a2:	d01d      	beq.n	80061e0 <DMA_CalcBaseAndBitshift+0xa8>
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	4a33      	ldr	r2, [pc, #204]	@ (8006278 <DMA_CalcBaseAndBitshift+0x140>)
 80061aa:	4293      	cmp	r3, r2
 80061ac:	d018      	beq.n	80061e0 <DMA_CalcBaseAndBitshift+0xa8>
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	4a32      	ldr	r2, [pc, #200]	@ (800627c <DMA_CalcBaseAndBitshift+0x144>)
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d013      	beq.n	80061e0 <DMA_CalcBaseAndBitshift+0xa8>
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	4a30      	ldr	r2, [pc, #192]	@ (8006280 <DMA_CalcBaseAndBitshift+0x148>)
 80061be:	4293      	cmp	r3, r2
 80061c0:	d00e      	beq.n	80061e0 <DMA_CalcBaseAndBitshift+0xa8>
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	4a2f      	ldr	r2, [pc, #188]	@ (8006284 <DMA_CalcBaseAndBitshift+0x14c>)
 80061c8:	4293      	cmp	r3, r2
 80061ca:	d009      	beq.n	80061e0 <DMA_CalcBaseAndBitshift+0xa8>
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	4a2d      	ldr	r2, [pc, #180]	@ (8006288 <DMA_CalcBaseAndBitshift+0x150>)
 80061d2:	4293      	cmp	r3, r2
 80061d4:	d004      	beq.n	80061e0 <DMA_CalcBaseAndBitshift+0xa8>
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	4a2c      	ldr	r2, [pc, #176]	@ (800628c <DMA_CalcBaseAndBitshift+0x154>)
 80061dc:	4293      	cmp	r3, r2
 80061de:	d101      	bne.n	80061e4 <DMA_CalcBaseAndBitshift+0xac>
 80061e0:	2301      	movs	r3, #1
 80061e2:	e000      	b.n	80061e6 <DMA_CalcBaseAndBitshift+0xae>
 80061e4:	2300      	movs	r3, #0
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d024      	beq.n	8006234 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	b2db      	uxtb	r3, r3
 80061f0:	3b10      	subs	r3, #16
 80061f2:	4a27      	ldr	r2, [pc, #156]	@ (8006290 <DMA_CalcBaseAndBitshift+0x158>)
 80061f4:	fba2 2303 	umull	r2, r3, r2, r3
 80061f8:	091b      	lsrs	r3, r3, #4
 80061fa:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	f003 0307 	and.w	r3, r3, #7
 8006202:	4a24      	ldr	r2, [pc, #144]	@ (8006294 <DMA_CalcBaseAndBitshift+0x15c>)
 8006204:	5cd3      	ldrb	r3, [r2, r3]
 8006206:	461a      	mov	r2, r3
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	2b03      	cmp	r3, #3
 8006210:	d908      	bls.n	8006224 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	461a      	mov	r2, r3
 8006218:	4b1f      	ldr	r3, [pc, #124]	@ (8006298 <DMA_CalcBaseAndBitshift+0x160>)
 800621a:	4013      	ands	r3, r2
 800621c:	1d1a      	adds	r2, r3, #4
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	659a      	str	r2, [r3, #88]	@ 0x58
 8006222:	e00d      	b.n	8006240 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	461a      	mov	r2, r3
 800622a:	4b1b      	ldr	r3, [pc, #108]	@ (8006298 <DMA_CalcBaseAndBitshift+0x160>)
 800622c:	4013      	ands	r3, r2
 800622e:	687a      	ldr	r2, [r7, #4]
 8006230:	6593      	str	r3, [r2, #88]	@ 0x58
 8006232:	e005      	b.n	8006240 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8006244:	4618      	mov	r0, r3
 8006246:	3714      	adds	r7, #20
 8006248:	46bd      	mov	sp, r7
 800624a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624e:	4770      	bx	lr
 8006250:	40020010 	.word	0x40020010
 8006254:	40020028 	.word	0x40020028
 8006258:	40020040 	.word	0x40020040
 800625c:	40020058 	.word	0x40020058
 8006260:	40020070 	.word	0x40020070
 8006264:	40020088 	.word	0x40020088
 8006268:	400200a0 	.word	0x400200a0
 800626c:	400200b8 	.word	0x400200b8
 8006270:	40020410 	.word	0x40020410
 8006274:	40020428 	.word	0x40020428
 8006278:	40020440 	.word	0x40020440
 800627c:	40020458 	.word	0x40020458
 8006280:	40020470 	.word	0x40020470
 8006284:	40020488 	.word	0x40020488
 8006288:	400204a0 	.word	0x400204a0
 800628c:	400204b8 	.word	0x400204b8
 8006290:	aaaaaaab 	.word	0xaaaaaaab
 8006294:	0800e060 	.word	0x0800e060
 8006298:	fffffc00 	.word	0xfffffc00

0800629c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800629c:	b480      	push	{r7}
 800629e:	b085      	sub	sp, #20
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80062a4:	2300      	movs	r3, #0
 80062a6:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	699b      	ldr	r3, [r3, #24]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d120      	bne.n	80062f2 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062b4:	2b03      	cmp	r3, #3
 80062b6:	d858      	bhi.n	800636a <DMA_CheckFifoParam+0xce>
 80062b8:	a201      	add	r2, pc, #4	@ (adr r2, 80062c0 <DMA_CheckFifoParam+0x24>)
 80062ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062be:	bf00      	nop
 80062c0:	080062d1 	.word	0x080062d1
 80062c4:	080062e3 	.word	0x080062e3
 80062c8:	080062d1 	.word	0x080062d1
 80062cc:	0800636b 	.word	0x0800636b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062d4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d048      	beq.n	800636e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80062dc:	2301      	movs	r3, #1
 80062de:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80062e0:	e045      	b.n	800636e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062e6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80062ea:	d142      	bne.n	8006372 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80062ec:	2301      	movs	r3, #1
 80062ee:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80062f0:	e03f      	b.n	8006372 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	699b      	ldr	r3, [r3, #24]
 80062f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80062fa:	d123      	bne.n	8006344 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006300:	2b03      	cmp	r3, #3
 8006302:	d838      	bhi.n	8006376 <DMA_CheckFifoParam+0xda>
 8006304:	a201      	add	r2, pc, #4	@ (adr r2, 800630c <DMA_CheckFifoParam+0x70>)
 8006306:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800630a:	bf00      	nop
 800630c:	0800631d 	.word	0x0800631d
 8006310:	08006323 	.word	0x08006323
 8006314:	0800631d 	.word	0x0800631d
 8006318:	08006335 	.word	0x08006335
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800631c:	2301      	movs	r3, #1
 800631e:	73fb      	strb	r3, [r7, #15]
        break;
 8006320:	e030      	b.n	8006384 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006326:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800632a:	2b00      	cmp	r3, #0
 800632c:	d025      	beq.n	800637a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800632e:	2301      	movs	r3, #1
 8006330:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006332:	e022      	b.n	800637a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006338:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800633c:	d11f      	bne.n	800637e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800633e:	2301      	movs	r3, #1
 8006340:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006342:	e01c      	b.n	800637e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006348:	2b02      	cmp	r3, #2
 800634a:	d902      	bls.n	8006352 <DMA_CheckFifoParam+0xb6>
 800634c:	2b03      	cmp	r3, #3
 800634e:	d003      	beq.n	8006358 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8006350:	e018      	b.n	8006384 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8006352:	2301      	movs	r3, #1
 8006354:	73fb      	strb	r3, [r7, #15]
        break;
 8006356:	e015      	b.n	8006384 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800635c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006360:	2b00      	cmp	r3, #0
 8006362:	d00e      	beq.n	8006382 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8006364:	2301      	movs	r3, #1
 8006366:	73fb      	strb	r3, [r7, #15]
    break;
 8006368:	e00b      	b.n	8006382 <DMA_CheckFifoParam+0xe6>
        break;
 800636a:	bf00      	nop
 800636c:	e00a      	b.n	8006384 <DMA_CheckFifoParam+0xe8>
        break;
 800636e:	bf00      	nop
 8006370:	e008      	b.n	8006384 <DMA_CheckFifoParam+0xe8>
        break;
 8006372:	bf00      	nop
 8006374:	e006      	b.n	8006384 <DMA_CheckFifoParam+0xe8>
        break;
 8006376:	bf00      	nop
 8006378:	e004      	b.n	8006384 <DMA_CheckFifoParam+0xe8>
        break;
 800637a:	bf00      	nop
 800637c:	e002      	b.n	8006384 <DMA_CheckFifoParam+0xe8>
        break;
 800637e:	bf00      	nop
 8006380:	e000      	b.n	8006384 <DMA_CheckFifoParam+0xe8>
    break;
 8006382:	bf00      	nop
    }
  }

  return status;
 8006384:	7bfb      	ldrb	r3, [r7, #15]
}
 8006386:	4618      	mov	r0, r3
 8006388:	3714      	adds	r7, #20
 800638a:	46bd      	mov	sp, r7
 800638c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006390:	4770      	bx	lr
 8006392:	bf00      	nop

08006394 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006394:	b480      	push	{r7}
 8006396:	b085      	sub	sp, #20
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	4a38      	ldr	r2, [pc, #224]	@ (8006488 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80063a8:	4293      	cmp	r3, r2
 80063aa:	d022      	beq.n	80063f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	4a36      	ldr	r2, [pc, #216]	@ (800648c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80063b2:	4293      	cmp	r3, r2
 80063b4:	d01d      	beq.n	80063f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	4a35      	ldr	r2, [pc, #212]	@ (8006490 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80063bc:	4293      	cmp	r3, r2
 80063be:	d018      	beq.n	80063f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	4a33      	ldr	r2, [pc, #204]	@ (8006494 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d013      	beq.n	80063f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	4a32      	ldr	r2, [pc, #200]	@ (8006498 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d00e      	beq.n	80063f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	4a30      	ldr	r2, [pc, #192]	@ (800649c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80063da:	4293      	cmp	r3, r2
 80063dc:	d009      	beq.n	80063f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	4a2f      	ldr	r2, [pc, #188]	@ (80064a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80063e4:	4293      	cmp	r3, r2
 80063e6:	d004      	beq.n	80063f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	4a2d      	ldr	r2, [pc, #180]	@ (80064a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d101      	bne.n	80063f6 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80063f2:	2301      	movs	r3, #1
 80063f4:	e000      	b.n	80063f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80063f6:	2300      	movs	r3, #0
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d01a      	beq.n	8006432 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	b2db      	uxtb	r3, r3
 8006402:	3b08      	subs	r3, #8
 8006404:	4a28      	ldr	r2, [pc, #160]	@ (80064a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8006406:	fba2 2303 	umull	r2, r3, r2, r3
 800640a:	091b      	lsrs	r3, r3, #4
 800640c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800640e:	68fa      	ldr	r2, [r7, #12]
 8006410:	4b26      	ldr	r3, [pc, #152]	@ (80064ac <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8006412:	4413      	add	r3, r2
 8006414:	009b      	lsls	r3, r3, #2
 8006416:	461a      	mov	r2, r3
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	4a24      	ldr	r2, [pc, #144]	@ (80064b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8006420:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	f003 031f 	and.w	r3, r3, #31
 8006428:	2201      	movs	r2, #1
 800642a:	409a      	lsls	r2, r3
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8006430:	e024      	b.n	800647c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	b2db      	uxtb	r3, r3
 8006438:	3b10      	subs	r3, #16
 800643a:	4a1e      	ldr	r2, [pc, #120]	@ (80064b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800643c:	fba2 2303 	umull	r2, r3, r2, r3
 8006440:	091b      	lsrs	r3, r3, #4
 8006442:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8006444:	68bb      	ldr	r3, [r7, #8]
 8006446:	4a1c      	ldr	r2, [pc, #112]	@ (80064b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8006448:	4293      	cmp	r3, r2
 800644a:	d806      	bhi.n	800645a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800644c:	68bb      	ldr	r3, [r7, #8]
 800644e:	4a1b      	ldr	r2, [pc, #108]	@ (80064bc <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8006450:	4293      	cmp	r3, r2
 8006452:	d902      	bls.n	800645a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	3308      	adds	r3, #8
 8006458:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800645a:	68fa      	ldr	r2, [r7, #12]
 800645c:	4b18      	ldr	r3, [pc, #96]	@ (80064c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800645e:	4413      	add	r3, r2
 8006460:	009b      	lsls	r3, r3, #2
 8006462:	461a      	mov	r2, r3
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	4a16      	ldr	r2, [pc, #88]	@ (80064c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800646c:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	f003 031f 	and.w	r3, r3, #31
 8006474:	2201      	movs	r2, #1
 8006476:	409a      	lsls	r2, r3
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800647c:	bf00      	nop
 800647e:	3714      	adds	r7, #20
 8006480:	46bd      	mov	sp, r7
 8006482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006486:	4770      	bx	lr
 8006488:	58025408 	.word	0x58025408
 800648c:	5802541c 	.word	0x5802541c
 8006490:	58025430 	.word	0x58025430
 8006494:	58025444 	.word	0x58025444
 8006498:	58025458 	.word	0x58025458
 800649c:	5802546c 	.word	0x5802546c
 80064a0:	58025480 	.word	0x58025480
 80064a4:	58025494 	.word	0x58025494
 80064a8:	cccccccd 	.word	0xcccccccd
 80064ac:	16009600 	.word	0x16009600
 80064b0:	58025880 	.word	0x58025880
 80064b4:	aaaaaaab 	.word	0xaaaaaaab
 80064b8:	400204b8 	.word	0x400204b8
 80064bc:	4002040f 	.word	0x4002040f
 80064c0:	10008200 	.word	0x10008200
 80064c4:	40020880 	.word	0x40020880

080064c8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80064c8:	b480      	push	{r7}
 80064ca:	b085      	sub	sp, #20
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	685b      	ldr	r3, [r3, #4]
 80064d4:	b2db      	uxtb	r3, r3
 80064d6:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d04a      	beq.n	8006574 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	2b08      	cmp	r3, #8
 80064e2:	d847      	bhi.n	8006574 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	4a25      	ldr	r2, [pc, #148]	@ (8006580 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d022      	beq.n	8006534 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	4a24      	ldr	r2, [pc, #144]	@ (8006584 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80064f4:	4293      	cmp	r3, r2
 80064f6:	d01d      	beq.n	8006534 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	4a22      	ldr	r2, [pc, #136]	@ (8006588 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d018      	beq.n	8006534 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	4a21      	ldr	r2, [pc, #132]	@ (800658c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8006508:	4293      	cmp	r3, r2
 800650a:	d013      	beq.n	8006534 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	4a1f      	ldr	r2, [pc, #124]	@ (8006590 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8006512:	4293      	cmp	r3, r2
 8006514:	d00e      	beq.n	8006534 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	4a1e      	ldr	r2, [pc, #120]	@ (8006594 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800651c:	4293      	cmp	r3, r2
 800651e:	d009      	beq.n	8006534 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	4a1c      	ldr	r2, [pc, #112]	@ (8006598 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8006526:	4293      	cmp	r3, r2
 8006528:	d004      	beq.n	8006534 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	4a1b      	ldr	r2, [pc, #108]	@ (800659c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8006530:	4293      	cmp	r3, r2
 8006532:	d101      	bne.n	8006538 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8006534:	2301      	movs	r3, #1
 8006536:	e000      	b.n	800653a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8006538:	2300      	movs	r3, #0
 800653a:	2b00      	cmp	r3, #0
 800653c:	d00a      	beq.n	8006554 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800653e:	68fa      	ldr	r2, [r7, #12]
 8006540:	4b17      	ldr	r3, [pc, #92]	@ (80065a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8006542:	4413      	add	r3, r2
 8006544:	009b      	lsls	r3, r3, #2
 8006546:	461a      	mov	r2, r3
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	4a15      	ldr	r2, [pc, #84]	@ (80065a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8006550:	671a      	str	r2, [r3, #112]	@ 0x70
 8006552:	e009      	b.n	8006568 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006554:	68fa      	ldr	r2, [r7, #12]
 8006556:	4b14      	ldr	r3, [pc, #80]	@ (80065a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8006558:	4413      	add	r3, r2
 800655a:	009b      	lsls	r3, r3, #2
 800655c:	461a      	mov	r2, r3
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	4a11      	ldr	r2, [pc, #68]	@ (80065ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8006566:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	3b01      	subs	r3, #1
 800656c:	2201      	movs	r2, #1
 800656e:	409a      	lsls	r2, r3
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8006574:	bf00      	nop
 8006576:	3714      	adds	r7, #20
 8006578:	46bd      	mov	sp, r7
 800657a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657e:	4770      	bx	lr
 8006580:	58025408 	.word	0x58025408
 8006584:	5802541c 	.word	0x5802541c
 8006588:	58025430 	.word	0x58025430
 800658c:	58025444 	.word	0x58025444
 8006590:	58025458 	.word	0x58025458
 8006594:	5802546c 	.word	0x5802546c
 8006598:	58025480 	.word	0x58025480
 800659c:	58025494 	.word	0x58025494
 80065a0:	1600963f 	.word	0x1600963f
 80065a4:	58025940 	.word	0x58025940
 80065a8:	1000823f 	.word	0x1000823f
 80065ac:	40020940 	.word	0x40020940

080065b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80065b0:	b480      	push	{r7}
 80065b2:	b089      	sub	sp, #36	@ 0x24
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
 80065b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80065ba:	2300      	movs	r3, #0
 80065bc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80065be:	4b86      	ldr	r3, [pc, #536]	@ (80067d8 <HAL_GPIO_Init+0x228>)
 80065c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80065c2:	e18c      	b.n	80068de <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80065c4:	683b      	ldr	r3, [r7, #0]
 80065c6:	681a      	ldr	r2, [r3, #0]
 80065c8:	2101      	movs	r1, #1
 80065ca:	69fb      	ldr	r3, [r7, #28]
 80065cc:	fa01 f303 	lsl.w	r3, r1, r3
 80065d0:	4013      	ands	r3, r2
 80065d2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80065d4:	693b      	ldr	r3, [r7, #16]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	f000 817e 	beq.w	80068d8 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	685b      	ldr	r3, [r3, #4]
 80065e0:	f003 0303 	and.w	r3, r3, #3
 80065e4:	2b01      	cmp	r3, #1
 80065e6:	d005      	beq.n	80065f4 <HAL_GPIO_Init+0x44>
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	685b      	ldr	r3, [r3, #4]
 80065ec:	f003 0303 	and.w	r3, r3, #3
 80065f0:	2b02      	cmp	r3, #2
 80065f2:	d130      	bne.n	8006656 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	689b      	ldr	r3, [r3, #8]
 80065f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80065fa:	69fb      	ldr	r3, [r7, #28]
 80065fc:	005b      	lsls	r3, r3, #1
 80065fe:	2203      	movs	r2, #3
 8006600:	fa02 f303 	lsl.w	r3, r2, r3
 8006604:	43db      	mvns	r3, r3
 8006606:	69ba      	ldr	r2, [r7, #24]
 8006608:	4013      	ands	r3, r2
 800660a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	68da      	ldr	r2, [r3, #12]
 8006610:	69fb      	ldr	r3, [r7, #28]
 8006612:	005b      	lsls	r3, r3, #1
 8006614:	fa02 f303 	lsl.w	r3, r2, r3
 8006618:	69ba      	ldr	r2, [r7, #24]
 800661a:	4313      	orrs	r3, r2
 800661c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	69ba      	ldr	r2, [r7, #24]
 8006622:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	685b      	ldr	r3, [r3, #4]
 8006628:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800662a:	2201      	movs	r2, #1
 800662c:	69fb      	ldr	r3, [r7, #28]
 800662e:	fa02 f303 	lsl.w	r3, r2, r3
 8006632:	43db      	mvns	r3, r3
 8006634:	69ba      	ldr	r2, [r7, #24]
 8006636:	4013      	ands	r3, r2
 8006638:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	685b      	ldr	r3, [r3, #4]
 800663e:	091b      	lsrs	r3, r3, #4
 8006640:	f003 0201 	and.w	r2, r3, #1
 8006644:	69fb      	ldr	r3, [r7, #28]
 8006646:	fa02 f303 	lsl.w	r3, r2, r3
 800664a:	69ba      	ldr	r2, [r7, #24]
 800664c:	4313      	orrs	r3, r2
 800664e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	69ba      	ldr	r2, [r7, #24]
 8006654:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006656:	683b      	ldr	r3, [r7, #0]
 8006658:	685b      	ldr	r3, [r3, #4]
 800665a:	f003 0303 	and.w	r3, r3, #3
 800665e:	2b03      	cmp	r3, #3
 8006660:	d017      	beq.n	8006692 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	68db      	ldr	r3, [r3, #12]
 8006666:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006668:	69fb      	ldr	r3, [r7, #28]
 800666a:	005b      	lsls	r3, r3, #1
 800666c:	2203      	movs	r2, #3
 800666e:	fa02 f303 	lsl.w	r3, r2, r3
 8006672:	43db      	mvns	r3, r3
 8006674:	69ba      	ldr	r2, [r7, #24]
 8006676:	4013      	ands	r3, r2
 8006678:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	689a      	ldr	r2, [r3, #8]
 800667e:	69fb      	ldr	r3, [r7, #28]
 8006680:	005b      	lsls	r3, r3, #1
 8006682:	fa02 f303 	lsl.w	r3, r2, r3
 8006686:	69ba      	ldr	r2, [r7, #24]
 8006688:	4313      	orrs	r3, r2
 800668a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	69ba      	ldr	r2, [r7, #24]
 8006690:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	685b      	ldr	r3, [r3, #4]
 8006696:	f003 0303 	and.w	r3, r3, #3
 800669a:	2b02      	cmp	r3, #2
 800669c:	d123      	bne.n	80066e6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800669e:	69fb      	ldr	r3, [r7, #28]
 80066a0:	08da      	lsrs	r2, r3, #3
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	3208      	adds	r2, #8
 80066a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80066ac:	69fb      	ldr	r3, [r7, #28]
 80066ae:	f003 0307 	and.w	r3, r3, #7
 80066b2:	009b      	lsls	r3, r3, #2
 80066b4:	220f      	movs	r2, #15
 80066b6:	fa02 f303 	lsl.w	r3, r2, r3
 80066ba:	43db      	mvns	r3, r3
 80066bc:	69ba      	ldr	r2, [r7, #24]
 80066be:	4013      	ands	r3, r2
 80066c0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	691a      	ldr	r2, [r3, #16]
 80066c6:	69fb      	ldr	r3, [r7, #28]
 80066c8:	f003 0307 	and.w	r3, r3, #7
 80066cc:	009b      	lsls	r3, r3, #2
 80066ce:	fa02 f303 	lsl.w	r3, r2, r3
 80066d2:	69ba      	ldr	r2, [r7, #24]
 80066d4:	4313      	orrs	r3, r2
 80066d6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80066d8:	69fb      	ldr	r3, [r7, #28]
 80066da:	08da      	lsrs	r2, r3, #3
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	3208      	adds	r2, #8
 80066e0:	69b9      	ldr	r1, [r7, #24]
 80066e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80066ec:	69fb      	ldr	r3, [r7, #28]
 80066ee:	005b      	lsls	r3, r3, #1
 80066f0:	2203      	movs	r2, #3
 80066f2:	fa02 f303 	lsl.w	r3, r2, r3
 80066f6:	43db      	mvns	r3, r3
 80066f8:	69ba      	ldr	r2, [r7, #24]
 80066fa:	4013      	ands	r3, r2
 80066fc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	685b      	ldr	r3, [r3, #4]
 8006702:	f003 0203 	and.w	r2, r3, #3
 8006706:	69fb      	ldr	r3, [r7, #28]
 8006708:	005b      	lsls	r3, r3, #1
 800670a:	fa02 f303 	lsl.w	r3, r2, r3
 800670e:	69ba      	ldr	r2, [r7, #24]
 8006710:	4313      	orrs	r3, r2
 8006712:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	69ba      	ldr	r2, [r7, #24]
 8006718:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	685b      	ldr	r3, [r3, #4]
 800671e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006722:	2b00      	cmp	r3, #0
 8006724:	f000 80d8 	beq.w	80068d8 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006728:	4b2c      	ldr	r3, [pc, #176]	@ (80067dc <HAL_GPIO_Init+0x22c>)
 800672a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800672e:	4a2b      	ldr	r2, [pc, #172]	@ (80067dc <HAL_GPIO_Init+0x22c>)
 8006730:	f043 0302 	orr.w	r3, r3, #2
 8006734:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8006738:	4b28      	ldr	r3, [pc, #160]	@ (80067dc <HAL_GPIO_Init+0x22c>)
 800673a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800673e:	f003 0302 	and.w	r3, r3, #2
 8006742:	60fb      	str	r3, [r7, #12]
 8006744:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006746:	4a26      	ldr	r2, [pc, #152]	@ (80067e0 <HAL_GPIO_Init+0x230>)
 8006748:	69fb      	ldr	r3, [r7, #28]
 800674a:	089b      	lsrs	r3, r3, #2
 800674c:	3302      	adds	r3, #2
 800674e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006752:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006754:	69fb      	ldr	r3, [r7, #28]
 8006756:	f003 0303 	and.w	r3, r3, #3
 800675a:	009b      	lsls	r3, r3, #2
 800675c:	220f      	movs	r2, #15
 800675e:	fa02 f303 	lsl.w	r3, r2, r3
 8006762:	43db      	mvns	r3, r3
 8006764:	69ba      	ldr	r2, [r7, #24]
 8006766:	4013      	ands	r3, r2
 8006768:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	4a1d      	ldr	r2, [pc, #116]	@ (80067e4 <HAL_GPIO_Init+0x234>)
 800676e:	4293      	cmp	r3, r2
 8006770:	d04a      	beq.n	8006808 <HAL_GPIO_Init+0x258>
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	4a1c      	ldr	r2, [pc, #112]	@ (80067e8 <HAL_GPIO_Init+0x238>)
 8006776:	4293      	cmp	r3, r2
 8006778:	d02b      	beq.n	80067d2 <HAL_GPIO_Init+0x222>
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	4a1b      	ldr	r2, [pc, #108]	@ (80067ec <HAL_GPIO_Init+0x23c>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d025      	beq.n	80067ce <HAL_GPIO_Init+0x21e>
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	4a1a      	ldr	r2, [pc, #104]	@ (80067f0 <HAL_GPIO_Init+0x240>)
 8006786:	4293      	cmp	r3, r2
 8006788:	d01f      	beq.n	80067ca <HAL_GPIO_Init+0x21a>
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	4a19      	ldr	r2, [pc, #100]	@ (80067f4 <HAL_GPIO_Init+0x244>)
 800678e:	4293      	cmp	r3, r2
 8006790:	d019      	beq.n	80067c6 <HAL_GPIO_Init+0x216>
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	4a18      	ldr	r2, [pc, #96]	@ (80067f8 <HAL_GPIO_Init+0x248>)
 8006796:	4293      	cmp	r3, r2
 8006798:	d013      	beq.n	80067c2 <HAL_GPIO_Init+0x212>
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	4a17      	ldr	r2, [pc, #92]	@ (80067fc <HAL_GPIO_Init+0x24c>)
 800679e:	4293      	cmp	r3, r2
 80067a0:	d00d      	beq.n	80067be <HAL_GPIO_Init+0x20e>
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	4a16      	ldr	r2, [pc, #88]	@ (8006800 <HAL_GPIO_Init+0x250>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d007      	beq.n	80067ba <HAL_GPIO_Init+0x20a>
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	4a15      	ldr	r2, [pc, #84]	@ (8006804 <HAL_GPIO_Init+0x254>)
 80067ae:	4293      	cmp	r3, r2
 80067b0:	d101      	bne.n	80067b6 <HAL_GPIO_Init+0x206>
 80067b2:	2309      	movs	r3, #9
 80067b4:	e029      	b.n	800680a <HAL_GPIO_Init+0x25a>
 80067b6:	230a      	movs	r3, #10
 80067b8:	e027      	b.n	800680a <HAL_GPIO_Init+0x25a>
 80067ba:	2307      	movs	r3, #7
 80067bc:	e025      	b.n	800680a <HAL_GPIO_Init+0x25a>
 80067be:	2306      	movs	r3, #6
 80067c0:	e023      	b.n	800680a <HAL_GPIO_Init+0x25a>
 80067c2:	2305      	movs	r3, #5
 80067c4:	e021      	b.n	800680a <HAL_GPIO_Init+0x25a>
 80067c6:	2304      	movs	r3, #4
 80067c8:	e01f      	b.n	800680a <HAL_GPIO_Init+0x25a>
 80067ca:	2303      	movs	r3, #3
 80067cc:	e01d      	b.n	800680a <HAL_GPIO_Init+0x25a>
 80067ce:	2302      	movs	r3, #2
 80067d0:	e01b      	b.n	800680a <HAL_GPIO_Init+0x25a>
 80067d2:	2301      	movs	r3, #1
 80067d4:	e019      	b.n	800680a <HAL_GPIO_Init+0x25a>
 80067d6:	bf00      	nop
 80067d8:	58000080 	.word	0x58000080
 80067dc:	58024400 	.word	0x58024400
 80067e0:	58000400 	.word	0x58000400
 80067e4:	58020000 	.word	0x58020000
 80067e8:	58020400 	.word	0x58020400
 80067ec:	58020800 	.word	0x58020800
 80067f0:	58020c00 	.word	0x58020c00
 80067f4:	58021000 	.word	0x58021000
 80067f8:	58021400 	.word	0x58021400
 80067fc:	58021800 	.word	0x58021800
 8006800:	58021c00 	.word	0x58021c00
 8006804:	58022400 	.word	0x58022400
 8006808:	2300      	movs	r3, #0
 800680a:	69fa      	ldr	r2, [r7, #28]
 800680c:	f002 0203 	and.w	r2, r2, #3
 8006810:	0092      	lsls	r2, r2, #2
 8006812:	4093      	lsls	r3, r2
 8006814:	69ba      	ldr	r2, [r7, #24]
 8006816:	4313      	orrs	r3, r2
 8006818:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800681a:	4938      	ldr	r1, [pc, #224]	@ (80068fc <HAL_GPIO_Init+0x34c>)
 800681c:	69fb      	ldr	r3, [r7, #28]
 800681e:	089b      	lsrs	r3, r3, #2
 8006820:	3302      	adds	r3, #2
 8006822:	69ba      	ldr	r2, [r7, #24]
 8006824:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006828:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006830:	693b      	ldr	r3, [r7, #16]
 8006832:	43db      	mvns	r3, r3
 8006834:	69ba      	ldr	r2, [r7, #24]
 8006836:	4013      	ands	r3, r2
 8006838:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	685b      	ldr	r3, [r3, #4]
 800683e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006842:	2b00      	cmp	r3, #0
 8006844:	d003      	beq.n	800684e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8006846:	69ba      	ldr	r2, [r7, #24]
 8006848:	693b      	ldr	r3, [r7, #16]
 800684a:	4313      	orrs	r3, r2
 800684c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800684e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006852:	69bb      	ldr	r3, [r7, #24]
 8006854:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8006856:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800685a:	685b      	ldr	r3, [r3, #4]
 800685c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800685e:	693b      	ldr	r3, [r7, #16]
 8006860:	43db      	mvns	r3, r3
 8006862:	69ba      	ldr	r2, [r7, #24]
 8006864:	4013      	ands	r3, r2
 8006866:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	685b      	ldr	r3, [r3, #4]
 800686c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006870:	2b00      	cmp	r3, #0
 8006872:	d003      	beq.n	800687c <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8006874:	69ba      	ldr	r2, [r7, #24]
 8006876:	693b      	ldr	r3, [r7, #16]
 8006878:	4313      	orrs	r3, r2
 800687a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800687c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006880:	69bb      	ldr	r3, [r7, #24]
 8006882:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8006884:	697b      	ldr	r3, [r7, #20]
 8006886:	685b      	ldr	r3, [r3, #4]
 8006888:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800688a:	693b      	ldr	r3, [r7, #16]
 800688c:	43db      	mvns	r3, r3
 800688e:	69ba      	ldr	r2, [r7, #24]
 8006890:	4013      	ands	r3, r2
 8006892:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	685b      	ldr	r3, [r3, #4]
 8006898:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800689c:	2b00      	cmp	r3, #0
 800689e:	d003      	beq.n	80068a8 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 80068a0:	69ba      	ldr	r2, [r7, #24]
 80068a2:	693b      	ldr	r3, [r7, #16]
 80068a4:	4313      	orrs	r3, r2
 80068a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80068a8:	697b      	ldr	r3, [r7, #20]
 80068aa:	69ba      	ldr	r2, [r7, #24]
 80068ac:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80068ae:	697b      	ldr	r3, [r7, #20]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80068b4:	693b      	ldr	r3, [r7, #16]
 80068b6:	43db      	mvns	r3, r3
 80068b8:	69ba      	ldr	r2, [r7, #24]
 80068ba:	4013      	ands	r3, r2
 80068bc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	685b      	ldr	r3, [r3, #4]
 80068c2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d003      	beq.n	80068d2 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 80068ca:	69ba      	ldr	r2, [r7, #24]
 80068cc:	693b      	ldr	r3, [r7, #16]
 80068ce:	4313      	orrs	r3, r2
 80068d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80068d2:	697b      	ldr	r3, [r7, #20]
 80068d4:	69ba      	ldr	r2, [r7, #24]
 80068d6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80068d8:	69fb      	ldr	r3, [r7, #28]
 80068da:	3301      	adds	r3, #1
 80068dc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	681a      	ldr	r2, [r3, #0]
 80068e2:	69fb      	ldr	r3, [r7, #28]
 80068e4:	fa22 f303 	lsr.w	r3, r2, r3
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	f47f ae6b 	bne.w	80065c4 <HAL_GPIO_Init+0x14>
  }
}
 80068ee:	bf00      	nop
 80068f0:	bf00      	nop
 80068f2:	3724      	adds	r7, #36	@ 0x24
 80068f4:	46bd      	mov	sp, r7
 80068f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fa:	4770      	bx	lr
 80068fc:	58000400 	.word	0x58000400

08006900 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006900:	b480      	push	{r7}
 8006902:	b083      	sub	sp, #12
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
 8006908:	460b      	mov	r3, r1
 800690a:	807b      	strh	r3, [r7, #2]
 800690c:	4613      	mov	r3, r2
 800690e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006910:	787b      	ldrb	r3, [r7, #1]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d003      	beq.n	800691e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006916:	887a      	ldrh	r2, [r7, #2]
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800691c:	e003      	b.n	8006926 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800691e:	887b      	ldrh	r3, [r7, #2]
 8006920:	041a      	lsls	r2, r3, #16
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	619a      	str	r2, [r3, #24]
}
 8006926:	bf00      	nop
 8006928:	370c      	adds	r7, #12
 800692a:	46bd      	mov	sp, r7
 800692c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006930:	4770      	bx	lr
	...

08006934 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006934:	b580      	push	{r7, lr}
 8006936:	b082      	sub	sp, #8
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d101      	bne.n	8006946 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006942:	2301      	movs	r3, #1
 8006944:	e08b      	b.n	8006a5e <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800694c:	b2db      	uxtb	r3, r3
 800694e:	2b00      	cmp	r3, #0
 8006950:	d106      	bne.n	8006960 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	2200      	movs	r2, #0
 8006956:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800695a:	6878      	ldr	r0, [r7, #4]
 800695c:	f7fb f8ac 	bl	8001ab8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2224      	movs	r2, #36	@ 0x24
 8006964:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	681a      	ldr	r2, [r3, #0]
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	f022 0201 	bic.w	r2, r2, #1
 8006976:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	685a      	ldr	r2, [r3, #4]
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8006984:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	689a      	ldr	r2, [r3, #8]
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006994:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	68db      	ldr	r3, [r3, #12]
 800699a:	2b01      	cmp	r3, #1
 800699c:	d107      	bne.n	80069ae <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	689a      	ldr	r2, [r3, #8]
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80069aa:	609a      	str	r2, [r3, #8]
 80069ac:	e006      	b.n	80069bc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	689a      	ldr	r2, [r3, #8]
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80069ba:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	68db      	ldr	r3, [r3, #12]
 80069c0:	2b02      	cmp	r3, #2
 80069c2:	d108      	bne.n	80069d6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	685a      	ldr	r2, [r3, #4]
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80069d2:	605a      	str	r2, [r3, #4]
 80069d4:	e007      	b.n	80069e6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	685a      	ldr	r2, [r3, #4]
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80069e4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	6859      	ldr	r1, [r3, #4]
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681a      	ldr	r2, [r3, #0]
 80069f0:	4b1d      	ldr	r3, [pc, #116]	@ (8006a68 <HAL_I2C_Init+0x134>)
 80069f2:	430b      	orrs	r3, r1
 80069f4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	68da      	ldr	r2, [r3, #12]
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006a04:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	691a      	ldr	r2, [r3, #16]
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	695b      	ldr	r3, [r3, #20]
 8006a0e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	699b      	ldr	r3, [r3, #24]
 8006a16:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	430a      	orrs	r2, r1
 8006a1e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	69d9      	ldr	r1, [r3, #28]
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	6a1a      	ldr	r2, [r3, #32]
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	430a      	orrs	r2, r1
 8006a2e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	681a      	ldr	r2, [r3, #0]
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f042 0201 	orr.w	r2, r2, #1
 8006a3e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2200      	movs	r2, #0
 8006a44:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	2220      	movs	r2, #32
 8006a4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	2200      	movs	r2, #0
 8006a52:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2200      	movs	r2, #0
 8006a58:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8006a5c:	2300      	movs	r3, #0
}
 8006a5e:	4618      	mov	r0, r3
 8006a60:	3708      	adds	r7, #8
 8006a62:	46bd      	mov	sp, r7
 8006a64:	bd80      	pop	{r7, pc}
 8006a66:	bf00      	nop
 8006a68:	02008000 	.word	0x02008000

08006a6c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006a6c:	b480      	push	{r7}
 8006a6e:	b083      	sub	sp, #12
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
 8006a74:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006a7c:	b2db      	uxtb	r3, r3
 8006a7e:	2b20      	cmp	r3, #32
 8006a80:	d138      	bne.n	8006af4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006a88:	2b01      	cmp	r3, #1
 8006a8a:	d101      	bne.n	8006a90 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006a8c:	2302      	movs	r3, #2
 8006a8e:	e032      	b.n	8006af6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2201      	movs	r2, #1
 8006a94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2224      	movs	r2, #36	@ 0x24
 8006a9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	681a      	ldr	r2, [r3, #0]
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f022 0201 	bic.w	r2, r2, #1
 8006aae:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	681a      	ldr	r2, [r3, #0]
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006abe:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	6819      	ldr	r1, [r3, #0]
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	683a      	ldr	r2, [r7, #0]
 8006acc:	430a      	orrs	r2, r1
 8006ace:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	681a      	ldr	r2, [r3, #0]
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f042 0201 	orr.w	r2, r2, #1
 8006ade:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2220      	movs	r2, #32
 8006ae4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2200      	movs	r2, #0
 8006aec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006af0:	2300      	movs	r3, #0
 8006af2:	e000      	b.n	8006af6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006af4:	2302      	movs	r3, #2
  }
}
 8006af6:	4618      	mov	r0, r3
 8006af8:	370c      	adds	r7, #12
 8006afa:	46bd      	mov	sp, r7
 8006afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b00:	4770      	bx	lr

08006b02 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006b02:	b480      	push	{r7}
 8006b04:	b085      	sub	sp, #20
 8006b06:	af00      	add	r7, sp, #0
 8006b08:	6078      	str	r0, [r7, #4]
 8006b0a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006b12:	b2db      	uxtb	r3, r3
 8006b14:	2b20      	cmp	r3, #32
 8006b16:	d139      	bne.n	8006b8c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006b1e:	2b01      	cmp	r3, #1
 8006b20:	d101      	bne.n	8006b26 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006b22:	2302      	movs	r3, #2
 8006b24:	e033      	b.n	8006b8e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	2201      	movs	r2, #1
 8006b2a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	2224      	movs	r2, #36	@ 0x24
 8006b32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	681a      	ldr	r2, [r3, #0]
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	f022 0201 	bic.w	r2, r2, #1
 8006b44:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8006b54:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	021b      	lsls	r3, r3, #8
 8006b5a:	68fa      	ldr	r2, [r7, #12]
 8006b5c:	4313      	orrs	r3, r2
 8006b5e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	68fa      	ldr	r2, [r7, #12]
 8006b66:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	681a      	ldr	r2, [r3, #0]
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f042 0201 	orr.w	r2, r2, #1
 8006b76:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2220      	movs	r2, #32
 8006b7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2200      	movs	r2, #0
 8006b84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006b88:	2300      	movs	r3, #0
 8006b8a:	e000      	b.n	8006b8e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006b8c:	2302      	movs	r3, #2
  }
}
 8006b8e:	4618      	mov	r0, r3
 8006b90:	3714      	adds	r7, #20
 8006b92:	46bd      	mov	sp, r7
 8006b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b98:	4770      	bx	lr
	...

08006b9c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b084      	sub	sp, #16
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8006ba4:	4b19      	ldr	r3, [pc, #100]	@ (8006c0c <HAL_PWREx_ConfigSupply+0x70>)
 8006ba6:	68db      	ldr	r3, [r3, #12]
 8006ba8:	f003 0304 	and.w	r3, r3, #4
 8006bac:	2b04      	cmp	r3, #4
 8006bae:	d00a      	beq.n	8006bc6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006bb0:	4b16      	ldr	r3, [pc, #88]	@ (8006c0c <HAL_PWREx_ConfigSupply+0x70>)
 8006bb2:	68db      	ldr	r3, [r3, #12]
 8006bb4:	f003 0307 	and.w	r3, r3, #7
 8006bb8:	687a      	ldr	r2, [r7, #4]
 8006bba:	429a      	cmp	r2, r3
 8006bbc:	d001      	beq.n	8006bc2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8006bbe:	2301      	movs	r3, #1
 8006bc0:	e01f      	b.n	8006c02 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	e01d      	b.n	8006c02 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8006bc6:	4b11      	ldr	r3, [pc, #68]	@ (8006c0c <HAL_PWREx_ConfigSupply+0x70>)
 8006bc8:	68db      	ldr	r3, [r3, #12]
 8006bca:	f023 0207 	bic.w	r2, r3, #7
 8006bce:	490f      	ldr	r1, [pc, #60]	@ (8006c0c <HAL_PWREx_ConfigSupply+0x70>)
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	4313      	orrs	r3, r2
 8006bd4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8006bd6:	f7fb fc1f 	bl	8002418 <HAL_GetTick>
 8006bda:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006bdc:	e009      	b.n	8006bf2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006bde:	f7fb fc1b 	bl	8002418 <HAL_GetTick>
 8006be2:	4602      	mov	r2, r0
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	1ad3      	subs	r3, r2, r3
 8006be8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006bec:	d901      	bls.n	8006bf2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8006bee:	2301      	movs	r3, #1
 8006bf0:	e007      	b.n	8006c02 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006bf2:	4b06      	ldr	r3, [pc, #24]	@ (8006c0c <HAL_PWREx_ConfigSupply+0x70>)
 8006bf4:	685b      	ldr	r3, [r3, #4]
 8006bf6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006bfa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006bfe:	d1ee      	bne.n	8006bde <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006c00:	2300      	movs	r3, #0
}
 8006c02:	4618      	mov	r0, r3
 8006c04:	3710      	adds	r7, #16
 8006c06:	46bd      	mov	sp, r7
 8006c08:	bd80      	pop	{r7, pc}
 8006c0a:	bf00      	nop
 8006c0c:	58024800 	.word	0x58024800

08006c10 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b08c      	sub	sp, #48	@ 0x30
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d101      	bne.n	8006c22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006c1e:	2301      	movs	r3, #1
 8006c20:	e3c8      	b.n	80073b4 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f003 0301 	and.w	r3, r3, #1
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	f000 8087 	beq.w	8006d3e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006c30:	4b88      	ldr	r3, [pc, #544]	@ (8006e54 <HAL_RCC_OscConfig+0x244>)
 8006c32:	691b      	ldr	r3, [r3, #16]
 8006c34:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006c38:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006c3a:	4b86      	ldr	r3, [pc, #536]	@ (8006e54 <HAL_RCC_OscConfig+0x244>)
 8006c3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c3e:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006c40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c42:	2b10      	cmp	r3, #16
 8006c44:	d007      	beq.n	8006c56 <HAL_RCC_OscConfig+0x46>
 8006c46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c48:	2b18      	cmp	r3, #24
 8006c4a:	d110      	bne.n	8006c6e <HAL_RCC_OscConfig+0x5e>
 8006c4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c4e:	f003 0303 	and.w	r3, r3, #3
 8006c52:	2b02      	cmp	r3, #2
 8006c54:	d10b      	bne.n	8006c6e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006c56:	4b7f      	ldr	r3, [pc, #508]	@ (8006e54 <HAL_RCC_OscConfig+0x244>)
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d06c      	beq.n	8006d3c <HAL_RCC_OscConfig+0x12c>
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	685b      	ldr	r3, [r3, #4]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d168      	bne.n	8006d3c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006c6a:	2301      	movs	r3, #1
 8006c6c:	e3a2      	b.n	80073b4 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	685b      	ldr	r3, [r3, #4]
 8006c72:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006c76:	d106      	bne.n	8006c86 <HAL_RCC_OscConfig+0x76>
 8006c78:	4b76      	ldr	r3, [pc, #472]	@ (8006e54 <HAL_RCC_OscConfig+0x244>)
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	4a75      	ldr	r2, [pc, #468]	@ (8006e54 <HAL_RCC_OscConfig+0x244>)
 8006c7e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006c82:	6013      	str	r3, [r2, #0]
 8006c84:	e02e      	b.n	8006ce4 <HAL_RCC_OscConfig+0xd4>
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	685b      	ldr	r3, [r3, #4]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d10c      	bne.n	8006ca8 <HAL_RCC_OscConfig+0x98>
 8006c8e:	4b71      	ldr	r3, [pc, #452]	@ (8006e54 <HAL_RCC_OscConfig+0x244>)
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	4a70      	ldr	r2, [pc, #448]	@ (8006e54 <HAL_RCC_OscConfig+0x244>)
 8006c94:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006c98:	6013      	str	r3, [r2, #0]
 8006c9a:	4b6e      	ldr	r3, [pc, #440]	@ (8006e54 <HAL_RCC_OscConfig+0x244>)
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	4a6d      	ldr	r2, [pc, #436]	@ (8006e54 <HAL_RCC_OscConfig+0x244>)
 8006ca0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006ca4:	6013      	str	r3, [r2, #0]
 8006ca6:	e01d      	b.n	8006ce4 <HAL_RCC_OscConfig+0xd4>
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	685b      	ldr	r3, [r3, #4]
 8006cac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006cb0:	d10c      	bne.n	8006ccc <HAL_RCC_OscConfig+0xbc>
 8006cb2:	4b68      	ldr	r3, [pc, #416]	@ (8006e54 <HAL_RCC_OscConfig+0x244>)
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	4a67      	ldr	r2, [pc, #412]	@ (8006e54 <HAL_RCC_OscConfig+0x244>)
 8006cb8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006cbc:	6013      	str	r3, [r2, #0]
 8006cbe:	4b65      	ldr	r3, [pc, #404]	@ (8006e54 <HAL_RCC_OscConfig+0x244>)
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	4a64      	ldr	r2, [pc, #400]	@ (8006e54 <HAL_RCC_OscConfig+0x244>)
 8006cc4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006cc8:	6013      	str	r3, [r2, #0]
 8006cca:	e00b      	b.n	8006ce4 <HAL_RCC_OscConfig+0xd4>
 8006ccc:	4b61      	ldr	r3, [pc, #388]	@ (8006e54 <HAL_RCC_OscConfig+0x244>)
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	4a60      	ldr	r2, [pc, #384]	@ (8006e54 <HAL_RCC_OscConfig+0x244>)
 8006cd2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006cd6:	6013      	str	r3, [r2, #0]
 8006cd8:	4b5e      	ldr	r3, [pc, #376]	@ (8006e54 <HAL_RCC_OscConfig+0x244>)
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	4a5d      	ldr	r2, [pc, #372]	@ (8006e54 <HAL_RCC_OscConfig+0x244>)
 8006cde:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006ce2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	685b      	ldr	r3, [r3, #4]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d013      	beq.n	8006d14 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cec:	f7fb fb94 	bl	8002418 <HAL_GetTick>
 8006cf0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006cf2:	e008      	b.n	8006d06 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006cf4:	f7fb fb90 	bl	8002418 <HAL_GetTick>
 8006cf8:	4602      	mov	r2, r0
 8006cfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cfc:	1ad3      	subs	r3, r2, r3
 8006cfe:	2b64      	cmp	r3, #100	@ 0x64
 8006d00:	d901      	bls.n	8006d06 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006d02:	2303      	movs	r3, #3
 8006d04:	e356      	b.n	80073b4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006d06:	4b53      	ldr	r3, [pc, #332]	@ (8006e54 <HAL_RCC_OscConfig+0x244>)
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d0f0      	beq.n	8006cf4 <HAL_RCC_OscConfig+0xe4>
 8006d12:	e014      	b.n	8006d3e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d14:	f7fb fb80 	bl	8002418 <HAL_GetTick>
 8006d18:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006d1a:	e008      	b.n	8006d2e <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006d1c:	f7fb fb7c 	bl	8002418 <HAL_GetTick>
 8006d20:	4602      	mov	r2, r0
 8006d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d24:	1ad3      	subs	r3, r2, r3
 8006d26:	2b64      	cmp	r3, #100	@ 0x64
 8006d28:	d901      	bls.n	8006d2e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006d2a:	2303      	movs	r3, #3
 8006d2c:	e342      	b.n	80073b4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006d2e:	4b49      	ldr	r3, [pc, #292]	@ (8006e54 <HAL_RCC_OscConfig+0x244>)
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d1f0      	bne.n	8006d1c <HAL_RCC_OscConfig+0x10c>
 8006d3a:	e000      	b.n	8006d3e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006d3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	f003 0302 	and.w	r3, r3, #2
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	f000 808c 	beq.w	8006e64 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006d4c:	4b41      	ldr	r3, [pc, #260]	@ (8006e54 <HAL_RCC_OscConfig+0x244>)
 8006d4e:	691b      	ldr	r3, [r3, #16]
 8006d50:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006d54:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006d56:	4b3f      	ldr	r3, [pc, #252]	@ (8006e54 <HAL_RCC_OscConfig+0x244>)
 8006d58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d5a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006d5c:	6a3b      	ldr	r3, [r7, #32]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d007      	beq.n	8006d72 <HAL_RCC_OscConfig+0x162>
 8006d62:	6a3b      	ldr	r3, [r7, #32]
 8006d64:	2b18      	cmp	r3, #24
 8006d66:	d137      	bne.n	8006dd8 <HAL_RCC_OscConfig+0x1c8>
 8006d68:	69fb      	ldr	r3, [r7, #28]
 8006d6a:	f003 0303 	and.w	r3, r3, #3
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d132      	bne.n	8006dd8 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006d72:	4b38      	ldr	r3, [pc, #224]	@ (8006e54 <HAL_RCC_OscConfig+0x244>)
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f003 0304 	and.w	r3, r3, #4
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d005      	beq.n	8006d8a <HAL_RCC_OscConfig+0x17a>
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	68db      	ldr	r3, [r3, #12]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d101      	bne.n	8006d8a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8006d86:	2301      	movs	r3, #1
 8006d88:	e314      	b.n	80073b4 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006d8a:	4b32      	ldr	r3, [pc, #200]	@ (8006e54 <HAL_RCC_OscConfig+0x244>)
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	f023 0219 	bic.w	r2, r3, #25
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	68db      	ldr	r3, [r3, #12]
 8006d96:	492f      	ldr	r1, [pc, #188]	@ (8006e54 <HAL_RCC_OscConfig+0x244>)
 8006d98:	4313      	orrs	r3, r2
 8006d9a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d9c:	f7fb fb3c 	bl	8002418 <HAL_GetTick>
 8006da0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006da2:	e008      	b.n	8006db6 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006da4:	f7fb fb38 	bl	8002418 <HAL_GetTick>
 8006da8:	4602      	mov	r2, r0
 8006daa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dac:	1ad3      	subs	r3, r2, r3
 8006dae:	2b02      	cmp	r3, #2
 8006db0:	d901      	bls.n	8006db6 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8006db2:	2303      	movs	r3, #3
 8006db4:	e2fe      	b.n	80073b4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006db6:	4b27      	ldr	r3, [pc, #156]	@ (8006e54 <HAL_RCC_OscConfig+0x244>)
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	f003 0304 	and.w	r3, r3, #4
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d0f0      	beq.n	8006da4 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006dc2:	4b24      	ldr	r3, [pc, #144]	@ (8006e54 <HAL_RCC_OscConfig+0x244>)
 8006dc4:	685b      	ldr	r3, [r3, #4]
 8006dc6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	691b      	ldr	r3, [r3, #16]
 8006dce:	061b      	lsls	r3, r3, #24
 8006dd0:	4920      	ldr	r1, [pc, #128]	@ (8006e54 <HAL_RCC_OscConfig+0x244>)
 8006dd2:	4313      	orrs	r3, r2
 8006dd4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006dd6:	e045      	b.n	8006e64 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	68db      	ldr	r3, [r3, #12]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d026      	beq.n	8006e2e <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006de0:	4b1c      	ldr	r3, [pc, #112]	@ (8006e54 <HAL_RCC_OscConfig+0x244>)
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f023 0219 	bic.w	r2, r3, #25
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	68db      	ldr	r3, [r3, #12]
 8006dec:	4919      	ldr	r1, [pc, #100]	@ (8006e54 <HAL_RCC_OscConfig+0x244>)
 8006dee:	4313      	orrs	r3, r2
 8006df0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006df2:	f7fb fb11 	bl	8002418 <HAL_GetTick>
 8006df6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006df8:	e008      	b.n	8006e0c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006dfa:	f7fb fb0d 	bl	8002418 <HAL_GetTick>
 8006dfe:	4602      	mov	r2, r0
 8006e00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e02:	1ad3      	subs	r3, r2, r3
 8006e04:	2b02      	cmp	r3, #2
 8006e06:	d901      	bls.n	8006e0c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8006e08:	2303      	movs	r3, #3
 8006e0a:	e2d3      	b.n	80073b4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006e0c:	4b11      	ldr	r3, [pc, #68]	@ (8006e54 <HAL_RCC_OscConfig+0x244>)
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	f003 0304 	and.w	r3, r3, #4
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d0f0      	beq.n	8006dfa <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006e18:	4b0e      	ldr	r3, [pc, #56]	@ (8006e54 <HAL_RCC_OscConfig+0x244>)
 8006e1a:	685b      	ldr	r3, [r3, #4]
 8006e1c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	691b      	ldr	r3, [r3, #16]
 8006e24:	061b      	lsls	r3, r3, #24
 8006e26:	490b      	ldr	r1, [pc, #44]	@ (8006e54 <HAL_RCC_OscConfig+0x244>)
 8006e28:	4313      	orrs	r3, r2
 8006e2a:	604b      	str	r3, [r1, #4]
 8006e2c:	e01a      	b.n	8006e64 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006e2e:	4b09      	ldr	r3, [pc, #36]	@ (8006e54 <HAL_RCC_OscConfig+0x244>)
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	4a08      	ldr	r2, [pc, #32]	@ (8006e54 <HAL_RCC_OscConfig+0x244>)
 8006e34:	f023 0301 	bic.w	r3, r3, #1
 8006e38:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e3a:	f7fb faed 	bl	8002418 <HAL_GetTick>
 8006e3e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006e40:	e00a      	b.n	8006e58 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006e42:	f7fb fae9 	bl	8002418 <HAL_GetTick>
 8006e46:	4602      	mov	r2, r0
 8006e48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e4a:	1ad3      	subs	r3, r2, r3
 8006e4c:	2b02      	cmp	r3, #2
 8006e4e:	d903      	bls.n	8006e58 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8006e50:	2303      	movs	r3, #3
 8006e52:	e2af      	b.n	80073b4 <HAL_RCC_OscConfig+0x7a4>
 8006e54:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006e58:	4b96      	ldr	r3, [pc, #600]	@ (80070b4 <HAL_RCC_OscConfig+0x4a4>)
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f003 0304 	and.w	r3, r3, #4
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d1ee      	bne.n	8006e42 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	f003 0310 	and.w	r3, r3, #16
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d06a      	beq.n	8006f46 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006e70:	4b90      	ldr	r3, [pc, #576]	@ (80070b4 <HAL_RCC_OscConfig+0x4a4>)
 8006e72:	691b      	ldr	r3, [r3, #16]
 8006e74:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006e78:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006e7a:	4b8e      	ldr	r3, [pc, #568]	@ (80070b4 <HAL_RCC_OscConfig+0x4a4>)
 8006e7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e7e:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006e80:	69bb      	ldr	r3, [r7, #24]
 8006e82:	2b08      	cmp	r3, #8
 8006e84:	d007      	beq.n	8006e96 <HAL_RCC_OscConfig+0x286>
 8006e86:	69bb      	ldr	r3, [r7, #24]
 8006e88:	2b18      	cmp	r3, #24
 8006e8a:	d11b      	bne.n	8006ec4 <HAL_RCC_OscConfig+0x2b4>
 8006e8c:	697b      	ldr	r3, [r7, #20]
 8006e8e:	f003 0303 	and.w	r3, r3, #3
 8006e92:	2b01      	cmp	r3, #1
 8006e94:	d116      	bne.n	8006ec4 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006e96:	4b87      	ldr	r3, [pc, #540]	@ (80070b4 <HAL_RCC_OscConfig+0x4a4>)
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d005      	beq.n	8006eae <HAL_RCC_OscConfig+0x29e>
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	69db      	ldr	r3, [r3, #28]
 8006ea6:	2b80      	cmp	r3, #128	@ 0x80
 8006ea8:	d001      	beq.n	8006eae <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8006eaa:	2301      	movs	r3, #1
 8006eac:	e282      	b.n	80073b4 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006eae:	4b81      	ldr	r3, [pc, #516]	@ (80070b4 <HAL_RCC_OscConfig+0x4a4>)
 8006eb0:	68db      	ldr	r3, [r3, #12]
 8006eb2:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	6a1b      	ldr	r3, [r3, #32]
 8006eba:	061b      	lsls	r3, r3, #24
 8006ebc:	497d      	ldr	r1, [pc, #500]	@ (80070b4 <HAL_RCC_OscConfig+0x4a4>)
 8006ebe:	4313      	orrs	r3, r2
 8006ec0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006ec2:	e040      	b.n	8006f46 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	69db      	ldr	r3, [r3, #28]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d023      	beq.n	8006f14 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006ecc:	4b79      	ldr	r3, [pc, #484]	@ (80070b4 <HAL_RCC_OscConfig+0x4a4>)
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	4a78      	ldr	r2, [pc, #480]	@ (80070b4 <HAL_RCC_OscConfig+0x4a4>)
 8006ed2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006ed6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ed8:	f7fb fa9e 	bl	8002418 <HAL_GetTick>
 8006edc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006ede:	e008      	b.n	8006ef2 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006ee0:	f7fb fa9a 	bl	8002418 <HAL_GetTick>
 8006ee4:	4602      	mov	r2, r0
 8006ee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ee8:	1ad3      	subs	r3, r2, r3
 8006eea:	2b02      	cmp	r3, #2
 8006eec:	d901      	bls.n	8006ef2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8006eee:	2303      	movs	r3, #3
 8006ef0:	e260      	b.n	80073b4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006ef2:	4b70      	ldr	r3, [pc, #448]	@ (80070b4 <HAL_RCC_OscConfig+0x4a4>)
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d0f0      	beq.n	8006ee0 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006efe:	4b6d      	ldr	r3, [pc, #436]	@ (80070b4 <HAL_RCC_OscConfig+0x4a4>)
 8006f00:	68db      	ldr	r3, [r3, #12]
 8006f02:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	6a1b      	ldr	r3, [r3, #32]
 8006f0a:	061b      	lsls	r3, r3, #24
 8006f0c:	4969      	ldr	r1, [pc, #420]	@ (80070b4 <HAL_RCC_OscConfig+0x4a4>)
 8006f0e:	4313      	orrs	r3, r2
 8006f10:	60cb      	str	r3, [r1, #12]
 8006f12:	e018      	b.n	8006f46 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006f14:	4b67      	ldr	r3, [pc, #412]	@ (80070b4 <HAL_RCC_OscConfig+0x4a4>)
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	4a66      	ldr	r2, [pc, #408]	@ (80070b4 <HAL_RCC_OscConfig+0x4a4>)
 8006f1a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006f1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f20:	f7fb fa7a 	bl	8002418 <HAL_GetTick>
 8006f24:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006f26:	e008      	b.n	8006f3a <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006f28:	f7fb fa76 	bl	8002418 <HAL_GetTick>
 8006f2c:	4602      	mov	r2, r0
 8006f2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f30:	1ad3      	subs	r3, r2, r3
 8006f32:	2b02      	cmp	r3, #2
 8006f34:	d901      	bls.n	8006f3a <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8006f36:	2303      	movs	r3, #3
 8006f38:	e23c      	b.n	80073b4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006f3a:	4b5e      	ldr	r3, [pc, #376]	@ (80070b4 <HAL_RCC_OscConfig+0x4a4>)
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d1f0      	bne.n	8006f28 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	f003 0308 	and.w	r3, r3, #8
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d036      	beq.n	8006fc0 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	695b      	ldr	r3, [r3, #20]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d019      	beq.n	8006f8e <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006f5a:	4b56      	ldr	r3, [pc, #344]	@ (80070b4 <HAL_RCC_OscConfig+0x4a4>)
 8006f5c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006f5e:	4a55      	ldr	r2, [pc, #340]	@ (80070b4 <HAL_RCC_OscConfig+0x4a4>)
 8006f60:	f043 0301 	orr.w	r3, r3, #1
 8006f64:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f66:	f7fb fa57 	bl	8002418 <HAL_GetTick>
 8006f6a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006f6c:	e008      	b.n	8006f80 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006f6e:	f7fb fa53 	bl	8002418 <HAL_GetTick>
 8006f72:	4602      	mov	r2, r0
 8006f74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f76:	1ad3      	subs	r3, r2, r3
 8006f78:	2b02      	cmp	r3, #2
 8006f7a:	d901      	bls.n	8006f80 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8006f7c:	2303      	movs	r3, #3
 8006f7e:	e219      	b.n	80073b4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006f80:	4b4c      	ldr	r3, [pc, #304]	@ (80070b4 <HAL_RCC_OscConfig+0x4a4>)
 8006f82:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006f84:	f003 0302 	and.w	r3, r3, #2
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d0f0      	beq.n	8006f6e <HAL_RCC_OscConfig+0x35e>
 8006f8c:	e018      	b.n	8006fc0 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006f8e:	4b49      	ldr	r3, [pc, #292]	@ (80070b4 <HAL_RCC_OscConfig+0x4a4>)
 8006f90:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006f92:	4a48      	ldr	r2, [pc, #288]	@ (80070b4 <HAL_RCC_OscConfig+0x4a4>)
 8006f94:	f023 0301 	bic.w	r3, r3, #1
 8006f98:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f9a:	f7fb fa3d 	bl	8002418 <HAL_GetTick>
 8006f9e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006fa0:	e008      	b.n	8006fb4 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006fa2:	f7fb fa39 	bl	8002418 <HAL_GetTick>
 8006fa6:	4602      	mov	r2, r0
 8006fa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006faa:	1ad3      	subs	r3, r2, r3
 8006fac:	2b02      	cmp	r3, #2
 8006fae:	d901      	bls.n	8006fb4 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8006fb0:	2303      	movs	r3, #3
 8006fb2:	e1ff      	b.n	80073b4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006fb4:	4b3f      	ldr	r3, [pc, #252]	@ (80070b4 <HAL_RCC_OscConfig+0x4a4>)
 8006fb6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006fb8:	f003 0302 	and.w	r3, r3, #2
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d1f0      	bne.n	8006fa2 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f003 0320 	and.w	r3, r3, #32
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d036      	beq.n	800703a <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	699b      	ldr	r3, [r3, #24]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d019      	beq.n	8007008 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006fd4:	4b37      	ldr	r3, [pc, #220]	@ (80070b4 <HAL_RCC_OscConfig+0x4a4>)
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	4a36      	ldr	r2, [pc, #216]	@ (80070b4 <HAL_RCC_OscConfig+0x4a4>)
 8006fda:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8006fde:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006fe0:	f7fb fa1a 	bl	8002418 <HAL_GetTick>
 8006fe4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006fe6:	e008      	b.n	8006ffa <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006fe8:	f7fb fa16 	bl	8002418 <HAL_GetTick>
 8006fec:	4602      	mov	r2, r0
 8006fee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ff0:	1ad3      	subs	r3, r2, r3
 8006ff2:	2b02      	cmp	r3, #2
 8006ff4:	d901      	bls.n	8006ffa <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8006ff6:	2303      	movs	r3, #3
 8006ff8:	e1dc      	b.n	80073b4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006ffa:	4b2e      	ldr	r3, [pc, #184]	@ (80070b4 <HAL_RCC_OscConfig+0x4a4>)
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007002:	2b00      	cmp	r3, #0
 8007004:	d0f0      	beq.n	8006fe8 <HAL_RCC_OscConfig+0x3d8>
 8007006:	e018      	b.n	800703a <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007008:	4b2a      	ldr	r3, [pc, #168]	@ (80070b4 <HAL_RCC_OscConfig+0x4a4>)
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	4a29      	ldr	r2, [pc, #164]	@ (80070b4 <HAL_RCC_OscConfig+0x4a4>)
 800700e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007012:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007014:	f7fb fa00 	bl	8002418 <HAL_GetTick>
 8007018:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800701a:	e008      	b.n	800702e <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800701c:	f7fb f9fc 	bl	8002418 <HAL_GetTick>
 8007020:	4602      	mov	r2, r0
 8007022:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007024:	1ad3      	subs	r3, r2, r3
 8007026:	2b02      	cmp	r3, #2
 8007028:	d901      	bls.n	800702e <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800702a:	2303      	movs	r3, #3
 800702c:	e1c2      	b.n	80073b4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800702e:	4b21      	ldr	r3, [pc, #132]	@ (80070b4 <HAL_RCC_OscConfig+0x4a4>)
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007036:	2b00      	cmp	r3, #0
 8007038:	d1f0      	bne.n	800701c <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	f003 0304 	and.w	r3, r3, #4
 8007042:	2b00      	cmp	r3, #0
 8007044:	f000 8086 	beq.w	8007154 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007048:	4b1b      	ldr	r3, [pc, #108]	@ (80070b8 <HAL_RCC_OscConfig+0x4a8>)
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	4a1a      	ldr	r2, [pc, #104]	@ (80070b8 <HAL_RCC_OscConfig+0x4a8>)
 800704e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007052:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007054:	f7fb f9e0 	bl	8002418 <HAL_GetTick>
 8007058:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800705a:	e008      	b.n	800706e <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800705c:	f7fb f9dc 	bl	8002418 <HAL_GetTick>
 8007060:	4602      	mov	r2, r0
 8007062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007064:	1ad3      	subs	r3, r2, r3
 8007066:	2b64      	cmp	r3, #100	@ 0x64
 8007068:	d901      	bls.n	800706e <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800706a:	2303      	movs	r3, #3
 800706c:	e1a2      	b.n	80073b4 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800706e:	4b12      	ldr	r3, [pc, #72]	@ (80070b8 <HAL_RCC_OscConfig+0x4a8>)
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007076:	2b00      	cmp	r3, #0
 8007078:	d0f0      	beq.n	800705c <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	689b      	ldr	r3, [r3, #8]
 800707e:	2b01      	cmp	r3, #1
 8007080:	d106      	bne.n	8007090 <HAL_RCC_OscConfig+0x480>
 8007082:	4b0c      	ldr	r3, [pc, #48]	@ (80070b4 <HAL_RCC_OscConfig+0x4a4>)
 8007084:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007086:	4a0b      	ldr	r2, [pc, #44]	@ (80070b4 <HAL_RCC_OscConfig+0x4a4>)
 8007088:	f043 0301 	orr.w	r3, r3, #1
 800708c:	6713      	str	r3, [r2, #112]	@ 0x70
 800708e:	e032      	b.n	80070f6 <HAL_RCC_OscConfig+0x4e6>
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	689b      	ldr	r3, [r3, #8]
 8007094:	2b00      	cmp	r3, #0
 8007096:	d111      	bne.n	80070bc <HAL_RCC_OscConfig+0x4ac>
 8007098:	4b06      	ldr	r3, [pc, #24]	@ (80070b4 <HAL_RCC_OscConfig+0x4a4>)
 800709a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800709c:	4a05      	ldr	r2, [pc, #20]	@ (80070b4 <HAL_RCC_OscConfig+0x4a4>)
 800709e:	f023 0301 	bic.w	r3, r3, #1
 80070a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80070a4:	4b03      	ldr	r3, [pc, #12]	@ (80070b4 <HAL_RCC_OscConfig+0x4a4>)
 80070a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80070a8:	4a02      	ldr	r2, [pc, #8]	@ (80070b4 <HAL_RCC_OscConfig+0x4a4>)
 80070aa:	f023 0304 	bic.w	r3, r3, #4
 80070ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80070b0:	e021      	b.n	80070f6 <HAL_RCC_OscConfig+0x4e6>
 80070b2:	bf00      	nop
 80070b4:	58024400 	.word	0x58024400
 80070b8:	58024800 	.word	0x58024800
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	689b      	ldr	r3, [r3, #8]
 80070c0:	2b05      	cmp	r3, #5
 80070c2:	d10c      	bne.n	80070de <HAL_RCC_OscConfig+0x4ce>
 80070c4:	4b83      	ldr	r3, [pc, #524]	@ (80072d4 <HAL_RCC_OscConfig+0x6c4>)
 80070c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80070c8:	4a82      	ldr	r2, [pc, #520]	@ (80072d4 <HAL_RCC_OscConfig+0x6c4>)
 80070ca:	f043 0304 	orr.w	r3, r3, #4
 80070ce:	6713      	str	r3, [r2, #112]	@ 0x70
 80070d0:	4b80      	ldr	r3, [pc, #512]	@ (80072d4 <HAL_RCC_OscConfig+0x6c4>)
 80070d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80070d4:	4a7f      	ldr	r2, [pc, #508]	@ (80072d4 <HAL_RCC_OscConfig+0x6c4>)
 80070d6:	f043 0301 	orr.w	r3, r3, #1
 80070da:	6713      	str	r3, [r2, #112]	@ 0x70
 80070dc:	e00b      	b.n	80070f6 <HAL_RCC_OscConfig+0x4e6>
 80070de:	4b7d      	ldr	r3, [pc, #500]	@ (80072d4 <HAL_RCC_OscConfig+0x6c4>)
 80070e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80070e2:	4a7c      	ldr	r2, [pc, #496]	@ (80072d4 <HAL_RCC_OscConfig+0x6c4>)
 80070e4:	f023 0301 	bic.w	r3, r3, #1
 80070e8:	6713      	str	r3, [r2, #112]	@ 0x70
 80070ea:	4b7a      	ldr	r3, [pc, #488]	@ (80072d4 <HAL_RCC_OscConfig+0x6c4>)
 80070ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80070ee:	4a79      	ldr	r2, [pc, #484]	@ (80072d4 <HAL_RCC_OscConfig+0x6c4>)
 80070f0:	f023 0304 	bic.w	r3, r3, #4
 80070f4:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	689b      	ldr	r3, [r3, #8]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d015      	beq.n	800712a <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80070fe:	f7fb f98b 	bl	8002418 <HAL_GetTick>
 8007102:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007104:	e00a      	b.n	800711c <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007106:	f7fb f987 	bl	8002418 <HAL_GetTick>
 800710a:	4602      	mov	r2, r0
 800710c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800710e:	1ad3      	subs	r3, r2, r3
 8007110:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007114:	4293      	cmp	r3, r2
 8007116:	d901      	bls.n	800711c <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8007118:	2303      	movs	r3, #3
 800711a:	e14b      	b.n	80073b4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800711c:	4b6d      	ldr	r3, [pc, #436]	@ (80072d4 <HAL_RCC_OscConfig+0x6c4>)
 800711e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007120:	f003 0302 	and.w	r3, r3, #2
 8007124:	2b00      	cmp	r3, #0
 8007126:	d0ee      	beq.n	8007106 <HAL_RCC_OscConfig+0x4f6>
 8007128:	e014      	b.n	8007154 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800712a:	f7fb f975 	bl	8002418 <HAL_GetTick>
 800712e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007130:	e00a      	b.n	8007148 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007132:	f7fb f971 	bl	8002418 <HAL_GetTick>
 8007136:	4602      	mov	r2, r0
 8007138:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800713a:	1ad3      	subs	r3, r2, r3
 800713c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007140:	4293      	cmp	r3, r2
 8007142:	d901      	bls.n	8007148 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8007144:	2303      	movs	r3, #3
 8007146:	e135      	b.n	80073b4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007148:	4b62      	ldr	r3, [pc, #392]	@ (80072d4 <HAL_RCC_OscConfig+0x6c4>)
 800714a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800714c:	f003 0302 	and.w	r3, r3, #2
 8007150:	2b00      	cmp	r3, #0
 8007152:	d1ee      	bne.n	8007132 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007158:	2b00      	cmp	r3, #0
 800715a:	f000 812a 	beq.w	80073b2 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800715e:	4b5d      	ldr	r3, [pc, #372]	@ (80072d4 <HAL_RCC_OscConfig+0x6c4>)
 8007160:	691b      	ldr	r3, [r3, #16]
 8007162:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007166:	2b18      	cmp	r3, #24
 8007168:	f000 80ba 	beq.w	80072e0 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007170:	2b02      	cmp	r3, #2
 8007172:	f040 8095 	bne.w	80072a0 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007176:	4b57      	ldr	r3, [pc, #348]	@ (80072d4 <HAL_RCC_OscConfig+0x6c4>)
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	4a56      	ldr	r2, [pc, #344]	@ (80072d4 <HAL_RCC_OscConfig+0x6c4>)
 800717c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007180:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007182:	f7fb f949 	bl	8002418 <HAL_GetTick>
 8007186:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007188:	e008      	b.n	800719c <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800718a:	f7fb f945 	bl	8002418 <HAL_GetTick>
 800718e:	4602      	mov	r2, r0
 8007190:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007192:	1ad3      	subs	r3, r2, r3
 8007194:	2b02      	cmp	r3, #2
 8007196:	d901      	bls.n	800719c <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8007198:	2303      	movs	r3, #3
 800719a:	e10b      	b.n	80073b4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800719c:	4b4d      	ldr	r3, [pc, #308]	@ (80072d4 <HAL_RCC_OscConfig+0x6c4>)
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d1f0      	bne.n	800718a <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80071a8:	4b4a      	ldr	r3, [pc, #296]	@ (80072d4 <HAL_RCC_OscConfig+0x6c4>)
 80071aa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80071ac:	4b4a      	ldr	r3, [pc, #296]	@ (80072d8 <HAL_RCC_OscConfig+0x6c8>)
 80071ae:	4013      	ands	r3, r2
 80071b0:	687a      	ldr	r2, [r7, #4]
 80071b2:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80071b4:	687a      	ldr	r2, [r7, #4]
 80071b6:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80071b8:	0112      	lsls	r2, r2, #4
 80071ba:	430a      	orrs	r2, r1
 80071bc:	4945      	ldr	r1, [pc, #276]	@ (80072d4 <HAL_RCC_OscConfig+0x6c4>)
 80071be:	4313      	orrs	r3, r2
 80071c0:	628b      	str	r3, [r1, #40]	@ 0x28
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071c6:	3b01      	subs	r3, #1
 80071c8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80071d0:	3b01      	subs	r3, #1
 80071d2:	025b      	lsls	r3, r3, #9
 80071d4:	b29b      	uxth	r3, r3
 80071d6:	431a      	orrs	r2, r3
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071dc:	3b01      	subs	r3, #1
 80071de:	041b      	lsls	r3, r3, #16
 80071e0:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80071e4:	431a      	orrs	r2, r3
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80071ea:	3b01      	subs	r3, #1
 80071ec:	061b      	lsls	r3, r3, #24
 80071ee:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80071f2:	4938      	ldr	r1, [pc, #224]	@ (80072d4 <HAL_RCC_OscConfig+0x6c4>)
 80071f4:	4313      	orrs	r3, r2
 80071f6:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80071f8:	4b36      	ldr	r3, [pc, #216]	@ (80072d4 <HAL_RCC_OscConfig+0x6c4>)
 80071fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071fc:	4a35      	ldr	r2, [pc, #212]	@ (80072d4 <HAL_RCC_OscConfig+0x6c4>)
 80071fe:	f023 0301 	bic.w	r3, r3, #1
 8007202:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007204:	4b33      	ldr	r3, [pc, #204]	@ (80072d4 <HAL_RCC_OscConfig+0x6c4>)
 8007206:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007208:	4b34      	ldr	r3, [pc, #208]	@ (80072dc <HAL_RCC_OscConfig+0x6cc>)
 800720a:	4013      	ands	r3, r2
 800720c:	687a      	ldr	r2, [r7, #4]
 800720e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8007210:	00d2      	lsls	r2, r2, #3
 8007212:	4930      	ldr	r1, [pc, #192]	@ (80072d4 <HAL_RCC_OscConfig+0x6c4>)
 8007214:	4313      	orrs	r3, r2
 8007216:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8007218:	4b2e      	ldr	r3, [pc, #184]	@ (80072d4 <HAL_RCC_OscConfig+0x6c4>)
 800721a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800721c:	f023 020c 	bic.w	r2, r3, #12
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007224:	492b      	ldr	r1, [pc, #172]	@ (80072d4 <HAL_RCC_OscConfig+0x6c4>)
 8007226:	4313      	orrs	r3, r2
 8007228:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800722a:	4b2a      	ldr	r3, [pc, #168]	@ (80072d4 <HAL_RCC_OscConfig+0x6c4>)
 800722c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800722e:	f023 0202 	bic.w	r2, r3, #2
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007236:	4927      	ldr	r1, [pc, #156]	@ (80072d4 <HAL_RCC_OscConfig+0x6c4>)
 8007238:	4313      	orrs	r3, r2
 800723a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800723c:	4b25      	ldr	r3, [pc, #148]	@ (80072d4 <HAL_RCC_OscConfig+0x6c4>)
 800723e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007240:	4a24      	ldr	r2, [pc, #144]	@ (80072d4 <HAL_RCC_OscConfig+0x6c4>)
 8007242:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007246:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007248:	4b22      	ldr	r3, [pc, #136]	@ (80072d4 <HAL_RCC_OscConfig+0x6c4>)
 800724a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800724c:	4a21      	ldr	r2, [pc, #132]	@ (80072d4 <HAL_RCC_OscConfig+0x6c4>)
 800724e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007252:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8007254:	4b1f      	ldr	r3, [pc, #124]	@ (80072d4 <HAL_RCC_OscConfig+0x6c4>)
 8007256:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007258:	4a1e      	ldr	r2, [pc, #120]	@ (80072d4 <HAL_RCC_OscConfig+0x6c4>)
 800725a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800725e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8007260:	4b1c      	ldr	r3, [pc, #112]	@ (80072d4 <HAL_RCC_OscConfig+0x6c4>)
 8007262:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007264:	4a1b      	ldr	r2, [pc, #108]	@ (80072d4 <HAL_RCC_OscConfig+0x6c4>)
 8007266:	f043 0301 	orr.w	r3, r3, #1
 800726a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800726c:	4b19      	ldr	r3, [pc, #100]	@ (80072d4 <HAL_RCC_OscConfig+0x6c4>)
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	4a18      	ldr	r2, [pc, #96]	@ (80072d4 <HAL_RCC_OscConfig+0x6c4>)
 8007272:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007276:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007278:	f7fb f8ce 	bl	8002418 <HAL_GetTick>
 800727c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800727e:	e008      	b.n	8007292 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007280:	f7fb f8ca 	bl	8002418 <HAL_GetTick>
 8007284:	4602      	mov	r2, r0
 8007286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007288:	1ad3      	subs	r3, r2, r3
 800728a:	2b02      	cmp	r3, #2
 800728c:	d901      	bls.n	8007292 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800728e:	2303      	movs	r3, #3
 8007290:	e090      	b.n	80073b4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007292:	4b10      	ldr	r3, [pc, #64]	@ (80072d4 <HAL_RCC_OscConfig+0x6c4>)
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800729a:	2b00      	cmp	r3, #0
 800729c:	d0f0      	beq.n	8007280 <HAL_RCC_OscConfig+0x670>
 800729e:	e088      	b.n	80073b2 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80072a0:	4b0c      	ldr	r3, [pc, #48]	@ (80072d4 <HAL_RCC_OscConfig+0x6c4>)
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	4a0b      	ldr	r2, [pc, #44]	@ (80072d4 <HAL_RCC_OscConfig+0x6c4>)
 80072a6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80072aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072ac:	f7fb f8b4 	bl	8002418 <HAL_GetTick>
 80072b0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80072b2:	e008      	b.n	80072c6 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80072b4:	f7fb f8b0 	bl	8002418 <HAL_GetTick>
 80072b8:	4602      	mov	r2, r0
 80072ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072bc:	1ad3      	subs	r3, r2, r3
 80072be:	2b02      	cmp	r3, #2
 80072c0:	d901      	bls.n	80072c6 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 80072c2:	2303      	movs	r3, #3
 80072c4:	e076      	b.n	80073b4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80072c6:	4b03      	ldr	r3, [pc, #12]	@ (80072d4 <HAL_RCC_OscConfig+0x6c4>)
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d1f0      	bne.n	80072b4 <HAL_RCC_OscConfig+0x6a4>
 80072d2:	e06e      	b.n	80073b2 <HAL_RCC_OscConfig+0x7a2>
 80072d4:	58024400 	.word	0x58024400
 80072d8:	fffffc0c 	.word	0xfffffc0c
 80072dc:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80072e0:	4b36      	ldr	r3, [pc, #216]	@ (80073bc <HAL_RCC_OscConfig+0x7ac>)
 80072e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072e4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80072e6:	4b35      	ldr	r3, [pc, #212]	@ (80073bc <HAL_RCC_OscConfig+0x7ac>)
 80072e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072ea:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072f0:	2b01      	cmp	r3, #1
 80072f2:	d031      	beq.n	8007358 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80072f4:	693b      	ldr	r3, [r7, #16]
 80072f6:	f003 0203 	and.w	r2, r3, #3
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80072fe:	429a      	cmp	r2, r3
 8007300:	d12a      	bne.n	8007358 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007302:	693b      	ldr	r3, [r7, #16]
 8007304:	091b      	lsrs	r3, r3, #4
 8007306:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800730e:	429a      	cmp	r2, r3
 8007310:	d122      	bne.n	8007358 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800731c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800731e:	429a      	cmp	r2, r3
 8007320:	d11a      	bne.n	8007358 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	0a5b      	lsrs	r3, r3, #9
 8007326:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800732e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007330:	429a      	cmp	r2, r3
 8007332:	d111      	bne.n	8007358 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	0c1b      	lsrs	r3, r3, #16
 8007338:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007340:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007342:	429a      	cmp	r2, r3
 8007344:	d108      	bne.n	8007358 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	0e1b      	lsrs	r3, r3, #24
 800734a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007352:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007354:	429a      	cmp	r2, r3
 8007356:	d001      	beq.n	800735c <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8007358:	2301      	movs	r3, #1
 800735a:	e02b      	b.n	80073b4 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800735c:	4b17      	ldr	r3, [pc, #92]	@ (80073bc <HAL_RCC_OscConfig+0x7ac>)
 800735e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007360:	08db      	lsrs	r3, r3, #3
 8007362:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007366:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800736c:	693a      	ldr	r2, [r7, #16]
 800736e:	429a      	cmp	r2, r3
 8007370:	d01f      	beq.n	80073b2 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8007372:	4b12      	ldr	r3, [pc, #72]	@ (80073bc <HAL_RCC_OscConfig+0x7ac>)
 8007374:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007376:	4a11      	ldr	r2, [pc, #68]	@ (80073bc <HAL_RCC_OscConfig+0x7ac>)
 8007378:	f023 0301 	bic.w	r3, r3, #1
 800737c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800737e:	f7fb f84b 	bl	8002418 <HAL_GetTick>
 8007382:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8007384:	bf00      	nop
 8007386:	f7fb f847 	bl	8002418 <HAL_GetTick>
 800738a:	4602      	mov	r2, r0
 800738c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800738e:	4293      	cmp	r3, r2
 8007390:	d0f9      	beq.n	8007386 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007392:	4b0a      	ldr	r3, [pc, #40]	@ (80073bc <HAL_RCC_OscConfig+0x7ac>)
 8007394:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007396:	4b0a      	ldr	r3, [pc, #40]	@ (80073c0 <HAL_RCC_OscConfig+0x7b0>)
 8007398:	4013      	ands	r3, r2
 800739a:	687a      	ldr	r2, [r7, #4]
 800739c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800739e:	00d2      	lsls	r2, r2, #3
 80073a0:	4906      	ldr	r1, [pc, #24]	@ (80073bc <HAL_RCC_OscConfig+0x7ac>)
 80073a2:	4313      	orrs	r3, r2
 80073a4:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80073a6:	4b05      	ldr	r3, [pc, #20]	@ (80073bc <HAL_RCC_OscConfig+0x7ac>)
 80073a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073aa:	4a04      	ldr	r2, [pc, #16]	@ (80073bc <HAL_RCC_OscConfig+0x7ac>)
 80073ac:	f043 0301 	orr.w	r3, r3, #1
 80073b0:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80073b2:	2300      	movs	r3, #0
}
 80073b4:	4618      	mov	r0, r3
 80073b6:	3730      	adds	r7, #48	@ 0x30
 80073b8:	46bd      	mov	sp, r7
 80073ba:	bd80      	pop	{r7, pc}
 80073bc:	58024400 	.word	0x58024400
 80073c0:	ffff0007 	.word	0xffff0007

080073c4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b086      	sub	sp, #24
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
 80073cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d101      	bne.n	80073d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80073d4:	2301      	movs	r3, #1
 80073d6:	e19c      	b.n	8007712 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80073d8:	4b8a      	ldr	r3, [pc, #552]	@ (8007604 <HAL_RCC_ClockConfig+0x240>)
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	f003 030f 	and.w	r3, r3, #15
 80073e0:	683a      	ldr	r2, [r7, #0]
 80073e2:	429a      	cmp	r2, r3
 80073e4:	d910      	bls.n	8007408 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80073e6:	4b87      	ldr	r3, [pc, #540]	@ (8007604 <HAL_RCC_ClockConfig+0x240>)
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	f023 020f 	bic.w	r2, r3, #15
 80073ee:	4985      	ldr	r1, [pc, #532]	@ (8007604 <HAL_RCC_ClockConfig+0x240>)
 80073f0:	683b      	ldr	r3, [r7, #0]
 80073f2:	4313      	orrs	r3, r2
 80073f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80073f6:	4b83      	ldr	r3, [pc, #524]	@ (8007604 <HAL_RCC_ClockConfig+0x240>)
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	f003 030f 	and.w	r3, r3, #15
 80073fe:	683a      	ldr	r2, [r7, #0]
 8007400:	429a      	cmp	r2, r3
 8007402:	d001      	beq.n	8007408 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007404:	2301      	movs	r3, #1
 8007406:	e184      	b.n	8007712 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	f003 0304 	and.w	r3, r3, #4
 8007410:	2b00      	cmp	r3, #0
 8007412:	d010      	beq.n	8007436 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	691a      	ldr	r2, [r3, #16]
 8007418:	4b7b      	ldr	r3, [pc, #492]	@ (8007608 <HAL_RCC_ClockConfig+0x244>)
 800741a:	699b      	ldr	r3, [r3, #24]
 800741c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007420:	429a      	cmp	r2, r3
 8007422:	d908      	bls.n	8007436 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007424:	4b78      	ldr	r3, [pc, #480]	@ (8007608 <HAL_RCC_ClockConfig+0x244>)
 8007426:	699b      	ldr	r3, [r3, #24]
 8007428:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	691b      	ldr	r3, [r3, #16]
 8007430:	4975      	ldr	r1, [pc, #468]	@ (8007608 <HAL_RCC_ClockConfig+0x244>)
 8007432:	4313      	orrs	r3, r2
 8007434:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	f003 0308 	and.w	r3, r3, #8
 800743e:	2b00      	cmp	r3, #0
 8007440:	d010      	beq.n	8007464 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	695a      	ldr	r2, [r3, #20]
 8007446:	4b70      	ldr	r3, [pc, #448]	@ (8007608 <HAL_RCC_ClockConfig+0x244>)
 8007448:	69db      	ldr	r3, [r3, #28]
 800744a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800744e:	429a      	cmp	r2, r3
 8007450:	d908      	bls.n	8007464 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007452:	4b6d      	ldr	r3, [pc, #436]	@ (8007608 <HAL_RCC_ClockConfig+0x244>)
 8007454:	69db      	ldr	r3, [r3, #28]
 8007456:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	695b      	ldr	r3, [r3, #20]
 800745e:	496a      	ldr	r1, [pc, #424]	@ (8007608 <HAL_RCC_ClockConfig+0x244>)
 8007460:	4313      	orrs	r3, r2
 8007462:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	f003 0310 	and.w	r3, r3, #16
 800746c:	2b00      	cmp	r3, #0
 800746e:	d010      	beq.n	8007492 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	699a      	ldr	r2, [r3, #24]
 8007474:	4b64      	ldr	r3, [pc, #400]	@ (8007608 <HAL_RCC_ClockConfig+0x244>)
 8007476:	69db      	ldr	r3, [r3, #28]
 8007478:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800747c:	429a      	cmp	r2, r3
 800747e:	d908      	bls.n	8007492 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007480:	4b61      	ldr	r3, [pc, #388]	@ (8007608 <HAL_RCC_ClockConfig+0x244>)
 8007482:	69db      	ldr	r3, [r3, #28]
 8007484:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	699b      	ldr	r3, [r3, #24]
 800748c:	495e      	ldr	r1, [pc, #376]	@ (8007608 <HAL_RCC_ClockConfig+0x244>)
 800748e:	4313      	orrs	r3, r2
 8007490:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	f003 0320 	and.w	r3, r3, #32
 800749a:	2b00      	cmp	r3, #0
 800749c:	d010      	beq.n	80074c0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	69da      	ldr	r2, [r3, #28]
 80074a2:	4b59      	ldr	r3, [pc, #356]	@ (8007608 <HAL_RCC_ClockConfig+0x244>)
 80074a4:	6a1b      	ldr	r3, [r3, #32]
 80074a6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80074aa:	429a      	cmp	r2, r3
 80074ac:	d908      	bls.n	80074c0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80074ae:	4b56      	ldr	r3, [pc, #344]	@ (8007608 <HAL_RCC_ClockConfig+0x244>)
 80074b0:	6a1b      	ldr	r3, [r3, #32]
 80074b2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	69db      	ldr	r3, [r3, #28]
 80074ba:	4953      	ldr	r1, [pc, #332]	@ (8007608 <HAL_RCC_ClockConfig+0x244>)
 80074bc:	4313      	orrs	r3, r2
 80074be:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	f003 0302 	and.w	r3, r3, #2
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d010      	beq.n	80074ee <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	68da      	ldr	r2, [r3, #12]
 80074d0:	4b4d      	ldr	r3, [pc, #308]	@ (8007608 <HAL_RCC_ClockConfig+0x244>)
 80074d2:	699b      	ldr	r3, [r3, #24]
 80074d4:	f003 030f 	and.w	r3, r3, #15
 80074d8:	429a      	cmp	r2, r3
 80074da:	d908      	bls.n	80074ee <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80074dc:	4b4a      	ldr	r3, [pc, #296]	@ (8007608 <HAL_RCC_ClockConfig+0x244>)
 80074de:	699b      	ldr	r3, [r3, #24]
 80074e0:	f023 020f 	bic.w	r2, r3, #15
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	68db      	ldr	r3, [r3, #12]
 80074e8:	4947      	ldr	r1, [pc, #284]	@ (8007608 <HAL_RCC_ClockConfig+0x244>)
 80074ea:	4313      	orrs	r3, r2
 80074ec:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	f003 0301 	and.w	r3, r3, #1
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d055      	beq.n	80075a6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80074fa:	4b43      	ldr	r3, [pc, #268]	@ (8007608 <HAL_RCC_ClockConfig+0x244>)
 80074fc:	699b      	ldr	r3, [r3, #24]
 80074fe:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	689b      	ldr	r3, [r3, #8]
 8007506:	4940      	ldr	r1, [pc, #256]	@ (8007608 <HAL_RCC_ClockConfig+0x244>)
 8007508:	4313      	orrs	r3, r2
 800750a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	685b      	ldr	r3, [r3, #4]
 8007510:	2b02      	cmp	r3, #2
 8007512:	d107      	bne.n	8007524 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007514:	4b3c      	ldr	r3, [pc, #240]	@ (8007608 <HAL_RCC_ClockConfig+0x244>)
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800751c:	2b00      	cmp	r3, #0
 800751e:	d121      	bne.n	8007564 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007520:	2301      	movs	r3, #1
 8007522:	e0f6      	b.n	8007712 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	685b      	ldr	r3, [r3, #4]
 8007528:	2b03      	cmp	r3, #3
 800752a:	d107      	bne.n	800753c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800752c:	4b36      	ldr	r3, [pc, #216]	@ (8007608 <HAL_RCC_ClockConfig+0x244>)
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007534:	2b00      	cmp	r3, #0
 8007536:	d115      	bne.n	8007564 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007538:	2301      	movs	r3, #1
 800753a:	e0ea      	b.n	8007712 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	685b      	ldr	r3, [r3, #4]
 8007540:	2b01      	cmp	r3, #1
 8007542:	d107      	bne.n	8007554 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007544:	4b30      	ldr	r3, [pc, #192]	@ (8007608 <HAL_RCC_ClockConfig+0x244>)
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800754c:	2b00      	cmp	r3, #0
 800754e:	d109      	bne.n	8007564 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007550:	2301      	movs	r3, #1
 8007552:	e0de      	b.n	8007712 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007554:	4b2c      	ldr	r3, [pc, #176]	@ (8007608 <HAL_RCC_ClockConfig+0x244>)
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	f003 0304 	and.w	r3, r3, #4
 800755c:	2b00      	cmp	r3, #0
 800755e:	d101      	bne.n	8007564 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007560:	2301      	movs	r3, #1
 8007562:	e0d6      	b.n	8007712 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007564:	4b28      	ldr	r3, [pc, #160]	@ (8007608 <HAL_RCC_ClockConfig+0x244>)
 8007566:	691b      	ldr	r3, [r3, #16]
 8007568:	f023 0207 	bic.w	r2, r3, #7
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	685b      	ldr	r3, [r3, #4]
 8007570:	4925      	ldr	r1, [pc, #148]	@ (8007608 <HAL_RCC_ClockConfig+0x244>)
 8007572:	4313      	orrs	r3, r2
 8007574:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007576:	f7fa ff4f 	bl	8002418 <HAL_GetTick>
 800757a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800757c:	e00a      	b.n	8007594 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800757e:	f7fa ff4b 	bl	8002418 <HAL_GetTick>
 8007582:	4602      	mov	r2, r0
 8007584:	697b      	ldr	r3, [r7, #20]
 8007586:	1ad3      	subs	r3, r2, r3
 8007588:	f241 3288 	movw	r2, #5000	@ 0x1388
 800758c:	4293      	cmp	r3, r2
 800758e:	d901      	bls.n	8007594 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8007590:	2303      	movs	r3, #3
 8007592:	e0be      	b.n	8007712 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007594:	4b1c      	ldr	r3, [pc, #112]	@ (8007608 <HAL_RCC_ClockConfig+0x244>)
 8007596:	691b      	ldr	r3, [r3, #16]
 8007598:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	685b      	ldr	r3, [r3, #4]
 80075a0:	00db      	lsls	r3, r3, #3
 80075a2:	429a      	cmp	r2, r3
 80075a4:	d1eb      	bne.n	800757e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	f003 0302 	and.w	r3, r3, #2
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d010      	beq.n	80075d4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	68da      	ldr	r2, [r3, #12]
 80075b6:	4b14      	ldr	r3, [pc, #80]	@ (8007608 <HAL_RCC_ClockConfig+0x244>)
 80075b8:	699b      	ldr	r3, [r3, #24]
 80075ba:	f003 030f 	and.w	r3, r3, #15
 80075be:	429a      	cmp	r2, r3
 80075c0:	d208      	bcs.n	80075d4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80075c2:	4b11      	ldr	r3, [pc, #68]	@ (8007608 <HAL_RCC_ClockConfig+0x244>)
 80075c4:	699b      	ldr	r3, [r3, #24]
 80075c6:	f023 020f 	bic.w	r2, r3, #15
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	68db      	ldr	r3, [r3, #12]
 80075ce:	490e      	ldr	r1, [pc, #56]	@ (8007608 <HAL_RCC_ClockConfig+0x244>)
 80075d0:	4313      	orrs	r3, r2
 80075d2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80075d4:	4b0b      	ldr	r3, [pc, #44]	@ (8007604 <HAL_RCC_ClockConfig+0x240>)
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	f003 030f 	and.w	r3, r3, #15
 80075dc:	683a      	ldr	r2, [r7, #0]
 80075de:	429a      	cmp	r2, r3
 80075e0:	d214      	bcs.n	800760c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80075e2:	4b08      	ldr	r3, [pc, #32]	@ (8007604 <HAL_RCC_ClockConfig+0x240>)
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	f023 020f 	bic.w	r2, r3, #15
 80075ea:	4906      	ldr	r1, [pc, #24]	@ (8007604 <HAL_RCC_ClockConfig+0x240>)
 80075ec:	683b      	ldr	r3, [r7, #0]
 80075ee:	4313      	orrs	r3, r2
 80075f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80075f2:	4b04      	ldr	r3, [pc, #16]	@ (8007604 <HAL_RCC_ClockConfig+0x240>)
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	f003 030f 	and.w	r3, r3, #15
 80075fa:	683a      	ldr	r2, [r7, #0]
 80075fc:	429a      	cmp	r2, r3
 80075fe:	d005      	beq.n	800760c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8007600:	2301      	movs	r3, #1
 8007602:	e086      	b.n	8007712 <HAL_RCC_ClockConfig+0x34e>
 8007604:	52002000 	.word	0x52002000
 8007608:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	f003 0304 	and.w	r3, r3, #4
 8007614:	2b00      	cmp	r3, #0
 8007616:	d010      	beq.n	800763a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	691a      	ldr	r2, [r3, #16]
 800761c:	4b3f      	ldr	r3, [pc, #252]	@ (800771c <HAL_RCC_ClockConfig+0x358>)
 800761e:	699b      	ldr	r3, [r3, #24]
 8007620:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007624:	429a      	cmp	r2, r3
 8007626:	d208      	bcs.n	800763a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007628:	4b3c      	ldr	r3, [pc, #240]	@ (800771c <HAL_RCC_ClockConfig+0x358>)
 800762a:	699b      	ldr	r3, [r3, #24]
 800762c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	691b      	ldr	r3, [r3, #16]
 8007634:	4939      	ldr	r1, [pc, #228]	@ (800771c <HAL_RCC_ClockConfig+0x358>)
 8007636:	4313      	orrs	r3, r2
 8007638:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	f003 0308 	and.w	r3, r3, #8
 8007642:	2b00      	cmp	r3, #0
 8007644:	d010      	beq.n	8007668 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	695a      	ldr	r2, [r3, #20]
 800764a:	4b34      	ldr	r3, [pc, #208]	@ (800771c <HAL_RCC_ClockConfig+0x358>)
 800764c:	69db      	ldr	r3, [r3, #28]
 800764e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007652:	429a      	cmp	r2, r3
 8007654:	d208      	bcs.n	8007668 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007656:	4b31      	ldr	r3, [pc, #196]	@ (800771c <HAL_RCC_ClockConfig+0x358>)
 8007658:	69db      	ldr	r3, [r3, #28]
 800765a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	695b      	ldr	r3, [r3, #20]
 8007662:	492e      	ldr	r1, [pc, #184]	@ (800771c <HAL_RCC_ClockConfig+0x358>)
 8007664:	4313      	orrs	r3, r2
 8007666:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	f003 0310 	and.w	r3, r3, #16
 8007670:	2b00      	cmp	r3, #0
 8007672:	d010      	beq.n	8007696 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	699a      	ldr	r2, [r3, #24]
 8007678:	4b28      	ldr	r3, [pc, #160]	@ (800771c <HAL_RCC_ClockConfig+0x358>)
 800767a:	69db      	ldr	r3, [r3, #28]
 800767c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007680:	429a      	cmp	r2, r3
 8007682:	d208      	bcs.n	8007696 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007684:	4b25      	ldr	r3, [pc, #148]	@ (800771c <HAL_RCC_ClockConfig+0x358>)
 8007686:	69db      	ldr	r3, [r3, #28]
 8007688:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	699b      	ldr	r3, [r3, #24]
 8007690:	4922      	ldr	r1, [pc, #136]	@ (800771c <HAL_RCC_ClockConfig+0x358>)
 8007692:	4313      	orrs	r3, r2
 8007694:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	f003 0320 	and.w	r3, r3, #32
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d010      	beq.n	80076c4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	69da      	ldr	r2, [r3, #28]
 80076a6:	4b1d      	ldr	r3, [pc, #116]	@ (800771c <HAL_RCC_ClockConfig+0x358>)
 80076a8:	6a1b      	ldr	r3, [r3, #32]
 80076aa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80076ae:	429a      	cmp	r2, r3
 80076b0:	d208      	bcs.n	80076c4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80076b2:	4b1a      	ldr	r3, [pc, #104]	@ (800771c <HAL_RCC_ClockConfig+0x358>)
 80076b4:	6a1b      	ldr	r3, [r3, #32]
 80076b6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	69db      	ldr	r3, [r3, #28]
 80076be:	4917      	ldr	r1, [pc, #92]	@ (800771c <HAL_RCC_ClockConfig+0x358>)
 80076c0:	4313      	orrs	r3, r2
 80076c2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80076c4:	f000 f834 	bl	8007730 <HAL_RCC_GetSysClockFreq>
 80076c8:	4602      	mov	r2, r0
 80076ca:	4b14      	ldr	r3, [pc, #80]	@ (800771c <HAL_RCC_ClockConfig+0x358>)
 80076cc:	699b      	ldr	r3, [r3, #24]
 80076ce:	0a1b      	lsrs	r3, r3, #8
 80076d0:	f003 030f 	and.w	r3, r3, #15
 80076d4:	4912      	ldr	r1, [pc, #72]	@ (8007720 <HAL_RCC_ClockConfig+0x35c>)
 80076d6:	5ccb      	ldrb	r3, [r1, r3]
 80076d8:	f003 031f 	and.w	r3, r3, #31
 80076dc:	fa22 f303 	lsr.w	r3, r2, r3
 80076e0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80076e2:	4b0e      	ldr	r3, [pc, #56]	@ (800771c <HAL_RCC_ClockConfig+0x358>)
 80076e4:	699b      	ldr	r3, [r3, #24]
 80076e6:	f003 030f 	and.w	r3, r3, #15
 80076ea:	4a0d      	ldr	r2, [pc, #52]	@ (8007720 <HAL_RCC_ClockConfig+0x35c>)
 80076ec:	5cd3      	ldrb	r3, [r2, r3]
 80076ee:	f003 031f 	and.w	r3, r3, #31
 80076f2:	693a      	ldr	r2, [r7, #16]
 80076f4:	fa22 f303 	lsr.w	r3, r2, r3
 80076f8:	4a0a      	ldr	r2, [pc, #40]	@ (8007724 <HAL_RCC_ClockConfig+0x360>)
 80076fa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80076fc:	4a0a      	ldr	r2, [pc, #40]	@ (8007728 <HAL_RCC_ClockConfig+0x364>)
 80076fe:	693b      	ldr	r3, [r7, #16]
 8007700:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8007702:	4b0a      	ldr	r3, [pc, #40]	@ (800772c <HAL_RCC_ClockConfig+0x368>)
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	4618      	mov	r0, r3
 8007708:	f7fa fe3c 	bl	8002384 <HAL_InitTick>
 800770c:	4603      	mov	r3, r0
 800770e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8007710:	7bfb      	ldrb	r3, [r7, #15]
}
 8007712:	4618      	mov	r0, r3
 8007714:	3718      	adds	r7, #24
 8007716:	46bd      	mov	sp, r7
 8007718:	bd80      	pop	{r7, pc}
 800771a:	bf00      	nop
 800771c:	58024400 	.word	0x58024400
 8007720:	0800e050 	.word	0x0800e050
 8007724:	24000004 	.word	0x24000004
 8007728:	24000000 	.word	0x24000000
 800772c:	24000008 	.word	0x24000008

08007730 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007730:	b480      	push	{r7}
 8007732:	b089      	sub	sp, #36	@ 0x24
 8007734:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007736:	4bb3      	ldr	r3, [pc, #716]	@ (8007a04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007738:	691b      	ldr	r3, [r3, #16]
 800773a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800773e:	2b18      	cmp	r3, #24
 8007740:	f200 8155 	bhi.w	80079ee <HAL_RCC_GetSysClockFreq+0x2be>
 8007744:	a201      	add	r2, pc, #4	@ (adr r2, 800774c <HAL_RCC_GetSysClockFreq+0x1c>)
 8007746:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800774a:	bf00      	nop
 800774c:	080077b1 	.word	0x080077b1
 8007750:	080079ef 	.word	0x080079ef
 8007754:	080079ef 	.word	0x080079ef
 8007758:	080079ef 	.word	0x080079ef
 800775c:	080079ef 	.word	0x080079ef
 8007760:	080079ef 	.word	0x080079ef
 8007764:	080079ef 	.word	0x080079ef
 8007768:	080079ef 	.word	0x080079ef
 800776c:	080077d7 	.word	0x080077d7
 8007770:	080079ef 	.word	0x080079ef
 8007774:	080079ef 	.word	0x080079ef
 8007778:	080079ef 	.word	0x080079ef
 800777c:	080079ef 	.word	0x080079ef
 8007780:	080079ef 	.word	0x080079ef
 8007784:	080079ef 	.word	0x080079ef
 8007788:	080079ef 	.word	0x080079ef
 800778c:	080077dd 	.word	0x080077dd
 8007790:	080079ef 	.word	0x080079ef
 8007794:	080079ef 	.word	0x080079ef
 8007798:	080079ef 	.word	0x080079ef
 800779c:	080079ef 	.word	0x080079ef
 80077a0:	080079ef 	.word	0x080079ef
 80077a4:	080079ef 	.word	0x080079ef
 80077a8:	080079ef 	.word	0x080079ef
 80077ac:	080077e3 	.word	0x080077e3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80077b0:	4b94      	ldr	r3, [pc, #592]	@ (8007a04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	f003 0320 	and.w	r3, r3, #32
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d009      	beq.n	80077d0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80077bc:	4b91      	ldr	r3, [pc, #580]	@ (8007a04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	08db      	lsrs	r3, r3, #3
 80077c2:	f003 0303 	and.w	r3, r3, #3
 80077c6:	4a90      	ldr	r2, [pc, #576]	@ (8007a08 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80077c8:	fa22 f303 	lsr.w	r3, r2, r3
 80077cc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80077ce:	e111      	b.n	80079f4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80077d0:	4b8d      	ldr	r3, [pc, #564]	@ (8007a08 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80077d2:	61bb      	str	r3, [r7, #24]
      break;
 80077d4:	e10e      	b.n	80079f4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80077d6:	4b8d      	ldr	r3, [pc, #564]	@ (8007a0c <HAL_RCC_GetSysClockFreq+0x2dc>)
 80077d8:	61bb      	str	r3, [r7, #24]
      break;
 80077da:	e10b      	b.n	80079f4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80077dc:	4b8c      	ldr	r3, [pc, #560]	@ (8007a10 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80077de:	61bb      	str	r3, [r7, #24]
      break;
 80077e0:	e108      	b.n	80079f4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80077e2:	4b88      	ldr	r3, [pc, #544]	@ (8007a04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80077e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077e6:	f003 0303 	and.w	r3, r3, #3
 80077ea:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80077ec:	4b85      	ldr	r3, [pc, #532]	@ (8007a04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80077ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077f0:	091b      	lsrs	r3, r3, #4
 80077f2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80077f6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80077f8:	4b82      	ldr	r3, [pc, #520]	@ (8007a04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80077fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077fc:	f003 0301 	and.w	r3, r3, #1
 8007800:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8007802:	4b80      	ldr	r3, [pc, #512]	@ (8007a04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007804:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007806:	08db      	lsrs	r3, r3, #3
 8007808:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800780c:	68fa      	ldr	r2, [r7, #12]
 800780e:	fb02 f303 	mul.w	r3, r2, r3
 8007812:	ee07 3a90 	vmov	s15, r3
 8007816:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800781a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800781e:	693b      	ldr	r3, [r7, #16]
 8007820:	2b00      	cmp	r3, #0
 8007822:	f000 80e1 	beq.w	80079e8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8007826:	697b      	ldr	r3, [r7, #20]
 8007828:	2b02      	cmp	r3, #2
 800782a:	f000 8083 	beq.w	8007934 <HAL_RCC_GetSysClockFreq+0x204>
 800782e:	697b      	ldr	r3, [r7, #20]
 8007830:	2b02      	cmp	r3, #2
 8007832:	f200 80a1 	bhi.w	8007978 <HAL_RCC_GetSysClockFreq+0x248>
 8007836:	697b      	ldr	r3, [r7, #20]
 8007838:	2b00      	cmp	r3, #0
 800783a:	d003      	beq.n	8007844 <HAL_RCC_GetSysClockFreq+0x114>
 800783c:	697b      	ldr	r3, [r7, #20]
 800783e:	2b01      	cmp	r3, #1
 8007840:	d056      	beq.n	80078f0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8007842:	e099      	b.n	8007978 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007844:	4b6f      	ldr	r3, [pc, #444]	@ (8007a04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	f003 0320 	and.w	r3, r3, #32
 800784c:	2b00      	cmp	r3, #0
 800784e:	d02d      	beq.n	80078ac <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007850:	4b6c      	ldr	r3, [pc, #432]	@ (8007a04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	08db      	lsrs	r3, r3, #3
 8007856:	f003 0303 	and.w	r3, r3, #3
 800785a:	4a6b      	ldr	r2, [pc, #428]	@ (8007a08 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800785c:	fa22 f303 	lsr.w	r3, r2, r3
 8007860:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	ee07 3a90 	vmov	s15, r3
 8007868:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800786c:	693b      	ldr	r3, [r7, #16]
 800786e:	ee07 3a90 	vmov	s15, r3
 8007872:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007876:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800787a:	4b62      	ldr	r3, [pc, #392]	@ (8007a04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800787c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800787e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007882:	ee07 3a90 	vmov	s15, r3
 8007886:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800788a:	ed97 6a02 	vldr	s12, [r7, #8]
 800788e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8007a14 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007892:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007896:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800789a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800789e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80078a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078a6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80078aa:	e087      	b.n	80079bc <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80078ac:	693b      	ldr	r3, [r7, #16]
 80078ae:	ee07 3a90 	vmov	s15, r3
 80078b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078b6:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8007a18 <HAL_RCC_GetSysClockFreq+0x2e8>
 80078ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80078be:	4b51      	ldr	r3, [pc, #324]	@ (8007a04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80078c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80078c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078c6:	ee07 3a90 	vmov	s15, r3
 80078ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078ce:	ed97 6a02 	vldr	s12, [r7, #8]
 80078d2:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8007a14 <HAL_RCC_GetSysClockFreq+0x2e4>
 80078d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80078da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80078de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80078e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80078e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078ea:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80078ee:	e065      	b.n	80079bc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80078f0:	693b      	ldr	r3, [r7, #16]
 80078f2:	ee07 3a90 	vmov	s15, r3
 80078f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078fa:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8007a1c <HAL_RCC_GetSysClockFreq+0x2ec>
 80078fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007902:	4b40      	ldr	r3, [pc, #256]	@ (8007a04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007906:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800790a:	ee07 3a90 	vmov	s15, r3
 800790e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007912:	ed97 6a02 	vldr	s12, [r7, #8]
 8007916:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8007a14 <HAL_RCC_GetSysClockFreq+0x2e4>
 800791a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800791e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007922:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007926:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800792a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800792e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007932:	e043      	b.n	80079bc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007934:	693b      	ldr	r3, [r7, #16]
 8007936:	ee07 3a90 	vmov	s15, r3
 800793a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800793e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8007a20 <HAL_RCC_GetSysClockFreq+0x2f0>
 8007942:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007946:	4b2f      	ldr	r3, [pc, #188]	@ (8007a04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007948:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800794a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800794e:	ee07 3a90 	vmov	s15, r3
 8007952:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007956:	ed97 6a02 	vldr	s12, [r7, #8]
 800795a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8007a14 <HAL_RCC_GetSysClockFreq+0x2e4>
 800795e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007962:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007966:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800796a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800796e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007972:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007976:	e021      	b.n	80079bc <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007978:	693b      	ldr	r3, [r7, #16]
 800797a:	ee07 3a90 	vmov	s15, r3
 800797e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007982:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8007a1c <HAL_RCC_GetSysClockFreq+0x2ec>
 8007986:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800798a:	4b1e      	ldr	r3, [pc, #120]	@ (8007a04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800798c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800798e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007992:	ee07 3a90 	vmov	s15, r3
 8007996:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800799a:	ed97 6a02 	vldr	s12, [r7, #8]
 800799e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8007a14 <HAL_RCC_GetSysClockFreq+0x2e4>
 80079a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80079a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80079aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80079ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80079b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80079b6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80079ba:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80079bc:	4b11      	ldr	r3, [pc, #68]	@ (8007a04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80079be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079c0:	0a5b      	lsrs	r3, r3, #9
 80079c2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80079c6:	3301      	adds	r3, #1
 80079c8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80079ca:	683b      	ldr	r3, [r7, #0]
 80079cc:	ee07 3a90 	vmov	s15, r3
 80079d0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80079d4:	edd7 6a07 	vldr	s13, [r7, #28]
 80079d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80079dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80079e0:	ee17 3a90 	vmov	r3, s15
 80079e4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80079e6:	e005      	b.n	80079f4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80079e8:	2300      	movs	r3, #0
 80079ea:	61bb      	str	r3, [r7, #24]
      break;
 80079ec:	e002      	b.n	80079f4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80079ee:	4b07      	ldr	r3, [pc, #28]	@ (8007a0c <HAL_RCC_GetSysClockFreq+0x2dc>)
 80079f0:	61bb      	str	r3, [r7, #24]
      break;
 80079f2:	bf00      	nop
  }

  return sysclockfreq;
 80079f4:	69bb      	ldr	r3, [r7, #24]
}
 80079f6:	4618      	mov	r0, r3
 80079f8:	3724      	adds	r7, #36	@ 0x24
 80079fa:	46bd      	mov	sp, r7
 80079fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a00:	4770      	bx	lr
 8007a02:	bf00      	nop
 8007a04:	58024400 	.word	0x58024400
 8007a08:	03d09000 	.word	0x03d09000
 8007a0c:	003d0900 	.word	0x003d0900
 8007a10:	016e3600 	.word	0x016e3600
 8007a14:	46000000 	.word	0x46000000
 8007a18:	4c742400 	.word	0x4c742400
 8007a1c:	4a742400 	.word	0x4a742400
 8007a20:	4bb71b00 	.word	0x4bb71b00

08007a24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007a24:	b580      	push	{r7, lr}
 8007a26:	b082      	sub	sp, #8
 8007a28:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007a2a:	f7ff fe81 	bl	8007730 <HAL_RCC_GetSysClockFreq>
 8007a2e:	4602      	mov	r2, r0
 8007a30:	4b10      	ldr	r3, [pc, #64]	@ (8007a74 <HAL_RCC_GetHCLKFreq+0x50>)
 8007a32:	699b      	ldr	r3, [r3, #24]
 8007a34:	0a1b      	lsrs	r3, r3, #8
 8007a36:	f003 030f 	and.w	r3, r3, #15
 8007a3a:	490f      	ldr	r1, [pc, #60]	@ (8007a78 <HAL_RCC_GetHCLKFreq+0x54>)
 8007a3c:	5ccb      	ldrb	r3, [r1, r3]
 8007a3e:	f003 031f 	and.w	r3, r3, #31
 8007a42:	fa22 f303 	lsr.w	r3, r2, r3
 8007a46:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007a48:	4b0a      	ldr	r3, [pc, #40]	@ (8007a74 <HAL_RCC_GetHCLKFreq+0x50>)
 8007a4a:	699b      	ldr	r3, [r3, #24]
 8007a4c:	f003 030f 	and.w	r3, r3, #15
 8007a50:	4a09      	ldr	r2, [pc, #36]	@ (8007a78 <HAL_RCC_GetHCLKFreq+0x54>)
 8007a52:	5cd3      	ldrb	r3, [r2, r3]
 8007a54:	f003 031f 	and.w	r3, r3, #31
 8007a58:	687a      	ldr	r2, [r7, #4]
 8007a5a:	fa22 f303 	lsr.w	r3, r2, r3
 8007a5e:	4a07      	ldr	r2, [pc, #28]	@ (8007a7c <HAL_RCC_GetHCLKFreq+0x58>)
 8007a60:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007a62:	4a07      	ldr	r2, [pc, #28]	@ (8007a80 <HAL_RCC_GetHCLKFreq+0x5c>)
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007a68:	4b04      	ldr	r3, [pc, #16]	@ (8007a7c <HAL_RCC_GetHCLKFreq+0x58>)
 8007a6a:	681b      	ldr	r3, [r3, #0]
}
 8007a6c:	4618      	mov	r0, r3
 8007a6e:	3708      	adds	r7, #8
 8007a70:	46bd      	mov	sp, r7
 8007a72:	bd80      	pop	{r7, pc}
 8007a74:	58024400 	.word	0x58024400
 8007a78:	0800e050 	.word	0x0800e050
 8007a7c:	24000004 	.word	0x24000004
 8007a80:	24000000 	.word	0x24000000

08007a84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007a84:	b580      	push	{r7, lr}
 8007a86:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007a88:	f7ff ffcc 	bl	8007a24 <HAL_RCC_GetHCLKFreq>
 8007a8c:	4602      	mov	r2, r0
 8007a8e:	4b06      	ldr	r3, [pc, #24]	@ (8007aa8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007a90:	69db      	ldr	r3, [r3, #28]
 8007a92:	091b      	lsrs	r3, r3, #4
 8007a94:	f003 0307 	and.w	r3, r3, #7
 8007a98:	4904      	ldr	r1, [pc, #16]	@ (8007aac <HAL_RCC_GetPCLK1Freq+0x28>)
 8007a9a:	5ccb      	ldrb	r3, [r1, r3]
 8007a9c:	f003 031f 	and.w	r3, r3, #31
 8007aa0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8007aa4:	4618      	mov	r0, r3
 8007aa6:	bd80      	pop	{r7, pc}
 8007aa8:	58024400 	.word	0x58024400
 8007aac:	0800e050 	.word	0x0800e050

08007ab0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8007ab4:	f7ff ffb6 	bl	8007a24 <HAL_RCC_GetHCLKFreq>
 8007ab8:	4602      	mov	r2, r0
 8007aba:	4b06      	ldr	r3, [pc, #24]	@ (8007ad4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007abc:	69db      	ldr	r3, [r3, #28]
 8007abe:	0a1b      	lsrs	r3, r3, #8
 8007ac0:	f003 0307 	and.w	r3, r3, #7
 8007ac4:	4904      	ldr	r1, [pc, #16]	@ (8007ad8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007ac6:	5ccb      	ldrb	r3, [r1, r3]
 8007ac8:	f003 031f 	and.w	r3, r3, #31
 8007acc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	bd80      	pop	{r7, pc}
 8007ad4:	58024400 	.word	0x58024400
 8007ad8:	0800e050 	.word	0x0800e050

08007adc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007adc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007ae0:	b0c6      	sub	sp, #280	@ 0x118
 8007ae2:	af00      	add	r7, sp, #0
 8007ae4:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007ae8:	2300      	movs	r3, #0
 8007aea:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007aee:	2300      	movs	r3, #0
 8007af0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007af4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007af8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007afc:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8007b00:	2500      	movs	r5, #0
 8007b02:	ea54 0305 	orrs.w	r3, r4, r5
 8007b06:	d049      	beq.n	8007b9c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8007b08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b0c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007b0e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007b12:	d02f      	beq.n	8007b74 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8007b14:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007b18:	d828      	bhi.n	8007b6c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007b1a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007b1e:	d01a      	beq.n	8007b56 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8007b20:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007b24:	d822      	bhi.n	8007b6c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d003      	beq.n	8007b32 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8007b2a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007b2e:	d007      	beq.n	8007b40 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007b30:	e01c      	b.n	8007b6c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007b32:	4bab      	ldr	r3, [pc, #684]	@ (8007de0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007b34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b36:	4aaa      	ldr	r2, [pc, #680]	@ (8007de0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007b38:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007b3c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007b3e:	e01a      	b.n	8007b76 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007b40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b44:	3308      	adds	r3, #8
 8007b46:	2102      	movs	r1, #2
 8007b48:	4618      	mov	r0, r3
 8007b4a:	f002 fa49 	bl	8009fe0 <RCCEx_PLL2_Config>
 8007b4e:	4603      	mov	r3, r0
 8007b50:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007b54:	e00f      	b.n	8007b76 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007b56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b5a:	3328      	adds	r3, #40	@ 0x28
 8007b5c:	2102      	movs	r1, #2
 8007b5e:	4618      	mov	r0, r3
 8007b60:	f002 faf0 	bl	800a144 <RCCEx_PLL3_Config>
 8007b64:	4603      	mov	r3, r0
 8007b66:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007b6a:	e004      	b.n	8007b76 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007b6c:	2301      	movs	r3, #1
 8007b6e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007b72:	e000      	b.n	8007b76 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8007b74:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007b76:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d10a      	bne.n	8007b94 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007b7e:	4b98      	ldr	r3, [pc, #608]	@ (8007de0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007b80:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b82:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8007b86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b8a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007b8c:	4a94      	ldr	r2, [pc, #592]	@ (8007de0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007b8e:	430b      	orrs	r3, r1
 8007b90:	6513      	str	r3, [r2, #80]	@ 0x50
 8007b92:	e003      	b.n	8007b9c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b94:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007b98:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007b9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ba4:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8007ba8:	f04f 0900 	mov.w	r9, #0
 8007bac:	ea58 0309 	orrs.w	r3, r8, r9
 8007bb0:	d047      	beq.n	8007c42 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8007bb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007bb8:	2b04      	cmp	r3, #4
 8007bba:	d82a      	bhi.n	8007c12 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8007bbc:	a201      	add	r2, pc, #4	@ (adr r2, 8007bc4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8007bbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bc2:	bf00      	nop
 8007bc4:	08007bd9 	.word	0x08007bd9
 8007bc8:	08007be7 	.word	0x08007be7
 8007bcc:	08007bfd 	.word	0x08007bfd
 8007bd0:	08007c1b 	.word	0x08007c1b
 8007bd4:	08007c1b 	.word	0x08007c1b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007bd8:	4b81      	ldr	r3, [pc, #516]	@ (8007de0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007bda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bdc:	4a80      	ldr	r2, [pc, #512]	@ (8007de0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007bde:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007be2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007be4:	e01a      	b.n	8007c1c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007be6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bea:	3308      	adds	r3, #8
 8007bec:	2100      	movs	r1, #0
 8007bee:	4618      	mov	r0, r3
 8007bf0:	f002 f9f6 	bl	8009fe0 <RCCEx_PLL2_Config>
 8007bf4:	4603      	mov	r3, r0
 8007bf6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007bfa:	e00f      	b.n	8007c1c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007bfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c00:	3328      	adds	r3, #40	@ 0x28
 8007c02:	2100      	movs	r1, #0
 8007c04:	4618      	mov	r0, r3
 8007c06:	f002 fa9d 	bl	800a144 <RCCEx_PLL3_Config>
 8007c0a:	4603      	mov	r3, r0
 8007c0c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007c10:	e004      	b.n	8007c1c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007c12:	2301      	movs	r3, #1
 8007c14:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007c18:	e000      	b.n	8007c1c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8007c1a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007c1c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d10a      	bne.n	8007c3a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007c24:	4b6e      	ldr	r3, [pc, #440]	@ (8007de0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007c26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007c28:	f023 0107 	bic.w	r1, r3, #7
 8007c2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c32:	4a6b      	ldr	r2, [pc, #428]	@ (8007de0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007c34:	430b      	orrs	r3, r1
 8007c36:	6513      	str	r3, [r2, #80]	@ 0x50
 8007c38:	e003      	b.n	8007c42 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c3a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007c3e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007c42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c4a:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 8007c4e:	f04f 0b00 	mov.w	fp, #0
 8007c52:	ea5a 030b 	orrs.w	r3, sl, fp
 8007c56:	d05b      	beq.n	8007d10 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8007c58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c5c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007c60:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8007c64:	d03b      	beq.n	8007cde <HAL_RCCEx_PeriphCLKConfig+0x202>
 8007c66:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8007c6a:	d834      	bhi.n	8007cd6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8007c6c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007c70:	d037      	beq.n	8007ce2 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8007c72:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007c76:	d82e      	bhi.n	8007cd6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8007c78:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007c7c:	d033      	beq.n	8007ce6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8007c7e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007c82:	d828      	bhi.n	8007cd6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8007c84:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007c88:	d01a      	beq.n	8007cc0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8007c8a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007c8e:	d822      	bhi.n	8007cd6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d003      	beq.n	8007c9c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8007c94:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007c98:	d007      	beq.n	8007caa <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8007c9a:	e01c      	b.n	8007cd6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007c9c:	4b50      	ldr	r3, [pc, #320]	@ (8007de0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007c9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ca0:	4a4f      	ldr	r2, [pc, #316]	@ (8007de0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007ca2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007ca6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007ca8:	e01e      	b.n	8007ce8 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007caa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007cae:	3308      	adds	r3, #8
 8007cb0:	2100      	movs	r1, #0
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	f002 f994 	bl	8009fe0 <RCCEx_PLL2_Config>
 8007cb8:	4603      	mov	r3, r0
 8007cba:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007cbe:	e013      	b.n	8007ce8 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007cc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007cc4:	3328      	adds	r3, #40	@ 0x28
 8007cc6:	2100      	movs	r1, #0
 8007cc8:	4618      	mov	r0, r3
 8007cca:	f002 fa3b 	bl	800a144 <RCCEx_PLL3_Config>
 8007cce:	4603      	mov	r3, r0
 8007cd0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007cd4:	e008      	b.n	8007ce8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8007cd6:	2301      	movs	r3, #1
 8007cd8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007cdc:	e004      	b.n	8007ce8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8007cde:	bf00      	nop
 8007ce0:	e002      	b.n	8007ce8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8007ce2:	bf00      	nop
 8007ce4:	e000      	b.n	8007ce8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8007ce6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007ce8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d10b      	bne.n	8007d08 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007cf0:	4b3b      	ldr	r3, [pc, #236]	@ (8007de0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007cf2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007cf4:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8007cf8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007cfc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007d00:	4a37      	ldr	r2, [pc, #220]	@ (8007de0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007d02:	430b      	orrs	r3, r1
 8007d04:	6593      	str	r3, [r2, #88]	@ 0x58
 8007d06:	e003      	b.n	8007d10 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d08:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007d0c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007d10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d18:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8007d1c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007d20:	2300      	movs	r3, #0
 8007d22:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007d26:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8007d2a:	460b      	mov	r3, r1
 8007d2c:	4313      	orrs	r3, r2
 8007d2e:	d05d      	beq.n	8007dec <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8007d30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d34:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007d38:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8007d3c:	d03b      	beq.n	8007db6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8007d3e:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8007d42:	d834      	bhi.n	8007dae <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8007d44:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007d48:	d037      	beq.n	8007dba <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8007d4a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007d4e:	d82e      	bhi.n	8007dae <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8007d50:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007d54:	d033      	beq.n	8007dbe <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8007d56:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007d5a:	d828      	bhi.n	8007dae <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8007d5c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007d60:	d01a      	beq.n	8007d98 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8007d62:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007d66:	d822      	bhi.n	8007dae <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d003      	beq.n	8007d74 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8007d6c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007d70:	d007      	beq.n	8007d82 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8007d72:	e01c      	b.n	8007dae <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d74:	4b1a      	ldr	r3, [pc, #104]	@ (8007de0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007d76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d78:	4a19      	ldr	r2, [pc, #100]	@ (8007de0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007d7a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007d7e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007d80:	e01e      	b.n	8007dc0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007d82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d86:	3308      	adds	r3, #8
 8007d88:	2100      	movs	r1, #0
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	f002 f928 	bl	8009fe0 <RCCEx_PLL2_Config>
 8007d90:	4603      	mov	r3, r0
 8007d92:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007d96:	e013      	b.n	8007dc0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007d98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d9c:	3328      	adds	r3, #40	@ 0x28
 8007d9e:	2100      	movs	r1, #0
 8007da0:	4618      	mov	r0, r3
 8007da2:	f002 f9cf 	bl	800a144 <RCCEx_PLL3_Config>
 8007da6:	4603      	mov	r3, r0
 8007da8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007dac:	e008      	b.n	8007dc0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8007dae:	2301      	movs	r3, #1
 8007db0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007db4:	e004      	b.n	8007dc0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8007db6:	bf00      	nop
 8007db8:	e002      	b.n	8007dc0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8007dba:	bf00      	nop
 8007dbc:	e000      	b.n	8007dc0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8007dbe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007dc0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d10d      	bne.n	8007de4 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007dc8:	4b05      	ldr	r3, [pc, #20]	@ (8007de0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007dca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007dcc:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8007dd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007dd4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007dd8:	4a01      	ldr	r2, [pc, #4]	@ (8007de0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007dda:	430b      	orrs	r3, r1
 8007ddc:	6593      	str	r3, [r2, #88]	@ 0x58
 8007dde:	e005      	b.n	8007dec <HAL_RCCEx_PeriphCLKConfig+0x310>
 8007de0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007de4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007de8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8007dec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007df4:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8007df8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007dfc:	2300      	movs	r3, #0
 8007dfe:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007e02:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8007e06:	460b      	mov	r3, r1
 8007e08:	4313      	orrs	r3, r2
 8007e0a:	d03a      	beq.n	8007e82 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8007e0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007e12:	2b30      	cmp	r3, #48	@ 0x30
 8007e14:	d01f      	beq.n	8007e56 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8007e16:	2b30      	cmp	r3, #48	@ 0x30
 8007e18:	d819      	bhi.n	8007e4e <HAL_RCCEx_PeriphCLKConfig+0x372>
 8007e1a:	2b20      	cmp	r3, #32
 8007e1c:	d00c      	beq.n	8007e38 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8007e1e:	2b20      	cmp	r3, #32
 8007e20:	d815      	bhi.n	8007e4e <HAL_RCCEx_PeriphCLKConfig+0x372>
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d019      	beq.n	8007e5a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8007e26:	2b10      	cmp	r3, #16
 8007e28:	d111      	bne.n	8007e4e <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007e2a:	4baa      	ldr	r3, [pc, #680]	@ (80080d4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007e2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e2e:	4aa9      	ldr	r2, [pc, #676]	@ (80080d4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007e30:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007e34:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8007e36:	e011      	b.n	8007e5c <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007e38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e3c:	3308      	adds	r3, #8
 8007e3e:	2102      	movs	r1, #2
 8007e40:	4618      	mov	r0, r3
 8007e42:	f002 f8cd 	bl	8009fe0 <RCCEx_PLL2_Config>
 8007e46:	4603      	mov	r3, r0
 8007e48:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8007e4c:	e006      	b.n	8007e5c <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007e4e:	2301      	movs	r3, #1
 8007e50:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007e54:	e002      	b.n	8007e5c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8007e56:	bf00      	nop
 8007e58:	e000      	b.n	8007e5c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8007e5a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007e5c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d10a      	bne.n	8007e7a <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8007e64:	4b9b      	ldr	r3, [pc, #620]	@ (80080d4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007e66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007e68:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8007e6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007e72:	4a98      	ldr	r2, [pc, #608]	@ (80080d4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007e74:	430b      	orrs	r3, r1
 8007e76:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007e78:	e003      	b.n	8007e82 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e7a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007e7e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007e82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e8a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8007e8e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007e92:	2300      	movs	r3, #0
 8007e94:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007e98:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8007e9c:	460b      	mov	r3, r1
 8007e9e:	4313      	orrs	r3, r2
 8007ea0:	d051      	beq.n	8007f46 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8007ea2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ea6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007ea8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007eac:	d035      	beq.n	8007f1a <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8007eae:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007eb2:	d82e      	bhi.n	8007f12 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8007eb4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007eb8:	d031      	beq.n	8007f1e <HAL_RCCEx_PeriphCLKConfig+0x442>
 8007eba:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007ebe:	d828      	bhi.n	8007f12 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8007ec0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007ec4:	d01a      	beq.n	8007efc <HAL_RCCEx_PeriphCLKConfig+0x420>
 8007ec6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007eca:	d822      	bhi.n	8007f12 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d003      	beq.n	8007ed8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8007ed0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007ed4:	d007      	beq.n	8007ee6 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8007ed6:	e01c      	b.n	8007f12 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ed8:	4b7e      	ldr	r3, [pc, #504]	@ (80080d4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007eda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007edc:	4a7d      	ldr	r2, [pc, #500]	@ (80080d4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007ede:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007ee2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007ee4:	e01c      	b.n	8007f20 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007ee6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007eea:	3308      	adds	r3, #8
 8007eec:	2100      	movs	r1, #0
 8007eee:	4618      	mov	r0, r3
 8007ef0:	f002 f876 	bl	8009fe0 <RCCEx_PLL2_Config>
 8007ef4:	4603      	mov	r3, r0
 8007ef6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007efa:	e011      	b.n	8007f20 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007efc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f00:	3328      	adds	r3, #40	@ 0x28
 8007f02:	2100      	movs	r1, #0
 8007f04:	4618      	mov	r0, r3
 8007f06:	f002 f91d 	bl	800a144 <RCCEx_PLL3_Config>
 8007f0a:	4603      	mov	r3, r0
 8007f0c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007f10:	e006      	b.n	8007f20 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007f12:	2301      	movs	r3, #1
 8007f14:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007f18:	e002      	b.n	8007f20 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8007f1a:	bf00      	nop
 8007f1c:	e000      	b.n	8007f20 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8007f1e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f20:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d10a      	bne.n	8007f3e <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007f28:	4b6a      	ldr	r3, [pc, #424]	@ (80080d4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007f2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007f2c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8007f30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007f36:	4a67      	ldr	r2, [pc, #412]	@ (80080d4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007f38:	430b      	orrs	r3, r1
 8007f3a:	6513      	str	r3, [r2, #80]	@ 0x50
 8007f3c:	e003      	b.n	8007f46 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f3e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007f42:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007f46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f4e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8007f52:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007f56:	2300      	movs	r3, #0
 8007f58:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007f5c:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8007f60:	460b      	mov	r3, r1
 8007f62:	4313      	orrs	r3, r2
 8007f64:	d053      	beq.n	800800e <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8007f66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f6a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007f6c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007f70:	d033      	beq.n	8007fda <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8007f72:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007f76:	d82c      	bhi.n	8007fd2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8007f78:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007f7c:	d02f      	beq.n	8007fde <HAL_RCCEx_PeriphCLKConfig+0x502>
 8007f7e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007f82:	d826      	bhi.n	8007fd2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8007f84:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007f88:	d02b      	beq.n	8007fe2 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8007f8a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007f8e:	d820      	bhi.n	8007fd2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8007f90:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007f94:	d012      	beq.n	8007fbc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8007f96:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007f9a:	d81a      	bhi.n	8007fd2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d022      	beq.n	8007fe6 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8007fa0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007fa4:	d115      	bne.n	8007fd2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007fa6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007faa:	3308      	adds	r3, #8
 8007fac:	2101      	movs	r1, #1
 8007fae:	4618      	mov	r0, r3
 8007fb0:	f002 f816 	bl	8009fe0 <RCCEx_PLL2_Config>
 8007fb4:	4603      	mov	r3, r0
 8007fb6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007fba:	e015      	b.n	8007fe8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007fbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007fc0:	3328      	adds	r3, #40	@ 0x28
 8007fc2:	2101      	movs	r1, #1
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	f002 f8bd 	bl	800a144 <RCCEx_PLL3_Config>
 8007fca:	4603      	mov	r3, r0
 8007fcc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007fd0:	e00a      	b.n	8007fe8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007fd2:	2301      	movs	r3, #1
 8007fd4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007fd8:	e006      	b.n	8007fe8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8007fda:	bf00      	nop
 8007fdc:	e004      	b.n	8007fe8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8007fde:	bf00      	nop
 8007fe0:	e002      	b.n	8007fe8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8007fe2:	bf00      	nop
 8007fe4:	e000      	b.n	8007fe8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8007fe6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007fe8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d10a      	bne.n	8008006 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007ff0:	4b38      	ldr	r3, [pc, #224]	@ (80080d4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007ff2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007ff4:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8007ff8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ffc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007ffe:	4a35      	ldr	r2, [pc, #212]	@ (80080d4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008000:	430b      	orrs	r3, r1
 8008002:	6513      	str	r3, [r2, #80]	@ 0x50
 8008004:	e003      	b.n	800800e <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008006:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800800a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800800e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008016:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800801a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800801e:	2300      	movs	r3, #0
 8008020:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008024:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8008028:	460b      	mov	r3, r1
 800802a:	4313      	orrs	r3, r2
 800802c:	d058      	beq.n	80080e0 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800802e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008032:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8008036:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800803a:	d033      	beq.n	80080a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800803c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008040:	d82c      	bhi.n	800809c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8008042:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008046:	d02f      	beq.n	80080a8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8008048:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800804c:	d826      	bhi.n	800809c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800804e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008052:	d02b      	beq.n	80080ac <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8008054:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008058:	d820      	bhi.n	800809c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800805a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800805e:	d012      	beq.n	8008086 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8008060:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008064:	d81a      	bhi.n	800809c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8008066:	2b00      	cmp	r3, #0
 8008068:	d022      	beq.n	80080b0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800806a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800806e:	d115      	bne.n	800809c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008070:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008074:	3308      	adds	r3, #8
 8008076:	2101      	movs	r1, #1
 8008078:	4618      	mov	r0, r3
 800807a:	f001 ffb1 	bl	8009fe0 <RCCEx_PLL2_Config>
 800807e:	4603      	mov	r3, r0
 8008080:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8008084:	e015      	b.n	80080b2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008086:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800808a:	3328      	adds	r3, #40	@ 0x28
 800808c:	2101      	movs	r1, #1
 800808e:	4618      	mov	r0, r3
 8008090:	f002 f858 	bl	800a144 <RCCEx_PLL3_Config>
 8008094:	4603      	mov	r3, r0
 8008096:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800809a:	e00a      	b.n	80080b2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800809c:	2301      	movs	r3, #1
 800809e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80080a2:	e006      	b.n	80080b2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80080a4:	bf00      	nop
 80080a6:	e004      	b.n	80080b2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80080a8:	bf00      	nop
 80080aa:	e002      	b.n	80080b2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80080ac:	bf00      	nop
 80080ae:	e000      	b.n	80080b2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80080b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80080b2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d10e      	bne.n	80080d8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80080ba:	4b06      	ldr	r3, [pc, #24]	@ (80080d4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80080bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80080be:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80080c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080c6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80080ca:	4a02      	ldr	r2, [pc, #8]	@ (80080d4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80080cc:	430b      	orrs	r3, r1
 80080ce:	6593      	str	r3, [r2, #88]	@ 0x58
 80080d0:	e006      	b.n	80080e0 <HAL_RCCEx_PeriphCLKConfig+0x604>
 80080d2:	bf00      	nop
 80080d4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080d8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80080dc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80080e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080e8:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80080ec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80080f0:	2300      	movs	r3, #0
 80080f2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80080f6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80080fa:	460b      	mov	r3, r1
 80080fc:	4313      	orrs	r3, r2
 80080fe:	d037      	beq.n	8008170 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8008100:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008104:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008106:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800810a:	d00e      	beq.n	800812a <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800810c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008110:	d816      	bhi.n	8008140 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8008112:	2b00      	cmp	r3, #0
 8008114:	d018      	beq.n	8008148 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8008116:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800811a:	d111      	bne.n	8008140 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800811c:	4bc4      	ldr	r3, [pc, #784]	@ (8008430 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800811e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008120:	4ac3      	ldr	r2, [pc, #780]	@ (8008430 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008122:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008126:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8008128:	e00f      	b.n	800814a <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800812a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800812e:	3308      	adds	r3, #8
 8008130:	2101      	movs	r1, #1
 8008132:	4618      	mov	r0, r3
 8008134:	f001 ff54 	bl	8009fe0 <RCCEx_PLL2_Config>
 8008138:	4603      	mov	r3, r0
 800813a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800813e:	e004      	b.n	800814a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008140:	2301      	movs	r3, #1
 8008142:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008146:	e000      	b.n	800814a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8008148:	bf00      	nop
    }

    if (ret == HAL_OK)
 800814a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800814e:	2b00      	cmp	r3, #0
 8008150:	d10a      	bne.n	8008168 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008152:	4bb7      	ldr	r3, [pc, #732]	@ (8008430 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008154:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008156:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800815a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800815e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008160:	4ab3      	ldr	r2, [pc, #716]	@ (8008430 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008162:	430b      	orrs	r3, r1
 8008164:	6513      	str	r3, [r2, #80]	@ 0x50
 8008166:	e003      	b.n	8008170 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008168:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800816c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8008170:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008178:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800817c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008180:	2300      	movs	r3, #0
 8008182:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008186:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800818a:	460b      	mov	r3, r1
 800818c:	4313      	orrs	r3, r2
 800818e:	d039      	beq.n	8008204 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8008190:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008194:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008196:	2b03      	cmp	r3, #3
 8008198:	d81c      	bhi.n	80081d4 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800819a:	a201      	add	r2, pc, #4	@ (adr r2, 80081a0 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800819c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081a0:	080081dd 	.word	0x080081dd
 80081a4:	080081b1 	.word	0x080081b1
 80081a8:	080081bf 	.word	0x080081bf
 80081ac:	080081dd 	.word	0x080081dd
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80081b0:	4b9f      	ldr	r3, [pc, #636]	@ (8008430 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80081b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081b4:	4a9e      	ldr	r2, [pc, #632]	@ (8008430 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80081b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80081ba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80081bc:	e00f      	b.n	80081de <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80081be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80081c2:	3308      	adds	r3, #8
 80081c4:	2102      	movs	r1, #2
 80081c6:	4618      	mov	r0, r3
 80081c8:	f001 ff0a 	bl	8009fe0 <RCCEx_PLL2_Config>
 80081cc:	4603      	mov	r3, r0
 80081ce:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 80081d2:	e004      	b.n	80081de <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80081d4:	2301      	movs	r3, #1
 80081d6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80081da:	e000      	b.n	80081de <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 80081dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80081de:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d10a      	bne.n	80081fc <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80081e6:	4b92      	ldr	r3, [pc, #584]	@ (8008430 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80081e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80081ea:	f023 0103 	bic.w	r1, r3, #3
 80081ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80081f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80081f4:	4a8e      	ldr	r2, [pc, #568]	@ (8008430 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80081f6:	430b      	orrs	r3, r1
 80081f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80081fa:	e003      	b.n	8008204 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081fc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008200:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008204:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800820c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8008210:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008214:	2300      	movs	r3, #0
 8008216:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800821a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800821e:	460b      	mov	r3, r1
 8008220:	4313      	orrs	r3, r2
 8008222:	f000 8099 	beq.w	8008358 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008226:	4b83      	ldr	r3, [pc, #524]	@ (8008434 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	4a82      	ldr	r2, [pc, #520]	@ (8008434 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800822c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008230:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008232:	f7fa f8f1 	bl	8002418 <HAL_GetTick>
 8008236:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800823a:	e00b      	b.n	8008254 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800823c:	f7fa f8ec 	bl	8002418 <HAL_GetTick>
 8008240:	4602      	mov	r2, r0
 8008242:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8008246:	1ad3      	subs	r3, r2, r3
 8008248:	2b64      	cmp	r3, #100	@ 0x64
 800824a:	d903      	bls.n	8008254 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800824c:	2303      	movs	r3, #3
 800824e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008252:	e005      	b.n	8008260 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008254:	4b77      	ldr	r3, [pc, #476]	@ (8008434 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800825c:	2b00      	cmp	r3, #0
 800825e:	d0ed      	beq.n	800823c <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8008260:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008264:	2b00      	cmp	r3, #0
 8008266:	d173      	bne.n	8008350 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8008268:	4b71      	ldr	r3, [pc, #452]	@ (8008430 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800826a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800826c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008270:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8008274:	4053      	eors	r3, r2
 8008276:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800827a:	2b00      	cmp	r3, #0
 800827c:	d015      	beq.n	80082aa <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800827e:	4b6c      	ldr	r3, [pc, #432]	@ (8008430 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008280:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008282:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008286:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800828a:	4b69      	ldr	r3, [pc, #420]	@ (8008430 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800828c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800828e:	4a68      	ldr	r2, [pc, #416]	@ (8008430 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008290:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008294:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008296:	4b66      	ldr	r3, [pc, #408]	@ (8008430 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008298:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800829a:	4a65      	ldr	r2, [pc, #404]	@ (8008430 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800829c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80082a0:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80082a2:	4a63      	ldr	r2, [pc, #396]	@ (8008430 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80082a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80082a8:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80082aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80082ae:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80082b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80082b6:	d118      	bne.n	80082ea <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80082b8:	f7fa f8ae 	bl	8002418 <HAL_GetTick>
 80082bc:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80082c0:	e00d      	b.n	80082de <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80082c2:	f7fa f8a9 	bl	8002418 <HAL_GetTick>
 80082c6:	4602      	mov	r2, r0
 80082c8:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80082cc:	1ad2      	subs	r2, r2, r3
 80082ce:	f241 3388 	movw	r3, #5000	@ 0x1388
 80082d2:	429a      	cmp	r2, r3
 80082d4:	d903      	bls.n	80082de <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 80082d6:	2303      	movs	r3, #3
 80082d8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 80082dc:	e005      	b.n	80082ea <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80082de:	4b54      	ldr	r3, [pc, #336]	@ (8008430 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80082e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80082e2:	f003 0302 	and.w	r3, r3, #2
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d0eb      	beq.n	80082c2 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 80082ea:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d129      	bne.n	8008346 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80082f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80082f6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80082fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80082fe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008302:	d10e      	bne.n	8008322 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8008304:	4b4a      	ldr	r3, [pc, #296]	@ (8008430 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008306:	691b      	ldr	r3, [r3, #16]
 8008308:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800830c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008310:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8008314:	091a      	lsrs	r2, r3, #4
 8008316:	4b48      	ldr	r3, [pc, #288]	@ (8008438 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8008318:	4013      	ands	r3, r2
 800831a:	4a45      	ldr	r2, [pc, #276]	@ (8008430 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800831c:	430b      	orrs	r3, r1
 800831e:	6113      	str	r3, [r2, #16]
 8008320:	e005      	b.n	800832e <HAL_RCCEx_PeriphCLKConfig+0x852>
 8008322:	4b43      	ldr	r3, [pc, #268]	@ (8008430 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008324:	691b      	ldr	r3, [r3, #16]
 8008326:	4a42      	ldr	r2, [pc, #264]	@ (8008430 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008328:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800832c:	6113      	str	r3, [r2, #16]
 800832e:	4b40      	ldr	r3, [pc, #256]	@ (8008430 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008330:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8008332:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008336:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800833a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800833e:	4a3c      	ldr	r2, [pc, #240]	@ (8008430 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008340:	430b      	orrs	r3, r1
 8008342:	6713      	str	r3, [r2, #112]	@ 0x70
 8008344:	e008      	b.n	8008358 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008346:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800834a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800834e:	e003      	b.n	8008358 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008350:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008354:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8008358:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800835c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008360:	f002 0301 	and.w	r3, r2, #1
 8008364:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008368:	2300      	movs	r3, #0
 800836a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800836e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8008372:	460b      	mov	r3, r1
 8008374:	4313      	orrs	r3, r2
 8008376:	f000 808f 	beq.w	8008498 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800837a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800837e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008380:	2b28      	cmp	r3, #40	@ 0x28
 8008382:	d871      	bhi.n	8008468 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8008384:	a201      	add	r2, pc, #4	@ (adr r2, 800838c <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8008386:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800838a:	bf00      	nop
 800838c:	08008471 	.word	0x08008471
 8008390:	08008469 	.word	0x08008469
 8008394:	08008469 	.word	0x08008469
 8008398:	08008469 	.word	0x08008469
 800839c:	08008469 	.word	0x08008469
 80083a0:	08008469 	.word	0x08008469
 80083a4:	08008469 	.word	0x08008469
 80083a8:	08008469 	.word	0x08008469
 80083ac:	0800843d 	.word	0x0800843d
 80083b0:	08008469 	.word	0x08008469
 80083b4:	08008469 	.word	0x08008469
 80083b8:	08008469 	.word	0x08008469
 80083bc:	08008469 	.word	0x08008469
 80083c0:	08008469 	.word	0x08008469
 80083c4:	08008469 	.word	0x08008469
 80083c8:	08008469 	.word	0x08008469
 80083cc:	08008453 	.word	0x08008453
 80083d0:	08008469 	.word	0x08008469
 80083d4:	08008469 	.word	0x08008469
 80083d8:	08008469 	.word	0x08008469
 80083dc:	08008469 	.word	0x08008469
 80083e0:	08008469 	.word	0x08008469
 80083e4:	08008469 	.word	0x08008469
 80083e8:	08008469 	.word	0x08008469
 80083ec:	08008471 	.word	0x08008471
 80083f0:	08008469 	.word	0x08008469
 80083f4:	08008469 	.word	0x08008469
 80083f8:	08008469 	.word	0x08008469
 80083fc:	08008469 	.word	0x08008469
 8008400:	08008469 	.word	0x08008469
 8008404:	08008469 	.word	0x08008469
 8008408:	08008469 	.word	0x08008469
 800840c:	08008471 	.word	0x08008471
 8008410:	08008469 	.word	0x08008469
 8008414:	08008469 	.word	0x08008469
 8008418:	08008469 	.word	0x08008469
 800841c:	08008469 	.word	0x08008469
 8008420:	08008469 	.word	0x08008469
 8008424:	08008469 	.word	0x08008469
 8008428:	08008469 	.word	0x08008469
 800842c:	08008471 	.word	0x08008471
 8008430:	58024400 	.word	0x58024400
 8008434:	58024800 	.word	0x58024800
 8008438:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800843c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008440:	3308      	adds	r3, #8
 8008442:	2101      	movs	r1, #1
 8008444:	4618      	mov	r0, r3
 8008446:	f001 fdcb 	bl	8009fe0 <RCCEx_PLL2_Config>
 800844a:	4603      	mov	r3, r0
 800844c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8008450:	e00f      	b.n	8008472 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008452:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008456:	3328      	adds	r3, #40	@ 0x28
 8008458:	2101      	movs	r1, #1
 800845a:	4618      	mov	r0, r3
 800845c:	f001 fe72 	bl	800a144 <RCCEx_PLL3_Config>
 8008460:	4603      	mov	r3, r0
 8008462:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8008466:	e004      	b.n	8008472 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008468:	2301      	movs	r3, #1
 800846a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800846e:	e000      	b.n	8008472 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8008470:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008472:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008476:	2b00      	cmp	r3, #0
 8008478:	d10a      	bne.n	8008490 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800847a:	4bbf      	ldr	r3, [pc, #764]	@ (8008778 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800847c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800847e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8008482:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008486:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008488:	4abb      	ldr	r2, [pc, #748]	@ (8008778 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800848a:	430b      	orrs	r3, r1
 800848c:	6553      	str	r3, [r2, #84]	@ 0x54
 800848e:	e003      	b.n	8008498 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008490:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008494:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8008498:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800849c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084a0:	f002 0302 	and.w	r3, r2, #2
 80084a4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80084a8:	2300      	movs	r3, #0
 80084aa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80084ae:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80084b2:	460b      	mov	r3, r1
 80084b4:	4313      	orrs	r3, r2
 80084b6:	d041      	beq.n	800853c <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80084b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80084bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80084be:	2b05      	cmp	r3, #5
 80084c0:	d824      	bhi.n	800850c <HAL_RCCEx_PeriphCLKConfig+0xa30>
 80084c2:	a201      	add	r2, pc, #4	@ (adr r2, 80084c8 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 80084c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084c8:	08008515 	.word	0x08008515
 80084cc:	080084e1 	.word	0x080084e1
 80084d0:	080084f7 	.word	0x080084f7
 80084d4:	08008515 	.word	0x08008515
 80084d8:	08008515 	.word	0x08008515
 80084dc:	08008515 	.word	0x08008515
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80084e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80084e4:	3308      	adds	r3, #8
 80084e6:	2101      	movs	r1, #1
 80084e8:	4618      	mov	r0, r3
 80084ea:	f001 fd79 	bl	8009fe0 <RCCEx_PLL2_Config>
 80084ee:	4603      	mov	r3, r0
 80084f0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80084f4:	e00f      	b.n	8008516 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80084f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80084fa:	3328      	adds	r3, #40	@ 0x28
 80084fc:	2101      	movs	r1, #1
 80084fe:	4618      	mov	r0, r3
 8008500:	f001 fe20 	bl	800a144 <RCCEx_PLL3_Config>
 8008504:	4603      	mov	r3, r0
 8008506:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800850a:	e004      	b.n	8008516 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800850c:	2301      	movs	r3, #1
 800850e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008512:	e000      	b.n	8008516 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8008514:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008516:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800851a:	2b00      	cmp	r3, #0
 800851c:	d10a      	bne.n	8008534 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800851e:	4b96      	ldr	r3, [pc, #600]	@ (8008778 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8008520:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008522:	f023 0107 	bic.w	r1, r3, #7
 8008526:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800852a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800852c:	4a92      	ldr	r2, [pc, #584]	@ (8008778 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800852e:	430b      	orrs	r3, r1
 8008530:	6553      	str	r3, [r2, #84]	@ 0x54
 8008532:	e003      	b.n	800853c <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008534:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008538:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800853c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008540:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008544:	f002 0304 	and.w	r3, r2, #4
 8008548:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800854c:	2300      	movs	r3, #0
 800854e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008552:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008556:	460b      	mov	r3, r1
 8008558:	4313      	orrs	r3, r2
 800855a:	d044      	beq.n	80085e6 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800855c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008560:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008564:	2b05      	cmp	r3, #5
 8008566:	d825      	bhi.n	80085b4 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8008568:	a201      	add	r2, pc, #4	@ (adr r2, 8008570 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800856a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800856e:	bf00      	nop
 8008570:	080085bd 	.word	0x080085bd
 8008574:	08008589 	.word	0x08008589
 8008578:	0800859f 	.word	0x0800859f
 800857c:	080085bd 	.word	0x080085bd
 8008580:	080085bd 	.word	0x080085bd
 8008584:	080085bd 	.word	0x080085bd
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008588:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800858c:	3308      	adds	r3, #8
 800858e:	2101      	movs	r1, #1
 8008590:	4618      	mov	r0, r3
 8008592:	f001 fd25 	bl	8009fe0 <RCCEx_PLL2_Config>
 8008596:	4603      	mov	r3, r0
 8008598:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800859c:	e00f      	b.n	80085be <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800859e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80085a2:	3328      	adds	r3, #40	@ 0x28
 80085a4:	2101      	movs	r1, #1
 80085a6:	4618      	mov	r0, r3
 80085a8:	f001 fdcc 	bl	800a144 <RCCEx_PLL3_Config>
 80085ac:	4603      	mov	r3, r0
 80085ae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80085b2:	e004      	b.n	80085be <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80085b4:	2301      	movs	r3, #1
 80085b6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80085ba:	e000      	b.n	80085be <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 80085bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80085be:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d10b      	bne.n	80085de <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80085c6:	4b6c      	ldr	r3, [pc, #432]	@ (8008778 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80085c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80085ca:	f023 0107 	bic.w	r1, r3, #7
 80085ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80085d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80085d6:	4a68      	ldr	r2, [pc, #416]	@ (8008778 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80085d8:	430b      	orrs	r3, r1
 80085da:	6593      	str	r3, [r2, #88]	@ 0x58
 80085dc:	e003      	b.n	80085e6 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085de:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80085e2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80085e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80085ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085ee:	f002 0320 	and.w	r3, r2, #32
 80085f2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80085f6:	2300      	movs	r3, #0
 80085f8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80085fc:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8008600:	460b      	mov	r3, r1
 8008602:	4313      	orrs	r3, r2
 8008604:	d055      	beq.n	80086b2 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8008606:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800860a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800860e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008612:	d033      	beq.n	800867c <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8008614:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008618:	d82c      	bhi.n	8008674 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800861a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800861e:	d02f      	beq.n	8008680 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8008620:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008624:	d826      	bhi.n	8008674 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8008626:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800862a:	d02b      	beq.n	8008684 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800862c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008630:	d820      	bhi.n	8008674 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8008632:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008636:	d012      	beq.n	800865e <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8008638:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800863c:	d81a      	bhi.n	8008674 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800863e:	2b00      	cmp	r3, #0
 8008640:	d022      	beq.n	8008688 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8008642:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008646:	d115      	bne.n	8008674 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008648:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800864c:	3308      	adds	r3, #8
 800864e:	2100      	movs	r1, #0
 8008650:	4618      	mov	r0, r3
 8008652:	f001 fcc5 	bl	8009fe0 <RCCEx_PLL2_Config>
 8008656:	4603      	mov	r3, r0
 8008658:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800865c:	e015      	b.n	800868a <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800865e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008662:	3328      	adds	r3, #40	@ 0x28
 8008664:	2102      	movs	r1, #2
 8008666:	4618      	mov	r0, r3
 8008668:	f001 fd6c 	bl	800a144 <RCCEx_PLL3_Config>
 800866c:	4603      	mov	r3, r0
 800866e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008672:	e00a      	b.n	800868a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008674:	2301      	movs	r3, #1
 8008676:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800867a:	e006      	b.n	800868a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800867c:	bf00      	nop
 800867e:	e004      	b.n	800868a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8008680:	bf00      	nop
 8008682:	e002      	b.n	800868a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8008684:	bf00      	nop
 8008686:	e000      	b.n	800868a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8008688:	bf00      	nop
    }

    if (ret == HAL_OK)
 800868a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800868e:	2b00      	cmp	r3, #0
 8008690:	d10b      	bne.n	80086aa <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008692:	4b39      	ldr	r3, [pc, #228]	@ (8008778 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8008694:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008696:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800869a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800869e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80086a2:	4a35      	ldr	r2, [pc, #212]	@ (8008778 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80086a4:	430b      	orrs	r3, r1
 80086a6:	6553      	str	r3, [r2, #84]	@ 0x54
 80086a8:	e003      	b.n	80086b2 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80086aa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80086ae:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80086b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80086b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086ba:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80086be:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80086c2:	2300      	movs	r3, #0
 80086c4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80086c8:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80086cc:	460b      	mov	r3, r1
 80086ce:	4313      	orrs	r3, r2
 80086d0:	d058      	beq.n	8008784 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80086d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80086d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80086da:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80086de:	d033      	beq.n	8008748 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 80086e0:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80086e4:	d82c      	bhi.n	8008740 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80086e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80086ea:	d02f      	beq.n	800874c <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80086ec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80086f0:	d826      	bhi.n	8008740 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80086f2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80086f6:	d02b      	beq.n	8008750 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 80086f8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80086fc:	d820      	bhi.n	8008740 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80086fe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008702:	d012      	beq.n	800872a <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8008704:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008708:	d81a      	bhi.n	8008740 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800870a:	2b00      	cmp	r3, #0
 800870c:	d022      	beq.n	8008754 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800870e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008712:	d115      	bne.n	8008740 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008714:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008718:	3308      	adds	r3, #8
 800871a:	2100      	movs	r1, #0
 800871c:	4618      	mov	r0, r3
 800871e:	f001 fc5f 	bl	8009fe0 <RCCEx_PLL2_Config>
 8008722:	4603      	mov	r3, r0
 8008724:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008728:	e015      	b.n	8008756 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800872a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800872e:	3328      	adds	r3, #40	@ 0x28
 8008730:	2102      	movs	r1, #2
 8008732:	4618      	mov	r0, r3
 8008734:	f001 fd06 	bl	800a144 <RCCEx_PLL3_Config>
 8008738:	4603      	mov	r3, r0
 800873a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800873e:	e00a      	b.n	8008756 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008740:	2301      	movs	r3, #1
 8008742:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008746:	e006      	b.n	8008756 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8008748:	bf00      	nop
 800874a:	e004      	b.n	8008756 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800874c:	bf00      	nop
 800874e:	e002      	b.n	8008756 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8008750:	bf00      	nop
 8008752:	e000      	b.n	8008756 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8008754:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008756:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800875a:	2b00      	cmp	r3, #0
 800875c:	d10e      	bne.n	800877c <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800875e:	4b06      	ldr	r3, [pc, #24]	@ (8008778 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8008760:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008762:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8008766:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800876a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800876e:	4a02      	ldr	r2, [pc, #8]	@ (8008778 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8008770:	430b      	orrs	r3, r1
 8008772:	6593      	str	r3, [r2, #88]	@ 0x58
 8008774:	e006      	b.n	8008784 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8008776:	bf00      	nop
 8008778:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800877c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008780:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008784:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800878c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8008790:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008794:	2300      	movs	r3, #0
 8008796:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800879a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800879e:	460b      	mov	r3, r1
 80087a0:	4313      	orrs	r3, r2
 80087a2:	d055      	beq.n	8008850 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80087a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80087a8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80087ac:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80087b0:	d033      	beq.n	800881a <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 80087b2:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80087b6:	d82c      	bhi.n	8008812 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80087b8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80087bc:	d02f      	beq.n	800881e <HAL_RCCEx_PeriphCLKConfig+0xd42>
 80087be:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80087c2:	d826      	bhi.n	8008812 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80087c4:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80087c8:	d02b      	beq.n	8008822 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 80087ca:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80087ce:	d820      	bhi.n	8008812 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80087d0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80087d4:	d012      	beq.n	80087fc <HAL_RCCEx_PeriphCLKConfig+0xd20>
 80087d6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80087da:	d81a      	bhi.n	8008812 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d022      	beq.n	8008826 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 80087e0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80087e4:	d115      	bne.n	8008812 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80087e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80087ea:	3308      	adds	r3, #8
 80087ec:	2100      	movs	r1, #0
 80087ee:	4618      	mov	r0, r3
 80087f0:	f001 fbf6 	bl	8009fe0 <RCCEx_PLL2_Config>
 80087f4:	4603      	mov	r3, r0
 80087f6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80087fa:	e015      	b.n	8008828 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80087fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008800:	3328      	adds	r3, #40	@ 0x28
 8008802:	2102      	movs	r1, #2
 8008804:	4618      	mov	r0, r3
 8008806:	f001 fc9d 	bl	800a144 <RCCEx_PLL3_Config>
 800880a:	4603      	mov	r3, r0
 800880c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8008810:	e00a      	b.n	8008828 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008812:	2301      	movs	r3, #1
 8008814:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008818:	e006      	b.n	8008828 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800881a:	bf00      	nop
 800881c:	e004      	b.n	8008828 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800881e:	bf00      	nop
 8008820:	e002      	b.n	8008828 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8008822:	bf00      	nop
 8008824:	e000      	b.n	8008828 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8008826:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008828:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800882c:	2b00      	cmp	r3, #0
 800882e:	d10b      	bne.n	8008848 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008830:	4ba0      	ldr	r3, [pc, #640]	@ (8008ab4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008832:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008834:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8008838:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800883c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008840:	4a9c      	ldr	r2, [pc, #624]	@ (8008ab4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008842:	430b      	orrs	r3, r1
 8008844:	6593      	str	r3, [r2, #88]	@ 0x58
 8008846:	e003      	b.n	8008850 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008848:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800884c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8008850:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008854:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008858:	f002 0308 	and.w	r3, r2, #8
 800885c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008860:	2300      	movs	r3, #0
 8008862:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008866:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800886a:	460b      	mov	r3, r1
 800886c:	4313      	orrs	r3, r2
 800886e:	d01e      	beq.n	80088ae <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8008870:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008874:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008878:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800887c:	d10c      	bne.n	8008898 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800887e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008882:	3328      	adds	r3, #40	@ 0x28
 8008884:	2102      	movs	r1, #2
 8008886:	4618      	mov	r0, r3
 8008888:	f001 fc5c 	bl	800a144 <RCCEx_PLL3_Config>
 800888c:	4603      	mov	r3, r0
 800888e:	2b00      	cmp	r3, #0
 8008890:	d002      	beq.n	8008898 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8008892:	2301      	movs	r3, #1
 8008894:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8008898:	4b86      	ldr	r3, [pc, #536]	@ (8008ab4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800889a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800889c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80088a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80088a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80088a8:	4a82      	ldr	r2, [pc, #520]	@ (8008ab4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80088aa:	430b      	orrs	r3, r1
 80088ac:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80088ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80088b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088b6:	f002 0310 	and.w	r3, r2, #16
 80088ba:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80088be:	2300      	movs	r3, #0
 80088c0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80088c4:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80088c8:	460b      	mov	r3, r1
 80088ca:	4313      	orrs	r3, r2
 80088cc:	d01e      	beq.n	800890c <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80088ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80088d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80088d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80088da:	d10c      	bne.n	80088f6 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80088dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80088e0:	3328      	adds	r3, #40	@ 0x28
 80088e2:	2102      	movs	r1, #2
 80088e4:	4618      	mov	r0, r3
 80088e6:	f001 fc2d 	bl	800a144 <RCCEx_PLL3_Config>
 80088ea:	4603      	mov	r3, r0
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d002      	beq.n	80088f6 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 80088f0:	2301      	movs	r3, #1
 80088f2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80088f6:	4b6f      	ldr	r3, [pc, #444]	@ (8008ab4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80088f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80088fa:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80088fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008902:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008906:	4a6b      	ldr	r2, [pc, #428]	@ (8008ab4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008908:	430b      	orrs	r3, r1
 800890a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800890c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008914:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8008918:	67bb      	str	r3, [r7, #120]	@ 0x78
 800891a:	2300      	movs	r3, #0
 800891c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800891e:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8008922:	460b      	mov	r3, r1
 8008924:	4313      	orrs	r3, r2
 8008926:	d03e      	beq.n	80089a6 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8008928:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800892c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008930:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008934:	d022      	beq.n	800897c <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8008936:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800893a:	d81b      	bhi.n	8008974 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800893c:	2b00      	cmp	r3, #0
 800893e:	d003      	beq.n	8008948 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8008940:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008944:	d00b      	beq.n	800895e <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8008946:	e015      	b.n	8008974 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008948:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800894c:	3308      	adds	r3, #8
 800894e:	2100      	movs	r1, #0
 8008950:	4618      	mov	r0, r3
 8008952:	f001 fb45 	bl	8009fe0 <RCCEx_PLL2_Config>
 8008956:	4603      	mov	r3, r0
 8008958:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800895c:	e00f      	b.n	800897e <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800895e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008962:	3328      	adds	r3, #40	@ 0x28
 8008964:	2102      	movs	r1, #2
 8008966:	4618      	mov	r0, r3
 8008968:	f001 fbec 	bl	800a144 <RCCEx_PLL3_Config>
 800896c:	4603      	mov	r3, r0
 800896e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008972:	e004      	b.n	800897e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008974:	2301      	movs	r3, #1
 8008976:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800897a:	e000      	b.n	800897e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800897c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800897e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008982:	2b00      	cmp	r3, #0
 8008984:	d10b      	bne.n	800899e <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008986:	4b4b      	ldr	r3, [pc, #300]	@ (8008ab4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008988:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800898a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800898e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008992:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008996:	4a47      	ldr	r2, [pc, #284]	@ (8008ab4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008998:	430b      	orrs	r3, r1
 800899a:	6593      	str	r3, [r2, #88]	@ 0x58
 800899c:	e003      	b.n	80089a6 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800899e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80089a2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80089a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80089aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089ae:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80089b2:	673b      	str	r3, [r7, #112]	@ 0x70
 80089b4:	2300      	movs	r3, #0
 80089b6:	677b      	str	r3, [r7, #116]	@ 0x74
 80089b8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80089bc:	460b      	mov	r3, r1
 80089be:	4313      	orrs	r3, r2
 80089c0:	d03b      	beq.n	8008a3a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80089c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80089c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80089ca:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80089ce:	d01f      	beq.n	8008a10 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 80089d0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80089d4:	d818      	bhi.n	8008a08 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 80089d6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80089da:	d003      	beq.n	80089e4 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 80089dc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80089e0:	d007      	beq.n	80089f2 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 80089e2:	e011      	b.n	8008a08 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80089e4:	4b33      	ldr	r3, [pc, #204]	@ (8008ab4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80089e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089e8:	4a32      	ldr	r2, [pc, #200]	@ (8008ab4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80089ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80089ee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80089f0:	e00f      	b.n	8008a12 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80089f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80089f6:	3328      	adds	r3, #40	@ 0x28
 80089f8:	2101      	movs	r1, #1
 80089fa:	4618      	mov	r0, r3
 80089fc:	f001 fba2 	bl	800a144 <RCCEx_PLL3_Config>
 8008a00:	4603      	mov	r3, r0
 8008a02:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8008a06:	e004      	b.n	8008a12 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008a08:	2301      	movs	r3, #1
 8008a0a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008a0e:	e000      	b.n	8008a12 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8008a10:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008a12:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d10b      	bne.n	8008a32 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008a1a:	4b26      	ldr	r3, [pc, #152]	@ (8008ab4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008a1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008a1e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8008a22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a26:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008a2a:	4a22      	ldr	r2, [pc, #136]	@ (8008ab4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008a2c:	430b      	orrs	r3, r1
 8008a2e:	6553      	str	r3, [r2, #84]	@ 0x54
 8008a30:	e003      	b.n	8008a3a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a32:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008a36:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8008a3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a42:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8008a46:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008a48:	2300      	movs	r3, #0
 8008a4a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008a4c:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8008a50:	460b      	mov	r3, r1
 8008a52:	4313      	orrs	r3, r2
 8008a54:	d034      	beq.n	8008ac0 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8008a56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d003      	beq.n	8008a68 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8008a60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008a64:	d007      	beq.n	8008a76 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8008a66:	e011      	b.n	8008a8c <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008a68:	4b12      	ldr	r3, [pc, #72]	@ (8008ab4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008a6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a6c:	4a11      	ldr	r2, [pc, #68]	@ (8008ab4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008a6e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008a72:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008a74:	e00e      	b.n	8008a94 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008a76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a7a:	3308      	adds	r3, #8
 8008a7c:	2102      	movs	r1, #2
 8008a7e:	4618      	mov	r0, r3
 8008a80:	f001 faae 	bl	8009fe0 <RCCEx_PLL2_Config>
 8008a84:	4603      	mov	r3, r0
 8008a86:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008a8a:	e003      	b.n	8008a94 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8008a8c:	2301      	movs	r3, #1
 8008a8e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008a92:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008a94:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d10d      	bne.n	8008ab8 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008a9c:	4b05      	ldr	r3, [pc, #20]	@ (8008ab4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008a9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008aa0:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008aa4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008aa8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008aaa:	4a02      	ldr	r2, [pc, #8]	@ (8008ab4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008aac:	430b      	orrs	r3, r1
 8008aae:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008ab0:	e006      	b.n	8008ac0 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8008ab2:	bf00      	nop
 8008ab4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ab8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008abc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008ac0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ac8:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8008acc:	663b      	str	r3, [r7, #96]	@ 0x60
 8008ace:	2300      	movs	r3, #0
 8008ad0:	667b      	str	r3, [r7, #100]	@ 0x64
 8008ad2:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8008ad6:	460b      	mov	r3, r1
 8008ad8:	4313      	orrs	r3, r2
 8008ada:	d00c      	beq.n	8008af6 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008adc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ae0:	3328      	adds	r3, #40	@ 0x28
 8008ae2:	2102      	movs	r1, #2
 8008ae4:	4618      	mov	r0, r3
 8008ae6:	f001 fb2d 	bl	800a144 <RCCEx_PLL3_Config>
 8008aea:	4603      	mov	r3, r0
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d002      	beq.n	8008af6 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8008af0:	2301      	movs	r3, #1
 8008af2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008af6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008afa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008afe:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8008b02:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008b04:	2300      	movs	r3, #0
 8008b06:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008b08:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8008b0c:	460b      	mov	r3, r1
 8008b0e:	4313      	orrs	r3, r2
 8008b10:	d036      	beq.n	8008b80 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8008b12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b16:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008b18:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008b1c:	d018      	beq.n	8008b50 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8008b1e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008b22:	d811      	bhi.n	8008b48 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8008b24:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008b28:	d014      	beq.n	8008b54 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8008b2a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008b2e:	d80b      	bhi.n	8008b48 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d011      	beq.n	8008b58 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8008b34:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008b38:	d106      	bne.n	8008b48 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008b3a:	4bb7      	ldr	r3, [pc, #732]	@ (8008e18 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008b3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b3e:	4ab6      	ldr	r2, [pc, #728]	@ (8008e18 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008b40:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008b44:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8008b46:	e008      	b.n	8008b5a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008b48:	2301      	movs	r3, #1
 8008b4a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008b4e:	e004      	b.n	8008b5a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8008b50:	bf00      	nop
 8008b52:	e002      	b.n	8008b5a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8008b54:	bf00      	nop
 8008b56:	e000      	b.n	8008b5a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8008b58:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008b5a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d10a      	bne.n	8008b78 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008b62:	4bad      	ldr	r3, [pc, #692]	@ (8008e18 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008b64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008b66:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008b6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b6e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008b70:	4aa9      	ldr	r2, [pc, #676]	@ (8008e18 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008b72:	430b      	orrs	r3, r1
 8008b74:	6553      	str	r3, [r2, #84]	@ 0x54
 8008b76:	e003      	b.n	8008b80 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b78:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008b7c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008b80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b88:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8008b8c:	653b      	str	r3, [r7, #80]	@ 0x50
 8008b8e:	2300      	movs	r3, #0
 8008b90:	657b      	str	r3, [r7, #84]	@ 0x54
 8008b92:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8008b96:	460b      	mov	r3, r1
 8008b98:	4313      	orrs	r3, r2
 8008b9a:	d009      	beq.n	8008bb0 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008b9c:	4b9e      	ldr	r3, [pc, #632]	@ (8008e18 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008b9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008ba0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8008ba4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ba8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008baa:	4a9b      	ldr	r2, [pc, #620]	@ (8008e18 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008bac:	430b      	orrs	r3, r1
 8008bae:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008bb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008bb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bb8:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8008bbc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008bbe:	2300      	movs	r3, #0
 8008bc0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008bc2:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8008bc6:	460b      	mov	r3, r1
 8008bc8:	4313      	orrs	r3, r2
 8008bca:	d009      	beq.n	8008be0 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008bcc:	4b92      	ldr	r3, [pc, #584]	@ (8008e18 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008bce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008bd0:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8008bd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008bd8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008bda:	4a8f      	ldr	r2, [pc, #572]	@ (8008e18 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008bdc:	430b      	orrs	r3, r1
 8008bde:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008be0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008be8:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8008bec:	643b      	str	r3, [r7, #64]	@ 0x40
 8008bee:	2300      	movs	r3, #0
 8008bf0:	647b      	str	r3, [r7, #68]	@ 0x44
 8008bf2:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8008bf6:	460b      	mov	r3, r1
 8008bf8:	4313      	orrs	r3, r2
 8008bfa:	d00e      	beq.n	8008c1a <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008bfc:	4b86      	ldr	r3, [pc, #536]	@ (8008e18 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008bfe:	691b      	ldr	r3, [r3, #16]
 8008c00:	4a85      	ldr	r2, [pc, #532]	@ (8008e18 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008c02:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008c06:	6113      	str	r3, [r2, #16]
 8008c08:	4b83      	ldr	r3, [pc, #524]	@ (8008e18 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008c0a:	6919      	ldr	r1, [r3, #16]
 8008c0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c10:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008c14:	4a80      	ldr	r2, [pc, #512]	@ (8008e18 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008c16:	430b      	orrs	r3, r1
 8008c18:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008c1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c22:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8008c26:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008c28:	2300      	movs	r3, #0
 8008c2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008c2c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8008c30:	460b      	mov	r3, r1
 8008c32:	4313      	orrs	r3, r2
 8008c34:	d009      	beq.n	8008c4a <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008c36:	4b78      	ldr	r3, [pc, #480]	@ (8008e18 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008c38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008c3a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8008c3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c44:	4a74      	ldr	r2, [pc, #464]	@ (8008e18 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008c46:	430b      	orrs	r3, r1
 8008c48:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008c4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c52:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8008c56:	633b      	str	r3, [r7, #48]	@ 0x30
 8008c58:	2300      	movs	r3, #0
 8008c5a:	637b      	str	r3, [r7, #52]	@ 0x34
 8008c5c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8008c60:	460b      	mov	r3, r1
 8008c62:	4313      	orrs	r3, r2
 8008c64:	d00a      	beq.n	8008c7c <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008c66:	4b6c      	ldr	r3, [pc, #432]	@ (8008e18 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008c68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c6a:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8008c6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008c76:	4a68      	ldr	r2, [pc, #416]	@ (8008e18 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008c78:	430b      	orrs	r3, r1
 8008c7a:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8008c7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c84:	2100      	movs	r1, #0
 8008c86:	62b9      	str	r1, [r7, #40]	@ 0x28
 8008c88:	f003 0301 	and.w	r3, r3, #1
 8008c8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008c8e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8008c92:	460b      	mov	r3, r1
 8008c94:	4313      	orrs	r3, r2
 8008c96:	d011      	beq.n	8008cbc <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008c98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c9c:	3308      	adds	r3, #8
 8008c9e:	2100      	movs	r1, #0
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	f001 f99d 	bl	8009fe0 <RCCEx_PLL2_Config>
 8008ca6:	4603      	mov	r3, r0
 8008ca8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8008cac:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d003      	beq.n	8008cbc <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008cb4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008cb8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8008cbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008cc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cc4:	2100      	movs	r1, #0
 8008cc6:	6239      	str	r1, [r7, #32]
 8008cc8:	f003 0302 	and.w	r3, r3, #2
 8008ccc:	627b      	str	r3, [r7, #36]	@ 0x24
 8008cce:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8008cd2:	460b      	mov	r3, r1
 8008cd4:	4313      	orrs	r3, r2
 8008cd6:	d011      	beq.n	8008cfc <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008cd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008cdc:	3308      	adds	r3, #8
 8008cde:	2101      	movs	r1, #1
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	f001 f97d 	bl	8009fe0 <RCCEx_PLL2_Config>
 8008ce6:	4603      	mov	r3, r0
 8008ce8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8008cec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d003      	beq.n	8008cfc <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008cf4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008cf8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8008cfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d04:	2100      	movs	r1, #0
 8008d06:	61b9      	str	r1, [r7, #24]
 8008d08:	f003 0304 	and.w	r3, r3, #4
 8008d0c:	61fb      	str	r3, [r7, #28]
 8008d0e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8008d12:	460b      	mov	r3, r1
 8008d14:	4313      	orrs	r3, r2
 8008d16:	d011      	beq.n	8008d3c <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008d18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d1c:	3308      	adds	r3, #8
 8008d1e:	2102      	movs	r1, #2
 8008d20:	4618      	mov	r0, r3
 8008d22:	f001 f95d 	bl	8009fe0 <RCCEx_PLL2_Config>
 8008d26:	4603      	mov	r3, r0
 8008d28:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8008d2c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d003      	beq.n	8008d3c <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d34:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008d38:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8008d3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d44:	2100      	movs	r1, #0
 8008d46:	6139      	str	r1, [r7, #16]
 8008d48:	f003 0308 	and.w	r3, r3, #8
 8008d4c:	617b      	str	r3, [r7, #20]
 8008d4e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8008d52:	460b      	mov	r3, r1
 8008d54:	4313      	orrs	r3, r2
 8008d56:	d011      	beq.n	8008d7c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008d58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d5c:	3328      	adds	r3, #40	@ 0x28
 8008d5e:	2100      	movs	r1, #0
 8008d60:	4618      	mov	r0, r3
 8008d62:	f001 f9ef 	bl	800a144 <RCCEx_PLL3_Config>
 8008d66:	4603      	mov	r3, r0
 8008d68:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8008d6c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d003      	beq.n	8008d7c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d74:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008d78:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8008d7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d84:	2100      	movs	r1, #0
 8008d86:	60b9      	str	r1, [r7, #8]
 8008d88:	f003 0310 	and.w	r3, r3, #16
 8008d8c:	60fb      	str	r3, [r7, #12]
 8008d8e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8008d92:	460b      	mov	r3, r1
 8008d94:	4313      	orrs	r3, r2
 8008d96:	d011      	beq.n	8008dbc <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008d98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d9c:	3328      	adds	r3, #40	@ 0x28
 8008d9e:	2101      	movs	r1, #1
 8008da0:	4618      	mov	r0, r3
 8008da2:	f001 f9cf 	bl	800a144 <RCCEx_PLL3_Config>
 8008da6:	4603      	mov	r3, r0
 8008da8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8008dac:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d003      	beq.n	8008dbc <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008db4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008db8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8008dbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dc4:	2100      	movs	r1, #0
 8008dc6:	6039      	str	r1, [r7, #0]
 8008dc8:	f003 0320 	and.w	r3, r3, #32
 8008dcc:	607b      	str	r3, [r7, #4]
 8008dce:	e9d7 1200 	ldrd	r1, r2, [r7]
 8008dd2:	460b      	mov	r3, r1
 8008dd4:	4313      	orrs	r3, r2
 8008dd6:	d011      	beq.n	8008dfc <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008dd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ddc:	3328      	adds	r3, #40	@ 0x28
 8008dde:	2102      	movs	r1, #2
 8008de0:	4618      	mov	r0, r3
 8008de2:	f001 f9af 	bl	800a144 <RCCEx_PLL3_Config>
 8008de6:	4603      	mov	r3, r0
 8008de8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8008dec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d003      	beq.n	8008dfc <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008df4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008df8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 8008dfc:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d101      	bne.n	8008e08 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8008e04:	2300      	movs	r3, #0
 8008e06:	e000      	b.n	8008e0a <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8008e08:	2301      	movs	r3, #1
}
 8008e0a:	4618      	mov	r0, r3
 8008e0c:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8008e10:	46bd      	mov	sp, r7
 8008e12:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008e16:	bf00      	nop
 8008e18:	58024400 	.word	0x58024400

08008e1c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8008e1c:	b580      	push	{r7, lr}
 8008e1e:	b090      	sub	sp, #64	@ 0x40
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8008e26:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008e2a:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8008e2e:	430b      	orrs	r3, r1
 8008e30:	f040 8094 	bne.w	8008f5c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8008e34:	4b9b      	ldr	r3, [pc, #620]	@ (80090a4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008e36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008e38:	f003 0307 	and.w	r3, r3, #7
 8008e3c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8008e3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e40:	2b04      	cmp	r3, #4
 8008e42:	f200 8087 	bhi.w	8008f54 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8008e46:	a201      	add	r2, pc, #4	@ (adr r2, 8008e4c <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8008e48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e4c:	08008e61 	.word	0x08008e61
 8008e50:	08008e89 	.word	0x08008e89
 8008e54:	08008eb1 	.word	0x08008eb1
 8008e58:	08008f4d 	.word	0x08008f4d
 8008e5c:	08008ed9 	.word	0x08008ed9
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008e60:	4b90      	ldr	r3, [pc, #576]	@ (80090a4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008e68:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008e6c:	d108      	bne.n	8008e80 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008e6e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008e72:	4618      	mov	r0, r3
 8008e74:	f000 ff62 	bl	8009d3c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008e78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008e7c:	f000 bc93 	b.w	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008e80:	2300      	movs	r3, #0
 8008e82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008e84:	f000 bc8f 	b.w	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008e88:	4b86      	ldr	r3, [pc, #536]	@ (80090a4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008e90:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008e94:	d108      	bne.n	8008ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008e96:	f107 0318 	add.w	r3, r7, #24
 8008e9a:	4618      	mov	r0, r3
 8008e9c:	f000 fca6 	bl	80097ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008ea0:	69bb      	ldr	r3, [r7, #24]
 8008ea2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008ea4:	f000 bc7f 	b.w	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008ea8:	2300      	movs	r3, #0
 8008eaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008eac:	f000 bc7b 	b.w	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008eb0:	4b7c      	ldr	r3, [pc, #496]	@ (80090a4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008eb8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008ebc:	d108      	bne.n	8008ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008ebe:	f107 030c 	add.w	r3, r7, #12
 8008ec2:	4618      	mov	r0, r3
 8008ec4:	f000 fde6 	bl	8009a94 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008ecc:	f000 bc6b 	b.w	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008ed0:	2300      	movs	r3, #0
 8008ed2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ed4:	f000 bc67 	b.w	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008ed8:	4b72      	ldr	r3, [pc, #456]	@ (80090a4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008eda:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008edc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008ee0:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008ee2:	4b70      	ldr	r3, [pc, #448]	@ (80090a4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	f003 0304 	and.w	r3, r3, #4
 8008eea:	2b04      	cmp	r3, #4
 8008eec:	d10c      	bne.n	8008f08 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8008eee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d109      	bne.n	8008f08 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008ef4:	4b6b      	ldr	r3, [pc, #428]	@ (80090a4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	08db      	lsrs	r3, r3, #3
 8008efa:	f003 0303 	and.w	r3, r3, #3
 8008efe:	4a6a      	ldr	r2, [pc, #424]	@ (80090a8 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8008f00:	fa22 f303 	lsr.w	r3, r2, r3
 8008f04:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008f06:	e01f      	b.n	8008f48 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008f08:	4b66      	ldr	r3, [pc, #408]	@ (80090a4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008f10:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008f14:	d106      	bne.n	8008f24 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8008f16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f18:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008f1c:	d102      	bne.n	8008f24 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008f1e:	4b63      	ldr	r3, [pc, #396]	@ (80090ac <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8008f20:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008f22:	e011      	b.n	8008f48 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008f24:	4b5f      	ldr	r3, [pc, #380]	@ (80090a4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008f2c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008f30:	d106      	bne.n	8008f40 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8008f32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f34:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008f38:	d102      	bne.n	8008f40 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008f3a:	4b5d      	ldr	r3, [pc, #372]	@ (80090b0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008f3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008f3e:	e003      	b.n	8008f48 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008f40:	2300      	movs	r3, #0
 8008f42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008f44:	f000 bc2f 	b.w	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008f48:	f000 bc2d 	b.w	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008f4c:	4b59      	ldr	r3, [pc, #356]	@ (80090b4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008f4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f50:	f000 bc29 	b.w	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8008f54:	2300      	movs	r3, #0
 8008f56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f58:	f000 bc25 	b.w	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8008f5c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008f60:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8008f64:	430b      	orrs	r3, r1
 8008f66:	f040 80a7 	bne.w	80090b8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8008f6a:	4b4e      	ldr	r3, [pc, #312]	@ (80090a4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008f6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008f6e:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8008f72:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8008f74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f76:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008f7a:	d054      	beq.n	8009026 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 8008f7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f7e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008f82:	f200 808b 	bhi.w	800909c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8008f86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f88:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008f8c:	f000 8083 	beq.w	8009096 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 8008f90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f92:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008f96:	f200 8081 	bhi.w	800909c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8008f9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f9c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008fa0:	d02f      	beq.n	8009002 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8008fa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fa4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008fa8:	d878      	bhi.n	800909c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8008faa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d004      	beq.n	8008fba <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 8008fb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fb2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008fb6:	d012      	beq.n	8008fde <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 8008fb8:	e070      	b.n	800909c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008fba:	4b3a      	ldr	r3, [pc, #232]	@ (80090a4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008fc2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008fc6:	d107      	bne.n	8008fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008fc8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008fcc:	4618      	mov	r0, r3
 8008fce:	f000 feb5 	bl	8009d3c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008fd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008fd6:	e3e6      	b.n	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008fd8:	2300      	movs	r3, #0
 8008fda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008fdc:	e3e3      	b.n	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008fde:	4b31      	ldr	r3, [pc, #196]	@ (80090a4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008fe6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008fea:	d107      	bne.n	8008ffc <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008fec:	f107 0318 	add.w	r3, r7, #24
 8008ff0:	4618      	mov	r0, r3
 8008ff2:	f000 fbfb 	bl	80097ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008ff6:	69bb      	ldr	r3, [r7, #24]
 8008ff8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008ffa:	e3d4      	b.n	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008ffc:	2300      	movs	r3, #0
 8008ffe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009000:	e3d1      	b.n	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009002:	4b28      	ldr	r3, [pc, #160]	@ (80090a4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800900a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800900e:	d107      	bne.n	8009020 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009010:	f107 030c 	add.w	r3, r7, #12
 8009014:	4618      	mov	r0, r3
 8009016:	f000 fd3d 	bl	8009a94 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800901e:	e3c2      	b.n	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009020:	2300      	movs	r3, #0
 8009022:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009024:	e3bf      	b.n	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009026:	4b1f      	ldr	r3, [pc, #124]	@ (80090a4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009028:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800902a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800902e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009030:	4b1c      	ldr	r3, [pc, #112]	@ (80090a4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	f003 0304 	and.w	r3, r3, #4
 8009038:	2b04      	cmp	r3, #4
 800903a:	d10c      	bne.n	8009056 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 800903c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800903e:	2b00      	cmp	r3, #0
 8009040:	d109      	bne.n	8009056 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009042:	4b18      	ldr	r3, [pc, #96]	@ (80090a4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	08db      	lsrs	r3, r3, #3
 8009048:	f003 0303 	and.w	r3, r3, #3
 800904c:	4a16      	ldr	r2, [pc, #88]	@ (80090a8 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800904e:	fa22 f303 	lsr.w	r3, r2, r3
 8009052:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009054:	e01e      	b.n	8009094 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009056:	4b13      	ldr	r3, [pc, #76]	@ (80090a4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800905e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009062:	d106      	bne.n	8009072 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 8009064:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009066:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800906a:	d102      	bne.n	8009072 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800906c:	4b0f      	ldr	r3, [pc, #60]	@ (80090ac <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800906e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009070:	e010      	b.n	8009094 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009072:	4b0c      	ldr	r3, [pc, #48]	@ (80090a4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800907a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800907e:	d106      	bne.n	800908e <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8009080:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009082:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009086:	d102      	bne.n	800908e <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009088:	4b09      	ldr	r3, [pc, #36]	@ (80090b0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800908a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800908c:	e002      	b.n	8009094 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800908e:	2300      	movs	r3, #0
 8009090:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009092:	e388      	b.n	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8009094:	e387      	b.n	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009096:	4b07      	ldr	r3, [pc, #28]	@ (80090b4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8009098:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800909a:	e384      	b.n	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800909c:	2300      	movs	r3, #0
 800909e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80090a0:	e381      	b.n	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80090a2:	bf00      	nop
 80090a4:	58024400 	.word	0x58024400
 80090a8:	03d09000 	.word	0x03d09000
 80090ac:	003d0900 	.word	0x003d0900
 80090b0:	016e3600 	.word	0x016e3600
 80090b4:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80090b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80090bc:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 80090c0:	430b      	orrs	r3, r1
 80090c2:	f040 809c 	bne.w	80091fe <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 80090c6:	4b9e      	ldr	r3, [pc, #632]	@ (8009340 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80090c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80090ca:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 80090ce:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80090d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090d2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80090d6:	d054      	beq.n	8009182 <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 80090d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090da:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80090de:	f200 808b 	bhi.w	80091f8 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 80090e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090e4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80090e8:	f000 8083 	beq.w	80091f2 <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 80090ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090ee:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80090f2:	f200 8081 	bhi.w	80091f8 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 80090f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090f8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80090fc:	d02f      	beq.n	800915e <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 80090fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009100:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009104:	d878      	bhi.n	80091f8 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8009106:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009108:	2b00      	cmp	r3, #0
 800910a:	d004      	beq.n	8009116 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800910c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800910e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009112:	d012      	beq.n	800913a <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 8009114:	e070      	b.n	80091f8 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009116:	4b8a      	ldr	r3, [pc, #552]	@ (8009340 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800911e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009122:	d107      	bne.n	8009134 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009124:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009128:	4618      	mov	r0, r3
 800912a:	f000 fe07 	bl	8009d3c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800912e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009130:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009132:	e338      	b.n	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009134:	2300      	movs	r3, #0
 8009136:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009138:	e335      	b.n	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800913a:	4b81      	ldr	r3, [pc, #516]	@ (8009340 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009142:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009146:	d107      	bne.n	8009158 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009148:	f107 0318 	add.w	r3, r7, #24
 800914c:	4618      	mov	r0, r3
 800914e:	f000 fb4d 	bl	80097ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009152:	69bb      	ldr	r3, [r7, #24]
 8009154:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009156:	e326      	b.n	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009158:	2300      	movs	r3, #0
 800915a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800915c:	e323      	b.n	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800915e:	4b78      	ldr	r3, [pc, #480]	@ (8009340 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009166:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800916a:	d107      	bne.n	800917c <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800916c:	f107 030c 	add.w	r3, r7, #12
 8009170:	4618      	mov	r0, r3
 8009172:	f000 fc8f 	bl	8009a94 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800917a:	e314      	b.n	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800917c:	2300      	movs	r3, #0
 800917e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009180:	e311      	b.n	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009182:	4b6f      	ldr	r3, [pc, #444]	@ (8009340 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009184:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009186:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800918a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800918c:	4b6c      	ldr	r3, [pc, #432]	@ (8009340 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	f003 0304 	and.w	r3, r3, #4
 8009194:	2b04      	cmp	r3, #4
 8009196:	d10c      	bne.n	80091b2 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 8009198:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800919a:	2b00      	cmp	r3, #0
 800919c:	d109      	bne.n	80091b2 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800919e:	4b68      	ldr	r3, [pc, #416]	@ (8009340 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	08db      	lsrs	r3, r3, #3
 80091a4:	f003 0303 	and.w	r3, r3, #3
 80091a8:	4a66      	ldr	r2, [pc, #408]	@ (8009344 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 80091aa:	fa22 f303 	lsr.w	r3, r2, r3
 80091ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80091b0:	e01e      	b.n	80091f0 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80091b2:	4b63      	ldr	r3, [pc, #396]	@ (8009340 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80091ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80091be:	d106      	bne.n	80091ce <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 80091c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80091c2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80091c6:	d102      	bne.n	80091ce <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80091c8:	4b5f      	ldr	r3, [pc, #380]	@ (8009348 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 80091ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80091cc:	e010      	b.n	80091f0 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80091ce:	4b5c      	ldr	r3, [pc, #368]	@ (8009340 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80091d6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80091da:	d106      	bne.n	80091ea <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 80091dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80091de:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80091e2:	d102      	bne.n	80091ea <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80091e4:	4b59      	ldr	r3, [pc, #356]	@ (800934c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80091e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80091e8:	e002      	b.n	80091f0 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80091ea:	2300      	movs	r3, #0
 80091ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80091ee:	e2da      	b.n	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80091f0:	e2d9      	b.n	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80091f2:	4b57      	ldr	r3, [pc, #348]	@ (8009350 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80091f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80091f6:	e2d6      	b.n	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 80091f8:	2300      	movs	r3, #0
 80091fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80091fc:	e2d3      	b.n	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80091fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009202:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8009206:	430b      	orrs	r3, r1
 8009208:	f040 80a7 	bne.w	800935a <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800920c:	4b4c      	ldr	r3, [pc, #304]	@ (8009340 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800920e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009210:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8009214:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8009216:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009218:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800921c:	d055      	beq.n	80092ca <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 800921e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009220:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009224:	f200 8096 	bhi.w	8009354 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8009228:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800922a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800922e:	f000 8084 	beq.w	800933a <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 8009232:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009234:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009238:	f200 808c 	bhi.w	8009354 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800923c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800923e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009242:	d030      	beq.n	80092a6 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8009244:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009246:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800924a:	f200 8083 	bhi.w	8009354 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800924e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009250:	2b00      	cmp	r3, #0
 8009252:	d004      	beq.n	800925e <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 8009254:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009256:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800925a:	d012      	beq.n	8009282 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800925c:	e07a      	b.n	8009354 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800925e:	4b38      	ldr	r3, [pc, #224]	@ (8009340 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009266:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800926a:	d107      	bne.n	800927c <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800926c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009270:	4618      	mov	r0, r3
 8009272:	f000 fd63 	bl	8009d3c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009276:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009278:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800927a:	e294      	b.n	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800927c:	2300      	movs	r3, #0
 800927e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009280:	e291      	b.n	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009282:	4b2f      	ldr	r3, [pc, #188]	@ (8009340 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800928a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800928e:	d107      	bne.n	80092a0 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009290:	f107 0318 	add.w	r3, r7, #24
 8009294:	4618      	mov	r0, r3
 8009296:	f000 faa9 	bl	80097ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800929a:	69bb      	ldr	r3, [r7, #24]
 800929c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800929e:	e282      	b.n	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80092a0:	2300      	movs	r3, #0
 80092a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80092a4:	e27f      	b.n	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80092a6:	4b26      	ldr	r3, [pc, #152]	@ (8009340 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80092ae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80092b2:	d107      	bne.n	80092c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80092b4:	f107 030c 	add.w	r3, r7, #12
 80092b8:	4618      	mov	r0, r3
 80092ba:	f000 fbeb 	bl	8009a94 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80092c2:	e270      	b.n	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80092c4:	2300      	movs	r3, #0
 80092c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80092c8:	e26d      	b.n	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80092ca:	4b1d      	ldr	r3, [pc, #116]	@ (8009340 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80092cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80092ce:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80092d2:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80092d4:	4b1a      	ldr	r3, [pc, #104]	@ (8009340 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	f003 0304 	and.w	r3, r3, #4
 80092dc:	2b04      	cmp	r3, #4
 80092de:	d10c      	bne.n	80092fa <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 80092e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d109      	bne.n	80092fa <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80092e6:	4b16      	ldr	r3, [pc, #88]	@ (8009340 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	08db      	lsrs	r3, r3, #3
 80092ec:	f003 0303 	and.w	r3, r3, #3
 80092f0:	4a14      	ldr	r2, [pc, #80]	@ (8009344 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 80092f2:	fa22 f303 	lsr.w	r3, r2, r3
 80092f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80092f8:	e01e      	b.n	8009338 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80092fa:	4b11      	ldr	r3, [pc, #68]	@ (8009340 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009302:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009306:	d106      	bne.n	8009316 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8009308:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800930a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800930e:	d102      	bne.n	8009316 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009310:	4b0d      	ldr	r3, [pc, #52]	@ (8009348 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8009312:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009314:	e010      	b.n	8009338 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009316:	4b0a      	ldr	r3, [pc, #40]	@ (8009340 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800931e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009322:	d106      	bne.n	8009332 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 8009324:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009326:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800932a:	d102      	bne.n	8009332 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800932c:	4b07      	ldr	r3, [pc, #28]	@ (800934c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800932e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009330:	e002      	b.n	8009338 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009332:	2300      	movs	r3, #0
 8009334:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009336:	e236      	b.n	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8009338:	e235      	b.n	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800933a:	4b05      	ldr	r3, [pc, #20]	@ (8009350 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800933c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800933e:	e232      	b.n	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8009340:	58024400 	.word	0x58024400
 8009344:	03d09000 	.word	0x03d09000
 8009348:	003d0900 	.word	0x003d0900
 800934c:	016e3600 	.word	0x016e3600
 8009350:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 8009354:	2300      	movs	r3, #0
 8009356:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009358:	e225      	b.n	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800935a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800935e:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8009362:	430b      	orrs	r3, r1
 8009364:	f040 8085 	bne.w	8009472 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8009368:	4b9c      	ldr	r3, [pc, #624]	@ (80095dc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800936a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800936c:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8009370:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8009372:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009374:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009378:	d06b      	beq.n	8009452 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800937a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800937c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009380:	d874      	bhi.n	800946c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8009382:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009384:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009388:	d056      	beq.n	8009438 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 800938a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800938c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009390:	d86c      	bhi.n	800946c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8009392:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009394:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009398:	d03b      	beq.n	8009412 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800939a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800939c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80093a0:	d864      	bhi.n	800946c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 80093a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093a4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80093a8:	d021      	beq.n	80093ee <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 80093aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093ac:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80093b0:	d85c      	bhi.n	800946c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 80093b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d004      	beq.n	80093c2 <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 80093b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093ba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80093be:	d004      	beq.n	80093ca <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 80093c0:	e054      	b.n	800946c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 80093c2:	f7fe fb5f 	bl	8007a84 <HAL_RCC_GetPCLK1Freq>
 80093c6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80093c8:	e1ed      	b.n	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80093ca:	4b84      	ldr	r3, [pc, #528]	@ (80095dc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80093d2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80093d6:	d107      	bne.n	80093e8 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80093d8:	f107 0318 	add.w	r3, r7, #24
 80093dc:	4618      	mov	r0, r3
 80093de:	f000 fa05 	bl	80097ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80093e2:	69fb      	ldr	r3, [r7, #28]
 80093e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80093e6:	e1de      	b.n	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80093e8:	2300      	movs	r3, #0
 80093ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80093ec:	e1db      	b.n	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80093ee:	4b7b      	ldr	r3, [pc, #492]	@ (80095dc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80093f6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80093fa:	d107      	bne.n	800940c <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80093fc:	f107 030c 	add.w	r3, r7, #12
 8009400:	4618      	mov	r0, r3
 8009402:	f000 fb47 	bl	8009a94 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009406:	693b      	ldr	r3, [r7, #16]
 8009408:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800940a:	e1cc      	b.n	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800940c:	2300      	movs	r3, #0
 800940e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009410:	e1c9      	b.n	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009412:	4b72      	ldr	r3, [pc, #456]	@ (80095dc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	f003 0304 	and.w	r3, r3, #4
 800941a:	2b04      	cmp	r3, #4
 800941c:	d109      	bne.n	8009432 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800941e:	4b6f      	ldr	r3, [pc, #444]	@ (80095dc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	08db      	lsrs	r3, r3, #3
 8009424:	f003 0303 	and.w	r3, r3, #3
 8009428:	4a6d      	ldr	r2, [pc, #436]	@ (80095e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800942a:	fa22 f303 	lsr.w	r3, r2, r3
 800942e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009430:	e1b9      	b.n	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009432:	2300      	movs	r3, #0
 8009434:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009436:	e1b6      	b.n	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8009438:	4b68      	ldr	r3, [pc, #416]	@ (80095dc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009440:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009444:	d102      	bne.n	800944c <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 8009446:	4b67      	ldr	r3, [pc, #412]	@ (80095e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 8009448:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800944a:	e1ac      	b.n	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800944c:	2300      	movs	r3, #0
 800944e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009450:	e1a9      	b.n	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009452:	4b62      	ldr	r3, [pc, #392]	@ (80095dc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800945a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800945e:	d102      	bne.n	8009466 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 8009460:	4b61      	ldr	r3, [pc, #388]	@ (80095e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8009462:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009464:	e19f      	b.n	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009466:	2300      	movs	r3, #0
 8009468:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800946a:	e19c      	b.n	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800946c:	2300      	movs	r3, #0
 800946e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009470:	e199      	b.n	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8009472:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009476:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800947a:	430b      	orrs	r3, r1
 800947c:	d173      	bne.n	8009566 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800947e:	4b57      	ldr	r3, [pc, #348]	@ (80095dc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8009480:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009482:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8009486:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8009488:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800948a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800948e:	d02f      	beq.n	80094f0 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 8009490:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009492:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009496:	d863      	bhi.n	8009560 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 8009498:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800949a:	2b00      	cmp	r3, #0
 800949c:	d004      	beq.n	80094a8 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 800949e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80094a4:	d012      	beq.n	80094cc <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 80094a6:	e05b      	b.n	8009560 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80094a8:	4b4c      	ldr	r3, [pc, #304]	@ (80095dc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80094b0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80094b4:	d107      	bne.n	80094c6 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80094b6:	f107 0318 	add.w	r3, r7, #24
 80094ba:	4618      	mov	r0, r3
 80094bc:	f000 f996 	bl	80097ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80094c0:	69bb      	ldr	r3, [r7, #24]
 80094c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80094c4:	e16f      	b.n	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80094c6:	2300      	movs	r3, #0
 80094c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80094ca:	e16c      	b.n	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80094cc:	4b43      	ldr	r3, [pc, #268]	@ (80095dc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80094d4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80094d8:	d107      	bne.n	80094ea <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80094da:	f107 030c 	add.w	r3, r7, #12
 80094de:	4618      	mov	r0, r3
 80094e0:	f000 fad8 	bl	8009a94 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80094e4:	697b      	ldr	r3, [r7, #20]
 80094e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80094e8:	e15d      	b.n	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80094ea:	2300      	movs	r3, #0
 80094ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80094ee:	e15a      	b.n	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80094f0:	4b3a      	ldr	r3, [pc, #232]	@ (80095dc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80094f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80094f4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80094f8:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80094fa:	4b38      	ldr	r3, [pc, #224]	@ (80095dc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	f003 0304 	and.w	r3, r3, #4
 8009502:	2b04      	cmp	r3, #4
 8009504:	d10c      	bne.n	8009520 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 8009506:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009508:	2b00      	cmp	r3, #0
 800950a:	d109      	bne.n	8009520 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800950c:	4b33      	ldr	r3, [pc, #204]	@ (80095dc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	08db      	lsrs	r3, r3, #3
 8009512:	f003 0303 	and.w	r3, r3, #3
 8009516:	4a32      	ldr	r2, [pc, #200]	@ (80095e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 8009518:	fa22 f303 	lsr.w	r3, r2, r3
 800951c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800951e:	e01e      	b.n	800955e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009520:	4b2e      	ldr	r3, [pc, #184]	@ (80095dc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009528:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800952c:	d106      	bne.n	800953c <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800952e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009530:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009534:	d102      	bne.n	800953c <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009536:	4b2b      	ldr	r3, [pc, #172]	@ (80095e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 8009538:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800953a:	e010      	b.n	800955e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800953c:	4b27      	ldr	r3, [pc, #156]	@ (80095dc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009544:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009548:	d106      	bne.n	8009558 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 800954a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800954c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009550:	d102      	bne.n	8009558 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009552:	4b25      	ldr	r3, [pc, #148]	@ (80095e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8009554:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009556:	e002      	b.n	800955e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009558:	2300      	movs	r3, #0
 800955a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800955c:	e123      	b.n	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800955e:	e122      	b.n	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8009560:	2300      	movs	r3, #0
 8009562:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009564:	e11f      	b.n	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8009566:	e9d7 2300 	ldrd	r2, r3, [r7]
 800956a:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800956e:	430b      	orrs	r3, r1
 8009570:	d13c      	bne.n	80095ec <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8009572:	4b1a      	ldr	r3, [pc, #104]	@ (80095dc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8009574:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009576:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800957a:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800957c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800957e:	2b00      	cmp	r3, #0
 8009580:	d004      	beq.n	800958c <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 8009582:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009584:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009588:	d012      	beq.n	80095b0 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 800958a:	e023      	b.n	80095d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800958c:	4b13      	ldr	r3, [pc, #76]	@ (80095dc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009594:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009598:	d107      	bne.n	80095aa <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800959a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800959e:	4618      	mov	r0, r3
 80095a0:	f000 fbcc 	bl	8009d3c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80095a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80095a8:	e0fd      	b.n	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80095aa:	2300      	movs	r3, #0
 80095ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80095ae:	e0fa      	b.n	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80095b0:	4b0a      	ldr	r3, [pc, #40]	@ (80095dc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80095b8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80095bc:	d107      	bne.n	80095ce <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80095be:	f107 0318 	add.w	r3, r7, #24
 80095c2:	4618      	mov	r0, r3
 80095c4:	f000 f912 	bl	80097ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80095c8:	6a3b      	ldr	r3, [r7, #32]
 80095ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80095cc:	e0eb      	b.n	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80095ce:	2300      	movs	r3, #0
 80095d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80095d2:	e0e8      	b.n	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 80095d4:	2300      	movs	r3, #0
 80095d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80095d8:	e0e5      	b.n	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80095da:	bf00      	nop
 80095dc:	58024400 	.word	0x58024400
 80095e0:	03d09000 	.word	0x03d09000
 80095e4:	003d0900 	.word	0x003d0900
 80095e8:	016e3600 	.word	0x016e3600
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80095ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 80095f0:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 80095f4:	430b      	orrs	r3, r1
 80095f6:	f040 8085 	bne.w	8009704 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 80095fa:	4b6d      	ldr	r3, [pc, #436]	@ (80097b0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80095fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80095fe:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8009602:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8009604:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009606:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800960a:	d06b      	beq.n	80096e4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 800960c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800960e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009612:	d874      	bhi.n	80096fe <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8009614:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009616:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800961a:	d056      	beq.n	80096ca <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 800961c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800961e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009622:	d86c      	bhi.n	80096fe <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8009624:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009626:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800962a:	d03b      	beq.n	80096a4 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 800962c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800962e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009632:	d864      	bhi.n	80096fe <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8009634:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009636:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800963a:	d021      	beq.n	8009680 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 800963c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800963e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009642:	d85c      	bhi.n	80096fe <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8009644:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009646:	2b00      	cmp	r3, #0
 8009648:	d004      	beq.n	8009654 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 800964a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800964c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009650:	d004      	beq.n	800965c <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 8009652:	e054      	b.n	80096fe <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8009654:	f000 f8b4 	bl	80097c0 <HAL_RCCEx_GetD3PCLK1Freq>
 8009658:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800965a:	e0a4      	b.n	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800965c:	4b54      	ldr	r3, [pc, #336]	@ (80097b0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009664:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009668:	d107      	bne.n	800967a <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800966a:	f107 0318 	add.w	r3, r7, #24
 800966e:	4618      	mov	r0, r3
 8009670:	f000 f8bc 	bl	80097ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009674:	69fb      	ldr	r3, [r7, #28]
 8009676:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009678:	e095      	b.n	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800967a:	2300      	movs	r3, #0
 800967c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800967e:	e092      	b.n	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009680:	4b4b      	ldr	r3, [pc, #300]	@ (80097b0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009688:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800968c:	d107      	bne.n	800969e <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800968e:	f107 030c 	add.w	r3, r7, #12
 8009692:	4618      	mov	r0, r3
 8009694:	f000 f9fe 	bl	8009a94 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009698:	693b      	ldr	r3, [r7, #16]
 800969a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800969c:	e083      	b.n	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800969e:	2300      	movs	r3, #0
 80096a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80096a2:	e080      	b.n	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80096a4:	4b42      	ldr	r3, [pc, #264]	@ (80097b0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	f003 0304 	and.w	r3, r3, #4
 80096ac:	2b04      	cmp	r3, #4
 80096ae:	d109      	bne.n	80096c4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80096b0:	4b3f      	ldr	r3, [pc, #252]	@ (80097b0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	08db      	lsrs	r3, r3, #3
 80096b6:	f003 0303 	and.w	r3, r3, #3
 80096ba:	4a3e      	ldr	r2, [pc, #248]	@ (80097b4 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 80096bc:	fa22 f303 	lsr.w	r3, r2, r3
 80096c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80096c2:	e070      	b.n	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80096c4:	2300      	movs	r3, #0
 80096c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80096c8:	e06d      	b.n	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80096ca:	4b39      	ldr	r3, [pc, #228]	@ (80097b0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80096d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80096d6:	d102      	bne.n	80096de <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 80096d8:	4b37      	ldr	r3, [pc, #220]	@ (80097b8 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80096da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80096dc:	e063      	b.n	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80096de:	2300      	movs	r3, #0
 80096e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80096e2:	e060      	b.n	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80096e4:	4b32      	ldr	r3, [pc, #200]	@ (80097b0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80096ec:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80096f0:	d102      	bne.n	80096f8 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 80096f2:	4b32      	ldr	r3, [pc, #200]	@ (80097bc <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 80096f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80096f6:	e056      	b.n	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80096f8:	2300      	movs	r3, #0
 80096fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80096fc:	e053      	b.n	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 80096fe:	2300      	movs	r3, #0
 8009700:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009702:	e050      	b.n	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8009704:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009708:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800970c:	430b      	orrs	r3, r1
 800970e:	d148      	bne.n	80097a2 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8009710:	4b27      	ldr	r3, [pc, #156]	@ (80097b0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009712:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009714:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009718:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800971a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800971c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009720:	d02a      	beq.n	8009778 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 8009722:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009724:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009728:	d838      	bhi.n	800979c <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800972a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800972c:	2b00      	cmp	r3, #0
 800972e:	d004      	beq.n	800973a <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8009730:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009732:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009736:	d00d      	beq.n	8009754 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 8009738:	e030      	b.n	800979c <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800973a:	4b1d      	ldr	r3, [pc, #116]	@ (80097b0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009742:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009746:	d102      	bne.n	800974e <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 8009748:	4b1c      	ldr	r3, [pc, #112]	@ (80097bc <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800974a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800974c:	e02b      	b.n	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800974e:	2300      	movs	r3, #0
 8009750:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009752:	e028      	b.n	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009754:	4b16      	ldr	r3, [pc, #88]	@ (80097b0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800975c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009760:	d107      	bne.n	8009772 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009762:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009766:	4618      	mov	r0, r3
 8009768:	f000 fae8 	bl	8009d3c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800976c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800976e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009770:	e019      	b.n	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009772:	2300      	movs	r3, #0
 8009774:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009776:	e016      	b.n	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009778:	4b0d      	ldr	r3, [pc, #52]	@ (80097b0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009780:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009784:	d107      	bne.n	8009796 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009786:	f107 0318 	add.w	r3, r7, #24
 800978a:	4618      	mov	r0, r3
 800978c:	f000 f82e 	bl	80097ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009790:	69fb      	ldr	r3, [r7, #28]
 8009792:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009794:	e007      	b.n	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009796:	2300      	movs	r3, #0
 8009798:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800979a:	e004      	b.n	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800979c:	2300      	movs	r3, #0
 800979e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80097a0:	e001      	b.n	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 80097a2:	2300      	movs	r3, #0
 80097a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 80097a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80097a8:	4618      	mov	r0, r3
 80097aa:	3740      	adds	r7, #64	@ 0x40
 80097ac:	46bd      	mov	sp, r7
 80097ae:	bd80      	pop	{r7, pc}
 80097b0:	58024400 	.word	0x58024400
 80097b4:	03d09000 	.word	0x03d09000
 80097b8:	003d0900 	.word	0x003d0900
 80097bc:	016e3600 	.word	0x016e3600

080097c0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80097c0:	b580      	push	{r7, lr}
 80097c2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80097c4:	f7fe f92e 	bl	8007a24 <HAL_RCC_GetHCLKFreq>
 80097c8:	4602      	mov	r2, r0
 80097ca:	4b06      	ldr	r3, [pc, #24]	@ (80097e4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80097cc:	6a1b      	ldr	r3, [r3, #32]
 80097ce:	091b      	lsrs	r3, r3, #4
 80097d0:	f003 0307 	and.w	r3, r3, #7
 80097d4:	4904      	ldr	r1, [pc, #16]	@ (80097e8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80097d6:	5ccb      	ldrb	r3, [r1, r3]
 80097d8:	f003 031f 	and.w	r3, r3, #31
 80097dc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80097e0:	4618      	mov	r0, r3
 80097e2:	bd80      	pop	{r7, pc}
 80097e4:	58024400 	.word	0x58024400
 80097e8:	0800e050 	.word	0x0800e050

080097ec <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80097ec:	b480      	push	{r7}
 80097ee:	b089      	sub	sp, #36	@ 0x24
 80097f0:	af00      	add	r7, sp, #0
 80097f2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80097f4:	4ba1      	ldr	r3, [pc, #644]	@ (8009a7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80097f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097f8:	f003 0303 	and.w	r3, r3, #3
 80097fc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80097fe:	4b9f      	ldr	r3, [pc, #636]	@ (8009a7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009800:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009802:	0b1b      	lsrs	r3, r3, #12
 8009804:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009808:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800980a:	4b9c      	ldr	r3, [pc, #624]	@ (8009a7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800980c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800980e:	091b      	lsrs	r3, r3, #4
 8009810:	f003 0301 	and.w	r3, r3, #1
 8009814:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8009816:	4b99      	ldr	r3, [pc, #612]	@ (8009a7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009818:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800981a:	08db      	lsrs	r3, r3, #3
 800981c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009820:	693a      	ldr	r2, [r7, #16]
 8009822:	fb02 f303 	mul.w	r3, r2, r3
 8009826:	ee07 3a90 	vmov	s15, r3
 800982a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800982e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8009832:	697b      	ldr	r3, [r7, #20]
 8009834:	2b00      	cmp	r3, #0
 8009836:	f000 8111 	beq.w	8009a5c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800983a:	69bb      	ldr	r3, [r7, #24]
 800983c:	2b02      	cmp	r3, #2
 800983e:	f000 8083 	beq.w	8009948 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8009842:	69bb      	ldr	r3, [r7, #24]
 8009844:	2b02      	cmp	r3, #2
 8009846:	f200 80a1 	bhi.w	800998c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800984a:	69bb      	ldr	r3, [r7, #24]
 800984c:	2b00      	cmp	r3, #0
 800984e:	d003      	beq.n	8009858 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8009850:	69bb      	ldr	r3, [r7, #24]
 8009852:	2b01      	cmp	r3, #1
 8009854:	d056      	beq.n	8009904 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8009856:	e099      	b.n	800998c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009858:	4b88      	ldr	r3, [pc, #544]	@ (8009a7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	f003 0320 	and.w	r3, r3, #32
 8009860:	2b00      	cmp	r3, #0
 8009862:	d02d      	beq.n	80098c0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009864:	4b85      	ldr	r3, [pc, #532]	@ (8009a7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	08db      	lsrs	r3, r3, #3
 800986a:	f003 0303 	and.w	r3, r3, #3
 800986e:	4a84      	ldr	r2, [pc, #528]	@ (8009a80 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8009870:	fa22 f303 	lsr.w	r3, r2, r3
 8009874:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009876:	68bb      	ldr	r3, [r7, #8]
 8009878:	ee07 3a90 	vmov	s15, r3
 800987c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009880:	697b      	ldr	r3, [r7, #20]
 8009882:	ee07 3a90 	vmov	s15, r3
 8009886:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800988a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800988e:	4b7b      	ldr	r3, [pc, #492]	@ (8009a7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009890:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009892:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009896:	ee07 3a90 	vmov	s15, r3
 800989a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800989e:	ed97 6a03 	vldr	s12, [r7, #12]
 80098a2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8009a84 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80098a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80098aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80098ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80098b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80098b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80098ba:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80098be:	e087      	b.n	80099d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80098c0:	697b      	ldr	r3, [r7, #20]
 80098c2:	ee07 3a90 	vmov	s15, r3
 80098c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098ca:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8009a88 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80098ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80098d2:	4b6a      	ldr	r3, [pc, #424]	@ (8009a7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80098d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80098d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80098da:	ee07 3a90 	vmov	s15, r3
 80098de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80098e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80098e6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8009a84 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80098ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80098ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80098f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80098f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80098fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80098fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009902:	e065      	b.n	80099d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009904:	697b      	ldr	r3, [r7, #20]
 8009906:	ee07 3a90 	vmov	s15, r3
 800990a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800990e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8009a8c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009912:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009916:	4b59      	ldr	r3, [pc, #356]	@ (8009a7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009918:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800991a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800991e:	ee07 3a90 	vmov	s15, r3
 8009922:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009926:	ed97 6a03 	vldr	s12, [r7, #12]
 800992a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8009a84 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800992e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009932:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009936:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800993a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800993e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009942:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009946:	e043      	b.n	80099d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009948:	697b      	ldr	r3, [r7, #20]
 800994a:	ee07 3a90 	vmov	s15, r3
 800994e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009952:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8009a90 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8009956:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800995a:	4b48      	ldr	r3, [pc, #288]	@ (8009a7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800995c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800995e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009962:	ee07 3a90 	vmov	s15, r3
 8009966:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800996a:	ed97 6a03 	vldr	s12, [r7, #12]
 800996e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8009a84 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009972:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009976:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800997a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800997e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009982:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009986:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800998a:	e021      	b.n	80099d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800998c:	697b      	ldr	r3, [r7, #20]
 800998e:	ee07 3a90 	vmov	s15, r3
 8009992:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009996:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8009a8c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800999a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800999e:	4b37      	ldr	r3, [pc, #220]	@ (8009a7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80099a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80099a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80099a6:	ee07 3a90 	vmov	s15, r3
 80099aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80099ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80099b2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8009a84 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80099b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80099ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80099be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80099c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80099c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80099ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80099ce:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80099d0:	4b2a      	ldr	r3, [pc, #168]	@ (8009a7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80099d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80099d4:	0a5b      	lsrs	r3, r3, #9
 80099d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80099da:	ee07 3a90 	vmov	s15, r3
 80099de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099e2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80099e6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80099ea:	edd7 6a07 	vldr	s13, [r7, #28]
 80099ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80099f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80099f6:	ee17 2a90 	vmov	r2, s15
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80099fe:	4b1f      	ldr	r3, [pc, #124]	@ (8009a7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009a00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a02:	0c1b      	lsrs	r3, r3, #16
 8009a04:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009a08:	ee07 3a90 	vmov	s15, r3
 8009a0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a10:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009a14:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009a18:	edd7 6a07 	vldr	s13, [r7, #28]
 8009a1c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009a20:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009a24:	ee17 2a90 	vmov	r2, s15
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8009a2c:	4b13      	ldr	r3, [pc, #76]	@ (8009a7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009a2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a30:	0e1b      	lsrs	r3, r3, #24
 8009a32:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009a36:	ee07 3a90 	vmov	s15, r3
 8009a3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a3e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009a42:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009a46:	edd7 6a07 	vldr	s13, [r7, #28]
 8009a4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009a4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009a52:	ee17 2a90 	vmov	r2, s15
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8009a5a:	e008      	b.n	8009a6e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	2200      	movs	r2, #0
 8009a60:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	2200      	movs	r2, #0
 8009a66:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	2200      	movs	r2, #0
 8009a6c:	609a      	str	r2, [r3, #8]
}
 8009a6e:	bf00      	nop
 8009a70:	3724      	adds	r7, #36	@ 0x24
 8009a72:	46bd      	mov	sp, r7
 8009a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a78:	4770      	bx	lr
 8009a7a:	bf00      	nop
 8009a7c:	58024400 	.word	0x58024400
 8009a80:	03d09000 	.word	0x03d09000
 8009a84:	46000000 	.word	0x46000000
 8009a88:	4c742400 	.word	0x4c742400
 8009a8c:	4a742400 	.word	0x4a742400
 8009a90:	4bb71b00 	.word	0x4bb71b00

08009a94 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8009a94:	b480      	push	{r7}
 8009a96:	b089      	sub	sp, #36	@ 0x24
 8009a98:	af00      	add	r7, sp, #0
 8009a9a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009a9c:	4ba1      	ldr	r3, [pc, #644]	@ (8009d24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009a9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009aa0:	f003 0303 	and.w	r3, r3, #3
 8009aa4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8009aa6:	4b9f      	ldr	r3, [pc, #636]	@ (8009d24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009aa8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009aaa:	0d1b      	lsrs	r3, r3, #20
 8009aac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009ab0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009ab2:	4b9c      	ldr	r3, [pc, #624]	@ (8009d24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009ab4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ab6:	0a1b      	lsrs	r3, r3, #8
 8009ab8:	f003 0301 	and.w	r3, r3, #1
 8009abc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8009abe:	4b99      	ldr	r3, [pc, #612]	@ (8009d24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009ac0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009ac2:	08db      	lsrs	r3, r3, #3
 8009ac4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009ac8:	693a      	ldr	r2, [r7, #16]
 8009aca:	fb02 f303 	mul.w	r3, r2, r3
 8009ace:	ee07 3a90 	vmov	s15, r3
 8009ad2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ad6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8009ada:	697b      	ldr	r3, [r7, #20]
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	f000 8111 	beq.w	8009d04 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8009ae2:	69bb      	ldr	r3, [r7, #24]
 8009ae4:	2b02      	cmp	r3, #2
 8009ae6:	f000 8083 	beq.w	8009bf0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8009aea:	69bb      	ldr	r3, [r7, #24]
 8009aec:	2b02      	cmp	r3, #2
 8009aee:	f200 80a1 	bhi.w	8009c34 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8009af2:	69bb      	ldr	r3, [r7, #24]
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d003      	beq.n	8009b00 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009af8:	69bb      	ldr	r3, [r7, #24]
 8009afa:	2b01      	cmp	r3, #1
 8009afc:	d056      	beq.n	8009bac <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8009afe:	e099      	b.n	8009c34 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009b00:	4b88      	ldr	r3, [pc, #544]	@ (8009d24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	f003 0320 	and.w	r3, r3, #32
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d02d      	beq.n	8009b68 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009b0c:	4b85      	ldr	r3, [pc, #532]	@ (8009d24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	08db      	lsrs	r3, r3, #3
 8009b12:	f003 0303 	and.w	r3, r3, #3
 8009b16:	4a84      	ldr	r2, [pc, #528]	@ (8009d28 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8009b18:	fa22 f303 	lsr.w	r3, r2, r3
 8009b1c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009b1e:	68bb      	ldr	r3, [r7, #8]
 8009b20:	ee07 3a90 	vmov	s15, r3
 8009b24:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b28:	697b      	ldr	r3, [r7, #20]
 8009b2a:	ee07 3a90 	vmov	s15, r3
 8009b2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b36:	4b7b      	ldr	r3, [pc, #492]	@ (8009d24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009b38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009b3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b3e:	ee07 3a90 	vmov	s15, r3
 8009b42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b46:	ed97 6a03 	vldr	s12, [r7, #12]
 8009b4a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8009d2c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009b4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b56:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009b5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b62:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009b66:	e087      	b.n	8009c78 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009b68:	697b      	ldr	r3, [r7, #20]
 8009b6a:	ee07 3a90 	vmov	s15, r3
 8009b6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b72:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8009d30 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8009b76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b7a:	4b6a      	ldr	r3, [pc, #424]	@ (8009d24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009b7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009b7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b82:	ee07 3a90 	vmov	s15, r3
 8009b86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b8a:	ed97 6a03 	vldr	s12, [r7, #12]
 8009b8e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8009d2c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009b92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b9a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009b9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009ba2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ba6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009baa:	e065      	b.n	8009c78 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009bac:	697b      	ldr	r3, [r7, #20]
 8009bae:	ee07 3a90 	vmov	s15, r3
 8009bb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009bb6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8009d34 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009bba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009bbe:	4b59      	ldr	r3, [pc, #356]	@ (8009d24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009bc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009bc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009bc6:	ee07 3a90 	vmov	s15, r3
 8009bca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009bce:	ed97 6a03 	vldr	s12, [r7, #12]
 8009bd2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8009d2c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009bd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009bda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009bde:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009be2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009be6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009bea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009bee:	e043      	b.n	8009c78 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009bf0:	697b      	ldr	r3, [r7, #20]
 8009bf2:	ee07 3a90 	vmov	s15, r3
 8009bf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009bfa:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8009d38 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8009bfe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c02:	4b48      	ldr	r3, [pc, #288]	@ (8009d24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009c04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c0a:	ee07 3a90 	vmov	s15, r3
 8009c0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c12:	ed97 6a03 	vldr	s12, [r7, #12]
 8009c16:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8009d2c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009c1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c22:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009c26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c2e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009c32:	e021      	b.n	8009c78 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009c34:	697b      	ldr	r3, [r7, #20]
 8009c36:	ee07 3a90 	vmov	s15, r3
 8009c3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c3e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8009d34 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009c42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c46:	4b37      	ldr	r3, [pc, #220]	@ (8009d24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009c48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c4e:	ee07 3a90 	vmov	s15, r3
 8009c52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c56:	ed97 6a03 	vldr	s12, [r7, #12]
 8009c5a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8009d2c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009c5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c66:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009c6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c72:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009c76:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8009c78:	4b2a      	ldr	r3, [pc, #168]	@ (8009d24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009c7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c7c:	0a5b      	lsrs	r3, r3, #9
 8009c7e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009c82:	ee07 3a90 	vmov	s15, r3
 8009c86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c8a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009c8e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009c92:	edd7 6a07 	vldr	s13, [r7, #28]
 8009c96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009c9a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009c9e:	ee17 2a90 	vmov	r2, s15
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8009ca6:	4b1f      	ldr	r3, [pc, #124]	@ (8009d24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009ca8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009caa:	0c1b      	lsrs	r3, r3, #16
 8009cac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009cb0:	ee07 3a90 	vmov	s15, r3
 8009cb4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009cb8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009cbc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009cc0:	edd7 6a07 	vldr	s13, [r7, #28]
 8009cc4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009cc8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009ccc:	ee17 2a90 	vmov	r2, s15
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8009cd4:	4b13      	ldr	r3, [pc, #76]	@ (8009d24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009cd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009cd8:	0e1b      	lsrs	r3, r3, #24
 8009cda:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009cde:	ee07 3a90 	vmov	s15, r3
 8009ce2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ce6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009cea:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009cee:	edd7 6a07 	vldr	s13, [r7, #28]
 8009cf2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009cf6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009cfa:	ee17 2a90 	vmov	r2, s15
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8009d02:	e008      	b.n	8009d16 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	2200      	movs	r2, #0
 8009d08:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	2200      	movs	r2, #0
 8009d0e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	2200      	movs	r2, #0
 8009d14:	609a      	str	r2, [r3, #8]
}
 8009d16:	bf00      	nop
 8009d18:	3724      	adds	r7, #36	@ 0x24
 8009d1a:	46bd      	mov	sp, r7
 8009d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d20:	4770      	bx	lr
 8009d22:	bf00      	nop
 8009d24:	58024400 	.word	0x58024400
 8009d28:	03d09000 	.word	0x03d09000
 8009d2c:	46000000 	.word	0x46000000
 8009d30:	4c742400 	.word	0x4c742400
 8009d34:	4a742400 	.word	0x4a742400
 8009d38:	4bb71b00 	.word	0x4bb71b00

08009d3c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8009d3c:	b480      	push	{r7}
 8009d3e:	b089      	sub	sp, #36	@ 0x24
 8009d40:	af00      	add	r7, sp, #0
 8009d42:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009d44:	4ba0      	ldr	r3, [pc, #640]	@ (8009fc8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009d46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d48:	f003 0303 	and.w	r3, r3, #3
 8009d4c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8009d4e:	4b9e      	ldr	r3, [pc, #632]	@ (8009fc8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009d50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d52:	091b      	lsrs	r3, r3, #4
 8009d54:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009d58:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8009d5a:	4b9b      	ldr	r3, [pc, #620]	@ (8009fc8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009d5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d5e:	f003 0301 	and.w	r3, r3, #1
 8009d62:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8009d64:	4b98      	ldr	r3, [pc, #608]	@ (8009fc8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009d66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009d68:	08db      	lsrs	r3, r3, #3
 8009d6a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009d6e:	693a      	ldr	r2, [r7, #16]
 8009d70:	fb02 f303 	mul.w	r3, r2, r3
 8009d74:	ee07 3a90 	vmov	s15, r3
 8009d78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d7c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8009d80:	697b      	ldr	r3, [r7, #20]
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	f000 8111 	beq.w	8009faa <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8009d88:	69bb      	ldr	r3, [r7, #24]
 8009d8a:	2b02      	cmp	r3, #2
 8009d8c:	f000 8083 	beq.w	8009e96 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8009d90:	69bb      	ldr	r3, [r7, #24]
 8009d92:	2b02      	cmp	r3, #2
 8009d94:	f200 80a1 	bhi.w	8009eda <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8009d98:	69bb      	ldr	r3, [r7, #24]
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d003      	beq.n	8009da6 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8009d9e:	69bb      	ldr	r3, [r7, #24]
 8009da0:	2b01      	cmp	r3, #1
 8009da2:	d056      	beq.n	8009e52 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8009da4:	e099      	b.n	8009eda <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009da6:	4b88      	ldr	r3, [pc, #544]	@ (8009fc8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	f003 0320 	and.w	r3, r3, #32
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d02d      	beq.n	8009e0e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009db2:	4b85      	ldr	r3, [pc, #532]	@ (8009fc8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	08db      	lsrs	r3, r3, #3
 8009db8:	f003 0303 	and.w	r3, r3, #3
 8009dbc:	4a83      	ldr	r2, [pc, #524]	@ (8009fcc <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8009dbe:	fa22 f303 	lsr.w	r3, r2, r3
 8009dc2:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009dc4:	68bb      	ldr	r3, [r7, #8]
 8009dc6:	ee07 3a90 	vmov	s15, r3
 8009dca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009dce:	697b      	ldr	r3, [r7, #20]
 8009dd0:	ee07 3a90 	vmov	s15, r3
 8009dd4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009dd8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009ddc:	4b7a      	ldr	r3, [pc, #488]	@ (8009fc8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009dde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009de0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009de4:	ee07 3a90 	vmov	s15, r3
 8009de8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009dec:	ed97 6a03 	vldr	s12, [r7, #12]
 8009df0:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8009fd0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009df4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009df8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009dfc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009e00:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e04:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e08:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009e0c:	e087      	b.n	8009f1e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009e0e:	697b      	ldr	r3, [r7, #20]
 8009e10:	ee07 3a90 	vmov	s15, r3
 8009e14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e18:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8009fd4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009e1c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e20:	4b69      	ldr	r3, [pc, #420]	@ (8009fc8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009e22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009e24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e28:	ee07 3a90 	vmov	s15, r3
 8009e2c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e30:	ed97 6a03 	vldr	s12, [r7, #12]
 8009e34:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8009fd0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009e38:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009e3c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009e40:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009e44:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e4c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009e50:	e065      	b.n	8009f1e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009e52:	697b      	ldr	r3, [r7, #20]
 8009e54:	ee07 3a90 	vmov	s15, r3
 8009e58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e5c:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8009fd8 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8009e60:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e64:	4b58      	ldr	r3, [pc, #352]	@ (8009fc8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009e66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009e68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e6c:	ee07 3a90 	vmov	s15, r3
 8009e70:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e74:	ed97 6a03 	vldr	s12, [r7, #12]
 8009e78:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8009fd0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009e7c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009e80:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009e84:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009e88:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e90:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009e94:	e043      	b.n	8009f1e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009e96:	697b      	ldr	r3, [r7, #20]
 8009e98:	ee07 3a90 	vmov	s15, r3
 8009e9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ea0:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8009fdc <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8009ea4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009ea8:	4b47      	ldr	r3, [pc, #284]	@ (8009fc8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009eaa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009eac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009eb0:	ee07 3a90 	vmov	s15, r3
 8009eb4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009eb8:	ed97 6a03 	vldr	s12, [r7, #12]
 8009ebc:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8009fd0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009ec0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009ec4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009ec8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009ecc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009ed0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ed4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009ed8:	e021      	b.n	8009f1e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009eda:	697b      	ldr	r3, [r7, #20]
 8009edc:	ee07 3a90 	vmov	s15, r3
 8009ee0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ee4:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8009fd4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009ee8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009eec:	4b36      	ldr	r3, [pc, #216]	@ (8009fc8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009eee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009ef0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ef4:	ee07 3a90 	vmov	s15, r3
 8009ef8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009efc:	ed97 6a03 	vldr	s12, [r7, #12]
 8009f00:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8009fd0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009f04:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009f08:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009f0c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009f10:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009f14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f18:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009f1c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8009f1e:	4b2a      	ldr	r3, [pc, #168]	@ (8009fc8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009f20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f22:	0a5b      	lsrs	r3, r3, #9
 8009f24:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009f28:	ee07 3a90 	vmov	s15, r3
 8009f2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f30:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009f34:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009f38:	edd7 6a07 	vldr	s13, [r7, #28]
 8009f3c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009f40:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009f44:	ee17 2a90 	vmov	r2, s15
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8009f4c:	4b1e      	ldr	r3, [pc, #120]	@ (8009fc8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009f4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f50:	0c1b      	lsrs	r3, r3, #16
 8009f52:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009f56:	ee07 3a90 	vmov	s15, r3
 8009f5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f5e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009f62:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009f66:	edd7 6a07 	vldr	s13, [r7, #28]
 8009f6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009f6e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009f72:	ee17 2a90 	vmov	r2, s15
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8009f7a:	4b13      	ldr	r3, [pc, #76]	@ (8009fc8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009f7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f7e:	0e1b      	lsrs	r3, r3, #24
 8009f80:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009f84:	ee07 3a90 	vmov	s15, r3
 8009f88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f8c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009f90:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009f94:	edd7 6a07 	vldr	s13, [r7, #28]
 8009f98:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009f9c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009fa0:	ee17 2a90 	vmov	r2, s15
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8009fa8:	e008      	b.n	8009fbc <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	2200      	movs	r2, #0
 8009fae:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	2200      	movs	r2, #0
 8009fb4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	2200      	movs	r2, #0
 8009fba:	609a      	str	r2, [r3, #8]
}
 8009fbc:	bf00      	nop
 8009fbe:	3724      	adds	r7, #36	@ 0x24
 8009fc0:	46bd      	mov	sp, r7
 8009fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc6:	4770      	bx	lr
 8009fc8:	58024400 	.word	0x58024400
 8009fcc:	03d09000 	.word	0x03d09000
 8009fd0:	46000000 	.word	0x46000000
 8009fd4:	4c742400 	.word	0x4c742400
 8009fd8:	4a742400 	.word	0x4a742400
 8009fdc:	4bb71b00 	.word	0x4bb71b00

08009fe0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009fe0:	b580      	push	{r7, lr}
 8009fe2:	b084      	sub	sp, #16
 8009fe4:	af00      	add	r7, sp, #0
 8009fe6:	6078      	str	r0, [r7, #4]
 8009fe8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009fea:	2300      	movs	r3, #0
 8009fec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009fee:	4b53      	ldr	r3, [pc, #332]	@ (800a13c <RCCEx_PLL2_Config+0x15c>)
 8009ff0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ff2:	f003 0303 	and.w	r3, r3, #3
 8009ff6:	2b03      	cmp	r3, #3
 8009ff8:	d101      	bne.n	8009ffe <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8009ffa:	2301      	movs	r3, #1
 8009ffc:	e099      	b.n	800a132 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8009ffe:	4b4f      	ldr	r3, [pc, #316]	@ (800a13c <RCCEx_PLL2_Config+0x15c>)
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	4a4e      	ldr	r2, [pc, #312]	@ (800a13c <RCCEx_PLL2_Config+0x15c>)
 800a004:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a008:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a00a:	f7f8 fa05 	bl	8002418 <HAL_GetTick>
 800a00e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a010:	e008      	b.n	800a024 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a012:	f7f8 fa01 	bl	8002418 <HAL_GetTick>
 800a016:	4602      	mov	r2, r0
 800a018:	68bb      	ldr	r3, [r7, #8]
 800a01a:	1ad3      	subs	r3, r2, r3
 800a01c:	2b02      	cmp	r3, #2
 800a01e:	d901      	bls.n	800a024 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a020:	2303      	movs	r3, #3
 800a022:	e086      	b.n	800a132 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a024:	4b45      	ldr	r3, [pc, #276]	@ (800a13c <RCCEx_PLL2_Config+0x15c>)
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d1f0      	bne.n	800a012 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800a030:	4b42      	ldr	r3, [pc, #264]	@ (800a13c <RCCEx_PLL2_Config+0x15c>)
 800a032:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a034:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	031b      	lsls	r3, r3, #12
 800a03e:	493f      	ldr	r1, [pc, #252]	@ (800a13c <RCCEx_PLL2_Config+0x15c>)
 800a040:	4313      	orrs	r3, r2
 800a042:	628b      	str	r3, [r1, #40]	@ 0x28
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	685b      	ldr	r3, [r3, #4]
 800a048:	3b01      	subs	r3, #1
 800a04a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	689b      	ldr	r3, [r3, #8]
 800a052:	3b01      	subs	r3, #1
 800a054:	025b      	lsls	r3, r3, #9
 800a056:	b29b      	uxth	r3, r3
 800a058:	431a      	orrs	r2, r3
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	68db      	ldr	r3, [r3, #12]
 800a05e:	3b01      	subs	r3, #1
 800a060:	041b      	lsls	r3, r3, #16
 800a062:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800a066:	431a      	orrs	r2, r3
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	691b      	ldr	r3, [r3, #16]
 800a06c:	3b01      	subs	r3, #1
 800a06e:	061b      	lsls	r3, r3, #24
 800a070:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800a074:	4931      	ldr	r1, [pc, #196]	@ (800a13c <RCCEx_PLL2_Config+0x15c>)
 800a076:	4313      	orrs	r3, r2
 800a078:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800a07a:	4b30      	ldr	r3, [pc, #192]	@ (800a13c <RCCEx_PLL2_Config+0x15c>)
 800a07c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a07e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	695b      	ldr	r3, [r3, #20]
 800a086:	492d      	ldr	r1, [pc, #180]	@ (800a13c <RCCEx_PLL2_Config+0x15c>)
 800a088:	4313      	orrs	r3, r2
 800a08a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800a08c:	4b2b      	ldr	r3, [pc, #172]	@ (800a13c <RCCEx_PLL2_Config+0x15c>)
 800a08e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a090:	f023 0220 	bic.w	r2, r3, #32
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	699b      	ldr	r3, [r3, #24]
 800a098:	4928      	ldr	r1, [pc, #160]	@ (800a13c <RCCEx_PLL2_Config+0x15c>)
 800a09a:	4313      	orrs	r3, r2
 800a09c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800a09e:	4b27      	ldr	r3, [pc, #156]	@ (800a13c <RCCEx_PLL2_Config+0x15c>)
 800a0a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0a2:	4a26      	ldr	r2, [pc, #152]	@ (800a13c <RCCEx_PLL2_Config+0x15c>)
 800a0a4:	f023 0310 	bic.w	r3, r3, #16
 800a0a8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800a0aa:	4b24      	ldr	r3, [pc, #144]	@ (800a13c <RCCEx_PLL2_Config+0x15c>)
 800a0ac:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a0ae:	4b24      	ldr	r3, [pc, #144]	@ (800a140 <RCCEx_PLL2_Config+0x160>)
 800a0b0:	4013      	ands	r3, r2
 800a0b2:	687a      	ldr	r2, [r7, #4]
 800a0b4:	69d2      	ldr	r2, [r2, #28]
 800a0b6:	00d2      	lsls	r2, r2, #3
 800a0b8:	4920      	ldr	r1, [pc, #128]	@ (800a13c <RCCEx_PLL2_Config+0x15c>)
 800a0ba:	4313      	orrs	r3, r2
 800a0bc:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800a0be:	4b1f      	ldr	r3, [pc, #124]	@ (800a13c <RCCEx_PLL2_Config+0x15c>)
 800a0c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0c2:	4a1e      	ldr	r2, [pc, #120]	@ (800a13c <RCCEx_PLL2_Config+0x15c>)
 800a0c4:	f043 0310 	orr.w	r3, r3, #16
 800a0c8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800a0ca:	683b      	ldr	r3, [r7, #0]
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d106      	bne.n	800a0de <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800a0d0:	4b1a      	ldr	r3, [pc, #104]	@ (800a13c <RCCEx_PLL2_Config+0x15c>)
 800a0d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0d4:	4a19      	ldr	r2, [pc, #100]	@ (800a13c <RCCEx_PLL2_Config+0x15c>)
 800a0d6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a0da:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a0dc:	e00f      	b.n	800a0fe <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800a0de:	683b      	ldr	r3, [r7, #0]
 800a0e0:	2b01      	cmp	r3, #1
 800a0e2:	d106      	bne.n	800a0f2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800a0e4:	4b15      	ldr	r3, [pc, #84]	@ (800a13c <RCCEx_PLL2_Config+0x15c>)
 800a0e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0e8:	4a14      	ldr	r2, [pc, #80]	@ (800a13c <RCCEx_PLL2_Config+0x15c>)
 800a0ea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a0ee:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a0f0:	e005      	b.n	800a0fe <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800a0f2:	4b12      	ldr	r3, [pc, #72]	@ (800a13c <RCCEx_PLL2_Config+0x15c>)
 800a0f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0f6:	4a11      	ldr	r2, [pc, #68]	@ (800a13c <RCCEx_PLL2_Config+0x15c>)
 800a0f8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a0fc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800a0fe:	4b0f      	ldr	r3, [pc, #60]	@ (800a13c <RCCEx_PLL2_Config+0x15c>)
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	4a0e      	ldr	r2, [pc, #56]	@ (800a13c <RCCEx_PLL2_Config+0x15c>)
 800a104:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800a108:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a10a:	f7f8 f985 	bl	8002418 <HAL_GetTick>
 800a10e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a110:	e008      	b.n	800a124 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a112:	f7f8 f981 	bl	8002418 <HAL_GetTick>
 800a116:	4602      	mov	r2, r0
 800a118:	68bb      	ldr	r3, [r7, #8]
 800a11a:	1ad3      	subs	r3, r2, r3
 800a11c:	2b02      	cmp	r3, #2
 800a11e:	d901      	bls.n	800a124 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a120:	2303      	movs	r3, #3
 800a122:	e006      	b.n	800a132 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a124:	4b05      	ldr	r3, [pc, #20]	@ (800a13c <RCCEx_PLL2_Config+0x15c>)
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d0f0      	beq.n	800a112 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800a130:	7bfb      	ldrb	r3, [r7, #15]
}
 800a132:	4618      	mov	r0, r3
 800a134:	3710      	adds	r7, #16
 800a136:	46bd      	mov	sp, r7
 800a138:	bd80      	pop	{r7, pc}
 800a13a:	bf00      	nop
 800a13c:	58024400 	.word	0x58024400
 800a140:	ffff0007 	.word	0xffff0007

0800a144 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800a144:	b580      	push	{r7, lr}
 800a146:	b084      	sub	sp, #16
 800a148:	af00      	add	r7, sp, #0
 800a14a:	6078      	str	r0, [r7, #4]
 800a14c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a14e:	2300      	movs	r3, #0
 800a150:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a152:	4b53      	ldr	r3, [pc, #332]	@ (800a2a0 <RCCEx_PLL3_Config+0x15c>)
 800a154:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a156:	f003 0303 	and.w	r3, r3, #3
 800a15a:	2b03      	cmp	r3, #3
 800a15c:	d101      	bne.n	800a162 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800a15e:	2301      	movs	r3, #1
 800a160:	e099      	b.n	800a296 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800a162:	4b4f      	ldr	r3, [pc, #316]	@ (800a2a0 <RCCEx_PLL3_Config+0x15c>)
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	4a4e      	ldr	r2, [pc, #312]	@ (800a2a0 <RCCEx_PLL3_Config+0x15c>)
 800a168:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a16c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a16e:	f7f8 f953 	bl	8002418 <HAL_GetTick>
 800a172:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a174:	e008      	b.n	800a188 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a176:	f7f8 f94f 	bl	8002418 <HAL_GetTick>
 800a17a:	4602      	mov	r2, r0
 800a17c:	68bb      	ldr	r3, [r7, #8]
 800a17e:	1ad3      	subs	r3, r2, r3
 800a180:	2b02      	cmp	r3, #2
 800a182:	d901      	bls.n	800a188 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a184:	2303      	movs	r3, #3
 800a186:	e086      	b.n	800a296 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a188:	4b45      	ldr	r3, [pc, #276]	@ (800a2a0 <RCCEx_PLL3_Config+0x15c>)
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a190:	2b00      	cmp	r3, #0
 800a192:	d1f0      	bne.n	800a176 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800a194:	4b42      	ldr	r3, [pc, #264]	@ (800a2a0 <RCCEx_PLL3_Config+0x15c>)
 800a196:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a198:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	051b      	lsls	r3, r3, #20
 800a1a2:	493f      	ldr	r1, [pc, #252]	@ (800a2a0 <RCCEx_PLL3_Config+0x15c>)
 800a1a4:	4313      	orrs	r3, r2
 800a1a6:	628b      	str	r3, [r1, #40]	@ 0x28
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	685b      	ldr	r3, [r3, #4]
 800a1ac:	3b01      	subs	r3, #1
 800a1ae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	689b      	ldr	r3, [r3, #8]
 800a1b6:	3b01      	subs	r3, #1
 800a1b8:	025b      	lsls	r3, r3, #9
 800a1ba:	b29b      	uxth	r3, r3
 800a1bc:	431a      	orrs	r2, r3
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	68db      	ldr	r3, [r3, #12]
 800a1c2:	3b01      	subs	r3, #1
 800a1c4:	041b      	lsls	r3, r3, #16
 800a1c6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800a1ca:	431a      	orrs	r2, r3
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	691b      	ldr	r3, [r3, #16]
 800a1d0:	3b01      	subs	r3, #1
 800a1d2:	061b      	lsls	r3, r3, #24
 800a1d4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800a1d8:	4931      	ldr	r1, [pc, #196]	@ (800a2a0 <RCCEx_PLL3_Config+0x15c>)
 800a1da:	4313      	orrs	r3, r2
 800a1dc:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a1de:	4b30      	ldr	r3, [pc, #192]	@ (800a2a0 <RCCEx_PLL3_Config+0x15c>)
 800a1e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a1e2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	695b      	ldr	r3, [r3, #20]
 800a1ea:	492d      	ldr	r1, [pc, #180]	@ (800a2a0 <RCCEx_PLL3_Config+0x15c>)
 800a1ec:	4313      	orrs	r3, r2
 800a1ee:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800a1f0:	4b2b      	ldr	r3, [pc, #172]	@ (800a2a0 <RCCEx_PLL3_Config+0x15c>)
 800a1f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a1f4:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	699b      	ldr	r3, [r3, #24]
 800a1fc:	4928      	ldr	r1, [pc, #160]	@ (800a2a0 <RCCEx_PLL3_Config+0x15c>)
 800a1fe:	4313      	orrs	r3, r2
 800a200:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800a202:	4b27      	ldr	r3, [pc, #156]	@ (800a2a0 <RCCEx_PLL3_Config+0x15c>)
 800a204:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a206:	4a26      	ldr	r2, [pc, #152]	@ (800a2a0 <RCCEx_PLL3_Config+0x15c>)
 800a208:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a20c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a20e:	4b24      	ldr	r3, [pc, #144]	@ (800a2a0 <RCCEx_PLL3_Config+0x15c>)
 800a210:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a212:	4b24      	ldr	r3, [pc, #144]	@ (800a2a4 <RCCEx_PLL3_Config+0x160>)
 800a214:	4013      	ands	r3, r2
 800a216:	687a      	ldr	r2, [r7, #4]
 800a218:	69d2      	ldr	r2, [r2, #28]
 800a21a:	00d2      	lsls	r2, r2, #3
 800a21c:	4920      	ldr	r1, [pc, #128]	@ (800a2a0 <RCCEx_PLL3_Config+0x15c>)
 800a21e:	4313      	orrs	r3, r2
 800a220:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800a222:	4b1f      	ldr	r3, [pc, #124]	@ (800a2a0 <RCCEx_PLL3_Config+0x15c>)
 800a224:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a226:	4a1e      	ldr	r2, [pc, #120]	@ (800a2a0 <RCCEx_PLL3_Config+0x15c>)
 800a228:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a22c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800a22e:	683b      	ldr	r3, [r7, #0]
 800a230:	2b00      	cmp	r3, #0
 800a232:	d106      	bne.n	800a242 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a234:	4b1a      	ldr	r3, [pc, #104]	@ (800a2a0 <RCCEx_PLL3_Config+0x15c>)
 800a236:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a238:	4a19      	ldr	r2, [pc, #100]	@ (800a2a0 <RCCEx_PLL3_Config+0x15c>)
 800a23a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800a23e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a240:	e00f      	b.n	800a262 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800a242:	683b      	ldr	r3, [r7, #0]
 800a244:	2b01      	cmp	r3, #1
 800a246:	d106      	bne.n	800a256 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800a248:	4b15      	ldr	r3, [pc, #84]	@ (800a2a0 <RCCEx_PLL3_Config+0x15c>)
 800a24a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a24c:	4a14      	ldr	r2, [pc, #80]	@ (800a2a0 <RCCEx_PLL3_Config+0x15c>)
 800a24e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800a252:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a254:	e005      	b.n	800a262 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a256:	4b12      	ldr	r3, [pc, #72]	@ (800a2a0 <RCCEx_PLL3_Config+0x15c>)
 800a258:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a25a:	4a11      	ldr	r2, [pc, #68]	@ (800a2a0 <RCCEx_PLL3_Config+0x15c>)
 800a25c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800a260:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800a262:	4b0f      	ldr	r3, [pc, #60]	@ (800a2a0 <RCCEx_PLL3_Config+0x15c>)
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	4a0e      	ldr	r2, [pc, #56]	@ (800a2a0 <RCCEx_PLL3_Config+0x15c>)
 800a268:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a26c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a26e:	f7f8 f8d3 	bl	8002418 <HAL_GetTick>
 800a272:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a274:	e008      	b.n	800a288 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a276:	f7f8 f8cf 	bl	8002418 <HAL_GetTick>
 800a27a:	4602      	mov	r2, r0
 800a27c:	68bb      	ldr	r3, [r7, #8]
 800a27e:	1ad3      	subs	r3, r2, r3
 800a280:	2b02      	cmp	r3, #2
 800a282:	d901      	bls.n	800a288 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a284:	2303      	movs	r3, #3
 800a286:	e006      	b.n	800a296 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a288:	4b05      	ldr	r3, [pc, #20]	@ (800a2a0 <RCCEx_PLL3_Config+0x15c>)
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a290:	2b00      	cmp	r3, #0
 800a292:	d0f0      	beq.n	800a276 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800a294:	7bfb      	ldrb	r3, [r7, #15]
}
 800a296:	4618      	mov	r0, r3
 800a298:	3710      	adds	r7, #16
 800a29a:	46bd      	mov	sp, r7
 800a29c:	bd80      	pop	{r7, pc}
 800a29e:	bf00      	nop
 800a2a0:	58024400 	.word	0x58024400
 800a2a4:	ffff0007 	.word	0xffff0007

0800a2a8 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a2a8:	b580      	push	{r7, lr}
 800a2aa:	b084      	sub	sp, #16
 800a2ac:	af00      	add	r7, sp, #0
 800a2ae:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d101      	bne.n	800a2ba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a2b6:	2301      	movs	r3, #1
 800a2b8:	e10f      	b.n	800a4da <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	2200      	movs	r2, #0
 800a2be:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	4a87      	ldr	r2, [pc, #540]	@ (800a4e4 <HAL_SPI_Init+0x23c>)
 800a2c6:	4293      	cmp	r3, r2
 800a2c8:	d00f      	beq.n	800a2ea <HAL_SPI_Init+0x42>
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	4a86      	ldr	r2, [pc, #536]	@ (800a4e8 <HAL_SPI_Init+0x240>)
 800a2d0:	4293      	cmp	r3, r2
 800a2d2:	d00a      	beq.n	800a2ea <HAL_SPI_Init+0x42>
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	4a84      	ldr	r2, [pc, #528]	@ (800a4ec <HAL_SPI_Init+0x244>)
 800a2da:	4293      	cmp	r3, r2
 800a2dc:	d005      	beq.n	800a2ea <HAL_SPI_Init+0x42>
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	68db      	ldr	r3, [r3, #12]
 800a2e2:	2b0f      	cmp	r3, #15
 800a2e4:	d901      	bls.n	800a2ea <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800a2e6:	2301      	movs	r3, #1
 800a2e8:	e0f7      	b.n	800a4da <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800a2ea:	6878      	ldr	r0, [r7, #4]
 800a2ec:	f000 f900 	bl	800a4f0 <SPI_GetPacketSize>
 800a2f0:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	4a7b      	ldr	r2, [pc, #492]	@ (800a4e4 <HAL_SPI_Init+0x23c>)
 800a2f8:	4293      	cmp	r3, r2
 800a2fa:	d00c      	beq.n	800a316 <HAL_SPI_Init+0x6e>
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	4a79      	ldr	r2, [pc, #484]	@ (800a4e8 <HAL_SPI_Init+0x240>)
 800a302:	4293      	cmp	r3, r2
 800a304:	d007      	beq.n	800a316 <HAL_SPI_Init+0x6e>
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	4a78      	ldr	r2, [pc, #480]	@ (800a4ec <HAL_SPI_Init+0x244>)
 800a30c:	4293      	cmp	r3, r2
 800a30e:	d002      	beq.n	800a316 <HAL_SPI_Init+0x6e>
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	2b08      	cmp	r3, #8
 800a314:	d811      	bhi.n	800a33a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800a31a:	4a72      	ldr	r2, [pc, #456]	@ (800a4e4 <HAL_SPI_Init+0x23c>)
 800a31c:	4293      	cmp	r3, r2
 800a31e:	d009      	beq.n	800a334 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	4a70      	ldr	r2, [pc, #448]	@ (800a4e8 <HAL_SPI_Init+0x240>)
 800a326:	4293      	cmp	r3, r2
 800a328:	d004      	beq.n	800a334 <HAL_SPI_Init+0x8c>
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	4a6f      	ldr	r2, [pc, #444]	@ (800a4ec <HAL_SPI_Init+0x244>)
 800a330:	4293      	cmp	r3, r2
 800a332:	d104      	bne.n	800a33e <HAL_SPI_Init+0x96>
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	2b10      	cmp	r3, #16
 800a338:	d901      	bls.n	800a33e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800a33a:	2301      	movs	r3, #1
 800a33c:	e0cd      	b.n	800a4da <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800a344:	b2db      	uxtb	r3, r3
 800a346:	2b00      	cmp	r3, #0
 800a348:	d106      	bne.n	800a358 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	2200      	movs	r2, #0
 800a34e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a352:	6878      	ldr	r0, [r7, #4]
 800a354:	f7f7 fc1a 	bl	8001b8c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	2202      	movs	r2, #2
 800a35c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	681a      	ldr	r2, [r3, #0]
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	f022 0201 	bic.w	r2, r2, #1
 800a36e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	689b      	ldr	r3, [r3, #8]
 800a376:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800a37a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	699b      	ldr	r3, [r3, #24]
 800a380:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a384:	d119      	bne.n	800a3ba <HAL_SPI_Init+0x112>
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	685b      	ldr	r3, [r3, #4]
 800a38a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a38e:	d103      	bne.n	800a398 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800a394:	2b00      	cmp	r3, #0
 800a396:	d008      	beq.n	800a3aa <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d10c      	bne.n	800a3ba <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800a3a4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a3a8:	d107      	bne.n	800a3ba <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	681a      	ldr	r2, [r3, #0]
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800a3b8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	685b      	ldr	r3, [r3, #4]
 800a3be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d00f      	beq.n	800a3e6 <HAL_SPI_Init+0x13e>
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	68db      	ldr	r3, [r3, #12]
 800a3ca:	2b06      	cmp	r3, #6
 800a3cc:	d90b      	bls.n	800a3e6 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	430a      	orrs	r2, r1
 800a3e2:	601a      	str	r2, [r3, #0]
 800a3e4:	e007      	b.n	800a3f6 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	681a      	ldr	r2, [r3, #0]
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800a3f4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	69da      	ldr	r2, [r3, #28]
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3fe:	431a      	orrs	r2, r3
 800a400:	68bb      	ldr	r3, [r7, #8]
 800a402:	431a      	orrs	r2, r3
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a408:	ea42 0103 	orr.w	r1, r2, r3
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	68da      	ldr	r2, [r3, #12]
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	430a      	orrs	r2, r1
 800a416:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a420:	431a      	orrs	r2, r3
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a426:	431a      	orrs	r2, r3
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	699b      	ldr	r3, [r3, #24]
 800a42c:	431a      	orrs	r2, r3
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	691b      	ldr	r3, [r3, #16]
 800a432:	431a      	orrs	r2, r3
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	695b      	ldr	r3, [r3, #20]
 800a438:	431a      	orrs	r2, r3
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	6a1b      	ldr	r3, [r3, #32]
 800a43e:	431a      	orrs	r2, r3
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	685b      	ldr	r3, [r3, #4]
 800a444:	431a      	orrs	r2, r3
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a44a:	431a      	orrs	r2, r3
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	689b      	ldr	r3, [r3, #8]
 800a450:	431a      	orrs	r2, r3
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a456:	ea42 0103 	orr.w	r1, r2, r3
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	430a      	orrs	r2, r1
 800a464:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	685b      	ldr	r3, [r3, #4]
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d113      	bne.n	800a496 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	689b      	ldr	r3, [r3, #8]
 800a474:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a480:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	689b      	ldr	r3, [r3, #8]
 800a488:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800a494:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	f022 0201 	bic.w	r2, r2, #1
 800a4a4:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	685b      	ldr	r3, [r3, #4]
 800a4aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d00a      	beq.n	800a4c8 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	68db      	ldr	r3, [r3, #12]
 800a4b8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	430a      	orrs	r2, r1
 800a4c6:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	2200      	movs	r2, #0
 800a4cc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	2201      	movs	r2, #1
 800a4d4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800a4d8:	2300      	movs	r3, #0
}
 800a4da:	4618      	mov	r0, r3
 800a4dc:	3710      	adds	r7, #16
 800a4de:	46bd      	mov	sp, r7
 800a4e0:	bd80      	pop	{r7, pc}
 800a4e2:	bf00      	nop
 800a4e4:	40013000 	.word	0x40013000
 800a4e8:	40003800 	.word	0x40003800
 800a4ec:	40003c00 	.word	0x40003c00

0800a4f0 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800a4f0:	b480      	push	{r7}
 800a4f2:	b085      	sub	sp, #20
 800a4f4:	af00      	add	r7, sp, #0
 800a4f6:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a4fc:	095b      	lsrs	r3, r3, #5
 800a4fe:	3301      	adds	r3, #1
 800a500:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	68db      	ldr	r3, [r3, #12]
 800a506:	3301      	adds	r3, #1
 800a508:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800a50a:	68bb      	ldr	r3, [r7, #8]
 800a50c:	3307      	adds	r3, #7
 800a50e:	08db      	lsrs	r3, r3, #3
 800a510:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800a512:	68bb      	ldr	r3, [r7, #8]
 800a514:	68fa      	ldr	r2, [r7, #12]
 800a516:	fb02 f303 	mul.w	r3, r2, r3
}
 800a51a:	4618      	mov	r0, r3
 800a51c:	3714      	adds	r7, #20
 800a51e:	46bd      	mov	sp, r7
 800a520:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a524:	4770      	bx	lr

0800a526 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a526:	b580      	push	{r7, lr}
 800a528:	b082      	sub	sp, #8
 800a52a:	af00      	add	r7, sp, #0
 800a52c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	2b00      	cmp	r3, #0
 800a532:	d101      	bne.n	800a538 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a534:	2301      	movs	r3, #1
 800a536:	e049      	b.n	800a5cc <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a53e:	b2db      	uxtb	r3, r3
 800a540:	2b00      	cmp	r3, #0
 800a542:	d106      	bne.n	800a552 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	2200      	movs	r2, #0
 800a548:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a54c:	6878      	ldr	r0, [r7, #4]
 800a54e:	f7f7 fc25 	bl	8001d9c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	2202      	movs	r2, #2
 800a556:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	681a      	ldr	r2, [r3, #0]
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	3304      	adds	r3, #4
 800a562:	4619      	mov	r1, r3
 800a564:	4610      	mov	r0, r2
 800a566:	f001 f887 	bl	800b678 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	2201      	movs	r2, #1
 800a56e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	2201      	movs	r2, #1
 800a576:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	2201      	movs	r2, #1
 800a57e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	2201      	movs	r2, #1
 800a586:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	2201      	movs	r2, #1
 800a58e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	2201      	movs	r2, #1
 800a596:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	2201      	movs	r2, #1
 800a59e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	2201      	movs	r2, #1
 800a5a6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	2201      	movs	r2, #1
 800a5ae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	2201      	movs	r2, #1
 800a5b6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	2201      	movs	r2, #1
 800a5be:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	2201      	movs	r2, #1
 800a5c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a5ca:	2300      	movs	r3, #0
}
 800a5cc:	4618      	mov	r0, r3
 800a5ce:	3708      	adds	r7, #8
 800a5d0:	46bd      	mov	sp, r7
 800a5d2:	bd80      	pop	{r7, pc}

0800a5d4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800a5d4:	b480      	push	{r7}
 800a5d6:	b085      	sub	sp, #20
 800a5d8:	af00      	add	r7, sp, #0
 800a5da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a5e2:	b2db      	uxtb	r3, r3
 800a5e4:	2b01      	cmp	r3, #1
 800a5e6:	d001      	beq.n	800a5ec <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800a5e8:	2301      	movs	r3, #1
 800a5ea:	e056      	b.n	800a69a <HAL_TIM_Base_Start+0xc6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	2202      	movs	r2, #2
 800a5f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	4a2b      	ldr	r2, [pc, #172]	@ (800a6a8 <HAL_TIM_Base_Start+0xd4>)
 800a5fa:	4293      	cmp	r3, r2
 800a5fc:	d02c      	beq.n	800a658 <HAL_TIM_Base_Start+0x84>
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a606:	d027      	beq.n	800a658 <HAL_TIM_Base_Start+0x84>
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	4a27      	ldr	r2, [pc, #156]	@ (800a6ac <HAL_TIM_Base_Start+0xd8>)
 800a60e:	4293      	cmp	r3, r2
 800a610:	d022      	beq.n	800a658 <HAL_TIM_Base_Start+0x84>
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	4a26      	ldr	r2, [pc, #152]	@ (800a6b0 <HAL_TIM_Base_Start+0xdc>)
 800a618:	4293      	cmp	r3, r2
 800a61a:	d01d      	beq.n	800a658 <HAL_TIM_Base_Start+0x84>
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	4a24      	ldr	r2, [pc, #144]	@ (800a6b4 <HAL_TIM_Base_Start+0xe0>)
 800a622:	4293      	cmp	r3, r2
 800a624:	d018      	beq.n	800a658 <HAL_TIM_Base_Start+0x84>
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	4a23      	ldr	r2, [pc, #140]	@ (800a6b8 <HAL_TIM_Base_Start+0xe4>)
 800a62c:	4293      	cmp	r3, r2
 800a62e:	d013      	beq.n	800a658 <HAL_TIM_Base_Start+0x84>
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	4a21      	ldr	r2, [pc, #132]	@ (800a6bc <HAL_TIM_Base_Start+0xe8>)
 800a636:	4293      	cmp	r3, r2
 800a638:	d00e      	beq.n	800a658 <HAL_TIM_Base_Start+0x84>
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	4a20      	ldr	r2, [pc, #128]	@ (800a6c0 <HAL_TIM_Base_Start+0xec>)
 800a640:	4293      	cmp	r3, r2
 800a642:	d009      	beq.n	800a658 <HAL_TIM_Base_Start+0x84>
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	4a1e      	ldr	r2, [pc, #120]	@ (800a6c4 <HAL_TIM_Base_Start+0xf0>)
 800a64a:	4293      	cmp	r3, r2
 800a64c:	d004      	beq.n	800a658 <HAL_TIM_Base_Start+0x84>
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	4a1d      	ldr	r2, [pc, #116]	@ (800a6c8 <HAL_TIM_Base_Start+0xf4>)
 800a654:	4293      	cmp	r3, r2
 800a656:	d115      	bne.n	800a684 <HAL_TIM_Base_Start+0xb0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	689a      	ldr	r2, [r3, #8]
 800a65e:	4b1b      	ldr	r3, [pc, #108]	@ (800a6cc <HAL_TIM_Base_Start+0xf8>)
 800a660:	4013      	ands	r3, r2
 800a662:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	2b06      	cmp	r3, #6
 800a668:	d015      	beq.n	800a696 <HAL_TIM_Base_Start+0xc2>
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a670:	d011      	beq.n	800a696 <HAL_TIM_Base_Start+0xc2>
    {
      __HAL_TIM_ENABLE(htim);
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	681a      	ldr	r2, [r3, #0]
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	f042 0201 	orr.w	r2, r2, #1
 800a680:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a682:	e008      	b.n	800a696 <HAL_TIM_Base_Start+0xc2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	681a      	ldr	r2, [r3, #0]
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	f042 0201 	orr.w	r2, r2, #1
 800a692:	601a      	str	r2, [r3, #0]
 800a694:	e000      	b.n	800a698 <HAL_TIM_Base_Start+0xc4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a696:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a698:	2300      	movs	r3, #0
}
 800a69a:	4618      	mov	r0, r3
 800a69c:	3714      	adds	r7, #20
 800a69e:	46bd      	mov	sp, r7
 800a6a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a4:	4770      	bx	lr
 800a6a6:	bf00      	nop
 800a6a8:	40010000 	.word	0x40010000
 800a6ac:	40000400 	.word	0x40000400
 800a6b0:	40000800 	.word	0x40000800
 800a6b4:	40000c00 	.word	0x40000c00
 800a6b8:	40010400 	.word	0x40010400
 800a6bc:	40001800 	.word	0x40001800
 800a6c0:	40014000 	.word	0x40014000
 800a6c4:	4000e000 	.word	0x4000e000
 800a6c8:	4000e400 	.word	0x4000e400
 800a6cc:	00010007 	.word	0x00010007

0800a6d0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a6d0:	b580      	push	{r7, lr}
 800a6d2:	b082      	sub	sp, #8
 800a6d4:	af00      	add	r7, sp, #0
 800a6d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d101      	bne.n	800a6e2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a6de:	2301      	movs	r3, #1
 800a6e0:	e049      	b.n	800a776 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a6e8:	b2db      	uxtb	r3, r3
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d106      	bne.n	800a6fc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	2200      	movs	r2, #0
 800a6f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a6f6:	6878      	ldr	r0, [r7, #4]
 800a6f8:	f000 f841 	bl	800a77e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	2202      	movs	r2, #2
 800a700:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	681a      	ldr	r2, [r3, #0]
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	3304      	adds	r3, #4
 800a70c:	4619      	mov	r1, r3
 800a70e:	4610      	mov	r0, r2
 800a710:	f000 ffb2 	bl	800b678 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	2201      	movs	r2, #1
 800a718:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	2201      	movs	r2, #1
 800a720:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	2201      	movs	r2, #1
 800a728:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	2201      	movs	r2, #1
 800a730:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	2201      	movs	r2, #1
 800a738:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	2201      	movs	r2, #1
 800a740:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	2201      	movs	r2, #1
 800a748:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	2201      	movs	r2, #1
 800a750:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	2201      	movs	r2, #1
 800a758:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	2201      	movs	r2, #1
 800a760:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	2201      	movs	r2, #1
 800a768:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	2201      	movs	r2, #1
 800a770:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a774:	2300      	movs	r3, #0
}
 800a776:	4618      	mov	r0, r3
 800a778:	3708      	adds	r7, #8
 800a77a:	46bd      	mov	sp, r7
 800a77c:	bd80      	pop	{r7, pc}

0800a77e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a77e:	b480      	push	{r7}
 800a780:	b083      	sub	sp, #12
 800a782:	af00      	add	r7, sp, #0
 800a784:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a786:	bf00      	nop
 800a788:	370c      	adds	r7, #12
 800a78a:	46bd      	mov	sp, r7
 800a78c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a790:	4770      	bx	lr
	...

0800a794 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a794:	b580      	push	{r7, lr}
 800a796:	b084      	sub	sp, #16
 800a798:	af00      	add	r7, sp, #0
 800a79a:	6078      	str	r0, [r7, #4]
 800a79c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a79e:	683b      	ldr	r3, [r7, #0]
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d109      	bne.n	800a7b8 <HAL_TIM_PWM_Start+0x24>
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a7aa:	b2db      	uxtb	r3, r3
 800a7ac:	2b01      	cmp	r3, #1
 800a7ae:	bf14      	ite	ne
 800a7b0:	2301      	movne	r3, #1
 800a7b2:	2300      	moveq	r3, #0
 800a7b4:	b2db      	uxtb	r3, r3
 800a7b6:	e03c      	b.n	800a832 <HAL_TIM_PWM_Start+0x9e>
 800a7b8:	683b      	ldr	r3, [r7, #0]
 800a7ba:	2b04      	cmp	r3, #4
 800a7bc:	d109      	bne.n	800a7d2 <HAL_TIM_PWM_Start+0x3e>
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800a7c4:	b2db      	uxtb	r3, r3
 800a7c6:	2b01      	cmp	r3, #1
 800a7c8:	bf14      	ite	ne
 800a7ca:	2301      	movne	r3, #1
 800a7cc:	2300      	moveq	r3, #0
 800a7ce:	b2db      	uxtb	r3, r3
 800a7d0:	e02f      	b.n	800a832 <HAL_TIM_PWM_Start+0x9e>
 800a7d2:	683b      	ldr	r3, [r7, #0]
 800a7d4:	2b08      	cmp	r3, #8
 800a7d6:	d109      	bne.n	800a7ec <HAL_TIM_PWM_Start+0x58>
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a7de:	b2db      	uxtb	r3, r3
 800a7e0:	2b01      	cmp	r3, #1
 800a7e2:	bf14      	ite	ne
 800a7e4:	2301      	movne	r3, #1
 800a7e6:	2300      	moveq	r3, #0
 800a7e8:	b2db      	uxtb	r3, r3
 800a7ea:	e022      	b.n	800a832 <HAL_TIM_PWM_Start+0x9e>
 800a7ec:	683b      	ldr	r3, [r7, #0]
 800a7ee:	2b0c      	cmp	r3, #12
 800a7f0:	d109      	bne.n	800a806 <HAL_TIM_PWM_Start+0x72>
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a7f8:	b2db      	uxtb	r3, r3
 800a7fa:	2b01      	cmp	r3, #1
 800a7fc:	bf14      	ite	ne
 800a7fe:	2301      	movne	r3, #1
 800a800:	2300      	moveq	r3, #0
 800a802:	b2db      	uxtb	r3, r3
 800a804:	e015      	b.n	800a832 <HAL_TIM_PWM_Start+0x9e>
 800a806:	683b      	ldr	r3, [r7, #0]
 800a808:	2b10      	cmp	r3, #16
 800a80a:	d109      	bne.n	800a820 <HAL_TIM_PWM_Start+0x8c>
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a812:	b2db      	uxtb	r3, r3
 800a814:	2b01      	cmp	r3, #1
 800a816:	bf14      	ite	ne
 800a818:	2301      	movne	r3, #1
 800a81a:	2300      	moveq	r3, #0
 800a81c:	b2db      	uxtb	r3, r3
 800a81e:	e008      	b.n	800a832 <HAL_TIM_PWM_Start+0x9e>
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800a826:	b2db      	uxtb	r3, r3
 800a828:	2b01      	cmp	r3, #1
 800a82a:	bf14      	ite	ne
 800a82c:	2301      	movne	r3, #1
 800a82e:	2300      	moveq	r3, #0
 800a830:	b2db      	uxtb	r3, r3
 800a832:	2b00      	cmp	r3, #0
 800a834:	d001      	beq.n	800a83a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800a836:	2301      	movs	r3, #1
 800a838:	e0ab      	b.n	800a992 <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a83a:	683b      	ldr	r3, [r7, #0]
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d104      	bne.n	800a84a <HAL_TIM_PWM_Start+0xb6>
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	2202      	movs	r2, #2
 800a844:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a848:	e023      	b.n	800a892 <HAL_TIM_PWM_Start+0xfe>
 800a84a:	683b      	ldr	r3, [r7, #0]
 800a84c:	2b04      	cmp	r3, #4
 800a84e:	d104      	bne.n	800a85a <HAL_TIM_PWM_Start+0xc6>
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	2202      	movs	r2, #2
 800a854:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a858:	e01b      	b.n	800a892 <HAL_TIM_PWM_Start+0xfe>
 800a85a:	683b      	ldr	r3, [r7, #0]
 800a85c:	2b08      	cmp	r3, #8
 800a85e:	d104      	bne.n	800a86a <HAL_TIM_PWM_Start+0xd6>
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	2202      	movs	r2, #2
 800a864:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a868:	e013      	b.n	800a892 <HAL_TIM_PWM_Start+0xfe>
 800a86a:	683b      	ldr	r3, [r7, #0]
 800a86c:	2b0c      	cmp	r3, #12
 800a86e:	d104      	bne.n	800a87a <HAL_TIM_PWM_Start+0xe6>
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	2202      	movs	r2, #2
 800a874:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a878:	e00b      	b.n	800a892 <HAL_TIM_PWM_Start+0xfe>
 800a87a:	683b      	ldr	r3, [r7, #0]
 800a87c:	2b10      	cmp	r3, #16
 800a87e:	d104      	bne.n	800a88a <HAL_TIM_PWM_Start+0xf6>
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	2202      	movs	r2, #2
 800a884:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a888:	e003      	b.n	800a892 <HAL_TIM_PWM_Start+0xfe>
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	2202      	movs	r2, #2
 800a88e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	2201      	movs	r2, #1
 800a898:	6839      	ldr	r1, [r7, #0]
 800a89a:	4618      	mov	r0, r3
 800a89c:	f001 fb12 	bl	800bec4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	4a3d      	ldr	r2, [pc, #244]	@ (800a99c <HAL_TIM_PWM_Start+0x208>)
 800a8a6:	4293      	cmp	r3, r2
 800a8a8:	d013      	beq.n	800a8d2 <HAL_TIM_PWM_Start+0x13e>
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	4a3c      	ldr	r2, [pc, #240]	@ (800a9a0 <HAL_TIM_PWM_Start+0x20c>)
 800a8b0:	4293      	cmp	r3, r2
 800a8b2:	d00e      	beq.n	800a8d2 <HAL_TIM_PWM_Start+0x13e>
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	4a3a      	ldr	r2, [pc, #232]	@ (800a9a4 <HAL_TIM_PWM_Start+0x210>)
 800a8ba:	4293      	cmp	r3, r2
 800a8bc:	d009      	beq.n	800a8d2 <HAL_TIM_PWM_Start+0x13e>
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	4a39      	ldr	r2, [pc, #228]	@ (800a9a8 <HAL_TIM_PWM_Start+0x214>)
 800a8c4:	4293      	cmp	r3, r2
 800a8c6:	d004      	beq.n	800a8d2 <HAL_TIM_PWM_Start+0x13e>
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	4a37      	ldr	r2, [pc, #220]	@ (800a9ac <HAL_TIM_PWM_Start+0x218>)
 800a8ce:	4293      	cmp	r3, r2
 800a8d0:	d101      	bne.n	800a8d6 <HAL_TIM_PWM_Start+0x142>
 800a8d2:	2301      	movs	r3, #1
 800a8d4:	e000      	b.n	800a8d8 <HAL_TIM_PWM_Start+0x144>
 800a8d6:	2300      	movs	r3, #0
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d007      	beq.n	800a8ec <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a8ea:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	4a2a      	ldr	r2, [pc, #168]	@ (800a99c <HAL_TIM_PWM_Start+0x208>)
 800a8f2:	4293      	cmp	r3, r2
 800a8f4:	d02c      	beq.n	800a950 <HAL_TIM_PWM_Start+0x1bc>
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a8fe:	d027      	beq.n	800a950 <HAL_TIM_PWM_Start+0x1bc>
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	4a2a      	ldr	r2, [pc, #168]	@ (800a9b0 <HAL_TIM_PWM_Start+0x21c>)
 800a906:	4293      	cmp	r3, r2
 800a908:	d022      	beq.n	800a950 <HAL_TIM_PWM_Start+0x1bc>
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	4a29      	ldr	r2, [pc, #164]	@ (800a9b4 <HAL_TIM_PWM_Start+0x220>)
 800a910:	4293      	cmp	r3, r2
 800a912:	d01d      	beq.n	800a950 <HAL_TIM_PWM_Start+0x1bc>
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	4a27      	ldr	r2, [pc, #156]	@ (800a9b8 <HAL_TIM_PWM_Start+0x224>)
 800a91a:	4293      	cmp	r3, r2
 800a91c:	d018      	beq.n	800a950 <HAL_TIM_PWM_Start+0x1bc>
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	4a1f      	ldr	r2, [pc, #124]	@ (800a9a0 <HAL_TIM_PWM_Start+0x20c>)
 800a924:	4293      	cmp	r3, r2
 800a926:	d013      	beq.n	800a950 <HAL_TIM_PWM_Start+0x1bc>
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	4a23      	ldr	r2, [pc, #140]	@ (800a9bc <HAL_TIM_PWM_Start+0x228>)
 800a92e:	4293      	cmp	r3, r2
 800a930:	d00e      	beq.n	800a950 <HAL_TIM_PWM_Start+0x1bc>
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	4a1b      	ldr	r2, [pc, #108]	@ (800a9a4 <HAL_TIM_PWM_Start+0x210>)
 800a938:	4293      	cmp	r3, r2
 800a93a:	d009      	beq.n	800a950 <HAL_TIM_PWM_Start+0x1bc>
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	4a1f      	ldr	r2, [pc, #124]	@ (800a9c0 <HAL_TIM_PWM_Start+0x22c>)
 800a942:	4293      	cmp	r3, r2
 800a944:	d004      	beq.n	800a950 <HAL_TIM_PWM_Start+0x1bc>
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	4a1e      	ldr	r2, [pc, #120]	@ (800a9c4 <HAL_TIM_PWM_Start+0x230>)
 800a94c:	4293      	cmp	r3, r2
 800a94e:	d115      	bne.n	800a97c <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	689a      	ldr	r2, [r3, #8]
 800a956:	4b1c      	ldr	r3, [pc, #112]	@ (800a9c8 <HAL_TIM_PWM_Start+0x234>)
 800a958:	4013      	ands	r3, r2
 800a95a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	2b06      	cmp	r3, #6
 800a960:	d015      	beq.n	800a98e <HAL_TIM_PWM_Start+0x1fa>
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a968:	d011      	beq.n	800a98e <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	681a      	ldr	r2, [r3, #0]
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	f042 0201 	orr.w	r2, r2, #1
 800a978:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a97a:	e008      	b.n	800a98e <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	681a      	ldr	r2, [r3, #0]
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	f042 0201 	orr.w	r2, r2, #1
 800a98a:	601a      	str	r2, [r3, #0]
 800a98c:	e000      	b.n	800a990 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a98e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a990:	2300      	movs	r3, #0
}
 800a992:	4618      	mov	r0, r3
 800a994:	3710      	adds	r7, #16
 800a996:	46bd      	mov	sp, r7
 800a998:	bd80      	pop	{r7, pc}
 800a99a:	bf00      	nop
 800a99c:	40010000 	.word	0x40010000
 800a9a0:	40010400 	.word	0x40010400
 800a9a4:	40014000 	.word	0x40014000
 800a9a8:	40014400 	.word	0x40014400
 800a9ac:	40014800 	.word	0x40014800
 800a9b0:	40000400 	.word	0x40000400
 800a9b4:	40000800 	.word	0x40000800
 800a9b8:	40000c00 	.word	0x40000c00
 800a9bc:	40001800 	.word	0x40001800
 800a9c0:	4000e000 	.word	0x4000e000
 800a9c4:	4000e400 	.word	0x4000e400
 800a9c8:	00010007 	.word	0x00010007

0800a9cc <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 800a9cc:	b580      	push	{r7, lr}
 800a9ce:	b086      	sub	sp, #24
 800a9d0:	af00      	add	r7, sp, #0
 800a9d2:	60f8      	str	r0, [r7, #12]
 800a9d4:	60b9      	str	r1, [r7, #8]
 800a9d6:	607a      	str	r2, [r7, #4]
 800a9d8:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800a9da:	2300      	movs	r3, #0
 800a9dc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800a9de:	68bb      	ldr	r3, [r7, #8]
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d109      	bne.n	800a9f8 <HAL_TIM_PWM_Start_DMA+0x2c>
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a9ea:	b2db      	uxtb	r3, r3
 800a9ec:	2b02      	cmp	r3, #2
 800a9ee:	bf0c      	ite	eq
 800a9f0:	2301      	moveq	r3, #1
 800a9f2:	2300      	movne	r3, #0
 800a9f4:	b2db      	uxtb	r3, r3
 800a9f6:	e03c      	b.n	800aa72 <HAL_TIM_PWM_Start_DMA+0xa6>
 800a9f8:	68bb      	ldr	r3, [r7, #8]
 800a9fa:	2b04      	cmp	r3, #4
 800a9fc:	d109      	bne.n	800aa12 <HAL_TIM_PWM_Start_DMA+0x46>
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800aa04:	b2db      	uxtb	r3, r3
 800aa06:	2b02      	cmp	r3, #2
 800aa08:	bf0c      	ite	eq
 800aa0a:	2301      	moveq	r3, #1
 800aa0c:	2300      	movne	r3, #0
 800aa0e:	b2db      	uxtb	r3, r3
 800aa10:	e02f      	b.n	800aa72 <HAL_TIM_PWM_Start_DMA+0xa6>
 800aa12:	68bb      	ldr	r3, [r7, #8]
 800aa14:	2b08      	cmp	r3, #8
 800aa16:	d109      	bne.n	800aa2c <HAL_TIM_PWM_Start_DMA+0x60>
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800aa1e:	b2db      	uxtb	r3, r3
 800aa20:	2b02      	cmp	r3, #2
 800aa22:	bf0c      	ite	eq
 800aa24:	2301      	moveq	r3, #1
 800aa26:	2300      	movne	r3, #0
 800aa28:	b2db      	uxtb	r3, r3
 800aa2a:	e022      	b.n	800aa72 <HAL_TIM_PWM_Start_DMA+0xa6>
 800aa2c:	68bb      	ldr	r3, [r7, #8]
 800aa2e:	2b0c      	cmp	r3, #12
 800aa30:	d109      	bne.n	800aa46 <HAL_TIM_PWM_Start_DMA+0x7a>
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800aa38:	b2db      	uxtb	r3, r3
 800aa3a:	2b02      	cmp	r3, #2
 800aa3c:	bf0c      	ite	eq
 800aa3e:	2301      	moveq	r3, #1
 800aa40:	2300      	movne	r3, #0
 800aa42:	b2db      	uxtb	r3, r3
 800aa44:	e015      	b.n	800aa72 <HAL_TIM_PWM_Start_DMA+0xa6>
 800aa46:	68bb      	ldr	r3, [r7, #8]
 800aa48:	2b10      	cmp	r3, #16
 800aa4a:	d109      	bne.n	800aa60 <HAL_TIM_PWM_Start_DMA+0x94>
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800aa52:	b2db      	uxtb	r3, r3
 800aa54:	2b02      	cmp	r3, #2
 800aa56:	bf0c      	ite	eq
 800aa58:	2301      	moveq	r3, #1
 800aa5a:	2300      	movne	r3, #0
 800aa5c:	b2db      	uxtb	r3, r3
 800aa5e:	e008      	b.n	800aa72 <HAL_TIM_PWM_Start_DMA+0xa6>
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800aa66:	b2db      	uxtb	r3, r3
 800aa68:	2b02      	cmp	r3, #2
 800aa6a:	bf0c      	ite	eq
 800aa6c:	2301      	moveq	r3, #1
 800aa6e:	2300      	movne	r3, #0
 800aa70:	b2db      	uxtb	r3, r3
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d001      	beq.n	800aa7a <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 800aa76:	2302      	movs	r3, #2
 800aa78:	e1ba      	b.n	800adf0 <HAL_TIM_PWM_Start_DMA+0x424>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800aa7a:	68bb      	ldr	r3, [r7, #8]
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d109      	bne.n	800aa94 <HAL_TIM_PWM_Start_DMA+0xc8>
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800aa86:	b2db      	uxtb	r3, r3
 800aa88:	2b01      	cmp	r3, #1
 800aa8a:	bf0c      	ite	eq
 800aa8c:	2301      	moveq	r3, #1
 800aa8e:	2300      	movne	r3, #0
 800aa90:	b2db      	uxtb	r3, r3
 800aa92:	e03c      	b.n	800ab0e <HAL_TIM_PWM_Start_DMA+0x142>
 800aa94:	68bb      	ldr	r3, [r7, #8]
 800aa96:	2b04      	cmp	r3, #4
 800aa98:	d109      	bne.n	800aaae <HAL_TIM_PWM_Start_DMA+0xe2>
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800aaa0:	b2db      	uxtb	r3, r3
 800aaa2:	2b01      	cmp	r3, #1
 800aaa4:	bf0c      	ite	eq
 800aaa6:	2301      	moveq	r3, #1
 800aaa8:	2300      	movne	r3, #0
 800aaaa:	b2db      	uxtb	r3, r3
 800aaac:	e02f      	b.n	800ab0e <HAL_TIM_PWM_Start_DMA+0x142>
 800aaae:	68bb      	ldr	r3, [r7, #8]
 800aab0:	2b08      	cmp	r3, #8
 800aab2:	d109      	bne.n	800aac8 <HAL_TIM_PWM_Start_DMA+0xfc>
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800aaba:	b2db      	uxtb	r3, r3
 800aabc:	2b01      	cmp	r3, #1
 800aabe:	bf0c      	ite	eq
 800aac0:	2301      	moveq	r3, #1
 800aac2:	2300      	movne	r3, #0
 800aac4:	b2db      	uxtb	r3, r3
 800aac6:	e022      	b.n	800ab0e <HAL_TIM_PWM_Start_DMA+0x142>
 800aac8:	68bb      	ldr	r3, [r7, #8]
 800aaca:	2b0c      	cmp	r3, #12
 800aacc:	d109      	bne.n	800aae2 <HAL_TIM_PWM_Start_DMA+0x116>
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800aad4:	b2db      	uxtb	r3, r3
 800aad6:	2b01      	cmp	r3, #1
 800aad8:	bf0c      	ite	eq
 800aada:	2301      	moveq	r3, #1
 800aadc:	2300      	movne	r3, #0
 800aade:	b2db      	uxtb	r3, r3
 800aae0:	e015      	b.n	800ab0e <HAL_TIM_PWM_Start_DMA+0x142>
 800aae2:	68bb      	ldr	r3, [r7, #8]
 800aae4:	2b10      	cmp	r3, #16
 800aae6:	d109      	bne.n	800aafc <HAL_TIM_PWM_Start_DMA+0x130>
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800aaee:	b2db      	uxtb	r3, r3
 800aaf0:	2b01      	cmp	r3, #1
 800aaf2:	bf0c      	ite	eq
 800aaf4:	2301      	moveq	r3, #1
 800aaf6:	2300      	movne	r3, #0
 800aaf8:	b2db      	uxtb	r3, r3
 800aafa:	e008      	b.n	800ab0e <HAL_TIM_PWM_Start_DMA+0x142>
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800ab02:	b2db      	uxtb	r3, r3
 800ab04:	2b01      	cmp	r3, #1
 800ab06:	bf0c      	ite	eq
 800ab08:	2301      	moveq	r3, #1
 800ab0a:	2300      	movne	r3, #0
 800ab0c:	b2db      	uxtb	r3, r3
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d034      	beq.n	800ab7c <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d002      	beq.n	800ab1e <HAL_TIM_PWM_Start_DMA+0x152>
 800ab18:	887b      	ldrh	r3, [r7, #2]
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d101      	bne.n	800ab22 <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 800ab1e:	2301      	movs	r3, #1
 800ab20:	e166      	b.n	800adf0 <HAL_TIM_PWM_Start_DMA+0x424>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800ab22:	68bb      	ldr	r3, [r7, #8]
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d104      	bne.n	800ab32 <HAL_TIM_PWM_Start_DMA+0x166>
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	2202      	movs	r2, #2
 800ab2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800ab30:	e026      	b.n	800ab80 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800ab32:	68bb      	ldr	r3, [r7, #8]
 800ab34:	2b04      	cmp	r3, #4
 800ab36:	d104      	bne.n	800ab42 <HAL_TIM_PWM_Start_DMA+0x176>
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	2202      	movs	r2, #2
 800ab3c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800ab40:	e01e      	b.n	800ab80 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800ab42:	68bb      	ldr	r3, [r7, #8]
 800ab44:	2b08      	cmp	r3, #8
 800ab46:	d104      	bne.n	800ab52 <HAL_TIM_PWM_Start_DMA+0x186>
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	2202      	movs	r2, #2
 800ab4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800ab50:	e016      	b.n	800ab80 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800ab52:	68bb      	ldr	r3, [r7, #8]
 800ab54:	2b0c      	cmp	r3, #12
 800ab56:	d104      	bne.n	800ab62 <HAL_TIM_PWM_Start_DMA+0x196>
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	2202      	movs	r2, #2
 800ab5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800ab60:	e00e      	b.n	800ab80 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800ab62:	68bb      	ldr	r3, [r7, #8]
 800ab64:	2b10      	cmp	r3, #16
 800ab66:	d104      	bne.n	800ab72 <HAL_TIM_PWM_Start_DMA+0x1a6>
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	2202      	movs	r2, #2
 800ab6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800ab70:	e006      	b.n	800ab80 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	2202      	movs	r2, #2
 800ab76:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800ab7a:	e001      	b.n	800ab80 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 800ab7c:	2301      	movs	r3, #1
 800ab7e:	e137      	b.n	800adf0 <HAL_TIM_PWM_Start_DMA+0x424>
  }

  switch (Channel)
 800ab80:	68bb      	ldr	r3, [r7, #8]
 800ab82:	2b0c      	cmp	r3, #12
 800ab84:	f200 80ae 	bhi.w	800ace4 <HAL_TIM_PWM_Start_DMA+0x318>
 800ab88:	a201      	add	r2, pc, #4	@ (adr r2, 800ab90 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 800ab8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab8e:	bf00      	nop
 800ab90:	0800abc5 	.word	0x0800abc5
 800ab94:	0800ace5 	.word	0x0800ace5
 800ab98:	0800ace5 	.word	0x0800ace5
 800ab9c:	0800ace5 	.word	0x0800ace5
 800aba0:	0800ac0d 	.word	0x0800ac0d
 800aba4:	0800ace5 	.word	0x0800ace5
 800aba8:	0800ace5 	.word	0x0800ace5
 800abac:	0800ace5 	.word	0x0800ace5
 800abb0:	0800ac55 	.word	0x0800ac55
 800abb4:	0800ace5 	.word	0x0800ace5
 800abb8:	0800ace5 	.word	0x0800ace5
 800abbc:	0800ace5 	.word	0x0800ace5
 800abc0:	0800ac9d 	.word	0x0800ac9d
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800abc8:	4a8b      	ldr	r2, [pc, #556]	@ (800adf8 <HAL_TIM_PWM_Start_DMA+0x42c>)
 800abca:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800abd0:	4a8a      	ldr	r2, [pc, #552]	@ (800adfc <HAL_TIM_PWM_Start_DMA+0x430>)
 800abd2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800abd8:	4a89      	ldr	r2, [pc, #548]	@ (800ae00 <HAL_TIM_PWM_Start_DMA+0x434>)
 800abda:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800abe0:	6879      	ldr	r1, [r7, #4]
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	3334      	adds	r3, #52	@ 0x34
 800abe8:	461a      	mov	r2, r3
 800abea:	887b      	ldrh	r3, [r7, #2]
 800abec:	f7f9 ff64 	bl	8004ab8 <HAL_DMA_Start_IT>
 800abf0:	4603      	mov	r3, r0
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d001      	beq.n	800abfa <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800abf6:	2301      	movs	r3, #1
 800abf8:	e0fa      	b.n	800adf0 <HAL_TIM_PWM_Start_DMA+0x424>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	68da      	ldr	r2, [r3, #12]
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ac08:	60da      	str	r2, [r3, #12]
      break;
 800ac0a:	e06e      	b.n	800acea <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac10:	4a79      	ldr	r2, [pc, #484]	@ (800adf8 <HAL_TIM_PWM_Start_DMA+0x42c>)
 800ac12:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac18:	4a78      	ldr	r2, [pc, #480]	@ (800adfc <HAL_TIM_PWM_Start_DMA+0x430>)
 800ac1a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac20:	4a77      	ldr	r2, [pc, #476]	@ (800ae00 <HAL_TIM_PWM_Start_DMA+0x434>)
 800ac22:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800ac28:	6879      	ldr	r1, [r7, #4]
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	3338      	adds	r3, #56	@ 0x38
 800ac30:	461a      	mov	r2, r3
 800ac32:	887b      	ldrh	r3, [r7, #2]
 800ac34:	f7f9 ff40 	bl	8004ab8 <HAL_DMA_Start_IT>
 800ac38:	4603      	mov	r3, r0
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d001      	beq.n	800ac42 <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800ac3e:	2301      	movs	r3, #1
 800ac40:	e0d6      	b.n	800adf0 <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	68da      	ldr	r2, [r3, #12]
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800ac50:	60da      	str	r2, [r3, #12]
      break;
 800ac52:	e04a      	b.n	800acea <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac58:	4a67      	ldr	r2, [pc, #412]	@ (800adf8 <HAL_TIM_PWM_Start_DMA+0x42c>)
 800ac5a:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac60:	4a66      	ldr	r2, [pc, #408]	@ (800adfc <HAL_TIM_PWM_Start_DMA+0x430>)
 800ac62:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac68:	4a65      	ldr	r2, [pc, #404]	@ (800ae00 <HAL_TIM_PWM_Start_DMA+0x434>)
 800ac6a:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 800ac70:	6879      	ldr	r1, [r7, #4]
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	333c      	adds	r3, #60	@ 0x3c
 800ac78:	461a      	mov	r2, r3
 800ac7a:	887b      	ldrh	r3, [r7, #2]
 800ac7c:	f7f9 ff1c 	bl	8004ab8 <HAL_DMA_Start_IT>
 800ac80:	4603      	mov	r3, r0
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d001      	beq.n	800ac8a <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800ac86:	2301      	movs	r3, #1
 800ac88:	e0b2      	b.n	800adf0 <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	68da      	ldr	r2, [r3, #12]
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ac98:	60da      	str	r2, [r3, #12]
      break;
 800ac9a:	e026      	b.n	800acea <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aca0:	4a55      	ldr	r2, [pc, #340]	@ (800adf8 <HAL_TIM_PWM_Start_DMA+0x42c>)
 800aca2:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aca8:	4a54      	ldr	r2, [pc, #336]	@ (800adfc <HAL_TIM_PWM_Start_DMA+0x430>)
 800acaa:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800acb0:	4a53      	ldr	r2, [pc, #332]	@ (800ae00 <HAL_TIM_PWM_Start_DMA+0x434>)
 800acb2:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800acb8:	6879      	ldr	r1, [r7, #4]
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	3340      	adds	r3, #64	@ 0x40
 800acc0:	461a      	mov	r2, r3
 800acc2:	887b      	ldrh	r3, [r7, #2]
 800acc4:	f7f9 fef8 	bl	8004ab8 <HAL_DMA_Start_IT>
 800acc8:	4603      	mov	r3, r0
 800acca:	2b00      	cmp	r3, #0
 800accc:	d001      	beq.n	800acd2 <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800acce:	2301      	movs	r3, #1
 800acd0:	e08e      	b.n	800adf0 <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	68da      	ldr	r2, [r3, #12]
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800ace0:	60da      	str	r2, [r3, #12]
      break;
 800ace2:	e002      	b.n	800acea <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 800ace4:	2301      	movs	r3, #1
 800ace6:	75fb      	strb	r3, [r7, #23]
      break;
 800ace8:	bf00      	nop
  }

  if (status == HAL_OK)
 800acea:	7dfb      	ldrb	r3, [r7, #23]
 800acec:	2b00      	cmp	r3, #0
 800acee:	d17e      	bne.n	800adee <HAL_TIM_PWM_Start_DMA+0x422>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	2201      	movs	r2, #1
 800acf6:	68b9      	ldr	r1, [r7, #8]
 800acf8:	4618      	mov	r0, r3
 800acfa:	f001 f8e3 	bl	800bec4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	4a40      	ldr	r2, [pc, #256]	@ (800ae04 <HAL_TIM_PWM_Start_DMA+0x438>)
 800ad04:	4293      	cmp	r3, r2
 800ad06:	d013      	beq.n	800ad30 <HAL_TIM_PWM_Start_DMA+0x364>
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	4a3e      	ldr	r2, [pc, #248]	@ (800ae08 <HAL_TIM_PWM_Start_DMA+0x43c>)
 800ad0e:	4293      	cmp	r3, r2
 800ad10:	d00e      	beq.n	800ad30 <HAL_TIM_PWM_Start_DMA+0x364>
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	4a3d      	ldr	r2, [pc, #244]	@ (800ae0c <HAL_TIM_PWM_Start_DMA+0x440>)
 800ad18:	4293      	cmp	r3, r2
 800ad1a:	d009      	beq.n	800ad30 <HAL_TIM_PWM_Start_DMA+0x364>
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	4a3b      	ldr	r2, [pc, #236]	@ (800ae10 <HAL_TIM_PWM_Start_DMA+0x444>)
 800ad22:	4293      	cmp	r3, r2
 800ad24:	d004      	beq.n	800ad30 <HAL_TIM_PWM_Start_DMA+0x364>
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	4a3a      	ldr	r2, [pc, #232]	@ (800ae14 <HAL_TIM_PWM_Start_DMA+0x448>)
 800ad2c:	4293      	cmp	r3, r2
 800ad2e:	d101      	bne.n	800ad34 <HAL_TIM_PWM_Start_DMA+0x368>
 800ad30:	2301      	movs	r3, #1
 800ad32:	e000      	b.n	800ad36 <HAL_TIM_PWM_Start_DMA+0x36a>
 800ad34:	2300      	movs	r3, #0
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d007      	beq.n	800ad4a <HAL_TIM_PWM_Start_DMA+0x37e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800ad48:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	4a2d      	ldr	r2, [pc, #180]	@ (800ae04 <HAL_TIM_PWM_Start_DMA+0x438>)
 800ad50:	4293      	cmp	r3, r2
 800ad52:	d02c      	beq.n	800adae <HAL_TIM_PWM_Start_DMA+0x3e2>
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ad5c:	d027      	beq.n	800adae <HAL_TIM_PWM_Start_DMA+0x3e2>
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	4a2d      	ldr	r2, [pc, #180]	@ (800ae18 <HAL_TIM_PWM_Start_DMA+0x44c>)
 800ad64:	4293      	cmp	r3, r2
 800ad66:	d022      	beq.n	800adae <HAL_TIM_PWM_Start_DMA+0x3e2>
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	4a2b      	ldr	r2, [pc, #172]	@ (800ae1c <HAL_TIM_PWM_Start_DMA+0x450>)
 800ad6e:	4293      	cmp	r3, r2
 800ad70:	d01d      	beq.n	800adae <HAL_TIM_PWM_Start_DMA+0x3e2>
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	4a2a      	ldr	r2, [pc, #168]	@ (800ae20 <HAL_TIM_PWM_Start_DMA+0x454>)
 800ad78:	4293      	cmp	r3, r2
 800ad7a:	d018      	beq.n	800adae <HAL_TIM_PWM_Start_DMA+0x3e2>
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	4a21      	ldr	r2, [pc, #132]	@ (800ae08 <HAL_TIM_PWM_Start_DMA+0x43c>)
 800ad82:	4293      	cmp	r3, r2
 800ad84:	d013      	beq.n	800adae <HAL_TIM_PWM_Start_DMA+0x3e2>
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	4a26      	ldr	r2, [pc, #152]	@ (800ae24 <HAL_TIM_PWM_Start_DMA+0x458>)
 800ad8c:	4293      	cmp	r3, r2
 800ad8e:	d00e      	beq.n	800adae <HAL_TIM_PWM_Start_DMA+0x3e2>
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	4a1d      	ldr	r2, [pc, #116]	@ (800ae0c <HAL_TIM_PWM_Start_DMA+0x440>)
 800ad96:	4293      	cmp	r3, r2
 800ad98:	d009      	beq.n	800adae <HAL_TIM_PWM_Start_DMA+0x3e2>
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	4a22      	ldr	r2, [pc, #136]	@ (800ae28 <HAL_TIM_PWM_Start_DMA+0x45c>)
 800ada0:	4293      	cmp	r3, r2
 800ada2:	d004      	beq.n	800adae <HAL_TIM_PWM_Start_DMA+0x3e2>
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	4a20      	ldr	r2, [pc, #128]	@ (800ae2c <HAL_TIM_PWM_Start_DMA+0x460>)
 800adaa:	4293      	cmp	r3, r2
 800adac:	d115      	bne.n	800adda <HAL_TIM_PWM_Start_DMA+0x40e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	689a      	ldr	r2, [r3, #8]
 800adb4:	4b1e      	ldr	r3, [pc, #120]	@ (800ae30 <HAL_TIM_PWM_Start_DMA+0x464>)
 800adb6:	4013      	ands	r3, r2
 800adb8:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800adba:	693b      	ldr	r3, [r7, #16]
 800adbc:	2b06      	cmp	r3, #6
 800adbe:	d015      	beq.n	800adec <HAL_TIM_PWM_Start_DMA+0x420>
 800adc0:	693b      	ldr	r3, [r7, #16]
 800adc2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800adc6:	d011      	beq.n	800adec <HAL_TIM_PWM_Start_DMA+0x420>
      {
        __HAL_TIM_ENABLE(htim);
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	681a      	ldr	r2, [r3, #0]
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	f042 0201 	orr.w	r2, r2, #1
 800add6:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800add8:	e008      	b.n	800adec <HAL_TIM_PWM_Start_DMA+0x420>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	681a      	ldr	r2, [r3, #0]
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	f042 0201 	orr.w	r2, r2, #1
 800ade8:	601a      	str	r2, [r3, #0]
 800adea:	e000      	b.n	800adee <HAL_TIM_PWM_Start_DMA+0x422>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800adec:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800adee:	7dfb      	ldrb	r3, [r7, #23]
}
 800adf0:	4618      	mov	r0, r3
 800adf2:	3718      	adds	r7, #24
 800adf4:	46bd      	mov	sp, r7
 800adf6:	bd80      	pop	{r7, pc}
 800adf8:	0800b567 	.word	0x0800b567
 800adfc:	0800b60f 	.word	0x0800b60f
 800ae00:	0800b4d5 	.word	0x0800b4d5
 800ae04:	40010000 	.word	0x40010000
 800ae08:	40010400 	.word	0x40010400
 800ae0c:	40014000 	.word	0x40014000
 800ae10:	40014400 	.word	0x40014400
 800ae14:	40014800 	.word	0x40014800
 800ae18:	40000400 	.word	0x40000400
 800ae1c:	40000800 	.word	0x40000800
 800ae20:	40000c00 	.word	0x40000c00
 800ae24:	40001800 	.word	0x40001800
 800ae28:	4000e000 	.word	0x4000e000
 800ae2c:	4000e400 	.word	0x4000e400
 800ae30:	00010007 	.word	0x00010007

0800ae34 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ae34:	b580      	push	{r7, lr}
 800ae36:	b084      	sub	sp, #16
 800ae38:	af00      	add	r7, sp, #0
 800ae3a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	68db      	ldr	r3, [r3, #12]
 800ae42:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	691b      	ldr	r3, [r3, #16]
 800ae4a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800ae4c:	68bb      	ldr	r3, [r7, #8]
 800ae4e:	f003 0302 	and.w	r3, r3, #2
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d020      	beq.n	800ae98 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	f003 0302 	and.w	r3, r3, #2
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d01b      	beq.n	800ae98 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	f06f 0202 	mvn.w	r2, #2
 800ae68:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	2201      	movs	r2, #1
 800ae6e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	699b      	ldr	r3, [r3, #24]
 800ae76:	f003 0303 	and.w	r3, r3, #3
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d003      	beq.n	800ae86 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ae7e:	6878      	ldr	r0, [r7, #4]
 800ae80:	f000 fb00 	bl	800b484 <HAL_TIM_IC_CaptureCallback>
 800ae84:	e005      	b.n	800ae92 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ae86:	6878      	ldr	r0, [r7, #4]
 800ae88:	f000 faf2 	bl	800b470 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ae8c:	6878      	ldr	r0, [r7, #4]
 800ae8e:	f7f5 fcb5 	bl	80007fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	2200      	movs	r2, #0
 800ae96:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800ae98:	68bb      	ldr	r3, [r7, #8]
 800ae9a:	f003 0304 	and.w	r3, r3, #4
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d020      	beq.n	800aee4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	f003 0304 	and.w	r3, r3, #4
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d01b      	beq.n	800aee4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	f06f 0204 	mvn.w	r2, #4
 800aeb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	2202      	movs	r2, #2
 800aeba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	699b      	ldr	r3, [r3, #24]
 800aec2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d003      	beq.n	800aed2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aeca:	6878      	ldr	r0, [r7, #4]
 800aecc:	f000 fada 	bl	800b484 <HAL_TIM_IC_CaptureCallback>
 800aed0:	e005      	b.n	800aede <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aed2:	6878      	ldr	r0, [r7, #4]
 800aed4:	f000 facc 	bl	800b470 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aed8:	6878      	ldr	r0, [r7, #4]
 800aeda:	f7f5 fc8f 	bl	80007fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	2200      	movs	r2, #0
 800aee2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800aee4:	68bb      	ldr	r3, [r7, #8]
 800aee6:	f003 0308 	and.w	r3, r3, #8
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d020      	beq.n	800af30 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	f003 0308 	and.w	r3, r3, #8
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d01b      	beq.n	800af30 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	f06f 0208 	mvn.w	r2, #8
 800af00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	2204      	movs	r2, #4
 800af06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	69db      	ldr	r3, [r3, #28]
 800af0e:	f003 0303 	and.w	r3, r3, #3
 800af12:	2b00      	cmp	r3, #0
 800af14:	d003      	beq.n	800af1e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800af16:	6878      	ldr	r0, [r7, #4]
 800af18:	f000 fab4 	bl	800b484 <HAL_TIM_IC_CaptureCallback>
 800af1c:	e005      	b.n	800af2a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800af1e:	6878      	ldr	r0, [r7, #4]
 800af20:	f000 faa6 	bl	800b470 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800af24:	6878      	ldr	r0, [r7, #4]
 800af26:	f7f5 fc69 	bl	80007fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	2200      	movs	r2, #0
 800af2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800af30:	68bb      	ldr	r3, [r7, #8]
 800af32:	f003 0310 	and.w	r3, r3, #16
 800af36:	2b00      	cmp	r3, #0
 800af38:	d020      	beq.n	800af7c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	f003 0310 	and.w	r3, r3, #16
 800af40:	2b00      	cmp	r3, #0
 800af42:	d01b      	beq.n	800af7c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	f06f 0210 	mvn.w	r2, #16
 800af4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	2208      	movs	r2, #8
 800af52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	69db      	ldr	r3, [r3, #28]
 800af5a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d003      	beq.n	800af6a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800af62:	6878      	ldr	r0, [r7, #4]
 800af64:	f000 fa8e 	bl	800b484 <HAL_TIM_IC_CaptureCallback>
 800af68:	e005      	b.n	800af76 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800af6a:	6878      	ldr	r0, [r7, #4]
 800af6c:	f000 fa80 	bl	800b470 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800af70:	6878      	ldr	r0, [r7, #4]
 800af72:	f7f5 fc43 	bl	80007fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	2200      	movs	r2, #0
 800af7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800af7c:	68bb      	ldr	r3, [r7, #8]
 800af7e:	f003 0301 	and.w	r3, r3, #1
 800af82:	2b00      	cmp	r3, #0
 800af84:	d00c      	beq.n	800afa0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	f003 0301 	and.w	r3, r3, #1
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d007      	beq.n	800afa0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	f06f 0201 	mvn.w	r2, #1
 800af98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800af9a:	6878      	ldr	r0, [r7, #4]
 800af9c:	f000 fa5e 	bl	800b45c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800afa0:	68bb      	ldr	r3, [r7, #8]
 800afa2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d104      	bne.n	800afb4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800afaa:	68bb      	ldr	r3, [r7, #8]
 800afac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d00c      	beq.n	800afce <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d007      	beq.n	800afce <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800afc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800afc8:	6878      	ldr	r0, [r7, #4]
 800afca:	f001 f847 	bl	800c05c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800afce:	68bb      	ldr	r3, [r7, #8]
 800afd0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d00c      	beq.n	800aff2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d007      	beq.n	800aff2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800afea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800afec:	6878      	ldr	r0, [r7, #4]
 800afee:	f001 f83f 	bl	800c070 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800aff2:	68bb      	ldr	r3, [r7, #8]
 800aff4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d00c      	beq.n	800b016 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b002:	2b00      	cmp	r3, #0
 800b004:	d007      	beq.n	800b016 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800b00e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b010:	6878      	ldr	r0, [r7, #4]
 800b012:	f000 fa4b 	bl	800b4ac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800b016:	68bb      	ldr	r3, [r7, #8]
 800b018:	f003 0320 	and.w	r3, r3, #32
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d00c      	beq.n	800b03a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	f003 0320 	and.w	r3, r3, #32
 800b026:	2b00      	cmp	r3, #0
 800b028:	d007      	beq.n	800b03a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	f06f 0220 	mvn.w	r2, #32
 800b032:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b034:	6878      	ldr	r0, [r7, #4]
 800b036:	f001 f807 	bl	800c048 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b03a:	bf00      	nop
 800b03c:	3710      	adds	r7, #16
 800b03e:	46bd      	mov	sp, r7
 800b040:	bd80      	pop	{r7, pc}
	...

0800b044 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b044:	b580      	push	{r7, lr}
 800b046:	b086      	sub	sp, #24
 800b048:	af00      	add	r7, sp, #0
 800b04a:	60f8      	str	r0, [r7, #12]
 800b04c:	60b9      	str	r1, [r7, #8]
 800b04e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b050:	2300      	movs	r3, #0
 800b052:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b05a:	2b01      	cmp	r3, #1
 800b05c:	d101      	bne.n	800b062 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800b05e:	2302      	movs	r3, #2
 800b060:	e0ff      	b.n	800b262 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	2201      	movs	r2, #1
 800b066:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	2b14      	cmp	r3, #20
 800b06e:	f200 80f0 	bhi.w	800b252 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800b072:	a201      	add	r2, pc, #4	@ (adr r2, 800b078 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800b074:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b078:	0800b0cd 	.word	0x0800b0cd
 800b07c:	0800b253 	.word	0x0800b253
 800b080:	0800b253 	.word	0x0800b253
 800b084:	0800b253 	.word	0x0800b253
 800b088:	0800b10d 	.word	0x0800b10d
 800b08c:	0800b253 	.word	0x0800b253
 800b090:	0800b253 	.word	0x0800b253
 800b094:	0800b253 	.word	0x0800b253
 800b098:	0800b14f 	.word	0x0800b14f
 800b09c:	0800b253 	.word	0x0800b253
 800b0a0:	0800b253 	.word	0x0800b253
 800b0a4:	0800b253 	.word	0x0800b253
 800b0a8:	0800b18f 	.word	0x0800b18f
 800b0ac:	0800b253 	.word	0x0800b253
 800b0b0:	0800b253 	.word	0x0800b253
 800b0b4:	0800b253 	.word	0x0800b253
 800b0b8:	0800b1d1 	.word	0x0800b1d1
 800b0bc:	0800b253 	.word	0x0800b253
 800b0c0:	0800b253 	.word	0x0800b253
 800b0c4:	0800b253 	.word	0x0800b253
 800b0c8:	0800b211 	.word	0x0800b211
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	68b9      	ldr	r1, [r7, #8]
 800b0d2:	4618      	mov	r0, r3
 800b0d4:	f000 fb82 	bl	800b7dc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	699a      	ldr	r2, [r3, #24]
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	f042 0208 	orr.w	r2, r2, #8
 800b0e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	699a      	ldr	r2, [r3, #24]
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	f022 0204 	bic.w	r2, r2, #4
 800b0f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	6999      	ldr	r1, [r3, #24]
 800b0fe:	68bb      	ldr	r3, [r7, #8]
 800b100:	691a      	ldr	r2, [r3, #16]
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	430a      	orrs	r2, r1
 800b108:	619a      	str	r2, [r3, #24]
      break;
 800b10a:	e0a5      	b.n	800b258 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	68b9      	ldr	r1, [r7, #8]
 800b112:	4618      	mov	r0, r3
 800b114:	f000 fbf2 	bl	800b8fc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	699a      	ldr	r2, [r3, #24]
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b126:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	699a      	ldr	r2, [r3, #24]
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b136:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	6999      	ldr	r1, [r3, #24]
 800b13e:	68bb      	ldr	r3, [r7, #8]
 800b140:	691b      	ldr	r3, [r3, #16]
 800b142:	021a      	lsls	r2, r3, #8
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	430a      	orrs	r2, r1
 800b14a:	619a      	str	r2, [r3, #24]
      break;
 800b14c:	e084      	b.n	800b258 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	68b9      	ldr	r1, [r7, #8]
 800b154:	4618      	mov	r0, r3
 800b156:	f000 fc5b 	bl	800ba10 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b15a:	68fb      	ldr	r3, [r7, #12]
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	69da      	ldr	r2, [r3, #28]
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	f042 0208 	orr.w	r2, r2, #8
 800b168:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	69da      	ldr	r2, [r3, #28]
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	f022 0204 	bic.w	r2, r2, #4
 800b178:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	69d9      	ldr	r1, [r3, #28]
 800b180:	68bb      	ldr	r3, [r7, #8]
 800b182:	691a      	ldr	r2, [r3, #16]
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	430a      	orrs	r2, r1
 800b18a:	61da      	str	r2, [r3, #28]
      break;
 800b18c:	e064      	b.n	800b258 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	68b9      	ldr	r1, [r7, #8]
 800b194:	4618      	mov	r0, r3
 800b196:	f000 fcc3 	bl	800bb20 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	69da      	ldr	r2, [r3, #28]
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b1a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	69da      	ldr	r2, [r3, #28]
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b1b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	69d9      	ldr	r1, [r3, #28]
 800b1c0:	68bb      	ldr	r3, [r7, #8]
 800b1c2:	691b      	ldr	r3, [r3, #16]
 800b1c4:	021a      	lsls	r2, r3, #8
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	430a      	orrs	r2, r1
 800b1cc:	61da      	str	r2, [r3, #28]
      break;
 800b1ce:	e043      	b.n	800b258 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	68b9      	ldr	r1, [r7, #8]
 800b1d6:	4618      	mov	r0, r3
 800b1d8:	f000 fd0c 	bl	800bbf4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	f042 0208 	orr.w	r2, r2, #8
 800b1ea:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	f022 0204 	bic.w	r2, r2, #4
 800b1fa:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800b202:	68bb      	ldr	r3, [r7, #8]
 800b204:	691a      	ldr	r2, [r3, #16]
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	430a      	orrs	r2, r1
 800b20c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800b20e:	e023      	b.n	800b258 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	68b9      	ldr	r1, [r7, #8]
 800b216:	4618      	mov	r0, r3
 800b218:	f000 fd50 	bl	800bcbc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b22a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b23a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800b242:	68bb      	ldr	r3, [r7, #8]
 800b244:	691b      	ldr	r3, [r3, #16]
 800b246:	021a      	lsls	r2, r3, #8
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	430a      	orrs	r2, r1
 800b24e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800b250:	e002      	b.n	800b258 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800b252:	2301      	movs	r3, #1
 800b254:	75fb      	strb	r3, [r7, #23]
      break;
 800b256:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	2200      	movs	r2, #0
 800b25c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b260:	7dfb      	ldrb	r3, [r7, #23]
}
 800b262:	4618      	mov	r0, r3
 800b264:	3718      	adds	r7, #24
 800b266:	46bd      	mov	sp, r7
 800b268:	bd80      	pop	{r7, pc}
 800b26a:	bf00      	nop

0800b26c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b26c:	b580      	push	{r7, lr}
 800b26e:	b084      	sub	sp, #16
 800b270:	af00      	add	r7, sp, #0
 800b272:	6078      	str	r0, [r7, #4]
 800b274:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b276:	2300      	movs	r3, #0
 800b278:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b280:	2b01      	cmp	r3, #1
 800b282:	d101      	bne.n	800b288 <HAL_TIM_ConfigClockSource+0x1c>
 800b284:	2302      	movs	r3, #2
 800b286:	e0dc      	b.n	800b442 <HAL_TIM_ConfigClockSource+0x1d6>
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	2201      	movs	r2, #1
 800b28c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	2202      	movs	r2, #2
 800b294:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	689b      	ldr	r3, [r3, #8]
 800b29e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b2a0:	68ba      	ldr	r2, [r7, #8]
 800b2a2:	4b6a      	ldr	r3, [pc, #424]	@ (800b44c <HAL_TIM_ConfigClockSource+0x1e0>)
 800b2a4:	4013      	ands	r3, r2
 800b2a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b2a8:	68bb      	ldr	r3, [r7, #8]
 800b2aa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b2ae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	68ba      	ldr	r2, [r7, #8]
 800b2b6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b2b8:	683b      	ldr	r3, [r7, #0]
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	4a64      	ldr	r2, [pc, #400]	@ (800b450 <HAL_TIM_ConfigClockSource+0x1e4>)
 800b2be:	4293      	cmp	r3, r2
 800b2c0:	f000 80a9 	beq.w	800b416 <HAL_TIM_ConfigClockSource+0x1aa>
 800b2c4:	4a62      	ldr	r2, [pc, #392]	@ (800b450 <HAL_TIM_ConfigClockSource+0x1e4>)
 800b2c6:	4293      	cmp	r3, r2
 800b2c8:	f200 80ae 	bhi.w	800b428 <HAL_TIM_ConfigClockSource+0x1bc>
 800b2cc:	4a61      	ldr	r2, [pc, #388]	@ (800b454 <HAL_TIM_ConfigClockSource+0x1e8>)
 800b2ce:	4293      	cmp	r3, r2
 800b2d0:	f000 80a1 	beq.w	800b416 <HAL_TIM_ConfigClockSource+0x1aa>
 800b2d4:	4a5f      	ldr	r2, [pc, #380]	@ (800b454 <HAL_TIM_ConfigClockSource+0x1e8>)
 800b2d6:	4293      	cmp	r3, r2
 800b2d8:	f200 80a6 	bhi.w	800b428 <HAL_TIM_ConfigClockSource+0x1bc>
 800b2dc:	4a5e      	ldr	r2, [pc, #376]	@ (800b458 <HAL_TIM_ConfigClockSource+0x1ec>)
 800b2de:	4293      	cmp	r3, r2
 800b2e0:	f000 8099 	beq.w	800b416 <HAL_TIM_ConfigClockSource+0x1aa>
 800b2e4:	4a5c      	ldr	r2, [pc, #368]	@ (800b458 <HAL_TIM_ConfigClockSource+0x1ec>)
 800b2e6:	4293      	cmp	r3, r2
 800b2e8:	f200 809e 	bhi.w	800b428 <HAL_TIM_ConfigClockSource+0x1bc>
 800b2ec:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800b2f0:	f000 8091 	beq.w	800b416 <HAL_TIM_ConfigClockSource+0x1aa>
 800b2f4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800b2f8:	f200 8096 	bhi.w	800b428 <HAL_TIM_ConfigClockSource+0x1bc>
 800b2fc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b300:	f000 8089 	beq.w	800b416 <HAL_TIM_ConfigClockSource+0x1aa>
 800b304:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b308:	f200 808e 	bhi.w	800b428 <HAL_TIM_ConfigClockSource+0x1bc>
 800b30c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b310:	d03e      	beq.n	800b390 <HAL_TIM_ConfigClockSource+0x124>
 800b312:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b316:	f200 8087 	bhi.w	800b428 <HAL_TIM_ConfigClockSource+0x1bc>
 800b31a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b31e:	f000 8086 	beq.w	800b42e <HAL_TIM_ConfigClockSource+0x1c2>
 800b322:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b326:	d87f      	bhi.n	800b428 <HAL_TIM_ConfigClockSource+0x1bc>
 800b328:	2b70      	cmp	r3, #112	@ 0x70
 800b32a:	d01a      	beq.n	800b362 <HAL_TIM_ConfigClockSource+0xf6>
 800b32c:	2b70      	cmp	r3, #112	@ 0x70
 800b32e:	d87b      	bhi.n	800b428 <HAL_TIM_ConfigClockSource+0x1bc>
 800b330:	2b60      	cmp	r3, #96	@ 0x60
 800b332:	d050      	beq.n	800b3d6 <HAL_TIM_ConfigClockSource+0x16a>
 800b334:	2b60      	cmp	r3, #96	@ 0x60
 800b336:	d877      	bhi.n	800b428 <HAL_TIM_ConfigClockSource+0x1bc>
 800b338:	2b50      	cmp	r3, #80	@ 0x50
 800b33a:	d03c      	beq.n	800b3b6 <HAL_TIM_ConfigClockSource+0x14a>
 800b33c:	2b50      	cmp	r3, #80	@ 0x50
 800b33e:	d873      	bhi.n	800b428 <HAL_TIM_ConfigClockSource+0x1bc>
 800b340:	2b40      	cmp	r3, #64	@ 0x40
 800b342:	d058      	beq.n	800b3f6 <HAL_TIM_ConfigClockSource+0x18a>
 800b344:	2b40      	cmp	r3, #64	@ 0x40
 800b346:	d86f      	bhi.n	800b428 <HAL_TIM_ConfigClockSource+0x1bc>
 800b348:	2b30      	cmp	r3, #48	@ 0x30
 800b34a:	d064      	beq.n	800b416 <HAL_TIM_ConfigClockSource+0x1aa>
 800b34c:	2b30      	cmp	r3, #48	@ 0x30
 800b34e:	d86b      	bhi.n	800b428 <HAL_TIM_ConfigClockSource+0x1bc>
 800b350:	2b20      	cmp	r3, #32
 800b352:	d060      	beq.n	800b416 <HAL_TIM_ConfigClockSource+0x1aa>
 800b354:	2b20      	cmp	r3, #32
 800b356:	d867      	bhi.n	800b428 <HAL_TIM_ConfigClockSource+0x1bc>
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d05c      	beq.n	800b416 <HAL_TIM_ConfigClockSource+0x1aa>
 800b35c:	2b10      	cmp	r3, #16
 800b35e:	d05a      	beq.n	800b416 <HAL_TIM_ConfigClockSource+0x1aa>
 800b360:	e062      	b.n	800b428 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b366:	683b      	ldr	r3, [r7, #0]
 800b368:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b36a:	683b      	ldr	r3, [r7, #0]
 800b36c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b36e:	683b      	ldr	r3, [r7, #0]
 800b370:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b372:	f000 fd87 	bl	800be84 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	689b      	ldr	r3, [r3, #8]
 800b37c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b37e:	68bb      	ldr	r3, [r7, #8]
 800b380:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800b384:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	68ba      	ldr	r2, [r7, #8]
 800b38c:	609a      	str	r2, [r3, #8]
      break;
 800b38e:	e04f      	b.n	800b430 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b394:	683b      	ldr	r3, [r7, #0]
 800b396:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b398:	683b      	ldr	r3, [r7, #0]
 800b39a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b39c:	683b      	ldr	r3, [r7, #0]
 800b39e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b3a0:	f000 fd70 	bl	800be84 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	689a      	ldr	r2, [r3, #8]
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800b3b2:	609a      	str	r2, [r3, #8]
      break;
 800b3b4:	e03c      	b.n	800b430 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b3ba:	683b      	ldr	r3, [r7, #0]
 800b3bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b3be:	683b      	ldr	r3, [r7, #0]
 800b3c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b3c2:	461a      	mov	r2, r3
 800b3c4:	f000 fce0 	bl	800bd88 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	2150      	movs	r1, #80	@ 0x50
 800b3ce:	4618      	mov	r0, r3
 800b3d0:	f000 fd3a 	bl	800be48 <TIM_ITRx_SetConfig>
      break;
 800b3d4:	e02c      	b.n	800b430 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b3da:	683b      	ldr	r3, [r7, #0]
 800b3dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b3de:	683b      	ldr	r3, [r7, #0]
 800b3e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b3e2:	461a      	mov	r2, r3
 800b3e4:	f000 fcff 	bl	800bde6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	2160      	movs	r1, #96	@ 0x60
 800b3ee:	4618      	mov	r0, r3
 800b3f0:	f000 fd2a 	bl	800be48 <TIM_ITRx_SetConfig>
      break;
 800b3f4:	e01c      	b.n	800b430 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b3fa:	683b      	ldr	r3, [r7, #0]
 800b3fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b3fe:	683b      	ldr	r3, [r7, #0]
 800b400:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b402:	461a      	mov	r2, r3
 800b404:	f000 fcc0 	bl	800bd88 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	2140      	movs	r1, #64	@ 0x40
 800b40e:	4618      	mov	r0, r3
 800b410:	f000 fd1a 	bl	800be48 <TIM_ITRx_SetConfig>
      break;
 800b414:	e00c      	b.n	800b430 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	681a      	ldr	r2, [r3, #0]
 800b41a:	683b      	ldr	r3, [r7, #0]
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	4619      	mov	r1, r3
 800b420:	4610      	mov	r0, r2
 800b422:	f000 fd11 	bl	800be48 <TIM_ITRx_SetConfig>
      break;
 800b426:	e003      	b.n	800b430 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800b428:	2301      	movs	r3, #1
 800b42a:	73fb      	strb	r3, [r7, #15]
      break;
 800b42c:	e000      	b.n	800b430 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800b42e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	2201      	movs	r2, #1
 800b434:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	2200      	movs	r2, #0
 800b43c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b440:	7bfb      	ldrb	r3, [r7, #15]
}
 800b442:	4618      	mov	r0, r3
 800b444:	3710      	adds	r7, #16
 800b446:	46bd      	mov	sp, r7
 800b448:	bd80      	pop	{r7, pc}
 800b44a:	bf00      	nop
 800b44c:	ffceff88 	.word	0xffceff88
 800b450:	00100040 	.word	0x00100040
 800b454:	00100030 	.word	0x00100030
 800b458:	00100020 	.word	0x00100020

0800b45c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b45c:	b480      	push	{r7}
 800b45e:	b083      	sub	sp, #12
 800b460:	af00      	add	r7, sp, #0
 800b462:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800b464:	bf00      	nop
 800b466:	370c      	adds	r7, #12
 800b468:	46bd      	mov	sp, r7
 800b46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b46e:	4770      	bx	lr

0800b470 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b470:	b480      	push	{r7}
 800b472:	b083      	sub	sp, #12
 800b474:	af00      	add	r7, sp, #0
 800b476:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b478:	bf00      	nop
 800b47a:	370c      	adds	r7, #12
 800b47c:	46bd      	mov	sp, r7
 800b47e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b482:	4770      	bx	lr

0800b484 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b484:	b480      	push	{r7}
 800b486:	b083      	sub	sp, #12
 800b488:	af00      	add	r7, sp, #0
 800b48a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b48c:	bf00      	nop
 800b48e:	370c      	adds	r7, #12
 800b490:	46bd      	mov	sp, r7
 800b492:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b496:	4770      	bx	lr

0800b498 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800b498:	b480      	push	{r7}
 800b49a:	b083      	sub	sp, #12
 800b49c:	af00      	add	r7, sp, #0
 800b49e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800b4a0:	bf00      	nop
 800b4a2:	370c      	adds	r7, #12
 800b4a4:	46bd      	mov	sp, r7
 800b4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4aa:	4770      	bx	lr

0800b4ac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b4ac:	b480      	push	{r7}
 800b4ae:	b083      	sub	sp, #12
 800b4b0:	af00      	add	r7, sp, #0
 800b4b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b4b4:	bf00      	nop
 800b4b6:	370c      	adds	r7, #12
 800b4b8:	46bd      	mov	sp, r7
 800b4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4be:	4770      	bx	lr

0800b4c0 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800b4c0:	b480      	push	{r7}
 800b4c2:	b083      	sub	sp, #12
 800b4c4:	af00      	add	r7, sp, #0
 800b4c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800b4c8:	bf00      	nop
 800b4ca:	370c      	adds	r7, #12
 800b4cc:	46bd      	mov	sp, r7
 800b4ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4d2:	4770      	bx	lr

0800b4d4 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800b4d4:	b580      	push	{r7, lr}
 800b4d6:	b084      	sub	sp, #16
 800b4d8:	af00      	add	r7, sp, #0
 800b4da:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b4e0:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b4e6:	687a      	ldr	r2, [r7, #4]
 800b4e8:	429a      	cmp	r2, r3
 800b4ea:	d107      	bne.n	800b4fc <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	2201      	movs	r2, #1
 800b4f0:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	2201      	movs	r2, #1
 800b4f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b4fa:	e02a      	b.n	800b552 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b500:	687a      	ldr	r2, [r7, #4]
 800b502:	429a      	cmp	r2, r3
 800b504:	d107      	bne.n	800b516 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	2202      	movs	r2, #2
 800b50a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	2201      	movs	r2, #1
 800b510:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b514:	e01d      	b.n	800b552 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b51a:	687a      	ldr	r2, [r7, #4]
 800b51c:	429a      	cmp	r2, r3
 800b51e:	d107      	bne.n	800b530 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	2204      	movs	r2, #4
 800b524:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	2201      	movs	r2, #1
 800b52a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b52e:	e010      	b.n	800b552 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b534:	687a      	ldr	r2, [r7, #4]
 800b536:	429a      	cmp	r2, r3
 800b538:	d107      	bne.n	800b54a <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	2208      	movs	r2, #8
 800b53e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	2201      	movs	r2, #1
 800b544:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b548:	e003      	b.n	800b552 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	2201      	movs	r2, #1
 800b54e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800b552:	68f8      	ldr	r0, [r7, #12]
 800b554:	f7ff ffb4 	bl	800b4c0 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	2200      	movs	r2, #0
 800b55c:	771a      	strb	r2, [r3, #28]
}
 800b55e:	bf00      	nop
 800b560:	3710      	adds	r7, #16
 800b562:	46bd      	mov	sp, r7
 800b564:	bd80      	pop	{r7, pc}

0800b566 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 800b566:	b580      	push	{r7, lr}
 800b568:	b084      	sub	sp, #16
 800b56a:	af00      	add	r7, sp, #0
 800b56c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b572:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b578:	687a      	ldr	r2, [r7, #4]
 800b57a:	429a      	cmp	r2, r3
 800b57c:	d10b      	bne.n	800b596 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	2201      	movs	r2, #1
 800b582:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	69db      	ldr	r3, [r3, #28]
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d136      	bne.n	800b5fa <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	2201      	movs	r2, #1
 800b590:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b594:	e031      	b.n	800b5fa <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b59a:	687a      	ldr	r2, [r7, #4]
 800b59c:	429a      	cmp	r2, r3
 800b59e:	d10b      	bne.n	800b5b8 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	2202      	movs	r2, #2
 800b5a4:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	69db      	ldr	r3, [r3, #28]
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d125      	bne.n	800b5fa <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	2201      	movs	r2, #1
 800b5b2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b5b6:	e020      	b.n	800b5fa <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b5bc:	687a      	ldr	r2, [r7, #4]
 800b5be:	429a      	cmp	r2, r3
 800b5c0:	d10b      	bne.n	800b5da <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	2204      	movs	r2, #4
 800b5c6:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	69db      	ldr	r3, [r3, #28]
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d114      	bne.n	800b5fa <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	2201      	movs	r2, #1
 800b5d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b5d8:	e00f      	b.n	800b5fa <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b5de:	687a      	ldr	r2, [r7, #4]
 800b5e0:	429a      	cmp	r2, r3
 800b5e2:	d10a      	bne.n	800b5fa <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	2208      	movs	r2, #8
 800b5e8:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	69db      	ldr	r3, [r3, #28]
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d103      	bne.n	800b5fa <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	2201      	movs	r2, #1
 800b5f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b5fa:	68f8      	ldr	r0, [r7, #12]
 800b5fc:	f7f5 f8fe 	bl	80007fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	2200      	movs	r2, #0
 800b604:	771a      	strb	r2, [r3, #28]
}
 800b606:	bf00      	nop
 800b608:	3710      	adds	r7, #16
 800b60a:	46bd      	mov	sp, r7
 800b60c:	bd80      	pop	{r7, pc}

0800b60e <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b60e:	b580      	push	{r7, lr}
 800b610:	b084      	sub	sp, #16
 800b612:	af00      	add	r7, sp, #0
 800b614:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b61a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b620:	687a      	ldr	r2, [r7, #4]
 800b622:	429a      	cmp	r2, r3
 800b624:	d103      	bne.n	800b62e <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	2201      	movs	r2, #1
 800b62a:	771a      	strb	r2, [r3, #28]
 800b62c:	e019      	b.n	800b662 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b632:	687a      	ldr	r2, [r7, #4]
 800b634:	429a      	cmp	r2, r3
 800b636:	d103      	bne.n	800b640 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	2202      	movs	r2, #2
 800b63c:	771a      	strb	r2, [r3, #28]
 800b63e:	e010      	b.n	800b662 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b644:	687a      	ldr	r2, [r7, #4]
 800b646:	429a      	cmp	r2, r3
 800b648:	d103      	bne.n	800b652 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	2204      	movs	r2, #4
 800b64e:	771a      	strb	r2, [r3, #28]
 800b650:	e007      	b.n	800b662 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b656:	687a      	ldr	r2, [r7, #4]
 800b658:	429a      	cmp	r2, r3
 800b65a:	d102      	bne.n	800b662 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	2208      	movs	r2, #8
 800b660:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 800b662:	68f8      	ldr	r0, [r7, #12]
 800b664:	f7ff ff18 	bl	800b498 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	2200      	movs	r2, #0
 800b66c:	771a      	strb	r2, [r3, #28]
}
 800b66e:	bf00      	nop
 800b670:	3710      	adds	r7, #16
 800b672:	46bd      	mov	sp, r7
 800b674:	bd80      	pop	{r7, pc}
	...

0800b678 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b678:	b480      	push	{r7}
 800b67a:	b085      	sub	sp, #20
 800b67c:	af00      	add	r7, sp, #0
 800b67e:	6078      	str	r0, [r7, #4]
 800b680:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	4a4a      	ldr	r2, [pc, #296]	@ (800b7b4 <TIM_Base_SetConfig+0x13c>)
 800b68c:	4293      	cmp	r3, r2
 800b68e:	d013      	beq.n	800b6b8 <TIM_Base_SetConfig+0x40>
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b696:	d00f      	beq.n	800b6b8 <TIM_Base_SetConfig+0x40>
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	4a47      	ldr	r2, [pc, #284]	@ (800b7b8 <TIM_Base_SetConfig+0x140>)
 800b69c:	4293      	cmp	r3, r2
 800b69e:	d00b      	beq.n	800b6b8 <TIM_Base_SetConfig+0x40>
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	4a46      	ldr	r2, [pc, #280]	@ (800b7bc <TIM_Base_SetConfig+0x144>)
 800b6a4:	4293      	cmp	r3, r2
 800b6a6:	d007      	beq.n	800b6b8 <TIM_Base_SetConfig+0x40>
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	4a45      	ldr	r2, [pc, #276]	@ (800b7c0 <TIM_Base_SetConfig+0x148>)
 800b6ac:	4293      	cmp	r3, r2
 800b6ae:	d003      	beq.n	800b6b8 <TIM_Base_SetConfig+0x40>
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	4a44      	ldr	r2, [pc, #272]	@ (800b7c4 <TIM_Base_SetConfig+0x14c>)
 800b6b4:	4293      	cmp	r3, r2
 800b6b6:	d108      	bne.n	800b6ca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b6be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b6c0:	683b      	ldr	r3, [r7, #0]
 800b6c2:	685b      	ldr	r3, [r3, #4]
 800b6c4:	68fa      	ldr	r2, [r7, #12]
 800b6c6:	4313      	orrs	r3, r2
 800b6c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	4a39      	ldr	r2, [pc, #228]	@ (800b7b4 <TIM_Base_SetConfig+0x13c>)
 800b6ce:	4293      	cmp	r3, r2
 800b6d0:	d027      	beq.n	800b722 <TIM_Base_SetConfig+0xaa>
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b6d8:	d023      	beq.n	800b722 <TIM_Base_SetConfig+0xaa>
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	4a36      	ldr	r2, [pc, #216]	@ (800b7b8 <TIM_Base_SetConfig+0x140>)
 800b6de:	4293      	cmp	r3, r2
 800b6e0:	d01f      	beq.n	800b722 <TIM_Base_SetConfig+0xaa>
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	4a35      	ldr	r2, [pc, #212]	@ (800b7bc <TIM_Base_SetConfig+0x144>)
 800b6e6:	4293      	cmp	r3, r2
 800b6e8:	d01b      	beq.n	800b722 <TIM_Base_SetConfig+0xaa>
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	4a34      	ldr	r2, [pc, #208]	@ (800b7c0 <TIM_Base_SetConfig+0x148>)
 800b6ee:	4293      	cmp	r3, r2
 800b6f0:	d017      	beq.n	800b722 <TIM_Base_SetConfig+0xaa>
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	4a33      	ldr	r2, [pc, #204]	@ (800b7c4 <TIM_Base_SetConfig+0x14c>)
 800b6f6:	4293      	cmp	r3, r2
 800b6f8:	d013      	beq.n	800b722 <TIM_Base_SetConfig+0xaa>
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	4a32      	ldr	r2, [pc, #200]	@ (800b7c8 <TIM_Base_SetConfig+0x150>)
 800b6fe:	4293      	cmp	r3, r2
 800b700:	d00f      	beq.n	800b722 <TIM_Base_SetConfig+0xaa>
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	4a31      	ldr	r2, [pc, #196]	@ (800b7cc <TIM_Base_SetConfig+0x154>)
 800b706:	4293      	cmp	r3, r2
 800b708:	d00b      	beq.n	800b722 <TIM_Base_SetConfig+0xaa>
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	4a30      	ldr	r2, [pc, #192]	@ (800b7d0 <TIM_Base_SetConfig+0x158>)
 800b70e:	4293      	cmp	r3, r2
 800b710:	d007      	beq.n	800b722 <TIM_Base_SetConfig+0xaa>
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	4a2f      	ldr	r2, [pc, #188]	@ (800b7d4 <TIM_Base_SetConfig+0x15c>)
 800b716:	4293      	cmp	r3, r2
 800b718:	d003      	beq.n	800b722 <TIM_Base_SetConfig+0xaa>
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	4a2e      	ldr	r2, [pc, #184]	@ (800b7d8 <TIM_Base_SetConfig+0x160>)
 800b71e:	4293      	cmp	r3, r2
 800b720:	d108      	bne.n	800b734 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b728:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b72a:	683b      	ldr	r3, [r7, #0]
 800b72c:	68db      	ldr	r3, [r3, #12]
 800b72e:	68fa      	ldr	r2, [r7, #12]
 800b730:	4313      	orrs	r3, r2
 800b732:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800b73a:	683b      	ldr	r3, [r7, #0]
 800b73c:	695b      	ldr	r3, [r3, #20]
 800b73e:	4313      	orrs	r3, r2
 800b740:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	68fa      	ldr	r2, [r7, #12]
 800b746:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b748:	683b      	ldr	r3, [r7, #0]
 800b74a:	689a      	ldr	r2, [r3, #8]
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b750:	683b      	ldr	r3, [r7, #0]
 800b752:	681a      	ldr	r2, [r3, #0]
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	4a16      	ldr	r2, [pc, #88]	@ (800b7b4 <TIM_Base_SetConfig+0x13c>)
 800b75c:	4293      	cmp	r3, r2
 800b75e:	d00f      	beq.n	800b780 <TIM_Base_SetConfig+0x108>
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	4a18      	ldr	r2, [pc, #96]	@ (800b7c4 <TIM_Base_SetConfig+0x14c>)
 800b764:	4293      	cmp	r3, r2
 800b766:	d00b      	beq.n	800b780 <TIM_Base_SetConfig+0x108>
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	4a17      	ldr	r2, [pc, #92]	@ (800b7c8 <TIM_Base_SetConfig+0x150>)
 800b76c:	4293      	cmp	r3, r2
 800b76e:	d007      	beq.n	800b780 <TIM_Base_SetConfig+0x108>
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	4a16      	ldr	r2, [pc, #88]	@ (800b7cc <TIM_Base_SetConfig+0x154>)
 800b774:	4293      	cmp	r3, r2
 800b776:	d003      	beq.n	800b780 <TIM_Base_SetConfig+0x108>
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	4a15      	ldr	r2, [pc, #84]	@ (800b7d0 <TIM_Base_SetConfig+0x158>)
 800b77c:	4293      	cmp	r3, r2
 800b77e:	d103      	bne.n	800b788 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b780:	683b      	ldr	r3, [r7, #0]
 800b782:	691a      	ldr	r2, [r3, #16]
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	2201      	movs	r2, #1
 800b78c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	691b      	ldr	r3, [r3, #16]
 800b792:	f003 0301 	and.w	r3, r3, #1
 800b796:	2b01      	cmp	r3, #1
 800b798:	d105      	bne.n	800b7a6 <TIM_Base_SetConfig+0x12e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	691b      	ldr	r3, [r3, #16]
 800b79e:	f023 0201 	bic.w	r2, r3, #1
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	611a      	str	r2, [r3, #16]
  }
}
 800b7a6:	bf00      	nop
 800b7a8:	3714      	adds	r7, #20
 800b7aa:	46bd      	mov	sp, r7
 800b7ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7b0:	4770      	bx	lr
 800b7b2:	bf00      	nop
 800b7b4:	40010000 	.word	0x40010000
 800b7b8:	40000400 	.word	0x40000400
 800b7bc:	40000800 	.word	0x40000800
 800b7c0:	40000c00 	.word	0x40000c00
 800b7c4:	40010400 	.word	0x40010400
 800b7c8:	40014000 	.word	0x40014000
 800b7cc:	40014400 	.word	0x40014400
 800b7d0:	40014800 	.word	0x40014800
 800b7d4:	4000e000 	.word	0x4000e000
 800b7d8:	4000e400 	.word	0x4000e400

0800b7dc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b7dc:	b480      	push	{r7}
 800b7de:	b087      	sub	sp, #28
 800b7e0:	af00      	add	r7, sp, #0
 800b7e2:	6078      	str	r0, [r7, #4]
 800b7e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	6a1b      	ldr	r3, [r3, #32]
 800b7ea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	6a1b      	ldr	r3, [r3, #32]
 800b7f0:	f023 0201 	bic.w	r2, r3, #1
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	685b      	ldr	r3, [r3, #4]
 800b7fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	699b      	ldr	r3, [r3, #24]
 800b802:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b804:	68fa      	ldr	r2, [r7, #12]
 800b806:	4b37      	ldr	r3, [pc, #220]	@ (800b8e4 <TIM_OC1_SetConfig+0x108>)
 800b808:	4013      	ands	r3, r2
 800b80a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	f023 0303 	bic.w	r3, r3, #3
 800b812:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b814:	683b      	ldr	r3, [r7, #0]
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	68fa      	ldr	r2, [r7, #12]
 800b81a:	4313      	orrs	r3, r2
 800b81c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b81e:	697b      	ldr	r3, [r7, #20]
 800b820:	f023 0302 	bic.w	r3, r3, #2
 800b824:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b826:	683b      	ldr	r3, [r7, #0]
 800b828:	689b      	ldr	r3, [r3, #8]
 800b82a:	697a      	ldr	r2, [r7, #20]
 800b82c:	4313      	orrs	r3, r2
 800b82e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	4a2d      	ldr	r2, [pc, #180]	@ (800b8e8 <TIM_OC1_SetConfig+0x10c>)
 800b834:	4293      	cmp	r3, r2
 800b836:	d00f      	beq.n	800b858 <TIM_OC1_SetConfig+0x7c>
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	4a2c      	ldr	r2, [pc, #176]	@ (800b8ec <TIM_OC1_SetConfig+0x110>)
 800b83c:	4293      	cmp	r3, r2
 800b83e:	d00b      	beq.n	800b858 <TIM_OC1_SetConfig+0x7c>
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	4a2b      	ldr	r2, [pc, #172]	@ (800b8f0 <TIM_OC1_SetConfig+0x114>)
 800b844:	4293      	cmp	r3, r2
 800b846:	d007      	beq.n	800b858 <TIM_OC1_SetConfig+0x7c>
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	4a2a      	ldr	r2, [pc, #168]	@ (800b8f4 <TIM_OC1_SetConfig+0x118>)
 800b84c:	4293      	cmp	r3, r2
 800b84e:	d003      	beq.n	800b858 <TIM_OC1_SetConfig+0x7c>
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	4a29      	ldr	r2, [pc, #164]	@ (800b8f8 <TIM_OC1_SetConfig+0x11c>)
 800b854:	4293      	cmp	r3, r2
 800b856:	d10c      	bne.n	800b872 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b858:	697b      	ldr	r3, [r7, #20]
 800b85a:	f023 0308 	bic.w	r3, r3, #8
 800b85e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b860:	683b      	ldr	r3, [r7, #0]
 800b862:	68db      	ldr	r3, [r3, #12]
 800b864:	697a      	ldr	r2, [r7, #20]
 800b866:	4313      	orrs	r3, r2
 800b868:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b86a:	697b      	ldr	r3, [r7, #20]
 800b86c:	f023 0304 	bic.w	r3, r3, #4
 800b870:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	4a1c      	ldr	r2, [pc, #112]	@ (800b8e8 <TIM_OC1_SetConfig+0x10c>)
 800b876:	4293      	cmp	r3, r2
 800b878:	d00f      	beq.n	800b89a <TIM_OC1_SetConfig+0xbe>
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	4a1b      	ldr	r2, [pc, #108]	@ (800b8ec <TIM_OC1_SetConfig+0x110>)
 800b87e:	4293      	cmp	r3, r2
 800b880:	d00b      	beq.n	800b89a <TIM_OC1_SetConfig+0xbe>
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	4a1a      	ldr	r2, [pc, #104]	@ (800b8f0 <TIM_OC1_SetConfig+0x114>)
 800b886:	4293      	cmp	r3, r2
 800b888:	d007      	beq.n	800b89a <TIM_OC1_SetConfig+0xbe>
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	4a19      	ldr	r2, [pc, #100]	@ (800b8f4 <TIM_OC1_SetConfig+0x118>)
 800b88e:	4293      	cmp	r3, r2
 800b890:	d003      	beq.n	800b89a <TIM_OC1_SetConfig+0xbe>
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	4a18      	ldr	r2, [pc, #96]	@ (800b8f8 <TIM_OC1_SetConfig+0x11c>)
 800b896:	4293      	cmp	r3, r2
 800b898:	d111      	bne.n	800b8be <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b89a:	693b      	ldr	r3, [r7, #16]
 800b89c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b8a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b8a2:	693b      	ldr	r3, [r7, #16]
 800b8a4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800b8a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b8aa:	683b      	ldr	r3, [r7, #0]
 800b8ac:	695b      	ldr	r3, [r3, #20]
 800b8ae:	693a      	ldr	r2, [r7, #16]
 800b8b0:	4313      	orrs	r3, r2
 800b8b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b8b4:	683b      	ldr	r3, [r7, #0]
 800b8b6:	699b      	ldr	r3, [r3, #24]
 800b8b8:	693a      	ldr	r2, [r7, #16]
 800b8ba:	4313      	orrs	r3, r2
 800b8bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	693a      	ldr	r2, [r7, #16]
 800b8c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	68fa      	ldr	r2, [r7, #12]
 800b8c8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b8ca:	683b      	ldr	r3, [r7, #0]
 800b8cc:	685a      	ldr	r2, [r3, #4]
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	697a      	ldr	r2, [r7, #20]
 800b8d6:	621a      	str	r2, [r3, #32]
}
 800b8d8:	bf00      	nop
 800b8da:	371c      	adds	r7, #28
 800b8dc:	46bd      	mov	sp, r7
 800b8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8e2:	4770      	bx	lr
 800b8e4:	fffeff8f 	.word	0xfffeff8f
 800b8e8:	40010000 	.word	0x40010000
 800b8ec:	40010400 	.word	0x40010400
 800b8f0:	40014000 	.word	0x40014000
 800b8f4:	40014400 	.word	0x40014400
 800b8f8:	40014800 	.word	0x40014800

0800b8fc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b8fc:	b480      	push	{r7}
 800b8fe:	b087      	sub	sp, #28
 800b900:	af00      	add	r7, sp, #0
 800b902:	6078      	str	r0, [r7, #4]
 800b904:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	6a1b      	ldr	r3, [r3, #32]
 800b90a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	6a1b      	ldr	r3, [r3, #32]
 800b910:	f023 0210 	bic.w	r2, r3, #16
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	685b      	ldr	r3, [r3, #4]
 800b91c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	699b      	ldr	r3, [r3, #24]
 800b922:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b924:	68fa      	ldr	r2, [r7, #12]
 800b926:	4b34      	ldr	r3, [pc, #208]	@ (800b9f8 <TIM_OC2_SetConfig+0xfc>)
 800b928:	4013      	ands	r3, r2
 800b92a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b932:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b934:	683b      	ldr	r3, [r7, #0]
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	021b      	lsls	r3, r3, #8
 800b93a:	68fa      	ldr	r2, [r7, #12]
 800b93c:	4313      	orrs	r3, r2
 800b93e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b940:	697b      	ldr	r3, [r7, #20]
 800b942:	f023 0320 	bic.w	r3, r3, #32
 800b946:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b948:	683b      	ldr	r3, [r7, #0]
 800b94a:	689b      	ldr	r3, [r3, #8]
 800b94c:	011b      	lsls	r3, r3, #4
 800b94e:	697a      	ldr	r2, [r7, #20]
 800b950:	4313      	orrs	r3, r2
 800b952:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	4a29      	ldr	r2, [pc, #164]	@ (800b9fc <TIM_OC2_SetConfig+0x100>)
 800b958:	4293      	cmp	r3, r2
 800b95a:	d003      	beq.n	800b964 <TIM_OC2_SetConfig+0x68>
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	4a28      	ldr	r2, [pc, #160]	@ (800ba00 <TIM_OC2_SetConfig+0x104>)
 800b960:	4293      	cmp	r3, r2
 800b962:	d10d      	bne.n	800b980 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b964:	697b      	ldr	r3, [r7, #20]
 800b966:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b96a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b96c:	683b      	ldr	r3, [r7, #0]
 800b96e:	68db      	ldr	r3, [r3, #12]
 800b970:	011b      	lsls	r3, r3, #4
 800b972:	697a      	ldr	r2, [r7, #20]
 800b974:	4313      	orrs	r3, r2
 800b976:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b978:	697b      	ldr	r3, [r7, #20]
 800b97a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b97e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	4a1e      	ldr	r2, [pc, #120]	@ (800b9fc <TIM_OC2_SetConfig+0x100>)
 800b984:	4293      	cmp	r3, r2
 800b986:	d00f      	beq.n	800b9a8 <TIM_OC2_SetConfig+0xac>
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	4a1d      	ldr	r2, [pc, #116]	@ (800ba00 <TIM_OC2_SetConfig+0x104>)
 800b98c:	4293      	cmp	r3, r2
 800b98e:	d00b      	beq.n	800b9a8 <TIM_OC2_SetConfig+0xac>
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	4a1c      	ldr	r2, [pc, #112]	@ (800ba04 <TIM_OC2_SetConfig+0x108>)
 800b994:	4293      	cmp	r3, r2
 800b996:	d007      	beq.n	800b9a8 <TIM_OC2_SetConfig+0xac>
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	4a1b      	ldr	r2, [pc, #108]	@ (800ba08 <TIM_OC2_SetConfig+0x10c>)
 800b99c:	4293      	cmp	r3, r2
 800b99e:	d003      	beq.n	800b9a8 <TIM_OC2_SetConfig+0xac>
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	4a1a      	ldr	r2, [pc, #104]	@ (800ba0c <TIM_OC2_SetConfig+0x110>)
 800b9a4:	4293      	cmp	r3, r2
 800b9a6:	d113      	bne.n	800b9d0 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b9a8:	693b      	ldr	r3, [r7, #16]
 800b9aa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800b9ae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b9b0:	693b      	ldr	r3, [r7, #16]
 800b9b2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800b9b6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b9b8:	683b      	ldr	r3, [r7, #0]
 800b9ba:	695b      	ldr	r3, [r3, #20]
 800b9bc:	009b      	lsls	r3, r3, #2
 800b9be:	693a      	ldr	r2, [r7, #16]
 800b9c0:	4313      	orrs	r3, r2
 800b9c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b9c4:	683b      	ldr	r3, [r7, #0]
 800b9c6:	699b      	ldr	r3, [r3, #24]
 800b9c8:	009b      	lsls	r3, r3, #2
 800b9ca:	693a      	ldr	r2, [r7, #16]
 800b9cc:	4313      	orrs	r3, r2
 800b9ce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	693a      	ldr	r2, [r7, #16]
 800b9d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	68fa      	ldr	r2, [r7, #12]
 800b9da:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b9dc:	683b      	ldr	r3, [r7, #0]
 800b9de:	685a      	ldr	r2, [r3, #4]
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	697a      	ldr	r2, [r7, #20]
 800b9e8:	621a      	str	r2, [r3, #32]
}
 800b9ea:	bf00      	nop
 800b9ec:	371c      	adds	r7, #28
 800b9ee:	46bd      	mov	sp, r7
 800b9f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9f4:	4770      	bx	lr
 800b9f6:	bf00      	nop
 800b9f8:	feff8fff 	.word	0xfeff8fff
 800b9fc:	40010000 	.word	0x40010000
 800ba00:	40010400 	.word	0x40010400
 800ba04:	40014000 	.word	0x40014000
 800ba08:	40014400 	.word	0x40014400
 800ba0c:	40014800 	.word	0x40014800

0800ba10 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ba10:	b480      	push	{r7}
 800ba12:	b087      	sub	sp, #28
 800ba14:	af00      	add	r7, sp, #0
 800ba16:	6078      	str	r0, [r7, #4]
 800ba18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	6a1b      	ldr	r3, [r3, #32]
 800ba1e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	6a1b      	ldr	r3, [r3, #32]
 800ba24:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	685b      	ldr	r3, [r3, #4]
 800ba30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	69db      	ldr	r3, [r3, #28]
 800ba36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ba38:	68fa      	ldr	r2, [r7, #12]
 800ba3a:	4b33      	ldr	r3, [pc, #204]	@ (800bb08 <TIM_OC3_SetConfig+0xf8>)
 800ba3c:	4013      	ands	r3, r2
 800ba3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	f023 0303 	bic.w	r3, r3, #3
 800ba46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ba48:	683b      	ldr	r3, [r7, #0]
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	68fa      	ldr	r2, [r7, #12]
 800ba4e:	4313      	orrs	r3, r2
 800ba50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ba52:	697b      	ldr	r3, [r7, #20]
 800ba54:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800ba58:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ba5a:	683b      	ldr	r3, [r7, #0]
 800ba5c:	689b      	ldr	r3, [r3, #8]
 800ba5e:	021b      	lsls	r3, r3, #8
 800ba60:	697a      	ldr	r2, [r7, #20]
 800ba62:	4313      	orrs	r3, r2
 800ba64:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	4a28      	ldr	r2, [pc, #160]	@ (800bb0c <TIM_OC3_SetConfig+0xfc>)
 800ba6a:	4293      	cmp	r3, r2
 800ba6c:	d003      	beq.n	800ba76 <TIM_OC3_SetConfig+0x66>
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	4a27      	ldr	r2, [pc, #156]	@ (800bb10 <TIM_OC3_SetConfig+0x100>)
 800ba72:	4293      	cmp	r3, r2
 800ba74:	d10d      	bne.n	800ba92 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ba76:	697b      	ldr	r3, [r7, #20]
 800ba78:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800ba7c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ba7e:	683b      	ldr	r3, [r7, #0]
 800ba80:	68db      	ldr	r3, [r3, #12]
 800ba82:	021b      	lsls	r3, r3, #8
 800ba84:	697a      	ldr	r2, [r7, #20]
 800ba86:	4313      	orrs	r3, r2
 800ba88:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ba8a:	697b      	ldr	r3, [r7, #20]
 800ba8c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800ba90:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	4a1d      	ldr	r2, [pc, #116]	@ (800bb0c <TIM_OC3_SetConfig+0xfc>)
 800ba96:	4293      	cmp	r3, r2
 800ba98:	d00f      	beq.n	800baba <TIM_OC3_SetConfig+0xaa>
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	4a1c      	ldr	r2, [pc, #112]	@ (800bb10 <TIM_OC3_SetConfig+0x100>)
 800ba9e:	4293      	cmp	r3, r2
 800baa0:	d00b      	beq.n	800baba <TIM_OC3_SetConfig+0xaa>
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	4a1b      	ldr	r2, [pc, #108]	@ (800bb14 <TIM_OC3_SetConfig+0x104>)
 800baa6:	4293      	cmp	r3, r2
 800baa8:	d007      	beq.n	800baba <TIM_OC3_SetConfig+0xaa>
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	4a1a      	ldr	r2, [pc, #104]	@ (800bb18 <TIM_OC3_SetConfig+0x108>)
 800baae:	4293      	cmp	r3, r2
 800bab0:	d003      	beq.n	800baba <TIM_OC3_SetConfig+0xaa>
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	4a19      	ldr	r2, [pc, #100]	@ (800bb1c <TIM_OC3_SetConfig+0x10c>)
 800bab6:	4293      	cmp	r3, r2
 800bab8:	d113      	bne.n	800bae2 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800baba:	693b      	ldr	r3, [r7, #16]
 800babc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800bac0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800bac2:	693b      	ldr	r3, [r7, #16]
 800bac4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800bac8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800baca:	683b      	ldr	r3, [r7, #0]
 800bacc:	695b      	ldr	r3, [r3, #20]
 800bace:	011b      	lsls	r3, r3, #4
 800bad0:	693a      	ldr	r2, [r7, #16]
 800bad2:	4313      	orrs	r3, r2
 800bad4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800bad6:	683b      	ldr	r3, [r7, #0]
 800bad8:	699b      	ldr	r3, [r3, #24]
 800bada:	011b      	lsls	r3, r3, #4
 800badc:	693a      	ldr	r2, [r7, #16]
 800bade:	4313      	orrs	r3, r2
 800bae0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	693a      	ldr	r2, [r7, #16]
 800bae6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	68fa      	ldr	r2, [r7, #12]
 800baec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800baee:	683b      	ldr	r3, [r7, #0]
 800baf0:	685a      	ldr	r2, [r3, #4]
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	697a      	ldr	r2, [r7, #20]
 800bafa:	621a      	str	r2, [r3, #32]
}
 800bafc:	bf00      	nop
 800bafe:	371c      	adds	r7, #28
 800bb00:	46bd      	mov	sp, r7
 800bb02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb06:	4770      	bx	lr
 800bb08:	fffeff8f 	.word	0xfffeff8f
 800bb0c:	40010000 	.word	0x40010000
 800bb10:	40010400 	.word	0x40010400
 800bb14:	40014000 	.word	0x40014000
 800bb18:	40014400 	.word	0x40014400
 800bb1c:	40014800 	.word	0x40014800

0800bb20 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800bb20:	b480      	push	{r7}
 800bb22:	b087      	sub	sp, #28
 800bb24:	af00      	add	r7, sp, #0
 800bb26:	6078      	str	r0, [r7, #4]
 800bb28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	6a1b      	ldr	r3, [r3, #32]
 800bb2e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	6a1b      	ldr	r3, [r3, #32]
 800bb34:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	685b      	ldr	r3, [r3, #4]
 800bb40:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	69db      	ldr	r3, [r3, #28]
 800bb46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800bb48:	68fa      	ldr	r2, [r7, #12]
 800bb4a:	4b24      	ldr	r3, [pc, #144]	@ (800bbdc <TIM_OC4_SetConfig+0xbc>)
 800bb4c:	4013      	ands	r3, r2
 800bb4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800bb56:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bb58:	683b      	ldr	r3, [r7, #0]
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	021b      	lsls	r3, r3, #8
 800bb5e:	68fa      	ldr	r2, [r7, #12]
 800bb60:	4313      	orrs	r3, r2
 800bb62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800bb64:	693b      	ldr	r3, [r7, #16]
 800bb66:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800bb6a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800bb6c:	683b      	ldr	r3, [r7, #0]
 800bb6e:	689b      	ldr	r3, [r3, #8]
 800bb70:	031b      	lsls	r3, r3, #12
 800bb72:	693a      	ldr	r2, [r7, #16]
 800bb74:	4313      	orrs	r3, r2
 800bb76:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	4a19      	ldr	r2, [pc, #100]	@ (800bbe0 <TIM_OC4_SetConfig+0xc0>)
 800bb7c:	4293      	cmp	r3, r2
 800bb7e:	d00f      	beq.n	800bba0 <TIM_OC4_SetConfig+0x80>
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	4a18      	ldr	r2, [pc, #96]	@ (800bbe4 <TIM_OC4_SetConfig+0xc4>)
 800bb84:	4293      	cmp	r3, r2
 800bb86:	d00b      	beq.n	800bba0 <TIM_OC4_SetConfig+0x80>
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	4a17      	ldr	r2, [pc, #92]	@ (800bbe8 <TIM_OC4_SetConfig+0xc8>)
 800bb8c:	4293      	cmp	r3, r2
 800bb8e:	d007      	beq.n	800bba0 <TIM_OC4_SetConfig+0x80>
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	4a16      	ldr	r2, [pc, #88]	@ (800bbec <TIM_OC4_SetConfig+0xcc>)
 800bb94:	4293      	cmp	r3, r2
 800bb96:	d003      	beq.n	800bba0 <TIM_OC4_SetConfig+0x80>
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	4a15      	ldr	r2, [pc, #84]	@ (800bbf0 <TIM_OC4_SetConfig+0xd0>)
 800bb9c:	4293      	cmp	r3, r2
 800bb9e:	d109      	bne.n	800bbb4 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800bba0:	697b      	ldr	r3, [r7, #20]
 800bba2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800bba6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800bba8:	683b      	ldr	r3, [r7, #0]
 800bbaa:	695b      	ldr	r3, [r3, #20]
 800bbac:	019b      	lsls	r3, r3, #6
 800bbae:	697a      	ldr	r2, [r7, #20]
 800bbb0:	4313      	orrs	r3, r2
 800bbb2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	697a      	ldr	r2, [r7, #20]
 800bbb8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	68fa      	ldr	r2, [r7, #12]
 800bbbe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800bbc0:	683b      	ldr	r3, [r7, #0]
 800bbc2:	685a      	ldr	r2, [r3, #4]
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	693a      	ldr	r2, [r7, #16]
 800bbcc:	621a      	str	r2, [r3, #32]
}
 800bbce:	bf00      	nop
 800bbd0:	371c      	adds	r7, #28
 800bbd2:	46bd      	mov	sp, r7
 800bbd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbd8:	4770      	bx	lr
 800bbda:	bf00      	nop
 800bbdc:	feff8fff 	.word	0xfeff8fff
 800bbe0:	40010000 	.word	0x40010000
 800bbe4:	40010400 	.word	0x40010400
 800bbe8:	40014000 	.word	0x40014000
 800bbec:	40014400 	.word	0x40014400
 800bbf0:	40014800 	.word	0x40014800

0800bbf4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800bbf4:	b480      	push	{r7}
 800bbf6:	b087      	sub	sp, #28
 800bbf8:	af00      	add	r7, sp, #0
 800bbfa:	6078      	str	r0, [r7, #4]
 800bbfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	6a1b      	ldr	r3, [r3, #32]
 800bc02:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	6a1b      	ldr	r3, [r3, #32]
 800bc08:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	685b      	ldr	r3, [r3, #4]
 800bc14:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bc1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800bc1c:	68fa      	ldr	r2, [r7, #12]
 800bc1e:	4b21      	ldr	r3, [pc, #132]	@ (800bca4 <TIM_OC5_SetConfig+0xb0>)
 800bc20:	4013      	ands	r3, r2
 800bc22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bc24:	683b      	ldr	r3, [r7, #0]
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	68fa      	ldr	r2, [r7, #12]
 800bc2a:	4313      	orrs	r3, r2
 800bc2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800bc2e:	693b      	ldr	r3, [r7, #16]
 800bc30:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800bc34:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800bc36:	683b      	ldr	r3, [r7, #0]
 800bc38:	689b      	ldr	r3, [r3, #8]
 800bc3a:	041b      	lsls	r3, r3, #16
 800bc3c:	693a      	ldr	r2, [r7, #16]
 800bc3e:	4313      	orrs	r3, r2
 800bc40:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	4a18      	ldr	r2, [pc, #96]	@ (800bca8 <TIM_OC5_SetConfig+0xb4>)
 800bc46:	4293      	cmp	r3, r2
 800bc48:	d00f      	beq.n	800bc6a <TIM_OC5_SetConfig+0x76>
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	4a17      	ldr	r2, [pc, #92]	@ (800bcac <TIM_OC5_SetConfig+0xb8>)
 800bc4e:	4293      	cmp	r3, r2
 800bc50:	d00b      	beq.n	800bc6a <TIM_OC5_SetConfig+0x76>
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	4a16      	ldr	r2, [pc, #88]	@ (800bcb0 <TIM_OC5_SetConfig+0xbc>)
 800bc56:	4293      	cmp	r3, r2
 800bc58:	d007      	beq.n	800bc6a <TIM_OC5_SetConfig+0x76>
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	4a15      	ldr	r2, [pc, #84]	@ (800bcb4 <TIM_OC5_SetConfig+0xc0>)
 800bc5e:	4293      	cmp	r3, r2
 800bc60:	d003      	beq.n	800bc6a <TIM_OC5_SetConfig+0x76>
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	4a14      	ldr	r2, [pc, #80]	@ (800bcb8 <TIM_OC5_SetConfig+0xc4>)
 800bc66:	4293      	cmp	r3, r2
 800bc68:	d109      	bne.n	800bc7e <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800bc6a:	697b      	ldr	r3, [r7, #20]
 800bc6c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800bc70:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800bc72:	683b      	ldr	r3, [r7, #0]
 800bc74:	695b      	ldr	r3, [r3, #20]
 800bc76:	021b      	lsls	r3, r3, #8
 800bc78:	697a      	ldr	r2, [r7, #20]
 800bc7a:	4313      	orrs	r3, r2
 800bc7c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	697a      	ldr	r2, [r7, #20]
 800bc82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	68fa      	ldr	r2, [r7, #12]
 800bc88:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800bc8a:	683b      	ldr	r3, [r7, #0]
 800bc8c:	685a      	ldr	r2, [r3, #4]
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	693a      	ldr	r2, [r7, #16]
 800bc96:	621a      	str	r2, [r3, #32]
}
 800bc98:	bf00      	nop
 800bc9a:	371c      	adds	r7, #28
 800bc9c:	46bd      	mov	sp, r7
 800bc9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bca2:	4770      	bx	lr
 800bca4:	fffeff8f 	.word	0xfffeff8f
 800bca8:	40010000 	.word	0x40010000
 800bcac:	40010400 	.word	0x40010400
 800bcb0:	40014000 	.word	0x40014000
 800bcb4:	40014400 	.word	0x40014400
 800bcb8:	40014800 	.word	0x40014800

0800bcbc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800bcbc:	b480      	push	{r7}
 800bcbe:	b087      	sub	sp, #28
 800bcc0:	af00      	add	r7, sp, #0
 800bcc2:	6078      	str	r0, [r7, #4]
 800bcc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	6a1b      	ldr	r3, [r3, #32]
 800bcca:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	6a1b      	ldr	r3, [r3, #32]
 800bcd0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	685b      	ldr	r3, [r3, #4]
 800bcdc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bce2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800bce4:	68fa      	ldr	r2, [r7, #12]
 800bce6:	4b22      	ldr	r3, [pc, #136]	@ (800bd70 <TIM_OC6_SetConfig+0xb4>)
 800bce8:	4013      	ands	r3, r2
 800bcea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bcec:	683b      	ldr	r3, [r7, #0]
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	021b      	lsls	r3, r3, #8
 800bcf2:	68fa      	ldr	r2, [r7, #12]
 800bcf4:	4313      	orrs	r3, r2
 800bcf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800bcf8:	693b      	ldr	r3, [r7, #16]
 800bcfa:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800bcfe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800bd00:	683b      	ldr	r3, [r7, #0]
 800bd02:	689b      	ldr	r3, [r3, #8]
 800bd04:	051b      	lsls	r3, r3, #20
 800bd06:	693a      	ldr	r2, [r7, #16]
 800bd08:	4313      	orrs	r3, r2
 800bd0a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	4a19      	ldr	r2, [pc, #100]	@ (800bd74 <TIM_OC6_SetConfig+0xb8>)
 800bd10:	4293      	cmp	r3, r2
 800bd12:	d00f      	beq.n	800bd34 <TIM_OC6_SetConfig+0x78>
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	4a18      	ldr	r2, [pc, #96]	@ (800bd78 <TIM_OC6_SetConfig+0xbc>)
 800bd18:	4293      	cmp	r3, r2
 800bd1a:	d00b      	beq.n	800bd34 <TIM_OC6_SetConfig+0x78>
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	4a17      	ldr	r2, [pc, #92]	@ (800bd7c <TIM_OC6_SetConfig+0xc0>)
 800bd20:	4293      	cmp	r3, r2
 800bd22:	d007      	beq.n	800bd34 <TIM_OC6_SetConfig+0x78>
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	4a16      	ldr	r2, [pc, #88]	@ (800bd80 <TIM_OC6_SetConfig+0xc4>)
 800bd28:	4293      	cmp	r3, r2
 800bd2a:	d003      	beq.n	800bd34 <TIM_OC6_SetConfig+0x78>
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	4a15      	ldr	r2, [pc, #84]	@ (800bd84 <TIM_OC6_SetConfig+0xc8>)
 800bd30:	4293      	cmp	r3, r2
 800bd32:	d109      	bne.n	800bd48 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800bd34:	697b      	ldr	r3, [r7, #20]
 800bd36:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800bd3a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800bd3c:	683b      	ldr	r3, [r7, #0]
 800bd3e:	695b      	ldr	r3, [r3, #20]
 800bd40:	029b      	lsls	r3, r3, #10
 800bd42:	697a      	ldr	r2, [r7, #20]
 800bd44:	4313      	orrs	r3, r2
 800bd46:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	697a      	ldr	r2, [r7, #20]
 800bd4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	68fa      	ldr	r2, [r7, #12]
 800bd52:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800bd54:	683b      	ldr	r3, [r7, #0]
 800bd56:	685a      	ldr	r2, [r3, #4]
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	693a      	ldr	r2, [r7, #16]
 800bd60:	621a      	str	r2, [r3, #32]
}
 800bd62:	bf00      	nop
 800bd64:	371c      	adds	r7, #28
 800bd66:	46bd      	mov	sp, r7
 800bd68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd6c:	4770      	bx	lr
 800bd6e:	bf00      	nop
 800bd70:	feff8fff 	.word	0xfeff8fff
 800bd74:	40010000 	.word	0x40010000
 800bd78:	40010400 	.word	0x40010400
 800bd7c:	40014000 	.word	0x40014000
 800bd80:	40014400 	.word	0x40014400
 800bd84:	40014800 	.word	0x40014800

0800bd88 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bd88:	b480      	push	{r7}
 800bd8a:	b087      	sub	sp, #28
 800bd8c:	af00      	add	r7, sp, #0
 800bd8e:	60f8      	str	r0, [r7, #12]
 800bd90:	60b9      	str	r1, [r7, #8]
 800bd92:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	6a1b      	ldr	r3, [r3, #32]
 800bd98:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bd9a:	68fb      	ldr	r3, [r7, #12]
 800bd9c:	6a1b      	ldr	r3, [r3, #32]
 800bd9e:	f023 0201 	bic.w	r2, r3, #1
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bda6:	68fb      	ldr	r3, [r7, #12]
 800bda8:	699b      	ldr	r3, [r3, #24]
 800bdaa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800bdac:	693b      	ldr	r3, [r7, #16]
 800bdae:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800bdb2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	011b      	lsls	r3, r3, #4
 800bdb8:	693a      	ldr	r2, [r7, #16]
 800bdba:	4313      	orrs	r3, r2
 800bdbc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800bdbe:	697b      	ldr	r3, [r7, #20]
 800bdc0:	f023 030a 	bic.w	r3, r3, #10
 800bdc4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800bdc6:	697a      	ldr	r2, [r7, #20]
 800bdc8:	68bb      	ldr	r3, [r7, #8]
 800bdca:	4313      	orrs	r3, r2
 800bdcc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	693a      	ldr	r2, [r7, #16]
 800bdd2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	697a      	ldr	r2, [r7, #20]
 800bdd8:	621a      	str	r2, [r3, #32]
}
 800bdda:	bf00      	nop
 800bddc:	371c      	adds	r7, #28
 800bdde:	46bd      	mov	sp, r7
 800bde0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bde4:	4770      	bx	lr

0800bde6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bde6:	b480      	push	{r7}
 800bde8:	b087      	sub	sp, #28
 800bdea:	af00      	add	r7, sp, #0
 800bdec:	60f8      	str	r0, [r7, #12]
 800bdee:	60b9      	str	r1, [r7, #8]
 800bdf0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	6a1b      	ldr	r3, [r3, #32]
 800bdf6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	6a1b      	ldr	r3, [r3, #32]
 800bdfc:	f023 0210 	bic.w	r2, r3, #16
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	699b      	ldr	r3, [r3, #24]
 800be08:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800be0a:	693b      	ldr	r3, [r7, #16]
 800be0c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800be10:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	031b      	lsls	r3, r3, #12
 800be16:	693a      	ldr	r2, [r7, #16]
 800be18:	4313      	orrs	r3, r2
 800be1a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800be1c:	697b      	ldr	r3, [r7, #20]
 800be1e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800be22:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800be24:	68bb      	ldr	r3, [r7, #8]
 800be26:	011b      	lsls	r3, r3, #4
 800be28:	697a      	ldr	r2, [r7, #20]
 800be2a:	4313      	orrs	r3, r2
 800be2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800be2e:	68fb      	ldr	r3, [r7, #12]
 800be30:	693a      	ldr	r2, [r7, #16]
 800be32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800be34:	68fb      	ldr	r3, [r7, #12]
 800be36:	697a      	ldr	r2, [r7, #20]
 800be38:	621a      	str	r2, [r3, #32]
}
 800be3a:	bf00      	nop
 800be3c:	371c      	adds	r7, #28
 800be3e:	46bd      	mov	sp, r7
 800be40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be44:	4770      	bx	lr
	...

0800be48 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800be48:	b480      	push	{r7}
 800be4a:	b085      	sub	sp, #20
 800be4c:	af00      	add	r7, sp, #0
 800be4e:	6078      	str	r0, [r7, #4]
 800be50:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	689b      	ldr	r3, [r3, #8]
 800be56:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800be58:	68fa      	ldr	r2, [r7, #12]
 800be5a:	4b09      	ldr	r3, [pc, #36]	@ (800be80 <TIM_ITRx_SetConfig+0x38>)
 800be5c:	4013      	ands	r3, r2
 800be5e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800be60:	683a      	ldr	r2, [r7, #0]
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	4313      	orrs	r3, r2
 800be66:	f043 0307 	orr.w	r3, r3, #7
 800be6a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	68fa      	ldr	r2, [r7, #12]
 800be70:	609a      	str	r2, [r3, #8]
}
 800be72:	bf00      	nop
 800be74:	3714      	adds	r7, #20
 800be76:	46bd      	mov	sp, r7
 800be78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be7c:	4770      	bx	lr
 800be7e:	bf00      	nop
 800be80:	ffcfff8f 	.word	0xffcfff8f

0800be84 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800be84:	b480      	push	{r7}
 800be86:	b087      	sub	sp, #28
 800be88:	af00      	add	r7, sp, #0
 800be8a:	60f8      	str	r0, [r7, #12]
 800be8c:	60b9      	str	r1, [r7, #8]
 800be8e:	607a      	str	r2, [r7, #4]
 800be90:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	689b      	ldr	r3, [r3, #8]
 800be96:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800be98:	697b      	ldr	r3, [r7, #20]
 800be9a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800be9e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800bea0:	683b      	ldr	r3, [r7, #0]
 800bea2:	021a      	lsls	r2, r3, #8
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	431a      	orrs	r2, r3
 800bea8:	68bb      	ldr	r3, [r7, #8]
 800beaa:	4313      	orrs	r3, r2
 800beac:	697a      	ldr	r2, [r7, #20]
 800beae:	4313      	orrs	r3, r2
 800beb0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800beb2:	68fb      	ldr	r3, [r7, #12]
 800beb4:	697a      	ldr	r2, [r7, #20]
 800beb6:	609a      	str	r2, [r3, #8]
}
 800beb8:	bf00      	nop
 800beba:	371c      	adds	r7, #28
 800bebc:	46bd      	mov	sp, r7
 800bebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bec2:	4770      	bx	lr

0800bec4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800bec4:	b480      	push	{r7}
 800bec6:	b087      	sub	sp, #28
 800bec8:	af00      	add	r7, sp, #0
 800beca:	60f8      	str	r0, [r7, #12]
 800becc:	60b9      	str	r1, [r7, #8]
 800bece:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800bed0:	68bb      	ldr	r3, [r7, #8]
 800bed2:	f003 031f 	and.w	r3, r3, #31
 800bed6:	2201      	movs	r2, #1
 800bed8:	fa02 f303 	lsl.w	r3, r2, r3
 800bedc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	6a1a      	ldr	r2, [r3, #32]
 800bee2:	697b      	ldr	r3, [r7, #20]
 800bee4:	43db      	mvns	r3, r3
 800bee6:	401a      	ands	r2, r3
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800beec:	68fb      	ldr	r3, [r7, #12]
 800beee:	6a1a      	ldr	r2, [r3, #32]
 800bef0:	68bb      	ldr	r3, [r7, #8]
 800bef2:	f003 031f 	and.w	r3, r3, #31
 800bef6:	6879      	ldr	r1, [r7, #4]
 800bef8:	fa01 f303 	lsl.w	r3, r1, r3
 800befc:	431a      	orrs	r2, r3
 800befe:	68fb      	ldr	r3, [r7, #12]
 800bf00:	621a      	str	r2, [r3, #32]
}
 800bf02:	bf00      	nop
 800bf04:	371c      	adds	r7, #28
 800bf06:	46bd      	mov	sp, r7
 800bf08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf0c:	4770      	bx	lr
	...

0800bf10 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800bf10:	b480      	push	{r7}
 800bf12:	b085      	sub	sp, #20
 800bf14:	af00      	add	r7, sp, #0
 800bf16:	6078      	str	r0, [r7, #4]
 800bf18:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800bf20:	2b01      	cmp	r3, #1
 800bf22:	d101      	bne.n	800bf28 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800bf24:	2302      	movs	r3, #2
 800bf26:	e077      	b.n	800c018 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	2201      	movs	r2, #1
 800bf2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	2202      	movs	r2, #2
 800bf34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	685b      	ldr	r3, [r3, #4]
 800bf3e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	689b      	ldr	r3, [r3, #8]
 800bf46:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	4a35      	ldr	r2, [pc, #212]	@ (800c024 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800bf4e:	4293      	cmp	r3, r2
 800bf50:	d004      	beq.n	800bf5c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	4a34      	ldr	r2, [pc, #208]	@ (800c028 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800bf58:	4293      	cmp	r3, r2
 800bf5a:	d108      	bne.n	800bf6e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800bf62:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800bf64:	683b      	ldr	r3, [r7, #0]
 800bf66:	685b      	ldr	r3, [r3, #4]
 800bf68:	68fa      	ldr	r2, [r7, #12]
 800bf6a:	4313      	orrs	r3, r2
 800bf6c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bf74:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800bf76:	683b      	ldr	r3, [r7, #0]
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	68fa      	ldr	r2, [r7, #12]
 800bf7c:	4313      	orrs	r3, r2
 800bf7e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	68fa      	ldr	r2, [r7, #12]
 800bf86:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	4a25      	ldr	r2, [pc, #148]	@ (800c024 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800bf8e:	4293      	cmp	r3, r2
 800bf90:	d02c      	beq.n	800bfec <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bf9a:	d027      	beq.n	800bfec <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	4a22      	ldr	r2, [pc, #136]	@ (800c02c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800bfa2:	4293      	cmp	r3, r2
 800bfa4:	d022      	beq.n	800bfec <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	4a21      	ldr	r2, [pc, #132]	@ (800c030 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800bfac:	4293      	cmp	r3, r2
 800bfae:	d01d      	beq.n	800bfec <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	4a1f      	ldr	r2, [pc, #124]	@ (800c034 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800bfb6:	4293      	cmp	r3, r2
 800bfb8:	d018      	beq.n	800bfec <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	4a1a      	ldr	r2, [pc, #104]	@ (800c028 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800bfc0:	4293      	cmp	r3, r2
 800bfc2:	d013      	beq.n	800bfec <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	4a1b      	ldr	r2, [pc, #108]	@ (800c038 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800bfca:	4293      	cmp	r3, r2
 800bfcc:	d00e      	beq.n	800bfec <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	4a1a      	ldr	r2, [pc, #104]	@ (800c03c <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800bfd4:	4293      	cmp	r3, r2
 800bfd6:	d009      	beq.n	800bfec <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	4a18      	ldr	r2, [pc, #96]	@ (800c040 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800bfde:	4293      	cmp	r3, r2
 800bfe0:	d004      	beq.n	800bfec <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	4a17      	ldr	r2, [pc, #92]	@ (800c044 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800bfe8:	4293      	cmp	r3, r2
 800bfea:	d10c      	bne.n	800c006 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800bfec:	68bb      	ldr	r3, [r7, #8]
 800bfee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bff2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bff4:	683b      	ldr	r3, [r7, #0]
 800bff6:	689b      	ldr	r3, [r3, #8]
 800bff8:	68ba      	ldr	r2, [r7, #8]
 800bffa:	4313      	orrs	r3, r2
 800bffc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	68ba      	ldr	r2, [r7, #8]
 800c004:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	2201      	movs	r2, #1
 800c00a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	2200      	movs	r2, #0
 800c012:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800c016:	2300      	movs	r3, #0
}
 800c018:	4618      	mov	r0, r3
 800c01a:	3714      	adds	r7, #20
 800c01c:	46bd      	mov	sp, r7
 800c01e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c022:	4770      	bx	lr
 800c024:	40010000 	.word	0x40010000
 800c028:	40010400 	.word	0x40010400
 800c02c:	40000400 	.word	0x40000400
 800c030:	40000800 	.word	0x40000800
 800c034:	40000c00 	.word	0x40000c00
 800c038:	40001800 	.word	0x40001800
 800c03c:	40014000 	.word	0x40014000
 800c040:	4000e000 	.word	0x4000e000
 800c044:	4000e400 	.word	0x4000e400

0800c048 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c048:	b480      	push	{r7}
 800c04a:	b083      	sub	sp, #12
 800c04c:	af00      	add	r7, sp, #0
 800c04e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c050:	bf00      	nop
 800c052:	370c      	adds	r7, #12
 800c054:	46bd      	mov	sp, r7
 800c056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c05a:	4770      	bx	lr

0800c05c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c05c:	b480      	push	{r7}
 800c05e:	b083      	sub	sp, #12
 800c060:	af00      	add	r7, sp, #0
 800c062:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c064:	bf00      	nop
 800c066:	370c      	adds	r7, #12
 800c068:	46bd      	mov	sp, r7
 800c06a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c06e:	4770      	bx	lr

0800c070 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800c070:	b480      	push	{r7}
 800c072:	b083      	sub	sp, #12
 800c074:	af00      	add	r7, sp, #0
 800c076:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800c078:	bf00      	nop
 800c07a:	370c      	adds	r7, #12
 800c07c:	46bd      	mov	sp, r7
 800c07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c082:	4770      	bx	lr

0800c084 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c084:	b580      	push	{r7, lr}
 800c086:	b082      	sub	sp, #8
 800c088:	af00      	add	r7, sp, #0
 800c08a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	2b00      	cmp	r3, #0
 800c090:	d101      	bne.n	800c096 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c092:	2301      	movs	r3, #1
 800c094:	e042      	b.n	800c11c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d106      	bne.n	800c0ae <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	2200      	movs	r2, #0
 800c0a4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c0a8:	6878      	ldr	r0, [r7, #4]
 800c0aa:	f7f5 ff7b 	bl	8001fa4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	2224      	movs	r2, #36	@ 0x24
 800c0b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	681a      	ldr	r2, [r3, #0]
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	f022 0201 	bic.w	r2, r2, #1
 800c0c4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d002      	beq.n	800c0d4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800c0ce:	6878      	ldr	r0, [r7, #4]
 800c0d0:	f000 fe94 	bl	800cdfc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c0d4:	6878      	ldr	r0, [r7, #4]
 800c0d6:	f000 f825 	bl	800c124 <UART_SetConfig>
 800c0da:	4603      	mov	r3, r0
 800c0dc:	2b01      	cmp	r3, #1
 800c0de:	d101      	bne.n	800c0e4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800c0e0:	2301      	movs	r3, #1
 800c0e2:	e01b      	b.n	800c11c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	685a      	ldr	r2, [r3, #4]
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800c0f2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	689a      	ldr	r2, [r3, #8]
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800c102:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	681a      	ldr	r2, [r3, #0]
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	f042 0201 	orr.w	r2, r2, #1
 800c112:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c114:	6878      	ldr	r0, [r7, #4]
 800c116:	f000 ff13 	bl	800cf40 <UART_CheckIdleState>
 800c11a:	4603      	mov	r3, r0
}
 800c11c:	4618      	mov	r0, r3
 800c11e:	3708      	adds	r7, #8
 800c120:	46bd      	mov	sp, r7
 800c122:	bd80      	pop	{r7, pc}

0800c124 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c124:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c128:	b092      	sub	sp, #72	@ 0x48
 800c12a:	af00      	add	r7, sp, #0
 800c12c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c12e:	2300      	movs	r3, #0
 800c130:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c134:	697b      	ldr	r3, [r7, #20]
 800c136:	689a      	ldr	r2, [r3, #8]
 800c138:	697b      	ldr	r3, [r7, #20]
 800c13a:	691b      	ldr	r3, [r3, #16]
 800c13c:	431a      	orrs	r2, r3
 800c13e:	697b      	ldr	r3, [r7, #20]
 800c140:	695b      	ldr	r3, [r3, #20]
 800c142:	431a      	orrs	r2, r3
 800c144:	697b      	ldr	r3, [r7, #20]
 800c146:	69db      	ldr	r3, [r3, #28]
 800c148:	4313      	orrs	r3, r2
 800c14a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c14c:	697b      	ldr	r3, [r7, #20]
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	681a      	ldr	r2, [r3, #0]
 800c152:	4bbe      	ldr	r3, [pc, #760]	@ (800c44c <UART_SetConfig+0x328>)
 800c154:	4013      	ands	r3, r2
 800c156:	697a      	ldr	r2, [r7, #20]
 800c158:	6812      	ldr	r2, [r2, #0]
 800c15a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800c15c:	430b      	orrs	r3, r1
 800c15e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c160:	697b      	ldr	r3, [r7, #20]
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	685b      	ldr	r3, [r3, #4]
 800c166:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800c16a:	697b      	ldr	r3, [r7, #20]
 800c16c:	68da      	ldr	r2, [r3, #12]
 800c16e:	697b      	ldr	r3, [r7, #20]
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	430a      	orrs	r2, r1
 800c174:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c176:	697b      	ldr	r3, [r7, #20]
 800c178:	699b      	ldr	r3, [r3, #24]
 800c17a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c17c:	697b      	ldr	r3, [r7, #20]
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	4ab3      	ldr	r2, [pc, #716]	@ (800c450 <UART_SetConfig+0x32c>)
 800c182:	4293      	cmp	r3, r2
 800c184:	d004      	beq.n	800c190 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c186:	697b      	ldr	r3, [r7, #20]
 800c188:	6a1b      	ldr	r3, [r3, #32]
 800c18a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c18c:	4313      	orrs	r3, r2
 800c18e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c190:	697b      	ldr	r3, [r7, #20]
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	689a      	ldr	r2, [r3, #8]
 800c196:	4baf      	ldr	r3, [pc, #700]	@ (800c454 <UART_SetConfig+0x330>)
 800c198:	4013      	ands	r3, r2
 800c19a:	697a      	ldr	r2, [r7, #20]
 800c19c:	6812      	ldr	r2, [r2, #0]
 800c19e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800c1a0:	430b      	orrs	r3, r1
 800c1a2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c1a4:	697b      	ldr	r3, [r7, #20]
 800c1a6:	681b      	ldr	r3, [r3, #0]
 800c1a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c1aa:	f023 010f 	bic.w	r1, r3, #15
 800c1ae:	697b      	ldr	r3, [r7, #20]
 800c1b0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c1b2:	697b      	ldr	r3, [r7, #20]
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	430a      	orrs	r2, r1
 800c1b8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c1ba:	697b      	ldr	r3, [r7, #20]
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	4aa6      	ldr	r2, [pc, #664]	@ (800c458 <UART_SetConfig+0x334>)
 800c1c0:	4293      	cmp	r3, r2
 800c1c2:	d177      	bne.n	800c2b4 <UART_SetConfig+0x190>
 800c1c4:	4ba5      	ldr	r3, [pc, #660]	@ (800c45c <UART_SetConfig+0x338>)
 800c1c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c1c8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c1cc:	2b28      	cmp	r3, #40	@ 0x28
 800c1ce:	d86d      	bhi.n	800c2ac <UART_SetConfig+0x188>
 800c1d0:	a201      	add	r2, pc, #4	@ (adr r2, 800c1d8 <UART_SetConfig+0xb4>)
 800c1d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1d6:	bf00      	nop
 800c1d8:	0800c27d 	.word	0x0800c27d
 800c1dc:	0800c2ad 	.word	0x0800c2ad
 800c1e0:	0800c2ad 	.word	0x0800c2ad
 800c1e4:	0800c2ad 	.word	0x0800c2ad
 800c1e8:	0800c2ad 	.word	0x0800c2ad
 800c1ec:	0800c2ad 	.word	0x0800c2ad
 800c1f0:	0800c2ad 	.word	0x0800c2ad
 800c1f4:	0800c2ad 	.word	0x0800c2ad
 800c1f8:	0800c285 	.word	0x0800c285
 800c1fc:	0800c2ad 	.word	0x0800c2ad
 800c200:	0800c2ad 	.word	0x0800c2ad
 800c204:	0800c2ad 	.word	0x0800c2ad
 800c208:	0800c2ad 	.word	0x0800c2ad
 800c20c:	0800c2ad 	.word	0x0800c2ad
 800c210:	0800c2ad 	.word	0x0800c2ad
 800c214:	0800c2ad 	.word	0x0800c2ad
 800c218:	0800c28d 	.word	0x0800c28d
 800c21c:	0800c2ad 	.word	0x0800c2ad
 800c220:	0800c2ad 	.word	0x0800c2ad
 800c224:	0800c2ad 	.word	0x0800c2ad
 800c228:	0800c2ad 	.word	0x0800c2ad
 800c22c:	0800c2ad 	.word	0x0800c2ad
 800c230:	0800c2ad 	.word	0x0800c2ad
 800c234:	0800c2ad 	.word	0x0800c2ad
 800c238:	0800c295 	.word	0x0800c295
 800c23c:	0800c2ad 	.word	0x0800c2ad
 800c240:	0800c2ad 	.word	0x0800c2ad
 800c244:	0800c2ad 	.word	0x0800c2ad
 800c248:	0800c2ad 	.word	0x0800c2ad
 800c24c:	0800c2ad 	.word	0x0800c2ad
 800c250:	0800c2ad 	.word	0x0800c2ad
 800c254:	0800c2ad 	.word	0x0800c2ad
 800c258:	0800c29d 	.word	0x0800c29d
 800c25c:	0800c2ad 	.word	0x0800c2ad
 800c260:	0800c2ad 	.word	0x0800c2ad
 800c264:	0800c2ad 	.word	0x0800c2ad
 800c268:	0800c2ad 	.word	0x0800c2ad
 800c26c:	0800c2ad 	.word	0x0800c2ad
 800c270:	0800c2ad 	.word	0x0800c2ad
 800c274:	0800c2ad 	.word	0x0800c2ad
 800c278:	0800c2a5 	.word	0x0800c2a5
 800c27c:	2301      	movs	r3, #1
 800c27e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c282:	e326      	b.n	800c8d2 <UART_SetConfig+0x7ae>
 800c284:	2304      	movs	r3, #4
 800c286:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c28a:	e322      	b.n	800c8d2 <UART_SetConfig+0x7ae>
 800c28c:	2308      	movs	r3, #8
 800c28e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c292:	e31e      	b.n	800c8d2 <UART_SetConfig+0x7ae>
 800c294:	2310      	movs	r3, #16
 800c296:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c29a:	e31a      	b.n	800c8d2 <UART_SetConfig+0x7ae>
 800c29c:	2320      	movs	r3, #32
 800c29e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c2a2:	e316      	b.n	800c8d2 <UART_SetConfig+0x7ae>
 800c2a4:	2340      	movs	r3, #64	@ 0x40
 800c2a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c2aa:	e312      	b.n	800c8d2 <UART_SetConfig+0x7ae>
 800c2ac:	2380      	movs	r3, #128	@ 0x80
 800c2ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c2b2:	e30e      	b.n	800c8d2 <UART_SetConfig+0x7ae>
 800c2b4:	697b      	ldr	r3, [r7, #20]
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	4a69      	ldr	r2, [pc, #420]	@ (800c460 <UART_SetConfig+0x33c>)
 800c2ba:	4293      	cmp	r3, r2
 800c2bc:	d130      	bne.n	800c320 <UART_SetConfig+0x1fc>
 800c2be:	4b67      	ldr	r3, [pc, #412]	@ (800c45c <UART_SetConfig+0x338>)
 800c2c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c2c2:	f003 0307 	and.w	r3, r3, #7
 800c2c6:	2b05      	cmp	r3, #5
 800c2c8:	d826      	bhi.n	800c318 <UART_SetConfig+0x1f4>
 800c2ca:	a201      	add	r2, pc, #4	@ (adr r2, 800c2d0 <UART_SetConfig+0x1ac>)
 800c2cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2d0:	0800c2e9 	.word	0x0800c2e9
 800c2d4:	0800c2f1 	.word	0x0800c2f1
 800c2d8:	0800c2f9 	.word	0x0800c2f9
 800c2dc:	0800c301 	.word	0x0800c301
 800c2e0:	0800c309 	.word	0x0800c309
 800c2e4:	0800c311 	.word	0x0800c311
 800c2e8:	2300      	movs	r3, #0
 800c2ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c2ee:	e2f0      	b.n	800c8d2 <UART_SetConfig+0x7ae>
 800c2f0:	2304      	movs	r3, #4
 800c2f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c2f6:	e2ec      	b.n	800c8d2 <UART_SetConfig+0x7ae>
 800c2f8:	2308      	movs	r3, #8
 800c2fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c2fe:	e2e8      	b.n	800c8d2 <UART_SetConfig+0x7ae>
 800c300:	2310      	movs	r3, #16
 800c302:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c306:	e2e4      	b.n	800c8d2 <UART_SetConfig+0x7ae>
 800c308:	2320      	movs	r3, #32
 800c30a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c30e:	e2e0      	b.n	800c8d2 <UART_SetConfig+0x7ae>
 800c310:	2340      	movs	r3, #64	@ 0x40
 800c312:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c316:	e2dc      	b.n	800c8d2 <UART_SetConfig+0x7ae>
 800c318:	2380      	movs	r3, #128	@ 0x80
 800c31a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c31e:	e2d8      	b.n	800c8d2 <UART_SetConfig+0x7ae>
 800c320:	697b      	ldr	r3, [r7, #20]
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	4a4f      	ldr	r2, [pc, #316]	@ (800c464 <UART_SetConfig+0x340>)
 800c326:	4293      	cmp	r3, r2
 800c328:	d130      	bne.n	800c38c <UART_SetConfig+0x268>
 800c32a:	4b4c      	ldr	r3, [pc, #304]	@ (800c45c <UART_SetConfig+0x338>)
 800c32c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c32e:	f003 0307 	and.w	r3, r3, #7
 800c332:	2b05      	cmp	r3, #5
 800c334:	d826      	bhi.n	800c384 <UART_SetConfig+0x260>
 800c336:	a201      	add	r2, pc, #4	@ (adr r2, 800c33c <UART_SetConfig+0x218>)
 800c338:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c33c:	0800c355 	.word	0x0800c355
 800c340:	0800c35d 	.word	0x0800c35d
 800c344:	0800c365 	.word	0x0800c365
 800c348:	0800c36d 	.word	0x0800c36d
 800c34c:	0800c375 	.word	0x0800c375
 800c350:	0800c37d 	.word	0x0800c37d
 800c354:	2300      	movs	r3, #0
 800c356:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c35a:	e2ba      	b.n	800c8d2 <UART_SetConfig+0x7ae>
 800c35c:	2304      	movs	r3, #4
 800c35e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c362:	e2b6      	b.n	800c8d2 <UART_SetConfig+0x7ae>
 800c364:	2308      	movs	r3, #8
 800c366:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c36a:	e2b2      	b.n	800c8d2 <UART_SetConfig+0x7ae>
 800c36c:	2310      	movs	r3, #16
 800c36e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c372:	e2ae      	b.n	800c8d2 <UART_SetConfig+0x7ae>
 800c374:	2320      	movs	r3, #32
 800c376:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c37a:	e2aa      	b.n	800c8d2 <UART_SetConfig+0x7ae>
 800c37c:	2340      	movs	r3, #64	@ 0x40
 800c37e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c382:	e2a6      	b.n	800c8d2 <UART_SetConfig+0x7ae>
 800c384:	2380      	movs	r3, #128	@ 0x80
 800c386:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c38a:	e2a2      	b.n	800c8d2 <UART_SetConfig+0x7ae>
 800c38c:	697b      	ldr	r3, [r7, #20]
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	4a35      	ldr	r2, [pc, #212]	@ (800c468 <UART_SetConfig+0x344>)
 800c392:	4293      	cmp	r3, r2
 800c394:	d130      	bne.n	800c3f8 <UART_SetConfig+0x2d4>
 800c396:	4b31      	ldr	r3, [pc, #196]	@ (800c45c <UART_SetConfig+0x338>)
 800c398:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c39a:	f003 0307 	and.w	r3, r3, #7
 800c39e:	2b05      	cmp	r3, #5
 800c3a0:	d826      	bhi.n	800c3f0 <UART_SetConfig+0x2cc>
 800c3a2:	a201      	add	r2, pc, #4	@ (adr r2, 800c3a8 <UART_SetConfig+0x284>)
 800c3a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3a8:	0800c3c1 	.word	0x0800c3c1
 800c3ac:	0800c3c9 	.word	0x0800c3c9
 800c3b0:	0800c3d1 	.word	0x0800c3d1
 800c3b4:	0800c3d9 	.word	0x0800c3d9
 800c3b8:	0800c3e1 	.word	0x0800c3e1
 800c3bc:	0800c3e9 	.word	0x0800c3e9
 800c3c0:	2300      	movs	r3, #0
 800c3c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c3c6:	e284      	b.n	800c8d2 <UART_SetConfig+0x7ae>
 800c3c8:	2304      	movs	r3, #4
 800c3ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c3ce:	e280      	b.n	800c8d2 <UART_SetConfig+0x7ae>
 800c3d0:	2308      	movs	r3, #8
 800c3d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c3d6:	e27c      	b.n	800c8d2 <UART_SetConfig+0x7ae>
 800c3d8:	2310      	movs	r3, #16
 800c3da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c3de:	e278      	b.n	800c8d2 <UART_SetConfig+0x7ae>
 800c3e0:	2320      	movs	r3, #32
 800c3e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c3e6:	e274      	b.n	800c8d2 <UART_SetConfig+0x7ae>
 800c3e8:	2340      	movs	r3, #64	@ 0x40
 800c3ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c3ee:	e270      	b.n	800c8d2 <UART_SetConfig+0x7ae>
 800c3f0:	2380      	movs	r3, #128	@ 0x80
 800c3f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c3f6:	e26c      	b.n	800c8d2 <UART_SetConfig+0x7ae>
 800c3f8:	697b      	ldr	r3, [r7, #20]
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	4a1b      	ldr	r2, [pc, #108]	@ (800c46c <UART_SetConfig+0x348>)
 800c3fe:	4293      	cmp	r3, r2
 800c400:	d142      	bne.n	800c488 <UART_SetConfig+0x364>
 800c402:	4b16      	ldr	r3, [pc, #88]	@ (800c45c <UART_SetConfig+0x338>)
 800c404:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c406:	f003 0307 	and.w	r3, r3, #7
 800c40a:	2b05      	cmp	r3, #5
 800c40c:	d838      	bhi.n	800c480 <UART_SetConfig+0x35c>
 800c40e:	a201      	add	r2, pc, #4	@ (adr r2, 800c414 <UART_SetConfig+0x2f0>)
 800c410:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c414:	0800c42d 	.word	0x0800c42d
 800c418:	0800c435 	.word	0x0800c435
 800c41c:	0800c43d 	.word	0x0800c43d
 800c420:	0800c445 	.word	0x0800c445
 800c424:	0800c471 	.word	0x0800c471
 800c428:	0800c479 	.word	0x0800c479
 800c42c:	2300      	movs	r3, #0
 800c42e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c432:	e24e      	b.n	800c8d2 <UART_SetConfig+0x7ae>
 800c434:	2304      	movs	r3, #4
 800c436:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c43a:	e24a      	b.n	800c8d2 <UART_SetConfig+0x7ae>
 800c43c:	2308      	movs	r3, #8
 800c43e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c442:	e246      	b.n	800c8d2 <UART_SetConfig+0x7ae>
 800c444:	2310      	movs	r3, #16
 800c446:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c44a:	e242      	b.n	800c8d2 <UART_SetConfig+0x7ae>
 800c44c:	cfff69f3 	.word	0xcfff69f3
 800c450:	58000c00 	.word	0x58000c00
 800c454:	11fff4ff 	.word	0x11fff4ff
 800c458:	40011000 	.word	0x40011000
 800c45c:	58024400 	.word	0x58024400
 800c460:	40004400 	.word	0x40004400
 800c464:	40004800 	.word	0x40004800
 800c468:	40004c00 	.word	0x40004c00
 800c46c:	40005000 	.word	0x40005000
 800c470:	2320      	movs	r3, #32
 800c472:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c476:	e22c      	b.n	800c8d2 <UART_SetConfig+0x7ae>
 800c478:	2340      	movs	r3, #64	@ 0x40
 800c47a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c47e:	e228      	b.n	800c8d2 <UART_SetConfig+0x7ae>
 800c480:	2380      	movs	r3, #128	@ 0x80
 800c482:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c486:	e224      	b.n	800c8d2 <UART_SetConfig+0x7ae>
 800c488:	697b      	ldr	r3, [r7, #20]
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	4ab1      	ldr	r2, [pc, #708]	@ (800c754 <UART_SetConfig+0x630>)
 800c48e:	4293      	cmp	r3, r2
 800c490:	d176      	bne.n	800c580 <UART_SetConfig+0x45c>
 800c492:	4bb1      	ldr	r3, [pc, #708]	@ (800c758 <UART_SetConfig+0x634>)
 800c494:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c496:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c49a:	2b28      	cmp	r3, #40	@ 0x28
 800c49c:	d86c      	bhi.n	800c578 <UART_SetConfig+0x454>
 800c49e:	a201      	add	r2, pc, #4	@ (adr r2, 800c4a4 <UART_SetConfig+0x380>)
 800c4a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4a4:	0800c549 	.word	0x0800c549
 800c4a8:	0800c579 	.word	0x0800c579
 800c4ac:	0800c579 	.word	0x0800c579
 800c4b0:	0800c579 	.word	0x0800c579
 800c4b4:	0800c579 	.word	0x0800c579
 800c4b8:	0800c579 	.word	0x0800c579
 800c4bc:	0800c579 	.word	0x0800c579
 800c4c0:	0800c579 	.word	0x0800c579
 800c4c4:	0800c551 	.word	0x0800c551
 800c4c8:	0800c579 	.word	0x0800c579
 800c4cc:	0800c579 	.word	0x0800c579
 800c4d0:	0800c579 	.word	0x0800c579
 800c4d4:	0800c579 	.word	0x0800c579
 800c4d8:	0800c579 	.word	0x0800c579
 800c4dc:	0800c579 	.word	0x0800c579
 800c4e0:	0800c579 	.word	0x0800c579
 800c4e4:	0800c559 	.word	0x0800c559
 800c4e8:	0800c579 	.word	0x0800c579
 800c4ec:	0800c579 	.word	0x0800c579
 800c4f0:	0800c579 	.word	0x0800c579
 800c4f4:	0800c579 	.word	0x0800c579
 800c4f8:	0800c579 	.word	0x0800c579
 800c4fc:	0800c579 	.word	0x0800c579
 800c500:	0800c579 	.word	0x0800c579
 800c504:	0800c561 	.word	0x0800c561
 800c508:	0800c579 	.word	0x0800c579
 800c50c:	0800c579 	.word	0x0800c579
 800c510:	0800c579 	.word	0x0800c579
 800c514:	0800c579 	.word	0x0800c579
 800c518:	0800c579 	.word	0x0800c579
 800c51c:	0800c579 	.word	0x0800c579
 800c520:	0800c579 	.word	0x0800c579
 800c524:	0800c569 	.word	0x0800c569
 800c528:	0800c579 	.word	0x0800c579
 800c52c:	0800c579 	.word	0x0800c579
 800c530:	0800c579 	.word	0x0800c579
 800c534:	0800c579 	.word	0x0800c579
 800c538:	0800c579 	.word	0x0800c579
 800c53c:	0800c579 	.word	0x0800c579
 800c540:	0800c579 	.word	0x0800c579
 800c544:	0800c571 	.word	0x0800c571
 800c548:	2301      	movs	r3, #1
 800c54a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c54e:	e1c0      	b.n	800c8d2 <UART_SetConfig+0x7ae>
 800c550:	2304      	movs	r3, #4
 800c552:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c556:	e1bc      	b.n	800c8d2 <UART_SetConfig+0x7ae>
 800c558:	2308      	movs	r3, #8
 800c55a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c55e:	e1b8      	b.n	800c8d2 <UART_SetConfig+0x7ae>
 800c560:	2310      	movs	r3, #16
 800c562:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c566:	e1b4      	b.n	800c8d2 <UART_SetConfig+0x7ae>
 800c568:	2320      	movs	r3, #32
 800c56a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c56e:	e1b0      	b.n	800c8d2 <UART_SetConfig+0x7ae>
 800c570:	2340      	movs	r3, #64	@ 0x40
 800c572:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c576:	e1ac      	b.n	800c8d2 <UART_SetConfig+0x7ae>
 800c578:	2380      	movs	r3, #128	@ 0x80
 800c57a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c57e:	e1a8      	b.n	800c8d2 <UART_SetConfig+0x7ae>
 800c580:	697b      	ldr	r3, [r7, #20]
 800c582:	681b      	ldr	r3, [r3, #0]
 800c584:	4a75      	ldr	r2, [pc, #468]	@ (800c75c <UART_SetConfig+0x638>)
 800c586:	4293      	cmp	r3, r2
 800c588:	d130      	bne.n	800c5ec <UART_SetConfig+0x4c8>
 800c58a:	4b73      	ldr	r3, [pc, #460]	@ (800c758 <UART_SetConfig+0x634>)
 800c58c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c58e:	f003 0307 	and.w	r3, r3, #7
 800c592:	2b05      	cmp	r3, #5
 800c594:	d826      	bhi.n	800c5e4 <UART_SetConfig+0x4c0>
 800c596:	a201      	add	r2, pc, #4	@ (adr r2, 800c59c <UART_SetConfig+0x478>)
 800c598:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c59c:	0800c5b5 	.word	0x0800c5b5
 800c5a0:	0800c5bd 	.word	0x0800c5bd
 800c5a4:	0800c5c5 	.word	0x0800c5c5
 800c5a8:	0800c5cd 	.word	0x0800c5cd
 800c5ac:	0800c5d5 	.word	0x0800c5d5
 800c5b0:	0800c5dd 	.word	0x0800c5dd
 800c5b4:	2300      	movs	r3, #0
 800c5b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c5ba:	e18a      	b.n	800c8d2 <UART_SetConfig+0x7ae>
 800c5bc:	2304      	movs	r3, #4
 800c5be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c5c2:	e186      	b.n	800c8d2 <UART_SetConfig+0x7ae>
 800c5c4:	2308      	movs	r3, #8
 800c5c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c5ca:	e182      	b.n	800c8d2 <UART_SetConfig+0x7ae>
 800c5cc:	2310      	movs	r3, #16
 800c5ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c5d2:	e17e      	b.n	800c8d2 <UART_SetConfig+0x7ae>
 800c5d4:	2320      	movs	r3, #32
 800c5d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c5da:	e17a      	b.n	800c8d2 <UART_SetConfig+0x7ae>
 800c5dc:	2340      	movs	r3, #64	@ 0x40
 800c5de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c5e2:	e176      	b.n	800c8d2 <UART_SetConfig+0x7ae>
 800c5e4:	2380      	movs	r3, #128	@ 0x80
 800c5e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c5ea:	e172      	b.n	800c8d2 <UART_SetConfig+0x7ae>
 800c5ec:	697b      	ldr	r3, [r7, #20]
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	4a5b      	ldr	r2, [pc, #364]	@ (800c760 <UART_SetConfig+0x63c>)
 800c5f2:	4293      	cmp	r3, r2
 800c5f4:	d130      	bne.n	800c658 <UART_SetConfig+0x534>
 800c5f6:	4b58      	ldr	r3, [pc, #352]	@ (800c758 <UART_SetConfig+0x634>)
 800c5f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c5fa:	f003 0307 	and.w	r3, r3, #7
 800c5fe:	2b05      	cmp	r3, #5
 800c600:	d826      	bhi.n	800c650 <UART_SetConfig+0x52c>
 800c602:	a201      	add	r2, pc, #4	@ (adr r2, 800c608 <UART_SetConfig+0x4e4>)
 800c604:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c608:	0800c621 	.word	0x0800c621
 800c60c:	0800c629 	.word	0x0800c629
 800c610:	0800c631 	.word	0x0800c631
 800c614:	0800c639 	.word	0x0800c639
 800c618:	0800c641 	.word	0x0800c641
 800c61c:	0800c649 	.word	0x0800c649
 800c620:	2300      	movs	r3, #0
 800c622:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c626:	e154      	b.n	800c8d2 <UART_SetConfig+0x7ae>
 800c628:	2304      	movs	r3, #4
 800c62a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c62e:	e150      	b.n	800c8d2 <UART_SetConfig+0x7ae>
 800c630:	2308      	movs	r3, #8
 800c632:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c636:	e14c      	b.n	800c8d2 <UART_SetConfig+0x7ae>
 800c638:	2310      	movs	r3, #16
 800c63a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c63e:	e148      	b.n	800c8d2 <UART_SetConfig+0x7ae>
 800c640:	2320      	movs	r3, #32
 800c642:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c646:	e144      	b.n	800c8d2 <UART_SetConfig+0x7ae>
 800c648:	2340      	movs	r3, #64	@ 0x40
 800c64a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c64e:	e140      	b.n	800c8d2 <UART_SetConfig+0x7ae>
 800c650:	2380      	movs	r3, #128	@ 0x80
 800c652:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c656:	e13c      	b.n	800c8d2 <UART_SetConfig+0x7ae>
 800c658:	697b      	ldr	r3, [r7, #20]
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	4a41      	ldr	r2, [pc, #260]	@ (800c764 <UART_SetConfig+0x640>)
 800c65e:	4293      	cmp	r3, r2
 800c660:	f040 8082 	bne.w	800c768 <UART_SetConfig+0x644>
 800c664:	4b3c      	ldr	r3, [pc, #240]	@ (800c758 <UART_SetConfig+0x634>)
 800c666:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c668:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c66c:	2b28      	cmp	r3, #40	@ 0x28
 800c66e:	d86d      	bhi.n	800c74c <UART_SetConfig+0x628>
 800c670:	a201      	add	r2, pc, #4	@ (adr r2, 800c678 <UART_SetConfig+0x554>)
 800c672:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c676:	bf00      	nop
 800c678:	0800c71d 	.word	0x0800c71d
 800c67c:	0800c74d 	.word	0x0800c74d
 800c680:	0800c74d 	.word	0x0800c74d
 800c684:	0800c74d 	.word	0x0800c74d
 800c688:	0800c74d 	.word	0x0800c74d
 800c68c:	0800c74d 	.word	0x0800c74d
 800c690:	0800c74d 	.word	0x0800c74d
 800c694:	0800c74d 	.word	0x0800c74d
 800c698:	0800c725 	.word	0x0800c725
 800c69c:	0800c74d 	.word	0x0800c74d
 800c6a0:	0800c74d 	.word	0x0800c74d
 800c6a4:	0800c74d 	.word	0x0800c74d
 800c6a8:	0800c74d 	.word	0x0800c74d
 800c6ac:	0800c74d 	.word	0x0800c74d
 800c6b0:	0800c74d 	.word	0x0800c74d
 800c6b4:	0800c74d 	.word	0x0800c74d
 800c6b8:	0800c72d 	.word	0x0800c72d
 800c6bc:	0800c74d 	.word	0x0800c74d
 800c6c0:	0800c74d 	.word	0x0800c74d
 800c6c4:	0800c74d 	.word	0x0800c74d
 800c6c8:	0800c74d 	.word	0x0800c74d
 800c6cc:	0800c74d 	.word	0x0800c74d
 800c6d0:	0800c74d 	.word	0x0800c74d
 800c6d4:	0800c74d 	.word	0x0800c74d
 800c6d8:	0800c735 	.word	0x0800c735
 800c6dc:	0800c74d 	.word	0x0800c74d
 800c6e0:	0800c74d 	.word	0x0800c74d
 800c6e4:	0800c74d 	.word	0x0800c74d
 800c6e8:	0800c74d 	.word	0x0800c74d
 800c6ec:	0800c74d 	.word	0x0800c74d
 800c6f0:	0800c74d 	.word	0x0800c74d
 800c6f4:	0800c74d 	.word	0x0800c74d
 800c6f8:	0800c73d 	.word	0x0800c73d
 800c6fc:	0800c74d 	.word	0x0800c74d
 800c700:	0800c74d 	.word	0x0800c74d
 800c704:	0800c74d 	.word	0x0800c74d
 800c708:	0800c74d 	.word	0x0800c74d
 800c70c:	0800c74d 	.word	0x0800c74d
 800c710:	0800c74d 	.word	0x0800c74d
 800c714:	0800c74d 	.word	0x0800c74d
 800c718:	0800c745 	.word	0x0800c745
 800c71c:	2301      	movs	r3, #1
 800c71e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c722:	e0d6      	b.n	800c8d2 <UART_SetConfig+0x7ae>
 800c724:	2304      	movs	r3, #4
 800c726:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c72a:	e0d2      	b.n	800c8d2 <UART_SetConfig+0x7ae>
 800c72c:	2308      	movs	r3, #8
 800c72e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c732:	e0ce      	b.n	800c8d2 <UART_SetConfig+0x7ae>
 800c734:	2310      	movs	r3, #16
 800c736:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c73a:	e0ca      	b.n	800c8d2 <UART_SetConfig+0x7ae>
 800c73c:	2320      	movs	r3, #32
 800c73e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c742:	e0c6      	b.n	800c8d2 <UART_SetConfig+0x7ae>
 800c744:	2340      	movs	r3, #64	@ 0x40
 800c746:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c74a:	e0c2      	b.n	800c8d2 <UART_SetConfig+0x7ae>
 800c74c:	2380      	movs	r3, #128	@ 0x80
 800c74e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c752:	e0be      	b.n	800c8d2 <UART_SetConfig+0x7ae>
 800c754:	40011400 	.word	0x40011400
 800c758:	58024400 	.word	0x58024400
 800c75c:	40007800 	.word	0x40007800
 800c760:	40007c00 	.word	0x40007c00
 800c764:	40011800 	.word	0x40011800
 800c768:	697b      	ldr	r3, [r7, #20]
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	4aad      	ldr	r2, [pc, #692]	@ (800ca24 <UART_SetConfig+0x900>)
 800c76e:	4293      	cmp	r3, r2
 800c770:	d176      	bne.n	800c860 <UART_SetConfig+0x73c>
 800c772:	4bad      	ldr	r3, [pc, #692]	@ (800ca28 <UART_SetConfig+0x904>)
 800c774:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c776:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c77a:	2b28      	cmp	r3, #40	@ 0x28
 800c77c:	d86c      	bhi.n	800c858 <UART_SetConfig+0x734>
 800c77e:	a201      	add	r2, pc, #4	@ (adr r2, 800c784 <UART_SetConfig+0x660>)
 800c780:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c784:	0800c829 	.word	0x0800c829
 800c788:	0800c859 	.word	0x0800c859
 800c78c:	0800c859 	.word	0x0800c859
 800c790:	0800c859 	.word	0x0800c859
 800c794:	0800c859 	.word	0x0800c859
 800c798:	0800c859 	.word	0x0800c859
 800c79c:	0800c859 	.word	0x0800c859
 800c7a0:	0800c859 	.word	0x0800c859
 800c7a4:	0800c831 	.word	0x0800c831
 800c7a8:	0800c859 	.word	0x0800c859
 800c7ac:	0800c859 	.word	0x0800c859
 800c7b0:	0800c859 	.word	0x0800c859
 800c7b4:	0800c859 	.word	0x0800c859
 800c7b8:	0800c859 	.word	0x0800c859
 800c7bc:	0800c859 	.word	0x0800c859
 800c7c0:	0800c859 	.word	0x0800c859
 800c7c4:	0800c839 	.word	0x0800c839
 800c7c8:	0800c859 	.word	0x0800c859
 800c7cc:	0800c859 	.word	0x0800c859
 800c7d0:	0800c859 	.word	0x0800c859
 800c7d4:	0800c859 	.word	0x0800c859
 800c7d8:	0800c859 	.word	0x0800c859
 800c7dc:	0800c859 	.word	0x0800c859
 800c7e0:	0800c859 	.word	0x0800c859
 800c7e4:	0800c841 	.word	0x0800c841
 800c7e8:	0800c859 	.word	0x0800c859
 800c7ec:	0800c859 	.word	0x0800c859
 800c7f0:	0800c859 	.word	0x0800c859
 800c7f4:	0800c859 	.word	0x0800c859
 800c7f8:	0800c859 	.word	0x0800c859
 800c7fc:	0800c859 	.word	0x0800c859
 800c800:	0800c859 	.word	0x0800c859
 800c804:	0800c849 	.word	0x0800c849
 800c808:	0800c859 	.word	0x0800c859
 800c80c:	0800c859 	.word	0x0800c859
 800c810:	0800c859 	.word	0x0800c859
 800c814:	0800c859 	.word	0x0800c859
 800c818:	0800c859 	.word	0x0800c859
 800c81c:	0800c859 	.word	0x0800c859
 800c820:	0800c859 	.word	0x0800c859
 800c824:	0800c851 	.word	0x0800c851
 800c828:	2301      	movs	r3, #1
 800c82a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c82e:	e050      	b.n	800c8d2 <UART_SetConfig+0x7ae>
 800c830:	2304      	movs	r3, #4
 800c832:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c836:	e04c      	b.n	800c8d2 <UART_SetConfig+0x7ae>
 800c838:	2308      	movs	r3, #8
 800c83a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c83e:	e048      	b.n	800c8d2 <UART_SetConfig+0x7ae>
 800c840:	2310      	movs	r3, #16
 800c842:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c846:	e044      	b.n	800c8d2 <UART_SetConfig+0x7ae>
 800c848:	2320      	movs	r3, #32
 800c84a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c84e:	e040      	b.n	800c8d2 <UART_SetConfig+0x7ae>
 800c850:	2340      	movs	r3, #64	@ 0x40
 800c852:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c856:	e03c      	b.n	800c8d2 <UART_SetConfig+0x7ae>
 800c858:	2380      	movs	r3, #128	@ 0x80
 800c85a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c85e:	e038      	b.n	800c8d2 <UART_SetConfig+0x7ae>
 800c860:	697b      	ldr	r3, [r7, #20]
 800c862:	681b      	ldr	r3, [r3, #0]
 800c864:	4a71      	ldr	r2, [pc, #452]	@ (800ca2c <UART_SetConfig+0x908>)
 800c866:	4293      	cmp	r3, r2
 800c868:	d130      	bne.n	800c8cc <UART_SetConfig+0x7a8>
 800c86a:	4b6f      	ldr	r3, [pc, #444]	@ (800ca28 <UART_SetConfig+0x904>)
 800c86c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c86e:	f003 0307 	and.w	r3, r3, #7
 800c872:	2b05      	cmp	r3, #5
 800c874:	d826      	bhi.n	800c8c4 <UART_SetConfig+0x7a0>
 800c876:	a201      	add	r2, pc, #4	@ (adr r2, 800c87c <UART_SetConfig+0x758>)
 800c878:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c87c:	0800c895 	.word	0x0800c895
 800c880:	0800c89d 	.word	0x0800c89d
 800c884:	0800c8a5 	.word	0x0800c8a5
 800c888:	0800c8ad 	.word	0x0800c8ad
 800c88c:	0800c8b5 	.word	0x0800c8b5
 800c890:	0800c8bd 	.word	0x0800c8bd
 800c894:	2302      	movs	r3, #2
 800c896:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c89a:	e01a      	b.n	800c8d2 <UART_SetConfig+0x7ae>
 800c89c:	2304      	movs	r3, #4
 800c89e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c8a2:	e016      	b.n	800c8d2 <UART_SetConfig+0x7ae>
 800c8a4:	2308      	movs	r3, #8
 800c8a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c8aa:	e012      	b.n	800c8d2 <UART_SetConfig+0x7ae>
 800c8ac:	2310      	movs	r3, #16
 800c8ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c8b2:	e00e      	b.n	800c8d2 <UART_SetConfig+0x7ae>
 800c8b4:	2320      	movs	r3, #32
 800c8b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c8ba:	e00a      	b.n	800c8d2 <UART_SetConfig+0x7ae>
 800c8bc:	2340      	movs	r3, #64	@ 0x40
 800c8be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c8c2:	e006      	b.n	800c8d2 <UART_SetConfig+0x7ae>
 800c8c4:	2380      	movs	r3, #128	@ 0x80
 800c8c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c8ca:	e002      	b.n	800c8d2 <UART_SetConfig+0x7ae>
 800c8cc:	2380      	movs	r3, #128	@ 0x80
 800c8ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c8d2:	697b      	ldr	r3, [r7, #20]
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	4a55      	ldr	r2, [pc, #340]	@ (800ca2c <UART_SetConfig+0x908>)
 800c8d8:	4293      	cmp	r3, r2
 800c8da:	f040 80f8 	bne.w	800cace <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c8de:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800c8e2:	2b20      	cmp	r3, #32
 800c8e4:	dc46      	bgt.n	800c974 <UART_SetConfig+0x850>
 800c8e6:	2b02      	cmp	r3, #2
 800c8e8:	db75      	blt.n	800c9d6 <UART_SetConfig+0x8b2>
 800c8ea:	3b02      	subs	r3, #2
 800c8ec:	2b1e      	cmp	r3, #30
 800c8ee:	d872      	bhi.n	800c9d6 <UART_SetConfig+0x8b2>
 800c8f0:	a201      	add	r2, pc, #4	@ (adr r2, 800c8f8 <UART_SetConfig+0x7d4>)
 800c8f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c8f6:	bf00      	nop
 800c8f8:	0800c97b 	.word	0x0800c97b
 800c8fc:	0800c9d7 	.word	0x0800c9d7
 800c900:	0800c983 	.word	0x0800c983
 800c904:	0800c9d7 	.word	0x0800c9d7
 800c908:	0800c9d7 	.word	0x0800c9d7
 800c90c:	0800c9d7 	.word	0x0800c9d7
 800c910:	0800c993 	.word	0x0800c993
 800c914:	0800c9d7 	.word	0x0800c9d7
 800c918:	0800c9d7 	.word	0x0800c9d7
 800c91c:	0800c9d7 	.word	0x0800c9d7
 800c920:	0800c9d7 	.word	0x0800c9d7
 800c924:	0800c9d7 	.word	0x0800c9d7
 800c928:	0800c9d7 	.word	0x0800c9d7
 800c92c:	0800c9d7 	.word	0x0800c9d7
 800c930:	0800c9a3 	.word	0x0800c9a3
 800c934:	0800c9d7 	.word	0x0800c9d7
 800c938:	0800c9d7 	.word	0x0800c9d7
 800c93c:	0800c9d7 	.word	0x0800c9d7
 800c940:	0800c9d7 	.word	0x0800c9d7
 800c944:	0800c9d7 	.word	0x0800c9d7
 800c948:	0800c9d7 	.word	0x0800c9d7
 800c94c:	0800c9d7 	.word	0x0800c9d7
 800c950:	0800c9d7 	.word	0x0800c9d7
 800c954:	0800c9d7 	.word	0x0800c9d7
 800c958:	0800c9d7 	.word	0x0800c9d7
 800c95c:	0800c9d7 	.word	0x0800c9d7
 800c960:	0800c9d7 	.word	0x0800c9d7
 800c964:	0800c9d7 	.word	0x0800c9d7
 800c968:	0800c9d7 	.word	0x0800c9d7
 800c96c:	0800c9d7 	.word	0x0800c9d7
 800c970:	0800c9c9 	.word	0x0800c9c9
 800c974:	2b40      	cmp	r3, #64	@ 0x40
 800c976:	d02a      	beq.n	800c9ce <UART_SetConfig+0x8aa>
 800c978:	e02d      	b.n	800c9d6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800c97a:	f7fc ff21 	bl	80097c0 <HAL_RCCEx_GetD3PCLK1Freq>
 800c97e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c980:	e02f      	b.n	800c9e2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c982:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c986:	4618      	mov	r0, r3
 800c988:	f7fc ff30 	bl	80097ec <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c98c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c98e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c990:	e027      	b.n	800c9e2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c992:	f107 0318 	add.w	r3, r7, #24
 800c996:	4618      	mov	r0, r3
 800c998:	f7fd f87c 	bl	8009a94 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c99c:	69fb      	ldr	r3, [r7, #28]
 800c99e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c9a0:	e01f      	b.n	800c9e2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c9a2:	4b21      	ldr	r3, [pc, #132]	@ (800ca28 <UART_SetConfig+0x904>)
 800c9a4:	681b      	ldr	r3, [r3, #0]
 800c9a6:	f003 0320 	and.w	r3, r3, #32
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d009      	beq.n	800c9c2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c9ae:	4b1e      	ldr	r3, [pc, #120]	@ (800ca28 <UART_SetConfig+0x904>)
 800c9b0:	681b      	ldr	r3, [r3, #0]
 800c9b2:	08db      	lsrs	r3, r3, #3
 800c9b4:	f003 0303 	and.w	r3, r3, #3
 800c9b8:	4a1d      	ldr	r2, [pc, #116]	@ (800ca30 <UART_SetConfig+0x90c>)
 800c9ba:	fa22 f303 	lsr.w	r3, r2, r3
 800c9be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c9c0:	e00f      	b.n	800c9e2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800c9c2:	4b1b      	ldr	r3, [pc, #108]	@ (800ca30 <UART_SetConfig+0x90c>)
 800c9c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c9c6:	e00c      	b.n	800c9e2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c9c8:	4b1a      	ldr	r3, [pc, #104]	@ (800ca34 <UART_SetConfig+0x910>)
 800c9ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c9cc:	e009      	b.n	800c9e2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c9ce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c9d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c9d4:	e005      	b.n	800c9e2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800c9d6:	2300      	movs	r3, #0
 800c9d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800c9da:	2301      	movs	r3, #1
 800c9dc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800c9e0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c9e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	f000 81ee 	beq.w	800cdc6 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c9ea:	697b      	ldr	r3, [r7, #20]
 800c9ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c9ee:	4a12      	ldr	r2, [pc, #72]	@ (800ca38 <UART_SetConfig+0x914>)
 800c9f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c9f4:	461a      	mov	r2, r3
 800c9f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c9f8:	fbb3 f3f2 	udiv	r3, r3, r2
 800c9fc:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c9fe:	697b      	ldr	r3, [r7, #20]
 800ca00:	685a      	ldr	r2, [r3, #4]
 800ca02:	4613      	mov	r3, r2
 800ca04:	005b      	lsls	r3, r3, #1
 800ca06:	4413      	add	r3, r2
 800ca08:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ca0a:	429a      	cmp	r2, r3
 800ca0c:	d305      	bcc.n	800ca1a <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ca0e:	697b      	ldr	r3, [r7, #20]
 800ca10:	685b      	ldr	r3, [r3, #4]
 800ca12:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ca14:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ca16:	429a      	cmp	r2, r3
 800ca18:	d910      	bls.n	800ca3c <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800ca1a:	2301      	movs	r3, #1
 800ca1c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800ca20:	e1d1      	b.n	800cdc6 <UART_SetConfig+0xca2>
 800ca22:	bf00      	nop
 800ca24:	40011c00 	.word	0x40011c00
 800ca28:	58024400 	.word	0x58024400
 800ca2c:	58000c00 	.word	0x58000c00
 800ca30:	03d09000 	.word	0x03d09000
 800ca34:	003d0900 	.word	0x003d0900
 800ca38:	0800e068 	.word	0x0800e068
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ca3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ca3e:	2200      	movs	r2, #0
 800ca40:	60bb      	str	r3, [r7, #8]
 800ca42:	60fa      	str	r2, [r7, #12]
 800ca44:	697b      	ldr	r3, [r7, #20]
 800ca46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ca48:	4ac0      	ldr	r2, [pc, #768]	@ (800cd4c <UART_SetConfig+0xc28>)
 800ca4a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ca4e:	b29b      	uxth	r3, r3
 800ca50:	2200      	movs	r2, #0
 800ca52:	603b      	str	r3, [r7, #0]
 800ca54:	607a      	str	r2, [r7, #4]
 800ca56:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ca5a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ca5e:	f7f3 fc57 	bl	8000310 <__aeabi_uldivmod>
 800ca62:	4602      	mov	r2, r0
 800ca64:	460b      	mov	r3, r1
 800ca66:	4610      	mov	r0, r2
 800ca68:	4619      	mov	r1, r3
 800ca6a:	f04f 0200 	mov.w	r2, #0
 800ca6e:	f04f 0300 	mov.w	r3, #0
 800ca72:	020b      	lsls	r3, r1, #8
 800ca74:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ca78:	0202      	lsls	r2, r0, #8
 800ca7a:	6979      	ldr	r1, [r7, #20]
 800ca7c:	6849      	ldr	r1, [r1, #4]
 800ca7e:	0849      	lsrs	r1, r1, #1
 800ca80:	2000      	movs	r0, #0
 800ca82:	460c      	mov	r4, r1
 800ca84:	4605      	mov	r5, r0
 800ca86:	eb12 0804 	adds.w	r8, r2, r4
 800ca8a:	eb43 0905 	adc.w	r9, r3, r5
 800ca8e:	697b      	ldr	r3, [r7, #20]
 800ca90:	685b      	ldr	r3, [r3, #4]
 800ca92:	2200      	movs	r2, #0
 800ca94:	469a      	mov	sl, r3
 800ca96:	4693      	mov	fp, r2
 800ca98:	4652      	mov	r2, sl
 800ca9a:	465b      	mov	r3, fp
 800ca9c:	4640      	mov	r0, r8
 800ca9e:	4649      	mov	r1, r9
 800caa0:	f7f3 fc36 	bl	8000310 <__aeabi_uldivmod>
 800caa4:	4602      	mov	r2, r0
 800caa6:	460b      	mov	r3, r1
 800caa8:	4613      	mov	r3, r2
 800caaa:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800caac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800caae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800cab2:	d308      	bcc.n	800cac6 <UART_SetConfig+0x9a2>
 800cab4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cab6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800caba:	d204      	bcs.n	800cac6 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800cabc:	697b      	ldr	r3, [r7, #20]
 800cabe:	681b      	ldr	r3, [r3, #0]
 800cac0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cac2:	60da      	str	r2, [r3, #12]
 800cac4:	e17f      	b.n	800cdc6 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800cac6:	2301      	movs	r3, #1
 800cac8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800cacc:	e17b      	b.n	800cdc6 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800cace:	697b      	ldr	r3, [r7, #20]
 800cad0:	69db      	ldr	r3, [r3, #28]
 800cad2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800cad6:	f040 80bd 	bne.w	800cc54 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800cada:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800cade:	2b20      	cmp	r3, #32
 800cae0:	dc48      	bgt.n	800cb74 <UART_SetConfig+0xa50>
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	db7b      	blt.n	800cbde <UART_SetConfig+0xaba>
 800cae6:	2b20      	cmp	r3, #32
 800cae8:	d879      	bhi.n	800cbde <UART_SetConfig+0xaba>
 800caea:	a201      	add	r2, pc, #4	@ (adr r2, 800caf0 <UART_SetConfig+0x9cc>)
 800caec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800caf0:	0800cb7b 	.word	0x0800cb7b
 800caf4:	0800cb83 	.word	0x0800cb83
 800caf8:	0800cbdf 	.word	0x0800cbdf
 800cafc:	0800cbdf 	.word	0x0800cbdf
 800cb00:	0800cb8b 	.word	0x0800cb8b
 800cb04:	0800cbdf 	.word	0x0800cbdf
 800cb08:	0800cbdf 	.word	0x0800cbdf
 800cb0c:	0800cbdf 	.word	0x0800cbdf
 800cb10:	0800cb9b 	.word	0x0800cb9b
 800cb14:	0800cbdf 	.word	0x0800cbdf
 800cb18:	0800cbdf 	.word	0x0800cbdf
 800cb1c:	0800cbdf 	.word	0x0800cbdf
 800cb20:	0800cbdf 	.word	0x0800cbdf
 800cb24:	0800cbdf 	.word	0x0800cbdf
 800cb28:	0800cbdf 	.word	0x0800cbdf
 800cb2c:	0800cbdf 	.word	0x0800cbdf
 800cb30:	0800cbab 	.word	0x0800cbab
 800cb34:	0800cbdf 	.word	0x0800cbdf
 800cb38:	0800cbdf 	.word	0x0800cbdf
 800cb3c:	0800cbdf 	.word	0x0800cbdf
 800cb40:	0800cbdf 	.word	0x0800cbdf
 800cb44:	0800cbdf 	.word	0x0800cbdf
 800cb48:	0800cbdf 	.word	0x0800cbdf
 800cb4c:	0800cbdf 	.word	0x0800cbdf
 800cb50:	0800cbdf 	.word	0x0800cbdf
 800cb54:	0800cbdf 	.word	0x0800cbdf
 800cb58:	0800cbdf 	.word	0x0800cbdf
 800cb5c:	0800cbdf 	.word	0x0800cbdf
 800cb60:	0800cbdf 	.word	0x0800cbdf
 800cb64:	0800cbdf 	.word	0x0800cbdf
 800cb68:	0800cbdf 	.word	0x0800cbdf
 800cb6c:	0800cbdf 	.word	0x0800cbdf
 800cb70:	0800cbd1 	.word	0x0800cbd1
 800cb74:	2b40      	cmp	r3, #64	@ 0x40
 800cb76:	d02e      	beq.n	800cbd6 <UART_SetConfig+0xab2>
 800cb78:	e031      	b.n	800cbde <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cb7a:	f7fa ff83 	bl	8007a84 <HAL_RCC_GetPCLK1Freq>
 800cb7e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800cb80:	e033      	b.n	800cbea <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800cb82:	f7fa ff95 	bl	8007ab0 <HAL_RCC_GetPCLK2Freq>
 800cb86:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800cb88:	e02f      	b.n	800cbea <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cb8a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800cb8e:	4618      	mov	r0, r3
 800cb90:	f7fc fe2c 	bl	80097ec <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800cb94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cb98:	e027      	b.n	800cbea <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cb9a:	f107 0318 	add.w	r3, r7, #24
 800cb9e:	4618      	mov	r0, r3
 800cba0:	f7fc ff78 	bl	8009a94 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800cba4:	69fb      	ldr	r3, [r7, #28]
 800cba6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cba8:	e01f      	b.n	800cbea <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cbaa:	4b69      	ldr	r3, [pc, #420]	@ (800cd50 <UART_SetConfig+0xc2c>)
 800cbac:	681b      	ldr	r3, [r3, #0]
 800cbae:	f003 0320 	and.w	r3, r3, #32
 800cbb2:	2b00      	cmp	r3, #0
 800cbb4:	d009      	beq.n	800cbca <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800cbb6:	4b66      	ldr	r3, [pc, #408]	@ (800cd50 <UART_SetConfig+0xc2c>)
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	08db      	lsrs	r3, r3, #3
 800cbbc:	f003 0303 	and.w	r3, r3, #3
 800cbc0:	4a64      	ldr	r2, [pc, #400]	@ (800cd54 <UART_SetConfig+0xc30>)
 800cbc2:	fa22 f303 	lsr.w	r3, r2, r3
 800cbc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800cbc8:	e00f      	b.n	800cbea <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800cbca:	4b62      	ldr	r3, [pc, #392]	@ (800cd54 <UART_SetConfig+0xc30>)
 800cbcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cbce:	e00c      	b.n	800cbea <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800cbd0:	4b61      	ldr	r3, [pc, #388]	@ (800cd58 <UART_SetConfig+0xc34>)
 800cbd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cbd4:	e009      	b.n	800cbea <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cbd6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800cbda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cbdc:	e005      	b.n	800cbea <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800cbde:	2300      	movs	r3, #0
 800cbe0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800cbe2:	2301      	movs	r3, #1
 800cbe4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800cbe8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800cbea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	f000 80ea 	beq.w	800cdc6 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cbf2:	697b      	ldr	r3, [r7, #20]
 800cbf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cbf6:	4a55      	ldr	r2, [pc, #340]	@ (800cd4c <UART_SetConfig+0xc28>)
 800cbf8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cbfc:	461a      	mov	r2, r3
 800cbfe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cc00:	fbb3 f3f2 	udiv	r3, r3, r2
 800cc04:	005a      	lsls	r2, r3, #1
 800cc06:	697b      	ldr	r3, [r7, #20]
 800cc08:	685b      	ldr	r3, [r3, #4]
 800cc0a:	085b      	lsrs	r3, r3, #1
 800cc0c:	441a      	add	r2, r3
 800cc0e:	697b      	ldr	r3, [r7, #20]
 800cc10:	685b      	ldr	r3, [r3, #4]
 800cc12:	fbb2 f3f3 	udiv	r3, r2, r3
 800cc16:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cc18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc1a:	2b0f      	cmp	r3, #15
 800cc1c:	d916      	bls.n	800cc4c <UART_SetConfig+0xb28>
 800cc1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cc24:	d212      	bcs.n	800cc4c <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800cc26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc28:	b29b      	uxth	r3, r3
 800cc2a:	f023 030f 	bic.w	r3, r3, #15
 800cc2e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800cc30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc32:	085b      	lsrs	r3, r3, #1
 800cc34:	b29b      	uxth	r3, r3
 800cc36:	f003 0307 	and.w	r3, r3, #7
 800cc3a:	b29a      	uxth	r2, r3
 800cc3c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800cc3e:	4313      	orrs	r3, r2
 800cc40:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800cc42:	697b      	ldr	r3, [r7, #20]
 800cc44:	681b      	ldr	r3, [r3, #0]
 800cc46:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800cc48:	60da      	str	r2, [r3, #12]
 800cc4a:	e0bc      	b.n	800cdc6 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800cc4c:	2301      	movs	r3, #1
 800cc4e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800cc52:	e0b8      	b.n	800cdc6 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800cc54:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800cc58:	2b20      	cmp	r3, #32
 800cc5a:	dc4b      	bgt.n	800ccf4 <UART_SetConfig+0xbd0>
 800cc5c:	2b00      	cmp	r3, #0
 800cc5e:	f2c0 8087 	blt.w	800cd70 <UART_SetConfig+0xc4c>
 800cc62:	2b20      	cmp	r3, #32
 800cc64:	f200 8084 	bhi.w	800cd70 <UART_SetConfig+0xc4c>
 800cc68:	a201      	add	r2, pc, #4	@ (adr r2, 800cc70 <UART_SetConfig+0xb4c>)
 800cc6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc6e:	bf00      	nop
 800cc70:	0800ccfb 	.word	0x0800ccfb
 800cc74:	0800cd03 	.word	0x0800cd03
 800cc78:	0800cd71 	.word	0x0800cd71
 800cc7c:	0800cd71 	.word	0x0800cd71
 800cc80:	0800cd0b 	.word	0x0800cd0b
 800cc84:	0800cd71 	.word	0x0800cd71
 800cc88:	0800cd71 	.word	0x0800cd71
 800cc8c:	0800cd71 	.word	0x0800cd71
 800cc90:	0800cd1b 	.word	0x0800cd1b
 800cc94:	0800cd71 	.word	0x0800cd71
 800cc98:	0800cd71 	.word	0x0800cd71
 800cc9c:	0800cd71 	.word	0x0800cd71
 800cca0:	0800cd71 	.word	0x0800cd71
 800cca4:	0800cd71 	.word	0x0800cd71
 800cca8:	0800cd71 	.word	0x0800cd71
 800ccac:	0800cd71 	.word	0x0800cd71
 800ccb0:	0800cd2b 	.word	0x0800cd2b
 800ccb4:	0800cd71 	.word	0x0800cd71
 800ccb8:	0800cd71 	.word	0x0800cd71
 800ccbc:	0800cd71 	.word	0x0800cd71
 800ccc0:	0800cd71 	.word	0x0800cd71
 800ccc4:	0800cd71 	.word	0x0800cd71
 800ccc8:	0800cd71 	.word	0x0800cd71
 800cccc:	0800cd71 	.word	0x0800cd71
 800ccd0:	0800cd71 	.word	0x0800cd71
 800ccd4:	0800cd71 	.word	0x0800cd71
 800ccd8:	0800cd71 	.word	0x0800cd71
 800ccdc:	0800cd71 	.word	0x0800cd71
 800cce0:	0800cd71 	.word	0x0800cd71
 800cce4:	0800cd71 	.word	0x0800cd71
 800cce8:	0800cd71 	.word	0x0800cd71
 800ccec:	0800cd71 	.word	0x0800cd71
 800ccf0:	0800cd63 	.word	0x0800cd63
 800ccf4:	2b40      	cmp	r3, #64	@ 0x40
 800ccf6:	d037      	beq.n	800cd68 <UART_SetConfig+0xc44>
 800ccf8:	e03a      	b.n	800cd70 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ccfa:	f7fa fec3 	bl	8007a84 <HAL_RCC_GetPCLK1Freq>
 800ccfe:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800cd00:	e03c      	b.n	800cd7c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800cd02:	f7fa fed5 	bl	8007ab0 <HAL_RCC_GetPCLK2Freq>
 800cd06:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800cd08:	e038      	b.n	800cd7c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cd0a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800cd0e:	4618      	mov	r0, r3
 800cd10:	f7fc fd6c 	bl	80097ec <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800cd14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cd18:	e030      	b.n	800cd7c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cd1a:	f107 0318 	add.w	r3, r7, #24
 800cd1e:	4618      	mov	r0, r3
 800cd20:	f7fc feb8 	bl	8009a94 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800cd24:	69fb      	ldr	r3, [r7, #28]
 800cd26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cd28:	e028      	b.n	800cd7c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cd2a:	4b09      	ldr	r3, [pc, #36]	@ (800cd50 <UART_SetConfig+0xc2c>)
 800cd2c:	681b      	ldr	r3, [r3, #0]
 800cd2e:	f003 0320 	and.w	r3, r3, #32
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	d012      	beq.n	800cd5c <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800cd36:	4b06      	ldr	r3, [pc, #24]	@ (800cd50 <UART_SetConfig+0xc2c>)
 800cd38:	681b      	ldr	r3, [r3, #0]
 800cd3a:	08db      	lsrs	r3, r3, #3
 800cd3c:	f003 0303 	and.w	r3, r3, #3
 800cd40:	4a04      	ldr	r2, [pc, #16]	@ (800cd54 <UART_SetConfig+0xc30>)
 800cd42:	fa22 f303 	lsr.w	r3, r2, r3
 800cd46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800cd48:	e018      	b.n	800cd7c <UART_SetConfig+0xc58>
 800cd4a:	bf00      	nop
 800cd4c:	0800e068 	.word	0x0800e068
 800cd50:	58024400 	.word	0x58024400
 800cd54:	03d09000 	.word	0x03d09000
 800cd58:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800cd5c:	4b24      	ldr	r3, [pc, #144]	@ (800cdf0 <UART_SetConfig+0xccc>)
 800cd5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cd60:	e00c      	b.n	800cd7c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800cd62:	4b24      	ldr	r3, [pc, #144]	@ (800cdf4 <UART_SetConfig+0xcd0>)
 800cd64:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cd66:	e009      	b.n	800cd7c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cd68:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800cd6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cd6e:	e005      	b.n	800cd7c <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800cd70:	2300      	movs	r3, #0
 800cd72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800cd74:	2301      	movs	r3, #1
 800cd76:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800cd7a:	bf00      	nop
    }

    if (pclk != 0U)
 800cd7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	d021      	beq.n	800cdc6 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cd82:	697b      	ldr	r3, [r7, #20]
 800cd84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cd86:	4a1c      	ldr	r2, [pc, #112]	@ (800cdf8 <UART_SetConfig+0xcd4>)
 800cd88:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cd8c:	461a      	mov	r2, r3
 800cd8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cd90:	fbb3 f2f2 	udiv	r2, r3, r2
 800cd94:	697b      	ldr	r3, [r7, #20]
 800cd96:	685b      	ldr	r3, [r3, #4]
 800cd98:	085b      	lsrs	r3, r3, #1
 800cd9a:	441a      	add	r2, r3
 800cd9c:	697b      	ldr	r3, [r7, #20]
 800cd9e:	685b      	ldr	r3, [r3, #4]
 800cda0:	fbb2 f3f3 	udiv	r3, r2, r3
 800cda4:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cda6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cda8:	2b0f      	cmp	r3, #15
 800cdaa:	d909      	bls.n	800cdc0 <UART_SetConfig+0xc9c>
 800cdac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cdae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cdb2:	d205      	bcs.n	800cdc0 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800cdb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cdb6:	b29a      	uxth	r2, r3
 800cdb8:	697b      	ldr	r3, [r7, #20]
 800cdba:	681b      	ldr	r3, [r3, #0]
 800cdbc:	60da      	str	r2, [r3, #12]
 800cdbe:	e002      	b.n	800cdc6 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800cdc0:	2301      	movs	r3, #1
 800cdc2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800cdc6:	697b      	ldr	r3, [r7, #20]
 800cdc8:	2201      	movs	r2, #1
 800cdca:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800cdce:	697b      	ldr	r3, [r7, #20]
 800cdd0:	2201      	movs	r2, #1
 800cdd2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800cdd6:	697b      	ldr	r3, [r7, #20]
 800cdd8:	2200      	movs	r2, #0
 800cdda:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800cddc:	697b      	ldr	r3, [r7, #20]
 800cdde:	2200      	movs	r2, #0
 800cde0:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800cde2:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800cde6:	4618      	mov	r0, r3
 800cde8:	3748      	adds	r7, #72	@ 0x48
 800cdea:	46bd      	mov	sp, r7
 800cdec:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800cdf0:	03d09000 	.word	0x03d09000
 800cdf4:	003d0900 	.word	0x003d0900
 800cdf8:	0800e068 	.word	0x0800e068

0800cdfc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800cdfc:	b480      	push	{r7}
 800cdfe:	b083      	sub	sp, #12
 800ce00:	af00      	add	r7, sp, #0
 800ce02:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ce08:	f003 0308 	and.w	r3, r3, #8
 800ce0c:	2b00      	cmp	r3, #0
 800ce0e:	d00a      	beq.n	800ce26 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	685b      	ldr	r3, [r3, #4]
 800ce16:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	681b      	ldr	r3, [r3, #0]
 800ce22:	430a      	orrs	r2, r1
 800ce24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ce2a:	f003 0301 	and.w	r3, r3, #1
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	d00a      	beq.n	800ce48 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	681b      	ldr	r3, [r3, #0]
 800ce36:	685b      	ldr	r3, [r3, #4]
 800ce38:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	681b      	ldr	r3, [r3, #0]
 800ce44:	430a      	orrs	r2, r1
 800ce46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ce4c:	f003 0302 	and.w	r3, r3, #2
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	d00a      	beq.n	800ce6a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	685b      	ldr	r3, [r3, #4]
 800ce5a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	681b      	ldr	r3, [r3, #0]
 800ce66:	430a      	orrs	r2, r1
 800ce68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ce6e:	f003 0304 	and.w	r3, r3, #4
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	d00a      	beq.n	800ce8c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	681b      	ldr	r3, [r3, #0]
 800ce7a:	685b      	ldr	r3, [r3, #4]
 800ce7c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	681b      	ldr	r3, [r3, #0]
 800ce88:	430a      	orrs	r2, r1
 800ce8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ce90:	f003 0310 	and.w	r3, r3, #16
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	d00a      	beq.n	800ceae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	681b      	ldr	r3, [r3, #0]
 800ce9c:	689b      	ldr	r3, [r3, #8]
 800ce9e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	681b      	ldr	r3, [r3, #0]
 800ceaa:	430a      	orrs	r2, r1
 800ceac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ceb2:	f003 0320 	and.w	r3, r3, #32
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	d00a      	beq.n	800ced0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	681b      	ldr	r3, [r3, #0]
 800cebe:	689b      	ldr	r3, [r3, #8]
 800cec0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	681b      	ldr	r3, [r3, #0]
 800cecc:	430a      	orrs	r2, r1
 800cece:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ced4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	d01a      	beq.n	800cf12 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	681b      	ldr	r3, [r3, #0]
 800cee0:	685b      	ldr	r3, [r3, #4]
 800cee2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	681b      	ldr	r3, [r3, #0]
 800ceee:	430a      	orrs	r2, r1
 800cef0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cef6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800cefa:	d10a      	bne.n	800cf12 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	681b      	ldr	r3, [r3, #0]
 800cf00:	685b      	ldr	r3, [r3, #4]
 800cf02:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	681b      	ldr	r3, [r3, #0]
 800cf0e:	430a      	orrs	r2, r1
 800cf10:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cf16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	d00a      	beq.n	800cf34 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	681b      	ldr	r3, [r3, #0]
 800cf22:	685b      	ldr	r3, [r3, #4]
 800cf24:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	681b      	ldr	r3, [r3, #0]
 800cf30:	430a      	orrs	r2, r1
 800cf32:	605a      	str	r2, [r3, #4]
  }
}
 800cf34:	bf00      	nop
 800cf36:	370c      	adds	r7, #12
 800cf38:	46bd      	mov	sp, r7
 800cf3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf3e:	4770      	bx	lr

0800cf40 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800cf40:	b580      	push	{r7, lr}
 800cf42:	b098      	sub	sp, #96	@ 0x60
 800cf44:	af02      	add	r7, sp, #8
 800cf46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	2200      	movs	r2, #0
 800cf4c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800cf50:	f7f5 fa62 	bl	8002418 <HAL_GetTick>
 800cf54:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	681b      	ldr	r3, [r3, #0]
 800cf5c:	f003 0308 	and.w	r3, r3, #8
 800cf60:	2b08      	cmp	r3, #8
 800cf62:	d12f      	bne.n	800cfc4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cf64:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800cf68:	9300      	str	r3, [sp, #0]
 800cf6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cf6c:	2200      	movs	r2, #0
 800cf6e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800cf72:	6878      	ldr	r0, [r7, #4]
 800cf74:	f000 f88e 	bl	800d094 <UART_WaitOnFlagUntilTimeout>
 800cf78:	4603      	mov	r3, r0
 800cf7a:	2b00      	cmp	r3, #0
 800cf7c:	d022      	beq.n	800cfc4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	681b      	ldr	r3, [r3, #0]
 800cf82:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf86:	e853 3f00 	ldrex	r3, [r3]
 800cf8a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800cf8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cf8e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800cf92:	653b      	str	r3, [r7, #80]	@ 0x50
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	681b      	ldr	r3, [r3, #0]
 800cf98:	461a      	mov	r2, r3
 800cf9a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cf9c:	647b      	str	r3, [r7, #68]	@ 0x44
 800cf9e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cfa0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800cfa2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800cfa4:	e841 2300 	strex	r3, r2, [r1]
 800cfa8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800cfaa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	d1e6      	bne.n	800cf7e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	2220      	movs	r2, #32
 800cfb4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	2200      	movs	r2, #0
 800cfbc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cfc0:	2303      	movs	r3, #3
 800cfc2:	e063      	b.n	800d08c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	681b      	ldr	r3, [r3, #0]
 800cfc8:	681b      	ldr	r3, [r3, #0]
 800cfca:	f003 0304 	and.w	r3, r3, #4
 800cfce:	2b04      	cmp	r3, #4
 800cfd0:	d149      	bne.n	800d066 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cfd2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800cfd6:	9300      	str	r3, [sp, #0]
 800cfd8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cfda:	2200      	movs	r2, #0
 800cfdc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800cfe0:	6878      	ldr	r0, [r7, #4]
 800cfe2:	f000 f857 	bl	800d094 <UART_WaitOnFlagUntilTimeout>
 800cfe6:	4603      	mov	r3, r0
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	d03c      	beq.n	800d066 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	681b      	ldr	r3, [r3, #0]
 800cff0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cff2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cff4:	e853 3f00 	ldrex	r3, [r3]
 800cff8:	623b      	str	r3, [r7, #32]
   return(result);
 800cffa:	6a3b      	ldr	r3, [r7, #32]
 800cffc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d000:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	681b      	ldr	r3, [r3, #0]
 800d006:	461a      	mov	r2, r3
 800d008:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d00a:	633b      	str	r3, [r7, #48]	@ 0x30
 800d00c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d00e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d010:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d012:	e841 2300 	strex	r3, r2, [r1]
 800d016:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d018:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	d1e6      	bne.n	800cfec <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	681b      	ldr	r3, [r3, #0]
 800d022:	3308      	adds	r3, #8
 800d024:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d026:	693b      	ldr	r3, [r7, #16]
 800d028:	e853 3f00 	ldrex	r3, [r3]
 800d02c:	60fb      	str	r3, [r7, #12]
   return(result);
 800d02e:	68fb      	ldr	r3, [r7, #12]
 800d030:	f023 0301 	bic.w	r3, r3, #1
 800d034:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	681b      	ldr	r3, [r3, #0]
 800d03a:	3308      	adds	r3, #8
 800d03c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d03e:	61fa      	str	r2, [r7, #28]
 800d040:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d042:	69b9      	ldr	r1, [r7, #24]
 800d044:	69fa      	ldr	r2, [r7, #28]
 800d046:	e841 2300 	strex	r3, r2, [r1]
 800d04a:	617b      	str	r3, [r7, #20]
   return(result);
 800d04c:	697b      	ldr	r3, [r7, #20]
 800d04e:	2b00      	cmp	r3, #0
 800d050:	d1e5      	bne.n	800d01e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	2220      	movs	r2, #32
 800d056:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	2200      	movs	r2, #0
 800d05e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d062:	2303      	movs	r3, #3
 800d064:	e012      	b.n	800d08c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	2220      	movs	r2, #32
 800d06a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	2220      	movs	r2, #32
 800d072:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	2200      	movs	r2, #0
 800d07a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	2200      	movs	r2, #0
 800d080:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	2200      	movs	r2, #0
 800d086:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d08a:	2300      	movs	r3, #0
}
 800d08c:	4618      	mov	r0, r3
 800d08e:	3758      	adds	r7, #88	@ 0x58
 800d090:	46bd      	mov	sp, r7
 800d092:	bd80      	pop	{r7, pc}

0800d094 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d094:	b580      	push	{r7, lr}
 800d096:	b084      	sub	sp, #16
 800d098:	af00      	add	r7, sp, #0
 800d09a:	60f8      	str	r0, [r7, #12]
 800d09c:	60b9      	str	r1, [r7, #8]
 800d09e:	603b      	str	r3, [r7, #0]
 800d0a0:	4613      	mov	r3, r2
 800d0a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d0a4:	e04f      	b.n	800d146 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d0a6:	69bb      	ldr	r3, [r7, #24]
 800d0a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d0ac:	d04b      	beq.n	800d146 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d0ae:	f7f5 f9b3 	bl	8002418 <HAL_GetTick>
 800d0b2:	4602      	mov	r2, r0
 800d0b4:	683b      	ldr	r3, [r7, #0]
 800d0b6:	1ad3      	subs	r3, r2, r3
 800d0b8:	69ba      	ldr	r2, [r7, #24]
 800d0ba:	429a      	cmp	r2, r3
 800d0bc:	d302      	bcc.n	800d0c4 <UART_WaitOnFlagUntilTimeout+0x30>
 800d0be:	69bb      	ldr	r3, [r7, #24]
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	d101      	bne.n	800d0c8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800d0c4:	2303      	movs	r3, #3
 800d0c6:	e04e      	b.n	800d166 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800d0c8:	68fb      	ldr	r3, [r7, #12]
 800d0ca:	681b      	ldr	r3, [r3, #0]
 800d0cc:	681b      	ldr	r3, [r3, #0]
 800d0ce:	f003 0304 	and.w	r3, r3, #4
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	d037      	beq.n	800d146 <UART_WaitOnFlagUntilTimeout+0xb2>
 800d0d6:	68bb      	ldr	r3, [r7, #8]
 800d0d8:	2b80      	cmp	r3, #128	@ 0x80
 800d0da:	d034      	beq.n	800d146 <UART_WaitOnFlagUntilTimeout+0xb2>
 800d0dc:	68bb      	ldr	r3, [r7, #8]
 800d0de:	2b40      	cmp	r3, #64	@ 0x40
 800d0e0:	d031      	beq.n	800d146 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800d0e2:	68fb      	ldr	r3, [r7, #12]
 800d0e4:	681b      	ldr	r3, [r3, #0]
 800d0e6:	69db      	ldr	r3, [r3, #28]
 800d0e8:	f003 0308 	and.w	r3, r3, #8
 800d0ec:	2b08      	cmp	r3, #8
 800d0ee:	d110      	bne.n	800d112 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d0f0:	68fb      	ldr	r3, [r7, #12]
 800d0f2:	681b      	ldr	r3, [r3, #0]
 800d0f4:	2208      	movs	r2, #8
 800d0f6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d0f8:	68f8      	ldr	r0, [r7, #12]
 800d0fa:	f000 f839 	bl	800d170 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800d0fe:	68fb      	ldr	r3, [r7, #12]
 800d100:	2208      	movs	r2, #8
 800d102:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d106:	68fb      	ldr	r3, [r7, #12]
 800d108:	2200      	movs	r2, #0
 800d10a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800d10e:	2301      	movs	r3, #1
 800d110:	e029      	b.n	800d166 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d112:	68fb      	ldr	r3, [r7, #12]
 800d114:	681b      	ldr	r3, [r3, #0]
 800d116:	69db      	ldr	r3, [r3, #28]
 800d118:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d11c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d120:	d111      	bne.n	800d146 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d122:	68fb      	ldr	r3, [r7, #12]
 800d124:	681b      	ldr	r3, [r3, #0]
 800d126:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800d12a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d12c:	68f8      	ldr	r0, [r7, #12]
 800d12e:	f000 f81f 	bl	800d170 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d132:	68fb      	ldr	r3, [r7, #12]
 800d134:	2220      	movs	r2, #32
 800d136:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d13a:	68fb      	ldr	r3, [r7, #12]
 800d13c:	2200      	movs	r2, #0
 800d13e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800d142:	2303      	movs	r3, #3
 800d144:	e00f      	b.n	800d166 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d146:	68fb      	ldr	r3, [r7, #12]
 800d148:	681b      	ldr	r3, [r3, #0]
 800d14a:	69da      	ldr	r2, [r3, #28]
 800d14c:	68bb      	ldr	r3, [r7, #8]
 800d14e:	4013      	ands	r3, r2
 800d150:	68ba      	ldr	r2, [r7, #8]
 800d152:	429a      	cmp	r2, r3
 800d154:	bf0c      	ite	eq
 800d156:	2301      	moveq	r3, #1
 800d158:	2300      	movne	r3, #0
 800d15a:	b2db      	uxtb	r3, r3
 800d15c:	461a      	mov	r2, r3
 800d15e:	79fb      	ldrb	r3, [r7, #7]
 800d160:	429a      	cmp	r2, r3
 800d162:	d0a0      	beq.n	800d0a6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d164:	2300      	movs	r3, #0
}
 800d166:	4618      	mov	r0, r3
 800d168:	3710      	adds	r7, #16
 800d16a:	46bd      	mov	sp, r7
 800d16c:	bd80      	pop	{r7, pc}
	...

0800d170 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d170:	b480      	push	{r7}
 800d172:	b095      	sub	sp, #84	@ 0x54
 800d174:	af00      	add	r7, sp, #0
 800d176:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	681b      	ldr	r3, [r3, #0]
 800d17c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d17e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d180:	e853 3f00 	ldrex	r3, [r3]
 800d184:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800d186:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d188:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d18c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	681b      	ldr	r3, [r3, #0]
 800d192:	461a      	mov	r2, r3
 800d194:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d196:	643b      	str	r3, [r7, #64]	@ 0x40
 800d198:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d19a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800d19c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d19e:	e841 2300 	strex	r3, r2, [r1]
 800d1a2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d1a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d1e6      	bne.n	800d178 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	681b      	ldr	r3, [r3, #0]
 800d1ae:	3308      	adds	r3, #8
 800d1b0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d1b2:	6a3b      	ldr	r3, [r7, #32]
 800d1b4:	e853 3f00 	ldrex	r3, [r3]
 800d1b8:	61fb      	str	r3, [r7, #28]
   return(result);
 800d1ba:	69fa      	ldr	r2, [r7, #28]
 800d1bc:	4b1e      	ldr	r3, [pc, #120]	@ (800d238 <UART_EndRxTransfer+0xc8>)
 800d1be:	4013      	ands	r3, r2
 800d1c0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	681b      	ldr	r3, [r3, #0]
 800d1c6:	3308      	adds	r3, #8
 800d1c8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d1ca:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d1cc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d1ce:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d1d0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d1d2:	e841 2300 	strex	r3, r2, [r1]
 800d1d6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d1d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	d1e5      	bne.n	800d1aa <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d1e2:	2b01      	cmp	r3, #1
 800d1e4:	d118      	bne.n	800d218 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	681b      	ldr	r3, [r3, #0]
 800d1ea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d1ec:	68fb      	ldr	r3, [r7, #12]
 800d1ee:	e853 3f00 	ldrex	r3, [r3]
 800d1f2:	60bb      	str	r3, [r7, #8]
   return(result);
 800d1f4:	68bb      	ldr	r3, [r7, #8]
 800d1f6:	f023 0310 	bic.w	r3, r3, #16
 800d1fa:	647b      	str	r3, [r7, #68]	@ 0x44
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	681b      	ldr	r3, [r3, #0]
 800d200:	461a      	mov	r2, r3
 800d202:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d204:	61bb      	str	r3, [r7, #24]
 800d206:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d208:	6979      	ldr	r1, [r7, #20]
 800d20a:	69ba      	ldr	r2, [r7, #24]
 800d20c:	e841 2300 	strex	r3, r2, [r1]
 800d210:	613b      	str	r3, [r7, #16]
   return(result);
 800d212:	693b      	ldr	r3, [r7, #16]
 800d214:	2b00      	cmp	r3, #0
 800d216:	d1e6      	bne.n	800d1e6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	2220      	movs	r2, #32
 800d21c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	2200      	movs	r2, #0
 800d224:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	2200      	movs	r2, #0
 800d22a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800d22c:	bf00      	nop
 800d22e:	3754      	adds	r7, #84	@ 0x54
 800d230:	46bd      	mov	sp, r7
 800d232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d236:	4770      	bx	lr
 800d238:	effffffe 	.word	0xeffffffe

0800d23c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800d23c:	b480      	push	{r7}
 800d23e:	b085      	sub	sp, #20
 800d240:	af00      	add	r7, sp, #0
 800d242:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d24a:	2b01      	cmp	r3, #1
 800d24c:	d101      	bne.n	800d252 <HAL_UARTEx_DisableFifoMode+0x16>
 800d24e:	2302      	movs	r3, #2
 800d250:	e027      	b.n	800d2a2 <HAL_UARTEx_DisableFifoMode+0x66>
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	2201      	movs	r2, #1
 800d256:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	2224      	movs	r2, #36	@ 0x24
 800d25e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	681b      	ldr	r3, [r3, #0]
 800d266:	681b      	ldr	r3, [r3, #0]
 800d268:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	681b      	ldr	r3, [r3, #0]
 800d26e:	681a      	ldr	r2, [r3, #0]
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	681b      	ldr	r3, [r3, #0]
 800d274:	f022 0201 	bic.w	r2, r2, #1
 800d278:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d27a:	68fb      	ldr	r3, [r7, #12]
 800d27c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800d280:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	2200      	movs	r2, #0
 800d286:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	681b      	ldr	r3, [r3, #0]
 800d28c:	68fa      	ldr	r2, [r7, #12]
 800d28e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	2220      	movs	r2, #32
 800d294:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	2200      	movs	r2, #0
 800d29c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d2a0:	2300      	movs	r3, #0
}
 800d2a2:	4618      	mov	r0, r3
 800d2a4:	3714      	adds	r7, #20
 800d2a6:	46bd      	mov	sp, r7
 800d2a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2ac:	4770      	bx	lr

0800d2ae <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d2ae:	b580      	push	{r7, lr}
 800d2b0:	b084      	sub	sp, #16
 800d2b2:	af00      	add	r7, sp, #0
 800d2b4:	6078      	str	r0, [r7, #4]
 800d2b6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d2be:	2b01      	cmp	r3, #1
 800d2c0:	d101      	bne.n	800d2c6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800d2c2:	2302      	movs	r3, #2
 800d2c4:	e02d      	b.n	800d322 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	2201      	movs	r2, #1
 800d2ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	2224      	movs	r2, #36	@ 0x24
 800d2d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	681b      	ldr	r3, [r3, #0]
 800d2da:	681b      	ldr	r3, [r3, #0]
 800d2dc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	681b      	ldr	r3, [r3, #0]
 800d2e2:	681a      	ldr	r2, [r3, #0]
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	f022 0201 	bic.w	r2, r2, #1
 800d2ec:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	681b      	ldr	r3, [r3, #0]
 800d2f2:	689b      	ldr	r3, [r3, #8]
 800d2f4:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	681b      	ldr	r3, [r3, #0]
 800d2fc:	683a      	ldr	r2, [r7, #0]
 800d2fe:	430a      	orrs	r2, r1
 800d300:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d302:	6878      	ldr	r0, [r7, #4]
 800d304:	f000 f850 	bl	800d3a8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	681b      	ldr	r3, [r3, #0]
 800d30c:	68fa      	ldr	r2, [r7, #12]
 800d30e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	2220      	movs	r2, #32
 800d314:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	2200      	movs	r2, #0
 800d31c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d320:	2300      	movs	r3, #0
}
 800d322:	4618      	mov	r0, r3
 800d324:	3710      	adds	r7, #16
 800d326:	46bd      	mov	sp, r7
 800d328:	bd80      	pop	{r7, pc}

0800d32a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d32a:	b580      	push	{r7, lr}
 800d32c:	b084      	sub	sp, #16
 800d32e:	af00      	add	r7, sp, #0
 800d330:	6078      	str	r0, [r7, #4]
 800d332:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d33a:	2b01      	cmp	r3, #1
 800d33c:	d101      	bne.n	800d342 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800d33e:	2302      	movs	r3, #2
 800d340:	e02d      	b.n	800d39e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	2201      	movs	r2, #1
 800d346:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	2224      	movs	r2, #36	@ 0x24
 800d34e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	681b      	ldr	r3, [r3, #0]
 800d356:	681b      	ldr	r3, [r3, #0]
 800d358:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	681b      	ldr	r3, [r3, #0]
 800d35e:	681a      	ldr	r2, [r3, #0]
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	681b      	ldr	r3, [r3, #0]
 800d364:	f022 0201 	bic.w	r2, r2, #1
 800d368:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	681b      	ldr	r3, [r3, #0]
 800d36e:	689b      	ldr	r3, [r3, #8]
 800d370:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	681b      	ldr	r3, [r3, #0]
 800d378:	683a      	ldr	r2, [r7, #0]
 800d37a:	430a      	orrs	r2, r1
 800d37c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d37e:	6878      	ldr	r0, [r7, #4]
 800d380:	f000 f812 	bl	800d3a8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	681b      	ldr	r3, [r3, #0]
 800d388:	68fa      	ldr	r2, [r7, #12]
 800d38a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	2220      	movs	r2, #32
 800d390:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	2200      	movs	r2, #0
 800d398:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d39c:	2300      	movs	r3, #0
}
 800d39e:	4618      	mov	r0, r3
 800d3a0:	3710      	adds	r7, #16
 800d3a2:	46bd      	mov	sp, r7
 800d3a4:	bd80      	pop	{r7, pc}
	...

0800d3a8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800d3a8:	b480      	push	{r7}
 800d3aa:	b085      	sub	sp, #20
 800d3ac:	af00      	add	r7, sp, #0
 800d3ae:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d3b4:	2b00      	cmp	r3, #0
 800d3b6:	d108      	bne.n	800d3ca <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	2201      	movs	r2, #1
 800d3bc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	2201      	movs	r2, #1
 800d3c4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800d3c8:	e031      	b.n	800d42e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800d3ca:	2310      	movs	r3, #16
 800d3cc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800d3ce:	2310      	movs	r3, #16
 800d3d0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	681b      	ldr	r3, [r3, #0]
 800d3d6:	689b      	ldr	r3, [r3, #8]
 800d3d8:	0e5b      	lsrs	r3, r3, #25
 800d3da:	b2db      	uxtb	r3, r3
 800d3dc:	f003 0307 	and.w	r3, r3, #7
 800d3e0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	681b      	ldr	r3, [r3, #0]
 800d3e6:	689b      	ldr	r3, [r3, #8]
 800d3e8:	0f5b      	lsrs	r3, r3, #29
 800d3ea:	b2db      	uxtb	r3, r3
 800d3ec:	f003 0307 	and.w	r3, r3, #7
 800d3f0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d3f2:	7bbb      	ldrb	r3, [r7, #14]
 800d3f4:	7b3a      	ldrb	r2, [r7, #12]
 800d3f6:	4911      	ldr	r1, [pc, #68]	@ (800d43c <UARTEx_SetNbDataToProcess+0x94>)
 800d3f8:	5c8a      	ldrb	r2, [r1, r2]
 800d3fa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800d3fe:	7b3a      	ldrb	r2, [r7, #12]
 800d400:	490f      	ldr	r1, [pc, #60]	@ (800d440 <UARTEx_SetNbDataToProcess+0x98>)
 800d402:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d404:	fb93 f3f2 	sdiv	r3, r3, r2
 800d408:	b29a      	uxth	r2, r3
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d410:	7bfb      	ldrb	r3, [r7, #15]
 800d412:	7b7a      	ldrb	r2, [r7, #13]
 800d414:	4909      	ldr	r1, [pc, #36]	@ (800d43c <UARTEx_SetNbDataToProcess+0x94>)
 800d416:	5c8a      	ldrb	r2, [r1, r2]
 800d418:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800d41c:	7b7a      	ldrb	r2, [r7, #13]
 800d41e:	4908      	ldr	r1, [pc, #32]	@ (800d440 <UARTEx_SetNbDataToProcess+0x98>)
 800d420:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d422:	fb93 f3f2 	sdiv	r3, r3, r2
 800d426:	b29a      	uxth	r2, r3
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800d42e:	bf00      	nop
 800d430:	3714      	adds	r7, #20
 800d432:	46bd      	mov	sp, r7
 800d434:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d438:	4770      	bx	lr
 800d43a:	bf00      	nop
 800d43c:	0800e080 	.word	0x0800e080
 800d440:	0800e088 	.word	0x0800e088

0800d444 <memset>:
 800d444:	4402      	add	r2, r0
 800d446:	4603      	mov	r3, r0
 800d448:	4293      	cmp	r3, r2
 800d44a:	d100      	bne.n	800d44e <memset+0xa>
 800d44c:	4770      	bx	lr
 800d44e:	f803 1b01 	strb.w	r1, [r3], #1
 800d452:	e7f9      	b.n	800d448 <memset+0x4>

0800d454 <__libc_init_array>:
 800d454:	b570      	push	{r4, r5, r6, lr}
 800d456:	4d0d      	ldr	r5, [pc, #52]	@ (800d48c <__libc_init_array+0x38>)
 800d458:	4c0d      	ldr	r4, [pc, #52]	@ (800d490 <__libc_init_array+0x3c>)
 800d45a:	1b64      	subs	r4, r4, r5
 800d45c:	10a4      	asrs	r4, r4, #2
 800d45e:	2600      	movs	r6, #0
 800d460:	42a6      	cmp	r6, r4
 800d462:	d109      	bne.n	800d478 <__libc_init_array+0x24>
 800d464:	4d0b      	ldr	r5, [pc, #44]	@ (800d494 <__libc_init_array+0x40>)
 800d466:	4c0c      	ldr	r4, [pc, #48]	@ (800d498 <__libc_init_array+0x44>)
 800d468:	f000 fde6 	bl	800e038 <_init>
 800d46c:	1b64      	subs	r4, r4, r5
 800d46e:	10a4      	asrs	r4, r4, #2
 800d470:	2600      	movs	r6, #0
 800d472:	42a6      	cmp	r6, r4
 800d474:	d105      	bne.n	800d482 <__libc_init_array+0x2e>
 800d476:	bd70      	pop	{r4, r5, r6, pc}
 800d478:	f855 3b04 	ldr.w	r3, [r5], #4
 800d47c:	4798      	blx	r3
 800d47e:	3601      	adds	r6, #1
 800d480:	e7ee      	b.n	800d460 <__libc_init_array+0xc>
 800d482:	f855 3b04 	ldr.w	r3, [r5], #4
 800d486:	4798      	blx	r3
 800d488:	3601      	adds	r6, #1
 800d48a:	e7f2      	b.n	800d472 <__libc_init_array+0x1e>
 800d48c:	0800e270 	.word	0x0800e270
 800d490:	0800e270 	.word	0x0800e270
 800d494:	0800e270 	.word	0x0800e270
 800d498:	0800e274 	.word	0x0800e274
 800d49c:	00000000 	.word	0x00000000

0800d4a0 <sin>:
 800d4a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d4a2:	eeb0 7b40 	vmov.f64	d7, d0
 800d4a6:	ee17 3a90 	vmov	r3, s15
 800d4aa:	4a21      	ldr	r2, [pc, #132]	@ (800d530 <sin+0x90>)
 800d4ac:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d4b0:	4293      	cmp	r3, r2
 800d4b2:	d807      	bhi.n	800d4c4 <sin+0x24>
 800d4b4:	ed9f 1b1c 	vldr	d1, [pc, #112]	@ 800d528 <sin+0x88>
 800d4b8:	2000      	movs	r0, #0
 800d4ba:	b005      	add	sp, #20
 800d4bc:	f85d eb04 	ldr.w	lr, [sp], #4
 800d4c0:	f000 b8a2 	b.w	800d608 <__kernel_sin>
 800d4c4:	4a1b      	ldr	r2, [pc, #108]	@ (800d534 <sin+0x94>)
 800d4c6:	4293      	cmp	r3, r2
 800d4c8:	d904      	bls.n	800d4d4 <sin+0x34>
 800d4ca:	ee30 0b40 	vsub.f64	d0, d0, d0
 800d4ce:	b005      	add	sp, #20
 800d4d0:	f85d fb04 	ldr.w	pc, [sp], #4
 800d4d4:	4668      	mov	r0, sp
 800d4d6:	f000 f8ef 	bl	800d6b8 <__ieee754_rem_pio2>
 800d4da:	f000 0003 	and.w	r0, r0, #3
 800d4de:	2801      	cmp	r0, #1
 800d4e0:	d00a      	beq.n	800d4f8 <sin+0x58>
 800d4e2:	2802      	cmp	r0, #2
 800d4e4:	d00f      	beq.n	800d506 <sin+0x66>
 800d4e6:	b9c0      	cbnz	r0, 800d51a <sin+0x7a>
 800d4e8:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d4ec:	ed9d 0b00 	vldr	d0, [sp]
 800d4f0:	2001      	movs	r0, #1
 800d4f2:	f000 f889 	bl	800d608 <__kernel_sin>
 800d4f6:	e7ea      	b.n	800d4ce <sin+0x2e>
 800d4f8:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d4fc:	ed9d 0b00 	vldr	d0, [sp]
 800d500:	f000 f81a 	bl	800d538 <__kernel_cos>
 800d504:	e7e3      	b.n	800d4ce <sin+0x2e>
 800d506:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d50a:	ed9d 0b00 	vldr	d0, [sp]
 800d50e:	2001      	movs	r0, #1
 800d510:	f000 f87a 	bl	800d608 <__kernel_sin>
 800d514:	eeb1 0b40 	vneg.f64	d0, d0
 800d518:	e7d9      	b.n	800d4ce <sin+0x2e>
 800d51a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d51e:	ed9d 0b00 	vldr	d0, [sp]
 800d522:	f000 f809 	bl	800d538 <__kernel_cos>
 800d526:	e7f5      	b.n	800d514 <sin+0x74>
	...
 800d530:	3fe921fb 	.word	0x3fe921fb
 800d534:	7fefffff 	.word	0x7fefffff

0800d538 <__kernel_cos>:
 800d538:	eeb0 5b40 	vmov.f64	d5, d0
 800d53c:	ee15 1a90 	vmov	r1, s11
 800d540:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 800d544:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800d548:	f1b1 5f79 	cmp.w	r1, #1044381696	@ 0x3e400000
 800d54c:	d204      	bcs.n	800d558 <__kernel_cos+0x20>
 800d54e:	eefd 7bc5 	vcvt.s32.f64	s15, d5
 800d552:	ee17 3a90 	vmov	r3, s15
 800d556:	b343      	cbz	r3, 800d5aa <__kernel_cos+0x72>
 800d558:	ee25 6b05 	vmul.f64	d6, d5, d5
 800d55c:	ee21 1b45 	vnmul.f64	d1, d1, d5
 800d560:	ed9f 7b1b 	vldr	d7, [pc, #108]	@ 800d5d0 <__kernel_cos+0x98>
 800d564:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 800d5d8 <__kernel_cos+0xa0>
 800d568:	eea6 4b07 	vfma.f64	d4, d6, d7
 800d56c:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 800d5e0 <__kernel_cos+0xa8>
 800d570:	eea4 7b06 	vfma.f64	d7, d4, d6
 800d574:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 800d5e8 <__kernel_cos+0xb0>
 800d578:	eea7 4b06 	vfma.f64	d4, d7, d6
 800d57c:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 800d5f0 <__kernel_cos+0xb8>
 800d580:	4b1f      	ldr	r3, [pc, #124]	@ (800d600 <__kernel_cos+0xc8>)
 800d582:	eea4 7b06 	vfma.f64	d7, d4, d6
 800d586:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 800d5f8 <__kernel_cos+0xc0>
 800d58a:	4299      	cmp	r1, r3
 800d58c:	eea7 4b06 	vfma.f64	d4, d7, d6
 800d590:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 800d594:	ee24 4b06 	vmul.f64	d4, d4, d6
 800d598:	ee26 7b07 	vmul.f64	d7, d6, d7
 800d59c:	eea6 1b04 	vfma.f64	d1, d6, d4
 800d5a0:	d804      	bhi.n	800d5ac <__kernel_cos+0x74>
 800d5a2:	ee37 7b41 	vsub.f64	d7, d7, d1
 800d5a6:	ee30 0b47 	vsub.f64	d0, d0, d7
 800d5aa:	4770      	bx	lr
 800d5ac:	4b15      	ldr	r3, [pc, #84]	@ (800d604 <__kernel_cos+0xcc>)
 800d5ae:	4299      	cmp	r1, r3
 800d5b0:	d809      	bhi.n	800d5c6 <__kernel_cos+0x8e>
 800d5b2:	2200      	movs	r2, #0
 800d5b4:	f5a1 1300 	sub.w	r3, r1, #2097152	@ 0x200000
 800d5b8:	ec43 2b16 	vmov	d6, r2, r3
 800d5bc:	ee30 0b46 	vsub.f64	d0, d0, d6
 800d5c0:	ee37 7b46 	vsub.f64	d7, d7, d6
 800d5c4:	e7ed      	b.n	800d5a2 <__kernel_cos+0x6a>
 800d5c6:	eeb5 6b02 	vmov.f64	d6, #82	@ 0x3e900000  0.2812500
 800d5ca:	e7f7      	b.n	800d5bc <__kernel_cos+0x84>
 800d5cc:	f3af 8000 	nop.w
 800d5d0:	be8838d4 	.word	0xbe8838d4
 800d5d4:	bda8fae9 	.word	0xbda8fae9
 800d5d8:	bdb4b1c4 	.word	0xbdb4b1c4
 800d5dc:	3e21ee9e 	.word	0x3e21ee9e
 800d5e0:	809c52ad 	.word	0x809c52ad
 800d5e4:	be927e4f 	.word	0xbe927e4f
 800d5e8:	19cb1590 	.word	0x19cb1590
 800d5ec:	3efa01a0 	.word	0x3efa01a0
 800d5f0:	16c15177 	.word	0x16c15177
 800d5f4:	bf56c16c 	.word	0xbf56c16c
 800d5f8:	5555554c 	.word	0x5555554c
 800d5fc:	3fa55555 	.word	0x3fa55555
 800d600:	3fd33332 	.word	0x3fd33332
 800d604:	3fe90000 	.word	0x3fe90000

0800d608 <__kernel_sin>:
 800d608:	ee10 3a90 	vmov	r3, s1
 800d60c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d610:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800d614:	d204      	bcs.n	800d620 <__kernel_sin+0x18>
 800d616:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 800d61a:	ee17 3a90 	vmov	r3, s15
 800d61e:	b35b      	cbz	r3, 800d678 <__kernel_sin+0x70>
 800d620:	ee20 6b00 	vmul.f64	d6, d0, d0
 800d624:	ee20 5b06 	vmul.f64	d5, d0, d6
 800d628:	ed9f 7b15 	vldr	d7, [pc, #84]	@ 800d680 <__kernel_sin+0x78>
 800d62c:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 800d688 <__kernel_sin+0x80>
 800d630:	eea6 4b07 	vfma.f64	d4, d6, d7
 800d634:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 800d690 <__kernel_sin+0x88>
 800d638:	eea4 7b06 	vfma.f64	d7, d4, d6
 800d63c:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 800d698 <__kernel_sin+0x90>
 800d640:	eea7 4b06 	vfma.f64	d4, d7, d6
 800d644:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 800d6a0 <__kernel_sin+0x98>
 800d648:	eea4 7b06 	vfma.f64	d7, d4, d6
 800d64c:	b930      	cbnz	r0, 800d65c <__kernel_sin+0x54>
 800d64e:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 800d6a8 <__kernel_sin+0xa0>
 800d652:	eea6 4b07 	vfma.f64	d4, d6, d7
 800d656:	eea4 0b05 	vfma.f64	d0, d4, d5
 800d65a:	4770      	bx	lr
 800d65c:	ee27 7b45 	vnmul.f64	d7, d7, d5
 800d660:	eeb6 4b00 	vmov.f64	d4, #96	@ 0x3f000000  0.5
 800d664:	eea1 7b04 	vfma.f64	d7, d1, d4
 800d668:	ee97 1b06 	vfnms.f64	d1, d7, d6
 800d66c:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 800d6b0 <__kernel_sin+0xa8>
 800d670:	eea5 1b07 	vfma.f64	d1, d5, d7
 800d674:	ee30 0b41 	vsub.f64	d0, d0, d1
 800d678:	4770      	bx	lr
 800d67a:	bf00      	nop
 800d67c:	f3af 8000 	nop.w
 800d680:	5acfd57c 	.word	0x5acfd57c
 800d684:	3de5d93a 	.word	0x3de5d93a
 800d688:	8a2b9ceb 	.word	0x8a2b9ceb
 800d68c:	be5ae5e6 	.word	0xbe5ae5e6
 800d690:	57b1fe7d 	.word	0x57b1fe7d
 800d694:	3ec71de3 	.word	0x3ec71de3
 800d698:	19c161d5 	.word	0x19c161d5
 800d69c:	bf2a01a0 	.word	0xbf2a01a0
 800d6a0:	1110f8a6 	.word	0x1110f8a6
 800d6a4:	3f811111 	.word	0x3f811111
 800d6a8:	55555549 	.word	0x55555549
 800d6ac:	bfc55555 	.word	0xbfc55555
 800d6b0:	55555549 	.word	0x55555549
 800d6b4:	3fc55555 	.word	0x3fc55555

0800d6b8 <__ieee754_rem_pio2>:
 800d6b8:	b570      	push	{r4, r5, r6, lr}
 800d6ba:	eeb0 7b40 	vmov.f64	d7, d0
 800d6be:	ee17 5a90 	vmov	r5, s15
 800d6c2:	4b99      	ldr	r3, [pc, #612]	@ (800d928 <__ieee754_rem_pio2+0x270>)
 800d6c4:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800d6c8:	429e      	cmp	r6, r3
 800d6ca:	b088      	sub	sp, #32
 800d6cc:	4604      	mov	r4, r0
 800d6ce:	d807      	bhi.n	800d6e0 <__ieee754_rem_pio2+0x28>
 800d6d0:	2200      	movs	r2, #0
 800d6d2:	2300      	movs	r3, #0
 800d6d4:	ed84 0b00 	vstr	d0, [r4]
 800d6d8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800d6dc:	2000      	movs	r0, #0
 800d6de:	e01b      	b.n	800d718 <__ieee754_rem_pio2+0x60>
 800d6e0:	4b92      	ldr	r3, [pc, #584]	@ (800d92c <__ieee754_rem_pio2+0x274>)
 800d6e2:	429e      	cmp	r6, r3
 800d6e4:	d83b      	bhi.n	800d75e <__ieee754_rem_pio2+0xa6>
 800d6e6:	f5a3 231b 	sub.w	r3, r3, #634880	@ 0x9b000
 800d6ea:	2d00      	cmp	r5, #0
 800d6ec:	ed9f 6b7e 	vldr	d6, [pc, #504]	@ 800d8e8 <__ieee754_rem_pio2+0x230>
 800d6f0:	f5a3 63f0 	sub.w	r3, r3, #1920	@ 0x780
 800d6f4:	dd19      	ble.n	800d72a <__ieee754_rem_pio2+0x72>
 800d6f6:	ee30 7b46 	vsub.f64	d7, d0, d6
 800d6fa:	429e      	cmp	r6, r3
 800d6fc:	d00e      	beq.n	800d71c <__ieee754_rem_pio2+0x64>
 800d6fe:	ed9f 5b7c 	vldr	d5, [pc, #496]	@ 800d8f0 <__ieee754_rem_pio2+0x238>
 800d702:	ee37 6b45 	vsub.f64	d6, d7, d5
 800d706:	ee37 7b46 	vsub.f64	d7, d7, d6
 800d70a:	ed84 6b00 	vstr	d6, [r4]
 800d70e:	ee37 7b45 	vsub.f64	d7, d7, d5
 800d712:	ed84 7b02 	vstr	d7, [r4, #8]
 800d716:	2001      	movs	r0, #1
 800d718:	b008      	add	sp, #32
 800d71a:	bd70      	pop	{r4, r5, r6, pc}
 800d71c:	ed9f 6b76 	vldr	d6, [pc, #472]	@ 800d8f8 <__ieee754_rem_pio2+0x240>
 800d720:	ed9f 5b77 	vldr	d5, [pc, #476]	@ 800d900 <__ieee754_rem_pio2+0x248>
 800d724:	ee37 7b46 	vsub.f64	d7, d7, d6
 800d728:	e7eb      	b.n	800d702 <__ieee754_rem_pio2+0x4a>
 800d72a:	429e      	cmp	r6, r3
 800d72c:	ee30 7b06 	vadd.f64	d7, d0, d6
 800d730:	d00e      	beq.n	800d750 <__ieee754_rem_pio2+0x98>
 800d732:	ed9f 5b6f 	vldr	d5, [pc, #444]	@ 800d8f0 <__ieee754_rem_pio2+0x238>
 800d736:	ee37 6b05 	vadd.f64	d6, d7, d5
 800d73a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800d73e:	ed84 6b00 	vstr	d6, [r4]
 800d742:	ee37 7b05 	vadd.f64	d7, d7, d5
 800d746:	f04f 30ff 	mov.w	r0, #4294967295
 800d74a:	ed84 7b02 	vstr	d7, [r4, #8]
 800d74e:	e7e3      	b.n	800d718 <__ieee754_rem_pio2+0x60>
 800d750:	ed9f 6b69 	vldr	d6, [pc, #420]	@ 800d8f8 <__ieee754_rem_pio2+0x240>
 800d754:	ed9f 5b6a 	vldr	d5, [pc, #424]	@ 800d900 <__ieee754_rem_pio2+0x248>
 800d758:	ee37 7b06 	vadd.f64	d7, d7, d6
 800d75c:	e7eb      	b.n	800d736 <__ieee754_rem_pio2+0x7e>
 800d75e:	4b74      	ldr	r3, [pc, #464]	@ (800d930 <__ieee754_rem_pio2+0x278>)
 800d760:	429e      	cmp	r6, r3
 800d762:	d870      	bhi.n	800d846 <__ieee754_rem_pio2+0x18e>
 800d764:	f000 f8ec 	bl	800d940 <fabs>
 800d768:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 800d76c:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 800d908 <__ieee754_rem_pio2+0x250>
 800d770:	eea0 7b06 	vfma.f64	d7, d0, d6
 800d774:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800d778:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800d77c:	ee17 0a90 	vmov	r0, s15
 800d780:	eeb1 4b45 	vneg.f64	d4, d5
 800d784:	ed9f 7b58 	vldr	d7, [pc, #352]	@ 800d8e8 <__ieee754_rem_pio2+0x230>
 800d788:	eea5 0b47 	vfms.f64	d0, d5, d7
 800d78c:	ed9f 7b58 	vldr	d7, [pc, #352]	@ 800d8f0 <__ieee754_rem_pio2+0x238>
 800d790:	281f      	cmp	r0, #31
 800d792:	ee25 7b07 	vmul.f64	d7, d5, d7
 800d796:	ee30 6b47 	vsub.f64	d6, d0, d7
 800d79a:	dc05      	bgt.n	800d7a8 <__ieee754_rem_pio2+0xf0>
 800d79c:	4b65      	ldr	r3, [pc, #404]	@ (800d934 <__ieee754_rem_pio2+0x27c>)
 800d79e:	1e42      	subs	r2, r0, #1
 800d7a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d7a4:	42b3      	cmp	r3, r6
 800d7a6:	d109      	bne.n	800d7bc <__ieee754_rem_pio2+0x104>
 800d7a8:	ee16 3a90 	vmov	r3, s13
 800d7ac:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800d7b0:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 800d7b4:	2b10      	cmp	r3, #16
 800d7b6:	ea4f 5226 	mov.w	r2, r6, asr #20
 800d7ba:	dc02      	bgt.n	800d7c2 <__ieee754_rem_pio2+0x10a>
 800d7bc:	ed84 6b00 	vstr	d6, [r4]
 800d7c0:	e01a      	b.n	800d7f8 <__ieee754_rem_pio2+0x140>
 800d7c2:	ed9f 3b4d 	vldr	d3, [pc, #308]	@ 800d8f8 <__ieee754_rem_pio2+0x240>
 800d7c6:	eeb0 6b40 	vmov.f64	d6, d0
 800d7ca:	eea4 6b03 	vfma.f64	d6, d4, d3
 800d7ce:	ee30 7b46 	vsub.f64	d7, d0, d6
 800d7d2:	eea4 7b03 	vfma.f64	d7, d4, d3
 800d7d6:	ed9f 3b4a 	vldr	d3, [pc, #296]	@ 800d900 <__ieee754_rem_pio2+0x248>
 800d7da:	ee95 7b03 	vfnms.f64	d7, d5, d3
 800d7de:	ee36 3b47 	vsub.f64	d3, d6, d7
 800d7e2:	ee13 3a90 	vmov	r3, s7
 800d7e6:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800d7ea:	1ad3      	subs	r3, r2, r3
 800d7ec:	2b31      	cmp	r3, #49	@ 0x31
 800d7ee:	dc17      	bgt.n	800d820 <__ieee754_rem_pio2+0x168>
 800d7f0:	eeb0 0b46 	vmov.f64	d0, d6
 800d7f4:	ed84 3b00 	vstr	d3, [r4]
 800d7f8:	ed94 6b00 	vldr	d6, [r4]
 800d7fc:	2d00      	cmp	r5, #0
 800d7fe:	ee30 0b46 	vsub.f64	d0, d0, d6
 800d802:	ee30 0b47 	vsub.f64	d0, d0, d7
 800d806:	ed84 0b02 	vstr	d0, [r4, #8]
 800d80a:	da85      	bge.n	800d718 <__ieee754_rem_pio2+0x60>
 800d80c:	eeb1 6b46 	vneg.f64	d6, d6
 800d810:	eeb1 0b40 	vneg.f64	d0, d0
 800d814:	ed84 6b00 	vstr	d6, [r4]
 800d818:	ed84 0b02 	vstr	d0, [r4, #8]
 800d81c:	4240      	negs	r0, r0
 800d81e:	e77b      	b.n	800d718 <__ieee754_rem_pio2+0x60>
 800d820:	ed9f 7b3b 	vldr	d7, [pc, #236]	@ 800d910 <__ieee754_rem_pio2+0x258>
 800d824:	eeb0 0b46 	vmov.f64	d0, d6
 800d828:	eea4 0b07 	vfma.f64	d0, d4, d7
 800d82c:	ee36 6b40 	vsub.f64	d6, d6, d0
 800d830:	eea4 6b07 	vfma.f64	d6, d4, d7
 800d834:	ed9f 4b38 	vldr	d4, [pc, #224]	@ 800d918 <__ieee754_rem_pio2+0x260>
 800d838:	eeb0 7b46 	vmov.f64	d7, d6
 800d83c:	ee95 7b04 	vfnms.f64	d7, d5, d4
 800d840:	ee30 6b47 	vsub.f64	d6, d0, d7
 800d844:	e7ba      	b.n	800d7bc <__ieee754_rem_pio2+0x104>
 800d846:	4b3c      	ldr	r3, [pc, #240]	@ (800d938 <__ieee754_rem_pio2+0x280>)
 800d848:	429e      	cmp	r6, r3
 800d84a:	d906      	bls.n	800d85a <__ieee754_rem_pio2+0x1a2>
 800d84c:	ee30 7b40 	vsub.f64	d7, d0, d0
 800d850:	ed80 7b02 	vstr	d7, [r0, #8]
 800d854:	ed80 7b00 	vstr	d7, [r0]
 800d858:	e740      	b.n	800d6dc <__ieee754_rem_pio2+0x24>
 800d85a:	ee10 3a10 	vmov	r3, s0
 800d85e:	1532      	asrs	r2, r6, #20
 800d860:	f2a2 4216 	subw	r2, r2, #1046	@ 0x416
 800d864:	4618      	mov	r0, r3
 800d866:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 800d86a:	ec41 0b17 	vmov	d7, r0, r1
 800d86e:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800d872:	ed9f 5b2b 	vldr	d5, [pc, #172]	@ 800d920 <__ieee754_rem_pio2+0x268>
 800d876:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800d87a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800d87e:	ed8d 6b02 	vstr	d6, [sp, #8]
 800d882:	ee27 7b05 	vmul.f64	d7, d7, d5
 800d886:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800d88a:	a808      	add	r0, sp, #32
 800d88c:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800d890:	ee37 7b46 	vsub.f64	d7, d7, d6
 800d894:	ed8d 6b04 	vstr	d6, [sp, #16]
 800d898:	ee27 7b05 	vmul.f64	d7, d7, d5
 800d89c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d8a0:	2103      	movs	r1, #3
 800d8a2:	ed30 7b02 	vldmdb	r0!, {d7}
 800d8a6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d8aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d8ae:	460b      	mov	r3, r1
 800d8b0:	f101 31ff 	add.w	r1, r1, #4294967295
 800d8b4:	d0f5      	beq.n	800d8a2 <__ieee754_rem_pio2+0x1ea>
 800d8b6:	4921      	ldr	r1, [pc, #132]	@ (800d93c <__ieee754_rem_pio2+0x284>)
 800d8b8:	9101      	str	r1, [sp, #4]
 800d8ba:	2102      	movs	r1, #2
 800d8bc:	9100      	str	r1, [sp, #0]
 800d8be:	a802      	add	r0, sp, #8
 800d8c0:	4621      	mov	r1, r4
 800d8c2:	f000 f845 	bl	800d950 <__kernel_rem_pio2>
 800d8c6:	2d00      	cmp	r5, #0
 800d8c8:	f6bf af26 	bge.w	800d718 <__ieee754_rem_pio2+0x60>
 800d8cc:	ed94 7b00 	vldr	d7, [r4]
 800d8d0:	eeb1 7b47 	vneg.f64	d7, d7
 800d8d4:	ed84 7b00 	vstr	d7, [r4]
 800d8d8:	ed94 7b02 	vldr	d7, [r4, #8]
 800d8dc:	eeb1 7b47 	vneg.f64	d7, d7
 800d8e0:	ed84 7b02 	vstr	d7, [r4, #8]
 800d8e4:	e79a      	b.n	800d81c <__ieee754_rem_pio2+0x164>
 800d8e6:	bf00      	nop
 800d8e8:	54400000 	.word	0x54400000
 800d8ec:	3ff921fb 	.word	0x3ff921fb
 800d8f0:	1a626331 	.word	0x1a626331
 800d8f4:	3dd0b461 	.word	0x3dd0b461
 800d8f8:	1a600000 	.word	0x1a600000
 800d8fc:	3dd0b461 	.word	0x3dd0b461
 800d900:	2e037073 	.word	0x2e037073
 800d904:	3ba3198a 	.word	0x3ba3198a
 800d908:	6dc9c883 	.word	0x6dc9c883
 800d90c:	3fe45f30 	.word	0x3fe45f30
 800d910:	2e000000 	.word	0x2e000000
 800d914:	3ba3198a 	.word	0x3ba3198a
 800d918:	252049c1 	.word	0x252049c1
 800d91c:	397b839a 	.word	0x397b839a
 800d920:	00000000 	.word	0x00000000
 800d924:	41700000 	.word	0x41700000
 800d928:	3fe921fb 	.word	0x3fe921fb
 800d92c:	4002d97b 	.word	0x4002d97b
 800d930:	413921fb 	.word	0x413921fb
 800d934:	0800e090 	.word	0x0800e090
 800d938:	7fefffff 	.word	0x7fefffff
 800d93c:	0800e110 	.word	0x0800e110

0800d940 <fabs>:
 800d940:	ec51 0b10 	vmov	r0, r1, d0
 800d944:	4602      	mov	r2, r0
 800d946:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800d94a:	ec43 2b10 	vmov	d0, r2, r3
 800d94e:	4770      	bx	lr

0800d950 <__kernel_rem_pio2>:
 800d950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d954:	ed2d 8b06 	vpush	{d8-d10}
 800d958:	f5ad 7d13 	sub.w	sp, sp, #588	@ 0x24c
 800d95c:	469b      	mov	fp, r3
 800d95e:	9001      	str	r0, [sp, #4]
 800d960:	4bbb      	ldr	r3, [pc, #748]	@ (800dc50 <__kernel_rem_pio2+0x300>)
 800d962:	98a2      	ldr	r0, [sp, #648]	@ 0x288
 800d964:	f8dd 828c 	ldr.w	r8, [sp, #652]	@ 0x28c
 800d968:	f853 9020 	ldr.w	r9, [r3, r0, lsl #2]
 800d96c:	f112 0f14 	cmn.w	r2, #20
 800d970:	bfa8      	it	ge
 800d972:	1ed3      	subge	r3, r2, #3
 800d974:	f10b 3aff 	add.w	sl, fp, #4294967295
 800d978:	bfb8      	it	lt
 800d97a:	2300      	movlt	r3, #0
 800d97c:	f06f 0517 	mvn.w	r5, #23
 800d980:	ed9f 6bad 	vldr	d6, [pc, #692]	@ 800dc38 <__kernel_rem_pio2+0x2e8>
 800d984:	bfa4      	itt	ge
 800d986:	2018      	movge	r0, #24
 800d988:	fb93 f3f0 	sdivge	r3, r3, r0
 800d98c:	fb03 5505 	mla	r5, r3, r5, r5
 800d990:	eba3 040a 	sub.w	r4, r3, sl
 800d994:	4415      	add	r5, r2
 800d996:	460f      	mov	r7, r1
 800d998:	eb09 060a 	add.w	r6, r9, sl
 800d99c:	a81a      	add	r0, sp, #104	@ 0x68
 800d99e:	eb08 0c84 	add.w	ip, r8, r4, lsl #2
 800d9a2:	2200      	movs	r2, #0
 800d9a4:	42b2      	cmp	r2, r6
 800d9a6:	dd0e      	ble.n	800d9c6 <__kernel_rem_pio2+0x76>
 800d9a8:	aa1a      	add	r2, sp, #104	@ 0x68
 800d9aa:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 800d9ae:	f50d 7ed4 	add.w	lr, sp, #424	@ 0x1a8
 800d9b2:	2600      	movs	r6, #0
 800d9b4:	454e      	cmp	r6, r9
 800d9b6:	dc25      	bgt.n	800da04 <__kernel_rem_pio2+0xb4>
 800d9b8:	ed9f 7b9f 	vldr	d7, [pc, #636]	@ 800dc38 <__kernel_rem_pio2+0x2e8>
 800d9bc:	f8dd c004 	ldr.w	ip, [sp, #4]
 800d9c0:	4614      	mov	r4, r2
 800d9c2:	2000      	movs	r0, #0
 800d9c4:	e015      	b.n	800d9f2 <__kernel_rem_pio2+0xa2>
 800d9c6:	42d4      	cmn	r4, r2
 800d9c8:	d409      	bmi.n	800d9de <__kernel_rem_pio2+0x8e>
 800d9ca:	f85c 1022 	ldr.w	r1, [ip, r2, lsl #2]
 800d9ce:	ee07 1a90 	vmov	s15, r1
 800d9d2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800d9d6:	eca0 7b02 	vstmia	r0!, {d7}
 800d9da:	3201      	adds	r2, #1
 800d9dc:	e7e2      	b.n	800d9a4 <__kernel_rem_pio2+0x54>
 800d9de:	eeb0 7b46 	vmov.f64	d7, d6
 800d9e2:	e7f8      	b.n	800d9d6 <__kernel_rem_pio2+0x86>
 800d9e4:	ecbc 5b02 	vldmia	ip!, {d5}
 800d9e8:	ed94 6b00 	vldr	d6, [r4]
 800d9ec:	3001      	adds	r0, #1
 800d9ee:	eea5 7b06 	vfma.f64	d7, d5, d6
 800d9f2:	4550      	cmp	r0, sl
 800d9f4:	f1a4 0408 	sub.w	r4, r4, #8
 800d9f8:	ddf4      	ble.n	800d9e4 <__kernel_rem_pio2+0x94>
 800d9fa:	ecae 7b02 	vstmia	lr!, {d7}
 800d9fe:	3601      	adds	r6, #1
 800da00:	3208      	adds	r2, #8
 800da02:	e7d7      	b.n	800d9b4 <__kernel_rem_pio2+0x64>
 800da04:	aa06      	add	r2, sp, #24
 800da06:	ed9f 9b8e 	vldr	d9, [pc, #568]	@ 800dc40 <__kernel_rem_pio2+0x2f0>
 800da0a:	ed9f ab8f 	vldr	d10, [pc, #572]	@ 800dc48 <__kernel_rem_pio2+0x2f8>
 800da0e:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 800da12:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 800da16:	9203      	str	r2, [sp, #12]
 800da18:	9302      	str	r3, [sp, #8]
 800da1a:	464c      	mov	r4, r9
 800da1c:	00e3      	lsls	r3, r4, #3
 800da1e:	9304      	str	r3, [sp, #16]
 800da20:	ab92      	add	r3, sp, #584	@ 0x248
 800da22:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800da26:	ed13 0b28 	vldr	d0, [r3, #-160]	@ 0xffffff60
 800da2a:	aa6a      	add	r2, sp, #424	@ 0x1a8
 800da2c:	ab06      	add	r3, sp, #24
 800da2e:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800da32:	461e      	mov	r6, r3
 800da34:	4620      	mov	r0, r4
 800da36:	2800      	cmp	r0, #0
 800da38:	f1a2 0208 	sub.w	r2, r2, #8
 800da3c:	dc4a      	bgt.n	800dad4 <__kernel_rem_pio2+0x184>
 800da3e:	4628      	mov	r0, r5
 800da40:	9305      	str	r3, [sp, #20]
 800da42:	f000 fa01 	bl	800de48 <scalbn>
 800da46:	eeb0 8b40 	vmov.f64	d8, d0
 800da4a:	eeb4 0b00 	vmov.f64	d0, #64	@ 0x3e000000  0.125
 800da4e:	ee28 0b00 	vmul.f64	d0, d8, d0
 800da52:	f000 fa79 	bl	800df48 <floor>
 800da56:	eeb2 7b00 	vmov.f64	d7, #32	@ 0x41000000  8.0
 800da5a:	eea0 8b47 	vfms.f64	d8, d0, d7
 800da5e:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 800da62:	2d00      	cmp	r5, #0
 800da64:	ee17 8a90 	vmov	r8, s15
 800da68:	9b05      	ldr	r3, [sp, #20]
 800da6a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800da6e:	ee38 8b47 	vsub.f64	d8, d8, d7
 800da72:	dd41      	ble.n	800daf8 <__kernel_rem_pio2+0x1a8>
 800da74:	1e60      	subs	r0, r4, #1
 800da76:	aa06      	add	r2, sp, #24
 800da78:	f1c5 0c18 	rsb	ip, r5, #24
 800da7c:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 800da80:	fa46 f20c 	asr.w	r2, r6, ip
 800da84:	4490      	add	r8, r2
 800da86:	fa02 f20c 	lsl.w	r2, r2, ip
 800da8a:	1ab6      	subs	r6, r6, r2
 800da8c:	aa06      	add	r2, sp, #24
 800da8e:	f842 6020 	str.w	r6, [r2, r0, lsl #2]
 800da92:	f1c5 0217 	rsb	r2, r5, #23
 800da96:	4116      	asrs	r6, r2
 800da98:	2e00      	cmp	r6, #0
 800da9a:	dd3c      	ble.n	800db16 <__kernel_rem_pio2+0x1c6>
 800da9c:	f04f 0c00 	mov.w	ip, #0
 800daa0:	f108 0801 	add.w	r8, r8, #1
 800daa4:	4660      	mov	r0, ip
 800daa6:	f06f 4e7f 	mvn.w	lr, #4278190080	@ 0xff000000
 800daaa:	4564      	cmp	r4, ip
 800daac:	dc66      	bgt.n	800db7c <__kernel_rem_pio2+0x22c>
 800daae:	2d00      	cmp	r5, #0
 800dab0:	dd03      	ble.n	800daba <__kernel_rem_pio2+0x16a>
 800dab2:	2d01      	cmp	r5, #1
 800dab4:	d072      	beq.n	800db9c <__kernel_rem_pio2+0x24c>
 800dab6:	2d02      	cmp	r5, #2
 800dab8:	d07a      	beq.n	800dbb0 <__kernel_rem_pio2+0x260>
 800daba:	2e02      	cmp	r6, #2
 800dabc:	d12b      	bne.n	800db16 <__kernel_rem_pio2+0x1c6>
 800dabe:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 800dac2:	ee30 8b48 	vsub.f64	d8, d0, d8
 800dac6:	b330      	cbz	r0, 800db16 <__kernel_rem_pio2+0x1c6>
 800dac8:	4628      	mov	r0, r5
 800daca:	f000 f9bd 	bl	800de48 <scalbn>
 800dace:	ee38 8b40 	vsub.f64	d8, d8, d0
 800dad2:	e020      	b.n	800db16 <__kernel_rem_pio2+0x1c6>
 800dad4:	ee20 7b09 	vmul.f64	d7, d0, d9
 800dad8:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800dadc:	3801      	subs	r0, #1
 800dade:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 800dae2:	eea7 0b4a 	vfms.f64	d0, d7, d10
 800dae6:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800daea:	eca6 0a01 	vstmia	r6!, {s0}
 800daee:	ed92 0b00 	vldr	d0, [r2]
 800daf2:	ee37 0b00 	vadd.f64	d0, d7, d0
 800daf6:	e79e      	b.n	800da36 <__kernel_rem_pio2+0xe6>
 800daf8:	d105      	bne.n	800db06 <__kernel_rem_pio2+0x1b6>
 800dafa:	1e62      	subs	r2, r4, #1
 800dafc:	a906      	add	r1, sp, #24
 800dafe:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 800db02:	15f6      	asrs	r6, r6, #23
 800db04:	e7c8      	b.n	800da98 <__kernel_rem_pio2+0x148>
 800db06:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 800db0a:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800db0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db12:	da31      	bge.n	800db78 <__kernel_rem_pio2+0x228>
 800db14:	2600      	movs	r6, #0
 800db16:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800db1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db1e:	f040 809b 	bne.w	800dc58 <__kernel_rem_pio2+0x308>
 800db22:	1e62      	subs	r2, r4, #1
 800db24:	2000      	movs	r0, #0
 800db26:	454a      	cmp	r2, r9
 800db28:	da49      	bge.n	800dbbe <__kernel_rem_pio2+0x26e>
 800db2a:	2800      	cmp	r0, #0
 800db2c:	d062      	beq.n	800dbf4 <__kernel_rem_pio2+0x2a4>
 800db2e:	3c01      	subs	r4, #1
 800db30:	ab06      	add	r3, sp, #24
 800db32:	3d18      	subs	r5, #24
 800db34:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800db38:	2b00      	cmp	r3, #0
 800db3a:	d0f8      	beq.n	800db2e <__kernel_rem_pio2+0x1de>
 800db3c:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 800db40:	4628      	mov	r0, r5
 800db42:	f000 f981 	bl	800de48 <scalbn>
 800db46:	ed9f 6b3e 	vldr	d6, [pc, #248]	@ 800dc40 <__kernel_rem_pio2+0x2f0>
 800db4a:	1c62      	adds	r2, r4, #1
 800db4c:	a96a      	add	r1, sp, #424	@ 0x1a8
 800db4e:	00d3      	lsls	r3, r2, #3
 800db50:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800db54:	4622      	mov	r2, r4
 800db56:	2a00      	cmp	r2, #0
 800db58:	f280 80a8 	bge.w	800dcac <__kernel_rem_pio2+0x35c>
 800db5c:	4622      	mov	r2, r4
 800db5e:	2a00      	cmp	r2, #0
 800db60:	f2c0 80c6 	blt.w	800dcf0 <__kernel_rem_pio2+0x3a0>
 800db64:	a96a      	add	r1, sp, #424	@ 0x1a8
 800db66:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 800db6a:	ed9f 7b33 	vldr	d7, [pc, #204]	@ 800dc38 <__kernel_rem_pio2+0x2e8>
 800db6e:	f8df c0e4 	ldr.w	ip, [pc, #228]	@ 800dc54 <__kernel_rem_pio2+0x304>
 800db72:	2000      	movs	r0, #0
 800db74:	1aa1      	subs	r1, r4, r2
 800db76:	e0b0      	b.n	800dcda <__kernel_rem_pio2+0x38a>
 800db78:	2602      	movs	r6, #2
 800db7a:	e78f      	b.n	800da9c <__kernel_rem_pio2+0x14c>
 800db7c:	f853 2b04 	ldr.w	r2, [r3], #4
 800db80:	b948      	cbnz	r0, 800db96 <__kernel_rem_pio2+0x246>
 800db82:	b122      	cbz	r2, 800db8e <__kernel_rem_pio2+0x23e>
 800db84:	f1c2 7280 	rsb	r2, r2, #16777216	@ 0x1000000
 800db88:	f843 2c04 	str.w	r2, [r3, #-4]
 800db8c:	2201      	movs	r2, #1
 800db8e:	f10c 0c01 	add.w	ip, ip, #1
 800db92:	4610      	mov	r0, r2
 800db94:	e789      	b.n	800daaa <__kernel_rem_pio2+0x15a>
 800db96:	ebae 0202 	sub.w	r2, lr, r2
 800db9a:	e7f5      	b.n	800db88 <__kernel_rem_pio2+0x238>
 800db9c:	1e62      	subs	r2, r4, #1
 800db9e:	ab06      	add	r3, sp, #24
 800dba0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dba4:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800dba8:	a906      	add	r1, sp, #24
 800dbaa:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800dbae:	e784      	b.n	800daba <__kernel_rem_pio2+0x16a>
 800dbb0:	1e62      	subs	r2, r4, #1
 800dbb2:	ab06      	add	r3, sp, #24
 800dbb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dbb8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800dbbc:	e7f4      	b.n	800dba8 <__kernel_rem_pio2+0x258>
 800dbbe:	ab06      	add	r3, sp, #24
 800dbc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dbc4:	3a01      	subs	r2, #1
 800dbc6:	4318      	orrs	r0, r3
 800dbc8:	e7ad      	b.n	800db26 <__kernel_rem_pio2+0x1d6>
 800dbca:	3301      	adds	r3, #1
 800dbcc:	f852 0d04 	ldr.w	r0, [r2, #-4]!
 800dbd0:	2800      	cmp	r0, #0
 800dbd2:	d0fa      	beq.n	800dbca <__kernel_rem_pio2+0x27a>
 800dbd4:	9a04      	ldr	r2, [sp, #16]
 800dbd6:	f502 7212 	add.w	r2, r2, #584	@ 0x248
 800dbda:	446a      	add	r2, sp
 800dbdc:	eb04 000b 	add.w	r0, r4, fp
 800dbe0:	a91a      	add	r1, sp, #104	@ 0x68
 800dbe2:	1c66      	adds	r6, r4, #1
 800dbe4:	3a98      	subs	r2, #152	@ 0x98
 800dbe6:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 800dbea:	4423      	add	r3, r4
 800dbec:	42b3      	cmp	r3, r6
 800dbee:	da04      	bge.n	800dbfa <__kernel_rem_pio2+0x2aa>
 800dbf0:	461c      	mov	r4, r3
 800dbf2:	e713      	b.n	800da1c <__kernel_rem_pio2+0xcc>
 800dbf4:	9a03      	ldr	r2, [sp, #12]
 800dbf6:	2301      	movs	r3, #1
 800dbf8:	e7e8      	b.n	800dbcc <__kernel_rem_pio2+0x27c>
 800dbfa:	9902      	ldr	r1, [sp, #8]
 800dbfc:	f8dd c004 	ldr.w	ip, [sp, #4]
 800dc00:	f851 1026 	ldr.w	r1, [r1, r6, lsl #2]
 800dc04:	9104      	str	r1, [sp, #16]
 800dc06:	ee07 1a90 	vmov	s15, r1
 800dc0a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800dc0e:	2400      	movs	r4, #0
 800dc10:	eca0 7b02 	vstmia	r0!, {d7}
 800dc14:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 800dc38 <__kernel_rem_pio2+0x2e8>
 800dc18:	4686      	mov	lr, r0
 800dc1a:	4554      	cmp	r4, sl
 800dc1c:	dd03      	ble.n	800dc26 <__kernel_rem_pio2+0x2d6>
 800dc1e:	eca2 7b02 	vstmia	r2!, {d7}
 800dc22:	3601      	adds	r6, #1
 800dc24:	e7e2      	b.n	800dbec <__kernel_rem_pio2+0x29c>
 800dc26:	ecbc 5b02 	vldmia	ip!, {d5}
 800dc2a:	ed3e 6b02 	vldmdb	lr!, {d6}
 800dc2e:	3401      	adds	r4, #1
 800dc30:	eea5 7b06 	vfma.f64	d7, d5, d6
 800dc34:	e7f1      	b.n	800dc1a <__kernel_rem_pio2+0x2ca>
 800dc36:	bf00      	nop
	...
 800dc44:	3e700000 	.word	0x3e700000
 800dc48:	00000000 	.word	0x00000000
 800dc4c:	41700000 	.word	0x41700000
 800dc50:	0800e258 	.word	0x0800e258
 800dc54:	0800e218 	.word	0x0800e218
 800dc58:	4268      	negs	r0, r5
 800dc5a:	eeb0 0b48 	vmov.f64	d0, d8
 800dc5e:	f000 f8f3 	bl	800de48 <scalbn>
 800dc62:	ed9f 6b73 	vldr	d6, [pc, #460]	@ 800de30 <__kernel_rem_pio2+0x4e0>
 800dc66:	eeb4 0bc6 	vcmpe.f64	d0, d6
 800dc6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dc6e:	db17      	blt.n	800dca0 <__kernel_rem_pio2+0x350>
 800dc70:	ed9f 7b71 	vldr	d7, [pc, #452]	@ 800de38 <__kernel_rem_pio2+0x4e8>
 800dc74:	ee20 7b07 	vmul.f64	d7, d0, d7
 800dc78:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800dc7c:	aa06      	add	r2, sp, #24
 800dc7e:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 800dc82:	eea5 0b46 	vfms.f64	d0, d5, d6
 800dc86:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800dc8a:	3518      	adds	r5, #24
 800dc8c:	ee10 3a10 	vmov	r3, s0
 800dc90:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800dc94:	ee17 3a10 	vmov	r3, s14
 800dc98:	3401      	adds	r4, #1
 800dc9a:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800dc9e:	e74d      	b.n	800db3c <__kernel_rem_pio2+0x1ec>
 800dca0:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800dca4:	aa06      	add	r2, sp, #24
 800dca6:	ee10 3a10 	vmov	r3, s0
 800dcaa:	e7f6      	b.n	800dc9a <__kernel_rem_pio2+0x34a>
 800dcac:	a806      	add	r0, sp, #24
 800dcae:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 800dcb2:	9001      	str	r0, [sp, #4]
 800dcb4:	ee07 0a90 	vmov	s15, r0
 800dcb8:	3a01      	subs	r2, #1
 800dcba:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800dcbe:	ee27 7b00 	vmul.f64	d7, d7, d0
 800dcc2:	ee20 0b06 	vmul.f64	d0, d0, d6
 800dcc6:	ed21 7b02 	vstmdb	r1!, {d7}
 800dcca:	e744      	b.n	800db56 <__kernel_rem_pio2+0x206>
 800dccc:	ecbc 5b02 	vldmia	ip!, {d5}
 800dcd0:	ecb5 6b02 	vldmia	r5!, {d6}
 800dcd4:	3001      	adds	r0, #1
 800dcd6:	eea5 7b06 	vfma.f64	d7, d5, d6
 800dcda:	4548      	cmp	r0, r9
 800dcdc:	dc01      	bgt.n	800dce2 <__kernel_rem_pio2+0x392>
 800dcde:	4281      	cmp	r1, r0
 800dce0:	daf4      	bge.n	800dccc <__kernel_rem_pio2+0x37c>
 800dce2:	a842      	add	r0, sp, #264	@ 0x108
 800dce4:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800dce8:	ed81 7b00 	vstr	d7, [r1]
 800dcec:	3a01      	subs	r2, #1
 800dcee:	e736      	b.n	800db5e <__kernel_rem_pio2+0x20e>
 800dcf0:	9aa2      	ldr	r2, [sp, #648]	@ 0x288
 800dcf2:	2a02      	cmp	r2, #2
 800dcf4:	dc0a      	bgt.n	800dd0c <__kernel_rem_pio2+0x3bc>
 800dcf6:	2a00      	cmp	r2, #0
 800dcf8:	dc2d      	bgt.n	800dd56 <__kernel_rem_pio2+0x406>
 800dcfa:	d046      	beq.n	800dd8a <__kernel_rem_pio2+0x43a>
 800dcfc:	f008 0007 	and.w	r0, r8, #7
 800dd00:	f50d 7d13 	add.w	sp, sp, #588	@ 0x24c
 800dd04:	ecbd 8b06 	vpop	{d8-d10}
 800dd08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd0c:	9aa2      	ldr	r2, [sp, #648]	@ 0x288
 800dd0e:	2a03      	cmp	r2, #3
 800dd10:	d1f4      	bne.n	800dcfc <__kernel_rem_pio2+0x3ac>
 800dd12:	a942      	add	r1, sp, #264	@ 0x108
 800dd14:	f1a3 0208 	sub.w	r2, r3, #8
 800dd18:	440a      	add	r2, r1
 800dd1a:	4611      	mov	r1, r2
 800dd1c:	4620      	mov	r0, r4
 800dd1e:	2800      	cmp	r0, #0
 800dd20:	f1a1 0108 	sub.w	r1, r1, #8
 800dd24:	dc52      	bgt.n	800ddcc <__kernel_rem_pio2+0x47c>
 800dd26:	4621      	mov	r1, r4
 800dd28:	2901      	cmp	r1, #1
 800dd2a:	f1a2 0208 	sub.w	r2, r2, #8
 800dd2e:	dc5d      	bgt.n	800ddec <__kernel_rem_pio2+0x49c>
 800dd30:	ed9f 7b43 	vldr	d7, [pc, #268]	@ 800de40 <__kernel_rem_pio2+0x4f0>
 800dd34:	aa42      	add	r2, sp, #264	@ 0x108
 800dd36:	4413      	add	r3, r2
 800dd38:	2c01      	cmp	r4, #1
 800dd3a:	dc67      	bgt.n	800de0c <__kernel_rem_pio2+0x4bc>
 800dd3c:	ed9d 5b42 	vldr	d5, [sp, #264]	@ 0x108
 800dd40:	ed9d 6b44 	vldr	d6, [sp, #272]	@ 0x110
 800dd44:	2e00      	cmp	r6, #0
 800dd46:	d167      	bne.n	800de18 <__kernel_rem_pio2+0x4c8>
 800dd48:	ed87 5b00 	vstr	d5, [r7]
 800dd4c:	ed87 6b02 	vstr	d6, [r7, #8]
 800dd50:	ed87 7b04 	vstr	d7, [r7, #16]
 800dd54:	e7d2      	b.n	800dcfc <__kernel_rem_pio2+0x3ac>
 800dd56:	ed9f 6b3a 	vldr	d6, [pc, #232]	@ 800de40 <__kernel_rem_pio2+0x4f0>
 800dd5a:	aa42      	add	r2, sp, #264	@ 0x108
 800dd5c:	4413      	add	r3, r2
 800dd5e:	4622      	mov	r2, r4
 800dd60:	2a00      	cmp	r2, #0
 800dd62:	da24      	bge.n	800ddae <__kernel_rem_pio2+0x45e>
 800dd64:	b34e      	cbz	r6, 800ddba <__kernel_rem_pio2+0x46a>
 800dd66:	eeb1 7b46 	vneg.f64	d7, d6
 800dd6a:	ed87 7b00 	vstr	d7, [r7]
 800dd6e:	ed9d 7b42 	vldr	d7, [sp, #264]	@ 0x108
 800dd72:	aa44      	add	r2, sp, #272	@ 0x110
 800dd74:	2301      	movs	r3, #1
 800dd76:	ee37 7b46 	vsub.f64	d7, d7, d6
 800dd7a:	429c      	cmp	r4, r3
 800dd7c:	da20      	bge.n	800ddc0 <__kernel_rem_pio2+0x470>
 800dd7e:	b10e      	cbz	r6, 800dd84 <__kernel_rem_pio2+0x434>
 800dd80:	eeb1 7b47 	vneg.f64	d7, d7
 800dd84:	ed87 7b02 	vstr	d7, [r7, #8]
 800dd88:	e7b8      	b.n	800dcfc <__kernel_rem_pio2+0x3ac>
 800dd8a:	ed9f 7b2d 	vldr	d7, [pc, #180]	@ 800de40 <__kernel_rem_pio2+0x4f0>
 800dd8e:	aa42      	add	r2, sp, #264	@ 0x108
 800dd90:	4413      	add	r3, r2
 800dd92:	2c00      	cmp	r4, #0
 800dd94:	da05      	bge.n	800dda2 <__kernel_rem_pio2+0x452>
 800dd96:	b10e      	cbz	r6, 800dd9c <__kernel_rem_pio2+0x44c>
 800dd98:	eeb1 7b47 	vneg.f64	d7, d7
 800dd9c:	ed87 7b00 	vstr	d7, [r7]
 800dda0:	e7ac      	b.n	800dcfc <__kernel_rem_pio2+0x3ac>
 800dda2:	ed33 6b02 	vldmdb	r3!, {d6}
 800dda6:	3c01      	subs	r4, #1
 800dda8:	ee37 7b06 	vadd.f64	d7, d7, d6
 800ddac:	e7f1      	b.n	800dd92 <__kernel_rem_pio2+0x442>
 800ddae:	ed33 7b02 	vldmdb	r3!, {d7}
 800ddb2:	3a01      	subs	r2, #1
 800ddb4:	ee36 6b07 	vadd.f64	d6, d6, d7
 800ddb8:	e7d2      	b.n	800dd60 <__kernel_rem_pio2+0x410>
 800ddba:	eeb0 7b46 	vmov.f64	d7, d6
 800ddbe:	e7d4      	b.n	800dd6a <__kernel_rem_pio2+0x41a>
 800ddc0:	ecb2 6b02 	vldmia	r2!, {d6}
 800ddc4:	3301      	adds	r3, #1
 800ddc6:	ee37 7b06 	vadd.f64	d7, d7, d6
 800ddca:	e7d6      	b.n	800dd7a <__kernel_rem_pio2+0x42a>
 800ddcc:	ed91 7b00 	vldr	d7, [r1]
 800ddd0:	ed91 5b02 	vldr	d5, [r1, #8]
 800ddd4:	3801      	subs	r0, #1
 800ddd6:	ee37 6b05 	vadd.f64	d6, d7, d5
 800ddda:	ee37 7b46 	vsub.f64	d7, d7, d6
 800ddde:	ed81 6b00 	vstr	d6, [r1]
 800dde2:	ee37 7b05 	vadd.f64	d7, d7, d5
 800dde6:	ed81 7b02 	vstr	d7, [r1, #8]
 800ddea:	e798      	b.n	800dd1e <__kernel_rem_pio2+0x3ce>
 800ddec:	ed92 7b00 	vldr	d7, [r2]
 800ddf0:	ed92 5b02 	vldr	d5, [r2, #8]
 800ddf4:	3901      	subs	r1, #1
 800ddf6:	ee37 6b05 	vadd.f64	d6, d7, d5
 800ddfa:	ee37 7b46 	vsub.f64	d7, d7, d6
 800ddfe:	ed82 6b00 	vstr	d6, [r2]
 800de02:	ee37 7b05 	vadd.f64	d7, d7, d5
 800de06:	ed82 7b02 	vstr	d7, [r2, #8]
 800de0a:	e78d      	b.n	800dd28 <__kernel_rem_pio2+0x3d8>
 800de0c:	ed33 6b02 	vldmdb	r3!, {d6}
 800de10:	3c01      	subs	r4, #1
 800de12:	ee37 7b06 	vadd.f64	d7, d7, d6
 800de16:	e78f      	b.n	800dd38 <__kernel_rem_pio2+0x3e8>
 800de18:	eeb1 5b45 	vneg.f64	d5, d5
 800de1c:	eeb1 6b46 	vneg.f64	d6, d6
 800de20:	ed87 5b00 	vstr	d5, [r7]
 800de24:	eeb1 7b47 	vneg.f64	d7, d7
 800de28:	ed87 6b02 	vstr	d6, [r7, #8]
 800de2c:	e790      	b.n	800dd50 <__kernel_rem_pio2+0x400>
 800de2e:	bf00      	nop
 800de30:	00000000 	.word	0x00000000
 800de34:	41700000 	.word	0x41700000
 800de38:	00000000 	.word	0x00000000
 800de3c:	3e700000 	.word	0x3e700000
	...

0800de48 <scalbn>:
 800de48:	ee10 1a90 	vmov	r1, s1
 800de4c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800de50:	b98b      	cbnz	r3, 800de76 <scalbn+0x2e>
 800de52:	ee10 3a10 	vmov	r3, s0
 800de56:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800de5a:	4319      	orrs	r1, r3
 800de5c:	d00a      	beq.n	800de74 <scalbn+0x2c>
 800de5e:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 800df10 <scalbn+0xc8>
 800de62:	4b37      	ldr	r3, [pc, #220]	@ (800df40 <scalbn+0xf8>)
 800de64:	ee20 0b07 	vmul.f64	d0, d0, d7
 800de68:	4298      	cmp	r0, r3
 800de6a:	da0b      	bge.n	800de84 <scalbn+0x3c>
 800de6c:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 800df18 <scalbn+0xd0>
 800de70:	ee20 0b07 	vmul.f64	d0, d0, d7
 800de74:	4770      	bx	lr
 800de76:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800de7a:	4293      	cmp	r3, r2
 800de7c:	d107      	bne.n	800de8e <scalbn+0x46>
 800de7e:	ee30 0b00 	vadd.f64	d0, d0, d0
 800de82:	4770      	bx	lr
 800de84:	ee10 1a90 	vmov	r1, s1
 800de88:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800de8c:	3b36      	subs	r3, #54	@ 0x36
 800de8e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800de92:	4290      	cmp	r0, r2
 800de94:	dd0d      	ble.n	800deb2 <scalbn+0x6a>
 800de96:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 800df20 <scalbn+0xd8>
 800de9a:	ee10 3a90 	vmov	r3, s1
 800de9e:	eeb0 6b47 	vmov.f64	d6, d7
 800dea2:	ed9f 5b21 	vldr	d5, [pc, #132]	@ 800df28 <scalbn+0xe0>
 800dea6:	2b00      	cmp	r3, #0
 800dea8:	fe27 7b05 	vselge.f64	d7, d7, d5
 800deac:	ee27 0b06 	vmul.f64	d0, d7, d6
 800deb0:	4770      	bx	lr
 800deb2:	4418      	add	r0, r3
 800deb4:	f240 73fe 	movw	r3, #2046	@ 0x7fe
 800deb8:	4298      	cmp	r0, r3
 800deba:	dcec      	bgt.n	800de96 <scalbn+0x4e>
 800debc:	2800      	cmp	r0, #0
 800debe:	dd0a      	ble.n	800ded6 <scalbn+0x8e>
 800dec0:	f021 41ff 	bic.w	r1, r1, #2139095040	@ 0x7f800000
 800dec4:	ec53 2b10 	vmov	r2, r3, d0
 800dec8:	f421 01e0 	bic.w	r1, r1, #7340032	@ 0x700000
 800decc:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 800ded0:	ec43 2b10 	vmov	d0, r2, r3
 800ded4:	4770      	bx	lr
 800ded6:	f110 0f35 	cmn.w	r0, #53	@ 0x35
 800deda:	da09      	bge.n	800def0 <scalbn+0xa8>
 800dedc:	ed9f 7b0e 	vldr	d7, [pc, #56]	@ 800df18 <scalbn+0xd0>
 800dee0:	ee10 3a90 	vmov	r3, s1
 800dee4:	eeb0 6b47 	vmov.f64	d6, d7
 800dee8:	ed9f 5b11 	vldr	d5, [pc, #68]	@ 800df30 <scalbn+0xe8>
 800deec:	2b00      	cmp	r3, #0
 800deee:	e7db      	b.n	800dea8 <scalbn+0x60>
 800def0:	f021 41ff 	bic.w	r1, r1, #2139095040	@ 0x7f800000
 800def4:	ec53 2b10 	vmov	r2, r3, d0
 800def8:	3036      	adds	r0, #54	@ 0x36
 800defa:	f421 01e0 	bic.w	r1, r1, #7340032	@ 0x700000
 800defe:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 800df02:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 800df38 <scalbn+0xf0>
 800df06:	ec43 2b10 	vmov	d0, r2, r3
 800df0a:	e7b1      	b.n	800de70 <scalbn+0x28>
 800df0c:	f3af 8000 	nop.w
 800df10:	00000000 	.word	0x00000000
 800df14:	43500000 	.word	0x43500000
 800df18:	c2f8f359 	.word	0xc2f8f359
 800df1c:	01a56e1f 	.word	0x01a56e1f
 800df20:	8800759c 	.word	0x8800759c
 800df24:	7e37e43c 	.word	0x7e37e43c
 800df28:	8800759c 	.word	0x8800759c
 800df2c:	fe37e43c 	.word	0xfe37e43c
 800df30:	c2f8f359 	.word	0xc2f8f359
 800df34:	81a56e1f 	.word	0x81a56e1f
 800df38:	00000000 	.word	0x00000000
 800df3c:	3c900000 	.word	0x3c900000
 800df40:	ffff3cb0 	.word	0xffff3cb0
 800df44:	00000000 	.word	0x00000000

0800df48 <floor>:
 800df48:	ee10 3a90 	vmov	r3, s1
 800df4c:	f3c3 500a 	ubfx	r0, r3, #20, #11
 800df50:	ee10 2a10 	vmov	r2, s0
 800df54:	f2a0 31ff 	subw	r1, r0, #1023	@ 0x3ff
 800df58:	2913      	cmp	r1, #19
 800df5a:	b530      	push	{r4, r5, lr}
 800df5c:	4615      	mov	r5, r2
 800df5e:	dc33      	bgt.n	800dfc8 <floor+0x80>
 800df60:	2900      	cmp	r1, #0
 800df62:	da18      	bge.n	800df96 <floor+0x4e>
 800df64:	ed9f 7b30 	vldr	d7, [pc, #192]	@ 800e028 <floor+0xe0>
 800df68:	ee30 0b07 	vadd.f64	d0, d0, d7
 800df6c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800df70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800df74:	dd0a      	ble.n	800df8c <floor+0x44>
 800df76:	2b00      	cmp	r3, #0
 800df78:	da50      	bge.n	800e01c <floor+0xd4>
 800df7a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800df7e:	4313      	orrs	r3, r2
 800df80:	2200      	movs	r2, #0
 800df82:	4293      	cmp	r3, r2
 800df84:	4b2a      	ldr	r3, [pc, #168]	@ (800e030 <floor+0xe8>)
 800df86:	bf08      	it	eq
 800df88:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 800df8c:	4619      	mov	r1, r3
 800df8e:	4610      	mov	r0, r2
 800df90:	ec41 0b10 	vmov	d0, r0, r1
 800df94:	e01f      	b.n	800dfd6 <floor+0x8e>
 800df96:	4827      	ldr	r0, [pc, #156]	@ (800e034 <floor+0xec>)
 800df98:	4108      	asrs	r0, r1
 800df9a:	ea03 0400 	and.w	r4, r3, r0
 800df9e:	4314      	orrs	r4, r2
 800dfa0:	d019      	beq.n	800dfd6 <floor+0x8e>
 800dfa2:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800e028 <floor+0xe0>
 800dfa6:	ee30 0b07 	vadd.f64	d0, d0, d7
 800dfaa:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800dfae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dfb2:	ddeb      	ble.n	800df8c <floor+0x44>
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	bfbe      	ittt	lt
 800dfb8:	f44f 1280 	movlt.w	r2, #1048576	@ 0x100000
 800dfbc:	410a      	asrlt	r2, r1
 800dfbe:	189b      	addlt	r3, r3, r2
 800dfc0:	ea23 0300 	bic.w	r3, r3, r0
 800dfc4:	2200      	movs	r2, #0
 800dfc6:	e7e1      	b.n	800df8c <floor+0x44>
 800dfc8:	2933      	cmp	r1, #51	@ 0x33
 800dfca:	dd05      	ble.n	800dfd8 <floor+0x90>
 800dfcc:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800dfd0:	d101      	bne.n	800dfd6 <floor+0x8e>
 800dfd2:	ee30 0b00 	vadd.f64	d0, d0, d0
 800dfd6:	bd30      	pop	{r4, r5, pc}
 800dfd8:	f2a0 4413 	subw	r4, r0, #1043	@ 0x413
 800dfdc:	f04f 30ff 	mov.w	r0, #4294967295
 800dfe0:	40e0      	lsrs	r0, r4
 800dfe2:	4210      	tst	r0, r2
 800dfe4:	d0f7      	beq.n	800dfd6 <floor+0x8e>
 800dfe6:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 800e028 <floor+0xe0>
 800dfea:	ee30 0b07 	vadd.f64	d0, d0, d7
 800dfee:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800dff2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dff6:	ddc9      	ble.n	800df8c <floor+0x44>
 800dff8:	2b00      	cmp	r3, #0
 800dffa:	da02      	bge.n	800e002 <floor+0xba>
 800dffc:	2914      	cmp	r1, #20
 800dffe:	d103      	bne.n	800e008 <floor+0xc0>
 800e000:	3301      	adds	r3, #1
 800e002:	ea22 0200 	bic.w	r2, r2, r0
 800e006:	e7c1      	b.n	800df8c <floor+0x44>
 800e008:	2401      	movs	r4, #1
 800e00a:	f1c1 0134 	rsb	r1, r1, #52	@ 0x34
 800e00e:	fa04 f101 	lsl.w	r1, r4, r1
 800e012:	440a      	add	r2, r1
 800e014:	42aa      	cmp	r2, r5
 800e016:	bf38      	it	cc
 800e018:	191b      	addcc	r3, r3, r4
 800e01a:	e7f2      	b.n	800e002 <floor+0xba>
 800e01c:	2200      	movs	r2, #0
 800e01e:	4613      	mov	r3, r2
 800e020:	e7b4      	b.n	800df8c <floor+0x44>
 800e022:	bf00      	nop
 800e024:	f3af 8000 	nop.w
 800e028:	8800759c 	.word	0x8800759c
 800e02c:	7e37e43c 	.word	0x7e37e43c
 800e030:	bff00000 	.word	0xbff00000
 800e034:	000fffff 	.word	0x000fffff

0800e038 <_init>:
 800e038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e03a:	bf00      	nop
 800e03c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e03e:	bc08      	pop	{r3}
 800e040:	469e      	mov	lr, r3
 800e042:	4770      	bx	lr

0800e044 <_fini>:
 800e044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e046:	bf00      	nop
 800e048:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e04a:	bc08      	pop	{r3}
 800e04c:	469e      	mov	lr, r3
 800e04e:	4770      	bx	lr
